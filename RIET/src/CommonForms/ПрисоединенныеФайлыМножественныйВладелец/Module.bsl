///////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и элементов формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ИмяСправочникаХранилищаФайлов;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = Параметры.ВладелецФайла;
	Если ВладелецФайла.Количество() = 0 тогда 
		Возврат;	
	КонецЕсли;
	
	УстановитьСвойстваДинамическогоСписка(ИмяСправочникаХранилищаФайлов);
	СоздатьЭлементыФормы();
	
	УстановитьУсловноеОформление();
	
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	//
	Если Не ПравоДоступа("Добавление", МетаданныеСправочникаСФайлами) Тогда
		УстановитьКнопкиДобавленияНевидимыми();
	КонецЕсли;
	//
	Если Не ПравоДоступа("Изменение", МетаданныеСправочникаСФайлами)
	 Или Не ПравоДоступа("Изменение", ВладелецФайла[0].Значение.Метаданные())
	 Или Параметры.ТолькоПросмотр = Истина Тогда
		УстановитьКнопкиИзмененияНевидимыми(Элементы);
	КонецЕсли;
	
	ИменаВсехКомандФормы = ПолучитьИменаКомандФормы();
	ИменаЭлементов = Новый Массив;
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаВсехКомандФормы.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ИменаЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИменаЭлементовКнопокФормы = Новый ФиксированныйМассив(ИменаЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_ПрисоединенныйФайл" Тогда
		Возврат;
	КонецЕсли;
		
	ФайлСсылка = Источник;
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		ФайлСсылка = Источник[0];
	КонецЕсли;
	ЭтоНовыйФайл = Ложь;
	Если Параметр.Свойство("ЭтоНовый", ЭтоНовыйФайл) И ЭтоНовыйФайл Тогда
		Элементы.Список.ТекущаяСтрока = ФайлСсылка;
		УстановитьДоступностьКнопок();
	Иначе
		Если НЕ ПроверитьДействиеРазрешено() Тогда
			Возврат;
		КонецЕсли;
		
		Если ФайлСсылка = Элементы.Список.ТекущиеДанные.Ссылка Тогда
			УстановитьДоступностьКнопок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СтандартнаяКомандаСкопировать();
	Иначе
		ДобавитьФайлы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	СтандартнаяКомандаСвойстваОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	СтандартнаяКомандаПометкаУдаления();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") И ФайлПринятый.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла")).Значение;
		ПрисоединенныеФайлыСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(ВладелецФайла, УникальныйИдентификатор, МассивИменФайлов);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура ДобавитьФайлы(Команда = Неопределено)
	
	Если НЕ Элементы.ФормаДобавитьФайлы.Видимость
	 ИЛИ НЕ Элементы.ФормаДобавитьФайлы.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла")).Значение;
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(ВладелецФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ТекущиеДанные.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
	 ИЛИ (ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован
	 ИЛИ (ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
	 ИЛИ ТекущиеДанные.ПодписанЭП
	 ИЛИ ТекущиеДанные.ФайлРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, , Ложь);
	
	Если ДанныеФайла.Зашифрован
	 ИЛИ ДанныеФайла.ПодписанЭП
	 ИЛИ ДанныеФайла.ФайлРедактируется Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	Если ПрисоединенныеФайлыСлужебныйВызовСервера.ОбновитьПрисоединенныйФайл(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор) Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяКомандаСвойстваОбъекта(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл,ТолькоПросмотр", ТекущиеДанные.Ссылка, ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяКомандаПометкаУдаления(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено("ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ТекущиеДанные.Ссылка);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Пометить ""%1"" на удаление?'"), ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеПометкиУдаления(ТекущиеДанные.Ссылка, НЕ ТекущиеДанные.ПометкаУдаления);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяКомандаСкопировать(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместного изменения

&НаКлиенте
Процедура Редактировать(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если (ТекущиеДанные.ФайлРедактируется И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь)
	 ИЛИ ТекущиеДанные.Зашифрован
	 ИЛИ ТекущиеДанные.ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если (ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
	 ИЛИ ДанныеФайла.Зашифрован
	 ИЛИ ДанныеФайла.ПодписанЭП Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	
	Если НЕ ТекущиеДанные.ФайлРедактируется Тогда
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ТекущиеДанные.Ссылка);
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ФайлРедактируется
		ИЛИ (ТекущиеДанные.ФайлРедактируется И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, , Ложь);
	
	Если НЕ ДанныеФайла.ФайлРедактируется
		ИЛИ (ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОФайле = Новый Структура;
	
	Если ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
		ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(ТекущиеДанные.Ссылка, ИнформацияОФайле);
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки ЭЦП и шифрования

&НаКлиенте
Процедура ЭЦППодписать(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	Если ПрисоединенныеФайлыСлужебныйКлиент.СформироватьПодписьФайла(ТекущиеДанные.Ссылка, ДанныеФайла) Тогда
		ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.ДобавитьЭПИзФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;

	ПрисоединенныеФайлыСлужебныйКлиент.Зашифровать(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда = Неопределено)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если НЕ ДанныеФайла.Зашифрован Тогда
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка); // файл может быть изменен в другом сеансе
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйКлиент.Расшифровать(ТекущиеДанные.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Служебные функции

&НаКлиенте
Функция ПроверитьДействиеРазрешено(ТекущееДействие = "")
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущееДействие = "ПометкаУдаления" и ТекущиеДанные.ФайлРедактируется Тогда
		ТекстПредупреждения = ВернутьСтр("ru = 'Действие недоступно, так как файл занят для редактирования'");
		Если не ТекущиеДанные.ФайлРедактируетТекущийПользователь Тогда
			ТекстПредупреждения = ТекстПредупреждения + " "
								+ ВернутьСтр("ru = 'другим пользователем'");
		КонецЕсли;
		ТекстПредупреждения = ТекстПредупреждения + ".";
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;	
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = ТипСправочникаСФайлами Тогда
		Возврат Истина;
	Иначе
		Предупреждение(ВернутьСтр("ru = 'Действие недоступно для строки группировки списка.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ФормаСтандартнаяКомандаСкопировать.Видимость
	 ИЛИ НЕ Элементы.ФормаСтандартнаяКомандаСкопировать.Доступность Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура УстановитьКнопкиДобавленияНевидимыми()
	
	Элементы.ФормаДобавитьФайлы.Доступность = Ложь;
	Элементы.ФормаДобавитьФайлы.Видимость   = Ложь;
	
	Элементы.ФормаСтандартнаяКомандаСкопировать.Доступность = Ложь;
	Элементы.ФормаСтандартнаяКомандаСкопировать.Видимость   = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкиИзмененияНевидимыми(Элементы)
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
#Если ВебКлиент Тогда
	Возврат;
#КонецЕсли
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Элементы.Список.ТекущаяСтрока) <> ТипСправочникаСФайлами Тогда
		ИменаКоманд = Новый Массив;
	Иначе
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		ИменаКоманд = ПолучитьДоступныеКоманды(ТекущиеДанные.ФайлРедактируется,
												ТекущиеДанные.ФайлРедактируетТекущийПользователь,
												ТекущиеДанные.ПодписанЭП,
												ТекущиеДанные.Зашифрован);
	КонецЕсли;
	
	Для Каждого ИмяЭлементаФормы ИЗ ИменаЭлементовКнопокФормы Цикл
		ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			Если НЕ ЭлементФормы.Доступность Тогда
				ЭлементФормы.Доступность = Истина;
			КонецЕсли;
		ИначеЕсли ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеПометкиУдаления(ПрисоединенныйФайл, ПометкаУдаления)
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.ПометкаУдаления = ПометкаУдаления;
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	ДобавитьЭлементОтбораДанных(ЭлементУО, "ФайлРедактируется", Истина);
	ДобавитьЭлементОтбораДанных(ЭлементУО, "ФайлРедактируетТекущийПользователь", Истина);
	
	ЭлементЦветаОформления = ЭлементУО.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ФайлЗанятыйТекущимПользователем.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	ДобавитьЭлементОтбораДанных(ЭлементУО, "ФайлРедактируется", Истина);
	ДобавитьЭлементОтбораДанных(ЭлементУО, "ФайлРедактируетТекущийПользователь", Ложь);
	
	ЭлементЦветаОформления = ЭлементУО.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ФайлЗанятыйДругимПользователем.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЭлементОтбораДанных(ЭлементУсловногоОФормления, Поле, ПравоеЗначение)
	
	ЭлементОтбораДанных = ЭлементУсловногоОФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбораДанных.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	ЭлементТаблица = Элементы.Список;
	
	ЭлементТаблица.КартинкаСтрок = БиблиотекаКартинок.КоллекцияПиктограммФайлов;
	ЭлементТаблица.ПутьКДаннымКартинкиСтроки = "Список.ИндексКартинки";
	ЭлементТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	ДобавитьПолеКартинкиВСписок(ЭлементТаблица, "ПодписанЭП", БиблиотекаКартинок.ПодписанЭП, БиблиотекаКартинок.ПодписанЭП);
	ДобавитьПолеКартинкиВСписок(ЭлементТаблица, "Зашифрован", БиблиотекаКартинок.Зашифрован, БиблиотекаКартинок.Зашифрован);
	
	ДобавитьПолеВСписок(ЭлементТаблица, "Ссылка",,,ВернутьСтр("ru = 'Наименование'"));
	ДобавитьПолеВСписок(ЭлементТаблица, "Описание", 1);
	ДобавитьПолеВСписок(ЭлементТаблица, "ДатаСоздания");
	ДобавитьПолеВСписок(ЭлементТаблица, "Автор");
	ДобавитьПолеВСписок(ЭлементТаблица, "Размер", , , ВернутьСтр("ru = 'Размер (байт)'"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеВСписок(Контейнер, ИмяРеквизита, Высота = 0, Видимость = Истина, Заголовок = "")
	
	Элемент = Элементы.Добавить("Список" + ИмяРеквизита, Тип("ПолеФормы"), Контейнер);
	Элемент.ПутьКДанным = "Список." + ИмяРеквизита;
	Элемент.Высота = Высота;
	Элемент.Видимость = Видимость;
	Элемент.Заголовок = Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеКартинкиВСписок(Контейнер, ИмяРеквизита, КартинкаЗначений, КартинкаШапки = Неопределено)
	
	Элемент = Элементы.Добавить("Список" + ИмяРеквизита, Тип("ПолеФормы"), Контейнер);
	Элемент.Вид = ВидПоляФормы.ПолеКартинки;
	Элемент.ПутьКДанным			= "Список."+ИмяРеквизита;
	Элемент.КартинкаЗначений = КартинкаЗначений;
	Если КартинкаШапки = Неопределено Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элемент.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСписка(ИмяСправочникаХранилищаФайлов)
	
	ИмяСправочникаХранилищаФайлов = СтрЗаменить("[ИмяОбъекта]ПрисоединенныеФайлы", "[ИмяОбъекта]",
				СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВладелецФайла[0].Значение.Метаданные().ПолноеИмя(), ".")[1]);
	
	ТекстЗапроса = ШаблонЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочника]", ИмяСправочникаХранилищаФайлов);
	
	Список.ТекстЗапроса = ТекстЗапроса;
	Список.ДинамическоеСчитываниеДанных = Истина;
	
	Список.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", ВладелецФайла);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
	Список.ОсновнаяТаблица = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	Список.УстановитьОбязательноеИспользование("Ссылка", Истина);
	Список.УстановитьОбязательноеИспользование("ПометкаУдаления", Истина);
	Список.УстановитьОбязательноеИспользование("Зашифрован", Истина);
	Список.УстановитьОбязательноеИспользование("ФайлРедактируется", Истина);
	Список.УстановитьОбязательноеИспользование("ФайлРедактируетТекущийПользователь", Истина);
	Список.УстановитьОбязательноеИспользование("ПодписанЭП", Истина);
	Список.УстановитьОбязательноеИспользование("Зашифрован", Истина);
	Список.УстановитьОбязательноеИспользование("Редактирует", Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШаблонЗапроса()
	
	ШаблонЗапроса = "ВЫБРАТЬ
					|	Файлы.Ссылка,
					|	Файлы.ПометкаУдаления,
					|	Файлы.Наименование,
					|	Файлы.Расширение,
					|	Файлы.Автор,
					|	Файлы.ДатаСоздания,
					|	Файлы.ДатаМодификацииУниверсальная,
					|	ВЫБОР
					|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
					|			ТОГДА Файлы.ИндексКартинки + 1
					|		ИНАЧЕ Файлы.ИндексКартинки
					|	КОНЕЦ КАК ИндексКартинки,
					|	Файлы.Описание,
					|	Файлы.ПодписанЭП,
					|	Файлы.Зашифрован,
					|	Файлы.Размер КАК Размер,
					|	Файлы.ВладелецФайла,
					|	ВЫБОР
					|		КОГДА Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
					|			ТОГДА Ложь
					|		ИНАЧЕ Истина
					|	КОНЕЦ КАК ФайлРедактируется,
					|	ВЫБОР
					|		КОГДА Файлы.Редактирует = &ТекущийПользователь
					|			ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь
					|ИЗ
					|	Справочник.[ИмяСправочника] КАК Файлы
					|ГДЕ
					|	Файлы.ВладелецФайла = &ВладелецФайла";

	Возврат ШаблонЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// зависимые от состояния объектов
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	ИменаКоманд.Добавить("Редактировать");
	
	ИменаКоманд.Добавить("ЭЦППодписать");
	ИменаКоманд.Добавить("ДобавитьЭЦПИзФайла");
	ИменаКоманд.Добавить("СохранитьВместеСЭЦП");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	// независимые от состояния объектов
	ИменаКоманд.Добавить("ДобавитьФайлы");
	ИменаКоманд.Добавить("СтандартнаяКомандаПометкаУдаления");
	ИменаКоманд.Добавить("СтандартнаяКомандаСкопировать");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// простые команды - доступны любому пользователю читающему файлы
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
								 ФайлРедактируетТекущийПользователь,
								 ФайлПодписан,
								 ФайлЗашифрован)
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандыЭЦП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭЦП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭЦП(ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "ЭЦППодписать");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭЦПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭЦП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры



