Перем ЕстьОшибки;

&НаСервере
Функция CreateНаСервере()
	
	СообщениеРезультат = "";
	ЕстьОшибки = Ложь;
	
	НачатьТранзакцию();
	
	Если НЕ ЗначениеЗаполнено(TransportRequest) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран Transport request");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	ДанныеTrip = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Trip, "ServiceProvider,MOT,Equipment,TypeOfTransport,Transport");
	
	Если НЕ ЕстьОшибки Тогда
		
		Если BaseCostSum > 0  И ЗначениеЗаполнено(Currency) Тогда
			
			НомерSecondaryTrip = СоздатьSecondaryTrip();
			
			Если ЗначениеЗаполнено(НомерSecondaryTrip) Тогда
				СообщениеРезультат = "Успешно создан - " + НомерSecondaryTrip;
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте пожалуйста данные по сумме и валюте");
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные по Trip не изменились");
		ЕстьОшибки = Истина;
			
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СообщениеРезультат", СообщениеРезультат);
	СтруктураДанных.Вставить("ЕстьОшибки", ЕстьОшибки);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура Create(Команда)
	
	СтруктураДанных = CreateНаСервере();
	
	Если НЕ СтруктураДанных.ЕстьОшибки Тогда
		СписокПараметров = Новый Структура();
		СписокПараметров.Вставить("Сообщение", СтруктураДанных.СообщениеРезультат);
		Закрыть(СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.Trip);
	
	Trip = Параметры.Trip;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Parcels.TransportRequest
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В
	|			(ВЫБРАТЬ
	|				TripNonLawsonCompaniesParcels.Parcel
	|			ИЗ
	|				Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|			ГДЕ
	|				TripNonLawsonCompaniesParcels.Ссылка = &Trip)
	|
	|СГРУППИРОВАТЬ ПО
	|	Parcels.TransportRequest";
	Запрос.УстановитьПараметр("Trip", Параметры.Trip);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		МассивTR = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("TransportRequest");
		Для Каждого TR Из МассивTR Цикл
			Элементы.TransportRequest.СписокВыбора.Добавить(TR);
		КонецЦикла;
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивTR));
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.TransportRequest.ПараметрыВыбора = НовыеПараметрыВыбора;
		
		Если МассивTR.Количество() = 1 Тогда
			TransportRequest = МассивTR[0];
			ЗаполнитьПоTR();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден Transport request к - " + Параметры.Trip);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СоздатьSecondaryTR()
	
	
	
КонецФункции

&НаСервере
Функция СоздатьSecondaryTrip()
	
	ДокTrip = Документы.TripNonLawsonCompanies.СоздатьДокумент();
	// { RGS LGoncharova 10.12.2018 S-I-0006465
	//ЗаполнитьЗначенияСвойств(ДокTrip, Trip);
	ЗаполнитьЗначенияСвойств(ДокTrip, Trip, , "VerifiedByBillingSpecialist");
	// } RGS LGoncharova 10.12.2018 S-I-0006465
	ЗаполнитьЗначенияСвойств(ДокTrip, ЭтотОбъект);
	ДокTrip.Secondary = Истина;
	ДокTrip.Primary = Trip;
	ДокTrip.Проведен = Неопределено;
	ДокTrip.Номер = Неопределено;
	ДокTrip.Дата = ТекущаяДата();
	ДокTrip.BaseCostsSum = BaseCostSum;
	ДокTrip.BaseCostsSumSLBUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(BaseCostSum, Currency, ТекущаяДата());
	ДокTrip.TotalCostsSum = BaseCostSum;
	ДокTrip.TotalCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(BaseCostSum, Currency, ТекущаяДата());
	ДокTrip.Costs.Загрузить(AccessorialСosts.Выгрузить());
	
	ДокTrip.SecondaryCompany = Company;
	ДокTrip.SecondaryCostCenter = CostCenter;
	ДокTrip.SecondaryLegalEntity = LegalEntity;
	ДокTrip.SecondaryProductLine = ProductLine;
	ДокTrip.SecondarySegment = Segment;
	ДокTrip.SecondarySegmentLawson = SegmentLawson;
	
	//Попытка
		ДокTrip.Записать();
		Возврат ДокTrip.Номер;
	//Исключение
	//	Возврат Неопределено;
	//КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура MOTПриИзменении(Элемент)
	
	Элементы.Equipment.ПараметрыВыбора = ПолучитьПараметрыВыбораEquipment(MOT);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВыбораEquipment(MOT)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("MOT", MOT);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	EquipmentsMOTs.Ссылка КАК Equipment
	|ИЗ
	|	Справочник.Equipments.MOTs КАК EquipmentsMOTs
	|ГДЕ
	|	EquipmentsMOTs.MOT = &MOT
	|	И НЕ EquipmentsMOTs.Ссылка.ПометкаУдаления";
	
	МассивEquipments = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Equipment");
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивEquipments));
	
	Возврат Новый ФиксированныйМассив(НовыйМассивПараметров);
		
КонецФункции


&НаКлиенте
Процедура EquipmentНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(MOT) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'MOT / Способ перевозки'!";
		Иначе 	
			ТекстОшибки = "Select 'MOT' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "MOT");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура TransportНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(MOT) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'MOT / Способ перевозки'!";
		Иначе 	
			ТекстОшибки = "Select 'MOT' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "MOT");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Equipment) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Equipment / Тип транспортного средства'!";
		Иначе 	
			ТекстОшибки = "Select 'Equipment' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "Equipment");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TypeOfTransport) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Type of transport / Тип транспорта'!";
		Иначе 	
			ТекстОшибки = "Select 'Type of transport' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "TypeOfTransport");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура TransportПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Transport) И Transport <> ПредопределенноеЗначение("Справочник.Transport.CallOut") Тогда
		СтруктураTransport = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Transport, "Код,ServiceProvider");
		EquipmentNo = СтруктураTransport.Код;
		ServiceProvider = СтруктураTransport.ServiceProvider;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура EquipmentПриИзменении(Элемент)
	
	Если TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура TypeOfTransportПриИзменении(Элемент)
	
	Transport = Неопределено;
	ServiceProvider = Неопределено;
	EquipmentNo = Неопределено;

	Если TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Own") Тогда 
		ServiceProvider = ПредопределенноеЗначение("Справочник.ServiceProviders.SLB");
	ИначеЕсли TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ServiceProviderПриИзменении(Элемент)
	
	Если TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура TransportRequestПриИзменении(Элемент)
	
	ЗаполнитьПоTR();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоTR()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, TransportRequest);
	
КонецПроцедуры


