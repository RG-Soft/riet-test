
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сертификат = Параметры.Сертификат;
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат,
		"ДанныеСертификата, УсиленнаяЗащитаЗакрытогоКлюча, Пользователь, Добавил, Программа");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Свойства);
	ДанныеСертификата = ДанныеСертификата.Получить();
	
	Если УсиленнаяЗащитаЗакрытогоКлюча Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрограммыБанков.ПрограммаБанка
		|ИЗ
		|	РегистрСведений.ПрограммыБанков КАК ПрограммыБанков
		|ГДЕ
		|	ПрограммыБанков.СертификатЭП = &СертификатЭП";
	
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПрограммаБанка = Неопределено;
	Пока Выборка.Следующий() Цикл
		ПрограммаБанка = Выборка.ПрограммаБанка;
	КонецЦикла;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоЗаписиПароля = ЕстьПравоЗаписиПароля();
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Константы.КонтекстРаботыЭД.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Данные = Новый Соответствие;
	КонецЕсли;
	
	Свойства = Данные.Получить(Сертификат);
	ПарольУстановлен = Ложь;
	
	Если ТипЗнч(Свойства) = Тип("Структура")
	   И Свойства.Свойство("Пароль") Тогда
		
		ПарольУстановлен = Истина;
		Если Свойства.Пароль <> Неопределено Тогда
			Пароль = "********";
		КонецЕсли;
		Свойства.Свойство("Пользователь", Пользователь);
	Иначе
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Элементы.ФормаУдалитьПароль.Доступность = ПарольУстановлен;
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УсиленнаяЗащитаЗакрытогоКлюча Тогда
		ПоказатьПредупреждение(,
			ВернутьСтр("ru = 'У сертификата установлена усиленная защита закрытого ключа.
			           |В таком случае пароль запрашивает программа электронной подписи и шифрования,
			           |а программа 1С:Предприятия должна передать пустой пароль, чтобы не было ошибки.
			           |
			           |Запоминание и запись пароля невозможны.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		ПоказатьПредупреждение(,
			ВернутьСтр("ru = 'У сертификата не указана программа для закрытого ключа.
			           |Невозможно проверить пароль перед записью.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПравоЗаписиПароля Тогда
		ПоказатьПредупреждение(, ОписаниеОшибкиПраваДоступа());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьПароль(Команда)
	
	УдалитьПарольНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПароль(Команда)
	
	ОписаниеОшибки = "";
	
	Если Не ПарольИзменен И ЗначениеЗаполнено(Пароль)
		ИЛИ НЕ ЗначениеЗаполнено(Программа) И ЗначениеЗаполнено(ПрограммаБанка) Тогда
		ЗаписатьПарольНаСервере();
		Возврат;
	КонецЕсли;
	
	Если ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().СоздаватьЭлектронныеПодписиНаСервере Тогда
		Если Не ПроверитьПарольИЗаписать(ОписаниеОшибки) Тогда
			ОписаниеОшибкиНаКлиенте = "";
			Если ПроверитьПароль(ОписаниеОшибкиНаКлиенте) Тогда
				ЗаписатьПарольНаСервере();
			Иначе
				ОписаниеОшибки =
					  ВернутьСтр("ru = 'НА СЕРВЕРЕ:'")
					+ Символы.ПС + Символы.ПС + ОписаниеОшибки
					+ Символы.ПС + Символы.ПС
					+ ВернутьСтр("ru = 'НА КОМПЬЮТЕРЕ:'")
					+ Символы.ПС + Символы.ПС + ОписаниеОшибкиНаКлиенте;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПроверитьПароль(ОписаниеОшибки) Тогда
			ЗаписатьПарольНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, СокрЛП(ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольДоступенВсем(Команда)
	
	ПарольДоступенВсемНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьПарольНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.КонтекстРаботыЭД");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Данные = Константы.КонтекстРаботыЭД.Получить().Получить();
		Если ТипЗнч(Данные) = Тип("Соответствие") Тогда
			Если Данные.Получить(Сертификат) <> Неопределено Тогда
				Данные.Удалить(Сертификат);
			КонецЕсли;
		КонецЕсли;
		МенеджерЗначения = Константы.КонтекстРаботыЭД.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(Данные);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ФормаУдалитьПароль.Доступность = Ложь;
	Пользователь = Пользователи.ТекущийПользователь();
	Пароль = "";
	ПарольИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПароль(ОписаниеОшибки)
	
	Возврат ПроверитьПодписание(ЭтотОбъект, Программа, ДанныеСертификата, Пароль, ОписаниеОшибки, ЭлектроннаяПодписьКлиент);
	
КонецФункции

&НаСервере
Функция ПроверитьПарольИЗаписать(ОписаниеОшибки)
	
	Успех = ПроверитьПодписание(ЭтотОбъект, Программа, ДанныеСертификата, Пароль, ОписаниеОшибки, ЭлектроннаяПодпись);
	
	Если Успех Тогда
		ЗаписатьПарольНаСервере();
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПодписание(Форма, Программа, ДанныеСертификата, Пароль, ОписаниеОшибки, Модуль)
	
	Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
	
	МенеджерКриптографии = Модуль.МенеджерКриптографии("Подписание", Ложь, ОписаниеОшибки, Программа);
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	Попытка
		МенеджерКриптографии.Подписать(ДанныеСертификата, Сертификат);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВернутьСтр("ru = 'Не удалось пройти проверку подписания с помощью программы %1 по причине:
				           |%2'"),
				Программа,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьПарольНаСервере()
	
	Если Не ЕстьПравоЗаписиПароля() Тогда
		ВызватьИсключение ОписаниеОшибкиПраваДоступа();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.КонтекстРаботыЭД");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Данные = Константы.КонтекстРаботыЭД.Получить().Получить();
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Данные = Новый Соответствие;
		КонецЕсли;
		Если ПарольИзменен ИЛИ НЕ ЗначениеЗаполнено(Пароль) Тогда
			Свойства = Новый Структура;
			Свойства.Вставить("Пароль", Пароль);
		Иначе
			Свойства = Данные.Получить(Сертификат);
			Если ТипЗнч(Свойства) <> Тип("Структура")
			 Или Не Свойства.Свойство("Пароль")
			 Или Не ТипЗнч(Свойства.Пароль) = Тип("Строка") Тогда
				
				ВызватьИсключение ВернутьСтр("ru = 'Введите пароль повторно.'");
			КонецЕсли;
		КонецЕсли;
		Свойства.Вставить("Пользователь", Пользователь);
		Данные.Вставить(Сертификат, Свойства);
		МенеджерЗначения = Константы.КонтекстРаботыЭД.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Новый ХранилищеЗначения(Данные);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Элементы.ФормаУдалитьПароль.Доступность = Истина;
	Пароль = "********";
	ПарольИзменен = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьПравоЗаписиПароля()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Пользователь, Добавил");
	Если Свойства.Добавил = Пользователи.ТекущийПользователь()
	 Или Свойства.Пользователь = Пользователи.ТекущийПользователь() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеОшибкиПраваДоступа()
	
	Возврат
		ВернутьСтр("ru = 'Недостаточно прав для записи пароля.
		           |
		           |Запись пароля может сделать пользователь, указанный в полях
		           |сертификата ""Пользователь"" и ""Добавил"" или администратор.'");
	
КонецФункции

&НаСервере
Процедура ПарольДоступенВсемНаСервере()
	
	Если Элементы.ПользователиПароляДоступенВсем.Пометка Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем()
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.НадписьДоступенПользователю.Заголовок = ВернутьСтр("ru = 'Пароль доступен пользователю:'")
			+ " " + Пользователь;
	Иначе
		Элементы.НадписьДоступенПользователю.Заголовок = ВернутьСтр("ru = 'Пароль доступен всем пользователям.'")
	КонецЕсли;
	Элементы.ПользователиПароляДоступенВсем.Пометка = НЕ ЗначениеЗаполнено(Пользователь);
	
КонецПроцедуры

#КонецОбласти
