
/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// По умолчанию фильтр по Gold использоваться не должен
	// Это соответствует 3му положению флажка, то есть 2
	// Потом сохраненное значение восстановится
	Gold = 2; 
	
	//TD   	
	//TDRequests.Параметры.УстановитьЗначениеПараметра("PartNo", Неопределено);
	РасширенияПоддерживающиеПредпросмотр = ФайловыеФункцииСлужебный.СписокРасширенийДляПредпросмотра();
	
	a = 1;
	// { RGS AArsentev 07.06.2018
	Если CustomsСервер.ЭтоБрокер() Тогда
		Элементы.DOCsNumberOfLines.Видимость = Истина;
		Элементы.DOCsNumberOfUniqueLines.Видимость = Истина;
		// { RGS AArsentev 20.06.2018
		Элементы.СтраницаTMCImportDashboards.Видимость = Ложь;
		Элементы.СтраницаTMCExportDashboards.Видимость = Ложь;
		Элементы.СтраницаShipmentsPendingCustomsBSReceiptDate.Видимость = Ложь;
		Элементы.DOCsCCAReference.Видимость = Истина;
		Элементы.DOCsCCA_Coordinator.Видимость = Истина;
		Элементы.CCA_Coordinator.Видимость = Истина;
	Иначе
		Элементы.DOCsCCAReference.Видимость = Ложь;
		Элементы.DOCsCCA_Coordinator.Видимость = Ложь;
		Элементы.CCA_Coordinator.Видимость = Ложь;
		// } RGS AArsentev 20.06.2018
	КонецЕсли;
	// } RGS AArsentev 07.06.2018
	
	// { RGS DKazanskiy 13.07.2018 14:41:10 - S-I-0005217
	// установим видимость для DGF брокера
	Если CustomsСерверПовтИсп.ЭтоБрокерDGF() Тогда
		Элементы.ГруппаDGFTransportRequests.Видимость 	= Истина;
		Элементы.ГруппаDGFTrips.Видимость 				= Истина;
	Иначе
		Элементы.ГруппаDGFTransportRequests.Видимость   = Ложь;
		Элементы.ГруппаDGFTrips.Видимость 				= Ложь;
	КонецЕсли;
	// } RGS DKazanskiy 13.07.2018 14:41:35 - S-I-0005217
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИнтерфейс()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Общие фильтры
	
	Если CustomsСервер.ЭтоБрокер() Тогда
		
		ProcessLevel = Неопределено;
		Coordinator = Неопределено;
		
	Иначе
		
		// Если у пользователя заполнен Process level - то установим по нему отбор
		UserProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
		Если ЗначениеЗаполнено(UserProcessLevel) Тогда
			ProcessLevel = UserProcessLevel;	
		КонецЕсли;
		
	КонецЕсли;
	
		
	УстановитьОтборыПоProcessLevel();	
	
	УстановитьОтборПоКоординатору();
	
	УстановитьОтборыПоMOT(DOCs.КомпоновщикНастроек, Shipments.Отбор, ExportRequests.Отбор, MOTs, ПустойMOT);
	
	УстановитьОтборыПоGold(DOCs.КомпоновщикНастроек, Shipments.Отбор, Gold);
	
	
	// DOCs
	
	УстановитьОтборПоDOCsConsignTo(DOCs.КомпоновщикНастроек, DOCsConsignTo);
	
	УстановитьОтборПоDOCsStage(DOCs.КомпоновщикНастроек, DOCsStage, DOCsInProgress, DOCsGrantedNotShipped);

	УстановитьОтборПоDOCsActionPriority(DOCs.КомпоновщикНастроек, DOCsActionPriority);
	
	УстановитьОтборПоDOCsStatus(DOCs.КомпоновщикНастроек, DOCsStatus);
	
	
	// Shipments
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Shipments.Отбор,
		"Completed",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	УстановитьОтборПоShipmentsStage();	
	
	УстановитьОтборПоShipmentsActionPriority(Shipments.Отбор, ShipmentsActionPriority);
			
	
	// Export requests
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ExportRequests.Отбор,
		"Canceled",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ExportRequests.Отбор,
		"Stage",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ExportStages.Draft,
		,
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ExportRequests.Отбор,
		"Stage",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ExportStages.Delivered);
	
	Если ЗначениеЗаполнено(ProcessLevel) Тогда
		
		Country = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
		Если ЗначениеЗаполнено(Country) Тогда
			
			СписокCountries = Новый СписокЗначений;
			СписокCountries.Добавить(Country);
			СписокCountries.Добавить(Справочники.CountriesOfProcessLevels.ПустаяСсылка());	
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ExportRequests.Отбор,
				"FromCountry",
				ВидСравненияКомпоновкиДанных.ВСписке,
				СписокCountries);
			
		КонецЕсли;
		
	КонецЕсли;
	 			
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ШАПКИ ДОКУМЕНТА

// PROCESS LEVEL

&НаКлиенте
Процедура ProcessLevelПриИзменении(Элемент)
	
	ProcessLevelПриИзмененииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ProcessLevelПриИзмененииНаСервере()
	
	УстановитьОтборыПоProcessLevel();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоProcessLevel()
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ProcessLevel);
	
	// Вставим пустой Process level, чтобы специалист не забыл про документы, в которых Process level еще не заполнен
	СписокProcessLevels = Новый СписокЗначений;
	Если ИспользоватьОтбор Тогда
		СписокProcessLevels.Добавить(ProcessLevel);
		СписокProcessLevels.Добавить(Справочники.ProcessLevels.ПустаяСсылка());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		DOCs.КомпоновщикНастроек,
		"ProcessLevel",
		СписокProcessLevels,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.Отбор,
		"ProcessLevel",
		СписокProcessLevels,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ExportRequests.Отбор,
		"ProcessLevel",
		СписокProcessLevels,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	Элементы.ShipmentsConditionalRelease.Видимость = (ProcessLevel = Справочники.ProcessLevels.KZ
		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA
		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUSM);	
		
КонецПроцедуры

// COORDINATOR

&НаКлиенте
Процедура CoordinatorПриИзменении(Элемент)
	
	УстановитьОтборПоКоординатору();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКоординатору()
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Coordinator);
	
	// Вставим пустого пользователя, чтобы специалист не забыл про те документы, в которых координатора еще нет
	СписокSpecialists = Новый СписокЗначений;
	Если ИспользоватьОтбор Тогда
		СписокSpecialists.Добавить(Coordinator);
		СписокSpecialists.Добавить(Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		DOCs.КомпоновщикНастроек,
		"Coordinator",
		СписокSpecialists,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.КомпоновщикНастроек,
		"Coordinator",
		СписокSpecialists,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ExportRequests.КомпоновщикНастроек,
		"ExportSpecialist",
		СписокSpecialists,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры

// GOLD

&НаКлиенте
Процедура GoldПриИзменении(Элемент)
	
	УстановитьОтборыПоGold(DOCs.КомпоновщикНастроек, Shipments.Отбор, Gold);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыПоGold(ОтборDOCs, ОтборShipments, Gold)
	
	Если Gold = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборDOCs,
			"Gold",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборShipments,
			"Gold",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);	
		
	ИначеЕсли Gold = 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборDOCs,
			"Gold",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборShipments,
			"Gold",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ИначеЕсли Gold = 2 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборDOCs,
			"Gold",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ОтборShipments,
			"Gold",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	КонецЕсли;
	
КонецПроцедуры

// MOTs

&НаКлиенте
Процедура MOTsПриИзменении(Элемент)
	
	УстановитьОтборыПоMOT(DOCs.КомпоновщикНастроек, Shipments.Отбор, ExportRequests.Отбор, MOTs, ПустойMOT);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыПоMOT(ОтборDOCs, ОтборShipments, ОтборExportRequests, MOTs, ПустойMOT)
	
	// Удалим пустые значения из списка MOTs
	ИндексСписка = 0;
	Пока ИндексСписка < MOTs.Количество() Цикл
		Если ЗначениеЗаполнено(MOTs[ИндексСписка].Значение) Тогда
			ИндексСписка = ИндексСписка + 1;
		Иначе
			MOTs.Удалить(ИндексСписка);
		КонецЕсли;
	КонецЦикла;
	
	ИспользоватьОтбор = MOTs.Количество() <> 0;
	
	// Вставим пустой MOT, чтобы специалист не забыл про документы, у которых MOT еще не заполнен
	Если ИспользоватьОтбор Тогда
		MOTs.Добавить(ПустойMOT);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборDOCs,
		"MOT",
		MOTs,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборShipments,
		"MOT",
		MOTs,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборExportRequests,
		"InternationalMOT",
		MOTs,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ИспользоватьОтбор,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры
	

/////////////////////////////////////////////////////////////////////////
// СТРАНИЦЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// { RGS AGorlenko 11.03.2014 16:13:10 - S-I-0000633
	//Если ТекущаяСтраница = Элементы.СтраницаTMCDashboards Тогда
	Если ТекущаяСтраница = Элементы.СтраницаTMCImportDashboards 
		ИЛИ ТекущаяСтраница = Элементы.СтраницаTMCImportDashboardsEmergency
		ИЛИ ТекущаяСтраница = Элементы.СтраницаSanctionsReportHTCDashboard 
		ИЛИ ТекущаяСтраница = Элементы.СтраницаTMCExportDashboards
		ИЛИ ТекущаяСтраница = Элементы.СтраницаShipmentsPendingCustomsBSReceiptDate Тогда
	// } RGS AGorlenko 11.03.2014 16:14:12 - S-I-0000633
		
		Если ТабличныйДокументPendingGreenlight.ВысотаТаблицы = 0 Тогда
		
			ИнициализироватьTMCDashboards();
			ПодключитьОбработчикОжидания("Отсчет", 60);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// DOC

// ОТБОР ПО STAGE GROUP

&НаКлиенте
Процедура DOCsInProgressFlagПриИзменении(Элемент)
	
	Если DOCsInProgress Тогда
		
		DOCsGrantedNotShipped = Ложь;
		DOCsStage = Неопределено;
		
	КонецЕсли;
	
	УстановитьОтборПоDOCsStage(DOCs.КомпоновщикНастроек, DOCsStage, DOCsInProgress, DOCsGrantedNotShipped);
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsGrantedNotShippedFlagПриИзменении(Элемент)
	
	Если DOCsGrantedNotShipped Тогда
		
		DOCsInProgress = Ложь;
		DOCsStage = Неопределено;
		
	КонецЕсли;
	
	УстановитьОтборПоDOCsStage(DOCs.КомпоновщикНастроек, DOCsStage, DOCsInProgress, DOCsGrantedNotShipped);
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsStageFilterПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(DOCsStage) Тогда
		DOCsInProgress = Ложь;
		DOCsGrantedNotShipped = Ложь;
	КонецЕсли;
	
	УстановитьОтборПоDOCsStage(DOCs.КомпоновщикНастроек, DOCsStage, DOCsInProgress, DOCsGrantedNotShipped);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоDOCsStage(ОтборDOCs, DOCsStage, DOCsInProgress, DOCsGrantedNotShipped)
	
	Если ЗначениеЗаполнено(DOCsStage) Тогда
		
		ПравоеЗначение = DOCsStage;
		ИспользуемыйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Использование = Истина;
		
	ИначеЕсли DOCsInProgress Тогда
		
		ПравоеЗначение = ПолучитьСписокDOCsInProgress();
		ИспользуемыйВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Использование = Истина;
		
	ИначеЕсли DOCsGrantedNotShipped Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.DOCStages.Granted");
		ИспользуемыйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Использование = Истина;
		
	Иначе
		
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.DOCStages.Booked");
		ИспользуемыйВидСравнения =  ВидСравненияКомпоновкиДанных.НеРавно;
		Использование = Истина;
							
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборDOCs,
		"CurrentStage",
		ПравоеЗначение,
		ИспользуемыйВидСравнения,
		,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокDOCsInProgress()
	
	Список = Новый СписокЗначений;
    DOCStages = Перечисления.DOCStages;
	
	Список.Добавить(DOCStages.ПустаяСсылка());
	Список.Добавить(DOCStages.Opened);
	Список.Добавить(DOCStages.Requested);
	Список.Добавить(DOCStages.Received);
	
	Возврат Список;
	
КонецФункции 


// ОТБОР ПО CONSIGN TO

&НаКлиенте
Процедура DOCsConsignToFilterПриИзменении(Элемент)
	
	УстановитьОтборПоDOCsConsignTo(DOCs.КомпоновщикНастроек, DOCsConsignTo);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоDOCsConsignTo(ОтборDOCs, DOCsConsignTo)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборDOCs,
		"ConsignTo",
		DOCsConsignTo,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		DOCsConsignTo.Количество() <> 0,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры


// POD

&НаКлиенте
Процедура DOCsPODFilterПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		DOCs.КомпоновщикНастроек,
		"POD",
		DOCsPOD,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(DOCsPOD),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры


// REQUESTED POA

&НаКлиенте
Процедура DOCsRequestedPOAFilterПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		DOCs.КомпоновщикНастроек,
		"RequestedPOA",
		DOCsRequestedPOA,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(DOCsRequestedPOA),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры


// ACTION PRIORITY

&НаКлиенте
Процедура DOCsActionPriorityFilterПриИзменении(Элемент)
	
	УстановитьОтборПоDOCsActionPriority(DOCs.КомпоновщикНастроек, DOCsActionPriority);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоDOCsActionPriority(ОтборDOCs, ActionPriority)
	      		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборDOCs,
		"СтатусВажности",
		ActionPriority,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ActionPriority),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		        			
КонецПроцедуры


// STATUS
  
&НаКлиенте
Процедура DOCsStatusFilterПриИзменении(Элемент)
	
	УстановитьОтборПоDOCsStatus(DOCs.КомпоновщикНастроек, DOCsStatus);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоDOCsStatus(ОтборDOCs, Status)
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборDOCs,
		"CurrentStatus",
		Status,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Status),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
				
КонецПроцедуры


// ТАБЛИЧНОЕ ПОЛЕ СПИСКА DOC

&НаКлиенте
Процедура DOCsFilterByTheCurrentValue(Команда)
	
	КомпоновщикНастроек = DOCs.КомпоновщикНастроек;
	ПользовательскийОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементыПользовательскогоОтбора(КомпоновщикНастроек.ПользовательскиеНастройки, , , КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	РГСофтКлиент.УстановитьОтборДинамическогоСпискаПоЗначениюВТекущейКолонке(ПользовательскийОтбор, Элементы.DOCs, Элементы.DOCsFilterByTheCurrentValue.Пометка);
		
КонецПроцедуры

&НаКлиенте
Процедура DOCsПриАктивизацииЯчейки(Элемент)
	
	КомпоновщикНастроек = DOCs.КомпоновщикНастроек;
	ПользовательскийОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементыПользовательскогоОтбора(КомпоновщикНастроек.ПользовательскиеНастройки, , , КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Элементы.DOCsFilterByTheCurrentValue.Пометка = РГСофтКлиент.ПолучитьПометкуКнопкиОтбораПоЗначениюВТекущейКолонке(ПользовательскийОтбор, Элементы.DOCs);
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьПодвалDOCs", 0.3, Истина);
	// { RGS AArsentev 6/21/2017 6:56:33 PM - S-I-0003168
	Комментарий = ПолучитьКомментарий(Элементы.DOCs.ТекущаяСтрока);
	// } RGS AArsentev 6/21/2017 6:56:33 PM - S-I-0003168
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалDOCs()
	
	DOCsNumOfParcels = 0;
	DOCsGrossWeightKG = 0;            
	DOCsCubicMeters = 0;
	DOCsInvoicesTotalValue = 0;
	
	Элемент = Элементы.DOCs;
	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
			DOCsInvoicesTotalValue = DOCsInvoicesTotalValue + ДанныеСтроки.InvoicesTotalValue;
			DOCsNumOfParcels = DOCsNumOfParcels + ДанныеСтроки.NumOfParcels;
			DOCsGrossWeightKG = DOCsGrossWeightKG + ДанныеСтроки.ParcelsGrossWeightKg;            
			DOCsCubicMeters = DOCsCubicMeters + ДанныеСтроки.ParcelsCubicMeters;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// SHIPMENTS

// ОТБОР ПО ГРУППЕ СТАДИЙ

&НаКлиенте
Процедура ImportShipmentsBeforeArrivalFlagПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ShipmentsBeforeArrival) Тогда
		
		ShipmentsAfterArrivalBeforeCustoms = Ложь;
		ShipmentsInCustoms = Ложь;
		ShipmentsCleared = Ложь;
		
	КонецЕсли;
			
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ImportShipmentsAfterArrivalBeforeCustomsFlagПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ShipmentsAfterArrivalBeforeCustoms) Тогда
		
		ShipmentsBeforeArrival = Ложь;
		ShipmentsInCustoms = Ложь;
		ShipmentsCleared = Ложь;
		
	КонецЕсли;
	
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ImportShipmentsInCustomsFlagПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ShipmentsInCustoms) Тогда
		
		ShipmentsBeforeArrival = Ложь;
		ShipmentsAfterArrivalBeforeCustoms = Ложь;
		ShipmentsCleared = Ложь;
				
	КонецЕсли;
	
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ImportShipmentsClearedFlagПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ShipmentsCleared) Тогда
		
		ShipmentsBeforeArrival = Ложь;
		ShipmentsAfterArrivalBeforeCustoms = Ложь;
		ShipmentsInCustoms = Ложь;
				
	КонецЕсли;
	
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ImportShipmentsCargoStageFilterПриИзменении(Элемент)
	
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ImportShipmentsDocumentStageFilterПриИзменении(Элемент)
	
	УстановитьОтборПоShipmentsStage();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоShipmentsStage()
	
	CargoStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	CargoStageПравоеЗначение = Неопределено;
	CargoStageИспользование = Ложь;
	
	DocumentStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	DocumentStageПравоеЗначение = Неопределено;
	DocumentStageИспользование = Ложь;
	
	Если ЗначениеЗаполнено(ShipmentsCargoStage) Тогда
		
		CargoStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		CargoStageПравоеЗначение = ShipmentsCargoStage;
		CargoStageИспользование = Истина;
		
	ИначеЕсли ShipmentsBeforeArrival Тогда
		
		CargoStageВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		CargoStageПравоеЗначение = ПолучитьBeforeArrivalCargoStages();
		CargoStageИспользование = Истина;
		
	ИначеЕсли ShipmentsAfterArrivalBeforeCustoms Тогда
		
		CargoStageВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		CargoStageПравоеЗначение = ПолучитьAfterArrivalCargoStages();
		CargoStageИспользование = Истина;
		
		DocumentStageВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		DocumentStageПравоеЗначение = ПолучитьBeforeCustomsDocumentStages();
		DocumentStageИспользование = Истина;
					
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.КомпоновщикНастроек,
		"CurrentCargoStage",
		CargoStageПравоеЗначение,
		CargoStageВидСравнения,
		,
		CargoStageИспользование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);

	Если ЗначениеЗаполнено(ShipmentsDocumentStage) Тогда
		
		DocumentStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		DocumentStageПравоеЗначение = ShipmentsDocumentStage;
		DocumentStageИспользование = Истина;
		
	ИначеЕсли ShipmentsInCustoms Тогда
		
		DocumentStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		DocumentStageПравоеЗначение = ПредопределенноеЗначение("Перечисление.ShipmentDocumentStages.InCustoms");
		DocumentStageИспользование = Истина;
		
	ИначеЕсли ShipmentsCleared Тогда
		
		DocumentStageВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		DocumentStageПравоеЗначение = ПредопределенноеЗначение("Перечисление.ShipmentDocumentStages.Cleared");
		DocumentStageИспользование = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.КомпоновщикНастроек,
		"CurrentDocumentStage",
		DocumentStageПравоеЗначение,
		DocumentStageВидСравнения,
		,
		DocumentStageИспользование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьBeforeArrivalCargoStages()
	
	ShipmentCargoStages = Перечисления.ShipmentCargoStages;
	Список = Новый СписокЗначений;
	Список.Добавить(ShipmentCargoStages.ПустаяСсылка());
	Список.Добавить(ShipmentCargoStages.Opened);
	Список.Добавить(ShipmentCargoStages.ETD);
	Список.Добавить(ShipmentCargoStages.ATD);
	Список.Добавить(ShipmentCargoStages.ETA);		
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьAfterArrivalCargoStages()
	
	ShipmentCargoStages = Перечисления.ShipmentCargoStages;
	Список = Новый СписокЗначений;
	Список.Добавить(ShipmentCargoStages.ATA);
	Список.Добавить(ShipmentCargoStages.CollectedFromPort);		
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьBeforeCustomsDocumentStages()
	
	ShipmentDocumentStages = Перечисления.ShipmentDocumentStages;
	Список = Новый СписокЗначений;
	Список.Добавить(ShipmentDocumentStages.ПустаяСсылка());
	Список.Добавить(ShipmentDocumentStages.Opened);
	Список.Добавить(ShipmentDocumentStages.PreAlert);
	Список.Добавить(ShipmentDocumentStages.DoxRcvd);
	
	Возврат Список;
		
КонецФункции


// POD

&НаКлиенте
Процедура ImportShipmentsPODFilterПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.КомпоновщикНастроек,
		"POD",
		ImportShipmentsPOD,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ImportShipmentsPOD),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
КонецПроцедуры


// ACTUAL POA

&НаКлиенте
Процедура ImportShipmentsActualPOAFilterПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Shipments.КомпоновщикНастроек,
		"ActualPOA",
		ImportShipmentsActualPOA,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ImportShipmentsActualPOA),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры


// ACTION PRIORITY

&НаКлиенте
Процедура ImportShipmentsActionPriorityFilterПриИзменении(Элемент)
	
	УстановитьОтборПоShipmentsActionPriority(Shipments.КомпоновщикНастроек, ShipmentsActionPriority);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоShipmentsActionPriority(ОтборShipments, ActionPriority)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборShipments,
		"СтатусВажности",
		ActionPriority,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ActionPriority),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		     			
КонецПроцедуры


// ТАБЛИЧНОЕ ПОЛЕ СПИСКА SHIPMENT

&НаКлиенте
Процедура ShipmentsFilterByTheCurrentValue(Команда)
	
	КомпоновщикНастроек = Shipments.КомпоновщикНастроек;
	ПользовательскийОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементыПользовательскогоОтбора(КомпоновщикНастроек.ПользовательскиеНастройки, , , КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	РГСофтКлиент.УстановитьОтборДинамическогоСпискаПоЗначениюВТекущейКолонке(ПользовательскийОтбор, Элементы.Shipments, Элементы.ShipmentsFilterByTheCurrentValue.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ShipmentsПриАктивизацииЯчейки(Элемент)
	
	КомпоновщикНастроек = Shipments.КомпоновщикНастроек;
	ПользовательскийОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементыПользовательскогоОтбора(КомпоновщикНастроек.ПользовательскиеНастройки, , , КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Элементы.ShipmentsFilterByTheCurrentValue.Пометка = РГСофтКлиент.ПолучитьПометкуКнопкиОтбораПоЗначениюВТекущейКолонке(ПользовательскийОтбор, Элементы.Shipments);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////
// TMC DASHBOARDS

&НаКлиенте
Процедура Отсчет()
	
MinutesRemaining = MinutesRemaining - 1;
	Если MinutesRemaining = 0 Тогда
		СформироватьTMCDashboardsНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьTMCDashboards()
	
	ИнициализироватьTMCDashboard(Отчеты.LEG4PendingGreenLight, ОтчетLEG4PendingGreenLight, АдресСхемыКомпоновкиPendingGreenLight, , , "Main");
	
	ИнициализироватьTMCDashboard(Отчеты.LEG6CustomsClearance, ОтчетLEG6CustomsClearance, АдресСхемыКомпоновкиCustomsClearance, , , "Main");
	
	//// { RGS AGorlenko 11.03.2014 13:19:43 - S-I-0000633
	////ТаблицаОтбора = Новый ТаблицаЗначений;
	////ТаблицаОтбора.Колонки.Добавить("ЛевоеЗначение", Новый ОписаниеТипов("ПолеКомпоновкиДанных"));
	////ТаблицаОтбора.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравненияКомпоновкиДанных"));
	////ТаблицаОтбора.Колонки.Добавить("ПравоеЗначение");
	////ТаблицаОтбора.Колонки.Добавить("РежимОтображения", Новый ОписаниеТипов("РежимОтображенияЭлементаНастройкиКомпоновкиДанных"));
	////
	////СтрокаОтбора = ТаблицаОтбора.Добавить();
	////СтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Urgency");
	////СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	////СтрокаОтбора.ПравоеЗначение = Перечисления.Urgencies.Emergency;
	////СтрокаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	////
	////МассивДопПолейГруппировокLeg4 = Новый Массив;
	////МассивДопПолейГруппировокLeg4.Добавить("DOC.SegmentsList");
	//ПараметрыДанных = Новый Структура;
	//ПараметрыДанных.Вставить("ВыводитьPendingShipment", Истина);
	//ИнициализироватьTMCDashboard(Отчеты.LEG4PendingGreenLight, ОтчетLEG4PendingGreenLightEmergency, АдресСхемыКомпоновкиPendingGreenLightEmergency, , , "Emergency", ПараметрыДанных);
	//
	////МассивДопПолейГруппировокLeg6 = Новый Массив;
	////МассивДопПолейГруппировокLeg6.Добавить("ImportShipment.SegmentsList");
	//ИнициализироватьTMCDashboard(Отчеты.LEG6CustomsClearance, ОтчетLEG6CustomsClearanceEmergency, АдресСхемыКомпоновкиCustomsClearanceEmergency, , , "Emergency");
	//// } RGS AGorlenko 11.03.2014 13:19:45 - S-I-0000633
	//
	//// { RGS AGorlenko 12.09.2014 13:39:54 - S-I-0000863
	//ИнициализироватьTMCDashboard(Отчеты.SanctionsReportHTC, ОтчетSanctionsReportHTC, АдресСхемыКомпоновкиSanctionsReportHTC, , , "Dashboard");
	//// } RGS AGorlenko 12.09.2014 13:39:55 - S-I-0000863
	
	ИнициализироватьTMCDashboard(Отчеты.ExportDashboards, ОтчетExportDashboards, АдресСхемыКомпоновкиExportDashboards, , , "Export dashboards");

	ИнициализироватьTMCDashboard(Отчеты.ShipmentsPendingCustomsBSReceiptDate, ОтчетShipmentsPendingCustomsBSReceiptDate, АдресСхемыКомпоновкиShipmentsPendingCustomsBSReceiptDate, , , "Shipments pending customs BS receipt date");

	СформироватьTMCDashboardsНаСервере();
	
КонецПроцедуры

&НаСервере
// { RGS AGorlenko 11.03.2014 14:32:24 - S-I-0000633
//Процедура ИнициализироватьTMCDashboard(ОтчетМенеджер, ДанныеФормыСтруктура, АдресСхемы)
Процедура ИнициализироватьTMCDashboard(ОтчетМенеджер, ДанныеФормыСтруктура, АдресСхемы, НастройкиОтбора = Неопределено, МассивДопПолейГруппировок = Неопределено, ИмяВарианта = Неопределено, ПараметрыДанных = Неопределено)
// } RGS AGorlenko 11.03.2014 14:32:25 - S-I-0000633
	
	ПолноценныйОтчет = ОтчетМенеджер.Создать();
	СКД = ПолноценныйОтчет.СхемаКомпоновкиДанных;
	АктивизироватьВариантОтчета(СКД, ИмяВарианта);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	// { RGS AArsentev 16.08.2017 S-I-0003519
	Если ИмяВарианта = "Shipments pending customs BS receipt date" Тогда	
		СписокPOA = Новый СписокЗначений;
		СписокPOA.Добавить(Справочники.SeaAndAirPorts.НайтиПоКоду("SVO"));
		СписокPOA.Добавить(Справочники.SeaAndAirPorts.НайтиПоКоду("DME"));
		
		элОтбора = ПолноценныйОтчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		элОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		элОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("DOC.RequestedPOA");
		элОтбора.ПравоеЗначение = СписокPOA;
	КонецЕсли;
	// } RGS AArsentev 16.08.2017 S-I-0003519	
	
	ПолноценныйОтчет.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	// { RGS AGorlenko 11.03.2014 13:43:24 - S-I-0000633
	ИнициализироватьДопПоляГруппировкиTMCDashboard(ПолноценныйОтчет.КомпоновщикНастроек, МассивДопПолейГруппировок);
	ИнициализироватьОтборTMCDashboard(ПолноценныйОтчет.КомпоновщикНастроек, НастройкиОтбора);
	ИнициализироватьПараметрыДанныхTMCDashboard(ПолноценныйОтчет.КомпоновщикНастроек, ПараметрыДанных);
	// } RGS AGorlenko 11.03.2014 13:43:31 - S-I-0000633
	ЗначениеВДанныеФормы(ПолноценныйОтчет, ДанныеФормыСтруктура);
	
КонецПроцедуры

// { RGS AGorlenko 11.03.2014 13:44:25 - S-I-0000633
&НаСервере
Процедура ИнициализироватьПараметрыДанныхTMCDashboard(КомпоновщикНастроек, ПараметрыДанных)
	
	Если ПараметрыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекПараметр Из ПараметрыДанных Цикл
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ТекПараметр.Ключ);
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ТекПараметр.Значение;
			Параметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьВариантОтчета(СКД, ИмяВарианта)
	
	Если Не ЗначениеЗаполнено(ИмяВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Вариант = СКД.ВариантыНастроек.Найти(ИмяВарианта);
	
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыДляУдаления = Новый Массив;
	
	Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			ВариантыДляУдаления.Добавить(ТекВариант);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВариант Из ВариантыДляУдаления Цикл
		СКД.ВариантыНастроек.Удалить(ТекВариант);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДопПоляГруппировкиTMCDashboard(КомпоновщикНастроек, МассивДопПолейГруппировок)
	
	Если МассивДопПолейГруппировок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДопПолеГруппировки Из МассивДопПолейГруппировок Цикл
		ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, ДопПолеГруппировки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборTMCDashboard(КомпоновщикНастроек, НастройкиОтбора)
	
	Если НастройкиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ТекНастройкаОтбора Из НастройкиОтбора Цикл
		НашлиЭлементОтбора = Ложь;
		Для каждого ТекЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
			Если ТекЭлементОтбора.ЛевоеЗначение = ТекНастройкаОтбора.ЛевоеЗначение Тогда
				ЗаполнитьЗначенияСвойств(ТекЭлементОтбора, ТекНастройкаОтбора);
				ТекЭлементОтбора.Использование = Истина;
				НашлиЭлементОтбора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не НашлиЭлементОтбора Тогда
			ЭлементОтбора = КоллекцияЭлементовОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ТекНастройкаОтбора);
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // } RGS AGorlenko 11.03.2014 13:44:32 - S-I-0000633

&НаКлиенте
Процедура RefreshNow(Команда)
	
	СформироватьTMCDashboardsНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьTMCDashboardsНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СформироватьTMCDashboardНаСервере(ТабличныйДокументPendingGreenlight, ОтчетLEG4PendingGreenLight, "LEG4PendingGreenLight", АдресДанныхРасшифровкиPendingGreenLight);
	
	СформироватьTMCDashboardНаСервере(ТабличныйДокументCustomsClearance, ОтчетLEG6CustomsClearance, "LEG6CustomsClearance", АдресДанныхРасшифровкиCustomsClearance);
	
	// { RGS AGorlenko 11.03.2014 13:09:59 - S-I-0000633
	//СформироватьTMCDashboardНаСервере(ТабличныйДокументPendingGreenlightEmergency, ОтчетLEG4PendingGreenLightEmergency, "LEG4PendingGreenLight", АдресДанныхРасшифровкиPendingGreenLightEmergency, Ложь);
	
	//СформироватьTMCDashboardНаСервере(ТабличныйДокументCustomsClearanceEmergency, ОтчетLEG6CustomsClearanceEmergency, "LEG6CustomsClearance", АдресДанныхРасшифровкиCustomsClearanceEmergency, Ложь);
	// } RGS AGorlenko 11.03.2014 13:10:01 - S-I-0000633
	
	// { RGS AGorlenko 12.09.2014 13:40:38 - S-I-0000863
	//СформироватьTMCDashboardНаСервере(ТабличныйДокументSanctionsReportHTC, ОтчетSanctionsReportHTC, "SanctionsReportHTC", АдресДанныхРасшифровкиSanctionsReportHTC);
	// } RGS AGorlenko 12.09.2014 13:40:43 - S-I-0000863
	
	СформироватьTMCDashboardНаСервере(ТабличныйДокументExportDashboards, ОтчетExportDashboards, "ExportDashboards", АдресДанныхРасшифровкиExportDashboards);
	
	СформироватьTMCDashboardНаСервере(ТабличныйДокументShipmentsPendingCustomsBSReceiptDate, ОтчетShipmentsPendingCustomsBSReceiptDate, "ShipmentsPendingCustomsBSReceiptDate", АдресДанныхРасшифровкиShipmentsPendingCustomsBSReceiptDate);
	
	MinutesRemaining = 60;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьTMCDashboardНаСервере(ТабличныйДокумент, ДанныеФормы, ИмяОтчета, АдресДанныхРасшифровки, СворачиватьГруппировки = Истина)
	
	ТабличныйДокумент.Очистить();
	ПолноценныйОтчет = ДанныеФормыВЗначение(ДанныеФормы, Тип("ОтчетОбъект." + ИмяОтчета));
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ПолноценныйОтчет.СкомпоноватьРезультат(ТабличныйДокумент, ДанныеРасшифровки);
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	Если СворачиватьГруппировки Тогда
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowPendingGreenLightFilters(Команда)
	
	Элементы.ShowPendingGreenLightFilters.Пометка = НЕ Элементы.ShowPendingGreenLightFilters.Пометка;
	Элементы.КомпоновщикНастроекPendingGreenLightПользовательскиеНастройки.Видимость = Элементы.ShowPendingGreenLightFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowCustomsClearanceFilters(Команда)
	
	Элементы.ShowCustomsClearanceFilters.Пометка = НЕ Элементы.ShowCustomsClearanceFilters.Пометка;
	Элементы.КомпоновщикНастроекCustomsClearanceПользовательскиеНастройки.Видимость = Элементы.ShowCustomsClearanceFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументPendingGreenlightОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиPendingGreenLight, АдресДанныхРасшифровкиPendingGreenLight, Расшифровка, "LEG4PendingGreenLight");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументCustomsClearanceОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиCustomsClearance, АдресДанныхРасшифровкиCustomsClearance, Расшифровка, "LEG6CustomsClearance");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровку(АдресСхемыКомпоновки, АдресДанныхРасшифровки, Расшифровка, ИмяОтчета)
	
	Перем ВыбранноеДействие;
	Перем ПараметрыВыбранногоДействия;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
	
	ДоступныеДействия = Новый Массив;
	// { RGS AGorlenko 12.09.2014 15:25:44 - S-I-0000863
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	Если ИмяОтчета <> "SanctionsReportHTC" Тогда
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	Иначе
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	КонецЕсли;
	// } RGS AGorlenko 12.09.2014 15:25:55 - S-I-0000863
	ОбработкаРасшифровки.ПоказатьВыборДействия(
		Новый ОписаниеОповещения("ДействиеОбработкиРасшифровкиКомпоновкиДанныхЗаверешение" ,ЭтаФорма, 
		Новый Структура("ИмяОтчета,Расшифровка,АдресДанныхРасшифровки", ИмяОтчета, Расшифровка, АдресДанныхРасшифровки))
		, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбработкиРасшифровкиКомпоновкиДанныхЗаверешение(ВыбранноеДействие, ПараметрыВыбранногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеДействие = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ВыбранноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		 				
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			ПоказатьЗначение(, ПараметрыВыбранногоДействия);
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СформироватьПриОткрытии", Истина);
			СтруктураПараметров.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДополнительныеПараметры.АдресДанныхРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрыВыбранногоДействия));
			ОткрытьФорму("Отчет." + ДополнительныеПараметры.ИмяОтчета + ".Форма", СтруктураПараметров, , Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowExportDashboardsFilters(Команда)
	
	Элементы.ShowExportDashboardsFilters.Пометка = НЕ Элементы.ShowExportDashboardsFilters.Пометка;
	Элементы.КомпоновщикНастроекExportDashboardsПользовательскиеНастройки.Видимость = Элементы.ShowExportDashboardsFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументExportDashboardsОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиExportDashboards, АдресДанныхРасшифровкиExportDashboards, Расшифровка, "ExportDashboards");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументShipmentsPendingCustomsBSReceiptDateОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиShipmentsPendingCustomsBSReceiptDate, АдресДанныхРасшифровкиShipmentsPendingCustomsBSReceiptDate, Расшифровка, "ShipmentsPendingCustomsBSReceiptDate");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// TMC DASHBOARDS Emergency

// { RGS AGorlenko 11.03.2014 13:09:18 - S-I-0000633
&НаКлиенте
Процедура ShowCustomsClearanceEmergencyFilters(Команда)
	
	Элементы.ShowCustomsClearanceEmergencyFilters.Пометка = НЕ Элементы.ShowCustomsClearanceEmergencyFilters.Пометка;
	Элементы.КомпоновщикНастроекCustomsClearanceEmergencyПользовательскиеНастройки.Видимость = Элементы.ShowCustomsClearanceEmergencyFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowPendingGreenLightEmergencyFilters(Команда)
	
	Элементы.ShowPendingGreenLightEmergencyFilters.Пометка = НЕ Элементы.ShowPendingGreenLightEmergencyFilters.Пометка;
	Элементы.КомпоновщикНастроекPendingGreenLightEmergencyПользовательскиеНастройки.Видимость = Элементы.ShowPendingGreenLightEmergencyFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументPendingGreenlightEmergencyОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиPendingGreenLightEmergency, АдресДанныхРасшифровкиPendingGreenLightEmergency, Расшифровка, "LEG4PendingGreenLight");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументCustomsClearanceEmergencyОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиCustomsClearanceEmergency, АдресДанныхРасшифровкиCustomsClearanceEmergency, Расшифровка, "LEG6CustomsClearance");
	
КонецПроцедуры // } RGS AGorlenko 11.03.2014 13:09:32 - S-I-0000633

///////////////////////////////////////////////////////////////////////////////////////////
// TMC DASHBOARDS Emergency
&НаКлиенте
Процедура ShowSanctionsReportHTCFilters(Команда)
	
	Элементы.ShowSanctionsReportHTCFilters.Пометка = НЕ Элементы.ShowSanctionsReportHTCFilters.Пометка;
	Элементы.КомпоновщикНастроекSanctionsReportHTCПользовательскиеНастройки.Видимость = Элементы.ShowSanctionsReportHTCFilters.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументSanctionsReportHTCОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьРасшифровку(АдресСхемыКомпоновкиSanctionsReportHTC, АдресДанныхРасшифровкиSanctionsReportHTC, Расшифровка, "SanctionsReportHTC");
	
КонецПроцедуры

// report Conditional Release For KZ-RU

&НаКлиенте
Процедура ConditionalRelease(Команда)
	
	ОткрытьФорму("Отчет.ConditionalRelease.Форма.ФормаОтчета", Новый Структура("СформироватьПриОткрытии", Истина), ЭтаФорма); 	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////
// Страница Technical Description

&НаКлиенте
Процедура CatalogAttachmentsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФайл();
	
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьФайл()
	
	ТекущиеДанные = Элементы.CatalogAttachments.ТекущиеДанные;
	                                            		
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	         		
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, 
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура CatalogAttachmentsПриАктивизацииСтроки(Элемент)
	
	ОбновитьПредпросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	    	
	ТекущиеДанные = Элементы.CatalogAttachments.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		АдресДанныхФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	Иначе
		АдресДанныхФайла = Неопределено;
		Элементы.АдресДанныхФайла.ТекстНевыбраннойКартинки = ВернутьСтр("ru = 'Нет данных для предварительного просмотра'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура PartNumbersListПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.PartNumbersList.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
		
		//TDRequests.Параметры.УстановитьЗначениеПараметра("PartNo", ТекДанные.Ссылка);
				
		
		CatalogAttachments.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", ТекДанные.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура CreateNewRequest(Команда)
	
	ОткрытьФорму("РегистрСведений.TDStatuses.Форма.ФормаЗаписиTD", , ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ShowShipmentsPendingCustomsBSReceiptDateFilters(Команда)
	
	Элементы.ShowShipmentsPendingCustomsBSReceiptDateFilters.Пометка = НЕ Элементы.ShowShipmentsPendingCustomsBSReceiptDateFilters.Пометка;
	Элементы.КомпоновщикНастроекShipmentsPendingCustomsBSReceiptDateПользовательскиеНастройки.Видимость = Элементы.ShowShipmentsPendingCustomsBSReceiptDateFilters.Пометка;
	
КонецПроцедуры

// { RGS AArsentev 6/21/2017 6:56:33 PM - S-I-0003168
&НаКлиенте
Процедура Comment(Команда)
	
	ИзменитьКоммент();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКомментарий(DOC, НовыйКомментарий)
	
	УстановитьПривилегированныйРежим(Истина);
	Док = DOC.ПолучитьОбъект();
	Док.CurrentComment = НовыйКомментарий;
	Док.ОбменДанными.Загрузка = Истина;
	Попытка
		Док.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save comment!");
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомментарий(DOC)
	
	Попытка
		CurrentComment = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOC, "CurrentComment");
		Возврат CurrentComment;
	Исключение
		Возврат "";
	КонецПопытки
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКоммент()
	
	ВыбранныйDoc = Элементы.DOCs.ТекущаяСтрока;
	Если ТипЗнч(ВыбранныйDoc) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		СтарыйКомент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйDoc, "CurrentComment");
		
		Если Комментарий <> СтарыйКомент Тогда
			
			Ответ = Вопрос("Change 'Current comment'?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ИзменитьКомментарий(ВыбранныйDoc, Комментарий);
				Элементы.DOCs.Обновить();
				ПодключитьОбработчикОжидания("ОбновитьПодвалDOCs", 0.3, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьCommentНаФорме(Команда)
	
	ИзменитьКоммент();
	
КонецПроцедуры// } RGS AArsentev 6/21/2017 6:56:46 PM - S-I-0003168

&НаКлиенте
Процедура CCA_CoordinatorПриИзменении(Элемент)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(CCA_Coordinator);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	DOCs.КомпоновщикНастроек,
	"CCA_Coordinator",
	CCA_Coordinator,
	ВидСравненияКомпоновкиДанных.ВСписке,
	,
	ИспользоватьОтбор,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
КонецПроцедуры

&НаКлиенте
Процедура TDRequestsПриАктивизацииСтроки(Элемент)
	
	Попытка
		EMailBody = ПолучитьтелоПисьма(Элементы.TDRequests.ТекущиеДанные.EMail);
	Исключение
	КонецПопытки
	
КонецПроцедуры

&НаСервере
Функция ПолучитьтелоПисьма(Emails)
	
	Если ЗначениеЗаполнено(Emails) Тогда
		Попытка
			EMailBody = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Emails, "Body");
			Возврат EMailBody;
		Исключение
			Возврат "";
		КонецПопытки
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура TDRequestsEMailBodyПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрЧислоВхождений(ДанныеСобытия.Href,"#") = 1 Тогда
		
		МногострочнаяСтрока = СтрЗаменить(ДанныеСобытия.Href, "#",Символы.ПС);
		ПерейтиПоНавигационнойСсылке(СтрПолучитьСтроку(МногострочнаяСтрока,2));
		
	КонецЕсли;
	
КонецПроцедуры


