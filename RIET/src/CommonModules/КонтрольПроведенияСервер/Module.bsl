
#Область ИнтерфейсМодуля

Процедура ПередЗаписью(Источник, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ Константы.ИспользоватьКонтрольПроведения.Получить() ИЛИ Источник.ДополнительныеСвойства.Свойство("ПроверкаПроведения") Тогда
		Возврат;
	КонецЕсли;
	
	// не нужно еще раз выполнять действия, если разрешено проведение
	Если Источник.ДополнительныеСвойства.Свойство("КонтрольПроведенияРазрешеноПроведение") Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрольПроведенияСервер.КонтрольПроведенияДляОрганизацииИспользуется(Источник.Организация.ИНН) И 
		КонтрольПроведенияСервер.КонтрольПроведенияДляОрганизацииИспользуется(Источник.Контрагент.ИНН)
		И Источник.Организация.ИНН <> Источник.Контрагент.ИНН Тогда 
		
		// { RGS AFokin 04.04.2016 11:41:00 - установка признака документа интеркомпани
		
		//Добавила условие Федотова Л., РГ-Софт, 05.07.16, вопрос SLI-0006576
		//чтобы не возникало модифицированности при запуске процесса утверждения
		Если НЕ Источник.ЭтоДокументИнтеркомпани Тогда
			Источник.ЭтоДокументИнтеркомпани = Истина;
		КонецЕсли; 
		// } RGS AFokin 04.04.2016 11:41:00 - установка признака документа интеркомпани
		
		Источник.ДополнительныеСвойства.Вставить("ВыполнятьКонтрольПроведения", Истина);
		Если НЕ Источник.ДополнительныеСвойства.Свойство("КонтрольПроведенияРазрешеноПроведение")
				//добавила Федотова Л., РГ-Софт, 12.10.15, вопрос SLI-0005862
				И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения")
				//
				//добавила Федотова Л., РГ-Софт, 12.10.15, вопрос SLI-0005866
				И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоПроведениеПослеУтверждения")
				//
				//добавила Федотова Л., РГ-Софт, 13.10.15, вопрос SLI-0005869
				И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоОтменаУтверждения")
				//
				И НЕ Источник.ДополнительныеСвойства.Свойство("ПроверкаПроведения") 
				И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
				И Константы.ПроводитьДокументыЧерезМодульКонтроля.Получить() Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

Функция ПолучитьПараметрыПодключения() Экспорт
	
	Возврат Константы.КонтрольПроведенияПараметрыПодключенияКМодулюКонтроля.Получить().Получить();
	
КонецФункции

Функция КонтрольПроведенияДляОрганизацииИспользуется(ИННОрганизации) Экспорт
	
	// если ИНН не указан, не контролируем
	Если НЕ ЗначениеЗаполнено(ИННОрганизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// если модуль контроля не настроен, то ничего не контролируем
	МассивИНН = КонтрольПроведенияСерверПовторноеИспользование.ПолучитьСписокИННКонтролируемыхКомпаний();
	Если МассивИНН = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// если модуль контроля не знает про организацию, то не контролируем
	Если МассивИНН.Найти(ИННОрганизации) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти                                                                                                                                       	

#Область ОбработчикиПодпискиНаСобытия

Процедура КонтрольПроведенияПередЗаписьюОбработчик(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрольПроведенияПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Константы.ИспользоватьКонтрольПроведения.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Если ранее при записи что-то произошло, что мешает записи, нет смысла ничего делать
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ВыполнятьКонтрольПроведения") Тогда
		Возврат;
	КонецЕсли;
	
	// не нужно еще раз выполнять действия, если разрешено проведение
	Если Источник.ДополнительныеСвойства.Свойство("КонтрольПроведенияРазрешеноПроведение") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Источник.ДополнительныеСвойства.Свойство("РежимЗаписи") 
			И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
			//Добавила Федотова Л., РГ-Софт, 13.10.15, вопрос SLI-0005869
			И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоОтменаУтверждения")
			Тогда
			
		Если Константы.ПроводитьДокументыЧерезМодульКонтроля.Получить() Тогда
			СтруктураДанных = СформироватьСтруктуруИдентификацииДокументаXDTO(Источник);
			Ответ = ДействиеМодуляКонтроля("UndoPosting", Отказ, ТекстОшибки, СтруктураДанных);
		КонецЕсли;
		
		Возврат;

	КонецЕсли;	
	
	МассивДокументовXDTO = СформироватьМассивДокументовXDTO(Источник, Отказ, ТекстОшибки);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// отправляем запрос на создание/обновление документа в модуле контроля
	Ответ = ДействиеМодуляКонтроля("CreateDocument", Отказ, ТекстОшибки, МассивДокументовXDTO);
	
	Если НЕ Константы.ПроводитьДокументыЧерезМодульКонтроля.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	// не смогли достучаться до модуля контроля. Документ не записываем. 
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// { RGS AFokin 19.09.2016 0:14:46
	Если Источник.ДополнительныеСвойства.Свойство("РежимЗаписи") 
		И Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ Ответ.Проводить Тогда
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не прошел контроль проведения и не будет записан. " + ТекстОшибки);
		Возврат;
		
	КонецЕсли;    
	// } RGS AFokin 19.09.2016 0:14:47
	
	//// Если почему-то не удалось записать, то нужно сообщить пользователю причину
	//Если Ответ.Свойство("Записывать") и НЕ Ответ.Записывать Тогда
	//	Отказ = Истина;
	//	текстСообщения = "Документ не записан.";
	//	Если Ответ.ДанныеДругойСтороныПроведены Тогда
	//		текстСообщения = текстСообщения + " Данные другой стороны проведены!";
	//	КонецЕсли;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстСообщения);
	//	Возврат;
	//КонецЕсли;
	
	// передаем результат обработки дальше для анализа при проведении
	//Источник.ДополнительныеСвойства.Вставить("СтруктураДанных", 			СтруктураДанных);
	//Источник.ДополнительныеСвойства.Вставить("ОтветПриЗаписи", 				Ответ);
	
	Если Источник.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Ответ.Проводить
			И НЕ Источник.ДополнительныеСвойства.Свойство("КонтрольПроведенияРазрешеноПроведение") Тогда
		//Источник.ДополнительныеСвойства.Вставить("КонтрольПроведенияРазрешеноПроведение", Истина);
		//Источник.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СтруктураДанных = СформироватьСтруктуруИдентификацииДокументаXDTO(Источник);
		Ответ = ДействиеМодуляКонтроля("PostDocument", Отказ, ТекстОшибки, СтруктураДанных);
	КонецЕсли;
		
КонецПроцедуры

Процедура КонтрольПроведенияПриПроведенииДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;

	//Если НЕ Константы.ИспользоватьКонтрольПроведения.Получить()
	//		ИЛИ НЕ Константы.ПроводитьДокументыЧерезМодульКонтроля.Получить() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ Источник.ДополнительныеСвойства.Свойство("ВыполнятьКонтрольПроведения") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.ДополнительныеСвойства.Свойство("ПроведениеИзМодуляКонтроля") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекстОшибки = "";
	//СтруктураДанных = СформироватьСтруктуруИдентификацииОбъекта(Источник);
	//ОтветПриЗаписи  = Источник.ДополнительныеСвойства.ОтветПриЗаписи;
	//
	//// если все совпадает, то больше ничего не проверяем. Пусть документ проводится на здоровье. 
	//Если ОтветПриЗаписи.ДанныеДругойСтороныПроведены и ОтветПриЗаписи.ДанныеСторонСовпадают Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ ОтветПриЗаписи.ДанныеДругойСтороныСуществуют Тогда
	//	Отказ = Истина;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа отложено т.к. Покупатель еще не отразил документы у себя");
	//КонецЕсли;
	//
	//Если ОтветПриЗаписи.ДанныеДругойСтороныСуществуют и НЕ ОтветПриЗаписи.ДанныеСторонСовпадают И ОтветПриЗаписи.ДанныеДругойСтороныПроведены Тогда
	//	Отказ = Истина;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен т.к. в базе Покупателя проведены данные, которые отличаются от данных проводимого документ");
	//КонецЕсли;	
	//
	//// Если данные другой стороны есть, совпадают, но не проведены, тогда посылаем запрос на проведение
	//Если НЕ ОтветПриЗаписи.ДанныеДругойСтороныПроведены и ОтветПриЗаписи.ДанныеСторонСовпадают Тогда
	//	Если НЕ Отказ Тогда
	//		Источник.ДополнительныеСвойства.Вставить("КонтрольПроведенияРазрешеноПроведение");
	//		Источник.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	КонецЕсли;

	//	Ответ = ДействиеМодуляКонтроля("PostDocument", Отказ, ТекстОшибки, СтруктураДанных);
	//	Если Отказ Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен т.к. не удалось провести документ в базе Покупателя" + Символы.ВК + ТекстОшибки);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура КонтрольПроведенияПриОтменеПроведения(Источник, Отказ) Экспорт
	
	//Если Отказ Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ Константы.ИспользоватьКонтрольПроведения.Получить()
	//		ИЛИ НЕ Константы.ПроводитьДокументыЧерезМодульКонтроля.Получить() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// контроль проведения должен быть включен как для организации, так и для контрагента
	//Если НЕ КонтрольПроведенияДляОрганизацииИспользуется(Источник.Организация.ИНН) или 
	//	НЕ КонтрольПроведенияДляОрганизацииИспользуется(Источник.Контрагент.ИНН) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.ДополнительныеСвойства.Свойство("ПроведениеИзМодуляКонтроля") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекстОшибки = "";
	//СтруктураДанных = СформироватьСтруктуруИдентификацииОбъекта(Источник);
	//
	//// отправляем запрос на создание/обновление документа в модуле контроля
	//Ответ = ДействиеМодуляКонтроля("UndoPosting", Отказ, ТекстОшибки, СтруктураДанных);
	//
	//Если Отказ Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

Функция ДействиеМодуляКонтроля(ИмяМетода, Отказ, ТекстОшибки, Параметр1 = Неопределено, Параметр2 = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Прокси = КонтрольПроведенияСерверПовторноеИспользование.ПолучитьПрокси();	
	
	Если Прокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписатьТекстОшибки(ТекстОшибки, "Не удалось соединиться с Web-сервисом");
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = Неопределено;
	
	Запрос = "";
	
	Если Параметр1 = Неопределено и Параметр2 = Неопределено Тогда
		Запрос = "Ответ = Прокси." + ИмяМетода + "();";	
	ИначеЕсли Параметр2 = Неопределено Тогда 
		Запрос = "Ответ = Прокси." + ИмяМетода + "(Параметр1);";
	Иначе
		Запрос = "Ответ = Прокси." + ИмяМетода + "(Параметр1, Параметр2);";
	КонецЕсли;		
	
	Выполнить(Запрос);
	
	Если Ответ = Null Тогда
		Отказ = Истина;
		ЗаписатьТекстОшибки(ТекстОшибки, "Не удалось получить ответ от Web-сервиса");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета = СериализаторXDTO.ПрочитатьXDTO(Ответ);
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
		Если СтруктураОтвета.Свойство("Отказ") Тогда
			Отказ = Отказ ИЛИ СтруктураОтвета.Отказ;
		КонецЕсли;
		Если СтруктураОтвета.Свойство("ТекстОшибки") Тогда
			ЗаписатьТекстОшибки(ТекстОшибки, СтруктураОтвета.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция СформироватьМассивДокументовXDTO(ИсточникДанных, Отказ, ТекстОшибки)
	
	СсылкаНаОбъект = ИсточникДанных.Ссылка;
	МассивДокументов = Новый Массив;
	
	ДанныеДокумента = КонтрольПроведенияПереопределяемыйСервер.ПолучитьДанныеДокумента(СсылкаНаОбъект);
	
	Для каждого ТекДок Из ДанныеДокумента.ДанныеШапки Цикл
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
			 СтрокиТЧ = ДанныеДокумента.ДанныеТЧ.НайтиСтроки(Новый Структура("Ссылка, ИсхПоставщикНаименование", ТекДок.Ссылка, ТекДок.ИсхПоставщикНаименование));
		 Иначе
			 СтрокиТЧ = ДанныеДокумента.ДанныеТЧ.НайтиСтроки(Новый Структура("Ссылка", ТекДок.Ссылка));
        КонецЕсли;
		ДанныеТЧ = ДанныеДокумента.ДанныеТЧ.Скопировать(СтрокиТЧ);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Тип",				ТекДок.ТипДокумента);
		СтруктураДанных.Вставить("ТипОбъекта",		"Документ." + СсылкаНаОбъект.Метаданные().Имя);
		СтруктураДанных.Вставить("УникальныйИдентификатор", Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("Организация", 	Новый Структура("ИНН, КПП", ТекДок.ОрганизацияИНН, ТекДок.ОрганизацияКПП));
		СтруктураДанных.Вставить("Контрагент", 		Новый Структура("ИНН, КПП", ТекДок.КонтрагентИНН, ТекДок.КонтрагентКПП));
		СтруктураДанных.Вставить("НомерДокумента", 	СокрЛП(ТекДок.Номер));
		СтруктураДанных.Вставить("ДатаДокумента", 	НачалоДня(ТекДок.Дата));
		СтруктураДанных.Вставить("НомерВходящегоДокумента", СокрЛП(ТекДок.НомерВходящегоДокумента));
		СтруктураДанных.Вставить("ДатаВходящегоДокумента", НачалоДня(ТекДок.ДатаВходящегоДокумента));
		СтруктураДанных.Вставить("Документ", 		КонтрольПроведенияРаботаСXMLСервер.СформироватьXMLПредставлениеОбъекта(ТекДок, ДанныеТЧ, Отказ, ТекстОшибки));
		СтруктураДанных.Вставить("Документы", 		Null);
		СтруктураДанных.Вставить("Пользователь", 	СокрЛП(Пользователи.ТекущийПользователь()));
		СтруктураДанных.Вставить("Валюта", 			ТекДок.ВалютаКод);
		СтруктураДанных.Вставить("СуммаДокумента",	ТекДок.СуммаДокумента);
		СтруктураДанных.Вставить("УникальныйИдентификаторДоп", "");
		//{RGS AFokin 04.05.2017 23:59:59
		СтруктураДанных.Вставить("База", "SLI");
		//{RGS AFokin 04.05.2017 23:59:59
		
		Если ДанныеДокумента.ДанныеШапки.Колонки.Найти("УникальныйИдентификаторДоп") <> Неопределено
				И ЗначениеЗаполнено(ТекДок.УникальныйИдентификаторДоп) Тогда
			СтруктураДанных.Вставить("УникальныйИдентификаторДоп", ТекДок.УникальныйИдентификаторДоп);
		ИначеЕсли ТекДок.Ссылка <> СсылкаНаОбъект Тогда
			СтруктураДанных.Вставить("УникальныйИдентификаторДоп", Строка(ТекДок.Ссылка.УникальныйИдентификатор()));
			КонтрольПроведенияПереопределяемыйСервер.ОпределитьПоискПоДопИдентификатору(СтруктураДанных, СсылкаНаОбъект, ТекДок.Ссылка);
		КонецЕсли;
		
		МассивДокументов.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(МассивДокументов);
	
КонецФункции

Функция СформироватьСтруктуруИдентификацииДокументаXDTO(ИсточникДанных)
	
	СсылкаНаОбъект = ИсточникДанных.Ссылка;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТипОбъекта",		"Документ." + СсылкаНаОбъект.Метаданные().Имя);
	СтруктураДанных.Вставить("УникальныйИдентификатор", Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
	СтруктураДанных.Вставить("Пользователь", 	СокрЛП(Пользователи.ТекущийПользователь()));
	//{RGS AFokin 04.05.2017 23:59:59
	СтруктураДанных.Вставить("СуперПользователь", РольДоступна("ПолныеПрава"));
	СтруктураДанных.Вставить("База", "SLI");
	//}RGS AFokin 04.05.2017 23:59:59
 
	
	КонтрольПроведенияПереопределяемыйСервер.ДополнитьСтруктуруИдентификацииДокументаXDTO(СсылкаНаОбъект, СтруктураДанных);
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураДанных);
	
КонецФункции

Процедура ЗаписатьТекстОшибки(ПеремТекстОшибки, ТекстОшибки)
	
	Если ПеремТекстОшибки = "" Тогда
		ПеремТекстОшибки = ТекстОшибки;
	Иначе
		ПеремТекстОшибки = ПеремТекстОшибки + Символы.ВК + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДокумент(СтруктураПараметров) Экспорт
	
	ИмяДокумента = СтрЗаменить(СтруктураПараметров.ТипОбъекта, "Документ.", "");
	
	Попытка
		
		УИД = Новый УникальныйИдентификатор(СтруктураПараметров.УникальныйИдентификатор);
		СсылкаНаОбъект = Документы[ИмяДокумента].ПолучитьСсылку(УИД);
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда
			Возврат СсылкаНаОбъект;
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Процедура КонтрольИспользованияКонтрагентовОбработчик(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.Контрагент.ДатаЗапретаИспользования = Дата(1,1,1) И Источник.Контрагент.ДатаЗапретаИспользования <= Источник.Дата Тогда
		Сообщить("Запрещено использование контрагента " + Источник.Контрагент + " с " + Формат(Источник.Контрагент.ДатаЗапретаИспользования, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 	
	
КонецПроцедуры

// { RGS AFokin 04.05.2017 23:59:59
Функция СформироватьЗаписьrgsИсторияСтатусовДокументовIco(Документ, Статус, Пользователь, Сообщение, Ошибка) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.rgsИсторияСтатусовДокументовIco.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.ДокументIco = Документ;
	МенеджерЗаписи.СтатусыДокументовIco = Статус;
	МенеджерЗаписи.СообщениеПользователю = Строка(Сообщение);
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Ошибка = Ошибка;
	МенеджерЗаписи.Записать();
	
КонецФункции 

Функция СтатусСостоянияДокументаIco(СтатусСтрокой) Экспорт
	
	// доопределяем статус документа ico
	Если СтатусСтрокой = "Попытка проведения" Тогда
		Возврат Перечисления.rgsСтатусыДокументовIco.ПопыткаПроведения;
	ИначеЕсли  СтатусСтрокой = "Проведен" Тогда
		Возврат Перечисления.rgsСтатусыДокументовIco.Проведен;
	ИначеЕсли  СтатусСтрокой = "Ошибка проведения" Тогда
		Возврат Перечисления.rgsСтатусыДокументовIco.ОшибкаПроведения;
	ИначеЕсли  СтатусСтрокой = "Проведение отменено" Тогда
		Возврат Перечисления.rgsСтатусыДокументовIco.ПроведениеОтменено;
	ИначеЕсли  СтатусСтрокой = "Ошибка отмены проведения" Тогда
		Возврат Перечисления.rgsСтатусыДокументовIco.ОшибкаОтменыПроведения;
	КонецЕсли;	
	
КонецФункции

Процедура УстановитьТолькоПросмотрДляФормы(Форма, Источник) Экспорт
	
	Если Источник.ЭтоДокументИнтеркомпани И Источник.Проведен И НЕ РольДоступна("ПолныеПрава") Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры
// } RGS AFokin 04.05.2017 23:59:59

#КонецОбласти

