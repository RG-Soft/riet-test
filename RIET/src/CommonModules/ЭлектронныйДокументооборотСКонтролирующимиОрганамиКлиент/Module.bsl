
Функция ПолучитьДатуПротокола(СвойстваПротокола)
	
	Если СвойстваПротокола = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если СвойстваПротокола.Дата = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат СвойстваПротокола.Дата;
	
КонецФункции

Процедура ОткрытьПротоколОтправки(Форма, КонтролирующийОрган) Экспорт
	
	Если КонтролирующийОрган = "ФСС" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиФССЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиФСРАРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		
		СвойстваПротоколаСервисСОС = СдачаОтчетностиЧерезСервисСпецоператораВызовСервера.ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет);
		СвойстваПротоколаЭДО = ДокументооборотСКОВызовСервера.ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет);
		
		ДатаПротоколаСервисСОС = ПолучитьДатуПротокола(СвойстваПротоколаСервисСОС);
		ДатаПротоколаЭДО = ПолучитьДатуПротокола(СвойстваПротоколаЭДО);
		
		Если ДатаПротоколаСервисСОС = '00010101' И ДатаПротоколаЭДО = '00010101' Тогда
			ПоказатьПредупреждение(, "Протокол не найден.");
			Возврат;
		ИначеЕсли ДатаПротоколаЭДО > ДатаПротоколаСервисСОС Тогда
			ПоказатьЗначение(, СвойстваПротоколаЭДО.Протокол);
		Иначе
			СдачаОтчетностиЧерезСервисСпецоператораКлиент.ПоказатьПротокол(Форма)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиФСС(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиФСРАРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиФСРАР(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиРПН(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, КонтролирующийОрган, КодРегионаВФорме = Неопределено, 
	Знач ЭтоОтправкаИзФормыОтчетность = Ложь, Знач СсылкаНаОтчет = Неопределено, Знач ОрганизацияОтчета = Неопределено) Экспорт
	
	Если КонтролирующийОрган = "ФСС" Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета", Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФССЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		ДополнительныеПараметры = Новый Структура("Форма, КодРегионаВФорме, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета", Форма, КодРегионаВФорме, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФСРАРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета", Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		ДокументооборотСКОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, КонтролирующийОрган, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	КонецЕсли;

КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСС(Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФСРАРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	КодРегионаВФорме = ДополнительныеПараметры.КодРегионаВФорме;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСРАР(Форма, КодРегионаВФорме, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляРПН(Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган = "ФНС") Экспорт
	
	ДокументооборотСКОКлиент.ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган);
	
КонецПроцедуры

Процедура УстановитьВК(ПутьВК, ВыполняемоеОповещение)
	
	ВебБраузер = РегламентированнаяОтчетностьКлиент.ВебБраузер();
	ВЭтомСеансеОткрывалиОкноУстановки = Ложь;
	
	Если ВебБраузер = "FIREFOX" Тогда 
		
		ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВКвFIREFOXЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуУстановкиКомпонентыВFIREFOX(ПутьВК, ОписаниеОповещения);
		
	Иначе
		
		Попытка
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, ПутьВК);
		Исключение
			КомпонентаУстановлена = Ложь;
			ТекстСообщения = ВернутьСтр("ru='Не удалось установить внешнюю компоненту для работы с криптографией.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, КомпонентаУстановлена);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВКвFIREFOXЗавершение(ЗавершениеДиалогаУстановки, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ВЭтомСеансеОткрывалиОкноУстановки = ?(ВЭтомСеансеОткрывалиОкноУстановки = КодВозвратаДиалога.Отмена, Ложь, ВЭтомСеансеОткрывалиОкноУстановки);
		
	// в FIREFOX установка завершается при следующем открытии браузера
	КомпонентаУстановлена = Ложь; 
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, КомпонентаУстановлена);
	
КонецПроцедуры

Процедура УстановитьВКЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КомпонентаУстановлена = Истина;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, КомпонентаУстановлена);
	
КонецПроцедуры

// Открывает форму, которая используется при установке внешней компоненты в FF
Процедура ОткрытьФормуУстановкиКомпонентыВFIREFOX(ПутьВК, ВыполняемоеОповещение) Экспорт
	
	КонтекстЭДОКлиент = ПолучитьКонтекстЭДО();
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	Иначе
		СтруктураПараметров = Новый Структура("ПутьВК", ПутьВК);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УстановкаКомпоненты", СтруктураПараметров,,,,,ВыполняемоеОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Вызываем локально получение Контекста ЭДО без модальных вызовов
// Так как это повторный запуск для установки внешней компоненты в FF
Функция ПолучитьКонтекстЭДО()
	
	ТекстСообщения = "";
	
	СтруктураПараметров = Новый Структура("КонтекстЭДО");
	Оповестить("Получение контекста ЭДО", СтруктураПараметров);
	
	Если СтруктураПараметров.КонтекстЭДО <> Неопределено Тогда
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
		СтруктураРезультата.Вставить("КонтекстЭДО", СтруктураПараметров.КонтекстЭДО);
		
		Возврат СтруктураПараметров.КонтекстЭДО;
			
	ИначеЕсли НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.РазделениеВключено() И ДокументооборотСКОВызовСервера.ПодключатьВнешнююОбработкуЭДО() Тогда
		Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Истина) Тогда
			Попытка
				ФормаРезультат = ПолучитьФорму("ВнешняяОбработка.Обработка_ДокументооборотСКО.Форма.КонтейнерКлиентскихМетодов");
				ФормаРезультат.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО";
			Исключение
				Состояние(ВернутьСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
					|Будет использован модуль, встроенный в конфигурацию.'"));
				ФормаРезультат = ПолучитьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.КонтейнерКлиентскихМетодов");
				ФормаРезультат.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
			КонецПопытки;
					
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
			СтруктураРезультата.Вставить("КонтекстЭДО", ФормаРезультат);

			Возврат ФормаРезультат;
			
		Иначе
			ТекстСообщения = ВернутьСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
			
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
			СтруктураРезультата.Вставить("КонтекстЭДО", Неопределено);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь) Тогда
			ФормаРезультат = ПолучитьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.КонтейнерКлиентскихМетодов");
			ФормаРезультат.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
			
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
			СтруктураРезультата.Вставить("КонтекстЭДО", ФормаРезультат);

			Возврат ФормаРезультат;
			
		Иначе
			ТекстСообщения = ВернутьСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
			
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
			СтруктураРезультата.Вставить("КонтекстЭДО", Неопределено);
			
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции //ПолучитьКонтекстЭДО()

Функция ПодключитьВК(ПутьВК, ТихийРежим = Истина) Экспорт
	
	Попытка
		КодВозврата = ПодключитьВнешнююКомпоненту(ПутьВК, "ЭДОNative");
	Исключение
		КодВозврата = Ложь;
	КонецПопытки;
	
	Если НЕ КодВозврата И НЕ ТихийРежим Тогда
		ТекстСообщения = ВернутьСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции

Функция НовыйОбъектКриптография(ТихийРежим = Истина)
	
	Попытка
		
		Крипт = Новый("Addin.ЭДОNative.CryptS");
		Возврат Крипт;
		
	Исключение
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с криптографией.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция НовыйОбъектДвоичныеДанные(ТихийРежим = Истина)
	
	Попытка
		
		ДвДанные = Новый("Addin.ЭДОNative.BinaryDataS");
		Возврат ДвДанные;
		
	Исключение
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с двоичными данными.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ИнициализироватьКриптопровайдера(Крипт, ИмяКриптопровайдера, ТипКриптопровайдера, ПутьМодуляКриптографии = "", ИскатьВСистеме = Ложь)
	Если ИскатьВСистеме Тогда
		Попытка
			Крипт.НеВыводитьСообщенияОбОшибках = Истина;
			Крипт.СоздатьМенеджераКриптографии(ИмяКриптопровайдера, ПутьМодуляКриптографии, ТипКриптопровайдера);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		ВремИмяКриптопровайдера 	= "";
		ВремТипКриптопровайдера 	= 0;
		ВремПутьМодуляКриптографии 	= "";
		
		Пока Крипт.ПолучитьСледующийКриптопровайдер(ВремИмяКриптопровайдера, ВремПутьМодуляКриптографии, ВремТипКриптопровайдера) Цикл
			Если ИмяКриптопровайдера = ВремИмяКриптопровайдера И ТипКриптопровайдера = ВремТипКриптопровайдера Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		// в системе нет требуемого криптопровайдера
		Возврат Ложь;
	Иначе
		
		Попытка
			Крипт.НеВыводитьСообщенияОбОшибках = Истина;
			Крипт.СоздатьМенеджераКриптографии(ИмяКриптопровайдера, ПутьМодуляКриптографии, ТипКриптопровайдера);
			Возврат Истина; 
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
КонецФункции 

// Функция без установки внешней компоненты. Для установки внешней компоненты используется процедура
// СоздатьОбъектДляРаботыСКриптографиейСУстановкой, или ДокументооборотСКОКлиент.ИнициализацияВК
Функция СоздатьОбъектДляРаботыСКриптографией(ТихийРежим = Ложь) Экспорт
	//создаем объект
	Крипт = НовыйОбъектКриптография(Истина);
	Если Крипт = Неопределено Тогда
		
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			
			Крипт = НовыйОбъектКриптография(Ложь);
			Если Крипт = Неопределено Тогда
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			Если НЕ ТихийРежим Тогда
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПовтИсп.ВывестиСообщенияНеУдалосьПодключитьВнешнююКомпоненту();
			КонецЕсли;
			Возврат Неопределено;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаОС(), "Linux") > 0  Тогда
		//linux
		Если Лев(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ВерсияБСП()) + ".", 4) = "2.1." Тогда
			ПутьМодуляКриптографии = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЭлектроннаяЦифроваяПодписьКлиент").ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПутьМодуляКриптографии;
		Иначе
			ПутьМодуляКриптографии = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер").ПерсональныеНастройки().ПутьМодуляКриптографии;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			Если НЕ ТихийРежим Тогда
				ТекстСообщения = ВернутьСтр("ru='Не указан путь модуля криптографии в настройках документооборота с контролирующими органами.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		ТипКриптопровайдера = 75;

		Если ИнициализироватьКриптопровайдера(Крипт, ИмяКриптопровайдера, ТипКриптопровайдера, ПутьМодуляКриптографии) Тогда
			Возврат Крипт;
		Иначе
			Если НЕ ТихийРежим Тогда
				ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		//windows
		
		//получим значения из ИБ
		РезультатЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ЗаполнитьПараметрыКриптографии();
		
		ПрисутствуетЗаполненныйПараметр = РезультатЗаполнения.ПрисутствуетЗаполненныйПараметр;
		ПараметрыКриптографии = РезультатЗаполнения.ПараметрыКриптографии;
		
		Если ПрисутствуетЗаполненныйПараметр Тогда
			Если ИнициализироватьКриптопровайдера(Крипт, ПараметрыКриптографии["ИмяКриптопровайдера"], ПараметрыКриптографии["ТипКриптопровайдера"], , Истина) Тогда
				Возврат Крипт;
			КонецЕсли;	
		КонецЕсли;
		
		//по данным из ИБ криптопровайдер не инициализирован (либо в ИБ нет данных)
		ИмяКриптоПро = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		ТипКриптоПро = 75;
		
		ИмяВиПНет = "Infotecs Cryptographic Service Provider";
		ТипВиПНет = 2;
		
		Если ИнициализироватьКриптопровайдера(Крипт, ИмяКриптоПро, ТипКриптоПро, , Истина) Тогда
			Возврат Крипт;
		Иначе
			Если ИнициализироватьКриптопровайдера(Крипт, ИмяВиПНет, ТипВиПНет, , Истина) Тогда
				Возврат Крипт;
			Иначе
				Если НЕ ТихийРежим Тогда
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПовтИсп.ВывестиСообщенияКриптаНеУдалосьСоздатьОбъектДляРаботыСКриптографией();
				КонецЕсли;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// В выполняемое оповещение в качестве результата передается Крипт, если удалось его получить. Иначе возвращается Неопределено.
Процедура СоздатьОбъектДляРаботыСКриптографиейСУстановкой(ВыполняемоеОповещение, ВыводитьСообщения = Истина) Экспорт
	
	//создаем объект
	Крипт = НовыйОбъектКриптография(Истина);
	Если Крипт = Неопределено Тогда
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			Крипт = НовыйОбъектКриптография(Ложь);
			Если Крипт = Неопределено Тогда
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
			Иначе
				ДополнительныеПараметры = Новый Структура("Крипт, ВыводитьСообщения, ВыполняемоеОповещение", Крипт, ВыводитьСообщения, ВыполняемоеОповещение);
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОбъектДляРаботыСКриптографиейСУстановкойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения);
			КонецЕсли;
		Иначе
			ДополнительныеПараметры = Новый Структура("ВыводитьСообщения, ВыполняемоеОповещение, ПутьВК", ВыводитьСообщения, ВыполняемоеОповещение, ПутьВК);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУстановкиВКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			УстановитьВК(ПутьВК, ОписаниеОповещения);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура("Крипт, ВыводитьСообщения, ВыполняемоеОповещение", Крипт, ВыводитьСообщения, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОбъектДляРаботыСКриптографиейСУстановкойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеУстановкиВКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	ПутьВК = ДополнительныеПараметры.ПутьВК;
	
	Если Результат Тогда
		Если ПодключитьВК(ПутьВК, Ложь) Тогда
			Крипт = НовыйОбъектКриптография(Ложь);
			Если Крипт = Неопределено Тогда
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
			Иначе
				ДополнительныеПараметры = Новый Структура("Крипт, ВыводитьСообщения, ВыполняемоеОповещение", Крипт, ВыводитьСообщения, ВыполняемоеОповещение);
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОбъектДляРаботыСКриптографиейСУстановкойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения);
			КонецЕсли;
		Иначе
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		КонецЕсли
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектДляРаботыСКриптографиейСУстановкойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Крипт = ДополнительныеПараметры.Крипт;
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если СтрНайти(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаОС(), "Linux") > 0  Тогда
		//linux
		Если Лев(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ВерсияБСП()) + ".", 4) = "2.1." Тогда
			ПутьМодуляКриптографии = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЭлектроннаяЦифроваяПодписьКлиент").ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПутьМодуляКриптографии;
		Иначе
			ПутьМодуляКриптографии = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер").ПерсональныеНастройки().ПутьМодуляКриптографии;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ТекстСообщения = ВернутьСтр("ru='Не указан путь модуля криптографии в настройках документооборота с контролирующими органами.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		ТипКриптопровайдера = 75;

		Если ИнициализироватьКриптопровайдера(Крипт, ИмяКриптопровайдера, ТипКриптопровайдера, ПутьМодуляКриптографии) Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Крипт);
		Иначе
			ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		КонецЕсли;
	Иначе
		//windows
		
		//получим значения из ИБ
		РезультатЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ЗаполнитьПараметрыКриптографии();
		
		ПрисутствуетЗаполненныйПараметр = РезультатЗаполнения.ПрисутствуетЗаполненныйПараметр;
		ПараметрыКриптографии = РезультатЗаполнения.ПараметрыКриптографии;
		
		Если ПрисутствуетЗаполненныйПараметр Тогда
			Если ИнициализироватьКриптопровайдера(Крипт, ПараметрыКриптографии["ИмяКриптопровайдера"], ПараметрыКриптографии["ТипКриптопровайдера"], , Истина) Тогда
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Крипт);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		//по данным из ИБ криптопровайдер не инициализирован (либо в ИБ нет данных)
		ИмяКриптоПро = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		ТипКриптоПро = 75;
		
		ИмяВиПНет = "Infotecs Cryptographic Service Provider";
		ТипВиПНет = 2;
		
		Если ИнициализироватьКриптопровайдера(Крипт, ИмяКриптоПро, ТипКриптоПро, , Истина) Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Крипт);
		Иначе
			Если ИнициализироватьКриптопровайдера(Крипт, ИмяВиПНет, ТипВиПНет, , Истина) Тогда
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Крипт);
			Иначе
				Если ВыводитьСообщения Тогда
					ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Функция СоздатьОбъектДляРаботыСДвоичнымиДанными() Экспорт
	
	Если Лев(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ВерсияБСП()) + ".", 4) = "2.1." Тогда
		Если ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбщегоНазначенияКлиентПовтИсп").ЭтоВебКлиентБезПоддержкиРасширенияРаботыСФайлами() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДвДанные = НовыйОбъектДвоичныеДанные(Истина);
	Если ДвДанные = Неопределено Тогда
		
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			
			ДвДанные = НовыйОбъектДвоичныеДанные(Ложь);
			Если ДвДанные = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
		Иначе
			// Установка ВК выполняется в процедуре ИнициализацияВК, вызываемая до создания объекта для работы с Двоичными данными
			ТекстСообщения = ВернутьСтр("ru='Не удалось подключить внешнюю компоненту.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвДанные;
	
КонецФункции

Процедура ПроверитьВИнтернете(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ДокументооборотСКОКлиент.ПроверитьВИнтернете(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Функция ЭтоРазрешенныйБраузер(ВыводитьСообщение = Истина) Экспорт
	
	ИспользуетсяРазрешенныйБраузер = истина;
	
	Возврат ИспользуетсяРазрешенныйБраузер;
	
КонецФункции

//Используется для обхода ошибки платформы (в веб клиенте FF вместе со служебным окном "Состояние" пропадает окно ввода пароля VipNet)
Процедура АктивизироватьАктивноеОкноПриНеобходимости() Экспорт
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайрФокс() Тогда
		АктивноеОкно().Активизировать();
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ РАБОТЫ С ПАРОЛЕМ ДОСТУПА К ЗАКРЫТОМУ КЛЮЧУ

Процедура ЗаполнитьПарольДоступаКрипт(Крипт, СерийныйНомер, Поставщик, ВыполняемоеОповещение) Экспорт
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоЛинукс() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СерийныйНомер", СерийныйНомер);
		ПараметрыФормы.Вставить("Поставщик", Поставщик);
		ДополнительныеПараметры = Новый Структура("Крипт, ВыполняемоеОповещение", Крипт, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПарольДоступаКриптЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВводаПароляЗакрытогоКлюча", ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Результат = Новый Структура("Крипт, ВводПароля", Крипт, Истина);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПарольДоступаКриптЗавершение(ПарольДоступа, ДополнительныеПараметры) Экспорт
	
	Крипт = ДополнительныеПараметры.Крипт;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если ТипЗнч(ПарольДоступа) = Тип("Строка") Тогда
		Крипт.ПарольДоступаКЗакрытомуКлючу = ПарольДоступа;
		ВводПароля = Истина;
	Иначе
		ВводПароля = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура("Крипт, ВводПароля", Крипт, ВводПароля);
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

// ФУНКЦИИ И ПРОЦЕДУРЫ РАБОТЫ С ПАРОЛЕМ ДОСТУПА К ЗАКРЫТОМУ КЛЮЧУ
///////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМОЙ ПО 1С-ОТЧЕТНОСТИ 
Процедура ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация = Неопределено) Экспорт
	
	ПарметрыОткрытия = Новый Структура();
	ПарметрыОткрытия.Вставить("Организация", Организация);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПредложениеОформитьЗаявлениеНаПодключение", ПарметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьФормуМастераЗаявленияНаПодключение(Организация, ВладелецОткрываемойФормы = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Организация, ВладелецОткрываемойФормы", Организация, ВладелецОткрываемойФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуМастераЗаявленияНаПодключениеПослеУстановкиВК", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуМастераЗаявленияНаПодключениеПослеУстановкиВК(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ПоказатьПредупреждение(, ВернутьСтр("ru = 'Подключение к электронному документообороту невозможно: недостаточно прав.'"));
		
	Иначе
		
		Организация = ДополнительныеПараметры.Организация;
		ВладелецОткрываемойФормы = ДополнительныеПараметры.ВладелецОткрываемойФормы;
				
		#Если ВебКлиент Тогда
			ДоступноИспользованиеЭлектроннойПодписиВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаВызовСервера.ИспользованиеВозможно();
			ЭтоРазрешенныйБраузер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ЭтоРазрешенныйБраузер(
				Не ДоступноИспользованиеЭлектроннойПодписиВМоделиСервиса); 
			Если Не ЭтоРазрешенныйБраузер И Не ДоступноИспользованиеЭлектроннойПодписиВМоделиСервиса Тогда
				Возврат;
			КонецЕсли; 
		#КонецЕсли
		
		// Если учетная запись настроена, то открываем не первичное, а вторичное заявление
		УжеНастроенаУчетнаяЗаписьДокументооборота = ЗначениеЗаполнено(КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация));
		ПоддерживаетсяВторичноеЗаявление = КонтекстЭДОКлиент.ПоддерживаетсяВторичноеЗаявление(Организация);
		
		Если УжеНастроенаУчетнаяЗаписьДокументооборота И ПоддерживаетсяВторичноеЗаявление Тогда
			
			РеквизитыУчетнойЗаписи = ЭлектроннаяПодписьВМоделиСервисаВызовСервера.РеквизитыУчетнойЗаписи(Организация);
			ЭтоЭлектроннаяПодписьВМоделиСервиса = РеквизитыУчетнойЗаписи.ЭлектроннаяПодписьВМоделиСервиса;
			
			ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуМастераЗаявленияНаПодключениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			Если НЕ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
				ДокументооборотСКОКлиент.ИнициализацияВК(ОписаниеОповещения);
			Иначе
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			КонецЕсли;
		Иначе

			// Открытие первичного мастера
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Организация", Организация);
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаПодключение", ПараметрыФормы, ВладелецОткрываемойФормы);

		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуМастераЗаявленияНаПодключениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Организация = ДополнительныеПараметры.Организация;
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("Организация", Организация);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаИзменениеПараметровПодключения", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗаявленийНаПодключение(Организация = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуСпискаЗаявленийНаПодключениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗаявленийНаПодключениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Организация = ДополнительныеПараметры.Организация;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ПоказатьПредупреждение(, ВернутьСтр("ru = 'Подключение к электронному документообороту невозможно: недостаточно прав.'"));
		
	Иначе
		
		КонтекстЭДОКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПараметрыПодключенияК1СОтчетности(Параметр, ФормаВладельца) Экспорт
	
	// Проверка прав
	ДополнительныеПараметры = Новый Структура("Параметр, ФормаВладельца", Параметр, ФормаВладельца);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПараметрыПодключенияК1СОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьПараметрыПодключенияК1СОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Параметр = ДополнительныеПараметры.Параметр;
	ФормаВладельца = ДополнительныеПараметры.ФормаВладельца;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка типа параметра
	Если ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипФизЛица() Тогда
		Организации = КонтекстЭДОКлиент.ОрганизацияФизЛицаИзДокументаЗаявления(Параметр);
		Для каждого Организация Из Организации Цикл
			КонтекстЭДОКлиент.ПоказатьФормуПредупрежденияОбИзменившихсяНастройкахПодключения(Организация, ФормаВладельца);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипОрганизации() Тогда
		Организация = Параметр;
		КонтекстЭДОКлиент.ПоказатьФормуПредупрежденияОбИзменившихсяНастройкахПодключения(Организация, ФормаВладельца);
	КонецЕсли;
	
КонецПроцедуры

// РАБОТА С ФОРМОЙ ПО 1С-ОТЧЕТНОСТИ 
////////////////////////////////////////////////////////////////////////////////

Процедура ОбновитьОтправкуИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтправкуИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОбновитьОтправкуИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку и организацию
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка 		= ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация = ДокументооборотСФССКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка 		= ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФСРАРКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка 		= ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСРПНКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	Иначе
		Ссылка 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Получаем организацию из регистра сведений
		Сведения = КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Ссылка);
		Организация = Сведения.Организация;
	КонецЕсли;
	
	// Отправка извещений
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган, Ссылка, Организация", Форма, КонтролирующийОрган, Ссылка, Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПанельСостоянияОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(Форма, Организация, ОписаниеОповещения, КонтролирующийОрган, Ссылка);
	
КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма 				= ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	Организация 		= ДополнительныеПараметры.Организация;
	Ссылка 				= ДополнительныеПараметры.Ссылка;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
	// Оповещаем о завершении отправки
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Организация);
	ПараметрыОповещения.Вставить("Ссылка", Ссылка);
	Оповестить("Завершение отправки", ПараметрыОповещения, Ссылка);
	
КонецПроцедуры

Процедура ОткрытьПротоколИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьПротоколИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;

	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОткрытьПротокол(Ссылка, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ОткрытьКритическиеОшибкиИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Ссылка", Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКритическиеОшибкиИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьКритическиеОшибкиИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Открываем критические ошибки
	КонтекстЭДОКлиент.ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку и организацию
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка 		= ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация = ДокументооборотСФССКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка 		= ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФСРАРКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка 		= ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСРПНКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	Иначе
		Ссылка 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Получаем организацию из регистра сведений
		Сведения = КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Ссылка);
		Организация = Сведения.Организация;
	КонецЕсли;
	
	// Отправка извещений
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиПослеОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ОтправитьНеотправленныеИзвещенияОПриеме(Ссылка, Организация, КонтролирующийОрган, ОписаниеОповещения);
	
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ОткрытьСостояниеОтправкиИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	// Получаем КонтекстЭДОКлиент
	
	ДополнительныеПараметры = Новый Структура("Ссылка", Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСостояниеОтправкиИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьСостояниеОтправкиИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Отображение формы статуса
	КонтекстЭДОКлиент.ПоказатьФормуСтатусовОтправки(Ссылка);
	
КонецПроцедуры

Процедура ПроверитьОтветыНаЗаявленияНаПодключениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент <> Неопределено Тогда
		КонтекстЭДОКлиент.ПроверитьОтветыНаЗаявленияНаПодключениеЛокальная();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСостояниеОтправкиОтчетаПереопределяемый(Ссылка, СтандартнаяОбработка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПоказатьСостояниеОтправкиОтчета(Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтправитьВКонтролирующийОрганПереопределяемый(Ссылка, ВидКонтролирующегоОргана, КодКонтролирующегоОргана, СтандартнаяОбработка) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОтправитьВКонтролирующийОрган(Ссылка, ВидКонтролирующегоОргана, КодКонтролирующегоОргана, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПереопределяемый(Ссылка, СтандартнаяОбработка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПроверитьВИнтернете(Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры