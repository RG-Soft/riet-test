#Если Клиент Тогда
             
// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция увПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // РаботаСДиалогами.ПроверитьМодифицированность()

#КонецЕсли

// Определяет подразделение, в котором состоит пользователь на указанную дату
//
// Параметры: 
//  Пользователь - ссылка на элемент справочника "Пользователи"
//  Дата - дата, на которую нужно получить подразделение
//
// Возвращаемое значение:
//  Подразделение - ссылка на элемент справочника "увСтруктурныеПодразделения".
//
Функция увПолучитьПодразделениеПользователя(Пользователь, Дата) Экспорт
	
	Если Не Пользователь = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	увДолжностиПользователейСрезПоследних.Подразделение
		               |ИЗ
		               |	РегистрСведений.увПодразделенияПользователей.СрезПоследних(&Дата, ) КАК увДолжностиПользователейСрезПоследних
		               |
		               |ГДЕ
		               |	увДолжностиПользователейСрезПоследних.Пользователь = &Пользователь" ;
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Дата", Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Определяет права пользователя
//
// Параметры:
//  Пользователь - ссылка на элемент справочника "Пользователи"
//  Права - структура прав пользователя
//
Процедура увОпределитьПраваПользователя(Пользователь, Права) Экспорт
	
	Если Не Права = Неопределено Тогда
		Права.СозданиеЗаявок = Ложь;
		Права.УтверждениеЗаявок = Ложь;
		Права.ПостановкаВопросов = Ложь;
		Права.УтверждениеВопросов = Ложь;
		Права.ПросмотрЧужихВопросов = Ложь;
	Иначе
		Права = Новый Структура();
		Права.Вставить("СозданиеЗаявок", Ложь);
		Права.Вставить("УтверждениеЗаявок", Ложь);
		Права.Вставить("ПостановкаВопросов", Ложь);
		Права.Вставить("УтверждениеВопросов", Ложь);
		Права.Вставить("ПросмотрЧужихВопросов", Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПраваПользователей.СозданиеЗаявок,
	               |	ПраваПользователей.УтверждениеЗаявок,
	               |	ПраваПользователей.ПросмотрЧужихВопросов,
	               |	ПраваПользователей.ПостановкаВопросов,
	               |	ПраваПользователей.УтверждениеВопросов
	               |ИЗ
	               |	РегистрСведений.увПраваПользователей КАК ПраваПользователей
	               |
	               |ГДЕ
	               |	ПраваПользователей.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Права.СозданиеЗаявок = Выборка.СозданиеЗаявок;
		Права.УтверждениеЗаявок = Выборка.УтверждениеЗаявок;
		Права.ПостановкаВопросов = Выборка.ПостановкаВопросов;
		Права.УтверждениеВопросов = Выборка.УтверждениеВопросов;
		Права.ПросмотрЧужихВопросов = Выборка.ПросмотрЧужихВопросов;
	Иначе
		//для пользователя не установлены права, создадим их по умолчанию
		Менеджер = РегистрыСведений.увПраваПользователей.СоздатьМенеджерЗаписи();	
		
		Менеджер.Пользователь = Пользователь;
		Менеджер.Активность = Истина;
		Менеджер.Период = ТекущаяДата();
		Менеджер.ПостановкаВопросов = Истина;
		Менеджер.СозданиеЗаявок = Истина;
		
		Менеджер.Записать();
		
		Сообщить("Для пользователя " + Строка(Пользователь) + " установлены права по умолчанию.");
		
		Права.СозданиеЗаявок = Истина;
		Права.УтверждениеЗаявок = Ложь;
		Права.ПостановкаВопросов = Истина;
		Права.УтверждениеВопросов = Ложь;
		Права.ПросмотрЧужихВопросов = Ложь;
	КонецЕсли;           
	
КонецПроцедуры

// Процедура инициализирует глобальную переменную глТекущийПользователь.
// Переменная содержит ссылку на элемент справочника "Пользователи", 
// соответствующий текущему пользователю информационной базы.
//
// Параметры:
//  Нет.
//
Функция увОпределитьТекущегоПользователя() Экспорт

	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
	
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			ИмяПользователя           = "НеАвторизован";
			ПолноеИмяПользователя     = "Не авторизован";
			
		Иначе
			ИмяПользователя           = ИмяПользователя();
			
			Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
				ПолноеИмяПользователя = ИмяПользователя;
			Иначе
				ПолноеИмяПользователя = ПолноеИмяПользователя();
			КонецЕсли;
		КонецЕсли;

		глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);

		Если глТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
			ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
			
			ОбъектПользователь.Код          = ИмяПользователя;
			ОбъектПользователь.Наименование = ПолноеИмяПользователя;
			
			ОбъектПользователь.Записать();

			Сообщить("Пользователь зарегистрирован в справочнике пользователей.");
			глТекущийПользователь = ОбъектПользователь.Ссылка;
			
			ГруппыОбъект=Справочники.ГруппыПользователей.ВсеПользователи.ПолучитьОбъект();
			НоваяСтрока=ГруппыОбъект.ПользователиГруппы.Добавить();
			НоваяСтрока.Пользователь=глТекущийПользователь;
			ГруппыОбъект.Записать();		
		КонецЕсли;

		ПараметрыСеанса.ТекущийПользователь = глТекущийПользователь;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
		// ГруппыТекущегоПользователя
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник.ГруппыПользователей.Ссылка КАК Значение
		|ИЗ
		|	Справочник.ГруппыПользователей
		|ГДЕ
		|	Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь
		|";
		Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
		Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
		ПараметрыСеанса.увГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
		
		Выборка=РегистрыСведений.увПраваПользователей.Выбрать(Новый Структура("Пользователь",ПараметрыСеанса.ТекущийПользователь));
		Если Выборка.Следующий() Тогда
			ПараметрыСеанса.увПравоУтверждатьВопросы = Выборка.УтверждениеВопросов;
		Иначе
			ПараметрыСеанса.увПравоУтверждатьВопросы = Ложь;
		КонецЕсли;
		
		Возврат глТекущийПользователь;
		
	Иначе
		
		Попытка
			ф = ЗначениеЗаполнено(ПараметрыСеанса.увГруппыТекущегоПользователя);
		Исключение //значит, не инициализировано
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
			// ГруппыТекущегоПользователя
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Справочник.ГруппыПользователей.Ссылка КАК Значение
			|ИЗ
			|	Справочник.ГруппыПользователей
			|ГДЕ
			|	Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь
			|";
			Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
			Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
			ПараметрыСеанса.увГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
			
			Выборка=РегистрыСведений.увПраваПользователей.Выбрать(Новый Структура("Пользователь",ПараметрыСеанса.ТекущийПользователь));
			Если Выборка.Следующий() Тогда
				ПараметрыСеанса.увПравоУтверждатьВопросы = Выборка.УтверждениеВопросов;
			Иначе
				ПараметрыСеанса.увПравоУтверждатьВопросы = Ложь;
			КонецЕсли;
		КонецПопытки;
		
		Возврат ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
КонецФункции // увОпределитьТекущегоПользователя()

Процедура увУстановитьПараметрСеансаУвГруппыТекущегоПользователя(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "увГруппыТекущегоПользователя" Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка КАК Значение
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	ПараметрыСеанса.увГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
	
	Выборка=РегистрыСведений.увПраваПользователей.Выбрать(Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь));
	Если Выборка.Следующий() Тогда
		ПараметрыСеанса.увПравоУтверждатьВопросы = Выборка.УтверждениеВопросов;
	Иначе
		ПараметрыСеанса.увПравоУтверждатьВопросы = Ложь;
	КонецЕсли;

	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры 

//Процедура выполняет обновление данных Монитора сопровождения при
//изменении версии.
//
Процедура увВыполнитьОбновлениеМонитораСопровождения() Экспорт
	
#Если Клиент Тогда
	
	Если Не ЗначениеЗаполнено(Константы.увНомерВерсииМонитораСопровождения.Получить()) Тогда
		
		Предупреждение("Изменился номер версии 1С:Монитора сопровождения. Будет выполнено обновление информационной базы.");
	
		Если Константы.увПрефиксБазы.Получить() = "" Тогда
			ПолучитьОбщуюФорму("увФормаРегистрации").ОткрытьМодально();
		КонецЕсли;

		Сервер = ПланыОбмена.увОбменССервером.НайтиПоНаименованию("Сервер");
		Если Сервер.Пустая() Тогда
			Сервер = ПланыОбмена.увОбменССервером.СоздатьУзел();
			Сервер.Код = "SRV";
			Сервер.Наименование = "Сервер";
			Сервер.Записать();
			Сообщить("Создан узел обмена с сервером: Сервер");
		КонецЕсли;
		
		Монитор = ПланыОбмена.увОбменССервером.НайтиПоНаименованию("Монитор сопровождения");
		Если Монитор.Пустая() Тогда
			Монитор = ПланыОбмена.увОбменССервером.ЭтотУзел().ПолучитьОбъект();
			Монитор.Код = Константы.увПрефиксБазы.Получить();
			Монитор.Наименование = "Монитор сопровождения";
			Монитор.Записать();
			Сообщить("Создан узел обмена с сервером: Монитор сопровождения");
		КонецЕсли;
		
		Сообщить("Произведено обновление Монитора сопровождения до версии 1.0.4", СтатусСообщения.Информация);
		
		Константы.увНомерВерсииМонитораСопровождения.Установить("1.0.4");
		
	КонецЕсли;
	
	Если Константы.увНомерВерсииМонитораСопровождения.Получить()="1.0.4" Тогда
		Сообщить("Произведено обновление Монитора сопровождения до версии 1.1.1", СтатусСообщения.Информация);
		Константы.увНомерВерсииМонитораСопровождения.Установить("1.1.1")
	КонецЕсли;
	
	//обновление на версию 2.0.1
	Если Константы.увНомерВерсииМонитораСопровождения.Получить() = "1.1.1" Тогда
		
		Предупреждение("Изменился номер версии 1С:Монитора сопровождения. Будет выполнено обновление информационной базы.");
	
		Выборка = Документы.увВопрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.История.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			Док = Выборка.ПолучитьОбъект();
			//новый
			СтрокаТЧ = Док.История.Добавить();
			СтрокаТЧ.Дата = Док.Дата;
			СтрокаТЧ.Пользователь = Док.Спросил;
			СтрокаТЧ.Статус = Перечисления.увСтатусыВопросов.Новый;
			СтрокаТЧ.Текст = Док.Вопрос;
			//утверждение
			Если Док.Утверждено Тогда
				СтрокаТЧ = Док.История.Добавить();
				СтрокаТЧ.Дата = Док.ДатаУтверждения;
				СтрокаТЧ.Пользователь = Док.Утвердил;
				СтрокаТЧ.Статус = Перечисления.увСтатусыВопросов.Утвержден;
				СтрокаТЧ.Текст = "";
			КонецЕсли;
			//Принятие к рассмотрению
			Если Док.ПринятоКРассмотрению Тогда
				СтрокаТЧ = Док.История.Добавить();
				СтрокаТЧ.Дата = Док.ДатаПринятияКРассмотрению;
				СтрокаТЧ.Пользователь = Док.Ответил;
				СтрокаТЧ.Статус = Перечисления.увСтатусыВопросов.ПринятКРассмотрению;
				СтрокаТЧ.Текст = "";
			КонецЕсли;
			//Ответ
			Если Док.Отвечено Тогда
				СтрокаТЧ = Док.История.Добавить();
				СтрокаТЧ.Дата = Док.ДатаОтвета;
				СтрокаТЧ.Пользователь = Док.Ответил;
				СтрокаТЧ.Статус = Перечисления.увСтатусыВопросов.ПолученОтвет;
				СтрокаТЧ.Текст = Док.Ответ;
			КонецЕсли;
			//Принят ответ на вопрос
			Если Док.ОтветПринят Тогда
				СтрокаТЧ = Док.История.Добавить();
				СтрокаТЧ.Дата = Док.ДатаПринятияОтвета;
				СтрокаТЧ.Пользователь = Док.Спросил;
				СтрокаТЧ.Статус = Перечисления.увСтатусыВопросов.ВопросЗакрыт;
				СтрокаТЧ.Текст = "";
			КонецЕсли;
			
			//проверяем, не захочет ли вопрос отправляться
			Если Док.ОтправлятьСрочно И Не Док.Отправлен Тогда
				Док.ОтправлятьСрочно = Ложь;
			КонецЕсли;
			
			Попытка
				Док.Записать();
			Исключение
				Сообщить("Не удалось записать документ " + Док + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		//исправим статусы протоколов тестирования
		Выборка = Документы.увПротоколТестирования.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Статус <> Перечисления.увСтатусПротоколаТестирования.ОшибкиНеИсправлены И Выборка.Статус <> Перечисления.увСтатусПротоколаТестирования.НетПретензий Тогда
				Док = Выборка.ПолучитьОбъект();
				Док.Статус = Перечисления.увСтатусПротоколаТестирования.ОшибкиНеИсправлены;
				Попытка
					Док.Записать();
				Исключение
					Сообщить("Не удалось записать документ " + Док + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Сообщить("Произведено обновление 1С:Монитора сопровождения до версии 2.0.1", СтатусСообщения.Информация);
		
		Константы.увНомерВерсииМонитораСопровождения.Установить("2.0.1");
		
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

// Функция возвращает текст для формирования HTML-представления вопроса
//
Функция ПолучитьТекстHTMLПоВопросу(Документ, ТолькоТекст) Экспорт

	ТекстТекущейСтраницы = "";
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат "";
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Документ.История Цикл
		
		Если Не СтрокаТЧ.Текст = "" Тогда
			ТекстТекущейСтраницы = ТекстТекущейСтраницы + "
			|<tr><td style = ""font-family: Tahoma, Verdana, Arial, Helvetica; font-size: 8pt; font-weight: normal; color: #483d8b; border-bottom: 0px;"">
			|	<font color = ""18,18,79"">
			|	" + СтрокаТЧ.Статус + "
			|	</font>
			|</td>
			|
			|<td>
			|	<table border=""0"" cellspacing=""0"" cellpadding=""0"" align=""right"">
			|	<tr><td>
			| 	<nobr><font color = ""18,18,87"">" + СтрокаТЧ.Пользователь + "</font>
			|	<span class=""date""><font style = ""font-family: Tahoma, Arial, sans-serif; font-size: 8pt; color: #000000;"">" + Формат(СтрокаТЧ.Дата,"ДФ='dd.MM.yy HH:mm'") + "
			|   </font></span></nobr>
			|	</td></tr>
			|	</table>
			|</td></tr>
			|
			|<tr><td colspan=2>
			|	<p style=""margin-top: 0px; margin-bottom: 0px;"">" + СтрЗаменить(СтрокаТЧ.Текст, Символы.ПС, " <BR> ") + "</p>
			|</td></tr>";
		ИначеЕсли Не ТолькоТекст Тогда
			ТекстТекущейСтраницы = ТекстТекущейСтраницы + "
			|<tr><td style = ""font-family: Tahoma, Verdana, Arial, Helvetica; font-size: 8pt; font-weight: normal; color: #483d8b; border-bottom: 0px;"">
			|	<font color = ""18,18,79"">
			|	" + СтрокаТЧ.Статус + "
			|	</font>
			|</td>
			|
			|<td>
			|	<table border=""0"" cellspacing=""0"" cellpadding=""0"" align=""right"">
			|	<tr><td>
			| 	<nobr><font color = ""18,18,87"">" + СтрокаТЧ.Пользователь + "</font>
			|	<span class=""date""><font style = ""font-family: Tahoma, Arial, sans-serif; font-size: 8pt; color: #000000;"">" + Формат(СтрокаТЧ.Дата,"ДФ='dd.MM.yy HH:mm'") + "
			|   </font></span></nobr>
			|	</td></tr>
			|	</table>
			|</td></tr>";
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаголовокСтраницы = "
	|<HTML>
	|<HEAD>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|</HEAD>
	|<BODY bottomMargin=0 leftMargin=0 topMargin=0 rightMargin=0 bgColor=#ffffff> <BASEFONT SIZE=4>
	|<table border=""0"" cellspacing=""0"" cellpadding=""5"" width=""99%"" style=""border-bottom: solid 2px #eeeeee;"" bgcolor='#ffffff'>
	|";
	
	ЗавершениеСтраницы = "
    |
	|</table></BODY></HTML>" + Символы.ПС;
	
	ТекстТекущейСтраницы = ЗаголовокСтраницы + Символы.ПС + ТекстТекущейСтраницы + ЗавершениеСтраницы;
	
	Возврат ТекстТекущейСтраницы;

КонецФункции // ПолучитьТекстHTMLПоВопросу()

//Функция пытается определить почтовый адрес пользователя
//Сначала в рамках типовых конфигураций, затем в рамках Монитора, как отдельной конфигурации
//
Функция ПолучитьАдресЭлектроннойПочтыПользователя(Пользователь) Экспорт
	
	Попытка // в рамках типовой конфигурации 
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", Пользователь);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|";
		
		Адрес = "";
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Индексы.Добавить("ЗначениеПоУмолчанию");
		Если ТаблицаЗапроса.Количество() > 0 Тогда
			СтрокаПоУмолчанию = ТаблицаЗапроса.Найти(Истина, "ЗначениеПоУмолчанию");
			Если СтрокаПоУмолчанию <> Неопределено Тогда
				Адрес = СтрокаПоУмолчанию.Представление;
			Иначе
				Адрес = ТаблицаЗапроса[0].Представление;
			КонецЕсли; 
		КонецЕсли;
		
		Возврат Адрес;
	Исключение
		Попытка // в рамках  Монитора
			Возврат Пользователь.АдресЭлектроннойПочты;				                             		
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

//Функция проверяет формат темы письма с файлом обмена. Префикс должен указываться до подстроки " от ".
//Строка - тема письма, строковый тип.
Функция ПарсингТемы(Строка) Экспорт

	Номер = СтрНайти(Строка," от ");
	Если (Не Номер = 0) и Номер > 4 Тогда
		Префикс = СокрЛП(Сред(Строка,Номер-4,4));
		Возврат СокрЛП(Константы.увПрефиксБазы.Получить()) = СокрЛП(Префикс);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Функция возвращает строку с представлением вопроса в виде форума
Функция ПолучитьТекстВопроса(Вопрос) Экспорт
	Запрос= Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	увВопросИстория.Дата,
	|	увВопросИстория.Пользователь,
	|	увВопросИстория.Текст,
	|	увВопросИстория.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.увВопрос.История КАК увВопросИстория
	|ГДЕ
	|	увВопросИстория.Ссылка = &Вопрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Вопрос",Вопрос);
	Выборка=Запрос.Выполнить().Выбрать();
	
	Текст="";
	Пока Выборка.Следующий() Цикл
		Текст=Текст+ВРег(Выборка.Пользователь)+Символы.Таб
		+Формат(Выборка.Дата, "ДФ=""дд.ММ.гггг  ЧЧ:мм""")+Символы.ВК
		+"----------------------------------------------------------"
		+Символы.ВК+Выборка.Текст;
		Текст=Текст+ Символы.ВК+Символы.ВК;
	КонецЦикла;
	
	Возврат Текст;
		
КонецФункции

// Процедура проверяет Задачи.
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт
	
	//Запрос = Новый Запрос;
	//
	//Запрос.Текст = "
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	*
	//	|ИЗ
	//	|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(&ТекПользователь, 
	//	|		Выполнена = ЛОЖЬ И Оповещение = ИСТИНА И СрокОповещения < &ДатаСреза)
	//	|";
	//	
	//Запрос.УстановитьПараметр("ТекПользователь", ВыбПользователь);
	//Запрос.УстановитьПараметр("ДатаСреза"      , ТекущаяДата());
	//
	//ФормаОповещения = Задачи.ЗадачиПользователя.ПолучитьФорму("ФормаОповещенияОЗадачах", ,"Оригинал");
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	Если НЕ ФормаОповещенияЗадачОткрыта Тогда
	//		
	//		ФормаОповещения.Открыть();
	//		ФормаОповещенияЗадачОткрыта = Истина;
	//		
	//	КонецЕсли;
	//	
	//	ВыгрузкаДляСверки = РезультатЗапроса.Выгрузить();
	//	ФормаОповещения.АктивизироватьФорму(ВыгрузкаДляСверки);
	//	
	//Иначе
	//	
	//	Если ФормаОповещения.Открыта() Тогда
	//		ФормаОповещения.Закрыть();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьНапоминанияПользователя()




 