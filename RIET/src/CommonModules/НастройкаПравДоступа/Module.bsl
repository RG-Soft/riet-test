
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

Функция ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Для каждого ЭлементОтбора Из ПраваДоступаПользователей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

Процедура ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
	КонецЕсли; 
	ПраваДоступаПользователей.Прочитать();
	
КонецПроцедуры

Процедура ЗаписатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ) Экспорт

	Если НЕ Отказ Тогда
	
		// Сравним наборы записей
		ЭталонныйНабор = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ЭталонныйНабор.Отбор.Пользователь.Значение = Ссылка;
			ЭталонныйНабор.Отбор.Пользователь.Использование = Истина;
		Иначе
			ЭталонныйНабор.Отбор.ОбъектДоступа.Значение = Ссылка;
			ЭталонныйНабор.Отбор.ОбъектДоступа.Использование = Истина;
		КонецЕсли; 
		ЭталонныйНабор.Прочитать();
		
		Для каждого ЗаписьНабора Из ПраваДоступаПользователей Цикл
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ЗаписьНабора.Пользователь = Ссылка;
			Иначе
				ЗаписьНабора.ОбъектДоступа = Ссылка;
			КонецЕсли; 
		КонецЦикла; 
			
		Если НЕ СравнитьТаблицыНаборовЗаписей(ЭталонныйНабор.Выгрузить(), ПраваДоступаПользователей.Выгрузить()) Тогда
		
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ПраваДоступаПользователей.Отбор.Пользователь.Значение      = Ссылка;
				ПраваДоступаПользователей.Отбор.Пользователь.Использование = Истина;
			Иначе
				ПраваДоступаПользователей.Отбор.ОбъектДоступа.Значение      = Ссылка;
				ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
			КонецЕсли; 
			
			ПолныеПрава.ЗаписатьПраваДоступа(ПраваДоступаПользователей.Выгрузить(), ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей), Отказ, ("Элемент """ + СокрЛП(Ссылка) + """ не записан"));
			
			Если НЕ Отказ Тогда
				ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);
			КонецЕсли; 

		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока, ЭтоГруппа = Ложь) Экспорт

	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Элемент.ОтборСтрок.ОбластьДанных.Значение) Тогда
		Элемент.ТекущиеДанные.ОбластьДанных = Элемент.ОтборСтрок.ОбластьДанных.Значение;
		Если ЭтоГруппа Тогда
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
		Иначе
			Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Проверка доступности роли менеджера по набору персонала 
// это или МенеджерПоНаборуПерсонала или полные права
// Применяется для проверки прав на доступ к соотв. даннам
// Возвращаемое значение:
//	булево - истина если есть доступ
Функция ДоступнаРольМенеджераПоНабору() Экспорт
	Возврат РольДоступна("МенеджерПоНаборуПерсонала") или РольДоступна("ПолныеПрава");
	
КонецФункции // ДоступнаРольМенеджераПоНабору


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ОформлениеСтроки.Ячейки.Чтение.УстановитьФлажок(Истина);
	ОформлениеСтроки.Ячейки.Запись.ОтображатьТекст = Ложь;

КонецПроцедуры

Процедура УстановитьОтборНаОбластьДанных(Элемент, ЭлементФормыПраваДоступаПользователей) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Элемент.ТекущиеДанные) Тогда
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	Иначе
		ЭлементФормыПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Элемент.ТекущиеДанные;
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение
			   И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 

КонецПроцедуры

Функция ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, МодифицированностьФормы) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") И Строка <> Неопределено Тогда
		Если Строка = ПараметрыПеретаскивания.Значение.ОбластьДанных
		 ИЛИ ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				ПараметрыПеретаскивания.Значение.ОбластьДанных = Строка;
			ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
				НоваяЗапись = ПраваДоступаПользователей.Добавить();
				НоваяЗапись.Пользователь                                        = ПараметрыПеретаскивания.Значение.Пользователь;
				НоваяЗапись.ОбластьДанных                                       = Строка;
				НоваяЗапись.ОбъектДоступа                                       = ПараметрыПеретаскивания.Значение.ОбъектДоступа;
				НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = ПараметрыПеретаскивания.Значение.ВидНаследованияПравДоступаИерархическихСправочников;
				НоваяЗапись.Запись                                              = ПараметрыПеретаскивания.Значение.Запись;
			Иначе
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Отмена Тогда
		МодифицированностьФормы = Истина;
	КонецЕсли; 

КонецФункции

#КонецЕсли


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ИЕРАРХИЧЕСКИХ СПРАВОЧНИКОВ

Функция ПроверитьНеобходимостьПереписыватьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ПраваДоступаПользователей) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа = &Ссылка
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	
	ТаблицаНаборИзБД = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПравДоступаПользователей = ПраваДоступаПользователей.Выгрузить();
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступаПользователей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступаПользователей[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава Тогда
			ТаблицаПравДоступаПользователей.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	Возврат НЕ СравнитьТаблицыНаборовЗаписей(ТаблицаНаборИзБД, ТаблицаПравДоступаПользователей);
	
КонецФункции

Процедура УстановитьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ИмяСправочника, Отказ) Экспорт

	// Теперь перепишем все записи у подчиненных элементов
	ШапкаОшибки = "Объект " + Ссылка + " не записан!";
	
	ВыборкаПодчиненных = Справочники[ИмяСправочника].Выбрать(Ссылка);
	Пока ВыборкаПодчиненных.Следующий() Цикл
	
		НаборПодчиненногоОбъекта = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Значение = ВыборкаПодчиненных.Ссылка;
		НаборПодчиненногоОбъекта.Отбор.ОбъектДоступа.Использование = Истина;
		НаборПодчиненногоОбъекта.Прочитать();
		
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(НаборПодчиненногоОбъекта, ВыборкаПодчиненных.Родитель, ВыборкаПодчиненных.Ссылка);
		
		Попытка
			НаборПодчиненногоОбъекта.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	
		УстановитьПраваДоступаДляПодчиненныхЭлементов(ВыборкаПодчиненных.Ссылка, ИмяСправочника, Отказ);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, ОбъектДоступа, ТаблицаНаборДляЗаполнения = Неопределено) Экспорт

	Если ТипЗнч(ТаблицаНаборДляЗаполнения) <> Тип("ТаблицаЗначений") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
		|
		|ГДЕ
		|	ПраваДоступаПользователей.ОбъектДоступа = &Родитель
		|	И
		|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников <> &ТолькоДляТекущегоПрава
		|";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.УстановитьПараметр("ТолькоДляТекущегоПрава", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		
		ТаблицаНаборЗаписейРодителяДляПотомков = Запрос.Выполнить().Выгрузить();
	
	Иначе
		
		ТаблицаНаборЗаписейРодителяДляПотомков = ТаблицаНаборДляЗаполнения;
		
	КонецЕсли;
	
	ТаблицаПравДоступа = ПраваДоступаПользователей.Выгрузить();
	
	// Удалим старые унаследованные записи
	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ТаблицаПравДоступа.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаПравДоступа[ИндексСтроки];
		Если СтрокаТаблицы.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
			ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	// Теперь найдем строки с такими же измерениями и заменим их, а при необходимости добавим новые
	Для каждого Запись Из ТаблицаНаборЗаписейРодителяДляПотомков Цикл
		ДублиСтрок = ТаблицаПравДоступа.НайтиСтроки(Новый Структура("Пользователь, ОбластьДанных", Запись.Пользователь, Запись.ОбластьДанных));
		Если ДублиСтрок.Количество() > 0 Тогда
			Для каждого СтрокаТаблицы Из ДублиСтрок Цикл
				ТаблицаПравДоступа.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПравДоступа.Добавить();
		НоваяСтрока.Пользователь                                        = Запись.Пользователь;
		НоваяСтрока.ОбластьДанных                                       = Запись.ОбластьДанных;
		НоваяСтрока.ОбъектДоступа                                       = ОбъектДоступа;
		НоваяСтрока.Запись                                              = Запись.Запись;
		НоваяСтрока.НастройкаДоступа                                    = Запись.НастройкаДоступа;
		НоваяСтрока.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
	ПраваДоступаПользователей.Загрузить(ТаблицаПравДоступа);
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступа() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаЭлемента() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Возврат СписокПеречисления;

КонецФункции

Функция ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаГруппы() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Возврат СписокПеречисления;

КонецФункции

Процедура ОткрытьФормуРодителяПравообладателя(ЗаписьНабора, Родитель, ФормаВладелец) Экспорт

	НайденныйРодитель = ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель);
	
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(НайденныйРодитель) Тогда
		НайденныйРодитель.ПолучитьФорму(, ФормаВладелец).Открыть();
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьРодителяПравообладателя(ЗаписьНабора, Родитель)

	Если ТипЗнч(ЗаписьНабора) <> Тип("РегистрСведенийЗапись.ПраваДоступаПользователей") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получим список родителей
	
	СписокРодителей = Новый СписокЗначений;
	СписокРодителей.Добавить(Родитель);
	Потомок = Родитель;
	Пока НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Потомок.Родитель) Цикл
		СписокРодителей.Добавить(Потомок.Родитель);
		Потомок = Потомок.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПраваДоступаПользователей.ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|
	|ГДЕ
	|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных
	|	И
	|	ПраваДоступаПользователей.Пользователь = &Пользователь
	|	И
	|	ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &ВидНаследованияПравДоступаИерархическихСправочников
	|	И
	|	ПраваДоступаПользователей.ОбъектДоступа В(&СписокРодителей)
	|";
	
	Запрос.УстановитьПараметр("ОбластьДанных"                                      , ЗаписьНабора.ОбластьДанных);
	Запрос.УстановитьПараметр("Пользователь"                                       , ЗаписьНабора.Пользователь);
	Запрос.УстановитьПараметр("ВидНаследованияПравДоступаИерархическихСправочников", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Запрос.УстановитьПараметр("СписокРодителей"                                    , СписокРодителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОбъектДоступа;
	КонецЕсли; 

КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ПОЛЬЗОВАТЕЛЕЙ К ОБЪЕКТАМ 

Функция ПолучитьМассивРодительскихЭлементов(Ссылка, МассивРодительскихЭлементов = Неопределено) Экспорт
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка);
	Если МассивРодительскихЭлементов = Неопределено Тогда
		МассивРодительскихЭлементов = Новый Массив;
	КонецЕсли;
	
	Если Не ИмяРеквизитаРодителя = "Родитель" или Ссылка.Метаданные().Иерархический Тогда
		ТекущийРодитель = Ссылка[ИмяРеквизитаРодителя];
		Пока Не ОбщегоНазначения.ЗначениеНеЗаполнено(ТекущийРодитель) Цикл
			МассивРодительскихЭлементов.Добавить(ТекущийРодитель);
			ТекущийРодитель = ТекущийРодитель[ИмяРеквизитаРодителя];
		КонецЦикла; 
	КонецЕсли;
	
	Возврат МассивРодительскихЭлементов;
	
КонецФункции

Функция ПолучитьМассивДочернихЭлементов(Родитель, МассивЭлементов = Неопределено) Экспорт
	
	Если МассивЭлементов = Неопределено Тогда
		МассивЭлементов = Новый Массив;
	КонецЕсли;
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Родитель);
	
	МетаданныеРодителя = Родитель.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + МетаданныеРодителя.Имя + " КАК _Таблица";
	
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Родитель) Тогда
		Если ИмяРеквизитаРодителя = "Родитель" Тогда
			Если Не МетаданныеРодителя.Иерархический или МетаданныеРодителя.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов и Не Родитель.ЭтоГруппа Тогда
				Возврат МассивЭлементов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка В ИЕРАРХИИ(&Родитель)
			|	И _Таблица.Ссылка <> &Родитель";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка." + ИмяРеквизитаРодителя + " = &Родитель";
		КонецЕсли;
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	
	ДобавлятьРекурсивно = Не ИмяРеквизитаРодителя = "Родитель" и Не ОбщегоНазначения.ЗначениеНеЗаполнено(Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЭлементов.Добавить(Выборка.Ссылка);
		
		Если ДобавлятьРекурсивно Тогда
			ПолучитьМассивДочернихЭлементов(Выборка.Ссылка, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаУнаследованнымиЗаписями(ПраваДоступаПользователей, ОбъектДоступа, Родитель) Экспорт
	
	ОбъектДоступаМетаданные = ОбъектДоступа.Метаданные();
	
	// Добавим записи, унаследованные от родителей
	Родители = ПолучитьМассивРодительскихЭлементов(Родитель);
	Родители.Добавить(Родитель);
	Родители.Добавить(Новый(ТипЗНЧ(Родитель)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа В(&Родители)
	|	И ПраваДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &РаспространитьНаПодчиненных";
		
	Если ПраваДоступаПользователей.Отбор.ОбластьДанных.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", ПраваДоступаПользователей.Отбор.ОбластьДанных.Значение);
	КонецЕсли;

	Если ПраваДоступаПользователей.Отбор.Пользователь.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПраваДоступаПользователей.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ПраваДоступаПользователей.Отбор.Пользователь.Значение);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Родители", Родители);
	Запрос.УстановитьПараметр("РаспространитьНаПодчиненных", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = ПраваДоступаПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка,,"ОбъектДоступа, ВидНаследованияПравДоступаИерархическихСправочников");
		Запись.ОбъектДоступа = ОбъектДоступа;
		Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
	// Добавим записи, унаследованные от дочерних элементов
	Если ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Родитель) = "Родитель" и ОбъектДоступаМетаданные.Иерархический Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваДоступаПользователей.Пользователь,
		|	ПраваДоступаПользователей.ВладелецПравДоступа,
		|	ПраваДоступаПользователей.ОбластьДанных,
		|	ПраваДоступаПользователей.Чтение
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
		|ГДЕ
		|	ВЫРАЗИТЬ(ПраваДоступаПользователей.ОбъектДоступа КАК Справочник." + ОбъектДоступаМетаданные.Имя + ").Родитель В ИЕРАРХИИ(&ОбъектДоступа)
		|	И ПраваДоступаПользователей.ОбъектДоступа = ПраваДоступаПользователей.ВладелецПравДоступа
		|	И ПраваДоступаПользователей.Чтение";
		
		
		Если ПраваДоступаПользователей.Отбор.ОбластьДанных.Использование Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных";
			Запрос.УстановитьПараметр("ОбластьДанных", ПраваДоступаПользователей.Отбор.ОбластьДанных.Значение);
		КонецЕсли;

		Если ПраваДоступаПользователей.Отбор.Пользователь.Использование Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ПраваДоступаПользователей.Пользователь = &Пользователь";
			Запрос.УстановитьПараметр("Пользователь", ПраваДоступаПользователей.Отбор.Пользователь.Значение);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = ПраваДоступаПользователей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Запись.ОбъектДоступа = ОбъектДоступа;
			
			Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // () 

Функция ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) Экспорт
	
	Если ТипЗНЧ(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат "ГоловнаяОрганизация"
	Иначе
		Возврат "Родитель"
	КонецЕсли;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав) Экспорт
	
	ИсходнаяТаблица = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборПрав);
	
	СоответствиеМассивовДочернихЭлементов     = Новый Соответствие;
	СоответствиеМассивовРодительскихЭлементов = Новый Соответствие;
	Для каждого СтрокаНабора Из ИсходнаяТаблица Цикл
				
		Если СтрокаНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			
			//Дополним набор записями для дочерних элементов
			МассивЭлементов = СоответствиеМассивовДочернихЭлементов[СтрокаНабора.ОбъектДоступа];
			Если МассивЭлементов = Неопределено Тогда
				МассивЭлементов = ПолучитьМассивДочернихЭлементов(СтрокаНабора.ОбъектДоступа);
				СоответствиеМассивовДочернихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа,МассивЭлементов);
			КонецЕсли;
			
			Для каждого Ссылка Из МассивЭлементов Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"ОбъектДоступа,ВидНаследованияПравДоступаИерархическихСправочников");
				Запись.ОбъектДоступа = Ссылка;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
			КонецЦикла;
			
		КонецЕсли;
		
		// добавила Наталья Петроченко для Job Log 17.12.12
		Если СтрокаНабора.ОбластьДанных = Перечисления.ОбластиДанныхОграниченияПравДоступа.GeoMarkets Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.Чтение и ПолучитьИмяРеквизитаРодителяОбъектаДоступа(СтрокаНабора.ОбъектДоступа) = "Родитель" Тогда
			//Дополним набор записями для родительских элементов
			МассивЭлементов = СоответствиеМассивовРодительскихЭлементов[СтрокаНабора.ОбъектДоступа];
			Если МассивЭлементов = Неопределено Тогда
				МассивЭлементов = ПолучитьМассивРодительскихЭлементов(СтрокаНабора.ОбъектДоступа);
				СоответствиеМассивовРодительскихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа,МассивЭлементов);
			КонецЕсли;
				
			Для каждого Ссылка Из МассивЭлементов Цикл
				
				Запись = НаборПрав.Добавить();
				
				Запись.ВладелецПравДоступа = СтрокаНабора.ВладелецПравДоступа;
				Запись.ОбластьДанных       = СтрокаНабора.ОбластьДанных;
				Запись.ОбъектДоступа       = Ссылка;
				Запись.Чтение              = Истина;
				Запись.Пользователь = СтрокаНабора.Пользователь;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего;
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей) Экспорт
	
	ТаблицаПравДоступа = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей().Выгрузить();
	
	Для каждого СтрокаТаблицыНабора Из ПраваДоступаПользователей Цикл
		
		Если СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава или СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПравДоступа.Добавить(), СтрокаТаблицыНабора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПравДоступа;
	
КонецФункции

Процедура ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель, СсылкаНового = Неопределено) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		СсылкаНового = Справочники[ЭтотОбъект.Метаданные().Имя].ПолучитьСсылку();
		
		ПолныеПрава.ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ);

		Если НЕ Отказ Тогда
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	//В объекте не был изменен родитель. Обновлять права доступа нет необходимости
	Если ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(Ссылка);
	
	ПолучитьМассивРодительскихЭлементов(Ссылка, ОбновляемыеОбъекты);
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ПрошлыйИзмененныйРодительОбъектаДоступа) Тогда
		ОбновляемыеОбъекты.Добавить(ПрошлыйИзмененныйРодительОбъектаДоступа);
		ПолучитьМассивРодительскихЭлементов(ПрошлыйИзмененныйРодительОбъектаДоступа, ОбновляемыеОбъекты);
	КонецЕсли;
	
	ШапкаОшибки = "Права " + Ссылка + " не записан!";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
	|ГДЕ
	|	ПраваДоступаПользователей.ОбъектДоступа = ПраваДоступаПользователей.ВладелецПравДоступа и 
	|	(ПраваДоступаПользователей.ОбъектДоступа.Ссылка В (&ОбновляемыеОбъекты)";
	
	Если ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) = "Родитель" Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ ПраваДоступаПользователей.ОбъектДоступа.Ссылка В ИЕРАРХИИ (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = Запрос.Текст + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);
	
	ОбновляемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		Если Не ПолныеПрава.ОбновитьПраваДоступаПользователейПоВладельцуДоступа(ОбновляемыйОбъект) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()+Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Оповестить("ЗаписаныПраваДоступаПользователейКОбъекту");
	#КонецЕсли

КонецПроцедуры // () 

Процедура ЗаписатьПраваДоступаПользователейКОбъекту(ПраваДоступаПользователей, Ссылка, Отказ, ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоПользователю = ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей");
		
	Если ОтборПоПользователю Тогда
		ПраваДоступаПользователей.Отбор.Пользователь.Установить(Ссылка);
	Иначе
		ПраваДоступаПользователей.Отбор.ОбъектДоступа.Установить(Ссылка);
	КонецЕсли;
	
	ТаблицаПравДоступа = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ПраваДоступаПользователей);
	
	Для каждого СтрокаТаблицы Из ТаблицаПравДоступа Цикл
		Если ОтборПоПользователю Тогда
			СтрокаТаблицы.Пользователь  = Ссылка;
		Иначе
			СтрокаТаблицы.ОбъектДоступа = Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ВладелецПравДоступа = СтрокаТаблицы.ОбъектДоступа;
	КонецЦикла;
	
	СтруктураОтбора = ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаПользователей);
	
	ПолныеПрава.ЗаписатьПраваДоступаПользователей(ТаблицаПравДоступа,СтруктураОтбора, Отказ, "Не записаны права доступа к объекту """+ Ссылка + """!");
	
	Если НЕ Отказ Тогда
		ПрочитатьПраваДоступаКОбъекту(ПраваДоступаПользователей, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокВидовНаследованияПравДоступа(ОбъектДоступа) Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ОбъектДоступа) или ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Иначе
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектДоступа)) Тогда
			МетаданныеОбъекта = ОбъектДоступа.Метаданные();
			Если МетаданныеОбъекта.Иерархический Тогда
				Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если ОбъектДоступа.ЭтоГруппа Тогда
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					Иначе
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					КонецЕсли;
				Иначе
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
				КонецЕсли;
			Иначе
				СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
			КонецЕсли;
		Иначе
			СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура РедактироватьПраваДоступа(Ссылка) Экспорт
	
	ФормаНастройки = ПолучитьОбщуюФорму("НастройкаПравДоступа",,Ссылка);
	ФормаНастройки.Открыть();
	
КонецПроцедуры

#КонецЕсли


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАКРЫТИЯ ПЕРИОДОВ

Функция ПолучитьУправленческуюГраницуЗапретаИзмененияДанныхМодуля(Модуль) Экспорт
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗакрытиеПериодов.ПериодДанных) КАК ПериодДанных
		|ИЗ
		|	РегистрСведений.ЗакрытиеПериодов КАК ЗакрытиеПериодов
		|ГДЕ
		|	ЗакрытиеПериодов.Модуль = &Модуль
		|	И ЗакрытиеПериодов.ДатаЗакрытия <= &ТекущаяДата
		|			И ЗакрытиеПериодов.ДатаЗакрытия <> &ПустаяДата");
		
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Модуль", Модуль);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И (НЕ Выборка.ПериодДанных = NULL) Тогда
		
		ГраницаЗапретаИзмененияДанныхМодуля = КонецМесяца(Выборка.ПериодДанных);
		
	Иначе
		
		ГраницаЗапретаИзмененияДанныхМодуля = Неопределено;
		
	КонецЕсли;
		
	Возврат ГраницаЗапретаИзмененияДанныхМодуля;
		
КонецФункции

Функция ПолучитьНалоговуюГраницуЗапретаИзмененияДанныхМодуля(Модуль) Экспорт
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗакрытиеПериодов.ПериодДанных) КАК ПериодДанных
		|ИЗ
		|	РегистрСведений.ЗакрытиеПериодов КАК ЗакрытиеПериодов
		|ГДЕ
		|	ЗакрытиеПериодов.Модуль = &Модуль
		|	И ЗакрытиеПериодов.ДатаЗакрытияFiscal <= &ТекущаяДата
		|	И ЗакрытиеПериодов.ДатаЗакрытияFiscal <> &ПустаяДата");
		
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Модуль", Модуль);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И (НЕ Выборка.ПериодДанных = NULL) Тогда
		
		ГраницаЗапретаИзмененияДанныхМодуля = КонецМесяца(Выборка.ПериодДанных);
		
	Иначе
		
		ГраницаЗапретаИзмененияДанныхМодуля = Неопределено;
		
	КонецЕсли;
		
	Возврат ГраницаЗапретаИзмененияДанныхМодуля;
		
КонецФункции

Функция ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Модуль) Экспорт
	
	ГраницаЗапретаИзмененияДанныхМодуля = ПолучитьУправленческуюГраницуЗапретаИзмененияДанныхМодуля(Модуль);
	
	Если ГраницаЗапретаИзмененияДанныхМодуля <> Неопределено Тогда
		
		НачалоОткрытогоПериода = КонецМесяца(ГраницаЗапретаИзмененияДанныхМодуля) + 1;
		
	Иначе
		
		НачалоОткрытогоПериода = Неопределено;
		
	КонецЕсли;
	
	Возврат НачалоОткрытогоПериода;
		
КонецФункции

Функция ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Модуль) Экспорт
	
	ГраницаЗапретаИзмененияДанныхМодуля = ПолучитьНалоговуюГраницуЗапретаИзмененияДанныхМодуля(Модуль);
	
	Если ГраницаЗапретаИзмененияДанныхМодуля <> Неопределено Тогда
		
		НачалоОткрытогоПериода = КонецМесяца(ГраницаЗапретаИзмененияДанныхМодуля) + 1;
		
	Иначе
		
		НачалоОткрытогоПериода = Неопределено;
		
	КонецЕсли;
	
	Возврат НачалоОткрытогоПериода;
		
КонецФункции

// ДУМАТЬ!!!
Функция ПолучитьДатуЗапретаИзмененийFiscal(Источник, Дата) Экспорт
	
	Если ЗначениеЗаполнено(Дата) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗакрытиеПериодов.ДатаЗакрытияFiscal
			|ИЗ
			|	РегистрСведений.ЗакрытиеПериодов КАК ЗакрытиеПериодов
			|ГДЕ
			|	ЗакрытиеПериодов.ПериодДанных = &Период
			|	И ЗакрытиеПериодов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.Salesbook)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ДатаЗакрытияFiscal;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ТекущаяДата() + 100;		
	
КонецФункции

Процедура ЗаполнитьДатыДокументаПоУмолчанию(ДокументОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда  //добавила условие Федотова Л., РГ-Софт, 28.08.09
		//требуется для ввода на основании, например Реализации на основании Тикета
		ДокументОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	// НЕОПТИМАЛЬНО! В ОБЕИХ ФУНКЦИЯХ ИЩЕТСЧЯ МОДУЛЬ ДОКУМЕНТА И ДЕЛАЕТСЯ ЗАПРОС К РЕГИСТРУ ЗАКРЫТИЯ ПЕРИОДОВ!
	//Добавила условия Федотова Л., РГ-Софт, 28.01.13, вопрос SLI-0003246 
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда //для управляемых форм
		Если ДокументОбъект.Свойство("ДатаПроведения") Тогда
			УстановитьДатуПроведенияДокумента(ДокументОбъект);
		КонецЕсли; 	
		Если ДокументОбъект.Свойство("НалоговыйПериод") Тогда
			УстановитьДатуПроведенияДокумента(ДокументОбъект);
		КонецЕсли; 
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПроведения", ДокументОбъект.Метаданные()) Тогда
			УстановитьДатуПроведенияДокумента(ДокументОбъект);
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("НалоговыйПериод", ДокументОбъект.Метаданные()) Тогда
			УстановитьНалоговыйПериодДокумента(ДокументОбъект);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьДатуПроведенияДокумента(ДокументОбъект) Экспорт
	
	Модуль = ПолучитьМодульРазработкиДокумента(ДокументОбъект);
	НачалоОткрытогоПериода = ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Модуль);
	Если НачалоОткрытогоПериода = Неопределено
		ИЛИ ДокументОбъект.Дата >= НачалоОткрытогоПериода Тогда
		
		ДокументОбъект.ДатаПроведения = ДокументОбъект.Дата;
		
	Иначе
		
		ДокументОбъект.ДатаПроведения = НачалоОткрытогоПериода;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНалоговыйПериодДокумента(ДокументОбъект) Экспорт
	
	Модуль = ПолучитьМодульРазработкиДокумента(ДокументОбъект);
	НачалоОткрытогоПериода = ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Модуль);
	Если НачалоОткрытогоПериода = Неопределено
		ИЛИ ДокументОбъект.Дата >= НачалоОткрытогоПериода Тогда
		
		ДокументОбъект.НалоговыйПериод = ДокументОбъект.Дата;
		
	Иначе
		
		ДокументОбъект.НалоговыйПериод = НачалоОткрытогоПериода;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМодульРазработкиДокумента(Документ) Экспорт
	
	ТипДока = Строка(ТипЗнч(Документ));
	
	// Sales book
	Если СтрНайти(ТипДока, "Реализация товаров и услуг")
		ИЛИ	Найти(ТипДока, "Корректировка долга")
		ИЛИ	Найти(ТипДока, "Платежное поручение исходящее") и Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ	Найти(ТипДока, "Платежное поручение входящее")
		ИЛИ	Найти(ТипДока, "Счет на оплату покупателю")
		ИЛИ	Найти(ТипДока, "Счет-фактура выданный")
		ИЛИ	Найти(ТипДока, "Закрытие счетов на предоплату")
		ИЛИ	Найти(ТипДока, "Tickets")
		ИЛИ	Найти(ТипДока, "Siebel orders")
		ИЛИ	Найти(ТипДока, "Формирование записей книги продаж")
		ИЛИ	Найти(ТипДока, "Отражение реализации товаров и услуг (НДС)")
		ИЛИ	Найти(ТипДока, "Отчет агента по расходам")
		ИЛИ	Найти(ТипДока, "Передача ОС") Тогда
		
		Возврат Перечисления.МодулиРазработки.SalesBook;
			
	// FA
	ИначеЕсли СтрНайти(ТипДока, "Принятие к учету ОС")
		ИЛИ	Найти(ТипДока, "Ввод начальных остатков по ОС")
		ИЛИ	Найти(ТипДока, "Изменение параметров начисления амортизации ОС")
		ИЛИ	Найти(ТипДока, "Изменение состояния ОС")
		ИЛИ	Найти(ТипДока, "Изменение специального коэффициента для расчета амортизации ОС (налоговый учет)")
		ИЛИ	Найти(ТипДока, "Модернизация ОС")
		ИЛИ	Найти(ТипДока, "Начисление амортизации")
		ИЛИ	Найти(ТипДока, "Перемещение ОС")
		ИЛИ	Найти(ТипДока, "Перемещение локального оборудования")
		ИЛИ	Найти(ТипДока, "Подготовка к передаче ОС")
		ИЛИ	Найти(ТипДока, "Списание оборудования")
		ИЛИ	Найти(ТипДока, "Списание оборудования old")
		ИЛИ	Найти(ТипДока, "Списание экспортного оборудования old")
		ИЛИ	Найти(ТипДока, "Транспортные расходы по ОС")
		ИЛИ	Найти(ТипДока, "Закрытие месяца")
		ИЛИ	Найти(ТипДока, "Списание ОС") Тогда
		
		Возврат Перечисления.МодулиРазработки.FixedAssets;
					
	// Purchase book
	ИначеЕсли СтрНайти(ТипДока, "Счет книги покупок")
	    ИЛИ СтрНайти(ТипДока, "Оплата книги покупок")
		ИЛИ СтрНайти(ТипДока, "Счет фактура / акт упр.")
		ИЛИ СтрНайти(ТипДока, "Регистрация ПП")
		ИЛИ СтрНайти(ТипДока, "Закрытие предоплаты")
		ИЛИ СтрНайти(ТипДока, "Списание НДС")
		ИЛИ СтрНайти(ТипДока, "Вычет НДС по приобретенным ценностям (упр)")
		ИЛИ СтрНайти(ТипДока, "Платежное поручение исходящее")
		ИЛИ СтрНайти(ТипДока, "Операция книги покупок") Тогда
	
		Возврат Перечисления.МодулиРазработки.PurchaseBook;
		
	// Importation
	ИначеЕсли СтрНайти(ТипДока, "Декларация") Тогда
		
		Возврат Перечисления.МодулиРазработки.Importation;
	
	//General Ledger	
	ИначеЕсли СтрНайти(ТипДока, "Операция Lawson") Тогда
		
		Возврат Перечисления.МодулиРазработки.GL;
		
	//Tangible Assets	
	ИначеЕсли СтрНайти(ТипДока, "РИЗП") Тогда
		
		Возврат Перечисления.МодулиРазработки.TangibleAssets;

	// Other
	Иначе
						
		Возврат Перечисления.МодулиРазработки.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПОПАДАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА В ЗАКРЫТЫЙ ПЕРИОД

Функция ПолучитьСтруктуруТаблицДвиженийДокументаПоНалоговымРегистрам(ДокументОбъект, Прочитать) Экспорт
	
	СтруктураТаблиц = Новый Структура;
	
	// Перебираем все наборы записей документа
	ДвиженияДокумента = ДокументОбъект.Движения;
	Для Каждого НаборЗаписей Из ДвиженияДокумента Цикл
		
		МетаданныеНабораЗаписей = НаборЗаписей.Метаданные();
		
		// Если в этом регистре есть измерение НалоговыйПериод - значит он налоговый
		Если МетаданныеНабораЗаписей.Измерения.Найти("НалоговыйПериод") <> Неопределено Тогда
			
			// Помещаем таблицу движений регистра в структуру таблиц
			Если Прочитать Тогда
				НаборЗаписей.Прочитать();
			КонецЕсли;
			// { RGS LFedotova 02.09.2016 20:33:12 - вопрос SLI-0006751
			ТЗ = НаборЗаписей.Выгрузить();
			ТЗ.Колонки.Добавить("Номер");
			Для каждого Строка Из ТЗ Цикл
				Строка.Номер = ДокументОбъект.Номер;
			КонецЦикла;      
			// } RGS LFedotova 02.09.2016 20:34:38 - вопрос SLI-0006751
			
			// { RGS LFedotova 02.09.2016 20:38:55 - 
			//СтруктураТаблиц.Вставить(МетаданныеНабораЗаписей.Имя, НаборЗаписей.Выгрузить());
			СтруктураТаблиц.Вставить(МетаданныеНабораЗаписей.Имя, ТЗ);
			// } RGS LFedotova 02.09.2016 20:38:56 - 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураТаблиц;
		
КонецФункции
	

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УТВЕРЖДЕНИЯ

Функция ПолучитьАналитикуУтвержденияОбъекта(УтверждаемыйОбъект) Экспорт
	
	МодульУтверждаемогоОбъекта = ПолучитьМодульРазработкиДокумента(УтверждаемыйОбъект);
	
	ПеречислениеМодулиРазработки = Перечисления.МодулиРазработки;
	МетаданныеУтверждаемогоОбъекта = УтверждаемыйОбъект.Метаданные();
	
	Если МодульУтверждаемогоОбъекта = ПеречислениеМодулиРазработки.FixedAssets Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеУтверждаемогоОбъекта) Тогда
			Возврат УтверждаемыйОбъект.Подразделение;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеУтверждаемогоОбъекта) Тогда
			Возврат УтверждаемыйОбъект.ПодразделениеОрганизации;
		КонецЕсли;
		
	ИначеЕсли МодульУтверждаемогоОбъекта = ПеречислениеМодулиРазработки.SalesBook Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИнвойсинговыйЦентр", МетаданныеУтверждаемогоОбъекта) Тогда
			Возврат УтверждаемыйОбъект.ИнвойсинговыйЦентр;
		КонецЕсли;
		
	ИначеЕсли МодульУтверждаемогоОбъекта = ПеречислениеМодулиРазработки.PurchaseBook Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("CashCode", МетаданныеУтверждаемогоОбъекта) Тогда
			Возврат УтверждаемыйОбъект.CashCode.ПлатежныйЦентр;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПлатежныйЦентр", МетаданныеУтверждаемогоОбъекта) Тогда
			Возврат УтверждаемыйОбъект.ПлатежныйЦентр;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;		

КонецФункции

Функция ПолучитьНаименованиеЗадачи(УтверждаемыйОбъект, ПраваПользователя) Экспорт
	
	// Сформируем основное наименование
	Если ПраваПользователя Тогда
		НаименованиеЗадачи = "Утверждение документа";
	Иначе
		НаименованиеЗадачи = "Ознакомление с документом";
	КонецЕсли;
	НаименованиеЗадачи = НаименованиеЗадачи + " """ + УтверждаемыйОбъект + """";
	
	// Добавим вид операции
	МетаданныеУтверждаемогоОбъекта = УтверждаемыйОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеУтверждаемогоОбъекта) Тогда
		НаименованиеЗадачи = НаименованиеЗадачи + " с видом операции """ + УтверждаемыйОбъект.ВидОперации + """";
	КонецЕсли;
	
	Возврат НаименованиеЗадачи;
	
КонецФункции

// Возвращает необходимость утверждать документ без учета состояния утверждения
Функция НадоУтверждатьДокумент(ЭтотОбъект) Экспорт
	
	// Проверка попадания дат в разные кварталы
	Дата1 = НачалоКвартала(ЭтотОбъект.Дата);
	Дата2 = НачалоКвартала(ЭтотОбъект.ДатаПроведения);
	Дата3 = НачалоКвартала(ЭтотОбъект.НалоговыйПериод);
	
	ДатаМин = Мин(Дата1, Дата2, Дата3);
	ДатаМакс = Макс(Дата1, Дата2, Дата3);

	Если ДатаМин <> ДатаМакс Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Кредит-ноты утверждаются всегда
	Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ВидОперации = ЭтотОбъект.ВидОперации;
		ВидыОпераций = Перечисления.ВидыОперацийРеализацияТоваров;
		Если ВидОперации = ВидыОпераций.КредитНотаСторно
			ИЛИ ВидОперации = ВидыОпераций.КредитНотаОтрицатСФ
			ИЛИ ВидОперации = ВидыОпераций.ВнутренняяКредитНота Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСтатусУтверждения(Документ) Экспорт
	
	СтруктураПоиска = Новый Структура("КредитНота", Документ);
	ЗаписьРегистра = РегистрыСведений.СтатусыУтвержденияКорректировок.Получить(СтруктураПоиска);
	Если ЗаписьРегистра <> Неопределено Тогда
		Возврат ЗаписьРегистра.Статус;
	Иначе
		Возврат Перечисления.СтатусыУтвержденияОбъектов.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

Функция ПолучитьМассивУтверждающихПользователей(АналитикаАдресации) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("АналитикаАдресации", АналитикаАдресации);	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдресацияУведомлений.Исполнитель
		|ИЗ
		|	РегистрСведений.АдресацияУведомлений КАК АдресацияУведомлений
		|ГДЕ
		|	АдресацияУведомлений.АналитикаАдресации = &АналитикаАдресации
		|	И АдресацияУведомлений.ПраваПользователя";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

Процедура ЗапуститьПроцессУтверждения(УтверждаемыйОбъект, АналитикаАдресации, ТекстОснования) Экспорт
	
	// Получим адресатов
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("АналитикаАдресации", АналитикаАдресации);	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдресацияУведомлений.ОтветственноеЛицо,
		|	АдресацияУведомлений.Исполнитель,
		|	АдресацияУведомлений.ПраваПользователя,
		|	АдресацияУведомлений.КоличествоУтверждающих
		|ИЗ
		|	РегистрСведений.АдресацияУведомлений КАК АдресацияУведомлений
		|ГДЕ
		|	АдресацияУведомлений.АналитикаАдресации = &АналитикаАдресации";
		
	ТаблицаАдресатов = Запрос.Выполнить().Выгрузить();
	
	// Сформируем задачи на утверждение и ознакомление
	НаименованиеЗадачиУтверждения = ПолучитьНаименованиеЗадачи(УтверждаемыйОбъект, Истина);
	НаименованиеЗадачиОзнакомления = ПолучитьНаименованиеЗадачи(УтверждаемыйОбъект, Ложь);
	СтатусЗадачиНовая = Перечисления.СтатусыУтвержденияЗадач.НоваяЗадача;
	ПеречислениеВидыЗадач = Перечисления.ВидыЗадач;
	Для Каждого СтрокаАдресата из ТаблицаАдресатов Цикл
		
		Задача = Задачи.УниверсальнаяЗадача.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		
		Если СтрокаАдресата.ПраваПользователя Тогда
			
			Задача.Наименование = НаименованиеЗадачиУтверждения;
			Задача.ВидЗадачи = ПеречислениеВидыЗадач.НаУтверждение;
			Задача.СтатусУтверждения = СтатусЗадачиНовая;
			
		Иначе
			
			Задача.Наименование = НаименованиеЗадачиОзнакомления;
			Задача.ВидЗадачи = ПеречислениеВидыЗадач.НаОзнакомление;
			
		КонецЕсли;
		
		Задача.АналитикаАдресации = АналитикаАдресации;
		Задача.Исполнитель = СтрокаАдресата.Исполнитель;
		Задача.Ответственный = СтрокаАдресата.ОтветственноеЛицо;
		
		Задача.Описание = ТекстОснования;
		Задача.ОбъектЗадачи = УтверждаемыйОбъект.Ссылка;
		
		Задача.Записать();
		
	КонецЦикла;
	
	// Запишем состояние утверждения в дополнительные регистры сведений
	СтруктураПоиска = Новый Структура("ПраваПользователя", Истина); 
	СтрокиУтверждающих = ТаблицаАдресатов.НайтиСтроки(СтруктураПоиска);
	КоличествоУтверждающих = СтрокиУтверждающих.Количество();
	Если КоличествоУтверждающих > 0 Тогда
		
		ЗаписьВРегистр = РегистрыСведений.СтатусыУтвержденияКорректировок.СоздатьМенеджерЗаписи();
		ЗаписьВРегистр.КредитНота = УтверждаемыйОбъект.Ссылка;
		
		//Изменила Федотова Л., РГ-Софт, 12.12.13, вопрос SLI-0004035
		//ЗаписьВРегистр.КоличествоУтверждающих = КоличествоУтверждающих;
		ЗаписьВРегистр.КоличествоУтверждающих = СтрокиУтверждающих[0].КоличествоУтверждающих;
		
		ЗаписьВРегистр.КоличествоУтвердивших = 0;
		ЗаписьВРегистр.Статус = Перечисления.СтатусыУтвержденияОбъектов.Новая;
		ЗаписьВРегистр.Записать();
		
		// ПОНЯТЬ, ЗАЧЕМ ЭТО НУЖНО!!!
		ЗаписьИсторииКН = РегистрыСведений.ИсторияУтвержденияКорректировок.СоздатьМенеджерЗаписи();
		ЗаписьИсторииКН.КредитНота = УтверждаемыйОбъект.Ссылка;
		ЗаписьИсторииКН.Статус = Перечисления.СтатусыУтвержденияОбъектов.Новая;
		ЗаписьИсторииКН.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ЗаписьИсторииКН.Период = ТекущаяДата();
		ЗаписьИсторииКН.Записать();	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОстановитьПроцессУтверждения(СсылкаНаУтверждаемыйОбъект) Экспорт
		
	// Найдем все невыполненные задачи
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаУтверждаемыйОбъект", СсылкаНаУтверждаемыйОбъект);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УниверсальнаяЗадача.Ссылка
		|ИЗ
		|	Задача.УниверсальнаяЗадача КАК УниверсальнаяЗадача
		|ГДЕ
		|	(НЕ УниверсальнаяЗадача.Выполнена)
		|	И УниверсальнаяЗадача.ОбъектЗадачи = &СсылкаНаУтверждаемыйОбъект";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Закроем невыполненные задачи
	Отказ = Ложь;
	Заголовок = "Остановка процесса утверждения документа """ + СсылкаНаУтверждаемыйОбъект + """...";	
	НачатьТранзакцию();

	СтатусОтменена = Перечисления.СтатусыУтвержденияЗадач.Отменена;
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.СтатусУтверждения = СтатусОтменена;
		
		Попытка
			ЗадачаОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать задачу """ + ЗадачаОбъект + """!", Отказ, Заголовок);
		КонецПопытки;
		
	КонецЦикла;
	
	// Отразим в регистрах новый статус утверждения
	МенеджерЗаписи = РегистрыСведений.СтатусыУтвержденияКорректировок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КредитНота = СсылкаНаУтверждаемыйОбъект;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Статус = Перечисления.СтатусыУтвержденияОбъектов.Отменена;
	МенеджерЗаписи.Записать();

	ЗаписьИсторииКН = РегистрыСведений.ИсторияУтвержденияКорректировок.СоздатьМенеджерЗаписи();
	ЗаписьИсторииКН.КредитНота = СсылкаНаУтверждаемыйОбъект;
	ЗаписьИсторииКН.Статус = Перечисления.СтатусыУтвержденияОбъектов.Отменена;
	ЗаписьИсторииКН.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	ЗаписьИсторииКН.Период = ТекущаяДата();
	ЗаписьИсторииКН.Записать();
	
	// Если документ был проведен - отменим его проведение
	Если СсылкаНаУтверждаемыйОбъект.Проведен Тогда
		
		ДокументОбъект = СсылкаНаУтверждаемыйОбъект.ПолучитьОбъект();
		
		//Добавила Федотова Л., РГ-Софт, 24.07.15, вопрос SLI-0005621
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоОтменаУтверждения",Истина);
		//Конец добавления
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось отменить проведения документа """ + СсылкаНаУтверждаемыйОбъект + """: " + ОписаниеОшибки(), Отказ, Заголовок);
		КонецПопытки;
	
	КонецЕсли;
		
	// Если были ошибки - откатим транзакцию
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Сообщить("Процесс утверждения документа """ + СсылкаНаУтверждаемыйОбъект + """ не был отменен!", СтатусСообщения.Важное);
		
	// Если ошибок не было - фиксируем транзакцию	
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщить("Процесс утверждения документа """ + СсылкаНаУтверждаемыйОбъект + """ был успешно отменен!", СтатусСообщения.Информация);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗадачи(Пользователь) Экспорт
	
	// Найдем все невыполненные задачи пользователя
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УниверсальнаяЗадачаЗадачиПоИсполнителю.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.УниверсальнаяЗадача.ЗадачиПоИсполнителю(&Исполнитель, (НЕ Выполнена)) КАК УниверсальнаяЗадачаЗадачиПоИсполнителю";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Форма=Задачи.УниверсальнаяЗадача.ПолучитьФормуСписка();
		Форма.Открыть();
			
	КонецЕсли;
			
КонецПроцедуры
