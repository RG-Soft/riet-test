
Процедура ОткрытьЖурналПроводок(Ссылка) Экспорт
	
	//ФормаСписка = РегистрыНакопления.ПроводкиDSSОбщие.ПолучитьФормуСписка();
	ФормаСписка = РегистрыНакопления.ПроводкиDSSОбщие.ПолучитьФорму("ФормаСписка");
	
	Если ФормаСписка.РегистрНакопленияСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
		
		// Сбрасываем предыдущие отборы
		ФормаСписка.РегистрНакопленияСписок.Отбор.Сбросить();
		
		ФормаСписка.РегистрНакопленияСписок.Отбор.Регистратор.Значение      = Ссылка;
		ФормаСписка.РегистрНакопленияСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
		ФормаСписка.РегистрНакопленияСписок.Отбор.Регистратор.Использование = Истина;
		
		ФормаСписка.ЭлементыФормы.РегистрНакопленияСписок.НастройкаОтбора["Регистратор"].Доступность = Ложь;
		
		ФормаСписка.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоЗначений(Родитель, ЭлементРодительДЗ) Экспорт
	
	//для ДЗ должны быть определены слежующие поля:
	//Код, Наименование, КодВыполнения, Статья, Тип, Модуль 
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Фильтры.ПустаяСсылка();	
	КонецЕсли; 
	Выборка = Справочники.Фильтры.Выбрать(Родитель,,,"Код Возр");
	
	Пока Выборка.Следующий() Цикл
		НовыйЭлементДЗ = ЭлементРодительДЗ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементДЗ, Выборка);
		ЗаполнитьДеревоЗначений(Выборка.Ссылка, НовыйЭлементДЗ)
	КонецЦикла;
	
КонецПроцедуры

Функция ПрименитьФильтры_ДЗ(Родитель, Строка) Экспорт
	
	Если Родитель = Неопределено Тогда
		ОбработкаDSSСервер.ПрименитьФильтры(Неопределено, Строка);
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого Выборка Из Родитель.Строки Цикл
		Если Выборка.Тип = Перечисления.ТипыФильтров.IF Тогда
			Выполнить("Результат = (" + Выборка.КодВыполнения + ");");
			Если Результат Тогда
				Если ЗначениеЗаполнено(Выборка.Статья) Тогда
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("FiscalType");
					СтруктураПолей.Вставить("Модуль");
					СтруктураПолей.FiscalType = Выборка.Статья;
					СтруктураПолей.Модуль     = Выборка.Модуль;
					Возврат СтруктураПолей;
				Иначе
					Возврат ПрименитьФильтры_ДЗ(Выборка, Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Тип = Перечисления.ТипыФильтров.ELSE Тогда
			Возврат ПрименитьФильтры_ДЗ(Выборка,Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПрименитьФильтрыПоискТипа(Родитель, Строка) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Фильтры.ПустаяСсылка();	
	КонецЕсли; 
	Выборка = Справочники.Фильтры.Выбрать(Родитель,,,"Код Возр");
	
	Результат = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыФильтров.IF Тогда
			Выполнить("Результат = (" + Выборка.КодВыполнения + ");");
			Если Результат Тогда    				
				Если ЗначениеЗаполнено(Выборка.Статья) Тогда  					
					Возврат Выборка.Код;
				Иначе
					Возврат ПрименитьФильтрыПоискТипа(Выборка.Ссылка, Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Тип = Перечисления.ТипыФильтров.ELSE Тогда
			Если ЗначениеЗаполнено(Выборка.Статья) Тогда
				Возврат Выборка.Код;   
			Иначе
				Возврат ПрименитьФильтрыПоискТипа(Выборка.Ссылка, Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// смена строк XR->>
Функция ПроверитьФайлСЗаменойТипов(ИмяФайла, Путь, ПоляМассив, СколькоСтрокПроверять, СколькоМинимумСтроковых) Экспорт
	
	//Инициализация настроек	
	
	ТЗПреобразований = Новый ТаблицаЗначений;
	ТЗПреобразований.Колонки.Добавить("Имя");
	ТЗПреобразований.Колонки.Добавить("ИндексКолонки");
	ТЗПреобразований.Колонки.Добавить("КоличествоЛиквидных");
	
	Для каждого Элемент из ПоляМассив Цикл
		Строка 						= ТЗПреобразований.Добавить();
		Строка.Имя 					= Элемент;
		Строка.ИндексКолонки 		= 0; 
		Строка.КоличествоЛиквидных	= 0; 	
	КонецЦикла;
	
	//Не дадим выйти за пределы дозволенного! ВНИМАНИЕ, если убрать это условие, то алгоритм будет работать не верно!
	Если СколькоСтрокПроверять/СколькоМинимумСтроковых < ТЗПреобразований.Количество() Тогда
		Сообщить("Ошибка! Невозможна корректная замена строк для верного определения типов!");
		Возврат Истина;
	КонецЕсли;	
	
	//<- инициализация настроек
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(Путь + ИмяФайла);  
	НачальноеКоличествоСтрок = Текст.КоличествоСтрок();
	      	
	 //	ОПРЕДЕЛИМ НЕОБХОДИМОСТЬ ЗАМЕНЫ
	 
	СтрокаИменКолонок = ПолучитьСтрокуТекстовогоДокументаCSV(Текст,1);
	
	// определяем позиции искомых колонок
	Для каждого Строка из ТЗПреобразований Цикл
		Позиция = СтрНайти(СтрокаИменКолонок, Строка.Имя);		
		Если Позиция = 0 Тогда
			Сообщить("Ошибка загрузки! Не найдено поле " + Строка.Имя);
			Возврат Истина;
		КонецЕсли;
		ИндексКолонки 			= СтрЧислоВхождений(Лев(СтрокаИменКолонок,Позиция),",");		
		Строка.ИндексКолонки 	= ИндексКолонки;		
	КонецЦикла;
	
	//Считаем, сколько нужных значений строкового типа есть в первых записях по всем нужным колонкам
	Для НомерСтроки = 2 По СколькоСтрокПроверять + 1 Цикл
		
		СтрокаДанных 		= ПолучитьСтрокуТекстовогоДокументаCSV(Текст,НомерСтроки);     	
		МассивЗначенийПолей = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ",");		
		
		Для каждого Строка из ТЗПреобразований Цикл   			
			ЗначениеПоля = МассивЗначенийПолей[Строка.ИндексКолонки]; 	
			Если НЕ ЭтоЧисло(ЗначениеПоля) Тогда
				Строка.КоличествоЛиквидных = Строка.КоличествоЛиквидных + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
	// непосредственно проверка  	
	НеобходимоПоменятьСтрокиМестами = Ложь;
	Для каждого Строка из ТЗПреобразований Цикл   			
		Если Строка.КоличествоЛиквидных < СколькоМинимумСтроковых Тогда
			НеобходимоПоменятьСтрокиМестами = Истина;  
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ НеобходимоПоменятьСтрокиМестами Тогда		
		Возврат Ложь;		
	КонецЕсли;

	//Обнуление ликвидных	
	Для каждого Строка из ТЗПреобразований Цикл   			
		Строка.КоличествоЛиквидных = 0;
	КонецЦикла; 
	
	//Производим поиск строк, которые нам подходят (с явно строковыми значениями нужных полей)
	
	МассивНомеровКорректныхСтрок = Новый Массив;

	Для НомерСтроки = 2 По Текст.КоличествоСтрок() Цикл 		
		
		СтрокаДанных 		= ПолучитьСтрокуТекстовогоДокументаCSV(Текст,НомерСтроки);     	
		МассивЗначенийПолей = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаДанных, ",");		
		
		Для каждого Строка из ТЗПреобразований Цикл   			
			ЗначениеПоля = МассивЗначенийПолей[Строка.ИндексКолонки]; 	
			Если НЕ ЭтоЧисло(ЗначениеПоля) И Строка.КоличествоЛиквидных < СколькоМинимумСтроковых Тогда
				Строка.КоличествоЛиквидных = Строка.КоличествоЛиквидных + 1;
				Если МассивНомеровКорректныхСтрок.Найти(НомерСтроки) = Неопределено Тогда
					МассивНомеровКорректныхСтрок.Добавить(НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//проверка на выход
		СтрокОтобраноДостаточно = Истина;
		Для каждого Строка из ТЗПреобразований Цикл   			
			Если Строка.КоличествоЛиквидных < СколькоМинимумСтроковых Тогда
				СтрокОтобраноДостаточно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если СтрокОтобраноДостаточно Тогда
			Прервать;
		КонецЕсли;		
	
	КонецЦикла;             
	
	//проверка, что отобранных строк хватило
	СтрокОтобраноДостаточно = Истина;
	Для каждого Строка из ТЗПреобразований Цикл   			
		Если Строка.КоличествоЛиквидных < СколькоМинимумСтроковых Тогда
			СтрокОтобраноДостаточно = Ложь;
		КонецЕсли;
	КонецЦикла;		
	Если НЕ СтрокОтобраноДостаточно Тогда
		Сообщить("Ошибка! Недостаточно строковых значений для корректного определения данных! Загрузка не завершена!");
		Возврат Истина;
	КонецЕсли;	
	
	// меняем строки местами
	
	//Создаем копию корректных строк в памяти, а в текстовом документе их удаляем.
	МассивКорректныхСтрок = Новый Массив;
	
	Пока МассивНомеровКорректныхСтрок.Количество() Цикл
		
		КрайнийНомерСтроки 	= МассивНомеровКорректныхСтрок[МассивНомеровКорректныхСтрок.Количество()-1];
		СтрокаДанных 	 	= ПолучитьСтрокуТекстовогоДокументаCSV(Текст,КрайнийНомерСтроки);		
		МассивКорректныхСтрок.Добавить(СтрокаДанных);
		МассивНомеровКорректныхСтрок.Удалить(МассивНомеровКорректныхСтрок.Количество()-1);
		Текст.УдалитьСтроку(КрайнийНомерСтроки);
		
	КонецЦикла;
	
	//Вставляем строки в начало документа
	Для каждого Строка из МассивКорректныхСтрок Цикл
		Текст.ВставитьСтроку(2, Строка);
	КонецЦикла;   	
	
	Если Текст.КоличествоСтрок() <> НачальноеКоличествоСтрок Тогда
		Сообщить("Ошибка! При замене строк что-то пошло не так!");
		Возврат Истина;
	КонецЕсли;                        	
	 	
	 Попытка
		НовИмяФайла = "CopyS_" + ИмяФайла;
		ПолныйПуть = Путь + НовИмяФайла;
		Текст.Записать(ПолныйПуть, КодировкаТекста.ANSI);
		Сообщить("В файле """ + ИмяФайла + """ изменен порядок строк: создан новый файл для загрузки """ + ПолныйПуть + """.", СтатусСообщения.Информация);
		ИмяФайла = НовИмяФайла;
		Возврат Ложь;
	Исключение
		Сообщить("Ошибка при создании файла при изменении порядка строк""" + ИмяФайла + """! Создание нового файла не удалось!""" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат Истина;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

Функция ЭтоЧисло(Слово)
	
	Пока СтрНайти(Слово," ") ИЛИ СтрНайти(Слово,"""") ИЛИ  СтрНайти(Слово,".") Цикл		
		Слово = СтрЗаменить(Слово," ","");
		Слово = СтрЗаменить(Слово,".","");
		Слово = СтрЗаменить(Слово,"""","");		
		Слово = СтрЗаменить(Слово,"=","");		
		Слово = СтрЗаменить(Слово,"'","");		
	КонецЦикла;  	
	
	Если Слово = "" Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если СтрНайти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтрокуТекстовогоДокументаCSV(ТекстовыйДокумент, НомерСтроки)
	
	Возврат УдалитьЗапрещенныеКавычкиИЗСтрокиФайлаCSV(ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки));
	
КонецФункции

Функция УдалитьЗапрещенныеКавычкиИЗСтрокиФайлаCSV(Строка)
	
	МассивПозицийЗапрещенныхЗапятых = Новый Массив;
	
	КавычкаОткрылась = Ложь;
	КавычкаЗакрылась = Ложь;
	
	Для Сч = 1 По СтрДлина(Строка) Цикл     		
		
		ТекСимвол = Сред(Строка,Сч,1);
		
		Если ТекСимвол = "," И КавычкаОткрылась И НЕ КавычкаЗакрылась Тогда
			МассивПозицийЗапрещенныхЗапятых.Добавить(Сч);
		КонецЕсли;
		
		Если ТекСимвол = """" Тогда			
			Если НЕ КавычкаОткрылась Тогда
				КавычкаОткрылась = Истина;
			Иначе
				КавычкаЗакрылась = Истина;
			КонецЕсли;                     				
		КонецЕсли;
		
		
		Если КавычкаОткрылась и КавычкаЗакрылась Тогда
			КавычкаОткрылась = Ложь;
			КавычкаЗакрылась = Ложь;
		КонецЕсли;		
		
	КонецЦикла;
	
	Пока МассивПозицийЗапрещенныхЗапятых.Количество() Цикл
		
		Позиция = МассивПозицийЗапрещенныхЗапятых[МассивПозицийЗапрещенныхЗапятых.Количество()-1];
		
		Строка = Лев(Строка, Позиция - 1) + Сред(Строка, Позиция + 1);
		
		МассивПозицийЗапрещенныхЗапятых.Удалить(МассивПозицийЗапрещенныхЗапятых.Количество()-1);		
		
	КонецЦикла;   	
	
	Возврат Строка;
	
КонецФункции

//<-