// Функция возвращает список счетов для заполнения списка подбора счета в формах
//
// Параметры
//  Дата  – дата – на какую дату получать список счетов
//            
//  ПодразделениеОрганизации  – СправочникСсылка.ПодразделениеОрганизации – 
// 									по какому подразделению
//
// Возвращаемое значение:
//   СписокЗначений   – список банковских счетов для выбора
//
Функция ПолучитьСписокСчетов(ПодразделенияОрганизации, Дата) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеБанковскихСчетовСрезПоследних.Счет
	|ИЗ
	|	РегистрСведений.СоответствиеБанковскихСчетов.СрезПоследних(&Дата, ) КАК СоответствиеБанковскихСчетовСрезПоследних
	|ГДЕ
	|	СоответствиеБанковскихСчетовСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
	|	И СоответствиеБанковскихСчетовСрезПоследних.Используется = ИСТИНА";
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделенияОрганизации);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	СписокСчетов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат СписокСчетов;

КонецФункции // ПолучитьСписокСчетов()

// Возвращает список Кост-центров по заданной локации (налоговой регистрации)
//
// Параметры
//  ПодразделениеОрганизации  – локация (налоговая регистрация) для которой необходимо
//                 получить список кост-центров
// Возвращаемое значение:
//   Список   – список значений типа КостЦентр для выбора в форме документа
//
Функция ПолучитьСписокAU(ПодразделениеОрганизации) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КостЦентры.Ссылка
	               |ИЗ
	               |	Справочник.КостЦентры КАК КостЦентры
	               |ГДЕ
	               |	КостЦентры.ПодразделениеОрганизации В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Список;

КонецФункции // ПолучитьСписокAU()

// Формирует текст про реализацию для показа в форме документа
//
// Параметры: 
//  Реализация - ссылка на документ, определяет документ, про который надо получить текстовую строку.
//
// Возвращаемое значение:
//  Текстовая строка про реализацию.
//
Функция ПолучитьТекстРеализации(Реализация) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Реализация) Тогда
		Возврат "Ввести реализацию товаров и услуг";

	Иначе
		Возврат Строка(Реализация);

	КонецЕсли;

КонецФункции // ПолучитьТекстРеализации()

//Функция возвращает документ Реализация товаров и услуг
//
Функция ПолучитьДокументРеализацииПоТикету(Тикет) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Тикет) Тогда
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                |	ВложенныйЗапрос.Ссылка
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	                |	ИЗ
	                |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                |	ГДЕ
	                |		РеализацияТоваровУслугТовары.Ticket = &Ссылка
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		РеализацияТоваровУслугУслуги.Ссылка
	                |	ИЗ
	                |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	                |	ГДЕ
	                |		РеализацияТоваровУслугУслуги.Ticket = &Ссылка) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("Ссылка", Тикет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//Функция возвращает список пользователей, которые могут утверждать кредит-ноты данного
// пользователя
//
Функция ПолучитьСписокУтвержденияКредитНот(Пользователь) Экспорт 
	
	Список = Новый СписокЗначений;
	Группа = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ГруппаУтвержденияКредитНот");	
	Если Не Группа = Неопределено Тогда
		Список.ЗагрузитьЗначения(Группа.ПользователиГруппы.ВыгрузитьКолонку("Пользователь"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ПарсингНомераИнвойсаLawson(Номер, Тип = "Москва") Экспорт

	Если Номер = "" Тогда
		Возврат "";
	КОнецЕсли;
	к = 1;
	Пока к <= СтрДлина(Номер) Цикл
		к = к + 1;
		Префикс = Лев(Номер,к);
	    Попытка
			НомерИнвойса = СтрЗаменить(Число(Сред(Номер,к+1)),Символы.НПП,"");
			Возврат Префикс+?(Тип = "Москва", "-", " ")+НомерИнвойса;
		Исключение
		КонецПопытки;
	КонецЦикла;
	//Изменила Федотова Л., РГ-Софт, 21.07.15, вопрос SLI-0005611
	//НомерИнвойса = СтрЗаменить(Формат(Число(Сред(Номер,3)),"ЧЦ=4"),Символы.НПП,"");
	
КонецФункции

Процедура ПодборЗадолженностей(СтруктураПараметров) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	ОбработкаОбъект.ДокументСсылка					=СтруктураПараметров.ДокументСсылка;
	ОбработкаОбъект.КурсДокумента					=СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента				=СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ТипЗадолженности				=СтруктураПараметров.ТипЗадолженности;
	ОбработкаОбъект.Контрагент						=СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ФормаОплаты						=СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ИмяРегистраПлан					=СтруктураПараметров.ИмяРегистраПлан;
	ОбработкаОбъект.ВидОперацииПлан					=СтруктураПараметров.ВидОперацииПлан;
	ОбработкаОбъект.БанковскийСчетКасса				=СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Проект							=СтруктураПараметров.Проект;
	ОбработкаОбъект.СтатьяДвиженияДенежныхСредств	=СтруктураПараметров.СтатьяДвиженияДенежныхСредств;
	ОбработкаОбъект.Организация						=СтруктураПараметров.Организация;
	ОбработкаОбъект.ВалютаДокумента					=СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.ДатаДок							=СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ВидОперацииДок					=СтруктураПараметров.ВидОперацииДок;
	ОбработкаОбъект.СуммаДляПодбора					=СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.РасшифровкаПлатежаДок			=СтруктураПараметров.РасшифровкаПлатежаДок;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов		=СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	ОбработкаОбъект.ОтражатьВБухгалтерскомУчете		=СтруктураПараметров.ОтражатьВБухгалтерскомУчете;
	//ОбработкаОбъект.ЕстьПодбор						= НЕ СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораЗадолженностей", СтруктураПараметров.ФормаДокумента, "ФормаПодбораЗадолженностейДляПлатежа");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе=СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора.ОткрытьМодально();
	
КонецПроцедуры

// Проставляет реквизиты, необходимые для проведения по регламентированному учету
// 
Процедура ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете=Истина) Экспорт;
	
	//Пересчитываем сумму НДС
	
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС=НДСПоУмолчанию;
	КонецЕсли;				
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Пустая(),СчетаУчета.СчетРасчетов,СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ?(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам.Пустая(),СчетаУчета.СчетАвансов,СтрокаПлатеж.СчетУчетаРасчетовПоАвансам);
		
	КонецЕсли;
					
КонецПроцедуры // ЗаполнитьРеквизитыРеглУчета()
	 
// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

Функция ПолучитьТаблицуНоменклатуры(Тикеты) Экспорт 
	
	ОбщаяТаблица = Новый ТаблицаЗначений;
	ОбщаяТаблица.Колонки.Добавить("Ticket");
	ОбщаяТаблица.Колонки.Добавить("SIR");
	ОбщаяТаблица.Колонки.Добавить("Номенклатура");
	ОбщаяТаблица.Колонки.Добавить("ЕдиницаИзмерения");
	ОбщаяТаблица.Колонки.Добавить("Количество");
	ОбщаяТаблица.Колонки.Добавить("Цена");
	ОбщаяТаблица.Колонки.Добавить("Сумма");
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Тикеты) Тогда
		Возврат Неопределено;
	Иначе
		Для Каждого Тикет Из Тикеты Цикл
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Тикет.Значение.SiebelOrder) Тогда
				Детали = Тикет.Значение.SiebelOrder.Details.Выгрузить();
				Детали.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения","Количество, Сумма");
				Для Каждого СтрокаДеталей Из Детали Цикл
					СтрокаТЗ = ОбщаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДеталей);
					СтрокаТЗ.SIR = Тикет.Значение.TicketNumber;
					СтрокаТЗ.Ticket = Тикет.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбщаяТаблица;
	
КонецФункции

Функция ПолучитьОстатокПоТикету(Дата = Неопределено, Тикет) Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТикетыОстатки.СуммаОстаток КАК Остаток
		               |ИЗ
		               |	РегистрНакопления.Тикеты.Остатки("+ ?(Дата = Неопределено, "&Дата", "") +", ) КАК ТикетыОстатки
		               |ГДЕ
		               |	ТикетыОстатки.Тикет = &Тикет";
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Тикет", Тикет);
		Выборка = Запрос.Выполнить().Выбрать();
		СуммаТикета = 0;
		Если Выборка.Следующий() Тогда
			СуммаТикета = Выборка.Остаток;
		КонецЕсли;
		
		Возврат СуммаТикета;

КонецФункции

Функция НеУникальныйSIR(ИмяТикета, Ссылка) Экспорт
	
	Имя = СокрЛП(ИмяТикета);
	Список = Новый СписокЗначений;
	НомерПробела = СтрНайти(Имя, " ");
	НомерДефиса = СтрНайти(Имя, "-");
	Пока НомерПробела <> 0 ИЛИ НомерДефиса <> 0 Цикл
		Если НомерПробела <> 0 И (НомерПробела < НомерДефиса ИЛИ НомерДефиса = 0) Тогда
			Список.Добавить(Лев(Имя,НомерПробела-1));
			Имя = СокрЛП(Сред(Имя, НомерПробела+1));
		ИначеЕсли НомерДефиса <> 0 Тогда
			Список.Добавить(Лев(Имя,НомерДефиса-1));
			Имя = СокрЛП(Сред(Имя, НомерДефиса+1));
		КонецЕсли;
		НомерПробела = СтрНайти(Имя, " ");
		НомерДефиса = СтрНайти(Имя, "-");
	КонецЦикла;
	Список.Добавить(Имя);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Tickets.Ссылка
	                      |ИЗ
	                      |	Документ.Tickets КАК Tickets
	                      |ГДЕ
	                      |	Tickets.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Сч = 0;
	Для Каждого Имя Из Список Цикл
		Запрос.УстановитьПараметр("Имя"+Сч,"%" + Имя + "%");
		Запрос.Текст = Запрос.Текст + " 
	                      |	И Tickets.TicketNumber ПОДОБНО &Имя"+Сч;
		Сч = Сч + 1;
	КонецЦикла;
	Возврат Запрос.Выполнить().Выбрать().Следующий();
	
КонецФункции

Процедура УстановитьОтборПоПериодуВСписке(Отбор, ДатаНач, ДатаКон) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНач) И ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаКон) Тогда
		Отбор.Использование = Ложь;
	ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНач) И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаКон) Тогда
		Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
		Отбор.Значение = ДатаКон;
		Отбор.Использование = Истина;
	ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаКон) И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНач) Тогда
		Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
		Отбор.Значение = ДатаНач;
		Отбор.Использование = Истина;
	Иначе
		Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		Отбор.ЗначениеС = ДатаНач;
		Отбор.ЗначениеПо = ДатаКон;
		Отбор.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСрокОплатыИПроцент(Ссылка) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("СрокОплаты", 0);
	Структура.Вставить("Процент", 0);
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Ссылка) Тогда
		Возврат Структура;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Договор = Ссылка.ДоговорКонтрагента;
		Для Каждого СтрокаТЧ ИЗ Ссылка.Услуги Цикл
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.WO) И ТипЗнч(СтрокаТЧ.WO) = Тип("СправочникСсылка.ЗаказНаряды") Тогда
				Структура.Процент = СтрокаТЧ.WO.Процент;	
				Структура.СрокОплаты = СтрокаТЧ.WO.СрокОплаты;
				Возврат Структура;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ ИЗ Ссылка.Товары Цикл
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.WO) И ТипЗнч(СтрокаТЧ.WO) = Тип("СправочникСсылка.ЗаказНаряды") Тогда
				Структура.Процент = СтрокаТЧ.WO.Процент;	
				Структура.СрокОплаты = СтрокаТЧ.WO.СрокОплаты;
				Возврат Структура;
			КонецЕсли;
		КонецЦикла;
		Структура.Процент = Договор.Процент;	
		Структура.СрокОплаты = Договор.СрокОплаты;
		Возврат Структура;
	Иначе
		Попытка
			Договор = Ссылка.ДоговорКонтрагента;
			Структура.Процент = Договор.Процент;	
			Структура.СрокОплаты = Договор.СрокОплаты;
			Возврат Структура;
		Исключение
			Возврат Структура;
		КонецПопытки;
	КонецЕсли;	
	
КонецФункции

Процедура ЗаполнитьПодразделениеИИнвойсинговыйЦентр(НаборЗаписей) Экспорт
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(НаборЗаписей) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", НаборЗаписей.Отбор.Регистратор.Значение.Метаданные()) Тогда
			Для Каждого Запись Из НаборЗаписей Цикл 
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Запись.ПодразделениеОрганизации) Тогда
					Запись.ПодразделениеОрганизации = НаборЗаписей.Отбор.Регистратор.Значение.ПодразделениеОрганизации;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		                                                                         
		//Если НЕ ТипЗнч(НаборЗаписей.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.ФормированиеЗаписейКнигиПродаж") Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИнвойсинговыйЦентр", НаборЗаписей.Отбор.Регистратор.Значение.Метаданные()) Тогда
				Для Каждого Запись Из НаборЗаписей Цикл 
					Запись.ИнвойсинговыйЦентр = НаборЗаписей.Отбор.Регистратор.Значение.ИнвойсинговыйЦентр;
				КонецЦикла;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьСуммуДокументаБезНДС(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат ?(Документ.СуммаВключаетНДС, Документ.Товары.Итог("Сумма") - Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("Сумма") - Документ.Услуги.Итог("СуммаНДС"), Документ.Товары.Итог("Сумма") + Документ.Услуги.Итог("Сумма"));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда
		Возврат ?(Документ.СуммаВключаетНДС, Документ.ОС.Итог("Сумма") - Документ.ОС.Итог("СуммаНДС"), Документ.ОС.Итог("Сумма"));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		Возврат Документ.ТоварыИУслуги.Итог("Сумма");
	КонецЕсли;
	
КонецФункции

Функция НайтиСтрокиРегистраВзаиморасчетов(ПодразделениеОрганизации = Неопределено, СписокДоговоров,СписокСделок, ВыдаватьВсе = Ложь, МоментВремени = '21000101') Экспорт
	
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	                       |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	                       |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	                       |	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
						   |	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток) КАК СуммаРеглОстаток,
						   |	ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр КАК ИнвойсинговыйЦентр,
	                       |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	                       |	ВзаиморасчетыСПокупателямиОстатки.WO
	                       |ИЗ
	                       |	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&МоментВремени
	                       |		,
	                       |		ДоговорКонтрагента В (&Договора)
	                       |		    И Сделка В (&Сделки)) КАК ВзаиморасчетыСПокупателямиОстатки"+?(Не ВыдаватьВсе,"
	                       |ГДЕ
	                       |	ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток > 0","") + "
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	                       |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	                       |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	                       |	ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр,
	                       |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	                       |	ВзаиморасчетыСПокупателямиОстатки.WO
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВзаиморасчетыСПокупателямиОстатки.Сделка.Дата");
						   
	Запрос.УстановитьПараметр("Договора", СписокДоговоров);
	Запрос.УстановитьПараметр("Сделки", СписокСделок);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
//	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	                      
КонецФункции	

#Если Клиент Тогда
Функция ОтправитьПочтуSSL(Профиль, Получатель, Тема, Тело) Экспорт
	
	Попытка
		ЗагрузитьВнешнююКомпоненту("DialMail.dll");
	Исключение
		Сообщить("Не удалось загрузить компоненту DialMail");
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ОтправкаПочты = Новый("AddIn.SMTP");
	Исключение
		Сообщить("Не удалось создать объект AddIn.SMTP");
		Возврат Ложь;
	КонецПопытки;
	
	ОтправкаПочты.РабочийКаталог = СокрЛП(КаталогВременныхФайлов());
	ОтправкаПочты.УстановитьКодировкуИСпособКодирования(14,1);
	//ОтправкаПочты.ТипТелаПисьма = "Текст";
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ОтправкаПочты.СоздатьПисьмо(	Строка(Профиль.АдресОтправителя),
															Получатель,
															,
															Тема,
															,
															Тело,)) Тогда
		Сообщить("Ошибка при создании письма");
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ОтправкаПочты.ИспользоватьSSL = Профиль.ИспользоватьSSL;
	ОтправкаПочты.ИспользоватьTSL = Профиль.ИспользоватьTSL;
	Если НЕ ОтправкаПочты.Подключиться(	Строка(Профиль.АдресСервераSMTP),
										Строка(Профиль.ПортSMTP),
										Строка(Профиль.ПользовательSMTP),
										Строка(Профиль.ПарольSMTP)) Тогда
		Сообщить("Не удалось подключиться к SMTP-серверу");
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	Спать(2);
	Попытка
		Если ОтправкаПочты.ОтправитьВсеПисьма(1,1,1)=-100 Тогда
			Спать(2);
			ОтправкаПочты.Отключиться();
			Спать(2);
			ОтправкаПочты = Неопределено;
			Возврат Истина;
		Иначе
			Спать(2);
			ОтправкаПочты.Отключиться();
			Спать(2);
			ОтправкаПочты = Неопределено;
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтправкаПочты.Отключиться();
		Спать(2);
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
#Иначе
Функция ОтправитьПочтуSSLСервер(Профиль, Получатель, Тема, Тело) Экспорт
	
	Попытка
		ОтправкаПочты = Новый COMОбъект("AddIn.SMTP");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ОтправкаПочты.РабочийКаталог = СокрЛП(КаталогВременныхФайлов());
	ОтправкаПочты.УстановитьКодировкуИСпособКодирования(14,1);
	//ОтправкаПочты.ТипТелаПисьма = "Текст";
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ОтправкаПочты.СоздатьПисьмо(	Строка(Профиль.АдресОтправителя),
															Получатель,
															,
															Тема,
															,
															Тело,)) Тогда
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ОтправкаПочты.ИспользоватьSSL = Профиль.ИспользоватьSSL;
	ОтправкаПочты.ИспользоватьTSL = Профиль.ИспользоватьTSL;
	Если НЕ ОтправкаПочты.Подключиться(	Строка(Профиль.АдресСервераSMTP),
										Строка(Профиль.ПортSMTP),
										Строка(Профиль.ПользовательSMTP),
										Строка(Профиль.ПарольSMTP)) Тогда
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	Спать(2);
	Попытка
		Если ОтправкаПочты.ОтправитьВсеПисьма(1,1,1)=-100 Тогда
			Спать(2);
			ОтправкаПочты.Отключиться();
			Спать(2);
			ОтправкаПочты = Неопределено;
			Возврат Истина;
		Иначе
			Спать(2);
			ОтправкаПочты.Отключиться();
			Спать(2);
			ОтправкаПочты = Неопределено;
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОтправкаПочты.Отключиться();
		Спать(2);
		ОтправкаПочты = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
#КонецЕсли

#Если Клиент Тогда
Функция ЗагрузитьТаблицуИзExcel(Путь, SQLЗапрос) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	Попытка
		ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
		ADOUtils = Новый("AddIn.ADOUtils");
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.Open("Provider=MSDASQL.1;Persist Security Info=False;Extended Properties=""DSN=Excel Files;DBQ="+ Путь +";DefaultDir=" + КаталогВременныхФайлов() + ";DriverId=790;MaxBufferSize=2048;PageTimeout=5;""");
		Recordset = Connection.Execute(SQLЗапрос);
		ТЗ = ADOUtils.ADORecordsetToValueTable(Recordset);
		RecordSet.Close(); // После того, как набор записей уже не нужен, его нужно закрыть
		Connection.Close();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Возврат ТЗ;
	
КонецФункции
#Иначе
#КонецЕсли

Процедура Спать(Время)
    Если Время = 0 Тогда
        Возврат
    КонецЕсли;
    Сигнатура = Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
    ПутьСкрипта = КаталогВременныхФайлов()+"SleepScript"+Сигнатура+".vbs";
    СкриптФайл = Новый ТекстовыйДокумент;
    СкриптФайл.ДобавитьСтроку("WScript.Sleep("+Формат(Время*1000, "ЧГ=0")+")");
    СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
    WSHShell = Новый COMОбъект("WScript.Shell");
    WSHShell.Run("wscript.exe """+ПутьСкрипта+"""", 0, Истина);
    УдалитьФайлы(ПутьСкрипта);
КонецПроцедуры

Функция ПолучитьНомерТикета(ДокРеализации) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НомераИнвойсовLawson.Тикет.TicketNumber КАК TicketNumber
	                      |ИЗ
	                      |	РегистрСведений.НомераИнвойсовLawson КАК НомераИнвойсовLawson
	                      |ГДЕ
	                      |	НомераИнвойсовLawson.Документ = &Документ");
	Запрос.УстановитьПараметр("Документ", ДокРеализации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.TicketNumber;
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСписокНаименованийРеализацииТиУ(Док,МассивТикетов, МассивКостЦентров) Экспорт
	
	Если Док = Неопределено Тогда
		Дата = ТекущаяДата();
	Иначе
		Дата = Док.Дата;
	КонецЕсли; 
	
	СписокНомеров = Новый СписокЗначений;
			
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//					  |	ВложенныйЗапрос.Ticket КАК Ticket
	//					  |ИЗ
	//					  |	(ВЫБРАТЬ
	//					  |		РеализацияТоваровУслугТовары.Ticket КАК Ticket
	//					  |	ИЗ
	//					  |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//					  |	ГДЕ
	//					  |		РеализацияТоваровУслугТовары.Ссылка = &Док
	//					  |	
	//					  |	ОБЪЕДИНИТЬ ВСЕ
	//					  |	
	//					  |	ВЫБРАТЬ
	//					  |		РеализацияТоваровУслугУслуги.Ticket
	//					  |	ИЗ
	//					  |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//					  |	ГДЕ
	//					  |		РеализацияТоваровУслугУслуги.Ссылка = &Док) КАК ВложенныйЗапрос
	//					  |
	//					  |УПОРЯДОЧИТЬ ПО
	//					  |	Ticket.SiebelOrder.LawsonInvoice ВОЗР");
	//Запрос.УстановитьПараметр("Док", Ссылка);
	//МассивТикетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ticket");
		
	Для Каждого Тикет Из МассивТикетов Цикл
			
		СписокНомеров.Добавить(Тикет.SiebelOrder.Name);
		СписокНомеров.Добавить(ПарсингНомераИнвойсаLawson(Тикет.SiebelOrder.LawsonInvoice, "Ноябрьск"));
		СписокНомеров.Добавить(ПарсингНомераИнвойсаLawson(Тикет.SiebelOrder.LawsonInvoice, "Москва"));
			
	КонецЦикла;
		
	//Если МассивТикетов.Количество() = 2 Тогда
	//	Тикет = МассивТикетов[0];
	//	Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
	//	НомерИнвойса1 = СтрЗаменить(Формат(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),"ЧЦ=4"),Символы.НПП,"");
	//	Тикет = МассивТикетов[1];
	//	НомерИнвойса2 = СтрЗаменить(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),Символы.НПП,"");
	//	Имя = Префикс + "-" + НомерИнвойса1 + "/" + НомерИнвойса2;
	//	СписокНомеров.Добавить(Имя);
	//ИначеЕсли МассивТикетов.Количество() > 2 Тогда
	//	Тикет = МассивТикетов[0];
	//	Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
	//	НомерИнвойса1 = СтрЗаменить(Формат(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),"ЧЦ=4"),Символы.НПП,"");
	//	Тикет = МассивТикетов[МассивТикетов.Количество()-1];
	//	НомерИнвойса2 = СтрЗаменить(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),Символы.НПП,"");
	//	Имя = Префикс + "-" + НомерИнвойса1 + "-" + НомерИнвойса2;
	//	СписокНомеров.Добавить(Имя);
	//КонецЕсли;
	
	Если МассивТикетов.Количество() = 1 Тогда
		Тикет = МассивТикетов[0];
		Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
		НомерИнвойса1 = Сред(Тикет.SiebelOrder.LawsonInvoice,3);
		//Уберем левые нули
		Пока Лев(НомерИнвойса1,1) = "0" Цикл
			НомерИнвойса1 = Прав(НомерИнвойса1, СтрДлина(НомерИнвойса1)-1);
		КонецЦикла;
		Имя = Префикс + " " + НомерИнвойса1;
		СписокНомеров.Добавить(Имя);
	ИначеЕсли МассивТикетов.Количество() = 2 Тогда
		Тикет = МассивТикетов[0];
		Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
		НомерИнвойса1 = Сред(Тикет.SiebelOrder.LawsonInvoice,3);
		Пока Лев(НомерИнвойса1,1) = "0" Цикл
			НомерИнвойса1 = Прав(НомерИнвойса1, СтрДлина(НомерИнвойса1)-1);
		КонецЦикла;
		Тикет = МассивТикетов[1];
		НомерИнвойса2 = Сред(Тикет.SiebelOrder.LawsonInvoice,3);
		Пока Лев(НомерИнвойса2,1) = "0" Цикл
			НомерИнвойса2 = Прав(НомерИнвойса2, СтрДлина(НомерИнвойса2)-1);
		КонецЦикла;
		Имя = Префикс + " " + НомерИнвойса1 + "/" + НомерИнвойса2;
		СписокНомеров.Добавить(Имя);
	ИначеЕсли МассивТикетов.Количество() > 2 Тогда
		Тикет = МассивТикетов[0];
		Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
		НомерИнвойса1 = Сред(Тикет.SiebelOrder.LawsonInvoice,3);
		Пока Лев(НомерИнвойса1,1) = "0" Цикл
			НомерИнвойса1 = Прав(НомерИнвойса1, СтрДлина(НомерИнвойса1)-1);
		КонецЦикла;
		Тикет = МассивТикетов[МассивТикетов.Количество()-1];
		НомерИнвойса2 = Сред(Тикет.SiebelOrder.LawsonInvoice,3);
		Пока Лев(НомерИнвойса2,1) = "0" Цикл
			НомерИнвойса2 = Прав(НомерИнвойса2, СтрДлина(НомерИнвойса2)-1);
		КонецЦикла;
		Имя = Префикс + " " + НомерИнвойса1 + "-" + НомерИнвойса2;
		СписокНомеров.Добавить(Имя);
	КонецЕсли;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//					  |	ВложенныйЗапрос.КостЦентр КАК AU
	//					  |ИЗ
	//					  |	(ВЫБРАТЬ
	//					  |		РеализацияТоваровУслугТовары.КостЦентр КАК КостЦентр
	//					  |	ИЗ
	//					  |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//					  |	ГДЕ
	//					  |		РеализацияТоваровУслугТовары.Ссылка = &Док
	//					  |	
	//					  |	ОБЪЕДИНИТЬ ВСЕ
	//					  |	
	//					  |	ВЫБРАТЬ
	//					  |		РеализацияТоваровУслугУслуги.КостЦентр
	//					  |	ИЗ
	//					  |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//					  |	ГДЕ
	//					  |		РеализацияТоваровУслугУслуги.Ссылка = &Док) КАК ВложенныйЗапрос");
	//Запрос.УстановитьПараметр("Док", Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда  
	Для каждого Элемент Из МассивКостЦентров Цикл
		
		Префикс = "SLI-" + Элемент + "-"+Прав(Год(Дата),1)+"I-";
		НомерДока = ПолучитьСледующийНомерДокумента(Префикс, Дата);
		ЛевЧастьНомераПослеПрефикса = ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(НомерДока,Префикс);
		//НомерДока = Префикс+Формат(Число("0"+ЛевЧастьНомераПослеПрефикса),"ЧЦ=3; ЧВН=; ЧГ=");
		Если СписокНомеров.НайтиПоЗначению(НомерДока) = Неопределено Тогда
			СписокНомеров.Добавить(НомерДока);
		КонецЕсли;
		
		Префикс = "SLI-YAL-"+Прав(Год(Дата),1)+"I-";
		НомерДока = ПолучитьСледующийНомерДокумента(Префикс, Дата);
		
		//Изменила Федотова Л., РГ-Софт, 26.08.15, вопрос SLI-0005709
		//СписокНомеров.Добавить(Префикс+Формат(Число("0"+Сред(НомерДока,СтрДлина(Префикс)+1)),"ЧЦ=4; ЧВН=; ЧГ="));
		Если СписокНомеров.НайтиПоЗначению(НомерДока) = Неопределено Тогда
			СписокНомеров.Добавить(НомерДока);
		КонецЕсли;
		
		Префикс = "SLI-RP1-"+Прав(Год(Дата),1)+"I-";
		НомерДока = ПолучитьСледующийНомерДокумента(Префикс, Дата);
		//Изменила Федотова Л., РГ-Софт, 26.08.15, вопрос SLI-0005709
		//СписокНомеров.Добавить(Префикс+Формат(Число("0"+Сред(НомерДока,СтрДлина(Префикс)+1)),"ЧЦ=3; ЧВН=; ЧГ="));
		Если СписокНомеров.НайтиПоЗначению(НомерДока) = Неопределено Тогда
			СписокНомеров.Добавить(НомерДока);
		КонецЕсли;
		
		//добавила Федотова Л., РГ-Софт, 07.08.14, вопрос SLI-0004789
		Префикс = "ICSLI-";
		НомерДока = ПолучитьСледующийНомерДокумента(Префикс, Дата);
		//Изменила Федотова Л., РГ-Софт, 26.08.15, вопрос SLI-0005709
		//СписокНомеров.Добавить(Префикс+Формат(Число("0"+Сред(НомерДока,СтрДлина(Префикс)+1)),"ЧЦ=4; ЧВН=; ЧГ="));
		Если СписокНомеров.НайтиПоЗначению(НомерДока) = Неопределено Тогда
			СписокНомеров.Добавить(НомерДока);
		КонецЕсли;
		
	КонецЦикла;
	Если НЕ Док = Неопределено Тогда
		НомерДока = Док.НомерСчетаНаОплату;	
		Если СписокНомеров.НайтиПоЗначению(НомерДока) = Неопределено Тогда
			СписокНомеров.Добавить(НомерДока);
		КонецЕсли;
	КонецЕсли;
	//Уберем пустые
	Колич = СписокНомеров.Количество();
	Для к = 1 По Колич Цикл
		Элемент = СписокНомеров[Колич - к];
		Если СокрЛП(Элемент.Значение) = "" Тогда
			СписокНомеров.Удалить(Элемент);
		КонецЕсли;
		Если СокрЛП(Элемент.Значение) = "-" Тогда
			СписокНомеров.Удалить(Элемент);
		КонецЕсли;
		Если СокрЛП(Элемент.Значение) = "/" Тогда
			СписокНомеров.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	//Уберем повторяющиеся
	Колич = СписокНомеров.Количество();
	СписокНомеровКопия = СписокНомеров.Скопировать();
	Для к = 1 По Колич Цикл
		Элемент = СписокНомеров[Колич - к];
		Если к <> Колич Тогда
			НайденДубль = Ложь;
			Для р = 0 По Колич - к - 1 Цикл
		        Если Элемент.Значение = СписокНомеровКопия[р].Значение Тогда
					НайденДубль = Истина;
					Прервать;
				КонецЕсли; 
		    КонецЦикла;
		КонецЕсли; 
		
		Если НайденДубль Тогда
			СписокНомеров.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНомеров;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСледующийНомерДокумента(Префикс, Дата)
	
	Запрос = Новый Запрос("ВЫБРАТЬ 
	|	РеализацияТоваровУслуг.Номер КАК Номер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)
	|	И РеализацияТоваровУслуг.Номер ПОДОБНО &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номер", Префикс + "%");
	
	МаксЧислоНомера = 0;
	// { RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
	МаксДлинаНомера = 0;
	// } RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Номер = СтрЗаменить(СокрЛП(Сред(Выборка.Номер,СтрДлина(Префикс)+1))," ","");
		ЧастьЦифры = "";
		// { RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
		ДлинаНомера = СтрДлина(Номер);
		// } RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
		Пока СтрДлина(Номер) > 0  Цикл
			ЛевЧасть = Лев(Номер,1);
			Если ЛевЧасть = "-" ИЛИ ЛевЧасть = "/" ИЛИ ЛевЧасть = "\" ИЛИ ЛевЧасть = "." Тогда
				Прервать;
			КонецЕсли; 
			Попытка
				ЧислоЛевЧасть = Число(ЛевЧасть);
				ЧастьЦифры = ЧастьЦифры + ЛевЧасть;
			Исключение
			КонецПопытки;
			Номер = Сред(Номер,2);	
		КонецЦикла; 
		ЧислоНомера = Число(ЧастьЦифры);
		Если ЧислоНомера > МаксЧислоНомера Тогда
		    МаксЧислоНомера = ЧислоНомера;
		КонецЕсли;
		// { RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
		Если ДлинаНомера > МаксДлинаНомера И ДлинаНомера <= 4 Тогда
			МаксДлинаНомера = ДлинаНомера;
		КонецЕсли;
		// } RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
	КонецЦикла;
	
	Если МаксЧислоНомера > 0 Тогда
		//Изменила Федотова Л., РГ-Софт, 26.08.15, вопрос SLI-0005709
		//Возврат Префикс+Формат(Число("0"+Сред(Номер,СтрДлина(Префикс)+1))+1,"ЧЦ=4; ЧВН=; ЧГ=");
		ЧислоНомераСтрока = СтрЗаменить(Строка(МаксЧислоНомера+1),Символы.НПП,""); 
		// { RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
		//Пока СтрДлина(ЧислоНомераСтрока) < СтрДлина(ЧислоНомераСтрока) Цикл
		//	ЧислоНомераСтрока = "0" + ЧислоНомераСтрока;
		//КонецЦикла;
		Если Дата >= Дата("20160101") Тогда // чтобы не дополнялись нулями документы в 2015 году и не сбить нумерацию
			Пока СтрДлина(ЧислоНомераСтрока) < МаксДлинаНомера Цикл
				ЧислоНомераСтрока = "0" + ЧислоНомераСтрока;
			КонецЦикла;
		КонецЕсли; 
		// } RGS EKoshkina 12.01.2016 15:44:07 - SLI-0006077
		
		Возврат Префикс + ЧислоНомераСтрока;
	Иначе
		Возврат Префикс + "0001";
	КонецЕсли; 

КонецФункции // ПолучитьСледующийНомерДокумента()

Функция ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(ДокНомер,Префикс)
	НомерПослеПрефикса = Сред(ДокНомер,СтрДлина(Префикс)+1);
	Сч = 0;
	ДлинаНомераПослеПрефикса = СтрДлина(НомерПослеПрефикса);
	ЛевЧастьНомераПослеПрефикса = НомерПослеПрефикса;
	ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей = ЛевЧастьНомераПослеПрефикса;
	ЧислоНулей = 0;
	Пока Сч < ДлинаНомераПослеПрефикса Цикл
		Сч = Сч + 1;                                                           
		ТекСимвол = Сред(НомерПослеПрефикса,Сч,1);
		Попытка
			Ч = Число(ТекСимвол);
			Если Ч = 0 Тогда
				ЧислоНулей = ЧислоНулей + 1;
			КонецЕсли;
		Исключение
			ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей = Число(Лев(НомерПослеПрефикса,Сч-1))+1;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	ЛевЧастьНомераПослеПрефикса = ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей;
	Для К = 1 По ЧислоНулей Цикл
		ЛевЧастьНомераПослеПрефикса = "0" + ЛевЧастьНомераПослеПрефикса;
	КонецЦикла;
	Возврат ЛевЧастьНомераПослеПрефикса; 
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////
// ДУМАТЬ!!!

//Добавил Демиденко Олег, РГ-Софт
//Пересчет регистра адресации (уведомление о КН)
Процедура ПересчитатьРегистр(Способ) Экспорт
	Если Способ Тогда  //Утверждают все
		
		Запрос = Новый запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	АдресацияУведомлений.АналитикаАдресации
		                      |ИЗ
		                      |	РегистрСведений.АдресацияУведомлений КАК АдресацияУведомлений");	
		ВыборкаИЦ=Запрос.Выполнить().Выбрать();
		Пока ВыборкаИЦ.Следующий() Цикл
			Запрос = Новый запрос("ВЫБРАТЬ
			                      |	АдресацияУведомлений.АналитикаАдресации
			                      |ИЗ
			                      |	РегистрСведений.АдресацияУведомлений КАК АдресацияУведомлений
			                      |ГДЕ
			                      |	АдресацияУведомлений.АналитикаАдресации = &АналитикаАдресации
			                      |	И АдресацияУведомлений.ПраваПользователя = &ПраваПользователя");
			Запрос.УстановитьПараметр("ПраваПользователя",Истина);
			Запрос.УстановитьПараметр("АналитикаАдресации",ВыборкаИЦ.АналитикаАдресации);
			Количество=Запрос.Выполнить().Выгрузить().Количество();
			НаборЗаписей = РегистрыСведений.АдресацияУведомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналитикаАдресации.Установить(ВыборкаИЦ.АналитикаАдресации);
			НаборЗаписей.Прочитать();
			Для каждого Запись из НаборЗаписей Цикл
				Запись.КоличествоУтверждающих=Количество;
			КонецЦикла;
			НаборЗаписей.Записать();				
		КонецЦикла;
		
	Иначе //Утверждает один
		Записи = РегистрыСведений.АдресацияУведомлений.СоздатьНаборЗаписей();
		Записи.Прочитать();
		Для Каждого Запись Из Записи Цикл
			Запись.КоличествоУтверждающих=1;
		КонецЦикла;
		Записи.Записать();
	КонецЕсли;  			
КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 12.11.12, вопрос №SLI-0002977
//(перенесла из обработки заполнения счета-фактуры выданного)
Функция ВернутьКПП(AU) Экспорт
	
	Если AU = Справочники.КостЦентры.НайтиПоКоду("2811420") Тогда
		КПП = "301751001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812038") Тогда
		КПП = "560351001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811426") Тогда
		КПП = "773851001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811414") Тогда
		КПП = "890651001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811412") Тогда
		КПП = "861951001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811437") Тогда
		КПП = "860351001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811415") Тогда
		КПП = "890551001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811421") Тогда
		КПП = "650151001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812045") Тогда
		КПП = "243751002";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811419") Тогда
		КПП = "720251001";
	ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811418") Тогда
		КПП = "110651001";
	ИначеЕсли ЗначениеЗаполнено(AU.TaxRegistration.КПП) Тогда
		КПП = AU.TaxRegistration.КПП;
	Иначе
		КПП = AU.TaxRegistration.Родитель.КПП;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции // ()
	
Функция ВернутьAU(СчетКнигиПокупок) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.AU КАК ПроводкаDSSAU
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.System = ""AP""
		|	И ПроводкаDSS.TaxCode ПОДОБНО ""%WHT""
		|	И ПроводкаDSS.Документ = &СчетКнигиПокупок";
		
	Запрос.УстановитьПараметр("СчетКнигиПокупок",СчетКнигиПокупок);	

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ПроводкаDSSAU;
	Иначе
		Возврат Справочники.КостЦентры.ПустаяСсылка();
	КонецЕсли;

КонецФункции

// { RGS MYurkevich 03.02.2015 15:02:51 - TP-00000694
Процедура РассчитатьСебестоимость (НачалоПериода, КонецПериода, СписокДокументов = Неопределено, Документ) Экспорт
	МассивПередач = Новый Массив();
	МассивРеализаций = Новый Массив();
	Если СписокДокументов <> Неопределено И СписокДокументов.Количество() > 0 Тогда
		Для Каждого Док Из СписокДокументов ЦИкл
			Если ТипЗнч(Док.Значение) = Тип("ДокументСсылка.ПередачаОС") Тогда
				МассивПередач.Добавить(Док.Значение);
			Иначе 
				МассивРеализаций.Добавить(Док.Значение);
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ЗначениеЗаполнено(Документ) Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда
			МассивПередач.Добавить(Документ);
		Иначе 
			МассивРеализаций.Добавить(Документ);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Если МассивПередач.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПередачаОС.ДатаПроведения КАК Период,
		|	ПередачаОСОС.КостЦентр КАК AU,
		|	ПередачаОС.Контрагент КАК Покупатель,
		|	ПередачаОСОС.ОсновноеСредство КАК Объект,
		|	ВЫБОР
		|		КОГДА ПередачаОС.СуммаВключаетНДС
		|			ТОГДА (ПередачаОСОС.Сумма - ПередачаОСОС.СуммаНДС) * ПередачаОС.КурсВзаиморасчетов
		|		ИНАЧЕ ПередачаОСОС.Сумма * ПередачаОС.КурсВзаиморасчетов
		|	КОНЕЦ КАК СтоимостьПродажи,
		|	ЗаявкиНаЗакупку.Ссылка КАК PO,
		|	ВЫБОР
		|		КОГДА ЗаявкиНаЗакупку.Поставщик ЕСТЬ NULL 
		|			ТОГДА ПередачаОСОС.ОсновноеСредство.Поставщик
		|		ИНАЧЕ ЗаявкиНаЗакупку.Поставщик
		|	КОНЕЦ КАК Поставщик,
		|	ПередачаОС.Ссылка КАК Регистратор,
		|	ПередачаОСОС.СтоимостьБУ - ПередачаОСОС.АмортизацияБУ - ПередачаОСОС.АмортизацияЗаМесяцБУ КАК Себестоимость
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
		|		ПО ПередачаОСОС.ОсновноеСредство.НомерЗаказаНаПриобретение = ЗаявкиНаЗакупку.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС КАК ПередачаОС
		|		ПО ПередачаОСОС.Ссылка = ПередачаОС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрСебестоимости КАК РегистрСебестоимости
		|		ПО ПередачаОСОС.Ссылка = РегистрСебестоимости.Регистратор
		|ГДЕ
		|	ПередачаОСОС.Ссылка В(&МассивПередач)
		|	И ВЫБОР
		|			КОГДА ЗаявкиНаЗакупку.Ссылка ЕСТЬ НЕ NULL 
		|				ТОГДА НЕ ЗаявкиНаЗакупку.ПометкаУдаления
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА РегистрСебестоимости.РучнаяКорректировка ЕСТЬ НЕ NULL 
		|				ТОГДА НЕ РегистрСебестоимости.РучнаяКорректировка
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|ИТОГИ ПО
		|	Регистратор";
		
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, ТекущаяДата()));
		Запрос.УстановитьПараметр("МассивПередач", МассивПередач);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НаборЗаписей = РегистрыНакопления.РегистрСебестоимости.СоздатьНаборЗаписей();
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
			Выборка = ВыборкаПоРегистратору.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.ДокументРеализации = Выборка.Регистратор;
			КонецЦикла;
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;	
	КонецЕсли;
	
	Если МассивРеализаций.Количество() > 0 Тогда
		
		ТаблицаЗаписей = Новый ТаблицаЗначений;
		ТаблицаЗаписей.Колонки.Добавить("Регистратор");
		ТаблицаЗаписей.Колонки.Добавить("PO");
		ТаблицаЗаписей.Колонки.Добавить("AU");
		ТаблицаЗаписей.Колонки.Добавить("Поставщик");
		ТаблицаЗаписей.Колонки.Добавить("Покупатель");
		ТаблицаЗаписей.Колонки.Добавить("Объект");
		ТаблицаЗаписей.Колонки.Добавить("ДокументРеализации");
		ТаблицаЗаписей.Колонки.Добавить("Себестоимость");
		ТаблицаЗаписей.Колонки.Добавить("СтоимостьПродажи");
		ТаблицаЗаписей.Колонки.Добавить("Период");

		ЗапросInventory = Новый Запрос;
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
	    ЗапросInventory.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросInventory.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура
		|	КОНЕЦ КАК Объект,
		|	РеализацияТоваровУслугТовары.КостЦентр КАК AU,
		|	РеализацияТоваровУслугТовары.СуммаБезНДСРуб КАК СтоимостьПродажи,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	InventoryBatchesОбороты.Batch,
		|	ЕСТЬNULL(InventoryBatchesОбороты.QuantityРасход * InventoryСписаниеGoods.UOM.ConversionFactor, 0) КАК КоличествоСписания,
		|	ЕСТЬNULL(InventoryBatchesОбороты.SumРасход, 0) КАК Себестоимость,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	InventoryBatchesОбороты.Batch.PO КАК PO,
		|	InventoryBatchesОбороты.Batch.PO.Поставщик КАК Поставщик,
		|	РеализацияТоваровУслугТовары.Ссылка.ДатаПроведения КАК Период,
		|	РеализацияТоваровУслугТовары.Ссылка.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслугТовары.Ссылка КАК ДокументРеализации,
		|	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор
		|ПОМЕСТИТЬ Inventory
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.InventoryBatches.Обороты(, , Регистратор, ) КАК InventoryBatchesОбороты
		|			ПО InventoryСписаниеGoods.Ссылка = InventoryBatchesОбороты.Регистратор
		|				И InventoryСписаниеGoods.Good = InventoryBatchesОбороты.Good
		|		ПО РеализацияТоваровУслугТовары.Ссылка = InventoryСписаниеGoods.Реализация
		|			И РеализацияТоваровУслугТовары.Номенклатура.Catalog = InventoryСписаниеGoods.Good.Catalog
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрСебестоимости КАК РегистрСебестоимости
		|		ПО (ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
		|					ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog = РегистрСебестоимости.Объект
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура = РегистрСебестоимости.Объект
		|			КОНЕЦ)
		|			И РеализацияТоваровУслугТовары.Ссылка = РегистрСебестоимости.Регистратор
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В(&Ссылка)
		|	И ВЫБОР
		|			КОГДА РегистрСебестоимости.РучнаяКорректировка ЕСТЬ НЕ NULL 
		|				ТОГДА НЕ РегистрСебестоимости.РучнаяКорректировка
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Inventory.Регистратор,
		|	Inventory.НомерСтроки
		|ПОМЕСТИТЬ СтрокиСInventory
		|ИЗ
		|	Inventory КАК Inventory
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Inventory.Объект,
		|	Inventory.AU,
		|	Inventory.СтоимостьПродажи,
		|	Inventory.Количество КАК Количество,
		|	Inventory.Batch,
		|	Inventory.КоличествоСписания КАК КоличествоСписания,
		|	Inventory.Себестоимость КАК Себестоимость,
		|	Inventory.НомерСтроки КАК НомерСтроки,
		|	Inventory.PO,
		|	Inventory.Поставщик,
		|	Inventory.Период,
		|	Inventory.Покупатель,
		|	Inventory.ДокументРеализации,
		|	Inventory.Регистратор КАК Регистратор
		|ИЗ
		|	Inventory КАК Inventory
		|ИТОГИ
		|	СРЕДНЕЕ(Количество),
		|	СУММА(КоличествоСписания),
		|	СУММА(Себестоимость)
		|ПО
		|	Регистратор,
		|	НомерСтроки";
		
		ЗапросInventory.УстановитьПараметр("Ссылка", МассивРеализаций);
		
		РезультатЗапроса = ЗапросInventory.Выполнить();
		ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НаборЗаписей = РегистрыНакопления.РегистрСебестоимости.СоздатьНаборЗаписей();
				
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
			ВыборкаПоСтроке = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСтроке.Следующий() Цикл
				Если ВыборкаПоСтроке.Количество = ВыборкаПоСтроке.КоличествоСписания Тогда
					Выборка = ВыборкаПоСтроке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если Выборка.Количество() = 1 Тогда
						Выборка.Следующий();
						Движение = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Движение, Выборка);
					Иначе
						ТаблицаЗаписей.Очистить();
						Пока Выборка.Следующий() Цикл
							НоваяСтрока = ТаблицаЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							СтоимостьПродажи = Выборка.СтоимостьПродажи;
						КонецЦикла;	
						КолонкаСумм = ТаблицаЗаписей.ВыгрузитьКолонку("Себестоимость");
						МассивРаспределения = УправлениеПроизводством.РаспределитьПропорционально(СтоимостьПродажи,КолонкаСумм);
						ТаблицаЗаписей.ЗагрузитьКолонку(МассивРаспределения, "СтоимостьПродажи");
						Для Каждого Запись Из ТаблицаЗаписей Цикл
							Движение = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Движение, Запись);
						КонецЦикла;	
					КонецЕсли;
				Иначе
					Выборка = ВыборкаПоСтроке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если Выборка.Количество() = 1 Тогда
						Выборка.Следующий();
						Движение = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Движение, Выборка);
						Движение.Себестоимость = ?(Выборка.КоличествоСписания = 0, 0, Выборка.Себестоимость * Выборка.Количество / Выборка.КоличествоСписания);
					Иначе
						ОсталосьСписать = ВыборкаПоСтроке.Количество;
						ТаблицаЗаписей.Очистить();
						Пока Выборка.Следующий() И ОсталосьСписать <> 0 Цикл
							Если ОсталосьСписать < Выборка.КоличествоСписания Тогда
								НоваяСтрока = ТаблицаЗаписей.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								НоваяСтрока.Себестоимость = ?(Выборка.КоличествоСписания = 0, 0, Выборка.Себестоимость * Выборка.Количество / Выборка.КоличествоСписания);
								ОсталосьСписать = 0;
							Иначе 
								НоваяСтрока = ТаблицаЗаписей.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								ОсталосьСписать = ОсталосьСписать - Выборка.КоличествоСписания;
							КонецЕсли;
							СтоимостьПродажи = Выборка.СтоимостьПродажи;
						КонецЦикла;
						КолонкаСумм = ТаблицаЗаписей.ВыгрузитьКолонку("Себестоимость");
						МассивРаспределения = УправлениеПроизводством.РаспределитьПропорционально(СтоимостьПродажи,КолонкаСумм);
						ТаблицаЗаписей.ЗагрузитьКолонку(МассивРаспределения, "СтоимостьПродажи");
						Для Каждого Запись Из ТаблицаЗаписей Цикл
							Движение = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Движение, Запись);
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;	

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиИнвойса.Ссылка КАК Инвойс,
		|	СтрокиИнвойса.КостЦентр,
		|	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
		|	РеализацияТоваровУслугТовары.КостЦентр КАК КостЦентрДокумента,
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата КАК Дата,
		|	РеализацияТоваровУслугТовары.НомерСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|			ПО СтрокиИнвойса.Ссылка = ЗакрытиеПоставкиСопоставление.СтрокаИнвойса
		|		ПО (ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog.Код ЕСТЬ НЕ NULL 
		|					ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog.Код = СтрокиИнвойса.КодПоИнвойсу
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Артикул = СтрокиИнвойса.КодПоИнвойсу
		|			КОНЕЦ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиСInventory КАК СтрокиСInventory
		|		ПО РеализацияТоваровУслугТовары.Ссылка = СтрокиСInventory.Регистратор
		|			И (НЕ РеализацияТоваровУслугТовары.НомерСтроки В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СтрокиСInventory.НомерСтроки
		|					ИЗ
		|						СтрокиСInventory))
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В(&МассивРеализаций)
		|	И ВЫБОР
		|			КОГДА ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата ЕСТЬ НЕ NULL 
		|				ТОГДА ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата <= РеализацияТоваровУслугТовары.Ссылка.Дата
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("МассивРеализаций", МассивРеализаций);
			
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаИнвойсов = РезультатЗапроса.Выгрузить();
		ТаблицаДок = ТаблицаИнвойсов.Скопировать(,"Регистратор, КостЦЕнтрДокумента, НомерСтроки");
		ТаблицаДок.Свернуть("Регистратор, КостЦЕнтрДокумента, НомерСтроки");
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("Инвойс", Новый ОписаниеТипов("СправочникСсылка.СтрокиИнвойса"));
		ИтоговаяТаблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
		ИтоговаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
		
		Для каждого Док Из ТаблицаДок Цикл
			ПараметрыОтбора = Новый Структура("КостЦЕнтрДокумента", Док.КостЦЕнтрДокумента);
			ПараметрыОтбора.Вставить("Регистратор", Док.Регистратор);
			ПараметрыОтбора.Вставить("НомерСтроки", Док.НомерСтроки);
			НайденныйСтроки = ТаблицаИнвойсов.НайтиСтроки(ПараметрыОтбора);
			Если НайденныйСтроки.Количество() > 0 Тогда
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныйСтроки[0]);
			Иначе
				ПараметрыОтбора = Новый Структура("Регистратор", Док.Регистратор);
				ПараметрыОтбора.Вставить("НомерСтроки", Док.НомерСтроки);
				СтрокиПоВсемКостЦЕнтрам = ТаблицаИнвойсов.НайтиСтроки(ПараметрыОтбора);
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПоВсемКостЦЕнтрам[0]);
			КонецЕсли;
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЗ.Регистратор КАК Документ,
		|	ТЗ.Инвойс,
		|   ТЗ.НомерСтроки
		|ПОМЕСТИТЬ СтрокиИнвойса
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиИнвойса.Документ КАК Регистратор,
		|	СтрокиИнвойса.Документ.ДатаПроведения КАК Период,
		|	СтрокиИнвойса.Документ.Контрагент КАК Покупатель,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog ЕСТЬ НЕ NULL
		|             И РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура
		|	КОНЕЦ КАК Объект,
		|	РеализацияТоваровУслугТовары.КостЦентр КАК AU,
		|	РеализацияТоваровУслугТовары.СуммаБезНДСРуб КАК СтоимостьПродажи,
		|	РеализацияТоваровУслугТовары.Количество КАК КоличествоРеализации,
		|	ЗаявкиНаЗакупку.Ссылка КАК PO,
		|	ЗаявкиНаЗакупку.Поставщик,
		|   ЕСТЬNULL(InvoiceLinesCostsОбороты.СуммаФискальнаяОборот, 0) КАК Себестоимость,
		|	ЕСТЬNULL(InvoiceLinesCostsОбороты.СтрокаИнвойса.ЕдиницаИзмерения.ConversionFactor * InvoiceLinesCostsОбороты.СтрокаИнвойса.Количество, 0) КАК Количество
		|ИЗ
		|	СтрокиИнвойса КАК СтрокиИнвойса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО СтрокиИнвойса.Документ.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|       И СтрокиИнвойса.НомерСтроки = РеализацияТоваровУслугТовары.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
		|		ПО СтрокиИнвойса.Инвойс.НомерЗаявкиНаЗакупку = ЗаявкиНаЗакупку.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.InvoiceLinesCosts.Обороты(, &КонецПериода, , ЭлементФормированияСтоимости <> ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняНДС)	
		|				                                                                          И SoldTo = &FiscalParentCompany) КАК InvoiceLinesCostsОбороты
		|		ПО СтрокиИнвойса.Инвойс = InvoiceLinesCostsОбороты.СтрокаИнвойса
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрСебестоимости КАК РегистрСебестоимости
		|		ПО СтрокиИнвойса.Документ.Ссылка = РегистрСебестоимости.Регистратор
		|ГДЕ
		|       ВЫБОР
		|			КОГДА РегистрСебестоимости.РучнаяКорректировка ЕСТЬ НЕ NULL 
		|				ТОГДА НЕ РегистрСебестоимости.РучнаяКорректировка
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|ИТОГИ ПО
		|	Регистратор";
		
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("ТЗ", ИтоговаяТаблица);
		Запрос.УстановитьПараметр("FiscalParentCompany", Константы.FiscalParentCompany.Получить());
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		НаборЗаписей = РегистрыНакопления.РегистрСебестоимости.СоздатьНаборЗаписей();
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
			Выборка = ВыборкаПоРегистратору.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.ДокументРеализации = Выборка.Регистратор;
				Если Выборка.Количество <> Выборка.КоличествоРеализации Тогда
					Запись.Себестоимость = ?(Выборка.Количество = 0, 0, Выборка.Себестоимость * Выборка.КоличествоРеализации/Выборка.Количество);
				Иначе
					Запись.Себестоимость = Выборка.Себестоимость;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.Записать(Ложь);
			НаборЗаписей.Очистить();
		КонецЦикла;			
				
	КонецЕсли;	
КонецПроцедуры	
// } RGS MYurkevich 03.02.2015 15:03:07 - TP-00000694