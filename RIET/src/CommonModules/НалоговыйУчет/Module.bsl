Процедура ОпределитьВидУчетаПоПБУ18(Значение, мВидУчета, ОтразитьНеПринимаемыеРасходы) Экспорт 
	 
			Если  НЕ Значение = Справочники.СтатьиЗатрат.ПустаяСсылка() И ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Значение.ЭтоГруппа Тогда
				
				Если Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
					мВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ОтразитьНеПринимаемыеРасходы = Истина;
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Значение.ЭтоГруппа Тогда
				
				Если НЕ Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Значение.ПринятиеКналоговомуУчету Тогда
					мВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ОтразитьНеПринимаемыеРасходы = Истина;
				КонецЕсли;
				
			КонецЕсли;
КонецПроцедуры

//Определяет вид учета для проводки по налоговому учету
Процедура ВидУчетаПоПБУ18(Проводка, ОтразитьНеПринимаемыеРасходы = Ложь, ПоддержкаПБУ18 = Ложь) Экспорт

	ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
	ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
    
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
           
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Или ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			
			Если Не ПоддержкаПБУ18 Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ1, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ2, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ3, ВидУчетаДт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Субконто Из Проводка.СубконтоКт Цикл

		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Или ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			
			Если Не ПоддержкаПБУ18 Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ1, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ2, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
			ОпределитьВидУчетаПоПБУ18(Субконто.Значение.СубконтоБУ3, ВидУчетаКт, ОтразитьНеПринимаемыеРасходы);
			Если ОтразитьНеПринимаемыеРасходы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Проводка.СчетДт) Тогда
		Проводка.ВидУчетаДт = ВидУчетаДт;
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Проводка.СчетКт) Тогда
		Проводка.ВидУчетаКт = ВидУчетаКт;
	КонецЕсли;

КонецПроцедуры // ВидУчетаПоПБУ18

Функция ОпределитьНеПринимаемыеДоходыРасходы(Проводка) Экспорт
	
	Если Проводка.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ПрочиеДоходы) Тогда
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
				
				Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
					Возврат  Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
			  	
	СписокСчетовКосвенныхРасходов = ПолучитьСчетаУчетаКосвенныхРасходов();
		
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			
			Если Субконто.Значение.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				
				// Расходы на стоительство объектов основных средств, не относятся к расходам по производству и реализации
				Если Проводка.СчетДт = ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств Или Проводка.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;

				ЭтоКосвенныйРасход = Ложь;
				
				Для Каждого Элемент Из СписокСчетовКосвенныхРасходов Цикл
					
					Если Проводка.СчетДт.ПринадлежитЭлементу(Элемент.Значение) Или Проводка.СчетДт = Элемент.Значение Тогда
						ЭтоКосвенныйРасход = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				Если НЕ ЭтоКосвенныйРасход Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указан счет отнесения непринимаемых расходов (" + Проводка.СчетДт + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к прямым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				ОтнесениеКЕНВД = Субконто.Значение.ОтнесениеРасходовКДеятельностиЕНВД;
				
				Если ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД,
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И Не Субконто.Значение.ЭтоГруппа Тогда
			
			Если НЕ Субконто.Значение = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И НЕ Субконто.Значение.ПринятиеКналоговомуУчету Тогда
								
				ОтнесениеКЕНВД = Субконто.Значение.ОтнесениеРасходовКДеятельностиЕНВД;
				
				Если ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД,
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Если ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Проводка " + Проводка.Содержание + ": неправильно указана статья затрат для непринимаемых расходов (" + ОтнесениеКЕНВД + ").
					                 |Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым
									 |- это не имеет смысла для расчета налоговой базы и не поддерживается программой.", Ложь, , СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;
				
				Возврат Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
	
Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт

	Отбор = Новый Структура("Организация", СтруктураШапкиДокумента.Организация);
	СтавкиНалога = РегистрыСведений.СтавкиНалогаНаПрибыль.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Отбор);
	
	СтавкаНалога = (СтавкиНалога.СтавкаФБ + СтавкиНалога.СтавкаСубъектРФ + СтавкиНалога.СтавкаМестный) / 100;
	
	СтавкаФБ        = СтавкиНалога.СтавкаФБ / 100;
	СтавкаРФ        = СтавкиНалога.СтавкаСубъектРФ / 100;
	СтавкаМестный   = СтавкиНалога.СтавкаМестный / 100;
	
	Возврат СтавкаНалога;

КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

Функция ПолучитьСчетаУчетаКосвенныхРасходов() Экспорт
	
	СчетаЗатрат = Новый СписокЗначений;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	
	Возврат СчетаЗатрат;
	
КонецФункции

// Расчет транспортных расходов, которые необходимо списать.
// 
Процедура РасчетТранспортныхРасходов(НачГраница,КонГраница,ТекОрганизация,ПланСчетов,ПараметрыСтруктура)  Экспорт

	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ТоварыНаСкладах);
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ТоварыВРозничнойТорговле);
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ТараПодТоваромИПорожняя);
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ПокупныеИзделия);
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ПокупныеТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ПокупныеТоварыОтгруженные);

	СписокКорСчетов = Новый Массив;
	СписокКорСчетов.Добавить(ПланыСчетов[ПланСчетов].СебестоимостьПродаж);

	Если ПланСчетов = "Хозрасчетный" Тогда
		СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетов.Добавить(ПланыСчетов[ПланСчетов].ТорговаяНаценка);
	КонецЕсли;

	// СКД41-СКК42+СКД45.01
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(РБОстатки.СуммаКонечныйОстаток) КАК ОстатокТовара,
	               |	СУММА(РБОстатки.СуммаНачальныйОстаток) КАК ОстатокТовараНач,
	               |	0 КАК ПриходТовара,
	               |	0 КАК РасходТовара
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |		&НачГраница,
	               |		&КонГраница,
	               |		,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета) КАК РБОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	НалоговыйОбороты.СуммаОборотДт,
	               |	НалоговыйОбороты.СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачГраница,
	               |		&КонГраница,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета,
	               |		(НЕ КорСчет В ИЕРАРХИИ (&Счет))
	               |		    И (НЕ КорСчет = &ПустойСчет),
	               |		) КАК НалоговыйОбороты";
				   
	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);             
	Запрос.УстановитьПараметр("Счет",        СписокСчетов);
	Запрос.УстановитьПараметр("ПустойСчет",  ПланыСчетов[ПланСчетов].ПустаяСсылка());
	
	Если ПланСчетов="Налоговый" Тогда
		Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Налоговый", "Хозрасчетный");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " И ВидУчета = &ВидУчета", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ОстатокТовара    = 0;
	ОстатокТовараНач = 0;
	ПриходТовара     = 0;
	РасходТовара     = 0;
	Пока РезультатЗапроса.Следующий() Цикл
		ОстатокТовара    = ОстатокТовара    + ?(РезультатЗапроса.ОстатокТовара    = Null, 0, РезультатЗапроса.ОстатокТовара);
		ОстатокТовараНач = ОстатокТовараНач + ?(РезультатЗапроса.ОстатокТовараНач = Null, 0, РезультатЗапроса.ОстатокТовараНач);
		ПриходТовара     = ПриходТовара     + ?(РезультатЗапроса.ПриходТовара     = Null, 0, РезультатЗапроса.ПриходТовара);
		РасходТовара     = РасходТовара     + ?(РезультатЗапроса.РасходТовара     = Null, 0, РезультатЗапроса.РасходТовара);
	КонецЦикла;
	ПараметрыСтруктура.НачОстатокТоваров = ОстатокТовараНач;
	ПараметрыСтруктура.КонОстатокТоваров = ОстатокТовара;
	ПараметрыСтруктура.ПриходТовара      = ПриходТовара;

	Если ПланСчетов = "Хозрасчетный" Тогда

		// ДО(90.02,41)-ДО(90.02,42)+ДО(90.02,45.01);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|РБОбороты.СуммаОборот КАК СтоимостьРеализаванныхТоваров,
		|0                     КАК СтоимостьРеализаванныхТоваровЕНВД
		|ИЗ	
		|РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница,&КонГраница, ,Счет В ИЕРАРХИИ (&Счет), , (Организация = &Организация), КорСчет В ИЕРАРХИИ (&КорСчет),) КАК РБОбороты";

	Иначе // расчет транспортных расходов для целей налогового учета
		//  ДО(90.02,41)-ДО(90.02,42)+ДО(90.02,45.01);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетПВ",      ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УсловияПоступленияИВыбытия);
		Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
		Запрос.УстановитьПараметр("Субконто",    Перечисления.УсловияПоступленияИВыбытияИмущества.НеОблагается);
		Запрос.Текст = "ВЫБРАТЬ
		|РБОбороты.СуммаОборот  КАК СтоимостьРеализаванныхТоваров,
		|0                      КАК СтоимостьРеализаванныхТоваровЕНВД
		|ИЗ	
		|РегистрБухгалтерии.Налоговый.Обороты(&НачГраница,&КонГраница, , Счет В ИЕРАРХИИ (&Счет),, (Организация = &Организация) И (ВидУчета = &ВидУчета), КорСчет В ИЕРАРХИИ (&КорСчет),) КАК РБОбороты
		|
		| Объединить Все
		|
		|ВЫБРАТЬ   // 	ДО(ПВ) 	
		|
		|0                         КАК СтоимостьРеализаванныхТоваров,
		|РБОборотыПВ.СуммаОборотДт КАК СтоимостьРеализаванныхТоваровЕНВД
		|ИЗ	
		|РегистрБухгалтерии.Налоговый.Обороты(&НачГраница,&КонГраница, , Счет = &СчетПВ,, (Организация = &Организация) И (ВидУчета = &ВидУчета) И (Субконто1 = &Субконто), КорСчет В ИЕРАРХИИ (&КорСчет),) КАК РБОборотыПВ";

	КонецЕсли; // Если ПланСчетов = "Хозрасчетный" Тогда

	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Счет",        СписокКорСчетов);
	Запрос.УстановитьПараметр("КорСчет",     СписокСчетов);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	СуммаРеализованныхТоваров     = 0;
	СуммаРеализованныхТоваровЕНДВ = 0;

	Пока РезультатЗапроса.Следующий() Цикл
		СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров     + ?(РезультатЗапроса.СтоимостьРеализаванныхТоваров = Null, 0, РезультатЗапроса.СтоимостьРеализаванныхТоваров);
		СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ + ?(РезультатЗапроса.СтоимостьРеализаванныхТоваровЕНВД = Null, 0, РезультатЗапроса.СтоимостьРеализаванныхТоваровЕНВД);
	КонецЦикла;

	ПараметрыСтруктура.СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров;
	ПараметрыСтруктура.СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ; 
	СтоимостьРеализаванныхТоваров                    = СуммаРеализованныхТоваров + СуммаРеализованныхТоваровЕНДВ;
	Списано = РасходТовара - СтоимостьРеализаванныхТоваров;

	Если СтоимостьРеализаванныхТоваров + ОстатокТовара = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;
		ПараметрыСтруктура.СреднийПроцент         = 0;
		Возврат;
	КонецЕсли;

	ПараметрыСтруктура.СреднийПроцент = ОКР(ПараметрыСтруктура.СуммаРасходов / (СтоимостьРеализаванныхТоваров+ОстатокТовара),8);

	Если СтоимостьРеализаванныхТоваров  = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;
		Возврат; 
	КонецЕсли;

	ПараметрыСтруктура.СуммаРасходовКсписанию = ПараметрыСтруктура.СуммаРасходов-ОКР(ПараметрыСтруктура.СреднийПроцент*ОстатокТовара,2);

КонецПроцедуры // РасчетТранспортныхРасходов()

// Процедура расчета временных разниц, возникающих при установке разных способов списания активов в БУ и в НУ
//
Процедура РасчетВременныхРазницПриРазныхСпособахСписанияАктива(СтруктураШапкиДокумента, Склад, ТаблицаДокумента, ТаблицаПроводокБУ, ТаблицаПроводокНУ, ПроводкиНУ) Экспорт
		
	ТаблицаДокумента.Свернуть("Номенклатура, СчетУчетаБУ, СчетУчетаНУ");
	Для Каждого СтрокаТД Из ТаблицаДокумента Цикл
		ВыборкаБУ = ТаблицаПроводокБУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт1", СтрокаТД.СчетУчетаБУ, СтрокаТД.Номенклатура));
		Если ВыборкаБУ.Количество() = 0 Тогда
			ВыборкаБУ = ТаблицаПроводокБУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт2", СтрокаТД.СчетУчетаБУ, СтрокаТД.Номенклатура));
		КонецЕсли;
		Если ВыборкаБУ.Количество() = 0 Тогда
			ВыборкаБУ = ТаблицаПроводокБУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт3", СтрокаТД.СчетУчетаБУ, СтрокаТД.Номенклатура));
		КонецЕсли;
		СуммаСписанияБУ = 0;
		Для Каждого СтрокаВыборки Из ВыборкаБУ Цикл
			СуммаСписанияБУ = СуммаСписанияБУ + СтрокаВыборки.Сумма;
		КонецЦикла;
		
		
		ВыборкаНУ = ТаблицаПроводокНУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт1", СтрокаТД.СчетУчетаНУ, СтрокаТД.Номенклатура));
		Если ВыборкаНУ.Количество() = 0 Тогда
			ВыборкаНУ = ТаблицаПроводокНУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт2", СтрокаТД.СчетУчетаНУ, СтрокаТД.Номенклатура));
		КонецЕсли;
		Если ВыборкаНУ.Количество() = 0 Тогда
			ВыборкаНУ = ТаблицаПроводокНУ.НайтиСтроки(Новый Структура("СчетКт,СубконтоКт3", СтрокаТД.СчетУчетаНУ, СтрокаТД.Номенклатура));
		КонецЕсли;
		СуммаСписанияНУ = 0;
		Для Каждого СтрокаВыборки Из ВыборкаНУ Цикл
			СуммаСписанияНУ = СуммаСписанияНУ + СтрокаВыборки.Сумма;
			ВидСубконтоДт1 = СтрЗаменить(Строка(СтрокаВыборки.ВидСубконтоДт1), " ", "");
			ВидСубконтоДт2 = СтрЗаменить(Строка(СтрокаВыборки.ВидСубконтоДт2), " ", "");
			ВидСубконтоДт3 = СтрЗаменить(Строка(СтрокаВыборки.ВидСубконтоДт3), " ", "");
			Субконто1 =  СтрокаВыборки.СубконтоДт1;
			Субконто2 =  СтрокаВыборки.СубконтоДт2;
			Субконто3 =  СтрокаВыборки.СубконтоДт3;
			СчетДт = СтрокаВыборки.СчетДт;
		КонецЦикла;
		Разница = СуммаСписанияБУ - СуммаСписанияНУ;
		Если Разница <= 0.05 И Разница >= -0.05 Тогда
			Разница = 0;
		КонецЕсли;
		
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Врем.разн. при разных способах списания активов в БУ и в НУ";
		Проводка.Сумма       = Разница;
		
		Проводка.СчетДт = СчетДт;
		
			
		Если ВидСубконтоДт1 <> "" Тогда
			Если ВидСубконтоДт1 <> "Партии"  Тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, ВидСубконтоДт1, Субконто1);
			КонецЕсли;
		КонецЕсли;
		
		Если  ВидСубконтоДт2 <> "" Тогда
			Если ВидСубконтоДт2 <> "Партии"  Тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, ВидСубконтоДт2, Субконто2);
			КонецЕсли;
			
		КонецЕсли;
		Если ВидСубконтоДт3 <> "" Тогда
			Если ВидСубконтоДт3 <> "Партии"  Тогда			
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, ВидСубконтоДт3, Субконто3);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТД.СчетУчетаНУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Номенклатура", СтрокаТД.Номенклатура);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Склады", Склад);
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
		
	КонецЦикла;					
КонецПроцедуры
	
// Выполняет расчет постоянных и временных разниц в оценке амортизации имущества
//
Процедура РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, Актив, Объект, мПроводкиНУ) Экспорт
	
	Если Актив = "ОС" Тогда
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
		СчетУчетаБУ       = Массив;
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
		СчетУчетаНУ       = Массив;
		СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств;
		СчетАмортизацииНУ = ПланыСчетов.Налоговый.АмортизацияОсновныхСредств;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Объект) Тогда
		ОбъектЕсть = Ложь;
	Иначе
		ОбъектЕсть = Истина;
	КонецЕсли;
	
	мНачДата    = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1 КАК ОбъектУчета,
	               |	ХозрасчетныйОбороты.КорСчет КАК СчетЗатрат,
	               |	ХозрасчетныйОбороты.Счет КАК СчетАмортизации,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто1 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто1
	               |	КОНЕЦ КАК Субконто1,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто2 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто2
	               |	КОНЕЦ КАК Субконто2,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL 
	               |			ТОГДА НЕОПРЕДЕЛЕНО
	               |		ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3
	               |	КОНЕЦ КАК Субконто3,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&Счет02БУ), &ВидСубконто, Организация = &Организация" + ?(ОбъектЕсть, " И Субконто1 В (&Объект)", "") + ", , ) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ХозрасчетныйОбороты.КорСчет,
	               |	ХозрасчетныйОбороты.Счет,
	               |	ХозрасчетныйОбороты.КорСубконто1,
	               |	ХозрасчетныйОбороты.КорСубконто2,
	               |	ХозрасчетныйОбороты.КорСубконто3";
	
	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Если Актив = "ОС" Тогда
		Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет02БУ",   СчетАмортизацииБУ);
	Запрос.УстановитьПараметр("Объект",   Объект);
	РезультатЗапроса = Запрос.Выполнить();  
	ТаблицаЗатрат = РезультатЗапроса.Выгрузить();
	ТаблицаЗатрат.Колонки.Добавить("СуммаНУ");
	ТаблицаЗатрат.Колонки.Добавить("Счет02");
	
	мКэшСчетов = Новый Соответствие; 
	Для Каждого СтрокаАмортизация Из ТаблицаЗатрат Цикл
		СчетНУСоответствующийСчетуБУ = мКэшСчетов[СтрокаАмортизация.СчетАмортизации];
		Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаАмортизация.СчетАмортизации), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
			мКэшСчетов.Вставить(СтрокаАмортизация.СчетАмортизации, СчетНУСоответствующийСчетуБУ);
		КонецЕсли;
		//СтрокаАмортизация.Счет02 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаАмортизация.СчетАмортизации), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
		СтрокаАмортизация.Счет02 = СчетНУСоответствующийСчетуБУ;
	КонецЦикла;
	
	Для Каждого СтрокаТабЗатрат Из ТабЗатрат Цикл
		СтрокаАмортизация = ТаблицаЗатрат.Добавить();
		СтрокаАмортизация.ОбъектУчета = СтрокаТабЗатрат.ОбъектУчета;
		СтрокаАмортизация.СчетЗатрат = СтрокаТабЗатрат.СчетЗатрат;
		СтрокаАмортизация.Счет02 = СтрокаТабЗатрат.СчетАмортизацииНУ;
		СтрокаАмортизация.Субконто1 = СтрокаТабЗатрат.Субконто1;
		СтрокаАмортизация.Субконто2 = СтрокаТабЗатрат.Субконто2;
		СтрокаАмортизация.Субконто3 = СтрокаТабЗатрат.Субконто3;
		СтрокаАмортизация.СуммаНУ = СтрокаТабЗатрат.Сумма;
	КонецЦикла;
	 ТаблицаЗатрат.Свернуть("ОбъектУчета,СчетЗатрат,Счет02,Субконто1,Субконто2,Субконто3","Сумма,СуммаНУ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	               |	0 КАК Сумма01БУ,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Сумма01НУ,
	               |	0 КАК Сумма01ПР,
	               |	0 КАК Сумма02
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		 И ВидУчета = &ВидУчетаНУ
				   |" + ?(ОбъектЕсть, " 
				   |        И Субконто1  В (&Объект)", "") + ") КАК НалоговыйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт),
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
				   |	&КонДата, 
				   |	Счет В ИЕРАРХИИ (&Счет01БУ),
				   |	&ВидСубконто, 
				   |	Организация = &Организация
				   |	" + ?(ОбъектЕсть, " И
	               |	Субконто1  В (&Объект)", "") + ") КАК НалоговыйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт),
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		И ВидУчета = &ВидУчетаПр
				   |" + ?(ОбъектЕсть, "
	               |	    И Субконто1  В (&Объект)", "") + ") КАК НалоговыйОстатки
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачДата,
	               |		&КонДата,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет02НУ),
	               |		&ВидСубконто,
	               |		Организация = &Организация
				   |" + ?(ОбъектЕсть, "
	               |	    И Субконто1  В (&Объект)", "") + "
	               |		,
	               |		) КАК НалоговыйОбороты
	               |
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1";
	
	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	
	Если ОбъектЕсть Тогда
		мКонДата = Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая);
    КонецЕсли;
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",   Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР", Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("Счет01НУ",   СчетУчетаНУ);	
	Запрос.УстановитьПараметр("Счет01БУ",   СчетУчетаБУ);	
	Запрос.УстановитьПараметр("Счет02НУ",   СчетАмортизацииНУ);
	Запрос.УстановитьПараметр("Объект",   Объект);
	Если Актив = "ОС" Тогда
		Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ТаблицаОС = РезультатЗапроса.Выгрузить();
	ТаблицаОС.Свернуть("Субконто1", "Сумма01БУ, Сумма01НУ, Сумма01ПР, Сумма02");
	
	мКэшСчетов = Новый Соответствие; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл
		
		// Если амортизация по НУ и по БУ совпадает, разниц нет
				Если СтрокаТаблицы.СУмма = СтрокаТаблицы.СУммаНУ Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОС = ТаблицаОС.Найти(СтрокаТаблицы.ОбъектУчета,"Субконто1");
				
				Если СтрокаТаблицыОС = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Амортизация по НУ уже была начислена ранее она равна амортизации по БУ
				Если СтрокаТаблицыОС.Сумма02 <> 0 И СтрокаТаблицыОС.Сумма02 = СтрокаТаблицы.Сумма Тогда
					Продолжить;
				КонецЕсли;
				
				Сумма01ВР = СтрокаТаблицыОС.Сумма01БУ - СтрокаТаблицыОС.Сумма01НУ - СтрокаТаблицыОС.Сумма01ПР;
				Если СтрокаТаблицыОС.Сумма01НУ = 0 И СтрокаТаблицыОС.Сумма01ПР = 0 И Сумма01ВР = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийПериод = ПредставлениеПериода(НачалоМесяца(СтруктураШапкиДокумента.Дата), КонецМесяца(СтруктураШапкиДокумента.Дата));
				//СчетЗатрат    = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТаблицы.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
					Сообщить("Расчет разниц в оценке амортизации объекта " + СтрокаТаблицы.ОбъектУчета + " невозможен, т.к. не указан счет учета расходов по амортизации в бухгалтерском учете");
					Продолжить;
				КонецЕсли;
				
				СчетНУСоответствующийСчетуБУ = мКэшСчетов[СтрокаТаблицы.СчетЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТаблицы.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);;
					мКэшСчетов.Вставить(СтрокаТаблицы.СчетЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;
				СчетЗатрат = СчетНУСоответствующийСчетуБУ;
				
				СчетАмортизации = СтрокаТаблицы.Счет02;
				
				// Особый случай: в БУ амортизация не начисляется или приостановлена, временные разницы 
				// равны сумме амортизации по НУ
				
				Если СтрокаТаблицы.СУмма = 0 И СтрокаТаблицы.СУммаНУ <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
					ПроводкаНУ.Сумма        = - СтрокаТаблицы.СУммаНУ;
					ПроводкаНУ.Содержание   = "Временные разницы за " + ТекущийПериод;
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
					ПроводкаНУ.НомерЖурнала = "ВР";
					Продолжить;
				КонецЕсли;
								
				// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
				// амортизация по ПР, начисленная по способу амортизации БУ
					СуммаПР = Окр((?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * СтрокаТаблицыОС.Сумма01ПР, 2);
					
				// временная разница в оценке амортизации, возникшая вследствие временной разницы в оценке ОС
				// амортизация по ВР, начисленная по способу амортизации БУ
					СуммаВР1 = (?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицыОС.Сумма01БУ), СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ, 0)) * Сумма01ВР;
					
				// временная разница в оценке амортизации, возникшая вследствие разных способов начисления амортизации по НУ и БУ	
				    СуммаВР2 = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ - СуммаПР - СуммаВР1 - СтрокаТаблицыОС.Сумма02;
					
					СуммаВР = Окр(СуммаВР1 + СуммаВР2, 2);
					
				// Особый случай: если амортизация относится к не принимаемым расходам, то 
				// все разницы будут постоянными, кроме тех, которые возникли из-за временной разницы в стоимости ОС
				мВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ;
				ЭтоНеПринимаемыеРасходы1 = Ложь;
				ЭтоНеПринимаемыеРасходы2 = Ложь;
				ЭтоНеПринимаемыеРасходы3 = Ложь;
				ОпределитьВидУчетаПоПБУ18(СтрокаТаблицы.Субконто1, мВидУчета, ЭтоНеПринимаемыеРасходы1);
				ОпределитьВидУчетаПоПБУ18(СтрокаТаблицы.Субконто2, мВидУчета, ЭтоНеПринимаемыеРасходы2);
				ОпределитьВидУчетаПоПБУ18(СтрокаТаблицы.Субконто3, мВидУчета, ЭтоНеПринимаемыеРасходы3);
				ЭтоНеПринимаемыеРасходы = ЭтоНеПринимаемыеРасходы1 + ЭтоНеПринимаемыеРасходы2 + ЭтоНеПринимаемыеРасходы3;
				
				Если ЭтоНеПринимаемыеРасходы Тогда
					 СуммаПР = СуммаПР + СуммаВР2;
					 СуммаВР = СуммаВР1;
				 КонецЕсли;
				 СуммаПР = Окр(СуммаПР, 2);
				 СуммаВР = Окр(СуммаВР, 2);
				
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетАмортизации) Тогда
						Продолжить;
					КонецЕсли;
				
				Если СуммаПР <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
					ПроводкаНУ.Сумма        = СуммаПР;
					ПроводкаНУ.Содержание   = "Постоянные разницы за " + ТекущийПериод;
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
					ПроводкаНУ.НомерЖурнала = "ПР";
				КонецЕсли;
				Если СуммаВр <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
					ПроводкаНУ.Сумма        = СуммаВр;
					ПроводкаНУ.Содержание   = "Временные разницы за " + ТекущийПериод;
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
					ПроводкаНУ.НомерЖурнала = "ВР";
				КонецЕсли;
			КонецЦикла;
мПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

//Выполняет сопоставление данных по указанному счету БУ и указанному счету НУ
// с учетом указанных фильтров. В случае обнаружения не соответстсвия создает
// проводки по ВР так, чтобы соблюдалолсь правило БУ = НУ + ПР + ВР.
Процедура СопоставитьБУиНУиОтразитьВременныеРазницы(СтруктураШапкиДокумента, СчетБУ, СчетНУ, ТекстДопУсловия, ДопУсловие, мПроводкиНУ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстДопУсловия) Тогда
		ДопУсловиеЕсть = Ложь;
	Иначе
		ДопУсловиеЕсть = Истина;
	КонецЕсли;
	              
Запрос = Новый Запрос;
Запрос.Текст =	"ВЫБРАТЬ
              	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
              	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
              	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
              	|	ХозрасчетныйОбороты.СуммаОборот КАК ОборотБУ,
              	|	0 КАК ОборотНУ
              	|ИЗ
              	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет = &СчетБУ, , Организация = &Организация" + ?(ДопУсловиеЕсть, ТекстДопУсловия + "&ДопУсловие", "") + ", , ) КАК ХозрасчетныйОбороты
              	|
              	|ОБЪЕДИНИТЬ ВСЕ
              	|
              	|ВЫБРАТЬ
              	|	НалоговыйОбороты.Субконто1,
              	|	НалоговыйОбороты.Субконто2,
              	|	НалоговыйОбороты.Субконто3,
              	|	0,
              	|	НалоговыйОбороты.СуммаОборот
              	|ИЗ
              	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет = &СчетНУ, , Организация = &Организация" + ?(ДопУсловиеЕсть, ТекстДопУсловия + "&ДопУсловие", "") + ", , ) КАК НалоговыйОбороты
              	|ИТОГИ
              	|	СУММА(ОборотБУ),
              	|	СУММА(ОборотНУ)
              	|ПО
              	|	Субконто1,
              	|	Субконто2,
              	|	Субконто3";

	Запрос.УстановитьПараметр("НачалоПериода",  НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонецПериода",   КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетБУ",   СчетБУ);
	Запрос.УстановитьПараметр("СчетНУ",   СчетНУ);
	Запрос.УстановитьПараметр("ДопУсловие",ДопУсловие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выгрузить();   
	Для Каждого СтрокаВыборки Из Выборка Цикл
		Разница = СтрокаВыборки.ОборотБУ - СтрокаВыборки.ОборотНУ;
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПроводкаНУ = мПроводкиНУ.Добавить();
		ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
		ПроводкаНУ.Активность   = Истина;
		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.СчетДт       = СчетНУ;
		Если СтрокаВыборки.Субконто1 <> Неопределено Тогда
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаВыборки.Субконто1);
		КонецЕсли;
		Если СтрокаВыборки.Субконто2 <> Неопределено Тогда
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаВыборки.Субконто2);
		КонецЕсли;
		Если СтрокаВыборки.Субконто3 <> Неопределено Тогда
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаВыборки.Субконто3);
		КонецЕсли;
		ПроводкаНУ.Сумма        = Разница;
		ПроводкаНУ.Содержание   = "";
		ПроводкаНУ.НомерЖурнала = "НУ";
		ПроводкаНУ.ВидУчетаДТ     = Перечисления.ВидыУчетаПоПБУ18.ВР;
	КонецЦикла;
	
КонецПроцедуры

Функция ПереводСоСчетаКосвенныхЗатратНаСчетПрямыхЗатрат(СчетКосвенныхЗатрат, ДиректКостинг) Экспорт
	Если  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства;
		
	ИначеЕсли  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств;
		
	ИначеЕсли  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
		
	ИначеЕсли  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы И Не ДиректКостинг Тогда	
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
		
	ИначеЕсли  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
		
	ИначеЕсли  СчетКосвенныхЗатрат =  ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств;
	Иначе
		СчетПрямыхЗатрат = СчетКосвенныхЗатрат;
	КонецЕсли;
	Возврат СчетПрямыхЗатрат;
КонецФункции
		
// Выполняет соспоставление оборотов списка "СчетаБУ" и списка "СчетаНУ" по каждому субконто
// на выявленные разницы создает проводки по ВР
// Необходима для выявления разниц, возникающих от:
//-  применения разных баз распредления косвенных расходов в БУ и в НУ
//-  отнесения траспортных расходов на стоимость товаров в БУ и на затраты в НУ
// - в другое
Процедура РасчетРазницВОборотахСчета(СтруктураШапкиДокумента, мПроводкиНУ, Содержание, ДиректКостинг) Экспорт
	
		СписокСчетовБУ = Новый Массив;
		СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СписокСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		СписокСчетовНУ = Новый Массив;
		СписокСчетовНУ.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
		СписокСчетовНУ.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
		СписокКорСчетовБУ = Новый Массив;
		СписокКорСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		СписокКорСчетовБУ.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СписокКорСчетовНУ = Новый Массив;
		СписокКорСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		СписокКорСчетовНУ.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);

	мНачДата    = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Счет КАК СчетБУ,
	               |	ХозрасчетныйОбороты.КорСчет КАК КорСчетБУ,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) КАК КорСубконто1,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) КАК КорСубконто2,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, НЕОПРЕДЕЛЕНО) КАК КорСубконто3,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&СчетБУ), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&КорСчетБУ),) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Счет,
	               |	ХозрасчетныйОбороты.КорСчет,
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, НЕОПРЕДЕЛЕНО)";

	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетБУ",     СписокСчетовБУ);
	Запрос.УстановитьПараметр("КорСчетБУ",  СписокКорСчетовБУ);
	
	РезультатЗапроса = Запрос.Выполнить();  
	ТаблицаСравнения = РезультатЗапроса.Выгрузить();
	ТаблицаСравнения.Колонки.Добавить("СуммаНУ");
	ТаблицаСравнения.Колонки.Добавить("Счет");
	ТаблицаСравнения.Колонки.Добавить("КорСчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет КАК Счет,
	               |	НалоговыйОбороты.КорСчет,
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) КАК КорСубконто1,
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) КАК КорСубконто2,
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто3, НЕОПРЕДЕЛЕНО) КАК КорСубконто3,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&СчетНУ), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&КорСчетНУ)) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.КорСчет,
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто1, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто2, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(НалоговыйОбороты.Субконто3, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(НалоговыйОбороты.КорСубконто3, НЕОПРЕДЕЛЕНО)";

	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетНУ",     СписокСчетовНУ);
	Запрос.УстановитьПараметр("КорСчетНУ",  СписокКорСчетовНУ);
	
	РезультатЗапроса = Запрос.Выполнить();  
	ТаблицаНУ = РезультатЗапроса.Выгрузить();
	
	мКэшСчетов = Новый Соответствие;
	мКэшКорСчетов = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из ТаблицаСравнения Цикл
		
		    СписокСубконто = Новый Массив;
			СписокСубконто.Добавить(СтрокаТаблицы.Субконто3);
			СписокСубконто.Добавить(СтрокаТаблицы.Субконто2);
			СписокСубконто.Добавить(СтрокаТаблицы.Субконто1);
			
            ВидЗатрат = ОпределитьВидЗатрат(СписокСубконто);
			СтруктураСчетаВКэше = мКэшСчетов[СтрокаТаблицы.СчетБУ];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТаблицы.СчетБУ, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов[СтрокаТаблицы.СчетБУ] = Новый Соответствие;
				мКэшСчетов[СтрокаТаблицы.СчетБУ].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТаблицы.СчетБУ, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
		СтрокаТаблицы.Счет = СчетНУСоответствующийСчетуБУ;
		СтрокаТаблицы.Счет = ПереводСоСчетаКосвенныхЗатратНаСчетПрямыхЗатрат(СтрокаТаблицы.Счет, ДиректКостинг);
			
		    СписокСубконто = Новый Массив;
			СписокСубконто.Добавить(СтрокаТаблицы.КорСубконто3);
			СписокСубконто.Добавить(СтрокаТаблицы.КорСубконто2);
			СписокСубконто.Добавить(СтрокаТаблицы.КорСубконто1);
			
            ВидЗатрат = ОпределитьВидЗатрат(СписокСубконто);
			СтруктураКорСчетаВКэше = мКэшКорСчетов[СтрокаТаблицы.КорСчетБУ];
			Если СтруктураКорСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТаблицы.КорСчетБУ, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
				мКэшКорСчетов[СтрокаТаблицы.КорСчетБУ] = Новый Соответствие;
				мКэшКорСчетов[СтрокаТаблицы.КорСчетБУ].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураКорСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТаблицы.КорСчетБУ, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					СтруктураКорСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
		СтрокаТаблицы.КорСчет = СчетНУСоответствующийСчетуБУ;
		СтрокаТаблицы.КорСчет = ПереводСоСчетаКосвенныхЗатратНаСчетПрямыхЗатрат(СтрокаТаблицы.КорСчет, ДиректКостинг);
			
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНУ Цикл	
		СтрокаТаблицыСравнения = ТаблицаСравнения.Добавить();
		СтрокаТаблицыСравнения.Счет = СтрокаТаблицы.Счет;
		СтрокаТаблицыСравнения.КорСчет = СтрокаТаблицы.КорСчет;
		СтрокаТаблицыСравнения.Субконто1 = СтрокаТаблицы.Субконто1;
		СтрокаТаблицыСравнения.Субконто2 = СтрокаТаблицы.Субконто2;
		СтрокаТаблицыСравнения.Субконто3 = СтрокаТаблицы.Субконто3;
		СтрокаТаблицыСравнения.КорСубконто1 = СтрокаТаблицы.КорСубконто1;
		СтрокаТаблицыСравнения.КорСубконто2 = СтрокаТаблицы.КорСубконто2;
		СтрокаТаблицыСравнения.КорСубконто3 = СтрокаТаблицы.КорСубконто3;
		СтрокаТаблицыСравнения.СуммаНУ = СтрокаТаблицы.Сумма;
	КонецЦикла;
	ТаблицаСравнения.Свернуть("Счет, КорСчет, Субконто1, Субконто2, Субконто3, КорСубконто1, КорСубконто2, КорСубконто3", "Сумма, СуммаНУ"); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаСравнения Цикл
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.Счет) И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			Продолжить;
		КонецЕсли;

			СуммаВр = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ;
			Если СуммаВр <> 0 Тогда
				ПроводкаНУ              = мПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетКт       = СтрокаТаблицы.Счет; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.Субконто1); 
				Если СтрокаТаблицы.Субконто2 <> Неопределено Тогда
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.Субконто2); 
				КонецЕсли;
				Если СтрокаТаблицы.Субконто3 <> Неопределено Тогда
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.Субконто3); 
				КонецЕсли;

				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = СуммаВр;
				ПроводкаНУ.Содержание   = Содержание;
				ПроводкаНУ.СчетДт       = СтрокаТаблицы.КорСчет; 
				Если СтрокаТаблицы.КорСубконто1 <> Неопределено Тогда
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);  
				КонецЕсли;
				Если СтрокаТаблицы.КорСубконто2 <> Неопределено Тогда
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2); 
				КонецЕсли;
				Если СтрокаТаблицы.КорСубконто3 <> Неопределено Тогда
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
				КонецЕсли;
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
		КонецЦикла;
мПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

Функция ОпределитьВидЗатрат(Список) Экспорт
	
	Для Индекс = 0 По Список.Количество() - 1 Цикл
		ТекущееЗначение = Список.Получить(Индекс);
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СтатьиЗатрат") И Не ТекущееЗначение = Неопределено И Не ТекущееЗначение = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
			Возврат ТекущееЗначение.ВидРасходовНУ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции
Функция ПолучитьМассивСчетовУчетаКосвенныхРасходов() Экспорт

	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	
	Возврат СчетаЗатрат;

КонецФункции // ПолучитьСписокСчетовУчетаКосвенныхРасходов()
