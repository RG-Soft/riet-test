////////////////////////////////////////////////////////////////////////////////
// ФОНОВАЯ ЗАГРУЗКА ПРОВОДОК DSS
Процедура ЗагрузкаПроводокПоСистеме(Система, ЗагружатьТолькоНовые = Истина, ПервоначальнаяОбрДанных = Ложь, 
	ЗагрузитьВРегистрПроводкиDSS = Истина, ПрименитьФильтр = Истина, КоличествоЗаписейВНаборе = 1000) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВременныеПроводкиDSS.System КАК System
	                      |ИЗ
	                      |	РегистрСведений.ВременныеПроводкиDSS КАК ВременныеПроводкиDSS
	                      |ГДЕ
	                      |	ВременныеПроводкиDSS.System = &System");
	Запрос.УстановитьПараметр("System", Система);	
	Всего = Запрос.Выполнить().Выгрузить().Количество();
	
	мКонтрагентыLawson = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыLawson.Ссылка,
	|	КонтрагентыLawson.Код
	|ИЗ
	|	Справочник.КонтрагентыLawson КАК КонтрагентыLawson
	|ГДЕ
	|	(НЕ КонтрагентыLawson.ПометкаУдаления)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	мКонтрагентыLawson.Колонки.Добавить("Код");
	мКонтрагентыLawson.Колонки.Добавить("Ссылка");
	Если Система = "AP" ИЛИ Система = "AR" ИЛИ Система = "BL" ИЛИ Система = "RJ" Тогда //этот кэш только для указанных подсистем
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = мКонтрагентыLawson.Добавить();
			СтрокаТЧ.Код = СокрЛП(Выборка.Код);
			СтрокаТЧ.Ссылка = Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	мКонтрагентыLawson.Индексы.Добавить("Код");	

	табLawsonInvoice = Новый ТаблицаЗначений;
	табLawsonInvoice.Колонки.Добавить("ArInvoice");
	табLawsonInvoice.Колонки.Добавить("Ссылка");
	Если Система = "AR" ИЛИ Система = "BL"  Тогда //этот кэш только для указанных подсистем
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	LawsonInvoice.Ссылка,
		|	LawsonInvoice.ArInvoice
		|ИЗ
		|	Документ.LawsonInvoice КАК LawsonInvoice
		|ГДЕ
		|	(НЕ LawsonInvoice.ПометкаУдаления)";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = табLawsonInvoice.Добавить();
			СтрокаТЧ.ArInvoice = СокрЛП(Выборка.ArInvoice);
			СтрокаТЧ.Ссылка = Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	табLawsonInvoice.Индексы.Добавить("ArInvoice");
	мЮниты = Новый ТаблицаЗначений;
	//-> RG-Soft VIvanov 2015/02/18
	Выборка = Справочники.КостЦентры.Выбрать();
	мЮниты.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7)));
	мЮниты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.КостЦентры"));
	//Добавил Пахоменков  А.С. 05.06.2012
	мЮниты.Колонки.Добавить("Локация", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	мЮниты.Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.Сегменты"));
	мЮниты.Колонки.Добавить("Segment", Новый ОписаниеТипов("СправочникСсылка.Сегменты"));
	мЮниты.Колонки.Добавить("SubSegment", Новый ОписаниеТипов("СправочникСсылка.Сегменты"));
	//<<  
	// { RGS LFedotova 13.09.2016 16:31:28 - вопрос SLI-0006779
	мЮниты.Колонки.Добавить("Geo", Новый ОписаниеТипов("СправочникСсылка.GeoMarkets"));
	мЮниты.Колонки.Добавить("SubGeo", Новый ОписаниеТипов("СправочникСсылка.GeoMarkets"));
	// } RGS LFedotova 13.09.2016 16:32:14 - вопрос SLI-0006779
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мЮниты.Добавить();
		СтрокаТЧ.Код = ВСтроку(Выборка.Код);
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
		//Добавил Пахоменков  А.С. 05.06.2012
		СтрокаТЧ.Локация = Выборка.ПодразделениеОрганизации;
		СтрокаТЧ.Сегмент = Выборка.Сегмент;
		//<<  
		СтрокаТЧ.Segment = Выборка.Segment;
		СтрокаТЧ.SubSegment = Выборка.SubSegment;
	КонецЦикла;
	мЮниты.Индексы.Добавить("Код");
	//<- RG-Soft VIvanov
	
	мЛокации = Новый ТаблицаЗначений;	
	Выборка = Справочники.ПодразделенияОрганизаций.Выбрать();
	мЛокации.Колонки.Добавить("Код");
	мЛокации.Колонки.Добавить("Ссылка");
	//Добавил Пахоменков  А.С. 05.06.2012
	мЛокации.Колонки.Добавить("GeoMarket");
	//<<    
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мЛокации.Добавить();
		СтрокаТЧ.Код = ВСтроку(Выборка.Код);
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
		//Добавил Пахоменков  А.С. 05.06.2012
		СтрокаТЧ.GeoMarket = Выборка.GeoMarket;
		//<<  
	КонецЦикла;
	мЛокации.Индексы.Добавить("Код");
	
	
	мСегменты = Новый ТаблицаЗначений;	
	Выборка = Справочники.Сегменты.Выбрать();
	мСегменты.Колонки.Добавить("Код");
	мСегменты.Колонки.Добавить("Ссылка");
	//Добавил Пахоменков  А.С. 05.06.2012
	мСегменты.Колонки.Добавить("Родитель");
	//<<   
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мСегменты.Добавить();
		СтрокаТЧ.Код = ВСтроку(Выборка.Код);
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
		//Добавил Пахоменков  А.С. 05.06.2012
		СтрокаТЧ.Родитель = Выборка.Родитель;
		//<<  
	КонецЦикла;
	мСегменты.Индексы.Добавить("Код");
		
	мВалюты = Новый ТаблицаЗначений;	
	Выборка = Справочники.Валюты.Выбрать();
	мВалюты.Колонки.Добавить("Код");
	мВалюты.Колонки.Добавить("Ссылка");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мВалюты.Добавить();
		СтрокаТЧ.Код = СокрЛП(Выборка.НаименованиеEng);
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
	КонецЦикла;
	СтрокаТЧ = мВалюты.Добавить();
	СтрокаТЧ.Код = "RUB";
	СтрокаТЧ.Ссылка = Константы.ВалютаРегламентированногоУчета.Получить();
	мВалюты.Индексы.Добавить("Код");
	
	мСчета = Новый ТаблицаЗначений;	
	Выборка = ПланыСчетов.Lawson.Выбрать();
	мСчета.Колонки.Добавить("Код");
	мСчета.Колонки.Добавить("Ссылка");
	//Добавил Пахоменков  А.С. 05.06.2012
	мСчета.Колонки.Добавить("Родитель");
	//<<
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мСчета.Добавить();
		//Пахоменков 05.06.2012 Пришлось перевести в верх.рег., т.к. при ручном изменении счета все буквы преобразуются к 
		// верхнему регистру, а поиск по ТЗ в таком случае не сработает. если в проводке не в верх.рег.
		СтрокаТЧ.Код = ВРег(ВСтроку(Выборка.Код));
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
		//Добавил Пахоменков  А.С. 05.06.2012
		СтрокаТЧ.Родитель = Выборка.Родитель;
		//<<  
	КонецЦикла;
	мСчета.Индексы.Добавить("Код");
		
	мGeoMarkets = Новый ТаблицаЗначений;	
	Выборка = Справочники.GeoMarkets.Выбрать();
	мGeoMarkets.Колонки.Добавить("Код");
	мGeoMarkets.Колонки.Добавить("Ссылка");
	//Добавил Пахоменков  А.С. 05.06.2012
	мGeoMarkets.Колонки.Добавить("Родитель");
	//<<
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = мGeoMarkets.Добавить();
		СтрокаТЧ.Код = ВСтроку(Выборка.Код);
		СтрокаТЧ.Ссылка = Выборка.Ссылка;
		//Добавил Пахоменков  А.С. 05.06.2012
		СтрокаТЧ.Родитель = Выборка.Родитель;
		//<<
	КонецЦикла;
	мGeoMarkets.Индексы.Добавить("Код");
		
	мОсновныеСредстваLawson = Новый ТаблицаЗначений;	
	мОсновныеСредстваLawson.Колонки.Добавить("Код");
	мОсновныеСредстваLawson.Колонки.Добавить("Ссылка");
	Если Система = "AM" Тогда //этот кэш только для подсистемы с основными средствами
		Выборка = Справочники.ОсновныеСредстваLawson.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = мОсновныеСредстваLawson.Добавить();
			СтрокаТЧ.Код = ВСтроку(Выборка.Код);
			СтрокаТЧ.Ссылка = Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;
	мОсновныеСредстваLawson.Индексы.Добавить("Код");	
	// { RGS MYurkevich 12.03.2015 11:58:21 - 
	СтруктураКэша = Новый Структура();
	СтруктураКэша.Вставить("мКонтрагентыLawson", мКонтрагентыLawson);
	СтруктураКэша.Вставить("табLawsonInvoice", табLawsonInvoice);
	СтруктураКэша.Вставить("мЮниты", мЮниты);
	СтруктураКэша.Вставить("мЛокации", мЛокации);
	СтруктураКэша.Вставить("мСегменты", мСегменты);
	СтруктураКэша.Вставить("мВалюты", мВалюты); 
	СтруктураКэша.Вставить("мСчета", мСчета);
	СтруктураКэша.Вставить("мGeoMarkets", мGeoMarkets);
	СтруктураКэша.Вставить("мОсновныеСредстваLawson", мОсновныеСредстваLawson);
	// } RGS MYurkevich 12.03.2015 11:58:23 - 

	дзФильтры = Новый ДеревоЗначений;
	дзФильтры.Колонки.Добавить("Код", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
	дзФильтры.Колонки.Добавить("Наименование", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(25));
	дзФильтры.Колонки.Добавить("КодВыполнения");
	дзФильтры.Колонки.Добавить("Статья", Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов"));
	дзФильтры.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФильтров"));
	дзФильтры.Колонки.Добавить("Модуль", Новый ОписаниеТипов("ПеречислениеСсылка.МодулиРазработки"));
	ЗаполнитьДеревоЗначений(Неопределено, дзФильтры);	
		
	ЕстьПроводки = Истина;
	
	//Rg-Soft Пахоменков А.С. 05.10.2011 
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ВременныеПроводкиDSS.System,
	                      |	ВременныеПроводкиDSS.JeType,
	                      |	ВременныеПроводкиDSS.Journal,
	                      |	ВременныеПроводкиDSS.УчетныйПериод,
	                      |	ВременныеПроводкиDSS.GltObjId,
	                      |	ВременныеПроводкиDSS.Area,
	                      |	ВременныеПроводкиDSS.AreaDesc,
	                      |	ВременныеПроводкиDSS.Geo,
	                      |	ВременныеПроводкиDSS.GeoDesc,
	                      |	ВременныеПроводкиDSS.SubGeo,
	                      |	ВременныеПроводкиDSS.SubgeoDesc,
	                      |	ВременныеПроводкиDSS.Mgmtctry,
	                      |	ВременныеПроводкиDSS.MgmtctryDesc,
	                      |	ВременныеПроводкиDSS.BusSeg,
	                      |	ВременныеПроводкиDSS.SegDesc,
	                      |	ВременныеПроводкиDSS.SubSeg,
	                      |	ВременныеПроводкиDSS.SubsegDesc,
	                      |	ВременныеПроводкиDSS.SubSubSeg,
	                      |	ВременныеПроводкиDSS.SubsubsegDesc,
	                      |	ВременныеПроводкиDSS.Company,
	                      |	ВременныеПроводкиDSS.Location,
	                      |	ВременныеПроводкиDSS.LocationDesc,
	                      |	ВременныеПроводкиDSS.AccountUnit,
	                      |	ВременныеПроводкиDSS.AcctUnitDesc,
	                      |	ВременныеПроводкиDSS.MgmtNIS_BLSummaryAcct,
	                      |	ВременныеПроводкиDSS.SummaryAcct,
	                      |	ВременныеПроводкиDSS.SummaryAcctDesc,
	                      |	ВременныеПроводкиDSS.Account,
	                      |	ВременныеПроводкиDSS.SubAccount,
	                      |	ВременныеПроводкиDSS.AccountDesc,
	                      |	ВременныеПроводкиDSS.FiscalYear,
	                      |	ВременныеПроводкиDSS.AccountingPeriod,
	                      |	ВременныеПроводкиDSS.Date,
	                      |	ВременныеПроводкиDSS.UpdateDate,
	                      |	ВременныеПроводкиDSS.SeqTrnsNbr,
	                      |	ВременныеПроводкиDSS.PostingDate,
	                      |	ВременныеПроводкиDSS.Reference,
	                      |	ВременныеПроводкиDSS.Description,
	                      |	ВременныеПроводкиDSS.CurrencyCode,
	                      |	ВременныеПроводкиDSS.TranAmount,
	                      |	ВременныеПроводкиDSS.BaseAmount,
	                      |	ВременныеПроводкиDSS.OrigCompany,
	                      |	ВременныеПроводкиDSS.Activity,
	                      |	ВременныеПроводкиDSS.SourceCode,
	                      |	ВременныеПроводкиDSS.LineNbr,
	                      |	ВременныеПроводкиDSS.AutoRev,
	                      |	ВременныеПроводкиDSS.Operator,
	                      |	ВременныеПроводкиDSS.LegalFiscalFlag,
	                      |	ВременныеПроводкиDSS.Vendor,
	                      |	ВременныеПроводкиDSS.VendorVName,
	                      |	ВременныеПроводкиDSS.ApInvoice,
	                      |	ВременныеПроводкиDSS.TransNbr,
	                      |	ВременныеПроводкиDSS.OrigOperatorId,
	                      |	ВременныеПроводкиDSS.ProcessLevel,
	                      |	ВременныеПроводкиDSS.CashCode,
	                      |	ВременныеПроводкиDSS.PoNumber,
	                      |	ВременныеПроводкиDSS.LineNbrIc,
	                      |	ВременныеПроводкиDSS.PoCode,
	                      |	ВременныеПроводкиDSS.Asset,
	                      |	ВременныеПроводкиDSS.AssetCode,
	                      |	ВременныеПроводкиDSS.AstSerialNbr,
	                      |	ВременныеПроводкиDSS.ItemDescription,
	                      |	ВременныеПроводкиDSS.CustomerNumber,
	                      |	ВременныеПроводкиDSS.CustomerName,
	                      |	ВременныеПроводкиDSS.ArInvoice,
	                      |	ВременныеПроводкиDSS.TaxCode,
	                      |	ВременныеПроводкиDSS.Item,
	                      |	ВременныеПроводкиDSS.DocumentNbr,
	                      |	ВременныеПроводкиDSS.ContractNumber,
	                      |	ВременныеПроводкиDSS.AktOfAcceptance,
	                      |	ВременныеПроводкиDSS.AktDate,
	                      |	ВременныеПроводкиDSS.ApTransFormId,
  	                      |	ВременныеПроводкиDSS.Urn
	                      |ИЗ
	                      |	РегистрСведений.ВременныеПроводкиDSS КАК ВременныеПроводкиDSS
	                      |ГДЕ
	                      |	ВременныеПроводкиDSS.System = &System");
	Запрос.УстановитьПараметр("System", Система);
	//Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	//					  |	ВременныеПроводкиDSS.JeType,
	//					  |	ВременныеПроводкиDSS.Journal,
	//					  |	ВременныеПроводкиDSS.System,
	//					  |	ВременныеПроводкиDSS.УчетныйПериод
	//					  |ПОМЕСТИТЬ Запись
	//					  |ИЗ
	//					  |	РегистрСведений.ВременныеПроводкиDSS КАК ВременныеПроводкиDSS
	//					  |ГДЕ
	//					  |	ВременныеПроводкиDSS.System = &System
	//					  |;
	//					  |
	//					  |////////////////////////////////////////////////////////////////////////////////
	//					  |ВЫБРАТЬ
	//					  |	ВременныеПроводкиDSS.System,
	//					  |	ВременныеПроводкиDSS.JeType,
	//					  |	ВременныеПроводкиDSS.Journal,
	//					  |	ВременныеПроводкиDSS.УчетныйПериод,
	//					  |	ВременныеПроводкиDSS.GltObjId,
	//					  |	ВременныеПроводкиDSS.Area,
	//					  |	ВременныеПроводкиDSS.AreaDesc,
	//					  |	ВременныеПроводкиDSS.Geo,
	//					  |	ВременныеПроводкиDSS.GeoDesc,
	//					  |	ВременныеПроводкиDSS.SubGeo,
	//					  |	ВременныеПроводкиDSS.SubgeoDesc,
	//					  |	ВременныеПроводкиDSS.Mgmtctry,
	//					  |	ВременныеПроводкиDSS.MgmtctryDesc,
	//					  |	ВременныеПроводкиDSS.BusSeg,
	//					  |	ВременныеПроводкиDSS.SegDesc,
	//					  |	ВременныеПроводкиDSS.SubSeg,
	//					  |	ВременныеПроводкиDSS.SubsegDesc,
	//					  |	ВременныеПроводкиDSS.SubSubSeg,
	//					  |	ВременныеПроводкиDSS.SubsubsegDesc,
	//					  |	ВременныеПроводкиDSS.Company,
	//					  |	ВременныеПроводкиDSS.Location,
	//					  |	ВременныеПроводкиDSS.LocationDesc,
	//					  |	ВременныеПроводкиDSS.AccountUnit,
	//					  |	ВременныеПроводкиDSS.AcctUnitDesc,
	//					  |	ВременныеПроводкиDSS.MgmtNIS_BLSummaryAcct,
	//					  |	ВременныеПроводкиDSS.SummaryAcct,
	//					  |	ВременныеПроводкиDSS.SummaryAcctDesc,
	//					  |	ВременныеПроводкиDSS.Account,
	//					  |	ВременныеПроводкиDSS.SubAccount,
	//					  |	ВременныеПроводкиDSS.AccountDesc,
	//					  |	ВременныеПроводкиDSS.FiscalYear,
	//					  |	ВременныеПроводкиDSS.AccountingPeriod,
	//					  |	ВременныеПроводкиDSS.Date,
	//					  |	ВременныеПроводкиDSS.UpdateDate,
	//					  |	ВременныеПроводкиDSS.SeqTrnsNbr,
	//					  |	ВременныеПроводкиDSS.PostingDate,
	//					  |	ВременныеПроводкиDSS.Reference,
	//					  |	ВременныеПроводкиDSS.Description,
	//					  |	ВременныеПроводкиDSS.CurrencyCode,
	//					  |	ВременныеПроводкиDSS.TranAmount,
	//					  |	ВременныеПроводкиDSS.BaseAmount,
	//					  |	ВременныеПроводкиDSS.OrigCompany,
	//					  |	ВременныеПроводкиDSS.Activity,
	//					  |	ВременныеПроводкиDSS.SourceCode,
	//					  |	ВременныеПроводкиDSS.LineNbr,
	//					  |	ВременныеПроводкиDSS.AutoRev,
	//					  |	ВременныеПроводкиDSS.Operator,
	//					  |	ВременныеПроводкиDSS.LegalFiscalFlag,
	//					  |	ВременныеПроводкиDSS.Vendor,
	//					  |	ВременныеПроводкиDSS.VendorVName,
	//					  |	ВременныеПроводкиDSS.ApInvoice,
	//					  |	ВременныеПроводкиDSS.TransNbr,
	//					  |	ВременныеПроводкиDSS.OrigOperatorId,
	//					  |	ВременныеПроводкиDSS.ProcessLevel,
	//					  |	ВременныеПроводкиDSS.CashCode,
	//					  |	ВременныеПроводкиDSS.PoNumber,
	//					  |	ВременныеПроводкиDSS.LineNbrIc,
	//					  |	ВременныеПроводкиDSS.PoCode,
	//					  |	ВременныеПроводкиDSS.Asset,
	//					  |	ВременныеПроводкиDSS.AssetCode,
	//					  |	ВременныеПроводкиDSS.AstSerialNbr,
	//					  |	ВременныеПроводкиDSS.ItemDescription,
	//					  |	ВременныеПроводкиDSS.CustomerNumber,
	//					  |	ВременныеПроводкиDSS.CustomerName,
	//					  |	ВременныеПроводкиDSS.ArInvoice,
	//					  |	ВременныеПроводкиDSS.TaxCode,
	//					  |	ВременныеПроводкиDSS.Item,
	//					  |	ВременныеПроводкиDSS.DocumentNbr,
	//					  |	ВременныеПроводкиDSS.ContractNumber,
	//					  |	ВременныеПроводкиDSS.AktOfAcceptance,
	//					  |	ВременныеПроводкиDSS.AktDate,
	//					  |	ВременныеПроводкиDSS.ApTransFormId
	//					  |ИЗ
	//					  |	Запись КАК Запись
	//					  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВременныеПроводкиDSS КАК ВременныеПроводкиDSS
	//					  |		ПО Запись.System = ВременныеПроводкиDSS.System
	//					  |			И Запись.JeType = ВременныеПроводкиDSS.JeType
	//					  |			И Запись.Journal = ВременныеПроводкиDSS.Journal
	//					  |			И Запись.УчетныйПериод = ВременныеПроводкиDSS.УчетныйПериод");
	//Запрос.УстановитьПараметр("System", Система);
	//<<
	
	НаборЗаписейВременныеПроводкиDSS = РегистрыСведений.ВременныеПроводкиDSS.СоздатьНаборЗаписей();
	ОтборНабораЗаписейВременныеПроводкиDSS = НаборЗаписейВременныеПроводкиDSS.Отбор;
	Пока ЕстьПроводки Цикл
		
		ТЗ_CSV = Запрос.Выполнить().Выгрузить();
		ЕстьПроводки = ТЗ_CSV.Количество() > 0;
		Если ЕстьПроводки Тогда
			
			//Rg-Soft Пахоменков А.С. 05.10.2011
			НомерПроводки = ТЗ_CSV[0].GltObjId;
			//<<
			Тип = ТЗ_CSV[0].JeType;
			Журнал = ТЗ_CSV[0].Journal;
			УчетныйПериод = ТЗ_CSV[0].УчетныйПериод; 			
			
			Отказ = Ложь;
			
			// { RGS LFedotova 9/29/2016 3:19:53 PM - вопрос SLI-0006819
			Если Документы.ПроводкаDSS.НайтиПоНомеру(ТЗ_CSV[0].GltObjId).Пустая() Тогда 
				// } RGS LFedotova 9/29/2016 3:20:39 PM - вопрос SLI-0006819
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				// { RGS MYurkevich 12.03.2015 12:06:48 - 	
				//ВыполнитьЗагрузкуПроводок(ТЗ_CSV, Отказ, ЗагружатьТолькоНовые, ПервоначальнаяОбрДанных, ЗагрузитьВРегистрПроводкиDSS, ПрименитьФильтр, КоличествоЗаписейВНаборе,
				//	мКонтрагентыLawson, табLawsonInvoice, мЮниты, мЛокации, мСегменты, мВалюты, мСчета, мGeoMarkets, мОсновныеСредстваLawson, дзФильтры);
				НовыеЗаписиВКэш = ВыполнитьЗагрузкуПроводок(ТЗ_CSV, Отказ, ЗагружатьТолькоНовые, ПервоначальнаяОбрДанных, ЗагрузитьВРегистрПроводкиDSS, ПрименитьФильтр, КоличествоЗаписейВНаборе, СтруктураКэша, дзФильтры);
				// } RGS MYurkevich 12.03.2015 12:06:50 - 
				// Удалим загруженные проводки из временного регистра сведений
				Если НЕ Отказ Тогда
					
					//Rg-Soft Пахоменков А.С. 05.10.2011 
					ОтборНабораЗаписейВременныеПроводкиDSS.GltObjId.Установить(НомерПроводки);
					//ОтборНабораЗаписейВременныеПроводкиDSS.System.Установить(Система);
					//ОтборНабораЗаписейВременныеПроводкиDSS.JeType.Установить(Тип);
					//ОтборНабораЗаписейВременныеПроводкиDSS.Journal.Установить(Журнал);
					//ОтборНабораЗаписейВременныеПроводкиDSS.УчетныйПериод.Установить(УчетныйПериод);
					//<<
					
					Попытка			
						НаборЗаписейВременныеПроводкиDSS.Записать();	
					Исключение
						Отказ = Истина;
						//Rg-Soft Пахоменков А.С. 05.10.2011 
						СтрокаОшибки = "Не удалось записать пустой набор записей регистра сведений ""ВременныеПроводкиDSS"" по " + Система + "_" + Тип + Журнал + " номер " + НомерПроводки + " от " + УчетныйПериод + ": " + ОписаниеОшибки();
						//СтрокаОшибки = "Не удалось записать пустой набор записей регистра сведений ""ВременныеПроводкиDSS"" по " + Система + "_" + Тип + Журнал + " от " + УчетныйПериод + ": " + ОписаниеОшибки();
						//<<
						ЗаписьЖурналаРегистрации("Ошибка при загрузке DSS", УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
					КонецПопытки;
					
				КонецЕсли;
				
				Если Отказ Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
					// { RGS MYurkevich 12.03.2015 14:23:36 - 
					Для Каждого Таблица Из НовыеЗаписиВКэш Цикл
						Кэш = СтруктураКэша[Таблица.Ключ];
						Для Каждого Строка Из Таблица.Значение Цикл
							НовыйКэш = Кэш.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйКэш, Строка);
						КонецЦикла;
						Таблица.Значение.Очистить();
					КонецЦикла;	
					// } RGS MYurkevich 12.03.2015 14:23:37 - 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS MYurkevich 12.03.2015 12:07:47 - 
//Процедура ВыполнитьЗагрузкуПроводок(ТЗ_CSV, Отказ, фЗагружатьТолькоНовые = Истина, ПервоначальнаяОбрДанных = Ложь,
//	ЗагрузитьВРегистрПроводкиDSS = Истина, ПрименитьФильтр = Истина, КоличествоЗаписейВНаборе = 1000, 
//	мКонтрагентыLawson, табLawsonInvoice, мЮниты, мЛокации, мСегменты, мВалюты, мСчета, мGeoMarkets, мОсновныеСредстваLawson, дзФильтры)
Функция ВыполнитьЗагрузкуПроводок(ТЗ_CSV, Отказ, фЗагружатьТолькоНовые = Истина, ПервоначальнаяОбрДанных = Ложь,
	ЗагрузитьВРегистрПроводкиDSS = Истина, ПрименитьФильтр = Истина, КоличествоЗаписейВНаборе = 1000, СтруктураКэша, дзФильтры)
// } RGS MYurkevich 12.03.2015 12:07:48 - 

	          	     
	Перем мПериодЗагрузки;
	//Rg-Soft Пахоменков А.С. 05.10.2011 
	//Перем мРегистраторы;
	//<<

	ПустойТип = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("000000001");
	ПустоеОС = Справочники.ОсновныеСредстваLawson.ПустаяСсылка();
	
	Всего = ТЗ_CSV.Количество();
	Если НЕ Булево(Всего) Тогда
		// { RGS MYurkevich 12.03.2015 13:51:04 - 
		 //Возврат;
		 Возврат Новый Структура();
		// } RGS MYurkevich 12.03.2015 13:51:05 - 
	КонецЕсли;
	
	ТЗ_CSV.Индексы.Добавить("GltObjId");
	
	//Rg-Soft Пахоменков А.С. 05.10.2011 
	////Загружать только новый ID
	//Если фЗагружатьТолькоНовые Тогда
	//	УдалитьИмеющиесяID(ТЗ_CSV);
	//	Всего = ТЗ_CSV.Количество();
	//	Если НЕ Булево(Всего) Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//<<
	
	//тут можно взять любую строку - в одном файле может быть только один период
	мПериодЗагрузки = ТЗ_CSV[0].УчетныйПериод;
	
	ТЗ_CSV.Колонки.Удалить("FiscalYear");
	ТЗ_CSV.Колонки.Удалить("AccountingPeriod");
	
	//Rg-Soft Пахоменков 05.10.11 >>
	////определение ТЗ мРегистраторы для сопоставления регистратора загружаемой записи 
	//ТаблицаJournal = ТЗ_CSV.Скопировать(,"GltObjId");
	//ТаблицаJournal.Колонки.Добавить("Journal", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12));
	//Номер = ТЗ_CSV[0].System + "_" + ТЗ_CSV[0].JeType +  СокрЛП(ТЗ_CSV[0].Journal);
	//ТаблицаJournal.ЗаполнитьЗначения(Номер, "Journal");
	//ЗаполнитьТаблицуРегистраторов(ТаблицаJournal, мПериодЗагрузки, мРегистраторы);
	//ТаблицаJournal = Неопределено;
	//
	//масРегистраторов = мРегистраторы.ВыгрузитьКолонку("Регистратор");
	//УправлениеЗапасамиПартионныйУчет.УдалитьПовторяющиесяЭлементы(масРегистраторов);
	//<<

	
	//Этап 2. Доработка таблицы и присвоение каждой записи таблицы регистратора
	//НайтиGeoMarket(ТЗ_CSV, мGeoMarkets);

	//ТЗ_CSV.Колонки.Удалить("Area");
	//ТЗ_CSV.Колонки.Удалить("AreaDesc");
	//ТЗ_CSV.Колонки.Удалить("Geo");
	//ТЗ_CSV.Колонки.Удалить("GeoDesc");
	//ТЗ_CSV.Колонки.Удалить("SubGeo");
	//ТЗ_CSV.Колонки.Удалить("SubGeoDesc");
	//ТЗ_CSV.Колонки.Удалить("Mgmtctry");
	//ТЗ_CSV.Колонки.Удалить("MgmtctryDesc");
	
	ТЗ_CSV.Колонки.Добавить("Период", 			ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТЗ_CSV.Колонки.Добавить("DateLawson", 		ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТЗ_CSV.Колонки.Добавить("PeriodLawson", 	ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТЗ_CSV.Колонки.Добавить("UpdateDateLawson", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТЗ_CSV.Колонки.Добавить("AktDateLawson", 	ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	ТЗ_CSV.Колонки.Добавить("Добавлено", 			Новый ОписаниеТипов("Булево"));
	ТЗ_CSV.Колонки.Добавить("JeTypeLawson", 		ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1));
	ТЗ_CSV.Колонки.Добавить("AutoRevLawson", 		Новый ОписаниеТипов("Булево"));
	ТЗ_CSV.Колонки.Добавить("LegalFiscalFlagLawson",Новый ОписаниеТипов("Булево"));
	
	ТЗ_CSV.Колонки.Добавить("Регистратор");
	ТЗ_CSV.Колонки.Добавить("AccountLawson", 	Новый ОписаниеТипов("ПланСчетовСсылка.Lawson"));
	ТЗ_CSV.Колонки.Добавить("AU", 				Новый ОписаниеТипов("СправочникСсылка.КостЦентры"));		
	ТЗ_CSV.Колонки.Добавить("Currency", 		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТЗ_CSV.Колонки.Добавить("FiscalType", 		Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов"));
	ТЗ_CSV.Колонки.Добавить("AssetLawson", 		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредстваLawson"));
	ТЗ_CSV.Колонки.Добавить("КонтрагентLawson", Новый ОписаниеТипов("СправочникСсылка.КонтрагентыLawson"));
	ТЗ_CSV.Колонки.Добавить("Модуль", 			Новый ОписаниеТипов("ПеречислениеСсылка.МодулиРазработки"));
	
	ТЗ_CSV.Колонки.Добавить("SeqTrnsNbrLawson", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(8));
	ТЗ_CSV.Колонки.Добавить("OrigCompanyLawson",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));
	ТЗ_CSV.Колонки.Добавить("LineNbrLawson", 	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
	ТЗ_CSV.Колонки.Добавить("JournalLawson", 	ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(8));
	ТЗ_CSV.Колонки.Добавить("AccountNumber", 	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
	ТЗ_CSV.Колонки.Добавить("SumAcctNumber", 	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));
	
	ТЗ_CSV.Колонки.Добавить("GUID", 			ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(35));
	//Пахоменков 05.06.2012
	ТЗ_CSV.Колонки.Добавить("GeoMarket", 		Новый ОписаниеТипов("СправочникСсылка.GeoMarkets"));
	//<<	
	// { RGS MYurkevich 12.03.2015 13:47:11 - 
	ДобавкаВКэш = Новый Структура();
	ПустаяТаблица = Новый ТаблицаЗначений();
	ПустаяТаблица.Колонки.Добавить("Код");
	ПустаяТаблица.Колонки.Добавить("Ссылка");
	ПустаяТаблица.Колонки.Добавить("Родитель");
	ПустаяТаблица.Колонки.Добавить("GeoMarket");
	ПустаяТаблица.Колонки.Добавить("ArInvoice");	
	ДобавкаВКэш.Вставить("мКонтрагентыLawson", ПустаяТаблица);
	ДобавкаВКэш.Вставить("табLawsonInvoice", ПустаяТаблица);
	ДобавкаВКэш.Вставить("мЛокации", ПустаяТаблица);
	ДобавкаВКэш.Вставить("мСегменты", ПустаяТаблица);
	ДобавкаВКэш.Вставить("мСчета", ПустаяТаблица);
	ДобавкаВКэш.Вставить("мGeoMarkets", ПустаяТаблица);
	ДобавкаВКэш.Вставить("мОсновныеСредстваLawson", ПустаяТаблица);
	// } RGS MYurkevich 12.03.2015 13:47:12 - 
	Для каждого СтрокаТЧ из ТЗ_CSV Цикл
		
		// { RGS MYurkevich 12.03.2015 13:46:13 - 
		//СтрокаТЧ.GeoMarket = НайтиGeoMarket(СтрокаТЧ, мGeoMarkets);
		СтрокаТЧ.GeoMarket = НайтиGeoMarket(СтрокаТЧ, СтруктураКэша.мGeoMarkets, ДобавкаВКэш.мGeoMarkets);
		// } RGS MYurkevich 12.03.2015 13:46:14 - 
		
		Если Не ПроверкаНаNullAccount(СтрокаТЧ) Тогда
			СтрокаТЧ.AccountLawson = НайтиСчетLawson(СтрокаТЧ, СтруктураКэша.мСчета);
			СтрокаТЧ.AccountNumber = СтрокаТЧ.AccountLawson.КодЧислом;
			СтрокаТЧ.SumAcctNumber = СтрокаТЧ.AccountLawson.Родитель.КодЧислом;
		КонецЕсли;
		
		Если НЕ ПроверкаНаNullAU(СтрокаТЧ) Тогда
			// { RGS MYurkevich 12.03.2015 13:58:07 - добавила таблицу кэша
			Сегмент = НайтиСегмент(СтрокаТЧ,СтруктураКэша.мСегменты, ДобавкаВКэш.мСегменты);
			Локация = НайтиЛокацию(СтрокаТЧ,СтруктураКэша.мЛокации, ДобавкаВКэш.мЛокации);
			
			//-> RG-Soft VIvanov 2015/02/18
			//СтрокаТЧ.AU = НайтиAU(СтрокаТЧ, Локация, Сегмент, мЮниты);
			СтрокаТЧ.AU = НайтиAU(СтрокаТЧ, Локация, СтруктураКэша.мЮниты, ПреобразоватьВДату(СтрокаТЧ.PostingDate, "PostingDate"));
			//<- Rg-Soft VIvanov
			// } RGS MYurkevich 12.03.2015 13:58:09 - 
		КонецЕсли;			
		
		ПроверитьНаNULL(СтрокаТЧ);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Asset) ТОгда
			// { RGS MYurkevich 12.03.2015 13:58:07 - добавила таблицу кэша
			СтрокаТЧ.AssetLawson = НайтиОсновныеСредстваLawson(СтрокаТЧ.Asset, СтрокаТЧ.AssetCode, СтрокаТЧ.AstSerialNbr, СтруктураКэша.мОсновныеСредстваLawson, ДобавкаВКэш.мОсновныеСредстваLawson);
		Иначе
			СтрокаТЧ.AssetLawson = ПустоеОС;
		КонецЕсли;
		УстановитьБулевыПоля(СтрокаТЧ);
		
		СтрокаТЧ.PeriodLawson = ПреобразоватьВДату(СтрокаТЧ.PostingDate, "PostingDate");
		СтрокаТЧ.Период = мПериодЗагрузки;
		Если НЕ Строка(СтрокаТЧ.Date) = Строка(Дата(1,1,1)) Тогда
			СтрокаТЧ.DateLawson = ПреобразоватьВДату(СтрокаТЧ.Date, "Date");
		КонецЕсли;
		Если НЕ Строка(СтрокаТЧ.UpdateDate) = Строка(Дата(1,1,1)) Тогда
			СтрокаТЧ.UpdateDateLawson = ПреобразоватьВДату(СтрокаТЧ.UpdateDate, "UpdateDate");
		КонецЕсли;
		Если НЕ Строка(СтрокаТЧ.AktDate) = Строка(Дата(1,1,1)) Тогда
			СтрокаТЧ.AktDateLawson = ПреобразоватьВДату(СтрокаТЧ.AktDate, "AktDate");
		КонецЕсли;
		
		СтрокаТЧ.JournalLawson = СтрокаТЧ.Journal;
		СтрокаТЧ.SeqTrnsNbrLawson = СтрокаТЧ.SeqTrnsNbr;
		СтрокаТЧ.OrigCompanyLawson = СтрокаТЧ.OrigCompany;
		СтрокаТЧ.LineNbrLawson = СтрокаТЧ.LineNbr;
		СтрокаТЧ.JeTypeLawson = СтрокаТЧ.JeType;
		
		СтрокаТЧ.Currency = НайтиВКэше(СокрЛП(ВСтроку(СтрокаТЧ.CurrencyCode)), СтруктураКэша.мВалюты);
		
		//Rg-Soft Пахоменков А.С. 05.10.2011 
		//Строчка = мРегистраторы.Найти(СтрокаТЧ.GltObjId,"GltObjId");
		//Если Строчка <> Неопределено Тогда
		//	СтрокаТЧ.Регистратор = Строчка.Регистратор;
		//	СтрокаТЧ.Добавлено = Строчка.Добавлено;
		//КонецЕсли;
		//<<
		
		ПреобразованиеСокрЛП(СтрокаТЧ);
		
		//Заполнение КонтрагентLawson
		// { RGS MYurkevich 12.03.2015 14:17:04 - добавила таблицу кэша
		Если ЗначениеЗаполнено(СтрокаТЧ.CustomerNumber) И ЗначениеЗаполнено(СтрокаТЧ.CustomerName) Тогда
			СтрокаТЧ.КонтрагентLawson = ПолучитьКонтрагентаLawson(СтрокаТЧ.CustomerNumber, СтрокаТЧ.CustomerName,СтруктураКэша.мКонтрагентыLawson, ДобавкаВКэш.мКонтрагентыLawson);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Vendor) И ЗначениеЗаполнено(СтрокаТЧ.VendorVname) Тогда
			СтрокаТЧ.КонтрагентLawson = ПолучитьКонтрагентаLawson(СтрокаТЧ.Vendor, СтрокаТЧ.VendorVname,СтруктураКэша.мКонтрагентыLawson, ДобавкаВКэш.мКонтрагентыLawson);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.CustomerNumber) Тогда
			СтрокаТЧ.КонтрагентLawson = ПолучитьКонтрагентаLawson(СтрокаТЧ.CustomerNumber, СтрокаТЧ.CustomerName,СтруктураКэша.мКонтрагентыLawson, ДобавкаВКэш.мКонтрагентыLawson);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Vendor) Тогда
			СтрокаТЧ.КонтрагентLawson = ПолучитьКонтрагентаLawson(СтрокаТЧ.Vendor, СтрокаТЧ.VendorVname,СтруктураКэша.мКонтрагентыLawson, ДобавкаВКэш.мКонтрагентыLawson);
		КонецЕсли;
		// } RGS MYurkevich 12.03.2015 14:17:13 - добавила таблицу кэша

		Если ПрименитьФильтр Тогда
			
			СтруктураПолей = ПрименитьФильтры_ДЗ(дзФильтры, СтрокаТЧ);
			Если СтруктураПолей = Неопределено Тогда
				СтрокаТЧ.FiscalType = ПустойТип;
				СтрокаТЧ.Модуль 	= Перечисления.МодулиРазработки.GL;
			Иначе                                             
				//12.09.2012 Пахоменков. Предопределенного элемента в справочнике нет, однако пустойТип - ищет как раз похожий, но не предопределенный элемент
				// при этом, он помечен на удаление. Непонятно. Заменил на пустойТип, что бы не выдавало ошибок.
				//СтрокаТЧ.FiscalType = ?(ЗначениеЗаполнено(СтруктураПолей.FiscalType), СтруктураПолей.FiscalType, Справочники.СтатьиДоходовИРасходов.NoTreatment);
				СтрокаТЧ.FiscalType = ?(ЗначениеЗаполнено(СтруктураПолей.FiscalType), СтруктураПолей.FiscalType, ПустойТип);
				СтрокаТЧ.Модуль 	= ?(ЗначениеЗаполнено(СтруктураПолей.Модуль), СтруктураПолей.Модуль, Перечисления.МодулиРазработки.GL);
			КонецЕсли;
		КонецЕсли;			
		
		СтрокаТЧ.GUID = Строка(Новый УникальныйИдентификатор());
		
	КонецЦикла;
	// Дописал Сучков
	ТЗ_CSV.Колонки.Удалить("BusSeg"); 
	ТЗ_CSV.Колонки.Удалить("SegDesc");
	ТЗ_CSV.Колонки.Удалить("SubSeg");
	ТЗ_CSV.Колонки.Удалить("SubsegDesc");
	ТЗ_CSV.Колонки.Удалить("SubSubSeg");
	ТЗ_CSV.Колонки.Удалить("SubsubsegDesc");
	ТЗ_CSV.Колонки.Удалить("Location");
	ТЗ_CSV.Колонки.Удалить("LocationDesc");
	ТЗ_CSV.Колонки.Удалить("AccountUnit");
	ТЗ_CSV.Колонки.Удалить("AcctUnitDesc");
	ТЗ_CSV.Колонки.Удалить("SummaryAcct");
	ТЗ_CSV.Колонки.Удалить("SummaryAcctDesc");
	ТЗ_CSV.Колонки.Удалить("Account");
	ТЗ_CSV.Колонки.Удалить("SubAccount");
	ТЗ_CSV.Колонки.Удалить("AccountDesc");
	ТЗ_CSV.Колонки.Удалить("MgmtNIS_BLSummaryAcct");
	//дописал Трефиленков
	ТЗ_CSV.Колонки.Удалить("Asset");
	ТЗ_CSV.Колонки.Удалить("AssetCode");
	ТЗ_CSV.Колонки.Удалить("AstSerialNbr");
	ТЗ_CSV.Колонки.Удалить("PostingDate");
	ТЗ_CSV.Колонки.Удалить("AutoRev");
	ТЗ_CSV.Колонки.Удалить("LegalFiscalFlag");
	ТЗ_CSV.Колонки.Удалить("Date");
	ТЗ_CSV.Колонки.Удалить("UpdateDate");
	ТЗ_CSV.Колонки.Удалить("AktDate");
	ТЗ_CSV.Колонки.Удалить("Journal");
	ТЗ_CSV.Колонки.Удалить("SeqTrnsNbr");
	ТЗ_CSV.Колонки.Удалить("OrigCompany");
	ТЗ_CSV.Колонки.Удалить("LineNbr");
	// Пахоменков 05.06.2012
	ТЗ_CSV.Колонки.Удалить("Area");
	ТЗ_CSV.Колонки.Удалить("AreaDesc");
	ТЗ_CSV.Колонки.Удалить("Geo");
	ТЗ_CSV.Колонки.Удалить("GeoDesc");
	ТЗ_CSV.Колонки.Удалить("SubGeo");
	ТЗ_CSV.Колонки.Удалить("SubGeoDesc");
	ТЗ_CSV.Колонки.Удалить("Mgmtctry");
	ТЗ_CSV.Колонки.Удалить("MgmtctryDesc");
	//<<	

	
	//Rg-Soft Пахоменков А.С. 05.10.2011 
	//мРегистраторы.Очистить();
	//<<      
	
	// Создание LawsonInvoice  создается раньше ДСС, что бы ДСС при проведении нашел инвойс
	табArInvoice = ТЗ_CSV.Скопировать();  	
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		УсловиеНеСоздаватьИнвойс = (НЕ (СокрЛП(табArInvoice[0].System) = "BL" И (СокрЛП(табArInvoice[0].Company) = "364"  ИЛИ ВСтроку(табArInvoice[0].Company) = "1698") И СокрЛП(табArInvoice[0].SourceCode) <> "JE" И СокрЛП(табArInvoice[0].SourceCode) <> "ZB"));
	Иначе
		УсловиеНеСоздаватьИнвойс = (НЕ (СокрЛП(табArInvoice[0].System) = "BL" И (СокрЛП(табArInvoice[0].Company) = "4"  ИЛИ ВСтроку(табArInvoice[0].Company) = "1698") И СокрЛП(табArInvoice[0].SourceCode) <> "JE" И СокрЛП(табArInvoice[0].SourceCode) <> "ZB"));
	КонецЕсли;
	// начало добавления, RG-Soft, Карасев В.В., 26.10.2016  вопрос ММВ-0000802
	Если СокрЛП(табArInvoice[0].System) = "AR" И СокрЛП(табArInvoice[0].SourceCode) = "RM" Тогда
		УсловиеНеСоздаватьИнвойс = Ложь;
	КонецЕсли;
	// конец добавления, RG-Soft, Карасев В.В., 26.10.2016  вопрос ММВ-0000802
	Если УсловиеНеСоздаватьИнвойс Тогда 
		// не создаем инвойс   14.05.2012
	//[<-РКХ]
	ИначеЕсли СтрНайти(ВРег(табArInvoice[0].Description),"REVENUE ACCRUAL") > 0 Тогда
		// не создаем инвойс		
	Иначе
		// { RGS MYurkevich 12.03.2015 14:21:08 - 
		//ПоискLawsonInvoice = табLawsonInvoice.Найти(табArInvoice[0].ArInvoice, "ArInvoice");
		ПоискLawsonInvoice = СтруктураКэша.табLawsonInvoice.Найти(табArInvoice[0].ArInvoice, "ArInvoice");
		// } RGS MYurkevich 12.03.2015 14:21:09 - 
			
		Если НЕ ЗначениеЗаполнено(ПоискLawsonInvoice) Тогда
			
			ПоискLawsonInvoice = Документы.LawsonInvoice.НайтиПоРеквизиту("ArInvoice", табArInvoice[0].ArInvoice);
			Если ПоискLawsonInvoice = Документы.LawsonInvoice.ПустаяСсылка() Тогда
				                                                                               
				Док = Документы.LawsonInvoice.СоздатьДокумент();
				Док.ArInvoice = табArInvoice[0].ArInvoice;
				Док.Дата = ТекущаяДата();
				Док.УстановитьНовыйНомер();
				Док.Записать();
				ПоискLawsonInvoice = Док.Ссылка; 
				
			КонецЕсли;	
			
			//исправила Федотова Л., РГ-Софт 22.05.2012
			
			//СтрокаТЧ = табLawsonInvoice.Добавить();
			//СтрокаТЧ.ArInvoice = СокрЛП(табArInvoice[0].ArInvoice);
			//СтрокаТЧ.Ссылка = ПоискLawsonInvoice;
			// { RGS MYurkevich 12.03.2015 14:21:48 - 
			СтрокаLawsonInvoice = ДобавкаВКэш.табLawsonInvoice.Добавить();
			// } RGS MYurkevich 12.03.2015 14:21:49 -  
			СтрокаLawsonInvoice.ArInvoice = СокрЛП(табArInvoice[0].ArInvoice);
			СтрокаLawsonInvoice.Ссылка = ПоискLawsonInvoice;
						
		КонецЕсли;	
	КонецЕсли; 
	
	//Rg-Soft Пахоменков А.С. 05.10.2011 
	
	//Этап 3. Создание документов ПроводкаDSS и проведение по регистрам
	
	ДокументПроводкаDSS =  Документы.ПроводкаDSS.СоздатьДокумент(); 	
	ЗаполнитьЗначенияСвойств(ДокументПроводкаDSS,СтрокаТЧ); 	
	ДокументПроводкаDSS.Номер = СтрокаТЧ.GltObjId; 
	ДокументПроводкаDSS.Дата = СтрокаТЧ.Период;
	ДокументПроводкаDSS.Документ = ДокументПроводкаDSS.Ссылка;  
	
	ЭтоПроводкаAPAP = (СокрЛП(СтрокаТЧ.System) = "AP" И (СокрЛП(СтрокаТЧ.SourceCode) = "AP" ИЛИ СокрЛП(СтрокаТЧ.SourceCode) = "VP"));
	Если ЭтоПроводкаAPAP Тогда
		ДокументПроводкаDSS.ТипПроводки = МеханизмыКнигиПокупок.ПолучитьТипПроводкиAPAP(СтрокаТЧ.TranAmount,СтрокаТЧ.Description);
		ДокументПроводкаDSS.Ваучер = МеханизмыКнигиПокупок.ПолучитьВаучерПоDescription(СтрокаТЧ.Description);
	КонецЕсли; 

	Попытка
		ДокументПроводкаDSS.Записать(РежимЗаписиДокумента.Запись);  	
		ДокументПроводкаDSS.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	//<<		
	
	//Rg-Soft Пахоменков 05.10.11 >>  Удалены 4 и 5 этапы <<
	
	ТЗ_CSV.Очистить();	
// { RGS MYurkevich 12.03.2015 12:09:02 -
    Возврат ДобавкаВКэш;
//КонецПроцедуры
КонецФункции
// } RGS MYurkevich 12.03.2015 12:09:04 - 	

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

Функция ВСтроку(ЧислоИлиСтрока)
	
	Возврат СтрЗаменить(СтрЗаменить(Формат(ЧислоИлиСтрока, "ЧГ=0"), Символы.НПП, ""), " ", "");
	
КонецФункции // ВСтроку()

Процедура ПроверитьНаNULL(СтрокаТЧ)
	
	//поля для регПроводкиDSSСведения
	Если СтрокаТЧ.MgmtNIS_BLSummaryAcct = NULL Тогда
		СтрокаТЧ.MgmtNIS_BLSummaryAcct = "";
	КонецЕсли;
	Если СтрокаТЧ.UpdateDate = NULL Тогда
		СтрокаТЧ.UpdateDate = Дата(1,1,1);
	КонецЕсли;
	Если СтрокаТЧ.SeqTrnsNbr = NULL Тогда
		СтрокаТЧ.SeqTrnsNbr = 0;
	КонецЕсли;
	Если СтрокаТЧ.OrigCompany = NULL Тогда
		СтрокаТЧ.OrigCompany = 0;
	КонецЕсли;
	Если СтрокаТЧ.Activity = NULL Тогда
		СтрокаТЧ.Activity = "";
	КонецЕсли;
	Если СтрокаТЧ.SourceCode = NULL Тогда
		СтрокаТЧ.SourceCode = "";
	КонецЕсли;
	Если СтрокаТЧ.System = NULL Тогда
		СтрокаТЧ.System = "";
	КонецЕсли;
	Если СтрокаТЧ.JeType = NULL Тогда
		СтрокаТЧ.JeType = "";
	КонецЕсли;
	Если СтрокаТЧ.Journal = NULL Тогда
		СтрокаТЧ.Journal = 0;
	КонецЕсли;
	Если СтрокаТЧ.LineNbr = NULL Тогда
		СтрокаТЧ.LineNbr = 0;
	КонецЕсли;
	Если СтрокаТЧ.AutoRev = NULL Тогда
		СтрокаТЧ.AutoRev = "";
	КонецЕсли;
	Если СтрокаТЧ.Operator = NULL Тогда
		СтрокаТЧ.Operator = "";
	КонецЕсли;
	Если СтрокаТЧ.LegalFiscalFlag = NULL Тогда
		СтрокаТЧ.LegalFiscalFlag = "";
	КонецЕсли;
	Если СтрокаТЧ.Vendor = NULL Тогда
		СтрокаТЧ.Vendor = "";
	КонецЕсли;
	Если СтрокаТЧ.VendorVname = NULL Тогда
		СтрокаТЧ.VendorVname = "";
	КонецЕсли;
	Если СтрокаТЧ.ApInvoice = NULL Тогда
		СтрокаТЧ.ApInvoice = "";
	КонецЕсли;
	Если СтрокаТЧ.TransNbr = NULL Тогда
		СтрокаТЧ.TransNbr = "";
	КонецЕсли;
	Если СтрокаТЧ.OrigOperatorId = NULL Тогда
		СтрокаТЧ.OrigOperatorId = "";
	КонецЕсли;
	Если СтрокаТЧ.ProcessLevel = NULL Тогда
		СтрокаТЧ.ProcessLevel = "";
	КонецЕсли;
	Если СтрокаТЧ.CashCode = NULL Тогда
		СтрокаТЧ.CashCode = "";
	КонецЕсли;
	Если СтрокаТЧ.PoNumber = NULL Тогда
		СтрокаТЧ.PoNumber = "";
	КонецЕсли;
	Если СтрокаТЧ.LineNbrIc = NULL Тогда
		СтрокаТЧ.LineNbrIc = 0;
	КонецЕсли;
	Если СтрокаТЧ.PoCode = NULL Тогда
		СтрокаТЧ.PoCode = "";
	КонецЕсли;
	Если СтрокаТЧ.Asset = NULL Тогда
		СтрокаТЧ.Asset = "";
	КонецЕсли;
	Если СтрокаТЧ.AssetCode = NULL Тогда
		СтрокаТЧ.AssetCode = "";
	КонецЕсли;
	Если СтрокаТЧ.AstSerialNbr = NULL Тогда
		СтрокаТЧ.AstSerialNbr = "";
	КонецЕсли;
	Если СтрокаТЧ.ItemDescription = NULL Тогда
		СтрокаТЧ.ItemDescription = "";
	КонецЕсли;
	Если СтрокаТЧ.CustomerNumber = NULL Тогда
		СтрокаТЧ.CustomerNumber = "";
	КонецЕсли;
	Если СтрокаТЧ.CustomerName = NULL Тогда
		СтрокаТЧ.CustomerName = "";
	КонецЕсли; 
	Если СтрокаТЧ.ArInvoice = NULL Тогда
		СтрокаТЧ.ArInvoice = "";
	КонецЕсли; 
	Если СтрокаТЧ.AktDate = NULL Тогда
		СтрокаТЧ.AktDate = Дата(1,1,1);
	КонецЕсли; 
	Если СтрокаТЧ.TaxCode = NULL Тогда
		СтрокаТЧ.TaxCode = "";
	КонецЕсли; 
	Если СтрокаТЧ.Item = NULL Тогда
		СтрокаТЧ.Item = "";
	КонецЕсли;
	Если СтрокаТЧ.DocumentNbr = NULL Тогда
		СтрокаТЧ.DocumentNbr = "";
	КонецЕсли;
	Если СтрокаТЧ.ContractNumber = NULL Тогда
		СтрокаТЧ.ContractNumber = "";
	КонецЕсли; 
	Если СтрокаТЧ.AktOfAcceptance = NULL Тогда
		СтрокаТЧ.AktOfAcceptance = "";
	КонецЕсли; 
	Если СтрокаТЧ.ApTransFormId = NULL Тогда
		СтрокаТЧ.ApTransFormId = "";
	КонецЕсли;  
	Если СтрокаТЧ.Company = NULL Тогда
		СтрокаТЧ.Company = 0;
	КонецЕсли;
	Если СтрокаТЧ.BaseAmount = NULL Тогда
		СтрокаТЧ.BaseAmount = 0;
	КонецЕсли;
	Если СтрокаТЧ.Date = NULL Тогда
		СтрокаТЧ.Date = Дата(1,1,1);
	КонецЕсли;
	Если СтрокаТЧ.TranAmount = NULL Тогда
		СтрокаТЧ.TranAmount = 0;
	КонецЕсли;
	Если СтрокаТЧ.Reference = NULL Тогда
		СтрокаТЧ.Reference = "";
	КонецЕсли;
	Если СтрокаТЧ.Description = NULL Тогда
		СтрокаТЧ.Description = "";
	КонецЕсли;
	Если СтрокаТЧ.Currency = NULL Тогда
		СтрокаТЧ.Currency = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБулевыПоля(СтрокаТЧ)
	
	Если СокрЛП(СтрокаТЧ.AutoRev) = "Y" Тогда
		СтрокаТЧ.AutoRevLawson = Истина;
	КонецЕсли;
	
	Если СокрЛП(СтрокаТЧ.LegalFiscalFlag) = "Y" Тогда
		СтрокаТЧ.LegalFiscalFlagLawson = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьВДату(Знач Строчка, Знач ВидДаты)
	
	Если ТипЗнч(Строчка) = Тип("Строка") Тогда
		СтрокаДляОбработки = СокрЛП(Строчка);
		Если СтрДлина(СтрокаДляОбработки) = 7 ИЛИ СтрДлина(СтрокаДляОбработки) = 9 Тогда
			СтрокаДляОбработки = "0" + СтрокаДляОбработки;
		КонецЕсли;
		
		День = Лев(СтрокаДляОбработки, 2);
		Месяц = Сред(СтрокаДляОбработки, 3, 2);
		Год = Прав(СтрокаДляОбработки, 2);
		Если СтрНайти(Месяц, "/") ИЛИ СтрНайти(Месяц, ".") ИЛИ СтрНайти(Месяц, ",") Тогда
			Месяц = Сред(СтрокаДляОбработки, 4, 2);
		КонецЕсли;
		
		Если СтрДлина(СтрокаДляОбработки) = 10 ИЛИ СтрДлина(СтрокаДляОбработки) = 18 Тогда
			Год = Сред(СтрокаДляОбработки, 7, 4);
		Иначе	
			Год = Прав(СтрокаДляОбработки, 2);
			Попытка
				Если Число(Год) > 50 Тогда
					Год = "19" + Год;
				Иначе
					Год = "20" + Год;
				КонецЕсли;
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли; 
		
		//Позиция = СтрНайти(СтрокаДляОбработки, " ");
		//Если Позиция Тогда                  //Позиция имеет тип Число, а не Булево, условие никогда не будет выполняться
		//	Год = Сред(СтрокаДляОбработки, Позиция -3, 2);
		//КонецЕсли;
		//	Если Число(Год) > 50 Тогда
		//		Год = "19" + Год;
		//	Иначе
		//		Год = "20" + Год;
		//	КонецЕсли;
		//Исключение
		//	Возврат Дата(1,1,1);
		//КонецПопытки;
		////этого не было, выскакивали ошибки, на которые шло много времени    автор Сучков
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Дата") Тогда
		Возврат Строчка;
	ИначеЕсли  ТипЗнч(Строчка) = Тип("Число") Тогда 
		День = Цел(Строчка/10000);
		Месяц = Цел((Строчка - День*10000)/100);
		Год = Строчка - День*10000 - Месяц * 100;
		Попытка
			Если Число(Год) > 50 Тогда
				Год = 1900 + Год;
			Иначе
				Год = 2000 + Год;
			КонецЕсли;
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
		//конец Дописал Сучков
	Иначе		
		Возврат Дата(1,1,1);
	КонецЕсли;	
	Попытка 
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
	
КонецФункции

Процедура ПреобразованиеСокрЛП(СтрокаТЧ)
	
	СтрокаТЧ.Reference = СокрЛП(СтрокаТЧ.Reference);
	СтрокаТЧ.Description = СокрЛП(СтрокаТЧ.Description);
	СтрокаТЧ.TransNbr = СокрЛП(СтрокаТЧ.TransNbr);
	СтрокаТЧ.Vendor = СокрЛП(СтрокаТЧ.Vendor);
	СтрокаТЧ.VendorVname = СокрЛП(СтрокаТЧ.VendorVname);
	СтрокаТЧ.CustomerNumber = СокрЛП(СтрокаТЧ.CustomerNumber);
	СтрокаТЧ.CustomerName = СокрЛП(СтрокаТЧ.CustomerName);
	СтрокаТЧ.ApInvoice = СокрЛП(СтрокаТЧ.ApInvoice);
	СтрокаТЧ.ArInvoice = СокрЛП(СтрокаТЧ.ArInvoice);
	СтрокаТЧ.PoNumber = СокрЛП(СтрокаТЧ.PoNumber);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С КЭШЕМ
// { RGS MYurkevich 12.03.2015 13:56:11 - добавила таблицу нового кэша
Функция НайтиОсновныеСредстваLawson(Код, Наименование, СерийныйНомер, мОсновныеСредстваLawson, Кэш)
	
	ОС_Lawson = НайтиВКэше(ВСтроку(Код), мОсновныеСредстваLawson);
	Если ОС_Lawson.Пустая() Тогда
		ОС_Lawson = Справочники.ОсновныеСредстваLawson.НайтиПоКоду( ВСтроку(Код));
		Если ОС_Lawson = Справочники.ОсновныеСредстваLawson.ПустаяСсылка() Тогда
			Об = Справочники.ОсновныеСредстваLawson.СоздатьЭлемент();
			Об.Код = ВСтроку(Код);
			Об.Наименование = СокрЛП(Наименование);
			Об.СерийныйНомер = ВСтроку(СерийныйНомер);
			Об.Записать();
			ОС_Lawson = Об.Ссылка;
		КонецЕСли;
	
		ДобавитьВКэш(ОС_Lawson.Код, ОС_Lawson.Ссылка, Кэш);
				
	КонецЕсли;
	Возврат ОС_Lawson.Ссылка;
	
КонецФункции

Функция ПолучитьКонтрагентаLawson(Код, Наименование,мКонтрагентыLawson, Кэш)
	
	ПоискКонтрагентаLawson = мКонтрагентыLawson.Найти(СокрЛП(Код), "Код");
	
	Если не ЗначениеЗаполнено(ПоискКонтрагентаLawson) Тогда
		ПоискКонтрагентаLawson = Справочники.КонтрагентыLawson.НайтиПоКоду(СокрЛП(Код));
		Если ПоискКонтрагентаLawson = Справочники.КонтрагентыLawson.ПустаяСсылка() Тогда
			ПоискКонтрагентаLawson = Справочники.КонтрагентыLawson.СоздатьЭлемент();
			ПоискКонтрагентаLawson.Код = СокрЛП(Код);
			ПоискКонтрагентаLawson.Наименование = Наименование;
			ПоискКонтрагентаLawson.Записать();
		КонецЕсли;
		// { RGS MYurkevich 12.03.2015 14:19:01 - 
		//СтрокаТЧ = мКонтрагентыLawson.Добавить();
		СтрокаТЧ = Кэш.Добавить();
		// } RGS MYurkevich 12.03.2015 14:19:01 - 
		СтрокаТЧ.Код = СокрЛП(Код);
		СтрокаТЧ.Ссылка = ПоискКонтрагентаLawson.Ссылка;
	КонецЕсли;
	
	Возврат ПоискКонтрагентаLawson.Ссылка;
	
КонецФункции
// { RGS MYurkevich 12.03.2015 13:56:11 - добавила таблицу нового кэша

// Добавил Пахоменков А.С, 05.06.2012
// { RGS MYurkevich 12.03.2015 13:56:11 - добавила таблицу нового кэша
Функция ОбновитьЭлементИерархическогоСправочника(Код, Наименование, Родитель, КэшТаблица, НовыйКэш, ИмяСправочника, Группа = Ложь)
	
	СтрокаЭлемента = КэшТаблица.Найти(СокрЛП(ВСтроку(Код)), "Код");
	
	// Элемент НЕ найден в кэше
	Если НЕ ЗначениеЗаполнено(СтрокаЭлемента) Тогда
		
		Элемент = Неопределено;
		Выполнить("Элемент = Справочники."+ ИмяСправочника + ".НайтиПоКоду(СокрЛП(Код))");
		// Элемент не найден в справочнике     
		Если НЕ ЗначениеЗаполнено(Элемент) Тогда
			
			Если Группа Тогда
				Объект = Неопределено;
				Выполнить("Объект = Справочники."+ ИмяСправочника + ".СоздатьГруппу()");
			Иначе
				Выполнить("Объект = Справочники."+ ИмяСправочника + ".СоздатьЭлемент()");
			КонецЕсли;
			                                       
			Объект.Код = СокрЛП(Код);
			Объект.Наименование = СокрЛП(Наименование);
			
			Если ЗначениеЗаполнено(Родитель) Тогда
				Объект.Родитель = Родитель;	
			КонецЕсли;
			Объект.Записать();
			
			Элемент = Объект.Ссылка;
		// обновить родителя	
		Иначе   
			
			ОбновитьРодителяЭлемента(Элемент,Элемент.Родитель,Родитель);
		
		КонецЕсли;
		
		// добавление геомаркета в кэш  // здесь идет обращение по ссылке, но таких случаев должно быть мало, потом можно переписать
		ДобавитьВКэш(Элемент.Код, Элемент.Ссылка, НовыйКэш, Элемент.Родитель);

		Возврат Элемент;
		
	// Элемент найден в кэше
	Иначе
		// только обновить родителя
		ОбновитьРодителяЭлемента(СтрокаЭлемента.Ссылка,СтрокаЭлемента.Родитель,Родитель);
		Возврат СтрокаЭлемента.Ссылка;
		
	КонецЕсли;  
	
КонецФункции

// Добавил Пахоменков А.С, 05.06.2012
Процедура ОбновитьРодителяЭлемента(СсылкаНаОбъект,СтарыйРодитель,НовыйРодитель)
	
	Если СтарыйРодитель <> НовыйРодитель Тогда
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		Объект.Родитель = НовыйРодитель;
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Ошибка при изменении старого родителя " + СтарыйРодитель + " на нового родителя " + НовыйРодитель 
			+ " для сегмента " + СсылкаНаОбъект);
		КонецПопытки;
	КонецЕсли;    
	
КонецПроцедуры

// Переписал Пахоменков А.С, 05.06.2012
// { RGS MYurkevich 12.03.2015 13:52:39 - добавила таблицу кэша 
Функция НайтиGeoMarket(СтрокаТЧ, мGeoMarkets, Кэш)

  	
		Area 		= Справочники.GeoMarkets.ПустаяСсылка();
		Geo 		= Справочники.GeoMarkets.ПустаяСсылка();
		SubGeo 		= Справочники.GeoMarkets.ПустаяСсылка();
		Mgmtctry 	= Справочники.GeoMarkets.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Area) Тогда
			Area    = ОбновитьЭлементИерархическогоСправочника(СтрокаТЧ.Area, СтрокаТЧ.AreaDesc, Справочники.GeoMarkets.ПустаяСсылка(), мGeoMarkets, Кэш, "GeoMarkets", Истина);	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Geo) Тогда
			Geo     = ОбновитьЭлементИерархическогоСправочника(СтрокаТЧ.Geo, СтрокаТЧ.GeoDesc, Area, мGeoMarkets, Кэш, "GeoMarkets", Истина);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.SubGeo) Тогда
			SubGeo 	= ОбновитьЭлементИерархическогоСправочника(СтрокаТЧ.SubGeo, СтрокаТЧ.SubGeoDesc, Geo, мGeoMarkets, Кэш, "GeoMarkets", Истина);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Mgmtctry) Тогда
			Mgmtctry = ОбновитьЭлементИерархическогоСправочника(СтрокаТЧ.Mgmtctry, СтрокаТЧ.MgmtctryDesc, SubGeo, мGeoMarkets, Кэш, "GeoMarkets" );
		КонецЕсли;
		
		Возврат Mgmtctry;       	
	
	//табЗаписей.Колонки.Добавить("GeoMarket", Новый ОписаниеТипов("СправочникСсылка.GeoMarkets"));
	//Для Каждого Запись Из табЗаписей Цикл
	//	
	//	НайтиGeoMarket = мGeoMarkets.Найти(ВСтроку(Запись.Mgmtctry), "Код");
	//	Если НайтиGeoMarket = Неопределено Тогда
	//		Если НЕ Запись.Area = Null Тогда
	//			Родитель = ПолучитьGeoMarket(Запись.Area	, Запись.AreaDesc	, Родитель,мGeoMarkets, Истина);
	//			Если НЕ Запись.Geo = Null Тогда
	//				Родитель = ПолучитьGeoMarket(Запись.Geo		, Запись.GeoDesc	, Родитель,мGeoMarkets, Истина);
	//				Если НЕ Запись.SubGeo = Null Тогда
	//					Родитель = ПолучитьGeoMarket(Запись.SubGeo	, Запись.SubGeoDesc	, Родитель,мGeoMarkets, Истина);
	//					Если НЕ Запись.Mgmtctry = Null Тогда
	//						Запись.GeoMarket = ПолучитьGeoMarket(Запись.Mgmtctry, Запись.MgmtctryDesc, Родитель,мGeoMarkets);									
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		Иначе
	//			Если НЕ Запись.Geo = Null Тогда
	//				Родитель = ПолучитьGeoMarket(Запись.Geo		, Запись.GeoDesc	, Родитель,мGeoMarkets, Истина);
	//				Если НЕ Запись.SubGeo = Null Тогда
	//					Родитель = ПолучитьGeoMarket(Запись.SubGeo	, Запись.SubGeoDesc	, Родитель,мGeoMarkets, Истина);
	//					Если НЕ Запись.Mgmtctry = Null Тогда
	//						Запись.GeoMarket = ПолучитьGeoMarket(Запись.Mgmtctry, Запись.MgmtctryDesc, Родитель,мGeoMarkets);									
	//					КонецЕсли;
	//				КонецЕсли;
	//			Иначе
	//				Если НЕ Запись.SubGeo = Null Тогда
	//					Родитель = ПолучитьGeoMarket(Запись.SubGeo	, Запись.SubGeoDesc	, Родитель,мGeoMarkets, Истина);
	//					Если НЕ Запись.Mgmtctry = Null Тогда
	//						Запись.GeoMarket = ПолучитьGeoMarket(Запись.Mgmtctry, Запись.MgmtctryDesc, Родитель,мGeoMarkets);									
	//					КонецЕсли;
	//				Иначе
	//					Если НЕ Запись.Mgmtctry = Null Тогда
	//						Запись.GeoMarket = ПолучитьGeoMarket(Запись.Mgmtctry, Запись.MgmtctryDesc, Родитель,мGeoMarkets);									
	//					КонецЕсли;						
	//				КонецЕсли;
	//			КонецЕсли;				
	//		КонецЕсли;
	//	Иначе
	//		Запись.GeoMarket = НайтиGeoMarket.Ссылка;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецФункции

Функция ПроверкаНаNullAccount(СтрокаТЧ)
	
	Если СтрокаТЧ.MgmtNIS_BLSummaryAcct = Null ИЛИ СтрокаТЧ.SummaryAcct = Null ИЛИ СтрокаТЧ.Account = Null Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Пахоменков А.С. 05.06.2012 добавил обработку родителя
Процедура ДобавитьВКэш(Код, Ссылка, ТабЗнач, Родитель = Неопределено, GeoMarket = Неопределено, ИмяТаблицы = Неопределено)
	
	Строчка = ТабЗнач.Добавить();
	Строчка.Код = ВСтроку(Код);                     
	Строчка.Ссылка = Ссылка;
	Если Родитель <> Неопределено Тогда
		Строчка.Родитель = Родитель;
	КонецЕсли;
	Если GeoMarket <> Неопределено Тогда
		Строчка.GeoMarket = GeoMarket;
	КонецЕсли; 
	
	// { RGS LFedotova 13.09.2016 22:32:15 - вопрос SLI-0006743
	Если ИмяТаблицы = "мЮниты" Тогда
	    Строчка.Geo = Ссылка.Geomarket;
	    Строчка.Segment = Ссылка.Segment;
	    Строчка.SubSegment = Ссылка.SubSegment;
	    Строчка.Локация = Ссылка.ПодразделениеОрганизации;
	    Строчка.Сегмент = Ссылка.Сегмент;
	КонецЕсли; 
	// } RGS LFedotova 13.09.2016 22:33:18 - вопрос SLI-0006743
	
КонецПроцедуры                                                  

//  Переписал Пахоменков А.С, 05.06.2012
Функция НайтиСчетLawson(СтрокаТЧ, мСчета)
	         
	Код          =  СокрЛП(Лев(ВСтроку(СтрокаТЧ.MgmtNIS_BLSummaryAcct),6));
	КодЧислом    =  Код;
	ПорядокКода  =  Код;
	Наименование =  СтрокаТЧ.MgmtNIS_BLSummaryAcct;
	//ИмяДопПоля	 =  "";     
	
	MgmtNIS = ОбновитьСчетLawson(Код, КодЧислом, ПорядокКода, Наименование, ПланыСчетов.Lawson.ПустаяСсылка(), мСчета);	
	
	Код          =  СокрЛП(ВСтроку(СтрокаТЧ.SummaryAcct));
	КодЧислом    =  Код;
	ПорядокКода  =  Код;
	Наименование =  СтрокаТЧ.SummaryAcctDesc;
	//ИмяДопПоля	 =  "SumAcctNumber";  
	
	SumAccount = ОбновитьСчетLawson(Код, КодЧислом, ПорядокКода, Наименование, MgmtNIS, мСчета);
	
	Код          =  СокрЛП(ВСтроку(СтрокаТЧ.Account) + ?(ЗначениеЗаполнено(ВСтроку(СтрокаТЧ.SubAccount)), "." + ВСтроку(СтрокаТЧ.SubAccount), ""));
	КодЧислом    =  ВСтроку(СтрокаТЧ.Account);
	ПорядокКода  =  Код;
	Наименование =  СокрЛП(СтрокаТЧ.AccountDesc);
	//ИмяДопПоля	 =  "AccountNumber";  
	
	Account = ОбновитьСчетLawson(Код, КодЧислом, ПорядокКода, Наименование, SumAccount, мСчета);	
	
	Возврат Account;	
	
	//ИмяNIS = Лев(ВСтроку(СтрокаТЧ.MgmtNIS_BLSummaryAcct),6);
	//MgmtNIS = НайтиВКэше(ИмяNIS, мСчета);
	//Если MgmtNIS.Пустая() Тогда
	//	MgmtNIS = ПланыСчетов.Lawson.НайтиПоКоду(ИмяNIS);
	//	Если MgmtNIS = ПланыСчетов.Lawson.ПустаяСсылка() Тогда
	//		MgmtNIS = ПланыСчетов.Lawson.СоздатьСчет();
	//		MgmtNIS.Код = ИмяNIS;
	//		MgmtNIS.КодЧислом = ИмяNIS;
	//		MgmtNIS.Порядок = ИмяNIS;
	//		MgmtNIS.Наименование = СокрЛП(СтрокаТЧ.MgmtNIS_BLSummaryAcct);
	//		MgmtNIS.Записать();
	//	КонецЕсли;
	//	ДобавитьВКэш(MgmtNIS.Код, MgmtNIS.Ссылка, мСчета);
	//КонецЕсли;
	//
	//ОбщСчет = НайтиВКэше(ВСтроку(СтрокаТЧ.SummaryAcct), мСчета);
	//Если ОбщСчет.Пустая() Тогда
	//	ОбщСчет = ПланыСчетов.Lawson.НайтиПоКоду(ВСтроку(СтрокаТЧ.SummaryAcct));
	//	Если ОбщСчет = ПланыСчетов.Lawson.ПустаяСсылка() Тогда
	//		ОбщСчет = ПланыСчетов.Lawson.СоздатьСчет();
	//		ОбщСчет.Код = ВСтроку(СтрокаТЧ.SummaryAcct);
	//		ОбщСчет.КодЧислом = ВСтроку(СтрокаТЧ.SummaryAcct);
	//		СтрокаТЧ.SumAcctNumber = ОбщСчет.КодЧислом;  
	//		ОбщСчет.Порядок = ВСтроку(СтрокаТЧ.SummaryAcct);
	//		ОбщСчет.Наименование = СокрЛП(СтрокаТЧ.SummaryAcctDesc);
	//		ОбщСчет.Родитель = MgmtNIS.Ссылка;
	//		ОбщСчет.Записать();
	//	КонецЕсли;
	//	ДобавитьВКэш(ОбщСчет.Код, ОбщСчет.Ссылка, мСчета);
	//КонецЕсли;
	//
	//КодСчета = ВСтроку(СтрокаТЧ.Account) + ?(ЗначениеЗаполнено(ВСтроку(СтрокаТЧ.SubAccount)), "." + ВСтроку(СтрокаТЧ.SubAccount), "");
	//Счет = НайтиВКэше(КодСчета, мСчета);
	//Если Счет.Пустая() Тогда
	//	Счет = ПланыСчетов.Lawson.НайтиПоКоду(КодСчета);
	//	Если Счет = ПланыСчетов.Lawson.ПустаяСсылка() Тогда
	//		Счет = ПланыСчетов.Lawson.СоздатьСчет();
	//		Счет.Код = КодСчета;
	//		Счет.КодЧислом = ВСтроку(СтрокаТЧ.Account);
	//		СтрокаТЧ.AccountNumber = Счет.КодЧислом;
	//		Счет.Порядок = КодСчета;
	//		Счет.Наименование = СокрЛП(СтрокаТЧ.AccountDesc);
	//		Счет.Родитель = ОбщСчет.Ссылка;
	//		Попытка
	//			Счет.Записать();
	//			//ДобавитьВКэш(Счет.Код, Счет.Ссылка, мСчета);
	//			Счет = Счет.Ссылка
	//		Исключение
	//			Счет = ПланыСчетов.Lawson.ПустаяСсылка();
	//		КонецПопытки;
	//	КонецЕсли;
	//	Если не Счет = ПланыСчетов.Lawson.ПустаяСсылка() Тогда
	//		ДобавитьВКэш(Счет.Код, Счет.Ссылка, мСчета);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Счет;
	
КонецФункции

//Добавил Пахоменков 05.06.2012 p.s.
//если понадобится задавать больше уникальных значений для СтрокаТЧ, можно это реализовать через массив структур (имя поля - значение) 
Функция ОбновитьСчетLawson(КодСчета, КодЧислом, Порядок, Наименование, Родитель, мСчета) //СтрокаТЧ, ИмяПоляКодЧислом,  //оказывается в верхней функции это задается
	
	СтрокаСчета = мСчета.Найти(ВРег(СокрЛП(КодСчета)), "Код");   //ИЩЕМ В ВЕРХНЕМ РЕГИСТРЕ! 
	//Счет НЕ найден к кэше
	Если НЕ ЗначениеЗаполнено(СтрокаСчета) Тогда
		Счет = ПланыСчетов.Lawson.НайтиПоКоду(СокрЛП(КодСчета));
		//Счет не найден в плане счетов
		Если Счет = ПланыСчетов.Lawson.ПустаяСсылка() Тогда
			Объект 					= ПланыСчетов.Lawson.СоздатьСчет();
			Объект.Код 				= КодСчета;
			Объект.КодЧислом 		= КодЧислом;
			Объект.Порядок 			= Порядок;
			Объект.Наименование		= СокрЛП(Наименование);
			Если ЗначениеЗаполнено(Родитель) Тогда
				Объект.Родитель = Родитель;	
			КонецЕсли;
			//Если ЗначениеЗаполнено(ИмяПоляКодЧислом) Тогда
			//	Выполнить ("СтрокаТЧ."+ИмяПоляКодЧислом+" = " + КодЧислом);
			//КонецЕсли;
			Попытка
				Объект.Записать();
				Счет = Объект.Ссылка;
			Исключение
				Счет = ПланыСчетов.Lawson.ПустаяСсылка();
			КонецПопытки;
			//Только обновление родителя
		Иначе
			ОбновитьРодителяЭлемента(Счет,Счет.Родитель,Родитель);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Счет) Тогда
			ДобавитьВКэш(Счет.Код, Счет.Ссылка, мСчета, Счет.Родитель);
		КонецЕсли;      
		Возврат Счет;
		
		//Cчет найден в кэше
	Иначе
		ОбновитьРодителяЭлемента(СтрокаСчета.Ссылка,СтрокаСчета.Ссылка.Родитель,Родитель);
		Возврат СтрокаСчета.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// { RGS MYurkevich 12.03.2015 13:59:36 - добавила таблицу кэша	
Функция НайтиСегмент(СтрокаТЧ,мСегменты, Кэш)
	
	Сегмент 		= Справочники.Сегменты.ПустаяСсылка();
	СубСегмент 		= Справочники.Сегменты.ПустаяСсылка();
	СубСубСегмент 	= Справочники.Сегменты.ПустаяСсылка(); 
	
	Если ЗначениеЗаполнено(СтрокаТЧ.BusSeg) Тогда
		Сегмент    		= ОбновитьЭлементИерархическогоСправочника(ВСтроку(СтрокаТЧ.BusSeg), СокрЛП(СтрокаТЧ.SegDesc), Справочники.Сегменты.ПустаяСсылка(), мСегменты, Кэш, "Сегменты", Истина);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТЧ.SubSeg) Тогда
		СубСегмент     	=  ОбновитьЭлементИерархическогоСправочника(ВСтроку(СтрокаТЧ.SubSeg), СокрЛП(СтрокаТЧ.SubsegDesc), Сегмент, мСегменты, Кэш, "Сегменты", Истина);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.SubSubSeg) Тогда
		СубСубСегмент 	=  ОбновитьЭлементИерархическогоСправочника(ВСтроку(СтрокаТЧ.SubSubSeg), СокрЛП(СтрокаТЧ.SubsubsegDesc), СубСегмент, мСегменты, Кэш, "Сегменты" );	
	КонецЕсли;  	
	
	Возврат СубСубСегмент;
	
	//Сегмент = НайтиВКэше(ВСтроку(СтрокаТЧ.BusSeg), мСегменты);
	//Если Сегмент.Пустая() Тогда
	//	Сегмент = Справочники.Сегменты.НайтиПоКоду(ВСтроку(СтрокаТЧ.BusSeg));
	//	Если Сегмент = Справочники.Сегменты.ПустаяСсылка() Тогда
	//		Сегмент = Справочники.Сегменты.СоздатьГруппу();
	//		Сегмент.Код = ВСтроку(СтрокаТЧ.BusSeg);
	//		Сегмент.Наименование = СокрЛП(СтрокаТЧ.SegDesc);
	//		Сегмент.Записать();
	//	КонецЕсли;
	//	ДобавитьВКэш(Сегмент.Код, Сегмент.Ссылка, мСегменты);
	//КонецЕсли;
	//
	//СубСегмент = НайтиВКэше(ВСтроку(СтрокаТЧ.SubSeg), мСегменты);
	//Если СубСегмент.Пустая() Тогда
	//	СубСегмент = Справочники.Сегменты.НайтиПоКоду(ВСтроку(СтрокаТЧ.SubSeg));
	//	Если СубСегмент = Справочники.Сегменты.ПустаяСсылка() Тогда
	//		СубСегмент = Справочники.Сегменты.СоздатьГруппу();
	//		СубСегмент.Код = ВСтроку(СтрокаТЧ.SubSeg);
	//		СубСегмент.Наименование = СокрЛП(СтрокаТЧ.SubsegDesc);
	//		СубСегмент.Родитель = Сегмент;
	//		СубСегмент.Записать();
	//	КонецЕсли;
	//	ДобавитьВКэш(СубСегмент.Код, СубСегмент.Ссылка, мСегменты);
	//КонецЕсли;
	//
	//СубСубСегмент = НайтиВКэше(ВСтроку(СтрокаТЧ.SubSubSeg), мСегменты);
	//Если СубСубСегмент.Пустая() Тогда
	//	СубСубСегмент = Справочники.Сегменты.НайтиПоКоду(ВСтроку(СтрокаТЧ.SubSubSeg));
	//	Если СубСубСегмент = Справочники.Сегменты.ПустаяСсылка() Тогда
	//		СубСубСегмент = Справочники.Сегменты.СоздатьЭлемент();
	//		СубСубСегмент.Код = ВСтроку(СтрокаТЧ.SubSubSeg);
	//		СубСубСегмент.Наименование = СокрЛП(СтрокаТЧ.SubsubsegDesc);
	//		СубСубСегмент.Родитель = СубСегмент;
	//		СубСубСегмент.Записать();
	//	КонецЕсли;
	//	ДобавитьВКэш(СубСубСегмент.Код, СубСубСегмент.Ссылка, мСегменты);
	//КонецЕсли;
	//
	//Возврат СубСубСегмент;
	
КонецФункции

Функция НайтиЛокацию(СтрокаТЧ,мЛокации, Кэш)
	
	СтрокаЛокация = мЛокации.Найти(ВСтроку(СтрокаТЧ.Location), "Код"); 
	
	//Локация НЕ найдена к кэше
	Если НЕ ЗначениеЗаполнено(СтрокаЛокация) Тогда
		Локация = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаТЧ.Location);
		//Локация НЕ найдена к справочнике
		Если Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Локация = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();			
			//[РКХ->]
			Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
				//Изменила Федотова Л., РГ-Софт, 01.10.13, вопрос PA_-0000019 ->
				//Локация.Владелец = Справочники.Организации.НайтиПоКоду("00001");
				Локация.Владелец = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
				//<-
			Иначе
				Локация.Владелец = Справочники.Организации.НайтиПоКоду("00001");
			КонецЕсли;
			//[<-РКХ] 			
			Локация.Код = ВСтроку(СтрокаТЧ.Location);
			Локация.Наименование = СокрЛП(СтрокаТЧ.LocationDesc);
			Локация.GeoMarket = СтрокаТЧ.GeoMarket;
			Локация.Записать();
		Иначе
			Если Локация.GeoMarket <> СтрокаТЧ.GeoMarket Тогда
				Объект = Локация.ПолучитьОбъект();
				Объект.GeoMarket = СтрокаТЧ.GeoMarket;	
				Объект.Записать();
				Локация = Объект.Ссылка;
			КонецЕсли;   
		КонецЕсли;	
		ДобавитьВКэш(Локация.Код, Локация.Ссылка, Кэш, Локация.GeoMarket);
		Возврат Локация;
	// Обновить GeoMarket
	Иначе
		Если СтрокаЛокация.GeoMarket <> СтрокаТЧ.GeoMarket Тогда
			Объект = СтрокаЛокация.Ссылка.ПолучитьОбъект();
			Объект.GeoMarket = СтрокаТЧ.GeoMarket;	
			Объект.Записать();
		КонецЕсли; 
		
		Возврат СтрокаЛокация.Ссылка;
		
	КонецЕсли; 	
	

	//Локация = НайтиВКэше(ВСтроку(СтрокаТЧ.Location), мЛокации);
	//Если Локация.Пустая() Тогда
	//	Локация = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтрокаТЧ.Location);
	//	Если Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
	//		Локация = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
	//		Локация.Владелец = Справочники.Организации.НайтиПоКоду("00001");
	//		Локация.Код = ВСтроку(СтрокаТЧ.Location);
	//		Локация.Наименование = СокрЛП(СтрокаТЧ.LocationDesc);
	//		Локация.Записать();
	//	КонецЕсли;	
	//	ДобавитьВКэш(Локация.Код, Локация.Ссылка, мЛокации);
	//КонецЕсли;
	//
	//Возврат Локация;
	
КонецФункции
// } RGS MYurkevich 12.03.2015 13:59:36 - добавила таблицу кэша

Функция ПроверкаНаNullAU(СтрокаТЧ)
	
	Если СтрокаТЧ.AccountUnit = Null ИЛИ СтрокаТЧ.BusSeg = Null ИЛИ СтрокаТЧ.SubSeg = Null ИЛИ СтрокаТЧ.SubSubSeg = Null ИЛИ СтрокаТЧ.Location = Null Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиAU(СтрокаТЧ, Локация, мЮниты, PeriodLawson) 	
	
	Segment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(СтрокаТЧ.BusSeg));
	Если Segment.Пустая() Тогда
	    SegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SegmentОбъект.Код = СтрокаТЧ.BusSeg;
		SegmentОбъект.Наименование = СтрокаТЧ.BusSeg;
		SegmentОбъект.Записать();
	    Segment = SegmentОбъект.Ссылка;
	КонецЕсли;
	SubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(СтрокаТЧ.SubSeg));
	Если SubSegment.Пустая() Тогда
	    SubSegmentОбъект = Справочники.Сегменты.СоздатьГруппу();
		SubSegmentОбъект.Код = СтрокаТЧ.BusSeg;
		SubSegmentОбъект.Наименование = СтрокаТЧ.BusSeg;
		SubSegmentОбъект.Родитель = Segment;
		SubSegmentОбъект.Записать();
	    SubSegment = SegmentОбъект.Ссылка;
	КонецЕсли;
	SsubSegment = Справочники.Сегменты.НайтиПоКоду(СокрЛП(СтрокаТЧ.SubSubSeg));
	Если SsubSegment.Пустая() Тогда
	    SsubSegmentОбъект = Справочники.Сегменты.СоздатьЭлемент();
		SsubSegmentОбъект.Код = СтрокаТЧ.BusSeg;
		SsubSegmentОбъект.Наименование = СтрокаТЧ.GeoDesc;
		SsubSegmentОбъект.Родитель = SubSegment;
		SsubSegmentОбъект.Записать();
	    SsubSegment = SegmentОбъект.Ссылка;
	КонецЕсли;                                                                           
	// { RGS LFedotova 13.09.2016 16:48:53 - вопрос SLI-0006779
	GeoMarket = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(СтрокаТЧ.Geo));
	Если GeoMarket.Пустая() Тогда
	    GeoMarketОбъект = Справочники.GeoMarkets.СоздатьЭлемент();
		GeoMarketОбъект.Код = СтрокаТЧ.Geo;
		GeoMarketОбъект.Наименование = СтрокаТЧ.GeoDesc;
		GeoMarketОбъект.Родитель = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(СтрокаТЧ.Area));
		GeoMarketОбъект.Записать();                                 
	    GeoMarket = GeoMarketОбъект.Ссылка;
	КонецЕсли;
	SubGeoMarket = Справочники.GeoMarkets.НайтиПоКоду(СокрЛП(СтрокаТЧ.SubGeo));
	Если SubGeoMarket.Пустая() Тогда
	    SubGeoMarketОбъект = Справочники.GeoMarkets.СоздатьЭлемент();
		SubGeoMarketОбъект.Код = СтрокаТЧ.SubGeo;
		SubGeoMarketОбъект.Наименование = СтрокаТЧ.SubgeoDesc;
		SubGeoMarketОбъект.Родитель = GeoMarket;
		SubGeoMarketОбъект.Записать();                                 
	    SubGeoMarket = SubGeoMarketОбъект.Ссылка;
	КонецЕсли;
	// } RGS LFedotova 13.09.2016 16:49:05 - вопрос SLI-0006779
	
	Код = РегламентированнаяОтчетность.ДополнитьСтроку(ВСтроку(СтрокаТЧ.AccountUnit),7,"0");
	
	//Проверим, есть ли AU с этим кодом в регистре сведений "Сегменты кост-центров"
	AUвРегистре = РГСофт.НайтиAU(PeriodLawson, Код);
	
	//Поищем в кэше по коду и сегментам	
	AU = НайтиAUПоКодуИСегментам(мЮниты, Код, Segment, SubSegment, SsubSegment);  // AU найден в кэше
	
	Если AU = Неопределено Тогда // AU с соответствующими сегментами не найден в кэше
		
		//Проверим, нужно ли менять структуру сегментов, если нужно, поменяем
		Если SubSegment <> SsubSegment.Родитель ИЛИ Segment <> SubSegment.Родитель Тогда
			Стр = Новый Структура;
			Стр.Вставить("Segment",СтрокаТЧ.BusSeg);
			Стр.Вставить("SubSegment",СтрокаТЧ.SubSeg);
			Стр.Вставить("SsubSegment",СтрокаТЧ.SubSubSeg);
			РГСофт.ИзменитьСтруктуруСегментов(Стр, Segment, SubSegment, SsubSegment);
		КонецЕсли;
		
		Объект = Справочники.КостЦентры.СоздатьЭлемент();
		Объект.Код = Код;
		Объект.Наименование = СокрЛП(СтрокаТЧ.AcctUnitDesc);
		Объект.Сегмент = SsubSegment;
		Объект.SubSegment = SubSegment;
		Объект.Segment = Segment;                            
		
		Объект.ПодразделениеОрганизации = Локация;
		
		// { RGS LFedotova 13.09.2016 17:08:25 - 
		Объект.Geomarket = Geomarket;
		Объект.SubGeomarket = SubGeomarket;
		// } RGS LFedotova 13.09.2016 17:08:26 - 
		
		//-> RG-Soft VIvanov 2015/02/18
		Объект.ДополнительныеСвойства.Вставить("ЗагрузкаИзDSS", Истина);
		//<- RG-Soft VIvanov
		Объект.Записать();
		AU = Объект.Ссылка;
		
		
		//-> RG-Soft VIvanov 2015/02/18
		ЗаписьСегмента = РегистрыСведений.СегментыКостЦентров.СоздатьМенеджерЗаписи();
		Если ЗначениеЗаполнено(AUвРегистре) Тогда
			ЗаписьСегмента.Период = НачалоМесяца(PeriodLawson);
		Иначе
			ЗаписьСегмента.Период = Дата("19000101000000");
		КонецЕсли; 
		ЗаписьСегмента.Код = Код;
		ЗаписьСегмента.КостЦентр = AU;
		ЗаписьСегмента.Записать();
		//<- RG-Soft VIvanov
		
		//Поместим AU в кэш
		ДобавитьВКэш(Код, AU, мЮниты,,,"мЮниты");
		
	КонецЕсли;
	
	Возврат AU;
	
КонецФункции

Функция НайтиAUПоКодуИСегментам(мЮниты, Код, Segment, SubSegment, SsubSegment)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЮниты.Ссылка,
		|	мЮниты.Segment,
		|	мЮниты.SubSegment,
		|	мЮниты.Сегмент,
		|	мЮниты.Код
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&мЮниты КАК мЮниты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК AU
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.Segment = &Segment
		|	И ВТ.SubSegment = &SubSegment
		|	И ВТ.Сегмент = &Сегмент
		|	И ВТ.Код = &Код";
	
	Запрос.УстановитьПараметр("мЮниты",мЮниты);
	Запрос.УстановитьПараметр("Segment",Segment);
	Запрос.УстановитьПараметр("SubSegment",SubSegment);
	Запрос.УстановитьПараметр("Сегмент",SsubSegment);
	Запрос.УстановитьПараметр("Код",СокрЛП(Код));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.AU;
	КонецЦикла;
	
	Возврат	Неопределено;
	
КонецФункции // НайтиAUПоКодуИСегментам(Код, Segment, SubSegment, SsubSegment)

Функция НайтиВКэше(Что, ИмяТаблицы)
	
	Что = СокрЛП(Что);
	Если Не ЗначениеЗаполнено(Что) Тогда	
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Строчка = ИмяТаблицы.Найти(Что, "Код");
	Если Строчка <> Неопределено Тогда
		Возврат Строчка.Ссылка;
	Иначе
		Если ИмяТаблицы = "мВалюты" И (Что = "RUB" ИЛИ Что = "RUR") Тогда
			Если Что = "RUB" Тогда
				Что = "RUR";
			Иначе
				Что = "RUB";
			КонецЕсли;
			Строчка = ИмяТаблицы.Найти(Что, "Код");
			Если Строчка <> Неопределено Тогда
				Возврат Строчка.Ссылка;
			Иначе
				Возврат Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРИМЕНЕНИЯ ФИЛЬТРОВ

Функция ПрименитьФильтры(Родитель, Строка) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Фильтры.ПустаяСсылка();	
	КонецЕсли; 
	Выборка = Справочники.Фильтры.Выбрать(Родитель,,,"Код Возр");
	
	Результат = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыФильтров.IF Тогда
			Выполнить("Результат = (" + Выборка.КодВыполнения + ");");
			Если Результат Тогда
				Если Не Выборка.Статья.Пустая() ИЛИ Не Выборка.Модуль.Пустая() Тогда
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("FiscalType");
					СтруктураПолей.Вставить("Модуль");
					СтруктураПолей.FiscalType = Выборка.Статья;
					СтруктураПолей.Модуль     = Выборка.Модуль;
					Возврат СтруктураПолей;
				Иначе
					Возврат ПрименитьФильтры(Выборка.Ссылка, Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Тип = Перечисления.ТипыФильтров.ELSE Тогда
			Если Не Выборка.Статья.Пустая() ИЛИ Не Выборка.Модуль.Пустая() Тогда
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("FiscalType");
				СтруктураПолей.Вставить("Модуль");
				СтруктураПолей.FiscalType = Выборка.Статья;
				СтруктураПолей.Модуль     = Выборка.Модуль;
				Возврат СтруктураПолей;
			Иначе
				Возврат ПрименитьФильтры(Выборка.Ссылка, Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДеревоЗначений(Родитель, ЭлементРодительДЗ) Экспорт
	
	//для ДЗ должны быть определены слежующие поля:
	//Код, Наименование, КодВыполнения, Статья, Тип, Модуль 
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.Фильтры.ПустаяСсылка();	
	КонецЕсли; 
	Выборка = Справочники.Фильтры.Выбрать(Родитель,,,"Код Возр");
	
	Пока Выборка.Следующий() Цикл
		НовыйЭлементДЗ = ЭлементРодительДЗ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементДЗ, Выборка);
		ЗаполнитьДеревоЗначений(Выборка.Ссылка, НовыйЭлементДЗ)
	КонецЦикла;
	
КонецПроцедуры

Функция ПрименитьФильтры_ДЗ(Родитель, Строка) Экспорт
	
	Если Родитель = Неопределено Тогда
		ПрименитьФильтры(Неопределено, Строка);
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого Выборка Из Родитель.Строки Цикл
		Если Выборка.Тип = Перечисления.ТипыФильтров.IF Тогда
			Выполнить("Результат = (" + Выборка.КодВыполнения + ");");
			Если Результат Тогда
				Если ЗначениеЗаполнено(Выборка.Статья) Тогда
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("FiscalType");
					СтруктураПолей.Вставить("Модуль");
					СтруктураПолей.FiscalType = Выборка.Статья;
					СтруктураПолей.Модуль     = Выборка.Модуль;
					Возврат СтруктураПолей;
				Иначе
					Возврат ПрименитьФильтры_ДЗ(Выборка, Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Тип = Перечисления.ТипыФильтров.ELSE Тогда
			Возврат ПрименитьФильтры_ДЗ(Выборка,Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеРегистровПроводокDSS(МассивКодовПроводок, Авто = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПроводкаDSS.Номер КАК GltObjId,
	                      |	ПроводкаDSS.TranAmount,
	                      |	ПроводкаDSS.SourceCode,
	                      |	ПроводкаDSS.System,
	                      |	ПроводкаDSS.AccountLawson.Родитель.КодЧислом КАК SumAcctNumber,
	                      |	ПроводкаDSS.AccountLawson.КодЧислом КАК AccountNumber,
	                      |	ПроводкаDSS.Ссылка КАК Регистратор,
	                      |	ПроводкаDSS.Документ,
	                      |	ПроводкаDSS.GeoMarket,
	                      |	ПроводкаDSS.UpdateDateLawson,
	                      |	ПроводкаDSS.SeqTrnsNbrLawson,
	                      |	ПроводкаDSS.OrigCompanyLawson,
	                      |	ПроводкаDSS.Activity,
	                      |	ПроводкаDSS.JeTypeLawson,
	                      |	ПроводкаDSS.JournalLawson,
	                      |	ПроводкаDSS.LineNbrLawson,
	                      |	ПроводкаDSS.AutoRevLawson,
	                      |	ПроводкаDSS.Operator,
	                      |	ПроводкаDSS.LegalFiscalFlagLawson,
	                      |	ПроводкаDSS.Vendor,
	                      |	ПроводкаDSS.VendorVname,
	                      |	ПроводкаDSS.ApInvoice,
	                      |	ПроводкаDSS.TransNbr,
	                      |	ПроводкаDSS.OrigOperatorId,
	                      |	ПроводкаDSS.ProcessLevel,
	                      |	ПроводкаDSS.CashCode,
	                      |	ПроводкаDSS.PoNumber,
	                      |	ПроводкаDSS.LineNbrIc,
	                      |	ПроводкаDSS.PoCode,
	                      |	ПроводкаDSS.AssetLawson,
	                      |	ПроводкаDSS.ItemDescription,
	                      |	ПроводкаDSS.CustomerNumber,
	                      |	ПроводкаDSS.CustomerName,
	                      |	ПроводкаDSS.ArInvoice,
	                      |	ПроводкаDSS.TaxCode,
	                      |	ПроводкаDSS.Item,
	                      |	ПроводкаDSS.DocumentNbr,
	                      |	ПроводкаDSS.ContractNumber,
	                      |	ПроводкаDSS.AktOfAcceptance,
	                      |	ПроводкаDSS.AktDateLawson,
	                      |	ПроводкаDSS.ApTransFormId,
	                      |	ПроводкаDSS.AccountLawson,
	                      |	ПроводкаDSS.Company,
	                      |	ПроводкаDSS.Модуль,
	                      |	ПроводкаDSS.BaseAmount,
	                      |	ПроводкаDSS.Reference,
	                      |	ПроводкаDSS.Description,
	                      |	ПроводкаDSS.Currency,
	                      |	ПроводкаDSS.КонтрагентLawson,
	                      |	ПроводкаDSS.AccountLawson КАК Account,
	                      |	ПроводкаDSS.AccountLawson.Наименование КАК AccountDesc
	                      |ИЗ
	                      |	Документ.ПроводкаDSS КАК ПроводкаDSS
	                      |ГДЕ
	                      |	ПроводкаDSS.Номер В (&IDs)
	                      |	И ПроводкаDSS.Номер <> 1000000000
	                      |	И ВЫБОР
	                      |			КОГДА &Авто
	                      |				ТОГДА ПроводкаDSS.FiscalType.Авто
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ");
	
	Запрос.УстановитьПараметр("IDs", МассивКодовПроводок);
	Запрос.УстановитьПараметр("Авто", Авто);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВернутьАвтоFiscalTypeПроводокDSS(МассивКодовПроводок, Отказ = Ложь) Экспорт 
	
	НачатьТранзакцию();
	Результат = ОбработкаDSSСервер.ПолучитьДанныеРегистровПроводокDSS(МассивКодовПроводок, Ложь);
	СоответствиеСтатей = Новый Соответствие;

	//Создаем фильтр
	ДеревоФильтров = Новый ДеревоЗначений;
	ДеревоФильтров.Колонки.Добавить("Код");
	ДеревоФильтров.Колонки.Добавить("Наименование");
	ДеревоФильтров.Колонки.Добавить("КодВыполнения");
	ДеревоФильтров.Колонки.Добавить("Статья");
	ДеревоФильтров.Колонки.Добавить("Тип");
	ДеревоФильтров.Колонки.Добавить("Модуль");
	
	ОбработкаDSSСервер.ЗаполнитьДеревоЗначений(Неопределено, ДеревоФильтров);
	
	Для каждого Запись из Результат цикл
		СоответствиеСтатей.Вставить(Запись.GltObjId,ОбработкаDSSСервер.ПрименитьФильтры_ДЗ(ДеревоФильтров,Запись));
	КонецЦикла;
	  	
	//Применяем фильтр для Регистратора, регистра ПроводкиDSSОбщие и Проводки DSS
	табКопия = Результат.Скопировать(,"Регистратор");
	табКопия.Свернуть("Регистратор");
	масРегистраторов = табКопия.ВыгрузитьКолонку("Регистратор");
	
	Текст = "";
	
	Для Каждого Регистратор Из масРегистраторов Цикл
		РегистраторОбъект = Регистратор.ПолучитьОбъект();
			
		Набор = РегистраторОбъект.Движения.ПроводкиDSSОбщие;
		Набор.Прочитать();
		Для Каждого Запись Из Набор Цикл
			СтруктураПолей = СоответствиеСтатей.Получить(Запись.GltObjId);
			Если ЗначениеЗаполнено(СтруктураПолей) Тогда
				FiscalType = ?(ЗначениеЗаполнено(СтруктураПолей.FiscalType), СтруктураПолей.FiscalType, Запись.FiscalType);
				//12.09.2012 Пахоменков. Справочника уже нет, РегистраторОбъект - это регистратор набора записей
				//ПроводкаDSSОбъект = Справочники.ПроводкиDSSДеталейСчетовКнигиПокупок.НайтиПоКоду(Запись.GltObjId).ПолучитьОбъект();
				ПроводкаDSSОбъект = РегистраторОбъект;
				ПроводкаDSSОбъект.FiscalType = FiscalType;
				Текст = Текст + "
				|Проводке DSS """ + ПроводкаDSSОбъект + """ присвоен Fiscal type """ + FiscalType + """.";
				
				Попытка
					ПроводкаDSSОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи Проводки DSS "+ ПроводкаDSSОбъект +". 
					|	Описание ошибки: " 
					+ ОписаниеОшибки(),,,, Отказ);
					Прервать;
				КонецПопытки;
								
				Запись.FiscalType = FiscalType;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
		//перепровести регистратор, чтобы добавить движения По регистру МА
		Попытка
			РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось провести документ "+ РегистраторОбъект +". 
						|	Описание ошибки: " + ОписаниеОшибки(),,,, Отказ);
			Прервать;
		КонецПопытки;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи Проводок DSS Общие. Описание ошибки: " + ОписаниеОшибки(),,,, Отказ);
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	                                                                     
	Если Отказ Тогда 
		ОтменитьТранзакцию();
	Иначе 
		ЗафиксироватьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(Текст));
	КонецЕсли;
		
КонецПроцедуры

Процедура ИзменениеFiscalTypeПроводокDSSнаУказанныйВПараметре(МассивКодовПроводок, НовыйFiscalType, Отказ = Ложь) Экспорт
	
	НачатьТранзакцию();
	//меняем Fiscal Type проводок DSS на "AP import Loan costs"
	МассивПерепроводимыхДок = Новый Массив; 
	Для Каждого КодПроводки из МассивКодовПроводок Цикл 
		ПроводкаDSSОбъект = Документы.ПроводкаDSS.НайтиПоНомеру(КодПроводки).ПолучитьОбъект();
		ПроводкаDSSОбъект.FiscalType = ?(ЗначениеЗаполнено(НовыйFiscalType), НовыйFiscalType, ПроводкаDSSОбъект.FiscalType);
		
		Если МассивПерепроводимыхДок.Найти(ПроводкаDSSОбъект.Документ) = Неопределено Тогда 
			МассивПерепроводимыхДок.Добавить(ПроводкаDSSОбъект.Документ);
		КонецЕсли;
				
		Попытка
			ПроводкаDSSОбъект.Записать(РежимЗаписиДокумента.Проведение);//Пахоменков тут перепроводим проводку DSS
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи Проводки DSS "+ ПроводкаDSSОбъект +". 
			|	Описание ошибки: " 	+ ОписаниеОшибки(),,,, Отказ);
            Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Если Отказ Тогда 
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// Пахоменков Тут перепроводятся счета книги покупок
	Для Каждого ЭлементМассива из МассивПерепроводимыхДок Цикл 
		ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось провести документ "+ ДокументОбъект +". 
			|	Описание ошибки: " + ОписаниеОшибки(),,,, Отказ);
			Прервать;
		КонецПопытки;
		 								
	КонецЦикла;
	
	Если Отказ Тогда 
		ОтменитьТранзакцию();
	Иначе 
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОВОДКАМИ DSS

// Rg-Soft Изменил Пахоменков 11.10.2011 >>
// !%!проанализировать добавление блокировок
Процедура ПереброситьПроводкиDSS(МассивID, Документ, Отказ = Ложь) Экспорт
	
	табID = Новый ТаблицаЗначений;
	табID.Колонки.Добавить("Номер", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	Для Каждого GltObjID Из МассивID Цикл 
		
		Строка = табID.Добавить();
		Строка.Номер = GltObjID;
		
	КонецЦикла;
	табID.Свернуть("Номер"); 
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабID",табID);
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	TaбID.Номер
				|ПОМЕСТИТЬ ТабID
				|ИЗ
				|	&ТабID КАК TaбID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПроводкаDSS.Ссылка
				|ИЗ
				|	Документ.ПроводкаDSS КАК ПроводкаDSS
				|ГДЕ
				|	ПроводкаDSS.Номер В
				|			(ВЫБРАТЬ
				|				ТабID.Номер
				|			ИЗ
				|				ТабID)";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		ДокDSS = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка 
			ДокDSS.Документ = Документ; 
			ДокDSS.Записать(РежимЗаписиДокумента.Проведение);
		Исключение 			
			Отказ = Истина;  
			СтрокаОшибки = "Не удалось провести документ ПроводкаDSS " + ДокDSS + ": " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Ошибка при записи ПроводкаDSS", УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
			Прервать;  		
		КонецПопытки; 	
		
	КонецЦикла; 
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 	
			
КонецПроцедуры
// <<

Процедура ВернутьПроводкиДокументаВЖурналы(ДокументСсылка, Отказ=Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроводкиDSSОбщие.GltObjId
		|ИЗ
		|	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		|ГДЕ
		|	ПроводкиDSSОбщие.Регистратор = &Регистратор
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.ПроводкиDSSОбщие";
	МассивID = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GltObjId");
	ПереброситьПроводкиDSS(МассивID, Неопределено, Отказ);
		
КонецПроцедуры


// Добавил Булавский Анатолий 08.06.2010

// Процедура переприсваивания проводок 
// 
Процедура РассчитатьРазницы(Документ, Отказ = Ложь, ТекстСообщения = "") Экспорт
	// Проверка наличия проводок в DSS общие
	Если Не ТипЗнч(Документ) = Тип("ДокументСсылка.СчетКнигиПокупок") И НЕ ПроверитьПроводкиDSS(Документ) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		// Формируем переменные для текстов запросов по перемещению ОС и Реализации 
		ЗапросДляПередачиОС = "ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПередачаОСОС.Ссылка.СуммаВключаетНДС
		|				ТОГДА ПередачаОСОС.Сумма
		|			ИНАЧЕ ПередачаОСОС.Сумма + ПередачаОСОС.СуммаНДС
		|		КОНЕЦ КАК GROSS,
		|		ВЫБОР
		|			КОГДА ПередачаОСОС.Ссылка.СуммаВключаетНДС
		|				ТОГДА ПередачаОСОС.Сумма - ПередачаОСОС.СуммаНДС
		|			ИНАЧЕ ПередачаОСОС.Сумма
		|		КОНЕЦ КАК REV,
		|		ПередачаОСОС.СуммаНДС КАК VAT,
		|		ПередачаОСОС.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|		ПередачаОСОС.Ссылка.ВалютаДокумента КАК ВалютаДокумента
		|	ИЗ
		|		Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|	ГДЕ
		|		ПередачаОСОС.Ссылка = &Регистратор";
		
		ЗапросДляРеализацииТоваровУслуг = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугТовары.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
		|	КОНЕЦ КАК GROSS,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
		|	КОНЕЦ КАК REV,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК VAT,
		|	РеализацияТоваровУслугТовары.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма
		|	КОНЕЦ,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Ссылка.КурсВзаиморасчетов,
		|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Регистратор";
		
		// Запросом получаем цифры разниц
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПроводкиDSSОбщие.Период,
		|	ПроводкиDSSОбщие.GltObjId,
		|	СУММА(ПроводкиDSSОбщие.BaseAmount) КАК BaseAmount,
		|	ПроводкиDSSОбщие.FiscalType
		|ПОМЕСТИТЬ ДанныеDSS
		|ИЗ
		|	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		|ГДЕ
		|	ПроводкиDSSОбщие.Регистратор = &Регистратор
		|	И ПроводкиDSSОбщие.FiscalType В ИЕРАРХИИ (&GROSS, &VAT, &REV)
		|	И ПроводкиDSSОбщие.GltObjId > 1000000000
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроводкиDSSОбщие.Период,
		|	ПроводкиDSSОбщие.GltObjId,
		|	ПроводкиDSSОбщие.FiscalType
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ВложенныйЗапрос.ВалютаДокумента = &Рубли
		|				ТОГДА ВложенныйЗапрос.GROSS
		|			ИНАЧЕ ВложенныйЗапрос.GROSS * ВложенныйЗапрос.КурсВзаиморасчетов
		|		КОНЕЦ) КАК GROSS,
		|	СУММА(ВЫБОР
		|			КОГДА ВложенныйЗапрос.ВалютаДокумента = &Рубли
		|				ТОГДА ВложенныйЗапрос.REV
		|			ИНАЧЕ ВложенныйЗапрос.REV * ВложенныйЗапрос.КурсВзаиморасчетов
		|		КОНЕЦ) КАК REV,
		|	СУММА(ВЫБОР
		|			КОГДА ВложенныйЗапрос.ВалютаДокумента = &Рубли
		|				ТОГДА ВложенныйЗапрос.VAT
		|			ИНАЧЕ ВложенныйЗапрос.VAT * ВложенныйЗапрос.КурсВзаиморасчетов
		|		КОНЕЦ) КАК VAT
		|ПОМЕСТИТЬ Fiscal
		|ИЗ
		|	("
		+?(ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), ЗапросДляРеализацииТоваровУслуг, ЗапросДляПередачиОС)+					   
		") КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Период,
		|	КурсыВалют.Курс
		|ПОМЕСТИТЬ КурсыSLI
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта = &ВалютаШлюм
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.FiscalType,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.BaseAmount = 0
		|			ТОГДА ""НОЛЬ""
		|		ИНАЧЕ ВложенныйЗапрос.BaseAmount
		|	КОНЕЦ КАК СуммаПоТипу
		|ПОМЕСТИТЬ СуммыПоТипам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеDSS.FiscalType КАК FiscalType,
		|		СУММА(ДанныеDSS.BaseAmount) КАК BaseAmount
		|	ИЗ
		|		ДанныеDSS КАК ДанныеDSS
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеDSS.FiscalType) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.Регистратор,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Активность,
		|	ВложенныйЗапрос.AccountLawson,
		|	ВложенныйЗапрос.FiscalType КАК FiscalType,
		|	ВложенныйЗапрос.AU,
		|	ВложенныйЗапрос.LegalEntity,
		|	ВложенныйЗапрос.System,
		|	ВложенныйЗапрос.GltObjId,
		|	ВложенныйЗапрос.DateLawson,
		|	ВложенныйЗапрос.Reference,
		|	ВложенныйЗапрос.Description,
		|	ВложенныйЗапрос.TranAmount,
		|	ВложенныйЗапрос.Currency,
		|	ВложенныйЗапрос.GUID,
		|	ВложенныйЗапрос.PeriodLawson,
		|	ВложенныйЗапрос.Company,
		|	ВложенныйЗапрос.Модуль,
		|	ВложенныйЗапрос2.BaseAmount,
		|	ВложенныйЗапрос2.RubAmount,
		|	ВложенныйЗапрос2.FiscAmount,
		|	ВложенныйЗапрос2.PermDiff,
		|	ВложенныйЗапрос2.TempDiff,
		|	ВложенныйЗапрос2.ExchDiff,
		|	ВложенныйЗапрос2.Пропорция
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Период КАК Период,
		|		ВложенныйЗапрос.GltObjId КАК GltObjId,
		|		ВложенныйЗапрос.FiscalType КАК FiscalType,
		|		ВложенныйЗапрос.BaseAmount КАК BaseAmount,
		|		ВложенныйЗапрос.RubAmount КАК RubAmount,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
		|				ТОГДА ВложенныйЗапрос.RubAmount / ВложенныйЗапрос1.Курс
		|			ИНАЧЕ ВложенныйЗапрос.RubAmount / КурсыSLI.Курс
		|		КОНЕЦ КАК FiscAmount,
		|		ВложенныйЗапрос.BaseAmount - ВложенныйЗапрос.RubAmount / КурсыSLI.Курс КАК PermDiff,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
		|				ТОГДА ВложенныйЗапрос.RubAmount / ВложенныйЗапрос1.Курс
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК TempDiff,
		|		ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
		|				ТОГДА ВложенныйЗапрос.RubAmount * (1 / КурсыSLI.Курс - 1 / ВложенныйЗапрос1.Курс)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ExchDiff,
		|		ВложенныйЗапрос.Пропорция КАК Пропорция
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВложенныйЗапрос.Период КАК Период,
		|			ВложенныйЗапрос.GltObjId КАК GltObjId,
		|			ВложенныйЗапрос.FiscalType КАК FiscalType,
		|			ВложенныйЗапрос.BaseAmount КАК BaseAmount,
		|			ВЫБОР
		|				КОГДА ВложенныйЗапрос.FiscalType В ИЕРАРХИИ (&GROSS)
		|					ТОГДА Fiscal.GROSS * ВложенныйЗапрос.Пропорция
		|				КОГДА ВложенныйЗапрос.FiscalType В ИЕРАРХИИ (&REV)
		|					ТОГДА -Fiscal.REV * ВложенныйЗапрос.Пропорция
		|				КОГДА ВложенныйЗапрос.FiscalType В ИЕРАРХИИ (&VAT)
		|					ТОГДА -Fiscal.VAT * ВложенныйЗапрос.Пропорция
		|			КОНЕЦ КАК RubAmount,
		|			ВложенныйЗапрос.Пропорция КАК Пропорция
		|		ИЗ
		|			Fiscal КАК Fiscal,
		|			(ВЫБРАТЬ
		|				ДанныеDSS.Период КАК Период,
		|				ДанныеDSS.GltObjId КАК GltObjId,
		|				ДанныеDSS.FiscalType КАК FiscalType,
		|				ДанныеDSS.BaseAmount КАК BaseAmount,
		|				ВЫБОР
		|					КОГДА СуммыПоТипам.СуммаПоТипу <> ""НОЛЬ""
		|						ТОГДА ДанныеDSS.BaseAmount / (ВЫРАЗИТЬ(СуммыПоТипам.СуммаПоТипу КАК ЧИСЛО))
		|					ИНАЧЕ 1
		|				КОНЕЦ КАК Пропорция
		|			ИЗ
		|				ДанныеDSS КАК ДанныеDSS
		|					ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоТипам КАК СуммыПоТипам
		|					ПО ДанныеDSS.FiscalType = СуммыПоТипам.FiscalType) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыSLI КАК КурсыSLI
		|			ПО ВложенныйЗапрос.Период = КурсыSLI.Период,
		|		(ВЫБРАТЬ
		|			КурсыSLI.Курс КАК Курс
		|		ИЗ
		|			КурсыSLI КАК КурсыSLI
		|		ГДЕ
		|			КурсыSLI.Период = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)) КАК ВложенныйЗапрос1) КАК ВложенныйЗапрос2
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПроводкиDSSОбщие.Период КАК Период,
		|			ПроводкиDSSОбщие.Регистратор КАК Регистратор,
		|			ПроводкиDSSОбщие.НомерСтроки КАК НомерСтроки,
		|			ПроводкиDSSОбщие.Активность КАК Активность,
		|			ПроводкиDSSОбщие.AccountLawson КАК AccountLawson,
		|			ПроводкиDSSОбщие.FiscalType КАК FiscalType,
		|			ПроводкиDSSОбщие.AU КАК AU,
		|			ПроводкиDSSОбщие.LegalEntity КАК LegalEntity,
		|			ПроводкиDSSОбщие.System КАК System,
		|			ПроводкиDSSОбщие.GltObjId КАК GltObjId,
		|			ПроводкиDSSОбщие.DateLawson КАК DateLawson,
		|			ПроводкиDSSОбщие.Reference КАК Reference,
		|			ПроводкиDSSОбщие.Description КАК Description,
		|			ПроводкиDSSОбщие.TranAmount КАК TranAmount,
		|			ПроводкиDSSОбщие.Currency КАК Currency,
		|			ПроводкиDSSОбщие.GUID КАК GUID,
		|			ПроводкиDSSОбщие.PeriodLawson КАК PeriodLawson,
		|			ПроводкиDSSОбщие.Company КАК Company,
		|			ПроводкиDSSОбщие.Модуль КАК Модуль,
		|			ПроводкиDSSОбщие.МоментВремени КАК МоментВремени
		|		ИЗ
		|			РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		|		ГДЕ
		|			ПроводкиDSSОбщие.GltObjId В
		|					(ВЫБРАТЬ
		|						ПроводкиDSSОбщие.GltObjId
		|					ИЗ
		|						РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		|					ГДЕ
		|						ПроводкиDSSОбщие.Регистратор = &Регистратор
		|						И ПроводкиDSSОбщие.FiscalType В ИЕРАРХИИ (&GROSS, &VAT, &REV)
		|						И ПроводкиDSSОбщие.GltObjId > 1000000000)) КАК ВложенныйЗапрос
		|		ПО ВложенныйЗапрос2.GltObjId = ВложенныйЗапрос.GltObjId
		|
		|УПОРЯДОЧИТЬ ПО
		|	FiscalType";
		
		Запрос.УстановитьПараметр("GROSS", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("GROSS    "));
		Запрос.УстановитьПараметр("REV", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("Revenue  "));
		Запрос.УстановитьПараметр("VAT", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("VAT      "));
		Запрос.УстановитьПараметр("ВалютаШлюм", Справочники.Валюты.НайтиПоКоду("999"));
		Запрос.УстановитьПараметр("Дата", Документ.ДатаПроведения);
		Запрос.УстановитьПараметр("Регистратор", Документ);
		Запрос.УстановитьПараметр("Рубли", Справочники.Валюты.НайтиПоКоду("643"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		PrevFiscType = Справочники.СтатьиДоходовИРасходов.ПустаяСсылка();
		CurrentFiscType = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("GROSS    ");
		
		// Получаем движения по DSS Общие
		Движение = Документ.ПолучитьОбъект().Движения.ПроводкиDSSОбщие;
		
		// Формируем движения документа заново
		Пока Выборка.Следующий() Цикл
			// Контроль случаев с закрывающейся в ноль BaseAmount
			CurrentFiscType = Выборка.FiscalType;
			Если PrevFiscType = CurrentFiscType И Выборка.Пропорция = 1 Тогда
				Если Выборка.TempDiff = 0 Тогда
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка);
					СтрокаДвиж.FiscAmount = 0;
					СтрокаДвиж.RubAmount = 0;
					СтрокаДвиж.PermDiff = - СтрокаДвиж.BaseAmount;
					СтрокаДвиж.LegalEntity = Документ.ПодразделениеОрганизации;
					//Пахоменков РГ-СОФТ 26.02.2012
					ИзменитьТип(Выборка,СтрокаДвиж);
					//<     
				Иначе
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка,,"FiscAmount");
					СтрокаДвиж.FiscAmount = 0;
					СтрокаДвиж.RubAmount = 0;
					СтрокаДвиж.PermDiff = - СтрокаДвиж.BaseAmount;
					СтрокаДвиж.TempDiff = 0;
					СтрокаДвиж.ExchDiff = 0;
					СтрокаДвиж.LegalEntity = Документ.ПодразделениеОрганизации;
					//Пахоменков РГ-СОФТ 26.02.2012
					ИзменитьТип(Выборка,СтрокаДвиж);
					//<   
				КонецЕсли; 
			Иначе
				// Контроль случаев добавления новой проводки (разные периоды принятия к БУ и НУ)
				Если Выборка.TempDiff = 0 Тогда
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка);
					СтрокаДвиж.LegalEntity = Документ.ПодразделениеОрганизации;
					//Пахоменков РГ-СОФТ 26.02.2012
					ИзменитьТип(Выборка,СтрокаДвиж);
					//<   
				Иначе
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка,,"FiscAmount");
					СтрокаДвиж.FiscAmount = 0;
					СтрокаДвиж.RubAmount = 0;
					СтрокаДвиж.LegalEntity = Документ.ПодразделениеОрганизации;
					ИзменитьТип(Выборка,СтрокаДвиж);
					
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка,"Регистратор, AccountLawson, FiscalType, AU, LegalEntity, FiscAmount, RubAmount, TempDiff, Модуль, Company, Description, Reference");
					СтрокаДвиж.Период = Документ.ДатаПроведения;
					СтрокаДвиж.GUID = Новый УникальныйИдентификатор;
					СтрокаДвиж.TempDiff = - СтрокаДвиж.TempDiff;
					СтрокаДвиж.GltObjId = 1000000000;
					СтрокаДвиж.LegalEntity = Документ.ПодразделениеОрганизации;
					//Пахоменков РГ-СОФТ 26.02.2012
					ИзменитьТип(Выборка,СтрокаДвиж);
					//<   
				КонецЕсли; 
			КонецЕсли; 
			PrevFiscType = Выборка.FiscalType;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетКнигиПокупок") Тогда
		// Формируем запрос для расчета разниц по проводкам переданного документа
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПроводкиПоДокументу.Ссылка
		               |ПОМЕСТИТЬ Регистраторы
		               |ИЗ
		               |	КритерийОтбора.ПроводкиПоДокументу(&Регистратор) КАК ПроводкиПоДокументу
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПроводкиDSSОбщие.Период,
		               |	ПроводкиDSSОбщие.GltObjId,
		               |	ПроводкиDSSОбщие.DateLawson,
		               |	ПроводкиDSSОбщие.BaseAmount,
		               |	ПроводкиDSSОбщие.Currency,
		               |	ВЫРАЗИТЬ(Регистраторы.Ссылка.Документ КАК Документ.СчетКнигиПокупок) КАК СКП,
		               |	ПроводкиDSSОбщие.TranAmount
		               |ПОМЕСТИТЬ ПроводкиДокумента
		               |ИЗ
		               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
		               |		ПО ПроводкиDSSОбщие.Регистратор = Регистраторы.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КурсыВалют.Период,
		               |	КурсыВалют.Курс
		               |ПОМЕСТИТЬ КурсыSLB
		               |ИЗ
		               |	РегистрСведений.КурсыВалют КАК КурсыВалют
		               |ГДЕ
		               |	КурсыВалют.Валюта = &ВалютаSLB
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КурсыВалют.Период,
		               |	КурсыВалют.Курс
		               |ПОМЕСТИТЬ КурсДокумента
		               |ИЗ
		               |	РегистрСведений.КурсыВалют КАК КурсыВалют
		               |ГДЕ
		               |	КурсыВалют.Валюта = &ВалютаSLB
		               |	И КурсыВалют.Период = &ДатаПроведения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Период КАК Период,
		               |	ВложенныйЗапрос.GltObjId КАК GltObjId,
		               |	ВложенныйЗапрос.DateLawson КАК DateLawson,
		               |	ВложенныйЗапрос.BaseAmount КАК BaseAmount,
		               |	ВложенныйЗапрос.Currency КАК Currency,
		               |	ВложенныйЗапрос.RubAmount КАК RubAmount,
		               |	ВЫБОР
		               |		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаПроведения, МЕСЯЦ)
		               |			ТОГДА ВложенныйЗапрос.RubAmount / КурсыSLB.Курс
		               |		ИНАЧЕ ВложенныйЗапрос.RubAmount / КурсДокумента.Курс
		               |	КОНЕЦ КАК FiscAmount,
		               |	ВложенныйЗапрос.BaseAmount - ВложенныйЗапрос.RubAmount / КурсыSLB.Курс КАК PermDiff,
		               |	ВЫБОР
		               |		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаПроведения, МЕСЯЦ)
		               |			ТОГДА 0
		               |		ИНАЧЕ ВложенныйЗапрос.RubAmount / КурсДокумента.Курс
		               |	КОНЕЦ КАК TempDiff,
		               |	ВЫБОР
		               |		КОГДА НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаПроведения, МЕСЯЦ)
		               |			ТОГДА 0
		               |		ИНАЧЕ ВложенныйЗапрос.RubAmount * (1 / КурсыSLB.Курс - 1 / КурсДокумента.Курс)
		               |	КОНЕЦ КАК ExchDiff
		               |ПОМЕСТИТЬ РассчитанныеРазницы
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПроводкиДокумента.Период КАК Период,
		               |		ПроводкиДокумента.GltObjId КАК GltObjId,
		               |		ПроводкиДокумента.DateLawson КАК DateLawson,
		               |		ПроводкиДокумента.BaseAmount КАК BaseAmount,
		               |		ПроводкиДокумента.Currency КАК Currency,
		               |		ВЫБОР
		               |			КОГДА ПроводкиДокумента.Currency = &Рубли
		               |				ТОГДА ПроводкиДокумента.TranAmount
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА ПроводкиДокумента.СКП.СуммаРубСНДС <> 0
		               |						ТОГДА -ПроводкиДокумента.СКП.СуммаРубСНДС * ПроводкиДокумента.BaseAmount / ПроводкиДокумента.СКП.ПроводкаDSS.BaseAmount
		               |					ИНАЧЕ ПроводкиДокумента.BaseAmount * ПроводкиДокумента.СКП.КурсДокумента
		               |				КОНЕЦ
		               |		КОНЕЦ КАК RubAmount
		               |	ИЗ
		               |		ПроводкиДокумента КАК ПроводкиДокумента
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				КурсыВалют.Период КАК Период,
		               |				КурсыВалют.Курс КАК Курс
		               |			ИЗ
		               |				РегистрСведений.КурсыВалют КАК КурсыВалют
		               |			ГДЕ
		               |				КурсыВалют.Валюта = &Доллары) КАК ВложенныйЗапрос
		               |			ПО ПроводкиДокумента.DateLawson = ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
		               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыSLB КАК КурсыSLB
		               |		ПО ВложенныйЗапрос.Период = КурсыSLB.Период,
		               |	КурсДокумента КАК КурсДокумента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Период,
		               |	ВложенныйЗапрос.Регистратор,
		               |	ВложенныйЗапрос.НомерСтроки,
		               |	ВложенныйЗапрос.Активность,
		               |	ВложенныйЗапрос.AccountLawson,
		               |	ВложенныйЗапрос.FiscalType,
		               |	ВложенныйЗапрос.AU,
		               |	ВложенныйЗапрос.LegalEntity,
		               |	ВложенныйЗапрос.BaseAmount,
		               |	ВложенныйЗапрос.System,
		               |	ВложенныйЗапрос.GltObjId,
		               |	ВложенныйЗапрос.DateLawson,
		               |	ВложенныйЗапрос.Reference,
		               |	ВложенныйЗапрос.Description,
		               |	ВложенныйЗапрос.TranAmount,
		               |	ВложенныйЗапрос.Currency,
		               |	ВложенныйЗапрос.GUID,
		               |	ВложенныйЗапрос.PeriodLawson,
		               |	ВложенныйЗапрос.Company,
		               |	ВложенныйЗапрос.Модуль,
		               |	РассчитанныеРазницы.RubAmount,
		               |	РассчитанныеРазницы.FiscAmount,
		               |	РассчитанныеРазницы.PermDiff,
		               |	РассчитанныеРазницы.TempDiff,
		               |	РассчитанныеРазницы.ExchDiff
		               |ИЗ
		               |	РассчитанныеРазницы КАК РассчитанныеРазницы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ПроводкиDSSОбщие.Период КАК Период,
		               |			ПроводкиDSSОбщие.Регистратор КАК Регистратор,
		               |			ПроводкиDSSОбщие.НомерСтроки КАК НомерСтроки,
		               |			ПроводкиDSSОбщие.Активность КАК Активность,
		               |			ПроводкиDSSОбщие.AccountLawson КАК AccountLawson,
		               |			ПроводкиDSSОбщие.FiscalType КАК FiscalType,
		               |			ПроводкиDSSОбщие.AU КАК AU,
		               |			ПроводкиDSSОбщие.LegalEntity КАК LegalEntity,
		               |			ПроводкиDSSОбщие.BaseAmount КАК BaseAmount,
		               |			ПроводкиDSSОбщие.System КАК System,
		               |			ПроводкиDSSОбщие.GltObjId КАК GltObjId,
		               |			ПроводкиDSSОбщие.DateLawson КАК DateLawson,
		               |			ПроводкиDSSОбщие.Reference КАК Reference,
		               |			ПроводкиDSSОбщие.Description КАК Description,
		               |			ПроводкиDSSОбщие.TranAmount КАК TranAmount,
		               |			ПроводкиDSSОбщие.Currency КАК Currency,
		               |			ПроводкиDSSОбщие.GUID КАК GUID,
		               |			ПроводкиDSSОбщие.PeriodLawson КАК PeriodLawson,
		               |			ПроводкиDSSОбщие.Company КАК Company,
		               |			ПроводкиDSSОбщие.Модуль КАК Модуль
		               |		ИЗ
		               |			Регистраторы КАК Регистраторы
		               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		               |				ПО Регистраторы.Ссылка = ПроводкиDSSОбщие.Регистратор
		               |		ГДЕ
		               |			ПроводкиDSSОбщие.GltObjId > 1000000000) КАК ВложенныйЗапрос
		               |		ПО РассчитанныеРазницы.GltObjId = ВложенныйЗапрос.GltObjId";
		Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
		Запрос.УстановитьПараметр("Рубли", Справочники.Валюты.НайтиПоКоду("643"));
		Запрос.УстановитьПараметр("Доллары", Справочники.Валюты.НайтиПоКоду("840"));
		Запрос.УстановитьПараметр("Регистратор", Документ);
		Запрос.УстановитьПараметр("ДатаПроведения", Документ.ДатаПроведения);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		// Получаем движения по DSS Общие
		Движение = Документ.ПолучитьОбъект().Движения.ПроводкиDSSОбщие;

		Пока Выборка.Следующий() Цикл
			//Если НЕ Документ.ВключатьВКнигуПокупок Тогда
			//	Док = Выборка.Регистратор.ПолучитьОбъект();
			//	Док.FiscAmount = 0;
			//	Док.RubAmount = 0;
			//	Док.TempDiff = 0;
			//	Док.ExchDiff = 0;
			//	Док.PermDiff = Док.BaseAmount;
			//	Док.Записать(РежимЗаписиДокумента.Проведение);
			//Иначе
				Если Выборка.TempDiff = 0 Тогда
					Док = Выборка.Регистратор.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(Док, Выборка, "FiscAmount, RubAmount, PermDiff, TempDiff, ExchDiff");
					Док.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Док = Выборка.Регистратор.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(Док, Выборка, "PermDiff, TempDiff, ExchDiff");
					Док.FiscAmount = 0;
					Док.RubAmount = 0;
					Док.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДвиж = Движение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиж, Выборка,"Регистратор, AccountLawson, FiscalType, AU, LegalEntity, FiscAmount, RubAmount, TempDiff, Модуль, Company, Description, Reference");
					СтрокаДвиж.Период = Документ.ДатаПроведения;
					СтрокаДвиж.GUID = Новый УникальныйИдентификатор;
					СтрокаДвиж.TempDiff = - СтрокаДвиж.TempDiff;
				КонецЕсли; 
			//КонецЕсли; 
		КонецЦикла;
	ИначеЕсли 	ТипЗнч(Документ) = Тип("ДокументСсылка.InventoryПоступление") 	ИЛИ
				ТипЗнч(Документ) = Тип("ДокументСсылка.InventoryКорректировка") ИЛИ
				ТипЗнч(Документ) = Тип("ДокументСсылка.InventoryПеремещение")	ИЛИ 
				ТипЗнч(Документ) = Тип("ДокументСсылка.InventoryСписание")		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КурсыВалютСрезПоследних.Курс
		               |ПОМЕСТИТЬ КурсSLB
		               |ИЗ
		               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &ВалютаSLB) КАК КурсыВалютСрезПоследних
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	InventoryBatches.Good.Код КАК Item,
		               |	СУММА(InventoryBatches.Sum) КАК Sum
		               |ПОМЕСТИТЬ ДвиженияПоПартиям
		               |ИЗ
		               |	РегистрНакопления.InventoryBatches КАК InventoryBatches
		               |ГДЕ
		               |	InventoryBatches.Регистратор = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	InventoryBatches.Good.Код
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПроводкиDSSОбщие.Description КАК Item,
		               |	ПроводкиDSSОбщие.BaseAmount,
		               |	ПроводкиDSSОбщие.GltObjId
		               |ПОМЕСТИТЬ ДвиженияПоДСС
		               |ИЗ
		               |	РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
		               |ГДЕ
		               |	ПроводкиDSSОбщие.Регистратор = &Ссылка
		               |	И (НЕ ПроводкиDSSОбщие.GltObjId = 1000000000)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Item,
		               |	ВложенныйЗапрос.BaseAmount,
		               |	ВложенныйЗапрос.GltObjId,
		               |	ВложенныйЗапрос.Доля
		               |ПОМЕСТИТЬ ПроводкиДССсДолями
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ДвиженияПоДСС.Item КАК Item,
		               |		ДвиженияПоДСС.BaseAmount КАК BaseAmount,
		               |		ДвиженияПоДСС.GltObjId КАК GltObjId,
		               |		ВЫБОР
		               |			КОГДА ДвиженияПоДСС.BaseAmount >= 0
		               |				ТОГДА ВЫБОР
		               |						КОГДА ВложенныйЗапрос.СуммаДССДт = 0
		               |							ТОГДА 0
		               |						ИНАЧЕ ДвиженияПоДСС.BaseAmount / ВложенныйЗапрос.СуммаДССДт
		               |					КОНЕЦ
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА ВложенныйЗапрос1.СуммаДССКт = 0
		               |						ТОГДА 0
		               |					ИНАЧЕ -ДвиженияПоДСС.BaseAmount / ВложенныйЗапрос1.СуммаДССКт
		               |				КОНЕЦ
		               |		КОНЕЦ КАК Доля
		               |	ИЗ
		               |		ДвиженияПоДСС КАК ДвиженияПоДСС
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СУММА(ВложенныйЗапрос.BaseAmount) КАК СуммаДССДт,
		               |				ВложенныйЗапрос.Item КАК Item
		               |			ИЗ
		               |				(ВЫБРАТЬ
		               |					ДвиженияПоДСС.BaseAmount КАК BaseAmount,
		               |					ДвиженияПоДСС.Item КАК Item
		               |				ИЗ
		               |					ДвиженияПоДСС КАК ДвиженияПоДСС
		               |				ГДЕ
		               |					ДвиженияПоДСС.BaseAmount >= 0) КАК ВложенныйЗапрос
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ВложенныйЗапрос.Item) КАК ВложенныйЗапрос
		               |			ПО ДвиженияПоДСС.Item = ВложенныйЗапрос.Item
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				СУММА(ВложенныйЗапрос.BaseAmount) КАК СуммаДССКт,
		               |				ВложенныйЗапрос.Item КАК Item
		               |			ИЗ
		               |				(ВЫБРАТЬ
		               |					ДвиженияПоДСС.BaseAmount КАК BaseAmount,
		               |					ДвиженияПоДСС.Item КАК Item
		               |				ИЗ
		               |					ДвиженияПоДСС КАК ДвиженияПоДСС
		               |				ГДЕ
		               |					ДвиженияПоДСС.BaseAmount < 0) КАК ВложенныйЗапрос
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ВложенныйЗапрос.Item) КАК ВложенныйЗапрос1
		               |			ПО ДвиженияПоДСС.Item = ВложенныйЗапрос1.Item) КАК ВложенныйЗапрос
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВложенныйЗапрос.Item,
		               |	ВложенныйЗапрос.BaseAmount,
		               |	ВложенныйЗапрос.GltObjId,
		               |	ВложенныйЗапрос.RubAmount,
		               |	ВЫБОР
		               |		КОГДА ВложенныйЗапрос.RubAmount ЕСТЬ NULL 
		               |			ТОГДА NULL
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА КурсSLB.Курс = 0
		               |						ИЛИ КурсSLB.Курс ЕСТЬ NULL 
		               |					ТОГДА 0
		               |				ИНАЧЕ ВложенныйЗапрос.RubAmount / КурсSLB.Курс
		               |			КОНЕЦ
		               |	КОНЕЦ КАК FiscalAmount,
		               |	ВЫБОР
		               |		КОГДА ВложенныйЗапрос.RubAmount ЕСТЬ NULL 
		               |			ТОГДА 1
		               |		КОГДА КурсSLB.Курс ЕСТЬ NULL 
		               |				ИЛИ КурсSLB.Курс = 0
		               |			ТОГДА 2
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК КодОшибки
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПроводкиДССсДолями.Item КАК Item,
		               |		ПроводкиДССсДолями.BaseAmount КАК BaseAmount,
		               |		ПроводкиДССсДолями.GltObjId КАК GltObjId,
		               |		ВЫБОР
		               |			КОГДА ДвиженияПоПартиям.Sum ЕСТЬ NULL 
		               |				ТОГДА NULL
		               |			ИНАЧЕ ПроводкиДССсДолями.Доля * ДвиженияПоПартиям.Sum
		               |		КОНЕЦ КАК RubAmount
		               |	ИЗ
		               |		ПроводкиДССсДолями КАК ПроводкиДССсДолями
		               |			ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоПартиям КАК ДвиженияПоПартиям
		               |			ПО ПроводкиДССсДолями.Item = ДвиженияПоПартиям.Item) КАК ВложенныйЗапрос,
		               |	КурсSLB КАК КурсSLB";
		Запрос.УстановитьПараметр("ДатаКурса", Документ.Дата);
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		// Получаем таблицу из запроса
		Таблица = Результат.Выгрузить();
		Таблица.Свернуть("Item, КодОшибки");
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КодОшибки", 1);
		
		МассивСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
		// Если есть такие строки - значит нет нужных проводок в партиях
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстСообщения = "Нехватка движений в регистре Inventory batches по Item ";
			Для каждого ЭлементНехватки Из МассивСтрок Цикл
				ТекстСообщения = ТекстСообщения + ЭлементНехватки.Item + ", ";
			КонецЦикла; 
			ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 2) + ".";
			ЗаписьЖурналаРегистрации("Ошибка расчете разниц", УровеньЖурналаРегистрации.Ошибка, , Документ, ТекстСообщения);
			Возврат;
		КонецЕсли; 
		
		СтруктураПоиска.Вставить("КодОшибки", 2);
		
		МассивСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
		// Если есть такие строки - значит не задан курс валюты на дату
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстСообщения = "Не указан курс валюты SLB на " + Документ.Дата;
			ЗаписьЖурналаРегистрации("Ошибка расчете разниц", УровеньЖурналаРегистрации.Ошибка, , Документ, ТекстСообщения);
			Возврат;
		КонецЕсли; 

		
		// Получаем движения по DSS Общие
		Движение = Документ.ПолучитьОбъект().Движения.ПроводкиDSSОбщие;
		Движение.Прочитать();
        ТаблицаТекПроводок = Движение.Выгрузить();
		
		// Определяем необходимость добавления отдельных проводок
		НужныДопПроводки = Ложь;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.InventoryСписание") Тогда
			Если НЕ НачалоМесяца(Документ.НалоговыйПериод) = НачалоМесяца(Документ.Дата) Тогда
				НужныДопПроводки = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		// При повторном расчете удалем старые добавленные проводки
		СтруктураПосикаДобавленныхСтрок = Новый Структура;
		СтруктураПосикаДобавленныхСтрок.Вставить("GltObjId", 1000000000);
		МассивСтрок = ТаблицаТекПроводок.НайтиСтроки(СтруктураПосикаДобавленныхСтрок);
		Для каждого СтрокаУдаления Из МассивСтрок Цикл
			ТаблицаТекПроводок.Удалить(СтрокаУдаления);
		КонецЦикла; 
		
		// Корректируем движения по рассчитанным в запросе суммам
		Пока Выборка.Следующий() Цикл
			СтрокаКорректировки = ТаблицаТекПроводок.Найти(Выборка.GltObjId, "GltObjId");
			Если НЕ СтрокаКорректировки = Неопределено Тогда
				Если НужныДопПроводки Тогда
					ПостояннаяРазница = СтрокаКорректировки.BaseAmount - Выборка.FiscalAmount;
					СтрокаКорректировки.RubAmount = 0;
					СтрокаКорректировки.FiscAmount = 0;
					СтрокаКорректировки.PermDiff = ПостояннаяРазница;
					СтрокаКорректировки.TempDiff = Выборка.FiscalAmount;
					СтрокаКорректировки.ExchDiff = 0;
					
					ДопПроводка = ТаблицаТекПроводок.Добавить();
					ЗаполнитьЗначенияСвойств(ДопПроводка, СтрокаКорректировки, "Регистратор, AccountLawson, FiscalType, AU, LegalEntity, Модуль, Company, Description, Reference");
					ДопПроводка.PeriodLawson = Документ.НалоговыйПериод;
					ДопПроводка.Период = Документ.НалоговыйПериод;
					ДопПроводка.Активность = Истина;
					ДопПроводка.GltObjId = 1000000000;
					ДопПроводка.RubAmount = Выборка.RubAmount;;
					ДопПроводка.FiscAmount = Выборка.FiscalAmount;
					ДопПроводка.PermDiff = 0;
					ДопПроводка.TempDiff = -Выборка.FiscalAmount;
					ДопПроводка.ExchDiff = 0;
				Иначе 
					СтрокаКорректировки.RubAmount = Выборка.RubAmount;
					СтрокаКорректировки.FiscAmount = Выборка.FiscalAmount;
					ПостояннаяРазница = СтрокаКорректировки.BaseAmount - СтрокаКорректировки.FiscAmount;
					СтрокаКорректировки.PermDiff = ПостояннаяРазница;
					СтрокаКорректировки.TempDiff = 0;
					СтрокаКорректировки.ExchDiff = 0;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		// Загружаем полученное обратно в движения
		Движение.Загрузить(ТаблицаТекПроводок);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияLawson") Тогда
		// Получаем движения по DSS Общие
		Движение = Документ.ПолучитьОбъект().Движения.ПроводкиDSSОбщие.Прочитать();
		
		ы = 0;
		Пока ы < Движение.Количество() Цикл
			СтрокаТаблицы = Движение[ы];
			Если СтрокаТаблицы.GltObjId = 1000000000 ИЛИ СтрокаТаблицы.GltObjId = 0 Тогда
				// Удалим лишнюю запись
				Движение.Удалить(ы);
			Иначе
				// Обнулим ПР, ВР, КР
				СтрокаТаблицы.RubAmount = 0;
				СтрокаТаблицы.FiscAmount = 0;
				СтрокаТаблицы.TempDiff = 0;
				СтрокаТаблицы.PermDiff = СтрокаТаблицы.BaseAmount;
				СтрокаТаблицы.ExchDiff = 0;
				ы = ы + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли; 
	
	Попытка
		Движение.Записать();
	Исключение
		Заголовок = "Расчет разниц по документу """ + Документ + """: ";
		ТекстОшибки = "Невозможно записать сформированные движения документа!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецПопытки;

КонецПроцедуры

// Проверка наличия проводок в DSS.
Функция ПроверитьПроводкиDSS(СсылкаДокумента)
	
	Попытка
		ДвиженияDSS = СсылкаДокумента.ПолучитьОбъект().Движения.ПроводкиDSSОбщие;
		ДвиженияDSS.Прочитать();
		Если ДвиженияDSS.Количество()>0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли; 
	Исключение
		Заголовок = "Расчет разниц по документу """ + СсылкаДокумента + """: ";
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ()

// Пересчет разниц по заданному виду документа
Процедура ПересчитатьРазницыПоВидуДокумента(ВидДокумента, КоличествоЗаписейПересчета = 0, КоличествоПрогонов = 1) Экспорт
	СделаноПрогонов = 0;
	Пока СделаноПрогонов < КоличествоПрогонов Цикл
		
		// Сначала обработаем все безошибочные элементы регистра
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ";
		Если НЕ КоличествоЗаписейПересчета = 0 Тогда
			Запрос.Текст = Запрос.Текст + " ПЕРВЫЕ " + КоличествоЗаписейПересчета;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ПересчетРазницПоДокументам.Документ
		|ИЗ
		|	РегистрСведений.ПересчетРазницПоДокументам КАК ПересчетРазницПоДокументам
		|ГДЕ
		|	(НЕ ПересчетРазницПоДокументам.НаличиеОшибки)
		|	И ПересчетРазницПоДокументам.Документ ССЫЛКА " + ВидДокумента;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ЗаписьРегистраПересчета = РегистрыСведений.ПересчетРазницПоДокументам.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Отказ = Ложь;
			ТекстСообщения = "";			
			ОбработкаDSSСервер.РассчитатьРазницы(Выборка.Документ, Отказ, ТекстСообщения);
			Если Отказ Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли; 

			// Если не удалось пересчитать разницы, то ставим галку об ошибке в регистр
			Если ТранзакцияАктивна() Тогда
								
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПересчетРазницПоДокументам");
				ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаДанных.Заблокировать();
					
			КонецЕсли;
			
			Если Отказ Тогда
				ЗаписьРегистраПересчета.Отбор.Документ.Установить(Выборка.Документ);
				ЗаписьРегистраПересчета.Прочитать();
				Если ЗаписьРегистраПересчета.Количество() = 0 Тогда
					СтрокаРегистраПересчета = ЗаписьРегистраПересчета.Добавить();
				Иначе
				    СтрокаРегистраПересчета = ЗаписьРегистраПересчета[0];
				КонецЕсли; 
				СтрокаРегистраПересчета.НаличиеОшибки = Истина;
				СтрокаРегистраПересчета.ТекстОшибки = ?(ТекстСообщения = "", "Неклассифицированная ошибка пересчета разниц", ТекстСообщения);
				ЗаписьРегистраПересчета.Записать();
			Иначе
				// В противном случае удаляем запись по пересчитанному дкоументу из регистра
				ОбработанныеЗаписи = РегистрыСведений.ПересчетРазницПоДокументам.СоздатьНаборЗаписей();
				ОбработанныеЗаписи.Отбор.Документ.Установить(Выборка.Документ);
				ОбработанныеЗаписи.Прочитать();
				ОбработанныеЗаписи.Очистить();
				ОбработанныеЗаписи.Записать();
			КонецЕсли; 
		КонецЦикла;
		
		// Повторно пробуем пересчитать разницы у документов с ошибками
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПересчетРазницПоДокументам.Документ
		|ИЗ
		|	РегистрСведений.ПересчетРазницПоДокументам КАК ПересчетРазницПоДокументам
		|ГДЕ
		|	ПересчетРазницПоДокументам.НаличиеОшибки
		|	И ПересчетРазницПоДокументам.КоличествоПопыток < 3
		|	И ПересчетРазницПоДокументам.Документ ССЫЛКА " + ВидДокумента;
		
		Результат = Запрос.Выполнить();
		ОставшиесяЗаписиРегистра = Результат.Выбрать();
		
		Пока ОставшиесяЗаписиРегистра.Следующий() Цикл
			НачатьТранзакцию();
			Отказ = Ложь;
			ТекстСообщения = "";			
			ОбработкаDSSСервер.РассчитатьРазницы(ОставшиесяЗаписиРегистра.Документ, Отказ, ТекстСообщения);
			Если Отказ Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли; 
			
			// Если не выйдет - прибаляем 1 к количеству зарегистированных ошибок, иначе удаляем запись
			Если ТранзакцияАктивна() Тогда
							
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПересчетРазницПоДокументам");
				ЭлементБлокировки.УстановитьЗначение("Документ", ОставшиесяЗаписиРегистра.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаДанных.Заблокировать();
		
			КонецЕсли; 
			
			Если Отказ Тогда
				ЗаписьРегистраПересчета.Отбор.Документ.Установить(ОставшиесяЗаписиРегистра.Документ);
				ЗаписьРегистраПересчета.Прочитать();
				ЗаписьРегистраПересчета[0].КоличествоПопыток = ЗаписьРегистраПересчета[0].КоличествоПопыток + 1;
				ЗаписьРегистраПересчета[0].ТекстОшибки = ?(ТекстСообщения = "", "Неклассифицированная ошибка пересчета разниц", ТекстСообщения);
				ЗаписьРегистраПересчета.Записать();
			Иначе
				ЗаписьРегистраПересчета.Отбор.Документ.Установить(ОставшиесяЗаписиРегистра.Документ);
				ЗаписьРегистраПересчета.Прочитать();
				ЗаписьРегистраПересчета.Очистить();
				ЗаписьРегистраПересчета.Записать();
			КонецЕсли; 
		КонецЦикла;
		
		СделаноПрогонов = СделаноПрогонов + 1;
	КонецЦикла; 

КонецПроцедуры

// Обработчик регламентного задания пересчета разниц, зарегистрированных в регистре сведений
Процедура ПересчитатьРазницыПоДокументам() Экспорт
	
	КоличествоЗаписейПересчета = 0;
	КоличествоПрогонов = 1;
	// Последовательно запускаем неограниченный по порциям пересчет разниц по всем видам документов. зарегистрированных в пересчете
	ПересчитатьРазницыПоВидуДокумента("Документ.ПередачаОС", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.РеализацияТоваровУслуг", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.СчетКнигиПокупок", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.InventoryПоступление", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.InventoryСписание", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.InventoryКорректировка", КоличествоЗаписейПересчета, КоличествоПрогонов);
	ПересчитатьРазницыПоВидуДокумента("Документ.InventoryПеремещение", КоличествоЗаписейПересчета, КоличествоПрогонов);
КонецПроцедуры

//Пахоменков РГ-СОФТ 26.02.2012
Процедура ИзменитьТип(Выборка,СтрокаДвиж)
	
	ТипRev = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("Revenue  ");
	
	Если СтрокаДвиж.FiscalType = ТипRev ИЛИ СтрокаДвиж.FiscalType.ПринадлежитЭлементу(ТипRev) Тогда    		
		
		ЭтоТипOther = Ложь;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  			
			ЭтоТипOther = Выборка.Регистратор.ПрочиеПродажи ИЛИ (Выборка.Регистратор.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно И НЕ Год(Выборка.Регистратор.Дата) = Год(Выборка.Регистратор.Сделка.Дата));
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПередачаОС") Тогда
        	ЭтоТипOther = Выборка.Регистратор.ПрочиеПродажи;
		КонецЕсли; 
		
		Если ЭтоТипOther Тогда
			СтрокаДвиж.FiscalType = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("O_Revenue");
		Иначе
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПередачаОС") Тогда
				СтрокаДвиж.FiscalType = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("FA_SALES");
			КонецЕсли;
		КонецЕсли;   	
		
	КонецЕсли;  	
	
КонецПроцедуры