// Функция проверяет установлены ли у пользователя роли,
// с которыми можно запускать конфигурацию
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		ЕстьДоступнаяРоль = Истина;	
		
	Иначе
		ЕстьДоступнаяРоль = Ложь;
		МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Для каждого РольПользователя Из ТекущийПользователь.Роли Цикл
			Если МетаданныеНабораПрав.Найти(РольПользователя.Имя) <> Неопределено Тогда
				ЕстьДоступнаяРоль = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьДоступнаяРоль;
		
КонецФункции

Процедура УстановитьТекущегоПользователя(ТекущийПользователь) Экспорт
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
			
КонецПроцедуры

Процедура ОпределитьГруппыТекущегоПользователя(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ГруппыТекущегоПользователя" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка КАК Значение
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	Массив.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	Массив.Добавить(ПараметрыСеанса.ТекущийПользователь);
	ПараметрыСеанса.ГруппыТекущегоПользователя = Новый ФиксированныйМассив(Массив);
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

Функция ЗарегистрироватьПраваПользователя(СсылкаНового, Отказ = Ложь, Очистить = Ложь) Экспорт

	ТаблицаДобавленныхЗаписей = Неопределено;
	
	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено И НЕ Очистить Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ОбъектДоступа.Значение      = СсылкаНового;
	НаборЗаписей.Отбор.ОбъектДоступа.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение       = ПараметрыСеанса.ТекущийПользователь;
	НаборЗаписей.Отбор.Пользователь.Использование  = Истина;
	
	Если НЕ Очистить Тогда
	
		СписокПравПользователя = УправлениеПользователями.ПолучитьСписокНабораПрав();
		Для каждого ЭлементСписка Из СписокПравПользователя Цикл
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектДоступа    = СсылкаНового;
			НоваяЗапись.ОбластьДанных    = ЭлементСписка.Значение;
			НоваяЗапись.Пользователь     = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗапись.Запись           = Истина;
			НоваяЗапись.НастройкаДоступа = Истина;
			
			НоваяЗапись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
		
		КонецЦикла
	
	КонецЕсли; 
	
	Попытка
		НаборЗаписей.Записать();
		ТаблицаДобавленныхЗаписей = НаборЗаписей.Выгрузить();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать права доступа к объекту!");
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТаблицаДобавленныхЗаписей;

КонецФункции

// Функция возвращает набор ролей пользователя
//
// Параметры
//  Пользователь  – Элемент справочника "Пользователи"
//
// Возвращаемое значение:
//   Список значений  - Элементы перечисления НаборПравПользователей 
//
Функция НаборРолейПользователя(Пользователь) Экспорт

	 НаборРолей = новый СписокЗначений;
	 НаборРолейПеречисление = новый СписокЗначений;
	 
	 Для каждого ЭлементПеречисления из Перечисления.НаборПравПользователей Цикл
		НаборРолейПеречисление.Добавить(ЭлементПеречисления,Строка(ЭлементПеречисления),)	 
	 КонецЦикла;
	 
	
	 МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	 Для каждого ПользовательСистемы из МассивПользователей Цикл
		 Если ПользовательСистемы.Имя = Пользователь.Наименование Тогда
			РолиЭтогоПользователя = ПользовательСистемы.Роли;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	
	 
	 Если РолиЭтогоПользователя <> неопределено тогда
		 Для каждого РольИзНабора из РолиЭтогоПользователя Цикл
		 	СтрокаРоли = строка (РольИзНабора);
	 
			 // Сопоставим 
			 Для каждого РольИзПеречисления из НаборРолейПеречисление Цикл
				СтрокаРолиПеречисления = РольИзПеречисления.Представление;
				СтрокаРолиСокаращенная = Лев(СтрокаРоли,СтрДлина(СтрокаРолиПеречисления));
				
				Если СтрокаРолиПеречисления = СтрокаРолиСокаращенная Тогда
					НаборРолей.Добавить(РольИзПеречисления);	
				КонецЕсли;
				
			 КонецЦикла;
			
		 КонецЦикла
	 КонецЕсли;
	 
	 Возврат НаборРолей

КонецФункции // НаборРолейПользователя()

Процедура ЗаписатьПраваДоступа(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт

	НаборПрав = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	НаборПрав.Загрузить(ТаблицаНабораПрав);
	
	Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
		НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		
		// Проверим набор на корректность установленных отборов
		Если НЕ НаборПрав.Отбор.Пользователь.Использование
		   И НЕ НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
		Если НаборПрав.Отбор.Пользователь.Использование Тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
				Возврат;
			КонецЕсли;
		Иначе //НаборПрав.Отбор.ОбъектДоступа.Использование = ИСТИНА
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(НаборПрав.Отбор.ОбъектДоступа.Значение) Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Определим по каким областям данных нет надобности контролировать раздачу прав
		МетаданныеНабораПрав  = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		// Начнем собирать изменения, которые были сделаны в текущем
		// наборе, относительно считанного из БД. Проверяем только те записи
		// в которых нет областей данных, для которых пользователь
		// может редактировать записи без ограничения
		СтарыйНабор = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
		ТаблицаРазличияЗаписей = СтарыйНабор.Выгрузить();
		СтарыйНабор.Отбор.Пользователь.Использование  = НаборПрав.Отбор.Пользователь.Использование;
		СтарыйНабор.Отбор.Пользователь.Значение       = НаборПрав.Отбор.Пользователь.Значение;
		СтарыйНабор.Отбор.ОбъектДоступа.Использование = НаборПрав.Отбор.ОбъектДоступа.Использование;
		СтарыйНабор.Отбор.ОбъектДоступа.Значение      = НаборПрав.Отбор.ОбъектДоступа.Значение;
		
		СтарыйНабор.Прочитать();
		
		ТаблицаСтарогоНабора = СтарыйНабор.Выгрузить();
		ТаблицаНовогоНабора  = НаборПрав.Выгрузить();
		
		МассивИзмерений = Новый Массив;
		МассивРесурсовИРеквизитов = Новый Массив;
		МетаданныеРегистра = Метаданные.РегистрыСведений.ПраваДоступаПользователей;
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			МассивИзмерений.Добавить(Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			МассивРесурсовИРеквизитов.Добавить(Ресурс.Имя);
		КонецЦикла;
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			МассивРесурсовИРеквизитов.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Проверим удаленные и измененные записи
		Для каждого СтрокаСтарогоНабора Из ТаблицаСтарогоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаСтарогоНабора[Измерение]);
			КонецЦикла; 
			
			НайденныеСтроки = ТаблицаНовогоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
				КонецЦикла; 
			Иначе
				Для каждого СтрокаНовогоНабора Из НайденныеСтроки Цикл
					Для каждого РесурсРеквизит Из МассивРесурсовИРеквизитов Цикл
						Если СтрокаНовогоНабора[РесурсРеквизит] <> СтрокаСтарогоНабора[РесурсРеквизит] Тогда
							НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
							Для каждого Измерение Из МассивИзмерений Цикл
								НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
							КонецЦикла; 
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		// Проверим добавленные строки
		Для каждого СтрокаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаНовогоНабора[Измерение]);
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаСтарогоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаНовогоНабора[Измерение];
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
		ТаблицаРазличияЗаписей.Свернуть("ОбъектДоступа, ОбластьДанных");
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГруппыТекущегоПользователя", ПараметрыСеанса.ГруппыТекущегоПользователя);
		
		Запрос.Текст = "";
		
		ИндексСтроки = 0;
		Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
			
			Если ИндексСтроки > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ
				|";
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ВЫБРАТЬ
			|	" + ИндексСтроки + " КАК ИндексСтроки,
			|	ПраваДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
			|ИЗ
			|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
			|ГДЕ
			|	ПраваДоступаПользователей.ОбъектДоступа = &ОбъектДоступа" + ИндексСтроки + "
			|	И
			|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных" + ИндексСтроки + "
			|	И
			|	ПраваДоступаПользователей.НастройкаДоступа = ИСТИНА
			|	И
			|	ПраваДоступаПользователей.Пользователь В(&ГруппыТекущегоПользователя)
			|";
			
			Запрос.УстановитьПараметр(("ОбъектДоступа" + ИндексСтроки), СтрокаТаблицы.ОбъектДоступа);
			Запрос.УстановитьПараметр(("ОбластьДанных" + ИндексСтроки), СтрокаТаблицы.ОбластьДанных);
		
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		ЗаписьРазрешена = Истина;
		ТекстЗапрещенияЗаписи = "";
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
			СтрокаТаблицыЗапроса = ТаблицаЗапроса.Найти(ТаблицаРазличияЗаписей.Индекс(СтрокаТаблицы), "ИндексСтроки");
			Если СтрокаТаблицыЗапроса = Неопределено Тогда
				ЗаписьРазрешена = Ложь;
				ТекстЗапрещенияЗаписи = Символы.ПС + ТекстЗапрещенияЗаписи + "Запрещено редактировать права доступа для объекта """ + Строка(СтрокаТаблицы.ОбъектДоступа) + """ и области данных """ + Строка(СтрокаТаблицы.ОбластьДанных) + """";
			КонецЕсли; 
		КонецЦикла; 
	
		Если НЕ ЗаписьРазрешена Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(("Нарушение прав доступа:" + ТекстЗапрещенияЗаписи),, ШапкаОшибки);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры
																				
Процедура ОпределитьФактИспользованияРИБ(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ИспользованиеРИБ" Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Полный.ЭтотУзел());
	Запрос.Текст = "ВЫБРАТЬ
	               |	Полный.Ссылка
	               |ИЗ
	               |	ПланОбмена.Полный КАК Полный
	               |ГДЕ
	               |	Полный.Ссылка <> &ЭтотУзел";
				   	
	ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

// Функция определяет наличение движения по регистрам для документа
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Процедура выполняет проверку возможности удаления записей регистра в зависимости от даты запрета
Процедура ПроверкаСуществующихЗаписейРегистра(Регистратор, ИмяРегистра, СтруктураПараметров, Отказ) Экспорт
		
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	ЕСли СтруктураПараметров.ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, Период КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", Регистратор);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Изменил Трефиленков Дмитрий, РГ-Софт
Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Значение      = СсылкаНового;
	НаборЗаписей.Отбор.ОбъектДоступа.Использование = Истина;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
	
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры

Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	НаборПрав   = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	// с полными правами можно все делать
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
	
		ТаблицаСтарогоЭталонногоНабора = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаСтарогоНабора);
		
		// Начнем собирать изменения, которые были сделаны в текущем
		// наборе, относительно считанного из БД.
		МассивИзмерений = Новый Массив;
		МассивРесурсовИРеквизитов = Новый Массив;
		МетаданныеРегистра = Метаданные.РегистрыСведений.ПраваДоступаПользователей;
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			МассивИзмерений.Добавить(Измерение.Имя);
		КонецЦикла;
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			МассивРесурсовИРеквизитов.Добавить(Ресурс.Имя);
		КонецЦикла;
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			МассивРесурсовИРеквизитов.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Проверим удаленные и измененные записи
		Для Каждого СтрокаСтарогоНабора Из ТаблицаСтарогоЭталонногоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаСтарогоНабора[Измерение]);
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаНовогоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
				КонецЦикла; 
			Иначе
				Для каждого СтрокаНовогоНабора Из НайденныеСтроки Цикл
					Для каждого РесурсРеквизит Из МассивРесурсовИРеквизитов Цикл
						Если СтрокаНовогоНабора[РесурсРеквизит] <> СтрокаСтарогоНабора[РесурсРеквизит] Тогда
							НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
							Для каждого Измерение Из МассивИзмерений Цикл
								НоваяСтрокаТаблицы[Измерение] = СтрокаСтарогоНабора[Измерение];
							КонецЦикла;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		// Проверим добавленные строки
		Для каждого СтрокаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СтруктураПоиска = Новый Структура;
			Для каждого Измерение Из МассивИзмерений Цикл
				СтруктураПоиска.Вставить(Измерение, СтрокаНовогоНабора[Измерение]);
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаСтарогоЭталонногоНабора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаТаблицы = ТаблицаРазличияЗаписей.Добавить();
				Для каждого Измерение Из МассивИзмерений Цикл
					НоваяСтрокаТаблицы[Измерение] = СтрокаНовогоНабора[Измерение];
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
		// если ни одна строка прав не помяналась - то ничего делать не нужно
		Если ТаблицаРазличияЗаписей.Количество() Тогда
		
			ТаблицаРазличияЗаписей.Свернуть("ОбъектДоступа, ОбластьДанных");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппыТекущегоПользователя", ПараметрыСеанса.ГруппыТекущегоПользователя);
			Запрос.Текст = "";
			
			ИндексСтроки = 0;

			Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
				
				Если ИндексСтроки > 0 Тогда
					Запрос.Текст = Запрос.Текст + "
					|
					|ОБЪЕДИНИТЬ
					|" ;
				КонецЕсли; 
				
				Запрос.Текст = Запрос.Текст + "
				|
				|ВЫБРАТЬ
				|	" + ИндексСтроки + " КАК ИндексСтроки,
				|	ПраваДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
				|ИЗ
				|	РегистрСведений.ПраваДоступаПользователей КАК ПраваДоступаПользователей
				|ГДЕ
				|	ПраваДоступаПользователей.ОбъектДоступа = &ОбъектДоступа" + ИндексСтроки + "
				|	И
				|	ПраваДоступаПользователей.ОбластьДанных = &ОбластьДанных" + ИндексСтроки + "
				|	И
				|	ПраваДоступаПользователей.НастройкаДоступа = ИСТИНА
				|	И
				|	ПраваДоступаПользователей.Пользователь В(&ГруппыТекущегоПользователя)
				|";
				
				Запрос.УстановитьПараметр(("ОбъектДоступа" + ИндексСтроки), СтрокаТаблицы.ОбъектДоступа);
				Запрос.УстановитьПараметр(("ОбластьДанных" + ИндексСтроки), СтрокаТаблицы.ОбластьДанных);
			
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			ЗаписьРазрешена = Истина;
			ТекстЗапрещенияЗаписи = "";
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			Для каждого СтрокаТаблицы Из ТаблицаРазличияЗаписей Цикл
				СтрокаТаблицыЗапроса = ТаблицаЗапроса.Найти(ТаблицаРазличияЗаписей.Индекс(СтрокаТаблицы), "ИндексСтроки");
				Если СтрокаТаблицыЗапроса = Неопределено Тогда
					ЗаписьРазрешена = Ложь;
					ТекстЗапрещенияЗаписи = Символы.ПС + ТекстЗапрещенияЗаписи + "Запрещено редактировать права доступа для объекта """ + Строка(СтрокаТаблицы.ОбъектДоступа) + """ и области данных """ + Строка(СтрокаТаблицы.ОбластьДанных) + """";
				КонецЕсли; 
			КонецЦикла; 

			Если НЕ ЗаписьРазрешена Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(("Нарушение прав доступа:" + ТекстЗапрещенияЗаписи),, ШапкаОшибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	
КонецПроцедуры // () 

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры
//конец изменения

//Добавил РГ-Софт - Пронин Иван - 2009-06-27
// Процедура записывает набор записей на сервере (привилегированно)
//
Процедура ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено, ТипРегистра = "РегистрНакопления") Экспорт
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.мТаблицаДвижений = ТаблицаДвижений;
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);		
		КонецЕсли;
		
	Иначе
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли; 
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	КонецЕсли; 
	
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Записать();
	
КонецПроцедуры
//Конец добавления 2009-06-27

// Добавил РГ-Софт - Иванов Антон - 2009-07-29
Процедура ПровестиДокумент(ДокументСсылка, ПроведениеПослеУтверждения = Ложь) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если ПроведениеПослеУтверждения Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоПроведениеПослеУтверждения", Истина);
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Если ПроведениеПослеУтверждения Тогда
		ДокументОбъект.ДополнительныеСвойства.Удалить("ЭтоПроведениеПослеУтверждения");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции