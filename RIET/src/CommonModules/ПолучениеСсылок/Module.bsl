
Функция ПолучитьСтавкуНДСИзTaxCode(TaxCode, Период) Экспорт
	
	Суффикс = Прав(TaxCode, 3);
	Если Суффикс = "STD" Тогда		
		Возврат РГСофт.ПолучитьСсылкуСтавкаНДСОтПериода(Период); // RGS EParshina 29.12.2018 18:39:43 - SLI-0007797 //Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Суффикс = "WHT" Тогда   //изменил Трефиленков Дмитрий, РГ-Софт, 16.11.2011 по вопросу SLI-0002060 
		Возврат РГСофт.ПолучитьСсылкуСтавкаНДСОтПериода(Период, Истина); // RGS EParshina 29.12.2018 18:39:43 - SLI-0007797 //Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли Суффикс = "DIS" Тогда  //изменил Трефиленков Дмитрий, РГ-Софт, 26.12.2012 по вопросу SLI-0003016
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли Суффикс = "ZER" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли Суффикс = "10%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли TaxCode = "RUMOSVTCST"
		ИЛИ TaxCode = "RUSAKVTCST" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18
	Иначе
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// ОРГАНИЗАЦИЯ

Функция ПолучитьОрганизациюПоCompany(Company) Экспорт
	
	//Изменила Федотова Л., РГ-Софт, 19.05.15, вопрос PA_-0000346
	//Если Company = 4 Тогда
	//	
	//	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	//	
	//КонецЕсли;
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		Если Company = 364 Тогда
			
			Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
			
		КонецЕсли;
	Иначе
		Если Company = 4 Тогда
			
			Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьCompanyПоОрганизации(Организация) Экспорт
	
	Если Организация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация") Тогда
	
		Возврат 4;		
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// AU

Функция ПолучитьТаблицуAU() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//-> RG-Soft VIvanov 2015/02/18
		//"ВЫБРАТЬ
		//|	КостЦентры.Ссылка,
		//|	КостЦентры.Код
		//|ИЗ
		//|	Справочник.КостЦентры КАК КостЦентры
		//|ГДЕ
		//|	(НЕ КостЦентры.ПометкаУдаления)";
	"ВЫБРАТЬ
	|	КостЦентры.Ссылка,
	|	КостЦентры.Код,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СегментыКостЦентров.КостЦентр) КАК КостЦентр
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.КостЦентры КАК КостЦентры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СегментыКостЦентров КАК СегментыКостЦентров
	|		ПО СегментыКостЦентров.Код = КостЦентры.Код
	|ГДЕ
	|	НЕ КостЦентры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КостЦентры.Ссылка,
	|	КостЦентры.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка,
	|	ВТ.Код
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.КостЦентр <= 1";
	//<- RG-Soft VIvanov
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПрименитьСокрЛПККолонкеКод(Таблица);
	
	Таблица.Индексы.Добавить("Код");
	
	Возврат Таблица;
	
КонецФункции

Функция НайтиAUВТаблице(Таблица, Код) Экспорт
	
	Строка = Таблица.Найти(Код, "Код");
	Если Строка = Неопределено Тогда
		Возврат Справочники.КостЦентры.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Строка.Ссылка;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ

// КОНТРАГЕНТЫ LAWSON!!!
Функция ПолучитьКонтрагентаПоLawsonIDИНаименованиюEnglish(LawsonID, НаименованиеEnglish, Таблица = Неопределено) Экспорт
	
	Если Таблица <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("LawsonID", LawsonID);
		Строки = Таблица.НайтиСтроки(СтруктураПоиска);
	Иначе
		
		Запрос = Новый Запрос;
	    Запрос.УстановитьПараметр("LawsonID", LawsonID);
		// И НЕ НАДО ИСПРАВЛЯТЬ ЗАПРОС ПОКА НЕ ЗАРАБОТАЕТ СПРАВОЧНИК КОНТРАГЕНТЫ LAWSON!!!
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка,
			|	Контрагенты.НаименованиеEnglish
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(НЕ Контрагенты.ПометкаУдаления)
			|	И Контрагенты.LawsonID = &LawsonID";
			
		Строки = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	КоличествоСтрок = Строки.Количество();
	
	Если НЕ КоличествоСтрок Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	// Если найден один контрагент - его и возвращаем
	Если КоличествоСтрок = 1 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли;
		
	// Ищем контрагента с совпадающим английским наименованием
	Для Каждого Строка Из Строки Цикл
			
		Если Строка.НаименованиеEnglish = НаименованиеEnglish Тогда
			Возврат Строка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до этой строки - значит такого контрагента нет, выводим ошибку
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьКонтрагентаПоLawsonID_КонтрагентLawson_НаименованиюEnglish(LawsonID, НаименованиеEnglish, Таблица = Неопределено) Экспорт
	
	Если Таблица <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("LawsonID", LawsonID);
		Строки = Таблица.НайтиСтроки(СтруктураПоиска);
	Иначе
		
		Запрос = Новый Запрос;
	    Запрос.УстановитьПараметр("LawsonID", LawsonID);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка,
			|	Контрагенты.НаименованиеEnglish,
			|	Контрагенты.КонтрагентLawson,
			|	Контрагенты.LawsonID
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(НЕ Контрагенты.ПометкаУдаления)
			|	И Контрагенты.LawsonID = &LawsonID";
			
		Результат = Запрос.Выполнить();	
		Строки = Результат.Выгрузить();
		
	КонецЕсли;
	
	КоличествоСтрок = Строки.Количество();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	// Если найден один контрагент - его и возвращаем
	Если КоличествоСтрок = 1 Тогда
		Если Строки[0].Ссылка.КонтрагентLawson.Пустая()
			И НЕ Строки[0].КонтрагентLawson.Пустая() Тогда
			КонтрагентОбъект = Строки[0].Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.КонтрагентLawson = Строки[0].КонтрагентLawson;
			Попытка
				КонтрагентОбъект.Записать();
			Исключение
			    Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли; 
		Возврат Строки[0].Ссылка;
	КонецЕсли;
	
		
	// Ищем контрагента с совпадающим кодом КонтрагентLawson
	Для Каждого Строка Из Строки Цикл
			
		Если Строка.LawsonID = Строка.КонтрагентLawson.Код Тогда
			Возврат Строка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Ищем контрагента с совпадающим английским наименованием
	Для Каждого Строка Из Строки Цикл
			
		Если Строка.НаименованиеEnglish = НаименованиеEnglish Тогда
			Возврат Строка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до этой строки - значит такого контрагента нет, выводим ошибку
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

// КОНТРАГЕНТЫ LAWSON!!!
Функция ПолучитьТаблицуКонтрагентов() Экспорт
	
	Запрос = Новый Запрос;
	
	// И НЕ НАДО ИСПРАВЛЯТЬ ЗАПРОС ПОКА НЕ ЗАРАБОТАЕТ СПРАВОЧНИК КОНТРАГЕНТЫ LAWSON!!!
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.LawsonID КАК LawsonID,
		|	Контрагенты.НаименованиеEnglish
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(НЕ Контрагенты.ПометкаУдаления)";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("LawsonID");
	
	Возврат Таблица;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// КЕШ-КОДЫ

Функция ПолучитьCashCodeПоКодуСоздатьНовый(Код, ТаблицаКешКодов = Неопределено) Экспорт
	
	CashCode = ПолучитьCashCodeПоКоду(Код, ТаблицаКешКодов);
	
	Если НЕ ЗначениеЗаполнено(CashCode) И ЗначениеЗаполнено(Код) Тогда
		
		CashCodeОбъект = Справочники.CashCode.СоздатьЭлемент();
		CashCodeОбъект.Код = Код;
		
		Попытка
			CashCodeОбъект.Записать();
			CashCode = CashCodeОбъект.Ссылка;
		Исключение
			Возврат Справочники.CashCode.ПустаяСсылка();
		КонецПопытки;
			
	КонецЕсли;
	
	// ВОЗВРАЩАТЬ ТЮМЕНСКИЙ КЕШ КОД!!!
	
	Возврат CashCode;
	
КонецФункции

Функция ПолучитьCashCodeПоКоду(Код, ТаблицаКешКодов = Неопределено) Экспорт
	
	Если ТаблицаКешКодов <> Неопределено Тогда
		CashCode = ПолучениеСсылок.НайтиКешКодВТаблице(ТаблицаКешКодов, Код);
	Иначе
		CashCode = Справочники.CashCode.НайтиПоКоду(Код);
	КонецЕсли;
	
	Возврат CashCode;
	
КонецФункции

Функция ПолучитьТаблицуКешКодов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CashCode.Ссылка,
		|	CashCode.Код
		|ИЗ
		|	Справочник.CashCode КАК CashCode
		|ГДЕ
		|	(НЕ CashCode.ПометкаУдаления)";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПрименитьСокрЛПККолонкеКод(Таблица);
	
	Таблица.Индексы.Добавить("Код");
	
	Возврат Таблица;
	
КонецФункции

Функция НайтиКешКодВТаблице(Таблица, Код) Экспорт
	
	Строка = Таблица.Найти(Код, "Код");
	Если Строка = Неопределено Тогда
		Возврат Справочники.CashCode.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Строка.Ссылка;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// ПОДРАЗДЕЛЕНИЯ

Функция ПолучитьТаблицуПодразделений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Код
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	(НЕ ПодразделенияОрганизаций.ПометкаУдаления)";
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПрименитьСокрЛПККолонкеКод(Таблица);
	
	Таблица.Индексы.Добавить("Код");
	
	Возврат Таблица;
	
КонецФункции

Функция НайтиПодразделениеВТаблице(Таблица, Код) Экспорт
	
	Строка = Таблица.Найти(Код, "Код");
	Если Строка = Неопределено Тогда
		Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Строка.Ссылка;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ЗАТРАТ

Функция ПолучитьОписаниеЗатрат(AktOfAcceptance) Экспорт
	
	Если СтрНайти(AktOfAcceptance, "FND") Тогда
		Возврат Справочники.ОписаниеЗатрат.НайтиПоКоду(538); // FA
	ИначеЕсли СтрНайти(AktOfAcceptance, "NR") Тогда
		Возврат Справочники.ОписаниеЗатрат.НайтиПоКоду(548); // ND
	КонецЕсли;
	
	Возврат Справочники.ОписаниеЗатрат.ПустаяСсылка();
	
КонецФункции
	
	
//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ, ФУНКЦИИ

Процедура ПрименитьСокрЛПККолонкеКод(Таблица)
	
	Колонки = Таблица.Колонки;
	
	СтараяКолонка = Колонки.Код;
	Длина = СтараяКолонка.ТипЗначения.КвалификаторыСтроки.Длина;
	СтараяКолонка.Имя = "КодСтарый";
	
	Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Длина, ДопустимаяДлина.Переменная)));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Код = СокрЛП(Строка.КодСтарый);
	КонецЦикла;
	
	Колонки.Удалить(СтараяКолонка);
	
КонецПроцедуры

