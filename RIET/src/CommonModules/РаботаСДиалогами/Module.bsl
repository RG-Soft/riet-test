// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ИСПОЛЬЗУЕМЫЕ ДЛЯ ВЫЗОВА ИЗ ИНТЕРФЕЙСОВ

//Процедура открывает список выбора внешних обработок
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	
	//Изменил - РГ-Софт - Иванов Антон - 2008-09-19
	//Чтобы можно было открывать файлы erf
	
	//ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка);
	Список.Добавить(Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет);
		
	//Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,Список);
	
	//Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	ОтборПоВидуОбработки = Форма.СправочникСписок.Отбор.ВидОбработки;
	ОтборПоВидуОбработки.ВидСравнения = ВидСравнения.ВСписке;
	ОтборПоВидуОбработки.Значение = Список;
	ОтборПоВидуОбработки.Использование = Истина;
	
	//Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
	
	//конец изменения
	
КонецПроцедуры // () 

//Процедура открывает список выбора внешних печатных форм
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ВВОДА ПО СТРОКЕ В ПОЛЕ ВВОДА

// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при вводе по строке
//  Текст - Строка, текст ввода по строке
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Знач Текст, ТипСправочника)

	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		Если ЕстьНаименование И КоллекцияЗначенийПоискаПоПодстроке.Найти("Наименование") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И КоллекцияЗначенийПоискаПоПодстроке.Найти("Код") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, Строка(СтрокаТаблицы.Код));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ ввода по строке.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором происводится ввод по строке
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		Значение = Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Значение = Выборка.Ссылка;
		ИначеЕсли Выборка.Количество() > 50 Тогда
			Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
						   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
			Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
				Значение = Текст;
			Иначе
				Значение = ПоследнееЗначениеЭлементаТайпинга;
			КонецЕсли; 
		Иначе
			Если Выборка.Количество() = 0 Тогда
				ВыбранныйЭлемент = Неопределено;
			Иначе
				СписокВыбора = СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
				ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			КонецЕсли; 
			Если ВыбранныйЭлемент = Неопределено Тогда
				ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
				Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
					ОбработкаТайпинга = Истина;
					ТекстТайпинга = Текст;
				КонецЕсли;
			Иначе
				Значение = ВыбранныйЭлемент.Значение;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПустаяСсылка = Новый(ТипСправочника);
			КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
			Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
				Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
					Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
						ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт

	ПустаяСсылкаТипа = Новый(ТипСправочника);
	
	КоллекцияПоискаПоПодстроке = ПустаяСсылкаТипа.Метаданные().ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = ПустаяСсылкаТипа.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", (Текст + "%"));
	
	СтрокаОтборовПоСтруктуре = "";
	Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаСправочника.") + ЭлементСтруктуры.Ключ + " В (&"+ ЭлементСтруктуры.Ключ+ ")";
	КонецЦикла; 
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если ПустаяСсылкаТипа.Метаданные().ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если ПустаяСсылкаТипа.Метаданные().ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ
		|	ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя + " ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~""" + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ
			|		ТаблицаСправочника." + ЭлементКоллекции.Имя + " ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~""" + СтрокаОтборовПоСтруктуре;
		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()


//////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ВЫБОРА

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для получения списка только балансовых или только
// забаланс
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Флаг) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Флаг", Флаг);
	Запрос.Текст = "ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Забалансовый = &Флаг";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//// Тип выбираемого значения зависит от договора.
	//Если ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда
	//	Предупреждение("Не выбран контрагент!");
	//	ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
	//	Возврат;
	//КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
	   И Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;

	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
					   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если не ОграничениеТипов = Неопределено Тогда
		СписокОграниченияТипов = Новый СписокЗначений();
		СписокОграниченияТипов.ЗагрузитьЗначения(ОграничениеТипов);
	КонецЕсли; 

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
            Если не ОграничениеТипов = Неопределено Тогда
			    Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата",               ДокументОбъект.Дата);
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Контрагент") Тогда
			СписокПараметров.Вставить("Контрагент",         СтруктураОтбора.Контрагент);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("Контрагент",     ДокументОбъект.Контрагент);
		КонецЕсли; 
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента",         СтруктураОтбора.ДоговорКонтрагента);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("ДоговорКонтрагента",     ДокументОбъект.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Организация") Тогда
			СписокПараметров.Вставить("Организация",         СтруктураОтбора.Организация);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("Организация",     ДокументОбъект.Организация);
		КонецЕсли; 
		
		БухгалтерскийУчет.ОбработатьВыборСубконто(ЭлементФормы, Ложь, ДокументОбъект.Организация, СписокПараметров, ?(ОграничениеТипов = Неопределено, Неопределено, Новый ОписаниеТипов(ОграничениеТипов)));
		Возврат;

	КонецЕсли;
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);
	
	Попытка
		// Отфильруем список документов.
		//Добавила условие и то, что до "Иначе" Федотова Л., РГ-Софт, 28.05.15, вопрос SLI-0005450
		Если Тип(ФормаВыбора) = Тип("УправляемаяФорма") Тогда
			ФормаВыбора.Список.Отбор.Элементы.Очистить();
			Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
				
				НовыйЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ);
				НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
				НовыйЭлементОтбора.Использование  = Истина;
				НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлементОтбора.ПравоеЗначение = ЭлементСтруктуры.Значение;
			КонецЦикла;
		Иначе
			Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
					ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
				КонецЕсли;
				
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	//Добавила условие Федотова Л., РГ-Софт, 28.05.15, вопрос SLI-0005450
	Если НЕ Тип(ФормаВыбора) = Тип("УправляемаяФорма") Тогда
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ЭлементФормы.Значение) Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
		КонецЕсли;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  Объект       - объект редактируемого документа;
//  ФормаОбъекта       	 - форма редактируемого объекта;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияСправочникаСоставногоТипа(Объект, ФормаОбъекта, ЭлементФормы, 
					   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = Объект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаОбъекта.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если не ОграничениеТипов = Неопределено Тогда
		СписокОграниченияТипов = Новый СписокЗначений();
		СписокОграниченияТипов.ЗагрузитьЗначения(ОграничениеТипов);
	КонецЕсли; 

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
            Если не ОграничениеТипов = Неопределено Тогда
			    Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаОбъекта.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("СправочникСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Справочники[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Справочники[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	Попытка
		// Отфильруем список документов.
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл

			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;

			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

		КонецЦикла;

	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета,ЭлементФормы, СтандартнаяОбработка, 
									   ВалютаБанковскогоСчета = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.Открыть();


КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора склада в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  Склад                 - текущий склад в форме;
//  ВидСравненияНТТ       - Вид сравнения - равно или не равно неавтоматизированной торговой точке;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//
Процедура НачалоВыбораСкладаНТТ(ДокументОбъект, ФормаДокумента, ЭлементФормы, Склад, ВидСравненияНТТ,
							  СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,ЭлементФормы,);

	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравненияНТТ;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока                         = Склад;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСкладаНТТ()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает курс взаиморасчетов по выбранной дате.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ВыбратьКурсВзаиморасчетов(ДокументОбъект) Экспорт

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем курс.
	ВыбратьКурсВалюты(ДокументОбъект.КурсВзаиморасчетов,ДокументОбъект.КратностьВзаиморасчетов,
					   ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
					   ДокументОбъект.Дата); //По умолчанию курс всегда на дату документа

КонецПроцедуры // ВыбратьКурсВзаиморасчетов()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Заголовок = "" + ДокументОбъект + ": ";
	
	Если НЕ ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = Заголовок + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Устанавливает видимость закладки "Возвратная тара" в форме документа
//
// Параметры:
//  ФормаДокумента - форма документа.
//
Процедура УстановитьВидимостьЗакладкиВозвратнаяТара(ФормаДокумента) Экспорт

	ИспользоватьВозвратнуюТару = ?(ФормаДокумента.ВозвратнаяТара.Количество() = 0, Константы.ИспользоватьВозвратнуюТару.Получить(), Истина);

	СтраницыПанели                  = ФормаДокумента.ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницыПанели.Тара.Видимость   = ИспользоватьВозвратнуюТару;
	СтраницыПанели.Тара.Доступность = ИспользоватьВозвратнуюТару;

КонецПроцедуры // УстановитьВидимостьЗакладкиВозвратнаяТара()

//Добавила Федотова Л., РГ-Софт, 22.10.12 вопрос №SLI-0002892
//Данная процедура вызывается из предопределенной процедуры управляемой формы ПриСозданииНаСервере
//либо из процедуры ПодготовитьФормуНаСервере, если последняя используется и вызывается из ПриСозданииНаСервере.
//Пример вызова: РаботаСДиалогами.ЗаполнитьЗаголовкиВНужнойВалютеУправляемаяФорма(Элементы, РеквизитФормыВЗначение("Объект"));
//
Процедура ЗаполнитьЗаголовкиВНужнойВалютеУправляемаяФорма(Элементы, ДокОбъект) Экспорт
	
	ИмяВалюты = СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
    Заголовок = "";
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Заголовок = "" Тогда
			Попытка
				//если возможно, найдем путь к данным
				ПутьКДанным = Элемент.ПутьКДанным; //он будет вида "Объект.Товары.СуммаБезНДСРуб"
				//если есть путь к данным, найдем синоним
			    //уберем "Объект." слева, а оставшееся разделим по разделителю "." и поместим в массив
				ПутьКДанным = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - 7);
				Массив = Новый Массив;
				Позиция = СтрНайти(ПутьКДанным, ".");
				Если Позиция > 0 Тогда
					Массив.Добавить(Лев(ПутьКДанным,Позиция-1));
					ПутьКДанным = Прав(ПутьКДанным, СтрДлина(ПутьКДанным) - Позиция);
				КонецЕсли; 
				Массив.Добавить(ПутьКДанным);
				
				Если Массив.Количество() = 2 Тогда
					Заголовок = ДокОбъект.Метаданные().ТабличныеЧасти[Массив[0]].Реквизиты[Массив[1]].Синоним;
				ИначеЕсли Массив.Количество() = 1 Тогда
					Заголовок = ДокОбъект.Метаданные().Реквизиты[Массив[0]].Синоним;
				КонецЕсли; 
			Исключение
			КонецПопытки;
		Иначе                  
			Заголовок = Элемент.Заголовок;
		КонецЕсли; 

		Если СтрНайти(Заголовок, "Руб") > 0 Тогда
			Элемент.Заголовок = СтрЗаменить(Заголовок,"Руб",ИмяВалюты);  
		ИначеЕсли СтрНайти(Заголовок, "руб") Тогда
			Элемент.Заголовок = СтрЗаменить(Заголовок,"руб",ИмяВалюты);  
		ИначеЕсли СтрНайти(Заголовок, "РУБ") Тогда
			Элемент.Заголовок = СтрЗаменить(Заголовок,"РУБ",ИмяВалюты);  
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьЗаголовкиВНужнойВалютеУправляемаяФорма

//Добавила Федотова Л., РГ-Софт, 23.10.12 вопрос №SLI-0002892
//Данная процедура вызывается из предопределенной процедуры тостой формы ПриОткрытии
//Пример вызова: РаботаСДиалогами.ЗаполнитьЗаголовкиВНужнойВалютеТолстаяФорма(ЭлементыФормы, ЭтотОбъект);
//
Процедура ЗаполнитьЗаголовкиВНужнойВалютеТолстаяФорма(ЭлементыФормы, ДокОбъект) Экспорт
	
	ИмяВалюты = СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
	ИмяВалюты = "KZT";
	Для каждого Элемент Из ЭлементыФормы Цикл
		Попытка
			Если Элемент.Заголовок <> "" Тогда
				Если СтрНайти(Элемент.Заголовок, "Руб") > 0 Тогда
					Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок,"Руб",ИмяВалюты);  
				ИначеЕсли СтрНайти(Элемент.Заголовок, "руб") Тогда
					Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок,"руб",ИмяВалюты);  
				ИначеЕсли СтрНайти(Элемент.Заголовок, "РУБ") Тогда
					Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок,"РУБ",ИмяВалюты);  
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
	ТабЧасти = ДокОбъект.Метаданные().ТабличныеЧасти;
	Для каждого ТЧ Из ТабЧасти Цикл
		Колонки = ЭлементыФормы[ТЧ.Имя].Колонки;
		Для каждого Колонка Из Колонки Цикл
			Если СтрНайти(Колонка.ТекстШапки, "Руб") > 0 Тогда
				Колонка.ТекстШапки = СтрЗаменить(Колонка.ТекстШапки,"Руб",ИмяВалюты);  
			ИначеЕсли СтрНайти(Колонка.ТекстШапки, "руб") Тогда
				Колонка.ТекстШапки = СтрЗаменить(Колонка.ТекстШапки,"руб",ИмяВалюты);  
			ИначеЕсли СтрНайти(Колонка.ТекстШапки, "РУБ") Тогда
				Колонка.ТекстШапки = СтрЗаменить(Колонка.ТекстШапки,"РУБ",ИмяВалюты);  
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьЗаголовкиВНужнойВалютеТолстаяФорма

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента, НумерацияПриЗаписи = Ложь) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		Если НумерацияПриЗаписи Тогда
			ДокументОбъект.Номер = "";
		Иначе
			ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
        КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт

	МетаданныеДокумента            = ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента            = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
	ЕстьДоговорКонтрагента         = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;
	
	// Добавил РГ-Софт - Иванов Антон - 2009-06-26
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПроведения", МетаданныеДокумента) Тогда
		НастройкаПравДоступа.УстановитьДатуПроведенияДокумента(ДокументОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("НалоговыйПериод", МетаданныеДокумента) Тогда
		НастройкаПравДоступа.УстановитьНалоговыйПериодДокумента(ДокументОбъект);
	КонецЕсли;
	
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Договор) И Договор.Курс = 0 Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураНовогоКурсаВалюты  = ОбщегоНазначения.ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
	НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
	НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;

	ЕстьКурсДокумента           = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
	ЕстьКратностьДокумента      = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
		СтарыйКурс      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратность = ДокументОбъект.КратностьВзаиморасчетов;
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
		СтарыйКурс      = ДокументОбъект.КурсДокумента;
		СтараяКратность = ДокументОбъект.КратностьДокумента;
	Иначе
		Возврат;
	КонецЕсли;

	// Если курс и кратность неизменилась, то выход.
	Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
		Возврат;
	КонецЕсли;

	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
	ТекстНовыйКурс  = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
	                + Символы.ПС+ "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
	Ответ           = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ЕстьКурсДокумента Тогда
			ДокументОбъект.КурсДокумента           = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьДокумента Тогда
			ДокументОбъект.КратностьДокумента      = НоваяКратность;
		КонецЕсли;
		Если ЕстьКурсВзаиморасчетов Тогда
			ДокументОбъект.КурсВзаиморасчетов      = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьВзаиморасчетов Тогда
			ДокументОбъект.КратностьВзаиморасчетов = НоваяКратность;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//  СтруктураРеквизитов- заранее определенные реквизиты для проверки
//  ТабличнаяЧасть     - имя ТЧ на каторую будет установлен фокус если все обяз. реквизиты заполнены
//  СтраницыСТабЧастями- структура типа ("имя страницы",	"имя таблицы размещенной на этой странице"), т.е.
//     в параметр "ТабличнаяЧасть" можно передать имя страницы на каторой размещена ТЧ, а структура "СтраницыСТабЧастями"
//     необходима для поиска ТЧ по имени страницы.
Функция АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента ,СтруктураРеквизитов = неопределено,ТабличнаяЧасть = неопределено,СтраницыСТабЧастями = неопределено) Экспорт

	Если Не ДокументОбъект.Проведен Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда
			// Структура - порядок активизации реквизитов.
			// Активизируется первый не заполненный.
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("Дата");
			СтруктураРеквизитов.Вставить("Организация");      
			СтруктураРеквизитов.Вставить("СчетОрганизации");
			СтруктураРеквизитов.Вставить("Склад");
			СтруктураРеквизитов.Вставить("БанковскийСчет");
			СтруктураРеквизитов.Вставить("ФизЛицо");
			СтруктураРеквизитов.Вставить("Контрагент");
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("Касса");
			СтруктураРеквизитов.Вставить("Получатель");
			СтруктураРеквизитов.Вставить("Плательщик");
			СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
		КонецЕсли;
		
		Для каждого Элемент Из СтруктураРеквизитов Цикл
			
			// Определим, есть ли ЭУ с таким именем.
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
			Если ЭлементУправления <> Неопределено Тогда // есть такой
				Если ЭлементУправления.Видимость И ЭлементУправления.Доступность И НЕ ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда 
					
					// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
					ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
					Возврат(Истина);
					Прервать;
				КонецЕсли; 
				ТекущийРеквезит = ЭлементУправления;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//если в документе есть ТЧ то необходимой фокус передать ей
	Если ТабличнаяЧасть <> Неопределено Тогда
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(ТабличнаяЧасть.Имя);
		Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат(Истина);
		ИначеЕсли СтраницыСТабЧастями <> неопределено Тогда
			
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(СтраницыСТабЧастями.НайтиПоЗначению(ТабличнаяЧасть.Имя));
			Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Возврат(Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//Если все поля заполнены но нет ТЧ то передадим фокус панели, в результате
	//визуально будет казаться что фокус не установлен ни на одном ЭФ.
	//Хотелось бы фокус установить на кнопке "Закрыть", но пока технически не предоставляется
	//такой возможности.
	ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("ОсновныеДействияФормы");
	Если ЭлементУправления <> Неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат(Истина);
	КонецЕсли;
	
Возврат(Ложь);

КонецФункции// АктивизироватьРеквизитВФорме()

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора, ЭлементФормы, ПараметрОтборПоРегистратору, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
		Иначе
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		КонецЕсли;
		
		ЭлементОтбора.Значение = Организация;
		ЭлементОтбора.Использование = Не Организация.Пустая();
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,"организации","организаций");
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Возврат НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");

КонецФункции // СформироватьЗаголовокДокумента()

// Процедура предназначена для заполнения реквизитов формы,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм обработок.
//
// Параметры:
//  ЗаполняемаяФорма  - форма, реквизиты которой следует заполнить,
//  ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьРеквизитыФормы(ЗаполняемаяФорма, ТекПользователь) Экспорт

	Элементы = ЗаполняемаяФорма.ЭлементыФормы;

	Для каждого Элемент из Элементы Цикл

		Если	Элемент.Имя = "Организация" тогда
			Элемент.Значение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеквизитыФормы()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
//     Параметры:
//          Счет - выбранный счет
//          Форма - форма(или табличное поле) на которой расположены счет и субконто
//          Префикс - префекс наименования субконто. к префиксу добавляется номер субконто на счете
//                    для подписи с наименованием субконто предпологается имя
//                    вида "Надпись" + Префикс + НомерСубконто
//                    в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчета(Счет, Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3, ПолеСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,НадписьСубконто1,Субконто2,НадписьСубконто2,Субконто3,НадписьСубконто3", Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		ЭлементыСубконто["Субконто" + Сч].ВыбиратьТип = Ложь;
		
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение) <> ЭлементыСубконто["Субконто" + Сч].Значение Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение);
		КонецЕсли;

		ЭлементыСубконто["НадписьСубконто" + Сч].Заголовок = Счет.ВидыСубконто[Сч - 1].ВидСубконто.Наименование + ":";
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = Ложь;
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = Ложь;
		
	КонецЦикла;
	
	Если ПолеСчет <> НЕОПРЕДЕЛЕНО Тогда
		ПолеСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

//настройка подменю Клиент-Банк
Процедура УстановкаПодменюКлиентБанк(Кнопка, Объект) Экспорт

	Если Объект.РеквизитыКонтрагента.Количество() = 0 Тогда
		Кнопка.СоздатьКонтрагента.Доступность =Ложь;
	Иначе
		Кнопка.СоздатьКонтрагента.Доступность =Истина;
	КонецЕсли; 

КонецПроцедуры // УстановкаПодменюКлиентБанк()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ В ФОРМЕ

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
							   СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
							   ВалютаРегламентированногоУчета,
							   СкидкаУстановлена = Ложь,
							   СтруктураЗначений = Неопределено,
							   НовыйТипЦенДляУстановки = Неопределено,
							   СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт

	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда

		СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
									  СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);

	Иначе
		Автозаполнение = Истина;

	КонецЕсли;

	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	//обрабатываем изменения Товаров, Услуг, ВозворатнойТары и Оборудования
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл

		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;

		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
			  ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
			И (   ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена",               МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма",              МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления",    МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления",   МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи",       МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи",      МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая",         МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая",        МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС",           МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда

			Ценообразование.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
												  СпособЗаполненияЦен,
												  СтруктураРеквизитовДокумента,
												  ТекущееИмяТабличнойЧасти,
												  ВалютаРегламентированногоУчета,
												  СкидкаУстановлена,
												  СтруктураЗначений,
												  Автозаполнение);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ИзменитьЦеныВалюту()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ XML

Функция ПрочитатьЭлементXML(ОбъектДоступаXML, ИмяЭлемента = Неопределено)
	
	ИмяПоследнегоЗакрытогоУзла = "";
	
	Пока ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
		Если ОбъектДоступаXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяПоследнегоЗакрытогоУзла = ОбъектДоступаXML.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяЭлемента <> Неопределено Тогда // если определили имя элемента, нужно чтобы совпадало с полученным
		Если ОбъектДоступаXML.Имя <> ИмяЭлемента Тогда
			Сообщить("Неправильное имя узла (" + ИмяЭлемента + ")!"); 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеАтрибутов = Новый Соответствие();
	
	СоответствиеАтрибутов.Вставить("ИмяТекущегоУзлаXML", ОбъектДоступаXML.Имя);
	СоответствиеАтрибутов.Вставить("ИмяПоследнегоЗакрытогоУзла", ИмяПоследнегоЗакрытогоУзла);
	
	Пока ОбъектДоступаXML.ПрочитатьАтрибут() Цикл
		СоответствиеАтрибутов.Вставить(ОбъектДоступаXML.Имя, ОбъектДоступаXML.Значение);
	КонецЦикла;
	
	Возврат СоответствиеАтрибутов;

КонецФункции

Функция ДочитатьУзелДоКонца(ОбъектДоступаXML,ИмяЭлемента)
	
	Пока (ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.КонецЭлемента) И (ОбъектДоступаXML.ИмяУзла = ИмяЭлемента) Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДМЕНЮ ПЕРЕЙТИ

Функция ПолучитьXMLОписаниеПодменю()
	
	Возврат ПолучитьОбщийМакет("СоставПодменюПерейти").ПолучитьТекст();
	
КонецФункции

Функция ПолучитьДеревоПодменюПерейти(ТипОбъекта, ИмяОбъекта, ДействиеПоУмолчанию, СоответствиеДействийПодменюПерейти) Экспорт
	
	ОбъектЧтенияПодменю = Новый ЧтениеXML();
	ОбъектЧтенияПодменю.УстановитьСтроку(ПолучитьXMLОписаниеПодменю());
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "УказательПодменюПерейти");
	
	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");

	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока ("" + СоответствиеАттрибутов["Тип"] + СоответствиеАттрибутов["Имя"]) <> (ТипОбъекта + ИмяОбъекта) Цикл
		
		ДочитатьУзелДоКонца(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		Если СоответствиеАттрибутов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПодменю = ИнициализироватьДеревоДополнительныхКнопок();
	ТекущаяСтрокаДерева = ДеревоПодменю;
	
	СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
	
	Если СоответствиеАттрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяУзла = СоответствиеАттрибутов["ИмяТекущегоУзлаXML"];
	ИмяПоследнегоЗакрытогоУзла = СоответствиеАттрибутов["ИмяПоследнегоЗакрытогоУзла"];
	
	Пока ИмяПоследнегоЗакрытогоУзла <> "ПодменюПерейти" Цикл
		
		Если ИмяПоследнегоЗакрытогоУзла = "Подменю" Тогда
			ТекущаяСтрокаДерева = ТекущаяСтрокаДерева.Родитель;
			Если ТекущаяСтрокаДерева = Неопределено Тогда
				ТекущаяСтрокаДерева= ДеревоПодменю;
			КонецЕсли;
		КонецЕсли;
			
		Если ИмяУзла = "Кнопка" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Действие, СоответствиеАттрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			СоответствиеДействийПодменюПерейти.Вставить( СоответствиеАттрибутов["Имя"], СоответствиеАттрибутов["Действие"]);
			
		ИначеЕсли ИмяУзла = "Разделитель" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Разделитель, СоответствиеАттрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			
		ИначеЕсли ИмяУзла = "Подменю" Тогда
			СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАттрибутов["Имя"], ТипКнопкиКоманднойПанели.Подменю, СоответствиеАттрибутов["Текст"], Неопределено, Неопределено, Ложь, СоответствиеАттрибутов["Подсказка"]);
			ТекущаяСтрокаДерева = СтрокаПодменю;
			
		КонецЕсли;
		
		СоответствиеАттрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
		
		Если СоответствиеАттрибутов = Неопределено Тогда
			Возврат ДеревоПодменю;
		КонецЕсли;
		
		ИмяУзла = СоответствиеАттрибутов["ИмяТекущегоУзлаXML"];
		ИмяПоследнегоЗакрытогоУзла = СоответствиеАттрибутов["ИмяПоследнегоЗакрытогоУзла"];
		
	КонецЦикла;
	
	Возврат ДеревоПодменю;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено )
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		 
	КонецЕсли; 
	
    СтрокаКнопки             = СтрокаПодменю.Строки.Добавить();
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка = СтрокаКнопки.Подсказка;
		Кнопка.Пометка   = СтрокаКнопки.Пометка;
		
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК

// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	ИмяМакета = СтрокаКнопки.Расшифровка;
	
	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
	
	Если ОбъектВнешнейФормы = Неопределено Тогда
		Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Попытка
		
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		
	Исключение
		
		Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Функция СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	
	ДеревоТЧ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого КлючИЗначение Из СоответствиеТЧ Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		СтрокаДереваТЧ = ДеревоТЧ.Строки.Найти(ИмяТабличнойЧасти,"ТабличнаяЧастьИмя");
		Если Не СтрокаДереваТЧ = Неопределено Тогда
			СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,ИмяТабличнойЧасти, ТипКнопкиКоманднойПанели.Действие , , , КлючИЗначение.Ключ);
			Для каждого ПодСтрокаДереваТЧ Из СтрокаДереваТЧ.Строки Цикл
				НомерКнопки = НомерКнопки + 1;
				ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ПодСтрокаДереваТЧ.Наименование, Действие , ПодСтрокаДереваТЧ.Ссылка)
			КонецЦикла;
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
			
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
				
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
				
			КонецЕсли;
			СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Возврат ДеревоКнопок;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок)
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Если Не ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
		
	КонецЕсли;
	
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		
		СтрокаПоУмолчанию.Пометка = Истина;
		
	КонецЕсли;
	 
		
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда
	
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	
	КонецЕсли; 
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если Не ПодменюПечати = Неопределено или  Не СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
			
	
КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
// Параметры:
//    ДеревоМакетов: ДеревоЗначений, макетов печатных форм
//    Объект       : ДокументОбъект, СправочникОбъект, из формы которого вызвана процедура
//    Форма        : Форма, вызвавшая процедуру
//    ТекстКнопки  : Строка, заголовок нажатой кнопки
Процедура ПечатьПоДополнительнойКнопке(ДеревоМакетов, Объект, Форма, ТекстКнопки) Экспорт
	
	Если Не ПроверитьМодифицированностьВФорме(Объект, Форма) Тогда
		Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	КонецЕсли;
	
	СтрокаКнопки = ДеревоМакетов.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Если ТипЗнч(СтрокаКнопки.Расшифровка) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаКнопки.Расшифровка);
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, 0, НаПринтер, СформироватьЗаголовокДокумента(Объект));
		
	Иначе
		
		Если ТекстКнопки = "Форма ОС-6" Тогда
			Объект.Печать(СтрокаКнопки.Имя, 0, НаПринтер, Форма);
		Иначе
			Объект.Печать(СтрокаКнопки.Имя, 0, НаПринтер);
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ДвоичныеДанные) Экспорт

	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер = 0;
		Выборка = ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка = Неопределено;
			ОбработкаСтроки = Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.Расшифровка) <> Тип("ДвоичныеДанные") Тогда
					СтрокаДерева.Расшифровка = НоваяОбработка;
					СтрокаДерева.Подсказка = Подсказка;
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,НоваяОбработка,);
			
		КонецЦикла;
	
	КонецЦикла; 
	
	
КонецПроцедуры

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
			
		Иначе
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

Функция НапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Попытка
		
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
		
	Исключение
		
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
		
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить(Строка(Объект) + ": Печать по умолчанию не определена!", СтатусСообщения.Важное); 
		Возврат Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаПоУмолчанию.Расшифровка) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаПоУмолчанию.Расшифровка);
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(Объект.Ссылка), НепосредственнаяПечать);
		
	Иначе
		
		Объект.Печать(СтрокаПоУмолчанию.Имя, КоличествоЭкземпляров, НаПринтер, НепосредственнаяПечать);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Ссылка) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	Если Не НапечататьДокументПоУмолчанию(Ссылка.ПолучитьОбъект(), 0, НаПринтер) Тогда
		
		Предупреждение("Операция не выполнена");
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьДоступностьЯчееекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность = (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа / справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Объект изменен. Для печати его необходимо записать "+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Объект изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			Попытка
				Если Проведен Тогда
					Результат  = Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				Иначе
					Результат = Форма.ЗаписатьВФорме();
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

// Процедура устанавливает видимость реквизитов в зависимости от типа учета
//
//		Параметры:
//
//
Процедура ВидимостьРеквизитовПоТипуУчета(ДокументОбъект, ФормаДокумента, Знач РеквизитыНалУчета = "",ФлагБУ = Истина, Знач РеквизитыБухУчета = "") Экспорт

	СтрРеквНал = СтрЗаменить(РеквизитыНалУчета, " ", "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.ПС,  "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.Таб, "");

	Пока Не ПустаяСтрока(СтрРеквНал) Цикл

		Поз = СтрНайти(СтрРеквНал, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквНал;
			СтрРеквНал = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквНал, Поз - 1);
			СтрРеквНал = Сред(СтрРеквНал, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;

		Поз = СтрНайти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		КонецЕсли;

	КонецЦикла;
	
	Если не ПустаяСтрока(РеквизитыБухУчета) тогда
		
		СтрРеквБух = СтрЗаменить(РеквизитыБухУчета, " ", "");
		СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.ПС,  "");
		СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.Таб, "");
		
		Пока Не ПустаяСтрока(СтрРеквБух) Цикл

			Поз = СтрНайти(СтрРеквБух, ",");
			Если Поз = 0 Тогда
				ИмяРекв    = СтрРеквБух;
				СтрРеквБух = "";
			Иначе
				ИмяРекв    = Лев (СтрРеквБух, Поз - 1);
				СтрРеквБух = Сред(СтрРеквБух, Поз + 1);
			КонецЕсли;
			Если ПустаяСтрока(ИмяРекв) Тогда
				Продолжить;
			КонецЕсли;

			Поз = СтрНайти(ИмяРекв, ".");
			Если Поз = 0 Тогда
				ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ФлагБУ;
			Иначе
				ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ФлагБУ;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	

КонецПроцедуры // ВидимостьРеквизитовПоТипуУчета()

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//  ДокументОбъект - объект документ в форме которого произошло событие.
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию.
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, ТекПользователь) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		   
			ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
			
			// Если ПодразделениеОрганизации не заполнено.
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ПодразделениеОрганизации) Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = ДокументОбъект.Организация Тогда
					ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;
			
			Иначе // Если ПодразделениеОрганизации заполнено.
				
				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
					
					// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
					Если ПодразделениеПоУмолчанию.Владелец = ДокументОбъект.Организация Тогда
						ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						ОбщегоНазначения.СообщитьОбОшибке("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		   И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация)
		   И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
		   И НЕ ДокументОбъект.ДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда

			ДокументОбъект.ДоговорКонтрагента = Неопределено;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Процедура проверяет принадлежность реквизита типа ПодразделениеОрганизации
// выбранной организации.
//
// Параметры:
//  ДокументОбъект - объект документ, в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  НазваниеРеквизитаСубконто - название проверяемого реквизита
//  Субконто     - значение проверяемого реквизита
//
Процедура ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, НазваниеРеквизитаСубконто, Субконто)
	
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		
		// Если субконто не заполнено.
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Субконто) Тогда
			
			// Если субконто сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
				ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
			КонецЕсли;
			
		Иначе // Если ПодразделениеОрганизации заполнено.
			
			// Если ПодразделениеОрганизации не соответствует выбранной организации.
			Если НЕ Субконто.Владелец = Организация Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
					ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
				Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
					ДокументОбъект[НазваниеРеквизитаСубконто] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ОбщегоНазначения.СообщитьОбОшибке("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры   // ПроверитьСубконтоПодразделение()
 
// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  СтруктураРеквизитов - структура с названиеями и значениями реквизитов, 
//                 кот.необходимо проверить
//
 Процедура ПроверитьВладельцаСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов) Экспорт

	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ1") И СтруктураРеквизитов.Свойство("СубконтоБУ1") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ1, СтруктураРеквизитов.СубконтоБУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ2") И СтруктураРеквизитов.Свойство("СубконтоБУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ2, СтруктураРеквизитов.СубконтоБУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ3") И СтруктураРеквизитов.Свойство("СубконтоБУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ3, СтруктураРеквизитов.СубконтоБУ3);
	КонецЕсли;
	 
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ1") И СтруктураРеквизитов.Свойство("СубконтоНУ1") Тогда
	 	ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ1, СтруктураРеквизитов.СубконтоНУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ2") И СтруктураРеквизитов.Свойство("СубконтоНУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ2, СтруктураРеквизитов.СубконтоНУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ3") И СтруктураРеквизитов.Свойство("СубконтоНУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ3, СтруктураРеквизитов.СубконтоНУ3);
	КонецЕсли;
	 
 КонецПроцедуры  // ПроверитьВладельцаПодразделения()

Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура выводит форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

// Процедура выводит форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента81(ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда

		ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ДокументСсылка));

	КонецЕсли;
		 
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МНОГОФИРМЕННЫМ И ОДНОФИРМЕННЫМ УЧЕТОМ

// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	// В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()

// Процедура устанавливает отбор по основному ответственному в указанно форме
// РГ-Софт, Прокошева
Процедура УстановитьОтборПоОтветственному(Форма, УчетПоВсемОтветственным, Ответственный, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Ответственный") Экспорт

	// В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОтветственным Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = Ответственный;

		//	Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		//Если СкрыватьКолонку Тогда

		//	Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

		//		Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
		//		Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

		//	КонецЕсли;

		//КонецЕсли;

	КонецЕсли;
КонецПроцедуры // УстановитьОтборПоОтветственному

// Процедура устанавливает отбор по основному инвойсинговому центру в указанно форме
// РГ-Софт, Прокошева
Процедура УстановитьОтборПоИнвойсинговомуЦентру(Форма, УчетПоВсемИнвойсинговымЦентрам, ИнвойсинговыйЦентр, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "ИнвойсинговыйЦентр") Экспорт

	// В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемИнвойсинговымЦентрам Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.ВСписке;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			
			Список = Новый СписокЗначений;
			Список.Добавить(ИнвойсинговыйЦентр);
			Список.Добавить(Справочники.ИнвойсинговыеЦентры.ПустаяСсылка());
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = Список;

		//	Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		//Если СкрыватьКолонку Тогда

		//	Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

		//		Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
		//		Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

		//	КонецЕсли;

		//КонецЕсли;

	КонецЕсли;
КонецПроцедуры // УстановитьОтборПоОтветственному

// Проверяет, ведется или нет на счете партионный учет
//
Функция ПроверитьВедениеПартионногоУчета(Владелец, НовоеЗначение, ПланСчетов, ЗапрашиватьИзменения = Истина) Экспорт

	Если НовоеЗначение = Перечисления.СпособыОценки.ПоСредней Тогда
		Возврат Истина;
	КонецЕсли;

	НУ = ПланыСчетов[ПланСчетов].Товары.ПолучитьОбъект();

	// Бухгалтерский учет
	ПартионныйУчет = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);

	Если НЕ ПартионныйУчет И ЗапрашиватьИзменения Тогда
		Ответ = Вопрос("Данный способ оценки может быть установлен если по счетам учета МПЗ установлено ведение партионного учета. 
		               |Открыть обработку, устанавливающую ведение партионного учета?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;

		ФормаНастройки = ПолучитьОбщуюФорму("НастройкаПараметровУчета");
		ФормаНастройки.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница     = ФормаНастройки.ЭлементыФормы.ПанельНастроек.Страницы.УчетМПЗ;
		Если ФормаНастройки.Открыта() Тогда
			ФормаНастройки.Активизировать();
		Иначе
			ФормаНастройки.ЭлементыФормы.ПанельНастроек.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
			ФормаНастройки.ОткрытьМодально();
		Конецесли;

		НУ = ПланыСчетов[ПланСчетов].Товары.ПолучитьОбъект();
		ПартионныйУчет = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);

		Возврат ПартионныйУчет;

	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // ПроверитьВедениеПартионногоУчета()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный")
	   И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С ИМУЩЕСТВОМ В ЭКСПЛУАТАЦИИ

// Функция возвращает расшифровку срока полезного использования в годах и 
// месяцах.
//
// Параметры:
//  СрокПолезногоИспользования - срок полезного использования (в месяцах),
//                 подлежащий расшифровке
//
// Возвращаемое значение:
//  Строка       - расшифровка срока полезного использования в годах и 
//                 месяцах
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " лет";
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " год";
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " года";
			Иначе
				СтрокаГод = " лет";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " месяцев";
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " месяц";
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " месяца";
			Иначе
				СтрокаМесяц = " месяцев";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	                                        	
КонецФункции // РасшифровкаСрокаПолезногоИспользования()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С НМА

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ УЧЕТА НДС

// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаФактуры(СчетФактура) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура) Тогда
		Возврат "Ввести счет-фактуру";

	Иначе
		Возврат Строка(СчетФактура);

	КонецЕсли;

КонецФункции // ПолучитьТекстСчетаФактуры()

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный", РазрешитьВыборСФнаАванс = Истина) Экспорт

	//изменил Трефиленков Дмитрий, для Sales book
	Если (Не ДокументОбъект.Проведен) и (Не ДокументОбъект.ПометкаУдаления) Тогда

		Ответ = Вопрос("Счет-фактуру нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Попытка
				// выполняем проведение документа
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", ДокументОбъект.Метаданные()) Тогда
					УстановитьЗаголовокФормыДокумента(Строка(ДокументОбъект.ВидОперации), ДокументОбъект, ФормаДокумента);
				Иначе
					УстановитьЗаголовокФормыДокумента(, ДокументОбъект, ФормаДокумента);
				КонецЕсли;
			Исключение
				Возврат;
			КонецПопытки;

		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;

	// Rg-Soft Пахоменков А.С. >>
	//Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", ДокументОбъект.Метаданные()) И
	//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
	//		Предупреждение("На основании сторнирующих документов ввод счетов-фактур не предусмотрен.");
	//		Возврат;
	//КонецЕсли;
	// <<
		
			
	//Попытаемся найти счет-фактуру
	СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры, РазрешитьВыборСФнаАванс);

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура))
	   И (Не ДокументОбъект.ПометкаУдаления) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!");
			Возврат;
		КонецЕсли;

		ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект);
		
		//-> RG-Soft VIvanov 15/08/12
		ФормыСчетовФактур = Документы.СчетФактураВыданный.ПолучитьСоответствиеВидовСчетаФактурыФормам();
		ВыбраннаяФорма = ФормыСчетовФактур[ОбъектСчетаФактуры.ВидСчетаФактуры];
		Если ВыбраннаяФорма = Неопределено Или ВыбраннаяФорма = "" Тогда
			ВыбраннаяФорма = "ФормаДокументаУправляемая";
		КонецЕсли;
		
		ФормаСФ = ПолучитьФорму("Документ.СчетФактураВыданный.Форма." + ВыбраннаяФорма, , ФормаДокумента);
		ДанныеФормы = ФормаСф.Объект;
		ЗначениеВДанныеФормы(ОбъектСчетаФактуры, ДанныеФормы);
		ФормаСф.Открыть();
	ИначеЕсли Не ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура) Тогда
		ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
        Параметры = Новый Структура("Ключ", СчетФактура);
		Если ОбъектСчетаФактуры <> Неопределено Тогда
			// Откроем форму для редактирования счета-фактуры
			//ОбъектСчетаФактуры.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект)).Открыть();
			ФормаСФ = ОткрытьФорму("Документ." + ВидСчетаФактуры + ".ФормаОбъекта", Параметры, ФормаДокумента);

		КонецЕсли;
	Иначе
		Предупреждение("На основании документов, помеченных на удаление, ввод счетов-фактур не предусмотрен.");
 	КонецЕсли;
    //<-
	

КонецПроцедуры // ВвестиСчетФактуру()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();
	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(ЭлементСтруктурыПараметров.Ключ, МетаданныеДокумента) Тогда
			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ЭлементСтруктурыПараметров.Ключ, "ОбновитьФормуПодбора", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект           - объект документа, в котором производится подбор.
//  ФормаПодбораНоменклатуры - форма подбора номенклатуры,
//  ПолноеИмяРеквизита       - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаПодбораНоменклатуры, ПолноеИмяРеквизита) Экспорт

	Если ФормаПодбораНоменклатуры.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");

		Если ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда

			ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);

			Родитель = ФормаПодбораНоменклатуры.ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;
			//СтруктураЗапроса = ФормаПодбораНоменклатуры.ЭлементыФормы.СписокВидовПодбора.Значение;
			//ФормаПодбораНоменклатуры.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ ПО ДВИЖЕНИЮ ДЕНЕЖНЫХ СРЕДСТВ

// Заполняет в соответствие с переданными ограничениями список счетов учета денежных средств,
// из которых будет производиться выбор пользователем в форме документа
//
// Параметры
//  МассивСчетовОтбора		 		– <Массив> – массив счетов-групп. В результат функции попадут субсчета этих счетов 
//  ОтборПоПризнакуВалютный	 		– <Булево> – нужен ли дополнительный отбор среди выбранных счетов по признаку "Валютный" 
//  СчетОтбораПоПризнакуВалютный 	– <ПланыСчетов.Хозрасчетный> – счет, в соответствие в признаком "Валютный" которого
//                              	будет ограничиваться список - результат функции
//
// Возвращаемое значение:
//   <СписокЗначений> – список счетов, среди которых будет производиться выбор в форме документа
//
Функция ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивСчетовОтбора);
	ОтбиратьПоПризнакуВалютный = ОтборПоПризнакуВалютный 
		И ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") 
		И НЕ СчетОтбораПоПризнакуВалютный.Пустая();
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтбиратьПоПризнакуВалютный);
	
	Если ОтбиратьПоПризнакуВалютный Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Неопределено);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	СписокВыбора = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции // ЗаполнитьСписокВыбораСчетовДенежныхСредств()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если СтрНайти(Текст, ".") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
Функция СписокМесяцевПоСтроке(Текст)
	
    СписокМесяцев = Новый СписокЗначений;
    Месяцы = Новый Соответствие;
    МесяцыВозврата = Новый Массив;
    Для Счетчик = 1 По 12 Цикл
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
    КонецЦикла;
    Для Каждого ЭлементСписка Из СписокМесяцев Цикл
        Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
            Месяцы[ЭлементСписка.Значение] = 0;
        КонецЕсли;
    КонецЦикла;
    Для Каждого Элемент Из Месяцы Цикл
        МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
    Возврат МесяцыВозврата;
	
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено, Периодичность = 1) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если Периодичность = 1 Тогда
		Для а = 1 По 12 Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
			Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
		КонецЦикла;
	ИначеЕсли Периодичность = 3 Тогда
		Пока Год(НачальноеЗначение) = Год(НачалоМесяцаЗаполнения) Цикл
			ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения, 3));
			Если ПолучитьПредставлениеПериодаРегистрации(НачальноеЗначение) = ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения, 3) Тогда
				ЭлементПоУмолчанию = ДобавленныйЭлемент;
			КонецЕсли; 
			НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 3);
		КонецЦикла;
	КонецЕсли;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение, Периодичность);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, Периодичность);
	
КонецПроцедуры


//Изменил Трефиленков Дмитрий, РГ-Софт
// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаНаОплату(Счет) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Счет) Тогда
		Возврат "Ввести счет на оплату";

	Иначе
		Возврат Строка(Счет);

	КонецЕсли;

КонецФункции // ПолучитьТекстСчетаФактуры()

// Функция формирует представление суммы прописью на английском языке в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописьюENG(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаАнглийском = "" Тогда
		Возврат ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "Л = en_US",Валюта.ПараметрыПрописиНаАнглийском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()
//конец изменения


///////////////////////////////////////////////////////////////////////////////////
// ДОБАВЛЕНО КОМПАНИЕЙ РГ-СОФТ

//Добавил РГ-Софт - Иванов Антон - 2008-10-23
//При переброске регламентированной отчетности
//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия, ПолеВводаНомера) Экспорт
	
	ОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	Если ОбъектМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		ЭтотОбъект[КодНомер] = "";
	Иначе
		ДлинаПрефикса = СтрДлина(ЭтотОбъект.Организация.Префикс);
		Если ДлинаПрефикса = 0 ИЛИ Лев(ПолеВводаНомера.Значение, ДлинаПрефикса) <> ЭтотОбъект.Организация.Префикс Тогда
			ЭтотОбъект[КодНомер] = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект[КодНомер] = "" Тогда
		ОбновитьПодсказкуКодНомерОбъекта(ОбъектМетаданные, ПодменюДействия, ПолеВводаНомера);
	КонецЕсли;
		
КонецПроцедуры // СброситьУстановленныйКодНомерОбъекта()

Процедура ДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "номер");
	
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия) Экспорт
	
	ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "код");
	
КонецПроцедуры

Процедура ДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, КодНомер)
	
	Обработчик = Новый Действие("ДействияФормыРедактировать" + КодНомер);
	Если ПодменюДействия.Кнопки.Найти("РазделительРедактированияКодаНомера") = Неопределено Тогда
		ПодменюДействия.Кнопки.Добавить("РазделительРедактированияКодаНомера", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;
	Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
		Кнопка = ПодменюДействия.Кнопки.Добавить("РедактироватьКодНомер", ТипКнопкиКоманднойПанели.Действие, "Редактировать " + КодНомер, Обработчик);
		Кнопка.ИзменяетДанные = Истина;
	КонецЕсли;	
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОНУМЕРАЦИИ

// Процедура изменения доступности "ручного" изменения кода/номера объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//	ПолеВводаНомераДубль - необязательный параметр, необходим в случаях, когда код/номер одновременно связан с двумя элементами формы
//	КодНомерСтрокой - необязательный параметр, позволяет задать переназначить имя кода/номера при выводе запроса на подтверждение
//
Процедура ИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "") Экспорт
	
	Кнопка = ПодменюДействия.Кнопки.РедактироватьКодНомер;
	Если НЕ Кнопка.Пометка Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда			
			Если ВРЕГ(ПолеВводаНомера.Данные) = ВРЕГ("Код") Тогда
				ТекстВопроса = "Код присваивается автоматически при записи элемента, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить код вручную?"
			Иначе
				ТекстВопроса = "Номер документу присваивается автоматически при записи, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить номер вручную?"
			КонецЕсли;
		КонецЕсли;		
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПолеВводаНомера.ТолькоПросмотр = НЕ Кнопка.Пометка;
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;	
	ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера);
	
	Если ПолеВводаНомераДубль <> Неопределено Тогда
		ПолеВводаНомераДубль.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаНомераДубль.ПропускатьПриВводе = ПолеВводаНомераДубль.ТолькоПросмотр;
		ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомераДубль);
	КонецЕсли;
	
	
КонецПроцедуры // ИзменениеВозможностиРедактированияНомера()

//Процедура УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования)
Процедура УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия)
		
	КодНомерСтрокой = ПолеВводаНомера.Данные;		
	
	Если ТипЗнч(ПолеВводаНомера) = Тип("ПолеВвода") Тогда
		ПолеВвода = ПолеВводаНомера;
	Иначе
		ПолеВвода = ПолеВводаНомера.ЭлементУправления;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПолеВвода.Значение) Тогда
		ПолеВвода.Подсказка =  КодНомерСтрокой + " будет присвоен при записи объекта.";
	Иначе
		ПолеВвода.Подсказка =  "";
	КонецЕсли;
	
	//Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно
	//	И НЕ ПодменюДействия.Кнопки.РедактироватьКодНомер.Пометка Тогда
	//	ПолеВвода.Подсказка =  ПолеВвода.Подсказка + ?(ПустаяСтрока(ПолеВвода.Подсказка), "", " ") 
	//								 + "Для возможности редактирования " + ?(КодНомерСтрокой = "Номер", "номера", "кода") + " используйте подменю ""Действия"".";
	//КонецЕсли;
	
КонецПроцедуры // УстановитьПодсказкуПоляВводаКодаНомера()

//	Процедура обновления текста подсказки для поля ввода кода/номера
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать пункт "Редактировать код/номер"
//
Процедура ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	УстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия);
КонецПроцедуры // ОбновитьПодсказкуКодНомерОбъекта()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ ОЧИЩАЕМЫХ РЕКВИЗИТОВ ОБЪЕКТА

// Сохраняет значение реквизита объекта и очищает реквизит. 
//
Процедура СохранитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если НЕ Форма.ЭлементыФормы[ИмяРеквизита].Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, Форма.ЭлементыФормы[ИмяРеквизита].Значение);
	
	//Изменил РГ-Софт - Иванов Антон - 2008-10-23
	//Изменил вызов глобального модуля ОбщегоНазначения
	Форма.ЭлементыФормы[ИмяРеквизита].Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Форма.ЭлементыФормы[ИмяРеквизита].Значение));
	
КонецПроцедуры // СохранитьЗначениеРеквизита()

// Восстанавливает значение реквизита объекта.
//
Процедура ВосстановитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Свойство(ИмяРеквизита) Тогда
		Форма.ЭлементыФормы[ИмяРеквизита].Значение = СтруктураРеквизитов[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьЗначениеРеквизита()


////////////////////////////////////////////////////////////////////////////////
// ИНФОРМАЦИОННЫЕ НАДПИСИ

Процедура УстановитьИнформационныеНадписиЗакрытияПериода(Форма, Объект) Экспорт
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	// Картинка необходимости утверждения
	УстановитьКартинкуНеобходимостьУтверждения(ЭлементыФормы.инфКартинкаНеобходимостьУтверждения, Объект);
		
	// Надпись об отрытом периоде
	// { RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	//Модуль = НастройкаПравДоступа.ПолучитьМодульРазработкиДокумента(Объект);
	//НачалоОткрытогоПериодаМодуля = НастройкаПравДоступа.ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Модуль);
	НачалоОткрытогоПериодаМодуля = ДобавитьМесяц(ДатыЗапретаИзменения.ПолучитьДатуЗапретаРедактирования(Объект),1);
	// } RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	
	Если НачалоОткрытогоПериодаМодуля <> Неопределено Тогда
		ЭлементыФормы.инфНадписьОткрытыйПериод.Заголовок = "Открыт: " + Формат(НачалоОткрытогоПериодаМодуля, "ДФ='ММММ гггг'");
	Иначе
		ЭлементыФормы.инфНадписьОткрытыйПериод.Заголовок = "";
	КонецЕсли;
	
	// Надпись налоговый период
	УстановитьИнформационнуюНадписьНалоговыйПериод(ЭлементыФормы.инфНадписьНалоговыйПериод, Объект.НалоговыйПериод);	
	
КонецПроцедуры

Процедура УстановитьКартинкуНеобходимостьУтверждения(ИнформационнаяКартинка, ДокументОбъект) Экспорт
	
	ИнформационнаяКартинка.Картинка = ПолучитьКартинкуНеобходимостиУтверждения(ДокументОбъект);
	
КонецПроцедуры

Функция ПолучитьКартинкуНеобходимостиУтверждения(ДокументОбъект) 
	
	Если НЕ НастройкаПравДоступа.НадоУтверждатьДокумент(ДокументОбъект) Тогда
		
		Возврат БиблиотекаКартинок.ОбъектУтвержден;
		
	КонецЕсли;
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		
		Возврат БиблиотекаКартинок.Внимание;
		
	КонецЕсли;
	
	СтатусУтверждения = НастройкаПравДоступа.ПолучитьСтатусУтверждения(ДокументОбъект.Ссылка);
	ПеречислениеСтатусыУтвержденияОбъектов = Перечисления.СтатусыУтвержденияОбъектов;
	Если СтатусУтверждения = ПеречислениеСтатусыУтвержденияОбъектов.Новая Тогда
		
		Возврат БиблиотекаКартинок.Внимание;
		
	ИначеЕсли СтатусУтверждения = ПеречислениеСтатусыУтвержденияОбъектов.ВПроцессеУтверждения Тогда
		
		Возврат БиблиотекаКартинок.ОбъектУтверждается;
		
	ИначеЕсли СтатусУтверждения = ПеречислениеСтатусыУтвержденияОбъектов.Отклонена Тогда
		
		Возврат БиблиотекаКартинок.ОбъектОтклонен;
		
	ИначеЕсли СтатусУтверждения = ПеречислениеСтатусыУтвержденияОбъектов.Утверждена Тогда
		
		Возврат БиблиотекаКартинок.ОбъектУтвержден;
		
	Иначе
		
		Возврат БиблиотекаКартинок.Внимание;
		
	КонецЕсли;
			
КонецФункции
   
Процедура УстановитьИнформационнуюНадписьНалоговыйПериод(ИнформационнаяНадпись, НалоговыйПериод) Экспорт
	
	Если НалоговыйПериод <> '00010101' Тогда
		
		ИнформационнаяНадпись.Заголовок = Формат(НалоговыйПериод, "ДФ='к""й квартал"" гггг'");
		
	Иначе
		
		ИнформационнаяНадпись.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УТВЕРЖДЕНИЕ

Процедура ЗапуститьПроцессУтвержденияВФорме(Форма) Экспорт
	
	ДополнительныеСвойства = Форма.ДополнительныеСвойства;
	
	// Проведем документ со специальным дополнительным свойством
	ДополнительныеСвойства.Вставить("ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения", Истина);	
	Попытка	
		Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);	
	Исключение	
	КонецПопытки;	
	ДополнительныеСвойства.Удалить("ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения");
		
	// Если предварительное проведение завершилось успешно - можно записать документ,
	// 	чтобы нивелировать вызванное исключением модифицированность
	ПроверкиПередЗапускомПроцессаУтвержденияПройдены = Ложь;
	Если ДополнительныеСвойства.Свойство("ПроверкиПередЗапускомПроцессаУтвержденияПройдены", ПроверкиПередЗапускомПроцессаУтвержденияПройдены) Тогда
		
		Если ПроверкиПередЗапускомПроцессаУтвержденияПройдены Тогда
			Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ДополнительныеСвойства.Удалить("ПроверкиПередЗапускомПроцессаУтвержденияПройдены");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуЗапускаПроцессаУтверждения(УтверждаемыйОбъект) Экспорт
	
	ФормаЗапускаПроцессаУтверждения = ПолучитьОбщуюФорму("ФормаЗапросаУтверждения");
	
	ФормаЗапускаПроцессаУтверждения.Корректировка = УтверждаемыйОбъект.Ссылка;
		
	ФормаЗапускаПроцессаУтверждения.Подразделение = НастройкаПравДоступа.ПолучитьАналитикуУтвержденияОбъекта(УтверждаемыйОбъект);
	
	ФормаЗапускаПроцессаУтверждения.Открыть();
		
КонецПроцедуры

Процедура ЗадатьВопросОстановкиПроцессаУтверждения(СсылкаНаУтверждаемыйОбъект) Экспорт
	
	// Проверим, что процесс утверждения действительно запущен
	СтатусУтверждения = НастройкаПравДоступа.ПолучитьСтатусУтверждения(СсылкаНаУтверждаемыйОбъект);
	ПеречислениеСтатусыУтверждения = Перечисления.СтатусыУтвержденияОбъектов;
	
	Если СтатусУтверждения <> ПеречислениеСтатусыУтверждения.ВПроцессеУтверждения
		И СтатусУтверждения <> ПеречислениеСтатусыУтверждения.Новая
		И СтатусУтверждения <> ПеречислениеСтатусыУтверждения.Утверждена Тогда
		
		Сообщить("Документ """ + СсылкаНаУтверждаемыйОбъект + """ не утвержден или не находится в процессе утверждения!", СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
	
	// Проверим, что у пользователя есть права отменять утверждения уже утвержденных документов
	
	//Не будем проверять права, согласовано с Матафоновым 20.04.10
	
	//Если СтатусУтверждения = ПеречислениеСтатусыУтверждения.Утверждена
	//	И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Администратор")) Тогда
	//	
	//	Сообщить("У вас нет прав отменять утверждение утвержденного документа!", СтатусСообщения.Важное);
	//	Возврат;
	//	
	//КонецЕсли;
			
	// Зададим вопрос, уверен ли пользователь
	ТекстВопроса = "";
	Если СтатусУтверждения = ПеречислениеСтатусыУтверждения.Утверждена Тогда
		ТекстВопроса = "Документ уже утвержден!" + Символы.ПС;
	ИначеЕсли СтатусУтверждения = ПеречислениеСтатусыУтверждения.ВПроцессеУтверждения Тогда
		ТекстВопроса = "Документ находится в процессе утверждения!" + Символы.ПС;
	КонецЕсли;
	ТекстВопроса = ТекстВопроса + "Вы действительно хотите отменить процесс утверждения документа """ + СсылкаНаУтверждаемыйОбъект + """?";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Внимание!"); 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Остановим процесс утверждения
	НастройкаПравДоступа.ОстановитьПроцессУтверждения(СсылкаНаУтверждаемыйОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНДИКАЦИЯ ВЫПОЛНЕНИЯ

Функция ПолучитьОткрытуюФормуИндикации(ЗаголовокФормыИндикации) Экспорт
	
	ФормаИндикации = ПолучитьОбщуюФорму("ФормаИндикацииВыполнения");
	ФормаИндикации.Заголовок = ЗаголовокФормыИндикации;
	ФормаИндикации.Открыть();
		
	Индикатор = ФормаИндикации.ЭлементыФормы.Индикатор1;
	Индикатор.МинимальноеЗначение = 0;
	Индикатор.Значение = 0;
	
	Возврат ФормаИндикации;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПЕРИОДА РЕГИСТРАЦИИ ДОКУМЕНТА

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, Периодичность = 1) Экспорт

	Если Периодичность = 1 Тогда
		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
	ИначеЕсли Периодичность = 3 Тогда
		Возврат Формат(ПериодРегистрации, "ДФ ='к ""квартал"" гггг ""г.""'");
	КонецЕсли;

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации, Периодичность = 1) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление * Периодичность);

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

//////////////////////////////////////////////////////////
//РГ-СОФТ добавил - Ставров Илья - 2012-01-16
//При переброске модуля регламентированной отчетности

Процедура ВыбратьЗначениеПоляВводаИзСписка(Форма, ЭлементФормы, СтандартнаяОбработка, СписокВыбора, Значение, Отказ = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(Значение);
	ВыбранныйЭлемент  = Форма.ВыбратьИзСписка(СписокВыбора, ЭлементФормы, НачальноеЗначение);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Значение = ВыбранныйЭлемент.Значение;
	КонецЕсли;

КонецПроцедуры

