Функция СоздатьОбъектДляРаботыСДвоичнымиДанными() Экспорт
	
	ДвДанные = НовыйОбъектДвоичныеДанные(Истина);
	Если ДвДанные = Неопределено Тогда
		
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			
			ДвДанные = НовыйОбъектДвоичныеДанные(Ложь);
			Если ДвДанные = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвДанные;
	
КонецФункции

Функция НовыйОбъектДвоичныеДанные(ТихийРежим = Истина)
	
	Попытка
		
		ДвДанные = Новый("Addin.ЭДОNative.BinaryDataS");
		Возврат ДвДанные;
		
	Исключение
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = ВернутьСтр("ru='Не удалось создать объект для работы с двоичными данными.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПодключитьВК(ПутьВК, ТихийРежим = Истина)
	
	Попытка
		КодВозврата = ПодключитьВнешнююКомпоненту(ПутьВК, "ЭДОNative");
	Исключение
		КодВозврата = Ложь;
	КонецПопытки;
	
	Если НЕ КодВозврата И НЕ ТихийРежим Тогда
		ТекстСообщения = ВернутьСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции

Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ПриЗаписиОбъекта(ОбъектЗаписи, Отказ);
	
	
КонецПроцедуры

Функция ПодключенныеОрганизации(ОтборОрганизации = Неопределено) Экспорт
	
	ТипОтбораОрганизации = ТипЗнч(ОтборОрганизации);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка КАК Ссылка
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
						  |	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена"
						  + ?(ОтборОрганизации <> Неопределено, ?(ТипОтбораОрганизации <> Тип("Массив"), "
						  |	И Организации.Ссылка = &ОтборОрганизации", "
						  |	И Организации.Ссылка В (&ОтборОрганизации)"), "") + "
						  |	И НЕ Организации.ПометкаУдаления
						  |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОтборОрганизации", ОтборОрганизации);
	
	Попытка
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтборОрганизации <> Неопределено И ТипОтбораОрганизации <> Тип("Массив") Тогда
		Результат = (ТаблицаЗапроса.Количество() > 0);
		
	Иначе
		Результат = Новый Массив;
		Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			Результат.Добавить(СтрокаЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(ФормаОрганизации, Организация, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаголовокПервичногоЗаявления = ВернутьСтр("ru = 'Заявление на подключение к 1С-Отчетности'");
	ЗаголовокВторичногоЗаявления = ВернутьСтр("ru = 'Заявление на изменение реквизитов подключения к 1С-Отчетности или замену сертификата'");
	
	// Инициализируем контекст
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	// проверяем на наличие права к документообороту
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
	ПоддерживаетсяВторичноеЗаявление = КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	Если ПоддерживаетсяВторичноеЗаявление Тогда
		Возврат ЗаголовокВторичногоЗаявления;
	Иначе
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
КонецФункции

#Область НоваяФормаРегламентированнойОтчетности

#Область РаботаСРегистромСведенийЖурналОтправокВКонтролирующиеОрганы

Функция ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы() Экспорт

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка", 					Неопределено);
	ЗначенияЗаполнения.Вставить("ДатаСоздания", 			ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("Наименование", 			"");
	ЗначенияЗаполнения.Вставить("ПредставлениеПериода", 	"");
	ЗначенияЗаполнения.Вставить("ВидКонтролирующегоОргана", Неопределено);
	ЗначенияЗаполнения.Вставить("КодКонтролирующегоОргана", "");
	ЗначенияЗаполнения.Вставить("Организация", 				Неопределено);
	ЗначенияЗаполнения.Вставить("ЕстьОтвет", 				Ложь);
	ЗначенияЗаполнения.Вставить("СтраницаЖурнала", 			Неопределено);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции	

Процедура СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(ЗначенияЗаполнения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Объект 						= ЗначенияЗаполнения.Ссылка;
		Ссылка 						= Объект.Ссылка;
		ЭтоНовыйОбъект 				= Истина;
		СостояниеСдачиОтчетности 	= Неопределено;
		СтатусОтправки 				= Неопределено;
		Наименование 				= ЗначенияЗаполнения.Наименование;
		
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			Наименование = Строка(Ссылка);
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
			Ссылка, ЗначенияЗаполнения.Организация, ЗначенияЗаполнения.ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки);
		
		ЗначенияЗаполнения.Вставить("Ссылка", 								Ссылка);
		ЗначенияЗаполнения.Вставить("СтатусОтправки", 						СтатусОтправки);
		ЗначенияЗаполнения.Вставить("СостояниеСдачиОтчетности", 			СостояниеСдачиОтчетности);
		ЗначенияЗаполнения.Вставить("ПредставлениеКонтролирующегоОргана", 	ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения));
		ЗначенияЗаполнения.Вставить("ПометкаУдаления", 						Ссылка.ПометкаУдаления);
		ЗначенияЗаполнения.Вставить("Наименование", 						Наименование);
		ЗначенияЗаполнения.Вставить("НеОтправляетсяВКонтролирующийОрган", 	НЕ ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка));
		ЗначенияЗаполнения.Вставить("ЕстьКритическиеОшибкиОтправки", 		ЕстьКритическиеСообщения(Ссылка));
		
		СтруктураКлюча = Новый Структура("Ссылка", Ссылка);
		Ключ = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		Если СтатусОтправки = Неопределено И СостояниеСдачиОтчетности = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения, , "СостояниеСдачиОтчетности, СтатусОтправки");
		Иначе
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ВернутьСтр("ru = 'Запись в регистре сведений ЖурналОтправокВКонтролирующиеОрганы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

Функция ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения)

	Представление = "";
	
	Если ТипЗнч(ЗначенияЗаполнения.Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		И ЗначенияЗаполнения.Ссылка.Статус = Перечисления.СтатусыПисем.Полученное 
		И НЕ ЗначениеЗаполнено(ЗначенияЗаполнения.ВидКонтролирующегоОргана) Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Если КонтекстЭДОСервер <> Неопределено Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнийЦиклОбмена(ЗначенияЗаполнения.Ссылка);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
				Представление = Строка(ПоследнийЦиклОбмена.ВнешняяОрганизация); 
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Представление = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ПометитьОбъектНепрочтенным(Ссылка) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		СтруктураКлюча = Новый Структура("НепрочтенноеСообщение", Ссылка);
		Ключ = РегистрыСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);

		НаборЗаписей = РегистрыСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НепрочтенноеСообщение.Установить(Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.НепрочтенноеСообщение = Ссылка;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			"Пометка письма прочтенным", 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ЗаписиОбъектовВРегистрЖурналОтправокВКонтролирующиеОрганы

Процедура ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПрочиеУведомленияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваПрочихУведомлений(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваПрочихУведомлений(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	Наименование 						= Строка(Ссылка);
	ВидКонтролирующегоОргана 			= Неопределено;
	НеОтправляетсяВКонтролирующийОрган 	= Ложь;
	
	ТаблицаОписания = ТаблицаОписанияПрочихУведомлений();
	НайденнаяСтрока = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
	Если НайденнаяСтрока <> Неопределено Тогда
		Наименование 						= НайденнаяСтрока.Наименование;
		ВидКонтролирующегоОргана			= НайденнаяСтрока.ВидКонтролирующегоОргана;
		НеОтправляетсяВКонтролирующийОрган	= НайденнаяСтрока.НеОтправляетсяВКонтролирующийОрган;
	КонецЕсли;
	
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана	= ВидКонтролирующегоОргана;
	
	ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьУведомлениеОСпецрежимахНалогообложенияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваУведомленияОСпецрежимахНалогообложения(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваУведомленияОСпецрежимахНалогообложения(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Строка(Объект.ВидУведомления);
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Если ЗначениеЗаполнено(Объект.РегистрацияВИФНС) Тогда
		КодКонтролирующегоОргана	= Объект.РегистрацияВИФНС.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьСобытиеДокументооборотаСКО(Запись) Экспорт
	
	ТекущийСеансДокументооборотаСКО = ДокументооборотСКО.ТекущийСеансДокументооборотаСКО();
		
	Группа = ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись);
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка = Запись.Объект;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.Статус <> Запись.Статус
		ИЛИ Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Ссылка = Запись.Объект;
		МенеджерЗаписи.СеансСвязи = ТекущийСеансДокументооборотаСКО;
		МенеджерЗаписи.Наименование = Запись.Наименование;	
		МенеджерЗаписи.Статус = Запись.Статус;
		МенеджерЗаписи.Организация = Запись.Организация;
		МенеджерЗаписи.ДатаСобытия = ТекущаяДатаСеанса();
		МенеджерЗаписи.КонтролирующийОрган = Запись.КонтролирующийОрган;
		МенеджерЗаписи.Группа = Группа;
		МенеджерЗаписи.Состояние = Запись.Состояние;
		МенеджерЗаписи.Порядок = ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа);
		МенеджерЗаписи.ЕстьОтвет = ЕстьОтвет(Запись);
		МенеджерЗаписи.НеОтправляетсяВКонтролирующийОрган = Запись.НеОтправляетсяВКонтролирующийОрган;
		МенеджерЗаписи.ОтправленоПолучено = ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись);
		МенеджерЗаписи.Просмотрено = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОтвет(Запись)
	
	Если ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		Возврат Запись.ЕстьОтвет;
	Иначе
		Возврат Ложь;
	КонецЕсли;       	
	
КонецФункции

Функция ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись)

	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаОтправки");
		ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
			ОписьВходящихДокументов = КонтекстЭДОСервер.ПолучитьОписьВходящихДокументовПоТребованию(Запись.Объект);
			Если ЗначениеЗаполнено(ОписьВходящихДокументов) Тогда
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписьВходящихДокументов, "ДатаОтправки");
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаДокумента");
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		
		Если Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСРАР(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВРПН(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		Иначе
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнийЦиклОбмена(Запись.Объект);
			Возврат ПоследнийЦиклОбмена.ДатаПоследнегоСообщения;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись)

	ЗавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Не сдано;Не принято в обработку;Сдано, требует уточнения;Сдано;Не принято;Принято;Доставлено", ";");
		
	НезавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Отправлено оператору;Отправлено в ФНС;Отправлено в ПФР;Отправлено в ФСС;Отправлено в Росстат;Отправлено в ФСРАР;Отправлено в РПН;Принято в обработку", ";");
	
	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения;		
	ИначеЕсли (Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки ИЛИ Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ) 
		И (Запись.Статус = "Отказано" ИЛИ Запись.Статус = "Не найдено в реестре" ИЛИ Запись.Статус = "Готово") Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы;		
	ИначеЕсли ЗавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки;		
	ИначеЕсли НезавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки; 	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа)
	
	Порядок = 0;
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Порядок = 0;	
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Если Запись.Статус <> "Не отправлено" Тогда
			Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Отказано" Тогда
				Порядок = 0;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Не найдено в реестре" Тогда
				Порядок = 1;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Готово" Тогда
				Порядок = 2;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Готово" Тогда
				Порядок = 3;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Порядок = 0;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Порядок = 0;
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

Процедура ПометитьНовыеСобытияПросмотренными(СписокСсылок) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Ссылка Из СписокСсылок Цикл
			МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Ссылка;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Просмотрено = Истина;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	
КонецПроцедуры

Функция ДатаПоследнегоОбновленияСобытий(ИнициаторСеанса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СеансыСвязиСКонтролирующимиОрганами.Окончание) КАК ДатаСобытия
	|ИЗ
	|	Справочник.СеансыСвязиСКонтролирующимиОрганами КАК СеансыСвязиСКонтролирующимиОрганами
	|ГДЕ
	|	СеансыСвязиСКонтролирующимиОрганами.Успешно";
	
	Если ЗначениеЗаполнено(ИнициаторСеанса) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СеансыСвязиСКонтролирующимиОрганами.ИнициаторСеанса = &ИнициаторСеанса";
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнициаторСеанса", ИнициаторСеанса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат '00010101';
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаСобытия;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления) Экспорт

	Если Не ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		Возврат ВернутьСтр("ru = 'Обновлено только что'");
	КонецЕсли;
	
	ВременнаяРазница = ТекущаяУниверсальнаяДата() - ДатаПоследнегоОбновления;
	
	НадписьВремяОбновления = "";
	Если ВременнаяРазница < 0 Тогда
		НадписьВремяОбновления = "";
	ИначеЕсли ВременнаяРазница < 15 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено только что'");
	ИначеЕсли ВременнаяРазница < 30 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено 15 минут назад'");		
	ИначеЕсли ВременнаяРазница < 60 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено полчаса назад'");		
	ИначеЕсли ВременнаяРазница < 2 * 60 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено час назад'");		
	ИначеЕсли ВременнаяРазница < 24 * 60 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено несколько часов назад'");		
	ИначеЕсли ВременнаяРазница < 48 * 60 * 60 Тогда
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено вчера'");		
	Иначе
		НадписьВремяОбновления = ВернутьСтр("ru = 'Обновлено несколько дней назад'");
	КонецЕсли;
	
	Возврат НадписьВремяОбновления;
	
КонецФункции

Процедура ЗаполнитьДеревоНовое(ДеревоНовое, ИнициаторСеанса = Неопределено) Экспорт
	
	ДеревоНовое.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналНовыхСобытий.Наименование,
	|	ЖурналНовыхСобытий.Ссылка КАК Объект,
	|	ЖурналНовыхСобытий.Статус,
	|	ЖурналНовыхСобытий.Организация,
	|	ЖурналНовыхСобытий.КонтролирующийОрган,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения)
	|			ТОГДА ВЫБОР
	|					КОГДА НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналНовыхСобытий.Просмотрено
	|	КОНЕЦ КАК Просмотрено,
	|	ЖурналНовыхСобытий.Состояние,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения)
	|			ТОГДА 0
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы)
	|			ТОГДА 1
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки)
	|			ТОГДА 2
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки)
	|			ТОГДА 3
	|	КОНЕЦ КАК ГруппаПорядок,
	|	ЖурналНовыхСобытий.СеансСвязи,
	|	ЖурналНовыхСобытий.ДатаСобытия,
	|	ЖурналНовыхСобытий.Порядок КАК Порядок,
	|	ЖурналНовыхСобытий.ЕстьОтвет,
	|	ЖурналНовыхСобытий.НеОтправляетсяВКонтролирующийОрган,
	|	ЖурналНовыхСобытий.Группа КАК Группа,
	|	ЖурналНовыхСобытий.ОтправленоПолучено КАК ОтправленоПолучено
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами КАК НепрочтеннаяПерепискаСКонтролирующимиОрганами
	|		ПО ЖурналНовыхСобытий.Ссылка = НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение
	|ГДЕ
	|	ЖурналНовыхСобытий.ДатаСобытия > &ДатаСобытия
	|	И (НЕ &ИспользоватьОтборИнициаторСеанса
	|			ИЛИ ЖурналНовыхСобытий.СеансСвязи.ИнициаторСеанса = &ИнициаторСеанса)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	1,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	2,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	3,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки),
	|	NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПорядок,
	|	Просмотрено,
	|	ОтправленоПолучено УБЫВ
	|ИТОГИ ПО
	|	Группа";
	Запрос.УстановитьПараметр("ДатаСобытия", ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Запрос.УстановитьПараметр("ИнициаторСеанса", ИнициаторСеанса);
	Запрос.УстановитьПараметр("ИспользоватьОтборИнициаторСеанса", ЗначениеЗаполнено(ИнициаторСеанса));
	
	ВыборкаГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппа.Следующий() Цикл		
		ВыборкаДетали = ВыборкаГруппа.Выбрать();
		
		ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, ВыборкаГруппа.Группа, ИнициаторСеанса);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, Группа, ИнициаторСеанса)
	
	Если ИнициаторСеанса = Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат;
	КонецЕсли;
	
	МассивНовые = Новый Массив;
	МассивСтарые = Новый Массив;
	
	Пока ВыборкаДетали.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетали.Объект) Тогда
			ЭлементДерева = ЭлементДерева();

			ЭлементДерева.Дата = Отступ(ВыборкаДетали.Просмотрено, Группа) + Формат(ВыборкаДетали.ОтправленоПолучено, "ДФ=dd.MM.yyyy");
			ЭлементДерева.Наименование = ВыборкаДетали.Наименование;
			ЭлементДерева.Ссылка = ВыборкаДетали.Объект;
			ЭлементДерева.КонтролирующийОрган = ВыборкаДетали.КонтролирующийОрган;
			ЭлементДерева.Статус = ВыборкаДетали.Статус;
			ЭлементДерева.Организация = ВыборкаДетали.Организация;
			ЭлементДерева.НеПрочитано = Не ВыборкаДетали.Просмотрено;
			ЭлементДерева.СостояниеСдачиОтчетности = ВыборкаДетали.Состояние;
			ЭлементДерева.ЕстьОтвет = ВыборкаДетали.ЕстьОтвет;
			ЭлементДерева.НеОтправляетсяВКонтролирующийОрган = ВыборкаДетали.НеОтправляетсяВКонтролирующийОрган;
			ЭлементДерева.Группа = Группа;
			
			Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
				ЭлементДерева.ЭтоСтатусСсылка = ЭлементДерева.Статус = "Подтвердите прием";
			КонецЕсли;
			
			Если ВыборкаДетали.Просмотрено Тогда
				МассивСтарые.Добавить(ЭлементДерева);
			Иначе
				МассивНовые.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	СтрокаБлок = ДеревоНовое.Строки.Добавить();
	СтрокаБлок.ЭтоЗаголовокБлока = Истина;
	СтрокаБлок.ЗаголовокБлока = Строка(Группа);
	СтрокаБлок.Группа = Группа;
	
	Если МассивНовые.Количество() = 0 Тогда
		СтрокаСобытие = ДеревоНовое.Строки.Добавить();
		СтрокаСобытие.Наименование = Отступ() + НадписьНовыхНет(Группа);
	Иначе
		Для Каждого НовоеСобытие Из МассивНовые Цикл
			СтрокаСобытие = ДеревоНовое.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСобытие, НовоеСобытие);
		КонецЦикла;
	КонецЕсли;
	
	Если ИнициаторСеанса <> Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа <> Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Если МассивСтарые.Количество() > 0 Тогда
			СтрокаБлок = ДеревоНовое.Строки.Добавить();
			СтрокаБлок.ЭтоПодЗаголовок = Истина;
			СтрокаБлок.ЗаголовокБлока = ЗаголовокНедавноПросмотренных(Группа);
			
			Для Каждого СтароеСобытие Из МассивСтарые Цикл
				СтрокаСобытие = СтрокаБлок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытие, СтароеСобытие);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВерхнегоУровня = ДеревоНовое.Строки.Добавить();
	СтрокаВерхнегоУровня.ЭтоРазделитель = Истина;	
	
КонецПроцедуры

Функция Отступ(Просмотрено = Ложь, Группа = Неопределено)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки ИЛИ Не Просмотрено Тогда
		Возврат "     ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НадписьНовыхНет(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат ВернутьСтр("ru = 'Новых нет'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат ВернутьСтр("ru = 'Незавершенных нет'");
	КонецЕсли;
	
КонецФункции

Функция ЗаголовокНедавноПросмотренных(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Возврат ВернутьСтр("ru = 'Недавно полученные сообщения'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Возврат ВернутьСтр("ru = 'Недавно обработанные запросы'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат ВернутьСтр("ru = 'Недавно завершенные отправки'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЭлементДерева()
	
	ПустойЭлемент = Новый Структура("Дата, Наименование, Ссылка, КонтролирующийОрган, Статус, Организация, НеПрочитано, СостояниеСдачиОтчетности, СостояниеСдачиОтчетности, ЕстьОтвет, НеОтправляетсяВКонтролирующийОрган, Группа, ЭтоСтатусСсылка");
	
	Возврат ПустойЭлемент;
				
КонецФункции

#КонецОбласти

#Область ВспомогательныхПроцедурИФункций

Процедура ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения)
	
	ТаблицаСвойств = РегламентированнаяОтчетность.ОпределитьСвойстваОбъектовДляОтображенияВФормеОтчетность(Ссылка);
	СвойстваСсылки = ТаблицаСвойств.Найти(Ссылка, "Ссылка");
	
	Если СвойстваСсылки <> Неопределено Тогда
		
		ЗначенияЗаполнения.ДатаСоздания = СвойстваСсылки.ДатаСоздания;
		Если ЗначениеЗаполнено(СвойстваСсылки.Наименование) Тогда
			ЗначенияЗаполнения.Наименование = СвойстваСсылки.Наименование;
		КонецЕсли;
		ЗначенияЗаполнения.ДатаСоздания 			= СвойстваСсылки.ДатаСоздания;
		ЗначенияЗаполнения.КодКонтролирующегоОргана = СвойстваСсылки.КодКонтролирующегоОргана;
		ЗначенияЗаполнения.Организация 				= СвойстваСсылки.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьОбъектНепрочтеннымПриЗаписи(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	НужноПометитьОбъектНепрочитанным = Ложь;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		
		НужноПометитьОбъектНепрочитанным = Истина;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		Если Ссылка.Статус = Перечисления.СтатусыПисем.Полученное Тогда
			НужноПометитьОбъектНепрочитанным = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НужноПометитьОбъектНепрочитанным Тогда
		ПометитьОбъектНепрочтенным(Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ТаблицаОписанияПрочихУведомлений() Экспорт
	
	ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	
	// оставляем в таблице только уведомления и нужные колонки
	ТаблицаОписанияУведомлений = ТаблицаОписания.Скопировать(Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
		
	Возврат ТаблицаОписанияУведомлений;

КонецФункции

Процедура ПрисоединитьДерево(ДеревоПриемник, ПрисоединяемоеДерево) Экспорт
	
	СтрокиДереваПриемника = ДеревоПриемник.Строки;
	Для каждого СтрокаПрисоединяемогоДерева Из ПрисоединяемоеДерево.Строки Цикл
		НоваяСтрокаДереваПриемника = СтрокиДереваПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
		ПрисоединитьДерево(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОпределитьСтатусИСостояниеСдачиОтчетности(Ссылка, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки) Экспорт
	
	// Определяем текст статуса и цвет
	Если ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Тогда
		
		//Обновление рег. Отчетности на бух. Корп 3.0.36.18
		//ТекущееСостояние = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиСтатуса(
		//	Ссылка, ВидКонтролирующегоОргана);	
		ТекущееСостояние = Неопределено;
		//<=
			
		Если ТекущееСостояние = Неопределено ИЛИ ТекущееСостояние.ТекущийЭтапОтправки = Неопределено Тогда
			СтатусОтправки 				= ВернутьСтр("ru = 'Не отправлено'");
			СостояниеСдачиОтчетности 	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		Иначе
			ТекущийЭтап = ТекущееСостояние.ТекущийЭтапОтправки;
			
			СтатусОтправки 				= ТекущийЭтап.ТекстСтатуса;
			СостояниеСдачиОтчетности 	= ТекущийЭтап.СостояниеСдачиОтчетности;
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	ОбъектОтправляется = Истина;
	
	// Среди уведомлений о спецрежимах налогообложения есть те, которые не отправляются
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Если ПравоДоступа("Чтение", Метаданные.Справочники.ВидыОтправляемыхДокументов) Тогда
			ВидыОтправляемыхУведомлений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения();
			Если ВидыОтправляемыхУведомлений.Найти(Ссылка.ВидУведомления) = Неопределено Тогда
				ОбъектОтправляется = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	// Регламентированные отчеты
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		РегламентированнаяОтчетность.РегламентированныйОтчетОтправляетсяВКонтролирующиеОрганы(Ссылка, ОбъектОтправляется);
		
	Иначе
		
		// Объекты, не входящие в БРО
		ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
		СтрокаОписанияОбъекта = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
		Если СтрокаОписанияОбъекта <> Неопределено Тогда
			ОбъектОтправляется = НЕ СтрокаОписанияОбъекта.НеОтправляетсяВКонтролирующийОрган;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектОтправляется;

КонецФункции

Функция ЕстьКритическиеСообщения(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Обновление рег. Отчетности на бух. Корп 3.0.36.18
	//КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	//Возврат КонтекстЭДОСервер.ЕстьКритическиеСообщения(Ссылка);	
	Возврат Ложь;
	//<=

КонецФункции

Функция ВидыЭлектронныхПредставленийВРазделеУведомления() Экспорт
	
	// Уведомления о спецрежимах налогоообложения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.ТипДокумента = &ТипДокумента";

	Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС);

	Выгрузка = Запрос.Выполнить().Выгрузить();
	ВидыЭлектронныхПредставлений = Выгрузка.ВыгрузитьКолонку("Ссылка");
	
	// Уведомления из конфигурации-потребителя
	ОписаниеОбъектовНеВходящихВБРО = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	Для каждого ОписаниеОбъекта Из ОписаниеОбъектовНеВходящихВБРО Цикл
		Если ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Уведомления 
			И ЗначениеЗаполнено(ОписаниеОбъекта.ВидЭлектронногоПредставления) Тогда
				
				// Проверка нужна чтобы предотвратить добавление дублей в массив 
				Если ВидыЭлектронныхПредставлений.Найти(ОписаниеОбъекта.ВидЭлектронногоПредставления) = Неопределено Тогда
					ВидыЭлектронныхПредставлений.Добавить(ОписаниеОбъекта.ВидЭлектронногоПредставления);
				КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ВидыЭлектронныхПредставлений;
	
КонецФункции

Функция ЭтотВидЭлектронногоПредставленияОтноситсяКРазделуУведомления(ВидОтчета) Экспорт
	
	ВидыОтчетовРазделаУведомления = ВидыЭлектронныхПредставленийВРазделеУведомления();
	Возврат ВидыОтчетовРазделаУведомления.Найти(ВидОтчета) <> Неопределено;
	
КонецФункции

Процедура ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ) Экспорт
	
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти