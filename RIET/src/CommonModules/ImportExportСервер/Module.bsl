
///////////////////////////////////////////////////////////////////////////////
// ОБЩЕЕ

// ДОДЕЛАТЬ. ПЕРЕНЕСТИ В МОДУЛЬ МЕНЕДЖЕРА
Функция ПолучитьМассивERPTreatmentsWithoutActivity() Экспорт
	
	ПеречислениеERPTreatments = Перечисления.ТипыЗаказа;
	ERPTreatmentsБезActivity = Новый Массив;
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.I);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.A);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.U);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.V);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.FMT);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.FAT);
	ERPTreatmentsБезActivity.Добавить(ПеречислениеERPTreatments.SS);
	Возврат ERPTreatmentsБезActivity;
	
КонецФункции

// ДОДЕЛАТЬ. ПЕРЕНЕСТИ В МОДУЛЬ МЕНЕДЖЕРА
Функция ПолучитьКартинкуСтатусаВажности(СтатусВажности) Экспорт 
	
	СтатусыВажности = Перечисления.СтатусыВажности;
	
	Если СтатусВажности = СтатусыВажности.Желтый Тогда
		Возврат БиблиотекаКартинок.КружокЖелтый;	
		
	ИначеЕсли СтатусВажности = СтатусыВажности.Красный Тогда
		Возврат БиблиотекаКартинок.КружокКрасный;	
		
	Иначе
 		Возврат БиблиотекаКартинок.КружокЗеленый;
		
	КонецЕсли;
			
КонецФункции

Функция ПолучитьДатуИзСтроки(Знач ДатаСтрока) Экспорт
	   	
	ДатаСтрока = СокрЛП(ДатаСтрока);
	
	ПозицияЗапятой = СтрНайти(ДатаСтрока, ",");
	
	Если ПозицияЗапятой = 0 Тогда
						
		ПозицияПробела = СтрНайти(ДатаСтрока, " ");
		Если ПозицияПробела = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДеньСтрока = Лев(ДатаСтрока, ПозицияПробела - 1);	
		Попытка
			День = Число(ДеньСтрока);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		ОставшаясяСтрока = СокрЛ(Сред(ДатаСтрока, ПозицияПробела+1));
		
		МесяцСтрока = Лев(ОставшаясяСтрока, 3);
		Месяц = ПолучитьНомерМесяцаИзСтроковогоПредставления(МесяцСтрока);
		Если Месяц = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияПробела = СтрНайти(ОставшаясяСтрока, " ");
		Если ПозицияПробела = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОставшаясяСтрока = СокрЛ(Сред(ОставшаясяСтрока, ПозицияПробела+1));
		ГодСтрока = Лев(ОставшаясяСтрока, 4);
		
		Попытка
			Год = Число(ГодСтрока);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	иначе	
		
		ДеньСтрока = Сред(ДатаСтрока, ПозицияЗапятой+1);
		ДеньСтрока = Лев(ДеньСтрока, СтрДлина(ДеньСтрока)-4);
		
		Попытка
			День = Число(СокрЛП(ДеньСтрока));
		Исключение
			Возврат Неопределено;
		КонецПопытки;
				
		МесяцСтрока = Лев(ДатаСтрока, ПозицияЗапятой-1);
		Месяц = ПолучитьНомерМесяцаИзСтроковогоПредставления(МесяцСтрока);
		Если Месяц = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		 		
		ГодСтрока = Прав(ДатаСтрока, 4);	
		Попытка
			Год = Число(ГодСтрока);
		Исключение
			Возврат Неопределено;
		КонецПопытки;

	КонецЕсли;
	
	Попытка
		ИтоговаяДата = Дата(Год, Месяц, День);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат ИтоговаяДата;
			
КонецФункции

Функция ПолучитьНомерМесяцаИзСтроковогоПредставления(Знач СтрокаМесяц)  Экспорт
	
	// Получение номера месяца из строки: Jan, Feb, ..., Oct...
	
	СтрокаМесяц = ВРег(СтрокаМесяц);
	
	Если СтрокаМесяц = "JAN" ИЛИ СтрокаМесяц = "JANUARY" ИЛИ СтрокаМесяц = "ЯНВ" ИЛИ СтрокаМесяц = "ЯНВАРЯ" Тогда
		Возврат 1;
	ИначеЕсли СтрокаМесяц = "FEB" ИЛИ СтрокаМесяц = "FEBRUARY" ИЛИ СтрокаМесяц = "ФЕВ" ИЛИ СтрокаМесяц = "ФЕВРАЛЯ" Тогда
		Возврат 2;
	ИначеЕсли СтрокаМесяц = "MAR" ИЛИ СтрокаМесяц = "MARCH" ИЛИ СтрокаМесяц = "МАР" ИЛИ СтрокаМесяц = "МАРТА" Тогда
		Возврат 3;
	ИначеЕсли СтрокаМесяц = "APR" ИЛИ СтрокаМесяц = "APRIL" ИЛИ СтрокаМесяц = "АПР" ИЛИ СтрокаМесяц = "АПРЕЛЯ" Тогда
		Возврат 4;
	ИначеЕсли СтрокаМесяц = "MAY" ИЛИ СтрокаМесяц = "MAY" ИЛИ СтрокаМесяц = "МАЯ" ИЛИ СтрокаМесяц = "МАЯ" Тогда
		Возврат 5;
	ИначеЕсли СтрокаМесяц = "JUN" ИЛИ СтрокаМесяц = "JUNE" ИЛИ СтрокаМесяц = "ИЮН" ИЛИ СтрокаМесяц = "ИЮНЯ" Тогда
		Возврат 6;
	ИначеЕсли СтрокаМесяц = "JUL" ИЛИ СтрокаМесяц = "JULY" ИЛИ СтрокаМесяц = "ИЮЛ" ИЛИ СтрокаМесяц = "ИЮЛЯ" Тогда
		Возврат 7;
	ИначеЕсли СтрокаМесяц = "AUG" ИЛИ СтрокаМесяц = "AUGUST" ИЛИ СтрокаМесяц = "АВГ" ИЛИ СтрокаМесяц = "АВГУСТА" Тогда
		Возврат 8;
	ИначеЕсли СтрокаМесяц = "SEP" ИЛИ СтрокаМесяц = "SEPTEMBER" ИЛИ СтрокаМесяц = "СЕН" ИЛИ СтрокаМесяц = "СЕНТЯБРЯ" Тогда
		Возврат 9;
	ИначеЕсли СтрокаМесяц = "OCT" ИЛИ СтрокаМесяц = "OCTOBER" ИЛИ СтрокаМесяц = "ОКТ" ИЛИ СтрокаМесяц = "ОКТЯБРЯ" Тогда
		Возврат 10;
	ИначеЕсли СтрокаМесяц = "NOV" ИЛИ СтрокаМесяц = "NOVEMBER" ИЛИ СтрокаМесяц = "НОЯ" ИЛИ СтрокаМесяц = "НОЯБРЯ" Тогда
		Возврат 11;
	ИначеЕсли СтрокаМесяц = "DEC" ИЛИ СтрокаМесяц = "DECEMBER" ИЛИ СтрокаМесяц = "ДЕК" ИЛИ СтрокаМесяц = "ДЕКАБРЯ" Тогда
		Возврат 12;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьАдресИзСоставляющих(Адрес1, Адрес2="", Адрес3="", Адрес4="", Адрес5="") Экспорт
	
	Адрес = "";
	
	Если ЗначениеЗаполнено(Адрес1) Тогда
		Адрес = Адрес + ", " + Адрес1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес2) Тогда
		Адрес = Адрес + ", " + Адрес2;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес3) Тогда
		Адрес = Адрес + ", " + Адрес3;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес4) Тогда
		Адрес = Адрес + ", " + Адрес4;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адрес5) Тогда
		Адрес = Адрес + ", " + Адрес5;
	КонецЕсли;
	
	Возврат Сред(Адрес, 3);
	
КонецФункции

// ДОДЕЛАТЬ. ПЕРЕНЕСТИ В МОДУЛЬ МЕНЕДЖЕРА
Функция ПолучитьCountryПользователя(Пользователь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
				
	ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Пользователь, "ProcessLevel");
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
	
КонецФункции

Процедура ДобавитьОтборПоCountry(Отбор, ИмяПоля = "Country") Экспорт
	
	// Получим Country Текущего пользователя
	UserCountry = ПолучитьCountryПользователя(ПараметрыСеанса.ТекущийПользователь);
	
	// Если UserCountry не заполнен - выходим
	Если НЕ ЗначениеЗаполнено(UserCountry) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим отбор по Country
	Отбор.Вставить(ИмяПоля, UserCountry);
	
КонецПроцедуры

Процедура ДобавитьОтборПоCountryПриНеобходимости(Отбор, ИмяПоля = "Country") Экспорт
	
	// Если отбор по Country уже есть - выходим
	Если Отбор.Свойство(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОтборПоCountry(Отбор, ИмяПоля);	
	
КонецПроцедуры

// ДОДЕЛАТЬ. ПЕРЕНЕСТИ В МОДУЛЬ МЕНЕДЖЕРА
Функция ПолучитьLegalEntitiesOfCountry(Country) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Country", Country);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	LegalEntities.Ссылка
		|ИЗ
		|	Справочник.SoldTo КАК LegalEntities
		|ГДЕ
		|	(НЕ LegalEntities.ПометкаУдаления)
		|	И LegalEntities.Country = &Country";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// ДОДЕЛАТЬ. ПЕРЕНЕСТИ В МОДУЛЬ МЕНЕДЖЕРА
Функция ПолучитьLegalEntityOfCountry(Country) Экспорт
	
	LegalEntities = ПолучитьLegalEntitiesOfCountry(Country);
	Если LegalEntities.Количество() = 1 Тогда
		Возврат LegalEntities[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОтборПоProcessLevel(Отбор, ИмяПоля = "ProcessLevel") Экспорт
	
	// Получим Process level Текущего пользователя
	UserProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	
	// Если UserProcessLevel не заполнен - выходим
	Если НЕ ЗначениеЗаполнено(UserProcessLevel) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим отбор по Process level
	Отбор.Вставить(ИмяПоля, UserProcessLevel);	
	
КонецПроцедуры

Процедура ДобавитьОтборПоProcessLevelПриНеобходимости(Отбор, ИмяПоля = "ProcessLevel") Экспорт
	
	// Если отбор по Process level уже есть - выходим
	Если Отбор.Свойство(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОтборПоProcessLevel(Отбор, ИмяПоля);	
	
КонецПроцедуры

// NON PO

Функция ПолучитьТабДокNONPO(Shipment, ТаблицаДанных, WBList) Экспорт
	
	Макет = ПолучитьОбщийМакет("NonPO");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Header
	ОбластьHeader = Макет.ПолучитьОбласть("Header");
	ПараметрыОбластиHeader = ОбластьHeader.Параметры;
	ПараметрыОбластиHeader.CurrentDate = ТекущаяДатаСеанса();
	ПараметрыОбластиHeader.UserFullName = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "Наименование");
	ПараметрыОбластиHeader.CCA = Shipment.CCA;
	ТабличныйДокумент.Вывести(ОбластьHeader);
	
	// Cost allocation for customs duties
	ОбластьCostAllocationForCustomsDuties = Макет.ПолучитьОбласть("CostAllocationForCustomsDuties");	
	ТабличныйДокумент.Вывести(ОбластьCostAllocationForCustomsDuties);
	
	ОбластьTableHeader = Макет.ПолучитьОбласть("TableHeader");	
	ТабличныйДокумент.Вывести(ОбластьTableHeader);
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных цикл	
		ВывестиСтрокуNonPO(СтрокаТаблицыДанных, СтрокаТаблицыДанных.CustomsDutiesAccount, 
			СтрокаТаблицыДанных.CustomsDutiesSubAccount, Shipment, WBList, Макет, ТабличныйДокумент);	 
	КонецЦикла;
	
	// Cost allocation for CCA services
	ОбластьCostAllocationForCCAServices = Макет.ПолучитьОбласть("CostAllocationForCCAServices");	
	ТабличныйДокумент.Вывести(ОбластьCostAllocationForCCAServices);
	
	ОбластьTableHeader = Макет.ПолучитьОбласть("TableHeader");	
	ТабличныйДокумент.Вывести(ОбластьTableHeader);
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных цикл	
		ВывестиСтрокуNonPO(СтрокаТаблицыДанных, СтрокаТаблицыДанных.CCAServicesAccount, 
			СтрокаТаблицыДанных.CCAServicesSubAccount, Shipment, WBList, Макет, ТабличныйДокумент);	 
	КонецЦикла;
	
	ОбластьBillSendMail = Макет.ПолучитьОбласть("BillSendMail");	
	ТабличныйДокумент.Вывести(ОбластьBillSendMail);
	
	Если Shipment.ProcessLevel = Справочники.ProcessLevels.KZ Тогда
		ОбластьInvoiceTo = Макет.ПолучитьОбласть("InvoiceToKZ");
	ИначеЕсли Shipment.ProcessLevel = Справочники.ProcessLevels.AZ Тогда
		ОбластьInvoiceTo = Макет.ПолучитьОбласть("InvoiceToAZ");
	ИначеЕсли Shipment.ProcessLevel = Справочники.ProcessLevels.TM Тогда
		ОбластьInvoiceTo = Макет.ПолучитьОбласть("InvoiceToTM");
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьInvoiceTo);
                                 	
	ОбластьFooter = Макет.ПолучитьОбласть("Footer");	
	ТабличныйДокумент.Вывести(ОбластьFooter);
	
	// Завершим оформление табличного документа
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
		 
	Возврат ТабличныйДокумент;
	
КонецФункции

// ПЕРЕНЕСТИ В НУЖНЫЙ МОДУЛЬ
Процедура ВывестиСтрокуNonPO(СтрокаТаблицыДанных, GLAccount, GLSubAccount, Shipment, WBList, Макет, ТабличныйДокумент)
	
	ОбластьLine = Макет.ПолучитьОбласть("TableLine");	
	ПараметрыОбластиLine = ОбластьLine.Параметры;
	
	ПараметрыОбластиLine.AU = СокрЛП(СтрокаТаблицыДанных.AUCode);
	
	AC = "";
	Если Лев(GLAccount, 1) = "5" Тогда
		
		AC = СокрЛП(СтрокаТаблицыДанных.AC);
		Если НЕ ЗначениеЗаполнено(AC) Тогда
			AC = СокрЛП(СтрокаТаблицыДанных.AUAC);
		КонецЕсли;
		
		ПараметрыОбластиLine.AC = AC;
		
	КонецЕсли;
	
    ПараметрыОбластиLine.GLAccount = GLAccount;
    ПараметрыОбластиLine.GLSubAccount = GLSubAccount;
    ПараметрыОбластиLine.CostAllocationSplit = Формат(СтрокаТаблицыДанных.Percent, "ЧДЦ=2");
	ПараметрыОбластиLine.Description = СокрЛП(СтрокаТаблицыДанных.SegmentCode)
		+ ?(ЗначениеЗаполнено(СтрокаТаблицыДанных.InvoiceList), " " + СокрЛП(СтрокаТаблицыДанных.InvoiceList), "")
		+ ?(ЗначениеЗаполнено(WBList), ", WB list: " + СокрЛП(WBList), "")
		+ ?(ЗначениеЗаполнено(СтрокаТаблицыДанных.PSACode), ", contract number: " + СокрЛП(СтрокаТаблицыДанных.PSACode), "")
		+ ?(ЗначениеЗаполнено(СтрокаТаблицыДанных.Regime), ", regime: " + СокрЛП(СтрокаТаблицыДанных.Regime), "");
	
	ТабличныйДокумент.Вывести(ОбластьLine);
	
КонецПроцедуры

// { RGS AGorlenko 21.03.2014 12:41:08 - измененные данные объекта
Функция ПолучитьИзменныеДанныеОбъекта(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	ТипМетаданных = ?(Метаданные.Документы.Содержит(МетаданныеОбъекта), "Документ", "Справочник");
	ИмяТаблицы = МетаданныеОбъекта.Имя;
	
	СтрокаРеквизитов = "";
	Для каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		СтрокаРеквизитов = СтрокаРеквизитов + ТекРеквизит.Имя + ",";
	КонецЦикла;
	Для каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		СтрокаРеквизитов = СтрокаРеквизитов + ТекРеквизит.Имя + ", ";
	КонецЦикла;
	СтрокаРеквизитов = Лев(СтрокаРеквизитов, СтрДлина(СтрокаРеквизитов) - 2);
	
	ТекстЗапроса = "ВЫБРАТЬ " + СтрокаРеквизитов + " ИЗ " + ТипМетаданных + "." + ИмяТаблицы + " ГДЕ Ссылка = &Ссылка";
	
	Для каждого ТекТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		СтрокаРеквизитовТЧ = "";
		Для каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
			СтрокаРеквизитовТЧ = СтрокаРеквизитовТЧ + ТекРеквизит.Имя + ", ";
		КонецЦикла;
		СтрокаРеквизитовТЧ = Лев(СтрокаРеквизитовТЧ, СтрДлина(СтрокаРеквизитовТЧ) - 2);
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
			+ "ВЫБРАТЬ " + СтрокаРеквизитовТЧ + " ИЗ " + ТипМетаданных + "." + ИмяТаблицы + "." + ТекТЧ.Имя + " ГДЕ Ссылка = &Ссылка";
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	ИзмененныеДанные = Новый Соответствие;
	ИзмененныеДанные.Вставить("Реквизиты", Новый Массив);
	
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	Для каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизиты[ТекРеквизит.Имя] <> Объект[ТекРеквизит.Имя] Тогда
			ИзмененныеДанные["Реквизиты"].Добавить(ТекРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизиты[ТекРеквизит.Имя] <> Объект[ТекРеквизит.Имя] Тогда
			ИзмененныеДанные["Реквизиты"].Добавить(ТекРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИндексРезультата = 1;
	Для каждого ТекТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ИзмененныеДанные.Вставить(ТекТЧ.Имя, Новый Массив);
		ДанныеТЧ = Результат[ИндексРезультата].Выгрузить();
		ТекИндекс = 0;
		КоличествоСтрокСтаройТЧ = ДанныеТЧ.Количество();
		КоличествоСтрокНовойТЧ  = Объект[ТекТЧ.Имя].Количество();
		Для ТекИндекс = 0 По Мин(КоличествоСтрокСтаройТЧ, КоличествоСтрокНовойТЧ) - 1 Цикл
			Для каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				Если ДанныеТЧ[ТекИндекс][ТекРеквизит.Имя] <> Объект[ТекТЧ.Имя][ТекИндекс][ТекРеквизит.Имя] Тогда
					Если ИзмененныеДанные[ТекТЧ.Имя].Найти(ТекРеквизит.Имя) = Неопределено Тогда
						ИзмененныеДанные[ТекТЧ.Имя].Добавить(ТекРеквизит.Имя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для ТекИндекс = Мин(КоличествоСтрокСтаройТЧ, КоличествоСтрокНовойТЧ) По КоличествоСтрокСтаройТЧ - 1 Цикл
			Для каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				Если ИзмененныеДанные[ТекТЧ.Имя].Найти(ТекРеквизит.Имя) = Неопределено Тогда
					ИзмененныеДанные[ТекТЧ.Имя].Добавить(ТекРеквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для ТекИндекс = Мин(КоличествоСтрокСтаройТЧ, КоличествоСтрокНовойТЧ) По КоличествоСтрокНовойТЧ - 1 Цикл
			Для каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				Если ИзмененныеДанные[ТекТЧ.Имя].Найти(ТекРеквизит.Имя) = Неопределено Тогда
					ИзмененныеДанные[ТекТЧ.Имя].Добавить(ТекРеквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ИндексРезультата = ИндексРезультата + 1;
	КонецЦикла;
	
	Возврат ИзмененныеДанные;
	
КонецФункции
// } RGS AGorlenko 21.03.2014 12:41:31 - измененные данные объекта

// { RGS AArsentev 09.09.2016 16:56:30 S-I-0001717  
Функция РегистрацияИзмененийРеквизитовОбъекта(Объект, СтрокаИсключаемыхРеквизитов = "") Экспорт
	Перем МетаданныеОбъекта;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		МассивИсключаемыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИсключаемыхРеквизитов, ", ");
		МассивИсключаемыхРеквизитов.Добавить("Ссылка");
		
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
		
		СтрокаСобытие = "Данные.ИзменениеРеквизитов." + МетаданныеОбъекта.Имя;
		ПрежнийОбъект = Объект.Ссылка;
		РеквизитыПрежнегоОбъекта = ПолучитьРеквизитыОбъекта(ПрежнийОбъект);
		
		СтрокаСообщениеРеквизит = "Изменён реквизит ";
		СтрокаСообщениеТабЧасть = "Изменена таб.часть ";
		СтрокаСообщениеТабЧастьУдалено = "Удалено ";
		СтрокаСообщениеТабЧастьДобавлено = "Добавлено ";
		
		Для Каждого Элемент из РеквизитыПрежнегоОбъекта Цикл
			
			Если МассивИсключаемыхРеквизитов.Найти(Элемент.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			

			ПрежнийРеквизитЗначение = Элемент.Значение;
			НовыйРеквизитЗначение = Объект[Элемент.Ключ];
			Если ТипЗнч(НовыйРеквизитЗначение) = Тип("Строка") Тогда
				НовыйРеквизитЗначение = СокрЛП(НовыйРеквизитЗначение);
			КонецЕсли;
			Если ТипЗнч(ПрежнийРеквизитЗначение) = Тип("Строка") Тогда
				ПрежнийРеквизитЗначение = СокрЛП(ПрежнийРеквизитЗначение);
			КонецЕсли;
			Если ПрежнийРеквизитЗначение <> НовыйРеквизитЗначение Тогда
				Изменения = "" + Изменения + СтрокаСообщениеРеквизит + Элемент.Ключ +  " - Прежний: " + Строка(ПрежнийРеквизитЗначение)  + ", Новый: " + Строка(НовыйРеквизитЗначение)+ Символы.ВК;
			КонецЕсли;
		КонецЦикла;
		
		Если МетаданныеОбъекта.ТабличныеЧасти.Количество() > 0 Тогда
			
			Для Каждого МДТЧ ИЗ МетаданныеОбъекта.ТабличныеЧасти Цикл
				ИмяТЧ = МДТЧ.Имя;
				ТЧ1 = Объект[ИмяТЧ];
				ТЧ2 = ПрежнийОбъект[ИмяТЧ];
				ТЧ1Количество = ТЧ1.Количество();
				ТЧ2Количество = ТЧ2.Количество();
				Если ТЧ1Количество <> ТЧ2Количество Тогда
					Изменения = "" + Изменения + СтрокаСообщениеТабЧасть + ИмяТЧ + " - Прежняя: " + Строка(ТЧ2Количество) + ". Новая: " + Строка(ТЧ1Количество) + Символы.ВК; 
				КонецЕсли;
				Если ТЧ1Количество = ТЧ2Количество Тогда
					СтрокаСообщение = СтрокаСообщениеРеквизит;
				ИначеЕсли ТЧ2Количество > ТЧ1Количество Тогда
					СтрокаСообщение = СтрокаСообщениеТабЧастьУдалено;
				ИначеЕсли ТЧ2Количество < ТЧ1Количество Тогда
					СтрокаСообщение = СтрокаСообщениеТабЧастьДобавлено;
				КонецЕсли;
				
				Для Инд = 0 По Макс(ТЧ1Количество - 1, ТЧ2Количество - 1) Цикл
					
					Для Каждого МДРТЧ ИЗ МДТЧ.Реквизиты Цикл
						Реквизит = МДРТЧ.Имя;
						//исключаем ревизит по табличной части
						РевизитТЧ = ИмяТЧ + "." + Реквизит;
						//
						Если МассивИсключаемыхРеквизитов.Найти(РевизитТЧ) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если Инд >= ТЧ1Количество Тогда
							НовыйРеквизитЗначение = Неопределено;
						Иначе
							НовыйРеквизитЗначение = ТЧ1[Инд][Реквизит];
						КонецЕсли;
						Если Инд >= ТЧ2Количество Тогда
							ПрежнийРеквизитЗначение = Неопределено;
						Иначе
							ПрежнийРеквизитЗначение = ТЧ2[Инд][Реквизит];
						КонецЕсли;
						
						Если (ЗначениеЗаполнено(ПрежнийРеквизитЗначение) И ЗначениеЗаполнено(НовыйРеквизитЗначение)) ИЛИ (НЕ ЗначениеЗаполнено(ПрежнийРеквизитЗначение) И ЗначениеЗаполнено(НовыйРеквизитЗначение)) ИЛИ (ЗначениеЗаполнено(ПрежнийРеквизитЗначение) И НЕ ЗначениеЗаполнено(НовыйРеквизитЗначение)) Тогда
							Если ТипЗнч(НовыйРеквизитЗначение) = Тип("Строка") Тогда
								НовыйРеквизитЗначение = СокрЛП(НовыйРеквизитЗначение);
							КонецЕсли;
							Если ТипЗнч(ПрежнийРеквизитЗначение) = Тип("Строка") Тогда
								ПрежнийРеквизитЗначение = СокрЛП(ПрежнийРеквизитЗначение);
							КонецЕсли;
							Если НовыйРеквизитЗначение <> ПрежнийРеквизитЗначение Тогда
								Изменения = "" + Изменения + СтрокаСообщение + ИмяТЧ + "." + Реквизит + " в строке " + (Инд + 1)  + " - Прежний: " + Строка(ПрежнийРеквизитЗначение)  + ", Новый: " + Строка(НовыйРеквизитЗначение) + Символы.ВК;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	Возврат Изменения
КонецФункции

Функция ПолучитьРеквизитыОбъекта(Знач Ссылка, Знач СтруктураРеквизитов = Неопределено) Экспорт

	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
	
	ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	ЭтоПланОбмена = ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	ЭтоПВХ = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	ЭтоЗадача = Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка));
	
	ТекстЗапроса = "ВЫБРАТЬ ";
	
	//Формируем список реквизитов объекта для запроса
	Если ТипЗнч(СтруктураРеквизитов) = Тип("Строка") И ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		
		ТекстЗапроса = ТекстЗапроса + СокрЛП(СтруктураРеквизитов);
		//Если передали список реквизитов, инициализируем структуру
		Если Найти(СтруктураРеквизитов, ",") <> 0 Тогда
			СтруктураРеквизитов = Новый Структура(СтруктураРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураРеквизитов) = Тип("Структура") И СтруктураРеквизитов.Количество() > 0 Тогда
		
		Для каждого Реквизит Из СтруктураРеквизитов Цикл ТекстЗапроса = ТекстЗапроса + Реквизит.Ключ + ","; КонецЦикла;
		
		//Отрезаем последнюю запятую
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
		
	Иначе
		
		//Определяем список реквизитов объектов для подстановки в текст запроса
		СписокРеквизитов = "";
		Если ЭтоСправочник ИЛИ ЭтоПланОбмена ИЛИ ЭтоПВХ Тогда
			Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
				СписокРеквизитов = "Код,";
			КонецЕсли;
			Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
				СписокРеквизитов = СписокРеквизитов + "Наименование,";
			КонецЕсли;
			Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
				Если МетаданныеОбъекта.Иерархический Тогда
					СписокРеквизитов = СписокРеквизитов + "Родитель,";
				КонецЕсли;
				Если ЭтоСправочник И (МетаданныеОбъекта.Владельцы.Количество() <> 0) Тогда
					СписокРеквизитов = СписокРеквизитов + "Владелец,";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭтоДокумент Тогда
			Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
				СписокРеквизитов = "Номер,";
			КонецЕсли;
			СписокРеквизитов =  СписокРеквизитов + "Дата,";
		ИначеЕсли ЭтоЗадача Тогда
			Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
				СписокРеквизитов = "Номер,";
			КонецЕсли;
			СписокРеквизитов =  СписокРеквизитов + "Дата,";
			Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
				СписокРеквизитов = СписокРеквизитов + "Наименование,";
			КонецЕсли;
		КонецЕсли;
		
		СписокРеквизитов = СписокРеквизитов + "ПометкаУдаления,";
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл СписокРеквизитов = СписокРеквизитов + Реквизит.Имя + ","; КонецЦикла;
		
		//Отрезаем последнюю запятую
		СписокРеквизитов = Лев(СписокРеквизитов, СтрДлина(СписокРеквизитов) - 1);
		СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
		
		ТекстЗапроса = ТекстЗапроса + СписокРеквизитов;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ " + ИмяТаблицы + "
	|ГДЕ Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(СтруктураРеквизитов) = Тип("Строка") И ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
				Возврат Выборка[СтруктураРеквизитов];
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
				Возврат СтруктураРеквизитов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции //ПолучитьРеквизитыОбъекта()
// } RGS AArsentev 09.09.2016 16:56:30 S-I-0001717

// LOGs

Функция ПолучитьТекстИзмененияШапки(Объект, СтарыеРеквизитыШапки, МетаданныеСтандартныеРеквизиты, МетаданныеРеквизиты, СтрокаИсключаемыхРеквизитов) Экспорт
	
	МассивИсключаемыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИсключаемыхРеквизитов, ", ");
	МассивИсключаемыхРеквизитов.Добавить("Ссылка");
	
	ТекстИзменения = "";
	
	Для Каждого Реквизит Из МетаданныеСтандартныеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если МассивИсключаемыхРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект[ИмяРеквизита] <> СтарыеРеквизитыШапки[ИмяРеквизита] Тогда
			
			ПредставлениеСтарогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(СтарыеРеквизитыШапки[ИмяРеквизита]);
			ПредставлениеНовогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(Объект[ИмяРеквизита]);
			ТекстИзменения = ТекстИзменения + "
					|" + Символы.Таб + Реквизит.Синоним + ": " + ПредставлениеСтарогоРеквизита + " -> " + ПредставлениеНовогоРеквизита;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит ИЗ МетаданныеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если МассивИсключаемыхРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект[ИмяРеквизита] <> СтарыеРеквизитыШапки[ИмяРеквизита] Тогда
			
			ПредставлениеСтарогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(СтарыеРеквизитыШапки[ИмяРеквизита]);
			ПредставлениеНовогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(Объект[ИмяРеквизита]);
			ТекстИзменения = ТекстИзменения + "
					|" + Символы.Таб + Реквизит.Синоним + ": " + ПредставлениеСтарогоРеквизита + " -> " + ПредставлениеНовогоРеквизита;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстИзменения <> "" Тогда
		ТекстИзменения = "Header:" + ТекстИзменения;
	КонецЕсли;
	
	Возврат ТекстИзменения;
	
КонецФункции

Функция ПолучитьТекстИзмененияМассива(НовыйМассив, СтарыйМассив, Заголовок) Экспорт
	
	ТекстИзменения = "";
	
	УдаленныеЭлементы = РГСофтКлиентСервер.ВычестьМассивы(СтарыйМассив, НовыйМассив);
	
	Для Каждого УдаленныйЭлемент Из УдаленныеЭлементы Цикл
		
		ТекстИзменения = ТекстИзменения + "
			|" + Символы.Таб + СокрЛП(УдаленныйЭлемент) + " -> " + "empty";
		
	КонецЦикла;
	
	НовыеЭлементы = РГСофтКлиентСервер.ВычестьМассивы(НовыйМассив, СтарыйМассив);
	
	Для Каждого НовыйЭлемент Из НовыеЭлементы Цикл
		
		Если НЕ ЗначениеЗаполнено(НовыйЭлемент) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИзменения = ТекстИзменения + "
			|" + Символы.Таб + "empty -> " + СокрЛП(НовыйЭлемент);
		
	КонецЦикла;
	
	Если ТекстИзменения <> "" Тогда
		ТекстИзменения = Заголовок + ТекстИзменения;
	КонецЕсли;
	
	Возврат ТекстИзменения;
	
КонецФункции

Функция ПолучитьТекстИзмененияТабличнойЧасти(НоваяТабличнаяЧасть, СтараяТаблица, МетаданныеТабличнойЧасти) Экспорт
		
	ТекстИзменения = "";
	
	КоличествоСтарыхСтрок = СтараяТаблица.Количество();
	КоличествоНовыхСтрок = НоваяТабличнаяЧасть.Количество();
	
	МаксСтрок = Макс(КоличествоСтарыхСтрок, КоличествоНовыхСтрок);
	Для Индекс = 0 По МаксСтрок - 1 Цикл
		
		ТекстИзмененияСтроки = "";	
		Для каждого РеквизитТЧ Из МетаданныеТабличнойЧасти.Реквизиты Цикл
			
			Если Индекс < КоличествоСтарыхСтрок Тогда
				
				СтароеЗначение = СтараяТаблица[Индекс][РеквизитТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(СтароеЗначение) Тогда
					СтароеЗначение = Неопределено;
				КонецЕсли;
				
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			
			Если Индекс < КоличествоНовыхСтрок Тогда
				
				НовоеЗначение = НоваяТабличнаяЧасть[Индекс][РеквизитТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(НовоеЗначение) Тогда
					НовоеЗначение = Неопределено;
				КонецЕсли;
				
			Иначе
				НовоеЗначение = Неопределено;
			КонецЕсли;

			Если СтароеЗначение <> НовоеЗначение Тогда
				
				ПредставлениеСтарогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(СтароеЗначение);
				ПредставлениеНовогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(НовоеЗначение);
				ТекстИзмененияСтроки = ТекстИзмененияСтроки + "
					|" + Символы.Таб + Символы.Таб + РеквизитТЧ.Синоним + ": " + ПредставлениеСтарогоРеквизита + " -> " + ПредставлениеНовогоРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекстИзмененияСтроки <> "" Тогда
			ТекстИзменения = ТекстИзменения + "
				|" + Символы.Таб + "Line " + (Индекс + 1) + ":" + ТекстИзмененияСтроки;
		КонецЕсли;
					
	КонецЦикла;
	
	Если ТекстИзменения <> "" Тогда
		ТекстИзменения = МетаданныеТабличнойЧасти.Синоним + ":" + ТекстИзменения;
	КонецЕсли;
	
	Возврат ТекстИзменения;
	
КонецФункции

Функция ПолучитьПредставлениеРеквизитаДляЛогов(ЗначениеРеквизита)
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеРеквизита), СокрЛП(ЗначениеРеквизита), "empty");
	
КонецФункции

Функция ДобавитьВТекстИзмененийБлок(ТекстИзменений, Блок) Экспорт
	
	Если Блок = "" Тогда
		
		Возврат ТекстИзменений;
		
	Иначе
		
		Если ТекстИзменений = "" Тогда
			
			Возврат Блок;
			
		Иначе
			
			Возврат ТекстИзменений + "
				|
				|" + Блок;
				
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции


// ПРОВЕДЕНИЕ И ОТМЕНА

Процедура НастроитьВидимостьUnpostИSave(ЭлементUnpost, ЭлементSave, ОбъектПроведен) Экспорт
	
	// Скрывает кнопку Отмена проведения, если документ не проведен
	// Скрывает кнопку Save, если документ проведен
	// (а то у многих взрывается мозг, что при сохранении проведенного документа, он на самом деле проводится)	
	
	Если ЭлементUnpost <> Неопределено Тогда
		ЭлементUnpost.Видимость = ОбъектПроведен;
	КонецЕсли;
	
	Если ЭлементSave <> Неопределено Тогда	
		ЭлементSave.Видимость = НЕ ОбъектПроведен;
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьОтменуИПометкуУдаленияДокумента(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.Отменен = Истина;	
	Иначе
		
		// Снимем статус Отменен, если снимается пометка на удаление
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			
			ПометкаУдаленияДоЗаписи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.Ссылка, "ПометкаУдаления");
			Если ПометкаУдаленияДоЗаписи = Истина Тогда
				ДокументОбъект.Отменен = Ложь;
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодменитьРежимЗаписиОтмененногоДокумента(Отменен, Проведен, РежимЗаписи) Экспорт
	
	// Подменяет режим записи для отмененного документа
	// Проведенный документ - распроводит
	// При попытке провести отмененный документ - возвращает режим записи = запись
	
	Если НЕ Отменен Тогда
		Возврат;
	КонецЕсли;
		
	Если Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// IMPORT

Процедура ОбновитьВажностиDOC() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	DOCs.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК DOCs
		|ГДЕ
		|	(НЕ DOCs.СтатусВажности = ЗНАЧЕНИЕ(Перечисление.СтатусыВажности.Красный))
		|	И (НЕ DOCs.Отменен)
		|	И DOCs.Booked = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьВажностиДокументовИзВыборки(Выборка);
	
КонецПроцедуры

Процедура ОбновитьВажностиПоставок() Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ImportShipments.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Поставка КАК ImportShipments
		|ГДЕ
		|	(НЕ ImportShipments.СтатусВажности = ЗНАЧЕНИЕ(Перечисление.СтатусыВажности.Красный))
		|	И (НЕ ImportShipments.Отменен)
		|	И (ImportShipments.Cleared = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ImportShipments.CollectedFromPort = ДАТАВРЕМЯ(1, 1, 1))";
			
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьВажностиДокументовИзВыборки(Выборка);
	
КонецПроцедуры

Процедура ОбновитьВажностиДокументовИзВыборки(Выборка)
		
	Пока Выборка.Следующий() Цикл
		
		Отказ = Ложь;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		НовыйСтатусВажности = Объект.ОпределитьАктуальныйСтатусВажности();
		Если Объект.СтатусВажности <> НовыйСтатусВажности  Тогда
			
			Объект.СтатусВажности = НовыйСтатусВажности;
			Объект.мОбработкаВажностиРегламентнымЗаданием = Истина;
			Попытка
				Объект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить статус важности документа """ + Объект + """:" + ОписаниеОшибки(),
					, , , Отказ);		
			КонецПопытки;
			
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// RCA_Black_List_Rules

Процедура SendRCABlackListRules() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	RulesOfBlacklist.Country.Наименование КАК Country,
	|	RulesOfBlacklist.Country.Код КАК Code,
	|	RulesOfBlacklist.Type,
	|	RulesOfBlacklist.Reason,
	|	RulesOfBlacklist.GoodsDescription,
	|	RulesOfBlacklist.Field,
	|	RulesOfBlacklist.Value,
	|	RulesOfBlacklist.CreatedBy.Код КАК CreatedBy,
	|	RulesOfBlacklist.CreationDate,
	|	RulesOfBlacklist.ModifiedBy.Код КАК ModifiedBy,
	|	RulesOfBlacklist.ModificationDate
	|ИЗ
	|	Справочник.RulesOfBlacklist КАК RulesOfBlacklist
	|ГДЕ
	|	НЕ RulesOfBlacklist.ПометкаУдаления";
	
	ТаблицаRCABlackListRules = Запрос.Выполнить().Выгрузить();
	Если ТаблицаRCABlackListRules.Количество() = 0 Тогда  
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ImportExportСервер.ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	
	Попытка
		FormAndSendRCABlackListRules(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, ТаблицаRCABlackListRules);
	Исключение
		ЗаписьЖурналаРегистрации(
			"Failed to send RCA black list rules",
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки());
	КонецПопытки;
		   
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура FormAndSendRCABlackListRules(ИнтернетПочта, АдресОтправителя, ТаблицаRCABlackListRules) 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
	                             		
	ТабДок = Новый ТабличныйДокумент;
	
	Построитель = Новый ПостроительОтчета();

    Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаRCABlackListRules);
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
    Построитель.Вывести(ТабДок);

    ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	ИмяФайла = ВременныйФайл.Путь + "RCA_Black_List_Rules.xls";
    
    ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	 		
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	 	
	Вложения = Новый Массив();
	Вложения.Добавить(ИмяФайла);
		
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, 
		Константы.RCABlackListRulesRecipients.Получить(),
		"RCA_Black_List_Rules", 
		"Please find attached file with RCA black list rules.
		|This information is sent every day at 6 pm (Moscow time).",
		, Вложения, "riet-support@slb.com");
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	    			      						 		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// EXPORT

Функция ПолучитьExportRequestPendingDays(AcceptedBySpecialist, InternationalATD) Экспорт
	
	Если ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
		
		КонецБизнесПроцесса = ?(ЗначениеЗаполнено(InternationalATD), InternationalATD, ТекущаяДата());
		Возврат (КонецБизнесПроцесса - AcceptedBySpecialist) / (60*60*24);
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура ОбновитьPendingDaysOfExportRequests() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ExportRequests.Ссылка,
		|	ExportRequests.PendingDays,
		|	ExportRequests.AcceptedBySpecialist,
		|	ExportShipmentsExportRequests.Ссылка.InternationalATD КАК InternationalATD
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequests
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ExportShipment.ExportRequests КАК ExportShipmentsExportRequests
		|		ПО ExportRequests.Ссылка = ExportShipmentsExportRequests.ExportRequest
		|			И ((НЕ ExportShipmentsExportRequests.Ссылка.ПометкаУдаления))
		|ГДЕ
		|	(НЕ ExportRequests.Canceled)
		|	И ExportRequests.AcceptedBySpecialist > ДАТАВРЕМЯ(1, 1, 1)
		|	И (ExportShipmentsExportRequests.Ссылка ЕСТЬ NULL 
		|			ИЛИ ExportShipmentsExportRequests.Ссылка.InternationalATD = ДАТАВРЕМЯ(1, 1, 1))";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		PendingDays = ПолучитьExportRequestPendingDays(Выборка.AcceptedBySpecialist, Выборка.InternationalATD);
		Если PendingDays = Выборка.PendingDays Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		ExportRequestОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ExportRequestОбъект.PendingDays = PendingDays;
		ExportRequestОбъект.ОбменДанными.Загрузка = Истина;
		ExportRequestОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьExportRequestStage(РеквизитыExportRequest, РеквизитыExportShipment) Экспорт
	
	ExportStages = Перечисления.ExportStages;
	// { RGS DKazanskiy 08.10.2018 15:03:00 - S-I-0005759
	Если ТипЗнч(РеквизитыExportRequest) = Тип("ДокументОбъект.ExportRequest") И РегистрыСведений.TDStatuses.TDRequested(РеквизитыExportRequest.Ссылка) Тогда
		Возврат ExportStages.PendingTD;
	ИначеЕсли ТипЗнч(РеквизитыExportRequest) <> Тип("ДокументОбъект.ExportRequest") И РегистрыСведений.TDStatuses.TDRequested(РеквизитыExportRequest.ExportRequest) Тогда
		Возврат ExportStages.PendingTD;
	// } RGS DKazanskiy 08.10.2018 15:03:00 - S-I-0005759
	ИначеЕсли РеквизитыExportShipment <> Неопределено И ЗначениеЗаполнено(РеквизитыExportShipment.InternationalATA) Тогда
		Возврат ExportStages.Delivered;
		
	ИначеЕсли РеквизитыExportShipment <> Неопределено И ЗначениеЗаполнено(РеквизитыExportShipment.InternationalATD) Тогда
		Возврат ExportStages.InternationalDelivery;
		
	ИначеЕсли РеквизитыExportShipment <> Неопределено И ЗначениеЗаполнено(РеквизитыExportShipment.ReleasedFromCustoms) Тогда
		Возврат ExportStages.ReadyInternationalDelivery;
		
	ИначеЕсли РеквизитыExportShipment <> Неопределено И ЗначениеЗаполнено(РеквизитыExportShipment.SubmittedToCustoms) Тогда
		Возврат ExportStages.InCustoms;
	
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.InternationalFreightReceived) И НЕ ЗначениеЗаполнено(РеквизитыExportRequest.InternationalFreightApproved)
		// { RGS DKazanskiy 08.10.2018 15:03:00 - S-I-0005759
		//ИЛИ ЗначениеЗаполнено(РеквизитыExportRequest.LocalFreightReceived) И НЕ ЗначениеЗаполнено(РеквизитыExportRequest.LocalFreightApproved) 
		// } RGS DKazanskiy 08.10.2018 15:03:11 - S-I-0005759		
		Тогда
		Возврат ExportStages.AwaitingQuoteApproval;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.ConsigneeGLReceived)
		// { RGS DKazanskiy 08.10.2018 15:03:00 - S-I-0005759
		//И (РеквизитыExportRequest.FumigationRequired = Перечисления.YesNo.No И РеквизитыExportRequest.FumigationCertificateRequired = Перечисления.YesNo.No ИЛИ ЗначениеЗаполнено(РеквизитыExportRequest.FumigationDone))
		И (РеквизитыExportRequest.FumigationRequired = Перечисления.YesNo.No)
		// } RGS DKazanskiy 08.10.2018 15:03:11 - S-I-0005759
		И (РеквизитыExportRequest.PermitsRequired = Перечисления.YesNo.No ИЛИ ЗначениеЗаполнено(РеквизитыExportRequest.PermitsObtained)) Тогда
		Возврат ExportStages.ReadyForCustomsClearance;
		
	ИначеЕсли РеквизитыExportRequest.PermitsRequired = Перечисления.YesNo.Yes И НЕ ЗначениеЗаполнено(РеквизитыExportRequest.PermitsObtained) Тогда
		Возврат ExportStages.AwaitingPermits;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.LocalATA) Тогда
		Возврат ExportStages.InTransitWarehouse;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.LocalATD) Тогда
		Возврат ExportStages.LocalDelivery;	
	// { RGS DKazanskiy 08.10.2018 15:03:00 - S-I-0005759	
	//ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLReceived) И ЗначениеЗаполнено(РеквизитыExportRequest.LocalFreightApproved) И ТекущаяДата() > РеквизитыExportRequest.ReadyToShipDate Тогда
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLReceived) И ТекущаяДата() > РеквизитыExportRequest.ReadyToShipDate Тогда
		Возврат ExportStages.AwaitingPickUpAtOrigin;
	//ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLReceived) И ЗначениеЗаполнено(РеквизитыExportRequest.LocalFreightApproved) И ТекущаяДата() < РеквизитыExportRequest.ReadyToShipDate Тогда	
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLReceived) И ТекущаяДата() < РеквизитыExportRequest.ReadyToShipDate Тогда
		Возврат ExportStages.AwaitingCargoAvailability;
		
	
	//ИначеЕсли (ЗначениеЗаполнено(РеквизитыExportRequest.LocalFreightReceived) ИЛИ ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLRequested) ИЛИ ЗначениеЗаполнено(РеквизитыExportRequest.InternationalFreightRequested)) Тогда
	ИначеЕсли (ЗначениеЗаполнено(РеквизитыExportRequest.CCAGLRequested)) Тогда
	// } RGS DKazanskiy 08.10.2018 15:03:11 - S-I-0005759
		Возврат ExportStages.GLAndQuotes;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.AcceptedBySpecialist) Тогда
		Возврат ExportStages.AcceptedBySpecialist;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыExportRequest.Submitted) Тогда
		Возврат ExportStages.Submitted;
		
	Иначе	
		Возврат ExportStages.Draft;
		
	КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// PSA contracts and Permits notifications

Процедура SendPSAContractsAndPermitsNotifications() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	
	SendPermitsNotifications();	
	
	SendPSAContractsNotifications();
	
КонецПроцедуры

Процедура SendPermitsNotifications() Экспорт
	
	// Получим данные о временных товарах
	ТаблицаPermits = ПолучитьТаблицуPermitsForNotifications();	
	Если ТаблицаPermits.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);

	// Отправим сообщение для каждого process level email
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMails = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPermits, "EMails");	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		ТабPermitsForEMail = ТаблицаPermits.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendPermitsNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, EMails, ТабPermitsForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send Permits notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура SendPSAContractsNotifications() Экспорт
	
	// Получим данные о временных товарах
	ТаблицаPSA = ПолучитьТаблицуPSAForNotifications();	
	Если ТаблицаPSA.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);

	// Отправим сообщение для каждого process level email
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMails = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPSA, "EMails");	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		ТабPSAForEMail = ТаблицаPSA.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendPSAContractsNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, EMails, ТабPSAForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send PSA contracts notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьТаблицуPermitsForNotifications() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаПлюс4Месяца", ДобавитьМесяц(ТекущаяДата(), 4));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ProcessLevels.EMailsForTemporaryItemsNotification КАК EMails,
		|	Permits.ExpiryDate,
		|	Permits.Код КАК PermitNo,
		|	Permits.PermitDescription
		|ИЗ
		|	Справочник.Permits КАК Permits
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ProcessLevels КАК ProcessLevels
		|		ПО Permits.Country = ProcessLevels.Country
		|ГДЕ
		|	Permits.ExpiryDate < &ТекДатаПлюс4Месяца
		|	И НЕ Permits.ПометкаУдаления
		|	И Permits.Closed = ДАТАВРЕМЯ(1, 1, 1)";
	
	Возврат Запрос.Выполнить().Выгрузить();
		 		
КонецФункции

Функция ПолучитьТаблицуPSAForNotifications() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаПлюс4Месяца", ДобавитьМесяц(ТекущаяДата(), 4));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ProcessLevels.EMailsForTemporaryItemsNotification КАК EMails,
		|	PSAContracts.ExpiryDate,
		|	PSAContracts.Код КАК PSANo,
		|	PSAContracts.Client,
		|	PSAContracts.Segment
		|ИЗ
		|	Справочник.PSAContracts КАК PSAContracts
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ProcessLevels КАК ProcessLevels
		|		ПО PSAContracts.Country = ProcessLevels.Country
		|ГДЕ
		|	PSAContracts.ExpiryDate < &ТекДатаПлюс4Месяца
		|	И НЕ PSAContracts.ПометкаУдаления
		|	И PSAContracts.Closed = ДАТАВРЕМЯ(1, 1, 1)";
	
	Возврат Запрос.Выполнить().Выгрузить();
		 		
КонецФункции

Процедура FormAndSendPermitsNotification(ИнтернетПочта, АдресОтправителя, EMails, ТабPermitsForEMail) 
	
	Тема = "Permits expiring within 4 months";
			
	ТекстHTML = "<HTML>
		|<BODY>
		|<P>" + Тема + ":</P>
		|<TABLE BORDER>
		|	<TR>
		|		<TH>Expiry date</TH>
		|		<TH>No.</TH>
		|		<TH>Permit description</TH>
		|	</TR>";
		
	Для Каждого Стр Из ТабPermitsForEMail Цикл
		
		ТекстHTML = ТекстHTML + "
			|	<TR>
			|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
			|		<TD>" + СокрЛП(Стр.PermitNo) + "</TD>
			|		<TD>" + СокрЛП(Стр.PermitDescription) + "</TD>
			|	</TR>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "
		|</TABLE>
		|<P>This notification is sent twice a week every Monday and Thursday.</P>
		|</BODY>
		|</HTML>";
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, EMails, Тема, ТекстHTML, ТипТекстаПочтовогоСообщения.HTML, , "riet-support@slb.com");
		      						 		
КонецПроцедуры

Процедура FormAndSendPSAContractsNotification(ИнтернетПочта, АдресОтправителя, EMails, ТабPSAForEMail) 
	
	Тема = "PSA contracts expiring within 4 months";
			
	ТекстHTML = "<HTML>
		|<BODY>
		|<P>" + Тема + ":</P>
		|<TABLE BORDER>
		|	<TR>
		|		<TH>Expiry date</TH>
		|		<TH>No.</TH>
		|		<TH>Client</TH>
		|		<TH>Segment</TH>
		|	</TR>";
		
	Для Каждого Стр Из ТабPSAForEMail Цикл
		
		ТекстHTML = ТекстHTML + "
			|	<TR>
			|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
			|		<TD>" + СокрЛП(Стр.PSANo) + "</TD>
			|		<TD>" + СокрЛП(Стр.Client) + "</TD>
			|		<TD>" + СокрЛП(Стр.Segment) + " </TD>
			|	</TR>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "
		|</TABLE>
		|<P>This notification is sent twice a week every Monday and Thursday.</P>
		|</BODY>
		|</HTML>";
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, EMails, Тема, ТекстHTML, ТипТекстаПочтовогоСообщения.HTML, , "riet-support@slb.com");
		      						 		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Contracts & Price list of services notifications

Процедура SendContractsPriceListOfServicesNotifications() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	     		
	СтруктураContractsPriceLists = ПолучитьСтруктуруContractsPriceListOfServicesForNotifications();
	
	ТаблицаPriceLists = СтруктураContractsPriceLists.ТаблицаPriceLists;
	ТаблицаContracts  = СтруктураContractsPriceLists.ТаблицаContracts;
	ТаблицаAgentLegalDocs  = СтруктураContractsPriceLists.ТаблицаAgentLegalDocs;
	
	МассивPriceListOfServicesEmails = СтруктураContractsPriceLists.ТаблицаEMails.ВыгрузитьКолонку("EMails");
	
	Если ТаблицаPriceLists.Количество() = 0 
		//И ТаблицаContracts.Количество() = 0
		И ТаблицаAgentLegalDocs.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ImportExportСервер.ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);

	// Отправим сообщение для каждого process level email
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMailsAgentLegalDocs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаAgentLegalDocs, "EMails");
	МассивEMails = РГСофтКлиентСервер.СложитьМассивы(МассивEMailsAgentLegalDocs, МассивPriceListOfServicesEmails);
	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		ТаблицаAgentLegalDocsForEMail = ТаблицаAgentLegalDocs.Скопировать(СтруктураОтбораПоEMails);
		
		Если МассивPriceListOfServicesEmails.Найти(EMails) = Неопределено Тогда  
			ТаблицаPriceListsForEMail = ТаблицаPriceLists.СкопироватьКолонки();
			ТаблицаContractsForEMail = ТаблицаContracts.СкопироватьКолонки();
		Иначе 
			ТаблицаPriceListsForEMail = ТаблицаPriceLists;
			ТаблицаContractsForEMail = ТаблицаContracts;
		КонецЕсли;

		Попытка
			FormAndSendContractsPriceListOfServicesNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, 
				EMails, ТаблицаContractsForEMail, ТаблицаPriceListsForEMail, ТаблицаAgentLegalDocsForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send Contracts & Price lists of services notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьСтруктуруContractsPriceListOfServicesForNotifications() 
	
	СтруктураContractsPriceLists = Новый Структура("ТаблицаPriceLists,ТаблицаEMails,ТаблицаContracts,ТаблицаAgentLegalDocs");
	         	
	Запрос = Новый Запрос;
	
	// Получим данные
	// для прайс-листов сервисов и contracts пока только для RUWE и RUEA
	МассивPriceListOfServicesProcessLevels = Новый Массив;
	МассивPriceListOfServicesProcessLevels.Добавить(Справочники.ProcessLevels.RUWE);
	МассивPriceListOfServicesProcessLevels.Добавить(Справочники.ProcessLevels.RUEA);
	
	Запрос.УстановитьПараметр("ProcessLevels", МассивPriceListOfServicesProcessLevels);
	Запрос.УстановитьПараметр("ТекДатаПлюсПолтораМесяца", ДобавитьМесяц(ТекущаяДата(), 1.5));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	PriceListOfServices.Description,
		|	PriceListOfServices.Номер,
		|	PriceListOfServices.Agent,
		|	PriceListOfServices.ExpireDate КАК ExpireDate
		|ИЗ
		|	Документ.PriceListOfServices КАК PriceListOfServices
		|ГДЕ
		|	PriceListOfServices.ExpireDate < &ТекДатаПлюсПолтораМесяца
		|	И PriceListOfServices.Проведен
		|	И PriceListOfServices.Active
		|
		|УПОРЯДОЧИТЬ ПО
		|	ExpireDate
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ProcessLevels.EMailsForTemporaryItemsNotification КАК EMails
		|ИЗ
		|	Справочник.ProcessLevels КАК ProcessLevels
		|ГДЕ
		|	ProcessLevels.Ссылка В(&ProcessLevels)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Contracts.Seller,
		|	Contracts.ConsignTo,
		|	Contracts.Наименование,
		|	Contracts.Incoterms,
		|	Contracts.ExpiryDate КАК ExpiryDate
		|ИЗ
		|	Справочник.Contracts КАК Contracts
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ProcessLevels КАК ProcessLevels
		|		ПО Contracts.ConsignTo.Владелец.Country = ProcessLevels.Country
		|			И (ProcessLevels.Ссылка В (&ProcessLevels))
		|ГДЕ
		|	НЕ Contracts.ПометкаУдаления
		|	И Contracts.ExpiryDate < &ТекДатаПлюсПолтораМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	ExpiryDate
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	AgentsLegalDocuments.DocumentType,
		|	AgentsLegalDocuments.ParentCompany,
		|	AgentsLegalDocuments.DocumentNumber,
		|	AgentsLegalDocuments.StartDate,
		|	AgentsLegalDocuments.ExpiryDate КАК ExpiryDate,
		|	AgentsLegalDocuments.Ссылка КАК Agent,
		|	ProcessLevels.EMailsForTemporaryItemsNotification КАК EMails
		|ИЗ
		|	Справочник.ProcessLevels КАК ProcessLevels
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Agents.LegalDocuments КАК AgentsLegalDocuments
		|		ПО (AgentsLegalDocuments.ParentCompany.Country = ProcessLevels.Country)
		|ГДЕ
		|	AgentsLegalDocuments.ExpiryDate < &ТекДатаПлюсПолтораМесяца
		|	И НЕ AgentsLegalDocuments.Ссылка.ПометкаУдаления
		|	И AgentsLegalDocuments.Active
		|
		|УПОРЯДОЧИТЬ ПО
		|	ExpiryDate";
		
	Результат = Запрос.ВыполнитьПакет();	
	
	СтруктураContractsPriceLists.ТаблицаPriceLists = Результат[0].Выгрузить();
	СтруктураContractsPriceLists.ТаблицаEMails = Результат[1].Выгрузить();
	СтруктураContractsPriceLists.ТаблицаContracts = Результат[2].Выгрузить();
	СтруктураContractsPriceLists.ТаблицаAgentLegalDocs = Результат[3].Выгрузить();
	
	Возврат СтруктураContractsPriceLists;
		 		
КонецФункции

Процедура FormAndSendContractsPriceListOfServicesNotification(ИнтернетПочта, АдресОтправителя, EMails, 
										ТаблицаContracts, ТаблицаPriceLists, ТаблицаAgentLegalDocs) 
	
	Тема = "Agents contracts & other legal documents expiring within 1.5 months";
	ТекстHTML = "<HTML>
			|<BODY>";
	
	//// Contracts
	//Если ТаблицаContracts.Количество() > 0 Тогда 
	//
	//	ТекстHTML = ТекстHTML + "
	//		|<P>" + "Contracts expiring within 1.5 months" + ":</P>
	//		|<TABLE BORDER>
	//		|	<TR>
	//		|		<TH>Expiry date</TH>
	//		|		<TH>No.</TH>
	//		|		<TH>Seller</TH>
	//		|		<TH>ConsignTo</TH>
	//		|		<TH>Incoterms</TH>
	//		|	</TR>";
	//		
	//	Для Каждого Стр Из ТаблицаContracts Цикл
	//		
	//		ТекстHTML = ТекстHTML + "
	//			|	<TR>
	//			|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
	//			|		<TD>" + СокрЛП(Стр.Наименование) + "</TD>
	//			|		<TD>" + СокрЛП(Стр.Seller) + "</TD>
	//			|		<TD>" + СокрЛП(Стр.ConsignTo) + "</TD>
	//			|		<TD>" + СокрЛП(Стр.Incoterms) + "</TD>
	//			|	</TR>";
	//		
	//	КонецЦикла;
	//	
	//	ТекстHTML = ТекстHTML + "
	//		|</TABLE>";
	//	
	//КонецЕсли;

	// Agent Legal Documents
	Если ТаблицаAgentLegalDocs.Количество() > 0 Тогда 
	
		ТекстHTML = ТекстHTML + "
			|<P>" + "Agents legal documents expiring within 1.5 months" + ":</P>
			|<TABLE BORDER>
			|	<TR>
			|		<TH>Expiry date</TH>
			|		<TH>Agent</TH>
			|		<TH>Parent company</TH>
			|		<TH>Document type</TH>
			|		<TH>No.</TH>
			|		<TH>Start date</TH>
			|	</TR>";
			
		Для Каждого Стр Из ТаблицаAgentLegalDocs Цикл
			
			ТекстHTML = ТекстHTML + "
				|	<TR>
				|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
				|		<TD>" + СокрЛП(Стр.Agent) + "</TD>
				|		<TD>" + СокрЛП(Стр.ParentCompany) + "</TD>
				|		<TD>" + СокрЛП(Стр.DocumentType) + "</TD>
				|		<TD>" + СокрЛП(Стр.DocumentNumber) + "</TD>
				|		<TD>" + Формат(Стр.StartDate, "ДФ=dd.MM.yyyy") + "</TD> 	
				|	</TR>";
			
		КонецЦикла;
		
		ТекстHTML = ТекстHTML + "
			|</TABLE>";
		
	КонецЕсли;
	
	// Price lists	
	Если ТаблицаPriceLists.Количество() > 0 Тогда 
	
		ТекстHTML = ТекстHTML + "
			|<P>" + "Price lists of services expiring within 1.5 months" + ":</P>
			|<TABLE BORDER>
			|	<TR>
			|		<TH>Expiry date</TH>
			|		<TH>No.</TH>
			|		<TH>Description</TH>
			|		<TH>Agent</TH>
			|	</TR>";
			
		Для Каждого Стр Из ТаблицаPriceLists Цикл
			
			ТекстHTML = ТекстHTML + "
				|	<TR>
				|		<TD>" + Формат(Стр.ExpireDate, "ДФ=dd.MM.yyyy") + "</TD>
				|		<TD>" + СокрЛП(Стр.Номер) + "</TD>
				|		<TD>" + СокрЛП(Стр.Description) + "</TD>
				|		<TD>" + СокрЛП(Стр.Agent) + "</TD>
				|	</TR>";
			
		КонецЦикла;
		
		ТекстHTML = ТекстHTML + "
			|</TABLE>";
		
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "
		|<P>This notification is sent once a week every Monday.</P>
		|</BODY>
		|</HTML>";
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, EMails, Тема, ТекстHTML, ТипТекстаПочтовогоСообщения.HTML, , "riet-support@slb.com");
		      						 		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// TEMPORARY IMPORT / EXPORT

// Items

Процедура SendTemporaryItemsNotifications() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;

	// Получим данные о временных товарах
	ТаблицаTempItems = ПолучитьТаблицуTemporaryItemsForNotifications();	
	Если ТаблицаTempItems.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);

	// Отправим сообщение для каждого process level email
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMails = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаTempItems, "EMails");	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		ТабTempItemsForEMail = ТаблицаTempItems.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendTemporaryItemsNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, EMails, ТабTempItemsForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send temporary items notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры
             
Функция ПолучитьТаблицуTemporaryItemsForNotifications() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаПлюс3Месяца", ДобавитьМесяц(ТекущаяДата(), 3));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	AdditionalDataOfItemsInTemporaryImpExp.ProcessLevel.EMailsForTemporaryItemsNotification КАК EMails,
		|	ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Responsible.Представление КАК ResponsibleПредставление,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.КостЦентр.Segment.Код КАК SegmentCode,
		|	ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних.ExpiryDate КАК ExpiryDate,
		|	CustomsFilesOfGoods.DTNo КАК CustomsFileNo,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.КодПоИнвойсу КАК PartNo,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.НаименованиеТовара КАК ItemDescription,
		|	QtyOfItemsInTemporaryImpExpОстатки.QtyОстаток КАК Qty,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.Сумма КАК TotalPrice,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.Currency КАК Currency
		|ИЗ
		|	РегистрНакопления.QtyOfItemsInTemporaryImpExp.Остатки КАК QtyOfItemsInTemporaryImpExpОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.AdditionalDataOfItemsInTemporaryImpExp КАК AdditionalDataOfItemsInTemporaryImpExp
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = AdditionalDataOfItemsInTemporaryImpExp.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = CustomsFilesOfGoods.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ExpiryDatesOfItemsInTemporaryImpExp.СрезПоследних КАК ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ResponsiblesForItemsInTemporaryImpExp.СрезПоследних КАК ResponsiblesForItemsInTemporaryImpExpСрезПоследних
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Item
		|ГДЕ
		|	ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних.ExpiryDate < &ТекДатаПлюс3Месяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	ExpiryDate,
		|	ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Responsible.Представление,
		|	CustomsFileNo";
	
	Возврат Запрос.Выполнить().Выгрузить();
		 		
КонецФункции

Процедура FormAndSendTemporaryItemsNotification(ИнтернетПочта, АдресОтправителя, EMails, ТабTempItemsForEMail) 
	
	Тема = "Items under Temporary Regime expiring within 3 months";
			
	ТекстHTML = "<HTML>
		|<BODY>
		|<P>" + Тема + ":</P>
		|<TABLE BORDER>
		|	<TR>
		|		<TH>Expiry date</TH>
		|		<TH>Responsible</TH>
		|		<TH>Segment</TH>
		|		<TH>Customs file no.</TH>
		|		<TH>Part no.</TH>
		|		<TH>Item description</TH>
		|		<TH>Qty</TH>
		|		<TH>Total price</TH>
		|		<TH>Currency</TH>
		|	</TR>";
		
	Для Каждого Стр Из ТабTempItemsForEMail Цикл
		
		ТекстHTML = ТекстHTML + "
			|	<TR>
			|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
			|		<TD>" + СокрЛП(Стр.ResponsibleПредставление) + "</TD>
			|		<TD>" + СокрЛП(Стр.SegmentCode) + "</TD>
			|		<TD>" + СокрЛП(Стр.CustomsFileNo) + " </TD>
			|		<TD>" + СокрЛП(Стр.PartNo) + "</TD>
			|		<TD>" + СокрЛП(Стр.ItemDescription) + "</TD>
			|		<TD>" + Стр.Qty + "</TD>
			|		<TD>" + Стр.TotalPrice + "</TD>
			|		<TD>" + Стр.Currency + "</TD>
			|	</TR>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "
		|</TABLE>
		|<P>This notification is sent once a week every Monday.</P>
		|</BODY>
		|</HTML>";
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, EMails, Тема, ТекстHTML, ТипТекстаПочтовогоСообщения.HTML, , "riet-support@slb.com");
		      						 		
КонецПроцедуры

// Payments

Процедура SendPaymentsForTemporaryItemsNotifications() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;

	// Получим данные о временных товарах
	ТаблицаPayments = ПолучитьТаблицуPaymentsForTemporaryItemsForNotifications();	
	Если ТаблицаPayments.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);

	// Отправим сообщение для каждого process level email
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMails = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPayments, "EMails");	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		ТабPaymentsForEMail = ТаблицаPayments.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendPaymentsForTemporaryItemsNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, EMails, ТабPaymentsForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send payments for temporary items notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры
             
Функция ПолучитьТаблицуPaymentsForTemporaryItemsForNotifications() 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДатаПлюс15Дней", (ТекущаяДата() + 15*86400));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	AdditionalDataOfItemsInTemporaryImpExp.ProcessLevel.EMailsForTemporaryItemsNotification КАК EMails,
		|	ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Responsible.Представление КАК ResponsibleПредставление,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.КостЦентр.Segment.Код КАК SegmentCode,
		|	ExpiryDatesOfPaymentsOfTemporaryItems.ExpiryDateOfPayments КАК ExpiryDateOfPayments,
		|	ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних.ExpiryDate КАК ExpiryDate,
		|	CustomsFilesOfGoods.DTNo КАК CustomsFileNo,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.КодПоИнвойсу КАК PartNo,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.НаименованиеТовара КАК ItemDescription,
		|	QtyOfItemsInTemporaryImpExpОстатки.QtyОстаток КАК Qty,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.Сумма КАК TotalPrice,
		|	QtyOfItemsInTemporaryImpExpОстатки.Item.Currency КАК Currency
		|ИЗ
		|	РегистрНакопления.QtyOfItemsInTemporaryImpExp.Остатки КАК QtyOfItemsInTemporaryImpExpОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.AdditionalDataOfItemsInTemporaryImpExp КАК AdditionalDataOfItemsInTemporaryImpExp
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = AdditionalDataOfItemsInTemporaryImpExp.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = CustomsFilesOfGoods.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ExpiryDatesOfItemsInTemporaryImpExp.СрезПоследних КАК ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = ExpiryDatesOfItemsInTemporaryImpExpСрезПоследних.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ResponsiblesForItemsInTemporaryImpExp.СрезПоследних КАК ResponsiblesForItemsInTemporaryImpExpСрезПоследних
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Item
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ExpiryDatesOfPaymentsOfTemporaryItems КАК ExpiryDatesOfPaymentsOfTemporaryItems
		|		ПО QtyOfItemsInTemporaryImpExpОстатки.Item = ExpiryDatesOfPaymentsOfTemporaryItems.Item
		|ГДЕ
		|	ExpiryDatesOfPaymentsOfTemporaryItems.ExpiryDateOfPayments < &ТекДатаПлюс15Дней
		|
		|УПОРЯДОЧИТЬ ПО
		|	ExpiryDateOfPayments,
		|	ExpiryDate,
		|	ResponsiblesForItemsInTemporaryImpExpСрезПоследних.Responsible.Представление,
		|	CustomsFileNo";
	
	Возврат Запрос.Выполнить().Выгрузить();
		 		
КонецФункции

Процедура FormAndSendPaymentsForTemporaryItemsNotification(ИнтернетПочта, АдресОтправителя, EMails, ТабTempItemsForEMail) 
	
	Тема = "Payments for items under Temporary Regime expiring within 15 days";
			
	ТекстHTML = "<HTML>
		|<BODY>
		|<P>" + Тема + ":</P>
		|<TABLE BORDER>
		|	<TR>
		|		<TH>Expiry date of payments</TH>
		|		<TH>Responsible</TH>
		|		<TH>Segment</TH>
		|		<TH>Customs file no.</TH>
		|		<TH>Part no.</TH>
		|		<TH>Item description</TH>
		|		<TH>Qty</TH>
		|		<TH>Total price</TH>
		|		<TH>Currency</TH>
		|		<TH>Expiry date</TH>
		|	</TR>";
		
	Для Каждого Стр Из ТабTempItemsForEMail Цикл
		
		ТекстHTML = ТекстHTML + "
			|	<TR>
			|		<TD>" + Формат(Стр.ExpiryDateOfPayments, "ДФ=dd.MM.yyyy") + "</TD>
			|		<TD>" + СокрЛП(Стр.ResponsibleПредставление) + "</TD>
			|		<TD>" + СокрЛП(Стр.SegmentCode) + "</TD>
			|		<TD>" + СокрЛП(Стр.CustomsFileNo) + " </TD>
			|		<TD>" + СокрЛП(Стр.PartNo) + "</TD>
			|		<TD>" + СокрЛП(Стр.ItemDescription) + "</TD>
			|		<TD>" + Стр.Qty + "</TD>
			|		<TD>" + Стр.TotalPrice + "</TD>
			|		<TD>" + Стр.Currency + "</TD>
			|		<TD>" + Формат(Стр.ExpiryDate, "ДФ=dd.MM.yyyy") + "</TD>
			|	</TR>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "
		|</TABLE>
		|<P>This notification is sent once a week every Monday.</P>
		|</BODY>
		|</HTML>";
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, EMails, Тема, ТекстHTML, ТипТекстаПочтовогоСообщения.HTML, , "riet-support@slb.com");
		      						 		
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Pending EUC notifications

Процедура SendPendingEUCNotifications() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	
	// Получим данные items pending EUC
	ТаблицаEUCItems = ПолучитьТаблицуItemsPendingEUC();	
	
	ВыборкаPendingEUC = РегистрыСведений.PendingEUCNotifications.Выбрать();
	СтруктураОтбораПоEMails = Новый Структура("EMails");

	Пока ВыборкаPendingEUC.Следующий() Цикл
		
		СтруктураОтбораПоEmails.Emails = ВыборкаPendingEUC.EmailsList;
		
		ТабItemsPendingEUCForEMail = ТаблицаEUCItems.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendPendingEUCNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, 
				ВыборкаPendingEUC.EmailsList, ТабItemsPendingEUCForEMail, ВыборкаPendingEUC.Segment);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send items and po lines pending EUC notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				ВыборкаPendingEUC.EmailsList,
				ОписаниеОшибки());
		КонецПопытки;
		
		МассивСтрок = ТаблицаEUCItems.НайтиСтроки(СтруктураОтбораПоEmails);
		Для Каждого СтрокаТаблицаEUCItems из МассивСтрок Цикл  
			ТаблицаEUCItems.Удалить(СтрокаТаблицаEUCItems);
		КонецЦикла;
		 
	КонецЦикла;
	
	Если ТаблицаEUCItems.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
			 
	// Отправим сообщение для оставшихся e-mail
	СтруктураОтбораПоEMails = Новый Структура("EMails");	
	МассивEMails = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаEUCItems, "EMails");	
	Для Каждого EMails из МассивEMails Цикл 
		
		СтруктураОтбораПоEmails.Emails = EMails;
		
		ТабItemsPendingEUCForEMail = ТаблицаEUCItems.Скопировать(СтруктураОтбораПоEMails);
		
		Попытка
			FormAndSendPendingEUCNotification(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, 
				EMails, ТабItemsPendingEUCForEMail);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send items and po lines pending EUC notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				EMails,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьТаблицуItemsPendingEUC()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК PONo,
	               |	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	               |	СтрокиИнвойса.Наименование КАК InvoiceLine,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Номер КАК DOCNo,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.POD,
	               |	НЕ СтрокиИнвойса.EUCNotRequired КАК EUCRequired,
	               |	СтрокиИнвойса.EUCRequested,
	               |	СтрокиИнвойса.EUCReceived,
	               |	СтрокиИнвойса.КостЦентр.Segment КАК Segment,
	               |	СтрокиИнвойса.СтранаПроисхождения КАК COO,
	               |	СтрокиИнвойса.НаименованиеТовара КАК ItemDescription,
	               |	СтрокиИнвойса.КодПоИнвойсу КАК PartNo,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.ProcessLevel.EMailsForTemporaryItemsNotification КАК ProcessLevelEMails,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.ProcessLevel
	               |ПОМЕСТИТЬ ВТ_данные
	               |ИЗ
	               |	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
	               |			И (НЕ СтрокиИнвойса.ПометкаУдаления)
	               |			И (НЕ СтрокиИнвойса.EUCNotRequired)
	               |			И (СтрокиИнвойса.EUCReceived = ДАТАВРЕМЯ(1, 1, 1))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUCCheck КАК EUCCheck
	               |		ПО (СтрокиИнвойса.Инвойс.ProcessLevel = EUCCheck.ProcessLevel)
	               |ГДЕ
	               |	НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен
	               |	И НЕ EUCCheck.ProcessLevel ЕСТЬ NULL 
	               |	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.PendingEUC
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_данные.DOCNo,
	               |	ВТ_данные.POD,
	               |	ВТ_данные.Segment,
	               |	ВТ_данные.PONo,
	               |	ВТ_данные.POLineNo,
	               |	ВТ_данные.COO,
	               |	ВТ_данные.ItemDescription,
	               |	ВТ_данные.PartNo,
	               |	ВТ_данные.InvoiceLine,
	               |	ВТ_данные.EUCRequired,
	               |	ВТ_данные.EUCRequested,
	               |	ВТ_данные.EUCReceived,
	               |	ВЫБОР
	               |		КОГДА ВТ_данные.ProcessLevel = ЗНАЧЕНИЕ(Справочник.ProcessLevels.RUWE)
	               |			ТОГДА ЕСТЬNULL(PendingEUCNotifications.EmailsList, ВТ_данные.ProcessLevelEMails)
	               |		ИНАЧЕ ВТ_данные.ProcessLevelEMails
	               |	КОНЕЦ КАК EMails
	               |ИЗ
	               |	ВТ_данные КАК ВТ_данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.PendingEUCNotifications КАК PendingEUCNotifications
	               |		ПО ВТ_данные.Segment = PendingEUCNotifications.Segment
	               |			И ВТ_данные.ProcessLevel = PendingEUCNotifications.ProcessLevel";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуPOLinesPendingEUC(Segment)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Segment", Segment);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиЗаявкиНаЗакупку.Владелец КАК PO,
	               |	СтрокиЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку КАК POCreationDate,
	               |	СтрокиЗаявкиНаЗакупку.КодПоставщика КАК SupplierPartNo,
	               |	СтрокиЗаявкиНаЗакупку.HTC,
	               |	СтрокиЗаявкиНаЗакупку.DONumber КАК DONumber,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.Поставщик КАК Supplier,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.СтранаПоставщика КАК SupplierCountry,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.Грузополучатель КАК ShiptoLabel,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.ShipTo КАК ShipTo,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.ShiptoCode КАК ShiptoCode,
	               |	СтрокиЗаявкиНаЗакупку.CountryOfOrigin,
	               |	СтрокиЗаявкиНаЗакупку.UrgentFlag,
	               |	СтрокиЗаявкиНаЗакупку.Status,
	               |	СтрокиЗаявкиНаЗакупку.Hub1,
	               |	СтрокиЗаявкиНаЗакупку.CurrentRDD,
	               |	СтрокиЗаявкиНаЗакупку.SupplierRequiredDate,
	               |	СтрокиЗаявкиНаЗакупку.SupplierPromisedDate,
	               |	СтрокиЗаявкиНаЗакупку.GOLDReceiptDate КАК GOLDReceiptDate,
	               |	ВЫБОР
	               |		КОГДА НЕ СтрокиЗаявкиНаЗакупку.Владелец.EUCNotRequired
	               |			ТОГДА ""YES""
	               |		ИНАЧЕ ""No""
	               |	КОНЕЦ КАК EUCRequired,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.EUCRequested КАК EUCRequested,
	               |	СтрокиЗаявкиНаЗакупку.Владелец.EUCReceived КАК EUCReceived
	               |ИЗ
	               |	Справочник.СтрокиЗаявкиНаЗакупку КАК СтрокиЗаявкиНаЗакупку
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ПО (СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = СтрокиЗаявкиНаЗакупку.Ссылка)
	               |			И (НЕ СтрокиИнвойса.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.POSuppliersNotRequiringEUC КАК POSuppliersNotRequiringEUC
	               |		ПО СтрокиЗаявкиНаЗакупку.Владелец.Поставщик = POSuppliersNotRequiringEUC.POSupplierName
	               |			И СтрокиЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку >= POSuppliersNotRequiringEUC.PODateFrom
	               |ГДЕ
	               |	НЕ СтрокиЗаявкиНаЗакупку.ПометкаУдаления
	               |	И СтрокиИнвойса.Ссылка ЕСТЬ NULL 
	               |	И POSuppliersNotRequiringEUC.POSupplierName ЕСТЬ NULL 
	               |	И НЕ СтрокиЗаявкиНаЗакупку.Владелец.EUCNotRequired
	               |	И СтрокиЗаявкиНаЗакупку.Владелец.EUCReceived = ДАТАВРЕМЯ(1, 1, 1)
	               |	И СтрокиЗаявкиНаЗакупку.КостЦентр.Segment = &Segment
	               |	И СтрокиЗаявкиНаЗакупку.Владелец.ShiptoCode ПОДОБНО ""RU"" + ""%""";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура FormAndSendPendingEUCNotification(ИнтернетПочта, АдресОтправителя, EMails, ТабItemsPendingEUCForEMail,
														Segment = Неопределено)
	
	Вложения = Новый Массив();
	МассивФайлов = Новый Массив();
	
	// Items
	Если ТабItemsPendingEUCForEMail.Количество() > 0 Тогда 
		
		ИмяCSVФайлаItems = СформироватьCSVFileДляТаблицы(ТабItemsPendingEUCForEMail, "ItemsPendingEUC");
		
		МассивФайлов.Добавить(ИмяCSVФайлаItems);
	
	КонецЕсли; 
	
	// PO Lines
	
	Если Segment <> Неопределено Тогда 
		
		// Получим данные po lines pending EUC
		ТабPOLinesPendingEUCForEMail = ПолучитьТаблицуPOLinesPendingEUC(Segment);
		
		Если ТабPOLinesPendingEUCForEMail.Количество() > 0 Тогда 
			
			ИмяCSVФайлаPOLines = СформироватьCSVFileДляТаблицы(ТабPOLinesPendingEUCForEMail, "POLinesWithoutInvoicesAndDOCs");
			
			МассивФайлов.Добавить(ИмяCSVФайлаPOLines);
			
		КонецЕсли; 	
		
	КонецЕсли;

	Если МассивФайлов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Вложения.Добавить(СформироватьЗипАрхивФайлов(
		?(Не ЗначениеЗаполнено(ИмяCSVФайлаItems), ИмяCSVФайлаPOLines, ИмяCSVФайлаItems), МассивФайлов));
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя,
		EMails,
		"Items and PO lines pending EUC" + ?(Segment=Неопределено, "", " (" + СокрЛП(Segment) + ")"), 
		"Please find attached file(s) with list of items included in DOCs pending EUC and list of PO lines without Invoices/DOCs pending EUC.
		|This notification is sent twice a week every Monday and Wednesday.",
		, Вложения, "riet-support@slb.com");
		
	Попытка
		УдалитьФайлы(ИмяCSVФайлаItems);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяCSVФайлаPOLines);
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Функция СформироватьCSVFileДляТаблицы(ТаблицаДляCSVФайла, ИмяФайлаБезРасширения)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".csv");
	                             		
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	
	МассивИменИЗаголовковКолонок = Новый Массив;
	КоллекцияКолонок = ТаблицаДляCSVФайла.Колонки;
	Для Каждого Колонка из КоллекцияКолонок Цикл
		
		Если Колонка.Имя = "EMails" Тогда 
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура("Имя, Заголовок", Колонка.Имя, Колонка.Заголовок); 
		МассивИменИЗаголовковКолонок.Добавить(Структура);
		
	КонецЦикла;	
	
	// Сформируем Заголовок
	ЗаголовокТаблицы = "";
	Для Каждого ИмяИЗаголовок из МассивИменИЗаголовковКолонок Цикл
		ЗаголовокТаблицы = ЗаголовокТаблицы + """" + ИмяИЗаголовок.Заголовок + """,";
	КонецЦикла;
	ЗаголовокТаблицы = Лев(ЗаголовокТаблицы, СтрДлина(ЗаголовокТаблицы)-1);	
    ЗаписьТекста.ЗаписатьСтроку(ЗаголовокТаблицы);
	
	// Сформируем строки файла
	Для Каждого Стр из ТаблицаДляCSVФайла Цикл 
		
		НоваяСтрокаФайла = "";
		Для Каждого ИмяИЗаголовок из МассивИменИЗаголовковКолонок Цикл
			
			Значение = Стр[ИмяИЗаголовок.Имя];
			НоваяСтрокаФайла = НоваяСтрокаФайла + """" + СокрЛП(ПолучитьЗначениеТекстом(Значение)) + """,";
			
		КонецЦикла;	
		НоваяСтрокаФайла = Лев(НоваяСтрокаФайла, СтрДлина(НоваяСтрокаФайла)-1);
		ЗаписьТекста.ЗаписатьСтроку(НоваяСтрокаФайла);
				
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	ИмяCSVФайла = ВременныйФайл.Путь + ИмяФайлаБезРасширения + ".csv";
	
	ДвоичныеДанные.Записать(ИмяCSVФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат ИмяCSVФайла;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Send "All Segments Granted and Received GL"

Процедура SendAllSegmentsGrantedAndReceivedGL() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ImportExportСервер.ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	         	
	Попытка
		FormAndSendSendAllSegmentsGrantedAndReceivedGL(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, 
			"RCA-Planning-Gr@slb.com");
	Исключение
		ЗаписьЖурналаРегистрации(
			"Failed to send ""All Segments Granted and Received GL""",
			УровеньЖурналаРегистрации.Ошибка, 
			,
			"RCA-Planning-Gr@slb.com",
			ОписаниеОшибки());
	КонецПопытки;
		       		         	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура FormAndSendSendAllSegmentsGrantedAndReceivedGL(ИнтернетПочта, АдресОтправителя, EMails)
	
	Вложения = Новый Массив();
	МассивФайлов = Новый Массив();
	
	ТабДок = Новый ТабличныйДокумент;
		
	ОтчетОбъект = Отчеты.LEG4_5GLTrackingPerItem.Создать();

	НастройкиПользователя = ОтчетОбъект.КомпоновщикНастроек;
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = НастройкиПользователя.Настройки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ВариантыНастроек = СхемаКомпоновкиДанных.ВариантыНастроек; 
	Для Каждого ВариантНастроек ИЗ ВариантыНастроек Цикл
		Если ВариантНастроек.Имя = "All Segments Granted and Received GL" Тогда 
			ВариантНастроекAllSegmentsGrantedAndReceivedGL = ВариантНастроек.Настройки;
			КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастроекAllSegmentsGrantedAndReceivedGL);
			Прервать;
		КонецЕсли;
	КонецЦикла;
			
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ВариантНастроекAllSegmentsGrantedAndReceivedGL, , ,
		Тип("ГенераторМакетаКомпоновкиДанных"),);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ТабДок = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
	
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	
	ИмяФайла = ВременныйФайл.Путь + "AllSegmentsGrantedAndReceivedGL_" + Формат(ТекущаяДата(), "ДФ=""ггггММдд""") + ".xlsx";
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;

	МассивФайлов.Добавить(ИмяФайла);
	Вложения.Добавить(ImportExportСервер.СформироватьЗипАрхивФайлов(ИмяФайла, МассивФайлов));
	
	ПослатьПисьмо(ИнтернетПочта, АдресОтправителя,
		EMails,
		"All Segments Granted and Received GL", 
		"Please find attached file with report ""All Segments Granted and Received GL"".
			|This notification is sent every monday.",
		, Вложения, "riet-support@slb.com");
		
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	          			
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// E-MAIL

// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
//Процедура ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, АдресаПолучателей, Тема, Тело, ТипТела=Неопределено, Вложения=Неопределено)  Экспорт
Процедура ПослатьПисьмо(ИнтернетПочта, АдресОтправителя, АдресаПолучателей, Тема, Тело, ТипТела=Неопределено, Вложения=Неопределено, ОбратныйАдрес = "")  Экспорт
// } RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	
	// Отправляет почтовое сообщение через указанную интернет почту с адресо ответа riet-support@slb.com
	
	Если ТипТела = Неопределено Тогда
		ТипТела = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Письмо.Отправитель.Адрес = АдресОтправителя;
	
	// { RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	//Письмо.ОбратныйАдрес.Добавить("riet-support@slb.com");
	Если Не ПустаяСтрока(ОбратныйАдрес) Тогда
		Письмо.ОбратныйАдрес.Добавить(ОбратныйАдрес);
	КонецЕсли;
	// } RGS VChaplygin 15.04.2016 8:42:22 - Добавим аварийный почтовый аккаунт
	
	МассивАдресовПолучателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(АдресаПолучателей, " ,;");
	Для Каждого АдресПолучателя Из МассивАдресовПолучателей Цикл
		Письмо.Получатели.Добавить(АдресПолучателя);
	КонецЦикла;
	
	Письмо.Тема = Тема;
		
	Письмо.Тексты.Добавить(Тело, ТипТела);
	
	Если Вложения <> Неопределено Тогда 
		
		Если ТипЗнч(Вложения) = Тип("Массив") Тогда
			
			Для Каждого Вложение из Вложения Цикл 
				Письмо.Вложения.Добавить(Вложение);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Вложения) = Тип("ИнтернетПочтовыеВложения") Тогда
			
			Для Каждого Вложение из Вложения Цикл 
				Письмо.Вложения.Добавить(Вложение.Данные, Вложение.Имя);
			КонецЦикла;
			
		КонецЕсли;
		
				
	КонецЕсли;
	
	ИнтернетПочта.Послать(Письмо);
	
КонецПроцедуры

Функция ПодключитьсяКИнтернетПочте(ИнтернетПочтовыйПрофиль) Экспорт 
	           		
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	
	Возврат ИнтернетПочта;
	
КонецФункции

// { RGS VChaplygin 28.03.2016 23:38:15 - Добавим отправку от системной учетной записи
//Функция ПолучитьИнтернетПочтовыйПрофиль() Экспорт
Функция ПолучитьИнтернетПочтовыйПрофиль(ИспользоватьСистемнуюУчетнуюЗапись = Ложь) Экспорт

	// Возвращает ИнтернетПочтовыйПрофиль, настроенный в соответствии с константами
	
	Запрос = Новый Запрос;
	
	Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	RIETIMAPServerAddress.Значение КАК IMAPServerAddress,
			|	RIETSMTPServerAddress.Значение КАК SMTPServerAddress,
			|	RIETEmailUser.Значение КАК User,
			|	RIETEmailPassword.Значение КАК Password
			|ИЗ
			|	Константа.RIETIMAPServerAddress КАК RIETIMAPServerAddress,
			|	Константа.RIETSMTPServerAddress КАК RIETSMTPServerAddress,
			|	Константа.RIETEmailUser КАК RIETEmailUser,
			|	Константа.RIETEmailPassword КАК RIETEmailPassword";
		
	иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	RIETIMAPServerAddress.Значение КАК IMAPServerAddress,
			|	RIETSMTPServerAddress.Значение КАК SMTPServerAddress,
			|	RIET_TEST_EmailUser.Значение КАК User,
			|	RIET_TEST_EmailPassword.Значение КАК Password
			|ИЗ
			|	Константа.RIETIMAPServerAddress КАК RIETIMAPServerAddress,
			|	Константа.RIETSMTPServerAddress КАК RIETSMTPServerAddress,
			|	Константа.RIET_TEST_EmailUser КАК RIET_TEST_EmailUser,
			|	Константа.RIET_TEST_EmailPassword КАК RIET_TEST_EmailPassword";
		  		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИнтернетПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	
	ИнтернетПочтовыйПрофиль.АдресСервераIMAP = Выборка.IMAPServerAddress;
	ИнтернетПочтовыйПрофиль.ИспользоватьSSLIMAP = Истина;
	ИнтернетПочтовыйПрофиль.ПользовательIMAP = Выборка.User;
	ИнтернетПочтовыйПрофиль.ПарольIMAP = Выборка.Password;
	
	// { RGS VChaplygin 28.03.2016 23:38:15 - Добавим отправку от системной учетной записи
	Если ИспользоватьСистемнуюУчетнуюЗапись Тогда
		УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		ИнтернетПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИнтернетПочтовыйПрофиль.АдресСервераSMTP = Профиль.АдресСервераSMTP;
		ИнтернетПочтовыйПрофиль.ПользовательSMTP = Профиль.ПользовательSMTP;
		ИнтернетПочтовыйПрофиль.ПарольSMTP = Профиль.ПарольSMTP;
	Иначе
		ИнтернетПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИнтернетПочтовыйПрофиль.АдресСервераSMTP = Выборка.SMTPServerAddress;
		ИнтернетПочтовыйПрофиль.ПользовательSMTP = Выборка.User;
		ИнтернетПочтовыйПрофиль.ПарольSMTP = Выборка.Password;
	КонецЕсли;	
	// } RGS VChaplygin 28.03.2016 23:38:33 - Добавим отправку от системной учетной записи
	
	Возврат ИнтернетПочтовыйПрофиль;
	
КонецФункции

Функция ПолучитьИнтернетПочтовыйПрофильRCATLM() Экспорт

	// Возвращает ИнтернетПочтовыйПрофиль, настроенный в соответствии с константами
	
	Запрос = Новый Запрос;
	
	Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	RIETIMAPServerAddress.Значение КАК IMAPServerAddress,
			|	RIETSMTPServerAddress.Значение КАК SMTPServerAddress,
			|	RCATLMEmailUser.Значение КАК User,
			|	RCATLMPassword.Значение КАК Password
			|ИЗ
			|	Константа.RIETIMAPServerAddress КАК RIETIMAPServerAddress,
			|	Константа.RIETSMTPServerAddress КАК RIETSMTPServerAddress,
			|	Константа.RCATLMEmailUser КАК RCATLMEmailUser,
			|	Константа.RCATLMPassword КАК RCATLMPassword";
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	RIETIMAPServerAddress.Значение КАК IMAPServerAddress,
			|	RIETSMTPServerAddress.Значение КАК SMTPServerAddress,
			|	"""" КАК User,
			|	"""" КАК Password
			|ИЗ
			|	Константа.RIETIMAPServerAddress КАК RIETIMAPServerAddress,
			|	Константа.RIETSMTPServerAddress КАК RIETSMTPServerAddress,
			|	Константа.RCATLMEmailUser КАК RIET_TEST_EmailUser,
			|	Константа.RCATLMPassword КАК RIET_TEST_EmailPassword";
		  		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИнтернетПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	
	ИнтернетПочтовыйПрофиль.АдресСервераIMAP = Выборка.IMAPServerAddress;
	ИнтернетПочтовыйПрофиль.ИспользоватьSSLIMAP = Истина;
	ИнтернетПочтовыйПрофиль.ПользовательIMAP = Выборка.User;
	ИнтернетПочтовыйПрофиль.ПарольIMAP = Выборка.Password;
	
	ИнтернетПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	ИнтернетПочтовыйПрофиль.АдресСервераSMTP = Выборка.SMTPServerAddress;
	ИнтернетПочтовыйПрофиль.ПользовательSMTP = Выборка.User;
	ИнтернетПочтовыйПрофиль.ПарольSMTP = Выборка.Password;
	
	Возврат ИнтернетПочтовыйПрофиль;
	
КонецФункции

Функция ПолучитьИнтернетПочтовыйПрофильДляОтправки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	RIETSMTPServerAddress.Значение КАК SMTPServerAddress,
		|	RIETEmailUser.Значение КАК User,
		|	RIETEmailPassword.Значение КАК Password
		|ИЗ
		|	Константа.RIETSMTPServerAddress КАК RIETSMTPServerAddress,
		|	Константа.RIETEmailUser КАК RIETEmailUser,
		|	Константа.RIETEmailPassword КАК RIETEmailPassword";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИнтернетПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	                  		
	ИнтернетПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	ИнтернетПочтовыйПрофиль.АдресСервераSMTP = Выборка.SMTPServerAddress;
	ИнтернетПочтовыйПрофиль.ПользовательSMTP = Выборка.User;
	ИнтернетПочтовыйПрофиль.ПарольSMTP = Выборка.Password;
	
	Возврат ИнтернетПочтовыйПрофиль;
	
КонецФункции
      
Функция ПолучитьUnprocessedEmails(ИнтернетПочта, Аккаунт) Экспорт
          	
	UIDsOfProcessedEmails = РегистрыСведений.UIDsOfProcessedEmails.ПолучитьМассивUIDs(Аккаунт);
	
	ИдентификаторыПисем = ИнтернетПочта.ПолучитьИдентификаторы(UIDsOfProcessedEmails);
	
	Если ИдентификаторыПисем.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// { RGS EParshina 27.09.2018 18:47:10 - S-I-0006076
	Пока ИдентификаторыПисем.Количество() >= 2000 Цикл
		ИдентификаторыПисем.Удалить(ИдентификаторыПисем.Количество()-1);
	КонецЦикла;	
	// } RGS EParshina 27.09.2018 18:47:10 - S-I-0006076
	
	Возврат ИнтернетПочта.Выбрать(Ложь, ИдентификаторыПисем);
	
КонецФункции

Функция ПолучитьПростойТекстПисьма(Письмо) Экспорт
	
	// Возвращает тело письма в виде простого текста
	// Если в письме нет тела виде простого текста - возращает неопределено
	
	Для Каждого Текст Из Письмо.Тексты Цикл
		
		Если Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Возврат Текст.Текст;
		КонецЕсли;
		
	КонецЦикла;
	
	HTMLТекст = Неопределено;
	Для Каждого Текст Из Письмо.Тексты Цикл
		
		Если Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			HTMLТекст = Текст.Текст;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если HTMLТекст = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(HTMLТекст, Новый Структура);
	Возврат ФорматированныйДокумент.ПолучитьТекст();
	
КонецФункции

Процедура УдалитьСтарыеEmailsИUIDsOfProcessedEmails() Экспорт
	
	// процедура одноименного регламентного задания
	// очищает почтовый ящик от писем с датой отправления менее двух месяцев назад
	// а также от записей в регистре сведений UIDsOfProcessedEmails с соответствующими UID
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтернетПочтовыйПрофиль = ImportExportСерверПовтИспСеанс.ПолучитьИнтернетПочтовыйПрофиль();
	ИнтернетПочта = ImportExportСервер.ПодключитьсяКИнтернетПочте(ИнтернетПочтовыйПрофиль);
	
	ИдентификаторыПисем = ИнтернетПочта.ПолучитьИдентификаторы();
	
	//email-box only 400MB:( - удаляем все письма старше 14 дней
	ДатаУдаления = ТекущаяДата() - 1209600; 	
	
	Для Каждого ИдентификаторПисем из ИдентификаторыПисем Цикл 
						
		МассивИдентификатора = Новый Массив;
		МассивИдентификатора.Добавить(ИдентификаторПисем);
		
		МассивПисем = ИнтернетПочта.Выбрать(Ложь, МассивИдентификатора);
		
		Если МассивПисем.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ДатаОтправления = МассивПисем[0].ДатаОтправления;
		   		
		Если ДатаОтправления < ДатаУдаления Тогда 
			
			НачатьТранзакцию();                                                     
			
			ИнтернетПочта.УдалитьСообщения(МассивИдентификатора);
			
			НаборЗаписейРС = РегистрыСведений.UIDsOfProcessedEmails.СоздатьНаборЗаписей();
			НаборЗаписейРС.Отбор.Account.Установить(ИнтернетПочтовыйПрофиль.ПользовательIMAP);
			НаборЗаписейРС.Отбор.UID.Установить(ИдентификаторПисем);
			НаборЗаписейРС.Записать();
			
			ЗафиксироватьТранзакцию();

		КонецЕсли;
		     				
	КонецЦикла; 
	
	ИнтернетПочта.ОчиститьУдаленныеСообщения();
	
КонецПроцедуры

Функция ПолучитьЗначениеТекстом(Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДЛФ=D");
	КонецЕсли;
		
	Возврат Строка(Значение);
	
КонецФункции

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов) Экспорт
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ЗаписьЖурналаРегистрации(
				"Failed to write zip-file for items and po lines pending EUC notification",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				"Zip-file name: " + ФайлЗипАрхива,
				ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Send report on teamspace

Процедура SendImportReportOnTeamspace() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;

	Сервер = "http://teamspace.slb.com";    //sites/Mobilisation/Testing
	Директория = СокрЛП(Константы.TeamspaceDirectoryForImportReport.Получить());
	
	username = "dir\" + СокрЛП(СтрЗаменить(Константы.RIETEmailUser.Получить(), "@slb.com", ""));
	password = СокрЛП(Константы.RIETEmailPassword.Получить());
		
	ТЗ = ПолучитьТаблицуЗначенийДляImportReportOnTeamspace();
	
	ТабДок = Новый ТабличныйДокумент;
	Построитель = Новый ПостроительОтчета();
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.Вывести(ТабДок);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
    ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	ИмяФайла = ВременныйФайл.Путь + "Cleared items.xlsx";
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);

	вуФайл = Новый Файл(ИмяФайла);
	Если Не вуФайл.Существует() Тогда
		РГСофт.СообщитьИЗалоггировать("SendImportReportOnTeamspace", 
			УровеньЖурналаРегистрации.Ошибка, 
			, , "Не удалось записать временный файл");
		Возврат;
	КонецЕсли;
		 		
	вуДД = Новый ДвоичныеДанные(ИмяФайла);
	вуСтрим = Base64Строка(вуДД);
	XMLHTTP = Новый COMОбъект("Msxml2.XMLHTTP");
	 		
	вуДД = Новый ДвоичныеДанные(ИмяФайла);
	вуСтрим = Base64Строка(вуДД);
	XMLHTTP = Новый COMОбъект("Msxml2.XMLHTTP");
	XMLHTTP.Open("POST",Сервер + "/_vti_bin/copy.asmx",0, username, password);
	врТекст = "<?xml version='1.0' encoding='utf-8'?>
	|<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'>
	|  <soap:Body>
	|<CopyIntoItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>
	|	<SourceUrl>Компьютер пользователя</SourceUrl>
	|	<DestinationUrls>
	|		<string>" + Сервер + "/" + Директория + "/" + вуФайл.Имя + "</string>
	|	</DestinationUrls>
	|	<Fields>
	|	</Fields>
	|	<Stream>" + вуСтрим + "</Stream>
	|</CopyIntoItems>
	|  </soap:Body>
	|</soap:Envelope>";
	XMLHTTP.SetRequestHeader("Host", СтрЗаменить(СтрЗаменить(Сервер,"https://",""),"http://",""));
	XMLHTTP.SetRequestHeader("Content-Type", "text/xml;charset=utf-8");
	XMLHTTP.SetRequestHeader("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CopyIntoItems");
	XMLHTTP.setRequestHeader("Content-Length", СтрДлина(врТекст));
	
	Попытка
		XMLHTTP.Send(врТекст);
	Исключение
		РГСофт.СообщитьИЗалоггировать("SendImportReportOnTeamspace", 
			УровеньЖурналаРегистрации.Ошибка, 
			, , "Не удалось отправить запрос на teamspace");
		Возврат;
	КонецПопытки;
	
	врФайл = ПолучитьИмяВременногоФайла("xml");
	Текст = Новый ЗаписьТекста(врФайл, КодировкаТекста.UTF8);
	Текст.ЗаписатьСтроку(XMLHTTP.ResponseText());
	Текст.Закрыть();
	
	DOMDocument=Новый COMОбъект("MSXML2.DOMDocument");
	DOMDocument.async = Ложь;
	DOMDocument.validateOnParse = Ложь;
	DOMDocument.Load(врФайл);
	Рут = DOMDocument.documentElement;
	Если Рут = Неопределено Тогда
		РГСофт.СообщитьИЗалоггировать("SendImportReportOnTeamspace", 
			УровеньЖурналаРегистрации.Ошибка, 
			, , "Не удалось получиьт ответ от teamspace");
		Возврат;
	КонецЕсли;
	ЕстьОшибки = Истина;
	
	Для Каждого Стр из Рут.getElementsByTagName("CopyResult") Цикл
		Если Стр.getAttribute("ErrorCode") = "Success" Тогда
			ЕстьОшибки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяФайла);   
	Исключение
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		РГСофт.СообщитьИЗалоггировать("SendImportReportOnTeamspace", 
			УровеньЖурналаРегистрации.Ошибка, 
			, , "Не удалось скопировать файл на teamspace");
	Иначе
		РГСофт.СообщитьИЗалоггировать("SendImportReportOnTeamspace", 
			УровеньЖурналаРегистрации.Информация, 
			, , "Import report on teamspace расположен по адресу:" + Сервер + "/" + Директория + "/" + вуФайл.Имя);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуЗначенийДляImportReportOnTeamspace()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДата(), -12));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиИнвойса.Ссылка КАК InvoiceLine,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.MOT,
	               |	ВЫБОР
	               |		КОГДА СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = ЗНАЧЕНИЕ(Справочник.СтрокиЗаявкиНаЗакупку.ПустаяСсылка)
	               |			ТОГДА ""FMT""
	               |		ИНАЧЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец
	               |	КОНЕЦ КАК PONo,
	               |	ВЫБОР
	               |		КОГДА СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = ЗНАЧЕНИЕ(Справочник.СтрокиЗаявкиНаЗакупку.ПустаяСсылка)
	               |			ТОГДА ""None""
	               |		ИНАЧЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку
	               |	КОНЕЦ КАК POLineNumber,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Номер КАК DOC,
	               |	ВЫБОР
	               |		КОГДА СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = ЗНАЧЕНИЕ(Справочник.СтрокиЗаявкиНаЗакупку.ПустаяСсылка)
	               |			ТОГДА ""None""
	               |		ИНАЧЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Поставщик
	               |	КОНЕЦ КАК POSupplier,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.POD,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.RequestedPOA,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Requested КАК GLRequested,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Granted КАК GLGranted,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.ETA,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.ATA,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.InCustoms,
	               |	ПоставкаУпаковочныеЛисты.Ссылка.Cleared,
	               |	РАЗНОСТЬДАТ(ПоставкаУпаковочныеЛисты.Ссылка.InCustoms, ПоставкаУпаковочныеЛисты.Ссылка.Cleared, ДЕНЬ) КАК DaysAtCustoms
	               |ПОМЕСТИТЬ InvoiceLines
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	               |			ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
	               |		ПО СтрокиИнвойса.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
	               |ГДЕ
	               |	ПоставкаУпаковочныеЛисты.Ссылка.Cleared >= &НачалоПериода
	               |	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен
	               |	И НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен
	               |	И НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И ПоставкаУпаковочныеЛисты.Ссылка.ProcessLevel.Country.Код = ""RU""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.InvoiceLine КАК InvoiceLine,
	               |	СУММА(ВложенныйЗапрос.ИнвойсПеревозка) КАК ИнвойсПеревозка,
	               |	СУММА(ВложенныйЗапрос.ИнвойсСтраховка) КАК ИнвойсСтраховка,
	               |	СУММА(ВложенныйЗапрос.ПошлиныФискальные) КАК ПошлиныФискальные,
	               |	СУММА(ВложенныйЗапрос.СборыФискальные) КАК СборыФискальные,
	               |	СУММА(ВложенныйЗапрос.ServicesCostsRub) КАК ServicesCostsRub,
	               |	СУММА(ВложенныйЗапрос.ИнвойсХранение) КАК ИнвойсХранение
	               |ПОМЕСТИТЬ InvoiceLinesCostsОбороты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine,
	               |		InvoiceLinesCostsОбороты.СуммаОборот КАК ИнвойсПеревозка,
	               |		0 КАК ИнвойсХранение,
	               |		0 КАК ИнвойсСтраховка,
	               |		0 КАК ПошлиныФискальные,
	               |		0 КАК СборыФискальные,
	               |		0 КАК ServicesCostsRub
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |		0,
	               |		InvoiceLinesCostsОбороты.СуммаОборот,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |		0,
	               |		0,
	               |		InvoiceLinesCostsОбороты.СуммаОборот,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |		0,
	               |		0,
	               |		0,
	               |		InvoiceLinesCostsОбороты.СуммаФискальнаяОборот,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		InvoiceLinesCostsОбороты.СуммаФискальнаяОборот,
	               |		0
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
	               |	ИЗ
	               |		РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |				,
	               |				,
	               |				,
	               |				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ПрочиеУслуги)
	               |					И СтрокаИнвойса В
	               |						(ВЫБРАТЬ
	               |							InvoiceLines.InvoiceLine
	               |						ИЗ
	               |							InvoiceLines КАК InvoiceLines)) КАК InvoiceLinesCostsОбороты) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.InvoiceLine
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InvoiceLines.InvoiceLine КАК InvoiceLine,
	               |	InvoiceLines.MOT,
	               |	InvoiceLines.PONo,
	               |	InvoiceLines.POLineNumber,
	               |	InvoiceLines.DOC,
	               |	InvoiceLines.POSupplier,
	               |	InvoiceLines.POD,
	               |	InvoiceLines.RequestedPOA,
	               |	InvoiceLines.GLRequested,
	               |	InvoiceLines.GLGranted,
	               |	InvoiceLines.ETA,
	               |	InvoiceLines.ATA,
	               |	InvoiceLines.InCustoms,
	               |	InvoiceLines.Cleared,
	               |	InvoiceLines.DaysAtCustoms,
	               |	ЕСТЬNULL(InvoiceLinesCostsОбороты.ИнвойсПеревозка, 0) КАК Freight,
	               |	ЕСТЬNULL(InvoiceLinesCostsОбороты.ИнвойсХранение, 0) КАК Handling,
	               |	ЕСТЬNULL(InvoiceLinesCostsОбороты.ИнвойсСтраховка, 0) КАК Insurance,
	               |	ЕСТЬNULL(InvoiceLinesCostsОбороты.ПошлиныФискальные + InvoiceLinesCostsОбороты.СборыФискальные, 0) КАК CCDCostsWithOutVATRub,
	               |	ЕСТЬNULL(InvoiceLinesCostsОбороты.ServicesCostsRub, 0) КАК ServicesCostsRub
	               |ИЗ
	               |	InvoiceLines КАК InvoiceLines
	               |		ЛЕВОЕ СОЕДИНЕНИЕ InvoiceLinesCostsОбороты КАК InvoiceLinesCostsОбороты
	               |		ПО InvoiceLines.InvoiceLine = InvoiceLinesCostsОбороты.InvoiceLine
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	InvoiceLine";
	                         	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// GR Report loading

Процедура PullGRReportsFromHub() Экспорт
	
	Обработки.GRReportLoading.UploadGRReportFromHub();
	
КонецПроцедуры

Процедура ЗагрузитьGRReportИзФайла(ПолноеИмяXLSФайла) Экспорт
	
	Обработки.GRReportLoading.ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// OFS Store transactions loading  (FMT_INs_NOT_Closed.csv)

Процедура PullOFSStoreTransactionsFromHub() Экспорт
	
	Обработки.OFSStoreTransactionsLoading.UploadOFSStoreTransactionsFromHub();
	
КонецПроцедуры

Процедура ЗагрузитьOFSStoreTransactions(ПолноеИмяCSVФайла) Экспорт
	
	Обработки.OFSStoreTransactionsLoading.ЗагрузитьДанныеИзФайла(ПолноеИмяCSVФайла);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
Процедура ImportExportЗаполнениеСтатистики() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	набор = РегистрыСведений.LegStatistics.СоздатьНаборЗаписей();
	набор.Записать(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ДобавитьМесяц(ТекущаяДата(), -24));
	Запрос.УстановитьПараметр("КонецПериода", 	ТекущаяДата());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ImportShipments.Ссылка КАК ImportShipment,
	               |	DOCs.Ссылка КАК DOC,
	               |	Items.Инвойс КАК Invoice,
	               |	Items.Ссылка КАК Item,
	               |	ImportShipments.MOT,
	               |	ImportShipments.POD,
	               |	ImportShipments.ActualPOA КАК POA,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку, ДАТАВРЕМЯ(1, 1, 1))
	               |			ТОГДА РАЗНОСТЬДАТ(Items.СтрокаЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку, Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L1BPOReadinessDays,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, ДАТАВРЕМЯ(1, 1, 1))
	               |			ТОГДА РАЗНОСТЬДАТ(Items.СтрокаЗаявкиНаЗакупку.SupplierPromisedDate, Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L2TransportationFromSupplierToHUBDays,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Дата > ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, ДАТАВРЕМЯ(1, 1, 1))
	               |			ТОГДА РАЗНОСТЬДАТ(Items.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate, DOCs.Дата, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L3GOLDConsolidationDays,
	               |	ВЫБОР
	               |		КОГДА DOCs.Received > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Дата, DOCs.Received, ДЕНЬ)
	               |		КОГДА DOCs.Granted > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Requested > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Requested, DOCs.Granted, ДЕНЬ)
	               |		КОГДА DOCs.Requested > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Requested < ImportShipments.ATD
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Requested, ImportShipments.ATD, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L4ReceiptGreenLightDays,
	               |	ВЫБОР
	               |		КОГДА DOCs.Granted > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Received > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Received, DOCs.Granted, ДЕНЬ)
	               |		КОГДА DOCs.Requested > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Requested < ImportShipments.ATD
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Requested, ImportShipments.ATD, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L4IssueGreenLightDays,
	               |	ВЫБОР
	               |		КОГДА DOCs.Granted > ДАТАВРЕМЯ(1, 1, 1)
	               |				И DOCs.Granted < ImportShipments.ATD
	               |			ТОГДА РАЗНОСТЬДАТ(DOCs.Granted, ImportShipments.ATD, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L5AConsolidationDays,
	               |	ВЫБОР
	               |		КОГДА ImportShipments.ATD > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА РАЗНОСТЬДАТ(ImportShipments.ATD, ImportShipments.ATA, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК L5BInTransitDays,
	               |	ImportShipments.Cleared КАК Cleared,
	               |	РАЗНОСТЬДАТ(ImportShipments.ATA, ImportShipments.Cleared, ДЕНЬ) КАК L6CustomsClearanceDays,
	               |	Items.КостЦентр.Geomarket КАК Geomarket
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Документ.Поставка КАК ImportShipments
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ImportShipmentsDOCs
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК DOCs
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
	               |					ПО DOCsInvoices.Инвойс = Items.Инвойс
	               |						И (НЕ Items.ПометкаУдаления)
	               |				ПО DOCs.Ссылка = DOCsInvoices.Ссылка
	               |			ПО ImportShipmentsDOCs.УпаковочныйЛист = DOCs.Ссылка
	               |		ПО ImportShipments.Ссылка = ImportShipmentsDOCs.Ссылка
	               |ГДЕ
	               |	ImportShipments.Completed МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ ImportShipments.Отменен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	ParcelsДетали.Ссылка.WarehouseTo,
	               |	ВТ.POD,
	               |	ВТ.MOT,
	               |	ВТ.DOC,
	               |	ВТ.L5AConsolidationDays,
	               |	ВТ.L5BInTransitDays,
	               |	ВТ.L6CustomsClearanceDays,
	               |	ВТ.Item,
	               |	ВТ.L4ReceiptGreenLightDays,
	               |	ВТ.L4IssueGreenLightDays,
	               |	ВТ.L1BPOReadinessDays,
	               |	ВТ.L2TransportationFromSupplierToHUBDays,
	               |	ВТ.L3GOLDConsolidationDays,
	               |	ВТ.ImportShipment,
	               |	ВТ.Invoice,
	               |	ВТ.POA,
	               |	ВТ.Cleared,
	               |	ParcelsДетали.GrossWeightKG,
	               |	МАКСИМУМ(TripFinalDestinations.ATA) КАК LocalDistributionATA
	               |ПОМЕСТИТЬ ВТ_Leg1_6
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	               |			ПО ParcelsДетали.Ссылка = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
	               |				И (КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка В
	               |					(ВЫБРАТЬ
	               |						ВТ.DOC
	               |					ИЗ
	               |						ВТ КАК ВТ))
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК TripFinalDestinations
	               |				ПО TripParcels.Ссылка = TripFinalDestinations.Ссылка
	               |					И TripParcels.Parcel.WarehouseTo = TripFinalDestinations.WarehouseTo
	               |			ПО (НЕ TripParcels.Ссылка.ПометкаУдаления)
	               |				И ParcelsДетали.Ссылка = TripParcels.Parcel
	               |		ПО ВТ.Item = ParcelsДетали.СтрокаИнвойса
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Item,
	               |	ВТ.MOT,
	               |	ВТ.POD,
	               |	ВТ.DOC,
	               |	ВТ.L5AConsolidationDays,
	               |	ВТ.L5BInTransitDays,
	               |	ВТ.L6CustomsClearanceDays,
	               |	ВТ.L4ReceiptGreenLightDays,
	               |	ВТ.L4IssueGreenLightDays,
	               |	ВТ.L1BPOReadinessDays,
	               |	ВТ.L2TransportationFromSupplierToHUBDays,
	               |	ВТ.L3GOLDConsolidationDays,
	               |	ParcelsДетали.Ссылка.WarehouseTo,
	               |	ВТ.ImportShipment,
	               |	ВТ.Invoice,
	               |	ВТ.POA,
	               |	ВТ.Cleared,
	               |	ParcelsДетали.GrossWeightKG,
	               |	ParcelsДетали.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Leg1_6.L1BPOReadinessDays КАК Leg1Days,
	               |	ВТ_Leg1_6.L2TransportationFromSupplierToHUBDays КАК Leg2Days,
	               |	ВТ_Leg1_6.L3GOLDConsolidationDays КАК Leg3Days,
	               |	ВТ_Leg1_6.L4ReceiptGreenLightDays + ВТ_Leg1_6.L4IssueGreenLightDays КАК Leg4Days,
	               |	ВТ_Leg1_6.L5AConsolidationDays КАК Leg5ADays,
	               |	ВТ_Leg1_6.L5BInTransitDays КАК Leg5BDays,
	               |	ВТ_Leg1_6.L6CustomsClearanceDays КАК Leg6Days,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Leg1_6.LocalDistributionATA, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
	               |				И ЕСТЬNULL(ВТ_Leg1_6.LocalDistributionATA, ДАТАВРЕМЯ(1, 1, 1)) > ВТ_Leg1_6.Cleared
	               |			ТОГДА РАЗНОСТЬДАТ(ВТ_Leg1_6.Cleared, ВТ_Leg1_6.LocalDistributionATA, ДЕНЬ)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Leg7Days,
	               |	ВТ_Leg1_6.Item КАК Item,
	               |	ЕСТЬNULL(ВТ_Leg1_6.Item.СтрокаЗаявкиНаЗакупку.Владелец.Поставщик, """") КАК Supplier,
	               |	ВТ_Leg1_6.POD,
	               |	ВТ_Leg1_6.MOT,
	               |	ВТ_Leg1_6.POA,
	               |	ВТ_Leg1_6.WarehouseTo,
	               |	ЕСТЬNULL(ВТ_Leg1_6.Item.СтрокаЗаявкиНаЗакупку.Hub1, """") КАК Hub,
	               |	ВТ_Leg1_6.Item.КодПоИнвойсу КАК PartNo,
	               |	ЕСТЬNULL(ВТ_Leg1_6.Item.СтрокаЗаявкиНаЗакупку.КостЦентр.Geomarket, ЗНАЧЕНИЕ(Справочник.GeoMarkets.ПустаяСсылка)) КАК Geomarket,
	               |	ВТ_Leg1_6.Item КАК ItemCount
	               |ПОМЕСТИТЬ Финальная
	               |ИЗ
	               |	ВТ_Leg1_6 КАК ВТ_Leg1_6
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Финальная.Leg1Days,
	               |	Финальная.Leg2Days,
	               |	Финальная.Leg3Days,
	               |	Финальная.Leg4Days,
	               |	Финальная.Leg5ADays,
	               |	Финальная.Leg5BDays,
	               |	Финальная.Leg6Days,
	               |	Финальная.Leg7Days,
	               |	Финальная.Supplier,
	               |	Финальная.POD,
	               |	Финальная.MOT,
	               |	Финальная.POA,
	               |	Финальная.WarehouseTo,
	               |	Финальная.Hub,
	               |	Финальная.PartNo,
	               |	Финальная.Geomarket,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Финальная.ItemCount) КАК ItemCount,
	               |	Финальная.Item
	               |ИЗ
	               |	Финальная КАК Финальная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Финальная.Leg1Days,
	               |	Финальная.Leg2Days,
	               |	Финальная.Leg3Days,
	               |	Финальная.Leg4Days,
	               |	Финальная.Leg5ADays,
	               |	Финальная.Leg5BDays,
	               |	Финальная.Leg6Days,
	               |	Финальная.Leg7Days,
	               |	Финальная.Supplier,
	               |	Финальная.POD,
	               |	Финальная.MOT,
	               |	Финальная.POA,
	               |	Финальная.WarehouseTo,
	               |	Финальная.Hub,
	               |	Финальная.PartNo,
	               |	Финальная.Geomarket,
	               |	Финальная.Item";
	                                  
	
	набор.Загрузить(Запрос.Выполнить().Выгрузить());
	набор.Записать(Истина);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// ОБМЕН С NFS (ЗАКОММЕНТИРОВАН ТАК КАК НЕ ИСПОЛЬЗУЕТСЯ)

//Функция ПолучитьAgentNEK(ОбъектДляОшибки, Отказ) Экспорт
//	
//	NEK = CustomsСерверПовтИсп.ПолучитьAgentПоКоду("NEK");	
//	Если НЕ ЗначениеЗаполнено(NEK) Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//			"Не удалось найти агента ""NEK"" по коду ""NEK""!",
//			ОбъектДляОшибки,,, Отказ);
//	КонецЕсли;
//	
//	Возврат NEK;
//	
//КонецФункции

//Процедура ДобавитьВПолучателиУзелNEK(Объект, Отказ) Экспорт

//	УзелNEK = ПолучитьУзелNEK(Объект, Отказ);
//	Если Не ЗначениеЗаполнено(УзелNEK) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Объект.ОбменДанными.Получатели.Добавить(УзелNEK);
//	
//КонецПроцедуры

//Функция ПолучитьУзелNEK(ОбъектДляОшибки, Отказ) Экспорт
//	
//	УзелNEK = CustomsСерверПовтИсп.ПолучитьУзелNEKNFSПоКоду("NEK");	
//	Если Не ЗначениеЗаполнено(УзелNEK) Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//			"Не удалось найти узел обмена ""NEK"" по коду ""NEK""!",
//			ОбъектДляОшибки,,, Отказ);
//	КонецЕсли;
//	
//	Возврат УзелNEK;
//	
//КонецФункции

//Процедура ЗарегистрироватьДляОбменаСсылку(Узел, Ссылка, ОбъектДляОшибки, Отказ) Экспорт
//	
//	Попытка
//		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
//	Исключение
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//			"Не удалось зарегистрировать """ + Ссылка + """ для обмена с """ + Узел + """: " + ОписаниеОшибки(),
//			ОбъектДляОшибки,,, Отказ);
//	КонецПопытки;
//	
//КонецПроцедуры

//// ДОДЕЛАТЬ
//Процедура ВыполнитьОбменСNEKNFS() Экспорт
//	
//	// ЗАГРУЖАТЬ ДАННЫЕ
//	
//	ВыгрузитьВNEKNFS();
//	
//КонецПроцедуры

//// ДОДЕЛАТЬ
//Процедура ВыгрузитьВNEKNFS()
//	
//	АгентNEK = CustomsСерверПовтИсп.ПолучитьAgentПоКоду("NEK");
//	Если НЕ ЗначениеЗаполнено(АгентNEK) Тогда
//		ВызватьИсключение "Не удалось получить агента по коду ""NEK"" при выгрузке в ""NEK NFS""!";
//	КонецЕсли;
//	
//	УзелNEK = CustomsСерверПовтИсп.ПолучитьУзелNEKNFSПоКоду("NEK");
//	Если НЕ ЗначениеЗаполнено(УзелNEK) Тогда
//		ВызватьИсключение "Не удалось получить узел по коду ""NEK"" при выгрузке в ""NEK NFS""!";
//	КонецЕсли;
//	
//	// ДЕЛАТЬ ВО ВРЕМЕННОМ КАТАЛОГЕ
//	ИмяФайла = "D:\Temp\SLI_TO_NEK.xml";
//	
//	ЗаписьXML = Новый ЗаписьXML;
//	ЗаписьXML.ОткрытьФайл(ИмяФайла);
//	ЗаписьXML.ЗаписатьОбъявлениеXML();
//	
//	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
//	
//	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
//	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелNEK);
//		
//	ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
//	
//	СтруктураДанных = ПолучитьСтруктуруДанныхДляОбменаСNEKNFS(УзелNEK);
//	
//	ВыгрузитьDOCsВNEKNFS(ЗаписьXML, СтруктураДанных.ВыборкаDOCsHeaders, СтруктураДанных.ТаблицаDOCsInvoices, СтруктураДанных.ТаблицаDOCsParcels, АгентNEK);
//	
//	ВыгрузитьInvoiceLinesВNEKNFS(ЗаписьXML, СтруктураДанных.ВыборкаInvoiceLines);
//	
//	ВыгрузитьParcelsВNEKNFS(ЗаписьXML, СтруктураДанных.ВыборкаParcels);
//	
//	ВыгрузитьShipmentsВNEKNFS(ЗаписьXML, СтруктураДанных.ВыборкаShipmentsHeaders, СтруктураДанных.ТаблицаShipmentsDOCs, АгентNEK);
//	
//	ЗаписьСообщения.ЗакончитьЗапись();
//	ЗаписьXML.Закрыть();
//	
//	// ПУБЛИКОВАТЬ ФАЙЛ ОБМЕНА
//	
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры

//Функция ПолучитьСтруктуруДанныхДляОбменаСNEKNFS(УзелNEK)
//	
//	СтруктураТекстов = Новый Структура;
//	СтруктураПараметров = Новый Структура;
//	
//	СтруктураПараметров.Вставить("УзелNEK", УзелNEK);
//	
//	СтруктураТекстов.Вставить("DOCsHeaders",
//		"ВЫБРАТЬ
//		|	DOCsИзменения.Ссылка КАК DOC,
//		|	DOCsИзменения.Ссылка.Номер КАК No,
//		|	DOCsИзменения.Ссылка.Дата КАК Date,
//		|	DOCsИзменения.Ссылка.ИмпортЭкспорт КАК ImportExport,
//		|	DOCsИзменения.Ссылка.ConsignTo.Владелец.Код КАК SoldToNo,
//		|	DOCsИзменения.Ссылка.Urgency КАК Urgency,
//		|	DOCsИзменения.Ссылка.FirstRequested КАК FirstRequested,
//		|	DOCsИзменения.Ссылка.Requested КАК Requested,
//		|	DOCsИзменения.Ссылка.CCAFirstResponse КАК CCAFirstResponse,
//		|	DOCsИзменения.Ссылка.Received КАК Received,
//		|	DOCsИзменения.Ссылка.MOT.Код КАК MOTNo,
//		|	DOCsИзменения.Ссылка.POD.Код КАК PODNo,
//		|	DOCsИзменения.Ссылка.RequestedPOA.Код КАК RequestedPOANo,
//		|	DOCsИзменения.Ссылка.CCA КАК CCA,
//		|	DOCsИзменения.Ссылка.Отменен КАК Cancelled
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Изменения КАК DOCsИзменения
//		|ГДЕ
//		|	DOCsИзменения.Узел = &УзелNEK
//		|	И (НЕ DOCsИзменения.НомерСообщения ЕСТЬ NULL )");
//		
//	СтруктураТекстов.Вставить("DOCsInvoices",
//		"ВЫБРАТЬ
//		|	DOCsИзменения.Ссылка КАК DOC,
//		|	DOCInvoices.Инвойс.Номер КАК InvoiceNo
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Изменения КАК DOCsИзменения
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
//		|		ПО DOCsИзменения.Ссылка = DOCInvoices.Ссылка
//		|ГДЕ
//		|	DOCsИзменения.Узел = &УзелNEK
//		|	И (НЕ DOCsИзменения.НомерСообщения ЕСТЬ NULL )");
//		
//	СтруктураТекстов.Вставить("DOCsParcels",
//		"ВЫБРАТЬ
//		|	DOCsИзменения.Ссылка КАК DOC,
//		|	DOCsParcels.Parcel.Код КАК ParcelNo
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Изменения КАК DOCsИзменения
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
//		|		ПО DOCsИзменения.Ссылка = DOCsParcels.Ссылка
//		|ГДЕ
//		|	DOCsИзменения.Узел = &УзелNEK
//		|	И (НЕ DOCsИзменения.НомерСообщения ЕСТЬ NULL )");
//		
//	СтруктураТекстов.Вставить("InvoiceLines",
//		"ВЫБРАТЬ
//		|	InvoiceLinesИзменения.Ссылка КАК InvoiceLine,
//		|	InvoiceLinesИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
//		|	InvoiceLinesИзменения.Ссылка.Инвойс.Номер КАК InvoiceNo,
//		|	InvoiceLinesИзменения.Ссылка.НомерСтрокиИнвойса КАК InvoiceLineNo,
//		|	InvoiceLinesИзменения.Ссылка.НомерЗаявкиНаЗакупку КАК PONo,
//		|	InvoiceLinesИзменения.Ссылка.НаименованиеТовара КАК GoodDescription
//		|ИЗ
//		|	Справочник.СтрокиИнвойса.Изменения КАК InvoiceLinesИзменения
//		|ГДЕ
//		|	InvoiceLinesИзменения.Узел = &УзелNEK
//		|	И (НЕ InvoiceLinesИзменения.НомерСообщения ЕСТЬ NULL )");
//		
//	СтруктураТекстов.Вставить("Parcels",
//		"ВЫБРАТЬ
//		|	ParcelsИзменения.Ссылка.Код КАК No,
//		|	ParcelsИзменения.Ссылка.LengthCM КАК LengthCM,
//		|	ParcelsИзменения.Ссылка.WidthCM КАК WidthCM,
//		|	ParcelsИзменения.Ссылка.HeightCM КАК HeightCM,
//		|	ParcelsИзменения.Ссылка.GrossWeightKG КАК GrossWeightKG
//		|ИЗ
//		|	Справочник.Parcels.Изменения КАК ParcelsИзменения
//		|ГДЕ
//		|	ParcelsИзменения.Узел = &УзелNEK
//		|	И (НЕ ParcelsИзменения.НомерСообщения ЕСТЬ NULL )");
//		
//	СтруктураТекстов.Вставить("ShipmentsHeaders",
//		"ВЫБРАТЬ
//		|	ShipmentИзменения.Ссылка КАК Shipment,
//		|	ShipmentИзменения.Ссылка.Номер КАК No,
//		|	ShipmentИзменения.Ссылка.CCA КАК CCA,
//		|	ShipmentИзменения.Ссылка.ActualPOA.Код КАК ActualPOANo,
//		|	ShipmentИзменения.Ссылка.HouseWB КАК HouseWB,
//		|	ShipmentИзменения.Ссылка.WB2 КАК WB2,
//		|	ShipmentИзменения.Ссылка.WB3 КАК WB3,
//		|	ShipmentИзменения.Ссылка.WB4 КАК WB4,
//		|	ShipmentИзменения.Ссылка.ETD КАК ETD,
//		|	ShipmentИзменения.Ссылка.ATD КАК ATD,
//		|	ShipmentИзменения.Ссылка.PreAlert КАК PreAlert,
//		|	ShipmentИзменения.Ссылка.ETA КАК ETA,
//		|	ShipmentИзменения.Ссылка.ATA КАК ATA,
//		|	ShipmentИзменения.Ссылка.DoxRcvd КАК DoxRcvd,
//		|	ShipmentИзменения.Ссылка.InCustoms КАК InCustoms,
//		|	ShipmentИзменения.Ссылка.Cleared КАК Cleared,
//		|	ShipmentИзменения.Ссылка.WithoutGreenLight КАК WithoutGreenLight,
//		|	ShipmentИзменения.Ссылка.WithoutPreAlert КАК WithoutPreAlert,
//		|	ShipmentИзменения.Ссылка.Отменен КАК Cancelled
//		|ИЗ
//		|	Документ.Поставка.Изменения КАК ShipmentИзменения
//		|ГДЕ
//		|	ShipmentИзменения.Узел = &УзелNEK
//		|	И (НЕ ShipmentИзменения.НомерСообщения ЕСТЬ NULL )");	
//		
//	СтруктураТекстов.Вставить("ShipmentsDOCs",
//		"ВЫБРАТЬ
//		|	ShipmentsИзменения.Ссылка КАК Shipment,
//		|	ShipmentDOCs.УпаковочныйЛист.Номер КАК DOCNo
//		|ИЗ
//		|	Документ.Поставка.Изменения КАК ShipmentsИзменения
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ShipmentDOCs
//		|		ПО ShipmentsИзменения.Ссылка = ShipmentDOCs.Ссылка
//		|ГДЕ
//		|	ShipmentsИзменения.Узел = &УзелNEK
//		|	И (НЕ ShipmentsИзменения.НомерСообщения ЕСТЬ NULL )");	
//		
//	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
//	
//	СтруктураДанных = Новый Структура;
//	
//	// Данные DOCs
//	СтруктураДанных.Вставить("ВыборкаDOCsHeaders", СтруктураРезультатов.DOCsHeaders.Выбрать());
//	СтруктураДанных.Вставить("ТаблицаDOCsInvoices", СтруктураРезультатов.DOCsInvoices.Выгрузить());
//	СтруктураДанных.ТаблицаDOCsInvoices.Индексы.Добавить("DOC");
//	СтруктураДанных.Вставить("ТаблицаDOCsParcels", СтруктураРезультатов.DOCsParcels.Выгрузить());
//	СтруктураДанных.ТаблицаDOCsParcels.Индексы.Добавить("DOC");
//	
//	// Данные Invoice lines
//	СтруктураДанных.Вставить("ВыборкаInvoiceLines", СтруктураРезультатов.InvoiceLines.Выбрать());
//	
//	// Данные Parcels
//	СтруктураДанных.Вставить("ВыборкаParcels", СтруктураРезультатов.Parcels.Выбрать());
//	
//	// Данные Shipments
//	СтруктураДанных.Вставить("ВыборкаShipmentsHeaders", СтруктураРезультатов.ShipmentsHeaders.Выбрать());
//	СтруктураДанных.Вставить("ТаблицаShipmentsDOCs", СтруктураРезультатов.ShipmentsDOCs.Выгрузить());
//	СтруктураДанных.ТаблицаShipmentsDOCs.Индексы.Добавить("Shipment");
//	
//	Возврат СтруктураДанных;
//	
//КонецФункции

//Процедура ВыгрузитьDOCsВNEKNFS(ЗаписьXML, ВыборкаDOCsHeaders, ТаблицаDOCsInvoices, ТаблицаDOCsParcels, АгентNEK)
//	
//	СтруктураПоискаПоDOC = Новый Структура("DOC");
//	
//	Пока ВыборкаDOCsHeaders.Следующий() Цикл
//		
//		ЗаписьXML.ЗаписатьНачалоЭлемента("DOC");
//		
//		ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаDOCsHeaders.No), "No");
//		
//		Если ВыборкаDOCsHeaders.CCA <> АгентNEK
//			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаDOCsHeaders.Requested)
//			ИЛИ ВыборкаDOCsHeaders.Cancelled Тогда   
//			
//			ЗаписатьXML(ЗаписьXML, "true", "Deleted");
//			
//		Иначе	
//			
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаDOCsHeaders.Date, "ДФ=dd.MM.yyyy"), "Date");
//			ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаDOCsHeaders.SoldToNo), "SoldTo");
//			ЗаписатьXML(ЗаписьXML, ВыборкаDOCsHeaders.Urgency, "Urgency");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаDOCsHeaders.FirstRequested, "ДФ=dd.MM.yyyy"), "FirstRequested");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаDOCsHeaders.Requested, "ДФ=dd.MM.yyyy"), "Requested");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаDOCsHeaders.CCAFirstResponse, "ДФ=dd.MM.yyyy"), "CCAFirstResponse");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаDOCsHeaders.Received, "ДФ=dd.MM.yyyy"), "Received");
//			ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаDOCsHeaders.MOTNo), "MOT");
//			ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаDOCsHeaders.PODNo), "POD");
//			ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаDOCsHeaders.RequestedPOANo), "RequestedPOA");
//			ЗаписатьXML(ЗаписьXML, ВыборкаDOCsHeaders.ImportExport, "ImportExport");
//			
//			СтруктураПоискаПоDOC.DOC = ВыборкаDOCsHeaders.DOC;
//			
//			ЗаписьXML.ЗаписатьНачалоЭлемента("Invoices");	
//			СтрокиDOCsInvoices = ТаблицаDOCsInvoices.НайтиСтроки(СтруктураПоискаПоDOC);
//			Для Каждого СтрокаТаблицы Из СтрокиDOCsInvoices Цикл
//				ЗаписатьXML(ЗаписьXML, СокрЛП(СтрокаТаблицы.InvoiceNo), "InvoiceNo");
//			КонецЦикла;
//			ЗаписьXML.ЗаписатьКонецЭлемента(); // Invoices
//			
//			ЗаписьXML.ЗаписатьНачалоЭлемента("Parcels");
//			СтрокиDOCsParcels = ТаблицаDOCsParcels.НайтиСтроки(СтруктураПоискаПоDOC);
//			Для Каждого СтрокаТаблицы Из СтрокиDOCsParcels Цикл
//				ЗаписатьXML(ЗаписьXML, СокрЛП(СтрокаТаблицы.ParcelNo), "ParcelNo");
//			КонецЦикла;
//			ЗаписьXML.ЗаписатьКонецЭлемента(); // Parcels
//			
//		КонецЕсли;
//		
//		ЗаписьXML.ЗаписатьКонецЭлемента(); // DOC
//		
//	КонецЦикла;
//		
//КонецПроцедуры

//Процедура ВыгрузитьInvoiceLinesВNEKNFS(ЗаписьXML, ВыборкаInvoiceLines)
//		
//	Пока ВыборкаInvoiceLines.Следующий() Цикл
//		
//		ЗаписьXML.ЗаписатьНачалоЭлемента("InvoiceLine");
//		
//		ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаInvoiceLines.InvoiceNo), "InvoiceNo");
//		ЗаписатьXML(ЗаписьXML, ВыборкаInvoiceLines.InvoiceLineNo, "InvoiceLineNo");
//		
//		Если ВыборкаInvoiceLines.ПометкаУдаления Тогда   
//			
//			ЗаписатьXML(ЗаписьXML, "true", "Deleted");
//			
//		Иначе
//			
//			
//			ЗаписатьXML(ЗаписьXML, ВыборкаInvoiceLines.PONo, "PONo");
//			ЗаписатьXML(ЗаписьXML, ВыборкаInvoiceLines.GoodDescription, "GoodDescription");
//			
//		КонецЕсли;
//					
//		ЗаписьXML.ЗаписатьКонецЭлемента(); // InvoiceLine
//		
//	КонецЦикла;
//		
//КонецПроцедуры

//Процедура ВыгрузитьParcelsВNEKNFS(ЗаписьXML, ВыборкаParcels);
//	
//	Пока ВыборкаParcels.Следующий() Цикл
//			
//		ЗаписьXML.ЗаписатьНачалоЭлемента("Parcel");
//		
//		ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаParcels.No), "No");
//		ЗаписатьXML(ЗаписьXML, ВыборкаParcels.GrossWeightKG, "GrossWeightKG");
//		ЗаписатьXML(ЗаписьXML, ВыборкаParcels.LengthCM, "LengthCM");
//		ЗаписатьXML(ЗаписьXML, ВыборкаParcels.WidthCM, "WidthCM");
//		ЗаписатьXML(ЗаписьXML, ВыборкаParcels.HeightCM, "HeightCM");
//					
//		ЗаписьXML.ЗаписатьКонецЭлемента(); // Parcel
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ВыгрузитьShipmentsВNEKNFS(ЗаписьXML, ВыборкаShipmentsHeaders, ТаблицаShipmentsDOCs, АгентNEK)
//	
//	СтруктураПоискаПоShipment = Новый Структура("Shipment");
//	
//	Пока ВыборкаShipmentsHeaders.Следующий() Цикл
//		
//		ЗаписьXML.ЗаписатьНачалоЭлемента("Shipment");
//		
//		ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаShipmentsHeaders.No), "No");
//		
//		Если ВыборкаShipmentsHeaders.CCA <> АгентNEK
//			ИЛИ ВыборкаShipmentsHeaders.Cancelled Тогда   
//			
//			ЗаписатьXML(ЗаписьXML, "true", "Deleted");
//			
//		Иначе	
//			
//			ЗаписатьXML(ЗаписьXML, СокрЛП(ВыборкаShipmentsHeaders.ActualPOANo), "ActualPOA");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.ETD, "ДФ=dd.MM.yyyy"), "ETD");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.ATD, "ДФ=dd.MM.yyyy"), "ATD");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.PreAlert, "ДФ=dd.MM.yyyy"), "PreAlert");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.ETA, "ДФ=dd.MM.yyyy"), "ETA");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.ATA, "ДФ=dd.MM.yyyy"), "ATA");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.DoxRcvd, "ДФ=dd.MM.yyyy"), "DoxRsvd");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.InCustoms, "ДФ=dd.MM.yyyy"), "InCustoms");
//			ЗаписатьXML(ЗаписьXML, Формат(ВыборкаShipmentsHeaders.Cleared, "ДФ=dd.MM.yyyy"), "Cleared");
//			ЗаписатьXML(ЗаписьXML, ВыборкаShipmentsHeaders.WithoutGreenLight, "WithoutGreenLight");
//			ЗаписатьXML(ЗаписьXML, ВыборкаShipmentsHeaders.WithoutPreAlert, "WithoutPreAlert");
//						
//			СтруктураПоискаПоShipment.Shipment = ВыборкаShipmentsHeaders.Shipment;
//			
//			ЗаписьXML.ЗаписатьНачалоЭлемента("DOCs");	
//			СтрокиShipmentsDOCs = ТаблицаShipmentsDOCs.НайтиСтроки(СтруктураПоискаПоShipment);
//			Для Каждого СтрокаТаблицы Из СтрокиShipmentsDOCs Цикл
//				ЗаписатьXML(ЗаписьXML, СокрЛП(СтрокаТаблицы.DOCNo), "DOCNo");
//			КонецЦикла;
//			ЗаписьXML.ЗаписатьКонецЭлемента(); // DOCs
//						
//		КонецЕсли;
//		
//		ЗаписьXML.ЗаписатьКонецЭлемента(); // Shipment
//		
//	КонецЦикла;
//		
//КонецПроцедуры

