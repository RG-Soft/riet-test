
// Проверяет возможность проведения в БУ и НУ в зависимости от договора взаиморасчетов.
//
Функция ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, ДоговорКонтрагента,
	                                         Отказ = Ложь, Заголовок,ДополнениеКСообщению = "") Экспорт
    Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" Тогда
		ЭтоДокументОплаты = Ложь;
	иначе
		ЭтоДокументОплаты = Не(УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление = Неопределено);
	КонецЕсли; 

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) тогда
		Возврат Истина;
	КонецЕсли;

	ВалютаВзаиморасчетов     = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента и СтруктураШапкиДокумента.ВалютаРегламентированногоУчета <> СтруктураШапкиДокумента.ВалютаДокумента тогда

		//Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. Возможно только в документах оплаты.
		//Не отражается в б.у.
		ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта документа (" + СтруктураШапкиДокумента.ВалютаДокумента + ") 
		                 |отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + 
		                 ") и валюты расчетов по договору """ + ДоговорКонтрагента + """ (" + ВалютаВзаиморасчетов + ")."+Символы.ПС+"
		                 |Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);

		Возврат Ложь;

	ИначеЕсли СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета тогда

		Если (НЕ ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) и НЕ (РасчетыВУсловныхЕдиницах) тогда

			//Документ выписан в валюте регламентированного учета. Валюта расчетов иная. Договор не в у.е. 
			//Не отражается в б.у.
			ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению+" Валюта расчетов по договору """ + ДоговорКонтрагента + """ ("+ ВалютаВзаиморасчетов+
			                ") отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + ")."+Символы.ПС+"
			                |В этом случае документы могут быть выписаны в валюте регламентированного учета только при расчетах в условных единицах."+Символы.ПС+"
			                |Документ не может быть проведен по бухгалтерскому или налоговому учету.", Отказ,Заголовок);

			Возврат Ложь;

		КонецЕсли;

	Иначе

		//Валюта документа равна валюте взаиморасчетов (отличной от валюты  рег. учета)	
		Если РасчетыВУсловныхЕдиницах  и (ЭтоДокументОплаты = Истина) тогда 

			//При расчетах в у.е. документы оплаты могут выписываться только в валюте рег.учета
			//Не отражается в б.у.
			ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Документ оплаты при расчете по договору (" + ДоговорКонтрагента + 
			                ")в условных единицах "+Символы.ПС+" может быть выписан только в валюте регламентированного учета (" + 
			                СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + ")."+Символы.ПС+"Документ не может быть проведен по бухгалтерскому или налоговому учету.", Отказ,Заголовок);

			Возврат Ложь;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверкаВозможностиПроведенияВ_БУ_НУ()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	ИначеЕсли ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	Конецесли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции

// Функция возвращает список вышестоящих групп указанного элемента справочника.
// 
// Параметры:
//  СписокГрупп  - Коллекция значений, куда передаются группы
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Список вышестояших групп
//
Процедура ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент)
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Элемент) Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Элемент.Родитель) тогда
		Возврат;
	Иначе
		СписокГрупп.Добавить(Элемент.Родитель);
		ПолучитьСписокВышестоящихГрупп(СписокГрупп, Элемент.Родитель);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокВышестоящихГрупп()

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовПоПретензиям,
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТареБУ,
	                            |СчетУчетаРасходовПоТареБУ,
	                            |СчетУчетаДоходовПоТареНУ,
	                            |СчетУчетаРасходовПоТареНУ");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = Новый Массив;
	ПолучитьСписокВышестоящихГрупп(СписокГруппКонтрагентов, Контрагент);
	
	СписокГруппДоговоров = Новый Массив;
	ПолучитьСписокВышестоящихГрупп(СписокГруппДоговоров, Контрагент);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
		Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;

		Результат.СчетУчетаДоходовПоТареБУ  = Выборка.СчетУчетаДоходовПоТареБУ;
		Результат.СчетУчетаРасходовПоТареБУ = Выборка.СчетУчетаРасходовПоТареБУ;
		Результат.СчетУчетаДоходовПоТареНУ  = Выборка.СчетУчетаДоходовПоТареНУ;
		Результат.СчетУчетаРасходовПоТареНУ = Выборка.СчетУчетаРасходовПоТареНУ;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Процедура подготовки таблицы значений для целей приобретения и реализации
Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, СтруктураШапкиДокумента, ВключитьНДСВОсновнуюСумму, ВалютаРегламентированногоУчета = "") Экспорт

	Перем СуммаВключаетНДС,ВидРасчетовПоДоговору;

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС")=Неопределено);
	ЕстьВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");

	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда
		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(СтруктураШапкиДокумента.ДоговорКонтрагента,ВалютаРегламентированногоУчета);
	КонецЕсли;

	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура("Сумма"+?(ЕстьНДС,",НДС,СуммаБезНДС","")+?(ЕстьВалюта,",СуммаВал"+?(ЕстьНДС,",НДСВал,СуммаБезНДСВал",""),""));

	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;

	КонецЦикла;

	//Дополним колонки ТЗ при необходимости нечисловыми полями
	Если ТаблицаЗначений.Колонки.Найти("СчетУчетаЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("СчетУчетаЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;

	//Определим суммы по документу (Сумму без НДС и корректную основную сумму)
	Если ЕстьНДС тогда

		Для каждого СтрокаТаблицы из ТаблицаЗначений цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
		КонецЦикла;
	КонецЕсли;

	Если ЕстьВалюта тогда

		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;

		КонецЦикла;
		
			Если Не(СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда

				Если не СтруктураШапкиДокумента.Свойство("КурсДокумента") или не СтруктураШапкиДокумента.Свойство("КратностьДокумента") тогда
					КоэффициентПересчета=1;
				ИначеЕсли Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
					КоэффициентПересчета=1;
				Иначе
					КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;

				СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
				//Распределение суммы по таблице
				РаспределениеРег = УправлениеПроизводством.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.выгрузитьКолонку("Сумма"));
				Если Не РаспределениеРег = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
				КонецЕсли; 
				
				
				Если ЕстьНДС тогда
					
					НДСРег			 = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
					//Распределение суммы по таблице
					РаспределениеРег = УправлениеПроизводством.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.выгрузитьКолонку("НДС"));
					Если Не РаспределениеРег = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"НДС");
					КонецЕсли; 
					
					//Расчет суммы без НДС
					Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
					КонецЦикла;

				КонецЕсли;
				
			Иначе

				//Документ в национальной валюте
				Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах 
					//Или ((ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")    //изменила Наталья Петроченко 01.10.2012
						Или (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтражениеНачисленияНДС")
						И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) тогда

					//Необходимо определить сумму расчетов с контрагентом в валюте договора
					Если не СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов") или не СтруктураШапкиДокумента.Свойство("КратностьВзаиморасчетов") тогда
						КоэффициентПересчета=1;
					ИначеЕсли Число(СтруктураШапкиДокумента.КурсВзаиморасчетов) = 0 или Число(СтруктураШапкиДокумента.КратностьВзаиморасчетов) = 0 тогда
						КоэффициентПересчета = 1;
					Иначе
						КоэффициентПересчета = СтруктураШапкиДокумента.КратностьВзаиморасчетов / СтруктураШапкиДокумента.КурсВзаиморасчетов;
					КонецЕсли;

					СуммаВал = Окр(ТаблицаЗначений.Итог("Сумма")* КоэффициентПересчета,2);
					//Распределение суммы по таблице
					РаспределениеВал = УправлениеПроизводством.РаспределитьПропорционально(СуммаВал,ТаблицаЗначений.ВыгрузитьКолонку("СуммаВал"));
					Если Не РаспределениеВал = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"СуммаВал");
					КонецЕсли; 
					
					
					Если ЕстьНДС тогда
						
						НДСВал			 = Окр(ТаблицаЗначений.Итог("НДС") * КоэффициентПересчета,2);
						//Распределение суммы по таблице
						РаспределениеВал = УправлениеПроизводством.РаспределитьПропорционально(НДСВал,ТаблицаЗначений.выгрузитьКолонку("НДСВал"));
						Если Не РаспределениеВал = Неопределено Тогда
							ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"НДСВал");
						КонецЕсли; 
						
						//Расчет суммы без НДС
						Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
							СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаВал - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВал, 0);
						КонецЦикла;


					КонецЕсли;

				КонецЕсли

			КонецЕсли;

		Если ЕстьНДС и ТаблицаЗначений.Колонки.Найти("СуммаБезНДСРуб") <> Неопределено  тогда

			Для каждого СтрокаТаблицы из ТаблицаЗначений цикл
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
				СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДСРуб + СтрокаТаблицы.СуммаНДСРуб;
				СтрокаТаблицы.НДС       = СтрокаТаблицы.СуммаНДСРуб;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	УчетНДС.ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ
//

// Для документов, у которых договор контрагента находится в табличной части
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
													Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
									   """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Если не заполнен договор или организация, то не ругаемся.
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) 
		   И Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И ДокументОбъект.Организация <> СтрокаТаблицы.ДоговорОрганизация Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
							 + " выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт

	СПоставщиком = Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СПокупателем = Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	Прочее = Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ВидДоговораПоВидуОпераций = Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);

		ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];

		Если НЕ ВидДоговора = Неопределено Тогда
			Возврат ВидДоговора;
		Иначе
			Возврат Новый СписокЗначений;

		КонецЕсли;

	Иначе

		Возврат Новый СписокЗначений;

	Конецесли;

КонецФункции // ОпределитьВидДоговораСКонтрагентом()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, ЗАКРЫТИЯ ЗАДОЛЖЕННОСТИ
//

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений,КолонкаДокумента) Экспорт

	СписокКолонок = "ДатаДокументаДляУпорядочивания,ДокументДляУпорядочивания";

	Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
		СписокКолонок = СписокКолонок + ","+Колонка.Имя;
	КонецЦикла;

	ТаблицаЗначений.Колонки.Добавить("ДокументДляУпорядочивания",Документы.ТипВсеСсылки());
	ТаблицаЗначений.Колонки.Добавить("ДатаДокументаДляУпорядочивания",);

	Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл 

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;

		Если Документы.ТипВсеСсылки().СодержитТип( ТипЗнч(СтрокаТаблицы[КолонкаДокумента]))  тогда
			СтрокаТаблицы.ДокументДляУпорядочивания = СтрокаТаблицы[КолонкаДокумента];
			СтрокаТаблицы.ДатаДокументаДляУпорядочивания = СтрокаТаблицы.ДокументДляУпорядочивания.Дата;
		КонецЕсли;

	КонецЦикла;

	ТаблицаЗначений.Сортировать(СписокКолонок);

	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДатаДокументаДляУпорядочивания"]);
	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДокументДляУпорядочивания"]);

КонецПроцедуры

Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента,ВидОперации = неопределено)Экспорт

	ВидДействийДокумента = Новый Структура("Направление, РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг",     "Поступление");
	ВидыДокументов.Вставить("ПоступлениеДопРасходов",      "Поступление");
	ВидыДокументов.Вставить("ПоступлениеНМА",              "Поступление");
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя",  "Поступление");
	ВидыДокументов.Вставить("ПоступлениеИзПереработки", "Поступление");
	ВидыДокументов.Вставить("ГТДИмпорт"					 , "Поступление");

	ВидыДокументов.Вставить("РеализацияУслугПоПереработке",      "Выбытие");
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг","Выбытие");
	ВидыДокументов.Вставить("ОтчетКомитентуОПродажах",           "Выбытие");
	ВидыДокументов.Вставить("ПередачаНМА",                       "Выбытие");
	ВидыДокументов.Вставить("ПередачаОС",                        "Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику",          "Выбытие");

	Если ВидДокумента = "ОтчетКомиссионераОПродажах" тогда 
		Если ВидОперации= "КомиссионноеВознаграждение" тогда
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Выбытие");
		КонецЕсли;
	КонецЕсли;

	Если ВидДокумента = "РеализацияТоваровУслуг" тогда 
		Если ВидОперации= "КомиссионнаяВыручка" тогда
			ВидыДокументов.Вставить("РеализацияТоваровУслуг",     "Поступление");
		Иначе
			ВидыДокументов.Вставить("РеализацияТоваровУслуг",     "Выбытие");
		КонецЕсли;
	КонецЕсли;

	ВидДействийДокумента.Вставить("Направление",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();  
	
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия,			ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование,				ВидОперацииРасчет);
		
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);

	Иначе

		Если    (ВидДокумента = "РеализацияУслугПоПереработке")
			или (ВидДокумента = "АктОбОказанииПроизводственныхУслуг")
			или (ВидДокумента = "РеализацияТоваровУслуг")
			или (ВидДокумента = "ПоступлениеИзПереработки")
			или (ВидДокумента = "ОтчетКомиссионераОПродажах")
			или (ВидДокумента = "ОтчетКомитентуОПродажах")
			или (ВидДокумента = "ПоступлениеНМА")
			или (ВидДокумента = "ПередачаНМА")
			или (ВидДокумента = "ПередачаОС") 
			или (ВидДокумента = "ПоступлениеДопРасходов") 
			
			тогда

			ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
			
		КонецЕсли;

	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ЗачетАванса(ДокументОбъект,СтруктураШапкиДокумента,СуммаВключаетНДС, ВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,Заголовок,НомерЖурнала="",УменьшитьСуммуРегл=0,УменьшитьСуммуВал=0) Экспорт

	Перем ВидОперации,Сделка;

	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	ВестиРасчетыПоДокументам = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	СтруктураШапкиДокумента.Свойство("Сделка",      Сделка);
	НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя,ВидОперации).Направление;
	ЭтоВозврат          = (ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	МоментДокумента     = Новый МоментВремени(ДокументОбъект.Дата,ДокументОбъект.Ссылка);
	КурсДокумента       = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента  = СтруктураШапкиДокумента.КратностьДокумента;
	Контрагент          = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента  = СтруктураШапкиДокумента.ДоговорКонтрагента;
	Если Не ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам и не ЭтоВозврат тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	СчетРасчетов        = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	СчетАвансов         = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	РасчетыВВалюте      = НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета);

	НалоговыйАгентНДС   = (ДоговорКонтрагента.УчетАгентскогоНДС) и (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	РасчетыВУсловныхЕдиницах = (ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) и СчетАвансов.Валютный;

	СуммаДокументаСНДСРегл            = 0;
	СуммаДокументаСНДСВВалютеРасчетов = 0;

	//Формирование таблицы для возврата сумм зачтенных авансов (по документам)
	ЗачетаАвансаРегл = Новый ТаблицаЗначений();
	ЗачетаАвансаРегл.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сумма",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ЗачетаАвансаРегл.Колонки.Добавить("СуммаВал",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ЗачетаАвансаРегл.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗачетаАвансаРегл.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ЗачетаАвансаРегл.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам и
		 (ОбщегоНазначения.ЗначениеНеЗаполнено(Сделка) и ВестиРасчетыПоДокументам) и не ЭтоВозврат тогда
	 	//Документ не требует обработки
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	Если не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата) Тогда
		//Оперативное определение состояния расчетов не требуется.
		Возврат ЗачетаАвансаРегл;
	КонецЕсли; 
		
	Для каждого ТекущаяТаблица из ТаблицыДокумента Цикл

		Если ТекущаяТаблица.Значение.Колонки.Найти("Сумма") = Неопределено тогда

			ОбщегоНазначения.ОшибкаПриПроведении("Ошибка при "+?(ЭтоВозврат,"выделении", "зачете")+" аванса.",Отказ,Заголовок);
			Возврат Неопределено;
        КонецЕсли;

		СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("Сумма");

		Если РасчетыВВалюте ИЛИ РасчетыВУсловныхЕдиницах тогда
			СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("СуммаВал");
		КонецЕсли;

		Если Не (ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено) тогда
			Если НЕ (СуммаВключаетНДС или НалоговыйАгентНДС) тогда

				СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("НДС");

				Если РасчетыВВалюте ИЛИ РасчетыВУсловныхЕдиницах тогда
					СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("НДСВал");
				КонецЕсли;
			ИначеЕсли СуммаВключаетНДС и НалоговыйАгентНДС тогда
				СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл - ТекущаяТаблица.Значение.Итог("НДС");

				Если РасчетыВВалюте ИЛИ РасчетыВУсловныхЕдиницах тогда
					СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - ТекущаяТаблица.Значение.Итог("НДСВал");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
    
	Если СуммаДокументаСНДСВВалютеРасчетов = 0 тогда
		 СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСРегл;
	КонецЕсли;
	СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - УменьшитьСуммуВал; 
	СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл  - УменьшитьСуммуРегл;

	Если СуммаДокументаСНДСРегл = 0 тогда 
		//Документ не требует обработки
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;


	Если ЭтоВозврат тогда
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = "Выделение аванса (оплаченная часть при возвр.)";
		Иначе
			СодержаниеОперации = "Возврат поставщику. Неоплаченная часть.";
		КонецЕслИ;
	Иначе
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = "Зачет аванса поставщику";
		Иначе
			СодержаниеОперации = "Зачет аванса покупателя";
		КонецЕслИ;
	КонецЕслИ;
	
	СуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");
	СуфиксСчетаАвансов  = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");

	//Если счет оплаты совпадает со счетом аванса или счет аванса не заполнен и расчеты не в у.е. - возвращаемся без зачета аванса
	Если (ОбщегоНазначения.ЗначениеНеЗаполнено(СчетАвансов)) и не РасчетыВУсловныхЕдиницах тогда
		//Проводка по бух. учету по зачету аванса не формируется
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;

	Если РасчетыВВалюте Тогда
		УсловиеВалюта = ВалютаДокумента;

	ИначеЕсли РасчетыВУсловныхЕдиницах тогда
		УсловиеВалюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Иначе
		УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();

	КонецЕсли;

	ЗнакФильтрПоОстаткам = ?(НаправлениеДвижения = "Поступление" , 1, -1);

	ТаблицаАвансов       = ОбщегоНазначения.ПолучитьОстатокПоСчету(Организация,МоментДокумента,?(НаправлениеДвижения = "Поступление" и ЭтоВозврат,СчетРасчетов,СчетАвансов),УсловиеВалюта ,Контрагент, ДоговорКонтрагента,Сделка,ЗнакФильтрПоОстаткам);
	
	НомерСубконтоРасчетныеДокументы = 0;
	Если НЕ СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто") = Неопределено тогда
		НомерСубконтоРасчетныеДокументы = СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
	КонецЕсли;
	Если НЕ НомерСубконтоРасчетныеДокументы = 0 тогда
		УпорядочитьТаблицуПоДокументу(ТаблицаАвансов,"Субконто"+НомерСубконтоРасчетныеДокументы);
	КонецЕсли;

	СуммаЗачетаАвансаРегл            = 0;
	СуммаЗачетаАвансаВВалютеРасчетов = 0;
	КорректировкиПриРасчетахВУЕ      = 0;

	Если ТаблицаАвансов.Количество()=0 тогда
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	ПроводкиБУ = ДокументОбъект.Движения.Хозрасчетный;
	
	Для каждого СтрокаАванса из ТаблицаАвансов Цикл

		//Расчет суммы перекрытия задолженности на счете, определение суммовых разниц
		ТекущийАванс = Макс(0, Мин(СуммаДокументаСНДСВВалютеРасчетов,СтрокаАванса[?(РасчетыВВалюте или РасчетыВУсловныхЕдиницах,"ВалютнаяСуммаОстаток","СуммаОстаток")]));
		
		Если ТекущийАванс = 0 тогда 
			Продолжить;
		КонецЕсли;

		Если РасчетыВУсловныхЕдиницах тогда

			
			ТекущийАвансРегл 			= Окр(СтрокаАванса.СуммаОстаток * ТекущийАванс / СтрокаАванса.ВалютнаяСуммаОстаток, 2);

			СуммаРегПоКурсуДокумента    = Окр(ТекущийАванс * СуммаДокументаСНДСРегл / СуммаДокументаСНДСВВалютеРасчетов, 2);
			КорректировкиПриРасчетахВУЕ = КорректировкиПриРасчетахВУЕ + ТекущийАвансРегл - СуммаРегПоКурсуДокумента;
			СуммаДокументаСНДСРегл      = СуммаДокументаСНДСРегл - СуммаРегПоКурсуДокумента;
			Если ЭтоВозврат тогда
				//Корректировку при расчетах в у.е. не производим!
				ТекущийАвансРегл = СуммаРегПоКурсуДокумента;
			КонецЕсли;

		ИначеЕсли РасчетыВВалюте Тогда

			ТекущийАвансРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущийАванс, ВалютаДокумента, ВалютаРегламентированногоУчета,
				                                        КурсДокумента, 1, КратностьДокумента, 1);

		Иначе

			ТекущийАвансРегл = ТекущийАванс;

		КонецЕсли;
		
		СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - ТекущийАванс;
		СуммаЗачетаАвансаВВалютеРасчетов  = СуммаЗачетаАвансаВВалютеРасчетов + ТекущийАванс;
		СуммаЗачетаАвансаРегл             = СуммаЗачетаАвансаРегл + ТекущийАвансРегл;

		СтрокаЗачетаАванса = ЗачетаАвансаРегл.Добавить();
		СтрокаЗачетаАванса.Сумма  = ТекущийАвансРегл;
		СтрокаЗачетаАванса.Сделка = СтруктураШапкиДокумента.Ссылка;
        СтрокаЗачетаАванса.СуммаВал = ТекущийАванс;
		
		СтрокаЗачетаАванса.Контрагент = Контрагент;
        СтрокаЗачетаАванса.ДоговорКонтрагента = ДоговорКонтрагента;
		Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
			СтрокаЗачетаАванса.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		Иначе
	        СтрокаЗачетаАванса.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
		Если не НомерСубконтоРасчетныеДокументы = 0 тогда
			СтрокаЗачетаАванса.ДокументОплаты = СтрокаАванса["Субконто"+НомерСубконтоРасчетныеДокументы];
		КонецЕсли;

		//Формирование проводки для стандартного режима зачета аванса
		Если Не (ЭтоВозврат и НаправлениеДвижения="Поступление") тогда
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = Организация;
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Содержание   = СодержаниеОперации;

			Проводка["Счет" + СуфиксСчетаРасчетов]= СчетРасчетов;
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты",        Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры",           ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

			Проводка["Счет" + СуфиксСчетаАвансов]= СчетАвансов;
			Для НомерСубконто = 1 по 3 Цикл
				ОбщегоНазначения.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаАвансов], Проводка["Субконто" + СуфиксСчетаАвансов], НомерСубконто,СтрокаАванса["Субконто" + НомерСубконто]);
			КонецЦикла;

			Проводка.Сумма = ТекущийАвансРегл;

			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = ТекущийАванс;
			Конецесли;

			Если СчетАвансов.Валютный тогда
				Проводка["Валюта" + СуфиксСчетаАвансов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаАвансов] = ТекущийАванс;
			Конецесли;

		КонецЕсли;

	КонецЦикла;

	Если РасчетыВУсловныхЕдиницах и КорректировкиПриРасчетахВУЕ <> 0 тогда
		Если ЭтоВозврат тогда
			КурсСовпадает = Ложь;
			Попытка
			    КурсВзаиморасчетовОснования = СтруктураШапкиДокумента.Сделка.КурсВзаиморасчетов/СтруктураШапкиДокумента.Сделка.КратностьВзаиморасчетов;
				КурсВзаиморасчетовТекущий   = СтруктураШапкиДокумента.КурсВзаиморасчетов/СтруктураШапкиДокумента.КратностьВзаиморасчетов;
				КурсСовпадает = (КурсВзаиморасчетовОснования = КурсВзаиморасчетовТекущий);
			Исключение
			КонецПопытки; 
			
			Если КурсСовпадает Тогда
				//Возврат сообщения о погрешностях при расчетах
				ТекстСообщения = "По результатам определения состояния расчетов выявлена погрешность в размере ";
				ВалютныйЭквивалент = Окр((КорректировкиПриРасчетахВУЕ ) / (СтруктураШапкиДокумента.КурсВзаиморасчетов/СтруктураШапкиДокумента.КратностьВзаиморасчетов), 4);
				Если ВалютныйЭквивалент>0.005 или ВалютныйЭквивалент<-0.005 тогда
					Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
						ТекстСообщения = ТекстСообщения + ВалютныйЭквивалент +" "+Строка(СтруктураШапкиДокумента.ВалютаВзаиморасчетов)+" ( "+КорректировкиПриРасчетахВУЕ+" "+Строка(ВалютаРегламентированногоУчета)+").";
					Иначе	
					    ТекстСообщения = ТекстСообщения + КорректировкиПриРасчетахВУЕ+" "+Строка(ВалютаРегламентированногоУчета)+" ( "+Окр((КорректировкиПриРасчетахВУЕ ) / (СтруктураШапкиДокумента.КурсВзаиморасчетов/СтруктураШапкиДокумента.КратностьВзаиморасчетов), 4)+" "+Строка(СтруктураШапкиДокумента.ВалютаВзаиморасчетов)+").";
					КонецЕсли; 
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок,СтатусСообщения.Обычное);
				КонецЕсли;
			Иначе
				//Возврат сообщения о нарушении методологии и необходимости отражения вручную
				ОбщегоНазначения.СообщитьОбОшибке("По результатам определения состояния расчетов выявлено расхождение в курсах документов.
				|Распределение корректировки по движениям не может быть произведено, так как это противоречит методологии отражения возвратов.
				|Рекомендуется привести в соответствие курс документа возврата и курс документа "+?(НаправлениеДвижения = "Поступление","реализации", "приобретения") +" .",,Заголовок);
			КонецЕсли; 
		ИначеЕсли Не(РасчетыВВалюте) тогда
			//Возврат сообщения о необходимости ручного отражения корректировочных записей
			ОбщегоНазначения.СообщитьОбОшибке("По результатам зачета авансов выявлена необходимость корректировки сумм документа в размере "+Формат(КорректировкиПриРасчетахВУЕ,"ЧЦ=15;ЧДЦ=2")+" "+ВалютаРегламентированногоУчета+"
			|Распределение суммовой разницы по движениям не может быть произведено, так как документ выписан в национальной валюте.
			|Отразите корректировки самостоятельно.",,Заголовок);

		Иначе
			РаспределитьКорректировкуПриРасчетахВУсловныхЕдиницах(КорректировкиПриРасчетахВУЕ,ТаблицыДокумента,СуммаВключаетНДС,Отказ,Заголовок,Истина);

		КонецЕсли;

	КонецЕсли;

	Возврат ЗачетаАвансаРегл;

КонецФункции

Процедура РаспределитьКорректировкуПриРасчетахВУсловныхЕдиницах(СуммаКорректировки,ТаблицыДокумента,СуммаВключаетНДС,Отказ,Заголовок,УвеличитьСуммуКорректировкиНаСуммуСНДС)

	Если СуммаКорректировки = 0 тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаСНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБезНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",           ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("Корректировка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаСНДС  = ТекущаяТаблица.Значение.Итог("Сумма");

		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено тогда

			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("СуммаБезНДС");
			СтрокаТаблицы.НДС         = ТекущаяТаблица.Значение.Итог("НДС");

			Если НЕ СуммаВключаетНДС тогда
				СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаСНДС+ТекущаяТаблица.Значение.Итог("НДС");
			КонецЕслИ;

		Иначе
			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("Сумма");

		КонецЕсли;

	КонецЦикла;

	//Распределим корректировку по таблицам значений
	СуммаСНДСКРаспределению = СуммаКорректировки+?(УвеличитьСуммуКорректировкиНаСуммуСНДС,СуммыПоТаблицамДокумента.Итог("СуммаСНДС"),"");

	Если СуммаСНДСКРаспределению = 0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка в распределении корректировок при зачете аванса по расчетам в условных единицах.", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	НДСКРаспределению    = 0;
	БезНДСКРаспределению = 0;

	Если Не СуммыПоТаблицамДокумента.Итог("НДС") = 0 тогда
		НДСКРаспределению = Окр(СуммаСНДСКРаспределению * СуммыПоТаблицамДокумента.Итог("НДС") / СуммыПоТаблицамДокумента.Итог("СуммаСНДС"), 2);
	КонецЕсли;

	БезНДСКРаспределению = СуммаСНДСКРаспределению - НДСКРаспределению;

	Если НЕ БезНДСКРаспределению = 0 тогда
		НовыеСуммы = УправлениеПроизводством.РаспределитьПропорционально(БезНДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
	КонецЕсли;

	Если НЕ НДСКРаспределению = 0 тогда
		НовыеСуммы = УправлениеПроизводством.РаспределитьПропорционально(НДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДС");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим корректировку в пределах каждой таблицы значений
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений     = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		СуммаКРаспределению = СтрокаКРаспределению[?(СуммаВключаетНДС,"СуммаСНДС","СуммаБезНДС")];

		Если СуммаКРаспределению = 0 тогда
			продолжить;
		КонецЕсли;

		Если не СтрокаКРаспределению.СуммаБезНДС = 0 тогда
			НовыеСуммы = УправлениеПроизводством.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
		КонецЕсли;
		
		Если НЕ СтрокаКРаспределению.НДС = 0 тогда
			НовыеСуммы = УправлениеПроизводством.РаспределитьПропорционально(СтрокаКРаспределению.НДС,ТаблицаЗначений.ВыгрузитьКолонку("НДС"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"НДС");
		КонецЕсли;

		Если не СуммаВключаетНДС тогда
			ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "Сумма");
		Иначе
			Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

Конецпроцедуры

Процедура СуммовыеРазницыПриРасчетахВУсловныхЕдиницах(ДокументОбъект,ИсходнаяТаблицаСуммовыхРазниц,СтруктураШапкиДокумента,Заголовок) Экспорт


	ДатаДока            = СтруктураШапкиДокумента.Дата;

	НаправлениеДвижения = УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	ЭтоВозврат      = СтруктураШапкиДокумента.ЭтоВозврат;

	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		Покупки = не (СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская);
		Продажи = не Покупки;
	Иначе	
		Покупки = (НаправлениеДвижения = "Выбытие" и Не(ЭтоВозврат));
		Продажи = (НаправлениеДвижения = "Поступление" и Не(ЭтоВозврат));
	КонецЕсли;
	
	Если Продажи тогда
		Если не (СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС") 
		и СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС"))
		Тогда
			ОшибкаВПолучении = Ложь;
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
			
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС));
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
		УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
		УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
	Иначе

		Если не (СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС") 
		и СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС"))
		Тогда
			ОшибкаВПолучении = Ложь;
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
			
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
		КонецЕсли;
		УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
		УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
	КонецЕсли; 
	
	ВыделятьНДСпоСР = (УчитыватьПоложительныеРазницыДляНДС или УчитыватьОтрицательныеРазницыДляНДС);

	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	ТаблицаСуммовыхРазниц.Свернуть("Документ,Счет,КоличествоСубконто,Субконто1,Субконто2,Субконто3","СуммоваяРазница");
	ТаблицаСуммовыхРазниц.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("УчитыватьДляНДС",новый ОписаниеТипов("Булево"));
	
	// Опредееляем, учитывать ли данный вид суммовых разниц для целей НДС
	Если ВыделятьНДСпоСР Тогда
		Для каждого СтрокаСуммовойРазницы Из ТаблицаСуммовыхРазниц Цикл
			СтрокаСуммовойРазницы.УчитыватьДляНДС = ?(СтрокаСуммовойРазницы.СуммоваяРазница>0,УчитыватьПоложительныеРазницыДляНДС,УчитыватьОтрицательныеРазницыДляНДС);
		КонецЦикла; 
	КонецЕсли; 
	
	ДокументыСР   = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Документ"),Истина);
	СчетаРасчетов = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Счет"),Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы",ДокументыСР);
	//Добавил Трефиленков Дмитрий, РГ-Софт
	ДокументыВвода = Новый Массив;
	Для Каждого ДокументСР Из ДокументыСР Цикл
		Если ТипЗнч(ДокументСР) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
			ДокументыВвода.Добавить(ДокументСР.РасчетныйДокумент);	
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ДокументыВвода",УчетНДС.УдалитьПовторяющиесяЭлементыМассива(ДокументыВвода,Истина));
	//конец добавления
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаРасчетов",СчетаРасчетов);
	Запрос.УстановитьПараметр("ВыделятьНДСпоСР",ВыделятьНДСпоСР);

	Если Покупки тогда

		Запрос.УстановитьПараметр("СчетаНДС",ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям.Ссылка);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Движения.ВидРасходов КАК ВидРасходов,
		|	Движения.Организация КАК Организация,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.СчетДт КАК СчетДт,
		|	Движения.СубконтоДт1 КАК СубконтоДт1,
		|	Движения.СубконтоДт2 КАК СубконтоДт2,
		|	Движения.СубконтоДт3 КАК СубконтоДт3,
		|	Движения.СчетКт КАК СчетКт,
		|	Движения.СубконтоКт1 КАК СубконтоКт1,
		|	Движения.СубконтоКт2 КАК СубконтоКт2,
		|	Движения.СубконтоКт3 КАК СубконтоКт3,
		|	СУММА(Движения.Сумма) КАК Сумма,
		|	СУММА(0) КАК НДС,
		|	Движения.ВалютаДт КАК ВалютаДт,
		|	Движения.ВалютаКт КАК ВалютаКт,
		|	Движения.НомерЖурнала КАК НомерЖурнала
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|					И &ВыделятьНДСпоСР
		|				ТОГДА ""НДС""
		|			ИНАЧЕ ""Расходы""
		|		КОНЕЦ КАК ВидРасходов,
		|		Движения.Регистратор КАК Регистратор,
		|		Движения.Организация КАК Организация,
		|		ВЫБОР
		|			КОГДА Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|					И &ВыделятьНДСпоСР
		|				ТОГДА Движения.СчетДт
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК СчетДт,
		|		ВЫБОР
		|			КОГДА Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|					И &ВыделятьНДСпоСР
		|				ТОГДА ЕСТЬNULL(Движения.СубконтоДт1, НЕОПРЕДЕЛЕНО)
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК СубконтоДт1,
		|		ВЫБОР
		|			КОГДА Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|					И &ВыделятьНДСпоСР
		|				ТОГДА ЕСТЬNULL(Движения.СубконтоДт2, НЕОПРЕДЕЛЕНО)
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК СубконтоДт2,
		|		ВЫБОР
		|			КОГДА Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|					И &ВыделятьНДСпоСР
		|				ТОГДА ЕСТЬNULL(Движения.СубконтоДт3, НЕОПРЕДЕЛЕНО)
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК СубконтоДт3,
		|		Движения.СчетКт КАК СчетКт,
		|		ЕСТЬNULL(Движения.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
		|		ЕСТЬNULL(Движения.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
		|		ЕСТЬNULL(Движения.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
		|		Движения.Сумма КАК Сумма,
		|		Движения.ВалютаДт КАК ВалютаДт,
		|		Движения.ВалютаКт КАК ВалютаКт,
		|		Движения.НомерЖурнала КАК НомерЖурнала
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				,
		|				,
		|				Организация = &Организация
		|					И Регистратор В (&Документы)
		|					И СчетКт В (&СчетаРасчетов)) КАК Движения) КАК Движения
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.ВидРасходов,
		|	Движения.Организация,
		|	Движения.Регистратор,
		|	Движения.СчетДт,
		|	Движения.СубконтоДт1,
		|	Движения.СубконтоДт2,
		|	Движения.СубконтоДт3,
		|	Движения.СчетКт,
		|	Движения.СубконтоКт1,
		|	Движения.СубконтоКт2,
		|	Движения.СубконтоКт3,
		|	Движения.ВалютаДт,
		|	Движения.ВалютаКт,
		|	Движения.НомерЖурнала";

	ИначеЕсли Продажи Тогда

		СчетаНДС = Новый("СписокЗначений");
		СчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет.Ссылка);
		СчетаНДС.Добавить(ПланыСчетов.Хозрасчетный.НДС.Ссылка);

		Запрос.УстановитьПараметр("СчетаНДС", СчетаНДС);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И &ВыделятьНДСпоСР
		|			ТОГДА ""НДС""
		|		ИНАЧЕ ""Выручка""
		|	КОНЕЦ КАК ВидРасходов,
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Организация КАК Организация,
		|	Движения.СчетДт КАК СчетДт,
		|	ЕСТЬNULL(Движения.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
		|	ЕСТЬNULL(Движения.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
		|	ЕСТЬNULL(Движения.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
		|	Движения.СчетКт КАК СчетКт,
		|	ЕСТЬNULL(Движения.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
		|	ЕСТЬNULL(Движения.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
		|	ЕСТЬNULL(Движения.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И &ВыделятьНДСпоСР
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(Движения.Сумма)
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И (НЕ(Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|						И &ВыделятьНДСпоСР))
		|			ТОГДА СУММА(Движения.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НДС,
		|	Движения.ВалютаДт КАК ВалютаДт,
		|	Движения.ВалютаКт КАК ВалютаКт,
		|	Движения.НомерЖурнала КАК НомерЖурнала
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		,
		|		,
		|		Организация = &Организация
		|		    И Регистратор В (&Документы)
		|		    И (СчетДт В (&СчетаРасчетов)
		|		        ИЛИ СчетКт В (&СчетаНДС)
		|		            И &ВыделятьНДСпоСР)) КАК Движения
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Организация,
		|	Движения.Регистратор,
		|	Движения.СчетДт,
		|	Движения.СубконтоДт1,
		|	Движения.СубконтоДт2,
		|	Движения.СубконтоДт3,
		|	Движения.СчетКт,
		|	Движения.СубконтоКт1,
		|	Движения.СубконтоКт2,
		|	Движения.СубконтоКт3,
		|	Движения.ВалютаДт,
		|	Движения.ВалютаКт,
		|	Движения.НомерЖурнала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И &ВыделятьНДСпоСР
		|			ТОГДА ""НДС""
		|		ИНАЧЕ ""Выручка""
		|	КОНЕЦ,
		|	ЕСТЬNULL(Движения.СубконтоДт3, НЕОПРЕДЕЛЕНО),
		|	Движения.Организация,
		|	Движения.СчетДт,
		|	ЕСТЬNULL(Движения.СубконтоДт1, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(Движения.СубконтоДт2, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(Движения.СубконтоДт3, НЕОПРЕДЕЛЕНО),
		|	Движения.СчетКт,
		|	ЕСТЬNULL(Движения.СубконтоКт1, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(Движения.СубконтоКт2, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(Движения.СубконтоКт3, НЕОПРЕДЕЛЕНО),
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И &ВыделятьНДСпоСР
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(Движения.Сумма)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Движения.СчетКт В ИЕРАРХИИ (&СчетаНДС)
		|				И (НЕ(Движения.СчетДт В ИЕРАРХИИ (&СчетаНДС)
		|						И &ВыделятьНДСпоСР))
		|			ТОГДА СУММА(Движения.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	Движения.ВалютаДт,
		|	Движения.ВалютаКт,
		|	Движения.НомерЖурнала
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		,
		|		,
		|		Организация = &Организация
		|			И Регистратор В (&ДокументыВвода)
		|			И (СчетДт В (&СчетаРасчетов)
		|				ИЛИ СчетКт В (&СчетаНДС)
		|					И &ВыделятьНДСпоСР)
		|			И СубконтоДт3 В (&Документы)) КАК Движения
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Организация,
		|	Движения.СчетДт,
		|	Движения.СубконтоДт1,
		|	Движения.СубконтоДт2,
		|	Движения.СубконтоДт3,
		|	Движения.СчетКт,
		|	Движения.СубконтоКт1,
		|	Движения.СубконтоКт2,
		|	Движения.СубконтоКт3,
		|	Движения.ВалютаДт,
		|	Движения.ВалютаКт,
		|	Движения.НомерЖурнала";

	Иначе
		Если НЕ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Невозможно распределить суммовую разницу. ("+Формат(ТаблицаСуммовыхРазниц.Итог("СуммоваяРазница"),"ЧЦ=15;ЧДЦ=2")+")",, Заголовок);
		КонецЕсли; 
		Возврат; 
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	ТаблицаБазиса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УпорядочитьТаблицуПоДокументу(ТаблицаБазиса,"Регистратор");

	//Формрование проводок по суммовой разнице
	Распределение = Новый Структура("Сумма","СуммоваяРазница");
	Отбор         = Новый Структура("Регистратор","Документ");

	Если Покупки тогда

		//Одновременное распределение по расходам и НДС
		Отбор.Вставить("СчетКт",      "Счет");
		Отбор.Вставить("СубконтоКт1", "Субконто1");
		Отбор.Вставить("СубконтоКт2", "Субконто2");
		Отбор.Вставить("СубконтоКт3", "Субконто3");

	ИначеЕсли Продажи тогда

		//Распределение по выручке. Корректировка НДС отдельно!
		Отбор.Вставить("СчетДт",      "Счет");
		Отбор.Вставить("СубконтоДт1", "Субконто1");
		Отбор.Вставить("СубконтоДт2", "Субконто2");
		Отбор.Вставить("СубконтоДт3", "Субконто3");

	КонецЕсли;

	Исключить  = Новый структура("НДС");
	Дополнение = Новый Структура ("Содержание,Период,УчитыватьДляНДС","Суммовые разницы",ДатаДока, ВыделятьНДСпоСР);

	ТаблицаРаспределения = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаБазиса,Распределение,Отбор,,Дополнение);  // Исключить
	Если ТаблицаРаспределения = Ложь тогда
		Возврат;
	КонецЕслИ;

	СтрокиКУдалению = Новый Структура("Сумма",0);
	СтрокиКУдалению = ТаблицаРаспределения.НайтиСтроки(СтрокиКУдалению);
	Если СтрокиКУдалению.Количество() > 0 тогда
		Для каждого СтрокаТаблицы из СтрокиКУдалению Цикл
			ТаблицаРаспределения.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив();
	//Проверка на наличие корректировочных движений
	ОтборПоДокументу = Новый структура("Регистратор");
	Для каждого СтрокаДокумента Из ТаблицаСуммовыхРазниц Цикл
		ОтборПоДокументу.Вставить("Регистратор",СтрокаДокумента.документ);
		СтрокиРаспределения = ТаблицаРаспределения.НайтиСтроки(ОтборПоДокументу);
		Если СтрокиРаспределения.Количество()=0 тогда
			//Строк распределения не обнаружено
			ОбщегоНазначения.СообщитьОбОшибке("Суммовая разница по документу <"+СтрокаДокумента.документ+"> в размере "+Формат(СтрокаДокумента.СуммоваяРазница,"ЧЦ=15; ЧДЦ=2")+" "+Строка(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета)+" не отражена - не найдены движения документа для распределения суммовой разницы."+Символы.ПС+
			"Отразите суммовую разницу самостоятельно.",, Заголовок); 
		ИначеЕсли ВыделятьНДСпоСР и не СтрокаДокумента.УчитыватьДляНДС тогда
			Для каждого СтрокаТаблицы Из СтрокиРаспределения Цикл
				СтрокаТаблицы.УчитыватьДляНДС = СтрокаДокумента.УчитыватьДляНДС;
				Если не СтрокаТаблицы.ВидРасходов = "НДС" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Покупки Тогда
					СтрокаТаблицы.ВидРасходов = "Расходы";
					СтрокаТаблицы.СчетДт = Неопределено;
					СтрокаТаблицы.СубконтоДт1 = Неопределено;
					СтрокаТаблицы.СубконтоДт2 = Неопределено;
					СтрокаТаблицы.СубконтоДт3 = Неопределено;
					СтрокаТаблицы.Содержание = СтрокаТаблицы.Содержание+ " (НДС)";
				Иначе
					СтрокиКУдалению.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы из СтрокиКУдалению Цикл
		ТаблицаРаспределения.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Если Покупки тогда

		СчетУчетаДоходов  = ПланыСчетов.Хозрасчетный.ПрочиеДоходы.Ссылка;
		СчетУчетаРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Ссылка;

		ВидПДР = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы.Ссылка;

		Для Каждого СтрокаТаблицы Из  ТаблицаРаспределения Цикл

			Если СтрокаТаблицы.ВидРасходов = "НДС" тогда
				СтрокаТаблицы.Содержание = СтрокаТаблицы.Содержание+ " (НДС)";
			КонецЕСли;

			СтрокаТаблицыСуммовыхРазниц = ТаблицаСуммовыхРазниц.Найти(СтрокаТаблицы.Регистратор,"Документ");
			Если СтрокаТаблицы.ВидРасходов = "Расходы" тогда
				СтрокаТаблицыСуммовыхРазниц.СуммаБезНДС = СтрокаТаблицыСуммовыхРазниц.СуммаБезНДС + СтрокаТаблицы.Сумма;

				Если СтрокаТаблицы.Сумма>0 тогда
					СтрокаТаблицы.СчетДт 		= СчетУчетаРасходов;
					СтрокаТаблицы.СубконтоДт1 	= ВидПДР;
				Иначе
					СтрокаТаблицы.СчетДт = СтрокаТаблицы.СчетКт;
					СтрокаТаблицы.СубконтоДт1 = СтрокаТаблицы.СубконтоКт1;
					СтрокаТаблицы.СубконтоДт2 = СтрокаТаблицы.СубконтоКт2;
					СтрокаТаблицы.СубконтоДт3 = СтрокаТаблицы.СубконтоКт3;
					СтрокаТаблицы.ВалютаДт = СтрокаТаблицы.ВалютаКт;
					
					СтрокаТаблицы.СчетКт = СчетУчетаДоходов;
					СтрокаТаблицы.СубконтоКт1 	= ВидПДР;
					СтрокаТаблицы.СубконтоКт2 	= Неопределено;
					СтрокаТаблицы.СубконтоКт3 	= Неопределено;
					СтрокаТаблицы.ВалютаКт		= Неопределено;
					СтрокаТаблицы.Сумма = - СтрокаТаблицы.Сумма;
				КонецЕсли;
			Иначе
				СтрокаТаблицыСуммовыхРазниц.НДС = СтрокаТаблицыСуммовыхРазниц.НДС + СтрокаТаблицы.Сумма;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ПроводкиБУ = ДокументОбъект.Движения.Хозрасчетный;

	Если ДополнитьНабораЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ТаблицаРаспределения) = ложь тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось дополнить проводки документа движениями по суммовым разницам (по расчетам в у.е.)",,Заголовок);
	КонецЕсли;

	//Для реализации дополнительные корректировки по НДС
	Если Продажи тогда

		КорректировкиНДС  = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаБазиса, новый структура("Регистратор,Сумма,НДС"));

		КорректировкиНДС.Свернуть("Регистратор","Сумма,НДС");

		КорректировкиНДС.Колонки.Добавить("КорректировкиСНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		КорректировкиНДС.Колонки.Добавить("КорректировкиБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		КорректировкиНДС.Колонки.Добавить("КорректировкиНДС",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		КорректировкиНДС.Колонки.Добавить("УчитыватьДляНДС",     Новый ОписаниеТипов("Булево"));

		Для каждого СтрокаТаблицы из ТаблицаРаспределения Цикл

			СтрокаТаблицыКоррНДС = КорректировкиНДС.Найти(СтрокаТаблицы.Регистратор, "Регистратор");
			СтрокаТаблицыКоррНДС.КорректировкиСНДС = СтрокаТаблицыКоррНДС.КорректировкиСНДС + СтрокаТаблицы.Сумма;

		КонецЦикла;

		Для каждого СтрокаТаблицы Из КорректировкиНДС Цикл

			Если СтрокаТаблицы.Сумма <> 0 тогда
				СтрокаТаблицы.УчитыватьДляНДС = ?(СтрокаТаблицы.КорректировкиСНДС>0, УчитыватьПоложительныеРазницыДляНДС,УчитыватьОтрицательныеРазницыДляНДС);
				СтрокаТаблицы.КорректировкиНДС    = ?(СтрокаТаблицы.УчитыватьДляНДС, Окр(СтрокаТаблицы.КорректировкиСНДС * СтрокаТаблицы.НДС / СтрокаТаблицы.Сумма, 2),0);
				СтрокаТаблицы.КорректировкиБезНДС = СтрокаТаблицы.КорректировкиСНДС - СтрокаТаблицы.КорректировкиНДС;
			КонецЕсли;

		КонецЦикла;
        //Отразить распределение в таблице суммовых разниц
		ТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СуммоваяРазница"),"НДС");
		ТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СуммоваяРазница"),"СуммаБезНДС");
		Распределение = Новый Структура("НДС,СуммаБезНДС,СуммоваяРазница", "КорректировкиНДС","КорректировкиБезНДС","КорректировкиСНДС");
		Отбор         = Новый Структура("Документ", "Регистратор");
		Исключить     = Новый структура("КоличествоСубконто");//,СуммоваяРазница
		ТаблицаСуммовыхРазниц = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(КорректировкиНДС,ТаблицаСуммовыхРазниц,Распределение,Отбор,Исключить); 
		
		//Распределить по проводкам НДС
		Распределение = Новый Структура("НДС,", "КорректировкиНДС");
		Отбор         = Новый Структура("Регистратор", "Регистратор");
		Исключить     = Новый структура("Сумма");
		Дополнение    = Новый Структура("Содержание,Период", "Суммовые разницы (НДС)",ДатаДока);

		ТаблицаРаспределения = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(КорректировкиНДС,ТаблицаБазиса,Распределение,Отбор,Исключить,Дополнение); 
		Если ТаблицаРаспределения = Ложь тогда
			Возврат;
		КонецЕслИ;

		ТаблицаРаспределения.Колонки.НДС.Имя = "Сумма";

		СтрокиКУдалению = Новый Структура("Сумма",0);
		СтрокиКУдалению = ТаблицаРаспределения.НайтиСтроки(СтрокиКУдалению);

		Если СтрокиКУдалению.Количество() > 0 тогда

			Для каждого СтрокаТаблицы из СтрокиКУдалению Цикл
				ТаблицаРаспределения.Удалить(СтрокаТаблицы);
			КонецЦикла;

		КонецЕсли;

		Если ДополнитьНабораЗаписейРегистраЗаписямиТаблицы(ПроводкиБУ, ТаблицаРаспределения) = Ложь тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось дополнить проводки документа движениями по суммовым разницам (НДС по расчетам в у.е.)",,Заголовок);
		КонецЕсли;

	КонецЕсли;
	
	// Дополним исходную таблицу суммовых разниц полученной информацией
	ИсходнаяТаблицаСуммовыхРазниц.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ИсходнаяТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ИсходнаяТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ИсходнаяТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СуммоваяРазница"),"НДС");
	ИсходнаяТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ИсходнаяТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СуммоваяРазница"),"СуммаБезНДС");
	Распределение = Новый Структура("СуммоваяРазница,НДС,СуммаБезНДС");
	ИсходнаяТаблицаСуммовыхРазниц = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ИсходнаяТаблицаСуммовыхРазниц,Распределение);//,Отбор,Исключить); 

	// Отражаем суммовые разницы в событиях подсистемы учета НДС
	Если ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) тогда
		Если Покупки Тогда
			УчетНДС.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, ДокументОбъект.Движения);
			
		ИначеЕсли Продажи Тогда
			
			УчетНДС.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, ДокументОбъект.Движения);
		КонецЕсли;
	КонецЕсли;

	//Формирование проводок по суммовым разницам по налоговому учету
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

	//	СтатьяПрочихДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы;
	//	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;
	//	НомСтроки = 0;
		Для каждого ТекКорректировка из ТаблицаСуммовыхРазниц Цикл
			НомСтроки = НомСтроки + 1;
	//		Проводка = ПроводкиНУ.Добавить();

	//		Проводка.Период      = ДатаДока;
	//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//		Проводка.Содержание  = "Суммовые разницы";

	//		Если (Покупки  и (ТекКорректировка.СуммаБезНДС>0)) или (Продажи  и (ТекКорректировка.СуммаБезНДС<0)) Тогда
	//			Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
	//			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
	//		Иначе
	//			Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
	//			Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
	//		КонецЕсли;

	//		Проводка.Сумма = ТекКорректировка.СуммаБезНДС*?(ТекКорректировка.СуммаБезНДС>0,1,-1);
			
			//Добавил Трефиленков Дмитрий, РГ-Софт, для отражения суммовых разниц в регистре Продажи
			Если Продажи и СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаДолга" Тогда
				Запись = ДокументОбъект.Движения.Продажи.Добавить();
				Запись.Период = ДатаДока;
				//Добавила Федотова Л., РГ-Софт, 03.11.09 ->
				Запись.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
				//<-
				Запись.ИнвойсинговыйЦентр = ТекКорректировка.Документ.ИнвойсинговыйЦентр; 
				Запись.ПодразделениеОрганизации = ТекКорректировка.Документ.ПодразделениеОрганизации; 
				Запись.ДоговорКонтрагента = ТекКорректировка.Документ.Организация; 
				Попытка 
					Запись.Валюта = ТекКорректировка.Документ.ВалютаДокумента; 
				Исключение
				КонецПопытки;
				Запись.Тип = "DIF"; 
				ВнутреннийКурс = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоНаименованию("SLB"),ДатаДока).Курс;
				Запись.ДокументРеализации = ТекКорректировка.Документ; 
				Запись.СуммаRUR = ТекКорректировка.СуммоваяРазница; 
				Запись.СуммаUSD = ТекКорректировка.СуммоваяРазница/ВнутреннийКурс; 
				Запись.СуммаНДСRUR = ТекКорректировка.НДС; 
				Запись.СуммаНДСUSD = ТекКорректировка.НДС/ВнутреннийКурс; 
				Запись.Курс = ОбщегоНазначения.ПолучитьКурсВалюты(Запись.Валюта,ДатаДока).Курс;
				СтавкаНДС =  Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ТекКорректировка.Документ.ПолучитьОбъект())[0].СтавкаНДС;
				Запись.СтавкаНДС = СтавкаНДС;
				Если Запись.СуммаRUR < 0 Тогда
					Запись.СуммаRUR = Запись.СуммаRUR*100/(100+УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
					Запись.СуммаUSD = Запись.СуммаUSD*100/(100+УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
					Запись.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
				Запись.НомерСтрокиТабЧасти = НомСтроки;
				
			КонецЕсли;               

		КонецЦикла;

	//КонецЕсли;

КонецПроцедуры

//Дополнить записи регистра бухгалтерии или регистра накопления записями таблицы
Функция ДополнитьНабораЗаписейРегистраЗаписямиТаблицы(НаборЗаписей,ТаблицаДополнений)Экспорт

	ОтрабатыватьСубконто =  Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные());
	Если Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные()) тогда
		//Это регистр бухгалтерии
		ТаблицаНабораЗаписей = РегистрыБухгалтерии[НаборЗаписей.Метаданные().Имя].СоздатьНаборЗаписей().Выгрузить();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) тогда
		ТаблицаНабораЗаписей = РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьНаборЗаписей().Выгрузить();
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) тогда
		ТаблицаНабораЗаписей = РегистрыСведений[НаборЗаписей.Метаданные().Имя].СоздатьНаборЗаписей().Выгрузить();
	Иначе
		ТаблицаНабораЗаписей = Неопределено;
	КонецЕсли;

	Для каждого Строка из ТаблицаДополнений Цикл

		НоваяЗапись = НаборЗаписей.Добавить();

		Для каждого Колонка из ТаблицаДополнений.Колонки Цикл

			Если Колонка.Имя = "МоментВремени" или Колонка.Имя = "НомерСтроки" тогда
				Продолжить;
			КонецЕсли;

			Если ОтрабатыватьСубконто и СтрНайти(Колонка.Имя,"Субконто")>0 тогда

				Если СтрНайти(Колонка.Имя,"ВидСубконто") > 0 тогда
					//ВидСубконто - вспомогательная колонка. Обрабатывается вместе с Субконто
					Продолжить;
				Иначе

					НомерСубконто = Прав(Колонка.Имя,1);

					Если СтрНайти(Колонка.Имя, "Дт") + СтрНайти(Колонка.Имя, "Кт")>0 тогда
						СторонаСчета = Лев(Прав(Колонка.Имя,3),2);
					Иначе
						СторонаСчета = "";
					КонецЕсли;

					ЕстьКолонкаСВидомСубконто = Не(ТаблицаДополнений.Колонки.Найти("Вид"+Колонка.Имя) = Неопределено);

					Если ЕстьКолонкаСВидомСубконто тогда
						ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Строка["Счет" + СторонаСчета], НоваяЗапись["Субконто"+СторонаСчета], Строка["Вид"+Колонка.Имя], Строка[Колонка.Имя]);

					Иначе
						ОбщегоНазначения.УстановитьСубконто(Строка["Счет" + СторонаСчета], НоваяЗапись["Субконто"+СторонаСчета], Число(НомерСубконто), Строка[Колонка.Имя]);

					КонецЕсли;

				КонецЕсли;

			Иначе

				Если ТаблицаНабораЗаписей = Неопределено тогда
					Попытка
						НоваяЗапись[Колонка.Имя] =  Строка[Колонка.Имя];
					Исключение
						//Не смогли заполнить реквизит... Видно его нет.
					КонецПопытки;
				Иначе
					Если ТаблицаНабораЗаписей.Колонки.Найти(Колонка.Имя) = Неопределено тогда
						//Нет такой колонки!
					Иначе
						НоваяЗапись[Колонка.Имя] =  Строка[Колонка.Имя];
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат НаборЗаписей;

КонецФункции

Функция ФИФОПоРасчетам(ТаблицаИтогов, ТаблицаКРаспределению,ТаблицаОстатков,СтруктураШапкиДокумента,КолонкаСчетаФильтра, ТаблицаСуммовыхРазниц=Неопределено,Заголовок, РазрешитьСторнирующиеПроводки = Истина) Экспорт

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из ТаблицаКРаспределению Цикл

		СчетФильтра  = ТекущийПлатеж[КолонкаСчетаФильтра];

		НомерСубконтоРасчетныеДокументы = 0;
		Если не СчетФильтра.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто")=Неопределено тогда
			НомерСубконтоРасчетныеДокументы = СчетФильтра.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
		КонецЕсли;

		СчетОстатков = ТекущийПлатеж[?(КолонкаСчетаФильтра="СчетОплаты","СчетАванса","СчетОплаты")];
		Контрагент = ТекущийПлатеж.Контрагент;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;

		КлючЗадолженности = Новый Структура();
		КлючЗадолженности.Вставить("Контрагент"         ,ТекущийПлатеж.Контрагент);
		КлючЗадолженности.Вставить("ДоговорКонтрагента" ,ТекущийПлатеж.ДоговорКонтрагента);
		КлючЗадолженности.Вставить(КолонкаСчетаФильтра  ,СчетФильтра);
		Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга"  Тогда
			Если не НомерСубконтоРасчетныеДокументы = 0 и не ОбщегоНазначения.ЗначениеНеЗаполнено(ТекущийПлатеж.Сделка) Тогда
				КлючЗадолженности.Вставить("Сделка", ТекущийПлатеж.Сделка);
			КонецЕсли; 
		ИначеЕсли ТекущийПлатеж.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам тогда
			КлючЗадолженности.Вставить("Сделка", ТекущийПлатеж.Сделка);
		КонецЕсли; 

		СуммаКРаспределению = ТекущийПлатеж.СуммаВзаиморасчетов;
		
		Если СуммаКРаспределению<0 Тогда
			Если ТаблицаИтогов.Колонки.Найти("НомерПоПорядку") = неопределено Тогда
				ТаблицаИтогов.Колонки.Добавить("НомерПоПорядку");
			КонецЕсли; 
			
			Для НПП = 1 по ТаблицаИтогов.Количество() Цикл
				ТаблицаИтогов[НПП-1].НомерПоПорядку = НПП;
				
				
			КонецЦикла; 
			
			Построитель = новый ПостроительЗапроса();
			ОписаниеИсточника = новый ОписаниеИсточникаДанных(ТаблицаИтогов.Скопировать());
			
			Построитель.ИсточникДанных = ОписаниеИсточника;
			Построитель.Порядок.Добавить("НомерПоПорядку",,,НаправлениеСортировки.Убыв);
			
			ОтборПостроитель = Построитель.Отбор;
			Для каждого КлючОтбора Из КлючЗадолженности Цикл
				ОтборПостроитель.Добавить(КлючОтбора.Ключ);
				ОтборПостроитель[КлючОтбора.Ключ].Значение= КлючОтбора.Значение;
				ОтборПостроитель[КлючОтбора.Ключ].Использование = Истина;
			КонецЦикла; 
			
			Построитель.Выполнить();

			ЗадолженностьПоСтрокеПлатежа = Построитель.Результат.Выгрузить();
			ЗадолженностьПоСтрокеПлатежа.Колонки.Удалить(ЗадолженностьПоСтрокеПлатежа.Колонки["СуммаОстаток"]);
			ЗадолженностьПоСтрокеПлатежа.Колонки.Удалить(ЗадолженностьПоСтрокеПлатежа.Колонки["ВалютнаяСуммаОстаток"]);
			ЗадолженностьПоСтрокеПлатежа.Колонки.РублеваяСумма.Имя = "СуммаОстаток";
			ЗадолженностьПоСтрокеПлатежа.Колонки.ВалютнаяСумма.Имя = "ВалютнаяСуммаОстаток";
			РаспределениеОтрицательнойСтроки = Истина;
		Иначе 	
			ЗадолженностьПоСтрокеПлатежа = ТаблицаОстатков.НайтиСтроки(КлючЗадолженности);
			РаспределениеОтрицательнойСтроки = Ложь;
		КонецЕсли; 

		ОстаткиВВалюте = НЕ (ТекущийПлатеж.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) 
			             И СчетФильтра.Валютный;

		
		// Учет закрытия задолженности
		Для каждого ЗадолженностьСтрока из ЗадолженностьПоСтрокеПлатежа Цикл
			СуммоваяРазница=0;
			
			Задолженность = ЗадолженностьСтрока[?(ОстаткиВВалюте,"ВалютнаяСуммаОстаток","СуммаОстаток")];
			Если не РаспределениеОтрицательнойСтроки Тогда
				Если СуммаКРаспределению >= Задолженность Тогда
					НужноЗаплатить = Задолженность;
				Иначе
					НужноЗаплатить = СуммаКРаспределению;
				КонецЕсли;
			Иначе
				Если -СуммаКРаспределению >= Задолженность Тогда
					НужноЗаплатить = Задолженность;
				Иначе
					НужноЗаплатить = -СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли; 
			
			Если НужноЗаплатить=0 тогда 
				Продолжить;
			КонецЕсли;
			
			Если ОстаткиВВалюте тогда
				СуммоваяРазница = -Окр(НужноЗаплатить*ЗадолженностьСтрока.СуммаОстаток/ЗадолженностьСтрока.ВалютнаяСуммаОстаток,2);
				ЗадолженностьСтрока.СуммаОстаток = ЗадолженностьСтрока.СуммаОстаток - Окр(НужноЗаплатить*ЗадолженностьСтрока.СуммаОстаток/ЗадолженностьСтрока.ВалютнаяСуммаОстаток,2);
				ЗадолженностьСтрока.ВалютнаяСуммаОстаток = ЗадолженностьСтрока.ВалютнаяСуммаОстаток - НужноЗаплатить;
			Иначе
				ЗадолженностьСтрока.СуммаОстаток = ЗадолженностьСтрока.СуммаОстаток - НужноЗаплатить;
			КонецЕсли;
			
			СтрокаТаблицыИтогов = ТаблицаИтогов.Добавить();
			//Заполнить строчку по текущим данным
			Для каждого Колонка из ТаблицаИтогов.Колонки Цикл
				Если Колонка.Имя = "РублеваяСумма" или Колонка.Имя = "ВалютнаяСумма" или Колонка.Имя = "СуммаВзаиморасчетов" тогда
					Продолжить;
				КонецЕсли;
				
				Если Не(ТаблицаОстатков.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыИтогов[Колонка.Имя] = ЗадолженностьСтрока[Колонка.Имя];
				ИначеЕсли Не(ТаблицаКРаспределению.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					 СтрокаТаблицыИтогов[Колонка.Имя] = ТекущийПлатеж[Колонка.Имя];                                      
				КонецЕслИ;
			КонецЦикла;

			СтрокаТаблицыИтогов.СуммаВзаиморасчетов	= НужноЗаплатить*?(РаспределениеОтрицательнойСтроки,-1,1);
			
			СтрокаТаблицыИтогов.ВалютнаяСумма 	= окр(НужноЗаплатить * (ТекущийПлатеж.ВалютнаяСумма/ТекущийПлатеж.СуммаВзаиморасчетов),2)*?(РаспределениеОтрицательнойСтроки,-1,1);
			СтрокаТаблицыИтогов.РублеваяСумма	= окр(НужноЗаплатить *(ТекущийПлатеж.РублеваяСумма/ТекущийПлатеж.СуммаВзаиморасчетов),2)*?(РаспределениеОтрицательнойСтроки,-1,1);
			
			Если РаспределениеОтрицательнойСтроки Тогда
				СтрокаТаблицыИтогов.РезультатРаспределения = ЗадолженностьСтрока.РезультатРаспределения;
			иначе
				СтрокаТаблицыИтогов.РезультатРаспределения = Истина;	
			КонецЕсли; 
			
			Если Не(НомерСубконтоРасчетныеДокументы = 0) тогда
				СтрокаТаблицыИтогов.Сделка = СтрокаТаблицыИтогов["Субконто"+НомерСубконтоРасчетныеДокументы];
			КонецЕсли;
			
			СуммаКРаспределению = СуммаКРаспределению - НужноЗаплатить*?(РаспределениеОтрицательнойСтроки,-1,1);
			
			ТекущийПлатеж.РублеваяСумма			= ТекущийПлатеж.РублеваяСумма - СтрокаТаблицыИтогов.РублеваяСумма;
			ТекущийПлатеж.ВалютнаяСумма			= ТекущийПлатеж.ВалютнаяСумма - СтрокаТаблицыИтогов.ВалютнаяСумма;
			ТекущийПлатеж.СуммаВзаиморасчетов	= ТекущийПлатеж.СуммаВзаиморасчетов - СтрокаТаблицыИтогов.СуммаВзаиморасчетов;
			
			Если РаспределениеОтрицательнойСтроки Тогда
				СуммоваяРазница = 0;
			ИначеЕсли ОстаткиВВалюте тогда
				СуммоваяРазница = СуммоваяРазница + СтрокаТаблицыИтогов.РублеваяСумма;
			КонецЕсли;
			
			//Изменено 16.07.08 Федотова Л. РГ-Софт
			Если СтрокаТаблицыИтогов.РасчетыВУсловныхЕдиницах = Null 
				ИЛИ НЕ СтрокаТаблицыИтогов.РасчетыВУсловныхЕдиницах Тогда
			
				РасчетыВУсловныхЕдиницах = ЛОЖЬ;
			Иначе
				РасчетыВУсловныхЕдиницах = ИСТИНА;
			КонецЕсли; 
			
			Если РасчетыВУсловныхЕдиницах и не (СуммоваяРазница=0) тогда
			//	
				//Для корректировок стоимости
				//Для корректировок стоимости
				Если ТаблицаСуммовыхРазниц=Неопределено тогда
					СтрокаТаблицыИтогов.РублеваяСумма = СтрокаТаблицыИтогов.РублеваяСумма+СуммоваяРазница;
					Если не ОстаткиВВалюте тогда
						СтрокаТаблицыИтогов.СуммаВзаиморасчетов = СтрокаТаблицыИтогов.СуммаВзаиморасчетов+СуммоваяРазница;
					КонецЕсли;
				//Для суммовых разниц	
				ИначеЕсли НомерСубконтоРасчетныеДокументы =0 тогда
					ОбщегоНазначения.ОшибкаПриПроведении("При закрытии задолженности выявлены суммовые разницы ("+Формат(СуммоваяРазница,"ЧЦ=15;ЧДЦ=2")+"), при этом учет по расчетным документам по счету расчетов не ведется!
					|Невозможно распределить суммовые разницы!",,Заголовок);
				Иначе
					СтрокаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
					СтрокаСуммовыхРазниц.Документ =СтрокаТаблицыИтогов["Субконто"+НомерСубконтоРасчетныеДокументы];
					СтрокаСуммовыхРазниц.СуммоваяРазница = СуммоваяРазница;
					СтрокаСуммовыхРазниц.Счет = СчетФильтра;
					СтрокаСуммовыхРазниц.КоличествоСубконто = СчетФильтра.ВидыСубконто.Количество();
					Для НомерСубконто = 1 по 3 Цикл
						СтрокаСуммовыхРазниц["Субконто"+НомерСубконто] = СтрокаТаблицыИтогов["Субконто"+НомерСубконто];
					КонецЦикла;
					СтрокаСуммовыхРазниц.Контрагент = ТекущийПлатеж.Контрагент;
					СтрокаСуммовыхРазниц.ДоговорКонтрагента =  ТекущийПлатеж.ДоговорКонтрагента;
					СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = ТекущийПлатеж.ВалютаВзаиморасчетов;
					
				КонецЕслИ;
			КонецЕслИ;

			Если СуммаКРаспределению = 0 тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;

		
		Если ТекущийПлатеж.СуммаВзаиморасчетов=0 тогда
			//Распределили полностью!
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыИтогов = ТаблицаИтогов.Добавить();
		//Заполнить строчку по текущим данным
		Для каждого Колонка из ТаблицаИтогов.Колонки Цикл
			Если Не(ТаблицаКРаспределению.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
				 СтрокаТаблицыИтогов[Колонка.Имя] = ТекущийПлатеж[Колонка.Имя];                                      
			КонецЕслИ;
		КонецЦикла;
	КонецЦикла;

КонецФункции

// По документу паратии определяется комитент,
// договор и счет расчетов с ним.
// Возвращаемое значение:
//   Структура – список параметров (комитент, договор
//	 с комитентом и счет расечтов с комитентом).
//
Функция ПараметрыРасчетовСКомитентом(Партия,Отказ,Заголовок) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Комитент",Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("ДоговорКомиссии",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("ВалютаРасчетовСКомитентом", Справочники.Валюты.ПустаяСсылка());
	
	ОрганизацияПоПартии = Справочники.Организации.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партия.Организация,
	|	Партия.Контрагент,
	|	Партия.ДоговорКонтрагента,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.Партия КАК Партия
	|
	|ГДЕ
	|	Партия.Ссылка = &Партия";

	Запрос.УстановитьПараметр("Партия", Партия);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Параметры.Вставить("Комитент",     				РезультатЗапроса.Комитент);
		Параметры.Вставить("ДоговорКомиссии",      		РезультатЗапроса.Договор);
		Параметры.Вставить("СчетРасчетовСКомитентом",	РезультатЗапроса.СчетРасчетов);
		Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом",	РезультатЗапроса.СчетАвансов);
		Параметры.Вставить("ВалютаРасчетовСКомитентом", РезультатЗапроса.ВалютаРасчетов);
		ОрганизацияПоПартии = РезультатЗапроса.Организация;
	КонецЕсли;
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
		СчетаРасчетов = ПолучитьСчетаРасчетовСКонтрагентом(ОрганизацияПоПартии, Параметры.Комитент, Параметры.ДоговорКомиссии);
		Параметры.Вставить("СчетРасчетовСКомитентом",	СчетаРасчетов.СчетРасчетовСКомитентом);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Партия) тогда
				ОбщегоНазначения.ОшибкаПриПроведении("При списании комиссионных товаров не определена партия оприходования.
				|Невозможно определить счет расчетов с комитентом.",Отказ,Заголовок);
			Иначе	
				ОбщегоНазначения.ОшибкаПриПроведении("Невозможно определить счет расчетов с комитентом при списании комиссионных товаров по партии """+Строка(Партия)+"""",Отказ,Заголовок);
			КонецЕслИ;
		Иначе
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Партия) тогда
				ОбщегоНазначения.СообщитьОбОшибке("При списании комиссионных товаров не определена партия оприходования.
				|Счет расчетов с комитентом определяется по общим настройкам.",,Заголовок);
			Иначе	
				ОбщегоНазначения.СообщитьОбОшибке("В партии комиссионных товаров """+Строка(Партия)+""" не указан счет учета расчетов с комитентом.
				|Счет расчетов с комитентом определяется по реквизитам партии (организация, контрагент, договор).",,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Параметры;

КонецФункции // ПараметрыРасчетовСКомитентом()

Процедура ЗачестьАвансПоРасчетамСКомитентом(ДокументОбъект,СтруктураШапкиДокумента,ВыручкаПоБУ,Отказ,Заголовок) экспорт

	ТаблицаВыручкиПоСтроке = ВыручкаПоБУ.Скопировать();

	Для каждого СтрокаРасчетов из  ВыручкаПоБУ Цикл

		ТаблицаВыручкиПоСтроке.Очистить();

		СтруктураШапкиДокументаДляЗачетаАванса = Новый Структура();

		Для каждого Параметр из СтруктураШапкиДокумента Цикл
			СтруктураШапкиДокументаДляЗачетаАванса.Вставить(Параметр.Ключ,Параметр.значение);
		КонецЦикла;

		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("СчетУчетаРасчетовСКонтрагентом",СтрокаРасчетов.СчетРасчетовСКомитентом);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("СчетУчетаРасчетовПоАвансам",СтрокаРасчетов.СчетРасчетовПоАвансамСКомитентом);

		Если не СтруктураШапкиДокумента.ВалютаДокумента =  СтрокаРасчетов.ВалютаРасчетовСКомитентом тогда
			ДанныеОВалютеРасчетовСКомитентом = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаРасчетов.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокументаДляЗачетаАванса.Вставить("ВалютаДокумента",     СтрокаРасчетов.ВалютаРасчетовСКомитентом);
			СтруктураШапкиДокументаДляЗачетаАванса.Вставить("КурсДокумента",       ДанныеОВалютеРасчетовСКомитентом.Курс);
			СтруктураШапкиДокументаДляЗачетаАванса.Вставить("КратностьДокумента",  ДанныеОВалютеРасчетовСКомитентом.Кратность);
		КонецЕсли;

		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("ВалютаВзаиморасчетов",    СтрокаРасчетов.ВалютаРасчетовСКомитентом);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("Контрагент",              СтрокаРасчетов.Комитент);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("ДоговорКонтрагента",      СтрокаРасчетов.ДоговорКомиссии);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("ВедениеВзаиморасчетов",   СтрокаРасчетов.ДоговорКомиссии.ВедениеВзаиморасчетов);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("РасчетыВУсловныхЕдиницах",СтрокаРасчетов.ДоговорКомиссии.РасчетыВУсловныхЕдиницах);
		СтруктураШапкиДокументаДляЗачетаАванса.Вставить("ВидОперации","КомиссионнаяВыручка");

		СтрокаТаблицыВыручки = ТаблицаВыручкиПоСтроке.Добавить();

		Для каждого Колонка из ТаблицаВыручкиПоСтроке.Колонки Цикл
			СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаРасчетов[Колонка.Имя];
		КонецЦикла;

		ЗачетАванса(ДокументОбъект,СтруктураШапкиДокументаДляЗачетаАванса,Истина, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		            Новый Структура("ВыручкаПоКомиссии",ТаблицаВыручкиПоСтроке), Отказ,Заголовок);

	КонецЦикла;

КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ ПОЛЬЗОВАТЕЛЯ (ОТСУТСТВУЮТ НА СЕРВЕРЕ И ВО ВНЕШНЕМ СОЕДИНЕНИИ)

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект,СписокВидовДоговоров = Неопределено,СтруктураДополнительныхПараметров = Неопределено,
	                                      НаименованиеРеквизитаДоговора = "", НаименованиеРеквизитаКонтрагента = "") Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(НаименованиеРеквизитаКонтрагента) Тогда
	    НаименованиеРеквизитаКонтрагента = "Контрагент";
	КонецЕсли;
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(НаименованиеРеквизитаДоговора) Тогда
	    НаименованиеРеквизитаДоговора = "ДоговорКонтрагента";
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитДокумента(НаименованиеРеквизитаДоговора, МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект[НаименованиеРеквизитаКонтрагента]) Тогда 
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			ДоговорКонтрагента = УправлениеПользователями.ДоступныйДоговорКонтрагента(ДокументОбъект[НаименованиеРеквизитаКонтрагента].ОсновнойДоговорКонтрагента);
		КонецЕсли;

		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) и ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
				//Фильтр по организации не вклчается, договор подходит.	
			ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
				//принадлежит организации из документа, договор подходит.	
			Иначе
				//Договор не подходит. Очистим поле договора в документе.
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // Очистить старый договор
			КонецЕсли;
		КонецЕсли;

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) 
		   И (ТипЗнч(СписокВидовДоговоров) = Тип("СписокЗначений") И НЕ (СписокВидовДоговоров.Количество() = 0)) Тогда
			ВидДоговора = ДоговорКонтрагента.ВидДоговора;
			Если СписокВидовДоговоров.НайтиПоЗначению(ВидДоговора) = Неопределено тогда
				//Договор не подходит. Очистим поле договора в документе.
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // Очистить старый договор
			КонецЕсли;
		КонецЕсли;

		// Дополнительно профильтруем по отбору, переданному отдельно.
		Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") 
		   И НЕ (СтруктураДополнительныхПараметров.Количество() = 0) Тогда
		   
			Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл
				СтруктураОтбора = ЭлементСтруктуры.Значение;
				
				ЗначениеОтбора     = Неопределено;
				ВидСравненияОтбора = Неопределено;

				Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда
					Если не СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
						ВидСравненияОтбора = ВидСравнения.Равно;
					КонецЕсли;
					
					//Отрабатываем только два варианта - равенство/не равенство
					Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
						Если не ДоговорКонтрагента[ЭлементСтруктуры.Ключ] = ЗначениеОтбора Тогда
							ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
							прервать;
						КонецЕсли; 
					ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
						Если ДоговорКонтрагента[ЭлементСтруктуры.Ключ] = ЗначениеОтбора Тогда
							ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
							прервать;
						КонецЕсли; 
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Вид сравнения <"+строка(ВидСравненияОтбора) +"> при автоматическом подборе договора не может быт отработан.",,,СтатусСообщения.Информация);
					КонецЕсли; 
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; // Дополнительно профильтруем по отбору, переданному отдельно. 
		
		//Заполняем организацию, если она пустая
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) 
			и ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
			и ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = ДоговорКонтрагента.Организация;
		КонецЕсли;
		
		ДокументОбъект[НаименованиеРеквизитаДоговора] = ДоговорКонтрагента;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект[НаименованиеРеквизитаКонтрагента] Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  СпособЗаполненияЦен          - значение перечисления "Способы заполнения цен", определяет по какому из 
//								   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов   - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                 до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента - структура, задает список обрабатываемых реквизитов документа;
// 								   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                  - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                 если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	         - имя табличной части
//  СтарыйДоговорКонтрагента  - старый договор контрагента, который был до изменения
//  СтруктураЗначений			 - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Процедура ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
								 СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
								 СтарыйДоговорКонтрагента = Неопределено,
								 СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Договор = ДокументОбъект.ДоговорКонтрагента;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Договор) Тогда
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДокументОбъект.Дата);

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;

		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя

		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		 Или (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда

			ТекстПредупреждения = "В документе можно выбирать только договора с "
								+ ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами")+"!"+Символы.ПС;
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) 
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			Предупреждение(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;                                        
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли; 

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли Не ОбщегоНазначения.ЗначениеНеЗаполнено(Договор)
			И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.

			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
						   |Будет восстановлен старый договор.");
			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
	КонецЕсли; 

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Если  Договор.РасчетыВУсловныхЕдиницах И Договор.Курс > 0 Тогда
					ДокументОбъект.КурсВзаиморасчетов  = Договор.Курс;
				Иначе
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
			|отличные от установленных в документе:";
				
		// Валюта документа
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
		   И (Не ОбщегоНазначения.ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
								 "Валюта документа: """ +
								?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
								  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
								 "Тип цен документа: """ +
								 ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
								   """, договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				РаботаСДиалогами.ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

			Иначе

				ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов И ДокументОбъект.КурсВзаиморасчетов = 0
				   И ЕстьКратностьВзаиморасчетов И ДокументОбъект.КратностьВзаиморасчетов = 0 Тогда
 					Если Договор.РасчетыВУсловныхЕдиницах И Договор.Курс <> 0 Тогда
						ДокументОбъект.КурсВзаиморасчетов  = Договор.Курс;
                    Иначе
						СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
						Если ЕстьКурсВзаиморасчетов Тогда
							ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			   И (Не ОбщегоНазначения.ЗначениеНеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
				СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					Если Договор.РасчетыВУсловныхЕдиницах И Договор.Курс <> 0 Тогда
						ДокументОбъект.КурсВзаиморасчетов  = Договор.Курс;
					Иначе
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
		   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

			ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"+Символы.ПС;
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) 
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			Предупреждение(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()

Процедура ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
										ПлатежиСписком,КурсДокумента,КратностьДокумента) Экспорт

	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДоговорКонтрагента",ЗначениеВыбора.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Сделка",ЗначениеВыбора.Сделка);
	//Изменил Трефиленков Дмитрий, РГ-Софт
	СтруктураОтбора.Вставить("СчетНаПредоплату",ЗначениеВыбора.СчетНаПредоплату);
	СтруктураОтбора.Вставить("НомерСчета",ЗначениеВыбора.НомерСчета);
	СтруктураОтбора.Вставить("НомерLawson",ЗначениеВыбора.НомерLawson);
	//конец изменения
	
	СтрокаРасшифровки = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(РасшифровкаПлатежа, СтруктураОтбора);

	Если СтрокаРасшифровки <> Неопределено Тогда

		СтрокаПлатеж=СтрокаРасшифровки;
		СтрокаПлатеж.СуммаПлатежа            = ЗначениеВыбора.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = ЗначениеВыбора.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ЗначениеВыбора.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов     = ЗначениеВыбора.СуммаВзаиморасчетов;

	Иначе

		Если НЕ (РасшифровкаПлатежа.Количество() = 1 И НЕ ПлатежиСписком) Тогда
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		КонецЕсли;

		СтрокаПлатеж.ДоговорКонтрагента      = ЗначениеВыбора.ДоговорКонтрагента;
		//Изменил Трефиленков Дмитрий, РГ-Софт
		СтрокаПлатеж.СчетНаПредоплату      	 = ЗначениеВыбора.СчетНаПредоплату;
		СтрокаПлатеж.НомерСчета      	 	 = ЗначениеВыбора.НомерСчета;
		СтрокаПлатеж.НомерLawson      	 	 = ЗначениеВыбора.НомерLawson;
		Если ТипЗнч(ЗначениеВыбора.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или ТипЗнч(ЗначениеВыбора.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")  Тогда
			Если ЗначениеВыбора.Сделка.Товары.Количество() > 0 Тогда
				СтрокаПлатеж.СтавкаНДС     	 	 = ЗначениеВыбора.Сделка.Товары[0].СтавкаНДС;
			ИначеЕсли ЗначениеВыбора.Сделка.Услуги.Количество() > 0 Тогда
				СтрокаПлатеж.СтавкаНДС     	 	 = ЗначениеВыбора.Сделка.Услуги[0].СтавкаНДС;
			КонецЕсли;
		КонецЕсли; 
		//конец изменения
		СтрокаПлатеж.Сделка                  = ЗначениеВыбора.Сделка;
		СтрокаПлатеж.СуммаПлатежа            = ЗначениеВыбора.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = ЗначениеВыбора.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ЗначениеВыбора.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов     = ЗначениеВыбора.СуммаВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбораЗадолженностей()

Процедура ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт

	ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);

	ФормаВыбора.Организация        = СтруктураПараметров.Организация;
	ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
	ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
	ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
	//Закомментировал РГ-Софт - Иванов Антон - 2009-09-14
	//В структуре параметров нет такого ключа
	//ФормаВыбора.Счет               = СтруктураПараметров.СчетДляОпределенияОстатков;
	ФормаВыбора.ОстаткиОбороты     = СтруктураПараметров.СторонаСчета;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.мТипыДокументов    = ТипыДокументов;
	Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
		ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
		ФормаВыбора.мПереданИнтервал = Истина;
	Иначе
		ФормаВыбора.мПереданИнтервал = Ложь;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры печати для расчетов в у.е.

// Печатает расчет-справку для УЕ
//
// Параметры:
//  ДокументСсылка - ссылка на документ, справку по которому печатаем
Процедура ПечатьСправкаРасчетУЕРегл(ДокументСсылка) экспорт

	ПечатьДвиженийДокумента          = Отчеты.РасчетСправкаФормированиеСтоимостиУЕ.Создать(); // Получим контекст отчета
	ПечатьДвиженийДокумента.Документ = ДокументСсылка;                     //Установим реквизиты и переменые отчета
	ПечатьДвиженийДокумента.СформироватьИВывестиОтчет();                           // Напечатаем движения

КонецПроцедуры // РаботаСДиалогами.НапечататьДвиженияДокумента()

#КонецЕсли
