///////////////////////////////////////////////////////////////////////////////
// РАБОТА С БАНКОВСКИМИ ДОКУМЕНТАМИ

// Форматирует сумму банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо отформатировать
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

// Форматирует сумму прописью банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаРусском;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

Функция СвойстваВладельцаСчета(ВладелецСчета)
	
	ЭтоОрганизация = ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации");
	ЭтоФизическоеЛицо = ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.ФизическиеЛица");
	
	Если ЭтоОрганизация Тогда
		Если ЗначениеЗаполнено(ВладелецСчета) Тогда
			Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСчета,
				"Наименование, НаименованиеПолное, НаименованиеСокращенное,
				|НаименованиеПлательщикаПриПеречисленииВБюджет, ВариантНаименованияДляПечатныхФорм");
		Иначе
			Возврат Новый Структура("Наименование, НаименованиеПолное, НаименованиеСокращенное,
				|НаименованиеПлательщикаПриПеречисленииВБюджет, ВариантНаименованияДляПечатныхФорм",
				"", "", "", "", ВладелецСчета.ВариантНаименованияДляПечатныхФорм);
		КонецЕсли;
	ИначеЕсли ЭтоФизическоеЛицо Тогда
			Возврат Новый Структура("Наименование, НаименованиеПолное",
				ВладелецСчета.Наименование, ВладелецСчета.ФИО);
	Иначе
		Если ЗначениеЗаполнено(ВладелецСчета) Тогда
			Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСчета,
				"Наименование, НаименованиеПолное");
		Иначе
			Возврат Новый Структура("Наименование, НаименованиеПолное",
				"", "");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СвойстваБанковскогоСчета(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет,
			"Банк, НомерСчета, БанкДляРасчетов, ТекстКорреспондента");
	Иначе
		Возврат Новый Структура("Банк, НомерСчета, БанкДляРасчетов, ТекстКорреспондента",
			БанковскийСчет.Банк, "", БанковскийСчет.БанкДляРасчетов, "");
	КонецЕсли;
	
КонецФункции

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной валюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	Если ТипЗнч(Счет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",    ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",           Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты", СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	ИначеЕсли ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.ФизическиеЛица");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьНовыйСчет = Счет <> НовыйСчет;
	Если ПолучитьНовыйСчет Тогда
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Счет = НовыйСчет;
		Иначе
			СвойствоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Владелец, ВалютаДенежныхСредств");
			Если СвойствоСчета.Владелец <> ВладелецСчета
				ИЛИ СовпадениеВалюты И СвойствоСчета.ВалютаДенежныхСредств <> Валюта Тогда
				Счет = НовыйСчет;
			Иначе
				ПолучитьНовыйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьНовыйСчет;
	
КонецФункции // УстановитьБанковскийСчет

Функция ОпределитьРегистрациюВНалоговомОргане(УчетныеДанные, Организация) Экспорт
	
	ТипРегистрацияВНалоговомОргане = Тип("СправочникСсылка.РегистрацииВНалоговомОргане");
	РегистрацияВНалоговомОргане = Организация.РегистрацияВНалоговомОргане;
	Для НомерСубконто = 1 По 3 Цикл
		ЗначениеСубконто = УчетныеДанные["Субконто" + НомерСубконто];
		Если ТипЗнч(ЗначениеСубконто) = ТипРегистрацияВНалоговомОргане Тогда
			РегистрацияВНалоговомОргане = ЗначениеСубконто;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

// Возвращает список программ типа "Клиент банка", имеющих сертификат 1С:Совместимо
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   <СписокЗначений>   - список наименований программ
//
Функция СписокСовместимыхПрограммКлиентовБанка(ВернутьВМассиве = Истина) Экспорт

	Если ВернутьВМассиве Тогда
		СписокКБ = Новый Массив;
	Иначе
		СписокКБ = Новый СписокЗначений;
	КонецЕсли; 
	
	СписокКБ.Добавить("DiasoftCLIENT 4x4 for Windows ЗАО ""Диасофт""");
	СписокКБ.Добавить("iBank 2 компании ""БИФИТ""");
	СписокКБ.Добавить("isFront - Система дистанционного управления финансами");
	СписокКБ.Добавить("LanVisit DOS 4.90 Ланит");
	СписокКБ.Добавить("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
	СписокКБ.Добавить("WinClient ЗАО ""МПИ-Банк""");
	СписокКБ.Добавить("Yugo-Vostok Online ОАО БАНК ""ЮГО-ВОСТОК""");
	СписокКБ.Добавить("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
	СписокКБ.Добавить("АРМ ""Электронный клиент"" от НОМОС-БАНК-Сибирь");
	СписокКБ.Добавить("ИНИСТ Банк-Клиент ЗАО ""ИНИСТ""");
	СписокКБ.Добавить("Клиент банка InterBank v.5.1 R-Style Software Lab");
	СписокКБ.Добавить("Клиент-банк ""BARS"" фирмы ""Оникс Капитал""");
	СписокКБ.Добавить("Клиент-банк АКБ ""Лефко-Банк""");
	СписокКБ.Добавить("Клиент-банк ""МИБ"" АКБ ""Московский Индустриальный банк""");
	СписокКБ.Добавить("Клиент-Банк ОАО ""Прио-Внешторгбанк""");	
	СписокКБ.Добавить("Клиент-Банк РФК");
	СписокКБ.Добавить("Клиент-ТЕЛЕБАНК ЗАО ""Степ Ап""");
	СписокКБ.Добавить("Комплекс обмена платежными документами ""Курьер"". ЗАО ""АстраСофт""");
	СписокКБ.Добавить("Система ""MailBank"" фирмы ""Системные технологии""");
	СписокКБ.Добавить("Система ""PSB On-Line"" ОАО ""ПРОМСВЯЗЬБАНК""");
	СписокКБ.Добавить("Система ""ВЕДАНА"" фирмы ""Анива""");
	СписокКБ.Добавить("Система ""ДБО BS-Client"" ООО ""Банк Софт Системс""");
	СписокКБ.Добавить("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
	СписокКБ.Добавить("Система ""Клиент-Банк"" ЗАО ""Банк ""Новый Символ""");
	СписокКБ.Добавить("Система ""Электронный Офис"" ЗАО ""Райффайзенбанк""");
	СписокКБ.Добавить("Система ""Электронный Офис"" ОАО ""ИМПЭКСБАНК""");
	СписокКБ.Добавить("Система Банк-Клиент АКБ ""София""");
	СписокКБ.Добавить("Система Клиент-Банк ""BClient""");
	СписокКБ.Добавить("Система клиент-банк ""TIVAL""");
	СписокКБ.Добавить("Система электронных расчетов QuickPay ЗАО ""АО Кворум""");
	СписокКБ.Добавить("ЦФТ - Интернет-банк (Faktura.ru) фирмы ""Центр финансовых технологий""");
	СписокКБ.Добавить("Электронный клиент АКБ ""Автобанк""");
	
	Возврат СписокКБ;
	
КонецФункции 

Функция ПолучитьСтавкуНДСПоДоговору(Знач ДоговорКонтрагента) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат СтавкаНДС;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ПредъявляетНДС, УчетАгентскогоНДС, ВидДоговора");
	
	Если (ЗначенияРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ ЗначенияРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		ИЛИ ЗначенияРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		ИЛИ ЗначенияРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		И НЕ ЗначенияРеквизитов.ПредъявляетНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.УчетАгентскогоНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция УстановитьВремяДокумента(Знач Дата) Экспорт
	
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	Иначе
		ДатаДокумента = КонецДня(Дата);
	КонецЕсли;
	
	Возврат ДатаДокумента;
	
КонецФункции

// Заполняет реквизиты платежного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыПлатежногоДокумента(ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтавкаНДС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
	   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		УстановитьБанковскийСчет(ДокументОбъект.СчетКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	
КонецПроцедуры 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКОВ ОБНОВЛЕНИЯ НА НОВУЮ ВЕРСИЮ

// Банки

// Очистим справочник Банки от неиспользуемых элементов
// 
Процедура ОчиститьБанкиОтНеиспользуемыхЭлементов() Экспорт
	
	// удалим элементы, на которые нет ссылок
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Банк КАК Банк
	|ПОМЕСТИТЬ ВТ_АктуальныеБанки
	|ИЗ
	|	(ВЫБРАТЬ
	|		БанковскиеСчета.Банк КАК Банк
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БанковскиеСчета.БанкДляРасчетов
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(УдалитьСоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Банки)
	|	ИЗ
	|		РегистрСведений.УдалитьСоответствияОбъектовИнформационныхБаз КАК УдалитьСоответствияОбъектовИнформационныхБаз
	|	ГДЕ
	|		УдалитьСоответствияОбъектовИнформационныхБаз.ТипИсточника = ""СправочникСсылка.Банки""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УдалитьЛицевыеСчетаРаботниковОрганизации.Банк
	|	ИЗ
	|		РегистрСведений.УдалитьЛицевыеСчетаРаботниковОрганизации КАК УдалитьЛицевыеСчетаРаботниковОрганизации) КАК ВложенныйЗапрос
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.Банк, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|	И ВложенныйЗапрос.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Банк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеБанки КАК ВТ_АктуальныеБанки
	|		ПО Банки.Ссылка = ВТ_АктуальныеБанки.Банк
	|ГДЕ
	|	НЕ Банки.Ссылка.ЭтоГруппа
	|	И ВТ_АктуальныеБанки.Банк ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивБанков.ВГраница() Цикл
		БанкОбъект = МассивБанков[инд].ПолучитьОбъект();
		БанкОбъект.ОбменДанными.Загрузка = Истина;
		БанкОБъект.Удалить();
	КонецЦикла;
	
	// удалим пусты группы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Банки.Родитель КАК Родитель
	|ПОМЕСТИТЬ ВТ_АктуальныеРегионы
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	НЕ Банки.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеРегионы КАК ВТ_АктуальныеРегионы
	|		ПО Банки.Ссылка = ВТ_АктуальныеРегионы.Родитель
	|ГДЕ
	|	Банки.ЭтоГруппа
	|	И ВТ_АктуальныеРегионы.Родитель ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивГруппБанков.ВГраница() Цикл
		РегионОбъект = МассивГруппБанков[инд].ПолучитьОбъект();
		РегионОбъект.ОбменДанными.Загрузка = Истина;
		РегионОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Документы

// Процедура устанавливает Статью ДДС в банковски и кассовых документах
// из ТЧ РасшифровкаПлатежа в шапку документа, для "прочих" операций
// в которых ТЧ РасшифровкаПлатежа не используется
//
Процедура УстановитьВДокументахСтатьюДДСИзРасшифровкаПлатежа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ОчищатьРасшифровку,
	|	МАКСИМУМ(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога))
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПрочийПриход)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке))
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	ИСТИНА,
	|	МАКСИМУМ(РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПрочийРасход)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога))
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ВыборкаДокументов.СтатьяДвиженияДенежныхСредств;
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			
			Если НЕ ВыборкаДокументов.ОчищатьРасшифровку Тогда
				НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаПлатежа = ДокументОбъект.СуммаДокумента;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ВернутьСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура очищает в банковски документах 
// ТЧ РасшифровкаПлатежа для отдельных операций
//
Процедура ОчиститьВДокументахРасшифровкуПлатежа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)";
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаДепонентов);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.УплатаНалога);
	
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ВернутьСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура копирует значение из реквизита объекта СуммаУслуг
// в реквизит ТЧ РасшифровкаПлатежа СуммаУслуг документа ПоступлениеНаРасчетныйСчет
//
Процедура УстановитьСуммуУслугВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг КАК СуммаУслуг
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг > 0
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам)";
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.РасшифровкаПлатежа[0].СуммаУслуг = ВыборкаДокументов.СуммаУслуг;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ВернутьСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура копирует значение из реквизита объекта КурсНаДатуПриобретенияРеализацииВалюты
// в реквизит ТЧ РасшифровкаПлатежа КурсНаДатуПриобретенияРеализацииВалюты документа ПоступлениеНаРасчетныйСчет
//
Процедура УстановитьКурсНаДатуПриобретенияРеализацииВалютыВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.КурсНаДатуПриобретенияРеализацииВалюты <> 0
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
				СтрокаРасшифровкиПлатежа.КурсНаДатуПриобретенияРеализацииВалюты
					= ВыборкаДокументов.КурсНаДатуПриобретенияРеализацииВалюты;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ВернутьСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьРКОПоВыплатеДепонентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = ВыборкаДокументов.ФизическоеЛицо;
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ФизическоеЛицо) Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет строку в пустую ТЧ РасшифровкаПлатежа и заполняет значение из реквизита объекта СуммаДокумента
// в реквизит ТЧ РасшифровкаПлатежа СуммаПлатежа документа ПоступлениеНаРасчетныйСчет
//
Процедура ВернутьСтрокуВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС_ПрочееПоступление() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеНаРасчетныйСчет.Ссылка,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление)
	|	И ПоступлениеНаРасчетныйСчет.СуммаДокумента <> ЕСТЬNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа, 0)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.СуммаПлатежа = ВыборкаДокументов.СуммаДокумента;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ВернутьСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ИсправитьОчередностьПлатежаВРеквизитахДляУплатыВБюджет() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.ОчередностьПлатежа = 3 ИЛИ Запись.ОчередностьПлатежа = 4 ИЛИ Запись.ОчередностьПлатежа = 6 Тогда
			
			Запись.ОчередностьПлатежа = 5;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры
