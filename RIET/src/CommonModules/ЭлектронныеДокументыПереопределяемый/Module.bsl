////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	//  начало примера
	
	// Для обмена по форматам ФНС
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	// Для обмена по форматам CML 2
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	
	// Для обмена между банками
	Массив.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
	Массив.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
	Массив.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
	
	// Для обмена между организациями
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	
	//  конец примера
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	//  начало примера
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
		Иначе
			ПараметрыЭД.ВидЭД = Источник.ВидЭлектронногоДокумента;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			Если ФорматCML Тогда
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				Если Источник.Товары.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
				ИначеЕсли Источник.Услуги.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
				КонецЕсли;
			Иначе
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				Если Источник.Товары.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				ИначеЕсли Источник.Услуги.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				КонецЕсли;
				Если ЭтоКорректировочныйДокумент(Источник.Ссылка) Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда

		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		Для Каждого Строка Из Источник.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ЗначениеЗаполнено(Строка.ДокументОснование.Контрагент) Тогда
				ПараметрыЭД.Контрагент = Строка.ДокументОснование.Контрагент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	//  начало примера
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	// Электронные документы
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Банки",       "КлассификаторБанковРФ");
	// Конец электронные документы
	
	//  начало примера
	//СоответствиеСправочников.Вставить("Партнеры",                    "Партнеры");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов",        "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	//СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков",     "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "КлассификаторЕдиницИзмерения");
	//  конец примера
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	//  начало примера
	СоответствиеПеречислений.Вставить("НДС",                      "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮридическоеФизическоеЛицо","ЮридическоеФизическоеЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом",   "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты",              "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета",            "СпособРасчета");
	//  конец примера
	
КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соответствия - имя переменной, используемой в коде библиотеки;
//  Значение соответствия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	
	//СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных",        "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "НаименованиеСокращенное");
		
КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	СоответствиеФО.Вставить("ИспользоватьПартнеровИКонтрагентов", "ИспользоватьПартнеровИКонтрагентов");
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	//  начало примера
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьСоответствиеСтавокНДС.
// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	//  начало примера
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактураВыданный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  СтруктураКлючевыхРеквизитов - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	//  начало примера
	Если ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Валюта, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("ПрограммноеОбеспечение", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями"
		ИЛИ ИмяОбъекта = "Документ.ВозвратТоваровМеждуОрганизациями" Тогда
		
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СуммаДокумента, ОрганизацияПолучатель, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПокупателя" Тогда  // для сравнения при загрузке
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, ВыставленВЭлектронномВиде");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СписаниеБезналичныхДенежныхСредств" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, СчетОрганизации, СчетКонтрагента,
			|ОчередностьПлатежа, НазначениеПлатежа, СуммаДокумента, ПлатежВБюджет, СтатусСоставителя, ПоказательТипа,
			|КодБК, КодОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ВидПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.Операция" Тогда  // для сравнения при загрузке
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
	
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом данных ФНС

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ВключатьУслуги = Истина;
	
	//Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//	ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	//	ДанныеДляПечати = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	//Иначе
	//	ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	//	ДанныеДляПечати = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	//КонецЕсли;
	
	// { RG-Soft ЭДО
	Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда  
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли; // } RG-Soft ЭДО
	
	ДанныеДляПечати = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	
	Если ДанныеДляПечати.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик", "Юр");
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт");
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеДата",
									РеквизитыШапки.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеНомер",
									РеквизитыШапки.ОснованиеНомер);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если ДанныеСтроки.СуммаБезНДС + ДанныеСтроки.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		СтрокаТаблицыДокумента.Номенклатура             = ДанныеСтроки.Товар;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыДокумента.КодТовара                = ДанныеСтроки.ТоварКод;
		СтрокаТаблицыДокумента.ЕдиницаИзмерения         = ДанныеСтроки.Товар.БазоваяЕдиницаИзмерения.Наименование;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод        = СокрЛП(ДанныеСтроки.Товар.БазоваяЕдиницаИзмерения.КодПоОКЕИ);
		СтрокаТаблицыДокумента.МассаНетто               = ДанныеСтроки.Количество;
		
		СтрокаТаблицыДокумента.СуммаСНДС	= ДанныеСтроки.СуммаСНДС;
		СтрокаТаблицыДокумента.СуммаНДС		= ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС	= ДанныеСтроки.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС	= ДанныеСтроки.СтавкаНДС;
		СтрокаТаблицыДокумента.Цена			= ДанныеСтроки.Цена;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест)
			И ЗначениеЗаполнено(ДанныеСтроки.ВидУпаковки) Тогда
			СтрокаТаблицыДокумента.КоличествоМест        = ДанныеСтроки.КоличествоМест;
			СтрокаТаблицыДокумента.КоличествоВОдномМесте = ДанныеСтроки.КоличествоВОдномМесте;
			СтрокаТаблицыДокумента.ВидУпаковки           = ДанныеСтроки.ВидУпаковкиНаименование;
			СтрокаТаблицыДокумента.Упаковка              = ДанныеСтроки.ВидУпаковки;
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаПодписанияДокумента);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	//  начало примера
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
	//  конец примера
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	//Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//	ТаблицаСведенийАктаОбОказанииУслуг = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
	//	ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	//Иначе
	//	ТаблицаСведенийАктаОбОказанииУслуг = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
	//	ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	//КонецЕсли;
	
	// { RG-Soft ЭДО
	Если СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда  
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе 
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли; // } RG-Soft ЭДО

	ТаблицаСведенийАктаОбОказанииУслуг = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
	
	Если ТаблицаСведенийАктаОбОказанииУслуг.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ТаблицаСведенийАктаОбОказанииУслуг[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   РеквизитыШапки.НомерДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик,  РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Получатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик", "Юр");
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = ВернутьСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ТабличнаяЧасть);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры     = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),СокрЛП(Строка.ЕдиницаИзмеренияКод), "796");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),СокрЛП(Строка.ЕдиницаИзмеренияНаименование), "шт");
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество;
		СтрокаТаблицыДокумента.Описание                     = Строка.НоменклатураНаименование;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, Окр(СтрокаТаблицыДокумента.СуммаБезНДС/СтрокаТаблицыДокумента.Количество,2));
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаУслуг);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);

КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	//  начало примера

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
	//  конец примера
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭтотОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	ТипОснования = ТипЗнч(ЭтотОбъект.ДокументОснование);
		
	Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФнаАванс();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();   			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСВП();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтчетКомитентуОПродажах(ЭтотОбъект.ДокументОснование);
	//-> RG-Soft VIvanov 01/08/12
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") И НЕ ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление  Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСчетуКнигиПокупок();
	//-> Пахоменков 24.05.2013
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеОтчетАгентаПоРасходам();  	
	ИначеЕсли ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление
		      И (ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") ИЛИ ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И ЭтотОбъект.ОтчетАгентаПоРасходам.БезПодбораВаучера) 
		      И ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФПеревыставление();
	//<-
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда   
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтражениюРеализацииТоваровИУслугНДС();
	КонецЕсли;
	//<-                     

	Дата = ЭтотОбъект.Дата;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", ЭтотОбъект.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  Дата);
	
	Если ЭтотОбъект.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ЭтотОбъект.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  Дата);
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Покупатель, Дата);
	
	Если ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		//Нужно ли доделать для "Подразделения Организаций"? - пока для Организации
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Организация, Дата);
	Иначе 
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Поставщик, Дата);
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр");
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель)ИЛИ (ДанныеДляПечати.Грузоотправитель = "он же") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Грузоотправитель, Дата), "СведенияОГрузоотправителе.Грузоотправитель");
	КонецЕсли;
	
	Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель) ИЛИ (ДанныеДляПечати.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, ДанныеДляПечати.Грузополучатель);
	ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ПолучитьДанныеЮрФизЛица(Грузополучатель, Дата), "Грузополучатель");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПечати.Валюта, "Код"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ЭтотОбъект.ДокументыОснования);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		//Если Строка.Стоимость + Строка.СуммаНДС = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.Цена         = Строка.Цена;
		НоваяСтрока.СуммаБезНДС  = Строка.СуммаБезНДСРуб;
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДСРуб;
		НоваяСтрока.СуммаСНДС    = Строка.СуммаБезНДСРуб + Строка.СуммаНДСРуб;
		НоваяСтрока.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
		НоваяСтрока.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		НоваяСтрока.Акциза      = "без акциза";
		
		НоваяСтрока.Номенклатура   = Строка.Товар;
		НоваяСтрока.Упаковка       = Строка.ЕдиницаИзмерения;
		
		//НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		//НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", Строка.ЕдиницаИзмеренияНаименование);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	//Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
	Для Каждого ПлатежныйДокумент ИЗ ЭтотОбъект.ДатаНомерДокументовОплаты Цикл
		НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
		НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаПлатежноРасчетногоДокумента;
		НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерПлатежноРасчетногоДокумента;
	КонецЦикла;
	//КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаБезНДСВсего", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаСНДСВсего",  ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаНДСВсего",   ТаблицаТоваров.Итог("СуммаНДС"));
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);

	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭтотОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	ТипОснования = ТипЗнч(ЭтотОбъект.ДокументОснование);
		
	Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФнаАванс();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();   			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСВП();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтчетКомитентуОПродажах(ЭтотОбъект.ДокументОснование);
	//-> RG-Soft VIvanov 01/08/12
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") И НЕ ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление  Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСчетуКнигиПокупок();
	//-> Пахоменков 24.05.2013
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеОтчетАгентаПоРасходам();  	
	ИначеЕсли ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление
		      И (ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") ИЛИ ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И ЭтотОбъект.ОтчетАгентаПоРасходам.БезПодбораВаучера) 
		      И ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) Тогда
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФПеревыставление();
	//<-
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда   
		ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтражениюРеализацииТоваровИУслугНДС();
	КонецЕсли;
	//<-                     

	Дата = ЭтотОбъект.Дата;

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", ЭтотОбъект.НомерИсправляемогоКорректировочногоДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  ЭтотОбъект.ДатаИсправляемогоКорректировочногоДокумента);
	
	Если ЭтотОбъект.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсправленияКорСчетаФактуры", ЭтотОбъект.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсправленияКорСчетаФактуры", Дата);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", ЭтотОбъект.НомерИсходногоДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  ЭтотОбъект.ДатаИсходногоДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ЭтотОбъект.НомерИсправленияИсходногоДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", ЭтотОбъект.ДатаИсправленияИсходногоДокумента);
		
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Покупатель, Дата);
	
	Если ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		//Нужно ли доделать для "Подразделения Организаций"? - пока для Организации
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Организация, Дата);
	Иначе 
		СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляПечати.Поставщик, Дата);
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляПечати.Валюта, "Код"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ЭтотОбъект.ДокументыОснования);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	Для каждого Строка Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Номенклатура.Услуга)
				 ИЛИ ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеТовара;
		НоваяСтрока.ЕдиницаИзмеренияКодДо    = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
		НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтавкаНДСДо              = Строка.СтавкаНДС;
		НоваяСтрока.СтавкаНДС                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаСНДСДо              = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СуммаСНДС                = Строка.СтоимостьСНДСПослеИзменения;
		
		НоваяСтрока.Номенклатура             = Строка.Номенклатура;
		НоваяСтрока.Упаковка                 = Строка.НаименованиеЕдиницыИзмерения;
		
		НоваяСтрока.АкцизаДо                 = "без акциза";
		НоваяСтрока.Акциза                   = "без акциза";
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	Сумма = ТаблицаТоваров.Итог("СуммаСНДС");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", Сумма);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	  
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	//МассивОбъектов = Новый Массив();
	//МассивОбъектов.Добавить(СсылкаНаОбъект);
	//
	//СведенийСоглашенияОбИзмененииСтоимости = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийСоглашенияОбИзмененииСтоимости(СсылкаНаОбъект);
	//
	//Если СведенийСоглашенияОбИзмененииСтоимости.Количество()=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//РеквизитыШапки = СведенийСоглашенияОбИзмененииСтоимости[0];
	//ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	//
	//Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
	//	ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	//Иначе
	//	ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Корректировка;
	//КонецЕсли;
	//
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной", РеквизитыШапки.ДатаДокумента);
	//
	//Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправления", РеквизитыШапки.НомерИсправления);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправления", РеквизитыШапки.ДатаИсправления);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсходногоДокумента) Тогда
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсходногоДокумента", РеквизитыШапки.НомерИсходногоДокумента);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсходногоДокумента", РеквизитыШапки.ДатаИсходногоДокумента);
	//	
	//	Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсправленияИсходногоДокумента) Тогда
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправленияИсходногоДокумента", РеквизитыШапки.НомерИсправленияИсходногоДокумента);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправленияИсходногоДокумента", РеквизитыШапки.ДатаИсправленияИсходногоДокумента);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//								ДеревоДанных,
	//								"ДокОснованиеДата",
	//								РеквизитыШапки.ОснованиеДата);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//								ДеревоДанных,
	//								"ДокОснованиеНомер",
	//								РеквизитыШапки.ОснованиеНомер);
	//
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ПредставлениеИсходногоДокумента", РеквизитыШапки.ЗаголовокДокументаОснования);
	//
	//// Выводим общие реквизиты шапки
	//СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	//СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	//СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	//СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.ДатаДляПолученияСведений);
	//
	//ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик",        "Юр");
	//ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт");
	//
	//ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр");
	//ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт");
	//
	//СтруктураДопДанных = Новый Структура;
	//СтруктураДопДанных.Вставить("ВалютаКод",   РеквизитыШапки.ВалютаКод);  
	//СтруктураДопДанных.Вставить("ВидОперации", ВидОперацииЭД);
	//ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	//
	//Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
	//	МассивДокументовОснований = Новый Массив;
	//	МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//						ДеревоДанных,
	//						"ДокументыОснования",
	//						МассивДокументовОснований);
	//КонецЕсли;
	//
	//// Добавим данные об товарах
	//ТаблицаТоваров = Новый ТаблицаЗначений();
	//ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	//ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	//ТаблицаТоваров.Колонки.Добавить("Сорт");
	//ТаблицаТоваров.Колонки.Добавить("Артикул");
	//ТаблицаТоваров.Колонки.Добавить("КодТовара");
	//ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	//ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	//ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	//ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	//ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	//ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	//ТаблицаТоваров.Колонки.Добавить("МассаНеттоДоКорректировки");
	//ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	//ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	//ТаблицаТоваров.Колонки.Добавить("Цена");
	//ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки");
	//ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	//ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	//ТаблицаТоваров.Колонки.Добавить("СуммаНДСДоКорректировки");
	//ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	//ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки");
	//ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	//ТаблицаТоваров.Колонки.Добавить("ДокументОснования");
	//ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	//ТаблицаТоваров.Колонки.Добавить("Характеристика");
	//ТаблицаТоваров.Колонки.Добавить("Упаковка");
	//ТаблицаТоваров.Колонки.Добавить("ДопДанные");
	//ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	//ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	//
	//Для Каждого Строка Из ТабличнаяЧасть Цикл
	//	
	//	СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
	//	
	//	СтрокаТаблицыДокумента.Номенклатура              = Строка.Номенклатура;
	//	СтрокаТаблицыДокумента.БазоваяЕдиницаКод         = СокрЛП(Строка.ЕдиницаИзмеренияКод);
	//	СтрокаТаблицыДокумента.ЕдиницаИзмерения          = Строка.ЕдиницаИзмеренияНаименование;
	//	СтрокаТаблицыДокумента.КодТовара                 = Строка.НоменклатураКод;
	//	СтрокаТаблицыДокумента.НаименованиеНоменклатуры  = Строка.НоменклатураНаименование;
	//	СтрокаТаблицыДокумента.МассаНетто                = Строка.Количество;
	//	СтрокаТаблицыДокумента.МассаНеттоДоКорректировки = Строка.КоличествоДоКорректировки;
	//	СтрокаТаблицыДокумента.Упаковка                  = Строка.ЕдиницаИзмерения;
	//	
	//	СтрокаТаблицыДокумента.СуммаСНДС   = Строка.СуммаСНДС;
	//	СтрокаТаблицыДокумента.СуммаНДС    = Строка.СуммаНДС;
	//	СтрокаТаблицыДокумента.СуммаБезНДС = Строка.СуммаБезНДС;
	//	СтрокаТаблицыДокумента.СтавкаНДС   = Строка.СтавкаНДС;
	//	
	//	СтрокаТаблицыДокумента.СуммаСНДСДоКорректировки   = Строка.СуммаСНДСДоКорректировки;
	//	СтрокаТаблицыДокумента.СуммаНДСДоКорректировки    = Строка.СуммаНДСДоКорректировки;
	//	СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки = Строка.СуммаБезНДСДоКорректировки;
	//	
	//	СтрокаТаблицыДокумента.Цена = Строка.Цена;
	//	СтрокаТаблицыДокумента.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
	//	
	//	СтруктураДопДанных = Новый Структура;
	//	СтруктураДопДанных.Вставить("СтавкаНДС", Строка.СтавкаНДС);
	//	
	//	СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
	//	
	//КонецЦикла;
	//
	//ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	//
	//ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	//
	//ИтоговыеСуммы = РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаТоваров);
	//
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"СведенияПоОтпускуГруза.ОтпущеноНаСумму",
	//							ИтоговыеСуммы.ИтогоСуммаСНДС);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
	//							ИтоговыеСуммы.ИтогоМест);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
	//							ИтоговыеСуммы.ИтогоМассаНетто);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
	//							ИтоговыеСуммы.ИтогоМассаБрутто);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.КоличествоМест",
	//							ИтоговыеСуммы.ИтогоМест);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.МассаБрутто",
	//							ИтоговыеСуммы.ИтогоМассаБрутто);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.МассаНетто",
	//							ИтоговыеСуммы.ИтогоМассаНетто);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаБезНДС",
	//							ИтоговыеСуммы.ИтогоСуммаБезНДС);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаНДС",
	//							ИтоговыеСуммы.ИтогоНДС);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаСНДС",
	//							ИтоговыеСуммы.ИтогоСуммаСНДС);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.МассаНеттоДоКорректировки",
	//							ИтоговыеСуммы.ИтогоМассаНетто);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаБезНДСДоКорректировки",
	//							ИтоговыеСуммы.ИтогоСуммаДоКорректировки);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаНДСДоКорректировки",
	//							ИтоговыеСуммы.ИтогоНДСДоКорректировки);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
	//							ДеревоДанных,
	//							"ВсегоПоНакладной.СуммаСНДСДоКорректировки",
	//							ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки);
	//
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	//  начало примера

	СведенияОбОрганизации = ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Произвольный");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Наименование КАК Комментарий,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БанкБИК,
	|	БанковскиеСчета.Банк.КоррСчет КАК БанкСчетКорр,
	|	""012654987"" КАК БанкSWIFT,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК БанкКоррНаименование,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БанкКоррБИК,
	|	БанковскиеСчета.Банк.КоррСчет КАК БанкКоррБанкСчетКорр,
	|	""987456210"" КАК БанкКоррSWIFT
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	БанковскиеСчета = Результат.Выгрузить();
	
	ЕстьОшибкиЗаполнения = Ложь;
	ТекстОшибки = "";
	
	Для Каждого ТекСчет Из БанковскиеСчета Цикл
		
		ШаблонСообщения = ВернутьСтр("ru = 'Длина номера банковского счета организации не равна %1 символам.'");
		ЭлектронныеДокументыСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекСчет.БанкКоррБанкСчетКорр) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщения = ВернутьСтр("ru = 'Длина номера корреспондентского счета банка организации не равна %1 символам.'");
		ЭлектронныеДокументыСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.БанкКоррБанкСчетКорр, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
	КонецЦикла;
	
	Если ЕстьОшибкиЗаполнения Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ТекстОшибки", ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, БанковскиеСчета, "РасчетныеСчета");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СсылкаНаОбъект.Наименование);
	
	//  конец примера

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	//  начало примера
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = ПолучитьДанныеЮрФизЛица(Организация);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Произвольный");
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
	//  конец примера
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
 
	

КонецПроцедуры

// Устаревшие: Работа со структурой данных ФНС

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТорг12ПродавецФНС.
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
		
	//  начало примера
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыТОРГ12(
		ПараметрыПечати, СсылкаНаОбъект);
	СтрокаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать();
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.НомерТоварнойНакладной = РеквизитыШапки.Номер;
	СтруктураПараметров.ДатаТоварнойНакладной  = РеквизитыШапки.Дата;
	СтруктураПараметров.ВидОперации            = РеквизитыШапки.ВидОперации;
	ЗаполнитьРеквизитыУчастниковТОРГ12(РеквизитыШапки, СтруктураПараметров);
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод", РеквизитыШапки.ВалютаКод);
	СтруктураДопДанных.Вставить("АдресДоставки", "г.Москва, ул. Малая Якиманка, д. 58/2");
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	// Передадим документы основания.
	СтруктураПараметров.ДокументыОснования = РеквизитыШапки.ДокументОснование;
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	Пока СтрокаТовары.Следующий() Цикл
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		ЗаполнитьРеквизитыСтрокиТовара(РеквизитыШапки, СтрокаТовары, ДанныеСтроки, СтруктураПараметров);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
	КонецЦикла;
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ДанныеСтроки.Номер;
	ЗаполнитьРеквизитыПодвалаТОРГ12(РеквизитыШапки, ИтоговыеСуммы, СтруктураПараметров);
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО = "Козлевич Адам Коземирович";
		СтруктураПараметров.Подписант.Должность = "Директор";
	КонецЕсли;
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТОРГ12ПокупательФНС.
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО = "Синицкая Зося Викторовна";
		СтруктураПараметров.Подписант.Должность = "Директор";
	КонецЕсли;
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	СтруктураПараметров.ДатаПолученияГруза = ТекущаяДатаСеанса();
	СтруктураПараметров.Доверенность.Вставить("НомерДоверенности", "55");
	СтруктураПараметров.Доверенность.Вставить("ДатаДоверенности", СсылкаНаОбъект.ДатаДокументаОтправителя);
	СтруктураПараметров.Доверенность.Вставить("ОрганизацияВыдавшаяДоверенность", СтруктураЭД.Организация.Наименование);
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность, "Синицкая Зося Викторовна", "Директор");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Доверенность.ДоверенноеЛицо, "Козлевич Адам Коземирович", "Перевозчик");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.ГрузПринял, "Лихолетцев Авраам Федорович", "Кладовщик");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.ГрузПолучил, "Бахшиев Павел Иннокентьевич", "Приемщик");
	
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ИсполнительФНС.
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАкт501(
		ПараметрыПечати, СсылкаНаОбъект);
		
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.НомерАкта   = РеквизитыШапки.Номер;
	СтруктураПараметров.ДатаАкта    = РеквизитыШапки.Дата;
	СтруктураПараметров.ВидОперации = РеквизитыШапки.ВидОперации;
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод", РеквизитыШапки.ВалютаКод);
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	// Передадим документы основания.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
	ЗаполнитьРеквизитыУчастниковАкт501(РеквизитыШапки, СтруктураПараметров);
	
	// Акт выполненных работ в формате ФНС, имеет следующую структуру описания оказанных услуг:
	// Услуги - таблица оказанных услуг, каждая строка которой является таблицей содержащей
	// описание (состав) оказанной услуги.
	// В связи с этим, данные готовятся (заполняются) в двух циклах:
	// внешний цикл - список оказанных услуг (в демо-примере список услуг содержит один элемент),
	// внутренний цикл - описание (состав) оказанной услуги.
	Для Сч = 1 По 1 Цикл
		СтрокаТовары   = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
		
			НоваяСтрока = СтруктураПараметров.ТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			СтруктураДопДанных = Новый Структура;
			СтруктураДопДанных.Вставить("ИД", Строка(НоваяСтрока.Номенклатура.УникальныйИдентификатор()) + "##");
			СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
			
			ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Услуги", Истина,
				Строка(Сч) + "." + СтрокаТовары.НомерСтроки);
			
		КонецЦикла;
		
		// Заполняем таблицу описаний услуг, вкладывая туда таблицу с услугами.
		НоваяСтрока = СтруктураПараметров.ТаблицаОписанийУслуг.Добавить();
		НоваяСтрока.НомерСтроки      = Сч;
		НоваяСтрока.НачалоРабот      = РеквизитыШапки.Дата;
		НоваяСтрока.КонецРабот       = РеквизитыШапки.Дата;
		НоваяСтрока.СуммаБезНДСИтого = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаБезНДС");
		НоваяСтрока.СуммаНДСИтого    = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаНДС");
		НоваяСтрока.СуммаСНДСИтого   = РеквизитыШапки.СуммаДокумента;
		НоваяСтрока.Услуги           = СтруктураПараметров.ТаблицаУслуг;
	КонецЦикла;

	СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения = РеквизитыШапки.Дата;
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя, РеквизитыШапки.Исполнитель,
		РеквизитыШапки.ДолжностьИсполнителя);
	
	// Заполним данные по доверенности.
	СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность.НомерДоверенности = РеквизитыШапки.НомерДоверенности;
	СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность.ДатаДоверенности  = РеквизитыШапки.Дата;
	СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность.Вставить("ОрганизацияВыдавшаяДоверенность", РеквизитыШапки.ОрганизацияКемДоверенностьВыдана);
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность.ЛицоВыдавшееДоверенность, "Синицкая Зося Викторовна", "Директор");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоВыполнениюУслуг.Доверенность.ДоверенноеЛицо, "Козлевич Адам Коземирович", "Перевозчик");
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО = "Козлевич Адам Коземирович";
		СтруктураПараметров.Подписант.Должность = "Директор";
	КонецЕсли;
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ЗаказчикФНС.
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО = "Синицкая Зося Викторовна";
		СтруктураПараметров.Подписант.Должность = "Директор";
	КонецЕсли;
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	СтруктураПараметров.ДатаЗаказа = ТекущаяДатаСеанса();
	СтруктураПараметров.Претензия = "Претензий нет";
	СтруктураПараметров.Доверенность.Вставить("НомерДоверенности", "55");
	СтруктураПараметров.Доверенность.Вставить("ДатаДоверенности", СсылкаНаОбъект.ДатаДокументаОтправителя);
	СтруктураПараметров.Доверенность.Вставить("ОрганизацияВыдавшаяДоверенность", СтруктураЭД.Организация.Наименование);
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность, "Синицкая Зося Викторовна", "Директор");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.Доверенность.ДоверенноеЛицо, "Козлевич Адам Коземирович", "Перевозчик");
	ЗаполнитьФИОИДолжность(СтруктураПараметров.ПодписьЗаказ, "Лихолетцев Авраам Федорович", "Кладовщик");
	
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
		
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшие: Работа со структурой данных CML

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКаталогуТоваровCML.
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	Для каждого Строка Из ТоварыКаталога Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель",      СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы",      "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",   ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация",      СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент",       СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид",               СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВидЭД",            СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",    СтруктураЭД.НаправлениеЭД);
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоПрайсЛисту.
//Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчету.
// Подготавливает данные для электронного документа типа Счет формата CML 4.02
//  
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// Устаревшая процедура 
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоЗаказуТоваров.
// 
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтветуНаЗаказ.
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// УСТАРЕВШАЯ ПРОЦЕДУРА
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара. 
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура.Код КАК Артикул,
		|	Товары.Номенклатура.Наименование КАК Наименование,
		|	Товары.Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЕдиницаИзмерения.Код КАК УпаковкаКод,
		|	Товары.Количество КАК Количество,
		|	Товары.Сумма КАК СуммаБезНДС,
		|	Товары.Цена,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаСкидки,
		|	Товары.СуммаСНДС КАК СуммаСНДС,
		|	Товары.Характеристика.Код КАК КодХарактеристики,
		|	Товары.СрокГодности КАК СрокГодности,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
		|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	Товары.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
		|	1 КАК Коэффициент,
		|	Товары.Номенклатура.Код КАК КодТовара,
		|	НЕОПРЕДЕЛЕНО КАК Упаковка,
		|	""2389473485348"" КАК Штрихкод,
		|	""Здесь находится доп. описание"" КАК Описание
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		ДополнительныеРеквизиты = Новый Структура;
		МассивДопЗначений = Новый Массив();
		МассивДопЗначений.Добавить(Строка.КодТовара);
		ДополнительныеРеквизиты.Вставить("КодТовара", МассивДопЗначений);
		Строка.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель",         СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы",         "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",      ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация",         СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент",          СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид",                  СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",    ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер",               СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата",                СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("СуммаСНДС",           ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ВидЭД",               СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",       СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель",    СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель",     СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",     Истина);
	СтруктураПараметров.Вставить("Валюта",              СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс",                1);
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	//  начало примера
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Услуги.Номенклатура.Код КАК Артикул,
	|	Услуги.Номенклатура.Наименование КАК Наименование,
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика КАК Характеристика,
	|	Услуги.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Сумма КАК СуммаБезНДС,
	|	Услуги.Цена,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	Услуги.СуммаСНДС КАК СуммаСНДС,
	|	Услуги.Характеристика.Код КАК КодХарактеристики,
	|	Услуги.СрокГодности КАК СрокГодности,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	Услуги.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Услуги.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Услуги.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Услуги.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Услуги.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	1 КАК Коэффициент,
	|	Услуги.Номенклатура.Код КАК КодТовара,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	""2389473485348"" КАК Штрихкод,
	|	""Здесь находится доп. описание"" КАК Описание
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		ДополнительныеРеквизиты = Новый Структура;
		МассивДопЗначений = Новый Массив();
		МассивДопЗначений.Добавить(Строка.КодТовара);
		ДополнительныеРеквизиты.Вставить("КодТовара", МассивДопЗначений);
		Строка.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель",         СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы",         "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",      ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация",         СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент",          СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид",                  СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",    ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер",               СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата",                СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("СуммаДокумента",      ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ВидЭД",               СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",       СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель",    СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель",     СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",     Истина);
	СтруктураПараметров.Вставить("Валюта",              СсылкаНаОбъект.Валюта);
	СтруктураПараметров.Вставить("Курс",                1);
	Структурапараметров.Вставить("НалогообложениеНДС", "Без НДС");
	СтруктураПараметров.Вставить("ДополнительнаяИнформацияШапки", "");
	СтруктураПараметров.Вставить("ДополнительнаяИнформация", "");
	СтруктураПараметров.Вставить("ИтогиПрописью", СуммаПрописью(СтруктураПараметров.СуммаДокумента, Неопределено));
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = СсылкаНаВладельца;
	
	//  начало примера
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		//Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		//	И НЕ Константы.ПродажаПрограммногоОбеспечения.Получить() Тогда
		//	ТекстОшибки = ВернутьСтр("ru = 'Формирование документа ИБ.
		//		|Для формирования документов ""%1"" на основании электронных документов ""%2"", необходимо в настройках программы включить опцию ""%3""'");
		//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		//		Метаданные.Документы.ПоступлениеТоваровУслуг.Представление(),
		//		Перечисления.ВидыЭД.АктНаПередачуПрав,
		//		Метаданные.ФункциональныеОпции.ПродажаПрограммногоОбеспечения.Представление());
		//		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки,
		//			2, УровеньЖурналаРегистрации.Ошибка);
		//	Возврат Неопределено;
		//КонецЕсли;
		НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли (СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = СчетНаОплату(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
		
	КонецЕсли;
	//  конец примера
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовыйЭлемент = Неопределено;
	
	//  начало примера
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	//  конец примера
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	//  начало примера
	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "ЕдиницыИзмерения" ИЛИ ТипОбъекта = "ХарактеристикиНоменклатуры" Тогда
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "Партнеры" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент) Тогда
			Если Контрагент.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
			
				Результат = Контрагент["Партнер"];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		
		Если ДополнительныеРеквизиты.Свойство("ИНН") Тогда
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("КПП") Тогда
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Владелец = "";
		ДополнительныеРеквизиты.Свойство("Владелец", Владелец);
		
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Идентификатор", ПараметрПоиска, Владелец);
		КонецЕсли;
		// { RGS MYurkevich 07.04.2016 13:22:43 - 
		//Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска)
		//	И ЗначениеЗаполнено(ПараметрПоиска) Тогда // по наименованию
		//	
		//	ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
		//	Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Наименование", ПараметрПоиска, Владелец);
		//КонецЕсли;

		//Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска)
		//	И ЗначениеЗаполнено(ПараметрПоиска) Тогда // по артикулу
		//	
		//	ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
		//	Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Артикул", ПараметрПоиска, Владелец);
		//КонецЕсли;
	    // } RGS MYurkevich 07.04.2016 13:22:43 - 
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(ПараметрПоиска);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска)
			И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Банки" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Владелец = "";
		Если ДополнительныеРеквизиты.Свойство("Код", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Код", ПараметрПоиска, Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
		
		Владелец = "";
		Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") И ДополнительныеРеквизиты.Свойство("Владелец") Тогда
			Владелец = ДополнительныеРеквизиты.Владелец;
		КонецЕсли;
		
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);

 		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
		
	ИначеЕсли ВРег(ТипОбъекта) = ВРег("ДоговорыКонтрагентов") Тогда
		
		Результат = ДоговорКонтрагентаПоРеквизитам(ДополнительныеРеквизиты);
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Если ИдОбъекта = "EmailКонтрагента" Тогда
			Результат = "Почта";
		ИначеЕсли ИдОбъекта = "ТелефонКонтрагента" Тогда
			Результат = "Телефон";
		ИначеЕсли ИдОбъекта = "ФаксКонтрагента" Тогда
			Результат = "Факс";
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = "";
	КонецЕсли;
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	//  начало примера
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	//  начало примера
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник." + ТипОбъекта + " КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) Тогда
		ТекстЗапроса = ТекстЗапроса + " И
			|	Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	
	//  начало примера
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП, "/") + 1);
	Контрагент.Записать();
	
	Результат = Контрагент.Ссылка;
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	//  начало примера
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Характеристика = неопределено;
	СтруктураВозврата.Упаковка = неопределено;
	//  конец примера
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
//  ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// ИдКонтрагента - строка - значение ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	//  начало примера
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	//  конец примера
	
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	//  начало примера
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
	|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
	|	ТаблицаИнформацияОТоваре.Описание КАК Описание
	|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
	|ИЗ
	|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Идентификатор,
	|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Описание
	|ИЗ
	|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
	|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
	|ГДЕ
	|	(НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL 
	|			ИЛИ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
	//  конец примера
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	//  начало примера
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Запись.Идентификатор) Тогда
				СпрСсылка = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту(
																			"Идентификатор",
																			Запись.Идентификатор,
																			,
																			Контрагент);
			Иначе
				СпрСсылка = Справочники.НоменклатураПоставщиков.НайтиПоНаименованию(
												Запись.НаименованиеНоменклатурыКонтрагента,
												,
												,
												Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Артикул = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
				СпрОбъект.Наименование = Запись.НаименованиеНоменклатурыКонтрагента;
			КонецЕсли;
			СпрОбъект.Номенклатура = Запись.Номенклатура;
			СпрОбъект.Владелец = Контрагент;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	//  конец примера
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	//  начало примера
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	//  конец примера
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	//  начало примера
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	//  начало примера
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Артикул,
	|	ТаблицаТоваров.Наименование,
	|	ТаблицаТоваров.Ссылка КАК Номенклатура,
	|	""796"" КАК БазоваяЕдиницаКод,
	|	""796"" КАК БазоваяЕдиницаМеждународноеСокращение,
	|	""шт"" КАК БазоваяЕдиницаНаименование,
	|	""шт"" КАК БазоваяЕдиницаНаименованиеПолное,
	|	""шт"" КАК ЕдиницаХраненияОстатковНаименование,
	|	""1"" КАК ЕдиницаХраненияОстатковКоэффициент,
	|	""шт"" КАК БазоваяЕдиница,
	|	""шт"" КАК УпаковкаПоОКЕИ
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаТоваров
	|ГДЕ
	|	НЕ ТаблицаТоваров.Ссылка.ЭтоГруппа";
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), ИдентификаторФормы);
	//  конец примера
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	//  начало примера
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если СтрНайти(Врег(ЭлПеречисления.Синоним), Врег(ПредставлениеПеречисления)) > 0
			ИЛИ СтрНайти(Врег(ЭлПеречисления.Имя), Врег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//  конец примера
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮридическоеФизическоеЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
		
	Дата = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	ДанныеЮрФизЛица = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ЮрФизЛицо, Дата, БанковскийСчет);
	ТипЮрФизЛица = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЮрФизЛицо, "ЮридическоеФизическоеЛицо");
	
	Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если ТипЗнч(ЮрФизЛицо)=Тип("СправочникСсылка.Организации") Тогда
			ИП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЮрФизЛицо, "ИндивидуальныйПредприниматель");
			ФИО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИП, "Наименование");
		Иначе
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
			ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
			КонецЕсли;
			ФИО = СтрЗаменить(ФИО, """","");
			ФИО = СтрЗаменить(ФИО, "'","");
			ФИО = СокрЛП(ФИО);
		КонецЕсли;
		
		ЗаполнитьФИОиДолжность(ДанныеЮрФизЛица, ФИО);
		ДанныеЮрФизЛица.ПолноеНаименование      = ФИО;
	КонецЕсли;
	
	ДанныеЮрФизЛица.Вставить("ОфициальноеНаименование", ДанныеЮрФизЛица.ПолноеНаименование);
	ДанныеЮрФизЛица.Вставить("ТипЮрФизЛица", ТипЮрФизЛица);
	ДанныеЮрФизЛица.Вставить("ЮрФизЛицоСсылка", ЮрФизЛицо.Ссылка);
	
	Возврат ДанныеЮрФизЛица;

	
КонецФункции

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат("");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодРегиона", Число(КодРегиона));
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование,
	|	АдресныеОбъекты.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Уровень = 1
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодРегиона";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат(СокрЛП(Выборка.Наименование+" "+Выборка.Сокращение));
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект = СтруктураПараметров[ВидКонтрагента];
			ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			ИмяСправочника = "Организации";
		Иначе
			Объект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ИндивидуальныйПредприниматель");
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяСправочника = "ФизическиеЛица";
		КонецЕсли;
	Иначе
		Объект = СтруктураПараметров[ВидКонтрагента];
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ИмяСправочника = "Контрагенты";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		АдресСтруктурой = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
		
		Страна = ?(АдресСтруктурой.Свойство("Страна"), Справочники.КлассификаторСтранМира.НайтиПоНаименованию(АдресСтруктурой.Страна), Справочники.КлассификаторСтранМира.Россия);
		Если Страна <> Справочники.КлассификаторСтранМира.ПустаяСсылка() Тогда
			СтруктураАдреса.Вставить("КодСтр", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Страна, "Код"));
			СтруктураАдреса.Вставить("АдресРФ", Страна = Справочники.КлассификаторСтранМира.Россия);
		Иначе
			СтруктураАдреса.Вставить("КодСтр", "");
			СтруктураАдреса.Вставить("АдресРФ", Ложь);
		КонецЕсли;
		
		СтруктураАдреса.Вставить("АдрТекст", АдресСтруктурой.Представление);
		
		КодРегиона = Неопределено;
		АдресСтруктурой.Свойство("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0"));
		Если НЕ ЗначениеЗаполнено(КодРегиона)
			И АдресСтруктурой.Свойство("Регион") Тогда
			АдресСтруктурой.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
		КонецЕсли;
		
		АдресСтруктурой.Свойство("Индекс",          СтруктураАдреса.Индекс);
		АдресСтруктурой.Свойство("КодРегиона",      СтруктураАдреса.КодРегион);
		АдресСтруктурой.Свойство("Район",           СтруктураАдреса.Район);
		АдресСтруктурой.Свойство("Город",           СтруктураАдреса.Город);
		АдресСтруктурой.Свойство("НаселенныйПункт", СтруктураАдреса.НаселПункт);
		АдресСтруктурой.Свойство("Улица",           СтруктураАдреса.Улица);
		АдресСтруктурой.Свойство("Дом",             СтруктураАдреса.Дом);
		АдресСтруктурой.Свойство("Корпус",          СтруктураАдреса.Корпус);
		АдресСтруктурой.Свойство("Квартира",        СтруктураАдреса.Кварт);
	КонецЕсли;
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	//  начало примера
	АдресЭП = Контрагент.АдресЭП;
	//  конец примера
	
	Возврат АдресЭП;
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - документссылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект) Экспорт
	
	Результат = "";
	
	Результат = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
		
	Возврат Результат;
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БанковскийСчет");
	
	
	
	Возврат Таблица;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	//  начало примера
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца,
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина;
		ЭСФ.ДатаВыставления = ЭД.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца,
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина;
		ЭСФ.ДатаПолучения = ЭД.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка     = Истина;
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО. ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка   = Истина;
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ЭСФ.Записать();
		
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	//  начало примера
	СтруктураПараметровПодписанта.Вставить("Должность", "Генеральный директор");
	СтруктураПараметровПодписанта.ФИО.Вставить("Фамилия",  "Авдеева");
	СтруктураПараметровПодписанта.ФИО.Вставить("Имя",      "Елена");
	СтруктураПараметровПодписанта.ФИО.Вставить("Отчество", "Викторовна");
	//  конец примера
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	//  начало примера
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Участник,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Код КАК ВнешнийКод,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
		|	Контрагенты.Наименование КАК НаименованиеДляСообщенияПользователю
		|ИЗ
		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
		|ГДЕ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
		|	И УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	Результат = "";
	
	//  начало примера
	Результат = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, Список, СПрефиксом);
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	//  начало примера
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), ВернутьСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"),
					ВернутьСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = ВернутьСтр("ru='В т.ч.'")+ " " + ТекстНДС;
	Иначе
		ТекстНДС = ВернутьСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	//  конец примера
	
	Возврат ТекстНДС;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Результат = "";
	
	//  начало примера
	Валюта = НайтиСсылкуНаОбъект("Валюты", КодВалюты);
	Результат = ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта, ЧН, ЧРГ);
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Результат = "";
	
	//  начало примера
	Если ЗначениеЗаполнено(КодВалюты) Тогда
		Валюта = НайтиСсылкуНаОбъект("Валюты", КодВалюты);
	Иначе
		Валюта = Неопределено;
	КонецЕсли;
	
	Результат = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	//  конец примера
	
	Возврат Результат;
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, ВернутьСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), ВернутьСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	
	
	
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	//  начало примера
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено Тогда
		Возврат ЭтоФизЛицо;
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ДанныеКонтрагента.ЮридическоеФизическоеЛицо;
	
	Если ТипЗнч(ЮридическоеФизическоеЛицо) <> Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		Возврат ЭтоФизЛицо;
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		ИЛИ ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель Тогда
		
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	//  конец примера
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	//  начало примера
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	//  конец примера
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат "Код";
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Результат = 0;
	
	//  начало примера
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Результат = 0.1;
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Результат = 0.18;
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		Результат = Неопределено;
		
	КонецЕсли;
	//  конец примера

	Возврат Результат;
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	//  начало примера
	Если ТипЗнч(СтавкаЧислом) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаЧислом;
	ИначеЕсли ТипЗнч(СтавкаЧислом) = Тип("Число") Тогда
		ПредставлениеСтавкиНДС = Строка(СтавкаЧислом);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ СтрНайти("без НДС#Без НДС", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
	
	// # - разделитель представлений ставок.
	ИначеЕсли СтрНайти("0#0%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтрНайти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтрНайти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли СтрНайти("10/110#10% / 110%#10%/110%#10/110 %", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли СтрНайти("18/118#18% / 118%#18%/118%#18/118 %", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	КонецЕсли;
	//  конец примера
	
	Возврат ЗначениеНДС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	//  начало примера
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	//  конец примера
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	//  начало примера
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(
										ДокументыМассив,
										Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивПроводныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроводимыхДокументов(ДокументыМассив);
	                			
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивПроводныхДокументов);
	Если МассивНепроведенныхДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = ВернутьСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
	Для Каждого НеПроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
		Найденный = ДокументыМассив.Найти(НеПроведенныйДокумент.Ссылка);
		Если Найденный <> Неопределено Тогда
			
			ДокументыМассив.Удалить(Найденный);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(НеПроведенныйДокумент.Ссылка));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	
	КонецЦикла;
	//  конец примера
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

	//  начало примера
	//Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
	//	Запрос = Новый Запрос;
	//	Запрос.Текст =
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	СостоянияЭД.ЭлектронныйДокумент
	//	|ИЗ
	//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	//	|ГДЕ
	//	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	//	|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент)
	//	|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)
	//	|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	//	|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаУтверждении)
	//	|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен)";
	//	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	//	
	//	Результат = Запрос.Выполнить();
	//	Если Не Результат.Пустой() Тогда
	//		РедактированиеРазрешено = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//  конец примера
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	//  начало примера
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	//  конец примера
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на настройку параметров электронных документов.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Результат = Истина;
	
	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	//  начало примера
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если СтрНайти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
				Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			Иначе // для обычной формы
				Если НЕ Форма.ЭлементыФормы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.ЭлементыФормы.ТекстСостоянияЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И ТипЗнч(НайденныйЭлементФормы) = Тип("Надпись") Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
			Если НЕ Форма.Элементы.Найти("ГруппаСостояниеЭД") = Неопределено Тогда
				Форма.Элементы.ГруппаСостояниеЭД.Видимость = Ложь;
			ИначеЕсли НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				Форма.Элементы.СостояниеЭД.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

// В процедуре можно сформировать список пользователей, которым можно перенаправить на рассмотрение
// электронные документы (МассивЭД). Если в процедуре будет определён список пользователей, то он будет
// использоваться в качестве выпадающего списка на форме Обработки.ЭлектронныеДокументы.ПеренаправлениеЭД.
//
// Параметры:
//    МассивЭД           - Массив - элементы массива - ссылки на электронные документы, которые требуется
//                       перенаправить на рассмотрение пользователю, указанному на форме перенаправления ЭД.
//    МассивПолзователей - Массив - возвращаемый массив пользователей, для выпадающего списка выбора адресата.
//
Процедура СписокПользователейДляБыстрогоВыбораПриПеренаправленииНаРассмотрениеЭД(
	МассивЭД, МассивПолзователей) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Переопределяет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	//  начало примера
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	//  начало примера
	Макет                   = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов       = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
	КонецЦикла;
	//  конец примера
	
КонецПроцедуры

// Заполняет соответствие кодов реквизитов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие, исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	//  начало примера
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПрикладноеПредставлениеРеквизитов");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	//  начало примера
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	//  конец примера
	
	Возврат Таблица;
	
КонецФункции

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Параметры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	//  начало примера
	ТекущийКаталог = КаталогВременныхФайлов();
	//  конец примера
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	//  начало примера
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	//  конец примера
	
КонецПроцедуры

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	//  начало примера
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		СписокВозврата.Добавить(Документы.СчетНаОплатуПокупателю.ПустаяСсылка(),
									Метаданные.Документы.СчетНаОплатуПокупателю.Представление());
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
									Метаданные.Справочники.Контрагенты.Представление());

	КонецЕсли;
	//  конец примера
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	//  начало примера
	ЗаполнитьЗначенияСвойств(
			СтруктураВозврата,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП, ЮридическоеФизическоеЛицо"));
	СтруктураВозврата.НаименованиеПолное = СтруктураВозврата.Наименование;
	//  конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена с банками

// Используется для включения подсистемы Сбербанк в прикладном решении.
//
// Параметры:
//  ФлагИспользования - <Булево> - необходимо присвоить параметру Истина, если используется подсистема Сбербанк.
//
Процедура ПроверитьИспользованиеПодсистемыСбербанк(ФлагИспользования) Экспорт
	
	//  начало примера
	ФлагИспользования = Истина;
	//  конец примера
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - <СправочникСсылка.Организации> - отбор по организации.
//  Банк - <СправочникСсылка.КлассификаторБанковРФ> - отбор по банку.
//  МассивНомеровБанковскихСчетов - массив возврата, в элементах строки с номерами счетов
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	
	
КонецПроцедуры

//  начало примера

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

Процедура ЗаполнитьДопДанныеВСтроке(СтрокаТовары)
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("КодХарактеристики");
	СтруктураДопДанных.Вставить("Характеристика");
	СтруктураДопДанных.Вставить("СрокГодности");
	СтруктураДопДанных.Вставить("Коэффициент");
	СтруктураДопДанных.Вставить("Штрихкод");
	СтруктураДопДанных.Вставить("УпаковкаНаименование");
	СтруктураДопДанных.Вставить("УпаковкаКод");
	ЗаполнитьЗначенияСвойств(СтруктураДопДанных, СтрокаТовары);
	
	СтрокаТовары.ДопДанныеНеПодписанные = СтруктураДопДанных;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный", КорневойЭлементДерева = "")
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		Банк = "";
		БИК = "";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк.Наименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, КорневойЭлементДерева);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Находит документ ИБ по параметрам.
//
// Параметры:
//  ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
//  Контрагент - Ссылка на контрагента,
//  РеквизитыИБ - структура параметров информационной базы,
//  РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	НайденныйДок = Неопределено;
	
	//Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
	//	Запрос = Новый Запрос;
	//	ОсновнойТекстЗапроса =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ДокументПоиска.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.ЗаказПокупателя КАК ДокументПоиска
	//	|ГДЕ
	//	|	ДокументПоиска.Контрагент = &Контрагент";
	//	
	//	Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество() > 0 Тогда
	//		Запрос.Текст = ОсновнойТекстЗапроса;
	//		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//		Для Каждого ТекЭл Из РеквизитыИБ Цикл
	//			Если СтрНайти(ВРег(ТекЭл.Ключ), ВРег("Дата")) > 0 Тогда
	//				Запрос.Текст = Запрос.Текст + " И КОНЕЦПЕРИОДА(ДокументПоиска." + ТекЭл.Ключ + ", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"
	//					+ ТекЭл.Ключ + ", ДЕНЬ)";
	//			Иначе
	//				Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
	//			КонецЕсли;
	//			Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
	//		КонецЦикла;
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			НайденныйДок = Выборка.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
	//		И РеквизитыИБКонтрагента.Количество() > 0 Тогда
	//		
	//		Запрос.Текст = ОсновнойТекстЗапроса;
	//		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//		Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
	//			Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
	//			Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
	//		КонецЦикла;
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			НайденныйДок = Выборка.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
	//	
	//	Запрос = Новый Запрос;
	//	ОсновнойТекстЗапроса =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ДокументПоиска.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.ЗаказПоставщику КАК ДокументПоиска
	//	|ГДЕ
	//	|	ДокументПоиска.Контрагент = &Контрагент";
	//	
	//	Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество() > 0 Тогда
	//		Запрос.Текст = ОсновнойТекстЗапроса;
	//		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//		Для Каждого ТекЭл Из РеквизитыИБ Цикл
	//			Если СтрНайти(ВРег(ТекЭл.Ключ), ВРег("Дата")) > 0 Тогда
	//				Запрос.Текст = Запрос.Текст + " И КОНЕЦПЕРИОДА(ДокументПоиска." + ТекЭл.Ключ + ", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"
	//					+ ТекЭл.Ключ + ", ДЕНЬ)";
	//			Иначе
	//				Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
	//			КонецЕсли;
	//			Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
	//		КонецЦикла;
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			НайденныйДок = Выборка.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
	//		И РеквизитыИБКонтрагента.Количество() > 0 Тогда
	//		
	//		Запрос.Текст = ОсновнойТекстЗапроса;
	//		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//		Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
	//			Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
	//			Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
	//		КонецЦикла;
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			НайденныйДок = Выборка.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Попытка
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				Текст = ВернутьСтр("ru = 'Операция возможно только для непроведенных документов!'");
			КонецЕсли;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ЗаполнитьЗначенияСвойств(ДокументОбъект,ДанныеЗаполнения);
			//ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
				И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
				И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
					РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// По-умолчанию устанавливаем вид документа ПродажаКомиссия.
		Если НЕ ДанныеЗаполнения.Свойство("ВидОперации")
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ВидОперации) Тогда
			
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		КонецЕсли;
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
			ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Товары);
		ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			ДокументОбъект.ПрограммноеОбеспечение.Загрузить(ДанныеДляЗагрузки.Товары);
			
		// Необходимо понять в какую ТЧ загружать данные. В случае корректировочного документа смотрим по основанию.
		ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Если ДанныеЗаполнения.Свойство("Основание") И ЗначениеЗаполнено(ДанныеЗаполнения.Основание) Тогда
				
				Если ДанныеЗаполнения.Основание.Товары.Количество() > 0 Тогда
					
					ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
				ИначеЕсли ДанныеЗаполнения.Основание.Услуги.Количество() > 0 Тогда
					
					ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Товары);
				ИначеЕсли ДанныеЗаполнения.Основание.ПрограммноеОбеспечение.Количество() > 0 Тогда
					
					ДокументОбъект.ПрограммноеОбеспечение.Загрузить(ДанныеДляЗагрузки.Товары);
				КонецЕсли;
			Иначе
				ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе // если функция вызвана из формы "Обработки.ЭлектронныеДокументы.ФормаЗагрузкиПросмотраЭД"
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВернутьСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			2, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца);
		ВызватьИсключение(Текст);
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ДанныеДляЗагрузки.ДатаПолучения;
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДляЗагрузки);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		ДокументОбъект.КодВидаОперации = "01";
		ДокументОбъект.ВидСчетаФактуры = ДанныеДляЗагрузки.ВидСчетаФактуры;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	Для Каждого ДокументОснование Из ДанныеДляЗагрузки.ДокументыОснования Цикл
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	ДокументОбъект.ДокументОснование = ?(ДокументОбъект.ДокументыОснования.Количество()>0, ДокументОбъект.ДокументыОснования[0].ДокументОснование, Неопределено);
	
	ДокументОбъект.КодСпособаПолучения = 2;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДляЗагрузки.НомерВходящего;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДляЗагрузки.ДатаВходящего;
	ДокументОбъект.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
	ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
	Если ДанныеДляЗагрузки.Свойство("Исправление") Тогда
		ДокументОбъект.Исправление       = ДанныеДляЗагрузки.Исправление;
		ДокументОбъект.НомерИсправления  = ДанныеДляЗагрузки.НомерИсправления;
		ДокументОбъект.ДатаИсправления   = ДанныеДляЗагрузки.ДатаИсправления;
	КонецЕсли;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ДокументОбъект.ДокументыОснования.Количество()>0 Тогда
			ОснованиеСчетаФактуры = ДокументОбъект.ДокументыОснования[0];
			ОснованиеСчетаФактуры.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
			ОснованиеСчетаФактуры.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
			ОснованиеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента");
			ОснованиеСчетаФактуры.СуммаУвеличение    = ДанныеДляЗагрузки.СуммаУвеличение;
			ОснованиеСчетаФактуры.СуммаУменьшение    = ДанныеДляЗагрузки.СуммаУменьшение;
			ОснованиеСчетаФактуры.СуммаНДСУвеличение = ДанныеДляЗагрузки.СуммаНДСУвеличение;
			ОснованиеСчетаФактуры.СуммаНДСУменьшение = ДанныеДляЗагрузки.СуммаНДСУменьшение;
			
			Если ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента") Тогда
				ОснованиеСчетаФактуры.НомерИсправленияИсходногоДокумента = ДанныеДляЗагрузки.НомерИсправленияИсходногоДокумента;
				ОснованиеСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОбъект.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
	КонецЕсли;
	
	// Отражение вычета НДС по умолчанию
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументОбъект);
	ДокументОбъект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.СуммаУвеличение    = ДанныеДляЗагрузки.СуммаУвеличение;
	ДокументОбъект.СуммаУменьшение    = ДанныеДляЗагрузки.СуммаУменьшение;
	ДокументОбъект.СуммаНДСУвеличение = ДанныеДляЗагрузки.СуммаНДСУвеличение;
	ДокументОбъект.СуммаНДСУменьшение = ДанныеДляЗагрузки.СуммаНДСУменьшение;
	Если ДанныеДляЗагрузки.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ДокументОбъект.СуммаДокумента     = ?(ДанныеДляЗагрузки.СуммаУвеличение = Неопределено, 0, ДанныеДляЗагрузки.СуммаУвеличение)
											- ?(ДанныеДляЗагрузки.СуммаУменьшение = Неопределено, 0, ДанныеДляЗагрузки.СуммаУменьшение);
		ДокументОбъект.СуммаНДСДокумента     = ?(ДанныеДляЗагрузки.СуммаНДСУвеличение = Неопределено, 0, ДанныеДляЗагрузки.СуммаНДСУвеличение)
											- ?(ДанныеДляЗагрузки.СуммаНДСУменьшение = Неопределено, 0, ДанныеДляЗагрузки.СуммаНДСУменьшение);
	Иначе
		ДокументОбъект.СуммаДокумента     = ДанныеДляЗагрузки.СуммаДокумента;
		ДокументОбъект.СуммаНДСДокумента  = ДанныеДляЗагрузки.СуммаНДСДокумента;
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент= Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьНовыйКод();
		
	Иначе
		Контрагент= СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	
	Контрагент.Наименование = ОфициальноеНаименование;
	Контрагент.НаименованиеПолное = ОфициальноеНаименование;
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП;
	
	
	Контрагент.Записать();
	КонтрагентСсылка = Контрагент.Ссылка;
	
	
	Отбор = Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет");
	МассивСчетов = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
	
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "НомерСчета", Истина, ДеревоРазбора);
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Владелец", КонтрагентСсылка);
		
		БанковскийСчет = НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
		Если БанковскийСчет = Неопределено Тогда
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.НомерСчета = НомерСчета;
		Иначе
			БанковскийСчет = БанковскийСчет.Получитьобъект();
			БанковскийСчет.Владелец = КонтрагентСсылка;
		КонецЕсли;
		НаименованиеСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "Комментарий", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(НаименованиеСчета) Тогда
			БанковскийСчет.Наименование = НаименованиеСчета;
		КонецЕсли;
		
		БанкБИК = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкБИК", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(БанкБИК) Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Код", БанкБИК);
			Банк = НайтиСсылкуНаОбъект("Банки", ,ПараметрыПоиска);
			
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Банк = Справочники.Банки.СоздатьЭлемент();
				Банк.Наименование =  ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкНаименование", Истина, ДеревоРазбора);
				Банк.Код = БанкБИК;
			Иначе
				Банк = Банк.ПолучитьОбъект();
			КонецЕсли;
			
			Банк.КоррСчет = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкСчетКорр", Истина, ДеревоРазбора);
			Банк.Записать();
			
			БанковскийСчет.Банк = Банк.Ссылка;
		КонецЕсли;
		
		БанковскийСчет.Записать();
		
	КонецЦикла;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;   
	ДанныеЗаполненияШапки.Вставить("Организация", Справочники.Организации.ОрганизацияПоУмолчанию());
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
	КонецЕсли;
	ТЗ = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
				СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
					Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
						Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
						Если ЗначениеЗаполнено(Реквизит) Тогда
							ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
						КонецЕсли;
					Иначе
						ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
					ДанныеЗаполненияШапки.Вставить("Основание", Реквизит);
				КонецЕсли;
				
				Если СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", Реквизит);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе
				Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
					ЗаполнитьСтрокуТЧАктаНаПередачуПрав(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры",  ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента",  ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// Пример получения таблицы значений переданной в доп.данных
	ТаблицаСкидок = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ТаблицаСкидок");
	Если ТипЗнч(ТаблицаСкидок) = Тип("ТаблицаЗначений") Тогда
		ДанныеЗаполненияШапки.Вставить("ТаблицаСкидок", ТаблицаСкидок);
	КонецЕсли;
	
	// Реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента",    ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",     ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНаименование") Тогда
		ДоговорКонтрагента = НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.ДокументСделкиНаименование, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено Тогда
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.ДокументСделкиНаименование;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНомер") Тогда
				//НовыйДоговорКонтрагента.НомерДоговора = ДанныеЗаполненияШапки.ДокументСделкиНомер;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиДата") Тогда
				НовыйДоговорКонтрагента.ДатаНачала = ДанныеЗаполненияШапки.ДокументСделкиДата;
			КонецЕсли;
			НовыйДоговорКонтрагента.ВалютаВзаиморасчетов = ДанныеЗаполненияШапки.Валюта;
			НовыйДоговорКонтрагента.Записать();
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
	КонецЕсли;
	
	// Заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика.
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл
		// Заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) И ТЗ.Колонки.Найти("КоличествоУпаковок") <> Неопределено Тогда
			ТекКоэффициент = 1;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		КонецЕсли;
		НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящего", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящего", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ТекущаяДатаСеанса());
	
	Если СтрокаДляЗагрузки.ОписаниеОбъекта = "Корректировочный" Тогда
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры")) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
		КонецЕсли;
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования", "Реквизит");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Для Каждого Строка Из НайденнаяСтрока.Строки Цикл
			МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
		КонецЦикла;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	ВалКод = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод");
	Если НЕ  ВалКод="643" Тогда
		ДанныеЗаполненияШапки.Вставить("ВИностраннойВалюте", Истина);
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", ВалКод));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
	Организация = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Организация", Организация);
	
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Контрагент", Контрагент);
	
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДС"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУм"));

	ДанныеЗаполненияШапки.Вставить("СуммаУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУвел"));
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактурыOLD(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ТаблицаОснований = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
				Для Каждого Строка Из СтрокаРеквизита.Строки Цикл
					СтрокаТаблицы = ТаблицаОснований.Добавить();
					СтрокаТаблицы.ДокументОснование = Строка.СсылкаНаОбъект;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", ТаблицаОснований);
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ТекущаяДатаСеанса());
	
	Если ДанныеЗаполненияШапки.Свойство("НомерИсправления")
		И ДанныеЗаполненияШапки.Свойство("ДатаИсправления")
		И ЗначениеЗаполнено(ДанныеЗаполненияШапки.НомерИсправления)
		И ЗначениеЗаполнено(ДанныеЗаполненияШапки.ДатаИсправления) Тогда
		
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",
	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента",
	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияШапки.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(ДанныеЗаполненияШапки.ДатаИсходногоДокумента) Тогда
		
		ДанныеЗаполненияШапки.Вставить("Корректировочный", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента",
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Если НЕ ВалКод = "643" Тогда
		ДанныеЗаполненияШапки.Вставить("ВИностраннойВалюте", Истина);
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("Валюта", НайтиСсылкуНаОбъект("Валюты", ВалКод));
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция СчетНаОплату(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
						
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
						РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		ТекстСообщения = ВернутьСтр("ru = 'Заполнение на основании ЭД'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			2, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю, СсылкаНаВладельца);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора)
	
	НовСтрока = ТЗ.Добавить();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда

				НовСтрока.ЕдиницаИзмерения = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧАктаНаПередачуПрав(ТЗ, ДанныеЗаполнения, ДеревоРазбора)
	
	НовСтрока = ТЗ.Добавить();
	НДСВСумме = Ложь;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Если ИмяРеквизитаВБД = "НДСУчтеноВСумме" Тогда
				НДСВСумме = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		Если ТекСтрока.Реквизит = "ДокументОснование" Тогда
			НовСтрока.ДокументОснование = ЗначениеРеквизита;
			Продолжить;
		КонецЕсли;
		
		НовСтрока[ИмяРеквизитаВБД] = ЗначениеРеквизита;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			НовСтрока.ЕдиницаИзмерения = ЗначениеРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
	НовСтрока.СуммаСНДС = НовСтрока.Сумма + ?(НДСВСумме, 0, НовСтрока.СуммаНДС);
	
КонецПроцедуры

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Создание элемента справочника %1.'"),
			"Номенклатура поставщиков") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 2, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(Идентификатор)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СписокТиповАдресов - СписокЗначений - Представление элемента - описание типа (Структурированный,
//    Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
//    элемента списка брать данные при заполнении ЭД.
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОИДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено)
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	СтруктураПриемник.Вставить("Фамилия", Фамилия);
	СтруктураПриемник.Вставить("Имя", Имя);
	СтруктураПриемник.Вставить("Отчество", Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУчастникаОбмена(СтруктураУчастника, СведенияОбУчастнике)
	
	СтруктураУчастника.Вставить("КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	СтруктураУчастника.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	СтруктураУчастника.Вставить("ИНН", СведенияОбУчастнике.ИНН);
	СтруктураУчастника.Вставить("КПП", СведенияОбУчастнике.КПП);
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("ЭтоФизЛицо", СведенияОбУчастнике.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Если СведенияОбУчастнике.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЗаполнитьФИОИДолжность(СтруктураУчастника, СведенияОбУчастнике.ПолноеНаименование);
	КонецЕсли;
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	АдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой();
	ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, АдресУчастника, "Структурированный");
	
	СтруктураУчастника.Вставить("Телефон", СведенияОбУчастнике.Телефоны);
	СтруктураУчастника.Вставить("Факс");
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		Банк = "";
		БИК = "";
		СтруктураУчастника.БанковскийСчет.НомерСчета = НомерСчета;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			СтруктураУчастника.БанковскийСчет.НаимБанк = Банк.Наименование;
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			СтруктураУчастника.БанковскийСчет.БИК = БИК;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыУчастниковТОРГ12(РеквизитыШапки, СтруктураПараметров)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Поставщик, СведенияОПоставщике);
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, СведенияОГрузоотправителе);
		СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение = РеквизитыШапки.Подразделение;
	КонецЕсли;
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Плательщик, СведенияОПокупателе);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, СведенияОГрузополучателе);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыУчастниковАкт501(ДанныеПечати, СтруктураПараметров)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Контрагент);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Исполнитель, СведенияОПоставщике);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Заказчик, СведенияОПокупателе);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, СтруктураПараметров, ЕдиницаИзмеренияВеса = Неопределено)
	
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.Бухгалтер, ДанныеПечати.ГлавныйБухгалтер); // главный бухгалтер
	
	// Отпуск товара разрешил
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.ОтпускРазрешил, ДанныеПечати.Руководитель,
		ДанныеПечати.ДолжностьРуководителя);
	
	ЗаполнитьФИОИДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.ОтпускПроизвел, ДанныеПечати.Кладовщик,
		ДанныеПечати.ДолжностьКладовщика);
	
	СтруктураПараметров.СведенияПоОтпускуГруза.Вставить("ОтпущеноНаСумму", ИтоговыеСуммы.ИтогоСуммаСНДС);
	
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("КоличествоПорядковыхНомеровЗаписей",
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("ВсегоМест", ИтоговыеСуммы.ИтогоМест);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаНетто", ИтоговыеСуммы.ИтогоМассаНетто);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаБрутто", ИтоговыеСуммы.ИтогоМассаБрутто);
	
	СтруктураПараметров.ВсегоПоНакладной.Вставить("КоличествоМест", ИтоговыеСуммы.ИтогоМест);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("МассаБрутто", ИтоговыеСуммы.ИтогоМассаБрутто);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("МассаНетто", ИтоговыеСуммы.ИтогоМассаНетто);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаБезНДС);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаНДС", ИтоговыеСуммы.ИтогоСуммаНДС);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаСНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("МассаНеттоДоКорректировки", ИтоговыеСуммы.ИтогоМассаНеттоДоКорректировки);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаБезНДСДоКорректировки", ИтоговыеСуммы.ИтогоСуммаБезНДСДоКорректировки);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаНДСДоКорректировки", ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки);
	СтруктураПараметров.ВсегоПоНакладной.Вставить("СуммаСНДСДоКорректировки", ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(РеквизитыШапки,
										СтрокаТовары,
										ДанныеСтроки,
										СтруктураПараметров,
										ЕдиницаИзмеренияВеса = Неопределено)
	
	СтруктураПараметровТовары = СтруктураПараметров.ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровТовары, СтрокаТовары);
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("КодХарактеристики");
	СтруктураДопДанных.Вставить("Характеристика");
	СтруктураДопДанных.Вставить("СрокГодности");
	СтруктураДопДанных.Вставить("Коэффициент");
	СтруктураДопДанных.Вставить("Штрихкод");
	СтруктураДопДанных.Вставить("УпаковкаНаименование");
	СтруктураДопДанных.Вставить("УпаковкаКод");
	ЗаполнитьЗначенияСвойств(СтруктураДопДанных, СтрокаТовары);
	
	ИДТовара = СтрокаТовары.Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), СтрокаТовары.Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), СтрокаТовары.Упаковка.УникальныйИдентификатор(), "");
	
	СтруктураДопДанных.Вставить("ИД", Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки));
	Если ЗначениеЗаполнено(СтрокаТовары.Характеристика) ИЛИ ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
		Наименование = СтрокаТовары.НаименованиеНоменклатуры + " ("
			+ ?(ЗначениеЗаполнено(СтрокаТовары.НаименованиеХарактеристики), СтрокаТовары.НаименованиеХарактеристики, "")
			+ ?(ЗначениеЗаполнено(СтрокаТовары.Упаковка) И ЗначениеЗаполнено(СтрокаТовары.НаименованиеХарактеристики), ", ", "")
			+ ?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), СтрокаТовары.Упаковка, "") + ")";
		СтруктураДопДанных.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Ложь, СтрокаТовары.НомерСтроки);
	
	СтруктураДопДанных = Новый Структура;
	// Из-за особенностей в схеме при передачи ставки НДС некоторые ставки необходимо передавать в доп. параметрах.
	Если СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		СтруктураПараметровТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		
	ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		СтруктураПараметровТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		
	ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		СтруктураПараметровТовары.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		
	ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
	КонецЕсли;
		
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Товары", Истина, СтрокаТовары.НомерСтроки);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметровТовары.МассаНетто) Тогда
		Если ЗначениеЗаполнено(СтруктураПараметровТовары.КоличествоМест) Тогда
			СтруктураПараметровТовары.МассаНетто = СтруктураПараметровТовары.КоличествоМест;
		Иначе
			СтруктураПараметровТовары.МассаНетто = 0;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураПараметровТовары);
	
КонецПроцедуры

Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	Структура.Вставить("МассаНеттоДоКорректировки", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("ЦенаДоКорректировки", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаБезНДСДоКорректировки", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаНДСДоКорректировки", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("СуммаСНДСДоКорректировки", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("ДокументОснование", "");
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоСуммаНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	
	Структура.Вставить("ИтогоМассаНеттоДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаБезНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоСуммаНДС    = ИтоговыеСуммы.ИтогоСуммаНДС    + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
	//Увеличиваем итоговый суммы корректировки
	ИтоговыеСуммы.ИтогоМассаНеттоДоКорректировки  = ИтоговыеСуммы.ИтогоМассаНеттоДоКорректировки  + ДанныеСтроки.МассаНеттоДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаБезНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаБезНДСДоКорректировки + ДанныеСтроки.СуммаБезНДСДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки    = ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки    + ДанныеСтроки.СуммаНДСДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки   = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки   + ДанныеСтроки.СуммаСНДСДоКорректировки;
	
КонецПроцедуры

Процедура ЗаполнитьСерийныеНомера(ТаблицаТоваров)
	
	ТаблицаТоваров.Колонки.Добавить("СерийныеНомера");
	
	СерийныеНомера = Новый Массив;
	СерийныеНомера.Добавить("100090001");
	СерийныеНомера.Добавить("110090011");
	СерийныеНомера.Добавить("111090111");
	СерийныеНомера.Добавить("111191111");
	СерийныеНомера.Добавить("111111111");
	
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		ТекСтрока.СерийныеНомера = СерийныеНомера;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров)
	
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	
	ДанныеПодписанные = Новый Структура("СрокГодности, Характеристика");
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		ДанныеПодписанные.СрокГодности = КонецМесяца(ТекущаяДатаСеанса());
		ДанныеПодписанные.Характеристика = ТекСтрока.Характеристика;
		ТекСтрока.ДопДанныеПодписанные = ДанныеПодписанные;
		
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров)
	
	
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = ?(ЗначениеЗаполнено(Строка.Упаковка), Строка.Упаковка.УникальныйИдентификатор(), "");
		Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
		Если ЗначениеЗаполнено(Строка.Характеристика) ИЛИ ЗначениеЗаполнено(Строка.Упаковка) Тогда
			Строка.Наименование = Строка.Наименование + " ("
				+ ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика, "")
				+ ?(ЗначениеЗаполнено(Строка.Упаковка) И ЗначениеЗаполнено(Строка.Характеристика), ", ", "")
				+ ?(ЗначениеЗаполнено(Строка.Упаковка), Строка.Упаковка, "") + ")";
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеИсходногоДокумента(ДокументОснование) 
	
	ЕстьТовары = ДокументОснование.Товары.Количество() > 0;
	ЕстьУслуги = ДокументОснование.Услуги.Количество() > 0;
	ЕстьПО = ДокументОснование.ПрограммноеОбеспечение.Количество() > 0;
	
	СоглашениеКСоглашению = Ложь;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			СоглашениеКСоглашению = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СоглашениеКСоглашению Тогда
		ЗаголовокДокументаОснования = ВернутьСтр("ru='к соглашению'");
	ИначеЕсли ЕстьТовары Тогда
		ЗаголовокДокументаОснования = ВернутьСтр("ru='к накладной'");
	ИначеЕсли ЕстьУслуги Тогда
		ЗаголовокДокументаОснования = ВернутьСтр("ru='к акту об оказании услуг'");
	ИначеЕсли ЕстьПО Тогда
		ЗаголовокДокументаОснования = ВернутьСтр("ru='к акту на передачу прав'");
	Иначе
		ЗаголовокДокументаОснования = ВернутьСтр("ru='к накладной'");
	КонецЕсли;	
	
	Возврат ЗаголовокДокументаОснования;

	
КонецФункции

Функция НомерИсправления(ДокументОснование)
	
	НомерИсправления = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК НомерИсправления
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерИсправления = НомерИсправления + Выборка.НомерИсправления;
		
	КонецЦикла;
	
	Возврат  Формат(НомерИсправления, "ЧЦ=3; ЧДЦ=0; ЧГ=0; ЧВН=");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.СчетНаОплатуПокупателю.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ИмяРеквизита = "Основание";
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора)

		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ЛюбойВидЦены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТипыЦенНоменклатуры.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВидЦены = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВидЦены = Выборка.ВидЦены;
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция ТаблицаТиповЦен()
	
	ТаблицаТиповЦен = Новый ТаблицаЗначений;
	ТаблицаТиповЦен.Колонки.Добавить("ТипЦены");
	ТаблицаТиповЦен.Колонки.Добавить("Наименование");
	ТаблицаТиповЦен.Колонки.Добавить("Валюта");
	ТаблицаТиповЦен.Колонки.Добавить("ВключаетНДС");

	
	Возврат ТаблицаТиповЦен;
	
КонецФункции

Функция ТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	ТаблицаТоваров.Колонки.Добавить("ПокупательСсылка");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");

	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = ЭлектронныеДокументыВнутренний.МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Процедура ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный")
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Фамилия",
			Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Имя",
			Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Отчество",
			Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСуммыНДС(Сумма, СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Результат = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Результат = Окр(Сумма * 0.1, 2);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Результат = Окр(Сумма * 0.1, 2);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Результат = Окр(Сумма * 0.18, 2);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Результат = Окр(Сумма * 0.18, 2);
	иначе
		Результат = 123;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УслугаСЕдиницойИзмерения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка.Код КАК Ид,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Ссылка.Наименование КАК Наименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеEng КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.БазоваяЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ТаблицаТоваровДокумента(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщиков.Идентификатор, НЕОПРЕДЕЛЕНО) КАК Ид,
	|	ЕСТЬNULL(НоменклатураПоставщиков.Артикул, НЕОПРЕДЕЛЕНО) КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПоставщиков.Наименование, НЕОПРЕДЕЛЕНО) КАК Наименование,
	|	ОперацияТовары.Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ОперацияТовары.ЕдиницаИзмерения,
	|	ОперацияТовары.ЕдиницаИзмерения.Код,
	|	ОперацияТовары.ЕдиницаИзмерения.Наименование,
	|	ОперацияТовары.ЕдиницаИзмерения.НаименованиеПолное,
	|	ОперацияТовары.ЕдиницаИзмерения.МеждународноеСокращение,
	|	ОперацияТовары.Количество,
	|	ОперацияТовары.Цена,
	|	ОперацияТовары.Сумма
	|ИЗ
	|	Документ.Операция.Товары КАК ОперацияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ОперацияТовары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И ОперацияТовары.Ссылка.Контрагент = НоменклатураПоставщиков.Владелец
	|ГДЕ
	|	ОперацияТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = ЗАпрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДопРеквизитыДокумента(ДокументОбъект, ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения.Свойство("ДопДанныеПодписанные") Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизиты = "";
	Для Каждого КлючЗначение Из ДанныеЗаполнения.ДопДанныеПодписанные Цикл
		ДопРеквизиты = ДопРеквизиты + КлючЗначение.Ключ+ ": "+ КлючЗначение.Значение+ Символы.ПС;
	КонецЦикла;
	
	ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + ДопРеквизиты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

Функция ДоговорКонтрагентаПоРеквизитам(РеквизитыДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора
	|	И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("НомерДоговора", РеквизитыДоговора.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", РеквизитыДоговора.ДатаДоговора);
	Запрос.УстановитьПараметр("Владелец", РеквизитыДоговора.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Договор;
	
КонецФункции

//  конец примера

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи)
	
	// Документ записывается дважды:
	// Первый раз запись происходит с установкой признака ОбменДанными.Загрузка = Истина
	// Второй раз запись выполняется без установленного признака ОбменДанными.Загрузка
	
	Попытка
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		Если ДокументОбъект.Ссылка.Пустая()
			И НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(
						ВернутьСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Попытка
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(
						ВернутьСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
		ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки     + Строка.СуммаБезНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоНДСДоКорректировки       = ИтоговыеСуммы.ИтогоНДСДоКорректировки       + Строка.СуммаНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + Строка.СуммаСНДСДоКорректировки;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ИтоговыеСуммыДокумента()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	//Структура.Вставить("ИтогоРазницаБезНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаБезНДСУменьшение", 0);
	//Структура.Вставить("ИтогоРазницаНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаНДСУменьшение", 0);
	//Структура.Вставить("ИтогоРазницаСНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаСНДСУменьшение", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧасти(ТабличнаяЧасть)
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,");
	
	КолонкиЕдиницИзмерения = Новый Структура;
	Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		Если СтрНайти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			КолонкиЕдиницИзмерения.Вставить(Колонка.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		// Проверим длину кода единицы измерения  
		Для Каждого КлючЗначение Из КолонкиЕдиницИзмерения Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Если СтрДлина(Строка[ИмяКолонки]) = 4 Тогда
				ВызватьИсключение "Документ содержит 4-х значные коды ОКЕИ, отправка таких документов не поддерживается.";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКорректныйКодСтраны(КодСтраны)
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если СтрНайти("0123456789", СимволКода)=0 Тогда
			//Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеПоручение обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	//ПлатежныеПоручения = Новый Массив;
	//ПлатежныеПоручения.Добавить(СсылкаНаОбъект);
	//ПлатежныеТребования = Новый Массив;
	//ТаблицаДокументов = Обработки.КлиентБанк.ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	//
	//Если ТаблицаДокументов.Количество()>0 Тогда
	//	
	//	ПлатежноеПоручение = ТаблицаДокументов[0];
	//	
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата", ПлатежноеПоручение.Дата);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", ПлатежноеПоручение.СуммаДокумента);
	//	
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидПлатежа", ПлатежноеПоручение.ВидПлатежа);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидОплаты", "01");
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Очередность", ПлатежноеПоручение.ОчередностьПлатежа);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Код", ПлатежноеПоручение.ИдентификаторПлатежа);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа", ПлатежноеПоручение.НазначениеПлатежа);
	//	
	//	// Плательщик
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Наименование", ПлатежноеПоручение.ТекстПлательщика);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.ИНН", ПлатежноеПоручение.ИННПлательщика);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.КПП", ПлатежноеПоручение.КПППлательщика);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.РасчСчет", ПлатежноеПоручение.ОрганизацияНомерСчета);
	//	
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.БИК", ПлатежноеПоручение.ОрганизацияБИКБанка);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Наименование", ПлатежноеПоручение.ОрганизацияБанк);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Город", ПлатежноеПоручение.ОрганизацияГородБанка);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.КоррСчет", ПлатежноеПоручение.ОрганизацияРасчСчет);
	//	
	//	Если ПлатежноеПоручение.НепрямыеРасчетыУПлательщика Тогда
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.ОрганизацияБИКРЦБанка);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.Наименование", ПлатежноеПоручение.ОрганизацияБанкДляРасчетов);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.Город", ПлатежноеПоручение.ОрганизацияГородРЦБанка);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.КоррСчет", ПлатежноеПоручение.ОрганизацияКоррСчетРЦБанка);
	//	КонецЕсли;
	//	
	//	// Получатель
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Получатель", ПлатежноеПоручение.Контрагент);
	//	
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Наименование", ПлатежноеПоручение.ТекстПолучателя);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН", ПлатежноеПоручение.ИННПолучателя);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КПП", ПлатежноеПоручение.КПППолучателя);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.РасчСчет", ПлатежноеПоручение.КонтрагентНомерСчета);
	//	
	//	
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.БИК", ПлатежноеПоручение.КонтрагентБИКБанка);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Наименование", ПлатежноеПоручение.КонтрагентБанк);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Город", ПлатежноеПоручение.КонтрагентГородБанка);
	//	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.КоррСчет", ПлатежноеПоручение.КонтрагентРасчСчет);
	//	
	//	Если ПлатежноеПоручение.НепрямыеРасчетыУПолучателя Тогда
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.КонтрагентБИКРЦБанка);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.Наименование", ПлатежноеПоручение.КонтрагентБанкДляРасчетов);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.Город", ПлатежноеПоручение.КонтрагентГородРЦБанка);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.КонтрагентКоррСчетРЦБанка);
	//	КонецЕсли;
	//	
	//	// Платежи в бюджет
	//	Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.СтатусСоставителя", ПлатежноеПоручение.СтатусСоставителя);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательКБК", ПлатежноеПоручение.КодБК);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ОКТМО", ПлатежноеПоручение.КодОКАТО);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательОснования", ПлатежноеПоручение.ПоказательОснования);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательПериода", ПлатежноеПоручение.ПоказательПериода);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательНомера", ПлатежноеПоручение.ПоказательНомера);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательДаты", ПлатежноеПоручение.ПоказательДаты);
	//		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательТипа", ПлатежноеПоручение.ПоказательТипа);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

