////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ОБЪЕКТОВ ДЛЯ ОБМЕНА

Процедура ЗарегистрироватьОбъектыДляОбменаLeg7(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
	//Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда
	Если (Источник.ОбменДанными.Загрузка ИЛИ Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьДляОбмена"))
		И НЕ Источник.ДополнительныеСвойства.Свойство("РегистрироватьДляОбменаLeg6") Тогда
	// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
		Возврат;
	КонецЕсли;
	
	//// проверка даты документа: если дата меньше даты начала выгрузки документов, то не регистрируем
	//Если Источник.Дата < ДатаНа Тогда
	//
	//	
	//
	//КонецЕсли;
	
	МассивОбъектовParcels = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Parcels") Тогда
		
		// { RGS VShamin 21.08.2015 13:19:15 - 
		//МассивОбъектовParcels = Новый Массив;
		//МассивОбъектовParcels.Добавить(Источник);
		// } RGS VShamin 21.08.2015 13:19:16 - 
		
		Если Не Источник.ЭтоНовый() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	TripParcels.Ссылка
				|ИЗ
				|	Документ.Trip.Parcels КАК TripParcels
				|ГДЕ
				|	НЕ TripParcels.Ссылка.ПометкаУдаления
				|	И TripParcels.Parcel = &Parcel";
				
			Запрос.УстановитьПараметр("Parcel", Источник.Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			
			// { RGS VShamin 21.08.2015 13:07:35 - 
			//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//	МассивДопПарселей = ПолучитьПарселиТрипа(ВыборкаДетальныеЗаписи.Ссылка, Источник.Ссылка);
			//	Для каждого ТекДопПарсель Из МассивДопПарселей Цикл
			//		МассивОбъектовParcels.Добавить(ТекДопПарсель);
			//	КонецЦикла;
			//КонецЦикла;
			
			Если НЕ РезультатЗапроса.Пустой() Тогда  //парсель включен в трип => регистрируем трип
			
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл //парсель может быть в нескольких трипах
					
					// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
					//ЗарегистироватьТрип(ВыборкаДетальныеЗаписи.Ссылка);
					ЗарегистироватьТрип(ВыборкаДетальныеЗаписи.Ссылка, Источник.ОбменДанными.Отправитель);
					// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
					
				КонецЦикла;
				
			Иначе //парсель не включен в трип => добавляем парсель в массив парселей для регистрации
			
				МассивОбъектовParcels = Новый Массив;
				МассивОбъектовParcels.Добавить(Источник);
			
			КонецЕсли;
			// } RGS VShamin 21.08.2015 13:07:36 - 
			
		Иначе
			
			// новые парсели регистрируем по упрощенной схеме
			ЗарегистрироватьНовыйПарсель(Источник);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Trip") Тогда
		
		//МассивОбъектовParcels = ПолучитьПарселиТрипа(Источник);
		// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		//ЗарегистироватьТрип(Источник);
		ЗарегистироватьТрип(Источник, Источник.ОбменДанными.Отправитель);
		// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
		Возврат;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		МассивОбъектовParcels = ПолучитьПарселиДока(Источник);
		ЗарегистрироватьDOC(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Поставка") Тогда
		
		МассивОбъектовParcels = ПолучитьПарселиПоставки(Источник);
		ЗарегистрироватьШипмент(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Инвойс") Тогда
		
		ЗарегистрироватьИнвойс(Источник);
		
	// { RGS VShamin 17.12.2015 15:22:04 - обмен письмами
	//ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.EMails") Тогда
	//	
	//	ЗарегистрироватьEMails(Источник);
	// } RGS VShamin 17.12.2015 15:22:09 - обмен письмами
	
	// { RGS LKhristyuk 4/16/2018 3:34:40 PM
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ExportRequest") Тогда
		
		ЗарегистрироватьExportRequest(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ExportShipment") Тогда
	
		ЗарегистрироватьExportShipment(Источник);	
	// } RGS LKhristyuk 4/16/2018 3:34:40 PM
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтрокиИнвойса") Тогда
		
		Если Источник.ЭтоНовый() Тогда
			Возврат;
		КонецЕсли;
		
		МассивОбъектовParcels = ПолучитьПарселиПоItem(Источник);
		
		ЗарегистрироватьСтрокуИнвойса(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ЗаявкиНаЗакупку") Тогда
		
		ЗарегистрироватьPO(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтрокиЗаявкиНаЗакупку") Тогда
		
		ЗарегистрироватьPOLine(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.BORGs") Тогда
		
		ЗарегистрироватьБорг(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.КостЦентры") Тогда
		
		ЗарегистрироватьКостЦентр(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Warehouses") Тогда
		
		ЗарегистрироватьСклад(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.LegalEntities") Тогда
		
		ЗарегистрироватьLegalEntity(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Equipments") Тогда
		
		ЗарегистрироватьEquipment(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ServiceProviders") Тогда
		
		ЗарегистрироватьServiceProvider(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		
		ЗарегистрироватьПользователя(Источник);
		
	// { RGS VShamin 04.08.2015 13:00:28 - S-I-0001193
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.SoldTo") Тогда
		
		ЗарегистрироватьSoldTo(Источник);
	// } RGS VShamin 04.08.2015 13:00:50 - S-I-0001193
	
	// { RGS VShamin 17.12.2015 15:22:04 - обмен шаблонами
	//ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.UsersPODsEMailTemplates") Тогда
	//	
	//	ЗарегистрироватьUsersPODsEMailTemplates(Источник);
	// } RGS VShamin 17.12.2015 15:22:09 - обмен шаблонами
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.AUsAndLegalEntities") Тогда
		
		ЗарегистрироватьБоргиПоAUsAndLegalEntities(Источник);
		
	КонецЕсли;
	
	Если МассивОбъектовParcels <> Неопределено Тогда
		// { RGS AGorlenko 13.12.2015 18:48:55 - регистрация парселей при простановке АТА для НЭКа
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.Поставка") Тогда
			НовыйАТА = Источник.ATA;
			СтарыйАТА = ?(ЗначениеЗаполнено(Источник.Ссылка), ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ATA"), '00010101');
			Если ЗначениеЗаполнено(НовыйАТА) ИЛИ ЗначениеЗаполнено(СтарыйАТА) Тогда
				Источник.ОбменДанными.Отправитель = Неопределено
			КонецЕсли;
		КонецЕсли;
		// } RGS AGorlenko 13.12.2015 18:49:16 - регистрация парселей при простановке АТА для НЭКа
		ЗарегистрироватьСписокParcels(Источник, МассивОбъектовParcels);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПарселиТрипа(Трип, ПарсельИсключение = Неопределено)
	
	МассивОбъектовParcels = Новый Массив;
	ПарселиОбъекта = Трип.Parcels.ВыгрузитьКолонку("Parcel");
	ПарселиСсылки = Трип.Ссылка.Parcels.ВыгрузитьКолонку("Parcel");
	ОбщийМассивПарселей = РГСофтКлиентСервер.СложитьМассивы(ПарселиОбъекта, ПарселиСсылки);
	Для каждого ТекПарсель Из ОбщийМассивПарселей Цикл
		Если ТекПарсель = ПарсельИсключение Тогда
			Продолжить;
		КонецЕсли;
		МассивОбъектовParcels.Добавить(ТекПарсель.ПолучитьОбъект());
	КонецЦикла;
	
	
	Возврат МассивОбъектовParcels;
	
КонецФункции

Функция ПолучитьПарселиДока(Док)
	
	МассивОбъектовParcels = Новый Массив;
	Для каждого ТекСтрока Из Док.Parcels Цикл
		ТекПарсель = ТекСтрока.Parcel;
		МассивОбъектовParcels.Добавить(ТекПарсель.ПолучитьОбъект());
	КонецЦикла;
	
	Возврат МассивОбъектовParcels;
	
КонецФункции

Функция ПолучитьПарселиПоItem(Item)
	
	МассивОбъектовParcels = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.Ссылка
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса
		|	И НЕ ParcelsДетали.Ссылка.Отменен
		|	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления";

	Запрос.УстановитьПараметр("СтрокаИнвойса", Item.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивОбъектовParcels.Добавить(Выборка.Ссылка.ПолучитьОбъект());
	КонецЦикла;
	
	Возврат МассивОбъектовParcels;
	
КонецФункции

Функция ПолучитьПарселиПоставки(Shipment)
	
	Доки = Shipment.УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");
	
	МассивОбъектовParcels = Новый Массив;
	
	Для каждого ТекДок Из Доки Цикл
		ТекМассивОбъектовParcels = ПолучитьПарселиДока(ТекДок);
		Для каждого ТекПарсель Из ТекМассивОбъектовParcels Цикл
			МассивОбъектовParcels.Добавить(ТекПарсель);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивОбъектовParcels;
	
КонецФункции

Процедура ЗарегистрироватьСписокParcels(Источник, МассивОбъектовParcels, ПолностьюПоТрипу = Ложь)
	
	Если МассивОбъектовParcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивParcels = Новый Массив;
	МассивImportParcels = Новый Массив;
	Для каждого ТекОбъект Из МассивОбъектовParcels Цикл
		Если ТекОбъект.ЭтоНовый() Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекОбъект.LocalOnly Тогда
			МассивImportParcels.Добавить(ТекОбъект.Ссылка);
		КонецЕсли;
		МассивParcels.Добавить(ТекОбъект.Ссылка);
	КонецЦикла;
	
	// может быть 4 случая:
	// 1. Старая версия удовлетворяет условиям, новая удовлетворяет - регистрируем
	// 2. Старая версия удовлетворяет условиям, новая не удовлетворяет - если объект уже зарегистрирован, то снимаем с регистрации, если он еще ни разу не выгружался, иначе регистрируем как canceled
	// 3. Старая версия не удовлетворяет условиям, новая удовлетворяет - регистрируем
	// 4. Старая версия не удовлетворяет условиям, новая не удовлетворяет - не регистрируем
	
	ИсходныйТекстЗапроса = Обработки.LocalDistributionDesktop.ПолучитьТекстЗапросаLeg7Reports();
	
	Запрос = Новый Запрос;
	// { RGS AGorlenko 18.03.2015 11:35:31 - устанавливаем этот параметр ниже
	//Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	// } RGS AGorlenko 18.03.2015 11:35:46 - устанавливаем этот параметр ниже
	Запрос.УстановитьПараметр("TripПустаяСсылка", Документы.Trip.ПустаяСсылка());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВременныеТаблицыДляОбменаLeg7(Запрос, Источник, МассивОбъектовParcels);
	ТекстЗапросаДляОбъектов = ПреобразоватьТекстЗапросаДляОбъектов(ИсходныйТекстЗапроса, ТипЗнч(Источник));
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	ЗарегистрированныеПарсели = Новый Массив;
	СтруктураПоискаParcelNo = Новый Структура("ParcelNo");
	СтруктураПоискаParcelСсылка = Новый Структура("ParcelСсылка");
	СтруктураПоискаTripNo = Новый Структура("TripNo");
	СтруктураПоискаImport = Новый Структура("Local", Ложь);
	
	СтрокиДляУдаленияНовойВерсии = Новый Массив;
	СтрокиДляУдаленияСтаройВерсии = Новый Массив;
	ПарселиДляУдаленияРегистрации = Новый Массив;
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		Если Источник.ОбменДанными.Отправитель = КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		// } RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		
		ДатыНачалаВыгрузкиПоСкладам = ПланыОбмена.Leg7.ПолучитьДатыНачалаВыгрузкиДокументовПоСкладам(КлючИЗначение.Значение);
		
		Запрос.УстановитьПараметр("ServiceProvider", КлючИЗначение.Ключ);
		Запрос.УстановитьПараметр("StartDate", КлючИЗначение.Ключ.StartOfLeg7Reports);
		Запрос.УстановитьПараметр("КонвертироватьВСтандартныеЕдиницыИзмерения", КлючИЗначение.Значение.КонвертироватьВСтандартныеЕдиницыИзмерения);
		НастройкаОбмена = ПланыОбмена.Leg7.ПолучитьНастройкуОбмена(КлючИЗначение.Значение);
		Если НастройкаОбмена <> Неопределено Тогда
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияРазмера", НастройкаОбмена.ЕдиницаИзмеренияРазмера);
			Запрос.УстановитьПараметр("КоэффицинтПересчетаРазмера", НастройкаОбмена.КоэффицинтПересчетаРазмера);
			Запрос.УстановитьПараметр("КодЕдиницыИзмеренияРазмера", НастройкаОбмена.КодЕдиницыИзмеренияРазмера);
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияВеса", НастройкаОбмена.ЕдиницаИзмеренияВеса);
			Запрос.УстановитьПараметр("КоэффицинтПересчетаВеса", НастройкаОбмена.КоэффицинтПересчетаВеса);
			Запрос.УстановитьПараметр("КодЕдиницыИзмеренияВеса", НастройкаОбмена.КодЕдиницыИзмеренияВеса);
			Запрос.УстановитьПараметр("ИсключаемыеБрокеры", НастройкаОбмена.ИсключаемыеБрокеры);
			Запрос.УстановитьПараметр("МассивParcels", ?(НастройкаОбмена.ВыгружатьТолькоИмпортныеПарсели, МассивImportParcels, МассивParcels));
		Иначе
			Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивTrips", Новый Массив());
		Запрос.Текст = ТекстЗапросаДляОбъектов;
		Результат = Запрос.Выполнить();
		ТаблицаПоНовойВерсии = Результат.Выгрузить();
		Если НастройкаОбмена.ВыгружатьТолькоИмпортныеПарсели Тогда
			ТаблицаПоНовойВерсии = ТаблицаПоНовойВерсии.Скопировать(СтруктураПоискаImport);
		КонецЕсли;
		
		СтрокиДляУдаленияНовойВерсии.Очистить();
		ПарселиДляУдаленияРегистрации.Очистить();
		Для каждого СтрокаНовойВерсии Из ТаблицаПоНовойВерсии Цикл
			ДатаНачалаВыгрузки = ДатыНачалаВыгрузкиПоСкладам[СтрокаНовойВерсии.WarehouseFromСсылка];
			Если ДатаНачалаВыгрузки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаНовойВерсии.TripNo) И ?(ЗначениеЗаполнено(СтрокаНовойВерсии.Final), СтрокаНовойВерсии.Final, СтрокаНовойВерсии.Draft) < ДатаНачалаВыгрузки Тогда
				// { RGS AGorlenko 18.11.2015 14:36:06 - исправление ошибки в случае, если в трип включается парсель, который уже зарегистрирован
				Если ПланыОбмена.Leg7.ПарсельВСпискеЗарегистрированных(КлючИЗначение.Значение, СтрокаНовойВерсии.ParcelСсылка) Тогда
					Продолжить;
				КонецЕсли;
				// } RGS AGorlenko 18.11.2015 14:36:45 - исправление ошибки в случае, если в трип включается парсель, который уже зарегистрирован
				СтрокиДляУдаленияНовойВерсии.Добавить(СтрокаНовойВерсии);
				Если ПарселиДляУдаленияРегистрации.Найти(СтрокаНовойВерсии.ParcelСсылка) = Неопределено Тогда
					ПарселиДляУдаленияРегистрации.Добавить(СтрокаНовойВерсии.ParcelСсылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаДляУдаления Из СтрокиДляУдаленияНовойВерсии Цикл
			ТаблицаПоНовойВерсии.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Запрос.Текст = Обработки.LocalDistributionDesktop.ПолучитьТекстЗапросаLeg7Reports(Истина);
		Результат = Запрос.Выполнить();
		ТаблицаПоСтаройВерсии = Результат.Выгрузить();
		
		СтрокиДляУдаленияСтаройВерсии.Очистить();
		Для каждого СтрокаСтаройВерсии Из ТаблицаПоСтаройВерсии Цикл
			ДатаНачалаВыгрузки = ДатыНачалаВыгрузкиПоСкладам[СтрокаСтаройВерсии.WarehouseFromСсылка];
			Если ДатаНачалаВыгрузки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаСтаройВерсии.TripNo) И ?(ЗначениеЗаполнено(СтрокаСтаройВерсии.Final), СтрокаСтаройВерсии.Final, СтрокаСтаройВерсии.Draft) < ДатаНачалаВыгрузки Тогда
				// { RGS AGorlenko 18.11.2015 14:36:06 - исправление ошибки в случае, если в трип включается парсель, который уже зарегистрирован
				Если ПланыОбмена.Leg7.ПарсельВСпискеЗарегистрированных(КлючИЗначение.Значение, СтрокаСтаройВерсии.ParcelСсылка) Тогда
					Продолжить;
				КонецЕсли;
				// } RGS AGorlenko 18.11.2015 14:36:45 - исправление ошибки в случае, если в трип включается парсель, который уже зарегистрирован
				СтрокиДляУдаленияСтаройВерсии.Добавить(СтрокаСтаройВерсии);
				Если ПарселиДляУдаленияРегистрации.Найти(СтрокаСтаройВерсии.ParcelСсылка) = Неопределено Тогда
					ПарселиДляУдаленияРегистрации.Добавить(СтрокаСтаройВерсии.ParcelСсылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаДляУдаления Из СтрокиДляУдаленияСтаройВерсии Цикл
			ТаблицаПоСтаройВерсии.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		// удаление строк по парселям, по которым не нужна регистрация
		Для каждого ТекПарсель Из ПарселиДляУдаленияРегистрации Цикл
		
			СтруктураПоискаParcelСсылка.ParcelСсылка = ТекПарсель;
			НайденныеСтроки = ТаблицаПоНовойВерсии.НайтиСтроки(СтруктураПоискаParcelСсылка);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТаблицаПоНовойВерсии.Удалить(НайденнаяСтрока);
			КонецЦикла;
			НайденныеСтроки = ТаблицаПоСтаройВерсии.НайтиСтроки(СтруктураПоискаParcelСсылка);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТаблицаПоСтаройВерсии.Удалить(НайденнаяСтрока);
			КонецЦикла;
		
		КонецЦикла;
		
		// проверим изменились ли значимые реквизиты в целом для трипа
		//Если ПолностьюПоТрипу И ТаблицаПоНовойВерсии.Количество() > 0 Тогда
		//	Если НЕ ИзменилисьЗначимыеДанныеТрипа(ТаблицаПоСтаройВерсии, ТаблицаПоНовойВерсии) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;
		
		ЗарегистрированныеПарсели.Очистить();
				
		// для каждого парселя определяем к какой категории он относится
		Для каждого ТекОбъект Из МассивОбъектовParcels Цикл
			ЭтоНовыйОбъект = ТекОбъект.ЭтоНовый();
			СтруктураПоискаParcelNo.ParcelNo = ТекОбъект.Код;
			СтруктураПоискаParcelСсылка.ParcelСсылка = ТекОбъект.Ссылка;
			СтрокиНовойВерсии = ?(ЭтоНовыйОбъект, 
				ТаблицаПоНовойВерсии.Скопировать(СтруктураПоискаParcelNo), 
				ТаблицаПоНовойВерсии.Скопировать(СтруктураПоискаParcelСсылка));
			СтрокиСтаройВерсии = ?(ЭтоНовыйОбъект, 
				Новый Массив(), 
				ТаблицаПоСтаройВерсии.Скопировать(СтруктураПоискаParcelСсылка));
			НоваяВерсияПодходит = СтрокиНовойВерсии.Количество() > 0;
			СтараяВерсияПодходит = СтрокиСтаройВерсии.Количество() > 0;
			Если СтараяВерсияПодходит И НоваяВерсияПодходит Тогда
				// проверим, изменились ли значимые реквизиты
				Если Не ИзменилисьЗначимыеДанныеПарселя(СтрокиСтаройВерсии, СтрокиНовойВерсии) Тогда
					Продолжить;
				КонецЕсли;
			// { RGS ASeryakov 06/12/2017 12:00:00 PM S-I-0004107
			ИначеЕсли НЕ СтараяВерсияПодходит И НЕ НоваяВерсияПодходит Тогда
				
				Если Не ТекОбъект.Модифицированность() Тогда
					Продолжить;
				КонецЕсли;			
				
				// { RGS LKhristyuk 4/17/2018 7:07:54 PM
				//Если РегистрироватьПарсельДляОбменаLeg6(ТекОбъект.Ссылка, НастройкаОбмена.CCA) Тогда
				Если РегистрироватьПарсельДляОбменаLeg6(ТекОбъект.Ссылка, НастройкаОбмена.CCA) ИЛИ ЗначениеЗаполнено(ТекОбъект.ExportRequest) Тогда
				// } RGS LKhristyuk 4/17/2018 7:07:54 PM	
					ЗарегистрироватьПарсельДляОбменаLeg7(КлючИЗначение.Значение, ТекОбъект, Истина, Истина, СтрокиСтаройВерсии, СтрокиНовойВерсии);
					
				КонецЕсли;
				
			// } RGS ASeryakov 06/12/2017 12:00:00 PM S-I-0004107
			КонецЕсли;
			ПарсельЗарегистрирован = ЗарегистрироватьПарсельДляОбменаLeg7(КлючИЗначение.Значение, ТекОбъект, СтараяВерсияПодходит, НоваяВерсияПодходит, СтрокиСтаройВерсии, СтрокиНовойВерсии);
			
			Если ПарсельЗарегистрирован Тогда
				ЗарегистрированныеПарсели.Добавить(ТекОбъект.Код);
			КонецЕсли;
		КонецЦикла;
		
		// если парсель в составе трипа и он зарегистрирован, то должны быть зарегисрированы все парсели этого трипа
		МассивТрипов = Новый Массив;
		Для каждого ТекНомерПарселя Из ЗарегистрированныеПарсели Цикл
			
			// трип из новой версии
			РегистрироватьТрип = Истина;
			НайденнаяСтрока = ТаблицаПоНовойВерсии.Найти(ТекНомерПарселя, "ParcelNo");
			Если НайденнаяСтрока = Неопределено Тогда
				РегистрироватьТрип = Ложь;
			ИначеЕсли Не ЗначениеЗаполнено(НайденнаяСтрока.TripСсылка) Тогда
				РегистрироватьТрип = Ложь;
			КонецЕсли;
			Если РегистрироватьТрип И МассивТрипов.Найти(НайденнаяСтрока.TripСсылка) = Неопределено Тогда
				МассивТрипов.Добавить(НайденнаяСтрока.TripСсылка);
			КонецЕсли;
			
			// трип из старой версии. Может быть, когда парсель удален из трипа
			РегистрироватьТрип = Истина;
			НайденнаяСтрока = ТаблицаПоСтаройВерсии.Найти(ТекНомерПарселя, "ParcelNo");
			Если НайденнаяСтрока = Неопределено Тогда
				РегистрироватьТрип = Ложь;
			ИначеЕсли Не ЗначениеЗаполнено(НайденнаяСтрока.TripСсылка) Тогда
				РегистрироватьТрип = Ложь;
			КонецЕсли;
			Если РегистрироватьТрип И МассивТрипов.Найти(НайденнаяСтрока.TripСсылка) = Неопределено Тогда
				МассивТрипов.Добавить(НайденнаяСтрока.TripСсылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекТрип Из МассивТрипов Цикл
			ТекМассивПарселейТрипа = Документы.Trip.ПолучитьМассивParcels(ТекТрип);
			Для каждого ТекПарсельТрипа Из ТекМассивПарселейТрипа Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, ТекПарсельТрипа);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНовыйПарсель(Источник)

	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();

	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		//Если НЕ Источник.Проверен ИЛИ Источник.Отменен
		//	ИЛИ Источник.Repacked Тогда
		Если (НЕ Источник.Проверен ИЛИ Источник.Отменен
			ИЛИ Источник.Repacked)
			И (Источник.ОбменДанными.Отправитель <> Неопределено И Источник.ОбменДанными.Отправитель = КлючИЗначение.Значение) Тогда
		// } RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		
			Продолжить;
		
		КонецЕсли;
		
		СервисПровайдер = КлючИЗначение.Ключ;
		СкладыСервисПровайдера = Справочники.ServiceProviders.ПолучитьМассивСкладов(СервисПровайдер);
		СобственныеСкладыСервисПровайдера = Справочники.ServiceProviders.ПолучитьМассивСобственныхСкладов(СервисПровайдер);
		
		Если СкладыСервисПровайдера.Найти(Источник.WarehouseFrom) <> Неопределено 
			И СобственныеСкладыСервисПровайдера.Найти(Источник.WarehouseFrom) = Неопределено Тогда
		
			Источник.УстановитьСсылкуНового(Справочники.Parcels.ПолучитьСсылку(Новый УникальныйИдентификатор()));
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возврат Истина, если парсель зарегистрирован
// Возврат Ложь, если не зарегистрирован
Функция ЗарегистрироватьПарсельДляОбменаLeg7(УзелОбмена, ПарсельОбъект, СтараяВерсияПодходит, НоваяВерсияПодходит, СтрокиСтаройВерсии, СтрокиНовойВерсии)
	
	Если Не СтараяВерсияПодходит И Не НоваяВерсияПодходит Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтараяВерсияПодходит И Не НоваяВерсияПодходит Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ПарсельОбъект.Ссылка, УзелОбмена) 
			И ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ПарсельОбъект) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ПарсельОбъект);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПарсельОбъект.ЭтоНовый() Тогда
		ПарсельОбъект.УстановитьСсылкуНового(Справочники.Parcels.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ПарсельОбъект);
	Возврат Истина;
	
КонецФункции

// { RGS ASeryakov 06/12/2017 12:00:00 PM S-I-0004107
// } RGS ASeryakov 06/12/2017 12:00:00 PM S-I-0004107
Функция РегистрироватьПарсельДляОбменаLeg6(Ссылка, CCA)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel КАК Parcel
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = ПоставкаУпаковочныеЛисты.УпаковочныйЛист
		|			И (НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = TripParcels.Parcel
		|			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA = &CCA
		|	И КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = &Parcel
		|	И (ПоставкаУпаковочныеЛисты.Ссылка.ATA ЕСТЬ NULL
		|			ИЛИ ПоставкаУпаковочныеЛисты.Ссылка.ATA = ДАТАВРЕМЯ(1, 1, 1))
		|	И TripParcels.Parcel ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("CCA", CCA);
	Запрос.УстановитьПараметр("Parcel", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
//Процедура ЗарегистироватьТрип(Источник)
Процедура ЗарегистироватьТрип(Источник, Отправитель = Неопределено)
// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
	
	// { RGS VShamin 8/21/2015 2:33:24 PM - 
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.Trip") Тогда
	
		СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
		
		Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
			
			РегистрироватьТрип = Ложь;
			Если КлючИЗначение.Ключ = Источник.ServiceProvider Тогда
				РегистрироватьТрип = Истина;
			Иначе
				СкладыСервисПровайдера = Справочники.ServiceProviders.ПолучитьМассивСкладов(КлючИЗначение.Ключ);
				Если СкладыСервисПровайдера.Найти(Источник.WarehouseFrom) <> Неопределено ИЛИ СкладыСервисПровайдера.Найти(Источник.WarehouseFrom) <> Неопределено Тогда
					РегистрироватьТрип = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
			//Если РегистрироватьТрип Тогда
			Если РегистрироватьТрип 
				И (Отправитель = Неопределено ИЛИ (Отправитель <> Неопределено И Отправитель <> КлючИЗначение.Значение)) Тогда
			// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
				ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
	// }RGS VShamin 8/21/2015 2:33:25 PM -
	
	ЭтоНовыйТрип = Источник.ЭтоНовый();
	Если Не ЭтоНовыйТрип Тогда
		Если Не ИзменилисьЗначимыеДанныеТрипа(Источник) Тогда
			Возврат;
		КонецЕсли;
		СтруктураСтарыхЗначенийРеквизитов = РГСофтСерверПовтИспСеанс.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "WarehouseFrom, ServiceProvider");
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		РегистрироватьТрип = Ложь;
		// { RGS VShamin 8/21/2015 2:33:25 PM 
		//Если КлючИЗначение.Ключ = Источник.ServiceProvider ИЛИ КлючИЗначение.Ключ = СтруктураСтарыхЗначенийРеквизитов.ServiceProvider Тогда
		Если (ЭтоНовыйТрип И КлючИЗначение.Ключ = Источник.ServiceProvider)
			ИЛИ (НЕ ЭтоНовыйТрип И (КлючИЗначение.Ключ = Источник.ServiceProvider ИЛИ КлючИЗначение.Ключ = СтруктураСтарыхЗначенийРеквизитов.ServiceProvider)) Тогда
		// } RGS VShamin 8/21/2015 2:33:25 PM 
			РегистрироватьТрип = Истина;
		Иначе
			СкладыСервисПровайдера = Справочники.ServiceProviders.ПолучитьМассивСкладов(КлючИЗначение.Ключ);
			Если СкладыСервисПровайдера.Найти(Источник.WarehouseFrom) <> Неопределено ИЛИ СкладыСервисПровайдера.Найти(Источник.WarehouseFrom) <> Неопределено Тогда
				РегистрироватьТрип = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		//Если РегистрироватьТрип Тогда
		Если РегистрироватьТрип 
			И (Отправитель = Неопределено ИЛИ (Отправитель <> Неопределено И Отправитель <> КлючИЗначение.Значение)) Тогда
		// } RGS VShamin 09.11.2015 17:54:07 - Регистрация объектов исключая отправителей
			Если ЭтоНовыйТрип Тогда
				Источник.УстановитьСсылкуНового(Документы.Trip.ПолучитьСсылку(Новый УникальныйИдентификатор()));
			КонецЕсли;
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
	// {RGS VShamin 8/21/2015 2:34:18 PM - 
	КонецЕсли;
	// }RGS VShamin 8/21/2015 2:34:20 PM - 
	
КонецПроцедуры

Функция ИзменилисьЗначимыеДанныеПарселя(СтараяВерсия, НоваяВерсия)
	
	ПерваяСтрокаСтаройВерсии = СтараяВерсия[0];
	ПерваяСтрокаНовойВерсии = НоваяВерсия[0];
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Canceled");
	ИменаРеквизитов.Добавить("ParcelNo");
	ИменаРеквизитов.Добавить("ShipmentATA");
	ИменаРеквизитов.Добавить("DOCNo");
	ИменаРеквизитов.Добавить("MOT");
	ИменаРеквизитов.Добавить("ImportHouseWB");
	ИменаРеквизитов.Добавить("ImportWB2");
	ИменаРеквизитов.Добавить("ImportWB3");
	ИменаРеквизитов.Добавить("ImportWB4");
	ИменаРеквизитов.Добавить("WarehouseTo");
	ИменаРеквизитов.Добавить("NumOfParcels");
	ИменаРеквизитов.Добавить("ParcelSerialNo");
	ИменаРеквизитов.Добавить("PackingType");
	ИменаРеквизитов.Добавить("Length");
	ИменаРеквизитов.Добавить("LengthCorrected");
	ИменаРеквизитов.Добавить("Width");
	ИменаРеквизитов.Добавить("WidthCorrected");
	ИменаРеквизитов.Добавить("Height");
	ИменаРеквизитов.Добавить("HeightCorrected");
	ИменаРеквизитов.Добавить("DIMsUOM");
	ИменаРеквизитов.Добавить("CubicMeters");
	ИменаРеквизитов.Добавить("GrossWeight");
	ИменаРеквизитов.Добавить("GrossWeightCorrected");
	ИменаРеквизитов.Добавить("GrossWeightUOM");
	ИменаРеквизитов.Добавить("HazardClass");
	ИменаРеквизитов.Добавить("Repacked");
	ИменаРеквизитов.Добавить("TripComment");
	
	// трип
	ИменаРеквизитов.Добавить("Draft");
	ИменаРеквизитов.Добавить("ETD");
	ИменаРеквизитов.Добавить("Final");
	ИменаРеквизитов.Добавить("ATD");
	ИменаРеквизитов.Добавить("TripNo");
	ИменаРеквизитов.Добавить("WarehouseFrom");
	ИменаРеквизитов.Добавить("ServiceProvider");
	ИменаРеквизитов.Добавить("Equipment");
	ИменаРеквизитов.Добавить("TripComment");
	
	Для каждого ТекИмяРеквизита Из ИменаРеквизитов Цикл
		Если ПерваяСтрокаСтаройВерсии[ТекИмяРеквизита] <> ПерваяСтрокаНовойВерсии[ТекИмяРеквизита] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаКолонокItems = "ItemNo, ParentCompany, LegalEntity, PONo, PartNo, ItemSerialNo, ItemDescription, QTY, QTYUOM, NetWeight, NetWeightUOM";
	СтараяВерсияItems = СтараяВерсия.Скопировать(, СтрокаКолонокItems);
	НоваяВерсияItems = НоваяВерсия.Скопировать(, СтрокаКолонокItems);
	СтараяВерсияItems.Свернуть(СтрокаКолонокItems);
	НоваяВерсияItems.Свернуть(СтрокаКолонокItems);
	
	Если СтараяВерсияItems.Количество() <> НоваяВерсияItems.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(СтрокаКолонокItems);
	Для каждого ТекСтрокаСтаройВерсии Из СтараяВерсияItems Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаСтаройВерсии);
		Если НоваяВерсияItems.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// трип
	СтрокаКолонок = "Draft, ETD, Final, ATD, WarehouseTo, LegalEntity, ETA, ATA, Waybill, TripNo, WarehouseFrom, ServiceProvider, Equipment, TripComment";
	СтараяВерсияТрипа = СтараяВерсия.Скопировать(, СтрокаКолонок);
	НоваяВерсияТрипа = НоваяВерсия.Скопировать(, СтрокаКолонок);
	СтараяВерсияТрипа.Свернуть(СтрокаКолонок);
	НоваяВерсияТрипа.Свернуть(СтрокаКолонок);
	
	Если СтараяВерсияТрипа.Количество() <> НоваяВерсияТрипа.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(СтрокаКолонок);
	Для каждого ТекСтрокаСтаройВерсии Из СтараяВерсияТрипа Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаСтаройВерсии);
		Если НоваяВерсияТрипа.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеИнвойса(ДокументОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ДокументОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Номер,Голд,Продавец,Покупатель,Декларант,
		|УсловияПоставки,Contract,OperatingLocation,Валюта,НомерЗаявкиНаДоставку,СуммаДокумента,Страховка,
		|Фрахт,Упаковка,ОбщаяСумма,Проверен,Comment,Specialist,Transfer,Отменен";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеТрипа(ДокументОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ДокументОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Номер,WarehouseFrom,Draft,Final,Equipment,
		|EquipmentNo,ETD,ATD,ServiceProvider,Comment,GrossWeightKG,CubicMeters";
		
	СтрокаЗначимыхРеквизитовParcels = "Parcel";
	СтрокаЗначимыхРеквизитовFinalDestinations = "WarehouseTo,LegalEntity,Waybill,ETA,ATA";
	
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "FinalDestinations", СтрокаЗначимыхРеквизитовFinalDestinations)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "Parcels", СтрокаЗначимыхРеквизитовParcels);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеDOC(ДокументОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ДокументОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Номер,GOLD,POD,ConsignTo,Seller,
		|MOT,RequestedPOA,Urgency,Coordinator,СтатусВажности,FirstRequested,Requested,
		|Accepted,CCAFirstResponse,Received,Granted,Booked,CurrentStage,CurrentStatus,CurrentStatusDate,
		|WithoutGreenLight,HouseKeeping,CurrentComment,SanctionedItems,PendingEUC,CCA,Отменен,ProcessLevel";
		
	СтрокаЗначимыхРеквизитовManualStatuses = "Date,Status,User,Comment";
	СтрокаЗначимыхРеквизитовInvoices = "Инвойс";
	СтрокаЗначимыхРеквизитовParcels = "Parcel";
	
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "ManualStatuses", СтрокаЗначимыхРеквизитовManualStatuses)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "Инвойсы", СтрокаЗначимыхРеквизитовInvoices)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "Parcels", СтрокаЗначимыхРеквизитовParcels);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеШипмента(ДокументОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ДокументОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Номер,GOLD,Shipper,FreightForwarder,HouseWB,
		|WB2,WB3,WB4,PiecesQty,TotalWBWeight,Freight,Urgency,
		|ActualPOA,Coordinator,СтатусВажности,ETD,ATD,PreAlertETA,ETA,ATA,
		|CollectedFromPort,CurrentCargoStage,PreAlert,DoxForCCA,DoxRcvd,
		|PermitsRequested,PermitsObtained,InCustoms,Cleared,CurrentDocumentStage,
		|WithoutPreAlert,WithoutGreenLight,CurrentComment,InfoOnHazardClasses,
		|Inspection,InspectionStart,InspectionEnd,CCAJobReference,PermitsRequired,
		|PSA,PSARequested,PSAReceived,Completed,ConditionalRelease,CCDNumber,Отменен,CCA,
		|PreInspection,PreInspectionStart,PreInspectionEnd,ProcessLevel";
		
	СтрокаЗначимыхРеквизитовУпаковочныеЛисты = "УпаковочныйЛист";
	СтрокаЗначимыхРеквизитовOutOfComplianceReasons = "OutOfComplianceReasons,Комментарий";
	
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов)
	ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "УпаковочныеЛисты", СтрокаЗначимыхРеквизитовУпаковочныеЛисты)
	ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "OutOfComplianceReasons", СтрокаЗначимыхРеквизитовOutOfComplianceReasons);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеСтрокиИнвойса(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Наименование,Инвойс,НомерСтрокиИнвойса,НомерЗаявкиНаЗакупку,СтрокаЗаявкиНаЗакупку,
		|КодПоИнвойсу,СерийныйНомер,RAN,Каталог,ImportReference,НаименованиеТовара,DescriptionRus,
		|Количество,ЕдиницаИзмерения,Цена,Currency,Сумма,SoldTo,КостЦентр,Классификатор,Активити,
		|СтранаПроисхождения,Manufacturer,МеждународныйКодТНВЭД,НомерВходящейДекларации,NetWeight,
		|WeightUOM,PSA,PermanentTemporary,PermitsRequired,Final,LocalOnly,Shortage,EUCNotRequired,
		|EUCRequested,EUCReceived,SCNo,TNVED";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеPO(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,БОРГ,ДатаЗаявкиНаЗакупку,Посредник,Поставщик,
		|СтранаПоставщика,Грузополучатель,Комментарий,SubmitDate,ShipTo,ShiptoCode,EUCNotRequired,
		|EUCRequested,EUCReceived";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеPOLine(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,НомерСтрокиЗаявкиНаЗакупку,КодПоставщика,ОписаниеНоменклатуры,Количество,
		|ЕдиницаИзмерения,Цена,Валюта,ИтогоПоСтроке,ИтогоПоСтрокеДолл,Классификатор,КостЦентр,АктивитиКод,ТипЗапроса,НазначениеРасходов,
		|ТипНазначенияРасходов,СпособПеревозки,ИнструкцииПоТранспортировке,СпециальныеИнструкции,SupplierPromisedDate,GOLDReceiptDate,
		|GoodsReceiptDate,DONumber,HTC,UrgentFlag,Status,CurrentRDD,SupplierRequiredDate,CountryOfOrigin";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеБорга(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,DefaultAU,DefaultWH";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеКостЦентра(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеСклада(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	// { RGS VShamin 04.08.2015 13:03:03 - S-I-0001193
	//СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,Address1,Address2,Address3,AddressRus,ContactName,ContactPhone,ContactEMail,Warehouse";
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,Address1,Address2,Address3,AddressRus,ContactName,ContactPhone,ContactEMail,Warehouse,City";
	// } RGS VShamin 04.08.2015 13:03:17 - S-I-0001193
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеLegalEntity(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов =  "ПометкаУдаления,Код,Наименование,SoldToAddress,SoldToAddressRus,NameRus";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеEquipment(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,EffectiveWeight,MOTList";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеServiceProvider(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,Leg7";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеПользователя(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,EMail,CCA";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов)
	
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	Если ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	МассивЗначимыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗначимыхРеквизитов, ",", Истина, Истина);
	
	Для каждого ТекЗначимыйРеквизит Из МассивЗначимыхРеквизитов Цикл
		Если ИзмененныеРеквизиты.Найти(ТекЗначимыйРеквизит) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, ИмяТЧ, СтрокаЗначимыхРеквизитов)
	
	ИзмененныеРеквизиты = ИзмененныеДанные[ИмяТЧ];
	
	Если ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	МассивЗначимыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗначимыхРеквизитов, ",", Истина, Истина);
	
	Для каждого ТекЗначимыйРеквизит Из МассивЗначимыхРеквизитов Цикл
		Если ИзмененныеРеквизиты.Найти(ТекЗначимыйРеквизит) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// { RGS VShamin 17.12.2015 15:28:05 - обмен шаблонами
Функция ИзменилисьЗначимыеДанныеUsersPODsEMailTemplates(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,POD,ConsignTo,Subject,Body";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции // } RGS VShamin 17.12.2015 15:28:09 - обмен шаблонами

// { RGS VShamin 17.12.2015 15:28:05 - обмен письмами
Функция ИзменилисьЗначимыеДанныеEMails(ДокументОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ДокументОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Номер,Subject,Body,ReplyTo";
	СтрокаЗначимыхРеквизитовRecipient = "Recipient";
	
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов)
		ИЛИ ИзменилисьЗначимыеДанныеТЧОбъекта(ИзмененныеДанные, "Recipient", СтрокаЗначимыхРеквизитовRecipient);
	
КонецФункции // } RGS VShamin 17.12.2015 15:28:09 - обмен письмами

Процедура СформироватьВременныеТаблицыДляОбменаLeg7(Запрос, Источник, МассивОбъектовParcels)
	
	// парсель
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Детали");
	СтруктураОписания = СформироватьОписаниеДляВременныхТаблицОбъекта(МассивОбъектовParcels, МассивТЧ);
	
	Запрос.Текст = "";
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ " + Символы.ПС + СтруктураОписания.Parcels.ПоляВыборки + "ПОМЕСТИТЬ ВТ_Parcels "
		+ Символы.ПС + "ИЗ &ТЗ_Parcels КАК ТЗ_Parcels" + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
	Запрос.УстановитьПараметр("ТЗ_Parcels", СтруктураОписания.Parcels.ТаблицаДанных);
	Для каждого ТекТЧ Из МассивТЧ Цикл
		Запрос.Текст = Запрос.Текст 
			+ Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + СтруктураОписания["Parcels" + ТекТЧ].ПоляВыборки 
			+ "ПОМЕСТИТЬ ВТ_Parcels" + ТекТЧ + Символы.ПС + "ИЗ &ТЗ_Parcels" + ТекТЧ + " КАК ТЗ_Parcels" + ТекТЧ + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
		Запрос.УстановитьПараметр("ТЗ_Parcels" + ТекТЧ, СтруктураОписания["Parcels" + ТекТЧ].ТаблицаДанных);
	КонецЦикла;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Trip") Тогда
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Parcels");
		МассивТЧ.Добавить("FinalDestinations");
		СтруктураОписания = СформироватьОписаниеДляВременныхТаблицОбъекта(Источник, МассивТЧ);
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС
		+ СтруктураОписания.Trip.ПоляВыборки + "ПОМЕСТИТЬ ВТ_Trip" + Символы.ПС + "ИЗ &ТЗ_Trip КАК ТЗ_Trip" + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
		Запрос.УстановитьПараметр("ТЗ_Trip", СтруктураОписания.Trip.ТаблицаДанных);
		Для каждого ТекТЧ Из МассивТЧ Цикл
			Запрос.Текст = Запрос.Текст 
				+ Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + СтруктураОписания["Trip" + ТекТЧ].ПоляВыборки 
				+ "ПОМЕСТИТЬ ВТ_Trip" + ТекТЧ + Символы.ПС + "ИЗ &ТЗ_Trip" + ТекТЧ + " КАК ТЗ_Trip" + ТекТЧ + Символы.ПС +"ИНДЕКСИРОВАТЬ ПО Ссылка";
			Запрос.УстановитьПараметр("ТЗ_Trip" + ТекТЧ, СтруктураОписания["Trip" + ТекТЧ].ТаблицаДанных);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Поставка") Тогда
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("УпаковочныеЛисты");
		СтруктураОписания = СформироватьОписаниеДляВременныхТаблицОбъекта(Источник, МассивТЧ);
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС
		+ СтруктураОписания.Поставка.ПоляВыборки + "ПОМЕСТИТЬ ВТ_Поставка" + Символы.ПС + "ИЗ &ТЗ_Поставка КАК ТЗ_Поставка" + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
		Запрос.УстановитьПараметр("ТЗ_Поставка", СтруктураОписания.Поставка.ТаблицаДанных);
		Для каждого ТекТЧ Из МассивТЧ Цикл
			Запрос.Текст = Запрос.Текст 
				+ Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + СтруктураОписания["Поставка" + ТекТЧ].ПоляВыборки 
				+ "ПОМЕСТИТЬ ВТ_Поставка" + ТекТЧ + Символы.ПС + "ИЗ &ТЗ_Поставка" + ТекТЧ + " КАК ТЗ_Поставка" + ТекТЧ + Символы.ПС +"ИНДЕКСИРОВАТЬ ПО Ссылка";
			Запрос.УстановитьПараметр("ТЗ_Поставка" + ТекТЧ, СтруктураОписания["Поставка" + ТекТЧ].ТаблицаДанных);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Parcels");
		СтруктураОписания = СформироватьОписаниеДляВременныхТаблицОбъекта(Источник, МассивТЧ);
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС
		+ СтруктураОписания.КонсолидированныйПакетЗаявокНаПеревозку.ПоляВыборки + "ПОМЕСТИТЬ ВТ_КонсолидированныйПакетЗаявокНаПеревозку" + Символы.ПС + "ИЗ &ТЗ_КонсолидированныйПакетЗаявокНаПеревозку КАК ТЗ_КонсолидированныйПакетЗаявокНаПеревозку" + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
		Запрос.УстановитьПараметр("ТЗ_КонсолидированныйПакетЗаявокНаПеревозку", СтруктураОписания.КонсолидированныйПакетЗаявокНаПеревозку.ТаблицаДанных);
		Для каждого ТекТЧ Из МассивТЧ Цикл
			Запрос.Текст = Запрос.Текст 
				+ Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + СтруктураОписания["КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ].ПоляВыборки 
				+ "ПОМЕСТИТЬ ВТ_КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ + Символы.ПС + "ИЗ &ТЗ_КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ + " КАК ТЗ_КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ + Символы.ПС +"ИНДЕКСИРОВАТЬ ПО Ссылка";
			Запрос.УстановитьПараметр("ТЗ_КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ, СтруктураОписания["КонсолидированныйПакетЗаявокНаПеревозку" + ТекТЧ].ТаблицаДанных);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтрокиИнвойса") Тогда
		СтруктураОписания = СформироватьОписаниеДляВременныхТаблицОбъекта(Источник, Новый Массив);
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС
		+ СтруктураОписания.СтрокиИнвойса.ПоляВыборки + "ПОМЕСТИТЬ ВТ_СтрокиИнвойса" + Символы.ПС + "ИЗ &ТЗ_СтрокиИнвойса КАК ТЗ_СтрокиИнвойса" + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО Ссылка";
		Запрос.УстановитьПараметр("ТЗ_СтрокиИнвойса", СтруктураОписания.СтрокиИнвойса.ТаблицаДанных);
	КонецЕсли;
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьОписаниеДляВременныхТаблицОбъекта(Источники, ТабличныеЧасти)
	
	Результат = Новый Структура();
	
	Если ТипЗнч(Источники) = Тип("Массив") Тогда
		Источник = Источники[0];
		СписокИсточников = Источники;
	Иначе
		Источник = Источники;
		СписокИсточников = Новый Массив;
		СписокИсточников.Добавить(Источники);
	КонецЕсли;
	
	ТипСсылкиИсточника = ТипЗнч(Источник.Ссылка);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСсылкиИсточника);
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипСсылкиИсточника);
	
	// реквизиты объекта
	ПоляВыборки = "";
	ТЗ = Новый ТаблицаЗначений;
	Для каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ПоляВыборки = ПоляВыборки + Символы.Таб + ТекРеквизит.Имя + "," + Символы.ПС;
		ТЗ.Колонки.Добавить(ТекРеквизит.Имя, Новый ОписаниеТипов(ТекРеквизит.Тип));
	КонецЦикла;
	Для каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		ПоляВыборки = ПоляВыборки + Символы.Таб + ТекРеквизит.Имя + "," + Символы.ПС;
		ТЗ.Колонки.Добавить(ТекРеквизит.Имя, Новый ОписаниеТипов(ТекРеквизит.Тип));
	КонецЦикла;
	Для каждого ТекИсточник Из СписокИсточников Цикл
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), ТекИсточник);
	КонецЦикла;
	ПоляВыборки = Лев(ПоляВыборки, СтрДлина(ПоляВыборки) - 2) + Символы.ПС;
	
	Результат.Вставить(МетаданныеОбъекта.Имя, Новый Структура("ПоляВыборки, ТаблицаДанных", ПоляВыборки, ТЗ));
	
	// табличные части
	Для каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		МетаданныеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ТекТабличнаяЧасть];
		
		ПоляВыборки = "";
		Для каждого ТекРеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
			ПоляВыборки = ПоляВыборки + Символы.Таб + ТекРеквизитТЧ.Имя + "," + Символы.ПС;
		КонецЦикла;
		Для каждого ТекРеквизитТЧ Из МетаданныеТЧ.СтандартныеРеквизиты Цикл
			ПоляВыборки = ПоляВыборки + Символы.Таб + ТекРеквизитТЧ.Имя + "," + Символы.ПС;
		КонецЦикла;
		ПоляВыборки = ПоляВыборки + Символы.Таб + "Ссылка" + Символы.ПС;
		
		ТЗ = Источник[ТекТабличнаяЧасть].ВыгрузитьКолонки();
		ТЗ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
		Для каждого ТекИсточник Из СписокИсточников Цикл
			Для каждого СтрокаТЧ Из ТекИсточник[ТекТабличнаяЧасть] Цикл
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.Ссылка = ТекИсточник.Ссылка;
			КонецЦикла;
		КонецЦикла;
		
		Результат.Вставить(МетаданныеОбъекта.Имя + ТекТабличнаяЧасть, Новый Структура("ПоляВыборки, ТаблицаДанных", ПоляВыборки, ТЗ));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТекстЗапросаДляОбъектов(Знач ИсходныйТекстЗапроса, ТипИсточника)
	
	ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Справочник.Parcels.Детали", "ВТ_ParcelsДетали");
	ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Справочник.Parcels", "ВТ_Parcels");
	Если ТипИсточника = Тип("ДокументОбъект.Trip") Тогда
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.Trip.Parcels", "ВТ_TripParcels");
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.Trip.FinalDestinations", "ВТ_TripFinalDestinations");
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.Trip", "ВТ_Trip");
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.Поставка") Тогда
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.Поставка.УпаковочныеЛисты", "ВТ_ПоставкаУпаковочныеЛисты");
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.Поставка", "ВТ_Поставка");
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels", "ВТ_КонсолидированныйПакетЗаявокНаПеревозкуParcels");
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Документ.КонсолидированныйПакетЗаявокНаПеревозку", "ВТ_КонсолидированныйПакетЗаявокНаПеревозку");
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтрокиИнвойса") Тогда
		ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "Справочник.СтрокиИнвойса", "ВТ_СтрокиИнвойса");
	КонецЕсли;
	Возврат ИсходныйТекстЗапроса;
	
КонецФункции

Процедура ПриЗаписиРегистраСведенийОбменLeg7ПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Возврат;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	ТЗ = Источник.Выгрузить();
	МассивOB = ТЗ.ВыгрузитьКолонку("OBNo");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TripDomesticOB.Ссылка.ServiceProvider
	|ИЗ
	|	Документ.Trip.DomesticOB КАК TripDomesticOB
	|ГДЕ
	|	TripDomesticOB.OBNo В(&МассивOB)";
	Запрос.УстановитьПараметр("МассивOB", МассивOB);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СоответствиеУзловОбменаИСервисПровайдеров[Выборка.ServiceProvider] <> Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(СоответствиеУзловОбменаИСервисПровайдеров[Выборка.ServiceProvider], Источник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИнвойс(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеИнвойса(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.CCA
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = &Инвойс
		|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Инвойс", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 08.12.2015 21:07:50 - ProcessLevel
	//НовыйProcessLevel =  Источник.ProcessLevel;
	//СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	//RUWE = Справочники.ProcessLevels.RUWE;
	//Если НовыйProcessLevel <> RUWE И СтарыйProcessLevel <> RUWE Тогда
	//	Возврат;
	//КонецЕсли;
	// } RGS AGorlenko 08.12.2015 21:08:19 - ProcessLevel
	
	// { RGS VShamin 11.12.2015 16:17:37 - process level
	НовыйProcessLevel =  Источник.ProcessLevel;
	СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	// } RGS VShamin 11.12.2015 16:18:10 - process level
	
	МассивАгентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("CCA");;
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "Leg6Report") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			
			// { RGS VShamin 11.12.2015 16:17:37 - process level
			Если НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, НовыйProcessLevel)
				И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, СтарыйProcessLevel) Тогда
				Продолжить;;
			КонецЕсли;
			// } RGS VShamin 11.12.2015 16:18:10 - process level
			
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьDOC(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		// { RGS VShamin 21.09.2015 13:59:07 - ДОК должен регаться при создании
		//Возврат;
		Источник.УстановитьСсылкуНового(Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПолучитьСсылку(Новый УникальныйИдентификатор()));
		// } RGS VShamin 21.09.2015 13:59:07 - ДОК должен регаться при создании
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеDOC(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// { RGS AGorlenko 08.12.2015 2:58:53 - проверить!
	Если Источник.Parcels.Количество() = 0 И Источник.Ссылка.Parcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// } RGS AGorlenko 08.12.2015 2:59:10 - проверить!
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	НовыйCCA =  Источник.CCA;
	СтарыйCCA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "CCA");
	// { RGS AGorlenko 08.12.2015 21:07:50 - ProcessLevel
	//НовыйProcessLevel =  Источник.ProcessLevel;
	//СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	//RUWE = Справочники.ProcessLevels.RUWE;
	//Если НовыйProcessLevel <> RUWE И СтарыйProcessLevel <> RUWE Тогда
	//	Возврат;
	//КонецЕсли;
	// } RGS AGorlenko 08.12.2015 21:08:19 - ProcessLevel
	
	// { RGS VShamin 11.12.2015 16:17:37 - process level
	НовыйProcessLevel =  Источник.ProcessLevel;
	СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	Если (НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(НовыйCCA, НовыйProcessLevel)
		И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(НовыйCCA, СтарыйProcessLevel))
		И (НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(СтарыйCCA, НовыйProcessLevel)
		И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(СтарыйCCA, СтарыйProcessLevel)) Тогда
		Возврат;
	КонецЕсли;
	// } RGS VShamin 11.12.2015 16:18:10 - process level
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Источник.CCA ИЛИ КлючИЗначение.Ключ = СтарыйCCA Тогда
			
			// регистрируем DOC
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
			
			// если в DOC есть инвойсы, которые сервис-провайдер еще не получал, то надо их тоже выгрузить
			ЗарегистрироватьИнвойсыДокаПриНеобхомости(Источник, КлючИЗначение.Значение);
			
			// если в DOC есть парсели, которые сервис-провайдер еще не получал, то надо их тоже выгрузить
			ЗарегистрироватьПарселиДокаПриНеобхомости(Источник, КлючИЗначение.Значение);
			
			// { RGS VShamin 23.09.2015 12:34:20 - 
			//ЗарегистрироватьАйтемыДокаПриНеобходимости(Источник.Ссылка, КлючИЗначение.Значение);
			ЗарегистрироватьАйтемыДокаПриНеобходимости(Источник, КлючИЗначение.Значение);
			// } RGS VShamin 23.09.2015 12:34:20 - 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИнвойсыДокаПриНеобхомости(DOC, УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Инвойс.Ссылка
		|ПОМЕСТИТЬ ВТ_Инвойсы
		|ИЗ
		|	Документ.Инвойс КАК Инвойс
		|ГДЕ
		|	Инвойс.Ссылка В(&МассивИнвойсов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Инвойсы.Ссылка КАК Инвойс
		|ИЗ
		|	ВТ_Инвойсы КАК ВТ_Инвойсы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		|			И ВТ_Инвойсы.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		|ГДЕ
		|	НЕ ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.ПолученоПодтверждениеОбУспешнойЗагрузке, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("МассивИнвойсов", DOC.Инвойсы.ВыгрузитьКолонку("Инвойс"));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Инвойс);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПарселиДокаПриНеобхомости(DOC, УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Parcels.Ссылка КАК Parcel
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Ссылка В(&МассивParcels)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Parcel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Парсели.Parcel,
		|	ЕСТЬNULL(TripParcels.Ссылка, НЕОПРЕДЕЛЕНО) КАК Trip
		|ИЗ
		|	ВТ_Парсели КАК ВТ_Парсели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		|			И ВТ_Парсели.Parcel = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		|		ПО ВТ_Парсели.Parcel = TripParcels.Parcel
		|			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
		|ГДЕ
		|	НЕ ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.ПолученоПодтверждениеОбУспешнойЗагрузке, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("МассивParcels", DOC.Parcels.ВыгрузитьКолонку("Parcel"));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЗарегистрированныеТрипы = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Parcel);
		Если ВыборкаДетальныеЗаписи.Trip <> Неопределено И ЗарегистрированныеТрипы.Найти(ВыборкаДетальныеЗаписи.Trip) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Trip);
			ЗарегистрированныеТрипы.Добавить(ВыборкаДетальныеЗаписи.Trip);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьАйтемыДокаПриНеобходимости(DOC, УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.СтрокаИнвойса КАК Item
		|ПОМЕСТИТЬ ВТ_Айтемы
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.Ссылка В(&МассивПарселей)
		|	И ParcelsДетали.СтрокаИнвойса <> ЗНАЧЕНИЕ(Справочник.СтрокиИнвойса.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Item
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Айтемы.Item
		|ИЗ
		|	ВТ_Айтемы КАК ВТ_Айтемы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		|			И ВТ_Айтемы.Item = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		|ГДЕ
		|	НЕ ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.ПолученоПодтверждениеОбУспешнойЗагрузке, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("МассивПарселей", DOC.Parcels.ВыгрузитьКолонку("Parcel"));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Item);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьСтрокуИнвойса(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеСтрокиИнвойса(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Парсели КАК ВТ_Парсели
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ВТ_Парсели.Ссылка
		|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)";
	
	Запрос.УстановитьПараметр("СтрокаИнвойса", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	// { RGS LKhristyuk 4/18/2018 4:58:54 PM
	//Если РезультатЗапроса.Пустой() Тогда
	ЭкспортРеквест = Источник.ExportRequest;
	Если РезультатЗапроса.Пустой() И НЕ ЗначениеЗаполнено(ЭкспортРеквест) Тогда
	// } RGS LKhristyuk 4/18/2018 4:58:54 PM 
		Возврат;
	КонецЕсли;
	
	// { RGS LKhristyuk 4/18/2018 5:06:28 PM
	//МассивАгентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("CCA");;
	Если ЗначениеЗаполнено(ЭкспортРеквест) Тогда
		МассивАгентов = Новый Массив();
		МассивАгентов.Добавить(ЭкспортРеквест.CCA);
	Иначе
		МассивАгентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("CCA");
	КонецЕсли; 
	// } RGS LKhristyuk 4/18/2018 5:06:28 PM
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		// { RGS LKhristyuk 4/18/2018 5:31:57 PM
		//СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные");
		//Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
		//	Продолжить;
		//КонецЕсли;
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные,ExportReports");
		Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные ИЛИ НЕ СтруктураРеквизитов.ExportReports Тогда
			Продолжить;
		КонецЕсли;
		// } RGS LKhristyuk 4/18/2018 5:31:57 PM 
		
		
		// { RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
		//Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено
			И (Источник.ОбменДанными.Отправитель = Неопределено
				ИЛИ (Источник.ОбменДанными.Отправитель <> Неопределено И Источник.ОбменДанными.Отправитель <> КлючИЗначение.Значение)) Тогда
		// } RGS VShamin 09.11.2015 17:53:51 - Регистрация объектов исключая отправителей
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьШипмент(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		// { RGS VShamin 21.09.2015 13:59:07 - ДОК должен регаться при создании
		//Возврат;
		Источник.УстановитьСсылкуНового(Документы.Поставка.ПолучитьСсылку(Новый УникальныйИдентификатор()));
		// } RGS VShamin 21.09.2015 13:59:07 - ДОК должен регаться при создании
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеШипмента(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	НовыйCCA =  Источник.CCA;
	СтарыйCCA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "CCA");
	
	// { RGS AGorlenko 08.12.2015 21:07:50 - ProcessLevel
	//НовыйProcessLevel =  Источник.ProcessLevel;
	//СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	//RUWE = Справочники.ProcessLevels.RUWE;
	//Если НовыйProcessLevel <> RUWE И СтарыйProcessLevel <> RUWE Тогда
	//	Возврат;
	//КонецЕсли;
	// } RGS AGorlenko 08.12.2015 21:08:19 - ProcessLevel
	
	// { RGS VShamin 11.12.2015 16:17:37 - process level
	НовыйProcessLevel =  Источник.ProcessLevel;
	СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	Если (НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(НовыйCCA, НовыйProcessLevel)
		И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(НовыйCCA, СтарыйProcessLevel))
		И (НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(СтарыйCCA, НовыйProcessLevel)
		И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(СтарыйCCA, СтарыйProcessLevel)) Тогда
		Возврат;
	КонецЕсли;
	// } RGS VShamin 11.12.2015 16:18:10 - process level
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Источник.CCA ИЛИ КлючИЗначение.Ключ = СтарыйCCA Тогда
			
			// регистрируем шипмент
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
			
			// зарегистрировать док при необходимости
			ЗарегистрироватьДокиШипментаПриНеобходимости(Источник, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДокиШипментаПриНеобходимости(Шипмент, УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Доки
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка В(&МассивДоков)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Доки.Ссылка
		|ИЗ
		|	ВТ_Доки КАК ВТ_Доки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|		ПО (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелОбмена)
		|			И ВТ_Доки.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		|ГДЕ
		|	НЕ ЕСТЬNULL(СоответствияОбъектовИнформационныхБаз.ПолученоПодтверждениеОбУспешнойЗагрузке, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("МассивДоков", Шипмент.УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"));
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Ссылка);
		
		ЗарегистрироватьИнвойсыДокаПриНеобхомости(ВыборкаДетальныеЗаписи.Ссылка, УзелОбмена);
		ЗарегистрироватьПарселиДокаПриНеобхомости(ВыборкаДетальныеЗаписи.Ссылка, УзелОбмена);
		ЗарегистрироватьАйтемыДокаПриНеобходимости(ВыборкаДетальныеЗаписи.Ссылка, УзелОбмена);
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS VShamin 17.12.2015 15:41:07 - обмен письмами
Процедура ЗарегистрироватьEMails(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Источник.УстановитьСсылкуНового(Документы.EMails.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеEMails(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "AdditionalInfoReport, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.AdditionalInfoReport ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры // } RGS VShamin 17.12.2015 15:41:09 - обмен письмами

Процедура ЗарегистрироватьPO(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеPO(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.НомерЗаявкиНаЗакупку = &НомерЗаявкиНаЗакупку
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA КАК CCA
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Парсели КАК ВТ_Парсели
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ВТ_Парсели.Ссылка
		|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)";
	
	Запрос.УстановитьПараметр("НомерЗаявкиНаЗакупку", Источник.Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивАгентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("CCA");;
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьPOLine(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменилисьЗначимыеДанныеPOLine(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ParcelsДетали.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.НомерЗаявкиНаЗакупку В
		|			(ВЫБРАТЬ
		|				ЗаявкиНаЗакупку.Код
		|			ИЗ
		|				Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
		|			ГДЕ
		|				ЗаявкиНаЗакупку.Ссылка = &Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA КАК CCA
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Парсели КАК ВТ_Парсели
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ВТ_Парсели.Ссылка
		|			И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Отменен)";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивАгентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("CCA");;
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "Leg6Report, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.Leg6Report ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьБорг(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеБорга(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.BORGs.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьКостЦентр(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеКостЦентра(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.КостЦентры.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьСклад(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеСклада(Источник) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ Источник.Warehouse И НЕ Источник.Port Тогда
		Возврат;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.Warehouses.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		// если у локации нет признака склада или порта, то надо регистрировать
		// только если ранее уже отправляли, для того, чтобы отправить как Canceled
		Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(Источник.Ссылка, КлючИЗначение.Значение) И НЕ Источник.Warehouse И НЕ Источник.Port Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьLegalEntity(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеLegalEntity(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.LegalEntities.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьEquipment(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеEquipment(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.Equipments.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьServiceProvider(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеServiceProvider(Источник) Тогда
			Возврат;
		КонецЕсли;
		Leg7Ссылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Leg7");
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.ServiceProviders.ПолучитьСсылку(Новый УникальныйИдентификатор()));
		Leg7Ссылки = Ложь;
	КонецЕсли;
	
	Если НЕ Источник.Leg7 И НЕ Leg7Ссылки Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПользователя(Источник)
	
	Если Не ИзменилисьЗначимыеДанныеПользователя(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.УстановитьСсылкуНового(Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КлючИЗначение.Значение, "AdditionalInfoReport, ВыгружатьДанные");
		Если НЕ СтруктураРеквизитов.AdditionalInfoReport ИЛИ НЕ СтруктураРеквизитов.ВыгружатьДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.CCA = КлючИЗначение.Ключ Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьБоргиПоAUsAndLegalEntities(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BORGs.Ссылка
		|ИЗ
		|	Справочник.BORGs КАК BORGs
		|ГДЕ
		|	НЕ BORGs.ПометкаУдаления
		|	И BORGs.Компания = &Компания
		|	И BORGs.DefaultAU = &DefaultAU";
	
	Запрос.УстановитьПараметр("DefaultAU", Источник.Отбор.AU.Значение);
	Запрос.УстановитьПараметр("Компания", Источник.Отбор.ParentCompany.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

// { RGS VShamin 23.07.2015 19:55:18 - S-I-0001168
Процедура ЗарегистрироватьSoldTo(Источник)
	
	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеSoldTo(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.SoldTo.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	RU = Справочники.CountriesOfProcessLevels.RU;
	СтараяCountry = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Country");
	Если Источник.Country <> RU И СтараяCountry <> RU Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;
	
	Если Источник.Country <> СтараяCountry И Не Источник.ЭтоНовый() Тогда // зарегистрируем связанные борги
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	BORGs.Ссылка
		|ИЗ
		|	Справочник.BORGs КАК BORGs
		|ГДЕ
		|	НЕ BORGs.ПометкаУдаления
		|	И BORGs.Компания = &Компания";
		Запрос.УстановитьПараметр("Компания", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Выборка.Ссылка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 23.07.2015 19:55:18 - S-I-0001168

// { RGS VShamin 17.12.2015 15:22:04 - обмен шаблонами
Процедура ЗарегистрироватьUsersPODsEMailTemplates(Источник)

	Если Не Источник.ЭтоНовый() Тогда
		Если Не ИзменилисьЗначимыеДанныеUsersPODsEMailTemplates(Источник) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Источник.УстановитьСсылкуНового(Справочники.UsersPODsEMailTemplates.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	СоответствиеУзловОбменаИСервисПровайдеров = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИСервисПровайдеров();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИСервисПровайдеров Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "AdditionalInfoReport") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		
	КонецЦикла;

КонецПроцедуры // } RGS VShamin 17.12.2015 15:22:09 - обмен шаблонами

// { RGS VShamin 23.07.2015 19:55:18 - S-I-0001168
Функция ИзменилисьЗначимыеДанныеSoldTo(СправочникОбъект)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(СправочникОбъект);
	
	СтрокаЗначимыхРеквизитов = "ПометкаУдаления,Код,Наименование,NameRus,Country";
		
	Возврат ИзменилисьЗначимыеДанныеШапкиОбъекта(ИзмененныеДанные, СтрокаЗначимыхРеквизитов);
	
КонецФункции // } RGS VShamin 23.07.2015 19:55:18 - S-I-0001168

// { RGS LKhristyuk 4/16/2018 3:36:49 PM
Процедура ЗарегистрироватьExportRequest(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		СсылкаНового = Источник.ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Документы.ExportRequest.ПолучитьСсылку(Новый УникальныйИдентификатор());
			Источник.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
	КонецЕсли;
	
	// нужен список значимых полей для документа
	//Если Не ИзменилисьЗначимыеДанныеИнвойса(Источник) Тогда
	//	Возврат;
	//КонецЕсли; 
	
	// { RGS VShamin 11.12.2015 16:17:37 - process level
	НовыйProcessLevel =  Источник.ProcessLevel;
	СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	// } RGS VShamin 11.12.2015 16:18:10 - process level
	
	// { RGS LKhristyuk 4/16/2018 3:51:25 PM
	МассивАгентов = Новый Массив(); 
	МассивАгентов.Добавить(Источник.CCA);
	// } RGS LKhristyuk 4/16/2018 3:51:25 PM
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "ExportReports") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			
			// { RGS LKhristyuk 5/10/2018 12:50:42 PM
			//// { RGS VShamin 11.12.2015 16:17:37 - process level
			//Если НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, НовыйProcessLevel)
			//	И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, СтарыйProcessLevel) Тогда
			//	Продолжить;;
			//КонецЕсли;
			//// } RGS VShamin 11.12.2015 16:18:10 - process level
			Если НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение.CCA, НовыйProcessLevel)
				И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение.CCA, СтарыйProcessLevel) Тогда
				Продолжить;
			КонецЕсли;
			// } RGS LKhristyuk 5/10/2018 12:50:42 PM 
			
			
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗарегистрироватьExportShipment(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		СсылкаНового = Источник.ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Документы.ExportShipment.ПолучитьСсылку(Новый УникальныйИдентификатор());
			Источник.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
	КонецЕсли;
	
	// нужен список значимых полей для документа
	//Если Не ИзменилисьЗначимыеДанныеИнвойса(Источник) Тогда
	//	Возврат;
	//КонецЕсли; 
	
	// { RGS VShamin 11.12.2015 16:17:37 - process level
	НовыйProcessLevel =  Источник.ProcessLevel;
	СтарыйProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ProcessLevel");
	// } RGS VShamin 11.12.2015 16:18:10 - process level
	
	// { RGS LKhristyuk 4/16/2018 3:51:25 PM
	МассивАгентов = Новый Массив(); 
	МассивАгентов.Добавить(Источник.CCA);
	// } RGS LKhristyuk 4/16/2018 3:51:25 PM
	
	СоответствиеУзловОбменаИCCA = ПланыОбмена.Leg7.ПолучитьСоответствиеУзловОбменаИCCA();
	
	Для каждого КлючИЗначение Из СоответствиеУзловОбменаИCCA Цикл
		
		
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КлючИЗначение.Значение, "ExportReports") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивАгентов.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			// { RGS LKhristyuk 5/10/2018 12:52:00 PM
			//// { RGS VShamin 11.12.2015 16:17:37 - process level
			//Если НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, НовыйProcessLevel)
			//	И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение, СтарыйProcessLevel) Тогда
			//	Продолжить;;
			//КонецЕсли;
			//// } RGS VShamin 11.12.2015 16:18:10 - process level
			Если НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение.CCA, НовыйProcessLevel)
				И НЕ ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(КлючИЗначение.Значение.CCA, СтарыйProcessLevel) Тогда
				Продолжить;
			КонецЕсли;
			// } RGS LKhristyuk 5/10/2018 12:52:00 PM
			
			
			ПланыОбмена.ЗарегистрироватьИзменения(КлючИЗначение.Значение, Источник);
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры // } RGS LKhristyuk 4/16/2018 3:36:49 PM


