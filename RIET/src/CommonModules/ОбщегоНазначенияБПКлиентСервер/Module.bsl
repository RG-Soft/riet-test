//Обновление рег. Отчетности на бух. Корп 3.0.36.18
//Добавленный модуль
//<=


////////////////////////////////////////////////////////////////////////////////
// МАТЕМАТИКА

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;
 
КонецФункции // ПустоеЗначениеТипа();

////////////

// Функция возвращает текст надписи "Цены и валюта".
//
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи) Экспорт
	Перем ВалютаРегламентированногоУчета;
	 
	ТекстНадписи = "";
	
	Если НЕ СтруктураНадписи.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	// Тип цен
	Если СтруктураНадписи.Свойство("ТипЦен")
		И ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Тип цен: %1 '"), СтруктураНадписи.ТипЦен);
	КонецЕсли;
		
	// НДС в сумме
	Если СтруктураНадписи.Свойство("ДокументБезНДС") 
		И СтруктураНадписи.ДокументБезНДС Тогда 
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), ВернутьСтр("ru = 'Документ без НДС'"), ВернутьСтр("ru = '(Документ без НДС)'"));
	ИначеЕсли СтруктураНадписи.Свойство("СуммаВключаетНДС") Тогда
		Если СтруктураНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), ВернутьСтр("ru = 'НДС в сумме'"), ВернутьСтр("ru = '(НДС в сумме)'")); 
		Иначе
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), ВернутьСтр("ru = 'НДС сверху'"), ВернутьСтр("ru = '(НДС сверху)'")); 
		КонецЕсли;
	КонецЕсли;

	// Валюта
	Если СтруктураНадписи.Свойство("ВалютаДокумента")
		И ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента)
		И (СтруктураНадписи.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + ВернутьСтр("ru = '%1%2 = %3 %4'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстНадписи,
			?(СтруктураНадписи.Кратность = 1, "", СтруктураНадписи.Кратность),
			СтруктураНадписи.ВалютаДокумента,
			СтруктураНадписи.Курс,
			ВалютаРегламентированногоУчета);
			
	КонецЕсли;
	
	// Включение НДС в стоимость
	Если СтруктураНадписи.Свойство("НДСВключенВСтоимость") Тогда
		Если СтруктураНадписи.НДСВключенВСтоимость Тогда
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + ВернутьСтр("ru = 'НДС включен в стоимость'"); 
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНадписи) Тогда 
		Если СтруктураНадписи.Свойство("ТипЦен") Тогда
			ТекстНадписи = ВернутьСтр("ru = 'Тип цен: <нет> '");
		ИначеЕсли СтруктураНадписи.Свойство("ВалютаДокумента") Тогда
			Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
				ТекстНадписи = ВернутьСтр("ru = 'Валюта: %1'");
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, ВалютаРегламентированногоУчета);
			Иначе
				ТекстНадписи = ВернутьСтр("ru = 'Валюта: <нет> '");
			КонецЕсли;
		ИначеЕсли СтруктураНадписи.Свойство("НДСВключенВСтоимость") Тогда
			ТекстНадписи = ВернутьСтр("ru = 'НДС не включен в стоимость'");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстНадписи;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ КОНТРОЛЬ КОРРЕКТНОСТИ ВВОДА ИНН и КПП

//Процедура выполняет проверку корректности введенных ИНН и КПП
//Принимает на вход структуру
// Параметры передачи - структура
// Обязательные ключи структуры
//	ИНН
//	КПП
//	ЮридическоеФизическоеЛицо
//	ОбособленноеПодразделение
//	ОшибокПоИННнет
//	ОшибокПоКППнет
//
//Возвращает структуру с переменным набором ключей 
//только со значениями соответствующими результату проверки.
Функция ПроверитьКорректностьИННКПП(Знач СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ЦветВыделенияНекорректногоЗначение") Тогда
		ЦветВыделенияНекорректногоЗначение = СтруктураПараметров.ЦветВыделенияНекорректногоЗначение;
	Иначе
		ЦветВыделенияНекорректногоЗначение = Новый Цвет(225, 40, 40);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если СтруктураПараметров.ПроверитьИНН Тогда
		
		СтруктураВозврата.Вставить("ИННВведенКорректно",               Истина);
		СтруктураВозврата.Вставить("РасширенноеПредставлениеИНН",      СтруктураПараметров.ИНН);
		СтруктураВозврата.Вставить("НадписьПоясненияНекорректногоИНН", "");
		СтруктураВозврата.Вставить("ПустойИНН",                        Ложь);
		СтруктураВозврата.Вставить("ОшибокПоИННнет",                   СтруктураПараметров.ПроверитьИНН);
		
		ИНН      = СокрП(СтруктураПараметров.ИНН);
		ДлинаИНН = СтрДлина(ИНН);
		
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			
			СтруктураВозврата.ИННВведенКорректно = Ложь;
			
			СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Неопределено;
			
			СтруктураВозврата.ПустойИНН = Истина;
			
			СтруктураВозврата.ОшибокПоИННнет = Ложь;
			
		КонецЕсли;
		
		Если СтруктураПараметров.СтранаРегистрации = ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Россия") Тогда
			
			Если СтруктураВозврата.ОшибокПоИННнет Тогда
				
				ЭтоЮрЛицо = Неопределено;
				Если СтруктураПараметров.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда 
					ЭтоЮрЛицо = Истина;
				ИначеЕсли СтруктураПараметров.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
					ЭтоЮрЛицо = Ложь;
				КонецЕсли;	
				
				Если ЭтоЮрЛицо = Неопределено Тогда
					
					СтруктураВозврата.ИННВведенКорректно = Ложь;
					СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'Неизвестен вид контрагента. Укажите вид контрагента'"),,ЦветВыделенияНекорректногоЗначение);
					
					СтруктураВозврата.ОшибокПоИННнет = Ложь;
					
				КонецЕсли;
				
				Если СтруктураВозврата.ОшибокПоИННнет Тогда
					
					Если  ЭтоЮрЛицо И ДлинаИНН <> 10 Тогда
						
						СтруктураВозврата.ИННВведенКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр'"),,ЦветВыделенияНекорректногоЗначение);
						
						ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
						|ИНН содержит не 10 цифр'");
						
						СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
						
						СтруктураВозврата.ОшибокПоИННнет = Ложь;
						
					ИначеЕсли НЕ ЭтоЮрЛицо  И ДлинаИНН <> 12 Тогда
						
						СтруктураВозврата.ИННВведенКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'ИНН физического лица должен состоять из 12 цифр'"),,ЦветВыделенияНекорректногоЗначение);
						
						ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
						|ИНН содержит не 12 цифр'");
						
						СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
						
						СтруктураВозврата.ОшибокПоИННнет = Ложь;
						
					ИначеЕсли Лев(ИНН, 2) = "00" Тогда
						
						СтруктураВозврата.ИННВведенКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'Первые две цифры ИНН не могут быть ""00""'"),,ЦветВыделенияНекорректногоЗначение);
						
						ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
						|Первые две цифры ИНН не могут быть ""00""'");
						
						СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
						
						СтруктураВозврата.ОшибокПоИННнет = Ложь;
						
					КонецЕсли;
					
					Если СтруктураВозврата.ОшибокПоИННнет Тогда
						
						Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
							
							СтруктураВозврата.ИННВведенКорректно = Ложь;
							
							СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'ИНН должен включать только цифры'"),,ЦветВыделенияНекорректногоЗначение);
							
							ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
							|ИНН содержит не только цифры'");
							
							СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
							
							СтруктураВозврата.ОшибокПоИННнет = Ложь;
							
						КонецЕсли;
						
						Если СтруктураВозврата.ОшибокПоИННнет Тогда
							
							Если ЭтоЮрЛицо Тогда
								
								КонтрольнаяСумма = 0;
								
								Для Н = 1 По 9 Цикл
									
									Если Н = 1 Тогда
										Множитель = 2;
									ИначеЕсли Н = 2 Тогда
										Множитель = 4;
									ИначеЕсли Н = 3 Тогда
										Множитель = 10;
									ИначеЕсли Н = 4 Тогда
										Множитель = 3;
									ИначеЕсли Н = 5 Тогда
										Множитель = 5;
									ИначеЕсли Н = 6 Тогда
										Множитель = 9;
									ИначеЕсли Н = 7 Тогда
										Множитель = 4;
									ИначеЕсли Н = 8 Тогда
										Множитель = 6;
									ИначеЕсли Н = 9 Тогда
										Множитель = 8;
									КонецЕсли;
									
									Цифра = Число(Сред(ИНН, Н, 1));
									КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
									
								КонецЦикла;
								
								КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
								
								Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) или КонтрольнаяСумма = 0 Тогда
									
									СтруктураВозврата.ИННВведенКорректно = Ложь;
									
									СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'ИНН юридического лица введен некорректно'"),,ЦветВыделенияНекорректногоЗначение);
									
									ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
									|ИНН не соответствует формату'");
									
									СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
									
									СтруктураВозврата.ОшибокПоИННнет = Ложь;
									
								КонецЕсли;
								
							Иначе
								
								КонтрольнаяСумма11 = 0;
								КонтрольнаяСумма12 = 0;
								
								Для Н=1 По 11 Цикл
									
									// Расчет множителя для 11-го и 12-го разрядов
									Если Н = 1 Тогда
										Множитель11 = 7;
										Множитель12 = 3;
									ИначеЕсли Н = 2 Тогда
										Множитель11 = 2;
										Множитель12 = 7;
									ИначеЕсли Н = 3 Тогда
										Множитель11 = 4;
										Множитель12 = 2;
									ИначеЕсли Н = 4 Тогда
										Множитель11 = 10;
										Множитель12 = 4;
									ИначеЕсли Н = 5 Тогда
										Множитель11 = 3;
										Множитель12 = 10;
									ИначеЕсли Н = 6 Тогда
										Множитель11 = 5;
										Множитель12 = 3;
									ИначеЕсли Н = 7 Тогда
										Множитель11 = 9;
										Множитель12 = 5;
									ИначеЕсли Н = 8 Тогда
										Множитель11 = 4;
										Множитель12 = 9;
									ИначеЕсли Н = 9 Тогда
										Множитель11 = 6;
										Множитель12 = 4;
									ИначеЕсли Н = 10 Тогда
										Множитель11 = 8;
										Множитель12 = 6;
									ИначеЕсли Н = 11 Тогда
										Множитель11 = 0;
										Множитель12 = 8;
									КонецЕсли;
									
									Цифра = Число(Сред(ИНН, Н, 1));
									КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
									КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
									
								КонецЦикла;
								
								КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
								КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
								
								Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) или (КонтрольнаяСумма11 = 0 и КонтрольнаяСумма12 = 0) Тогда
									
									СтруктураВозврата.ИННВведенКорректно = Ложь;
									
									СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'ИНН физического лица введен некорректно'"),,ЦветВыделенияНекорректногоЗначение);
									
									ТекстДляНекорректногоИНН = ВернутьСтр("ru = '%1
									|ИНН не соответствует формату'");
									
									СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
									
									СтруктураВозврата.ОшибокПоИННнет = Ложь;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ПроверитьКПП Тогда
		
		СтруктураВозврата.Вставить("КППВВеденКорректно",               Истина);
		СтруктураВозврата.Вставить("РасширенноеПредставлениеКПП",      СтруктураПараметров.КПП);
		СтруктураВозврата.Вставить("НадписьПоясненияНекорректногоКПП", "");
		СтруктураВозврата.Вставить("ПустойКПП",                        Ложь);
		СтруктураВозврата.Вставить("ОшибокПоКППнет",                   СтруктураПараметров.ПроверитьКПП);
		
		Если СтруктураПараметров.СтранаРегистрации = ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Россия") Тогда
			
			ЭтоЮрЛицо = Неопределено;
			Если СтруктураПараметров.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
				ЭтоЮрЛицо = Истина;
			ИначеЕсли СтруктураПараметров.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
				ЭтоЮрЛицо = Ложь;
			КонецЕсли;	
			
			Если ЭтоЮрЛицо = Неопределено Тогда
				
				СтруктураВозврата.КППВведенКорректно = Ложь;
				
				СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'Неизвестен вид контрагента. Укажите вид контрагента'"),,ЦветВыделенияНекорректногоЗначение);
				
				СтруктураВозврата.ОшибокПоКППнет = Ложь;
				
			ИначеЕсли НЕ ЭтоЮрЛицо	Тогда
				СтруктураВозврата.ОшибокПоКППнет = Ложь;
			КонецЕсли;
			
			Если СтруктураВозврата.ОшибокПоКППнет Тогда
				
				КПП = СокрП(СтруктураПараметров.КПП);
				ДлинаКПП = СтрДлина(КПП);
				
				Если НЕ ЗначениеЗаполнено(КПП) Тогда
					
					СтруктураВозврата.КППВВеденКорректно = Ложь;
					
					СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Неопределено;
					
					СтруктураВозврата.ПустойКПП = Истина;
					
					СтруктураВозврата.ОшибокПоКППнет = Ложь;
					
				КонецЕсли;
				
				Если СтруктураВозврата.ОшибокПоКППнет Тогда
					
					Если ДлинаКПП <> 9 Тогда
						
						СтруктураВозврата.КППВВеденКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоКПП  = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'КПП должен содержать 9 цифр'"),,ЦветВыделенияНекорректногоЗначение);
						
						ТекстДляНекорректногоКПП = ВернутьСтр("ru = '%1
						|КПП содержит не 9 цифр'");
						
						СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
						
						СтруктураВозврата.ОшибокПоКППнет = Ложь;
						
					КонецЕсли;
					
					Если СтруктураВозврата.ОшибокПоКППнет Тогда
						
						Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КПП) Тогда
							
							СтруктураВозврата.КППВВеденКорректно = Ложь;
							
							СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'КПП должен включать только цифры'"),,ЦветВыделенияНекорректногоЗначение);
							
							ТекстДляНекорректногоКПП = ВернутьСтр("ru = '%1
							|КПП содержит не только цифры'");
							
							СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
							
							СтруктураВозврата.ОшибокПоКППнет = Ложь;
							
						КонецЕсли;
						
						Если СтруктураВозврата.ОшибокПоКППнет Тогда
							
							КонтрольнаяЧасть = Сред(КПП, 5, 2);
							
							ПризнакОбособленногоПодразделения = КонтрольнаяЧасть = "02"//Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
							или КонтрольнаяЧасть = "03" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее филиала, не исполняющего обязанности организации по уплате налогов и сборов 
							или КонтрольнаяЧасть = "04" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
							или КонтрольнаяЧасть = "05" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения
							или КонтрольнаяЧасть = "30" //Российская организация — налоговый агент, не учтенная в качестве налогоплательщика
							или КонтрольнаяЧасть = "31" //Постановка на учёт налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, исполняющего обязанности организации по уплате налогов и сборов 
							или КонтрольнаяЧасть = "32" //Постановка на учёт налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, не исполняющего обязанности организации по уплате налогов и сборов 
							или КонтрольнаяЧасть = "43" //Постановка на учёт российской организации по месту нахождения ее филиала (аналогично старым кодам «02», «03» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
							или КонтрольнаяЧасть = "44" //Постановка на учёт российской организации по месту нахождения ее представительства (аналогично старым кодам «04», «05» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
							или КонтрольнаяЧасть = "45";//Постановка на учёт российской организации по месту нахождения ее обособленного подразделения (аналогично старым кодам «31», «32» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО»)
							
							ПризнакГоловногоПодразделения = КонтрольнаяЧасть = "01" 
							или КонтрольнаяЧасть = "50" //По месту постановки на учёт в качестве крупнейшего налогоплательщика
							или КонтрольнаяЧасть = "51" //Постановка на учёт отделений иностранных организаций 
							или КонтрольнаяЧасть = "52" //Постановка на учёт отделений иностранных организаций в Российской Федерации, созданных филиалом этой иностранной организации в иностранном государстве 
							или КонтрольнаяЧасть = "60" //Постановка на учёт посольств иностранных государств
							или КонтрольнаяЧасть = "61" //Постановка на учёт консульств иностранных государств
							или КонтрольнаяЧасть = "62" //Постановка на учёт представительств, приравненных к дипломатическим
							или КонтрольнаяЧасть = "63" //Постановка на учёт международных организаций
							или КонтрольнаяЧасть = "70" //Постановка на учёт иностранных и международных организаций, имеющих недвижимое имущество в Российской Федерации, за исключением транспортных средств, относящихся к недвижимому имуществу
							или КонтрольнаяЧасть = "71" //Постановка на учёт иностранных и международных организаций, имеющих транспортные средства в Российской Федерации, не относящиеся к недвижимому имуществу
							или КонтрольнаяЧасть = "72" //Постановка на учёт иностранных и международных организаций, имеющих морские транспортные средства в Российской Федерации
							или КонтрольнаяЧасть = "73" //Постановка на учёт иностранных и международных организаций, имеющих речные транспортные средства в Российской Федерации
							или КонтрольнаяЧасть = "74" //Постановка на учёт иностранных и международных организаций, имеющих воздушные транспортные средства в Российской Федерации
							или КонтрольнаяЧасть = "75" //Постановка на учёт иностранных и международных организаций, имеющих космические объекты в Российской Федерации
							или КонтрольнаяЧасть = "80" //Учет иностранных и международных организаций в связи с открытием в банках рублевых счетов типа «Т» (текущие)
							или КонтрольнаяЧасть = "81" //Учет иностранных и международных организаций в связи с открытием счетов в банках типа «И» (инвестиционные)
							или КонтрольнаяЧасть = "82" //учёт иностранных и международных организаций в связи с открытием счетов в банках типа «С» (специальные)
							или КонтрольнаяЧасть = "83" //Учет иностранных и международных организаций в связи с открытием в банках счетов типа «Т» (текущие) в иностранной валюте
							или КонтрольнаяЧасть = "84";//Учет иностранных и международных организаций в связи с открытием корреспондентских счетов в банках 
							
							Если СтруктураПараметров.ОбособленноеПодразделение и ПризнакГоловногоПодразделения Тогда 
								
								СтруктураВозврата.КППВВеденКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'Введен КПП юридического лица. Измените вид контрагента'"),,ЦветВыделенияНекорректногоЗначение);
								
								ТекстДляНекорректногоКПП = ВернутьСтр("ru = '%1
								|КПП головного контрагента'");
								
								СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
								
								СтруктураВозврата.ОшибокПоКППнет = Ложь;
								
							ИначеЕсли НЕ СтруктураПараметров.ОбособленноеПодразделение И ПризнакОбособленногоПодразделения Тогда  
								
								СтруктураВозврата.КППВВеденКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'Введен КПП обособленного подразделения. Измените вид контрагента'"),,ЦветВыделенияНекорректногоЗначение);
								
								ТекстДляНекорректногоКПП = ВернутьСтр("ru = '%1
								|КПП обособленного подразделения'");
								
								СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
								
								СтруктураВозврата.ОшибокПоКППнет = Ложь;
								
							ИначеЕсли НЕ ПризнакГоловногоПодразделения и НЕ ПризнакОбособленногоПодразделения Тогда
								
								СтруктураВозврата.КППВВеденКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(ВернутьСтр("ru = 'КПП не соответствует формату'"),,ЦветВыделенияНекорректногоЗначение);
								
								ТекстДляНекорректногоКПП = ВернутьСтр("ru = '%1
								|КПП не соответствует формату'");
								
								СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
								
								СтруктураВозврата.ОшибокПоКППнет = Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт

	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл

		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);

		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;

		СуммаКоэф = СуммаКоэф + МассивКоэф[К];

	КонецЦикла;

	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивСумм = Новый Массив(МассивКоэф.Количество());

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;

	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;

	Возврат МассивСумм;

КонецФункции // РаспределитьПропорционально()
