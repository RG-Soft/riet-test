
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

// Процедура расчитывает курсовые разницы и формирует проводки в БУ и НУ
//
// Параметры:
// Объект          		- ДокументОбъект          	- Документ для которого выполняется 
//                                             		операция.
// СчетПереоценки		- Структура  				- Содержит счет и аналитику для переоценки.
//		Счет			- ПланСчетов.Хозрасчетный	- Счет для переоценки
//		Субконто1		- ссылка
//		Субконто2		- ссылка
//		Субконто3		- ссылка
//		РублевыйОстаток	- число					    - остаток в валюте регламентированного учета
//		ВалютныйОстаток	- число					    - остаток в валюте для переоценки
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		.Валюта			- СправочникСсылка.Валюты	- ссылка на валюту документа
//		.Курс			- Число
//		.Кратность		- Число
//
//  РассчитыватьОстатки - Булево					- Определяет режим расчета остатков в процедуре.
//													Ложь - не рассчитывать остатки. 
//														Рублевые и валютные остатки не рассчитываются в процедуре, 
//														а берутся из колонок структуры СчетПереоценки:
//															СчетПереоценки.РублевыйОстаток;
//															СчетПереоценки.ВалютныйОстаток.
//													Истина - расчитывать остатки в процедуре.
//													Значение по умолчанию: Истина.
//
//  ИспользоватьКурсИзСправочника - Булево			- Определяет режим выбора курса при переоценке.
//													Ложь - курс берется из документа.
//													Истина - курс берется из справочника "Валюты".
//													Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево 					- Отражать движения в налоговом учете
//													Значение по умолчанию: Истина.
//  ВставитьПервой		- Булево					- Режим добавления проводки по курсовой разнице.
//                                                  Истина - проводка вставляется первой (ПроводкиБУ.Вставить(0))
//													Ложь   - добавляется новой проводкой
//													Значение по умолчанию - Ложь
// Описание                                         
// 	Процедура проводит переоценку счетов, по переданным в структуре СчетПереоценки счете и аналитике.
//	Положительная курсовая разница относится в кредит счета 91.01, отрицательная - в дебет счета 91.02.
//	В качестве объекта аналитического учета по субсчетам счета 91 используется элемент справочника 
//	"Прочие доходы и расходы" с наименованием "Курсовые разницы" и указанным видом прочих доходов и расходов 
//	"Курсовые разницы". Если такой элемент справочника не обнаружен, он будет создан в процессе выполнения процедуры.
//	Сформированные проводки являются проводками документа, контекст которого передан в процедуру.
//	Если по переданному субконто по этому счету считаются только обороты, оно не учитывается при расчете остатков.
//	В некоторых случаях расчет рублевых и валютных остатков может выполняться в модулях документов 
//	(например регламентны документ, производящий переоценку валюты на отчетную дату).
//	Для предотвращения повторного расчета в параметр РассчитыватьОстатки следует 
//	передать значение Ложь и в структуру СчетПереоценки внести расчитаные остатки. 
//	В остальных случаях этот параметр можно не указывать.
//	Курсовые разницы, выявленные на счетах бухгалтерского учета, отражаются в налоговом учете 
//	на счетах Н91.01.6 или Н91.02.6 (в зависимости от того доход это или расход).
//
Процедура ПереоценкаСчетаРегл(СтруктураШапкиДокумента,ПроводкиБУ,ПроводкиНУ,СчетПереоценки, ВалютаРегламентированногоУчета="",ВставитьПервой=Истина,РассчитыватьОстатки=Истина, Заголовок = Неопределено,СчетаСОсобымПорядкомПереоценкиБУ = Неопределено) экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	СтатьяПрочихДоходовРасходов    = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;

	Организация     = СтруктураШапкиДокумента.Организация;
	ОтражатьНУ      = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	ДатаДока        = СтруктураШапкиДокумента.Дата;
	
	Ссылка 			= СтруктураШапкиДокумента.Ссылка;
	Если Заголовок = Неопределено Тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли; 
	МоментДокумента = Новый МоментВремени( ДатаДока,Ссылка);
	
	ВалютаДокумента = Неопределено;

	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента);
	Если ВалютаДокумента = ВалютаРегламентированногоУчета тогда
		ВалютаДокумента = Неопределено;
	КонецЕсли;

	//Получение списка и аналитики счетов для переоценки
	ТекСчет = "";

	СчетПереоценки.Свойство("Счет", ТекСчет);
	Если СчетПереоценки.Свойство("СуммаПереоценкиРегл") = Неопределено Тогда
		СчетПереоценки.Вставить("СуммаПереоценкиРегл", 0);
	КонецЕсли;

	СуммаПереоценкиРегл = 0;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;

	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;

	Если СчетаСОсобымПорядкомПереоценкиБУ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
		|ИЗ
		|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ";
		
		СчетаСОсобымПорядкомПереоценкиБУ = Новый списокЗначений();
		СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	КонецЕсли; 
	
	Если не СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекСчет) = Неопределено тогда
		Возврат;
	КонецЕсли;

	//получение остатков, переоценка валютных счетов
	ОстатокВалРегУчета = 0;
	ОстатокИнаяВал     = 0;

	Если РассчитыватьОстатки тогда

		СтруктураОтбора = Новый Структура("Счет",ТекСчет);
		СтруктураОтбора.Вставить("Организация", Организация);

		Реквизиты    = "Счет,Валюта";
		ВидыСубконто = Новый массив();

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл

			Если Не(ТекВидСубконто.ТолькоОбороты) тогда

				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты = Реквизиты + ",Субконто" + (ВидыСубконто.ВГраница() + 1);
				ТекЗначениеФильтра = "";

				Если СчетПереоценки.Свойство("Субконто" + ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
					СтруктураОтбора.Вставить("Субконто" + (ВидыСубконто.ВГраница() + 1),ТекЗначениеФильтра);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
		
		Если СчетПереоценки.Свойство("Валюта") И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СчетПереоценки.Валюта) Тогда
			СтруктураОтбора.Вставить("Валюта", СчетПереоценки.Валюта);
		КонецЕсли;

		РеестрОстатков = РегистрыБухгалтерии.Хозрасчетный.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		Для каждого Стр из РеестрОстатков цикл
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Стр.Валюта) Тогда
				СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится."+Символы.ПС
				+ "   - счет: "+ТекСчет.код + " <"+ТекСчет.Наименование+">";
				Для НомерСубконто = 1 по ВидыСубконто.Количество() Цикл
					СтрокаСообщения=СтрокаСообщения+ Символы.ПС+ "    - субконто <"+ВидыСубконто[НомерСубконто-1].Наименование+"> : """+ Стр["Субконто"+НомерСубконто]+"""";
				КонецЦикла; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,,Заголовок);
				Продолжить;
			КонецЕсли;  

			Если (ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента)) или не(ВалютаДокумента = Стр.Валюта) тогда
				ДанныеОВалютеОстатка = ОбщегоНазначения.ПолучитьКурсВалюты(Стр.Валюта,ДатаДока);
			Иначе
				ДанныеОВалютеОстатка = Новый Структура("Курс,Кратность",СтруктураШапкиДокумента.КурсДокумента,СтруктураШапкиДокумента.КратностьДокумента);
			КонецЕсли;

			ОстатокВалРегУчета = Стр.СуммаОстатокДт - Стр.СуммаОстатокКт;
			ОстатокИнаяВал     = Стр.ВалютнаяСуммаОстатокДт - Стр.ВалютнаяСуммаОстатокКт;
			РасчетныйОстатокВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
			                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность,1);

			Если ОстатокВалРегУчета = РасчетныйОстатокВалРегУчета тогда
				Продолжить;
			КонецЕсли;

			РасчетныйОстатокВалРегУчета = РасчетныйОстатокВалРегУчета-число(ОстатокВалРегУчета);
			Если РасчетныйОстатокВалРегУчета=0 тогда
				Продолжить;
			КонецЕсли;

			СуммаПереоценкиРегл = СуммаПереоценкиРегл + РасчетныйОстатокВалРегУчета;
			
			Проводка = ?(ВставитьПервой, ПроводкиБУ.Вставить(0), ПроводкиБУ.Добавить());

			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валюты";

			Если РасчетныйОстатокВалРегУчета < 0 тогда

				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
				Проводка.СчетКт = ТекСчет;

				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоКт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;

				Проводка.ВалютаКт = Стр.Валюта;
				Проводка.Сумма    = -РасчетныйОстатокВалРегУчета;

			Иначе

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
				Проводка.СчетДт = ТекСчет;

				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоДт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;

				Проводка.ВалютаДт = Стр.Валюта;
				Проводка.Сумма    = РасчетныйОстатокВалРегУчета;

			КонецЕсли;

			Если ОтражатьНУ тогда

				Проводка = ?(ВставитьПервой, ПроводкиНУ.Вставить(0), ПроводкиНУ.Добавить());

				Проводка.Период      = ДатаДока;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Переоценка валюты";

				Если РасчетныйОстатокВалРегУчета<0 тогда
					Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
					Проводка.Сумма  = -РасчетныйОстатокВалРегУчета;
				Иначе
					Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
					Проводка.Сумма  = РасчетныйОстатокВалРегУчета;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		СчетПереоценки.Вставить("СуммаПереоценкиРегл", СуммаПереоценкиРегл);
		
		Возврат;

	Иначе

		СчетПереоценки.Свойство("РублевыйОстаток", ОстатокВалРегУчета);
		СчетПереоценки.Свойство("ВалютныйОстаток", ОстатокИнаяВал);

	КонецЕсли;

	ДанныеОВалютеОстатка = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,ДатаДока);

	РасчетныйОстатокВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
	                                                         ДанныеОВалютеОстатка.Курс, 1,ДанныеОВалютеОстатка.Кратность, 1);

	Если ОстатокВалРегУчета = РасчетныйОстатокВалРегУчета тогда
		возврат;
	КонецЕсли;

	РасчетныйОстатокВалРегУчета = РасчетныйОстатокВалРегУчета - Число(ОстатокВалРегУчета);
	СуммаПереоценкиРегл = СуммаПереоценкиРегл + РасчетныйОстатокВалРегУчета;
	ФильтрСубконто = Неопределено;

	Если РасчетныйОстатокВалРегУчета < 0 тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Переоценка валюты";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;

		Проводка.СчетКт = ТекСчет;
		ТекВидСубконто  = ТекСчет.ВидыСубконто;

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоКт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;

		Проводка.ВалютаКт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.Сумма           = -РасчетныйОстатокВалРегУчета;

		Если ОтражатьНУ тогда

			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валюты";

			Проводка.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
			Проводка.Сумма = -РасчетныйОстатокВалРегУчета;

		КонецЕсли;

	ИначеЕсли РасчетныйОстатокВалРегУчета>0 тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДока;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Переоценка валюты";

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;

		Проводка.СчетДт = ТекСчет;
		ТекВидСубконто  = ТекСчет.ВидыСубконто;

		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл

			НомерСубконто = ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоДт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;

		КонецЦикла;

		Проводка.ВалютаДт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.Сумма           = РасчетныйОстатокВалРегУчета;

		Если ОтражатьНУ тогда

			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валюты";
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяПрочихДоходовРасходов;
			Проводка.Сумма  = РасчетныйОстатокВалРегУчета;

		КонецЕсли;

	КонецЕсли;
	
	СчетПереоценки.Вставить("СуммаПереоценкиРегл", СуммаПереоценкиРегл);

КонецПроцедуры // ПереоценкаСчетаРегл

// Формирует по проводкам документа список валютных счетов для переоценки, запускает переоценку.
//
// Параметры
// 	Объект          		- ДокументОбъект        	- Документ для которого выполняется процедура.
// 	ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  	 	Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		Валюта				- СправочникСсылка.Валюты	- ссылка на валюту документа
//		Курс				- Число
//		Кратность			- Число
//
//  ИспользоватьКурсИзСправочника - Булево				- Для передачи в процедуру переоценки,
//													 	 определяет режим выбора курса при переоценке.
//															Ложь - курс берется из документа.
//															Истина - курс берется из справочника "Валюты".
//															Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево						- Отражать движения в налоговом учете
//														 	Значение по умолчанию: Истина.
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Функция ПереоценкаСчетовДокументаРегл(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета="",Отказ) экспорт

	//Добавление РГ-Софт - Пронин Иван
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") 
	 ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
	 ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
	 ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
	
		ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		
		Движения = ДокументОбъект.Движения.СчетаДенежныхСредств;
		БанковскийСчет = ДокументОбъект.СчетОрганизации;
		ДатаДока = ДокументОбъект.Дата;
		ВалютаДокумента = БанковскийСчет.ВалютаДенежныхСредств;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(СчетаДенежныхСредствОстатки.СуммаОстаток, 0) КАК Сумма,
		               |	ЕСТЬNULL(СчетаДенежныхСредствОстатки.СуммаВалОстаток, 0) КАК ВалютнаяСумма
		               |ИЗ
		               |	РегистрНакопления.СчетаДенежныхСредств.Остатки(&Дата, БанковскийСчет = &БанковскийСчет) КАК СчетаДенежныхСредствОстатки";
		
		Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(ДатаДока), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда 
		
			ДанныеОВалюте = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДока);
			РасчетныйОстатокВалРегУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСумма, ВалютаДокумента, ВалютаРегламентированногоУчета, ДанныеОВалюте.Курс, 1,ДанныеОВалюте.Кратность,1);
																			 
			Если РасчетныйОстатокВалРегУчета > Выборка.Сумма Тогда
				Движение = Движения.ДобавитьПриход();
				Движение.Период = ДатаДока; //добавила Федотова Л., 01.09.09, выдавалась ошибка при проведении, что период пустой
				Движение.БанковскийСчет = БанковскийСчет;
				Движение.Валюта = ВалютаДокумента;
				Движение.Сумма = РасчетныйОстатокВалРегУчета - Выборка.Сумма;
			ИначеЕсли РасчетныйОстатокВалРегУчета < Выборка.Сумма Тогда
				Движение = Движения.ДобавитьРасход();
				Движение.Период = ДатаДока; //добавила Федотова Л., 01.09.09, выдавалась ошибка при проведении, что период пустой
				Движение.БанковскийСчет = БанковскийСчет;
				Движение.Валюта = ВалютаДокумента;
				Движение.Сумма = Выборка.Сумма - РасчетныйОстатокВалРегУчета;				
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;															 
	//Конец добавления
	
	Возврат Истина;
	
	//Если ПроводкиБУ.Количество() = 0 тогда // (ВалютаДокумента = ВалютаРегламентированногоУчета) ИЛИ
	//	Возврат Истина;
	//КонецЕсли;

	//ПроводкиНУ = Неопределено;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

	//	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;

	//	Если ПроводкиНУ = Неопределено тогда
	//		Отказ = Истина;
	//		Возврат Ложь;
	//	КонецЕслИ;

	//КонецЕсли;

	////Подготовка таблицы значений для формирования списка счетов для переоценки
	//ТаблицаСчетов = Новый ТаблицаЗначений;
	//ТаблицаСчетов.Колонки.Добавить("Счет");
	//ТаблицаСчетов.Колонки.Добавить("Субконто1");
	//ТаблицаСчетов.Колонки.Добавить("Субконто2");
	//ТаблицаСчетов.Колонки.Добавить("Субконто3");
	//ТаблицаСчетов.Колонки.Добавить("ИспользованиеС1", Новый ОписаниеТипов("Булево"));
	//ТаблицаСчетов.Колонки.Добавить("ИспользованиеС2", Новый ОписаниеТипов("Булево"));
	//ТаблицаСчетов.Колонки.Добавить("ИспользованиеС3", Новый ОписаниеТипов("Булево"));
	//ТаблицаСчетов.Колонки.Добавить("СуммаПереоценкиРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	//ТаблицаСчетов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	//   Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СчетаСОсобымПорядкомПереоценкиБУ.Счет
	//|ИЗ
	//|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ";
	//
	//СчетаСОсобымПорядкомПереоценкиБУ = Новый списокЗначений();
	//СчетаСОсобымПорядкомПереоценкиБУ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	//	
	////Формирование списка счетов для переоценки
	//Для каждого ТекПроводка из ПроводкиБУ Цикл

	//	Если ТекПроводка.СчетКт.Валютный тогда

	//		Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетКт)= Неопределено тогда

	//			ТекСчет = ТекПроводка.СчетКт;
	//			ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
	//			ТекЗаписьТаблицы.Счет = ТекСчет;

	//			Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

	//				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
	//				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

	//			КонецЦикла;

	//			ТекЗаписьТаблицы.Валюта = ТекПроводка.ВалютаКт;
	//			
	//		КонецЕсли;

	//	КонецЕсли;

	//	Если ТекПроводка.СчетДт.Валютный тогда

	//		Если СчетаСОсобымПорядкомПереоценкиБУ.НайтиПоЗначению(ТекПроводка.СчетДт)=Неопределено тогда

	//			ТекСчет = ТекПроводка.СчетДт;
	//			ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
	//			ТекЗаписьТаблицы.Счет = ТекСчет;

	//			Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

	//				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
	//				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

	//			КонецЦикла;

	//			ТекЗаписьТаблицы.Валюта = ТекПроводка.ВалютаДт;
	//			
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЦикла;

	//ТаблицаСчетов.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ИспользованиеС1,ИспользованиеС2,ИспользованиеС3,Валюта", "СуммаПереоценкиРегл");
	//ЕстьПереоценкаСобственныхЦенностей = Ложь;
	////Запуск процедуры переоценки для каждого счета
	//Для каждого ТекСчет из ТаблицаСчетов цикл

	//	СчетДляПереоценки = новый структура("Счет",ТекСчет.Счет);

	//	Для Индекс = 1 по 3 Цикл

	//		Если ТекСчет.Получить(Индекс + 3) тогда
	//			СчетДляПереоценки.Вставить("Субконто" + Индекс, ТекСчет.Получить(Индекс));
	//		КонецЕсли;

	//	КонецЦикла;
	//	
	//	СчетДляПереоценки.Вставить("Валюта", ТекСчет.Валюта);

	//	ПереоценкаСчетаРегл(СтруктураШапкиДокумента, ПроводкиБУ, ПроводкиНУ, СчетДляПереоценки, ВалютаРегламентированногоУчета, Истина,,,СчетаСОсобымПорядкомПереоценкиБУ);
	//	
	//	СуммаПереоценкиРегл = 0;
	//	СчетДляПереоценки.Свойство("СуммаПереоценкиРегл", СуммаПереоценкиРегл);
	//	ТекСчет.СуммаПереоценкиРегл = СуммаПереоценкиРегл;
	//	
	//	Если ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) ИЛИ
	//		ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) ИЛИ
	//		ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) ИЛИ
	//		ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) ИЛИ
	//		ТекСчет.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПереводыВПути_) ИЛИ
	//		ТекСчет.Счет = ПланыСчетов.Хозрасчетный.Касса ИЛИ
	//		ТекСчет.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета ИЛИ
	//		ТекСчет.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета ИЛИ
	//		ТекСчет.Счет = ПланыСчетов.Хозрасчетный.СпециальныеСчета ИЛИ
	//		ТекСчет.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПути_ Тогда
	//				
	//		ЕстьПереоценкаСобственныхЦенностей = Истина;
	//	КонецЕсли;
	//	
	//КонецЦикла;

КонецФункции // ПереоценкаСчетовДокументаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт

	Возврат ?(Счет.Пустая(), 0, ?(Счет.Количественный, Количество, 0));

КонецФункции // КоличествоВПроводку()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
// 
Процедура ЗаменитьСубконтоНУ(СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, СубконтоНУ) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;

	Если СчетНУ.ВидыСубконто.Количество() >= НомерСубконто Тогда
		Если СчетБУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения = 
			СчетНУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения Тогда

			СубконтоНУ = СубконтоБУ;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаменитьСубконтоНУ()

// Преобразует согласно заданых параметров счет БУ в счет НУ
// 
Функция ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных, Тип = "НУ", ССубконто = Ложь, Знач ДатаСреза = Неопределено) Экспорт

	Перем ТекстУсловий;

	Результат = ПланыСчетов.Налоговый.ПустаяСсылка();

	Если НЕ (Тип = "НУ") Тогда
		Сообщить("Неверный тип преобразования счета БУ в счет НУ");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(СтруктураДанных) = Тип("Структура"))
	 ИЛИ СтруктураДанных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос();

	ТекстУсловия = "Учитывается";
	Для каждого ПолеСтруктуры Из СтруктураДанных Цикл
		
		ТекстУсловия = ТекстУсловия + " И " + Символы.ПС + "	" + ПолеСтруктуры.Ключ + " = &" + ПолеСтруктуры.Ключ;
		Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);

	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетБУ,
	               |	СчетКоррБУ,
	               |	СубконтоБУ1,
	               |	СубконтоБУ2,
	               |	СубконтоБУ3,
	               |	ВидЗатратНУ,
	               |	СчетНУ,
	               |	СубконтоНУ1,
	               |	СубконтоНУ2,
	               |	СубконтоНУ3
	               |ИЗ
	               |	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&ДатаСреза, " + ТекстУсловия + ") КАК СоответствиеСчетовБУиНУ";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 2);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Если ССубконто Тогда

			Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
			Результат.СчетНУ      = Выборка["Счет"     + Тип];
			Результат.СубконтоНУ1 = Выборка["Субконто" + Тип + "1"];
			Результат.СубконтоНУ2 = Выборка["Субконто" + Тип + "2"];
			Результат.СубконтоНУ3 = Выборка["Субконто" + Тип + "3"];

			Возврат Результат;

		Иначе

			Возврат Выборка["Счет" + Тип];

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПреобразоватьСчетаБУвСчетНУ()

// Функция возвращает список вышестоящих групп указанной номенклатуры.
// 
// Переметры:
//  Номенклатура - Номенклатура, для которой ищется родитель
//  СписокГрупп  - Список, куда передаются группы.
//
// Возвращаемое значение
//  Список вышестояших групп
//
Процедура ПолучитьСписокВышестоящихГрупп(СписокГрупп, Номенклатура)

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура.Родитель) тогда
		Возврат;
	Иначе
		СписокГрупп.Добавить(Номенклатура.Родитель);
		ПолучитьСписокВышестоящихГрупп(СписокГрупп, Номенклатура.Родитель);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокВышестоящихГрупп()

// Функция возвращает истину, если на указанном складе ведется розничная
// торговля. Используется при определении счетов учета номенклатуры,
// выполняемом при заполнении документов.
//
Функция НаСкладеВедетсяРозничнаяТорговля(Склад) Экспорт
	
	ВедетсяРозничнаяТорговля = Ложь;
	Если Склад <> Неопределено Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			Если (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) или
				 (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				 
				ВедетсяРозничнаяТорговля = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВедетсяРозничнаяТорговля;

КонецФункции // НаСкладеВедетсяРозничнаяТорговля()

// Функция возвращает счета учета номенклатры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено) Экспорт

	СтруктураВозврата = Новый Структура("
							|СчетУчетаБУ, СчетУчетаНДС, СчетУчетаНДСПродажи, СчетНДСТаможни,
							|СчетУчетаДавСырья,               СчетПередачиБУ, СчетУчетаДоп,   СчетПередачиЗабБУ,
							|СчетДоходовБУ, СчетРасходовБУ,
							|СчетУчетаНУ, СчетПередачиНУ, СчетУчетаДопНУ, СчетПередачиЗабНУ,
							|СчетДоходовНУ, СчетРасходовНУ");

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Склад) Тогда
		Склад = Неопределено;
		ТипСклада = Перечисления.ТипыСкладов.ПустаяСсылка();
	Иначе
		ТипСклада = ?(Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый, Перечисления.ТипыСкладов.Оптовый, Перечисления.ТипыСкладов.Розничный);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);
	Запрос.УстановитьПараметр("Склад",			    Склад);
	Запрос.УстановитьПараметр("ТипСклада",			ТипСклада);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад", 		Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипСклада", 	Перечисления.ТипыСкладов.ПустаяСсылка());
    Индекс      = 1;
	ТекстЗапроса = "";
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
	//1	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	СчетУчетаБУ,
	|	СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетУчетаНДСПоРеализации,
	|	СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетУчетаЗабалансовыйБУ,
	|	СчетУчетаНУ,
	|	СчетДоходовОтРеализацииБУ,
	|	СчетДоходовОтРеализацииНУ,
	|	СчетУчетаПередачиБУ,
	|	СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетУчетаПередачиНУ,
	|	СчетРасходовОтРеализацииБУ,
	|	СчетРасходовОтРеализацииНУ,
	|	СчетУчетаЗабалансовыйНУ,
	|	СчетУчетаПередачиЗабалансовыйНУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|
	|ГДЕ
	|	Организация  = &Организация И
	|	Номенклатура = &Номенклатура";
	
	Если НЕ Склад = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	Склад = &Склад
		|";
	Иначе
	    ТекстЗапроса = ТекстЗапроса + "
		|";
	КонецЕсли;
	СписокГрупп = Новый("СписокЗначений");
	ПолучитьСписокВышестоящихГрупп(СписокГрупп, Номенклатура);
    Индекс = Индекс + 1;
	Для каждого Элемент Из СписокГрупп Цикл

		Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
		//2
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &Организация И
		|	Номенклатура = &ГруппаНоменклатура"+ Индекс;
		Если НЕ Склад = Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + " И
			|	Склад = &Склад
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
    КонецЕсли;
	//3
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	" + (Индекс) + ",
	|	СчетУчетаБУ,
	|	СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетУчетаНДСПоРеализации,
	|	СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетУчетаЗабалансовыйБУ,
	|	СчетУчетаНУ,
	|	СчетДоходовОтРеализацииБУ,
	|	СчетДоходовОтРеализацииНУ,
	|	СчетУчетаПередачиБУ,
	|	СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетУчетаПередачиНУ,
	|	СчетРасходовОтРеализацииБУ,
	|	СчетРасходовОтРеализацииНУ,
	|	СчетУчетаЗабалансовыйНУ,
	|	СчетУчетаПередачиЗабалансовыйНУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|
	|ГДЕ
	|	Организация  = &Организация И
	|	Номенклатура = &ПустаяНоменклатура";
	
	Индекс = Индекс + 1;	
	Если НЕ Склад = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И
		|	Склад = &Склад
		|";
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
		//4	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &Организация И
		|	Номенклатура = &Номенклатура И
		|	Склад		 = &ПустойСклад И
		|	ТипСклада	 = &ТипСклада
		|";
		
		Индекс = Индекс + 1;
		Для каждого Элемент Из СписокГрупп Цикл
			
			Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
			//5
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	" + (Индекс) + ",
			|	СчетУчетаБУ,
			|	СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетУчетаНДСПоРеализации,
			|	СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетУчетаЗабалансовыйБУ,
			|	СчетУчетаНУ,
			|	СчетДоходовОтРеализацииБУ,
			|	СчетДоходовОтРеализацииНУ,
			|	СчетУчетаПередачиБУ,
			|	СчетУчетаПередачиЗабалансовыйБУ,
			|	СчетУчетаПередачиНУ,
			|	СчетРасходовОтРеализацииБУ,
			|	СчетРасходовОтРеализацииНУ,
			|	СчетУчетаЗабалансовыйНУ,
			|	СчетУчетаПередачиЗабалансовыйНУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|
			|ГДЕ
			|	Организация  = &Организация И
			|	Номенклатура = &ГруппаНоменклатура"+ Индекс + " И
			|	Склад		 = &ПустойСклад И
			|	ТипСклада	 = &ТипСклада
			|";
			
			Индекс = Индекс + 1;
		КонецЦикла;
		КонецЕсли;
		//6
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &Организация И
		|	Номенклатура = &ПустаяНоменклатура И
		|	Склад		 = &ПустойСклад И
		|	ТипСклада	 = &ТипСклада
		|";

		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
		//7	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &Организация И
		|	Номенклатура = &Номенклатура И
		|	ТипСклада	 = &ПустойТипСклада
		|";
		
		Индекс = Индекс + 1;
		Для каждого Элемент Из СписокГрупп Цикл
			
			Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
			//8
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	" + (Индекс) + ",
			|	СчетУчетаБУ,
			|	СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетУчетаНДСПоРеализации,
			|	СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетУчетаЗабалансовыйБУ,
			|	СчетУчетаНУ,
			|	СчетДоходовОтРеализацииБУ,
			|	СчетДоходовОтРеализацииНУ,
			|	СчетУчетаПередачиБУ,
			|	СчетУчетаПередачиЗабалансовыйБУ,
			|	СчетУчетаПередачиНУ,
			|	СчетРасходовОтРеализацииБУ,
			|	СчетРасходовОтРеализацииНУ,
			|	СчетУчетаЗабалансовыйНУ,
			|	СчетУчетаПередачиЗабалансовыйНУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|
			|ГДЕ
			|	Организация  = &Организация И
			|	Номенклатура = &ГруппаНоменклатура"+ Индекс + " И
			|	ТипСклада	 = &ПустойТипСклада
			|";
			
			Индекс = Индекс + 1;
		КонецЦикла;
		КонецЕсли;
	
		Индекс = Индекс + 1;		
		//9
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &Организация И
		|	Номенклатура = &ПустаяНоменклатура И
		|	ТипСклада	 = &ПустойТипСклада
		|";
		Индекс = Индекс + 1;

	Иначе
	    ТекстЗапроса = ТекстЗапроса + "
		|";
	КонецЕсли;
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
	//10
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + (Индекс) + ",
	|	СчетУчетаБУ,
	|	СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетУчетаНДСПоРеализации,
	|	СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетУчетаЗабалансовыйБУ,
	|	СчетУчетаНУ,
	|	СчетДоходовОтРеализацииБУ,
	|	СчетДоходовОтРеализацииНУ,
	|	СчетУчетаПередачиБУ,
	|	СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетУчетаПередачиНУ,
	|	СчетРасходовОтРеализацииБУ,
	|	СчетРасходовОтРеализацииНУ,
	|	СчетУчетаЗабалансовыйНУ,
	|	СчетУчетаПередачиЗабалансовыйНУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|
	|ГДЕ
	|	Организация  = &ПустаяОрганизация И
	|	Номенклатура = &Номенклатура";
	
	Если НЕ Склад = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	Склад = &Склад
		|";
	Иначе
	    ТекстЗапроса = ТекстЗапроса + "
		|";
	КонецЕсли;
	Индекс = Индекс + 1;
	Для каждого Элемент Из СписокГрупп Цикл

		Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
		//11
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &ПустаяОрганизация И
		|	Номенклатура = &ГруппаНоменклатура"+ Индекс;
		
		Если НЕ Склад = Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + " И
			|	Склад = &Склад
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
    КонецЕсли;
	//12
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + (Индекс) + ",
	|	СчетУчетаБУ,
	|	СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетУчетаНДСПоРеализации,
	|	СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетУчетаЗабалансовыйБУ,
	|	СчетУчетаНУ,
	|	СчетДоходовОтРеализацииБУ,
	|	СчетДоходовОтРеализацииНУ,
	|	СчетУчетаПередачиБУ,
	|	СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетУчетаПередачиНУ,
	|	СчетРасходовОтРеализацииБУ,
	|	СчетРасходовОтРеализацииНУ,
	|	СчетУчетаЗабалансовыйНУ,
	|	СчетУчетаПередачиЗабалансовыйНУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|
	|ГДЕ
	|	Организация  = &ПустаяОрганизация И
	|	Номенклатура = &ПустаяНоменклатура";
	
	Индекс = Индекс + 1;
	
	Если НЕ Склад = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	Склад = &Склад
		|";
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
		//13	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &ПустаяОрганизация И
		|	Номенклатура = &Номенклатура И
		|	Склад		 = &ПустойСклад И
		|	ТипСклада	 = &ТипСклада
		|";
		
		Индекс = Индекс + 1;
		Для каждого Элемент Из СписокГрупп Цикл
			
			Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
			//14
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	" + (Индекс) + ",
			|	СчетУчетаБУ,
			|	СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетУчетаНДСПоРеализации,
			|	СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетУчетаЗабалансовыйБУ,
			|	СчетУчетаНУ,
			|	СчетДоходовОтРеализацииБУ,
			|	СчетДоходовОтРеализацииНУ,
			|	СчетУчетаПередачиБУ,
			|	СчетУчетаПередачиЗабалансовыйБУ,
			|	СчетУчетаПередачиНУ,
			|	СчетРасходовОтРеализацииБУ,
			|	СчетРасходовОтРеализацииНУ,
			|	СчетУчетаЗабалансовыйНУ,
			|	СчетУчетаПередачиЗабалансовыйНУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|
			|ГДЕ
			|	Организация  = &ПустаяОрганизация И
			|	Номенклатура = &ГруппаНоменклатура"+ Индекс + " И
			|	Склад		 = &ПустойСклад И
			|	ТипСклада	 = &ТипСклада
			|";
			
			Индекс = Индекс + 1;
		КонецЦикла;
		КонецЕсли;
		//15
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &ПустаяОрганизация И
		|	Номенклатура = &ПустаяНоменклатура И
		|	Склад		 = &ПустойСклад И
		|	ТипСклада	 = &ТипСклада
		|";
		
		Индекс = Индекс + 1;
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Номенклатура) Тогда
		//16	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &ПустаяОрганизация И
		|	Номенклатура = &Номенклатура И
		|	ТипСклада	 = &ПустойТипСклада
		|";
		
		Индекс = Индекс + 1;
		Для каждого Элемент Из СписокГрупп Цикл
			
			Запрос.УстановитьПараметр("ГруппаНоменклатура" + Индекс, Элемент.Значение);
			//17
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	" + (Индекс) + ",
			|	СчетУчетаБУ,
			|	СчетУчетаНДСПоПриобретеннымЦенностям,
			|	СчетУчетаНДСПоРеализации,
			|	СчетУчетаНДСУплаченногоНаТаможне,
			|	СчетУчетаЗабалансовыйБУ,
			|	СчетУчетаНУ,
			|	СчетДоходовОтРеализацииБУ,
			|	СчетДоходовОтРеализацииНУ,
			|	СчетУчетаПередачиБУ,
			|	СчетУчетаПередачиЗабалансовыйБУ,
			|	СчетУчетаПередачиНУ,
			|	СчетРасходовОтРеализацииБУ,
			|	СчетРасходовОтРеализацииНУ,
			|	СчетУчетаЗабалансовыйНУ,
			|	СчетУчетаПередачиЗабалансовыйНУ
			|ИЗ
			|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
			|
			|ГДЕ
			|	Организация  = &ПустаяОрганизация И
			|	Номенклатура = &ГруппаНоменклатура"+ Индекс + " И
			|	ТипСклада	 = &ПустойТипСклада
			|";
			Индекс = Индекс + 1;
		КонецЦикла;
		КонецЕсли;
		//18
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + (Индекс) + ",
		|	СчетУчетаБУ,
		|	СчетУчетаНДСПоПриобретеннымЦенностям,
		|	СчетУчетаНДСПоРеализации,
		|	СчетУчетаНДСУплаченногоНаТаможне,
		|	СчетУчетаЗабалансовыйБУ,
		|	СчетУчетаНУ,
		|	СчетДоходовОтРеализацииБУ,
		|	СчетДоходовОтРеализацииНУ,
		|	СчетУчетаПередачиБУ,
		|	СчетУчетаПередачиЗабалансовыйБУ,
		|	СчетУчетаПередачиНУ,
		|	СчетРасходовОтРеализацииБУ,
		|	СчетРасходовОтРеализацииНУ,
		|	СчетУчетаЗабалансовыйНУ,
		|	СчетУчетаПередачиЗабалансовыйНУ
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|
		|ГДЕ
		|	Организация  = &ПустаяОрганизация И
		|	Номенклатура = &ПустаяНоменклатура И
		|	ТипСклада	 = &ПустойТипСклада
		|";
	
	Иначе
	    ТекстЗапроса = ТекстЗапроса + "
		|";
	КонецЕсли;
	
	Запрос.Текст    = ТекстЗапроса;
	СведенияОСчетах = Запрос.Выполнить().Выбрать();

	Если СведенияОСчетах.Следующий() Тогда

		СтруктураВозврата.СчетУчетаБУ         = СведенияОСчетах.СчетУчетаБУ;
		СтруктураВозврата.СчетУчетаНДС        = СведенияОСчетах.СчетУчетаНДСПоПриобретеннымЦенностям;
		СтруктураВозврата.СчетУчетаНДСПродажи = СведенияОСчетах.СчетУчетаНДСПоРеализации;
		СтруктураВозврата.СчетНДСТаможни      = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
		СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
		СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
		СтруктураВозврата.СчетДоходовБУ       = СведенияОСчетах.СчетДоходовОтРеализацииБУ;
		СтруктураВозврата.СчетПередачиБУ      = СведенияОСчетах.СчетУчетаПередачиБУ;
		СтруктураВозврата.СчетПередачиЗабБУ   = СведенияОСчетах.СчетУчетаПередачиЗабалансовыйБУ;
		СтруктураВозврата.СчетРасходовБУ      = СведенияОСчетах.СчетРасходовОтРеализацииБУ;
		СтруктураВозврата.СчетУчетаНУ         = СведенияОСчетах.СчетУчетаНУ;
		СтруктураВозврата.СчетПередачиНУ      = СведенияОСчетах.СчетУчетаПередачиНУ;
		СтруктураВозврата.СчетДоходовНУ       = СведенияОСчетах.СчетДоходовОтРеализацииНУ;
		СтруктураВозврата.СчетРасходовНУ      = СведенияОСчетах.СчетРасходовОтРеализацииНУ;
		СтруктураВозврата.СчетУчетаДопНУ      = СведенияОСчетах.СчетУчетаЗабалансовыйНУ;
		СтруктураВозврата.СчетПередачиЗабНУ   = СведенияОСчетах.СчетУчетаПередачиЗабалансовыйНУ;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                             ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) 
	   И Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

#Если Клиент тогда

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	//ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения 
	//	  ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда

	//	СтандартнаяОбработка    = Ложь;
	//	ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
	//	ФормаВыбора.мТипыДокументов = ОграничениеТипаЭлемента; 
	//	ФормаВыбора.Организация = Организация;

	//	Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
	//		
	//		ФормаВыбора.Счет         = ?(СписокПараметров.Свойство("СчетУчета")		, СписокПараметров.СчетУчета	, Неопределено);
	//		ФормаВыбора.Номенклатура = ?(СписокПараметров.Свойство("Номенклатура")	, СписокПараметров.Номенклатура	, Неопределено);
	//		ФормаВыбора.Склад        = ?(СписокПараметров.Свойство("Склад")			, СписокПараметров.Склад		, Неопределено);
	//		ФормаВыбора.КонПериода   = ?(СписокПараметров.Свойство("Дата")			, СписокПараметров.Дата			, Неопределено);
	//		
	//		Если СписокПараметров.Свойство("ВидСубконто") Тогда
	//			ФормаВыбора.ВидСубконто  = СписокПараметров.ВидСубконто;
	//		ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения Тогда
	//			ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	//		КонецЕсли;
	//		
	//	КонецЕсли;

	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если ОграничениеТипаЭлемента = Неопределено Тогда
			ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения;
		КонецЕсли;   
		  
		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Контрагент") Тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;

			Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;

		КонецЕсли;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

// Получает сумму списания активов для заполнения печатных форм документов
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор И (НЕ СчетКт = &СчетГТД)) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции

#КонецЕсли
