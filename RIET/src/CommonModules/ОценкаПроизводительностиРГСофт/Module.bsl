
///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ФУНКЦИИ

Процедура ЗафиксироватьВремяОкончания(ВремяНачалаМс, КлючеваяОперация, Объект=Неопределено) Экспорт
	
	// фиксирует точное время окончания ключевой операции
	// точное время определяется с помощью функции ТочноеВремя, соответственно и ВремяНачалаМс должно быть получено с помощью этой функции
	
	ЗаписатьЗамерВремени(КлючеваяОперация, Объект, ВремяНачалаМс, ТочноеВремя());
	
КонецПроцедуры

Процедура ЗаписатьЗамерВремени(КлючеваяОперация, Объект, ВремяНачалаМс, ВремяОкончанияМс) Экспорт
	
	// создает и записывает элемент справочника Замеры времени в привилегированном режиме
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗамерВремени = Справочники.ЗамерыВремени.СоздатьЭлемент();
	
	ЗамерВремени.КлючеваяОперация = КлючеваяОперация;
	ЗамерВремени.Объект = Объект;
	ЗамерВремени.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ЗамерВремени.ВремяВыполнения = (ВремяОкончанияМс - ВремяНачалаМс) / 1000;
		
	Попытка
		ЗамерВремени.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			"Запись замера времени '" + КлючеваяОперация + "'",
			УровеньЖурналаРегистрации.Ошибка,
			,
			Объект,
			"Не удалось зафиксировать время окончания: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// ЗАМЕНИТЬ ВЕЗДЕ НА ТекущаяУниверсальнаяДатаВМиллисекундах
Функция ТочноеВремя() Экспорт
		
	// Функция получает точное время
	//
	// Возвращаемое значение:
	//  Число - время с точностью до миллисекунд
	
	//Инструменты = ОценкаПроизводительностиПовтИспСеансРГСофт.ПолучитьИнструменты();	
	//Возврат ЗначениеТаймера(Инструменты);
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецФункции
