
/////////////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ НОВЫХ ДАННЫХ ИЗ ПОДСИСТЕМЫ DSS
 
// ДОДЕЛАТЬ!!!
Процедура ЗагрузитьНовыеПроводкиDSSШапкиСКП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ДокументПроводкаDSS.Ссылка КАК ДокументDSS,
		|	ДокументПроводкаDSS.Номер КАК GltObjId
		|ИЗ
		|	Документ.ПроводкаDSS КАК ДокументПроводкаDSS
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
		|		ПО ДокументПроводкаDSS.Номер = СчетКнигиПокупок.ПроводкаDSS.Номер
		|ГДЕ
		|	ДокументПроводкаDSS.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.PurchaseBook)
		|	И ДокументПроводкаDSS.SourceCode = ""AC""
		|	И СчетКнигиПокупок.ПроводкаDSS.Номер ЕСТЬ NULL 
		|	И ДокументПроводкаDSS.Дата >= &Дата_01042012";
	Запрос.УстановитьПараметр("Дата_01042012", '20120401'); //лучше не трогать старую книгу покупок
	
	МенеджерНепривязанных = Новый МенеджерВременныхТаблиц;
	Запрос1 = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	ПроводкаDSS.Ссылка,
	                       |	ПроводкаDSS.Reference КАК Reference,
	                       |	ПроводкаDSS.Vendor КАК Vendor,
	                       |	ПроводкаDSS.ApInvoice
	                       |ПОМЕСТИТЬ Пустые
	                       |ИЗ
	                       |	Документ.ПроводкаDSS КАК ПроводкаDSS
	                       |ГДЕ
	                       |	ПроводкаDSS.System = ""AP""
	                       |	И (ПроводкаDSS.Документ = ЗНАЧЕНИЕ(Документ.СчетКнигиПокупок.ПустаяСсылка)
	                       |			ИЛИ ПроводкаDSS.Документ ССЫЛКА Документ.ОперацияLawson
	                       |			ИЛИ ПроводкаDSS.Документ = НЕОПРЕДЕЛЕНО)
	                       |	И (НЕ ПроводкаDSS.ПометкаУдаления)
	                       |
	                       |ДЛЯ ИЗМЕНЕНИЯ
	                       |	Документ.ПроводкаDSS
	                       |
	                       |ИНДЕКСИРОВАТЬ ПО
	                       |	Reference,
	                       |	Vendor");
	Запрос1.МенеджерВременныхТаблиц = МенеджерНепривязанных;
	Запрос1.Выполнить();
		
	#Если Клиент Тогда
	Состояние("Получение данных о новых проводках DSS");
	#КонецЕсли
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Заголовок = "Загрузка проводок DSS шапки счета книги покупок в книгу покупок";
		СчетаКнигиПокупок = Документы.СчетКнигиПокупок;
		Выборка = Результат.Выбрать();
		#Если Клиент Тогда
		НомерТекущегоЭлемента = 0;
		КоличествоЭлементов = Выборка.Количество();
		#КонецЕсли
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
			НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
			Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
			Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
			ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
			Отказ = Ложь;
			Заголовок = "Создание счета книги покупок из проводки с GltObjId = " + Выборка.GltObjId; 			
			ДокументОбъект = СчетаКнигиПокупок.СоздатьДокумент();			
			ДокументОбъект.ПроводкаDSS = Выборка.ДокументDSS;
					
			// Заполним шапку документа  ПЕРЕДАТЬ ТАБЛИЦЫ КЕША!!!
			ДокументОбъект.ЗаполнитьШапкуДокумента(Отказ);    
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			// Запишем документ с заполненной шапкой
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				// { RGS TChubarova 08.01.2016 23:40:57 - SLI-0006065
				Если НЕ ДокументОбъект.Проведен Тогда 
					Попытка
						// Попытаемся сначала записать документ без контроля проведения
						ИсходноеЗначениеОбменДаннымиЗагрузка = ДокументОбъект.ОбменДанными.Загрузка;
						ДокументОбъект.ОбменДанными.Загрузка = Истина;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						ДокументОбъект.ОбменДанными.Загрузка =	ИсходноеЗначениеОбменДаннымиЗагрузка;
					Исключение
						ТекстОшибки = "Не удалось записать счет книги покупок """ + ДокументОбъект + """ с GltObjId = " + Выборка.ДокументDSS.Номер + ": " + ОписаниеОшибки();
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
					КонецПопытки;
				Иначе 
				// } RGS TChubarova 08.01.2016 23:41:00 - SLI-0006065
					ТекстОшибки = "Не удалось записать счет книги покупок """ + ДокументОбъект + """ с GltObjId = " + Выборка.ДокументDSS.Номер + ": " + ОписаниеОшибки();
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				// { RGS TChubarova 08.01.2016 23:40:57 - SLI-0006065
				КонецЕсли;
				// } RGS TChubarova 08.01.2016 23:41:00 - SLI-0006065
			КонецПопытки;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			// Попытаемся привязать проводки деталей и заполнить табличную часть
			ДокументОбъект.мМенеджерВремТаблиц = МенеджерНепривязанных;
			ДокументОбъект.ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ);    
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			// Попытаемся провести документ
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				// { RGS TChubarova 08.01.2016 23:40:57 - SLI-0006065
				ТекстОшибки = "Не удалось провести счет книги покупок """ + ДокументОбъект + """ с GltObjId = " + Выборка.ДокументDSS.Номер + ": " + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				// } RGS TChubarova 08.01.2016 23:41:00 - SLI-0006065
			КонецПопытки;
						
		КонецЦикла;
		
	КонецЕсли;     
	
	ПроставитьПустыеСсылкиНаСКППроводкамDSS();//Пахоменков
	
КонецПроцедуры

// Пахоменков 10.05.2012
// Процедура проставляет пустые ссылки на документ (для реквизита "документ") СКП
// тем проводкам деталей DSS, которые относятся к проводкам СКП,
// НЕ привяжутся к СКП и имеют реквизит 
// Документ  = Неопределено
Процедура ПроставитьПустыеСсылкиНаСКППроводкамDSS() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	(ПроводкаDSS.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.PurchaseBook)
		|				И ПроводкаDSS.SourceCode <> ""AC""
		|				И ПроводкаDSS.SourceCode <> ""AP""
		|				И ПроводкаDSS.SourceCode <> ""ZB""
		|				И ПроводкаDSS.SourceCode <> """"
		|				И ПроводкаDSS.SourceCode <> ""VP""
		|			ИЛИ ПроводкаDSS.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.InventoryCosts)
		|				И (ПроводкаDSS.SourceCode = ""AD""
		|					ИЛИ ПроводкаDSS.SourceCode = ""XC""))
		|	И (НЕ ПроводкаDSS.Документ ССЫЛКА Документ.СчетКнигиПокупок)
		|	И ПроводкаDSS.Дата >= &Дата_01042012";
	Запрос.УстановитьПараметр("Дата_01042012", '20120401'); //лучше не трогать старую книгу покупок

		
		#Если Клиент Тогда
			Состояние("Получение данных о непривязываемых проводках DSS");
		#КонецЕсли       	
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		#Если Клиент Тогда
			НомерТекущегоЭлемента = 0;
			КоличествоЭлементов = Выборка.Количество();
			Сообщить("Всего документов, которым будет проставлена пустая ссылка на СКП: " + КоличествоЭлементов);
		#КонецЕсли
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
				НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
				Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
				Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
				ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
			ДокDSS = Выборка.Ссылка.ПолучитьОбъект();   			
			ДокDSS.Документ = Документы.СчетКнигиПокупок.ПустаяСсылка();
			
			Попытка
				ДокDSS.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстОшибки = "Не удалось записать документ проводкаDSS """ + ДокDSS + """ с GltObjId = " + Выборка.Ссылка.Номер + ": " + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Истина, "Запись пустых ссылок на СКП для проводки DSS");
			КонецПопытки;   		
			
			
		КонецЦикла;

КонецПроцедуры

Процедура ПривязатьПроводкиДеталейКСчетамСКП() Экспорт
	
	МенеджерНепривязанных = Новый МенеджерВременныхТаблиц;
	Запрос1 = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       |	ПроводкаDSS.Ссылка,
	                       |	ПроводкаDSS.Reference КАК Reference,
	                       |	ПроводкаDSS.Vendor КАК Vendor,
	                       |	ПроводкаDSS.ApInvoice
	                       |ПОМЕСТИТЬ Пустые
	                       |ИЗ
	                       |	Документ.ПроводкаDSS КАК ПроводкаDSS
	                       |ГДЕ
	                       |	ПроводкаDSS.System = ""AP""
	                       |	И (ПроводкаDSS.Документ = ЗНАЧЕНИЕ(Документ.СчетКнигиПокупок.ПустаяСсылка)
	                       |			ИЛИ ПроводкаDSS.Документ ССЫЛКА Документ.ОперацияLawson
	                       |			ИЛИ ПроводкаDSS.Документ = НЕОПРЕДЕЛЕНО)
	                       |	И (НЕ ПроводкаDSS.ПометкаУдаления)
	                       |	И (ПроводкаDSS.SourceCode = ""AD""
	                       |			ИЛИ ПроводкаDSS.SourceCode = ""XC"")
	                       |
	                       |ДЛЯ ИЗМЕНЕНИЯ
	                       |	Документ.ПроводкаDSS
	                       |
	                       |ИНДЕКСИРОВАТЬ ПО
	                       |	Reference,
	                       |	Vendor");
	Запрос1.МенеджерВременныхТаблиц = МенеджерНепривязанных;
	#Если Клиент Тогда
	Состояние("Получение данных о непривязанных проводках DSS");
	#КонецЕсли
	Запрос1.Выполнить();
	
	Запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	Пустые.Reference КАК Reference
	                |ПОМЕСТИТЬ Ваучеры
	                |ИЗ
	                |	Пустые КАК Пустые
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СчетКнигиПокупок.Ссылка
	                |ИЗ
	                |	Ваучеры КАК Ваучеры
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	                |		ПО Ваучеры.Reference = СчетКнигиПокупок.Ваучер
	                |ГДЕ
	                |	СчетКнигиПокупок.ДатаПроведения >= &Дата_01042012";
	Запрос1.УстановитьПараметр("Дата_01042012", '20120401'); //лучше не трогать старую книгу покупок
	Выборка = запрос1.Выполнить().Выбрать();
	#Если Клиент Тогда
	НомерТекущегоЭлемента = 0;
	КоличествоЭлементов = Выборка.Количество();
	#КонецЕсли
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
		НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
		Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
		Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
		ОбработкаПрерыванияПользователя();	
		#КонецЕсли
	
		Отказ = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		// Попытаемся привязать проводки деталей и заполнить табличную часть
		ДокументОбъект.мМенеджерВремТаблиц = МенеджерНепривязанных;
		ДокументОбъект.ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ);    
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// Попытаемся провести документ
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			// { RGS TChubarova 08.01.2016 23:40:57 - SLI-0006065
			// Попытаемся записать документ без контроля проведения
			Если НЕ ДокументОбъект.Проведен Тогда 
				Попытка
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
				КонецПопытки;
			КонецЕсли;
			// } RGS TChubarova 08.01.2016 23:41:00 - SLI-0006065
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

// ДОДЕЛАТЬ!!!
Процедура ЗагрузитьНовыеПроводкиDSSОКП() Экспорт
	
	СоздатьОплатыКнигиПокупок();
	
КонецПроцедуры

Процедура СформироватьДвиженияДокументаПроводкиDSS(ДокументСсылка, ДатаДокумента) Экспорт 
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.InventoryПоступление") Тогда 
		Документы.InventoryПоступление.СформироватьПриходInventoryTangibleAssetsCosts(ДокументСсылка, ДатаДокумента);
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияLawson") Тогда 
		Документы.ОперацияLawson.СформироватьПриходInventoryTangibleAssetsCosts(ДокументСсылка, ДатаДокумента);
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетКнигиПокупок") Тогда 
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект(); 
		Документы.СчетКнигиПокупок.СформироватьДвиженияПоРегиструМатериальныеАктивы(ДокументСсылка, ДокументОбъект.ДатаПроведения);
	КонецЕсли;
	   	
КонецПроцедуры

Функция ПолучитьТипПроводкиAPAP(TranAmount, Description) Экспорт
	
	Если TranAmount = 0
		ИЛИ СтрНайти(Description, "Gain/Loss") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.GainLoss;
		
	ИначеЕсли СтрНайти(Description, "Cash Disbursement") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.CashDisbursement;
		
	ИначеЕсли СтрНайти(Description, "Payment Accrual") > 0 Тогда
		
		Возврат Перечисления.ТипыПроводокAPAP.PaymentAccrual;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВаучерПоDescription(Description) Экспорт
	
	ПозицияЗвездочки = СтрНайти(Description, "*");
	Если ПозицияЗвездочки = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Ваучер = Прав(Description, СтрДлина(Description) - ПозицияЗвездочки);
	Возврат СокрЛП(Ваучер);
	
КонецФункции

// ДОДЕЛАТЬ!!!
Процедура СоздатьОплатыКнигиПокупок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроводкаDSS.Reference КАК Reference,
		|	ПроводкаDSS.DateLawson,
		|	ПроводкаDSS.Company,
		|	ПроводкаDSS.Currency,
		|	ЕСТЬNULL(ОплатаКнигиПокупок.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументОплаты,
		|	ПроводкаDSS.Ссылка
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаКнигиПокупок КАК ОплатаКнигиПокупок
		|		ПО ПроводкаDSS.Reference = ОплатаКнигиПокупок.Reference
		|			И ПроводкаDSS.Currency = ОплатаКнигиПокупок.ВалютаДокумента
		|			И ПроводкаDSS.Company = ОплатаКнигиПокупок.Company
		|			И (ПроводкаDSS.Дата = НАЧАЛОПЕРИОДА(ОплатаКнигиПокупок.Дата, ДЕНЬ))
		|ГДЕ
		|	ПроводкаDSS.System = ""AP""
		|	И ПроводкаDSS.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.PurchaseBook)
		|	И (ПроводкаDSS.SourceCode = ""AP""
		|			ИЛИ ПроводкаDSS.SourceCode = ""VP"")
		|	И НЕ ПроводкаDSS.Документ ССЫЛКА Документ.ОплатаКнигиПокупок
		|	И (ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.CashDisbursement)
		|			ИЛИ ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.PaymentAccrual))
		|	И НЕ ПроводкаDSS.ПометкаУдаления
		|ИТОГИ ПО
		|	Reference";
		
				
	#Если Клиент Тогда
	Состояние("Получение данных о новых проводках DSS");
	#КонецЕсли
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		//Заголовок = "Создание оплат книги покупок";
		//НачалоОткрытогоУправленческогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
		//НачалоОткрытогоНалоговогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);

		//// Запрос на поиск документа, удовлетворяющего комбинации реквизитов
		//Запрос = Новый Запрос;
		//// НАЧАЛОПЕРИОДА - ЭТО НАВЕРНОЕ ДОЛГО!!!
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	ОплатаКнигиПокупок.Ссылка
		//	|ИЗ
		//	|	Документ.ОплатаКнигиПокупок КАК ОплатаКнигиПокупок
		//	|ГДЕ
		//	|	ОплатаКнигиПокупок.Reference = &Reference
		//	|	И ОплатаКнигиПокупок.ВалютаДокумента = &ВалютаДокумента
		//	|	И ОплатаКнигиПокупок.Company = &Company
		//	|	И (НЕ ОплатаКнигиПокупок.ПометкаУдаления)
		//	|	И НАЧАЛОПЕРИОДА(ОплатаКнигиПокупок.Дата, ДЕНЬ) = &Дата
		//	|
		//	|ДЛЯ ИЗМЕНЕНИЯ
		//	|	Документ.ОплатаКнигиПокупок";
		//
		//Выборка = Результат.Выбрать();
		//#Если Клиент Тогда
		//НомерТекущегоЭлемента = 0;
		//КоличествоЭлементов = Выборка.Количество();
		//#КонецЕсли
		//Пока Выборка.Следующий() Цикл
		//	
		//	#Если Клиент Тогда
		//	НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
		//	Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
		//	Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
		//	ОбработкаПрерыванияПользователя();	
		//	#КонецЕсли
		//	
		//	Отказ = Ложь;
		//	НачатьТранзакцию();
		//	Запрос.УстановитьПараметр("Дата", Выборка.DateLawson);
		//	Запрос.УстановитьПараметр("Reference", Выборка.Reference);
		//	Запрос.УстановитьПараметр("Company", Выборка.Company);
		//	Запрос.УстановитьПараметр("ВалютаДокумента", Выборка.Currency);
		//	Результат = Запрос.Выполнить();
		//	Если Результат.Пустой() Тогда
		//		
		//		// ЗДЕСЬ НАДО ФИКСИРОВАТЬ ТРАНЗАКЦИЮ, ЧТОБЫ НЕ ДЕРЖАТЬ ТАБЛИЦУ ДЛЯ ИЗМЕНЕНИЯ!!!
		//		ДокументОбъект = Документы.ОплатаКнигиПокупок.СоздатьДокумент();
		//		ДокументОбъект.Company = Выборка.Company;
		//		ДокументОбъект.Reference = Выборка.Reference;
		//		ДокументОбъект.ВалютаДокумента = Выборка.Currency;
		//		ДокументОбъект.Дата = Выборка.DateLawson;
		//		
		//	Иначе
		//		
		//		ВыборкаДокументов = Результат.Выбрать();
		//		КоличествоДокументов = ВыборкаДокументов.Количество();
		//		Если КоличествоДокументов > 1 Тогда
		//			ТекстОшибки = "Найдено несколько документов, удовлетворяющих комбинации:
		//				|	Дата = " + Выборка.DateLawson + "
		//				|	Reference = " + Выборка.Reference + "
		//				|	Company = " + Выборка.Company + "
		//				|	ВалютаДокумента = " + Выборка.Currency + ",
		//				|невозможно определить, к какому документу привязывать проводки!";
		//			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		//			ОтменитьТранзакцию();
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		ВыборкаДокументов.Следующий();
		//		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		//		
		//	КонецЕсли;
		//	
		//	ДокументОбъект.мНачалоОткрытогоНалоговогоПериода = НачалоОткрытогоНалоговогоПериода;
		//	ДокументОбъект.мНачалоОткрытогоУправленческогоПериода = НачалоОткрытогоУправленческогоПериода;
		//	ДокументОбъект.ОбновитьСоставПроводокИЗаполнитьДокумент(Отказ, Заголовок);
		//	
		//	// ДУМАТЬ НАД ТРАНЗАКЦИЯМИ!!!
		//	Если Отказ Тогда
		//		ОтменитьТранзакцию();
		//		Продолжить;
		//	Иначе
		//		ЗафиксироватьТранзакцию();
		//	КонецЕсли;
		//	
		//	// В процессе заполнения документа произойдет его запись,
		//	//	а здесь попробуем провести его
		//	Попытка
		//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//	Исключение
		//	КонецПопытки;
		//	
		//КонецЦикла;
		//
		Заголовок = "Создание оплат книги покупок";
		НачалоОткрытогоУправленческогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
		НачалоОткрытогоНалоговогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
   	    Оплаты = Новый ТаблицаЗначений();
		Оплаты.Колонки.Добавить("Документ");
		Оплаты.Колонки.Добавить("Проводка");
		
		ВыборкаReference = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		#Если Клиент Тогда
		НомерТекущегоЭлемента = 0;
		КоличествоЭлементов = ВыборкаReference.Количество();
		#КонецЕсли
		Пока ВыборкаReference.Следующий() Цикл
			
			#Если Клиент Тогда
			НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
			Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
			Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
			ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
			Отказ = Ложь;
			НачатьТранзакцию();
			Выборка = ВыборкаReference.Выбрать();
			Пока Выборка.Следующий() Цикл
				 НоваяСтрока = Оплаты.Добавить();
				 НоваяСтрока.Документ = Выборка.ДокументОплаты;
				 НоваяСтрока.Проводка = Выборка.Ссылка;
			КонецЦикла;
			ДокументыОплаты = Оплаты.Скопировать(,"Документ");
			ДокументыОплаты.Свернуть("Документ");
			Если ДокументыОплаты.Количество() = 1 И ДокументыОплаты[0].Документ = Неопределено Тогда
				Выборка.Сбросить();
				Выборка.Следующий();
				ДокументОбъект = Документы.ОплатаКнигиПокупок.СоздатьДокумент();
				ДокументОбъект.Company = Выборка.Company;
				ДокументОбъект.Reference = Выборка.Reference;
				ДокументОбъект.ВалютаДокумента = Выборка.Currency;
				ДокументОбъект.Дата = Выборка.DateLawson;
				
			Иначе
				
				Если ДокументыОплаты.Количество() > 1 Тогда
					ТекстОшибки = "Найдено несколько документов, удовлетворяющих комбинации:
						|	Дата = " + Выборка.DateLawson + "
						|	Reference = " + Выборка.Reference + "
						|	Company = " + Выборка.Company + "
						|	ВалютаДокумента = " + Выборка.Currency + ",
						|невозможно определить, к какому документу привязывать проводки!";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ДокументОбъект = ДокументыОплаты[0].Документ.ПолучитьОбъект();
				
			КонецЕсли;
			
			ДокументОбъект.мНачалоОткрытогоНалоговогоПериода = НачалоОткрытогоНалоговогоПериода;
			ДокументОбъект.мНачалоОткрытогоУправленческогоПериода = НачалоОткрытогоУправленческогоПериода;
			МассивПроводок = Оплаты.ВыгрузитьКолонку("Проводка");
			ДокументОбъект.ОбновитьСоставПроводокИЗаполнитьДокумент(Отказ, Заголовок, МассивПроводок);
			МассивПроводок.Очистить();
			Оплаты.Очистить();
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Продолжить;
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры
 
/////////////////////////////////////////////////////////////////////////////////////////
// ПОМЕТКА НА УДАЛЕНИЕ НЕАКТУАЛЬНЫХ ПРОВОДОК

// ДОДЕЛАТЬ!!!
Процедура ПометитьНаУдалениеСтарыеПроводкиDSSШапкиСКП() Экспорт
	
	Запрос = Новый Запрос;
	// НУЖЕН ИНДЕКС ПО МОДУЛЮ!!!
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетКнигиПокупок.Ссылка
		|ИЗ
		|	Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ДокументПроводкаDSS
		|		ПО СчетКнигиПокупок.ПроводкаDSS.Номер = ДокументПроводкаDSS.Номер
		|ГДЕ
		|	(НЕ СчетКнигиПокупок.ПометкаУдаления)
		|	И (ДокументПроводкаDSS.Модуль ЕСТЬ NULL 
		|			ИЛИ ДокументПроводкаDSS.Модуль <> ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.PurchaseBook))
		|	И (НЕ СчетКнигиПокупок.ЗагруженИзExcel)";
	
	#Если Клиент Тогда
	Состояние("Получение данных о старых проводках DSS");
	#КонецЕсли
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Заголовок = "Пометка на удаление старых проводок DSS шапки счета книги покупок";
		Выборка = Результат.Выбрать();
		#Если Клиент Тогда
		НомерТекущегоЭлемента = 0;
		КоличествоЭлементов = Выборка.Количество();
		#КонецЕсли
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
			НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
			Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
			Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
			ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
			// Отвяжем проводки от документа и пометим их на удаление
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось пометить на удаление документ """ + ДокументОбъект + """: " + ОписаниеОшибки(), , Заголовок);
			КонецПопытки;	
													
		КонецЦикла; // Пока Выборка.Следующий()
		
	КонецЕсли; // Если НЕ Результат.Пустой()
	
КонецПроцедуры

// ДОДЕЛАТЬ!!!
Процедура ПометитьНаУдалениеСтарыеПроводкиDSSОКП() Экспорт
	
	Запрос = Новый Запрос;
	// НУЖЕН ИНДЕКС ПО МОДУЛЮ!!!
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаКнигиПокупок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОплатаКнигиПокупок КАК ОплатаКнигиПокупок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкаDSS
		|		ПО (ПроводкаDSS.Документ = ОплатаКнигиПокупок.Ссылка)
		|ГДЕ
		|	(ПроводкаDSS.Ссылка = НЕОПРЕДЕЛЕНО
		|			ИЛИ ПроводкаDSS.Ссылка ЕСТЬ NULL 
		|			ИЛИ ПроводкаDSS.ПометкаУдаления)
		|	И (НЕ ОплатаКнигиПокупок.ПометкаУдаления)";   		
	
	#Если Клиент Тогда
	Состояние("Получение данных о старых проводках DSS");
	#КонецЕсли
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Заголовок = "Пометка на удаление старых проводок DSS оплат книги покупок";
		Выборка = Результат.Выбрать();
		#Если Клиент Тогда
		НомерТекущегоЭлемента = 0;
		КоличествоЭлементов = Выборка.Количество();
		#КонецЕсли
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
			НомерТекущегоЭлемента = НомерТекущегоЭлемента + 1;
			Процент = 100 * Окр(НомерТекущегоЭлемента / КоличествоЭлементов, 4);
			Состояние("Обрабатывается элемент №" + НомерТекущегоЭлемента + " из " + КоличествоЭлементов + " (" + Процент + "%)");
			ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось пометить на удаление документ """ + ДокументОбъект + """: " + ОписаниеОшибки(), , Заголовок);
			КонецПопытки;	
													
		КонецЦикла; // Пока Выборка.Следующий()
		
	КонецЕсли; // Если НЕ Результат.Пустой() 	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНАЯ СИНХРОНИЗАЦИЯ  
                               
Процедура СинхронизироватьПроводкиDSSКнигиПокупок() Экспорт
	
	ПометитьНаУдалениеСтарыеПроводкиDSSШапкиСКП();
	ПометитьНаУдалениеСтарыеПроводкиDSSОКП();
	
	ЗагрузитьНовыеПроводкиDSSШапкиСКП();
	ЗагрузитьНовыеПроводкиDSSОКП();
	ПривязатьПроводкиДеталейКСчетамСКП();
	// Inventory
	//ПривязатьInventoryДокументыСоСправочникомДеталиСКП();
	
КонецПроцедуры
 
/////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕБРОСКА С ДОКУМЕНТА НА ДОКУМЕНТ ВНУТРИ КНИГИ ПОКУПОК

// СОПТИМИЗИРОВАТЬ!!!
Процедура ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, НовыйДокумент, Отказ = Ложь, Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		Заголовок = "Перебрасывание проводок на документ """ + НовыйДокумент + """:";
	КонецЕсли;
	
	НовыйДокументСсылка = Неопределено;
	НовыйДокументОбъект = Неопределено;
	
	ТипЗначенияНовогоДокумента = ТипЗнч(НовыйДокумент);
	Если ТипЗначенияНовогоДокумента = Тип("ДокументОбъект.СчетКнигиПокупок")
		ИЛИ ТипЗначенияНовогоДокумента = Тип("ДокументОбъект.ОплатаКнигиПокупок") Тогда
		
		НовыйДокументОбъект = НовыйДокумент;
		НовыйДокументСсылка = НовыйДокумент.Ссылка;
		
		Если Не ЗначениеЗаполнено(НовыйДокументСсылка) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Передан новый незаписанный документ!", Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияНовогоДокумента = Тип("ДокументСсылка.СчетКнигиПокупок")
		ИЛИ ТипЗначенияНовогоДокумента = Тип("ДокументСсылка.ОплатаКнигиПокупок") Тогда
		
		НовыйДокументСсылка = НовыйДокумент;
		
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументовКЗаписи = Новый Массив;
	
	НачатьТранзакцию();
	Для Каждого Элемент Из МассивПроводок Цикл
		
		СправочникОбъект = Элемент.ПолучитьОбъект();
		СтарыйДокумент = СправочникОбъект.Документ;
		Если СтарыйДокумент = НовыйДокументСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтарыйДокумент) Тогда
			Если МассивДокументовКЗаписи.Найти(СтарыйДокумент) = Неопределено Тогда
				МассивДокументовКЗаписи.Добавить(СтарыйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		СправочникОбъект.Документ = НовыйДокументСсылка;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстОшибки = "Не удалось записать элемент справочника """ + Элемент + """: " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			Прервать;
		КонецПопытки;
			
	КонецЦикла;
	
	// Перезапишем документы, чтобы рассчиталась сумма расхождения
	Если НЕ Отказ Тогда
		
		// Если новый документ - не пустая ссылка - его тоже нужно перезаполнить и записать
		Если ЗначениеЗаполнено(НовыйДокументСсылка)
			И МассивДокументовКЗаписи.Найти(НовыйДокументСсылка) = Неопределено Тогда
			
			МассивДокументовКЗаписи.Добавить(НовыйДокументСсылка);
			
		КонецЕсли;
		
		Для Каждого Документ Из МассивДокументовКЗаписи Цикл
			
			ДокументОбъект = Неопределено;
			// Если в качестве нового документа был принят Объект, тогда им и воспользуемся
			Если Документ = НовыйДокументСсылка
				И НовыйДокументОбъект <> Неопределено Тогда
				ДокументОбъект = НовыйДокументОбъект;
			КонецЕсли;
			
			Если ДокументОбъект = Неопределено Тогда
				ДокументОбъект = Документ.ПолучитьОбъект();
			КонецЕсли;
			
			// Если документ помечен на удаление - не будем ничего делать
			// МОЖНО СРАЗУ ПОЛУЧИТЬ МАССИВ ДОКУМЕНТОВ К КОТОРЫМ ПРИВЯЗАНЫ ПРОВОДКИ И ПРОВЕРИТЬ ИХ НА УДАЛЕНИЕ
			Если ДокументОбъект.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			// Перезаполним табличную часть документа
			Если НЕ(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СчетКнигиПокупок") ИЛИ 
				ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОплатаКнигиПокупок")) Тогда
			    Продолжить;
			КонецЕсли; 
			
			ДокументОбъект.ЗаполнитьТЧСуммыПоПривязаннымПроводкам(Отказ, Заголовок);
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
			// Запишем / проведем документ
			Если ДокументОбъект.Проведен Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				Действие = "провести";
				
			Иначе
				
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				Действие = "записать";
				
			КонецЕсли;
			
			// Заполним нового ответственного
			Попытка
				ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Исключение
			КонецПопытки;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписи);
			Исключение
				ТекстОшибки = "Не удалось " + Действие + " документ """ + ДокументОбъект + """: " + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривязатьInventoryДокументыСоСправочникомДеталиСКП() Экспорт 
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПроводкиDSSОбщие.Регистратор КАК Документ,
	                |	ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК Ссылка,
	                |	ПроводкиDSSОбщие.Регистратор.Дата КАК ДатаДокумента
	                |ИЗ
	                |	Документ.ПроводкаDSS КАК ПроводкиDSSДеталейСчетовКнигиПокупок
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	                |		ПО ПроводкиDSSДеталейСчетовКнигиПокупок.Номер = ПроводкиDSSОбщие.GltObjId
	                |ГДЕ
	                |	ПроводкиDSSДеталейСчетовКнигиПокупок.Документ = НЕОПРЕДЕЛЕНО
	                |	И (НЕ ПроводкиDSSДеталейСчетовКнигиПокупок.ПометкаУдаления)
	                |	И (ПроводкиDSSОбщие.Регистратор ССЫЛКА Документ.InventoryПоступление
	                |			ИЛИ ПроводкиDSSОбщие.Регистратор ССЫЛКА Документ.InventoryКорректировка
					|			ИЛИ ПроводкиDSSОбщие.Регистратор ССЫЛКА Документ.ОперацияLawson)";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	      СправочникДетали = Выборка.Ссылка.ПолучитьОбъект();
		  СправочникДетали.Документ = Выборка.Документ;
		  
		  ЗаписатьСправочникОбъект(СправочникДетали);
		  
		  // Inventory tangible assets costs
		  Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.InventoryПоступление") Тогда 
			  Документы.InventoryПоступление.СформироватьПриходInventoryTangibleAssetsCosts(Выборка.Документ, Выборка.ДатаДокумента);
		  КонецЕсли;
		  
		  Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ОперацияLawson") Тогда 
			  Документы.ОперацияLawson.СформироватьПриходInventoryTangibleAssetsCosts(Выборка.Документ, Выборка.ДатаДокумента);
		  КонецЕсли;

	 
	 КонецЦикла;
	  	
КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СПРАВОЧНИКАМИ И ДОКУМЕНТАМИ

Процедура ПровестиДокумент(Ссылка, Отказ = Ложь, Заголовок = Неопределено) Экспорт
		
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	
	Если НЕ ДокументОбъект.Проведен Тогда
		Попытка
			ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = "Не удалось провести документ """ + ДокументОбъект + """:
			|" + ОписаниеОшибки();
		Если Заголовок = Неопределено Тогда
			Заголовок = "Проведение документа """ + ДокументОбъект + """:";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Отказ = Ложь, Заголовок = Неопределено) Экспорт
	
	Попытка
		СправочникОбъект.Записать();
	Исключение
		ТекстОшибки = "Не удалось записать элемент справочника """ + СправочникОбъект + """: " + ОписаниеОшибки();
		Если Заголовок = Неопределено Тогда
			Заголовок = "Запись элемента справочника """ + СправочникОбъект + """:";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецПопытки;
	
КонецПроцедуры
