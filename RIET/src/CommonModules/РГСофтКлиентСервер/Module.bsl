
Процедура СообщитьОбОшибке(ТекстОшибки, Отказ=Неопределено) Экспорт
	
	Если Отказ = Неопределено Тогда
		Статус = СтатусСообщения.Внимание;
	Иначе
		Статус = СтатусСообщения.Важное;
		Отказ = Истина;
	КонецЕсли;
	
	Сообщить(ТекстОшибки, Статус);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИСообщить(Реквизит, Имя, Синоним="", КлючДанных=Неопределено, ПутьКДанным="", Отказ=Ложь) Экспорт
	
	// Проверяет заполнение реквизита
	// Если он не заполнен выводит "'Синоним' is empty!'"
	// Остальные параметры нужны, чтобы привязать сообщение к элементу управления с помощью ОбщегоНазначенияКлиентСервер.СообщитьПользователю 
	
	Если НЕ ЗначениеЗаполнено(Синоним) Тогда
		Синоним = Имя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'" + Синоним + "' is empty!",
			КлючДанных, Имя, ПутьКДанным, Отказ);	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначение(Реквизит, Значение) Экспорт

	// Процедура устанавливает новое значение для переданного реквизита.
	// Если новое значение совпадает со старым, то флаг модифицированности не взводится.
	//
	// Параметры
	//  Реквизит  – Произвольный – Реквизит, для которого надо установить новое значение
	//  Значение  – Произвольный – Новое значение для реквизита
	//
	
	Если Реквизит <> Значение Тогда
		Реквизит = Значение;
	КонецЕсли;

КонецПроцедуры // УстановитьЗначение(Реквизит, Значение)

Функция УстановитьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	// Добавление группы отбора
	// Параметры:
	//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
	//                      Список.Отбор.Элементы или группа в отборе
	//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы
	//  Представление строка - представление группы
	
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

Процедура НастроитьЭлементЕслиОнЕсть(Элементы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Элемент[ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры

//Функция ФайлДоступенДляЗагрузки(Знач ПолноеИмя, ИмяЭлементаУправления = Неопределено) Экспорт //исправила Федотова Л., РГ-Софт, 20.03.13, вопрос SLI-0003420
Функция ФайлДоступенДляЗагрузки(Знач ПолноеИмя, ИмяЭлементаУправления = "") Экспорт
	
	ПолноеИмя = СокрЛП(ПолноеИмя);
	Если НЕ ЗначениеЗаполнено(ПолноеИмя) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Выберите файл!",
			, ИмяЭлементаУправления);
		Возврат Ложь;
	КонецЕсли; 
	
	Файл = Новый Файл(ПолноеИмя);
	Если НЕ Файл.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Файл """ + ПолноеИмя + """ не существует!",
			, ИмяЭлементаУправления);
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ Файл.ЭтоФайл() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Файл """ + ПолноеИмя + """ не является файлом!",
			, ИмяЭлементаУправления);
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = ВернутьСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = ВернутьСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = ВернутьСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = ВернутьСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = ВернутьСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = ВернутьСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции // ПолучитьТекстСообщения()

// { RGS ASeryakov 31.01.2018 16:36:35 - S-I-0004008
#Если Сервер Тогда
Функция ПолучитьTNVEDWithMinimumRate(PartNoRef,PartNo) Экспорт
	
	Priority = Ложь;
	СтруктураВозврата = Новый Структура();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ЗапросТекстОсновной =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.InvoiceLine КАК InvoiceLine
	|ПОМЕСТИТЬ InvoiceLinesCostsОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine
	|	ИЗ
	|		РегистрНакопления.InvoiceLinesCosts.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	|					И СтрокаИнвойса.Инвойс <> ЗНАЧЕНИЕ(Документ.Инвойс.ПустаяСсылка)
	|					И СтрокаИнвойса.КодПоИнвойсу = &PartNo) КАК InvoiceLinesCostsОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.InvoiceLine
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	InvoiceLine
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvoiceLinesCostsОбороты.InvoiceLine КАК InvoiceLine,
	|	CustomsFilesOfGoods.CustomsFile КАК CCD,
	|	ЗакрытиеПоставкиСопоставление.Ссылка КАК ЗакрытиеПоставки,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД КАК ТоварСтрокиГТД
	|ПОМЕСТИТЬ ВТ_П
	|ИЗ
	|	InvoiceLinesCostsОбороты КАК InvoiceLinesCostsОбороты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка КАК ПоставкаДок
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
	|				ПО (ПоставкаДок.Ссылка = ЗакрытиеПоставкиСопоставление.Ссылка.Поставка
	|						И ПоставкаДок.Проведен)
	|			ПО CustomsFilesOfGoods.CustomsFile.Shipment = ПоставкаДок.Ссылка
	|		ПО InvoiceLinesCostsОбороты.InvoiceLine = CustomsFilesOfGoods.Item}
	|
	|СГРУППИРОВАТЬ ПО
	|	InvoiceLinesCostsОбороты.InvoiceLine,
	|	CustomsFilesOfGoods.CustomsFile,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД,
	|	ЗакрытиеПоставкиСопоставление.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П.InvoiceLine КАК InvoiceLine,
	|	ВТ_П.CCD КАК CCD,
	|	ВТ_П.ТоварСтрокиГТД КАК ТоварСтрокиГТД,
	|	ВТ_П.ТоварСтрокиГТД.Владелец.ТНВЭД КАК TNVED,
	|	ВТ_П.ТоварСтрокиГТД.Владелец.ТНВЭД.Rate КАК TNVEDRate
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_П КАК ВТ_П
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
	|		ПО ВТ_П.ЗакрытиеПоставки = ЗакрытиеПоставкиСопоставление.Ссылка
	|			И ВТ_П.InvoiceLine = ЗакрытиеПоставкиСопоставление.СтрокаИнвойса
	|			И ВТ_П.ТоварСтрокиГТД = ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_П.ТоварСтрокиГТД,
	|	ВТ_П.InvoiceLine,
	|	ВТ_П.CCD,
	|	ВТ_П.ТоварСтрокиГТД.Владелец.ТНВЭД,
	|	ВТ_П.ТоварСтрокиГТД.Владелец.ТНВЭД.Rate;";
	
	ЗапросТекстМинRATE =
	"ВЫБРАТЬ
	|	ВТ.TNVED КАК TNVED,
	|	ВЫБОР
	|		КОГДА НЕ ВТ.TNVEDRate ПОДОБНО """"
	|			ТОГДА ВТ.TNVEDRate
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК TNVEDRate
	|ИЗ
	|	ВТ КАК ВТ";
	
	ЗапросТекстLatestTNVED =
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.TNVED КАК TNVED,
	|	МАКСИМУМ(ВТ.CCD.Дата) КАК CCDDATE
	|ПОМЕСТИТЬ LatestTNVED
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	НЕ ВТ.TNVED = ЗНАЧЕНИЕ(Справочник.TNVEDCodes.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ВТ.TNVED
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	LatestTNVED.TNVED КАК LatestTNVED,
	|	LatestTNVED.TNVED.Rate КАК LatestTNVEDRate,
	|	LatestTNVED.CCDDATE КАК CCDDATE
	|ИЗ
	|	LatestTNVED КАК LatestTNVED
	|УПОРЯДОЧИТЬ ПО
	|	CCDDATE УБЫВ";
	
	Запрос.УстановитьПараметр("PartNo", СокрЛП(PartNo));
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("НачалоПериода", Дата(2015,1,1));
	
	Запрос.Текст = ЗапросТекстОсновной + ЗапросТекстМинRATE;
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультат = ПодготовитьДанныеGoodsTNVED(РезультатЗапроса);
	
	Запрос.Текст = ЗапросТекстОсновной + ЗапросТекстLatestTNVED; 
	РезультатЗапросаLatest = Запрос.Выполнить();
	
	КолВоРезультат = ТаблицаРезультат.Количество();
	
	Если КолВоРезультат > 0 Тогда
		
		
		ТаблицаРезультат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5)));
		ТаблицаРезультат.ЗаполнитьЗначения(1, "Количество");
		ТаблицаРезультат.Свернуть("TNVED,TNVEDRate","Количество");
		ТаблицаРезультат.Сортировать("TNVEDRate Возр, Количество Убыв");
		
		TNVED = ТаблицаРезультат[0].TNVED;
		СтруктураДанных = РегистрыСведений.rgsPriorityTNVEDOverMinTNVED.Получить(Новый Структура("Catalog", PartNoRef));
		
		Если ЗначениеЗаполнено(СтруктураДанных.TNVED) Тогда
			
			TNVED = СтруктураДанных.TNVED;
			Priority = Истина;
			
		КонецЕсли;
		
		СтруктураВозврата.Вставить("TNVED", TNVED);
		СтруктураВозврата.Вставить("Priority", Priority);
		
	КонецЕсли;
	
	Если НЕ РезультатЗапросаLatest.Пустой() Тогда
		
		Выборка = РезультатЗапросаLatest.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата.Вставить("LatestTNVED", Выборка.LatestTNVED);
		СтруктураВозврата.Вставить("LatestTNVEDRate", Выборка.LatestTNVEDRate);
		
	КонецЕсли;
		
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураВозврата;	
		
КонецФункции

Функция ПодготовитьДанныеGoodsTNVED(РезультатЗапроса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаGoodsTNVED = Новый ТаблицаЗначений;
	ТаблицаGoodsTNVED.Колонки.Добавить("PartNo", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаGoodsTNVED.Колонки.Добавить("TNVED", Новый ОписаниеТипов("СправочникСсылка.TNVEDCodes"));
	ТаблицаGoodsTNVED.Колонки.Добавить("TNVEDRate", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,1)));
	
	
		Пока Выборка.Следующий() Цикл
			
			// Преобразование Rate 
			
			TNVEDRateЧ = 0;
			TNVEDRateСтр = Выборка.TNVEDRate;
			
			Попытка
				
				TNVEDRateЧ = Число(TNVEDRateСтр);
				
			// Обрабатываем случаи когда не удалось преобразовать в число автоматически.
			Исключение
				
				TNVEDRateСтр = СокрЛП(TNVEDRateСтр);
				
				Если СтрНайти(TNVEDRateСтр, " ") <> 0 Тогда
					
					TNVEDRateМ = СтрРазделить(TNVEDRateСтр, " ");
					TNVEDRateСтр = TNVEDRateМ[0];
					
					ПервыйРазделитель = СтрНайти(TNVEDRateСтр, ",");
					
					Если ПервыйРазделитель > 0 Тогда
						
						TNVEDRateСтр = Лев(TNVEDRateСтр, ПервыйРазделитель - 1);
						
					КонецЕсли;
					
					// Повторное преобразование
					Попытка
						
						TNVEDRateЧ = Число(TNVEDRateСтр);
						
					Исключение
						Отказ = Истина;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецПопытки;
			
			Если НЕ Отказ Тогда
				
				Строка = ТаблицаGoodsTNVED.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка); 
				Строка.TNVEDRate = TNVEDRateЧ;
				
			КонецЕсли;	
				
		КонецЦикла;
	
	ТаблицаGoodsTNVED.Сортировать("PartNo,TNVEDRate"); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаGoodsTNVED; 
	
КонецФункции

Функция ПодготовитьДанныеPriorityTNVED(СписокКодов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|   rgsPriorityTNVEDOverMinTNVED.Catalog,
		|	rgsPriorityTNVEDOverMinTNVED.TNVED
		|ИЗ
		|	РегистрСведений.rgsPriorityTNVEDOverMinTNVED КАК rgsPriorityTNVEDOverMinTNVED
		|ГДЕ
		|	rgsPriorityTNVEDOverMinTNVED.Catalog.Код В(&СписокКодов)";
	
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

Функция ПреобразоватьЧислоВСтроку(TNVEDRateСтр) Экспорт
	
	// Преобразование Rate
	TNVEDRateЧ = NULL;
	СпецСимвол = ",";
	
	Попытка
		
		TNVEDRateЧ = Число(TNVEDRateСтр);
		
		// Обрабатываем случаи когда не удалось преобразовать в число автоматически.
	Исключение
		
		TNVEDRateСтр = СокрЛП(TNVEDRateСтр);
		
		Если СтрНайти(TNVEDRateСтр, " ") <> 0 Тогда
			
			TNVEDRateМ = СтрРазделить(TNVEDRateСтр, " ");
			TNVEDRateСтр = TNVEDRateМ[0];
			
			// Повторное преобразование
			Попытка
				TNVEDRateЧ = Число(TNVEDRateСтр);
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
		
	КонецПопытки;
	
	Если TNVEDRateЧ = NULL И СтрНачинаетсяС(TNVEDRateСтр, СпецСимвол) Тогда
		
		TNVEDRateСтр = Сред(TNVEDRateСтр,2);
	ИначеЕсли TNVEDRateЧ = NULL И СтрЗаканчиваетсяНа(TNVEDRateСтр, СпецСимвол)Тогда
		
		TNVEDRateСтр = Лев(TNVEDRateСтр,СтрДлина(TNVEDRateСтр)-1);
	КонецЕсли;
	
	Попытка
		TNVEDRateЧ = Число(TNVEDRateСтр);
	Исключение
		
	КонецПопытки;
	
	Возврат TNVEDRateЧ;
	
КонецФункции
// } RGS ASeryakov 31.01.2018 16:36:54 - S-I-0004008

/////////////////////////////////////////////////////////////////////////////////////////
// МАТЕМАТИКА

Функция МодульЧисла(Число) Экспорт
	
	Возврат ?(Число >= 0, Число, -Число);
	
КонецФункции

Функция ЦелМаксимальное(Сумма) Экспорт
	
	// возвращает "количество полных и неполных рублей"
	// Параметры:
	//	Сумма - число
	// Возвращаемое значение:
	//  число, равное ближайшему целому "сверху"
	
	Возврат ?(Цел(Сумма) = Сумма, Сумма, Цел(Сумма) + 1);
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОЛЛЕКЦИЯМИ

Процедура СокрЛПКолонокВТаблице(Таблица, СтрокаИменКолонок) Экспорт
	
	МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИменКолонок);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			УстановитьЗначение(СтрокаТаблицы[ИмяКолонки], СокрЛП(СтрокаТаблицы[ИмяКолонки]));			 
		КонецЦикла; 			 
	КонецЦикла; 
	
КонецПроцедуры 

Функция ВыгрузитьКолонкуКоллекции(Коллекция, ИмяКолонки) Экспорт
	
	МассивДанных = Новый Массив;
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		МассивДанных.Добавить(СтрокаКоллекции[ИмяКолонки]);	
	КонецЦикла;
	
	Возврат МассивДанных;
	   
КонецФункции

Функция ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Коллекция, ИмяКолонки) Экспорт
	
	МассивДанных = Новый Массив;
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		
		Если ЗначениеЗаполнено(СтрокаКоллекции[ИмяКолонки]) Тогда 
			МассивДанных.Добавить(СтрокаКоллекции[ИмяКолонки]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	   
КонецФункции

Функция ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Коллекция, ИмяКолонки) Экспорт
	
	МассивДанных = Новый Массив;
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		
		Если ЗначениеЗаполнено(СтрокаКоллекции[ИмяКолонки])
			И МассивДанных.Найти(СтрокаКоллекции[ИмяКолонки]) = Неопределено Тогда 
			МассивДанных.Добавить(СтрокаКоллекции[ИмяКолонки]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	   
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С МАССИВАМИ

Функция СложитьМассивы(ПервыйМассив, ВторойМассив) Экспорт
	
	НовыйМассив = Новый Массив;
	Для Каждого Элемент Из ПервыйМассив Цикл
		НовыйМассив.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из ВторойМассив Цикл
		Если НовыйМассив.Найти(Элемент) = Неопределено Тогда
			НовыйМассив.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

Функция ВычестьМассивы(ПервыйМассив, ВторойМассив) Экспорт
	
	НовыйМассив = Новый Массив;
	Для Каждого Элемент Из ПервыйМассив Цикл
		
		Если ВторойМассив.Найти(Элемент) = Неопределено Тогда
			НовыйМассив.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

Функция МассивыИдентичны(ПервыйМассив, ВторойМассив) Экспорт

	ЭлементовМассива = ПервыйМассив.Количество();
	МассивыСовпадают = (ЭлементовМассива = ВторойМассив.Количество()); 

	Если МассивыСовпадают Тогда

		Для Сч = 1 По ЭлементовМассива Цикл

			Если ПервыйМассив[Сч-1] <> ВторойМассив[Сч-1] Тогда
				Возврат Ложь
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат МассивыСовпадают

КонецФункции

Функция ПолучитьСтрокуИзМассиваПодстрокСокрЛП(Массив, Разделитель = ",") Экспорт
	
	// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
	//
	// Параметры:
	//  Массив - Массив - массив элементов из которых необходимо получить строку
	//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
	//
	// Возвращаемое значение:
	//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
	// 
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + СокрЛП(Подстрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СортироватьМассив(Массив, Знач Направление=Неопределено) Экспорт
	
	Если Направление = Неопределено Тогда
		Направление = НаправлениеСортировки.Возр;
	КонецЕсли; 
	
	СписокЗначений = Новый СписокЗначений;
	
	СписокЗначений.ЗагрузитьЗначения(Массив);
	СписокЗначений.СортироватьПоЗначению(Направление);
	
	Возврат СписокЗначений.ВыгрузитьЗначения();
	
КонецФункции 


/////////////////////////////////////////////////////////////////////////////////////////
// XML

#Если НЕ ВебКлиент Тогда 

Функция ПолучитьСтруктуруXML(ПолноеИмяФайла) Экспорт
		
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ПолноеИмяФайла);
	Исключение
		Сообщить("Failed to open .xml file!
		|" + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураXML = ПолучитьСтруктуруДанныхУзла(Чтение);
	
	Чтение.Закрыть();
	
	Возврат СтруктураXML;
		 		
КонецФункции

Функция ПолучитьСтруктуруДанныхУзла(Чтение)
	
	ВозвращаемоеЗначение = Новый Структура;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ВозвращаемоеЗначение = СокрЛП(Чтение.Значение);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			СтруктураПодчиненногоУзла = ПолучитьСтруктуруДанныхУзла(Чтение);
			МассивЗначений = Неопределено;
			Если НЕ ВозвращаемоеЗначение.Свойство(Чтение.ЛокальноеИмя, МассивЗначений) Тогда
				МассивЗначений = Новый Массив;	
				ВозвращаемоеЗначение.Вставить(Чтение.ЛокальноеИмя, МассивЗначений);
			КонецЕсли;
			МассивЗначений.Добавить(СтруктураПодчиненногоУзла);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Прервать;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецЕсли


/////////////////////////////////////////////////////////////////////////////////////////
// УДАЛИТЬ

// УДАЛИТЬ (ЕСТЬ ТАКАЯ ЖЕ ПРОЦЕДУРА В ОБЩЕГО НАЗНАЧЕНИЯ КЛИЕНТ СЕРВЕР
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено) Экспорт
	
	ЧислоИзмененных = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								                  ПравоеЗначение, Представление, Использование);
												  
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;										  
	КонецЕсли;
	
КонецПроцедуры
