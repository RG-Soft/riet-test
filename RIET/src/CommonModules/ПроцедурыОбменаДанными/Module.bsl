//  ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА С ИНФОРМАЦИОННЫМИ БАЗАМИ 

// УНИВЕРСАЛЬНЫЕ ФУНКЦИИ ЧТЕНИЯ ИЗМЕНЕНИЙ И ЗАГРУЗКИ ИЗМЕНЕНИЙ ДЛЯ ОБМЕНА МЕЖДУ ИНФОРМАЦИОННЫМИ БАЗАМИ ОДИНАКОВОЙ СТРУКТУРЫ

// Универсальная Процедура чтения изменений из сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
// Обязательное условие: У плана обмена должна существовать функция:
//
//  Функция ПрименитьИзменениеКИнформационнойБазе(Отправитель, Данные) Экспорт
//
// 	Эта функция будет вызываться лишь в том случае, если произошла коллизия изменений. то есть один и тот же объект изменился 
//	в двух узлах информационной базы.
// 
//	Параметры вспомогательной функции:
//
//  	Отправитель - ссылка на план обмена от кого пришло изменение
//      Данные - непосредственно сами данные, которые пришли от узла отправителя
//
//	Возвращаемые параметры вспомогательной функции
//		Результат - булево. Если истина, то изменения будут приняты от узла отправителя и вставлены в информационную базу. В
// 		в противном случае изменения будут отклонены
//
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел отправитель, от которого пришли изменения
//		ЧтениеXML - данные изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что чтение изменений прошло успешно
//
Функция ЗагрузитьИзмененияДляУзлаИзФайлаОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаЗагрузкуДанных = 0, ЧтениеXML) Экспорт
	
	ЭтотУзелОбмена = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелОбмена)].ЭтотУзел();
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ЧтениеСообщения.Отправитель <> УзелОбмена Тогда
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел в файле обмена данными";			
	КонецЕсли;
    
	// Удаляем регистрацию изменений для узла отправителя сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// считаем сколько объектов прочитали
	КоличествоПрочитанныхОбъектов = 0;
	КоличествоЗаписанныхОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию(); 
	
	ЭтотУзелОбменаОбъект = Неопределено;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
					
			// Читаем очередное значение
			Сообщить(ЧтениеXML.Имя);
			Данные = ПрочитатьXML(ЧтениеXML);
			
			//[РКХ->]   			
			Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" ИЛИ ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "SLI RU"
				ИЛИ ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "SLI-SMI RU"  Тогда
				//TaxRegistration у AU не подменяем
				SLI = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
				Если ТипЗнч(Данные) = Тип("СправочникОбъект.КостЦентры") И SLI <> ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда 				
					Если ЗначениеЗаполнено(Данные.Ссылка) Тогда
						Данные.TaxRegistration = Данные.Ссылка.TaxRegistration;	
					Иначе
						Данные.TaxRegistration = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					КонецЕсли;      				
				КонецЕсли;  
				Попытка
					Данные.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзSLI", Истина);
				Исключение
				КонецПопытки;
			КонецЕсли;
			//[<-РКХ]
			
			КоличествоПрочитанныхОбъектов = КоличествоПрочитанныхОбъектов + 1;
			
			Если КоличествоПрочитанныхОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Чтение изменений от узла """ + УзелОбмена.Наименование + """. Считано объектов: " + Строка(КоличествоПрочитанныхОбъектов));
				#КонецЕсли
			КонецЕсли;
					
			// по идее какие изменения принимать а какие откатывать должен определять сам план обмена
			Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
						
				//Возник конфликт
				//И сами данные были изменены и в присланном файле содержится изменение этих данных
				Если ЭтотУзелОбменаОбъект = Неопределено Тогда
					
					ЭтотУзелОбменаОбъект = ЭтотУзелОбмена.ПолучитьОбъект();
					
				КонецЕсли;
				
				ПрименятьИзменения = ЭтотУзелОбменаОбъект.ПрименитьИзменениеКИнформационнойБазе(ЧтениеСообщения.Отправитель, Данные); 
				Если Не ПрименятьИзменения Тогда
					Продолжить;
				КонецЕсли;
						
			КонецЕсли;
					
			// Записываем перенесенные данные
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			
			// { RGS Герасимов 12/10/2015 5:34:20 PM - KF-00000072
			Если РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.КонтрагентыLawson") 
				// { RGS MYurkevich 06.04.2016 9:56:06 - 
				И НЕ ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.AUsAndLegalEntities")
				И НЕ ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СегментыКостЦентров")
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.GeoMarkets")  
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.КостЦентры")  
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.LegalEntities") 
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.ПодразделенияОрганизаций")
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.Сегменты")
				 // { RGS AArsentev 02.02.2017 S-I-0002298
				И НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.ТипыНоменклатуры") Тогда
				 // } RGS AArsentev 02.02.2017 S-I-0002298
				// } RGS MYurkevich 06.04.2016 9:56:07 - Тогда
				Продолжить;	
			КонецЕсли;	
			// } RGS Герасимов 12/10/2015 5:34:38 PM - KF-00000072
			
			Данные.Записать();
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаЗагрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаЗагрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
									
		КонецЦикла;
		
		// фиксируем все изменения которые были записаны
		ЗафиксироватьТранзакцию();	
					
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЧтениеXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
		
КонецФункции // ПрочитатьИзмененияДляУзла


// Универсальная Процедура записи изменений для сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел получатель, для которого формируется пакет изменений
//		ЗаписьXML - объект для записи изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что запись изменений прошла успешно
//
Функция ВыгрузитьИзмененияДляУзлаВФайлОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML) Экспорт

	ЗаписьXML.ЗаписатьОбъявлениеXML();
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	// считаем количество записанных объектов
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоНайденныхДляЗаписиОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию();
	
	Попытка
	
		// Получаем выборку изменённых данных
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
		Пока ВыборкаИзменений.Следующий() Цикл
					
			Данные = ВыборкаИзменений.Получить();
			// Записываем данные в сообщение
			ЗаписатьXML(ЗаписьXML, Данные);
			
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			
			Если КоличествоНайденныхДляЗаписиОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """. Записано объектов: " + Строка(КоличествоНайденныхДляЗаписиОбъектов));
				#КонецЕсли
			КонецЕсли;
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаВыгрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
				
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЗаписьXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции // ЗаписатьИзмененияДляУзла


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

#Если Клиент Тогда
	
Процедура ЗарегистрироватьВсеОбъектыДляОбмена(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветПользователя = Вопрос("ВНИМАНИЕ!!!
	|Регистрация объектов для обмена - операция необратимая. После регистрации изменений первый обмен данными может занять продолжительное время.
	|Вы уверены что нужно выполнить регистрацию всех объектов для обмена?",
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.НЕТ, "Регистрация объектов для обмена");							
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				
		Возврат;
			
	КонецЕсли;
	
	Состояние("Выполняется регистрация всех объектов для обмена с информационной базой """  + УзелОбмена + """");
	
	// для всех объектов кроме документов регистрируем все, для документов с учетом ограничений по дате
	Попытка
		ДатаОграниченийДляДокументов = УзелОбмена.ДатаНачалаВыгрузкиДокументов;
	Исключение
		ДатаОграниченийДляДокументов = Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ДатаОграниченийДляДокументов) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
	Иначе
		
		// есть органичения для регистрации документов по дате
		Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл
			
			МетаданныеОбмена = ЭлементСоставаПланаОбмена.Метаданные;	
			
			Если Метаданные.Документы.Содержит(МетаданныеОбмена) Тогда
				
				// зарегистрируем изменения только для документов с ограничением по дате
				Запрос = Новый Запрос();			
			
				ОграничениеВыборки = "ГДЕ РегистрацияИзменений.Дата >= &ДатаОграничений";
						
				Запрос.УстановитьПараметр("ДатаОграничений", ДатаОграниченийДляДокументов);
				
				Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					   |ИЗ
					   |	Документ." + МетаданныеОбмена.Имя + " КАК РегистрацияИзменений
					   |" + ОграничениеВыборки;
					   
				Выборка = Запрос.Выполнить().Выбрать();
					   
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.ссылка);
										
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МетаданныеОбмена);
					   
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Состояние("");
		
КонецПроцедуры
	
Процедура ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(ТаблицаСпискаНастроек) Экспорт
	
	ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьПриемСообщений");
	ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьОтправкуСообщений");
	ТаблицаСпискаНастроек.Колонки.Добавить("OnLineОбмен");
    ТаблицаСпискаНастроек.Колонки.Добавить("ИспользоватьРегламентныеЗадания");
	ТаблицаСпискаНастроек.Колонки.Добавить("УзелИнформационнойБазы");
		
КонецПроцедуры	
	
Процедура ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсторияОбменов.ДатаПоследнейЗагрузки,
		               |	ИсторияОбменов.ДатаПоследнейВыгрузки,
		               |	ИсторияОбменов.РезультатПоследнейЗагрузки,
		               |	ИсторияОбменов.РезультатПоследнейВыгрузки,
		               |	ИсторияОбменов.РезультатОтложенныхДвиженийДокументов,
		               |	ИсторияОбменов.НаличиеДанныхФоновойЗагрузки
		               |ИЗ
		               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов
		               |";
					   
		Запрос.УстановитьПараметр("Ссылка", Оформление.ДанныеСтроки.УзелИнформационнойБазы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
            ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
			ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки; 
			
			РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
			РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
			
			РезультатОтложенныхДвиженийДокументов = Выборка.РезультатОтложенныхДвиженийДокументов;
			НаличиеДанныхФоновойЗагрузки = Выборка.НаличиеДанныхФоновойЗагрузки;
					
		Иначе
			ДатаПоследнейЗагрузки = Неопределено;
			ДатаПоследнейВыгрузки = Неопределено;
			
			РезультатПоследнейЗагрузки = Ложь;
			РезультатПоследнейВыгрузки = Ложь;
			
			РезультатОтложенныхДвиженийДокументов = Ложь;
			НаличиеДанныхФоновойЗагрузки = Ложь;
		КонецЕсли;
		
		ПроизводитьЗагрузку = Оформление.ДанныеСтроки.ПроизводитьПриемСообщений;
		ПроизводитьВыгрузку = Оформление.ДанныеСтроки.ПроизводитьОтправкуСообщений;
		
		ЭтоOnLineОбмен = Оформление.ДанныеСтроки.OnLineОбмен;

		// отображаем дату последней загрузки по следующему принципу
		// если стоит признак загрузки, но нет информации о последней загрузке - пишем - не производился
		// если есть информация, то ее выводим
		// если не стоит признак производить загрузку - то пишем не загружать и все
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
		Если ПроизводитьЗагрузку Тогда
			
			Если ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда 
					
				Оформление.Ячейки.ЗагрузкаДанных.Значение = ДатаПоследнейЗагрузки;
					
				ОтображатьКартинку = Истина;
				Если РезультатПоследнейЗагрузки = Истина Тогда
					Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
				Иначе	
					Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
				КонецЕсли;
				
				Если ЭтоOnLineОбмен Тогда
				
					Если РезультатОтложенныхДвиженийДокументов = Истина Тогда
						Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
						Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Успешно");
					Иначе	
						Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Остановить);
						Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("С ошибками");
					КонецЕсли;
					
					Если НаличиеДанныхФоновойЗагрузки = Истина Тогда
						Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.ВыполнитьЗадачу);
						Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Фоновый обмен");
					Иначе	
						Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
						Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Завершена");
					КонецЕсли;
					
				Иначе
					
					Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Не выполнять");
					Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Не выполнять");	
					
				КонецЕсли;
					
			Иначе
				ОтображатьФлаг = Истина;
				// флаг показываем, но данные нет
				Оформление.Ячейки.ЗагрузкаДанных.ЗначениеФлажка = ПроизводитьЗагрузку;	
				Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не производилась";
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Не выполнять");
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Не выполнять");
				
			КонецЕсли;
			
		Иначе
			// не производить загрузку
			Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не загружать";
			Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Не выполнять");
			Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Не выполнять");
		КонецЕсли;
			
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.ОтображатьКартинку = ОтображатьКартинку И ЭтоOnLineОбмен;		
		Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.ОтображатьКартинку = ОтображатьКартинку И ЭтоOnLineОбмен;
			
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
			
		Если ПроизводитьВыгрузку Тогда

			   Если ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда 
					
				Оформление.Ячейки.ВыгрузкаДанных.Значение = ДатаПоследнейВыгрузки;
				ОтображатьКартинку = Истина;
				Если РезультатПоследнейВыгрузки = Истина Тогда
					Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.увУтвердить);
				Иначе	
					Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
				КонецЕсли;	
					
			Иначе	
					
				ОтображатьФлаг = Истина;
				// флаг показываем, но данные нет
				Оформление.Ячейки.ВыгрузкаДанных.ЗначениеФлажка = ПроизводитьВыгрузку;	
				Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не производилась";
					
			КонецЕсли;
				
		Иначе
			Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не выгружать";	
		КонецЕсли;
				
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;	
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ДействияСправочникСписокПриПолученииДанныхОбменСWEB(Элемент, ОформленияСтрок) Экспорт
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсторияОбменов.ДатаПоследнейЗагрузки,
		               |	ИсторияОбменов.ДатаПоследнейВыгрузки,
		               |	ИсторияОбменов.РезультатПоследнейЗагрузки,
		               |	ИсторияОбменов.РезультатПоследнейВыгрузки
		               |ИЗ
		               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов
		               |";
					   
		Запрос.УстановитьПараметр("Ссылка", Оформление.ДанныеСтроки.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
            ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
			ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки; 
			
			РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
			РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;			
					
		Иначе
			ДатаПоследнейЗагрузки = Неопределено;
			ДатаПоследнейВыгрузки = Неопределено;
			
			РезультатПоследнейЗагрузки = Ложь;
			РезультатПоследнейВыгрузки = Ложь;
			
		КонецЕсли;
		
		// отображаем дату последней загрузки по следующему принципу
		// если стоит признак загрузки, но нет информации о последней загрузке - пишем - не производился
		// если есть информация, то ее выводим
		// если не стоит признак производить загрузку - то пишем не загружать и все
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
		Если ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда 
				
			Оформление.Ячейки.ЗагрузкаДанных.Значение = ДатаПоследнейЗагрузки;
				
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейЗагрузки = Истина Тогда
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;		
							
		Иначе
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ЗагрузкаДанных.ЗначениеФлажка = Истина;	
			Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не производилась";
						
		КонецЕсли;			
					
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
					
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
			
		Если ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда 
				
			Оформление.Ячейки.ВыгрузкаДанных.Значение = ДатаПоследнейВыгрузки;
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейВыгрузки = Истина Тогда
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;	
				
		Иначе	
				
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ВыгрузкаДанных.ЗначениеФлажка = Истина;	
			Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не производилась";
				
		КонецЕсли;		
				
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;	
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		
	КонецЦикла
	
КонецПроцедуры

// при выводе строки настройки обмена данными
Процедура ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если НЕ ДанныеСтроки.ПометкаУдаления 
		И ДанныеСтроки.ИспользоватьРегламентныеЗадания Тогда	
		
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьМониторОбменовДляНастройки(СсылкаНаНастройку, ФормаВладелец = Неопределено) Экспорт
		
	ФормаМонитора = ПолучитьОбщуюФорму("МониторНастроекОбменаДанными", ФормаВладелец);
	ФормаМонитора.НастройкаОбмена = СсылкаНаНастройку;
	ФормаМонитора.Открыть();
		
КонецПроцедуры	

Функция ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаДляОбмена) Экспорт
		
	Если Не ЗначениеЗаполнено(НастройкаДляОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаДляОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		Возврат НастройкаДляОбмена.УзелИнформационнойБазы;
	Иначе
		Возврат НастройкаДляОбмена;
	КонецЕсли;
	
КонецФункции

Процедура РасшифовкаНеудачПосле(СсылкаДляОграничения, ТипОтображения, ДатаНачала, ЭтаФорма) Экспорт
	
	ФормаРегистраИстории = РегистрыСведений.ИсторияОбменаДанными.ПолучитьФормуСписка(, ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	ФормаРегистраИстории.отбор.Сбросить();
	
	Если ТипОтображения = "Загрузка" Тогда
		
		ФормаРегистраИстории.отбор.РезультатПоследнейЗагрузки.Установить(Ложь);
		
	ИначеЕсли ТипОтображения = "Выгрузка" Тогда
		
		ФормаРегистраИстории.отбор.РезультатПоследнейВыгрузки.Установить(Ложь);
		
	Иначе
		
		ФормаРегистраИстории.отбор.РезультатОтложенныхДвиженийДокументов.Установить(Ложь);
		
	КонецЕсли;
	
	ФормаРегистраИстории.отбор.Период.Значение = ДатаНачала;
		
	ФормаРегистраИстории.отбор.Период.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ФормаРегистраИстории.отбор.Период.Использование = Истина;
	
	ФормаРегистраИстории.отбор.УзелИнформационнойБазы.Установить(СсылкаДляОграничения);
					
	ФормаРегистраИстории.Открыть();	
	
КонецПроцедуры

Функция ПолучитьДанныеПоследнейУдачнойОперации(СсылкаДляОграничения, ИмяКолонкиДляВозврата, ОграничениеДляЗапроса, 
	ОграничениеНегативноеДляЗапроса, КоличествоНеудачныхПопытокПосле) Экспорт
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних." + ИмяКолонкиДляВозврата + ") КАК ДатаПоследнейУдачнойОперации,
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &СсылкаДляОграничения И " + ОграничениеДляЗапроса + ") КАК ИсторияОбменаДаннымиСрезПоследних";
				   
	Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
				   
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		ДатаПоследнейУдачнойОперации = Дата('00010101');
		ПериодПоследнейУдачнойОперации = Дата('00010101');
		
	Иначе
		
		ДатаПоследнейУдачнойОперации = ?(ТаблицаДанных[0].ДатаПоследнейУдачнойОперации = NULL, Дата('00010101'), ТаблицаДанных[0].ДатаПоследнейУдачнойОперации);
		ПериодПоследнейУдачнойОперации = ?(ТаблицаДанных[0].Период = NULL, Дата('00010101'), ТаблицаДанных[0].Период);
		
	КонецЕсли;
	
	// количество неудач после
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество	
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменаДанными
				   |ГДЕ
				   |	УзелИнформационнойБазы = &СсылкаДляОграничения 
				   |	И Период >= &НачалоПериода
				   |	И " + ОграничениеНегативноеДляЗапроса;
				   
	Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
	Запрос.УстановитьПараметр("НачалоПериода", ПериодПоследнейУдачнойОперации);
				   
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		КоличествоНеудачныхПопытокПосле = 0;
		
	Иначе
		
		КоличествоНеудачныхПопытокПосле = ?(ТаблицаДанных[0].Количество = NULL, 0, ТаблицаДанных[0].Количество);
				
	КонецЕсли;
	
	Возврат ДатаПоследнейУдачнойОперации;
	
КонецФункции
	
// при нажатии на "Открытие" у каталога 
Процедура ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаПравилДляВыбораПравилОбмена() Экспорт
	
	Диалог = ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Заголовок = "Выбор файла правил обмена";
	Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаПравилДляСохраненияПравилОбмена() Экспорт
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок = "Выбор файла для сохранения";
	Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаПротоколаОбмена() Экспорт
	
	Диалог = ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.Заголовок = "Выбор файла протокола обмена";
	Диалог.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПолноеИмяФайла = "ПротоколОбмена.txt";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьТекстЗаголовкаИРассписанияРегламентнойНастройки(Задание, ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно) Экспорт
	
	РассписаниеАктивно = Ложь;
	
	ТекстЗаголовка = "Дополнительные настройки расписания ...";
	
	Если Задание = Неопределено Тогда
		
		//ТекстЗаголовка = "Создать регламентную настройку ...";	
		ТекстРасписания = "<Расписание не задано>";
		
	Иначе
		
		//ТекстЗаголовка = "Дополнительные настройки расписания ...";
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РассписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецЕсли

Функция ОпределитьНовоеИмяКаталогаДляОбменаДанными() Экспорт
	
	ВременныйКаталог = КаталогВременныхФайлов();
	
	НомерКаталога = 1;
	Пока НомерКаталога <= 1000 Цикл
		
		ОчередноеИмяКаталога = ВременныйКаталог + "Каталог обмена " + СтрЗаменить(Строка(НомерКаталога), Символы.НПП, "");
		
		ВыбФайл = Новый Файл(ОчередноеИмяКаталога);
		Если НЕ ВыбФайл.Существует() Тогда
			Возврат ОчередноеИмяКаталога;
		КонецЕсли;
				
		НомерКаталога = НомерКаталога + 1;	
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Процедура ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(НастройкаОбмена) Экспорт
	
	НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
	НастройкаОбмена.КаталогОбменаИнформацией = ОпределитьНовоеИмяКаталогаДляОбменаДанными();
			
	НастройкаОбмена.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	НастройкаОбмена.ПроизводитьПриемСообщений = Истина;
	НастройкаОбмена.ПроизводитьОтправкуСообщений = Истина;
	
	НастройкаОбмена.ВыполнятьАрхивациюФайловОбмена = Истина;
	
	НастройкаОбмена.ПортFTPСоединения = 21;
	
	НастройкаОбмена.ВестиЛог = Истина;
	
	Попытка
		
		НастройкаОбмена.ДинамическиИзменятьИнтервалМеждуОбменами = Истина;
		НастройкаОбмена.ВопросПриАвтообмене = Ложь; // по умолчанию вопросы пользователю не задаем
		НастройкаОбмена.ВыводитьСообщенияОбОшибкахПриАвтоматическомОбменеДанными = Истина;
		НастройкаОбмена.ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными = Ложь;
		
	Исключение
	КонецПопытки;
	
	НастройкаОбмена.ТипИнформационнойБазыДляПодключения = Истина;
	НастройкаОбмена.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	НастройкаОбмена.ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";
	
	НастройкаОбмена.КоличествоОбъектовДляФоновогоОбмена = 500;
	
	НастройкаОбмена.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Истина;
	НастройкаОбмена.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 5;
	
КонецПроцедуры



// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции


// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

Функция ПолучитьИмяПротоколаЗагрузки(ИмяФайлаПротоколаОбмена) Экспорт
	
	РасширениеФайлаПротокола = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ИмяФайлаПротоколаОбмена);
		
	Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
						
		ИмяФайлаПротоколаЗагрузки = СтрЗаменить(ИмяФайлаПротоколаОбмена, "." + РасширениеФайлаПротокола, "");
		
	Иначе
		
		ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаОбмена;
		
	КонецЕсли;
	
	ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаЗагрузки + "_Загрузка";
	
	Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
		
		ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаЗагрузки + "." + РасширениеФайлаПротокола;	
		
	КонецЕсли;
	
	Возврат ИмяФайлаПротоколаЗагрузки;

КонецФункции

//ФОРМА ХОДА ОБРАБОТКИ

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	#Если Клиент Тогда
		
		СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
		СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0)
	
	#Если Клиент Тогда
		
		ФормаХодаВыполненияОбмена = Неопределено;
		СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
		
		Если ФормаХодаВыполненияОбмена = Неопределено Тогда
			
			ФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			СтруктураОбменаДанными.Вставить("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
			
		Иначе	
			ФормаХодаВыполненияОбмена = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена; 	
		КонецЕсли;
		
		ФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Обмен данными по настройке: " + СтруктураОбменаДанными.ДанныеНастройки.Наименование;
		ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
		ФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
		ФормаХодаВыполненияОбмена.МаксимальноеЗначение = 100;
		
		Если Не ФормаХодаВыполненияОбмена.Открыта() Тогда
			ФормаХодаВыполненияОбмена.Открыть();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных(СтруктураОбменаДанными)
	
	#Если Клиент Тогда
		
		ФормаХодаВыполненияОбмена = Неопределено;
		СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
		Если ФормаХодаВыполненияОбмена <> Неопределено Тогда
			
			Если ФормаХодаВыполненияОбмена.Открыта() Тогда
				ФормаХодаВыполненияОбмена.Закрыть();
			КонецЕсли;
			
			СтруктураОбменаДанными.ФормаХодаВыполненияОбмена = Неопределено; 	
			
		КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры


// функция возвращает используется ли механизм автоматического обмена данными или нет
Функция ИспользоватьМеханизмАвтоматическогоОбмена() Экспорт
	
	// можно ли константу опросить
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьМеханизмАвтоматическогоОбменаДанными) Тогда
		// нет доступа к константе
		Возврат Ложь;
	КонецЕсли;	
		
	// нужно ли автообмен данными проводить
	ИспользоватьАвтообмен = Константы.ИспользоватьМеханизмАвтоматическогоОбменаДанными.Получить();
	
	Возврат ИспользоватьАвтообмен = Истина;
	
КонецФункции

// функция по текущей дате возвращает имя дня недели
Функция ПолучитьИмяДняНедели(Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		НомерДняДенели = ДеньНедели(ТекущаяДата());
	Иначе
		НомерДняДенели = ДеньНедели(Дата);
    КонецЕсли;
	
	Если НомерДняДенели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняДенели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняДенели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняДенели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняДенели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняДенели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";	
	КонецЕсли;
	
КонецФункции

// функция нормализует ftp адрес (отрезает не нужное)
Функция НормализоватьFTPАдрес(Знач FTPАдрес) Экспорт
	
	ИтоговыйАдрес = СокрЛП(FTPАдрес);
	ПозицияFTP = СтрНайти(Врег(ИтоговыйАдрес), "FTP://");
	
	Если ПозицияFTP = 1 Тогда
		
		ИтоговыйАдрес = Сред(ИтоговыйАдрес, 7);	
		
	КонецЕсли;
	
	Возврат ИтоговыйАдрес;
	
КонецФункции

// Процедура выполняет удаление файла
Функция ВыполнитьУдалениеФайла(Знач ИмяФайлаУдаления, СтруктураНастроекОбменаДанными, 
	Знач ВыводитьИнформациюВПротокол = Ложь, ЭтоВыгрузка = Истина)
	
	Если ПустаяСтрока(ИмяФайлаУдаления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Удаление файла: " + ИмяФайлаУдаления, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		УдалитьФайлы(ИмяФайлаУдаления);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при попытке удаления файла: " + ИмяФайлаУдаления + " " + ОписаниеОшибки(), 
				СтруктураНастроекОбменаДанными, Истина, ЭтоВыгрузка);
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет копирование файла
Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника, 
	Знач ВыводитьИнформациюВПротокол = Ложь, СтруктураНастроекОбменаДанными, ЭтоВыгрузка = Истина)
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Копирование файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника + 
				Символы.ПС + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, ЭтоВыгрузка);
				
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура меняет расширение имени файла обмена и выполняет проверку наличия каталога для работы
Процедура ПроверитьДоступностьРаботыСКаталогом(ИмяФайлаЧтенияИзменений, Знач НужноМенятьРасширениеНаZIP = Ложь)
	
	Если НужноМенятьРасширениеНаZIP Тогда
		УстановитьРасширениеФайла(ИмяФайлаЧтенияИзменений, ".zip");
	КонецЕсли;

	//надо убедиться в том что каталог куда все будем сохранять существует
	СоздатьКаталогПоПолномуПутиКФайлу(ИмяФайлаЧтенияИзменений);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// АВТОМАТИЧЕСКОЕ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ

// функция возвращает настройки для формирования файла обновления конфигурации
Функция ПолучитьНастройкиДляФайлаОбновленияКонфигурации() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сами настройки
	НастройкиДляОбновленияКонфигурации = Константы.НастройкаФайлаОбновленияКонфигурации.Получить();
	
	Если НастройкиДляОбновленияКонфигурации <> Неопределено Тогда
		
		Возврат НастройкиДляОбновленияКонфигурации.Получить();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция устанавливает настройки для файла обновления конфигурации
Функция УстановитьНастройкиДляФайлаОбновленияКонфигурации(СтруктураНастроек) Экспорт
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нет прав на изменение константы ""Настройка файла обновления конфигурации""");
			
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ЗначениеХранилища = Новый ХранилищеЗначения(СтруктураНастроек);
		Константы.НастройкаФайлаОбновленияКонфигурации.Установить(ЗначениеХранилища);
		
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при установке константы ""Настройка файла обновления конфигурации"": " + ОписаниеОшибки());
	    Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// функция создает параметры настроек обновления конфигурации по умолчанию
Функция СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ПараметрыНастроек = Новый Структура();
	
	ПараметрыНастроек.Вставить("ФормироватьФайлОбновленияКонфигурацииАвтоматически", Истина);
	ПараметрыНастроек.Вставить("АвтоматическиОбновлятьКонфигурациюПриПриемеСообщенияОтГлавногоУзлаРИБ", Ложь);
	ПараметрыНастроек.Вставить("ИмяАдминистратораИнформационнойБазы", "");
	ПараметрыНастроек.Вставить("ИмяФайлаДляЗаписиОшибок", "");	
	
	Возврат ПараметрыНастроек;
	
КонецФункции

// Процедура определяет параметры БАТ файла для обновления конфигурации
Процедура СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД)
	
	// создается BAT файл по установленному макету и запускается
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
			
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
	    // надо к имени сервера прибавить имя пути БД  !!!
		ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = """" + ИмяСервера + "\" + ИмяИБНаСервере + """";
		ФайловаяБД = Ложь;
		
	КонецЕсли;
	
	ИмяПрограммыЗапуска = ПолучитьИмяФайла(КаталогПрограммы(), "1cv8.exe");
    	
	ИмяПользователяБД = ИмяПользователя();
	
КонецПроцедуры

// Функция формирует логин пользователя для подключения к ИБ
Функция СформироватьЛогинПодключенияКИБ(Знач ИмяПользователяБД)
	
	Если Не ПустаяСтрока(ИмяПользователяБД) Тогда
		
		ТребуетсяАвторизацияОС = НаличиеУПользователяWindowsАвторизации(ИмяПользователяБД);
		
		КлючАвторизации = ?(ТребуетсяАвторизацияОС, "/WA+", "/WA-"); 
		
		ПользовательБД = "/N""" + ИмяПользователяБД + """ " + КлючАвторизации;
	Иначе
		ПользовательБД = "";
	КонецЕсли;
	
	Возврат ПользовательБД;
	
КонецФункции

// Функция формирует часть бат файла (объявления) для обновления конфигурации
Функция СформироватьЧастьОбъявленийПодключенияТекущегоПользователя()
	
	Перем ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД;
	
	СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД);
	
	ТекстФайлаПоУмолчанию = Символы.ПС;
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set v8exe=""" + ИмяПрограммыЗапуска + """" + Символы.ПС;
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBaseName=" + ПутьКБД + Символы.ПС;
	
	Если ФайловаяБД Тогда	
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/F%DataBaseName%" + Символы.ПС;
	Иначе
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/S%DataBaseName%" + Символы.ПС;
	КонецЕсли;
	
	ПользовательБД = СформироватьЛогинПодключенияКИБ(ИмяПользователяБД);
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set User=" + ПользовательБД + Символы.ПС;

	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует часть бат файла (вызов обновления конфигурации)
Функция СформироватьЧастьВызоваОбновленияКонфигурации(Знач ИмяАдминистратораИБ = "", Знач ИмяФайлаИнформацииОбОшибках = "", 
	Знач ИспользоватьФайлОбОшибкахСПустымИменем = Ложь)
	
	ИмяЛогинаАдминистратора = ?(ПустаяСтрока(ИмяАдминистратораИБ), "", СформироватьЛогинПодключенияКИБ(ИмяАдминистратораИБ));
	
	СтрокаОбъявленияФайлаСообщенийОбОшибках = "";
	СтрокаДляВыводаДанныхВФайл = "";
		
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацииОбОшибках) ИЛИ ИспользоватьФайлОбОшибкахСПустымИменем Тогда
		
		// надо проверить наличие файла для обмена, есл его нет то создать его
		СтрокаИмениФайлаИнформацииОбОшибках = СокрЛП(ИмяФайлаИнформацииОбОшибках);
							
		СтрокаОбъявленияФайлаСообщенийОбОшибках = "
			|REM Путь к файлу для ошибок и сообщений
			|set FileInformation=""" + СтрокаИмениФайлаИнформацииОбОшибках + """
			|
			|date /t >> %FileInformation%
			|time /t >> %FileInformation%
			|set DataBaseName>>%FileInformation%";
				
		СтрокаДляВыводаДанныхВФайл = "/Out%FileInformation% -NoTruncate";
					
	КонецЕсли;	
	
	 // основной текст
	ТекстФайлаПоУмолчанию = "
		|REM Логин администратора системы
		|set AdminUser=" + ИмяЛогинаАдминистратора + "
        |
		|" + СтрокаОбъявленияФайлаСообщенийОбОшибках + " 
		|
		|rem Завершение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CЗавершитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|start """" /wait %v8exe% CONFIG     %DataBase% %AdminUser% /UpdateDBCfg /UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + "
        |
		|rem Разрешение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CРазрешитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|rem Запуск самой программы
		|start """" %v8exe% ENTERPRISE %DataBase% %User%  /DisableStartupMessages";
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// Функция формирует текст файла обновления конфигурации по умолчанию
Функция ПолучитьТекстНастроекФайлаОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ТекстФайлаПоУмолчанию = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя();
		                       
    // основной текст
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + СформироватьЧастьВызоваОбновленияКонфигурации(,,Истина);
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует текст бат файла обновления конфигурации по структуре данных
Функция СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров) Экспорт
	
	ТекстФайла = "";
	
	// автоматически или нет формируется файл с настройками
	ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина;
	СтруктураПараметров.Свойство("ФормироватьФайлОбновленияКонфигурацииАвтоматически", ФормироватьФайлОбновленияКонфигурацииАвтоматически);
	
	Если ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина Тогда
		
		// имя администратора информационной базы
		ИмяАдминистратораИнформационнойБазы = "";
		Если Не СтруктураПараметров.Свойство("ИмяАдминистратораИнформационнойБазы", ИмяАдминистратораИнформационнойБазы) Тогда
			
			ИмяАдминистратораИнформационнойБазы = "";
			
		КонецЕсли;
		
		// файл для фиксирования ошибок
		ИмяФайлаДляЗаписиОшибок = "";
		Если Не СтруктураПараметров.Свойство("ИмяФайлаДляЗаписиОшибок", ИмяФайлаДляЗаписиОшибок) Тогда
			
			ИмяФайлаДляЗаписиОшибок = "";
			
		КонецЕсли;

		ТекстФайла = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя();
		
		ТекстФайла = ТекстФайла + СформироватьЧастьВызоваОбновленияКонфигурации(ИмяАдминистратораИнформационнойБазы, ИмяФайлаДляЗаписиОшибок);
		
	Иначе
		// ручное редактирование
		НаличиеСвойства = СтруктураПараметров.Свойство("ТекстФайлаОбновленияКонфигурации", ТекстФайла);
		
		Если Не НаличиеСвойства Тогда
			ТекстФайла = "";
		КонецЕсли;
								
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

// формирование текста бат файла обновления конфигурации по настройкам
Функция ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации()
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		СообщитьИнформациюОПростойОшибке("Нет прав доступа к константе ""Настройка файла обновления конфигурации""");
		Возврат "";
	КонецЕсли;

	СтруктураНастроек = ПолучитьНастройкиДляФайлаОбновленияКонфигурации();
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию();
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СформироватьТекстБатФайлаПоНастройкам() Экспорт
	
	СтруктураНастроек = ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации();
	ТекстФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураНастроек);
	
	Возврат ТекстФайла;
	
КонецФункции

Процедура ВыполнитьОбновлениеКонфигурацииДляИнформационнойБазы(НастройкаОбменаДанными, СтруктураПараметров = Неопределено) Экспорт
	
	// надо для выбранной настройки поставить признак запуска обмена при загрузке данных
	УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбменаДанными, Истина);
	
	#Если Клиент Тогда
	ПредложитьПерезагрузкуПрограммы(СтруктураПараметров, Истина);
	#КонецЕсли
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура формирование BAT-Файла для автоматической перезагрузки программы
//
Процедура ПредложитьПерезагрузкуПрограммы(СтруктураПараметров = Неопределено, 
	Знач ЗапускатьФайлОбновленияКонфигурации = Ложь) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		// создается BAT файл по установленному макету и запускается
		ТекстБатФайла = СформироватьТекстБатФайлаПоНастройкам();
	Иначе
		ТекстБатФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров);				
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстБатФайла) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нельзя создать пустой файл автоматического обновления конфигурации");
		Возврат;
	КонецЕсли;
	
	ТекстовайДокумент = Новый ТекстовыйДокумент();
	ТекстовайДокумент.УстановитьТекст(ТекстБатФайла);
	
	ИмяБАТФайла = ПолучитьИмяФайла(КаталогВременныхФайлов(), "Upd1C.bat");

	ТекстовайДокумент.Записать(ИмяБАТФайла, КодировкаТекста.OEM);
			
	Если ЗапускатьФайлОбновленияКонфигурации Тогда
		
		Сообщить("Файл для автоматического изменения конфигурации запущен на исполнение: " + ИмяБАТФайла);
		// запускаем БАТ файл перезагрузки
		ЗапуститьПриложение(ИмяБАТФайла);
		
	Иначе
		
		Сообщить("Файл для автоматического изменения конфигурации: " + ИмяБАТФайла);
		// открываем каталог с файлом перезагрузки
		ЗапуститьПриложение(КаталогВременныхФайлов());
		
	КонецЕсли;
	  
КонецПроцедуры // ПредложитьПерезагрузкуПрограммы

// Процедура показывает форму списка справочника "Настройки обменов" для узла обмена
Процедура ПоказатьЗарегистрированныеИзмененияДляУзла(УзелОбмена, Владелец = Неопределено, УникальныйКлючФормы = Неопределено) Экспорт
	
	Обработка = Обработки.РегистрацияИзмененийДляОбмена.Создать();
	ФормаОбработки = Обработка.ПолучитьФорму("Форма", Владелец, УникальныйКлючФормы);
	ФормаОбработки.УзелОбмена = УзелОбмена;
	ФормаОбработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

#КонецЕсли


///////////////////////////////////////////////////////////////////////////////
//	ПРОТОКОЛ

// Процедура дописывает информацию в файл лога
Процедура ДобавитьИнформациюВПротокол(Знач ИнформацияДляПользователя, ДанныеПротокола = "", 
			Знач ОтобразитьВОкнеСообщений = Ложь, Знач ЭтоОшибка = Ложь) Экспорт
	
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		
		Попытка
			
			ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
				ИмяПользователя = "";
			Иначе
				ИмяПользователя = "[" + Строка(ТекущийПользователь) + "] "; 	
			КонецЕсли;
			
		Исключение
			
			ИмяПользователя = "[Сервер]";
			
		КонецПопытки;
			
		СтрокаДляЗаписи = "[" + Строка(ТекущаяДата()) + "] " + ИмяПользователя + ИнформацияДляПользователя;
	Иначе
		// записываем строку как есть
		СтрокаДляЗаписи = ИнформацияДляПользователя;
	КонецЕсли;
		
	Если ДанныеПротокола = "" Тогда
		ДанныеПротокола = СтрокаДляЗаписи;
	Иначе
		ДанныеПротокола = ДанныеПротокола + Символы.ПС + СтрокаДляЗаписи;	
	КонецЕсли;	

	// возможно информацию еще надо в окно сообщений пользователю вывести
	#Если Клиент Тогда
		
		Если ОтобразитьВОкнеСообщений Тогда
			
			Если ЭтоОшибка Тогда
				СообщитьОбОшибке(ИнформацияДляПользователя);
			Иначе
				
				Если ИнформацияДляПользователя <> Символы.ПС Тогда 
					ИнформацияДляПользователя = СформироватьТекстСообщения(ИнформацияДляПользователя);
				КонецЕсли;	
				
				Сообщить(ИнформацияДляПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьПростуюИнформацию(Знач ИнформацияДляПользователя, ДанныеПротокола, Знач ВывестиИнформациюВОкноСообщений = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ВывестиИнформациюВОкноСообщений, Ложь);
	
КонецПроцедуры

// Процедура отображает сообщение об ошибке пользователю и записывает его в лог
Процедура СообщитьИнформациюОПростойОшибке(Знач ИнформацияДляПользователя, ДанныеПротокола = "", Знач ОтображатьСообщениеОбОшибке = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ОтображатьСообщениеОбОшибке, Истина);
	
КонецПроцедуры



// функция отражает сообщение об ошибке при обмене данными
Процедура СообщитьИнформациюОбОшибкеОбмена(Знач ИнформацияДляПользователя, СтруктураОбменаДанными, 
	ЗаписатьИнформациюОбОшибкеВИсторию = Ложь, ЭтоВыгрузкаДанных = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, 
		СтруктураОбменаДанными.ВывестиИнформациюОбОшибкеВОкноСообщений, Истина);
		
	Если СтруктураОбменаДанными <> Неопределено 
		И ЗаписатьИнформациюОбОшибкеВИсторию Тогда
		
		Если ЭтоВыгрузкаДанных Тогда
			СтруктураОбменаДанными.РезультатЗаписиДанных = Ложь;
		Иначе
			СтруктураОбменаДанными.РезультатЧтенияДанных = Ложь;
		КонецЕсли;
		
		ДополнитьКомментарийДляОперации(СтруктураОбменаДанными, ИнформацияДляПользователя, ЭтоВыгрузкаДанных);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьИнформациюОбОбмене(Знач ИнформацияДляПользователя, СтруктураОбменаДанными) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, СтруктураОбменаДанными.ВывестиИнформациюВОкноСообщений, Ложь);
	
КонецПроцедуры

// Процедура записывает данные протокола
Процедура ЗаписатьДанныеПротокола(НастройкаОбмена, ДанныеПротокола, ЭтоОшибка = Ложь)
	
	// только пустую строку не записываем, все остальное пишем
	Если ДанныеПротокола = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ВестиЛог Тогда
		
		ТипСообщения = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
		
		ЗаписьЖурналаРегистрации("ОбменДанными."+ Строка(НастройкаОбмена.Ссылка), ТипСообщения, , НастройкаОбмена.Ссылка, СокрЛП(ДанныеПротокола));
			
    КонецЕсли;
	
	// очищаем данные протокола обмена
	ДанныеПротокола = "";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ОБМЕНА


// функция по двум узлам возвращает имя самого файла обмена информацией, без пути к файлам
Функция СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, Знач РасширениеФайла = ".xml")
	
	Возврат "Message_" + СокрЛП(УзелОтправитель.Код) + "_" + СокрЛП(УзелПолучатель.Код) + РасширениеФайла;
	
КонецФункции

// Процедура по полному пути к файлу определяет каталог файла и есл каталог отсутвует то создает его
Процедура СоздатьКаталогПоПолномуПутиКФайлу(Знач ПолноеИмяФайла)
	
	ИмяКаталога = "";
	ИмяФайла = "";
	
	ПолучитьКаталогИИмяФайла(ПолноеИмяФайла, ИмяКаталога, ИмяФайла);
	
	СоздатьКаталогВСлучаеОтсутствия(ИмяКаталога);
	
КонецПроцедуры

// Процедура создает каталог если его нет
Процедура СоздатьКаталогВСлучаеОтсутствия(Знач ИмяКаталога)
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	НаличиеКаталогаОбмена = ПроверитьНаличиеКаталога(ИмяКаталога, Истина);
	
	Если НЕ НаличиеКаталогаОбмена Тогда
		// создаем вложенный каталог в темповый
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
КонецПроцедуры

// функция возвращает каталог для временных файлов при обмене данными
Функция ПолучитьПутьККаталогуВременныхФайловОбмена(Знач НаименованиеНастройкиОбмена, УзелОбмена, Знач ПроверятьНаличиеКаталога = Ложь)
	
	// во временном каталоге катаог с именем узла, а потом с именем настройки обмена...
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	ИмяПланаОбмена = УдалитьЗапрещенныеСимволыИмени(ИмяПланаОбмена);
	
	ПутьКФайлуОбмена = ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяПланаОбмена);
	
	СтрокаКаталогаОбмена = СокрЛП(УдалитьЗапрещенныеСимволыИмени(НаименованиеНастройкиОбмена));
	ПутьКФайлуОбмена = ПолучитьИмяФайла(ПутьКФайлуОбмена, СтрокаКаталогаОбмена);
		
	Если ПроверятьНаличиеКаталога Тогда
		
		// ищем нужный нам каталог, если его нет - то пытаемся создать
		СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

	КонецЕсли;

	Возврат ПутьКФайлуОбмена;
	
КонецФункции

// функция возвращает имя файла обмена между двумя узлами
Функция ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(Знач ИмяКаталогаОбмена = "", Знач НаименованиеНастройкиОбмена, УзелОтправитель, УзелПолучатель, 
	Знач ПроверятьНаличиеКаталога = Ложь)
	
	// если узел отправитель и получатель совпадают то обмениваться не с кем
	Если УзелОтправитель = УзелПолучатель Тогда
		Возврат "";
	КонецЕсли;
	
	// имя итогового каталога обмена
	Если ПустаяСтрока(ИмяКаталогаОбмена) Тогда
		
		ПутьКФайлуОбмена = ПолучитьПутьККаталогуВременныхФайловОбмена(НаименованиеНастройкиОбмена, УзелОтправитель, ПроверятьНаличиеКаталога);
		                                       											   
	Иначе
		
		ПутьКФайлуОбмена = ИмяКаталогаОбмена;
		Если ПроверятьНаличиеКаталога Тогда
		
			// ищем нужный нам каталог, если его нет - то пытаемся создать
			СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

		КонецЕсли;
		
	КонецЕсли;
			
	// Формируем имя временного файла
	ИмяФайла = ПолучитьИмяФайла(ПутьКФайлуОбмена, СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, ".xml"));
	
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь для создания временного файла обмена данными для записи изменений
Функция ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование,
		ПолучитьТекущийУзелИБ(УзелОбмена), УзелОбмена, Истина);
		
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь временного файла для чтения изменений 
Функция ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, Знач ИзменитьРасширениеФайлаНаZip)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование, УзелОбмена, ПолучитьТекущийУзелИБ(УзелОбмена));
	
	// для файла чтения данных важно что бы существовал каталог, откуда будем читать данные
	
	ПроверитьДоступностьРаботыСКаталогом(ИмяФайла, ИзменитьРасширениеФайлаНаZip);
	
	Возврат ИмяФайла;
	
КонецФункции

// функция проверяет наличие не пустого файла
функция ПроверитьНаличиеФайлаОбмена(Знач ИмяФайлаОбмена)
	
	// проверка наличия файла
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Файл.ЭтоКаталог() ИЛИ Файл.Размер() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// функция проверяет наличие каталога обмена
Функция ПроверитьНаличиеКаталога(Знач ИмяКаталога, Знач ПроверятьЧтоНайденныйФайлЭтоКаталог = Ложь) Экспорт
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	Если ПустаяСтрока(ИмяКаталога) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ИмяКаталога);
	Если Не ВыбФайл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьЧтоНайденныйФайлЭтоКаталог Тогда
		// проверка что это точно каталог
		Возврат ВыбФайл.ЭтоКаталог();
	Иначе
		// если без разницы каталог это или нет
		Возврат Истина;
    КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ЧТЕНИЕ И ЗАПИСЬ СООБЩЕНИЙ С ИЗМЕНЕНИЯМИ


// функция создает XMLЗапись для обмена данными
Функция СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	Если ПустаяСтрока(ИмяФайлаОбменаДанными) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЗаписьXML;
	
КонецФункции

// функция создает XML чтение по узлу обмена
Функция СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	НаличиеФайлаОбмена = ПроверитьНаличиеФайлаОбмена(ИмяФайлаОбменаДанными);
	Если Не НаличиеФайлаОбмена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Производим попытку открытия файла
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
		Возврат ЧтениеXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, ДанныеНастройки, ЭтоВыгрузкаИзТекущейИБ)
	
	ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений = ДанныеНастройки.ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными;
	ОбработкаОбменаДаннымиXML.ВыводВПротоколИнформационныхСообщений = ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений;	
	
	ОбработкаОбменаДаннымиXML.ДописыватьДанныеВПротоколОбмена = Истина;
	ОбработкаОбменаДаннымиXML.ВыгружатьТолькоРазрешенные = Истина;
	
	ОбработкаОбменаДаннымиXML.ФлагРежимОтладки = ДанныеНастройки.РежимОтладкиOnLineОбмена;
	ОбработкаОбменаДаннымиXML.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена = (ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0);
	ОбработкаОбменаДаннымиXML.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных;
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		ОбработкаОбменаДаннымиXML.ИмяФайлаПротоколаОбмена = ДанныеНастройки.ИмяФайлаПротоколаОбменаOnLineОбмен;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, ДанныеНастройки, ЭтоВыгрузкаИзТекущейИБ = Истина)
	
	ОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка";
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		ТекстПравил = ДанныеНастройки.ПравилаОбмена.Получить();
	Иначе
		ТекстПравил = ДанныеНастройки.ПравилаОбменаДляПриемника.Получить();
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка");
	
	ОбработкаОбменаДаннымиXML.мПроверятьЗагруженностьПравилПриВыгрузке = Ложь;
	
	ОбработкаОбменаДаннымиXML.ДобавлениеОбъектовИзФоновогоОбмена = ДанныеНастройки.ДобавлениеОбъектовИзФоновогоОбмена;
	ОбработкаОбменаДаннымиXML.КоличествоОбъектовДляФоновогоОбмена = ДанныеНастройки.КоличествоОбъектовДляФоновогоОбмена;
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		ОбработкаОбменаДаннымиXML.УзелДляФоновогоОбмена = ДанныеНастройки.УзелФоновогоОбмена;
		ОбработкаОбменаДаннымиXML.УзелДляОбмена = ДанныеНастройки.УзелИнформационнойБазы;
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.НеВыгружатьОбъектыПоСсылкам = Истина;
	ОбработкаОбменаДаннымиXML.ИмяФайлаПравилОбмена = "1";
	ОбработкаОбменаДаннымиXML.мБылиПрочитаныПравилаОбменаПриЗагрузке = Ложь;
	
	УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, ДанныеНастройки, ЭтоВыгрузкаИзТекущейИБ);
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуВыгружаемыхДанных(ДеревоПравилВыгрузки, ТаблицаТиповПравилВыгрузки)
	
	Для Каждого СтрокаДерева Из ДеревоПравилВыгрузки Цикл
		
		Если СтрокаДерева.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
			
			ТипВыгрузки = СтрокаДерева.ОбъектВыборки;
			
			Если ТипВыгрузки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаТиповПравилВыгрузки.Найти(ТипВыгрузки, "ТипВыгружаемыхДанных");
			
			Если СтрокаТаблицы = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаТиповПравилВыгрузки.Добавить();
				СтрокаТаблицы.ТипВыгружаемыхДанных = ТипВыгрузки;
				
				Если ТипВыгрузки = Тип("КонстантыНабор") Тогда
					
					СтрокаТаблицы.МетаданныеОбъекта = "Константы";
					
				Иначе
				
					СтрокаТаблицы.МетаданныеОбъекта = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипВыгружаемыхДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			
			ЗаполнитьТаблицуВыгружаемыхДанных(СтрокаДерева.Строки, ТаблицаТиповПравилВыгрузки)	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСообщениеСИнформациейОМетаданном(МетаданныеОбъекта)
	
	ИмяТаблицыДляПоискаЗарегистрированных = "";
						   
	Если МетаданныеОбъекта = "Константы" Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Константы";
	
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Справочник: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Документ: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План видов характеристик: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План счетов: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр сведений: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План видов расчета: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр накопления: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр бухгалтерии: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр расчета: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Бизнес процесс: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Задача: " + МетаданныеОбъекта.Имя;
			
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Последовательность: " + МетаданныеОбъекта.Имя;
		
	КонецЕсли;
	
	Возврат ИмяТаблицыДляПоискаЗарегистрированных;
	
КонецФункции

#Если клиент тогда
	
Функция СформироватьИмяКонфигурацииДляОтображенияПользователю(СтруктураКонвертации, ИмяОпределения)
	
	ИмяКонфигурации = "";
	СтруктураКонвертации.Свойство("СинонимКонфигурации" + ИмяОпределения + "а", ИмяКонфигурации);	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		СтруктураКонвертации.Свойство(ИмяОпределения, ИмяКонфигурации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		Возврат "";
	КонецЕсли;
	
	ТочнаяВерсия = "";
	СтруктураКонвертации.Свойство("ВерсияКонфигурации" + ИмяОпределения + "а", ТочнаяВерсия);
	
	Если ЗначениеЗаполнено(ТочнаяВерсия) Тогда
		ИмяКонфигурации = ИмяКонфигурации + " (" + ТочнаяВерсия + ")";
	КонецЕсли;
	
	Возврат ИмяКонфигурации;
		
КонецФункции	

Процедура ПоказатьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина) Экспорт
	
	ИнформацияОПравилах = ПолучитьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ);
	Предупреждение(ИнформацияОПравилах);
	
КонецПроцедуры
	
Функция ПолучитьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина) Экспорт
	
	Попытка
		
		Если ЭтоВыгрузкаИзТекущейИБ Тогда
			ТекстПравил = НастройкиОбмена.ПравилаОбмена.Получить();
		Иначе
			ТекстПравил = НастройкиОбмена.ПравилаОбменаДляПриемника.Получить();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстПравил) Тогда
			Возврат "Правила обмена не заданы";
		КонецЕсли;
		
		Попытка
			ПравилаОбменаПустые = Ложь;
			
			МакетПустыхПравил = ПолучитьОбщийМакет("ПравилаОбмена_ПустыеПравила");
			ТекстПустыхПравил = МакетПустыхПравил.ПолучитьТекст();
			
			ПравилаОбменаПустые = (ТекстПравил = ТекстПустыхПравил);
			
		Исключение
			ПравилаОбменаПустые = Ложь;
		КонецПопытки;
		
		Если ПравилаОбменаПустые Тогда
			Возврат "Правила обмена пустые"
		КонецЕсли;
		
				
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
		ОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка";
		
		// загружаем только заголовок правил
		ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка", , ИСТИНА);
		
		ИмяИсточника = СформироватьИмяКонфигурацииДляОтображенияПользователю(ОбработкаОбменаДаннымиXML.Конвертация, "Источник");
		ИмяПриемника = СформироватьИмяКонфигурацииДляОтображенияПользователю(ОбработкаОбменаДаннымиXML.Конвертация, "Приемник");
		
		// нужно сформировать строку для каких конфигураций предназначены правила обмена
		Если Не ПустаяСтрока(ИмяИсточника) 
			И Не ПустаяСтрока(ИмяПриемника) Тогда
			
			Возврат "Правила обмена для выгрузки из """ + ИмяИсточника + """ и загрузки в """ + ИмяПриемника + """";
			
		КонецЕсли;
		
		Возврат "Нет данных о конфигурациях правил обмена";
		
	 Исключение
			
		// в режиме клиента выводим информацию об ошибке
		СообщитьОбОшибке("Ошибка при получении информации о правилах обмена: " + ОписаниеОшибки());
						   
	КонецПопытки;
		
КонецФункции	
	
// процедура производит проверку соотвествия регистрации изменений для плана обмена и
//правил выгрузки данных
Процедура ВыполинтьПоискСоотвестствияПравилВыгрузкиИДанныхПланаОбмена(НастройкиОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена.УзелИнформационнойБазы) Тогда
		
		СообщитьОбОшибке("Не указан узел для обмена данными.");
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
		УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, НастройкиОбмена);
		
		// обходим дерево правил выгрузки и получаем информацию обо всех правилах выгрузки со стандартным алгоритмом выгрузки данных
		ТаблицаТиповПравилВыгрузки = Новый ТаблицаЗначений;
		ТаблицаТиповПравилВыгрузки.Колонки.Добавить("ТипВыгружаемыхДанных");
		ТаблицаТиповПравилВыгрузки.Колонки.Добавить("МетаданныеОбъекта");
		
		ЗаполнитьТаблицуВыгружаемыхДанных(ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки.Строки, ТаблицаТиповПравилВыгрузки);
		
		ТаблицаМетаданныхПланаОбмена = Новый ТаблицаЗначений;
		ТаблицаМетаданныхПланаОбмена.Колонки.Добавить("МетаданныеОбъекта");
		
		// анализируем информацию по плану обмена
		МетаданныеУзлаОбмена = НастройкиОбмена.УзелИнформационнойБазы.Метаданные();
		НужноДобавитьКонстанты = Ложь;
		Для Каждого СтрокаМетаданных Из МетаданныеУзлаОбмена.Состав Цикл
			
			Если Метаданные.Константы.Содержит(СтрокаМетаданных.Метаданные) Тогда
				
				НужноДобавитьКонстанты = Истина;
				
			Иначе
				
				СтрокаТаблицы = ТаблицаМетаданныхПланаОбмена.Добавить();
				СтрокаТаблицы.МетаданныеОбъекта = СтрокаМетаданных.Метаданные;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НужноДобавитьКонстанты Тогда
			
			СтрокаТаблицы = ТаблицаМетаданныхПланаОбмена.Добавить();
			СтрокаТаблицы.МетаданныеОбъекта = "Константы";
			
		КонецЕсли;
	
		
		ЕстьВПравилеНоНетвПлане = Ложь;
		СписокРезультата = Новый СписокЗначений;
		
		// остается сравнить две таблицы и показать различия...
		Для Каждого СтрокаТаблицы Из ТаблицаТиповПравилВыгрузки Цикл
			
			СтрокаПланаОбмена = ТаблицаМетаданныхПланаОбмена.Найти(СтрокаТаблицы.МетаданныеОбъекта, "МетаданныеОбъекта"); 
			Если СтрокаПланаОбмена = Неопределено Тогда
				
				// есть в правилах, нет в плане
				Если НЕ ЕстьВПравилеНоНетвПлане Тогда
					
					ЕстьВПравилеНоНетвПлане = Истина;
					Сообщить("Есть правила выгрузки, но нет регистрации изменений в плане обмена: ");
					Сообщить("=========================================================================");
					
				КонецЕсли;
				
				СписокРезультата.Добавить(ПолучитьСообщениеСИнформациейОМетаданном(СтрокаТаблицы.МетаданныеОбъекта));
				
			КонецЕсли;
			
		КонецЦикла;
		
		СписокРезультата.СортироватьПоЗначению();
		
		Для Каждого Стр Из СписокРезультата Цикл
			
			Сообщить(Стр.Значение)	
			
		КонецЦикла;
		
		Сообщить(Символы.ПС);
		
		ЕстьВПланеНоНетВПравиле = Ложь;
		СписокРезультата = Новый СписокЗначений;
		
		// остается сравнить две таблицы и показать различия...
		Для Каждого СтрокаТаблицы Из ТаблицаМетаданныхПланаОбмена Цикл
			
			Если ТипЗнч(СтрокаТаблицы.МетаданныеОбъекта) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Врег(СтрокаТаблицы.МетаданныеОбъекта.Имя), "СООТВЕТСТВИЕОБЪЕКТОВДЛЯОБМЕНА") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПравил = ТаблицаТиповПравилВыгрузки.Найти(СтрокаТаблицы.МетаданныеОбъекта, "МетаданныеОбъекта"); 
			Если СтрокаПравил = Неопределено Тогда
				
				// есть в правилах, нет в плане
				Если НЕ ЕстьВПланеНоНетВПравиле Тогда
					
					ЕстьВПланеНоНетВПравиле = Истина;
					Сообщить("Есть в плане обмена, но нет в правиле выгрузки: ");
					Сообщить("=========================================================================");
					
				КонецЕсли;
				
				СписокРезультата.Добавить(ПолучитьСообщениеСИнформациейОМетаданном(СтрокаТаблицы.МетаданныеОбъекта));				
								
			КонецЕсли;
			
		КонецЦикла;
		
		СписокРезультата.СортироватьПоЗначению();
		
		Для Каждого Стр Из СписокРезультата Цикл
			
			Сообщить(Стр.Значение)	
			
		КонецЦикла;
		
		Если Не ЕстьВПравилеНоНетвПлане
			И Не ЕстьВПланеНоНетВПравиле Тогда
			
			Сообщить("Регистрация изменений в плане обмена соотвествует правилам выгрузки данных");
			
		КонецЕсли;
		
    Исключение
			
		// в режиме клиента выводим информацию об ошибке
		СообщитьОбОшибке("Ошибка при тестировании соответствия плана обмена и правил выгрузки: " + ОписаниеОшибки());
						   
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли

// Процедура записывает изменения узла информационной база в файл в темповом каталоге
Процедура ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)

	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен Тогда
		
		Попытка
			
			ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
			УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ДанныеНастройки);
			
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбменаДанными;
			
			#Если Клиент Тогда
				Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтрокаСообщенияОбОшибке = "";
			УспешнаяВыгрузка = ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузку(, СтрокаСообщенияОбОшибке);
			
			ДобавитьИнформациюВПротокол("Окончание записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = УспешнаяВыгрузка;
			
			СтруктураНастроекОбменаДанными.Вставить("ПереданоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПереданоОбъектовФоновогоОбмена);
			
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
						
			СтруктураНастроекОбменаДанными.Вставить("КоличествоВыгруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикВыгруженныхОбъектов);
			
		Исключение
			
			// в режиме клиента выводим информацию об ошибке
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();			
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений при обмене: " + СтрокаСообщенияОбОшибке, СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
				       			
		КонецПопытки;
		
		ОбработкаОбменаДаннымиXML = Неопределено;
		
	Иначе
 	
		Попытка
					
		    ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена); 
			
			ЗаписьXML = СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
			Если ЗаписьXML = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			#Если Клиент Тогда
				Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			Если ЭтоРИБ Тогда
				
				// Создаем новое сообщение
				ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();

				ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
				
				// для РИБ изменения в информационной базе
				ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
				
				// Завершаем запись сообщения
				ЗаписьСообщения.ЗакончитьЗапись();
					
				ЗаписьXML.Закрыть();
				
				СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Истина;
			Иначе
				
				ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
							
				// план обмена самостоятельно читает изменения от узла
				СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЭтотУзелОбмена.ВыгрузитьИзмененияДанныхДляУзла(УзелОбмена, 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML);
				
			КонецЕсли;
			
			ДобавитьИнформациюВПротокол("Окончание записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
					
		Исключение
			
			// в режиме клиента выводим информацию об ошибке
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений при обмене: " + СтрокаСообщенияОбОшибке, СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
									
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает файл изменений от узла РИБ
Процедура ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML, КонфигурацияИзмененаПриОбменеРИБ = ЛОжь)
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Истина;
	КонфигурацияИзмененаПриОбменеРИБ = Ложь;

	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

	Попытка
		ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений при обмене РИБ: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Ложь);
		
		// ошибка может быть связана с тем, что изменилась конфигурация информационной базы
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено 
			И КонфигурацияИзменена() Тогда
			
			КонфигурацияИзмененаПриОбменеРИБ = Истина;
			СтруктураНастроекОбновленияКонфигурации = ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации();
			
			НужноОбновлятьКонфигурацию = Ложь;
			СтруктураНастроекОбновленияКонфигурации.Свойство("АвтоматическиОбновлятьКонфигурациюПриПриемеСообщенияОтГлавногоУзлаРИБ", НужноОбновлятьКонфигурацию);
								
			Если НужноОбновлятьКонфигурацию = Истина Тогда
				
				// при необходимости нужно обновить конфигурацию ИБ
				ВыполнитьОбновлениеКонфигурацииДляИнформационнойБазы(СтруктураНастроекОбменаДанными.ДанныеНастройки.Ссылка, СтруктураНастроекОбновленияКонфигурации);
			
			КонецЕсли;
			
		Конецесли;
		
		Возврат;
                        
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПараметрыДляЗагрузкиДанных(ОбработкаОбменаДаннымиXML, ДанныеНастройки)
	
	ОбработкаОбменаДаннымиXML.РежимОбмена = "Загрузка";
	
	УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, ДанныеНастройки, Истина);
	
КонецПроцедуры

// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)
			
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен Тогда
		
		Попытка
			
			ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
			УстановитьПараметрыДляЗагрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ДанныеНастройки);
			
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбменаДанными;
						
			#Если Клиент Тогда
				Состояние("Запись изменений ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтрокаСообщенияОбОшибке = "";
			СтрокаСообщенияОбОшибкеОтложенныхДвижений = "";
			УспешнаяЗагрузкаДанных = ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузку(СтрокаСообщенияОбОшибке, 
				СтрокаСообщенияОбОшибкеОтложенныхДвижений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации,
				СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
			
			ДобавитьИнформациюВПротокол("Окончание чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = УспешнаяЗагрузкаДанных;
			
			СтруктураНастроекОбменаДанными.Вставить("ПолученоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПолученоОбъектовФоновогоОбмена);
			СтруктураНастроекОбменаДанными.Вставить("РезультатОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.РезультатВыполненияОтложенныхДвижений);
			
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
						
			СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыполненииОтложенныхДвижений", СтрокаСообщенияОбОшибкеОтложенныхДвижений);
			СтруктураНастроекОбменаДанными.Вставить("КоличествоВыполненныхОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.мКоличествоВыполненныхОтложенныхДвиженийДокументов);
			
			ОптравитьСообщениеОбОшибкеДействийСОтложеннымПроведениемДокументов(СтруктураНастроекОбменаДанными, СтрокаСообщенияОбОшибкеОтложенныхДвижений);
			
			СтруктураНастроекОбменаДанными.Вставить("КоличествоЗагруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикЗагруженныхОбъектов);
									
		Исключение
			
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений из файла обмена." + Символы.ПС + СтрокаСообщенияОбОшибке, 
				СтруктураНастроекОбменаДанными);
				
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
								
		КонецПопытки;
		
	Иначе
	
		УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
			
		ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена);

		Попытка
	        					
			ЧтениеXML = СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
			
			Если ЧтениеXML = Неопределено Тогда
				// не удалось создать объект чтения данных - ничего не делаем
				СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
				Возврат;
			КонецЕсли;
			
			#Если Клиент Тогда
				Состояние("Чтение изменений от узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			Если ЭтоРИБ Тогда
				
				КонфигурацияПриОбменеРИБИзменена = Ложь;
				ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML, КонфигурацияПриОбменеРИБИзменена);
				СтруктураНастроекОбменаДанными.Вставить("КонфигурацияПриОбменеРИБИзменена", КонфигурацияПриОбменеРИБИзменена);
				            			
			Иначе
				
				ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
				// план обмена самостоятельно читает изменения от узла
				СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = ЭтотУзелОбмена.ЗагрузитьИзмененияДанныхДляУзла(УзелОбмена, 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных, ЧтениеXML);
				
			КонецЕсли;
			
			ДобавитьИнформациюВПротокол("Окончание чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		Исключение
			
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений из файла обмена." + Символы.ПС + СтрокаСообщенияОбОшибке, 
				СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;			
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
								
		КонецПопытки;
			
	КонецЕсли;		
	
КонецПроцедуры

// функция возвращает имя плана обмена по узлу обмена
Функция ПолучитьИмяПланаОбмена(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат "";
	КонецЕсли;
	
	МетаданныеУзла = УзелОбмена.Метаданные();
	Возврат МетаданныеУзла.Имя;
    	
КонецФункции

// функция возвращает узел текущей ИБ по узлу обмена
Функция ПолучитьТекущийУзелИБ(УзелОбмена) Экспорт
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
КонецФункции

// функция по узлу обмена определяет это база РИБ или нет
Функция ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	Возврат МетаданныеПланаОбмена.РаспределеннаяИнформационнаяБаза;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ВЫБОР КАТАЛОГОВ И ФАЙЛОВ ОБМЕНА ДАННЫМИ

#Если Клиент Тогда

// функция возвращает имя выбранного пользователем файла для обмена информацией
Функция ВыбратьФайлДляОбмена(Знач НачальныйКаталог, Знач ИмяФайлаПоУмолчанию = "") Экспорт
	
	ДиалогВыбора = ПолучитьДиалогВыбораФайлов(Ложь, НачальныйКаталог);
	ДиалогВыбора.Фильтр						= "Файл данных(*.xml)|*.xml|Архив с данными(*.zip)|*.zip|*.*|*.*";
	ДиалогВыбора.Заголовок 					= "Выбор файла обмена информацией";
	ДиалогВыбора.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбора.Расширение             	= "xml";
	ДиалогВыбора.ИндексФильтра          	= 0;
	
	Если Не ПустаяСтрока(ИмяФайлаПоУмолчанию) Тогда
		ДиалогВыбора.ПолноеИмяФайла 		= ИмяФайлаПоУмолчанию;
	КонецЕсли;
	
	РезультатВыбора = ДиалогВыбора.Выбрать();
	
	Если РезультатВыбора Тогда
		Возврат СокрЛП(ДиалогВыбора.ПолноеИмяФайла);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// функция возвращает выбранный пользователем каталог для выгрузки данных
Функция ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена = "")
	
	// хотят только изменения выгрузить
	РезультатВыбора = ВыбратьКаталог(КаталогОбмена, "Выбор каталога обмена данными");
	Если Не РезультатВыбора Тогда
		КаталогОбмена = "";
	Иначе
			
		// надо проверить наличие каталога на диске
		НаличиеКаталога = ПроверитьНаличиеКаталога(КаталогОбмена, Истина);
			
		// выбран каталог которого нет на диске
		Если Не НаличиеКаталога Тогда
				
			КаталогОбмена = "";
				
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат КаталогОбмена;
	
КонецФункции

#КонецЕсли

// Функция запрашивает у пользователя ввести имя файла для обмена данными либо имя каталога для выгрузки данных
Функция ОпроситьИмяКаталогаОбменаДанными(Знач ТекстИнформационногоСообщения = "",
	СтруктураНастроекОбменаДанными, КаталогОбмена)
	
	Если Не ПустаяСтрока(ТекстИнформационногоСообщения) Тогда
		
		СообщитьИнформациюОбОбмене(ТекстИнформационногоСообщения, СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// не задан каталог обмена данными
	Если НЕ СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// запуск в интерактивном режиме
	#Если Клиент Тогда	
							
		КаталогОбмена = ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена);
	
	#Иначе
		Возврат Ложь;
	#КонецЕсли

	Возврат Истина;
	
КонецФункции


// АРХИВАЦИЯ
///////////////////////////////////////////////////////////////////////////////

// функция архивирует файл
Функция ЗаархивироватьФайл(Знач ИмяИсходногоФайла, СтруктураНастроекОбменаДанными)
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало сжатия файла обмена " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЗаписьZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаОтправку, "Файл обмена данными");
		Архиватор.Добавить(ИмяИсходногоФайла);
		Архиватор.Записать();
		
		ДобавитьИнформациюВПротокол("Окончание сжатия файла обмена данными " + ИмяИсходногоФайла + "." + Символы.ПС +
			"Данные файла обмена помещены в файл " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при сжатии данных файла обмена: " + ИмяИсходногоФайла + Символы.ПС + ОписаниеОшибки(), 
			СтруктураНастроекОбменаДанными, Истина, Истина);
		Возврат Ложь;	
		
    КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// функция разархивирует файл
Функция РазархивироватьФайл(СтруктураНастроекОбменаДанными) 
	
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	
	ИмяРазархивированногоФайла = "";
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, 
			СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЧтениеZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаПрием);
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяРазархивированногоФайла = ПолучитьИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяРазархивированногоФайла = "";	
			
		КонецЕсли;

		Архиватор.Закрыть();
	
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при распаковке данных из архива : " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Ложь);
		Возврат "";
							
	КонецПопытки;
	
	ДобавитьИнформациюВПротокол("Окончание распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений + ".
		|Распакованные данные помещены в файл " + ИмяРазархивированногоФайла, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	
	Возврат ИмяРазархивированногоФайла;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
//	ОБМЕН ИНФОРМАЦИЕЙ

Процедура ОптравитьСообщениеОбОшибкеДействийСОтложеннымПроведениемДокументов(СтруктураНастроекОбменаДанными, ТекстСообщения)
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеОбОшибкеОбменаПриНеобходимости(СтруктураНастроекОбменаДанными, Неопределено, ТекстСообщения);
	
КонецПроцедуры

Процедура ОтправитьСообщениеОбОшибкеОбменаПриНеобходимости(СтруктураНастроекОбменаДанными, ОшибкаПриВыгрузке, ТекстСообщения = "")
	
	Если НЕ (ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.УчетнаяЗаписьОтправкиСообщенияОбОшибке)
		И ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.АдресДляОтправкиСообщенийОбОшибке)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстОшибки = ТекстСообщения;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		Если ОшибкаПриВыгрузке Тогда
			СтруктураНастроекОбменаДанными.Свойство("КомментарийПриВыгрузкеДанных", ТекстОшибки);
		Иначе
			СтруктураНастроекОбменаДанными.Свойство("КомментарийПриЗагрузкеДанных", ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ВРегТекстОшибки = ВРЕГ(ТекстОшибки);
	// определим нет ли в тексте ошибки строки, которая не считается ошибкой
	Для Каждого СтрокаНеОшибок Из СтруктураНастроекОбменаДанными.ДанныеНастройки.СообщенияНеЯвляющиесяОшибками Цикл
		
		Если СтрНайти(ВРегТекстОшибки, Врег(СтрокаНеОшибок.ТекстСообщения)) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// все проверки пройдены, нужно письмо отсылать
	Попытка
		ОсновнойПрофиль = Константы.увОсновнойПочтовыйПрофиль.Получить();
		Если ЗначениеЗаполнено(ОсновнойПрофиль) Тогда
			
			ИнтернетПочта = Новый ИнтернетПочта();
			Профиль = Новый ИнтернетПочтовыйПрофиль();
			
			Профиль.АдресСервераPOP3 = ОсновнойПрофиль.АдресСервераPOP3;
			Профиль.АдресСервераSMTP = ОсновнойПрофиль.АдресСервераSMTP;
			Профиль.Пароль = ОсновнойПрофиль.Пароль;
			Профиль.ПарольSMTP = ОсновнойПрофиль.ПарольSMTP;
			Профиль.Пользователь = ОсновнойПрофиль.Пользователь;
			Профиль.ПользовательSMTP = ОсновнойПрофиль.ПользовательSMTP;
			Профиль.ПортPOP3 = ОсновнойПрофиль.ПортPOP3;
			Профиль.ПортSMTP = ОсновнойПрофиль.ПортSMTP;
			
			Письмо = Новый ИнтернетПочтовоеСообщение();
			Письмо.Получатели.Добавить(СтруктураНастроекОбменаДанными.ДанныеНастройки.АдресДляОтправкиСообщенийОбОшибке);
			Письмо.ИмяОтправителя = Профиль.Пользователь;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ТемаПисьма = "ОШИБКА при обмене данными по настройке обмена: " + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки);
			Иначе
				ТемаПисьма = "ОШИБКА при " + ?(ОшибкаПриВыгрузке, "выгрузке", "загрузке") + " данных по настройке обмена: " + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки);
			КонецЕсли;
			Письмо.Тема = ТемаПисьма;
			Письмо.Тексты.Добавить("Информационная база: " + СтрокаСоединенияИнформационнойБазы() + Символы.ПС + Символы.ПС + ТекстОшибки);
			Письмо.Отправитель = ОсновнойПрофиль.АдресОтправителя;

			//Попытка
			//	Состояние("Подключение к почтовому серверу " + ОсновнойПрофиль.АдресСервераPOP3 + ".");
			//	ИнтернетПочта.Подключиться(Профиль);
			//	Состояние("Подключено к почтовому серверу " + ОсновнойПрофиль.АдресСервераPOP3 + ". Отправка почтового сообщения.");
			//	Попытка
			//		ИнтернетПочта.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать);
			//		ИнтернетПочта.Отключиться();
			//		Сообщить("Отправка файла выгрузки прошла успешно (" + ОсновнойПрофиль + ").");
			//	Исключение
			//		Предупреждение("Не удалось подключиться к почтовому серверу " + ОсновнойПрофиль.АдресСервераPOP3);
			//	КонецПопытки;
			//Исключение
			//	Предупреждение("Не удалось отправить файл выгрузки по электронной почте " + ОсновнойПрофиль.АдресОтправителя);
			//КонецПопытки;
		КонецЕсли;
	Исключение
		СообщитьИнформациюОбОшибкеОбмена("Не удалось отправить письмо - уведомление о произошедшей ошибке:" + Символы.ПС + ОписаниеОшибки(), 
			СтруктураНастроекОбменаДанными, Истина, ОшибкаПриВыгрузке);
	Конецпопытки;
	
КонецПроцедуры

// Процедура производит чтение данных
Процедура ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 5);
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	СтруктураНастроекОбменаДанными.ДатаНачалаЗагрузки = ТекущаяДата();
	
	// ЧТЕНИЕ
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Не найден входящий файл обмена данными.", СтруктураНастроекОбменаДанными);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, "Не найден входящий файл обмена данными.", Ложь);
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	// если расширение файла для чтения ZIP то его нужно сначала разархивировать
	РасширениеФайлаОбмена = ПолучитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);
	ЧтениеИзАрхива = Врег(РасширениеФайлаОбмена) = "ZIP";
			
	Если ЧтениеИзАрхива Тогда
		ИмяВременногоФайла = РазархивироватьФайл(СтруктураНастроекОбменаДанными);										
	Иначе
		ИмяВременногоФайла = СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений;				
	КонецЕсли;
			
	// читаем сообщения с изменененями
	Если ИмяВременногоФайла = "" Тогда
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, ИмяВременногоФайла);
					
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЧтенияДанных Тогда
					
		СообщитьИнформациюОбОбмене("Чтение данных из файла обмена успешно завершено.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Чтение данных из файла обмена завершено с ошибками!", СтруктураНастроекОбменаДанными);
		ОтправитьСообщениеОбОшибкеОбменаПриНеобходимости(СтруктураНастроекОбменаДанными, Ложь);
					
	КонецЕсли;
			
	// временный файл откуда считывались данные в любом случае не нужен	
	Если ЧтениеИзАрхива Тогда
				
		ВыполнитьУдалениеФайла(ИмяВременногоФайла, СтруктураНастроекОбменаДанными, , Ложь);	
				
	КонецЕсли;
			
	// запоминаем последнюю дату чтения данных
	СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки = ТекущаяДата();
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
	
КонецПроцедуры

// Процедура производит запись данных
Процедура ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 5);
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	СтруктураНастроекОбменаДанными.ДатаНачалаВыгрузки = ТекущаяДата();
	
	// ЗАПИСЬ
	Если Не СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		Возврат;
		
	КонецЕсли;
		
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Выгрузка изменений из текущей информационной базы НЕ произведена!", СтруктураНастроекОбменаДанными);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, "Выгрузка изменений из текущей информационной базы НЕ произведена!", Истина);
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		Возврат;
		
	КонецЕсли;
			
	// если идет архивирование файла, то надо сначала в темповый файл записать изменения а потом их зархивировать
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
		ИмяФайлаДляЗаписиИзменений = ПолучитьИмяВременногоФайла(".xml");				
	Иначе
		ИмяФайлаДляЗаписиИзменений = СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений;				
	КонецЕсли;
	
	// записываем изменения
	ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, ИмяФайлаДляЗаписиИзменений);
			
	// если надо то архивируем
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных
		И СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
				
		СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЗаархивироватьФайл(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными);
		
		Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда 
			
			// грохаем временный файл
			ВыполнитьУдалениеФайла(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
			
		КонецЕсли;
								
	КонецЕсли;
			
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда
					
		СообщитьИнформациюОбОбмене("Запись изменений текущей информационной базы в файл обмена завершилась успешно.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Запись изменений текущей информационной базы в файл обмена завершилась с ошибками!", СтруктураНастроекОбменаДанными);
		ОтправитьСообщениеОбОшибкеОбменаПриНеобходимости(СтруктураНастроекОбменаДанными, Истина);
					
	КонецЕсли;
					
	СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки = ТекущаяДата();
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
	
КонецПроцедуры

// функция возвращает дату файла последнего обмена для настройки обмена
Функция ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СсылкаНастройкиОбмена)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменаДанными.ДатаПоследнегоФайлаОбмена
				   |ИЗ
	               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
				   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
				   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНастройкиОбмена); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоследнегоФайлаОбмена;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

// Процедура по адресу FTP обмена получает имя сервера и имя каталога обмена
Процедура ПолучитьИмяСервераИИмяКаталогаОбмена(Знач ПолныйFTPАдрес, ИмяСервера, ИмяКаталога)
	
	АдресОбмена = НормализоватьFTPАдрес(ПолныйFTPАдрес);
	
	// принцип получения адреса такой, все что до первой черты / или \ - это имя сервера, потом каталог
	АдресОбмена = СтрЗаменить(АдресОбмена, "\", "/");
	
	ПозицияПрямогоСлеша = СтрНайти(АдресОбмена, "/");
	
	Если ПозицияПрямогоСлеша = 0 Тогда
		
		ИмяСервера = АдресОбмена;
		ИмяКаталога = "";
		
		
	Иначе
		
		ИмяСервера = Сред(АдресОбмена, 1, ПозицияПрямогоСлеша - 1);
		ИмяКаталога = Сред(АдресОбмена, ПозицияПрямогоСлеша);
		
		// последний должен быть слеш у имени каталога
		Если Сред(ИмяКаталога, СтрДлина(ИмяКаталога)) <> "/" Тогда
			
			ИмяКаталога = ИмяКаталога + "/";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// функция выполняет FTP подключение к серверу
Функция ВыполнитьFTPПодключениеКСерверу(Знач ИмяFTPСервера, НастройкиОбмена, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина)       
	
	#Если Клиент Тогда
		Состояние("Выполняется подключение к FTP: " + ИмяFTPСервера);
	#КонецЕсли
    
	Попытка
		
		// если есть пользователь прокси сервера, то подключаемся чере прокси
		Если Не ПустаяСтрока(НастройкиОбмена.ПользовательПроксиFTP)
			ИЛИ НЕ ПустаяСтрока(НастройкиОбмена.ПротоколПроксиFTP)
			ИЛИ НЕ ПустаяСтрока(НастройкиОбмена.СерверПроксиFTP) Тогда
			
			ИмяПротокола = Врег(СокрЛП(НастройкиОбмена.ПротоколПроксиFTP));
			Если ИмяПротокола <> "" Тогда
				
				Если НЕ (ИмяПротокола = "HTTP" ИЛИ ИмяПротокола = "HTTPS" ИЛИ ИмяПротокола = "FTP") Тогда
					
					СообщитьПростуюИнформацию("Указан не допустимый для использования протокол. 
						|Допустимые для использования протоколы прокси-сервера: http, https и ftp.", 
						ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
					Возврат Неопределено;
						
				КонецЕсли;
				
			КонецЕсли;			
			
			ПроксиСервер = Новый ИнтернетПрокси;
			ПроксиСервер.Пользователь = НастройкиОбмена.ПользовательПроксиFTP;
			ПроксиСервер.Пароль = НастройкиОбмена.ПарольПроксиFTP;
			
			ПроксиСервер.Установить(НастройкиОбмена.ПротоколПроксиFTP, НастройкиОбмена.СерверПроксиFTP, НастройкиОбмена.ПортПроксиFTP); 
			
			Соединение = Новый FTPСоединение(ИмяFTPСервера, НастройкиОбмена.ПортFTPСоединения, 
				НастройкиОбмена.ПользовательFTPСоединения, НастройкиОбмена.ПарольFTPСоединения, ПроксиСервер, НастройкиОбмена.ПассивноеFTPСоединение);
			
		Иначе
			
			Соединение = Новый FTPСоединение(ИмяFTPСервера, НастройкиОбмена.ПортFTPСоединения, 
				НастройкиОбмена.ПользовательFTPСоединения, НастройкиОбмена.ПарольFTPСоединения, ,НастройкиОбмена.ПассивноеFTPСоединение);
						
		КонецЕсли;			
			
	Исключение
			
		// ошибка при подключении к ftp
		СообщитьПростуюИнформацию("Ошибка при подключении к FTP : " + ИмяFTPСервера + " ! " + ОписаниеОшибки(), 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// функция проверяет наличие катаога на FTP сервере
Функция ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, Знач ИмяКаталогаСервера, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина)
	
	Если ПустаяСтрока(ИмяКаталогаСервера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//надо сначала проверить что сам каталог доступа есть
	МассивНайденныхКаталогов = Соединение.НайтиФайлы(ИмяКаталогаСервера, "");
	Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
		
		// если не каталог - то дальше ищем
		Если НЕ НайденныйКаталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		// большие и маленькие буквы считаются различными
		Если НайденныйКаталог.ПолноеИмя + "/" <> ИмяКаталогаСервера Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	// если не найден каталог для обмена
	СообщитьПростуюИнформацию("Не найден FTP каталог обмена информацией: " + ИмяКаталогаСервера, 
		ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
		
	Возврат Ложь;
	
КонецФункции

// функция проверяет настройки FTP подключения
Функция ПроверитьНастройкиFTPПодключения(ДанныеНастройки, ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина,
	ИмяКаталогаСервера = "", ИмяFTPСервера = "" , Соединение = Неопределено) Экспорт
	
	// нужно по полному имени получить имя сервера и имя каталога
	ПолучитьИмяСервераИИмяКаталогаОбмена(ДанныеНастройки.FTPАдресОбмена, ИмяFTPСервера, ИмяКаталогаСервера);
	
	// если не задано имя сервера или каталога то невозможно обмениваться данными
	Если ПустаяСтрока(ИмяFTPСервера) Тогда
		
		СообщитьПростуюИнформацию("Не задан сервер обмена информацией через FTP.", 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений);

		Возврат Ложь;
		
	КонецЕсли;
	
	// соединение
	Соединение = ВыполнитьFTPПодключениеКСерверу(ИмяFTPСервера, ДанныеНастройки, ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// каталог проверяем
	НаличиеКаталога = ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, ИмяКаталогаСервера, ДанныеПротокола, ВывестиИнформациюВОкноСообщений);
	Если Не НаличиеКаталога Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПЕРЕД ОБМЕНОМ
///////////////////////////////////////////////////////////////////////////////

// Процедура подготавливает обмен через файловый ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	//Алгоритм получения файлов обмена:

	//Случай автоматического запуска обмена:
	//•	Проверка доступности указанного в настройках каталога. Если каталог не доступен (не найден), то обмен не начинается
	//•	Проверка наличия файла обмена от узла информационной базы
	//•	После внесений изменений в информационную базу файл обмена удаляется

	//Случай запуска обмена в ручном режиме:
	//•	Проверка доступности указанного в настройках каталога. 
	//o	Если искомый каталог доступен и файл обмена в нем присутствует, то обмен происходит точно так же как и при автоматическом запуске
	//o	Если каталог не доступен или не найден, либо не найден файл обмена данными то пользователю выдается соответствующее сообщение. Предлагается выбрать файл для обмена самостоятельно.
	
	ИтоговоеИмяФайлаОбменаДанными = "";
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = "";
	
	КаталогОбменаДанными = СтруктураНастроекОбменаДанными.ДанныеНастройки.КаталогОбменаИнформацией;
	
	ПроверкаНаличияКаталога = ПроверитьНаличиеКаталога(КаталогОбменаДанными, Истина);
	Если НЕ ПроверкаНаличияКаталога Тогда
		
		// не задан каталог обмена данными
		Если ПустаяСтрока(КаталогОбменаДанными) Тогда
			ТекстСообщенияПользователю = "Не задан каталог обмена информацией";
		Иначе
			ТекстСообщенияПользователю = "Не найден каталог обмена информацией: " + КаталогОбменаДанными;
		КонецЕсли;
			
		РезультатВыбора = ОпроситьИмяКаталогаОбменаДанными(ТекстСообщенияПользователю, СтруктураНастроекОбменаДанными, 
			КаталогОбменаДанными);
			
		Если Не РезультатВыбора Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;	
		
	// каталог есть, поверяем наличие файла обмена, если нужно данные считать
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		ИмяФайлаШаблонаОбмена = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "");
		ИмяФайлаПоУмолчаниюXML = ИмяФайлаШаблонаОбмена + ".xml";
		ИмяФайлаПоУмолчаниюZIP = ИмяФайлаШаблонаОбмена + ".zip";
		
		ИтоговоеИмяФайлаОбменаДаннымиXML = ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюXML);
		НаличиеФайлаОбменаXML = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиXML);
				
		ИтоговоеИмяФайлаОбменаДаннымиZIP = ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюZIP);
		НаличиеФайлаОбменаZIP = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиZIP);
				
		Если НЕ НаличиеФайлаОбменаXML И НЕ НаличиеФайлаОбменаZIP Тогда
				
			// каталог есть, но файлов в нем, удовлетворяющих условиям поиска нет
			// значит просто файл не нашли, вот и все.
								
		ИначеЕсли НаличиеФайлаОбменаXML И НаличиеФайлаОбменаZIP Тогда
			// сразу оба файла...
			// берем последний по времени
			ВремяФайлаXML = ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиXML);
			ВремяФайлаZIP = ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиZIP);
					
			Если ВремяФайлаXML >= ВремяФайлаZIP Тогда
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML;	
			Иначе
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
			КонецЕсли;
					
			// сообщаем о том с каким файлом ведется обмен		
			СообщитьИнформациюОбОбмене("В каталоге обмена имеются 2 файла обмена информацией: " + ИмяФайлаПоУмолчаниюXML + ", " + ИмяФайлаПоУмолчаниюXML, 
				СтруктураНастроекОбменаДанными);
			// то что выбрали для обмена
			СообщитьИнформациюОбОбмене("Время записи/изменения файла : " + ИтоговоеИмяФайлаОбменаДанными + " больше. Он выбран для обмена данными.", 
				СтруктураНастроекОбменаДанными);
					
		ИначеЕсли НаличиеФайлаОбменаXML Тогда	
			// есть только XML файл
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML; 
					
		ИначеЕсли НаличиеФайлаОбменаZIP Тогда	
			// есть только ZIP
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
					
		КонецЕсли; // наличие файлов приема
				
	КонецЕсли;	// производить прием сообщений
	
	// ничего не указано
	Если ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) 
		И ПустаяСтрока(КаталогОбменаДанными) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	// если задана переменная ИтоговоеИмяФайлаОбменаДанными тогда хотим и изменение получить и данные выгрузить
	Если Не ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) Тогда
		
		// получаем дату последнего файла обмена
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДанными);
		СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИтоговоеИмяФайлаОбменаДанными; 
		
		// копируем файл во временный каталог
		СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
			(Врег(ПолучитьРасширениеФайла(ИтоговоеИмяФайлаОбменаДанными)) = "ZIP"));
				        		
		УдачноеКопирование = ВыполнитьКопированиеФайла(ИтоговоеИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, Истина, 
			СтруктураНастроекОбменаДанными, Ложь);
			
		Если Не УдачноеКопирование Тогда
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений	= "";			
		КонецЕсли;	
		
		ИмяФайла = "";
		ПолучитьКаталогИИмяФайла(ИтоговоеИмяФайлаОбменаДанными, КаталогОбменаДанными, ИмяФайла);
		
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
	
	// весь обмен производим во временном каталоге
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = КаталогОбменаДанными; 
	
КонецПроцедуры

// Процедура подготавливает обмен через FTP ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;
	
	ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
		СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
		ИмяКаталогаСервера, ИмяFTPСервера, Соединение);
		
	Если Не ПроверитьНастройкиПодключения Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
		
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		// ищем файлы по маске с расширением Message_A_B .xml или .zip
		ШаблонИмениФайла = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, 
			СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "") + ".*";
		
		МассивНайденныхФайлов = Соединение.НайтиФайлы(ИмяКаталогаСервера, ШаблонИмениФайла);
		
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СтруктураНастроекОбменаДанными.ДанныеНастройки.Ссылка);
				
		Для Каждого ФайлФТП Из МассивНайденныхФайлов Цикл
			
			ТекущийФайлДляОбмена = ФайлФТП;
			
			// проверяем нужное расширение, то что это фай а не каталог, запоминаем последнюю дату файла
			Если НЕ( (Врег(ТекущийФайлДляОбмена.Расширение) = ".ZIP") ИЛИ (Врег(ТекущийФайлДляОбмена.Расширение) = ".XML") ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.ЭтоФайл() = Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.Размер() = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			// с датами определяемся
			ВремяИзмененияТекущегоФайла = ТекущийФайлДляОбмена.ПолучитьВремяИзменения();
			
			//дата последнего файла обмена должна быть меньше текущего файла обмена
			Если (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена <> Неопределено) 
				И (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена > ВремяИзмененияТекущегоФайла) Тогда
				
				Продолжить;
				
			КонецЕсли;			
			
			// проверим что бы размер файла не превосходил ограничения по размеру
			Если (СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP > 0) 
				И (ТекущийФайлДляОбмена.Размер() / 1024) > СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP Тогда
				
				// файл не удовлетфоряет ограничениям по размеру для получения через FTP
				Продолжить;	
						
			КонецЕсли;			
			
			ФайлДляОбмена = ТекущийФайлДляОбмена;
			СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ВремяИзмененияТекущегоФайла; 
			СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИмяFTPСервера + ФайлФТП.ПолноеИмя;
			
		КонецЦикла;	
			
		//надо переместить нужный файл в каталог для обмена данными
		Если ФайлДляОбмена <> Неопределено Тогда
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
				(Врег(ФайлДляОбмена.Расширение) = ".ZIP"));
			
			Попытка
				// генерируем имя файла для чтения изменений и закачиваем этот файл
				Соединение.Получить(ФайлДляОбмена.ПолноеИмя, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);	
				
			Исключение
			
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла c FTP ресурса: " + ОписаниеОшибки(), 
					СтруктураНастроекОбменаДанными, Истина, Ложь);
				СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";
							
			КонецПопытки;
				
		Иначе
			
			Если (МассивНайденныхФайлов.Количество() > 0)
				И ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена) Тогда
				
				//файлы то есть но ни один не подходит
				СообщениеДляПользователя = "Возможно дата файлов обмена не превосходит дату последнего файла обмена данными через FTP: " + Строка(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена);
				
				СообщитьИнформациюОбОбмене(СообщениеДляПользователя, СтруктураНастроекОбменаДанными);
				ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, СообщениеДляПользователя, Ложь);				
								
			КонецЕсли;
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";		
		КонецЕсли;
		
	КонецЕсли; // надо читать данные с FTP	
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
		ИЛИ Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда

		ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура подготавливает обмен через почтовый ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными)
	
	
	ТекстОшибок = "";
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		// для ручного режима надо почту получить
		Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска 
			ИЛИ СтруктураНастроекОбменаДанными.ДанныеНастройки.АвтоматическиЗакачиватьПочтуПриОбмене Тогда
			
			СообщитьИнформациюОбОбмене("Получение почтовых сообщений", СтруктураНастроекОбменаДанными);
			
			Попытка
				ИнтернетПочта 	= Новый ИнтернетПочта();
				Профиль 		= Новый ИнтернетПочтовыйПрофиль();  
				ПрофильПолученияПисем = СтруктураНастроекОбменаДанными.УчетнаяЗаписьПриемаОтправкиСообщений;
					
				Профиль.АдресСервераPOP3 	= ПрофильПолученияПисем.АдресСервераPOP3;
				Профиль.АдресСервераSMTP 	= ПрофильПолученияПисем.АдресСервераSMTP;
				Профиль.Пароль 				= ПрофильПолученияПисем.Пароль;
				Профиль.ПарольSMTP 			= ПрофильПолученияПисем.ПарольSMTP;
				Профиль.Пользователь 		= ПрофильПолученияПисем.Пользователь;
				Профиль.ПользовательSMTP 	= ПрофильПолученияПисем.ПользовательSMTP;
				Профиль.ПортPOP3 			= ПрофильПолученияПисем.ПортPOP3;
				Профиль.ПортSMTP 			= ПрофильПолученияПисем.ПортSMTP;
					
				ИнтернетПочта.Подключиться(Профиль);
				Письма = ИнтернетПочта.Выбрать(Истина);
				ИнтернетПочта.Отключиться();
			Исключение
				// проблема при получении писем
				Если ТекстОшибок = "" Тогда
					ТекстОшибок = ОписаниеОшибки();	
				КонецЕсли;
				
			КонецПопытки;
		
			Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при получении почтовых сообщений: " + ТекстОшибок, СтруктураНастроекОбменаДанными, Истина, Ложь);	
			КонецЕсли;			
					
		КонецЕсли;
		
		Для Каждого Письмо Из Письма Цикл
			Если увМониторСопровождения.ПарсингТемы(Письмо.Тема) И Письмо.Вложения.Количество() > 0 Тогда
				Попытка
					Если Прав(Письмо.Вложения[0].Имя,3) = "zip" Тогда
						GUID 		= Новый УникальныйИдентификатор();  
						ИмяФайла1 	= КаталогВременныхФайлов() + "\" + GUID + ".xml";
						Письмо.Вложения[0].Данные.Записать(ИмяФайла1);
						Архив 		= Новый ЧтениеZipФайла(ИмяФайла1, Константы.увПарольДляФайловВыгрузки.Получить()); 
						Архив.Извлечь(Архив.Элементы[0],КаталогВременныхФайлов(),,);
						ИмяФайла = КаталогВременныхФайлов() + Архив.Элементы[0].ПолноеИмя; 
						Архив 		= Неопределено;
					Иначе
						GUID = Новый УникальныйИдентификатор;
						ИмяФайла 	= КаталогВременныхФайлов() + "\" + GUID + ".xml";
						Письмо.Вложения[0].Данные.Записать(ИмяФайла);
					КонецЕсли;
					СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ИмяФайла;
					СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = Письмо.ДатаОтправления;
				Исключение
					СообщитьИнформациюОбОшибкеОбмена("Ошибка при сохранении вложения из письма: " + Письмо.Вложения[0].Имя + ". " + ОписаниеОшибки(), 
						СтруктураНастроекОбменаДанными, Истина, Ложь);	
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; // ПроизводитьПриемСообщений	
		
	// если не указан адрес отправки сообщений, то не формируем результирующий файл
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
		И ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.ПочтовыйАдресПолучателя);
		
	// что то надо делать	
	Если СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена
		ИЛИ Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда

		ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	КонецЕсли;	

КонецПроцедуры

// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПОСЛЕ ОБМЕНА
///////////////////////////////////////////////////////////////////////////////

//Процедура удаляет не нужные файлы после обмена данными
Процедура УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными)
	
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
		И (Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска) Тогда
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена, СтруктураНастроекОбменаДанными, Истина, Ложь);
		
	КонецЕсли;
	
	// временный файл для чтения данных надо грохнуть вне зависимости от результатов чтения
	ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными, , Ложь);
	
КонецПроцедуры

//Функция по структуре возвращает была ли произведена запись данных
Функция ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЗаписиДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	
КонецФункции

//Функция по структуре возвращает было ли произведено чтение данных
Функция ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЧтенияДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
	
КонецФункции


// функция определяет нужно опправлять ответный пакет или нет
Функция ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, НужноПроверитьЧерезПочту)
	
	МаксимальныйДопустимыйРазмерСообщения = ?(НужноПроверитьЧерезПочту, СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПакетаЧерезПочту, 
		СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP);
	
	// нужно предварительно проанализировать что бы размер отправляемого письма не превосходил ограничений
	Если МаксимальныйДопустимыйРазмерСообщения = 0 Тогда
		Возврат Истина;
	КонецЕсли;
			
	// ограничение на размер ответного письма есть, нужно сравнить это значение с размером отправляемого файла
	ФайлДляОправки = Новый Файл(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	Если ФайлДляОправки.Существует() Тогда
				
		РазмерОтправляемогоФайла = ФайлДляОправки.Размер();
				
		Если (РазмерОтправляемогоФайла / 1024) > МаксимальныйДопустимыйРазмерСообщения Тогда
					
			// файл превысил допустимый для отправки размер
			СообщитьИнформациюОбОшибкеОбмена("Ответный пакет не был отправлен. Размер исходящего пакета составил: " + Окр(РазмерОтправляемогоФайла / 1024, 2) + 
				" (КБт) что превышает допустимое ограничение " + МаксимальныйДопустимыйРазмерСообщения + " (КБт)", 
				СтруктураНастроекОбменаДанными, Истина, Истина);
				
			Возврат Ложь;	
					
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции


// Процедура выполняет действия после обмена через файловый ресурс
Процедура ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	// надо файл скопировать обратно из временного каталога в основной			
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ИмяФайла = ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
						
		ИмяФайлаДляЗаписиВКаталогОбмена = СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными + "\" + ИмяФайла;
		
		// копируем файл
		УдачноеКопирование = ВыполнитьКопированиеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаДляЗаписиВКаталогОбмена, Истина, 
			СтруктураНастроекОбменаДанными, Истина);
		
		Если Не УдачноеКопирование Тогда
				
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			
		Иначе
			
			// удаляем не нужный файл обмена
			ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
						
		КонецЕсли;
		
	КонецЕсли;
	
	// удаляем файлы обмена
	УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными);
		
КонецПроцедуры			
			
// Процедура выполняет действия после обмена через FTP ресурс
Процедура ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;

	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		НужноЗаписатьФайлНаFTP = ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, Ложь);
		
		Если НужноЗаписатьФайлНаFTP Тогда
		
			ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
				СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
				ИмяКаталогаСервера, ИмяFTPСервера, Соединение);
				
			Если Не ПроверитьНастройкиПодключения Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФайлаFTPЗаписи = ИмяКаталогаСервера + ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
			
			Попытка
				
				Если ПроверитьНастройкиПодключения Тогда  
					
					ДобавитьИнформациюВПротокол("Копирование файла обмена на FTP ресурс", СтруктураНастроекОбменаДанными.ДанныеПротокола);
	                Соединение.Записать(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаFTPЗаписи);
					
				Иначе	
					СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;	
				КонецЕсли;
				
			Исключение
				
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла на FTP ресурс: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Истина);	
			
			КонецПопытки;
			
		КонецЕсли;	
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
	КонецЕсли;

	// удаляем файлы обмена
	УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными);
				
КонецПроцедуры

// Процедура выполняет действия после обмена через почтовый ресурс
Процедура ДействияПослеОбменаЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными)
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	
	// файл записи изменений надо отправить письмом на нужный адрес
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ДобавитьИнформациюВПротокол("Создание ответного письма", СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		ИмяФайла = ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
		
		ИнтернетПочта 	= Новый ИнтернетПочта();
		Профиль 		= Новый ИнтернетПочтовыйПрофиль();
		ПрофильПодключения = СтруктураНастроекОбменаДанными.ДанныеНастройки.УчетнаяЗаписьПриемаОтправкиСообщений;
					
		Профиль.АдресСервераPOP3 	= ПрофильПодключения.АдресСервераPOP3;
		Профиль.АдресСервераSMTP 	= ПрофильПодключения.АдресСервераSMTP;
		Профиль.Пароль 			 	= ПрофильПодключения.Пароль;
		Профиль.ПарольSMTP 			= ПрофильПодключения.ПарольSMTP;
		Профиль.Пользователь 		= ПрофильПодключения.Пользователь;
		Профиль.ПользовательSMTP 	= ПрофильПодключения.ПользовательSMTP;
		Профиль.ПортPOP3 			= ПрофильПодключения.ПортPOP3;
		Профиль.ПортSMTP 			= ПрофильПодключения.ПортSMTP;
		
		Письмо 						= Новый ИнтернетПочтовоеСообщение();
		Письмо.Вложения.Добавить(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайла); 
		Письмо.Получатели.Добавить(ПрофильПодключения.АдресПолучателя);
		Письмо.ИмяОтправителя 		= Профиль.Пользователь;
		Письмо.Тема 				= "Ответ сервера для " + СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.ИнформационнаяБаза.Код + " от " + ТекущаяДата();
		Письмо.Отправитель			= ПрофильПодключения.АдресОтправителя;

		Попытка
			ИнтернетПочта.Подключиться(Профиль);
			ИнтернетПочта.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать);
			ИнтернетПочта.Отключиться();
		Исключение
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			СтрокаОшибки = ОписаниеОшибки();
			Номер = СтрНайти(СтрокаОшибки,"ь):");
			СообщитьИнформациюОбОбмене("Ошибка при попытке отправить письмо. Текст ошибки: " + Сред(СтрокаОшибки, Номер+4), СтруктураНастроекОбменаДанными);	
		КонецПопытки;
					   
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными);
	КонецЕсли;

	
	// удаляем файлы обмена
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ДобавитьИнформациюВПротокол("Пометка обработанных писем как прочтенные", СтруктураНастроекОбменаДанными.ДанныеПротокола);
		// если все удачно прочитали, то надо письма обмена пометить как прочитанные
		Для Каждого ОбработанноеПисьмо Из СтруктураНастроекОбменаДанными.МассивОбработанныхПисем Цикл
			
			ОбъектПисьмо = ОбработанноеПисьмо.ПолучитьОбъект();
			
			Если ОбъектПисьмо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ОбъектПисьмо.НеРассмотрено = Ложь;
				ОбъектПисьмо.Ответственный = ПараметрыСеанса.ТекущийПользователь; 
				ОбъектПисьмо.Записать();
				
			Исключение
				
				СообщитьИнформациюОбОбмене("Ошибка при попытке пометить письмо: " +
					Строка(ОбъектПисьмо) + " как прочтенное. Текст ошибки: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными);	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// файл обмена по-любому надо грохнуть
	ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбмена, Знач ВыполнятьОбменПриПервомЗапуске) Экспорт
	
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(НастройкаОбмена);	
		
	НаборЗаписейПараметров.Прочитать();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = НастройкаОбмена;
	ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = ВыполнятьОбменПриПервомЗапуске;
	
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());
		
	КонецПопытки;	
		
КонецПроцедуры

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьДоступностьКаталогаДляПроверки(НастройкаОбмена, Знач ДоступностьКаталога) Экспорт

	// устанавливаем у регистра параметров обмена новое значение доступностии каталога
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(НастройкаОбмена);	
		
	НаборЗаписейПараметров.Прочитать();
		
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
		
	ЗаписьПараметров.НастройкаОбменаДанными = НастройкаОбмена;
	ЗаписьПараметров.ДоступностьКаталогаПроверки = ДоступностьКаталога;
			
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры	


// ФУНКЦИЯ ОБМЕНА ДАННЫМИ ПО НАСТРОЙКЕ

Процедура ДобавитьТехническуюИнформацияВСообщение(СокращенноеСообщение, СообщениеСТехИнформацией)
	
	Если СокращенноеСообщение = СообщениеСТехИнформацией Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоСтрокВСокращенномСообщении = СтрЧислоСтрок(СокращенноеСообщение);
	ЧислоСтрокВРасширенномСообщении = СтрЧислоСтрок(СообщениеСТехИнформацией);
	
	ИтоговаяРасширеннаяСтрока = "";
	
	Для Счетчик = 1 По Мин(ЧислоСтрокВСокращенномСообщении, ЧислоСтрокВРасширенномСообщении) Цикл
		
    	ТекСтрокаСокр = СтрПолучитьСтроку(СокращенноеСообщение, Счетчик);
		ТекСтрокаРасшир = СтрПолучитьСтроку(СообщениеСТехИнформацией, Счетчик);
		
		Если ТекСтрокаСокр <> ТекСтрокаРасшир Тогда
			
			ИтоговаяРасширеннаяСтрока = ИтоговаяРасширеннаяСтрока + Символы.ПС + ТекСтрокаРасшир;
			
		КонецЕсли;
   		
	КонецЦикла;
	
	Для Счетчик = ЧислоСтрокВСокращенномСообщении + 1 По ЧислоСтрокВРасширенномСообщении Цикл
		
		ТекСтрокаРасшир = СтрПолучитьСтроку(СообщениеСТехИнформацией, Счетчик);
		ИтоговаяРасширеннаяСтрока = ИтоговаяРасширеннаяСтрока + Символы.ПС + ТекСтрокаРасшир;
		
	КонецЦикла;
	
	СокращенноеСообщение = СокращенноеСообщение + Символы.ПС + Символы.ПС + "Техническая информация:" + ИтоговаяРасширеннаяСтрока;	
	
КонецПроцедуры

// регистрирует что обмен был произведен и фиксирует информацию в протоколе
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураДанныхНастройкиОбмена, Знач СтрокаСообщенияОбОшибке = "", 
	Знач НеВыводитьИнформациюПользователю = Ложь, ОбработкаОбменаПриемника = Неопределено)
	
	Если Не ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);
		Иначе
			СообщитьИнформациюОбОшибкеОбмена(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	ИтоговыйКомментарийПриВыгрузкеДанных = СформироватьТекстСообщения(СокрЛП(СтрокаСообщенияОбОшибке));
	ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста = СокрЛП(СтрокаСообщенияОбОшибке);
	
	ДатаПоследнегоОбмена = ТекущаяДата();
	СтруктураДанныхНастройкиОбмена.Вставить("ДатаПоследнегоОбмена", ДатаПоследнегоОбмена);
	СсылкаНаНастройкуОбмена = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка;
	// записываем в объект дату последнего обмена
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(СсылкаНаНастройкуОбмена);	
	
	НаборЗаписейПараметров.Прочитать();
	
	НаборЗаписейИстории = РегистрыСведений.ИсторияОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписейИстории.Отбор.УзелИнформационнойБазы.Установить(СтруктураДанныхНастройкиОбмена.ДанныеНастройки.УзелИнформационнойБазы);
	НаборЗаписейИстории.Отбор.Период.Установить(ДатаПоследнегоОбмена);
	
	СтрокаИстории = НаборЗаписейИстории.Добавить();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = СсылкаНаНастройкуОбмена;
	ЗаписьПараметров.ДатаПоследнегоОбмена = ДатаПоследнегоОбмена;
	
	СтрокаИстории.УзелИнформационнойБазы = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.УзелИнформационнойБазы;
	СтрокаИстории.Период = ДатаПоследнегоОбмена;
		
	// дата и результат последней выгрузки и загрузки
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЧтенияИзменений) Тогда
						
		СтрокаИстории.ДатаПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки;	
		СтрокаИстории.ДатаНачалаПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.ДатаНачалаЗагрузки;
		СтрокаИстории.РезультатПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.РезультатЧтенияДанных;
		
		РезультатОтложенныхДвиженийДокументов = Неопределено;
		СтруктураДанныхНастройкиОбмена.Свойство("РезультатОтложенныхДвиженийДокументов", РезультатОтложенныхДвиженийДокументов);
		
		СтрокаИстории.РезультатОтложенныхДвиженийДокументов = РезультатОтложенныхДвиженийДокументов;
		
		ОбъектовФонОбмена = Неопределено;
		Если СтруктураДанныхНастройкиОбмена.Свойство("ПолученоОбъектовФоновогоОбмена", ОбъектовФонОбмена) Тогда
			
			СтрокаИстории.НаличиеДанныхФоновойЗагрузки = ОбъектовФонОбмена > 0;
			
		КонецЕсли;
		
		КомментарийПриЗагрузкеДанных = "";
		Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриЗагрузкеДанных", КомментарийПриЗагрузкеДанных) Тогда
			
			СтрокаИстории.КомментарийКЗагрузкеДанных = СформироватьТекстСообщения(СокрЛП(КомментарийПриЗагрузкеДанных));
			
			Если Не ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных) 
				И Не ПустаяСтрока(КомментарийПриЗагрузкеДанных) Тогда
				
				ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКЗагрузкеДанных, КомментарийПриЗагрузкеДанных);
								
			КонецЕсли;
			
			КоличествоЗагруженныхОбъектов = 0;
			Если ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных)
				И СтруктураДанныхНастройкиОбмена.Свойство("КоличествоЗагруженныхОбъектов", КоличествоЗагруженныхОбъектов) Тогда
				
				СтрокаИстории.КомментарийКЗагрузкеДанных = "Успешно загружено объектов: " + Строка(КоличествоЗагруженныхОбъектов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаИстории.РезультатОтложенныхДвиженийДокументов = Неопределено;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЗаписиИзменений) Тогда
						
		СтрокаИстории.ДатаПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки;	
		СтрокаИстории.ДатаНачалаПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.ДатаНачалаВыгрузки;
		СтрокаИстории.РезультатПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.РезультатЗаписиДанных;
		
		КомментарийПриВыгрузкеДанных = "";
		Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриВыгрузкеДанных", КомментарийПриВыгрузкеДанных) Тогда
			
			ИтоговыйКомментарийПриВыгрузкеДанных = СокрЛП(ИтоговыйКомментарийПриВыгрузкеДанных + Символы.ПС + СформироватьТекстСообщения(СокрЛП(КомментарийПриВыгрузкеДанных)));
			ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста = СокрЛП(ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста + Символы.ПС + СокрЛП(КомментарийПриВыгрузкеДанных));
			
			КоличествоВыгруженныхОбъектов = 0;
			Если ПустаяСтрока(ИтоговыйКомментарийПриВыгрузкеДанных)
				И СтруктураДанныхНастройкиОбмена.Свойство("КоличествоВыгруженныхОбъектов", КоличествоВыгруженныхОбъектов) Тогда
				
				Если КоличествоВыгруженныхОбъектов <> 0 Тогда
					ИтоговыйКомментарийПриВыгрузкеДанных = "Успешно выгружено объектов: " + Строка(КоличествоВыгруженныхОбъектов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаИстории.КомментарийКВыгрузкеДанных = ИтоговыйКомментарийПриВыгрузкеДанных;
	Если Не ПустаяСтрока(СтрокаИстории.КомментарийКВыгрузкеДанных) 
		И Не ПустаяСтрока(ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста) Тогда
				
		ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКВыгрузкеДанных, ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста);
				
	КонецЕсли;
	
	КомментарийПриВыполненииОтложенныхДвижений = "";
	КоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
	Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриВыполненииОтложенныхДвижений", КомментарийПриВыполненииОтложенныхДвижений) Тогда
			
		СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов = СокрЛП(КомментарийПриВыполненииОтложенныхДвижений);
		
	ИначеЕсли СтруктураДанныхНастройкиОбмена.Свойство("КоличествоВыполненныхОтложенныхДвиженийДокументов", КоличествоВыполненныхОтложенныхДвиженийДокументов) Тогда
		
		Если КоличествоВыполненныхОтложенныхДвиженийДокументов <> 0 Тогда
			
			СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов = "Успешно выполнено движения для документов: " + Строка(КоличествоВыполненныхОтложенныхДвиженийДокументов);	
			
		КонецЕсли;		
		
	КонецЕсли;
			
	// записываем дату последнего файла обмена только в том случае, если обмен произошел успешно
	УдачноеЧтение = ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураДанныхНастройкиОбмена);
	Если УдачноеЧтение Тогда
		ЗаписьПараметров.ДатаПоследнегоФайлаОбмена = СтруктураДанныхНастройкиОбмена.ДатаПоследнегоФайлаОбмена;
	КонецЕсли;
	
	ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = Ложь;
	ЗаписьПараметров.ДоступностьКаталогаПроверки = СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки;
			
	Попытка
		
		НаборЗаписейПараметров.Записать();
		НаборЗаписейИстории.Записать();
		
		Если ОбработкаОбменаПриемника <> Неопределено Тогда
			
			СтруктураИстории = Новый Структура();
			
			СтрокаИстории = НаборЗаписейИстории[0];
			
			СтруктураИстории.Вставить("Период", СтрокаИстории.Период);
		    СтруктураИстории.Вставить("ДатаПоследнейЗагрузки", СтрокаИстории.ДатаПоследнейЗагрузки);
			СтруктураИстории.Вставить("ДатаПоследнейВыгрузки", СтрокаИстории.ДатаПоследнейВыгрузки);
			СтруктураИстории.Вставить("РезультатПоследнейЗагрузки", СтрокаИстории.РезультатПоследнейЗагрузки);
			СтруктураИстории.Вставить("РезультатПоследнейВыгрузки", СтрокаИстории.РезультатПоследнейВыгрузки);
			СтруктураИстории.Вставить("РезультатОтложенныхДвиженийДокументов", СтрокаИстории.РезультатОтложенныхДвиженийДокументов);
			СтруктураИстории.Вставить("НаличиеДанныхФоновойЗагрузки", СтрокаИстории.НаличиеДанныхФоновойЗагрузки);
			СтруктураИстории.Вставить("КомментарийКЗагрузкеДанных", СтрокаИстории.КомментарийКЗагрузкеДанных);
			СтруктураИстории.Вставить("КомментарийКВыгрузкеДанных", СтрокаИстории.КомментарийКВыгрузкеДанных);
			СтруктураИстории.Вставить("КомментарийКОтложенномуДвижениюДокументов", СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов);
			СтруктураИстории.Вставить("ДатаНачалаПоследнейЗагрузки", СтрокаИстории.ДатаНачалаПоследнейЗагрузки);
			СтруктураИстории.Вставить("ДатаНачалаПоследнейВыгрузки", СтрокаИстории.ДатаНачалаПоследнейВыгрузки);
			
			ОбработкаОбменаПриемника.ЗаписатьДанныеВПротоколОбменаЧерезCOMСоединение(СтруктураИстории);
			
		КонецЕсли;
		
	Исключение
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол("Ошибка при записи изменений в настройку обмена """ + СсылкаНаНастройкуОбмена + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);	
		Иначе	
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений в настройку обмена """ + СсылкаНаНастройкуОбмена + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена, Истина, Истина);
		КонецЕсли;	
		
	КонецПопытки;	
		
	// надо изменения отразить в обработке автоматического поиска
	Если СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными <> Неопределено Тогда
		
		СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными.ОбновитьИнформациюОНастройкахОбмена(СтруктураДанныхНастройкиОбмена.ДанныеНастройки, 
			ДатаПоследнегоОбмена, СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки);
			
	КонецЕсли;
	
	ЗаписатьДанныеПротокола(СтруктураДанныхНастройкиОбмена.ДанныеНастройки, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, НЕ ПустаяСтрока(СтрокаСообщенияОбОшибке));
	
	ИзменитьВремяПаузыПовтораРегламентногоЗадания(СтруктураДанныхНастройкиОбмена);
	
	#Если Клиент Тогда
	Если СтруктураДанныхНастройкиОбмена.РучнойРежимЗапуска Тогда
		
		// для On Line обменов показываем отдельную форму завершения обмена
		ФормаПоказа = ПолучитьОбщуюФорму("ФормаРезультатOnLineОбмена");
		ФормаПоказа.НаборЗаписейИстории = НаборЗаписейИстории;
		ФормаПоказа.Открыть();
		
	КонецЕсли;
	#КонецЕсли
    	
КонецПроцедуры

// Процедура корректирует паузу перед запуском регламентного задания
Процедура ИзменитьВремяПаузыПовтораРегламентногоЗадания(СтруктураНастроекОбменаДанными)

	// изменяем время только при автообмене
	Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
		ИЛИ НЕ СтруктураНастроекОбменаДанными.ДанныеНастройки.ДинамическиИзменятьИнтервалМеждуОбменами Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущееРегламентноеЗадание = СтруктураНастроекОбменаДанными.ДанныеНастройки.НайтиРегламентноеЗаданиеПоНастройке();
	Исключение
		Возврат;
	КонецПопытки;

	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = ТекущееРегламентноеЗадание.Расписание;
	
	Если РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 0 Тогда
		Возврат;
	КонецЕсли;

	ДатаНачалаПоследнегоОбмена = Неопределено;
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными) Тогда
		ДатаНачалаПоследнегоОбмена = СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки;
	ИначеЕсли ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		ДатаНачалаПоследнегоОбмена = СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПоследнегоОбмена) Тогда
		ДатаНачалаПоследнегоОбмена = СтруктураНастроекОбменаДанными.ДатаПоследнегоОбмена;
	КонецЕсли;

	ПродолжительностьПоследнегоОбмена = ТекущаяДата() - ДатаНачалаПоследнегоОбмена;
	
	НовоеЗначениеПаузыПовтора = ПродолжительностьПоследнегоОбмена + Окр(РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня / 2, 0);
	
	РасписаниеРегламентногоЗадания.ПаузаПовтора = НовоеЗначениеПаузыПовтора;
	
	Попытка
		ТекущееРегламентноеЗадание.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры

// Процедура возвращает параметры для обмена
Процедура ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене)
	
	// получаем узел информационной базы плана обмена
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы);
	МетаданныеУзлаОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Метаданные();
	
	СтрокаОписанияЗапуска = ?(СтруктураНастроекОбменаДанными.РучнойРежимЗапуска, "в интерактивном режиме", "в автоматическом режиме");
	СтрокаИнформацияОбОбмене = "обмена данными " + СтрокаОписанияЗапуска + " для плана обмена """ + ИмяПланаОбмена + """ узла """ + СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Наименование + """";
	
КонецПроцедуры

//Функция проводит необходимые действия перед началом обмена данными
// возвращает нужно ли производить обмен или нет
Функция ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными)
	
	// если это автообмен надо проверить выполнение доп.условий
	Если НЕ СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
		
		Если Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена) Тогда
			
			// наличие каталога 
			НаличиеКаталога = ПроверитьНаличиеКаталога(СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена, Истина);
			
			Если Не НаличиеКаталога Тогда
				
				ДобавитьИнформациюВПротокол(Символы.ПС, СтруктураНастроекОбменаДанными.ДанныеПротокола);
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Для автообмена не выполнено условие наличия каталога: " + 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена, Истина);
				Возврат Ложь;
				
			Иначе
				
				ДобавитьИнформациюВПротокол("Выполнено условие наличия каталога: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.НаличиеКаталогаДляЗапускаАвтообмена,
					СтруктураНастроекОбменаДанными.ДанныеПротокола);	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена) Тогда
			
			// наличие каталога 
			НаличиеКаталога = ПроверитьНаличиеКаталога(СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена, Истина);
			
			Если НаличиеКаталога Тогда
				
				ДобавитьИнформациюВПротокол(Символы.ПС, СтруктураНастроекОбменаДанными.ДанныеПротокола);
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Для автообмена не выполнено условие отсутствия каталога: " + 
					СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена, Истина);
				Возврат Ложь;
				
			Иначе	
				
				ДобавитьИнформациюВПротокол("Выполнено условие отсутствия каталога: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ОтсутствиеКаталогаДляЗапускаАвтообмена,
					СтруктураНастроекОбменаДанными.ДанныеПротокола);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СообщитьИнформациюОбОбмене(Символы.ПС, СтруктураНастроекОбменаДанными);
			
	// информация об обмене данными
	Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
			
		СтрокаЗаписиВЛогПриНачалеОбмена = "Начат обмен данными";
			
	Иначе
			
		Если НЕ СтруктураНастроекОбменаДанными.ОбменПриВходеВПрограмму Тогда
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными";
		Иначе
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными при первом входе в программу";
		КонецЕсли;
			
	КонецЕсли;	
		
	СтрокаЗаписиВЛогПриНачалеОбмена = СтрокаЗаписиВЛогПриНачалеОбмена + " по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").";	
		
	СообщитьИнформациюОбОбмене(СтрокаЗаписиВЛогПриНачалеОбмена, СтруктураНастроекОбменаДанными);
			
	#Если Клиент Тогда
			
		Если НЕ СтруктураНастроекОбменаДанными.ОбменПриВходеВПрограмму Тогда
				
			// для автоматического режима запуска обмена спрашиваем хочет ли он произвести этот обмен
			Если Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
				И СтруктураНастроекОбменаДанными.ДанныеНастройки.ВопросПриАвтообмене Тогда
					           			
				ОтветПользователя = Вопрос("Вы хотите автоматически произвести обмен данными по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки.ссылка) + """?",
					РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.ДА, "Обмен данными");							
				
				Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
							
					// пользователь не хочет производить обмен
					ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Обмен данными отменен пользователем!");
					Возврат Ложь;
						
				Иначе
					// пользователь согласился выполнять обмен			
					ДобавитьИнформациюВПротокол("Пользователь положительно ответил на вопрос о проведении автоматического обмена", СтруктураНастроекОбменаДанными.ДанныеПротокола);
						
				КонецЕсли;	
						
			КонецЕсли;
				
		КонецЕсли;	
			
	#КонецЕсли	
		
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы) Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не задан узел информационной базы с которым нужно производить обмен информацией! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
		
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных 
		И НЕ СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не взведены флаги загрузки и выгрузки данных! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	СтруктураНастроекОбменаДанными.Вставить("ТекущийУзелПланаОбмена", ПланыОбмена[МетаданныеУзлаОбмена.Имя].ЭтотУзел());
		
	// сами с собой не обмениваемся
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы = СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными с текущим узлом информационной базы! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	// у узлов участвующих в обмене должен быть не пустой код
	Если ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Код)) 
		ИЛИ ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена.Код)) Тогда
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными когда один из узлов обмена имеет пустой код! Обмен отменен.");
		Возврат Ложь;
		
	КонецЕсли;
	
	// записываем в журнал данные о начале обмена данными
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.АвтоматическийОбменДанными", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, "Начало " + СтрокаИнформацияОбОбмене);
	
	Возврат Истина;
	
КонецФункции

Процедура ПроверитьРежимВыполненияОбменаДанными(СтруктураНастроекОбменаДанными)
	
	Попытка
		
		НуженУстановитьФоновыйРежим  = Ложь;
		НаличиеВыгрузокИлиЗагрузок = Ложь;
		
		Если ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки)
			И НЕ ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
			И СтруктураНастроекОбменаДанными.РезультатЧтенияДанных Тогда
			
			НуженУстановитьФоновыйРежим = (СтруктураНастроекОбменаДанными.ПереданоОбъектовФоновогоОбмена > 0);
			НаличиеВыгрузокИлиЗагрузок = Истина;
						
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки)
			И НЕ ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений)
			И СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда
			
			НуженУстановитьФоновыйРежим = НуженУстановитьФоновыйРежим ИЛИ (СтруктураНастроекОбменаДанными.ПолученоОбъектовФоновогоОбмена > 0);
			НаличиеВыгрузокИлиЗагрузок = Истина;
			
		КонецЕсли;
		
		Если Не НаличиеВыгрузокИлиЗагрузок Тогда
			Возврат;
		КонецЕсли;
		
		// посмотрим есть ли
		СтруктураНастроекОбменаДанными.ДанныеНастройки.УстановитьРежимРегламетныхЗадач(НуженУстановитьФоновыйРежим);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//функция выполняется после завершения обменом данными
Функция ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника = Неопределено)
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	// отмечаем то что обмен произведен
	
	СообщитьИнформациюОбОбмене("Обмен данными по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ завершен (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").", 
		СтруктураНастроекОбменаДанными);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, , , ОбработкаОбменаПриемника);
	
	Попытка
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Обмен данными завершен", 5);	
	Исключение
	КонецПопытки;
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен
		И СтруктураНастроекОбменаДанными.РучнойРежимЗапуска = Ложь  Тогда
		
		ПроверитьРежимВыполненияОбменаДанными(СтруктураНастроекОбменаДанными); 
		
	КонецЕсли;	
	
	// записываем в журнал данные об окончании обмена данными
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.АвтоматическийОбменДанными", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, "Окончание " + СтрокаИнформацияОбОбмене);	
			
	ЗаписатьДанныеПротокола(СтруктураНастроекОбменаДанными.ДанныеНастройки, СтруктураНастроекОбменаДанными.ДанныеПротокола, Ложь);
		
	ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьОбычныйОбменДанными(СтруктураНастроекОбменаДанными)
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
				
		СтруктураНастроекОбменаДанными.Вставить("КаталогПроведенияОбменаДанными", "");
		СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
		ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
		
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
		ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
		
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
		
		СтруктураНастроекОбменаДанными.Вставить("МассивОбработанныхПисем", Новый Массив());
		ПодготовитьОбменЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// файл для записи изменений
	Если СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена Тогда 
		
		СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений = ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными);
		
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
			
			УстановитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ".zip");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если ничего делать не надо, то выходим вообще
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
		И ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Ни загрузка ни выгрузка данных не были произведены", СтруктураНастроекОбменаДанными);
		ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными);
		Возврат;
		
	КонецЕсли;
				
	// САМ ОБМЕН ДАННЫМИ
	ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными);
	ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными);
							
	// ДЕЙСТВИЯ ПОСЛЕ ОБМЕНА
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
			
		ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
				
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
			
		ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
			
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
			
		ДействияПослеОбменаЧерезПочтовыйРесурс(СтруктураНастроекОбменаДанными);
			
	КонецЕсли;
	
	Если Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
		И СтруктураНастроекОбменаДанными.ДоступностьФайла = Истина Тогда
		
		// нет ли обновления конфигурации по РИБ
		КонфигурацияПриОбменеРИБИзменена = Ложь;
		СтруктураНастроекОбменаДанными.Свойство("КонфигурацияПриОбменеРИБИзменена", КонфигурацияПриОбменеРИБИзменена);
		
		Если КонфигурацияПриОбменеРИБИзменена = Неопределено
			ИЛИ КонфигурацияПриОбменеРИБИзменена = Ложь Тогда
			
			ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ВыполнятьОбменПриПоявленииФайла, СтруктураНастроекОбменаДанными, , Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбменаДаннымиXML, ДанныеНастройки) Экспорт
	
	ОбработкаОбменаДаннымиXML.ТипИнформационнойБазыДляПодключения = ДанныеНастройки.ТипИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.КаталогИнформационнойБазыДляПодключения = ДанныеНастройки.КаталогИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ИмяСервераИнформационнойБазыДляПодключения = ДанныеНастройки.ИмяСервераИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ИмяИнформационнойБазыНаСервереДляПодключения = ДанныеНастройки.ИмяИнформационнойБазыНаСервереДляПодключения;
	ОбработкаОбменаДаннымиXML.АутентификацияWindowsИнформационнойБазыДляПодключения = ДанныеНастройки.АутентификацияWindowsИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ПользовательИнформационнойБазыДляПодключения = ДанныеНастройки.ПользовательИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ПарольИнформационнойБазыДляПодключения = ДанныеНастройки.ПарольИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ВерсияПлатформыИнформационнойБазыДляПодключения = ДанныеНастройки.ВерсияПлатформыИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Функция СформироватьЕдиныйКоментарий(ОбработкаОбмена, ИнформацияОбОшибкеВыполнения)
	
	Если ОбработкаОбмена = Неопределено Тогда
		Возврат ИнформацияОбОшибкеВыполнения;
	КонецЕсли;
	
	Комментарий = СокрЛП(ОбработкаОбмена.КомментарийПриВыгрузкеДанных + Символы.ПС + ОбработкаОбмена.КомментарийПриЗагрузкеДанных);	
	
	Если ОбработкаОбмена.мОбработкаДляЗагрузкиДанных <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриВыгрузкеДанных)
			ИЛИ ЗначениеЗаполнено(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных) Тогда
			
			Комментарий = Комментарий + Символы.ПС + "Сообщение информационной базы с которой организован обмен:" + Символы.ПС +
				СокрЛП(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриВыгрузкеДанных + Символы.ПС + ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Возврат ИнформацияОбОшибкеВыполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИнформацияОбОшибкеВыполнения) Тогда
		Возврат Комментарий;
	КонецЕсли;
	
	Возврат Комментарий + Символы.ПС + "ОШИБКА:" + Символы.ПС + ИнформацияОбОшибкеВыполнения;
	
КонецФункции

Процедура ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, Комментарий, ЭтоВыгрузкаДанных = Истина)
	
	Если СтруктураНастроекОбменаДанными = Неопределено
		ИЛИ ПустаяСтрока(Комментарий) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийКоммнетарий = "";
	Если ЭтоВыгрузкаДанных Тогда
		СтруктураНастроекОбменаДанными.Свойство("КомментарийПриВыгрузкеДанных", ТекущийКоммнетарий);
	Иначе
		СтруктураНастроекОбменаДанными.Свойство("КомментарийПриЗагрузкеДанных", ТекущийКоммнетарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийКоммнетарий) Тогда
		ТекущийКоммнетарий = ТекущийКоммнетарий + Символы.ПС + Комментарий;
	Иначе
		ТекущийКоммнетарий = Комментарий;
	КонецЕсли;
	
	Если ЭтоВыгрузкаДанных Тогда
		СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыгрузкеДанных", ТекущийКоммнетарий);
	Иначе
		СтруктураНастроекОбменаДанными.Вставить("КомментарийПриЗагрузкеДанных", ТекущийКоммнетарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиЧерезComСоединение(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника = Неопределено)
	
	СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "";
	СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике = "";
	
	РезультатВыполненияОтложенныхДвижений = Неопределено;
	РезультатВыполненияОтложенныхДвиженийВПриемнике = Неопределено;
	
	ПроизводитьЧтениеДанных = СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных;
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	
	СтруктураНастроекОбменаДанными.ДатаНачалаВыгрузки = ТекущаяДата();
	
	ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	
	ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
	УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ДанныеНастройки);
	
	// устанавливаем соm-соединение
	УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ДанныеНастройки);
	
	ОбработкаОбменаДаннымиXML.НепосредственноеЧтениеВИБПриемнике = Истина;
	
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в информационную базу - приемник", 10);
	
	// выгрузка из текущей ИБ в приемник
	СтрокаСообщенияОбОшибке = "";
	УспешнаяВыгрузкаИзИсточника = ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузку(НЕ ПроизводитьЧтениеДанных, СтрокаСообщенияОбОшибке, 
		СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике, 
		СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
	
	Если Не ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике) Тогда
		
		РезультатВыполненияОтложенныхДвиженийВПриемнике = Ложь;
		
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипИнформационнойБазыДляПодключения = Истина Тогда
			
			// приемник - файловая ИБ
			СтрокаПараметровПодключенияКПриемнику = "Каталог информационной базы: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.КаталогИнформационнойБазыДляПодключения;
			
		Иначе
			
			// приемник - клиент серверная ИБ
			СтрокаПараметровПодключенияКПриемнику = "Имя сервера: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ИмяСервераИнформационнойБазыДляПодключения + 
				", Имя информационной базы: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ИмяИнформационнойБазыНаСервереДляПодключения;
			
		КонецЕсли;
		
		
		СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике = "Отложенные движения документов в информационной базе ПРИЕМНИКЕ:" + Символы.ПС + 
			"Подключение к информационной базе ПРИЕМНИКА: " + СтрокаПараметровПодключенияКПриемнику + Символы.ПС + 
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике;
		
	КонецЕсли;
	
	КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
	ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
		
	СтруктураНастроекОбменаДанными.Вставить("ПереданоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПереданоОбъектовФоновогоОбмена);
	СтруктураНастроекОбменаДанными.Вставить("КоличествоВыгруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикВыгруженныхОбъектов);
	
	СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки = ТекущаяДата();
	
	СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений = "1";
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = УспешнаяВыгрузкаИзИсточника;
	
	Если ПроизводитьЧтениеДанных Тогда
			
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед загрузкой данных", 40);
		
		// выгрузка из приемника в текущую ИБ
		ОбработкаОбменаПриемника = ОбработкаОбменаДаннымиXML.мОбработкаДляЗагрузкиДанных;
		
		Если ОбработкаОбменаПриемника = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаОбменаПриемника.УзелДляОбмена = ОбработкаОбменаПриемника.УзелОбменаЗагрузкаДанных;
		ОбработкаОбменаПриемника.УзелДляФоновогоОбмена = ОбработкаОбменаПриемника.УзелОбменаЗагрузкаФоновыхДанных;
		
		УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаПриемника, СтруктураНастроекОбменаДанными.ДанныеНастройки, Ложь);
		
		ОбработкаОбменаПриемника.мОбработкаДляЗагрузкиДанных = ОбработкаОбменаДаннымиXML;
		
		СтрокаСообщенияОбОшибке = "";
		
		РезультатПодключения = ОбработкаОбменаПриемника.ВыполнитьПодключениеКИБПриемнику(ОбработкаОбменаПриемника.мОбработкаДляЗагрузкиДанных, СтрокаСообщенияОбОшибке);
		
		Если РезультатПодключения = Неопределено Тогда
			
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, СтрокаСообщенияОбОшибке, Ложь);
			Возврат;
			
		КонецЕсли;
		
		ОбработкаОбменаПриемника.НепосредственноеЧтениеВИБПриемнике = Истина;
		ОбработкаОбменаПриемника.ДописыватьДанныеВПротоколОбмена = Истина;
		
		СтруктураНастроекОбменаДанными.ДатаНачалаЗагрузки = ТекущаяДата();
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из информационной базы - источника", 5);
		
		СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "";
		УспешнаяВыгрузкаИзПриемника = ОбработкаОбменаПриемника.ВыполнитьВыгрузку(Истина, СтрокаСообщенияОбОшибке, 
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов, 
			СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
		
		Если Не ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов) Тогда
		
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "Отложенные движения документов в этой информационной базе:" + Символы.ПС + СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
			
		КонецЕсли;
		
		РезультатВыполненияОтложенныхДвижений = ОбработкаОбменаДаннымиXML.РезультатВыполненияОтложенныхДвижений;
		
		КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
		СтруктураНастроекОбменаДанными.Вставить("ПолученоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПолученоОбъектовФоновогоОбмена);
		СтруктураНастроекОбменаДанными.Вставить("КоличествоВыполненныхОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.мКоличествоВыполненныхОтложенныхДвиженийДокументов);
		СтруктураНастроекОбменаДанными.Вставить("КоличествоЗагруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикЗагруженныхОбъектов);
								
		СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки = ТекущаяДата();
		
		СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = УспешнаяВыгрузкаИзПриемника;
						
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "1";
	
	Если ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике) Тогда
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
	ИначеЕсли ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов) Тогда
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике;
	Иначе
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике + Символы.ПС + СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыполненииОтложенныхДвижений", ИтоговыйКомментарийПриОтложенномДвиженииДокументов);
	
	ИтоговыйРезультатОтложенныхДвижений = Неопределено;
	Если РезультатВыполненияОтложенныхДвиженийВПриемнике = Неопределено Тогда
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвижений;
	ИначеЕсли РезультатВыполненияОтложенныхДвижений = Неопределено Тогда
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвиженийВПриемнике;
	Иначе
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвижений И РезультатВыполненияОтложенныхДвиженийВПриемнике;	
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.Вставить("РезультатОтложенныхДвиженийДокументов", ИтоговыйРезультатОтложенныхДвижений);
		
 	ОптравитьСообщениеОбОшибкеДействийСОтложеннымПроведениемДокументов(СтруктураНастроекОбменаДанными, ИтоговыйКомментарийПриОтложенномДвиженииДокументов);
	
КонецПроцедуры

// Процедура поизводит обмен данными по настройке обмена
Процедура ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбменаДанными)
	
	// начальные функции инициализации обмена
	РезультатаНачалаОбмена = ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными);
	Если Не РезультатаНачалаОбмена Тогда
		Возврат;
	КонецЕсли;
	
	// ВЫПОЛНЕНИЕ ОБМЕНА ДАННЫМИ
	ОбработкаОбменаПриемника = Неопределено;
	Попытка
		
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен
			И СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			// обмен через com соединение
			// выполняем и выгрузку и загрузку данных
			ВыполнитьОбменДаннымиЧерезComСоединение(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника);
			
		Иначе
		
 	    	ВыполнитьОбычныйОбменДанными(СтруктураНастроекОбменаДанными);    
			
		КонецЕсли;
		
		// оставшееся действия после обмена данными выполняем
		ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника);
				
	Исключение
		
		СтрокаОписанияОшибки = ОписаниеОшибки();
		// отмечаем то что обмен произведен
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, СтрокаОписанияОшибки, , ОбработкаОбменаПриемника);
		
		ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
		
		ОбработкаОбменаПриемника = Неопределено;
		
		// прокидываем ошибку дальше
		ВызватьИсключение СтрокаОписанияОшибки;
		
	КонецПопытки;
	
	ОбработкаОбменаПриемника = Неопределено;
		
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

Процедура ОтправитьСообщениеОбОшибкеПриПредыдущемВыполнении(СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.РучнойРежимЗапуска Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНастройки = СтруктураНастроекОбмена.ДанныеНастройки;
	
	Попытка
		ТекущееРегламентноеЗадание = ОбъектНастройки.НайтиРегламентноеЗаданиеПоНастройке();
	Исключение
		Возврат;
	КонецПопытки;

	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Попытка

		СтрокаСообщенияОбОшибке = "";
		СтруктураОтбора = Новый Структура("РегламентноеЗадание", ТекущееРегламентноеЗадание);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
		
		Если Фоновые.Количество() < 2
			ИЛИ Фоновые[1].ИнформацияОбОшибке = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		СтрокаСообщенияОбОшибке = Фоновые[1].ИнформацияОбОшибке.Описание;
		Если ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
			Возврат;
		КонецЕсли;
		
		ОтправитьСообщениеОбОшибкеОбменаПриНеобходимости(СтруктураНастроекОбмена, Истина, СтрокаСообщенияОбОшибке);
				
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры

Функция ПолучитьСтруктуруХраненияИнформацииОбОбмене(ОбъектНастройки, РучнойРежимЗапуска, ОбработкаАвтоОбменДанными, 
	ОбменПриВходеВПрограмму, СоответствиеТекстовЭлектронныхПисем)
	
	СтруктураНастроекОбмена = Новый Структура();
	СтруктураНастроекОбмена.Вставить("ДанныеНастройки", ОбъектНастройки);
	СтруктураНастроекОбмена.Вставить("РучнойРежимЗапуска", РучнойРежимЗапуска);
	СтруктураНастроекОбмена.Вставить("ОбработкаАвтоОбменДанными", ОбработкаАвтоОбменДанными);
	СтруктураНастроекОбмена.Вставить("ОбменПриВходеВПрограмму", ОбменПриВходеВПрограмму);
	СтруктураНастроекОбмена.Вставить("СоответствиеТекстовЭлектронныхПисем", СоответствиеТекстовЭлектронныхПисем);
	СтруктураНастроекОбмена.Вставить("ПроизводитьЧтениеДанных", ОбъектНастройки.ПроизводитьПриемСообщений);
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьДанных", ОбъектНастройки.ПроизводитьОтправкуСообщений);
	
	СтруктураНастроекОбмена.Вставить("ВывестиИнформациюОбОшибкеВОкноСообщений", РучнойРежимЗапуска ИЛИ ОбъектНастройки.ВыводитьСообщенияОбОшибкахПриАвтоматическомОбменеДанными);
	СтруктураНастроекОбмена.Вставить("ВывестиИнформациюВОкноСообщений", РучнойРежимЗапуска ИЛИ ОбъектНастройки.ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными);
	
	ДоступностьКаталога = Неопределено;
	Если Не ПустаяСтрока(ОбъектНастройки.КаталогПроверкиДоступности) Тогда
		
		ДоступностьКаталога = ПроверитьНаличиеКаталога(ОбъектНастройки.КаталогПроверкиДоступности);
					
	КонецЕсли;	
	СтруктураНастроекОбмена.Вставить("ДоступностьКаталогаПроверки", ДоступностьКаталога);	
	
	ДоступностьФайла = Неопределено;
	Если Не ПустаяСтрока(ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла) Тогда
		
		ДоступностьФайла = ПроверитьНаличиеКаталога(ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла);
					
	КонецЕсли;	
	СтруктураНастроекОбмена.Вставить("ДоступностьФайла", ДоступностьФайла);
	СтруктураНастроекОбмена.Вставить("ВыполнятьОбменПриПоявленииФайла", ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла);
	
	СтруктураНастроекОбмена.Вставить("ДанныеПротокола", "");
	СтруктураНастроекОбмена.Вставить("ДатаПоследнегоФайлаОбмена", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаНачалаЗагрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаНачалаВыгрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаПоследнейЗагрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаПоследнейВыгрузки", Неопределено);
	
	СтруктураНастроекОбмена.Вставить("ИмяФайлаЧтенияИзменений", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаЗаписиИзменений", "");
	СтруктураНастроекОбмена.Вставить("РезультатЧтенияДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("РезультатЗаписиДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("КомментарийПриЗагрузкеДанных", "");
	СтруктураНастроекОбмена.Вставить("КомментарийПриВыгрузкеДанных", "");
	
	СтруктураНастроекОбмена.Вставить("НеобходимостьЗаписиОтветногоФайлаОбмена", Ложь);	
	
	Возврат СтруктураНастроекОбмена;
	
КонецФункции

// Процедура производит обмен по списку настроек для обмена
Процедура ПроизвестиСписокОбменовДанными(МассивНастроекОбмена, Знач РучнойРежимЗапуска = Ложь, ОбработкаАвтоОбменДанными = Неопределено,
			Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
			
	// если нет данных для обмена, то ничего не производим		
	Если МассивНастроекОбмена = Неопределено Тогда
		Возврат;		
	КонецЕсли;
			
	КоличествоПроизведенныхОбменов = 0;
	ЕстьOnLineОбмен = Ложь;
							
	Для Каждого СсылкаОбмена Из МассивНастроекОбмена Цикл
		
		Если НЕ ЗначениеЗаполнено(СсылкаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектНастройки = СсылкаОбмена.ПолучитьОбъект();
		
		Если ОбъектНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьOnLineОбмен = ЕстьOnLineОбмен ИЛИ ОбъектНастройки.OnLineОбмен;
		
		// производится непосредственно сам обмен данными
		СтруктураНастроекОбмена = ПолучитьСтруктуруХраненияИнформацииОбОбмене(ОбъектНастройки, РучнойРежимЗапуска, ОбработкаАвтоОбменДанными, 
			ОбменПриВходеВПрограмму, СоответствиеТекстовЭлектронныхПисем);
				
		// информирование пользователя о возможных ошибках обмена в предыдущих попытках
		ОтправитьСообщениеОбОшибкеПриПредыдущемВыполнении(СтруктураНастроекОбмена);
		
		// выполнение обмена данными по конкретной настройке обмена
		ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбмена);
			
		КоличествоПроизведенныхОбменов = КоличествоПроизведенныхОбменов + 1;	
		
	КонецЦикла;
	
	#Если Клиент Тогда

		// сообщаем что обмен данными завершен
		Если РучнойРежимЗапуска
			И КоличествоПроизведенныхОбменов = 0 Тогда 		
			
			Предупреждение("Обмен данными не был выполнен.", 30, "Обмен данными");				
						
		КонецЕсли;
				
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьПоРазностиВремениПредставлениеДляПользователя(РазностьВремени) Экспорт
	
	Если РазностьВремени = 0 Тогда
		Возврат "00:00:00";
	КонецЕсли;
	
	ОстатокВремени = РазностьВремени;
	
	КоличествоДней = Цел(ОстатокВремени /(60 * 60 * 24));
	ОстатокВремени = РазностьВремени - КоличествоДней * 60 * 60 * 24;
	
	КоличествоЧасов = Цел(ОстатокВремени /(60 * 60));
	ОстатокВремени = РазностьВремени - КоличествоЧасов * 60 * 60;
	
	КоличествоМинут = Цел(ОстатокВремени /(60));
	ОстатокВремени = РазностьВремени - КоличествоМинут * 60;
	
	КоличествоСекунд = ОстатокВремени;
	
	
	ВремяСтрокой = Прав("00" + Строка(КоличествоЧасов), 2) + ":" + Прав("00" + Строка(КоличествоМинут), 2) + ":" + Прав("00" + Строка(КоличествоСекунд), 2);
	
	Если КоличествоДней <> 0 тогда
		
		ВремяСтрокой = Строка(КоличествоДней) + " дней " + ВремяСтрокой;
		
	КонецЕсли;
	
	Возврат ВремяСтрокой;
	
КонецФункции

// АВТОМАТИЧЕСКИЙ ОБМЕН ДАННЫМИ
///////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбменаДанными, РучнойЗапускОбменов = Истина, ОбработкаАвтообменаНаКлиенте = Неопределено) Экспорт
	
	Если ТипЗнч(НастройкаОбменаДанными) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
	
		МассивОбменов = Новый Массив();
		МассивОбменов.Добавить(НастройкаОбменаДанными);

		ПроцедурыОбменаДанными.ПроизвестиСписокОбменовДанными(МассивОбменов, РучнойЗапускОбменов, ОбработкаАвтообменаНаКлиенте);
		
	Иначе
		
		//ПроцедурыОбменаССайтом.ВыполнитьАвтообмен(НастройкаОбменаДанными, НЕ РучнойЗапускОбменов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьИнициализациюАвтообменаПриНачалеРаботы() Экспорт
	
	// автообмен данными
	Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоОбменДанными) Тогда
		
		// производим отложенный обмен при первом входе в программу
		ОбработкаАвтоОбменДанными = Обработки.АвтоОбменДанными.Создать(); 
			
		#Если Клиент Тогда
		
			// обмен при первом входе
			ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(Истина);
				
			// отдельно получаем настройки для которых нужно выполнить обмен при входе в программу
			ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(, Истина);
				
			// получаем данные периодического обмена данными и с ними работаем
			ОбработкаАвтоОбменДанными.ОбновитьТабличнуюЧастьАвтоматическихОбменов();
		
		#КонецЕсли
	
		Возврат  ОбработкаАвтоОбменДанными
			
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// выполнение обмена данными при завершении работы программы
Процедура ВыполнитьОбменПриЗавершенииРаботыПрограммы(ОбработкаОбмена) Экспорт
	
	Если (ОбработкаОбмена <> Неопределено) Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ОбработкаОбмена.ПроизвестиОбменПриВходеВыходе( ,, Истина);
			
	КонецЕсли;
	
КонецПроцедуры


#Если Клиент Тогда
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено) Экспорт

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		
		ВызватьИсключение (ТекстСообщения);
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

#КонецЕсли

// Функция убирает из текста сообщения слущебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()

#Если Клиент Тогда
// Создает и устанавливает реквизиты диалога выбора фала.
//
// Параметры
//  МножественныйВыбор – Булево, признак множественного выбора.
//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
//
// Возвращаемое значение:
//   ДиалогВыбораФайлов – созданный диалог.
//
Функция ПолучитьДиалогВыбораФайлов(МножественныйВыбор, НачальныйКаталог = "") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = НачальныйКаталог;
	Диалог.Заголовок = "Выберите файл...";
	Диалог.Фильтр = ПолучитьФильтрФайлов();
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = МножественныйВыбор;

	Возврат Диалог;

КонецФункции // ПолучитьДиалогВыбораФайлов()

// Позволяет пользователю выбрать каталог на диске.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая начальный путь к каталогу на диске.
//	ЗаголовокДиалога - Строка, содержащая заголовок диалога
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция ВыбратьКаталог(ИмяКаталога, Знач ЗаголовокДиалога = "Укажите каталог") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = ЗаголовокДиалога;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ИмяКаталога;

	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ВыбатьКаталог()

#КонецЕсли

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
//
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Процедура меняет расширение имени переданного файла (сам файл не меняется, меняется колько строка)
//
// Параметры
//  ИмяФайла  – Строка, содержащая полное имя файла на диске.
//  НовоеРасширениеФайла  – Строка, содержащая новое расширение файла.
//
Процедура УстановитьРасширениеФайла(ИмяФайла, Знач НовоеРасширениеФайла) Экспорт
	
	// к расширению точку добавляем
	Если Сред(НовоеРасширениеФайла, 1, 1) <> "." Тогда
		ЗначениеНовогоРасширения = "." + НовоеРасширениеФайла;	
	Иначе
		ЗначениеНовогоРасширения = НовоеРасширениеФайла;	
	КонецЕсли;
	// если не находим точку в текущем имени файла, то просто приписываем к нему новое расширение с конца
	ПозицияТочки = СтрДлина(ИмяФайла);
	Пока ПозицияТочки >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияТочки, 1) = "." Тогда
						
			ИмяФайла = Сред(ИмяФайла, 1, ПозицияТочки - 1) + ЗначениеНовогоРасширения;
			Возврат; 
			
		КонецЕсли;
		
		ПозицияТочки = ПозицияТочки - 1;	
	КонецЦикла;
	
	// не нашли точку в имени файла
	ИмяФайла = ИмяФайла + ЗначениеНовогоРасширения;	
	
КонецПроцедуры

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция ПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
	      + "Документ Microsoft Word (*.doc)|*.doc|"
	      + "Документ Microsoft Excell (*.xls)|*.xls|"
	      + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	      + "Документ Microsoft Visio (*.vsd)|*.vsd|"
	      + "Письмо электронной почты (*.msg)|*.msg|"
	      + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	      + "Текстовый документ (*.txt)|*.txt|"
	      + "Табличный документ (*.mxl)|*.mxl|";

КонецФункции // ПолучитьФильтрФайлов()

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

// Функция определяет дату последней модификации существующего файла на диске
// Параметры
//  ИмяФайла  – Строка, содержащая полный путь к файла на диске.
//
// Возвращаемое значение:
//   Дата – Дата последней модификации файла
//
Функция ПолучитьДатуФайла(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
	 
КонецФункции

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\");
	Возврат ИмяФайла;
	
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

#Если клиент тогда
	
// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт

	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Ответ = Вопрос("Указанный каталог не существует. Создать каталог?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПроверитьСуществованиеКаталога()

#КонецЕсли

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = СтрНайти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

Функция ПолучитьТаблицуВозможныхОбменов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяКонфигурации");
	Таблица.Колонки.Добавить("ИмяПланаОбмена");
	Таблица.Колонки.Добавить("НаименованиеКонфигурации");
	Таблица.Колонки.Добавить("ПредставлениеКонфигурации");
	Таблица.Колонки.Добавить("ПрефиксПоУмолчанию");
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ИмяКонфигурации = "МониторСопровождения"; // определяет макет с правилами обмена
	СтрокаТаблицы.ИмяПланаОбмена = "увОбменССервером"; // определяет имя плана обмена откуда брать данные
	СтрокаТаблицы.НаименованиеКонфигурации = "Сервер мониторов сопровождения";
	СтрокаТаблицы.ПредставлениеКонфигурации = "Сервер мониторов сопровождения"; // представление для пользователя
	СтрокаТаблицы.ПрефиксПоУмолчанию = "SRV"; // Префикс по умолчанию

	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьИнформациюОТекущейИнформационнойБазе() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяКонфигурации", "МС");
	СтруктураДанных.Вставить("ИмяПланаОбмена", "увОбменССервером");
	СтруктураДанных.Вставить("НаименованиеКонфигурации", Метаданные.Синоним);
	СтруктураДанных.Вставить("ПредставлениеКонфигурации", "1С:Монитор Сопровождения (начиная с версии 2.0)");
	СтруктураДанных.Вставить("ПрефиксПоУмолчанию", "МС");
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиДляНастройкиОбмена(МассивКодовНастроек) Экспорт  
	
	// { RGS LFedotova 24.01.2018 20:43:45 - SLI-0007472
	//Отменим выполнение обмена, если это не рабочая база Logelco или RIET
	Если НЕ РГСофтСерверПовтИспСеанс.ЭтоProductionБазаLogelco() И НЕ РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда
		Возврат;
	КонецЕсли;
	// } RGS LFedotova 24.01.2018 20:43:49 - SLI-0007472 
	
		//{RGS AArsentev 10.01.2017
	Если ТипЗнч(МассивКодовНастроек) = Тип("Массив") Тогда
		//}RGS AArsentev 10.01.2017
		Для каждого КодНастройки из МассивКодовНастроек Цикл
			
			Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
				Возврат;
			КонецЕсли;
			
			НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
			
			Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
				Возврат;
			КонецЕсли;
			
			Если НастройкаОбмена.ПометкаУдаления Тогда
				Возврат;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Начат обмен по коду настройки = " + КодНастройки);
			
			ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена, Ложь);
			
		КонецЦикла;
		//{RGS AArsentev 10.01.2017
	ИначеЕсли ТипЗнч(МассивКодовНастроек) = Тип("Строка") Тогда
		КодНастройки = МассивКодовНастроек;
		
		Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
			Возврат;
		КонецЕсли;
			
		НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду(КодНастройки);
		
		Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		Если НастройкаОбмена.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Начат обмен по коду настройки = " + КодНастройки);
		
		ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена, Ложь);
	КонецЕсли;
		//}RGS AArsentev 10.01.2017
КонецПроцедуры

// Функция возвращает количество секунд для проверки запуска автоматического обмена данными
Функция ПолучитьКоличествоСекундОпросаЗапускаОбменаДанными() Экспорт
	
	Возврат Цел(60 / ВернутьКоэффициентУменьшенияИнтерваловВызоваОбработчиковОбмена());
	
КонецФункции

//Функция возвращает коэффициент ускорения работы обработчиков для демопоказа
Функция ВернутьКоэффициентУменьшенияИнтерваловВызоваОбработчиковОбмена() Экспорт
	
	Возврат 1;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ОБЪЕКТОВ ДЛЯ ОБМЕНА

Процедура ПриЗаписиОбменImpExpПриЗаписи(Источник, Отказ) Экспорт
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() <> "SLI RU" Тогда
		Возврат;
	КонецЕсли;
	//[<-РКХ] 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	// { RGS MYurkevich 6/8/2015 3:17:15 PM - 
	Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КонтрагентыLawson") 
		//ИЛИ ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КостЦентры")
		ИЛИ ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.LegalEntities")
		//ИЛИ ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.GeoMarkets") 
		Тогда
		RCA = ПланыОбмена.SLBImportExport.НайтиПоКоду("RCA");
		Если RCA = ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			ЗаписатьДляОтложеннойРегистрации(Источник.Ссылка, "СправочникДокумент");
		КонецЕсли;
		// { RGS AKozhevnikova - для обмена с TKG	
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CustomsFilesLight") Тогда
		Если СокрЛП(Источник.Ссылка.SoldTo.Код) = "SLI TM" Тогда
			ЗаписатьДляОтложеннойРегистрации(Источник.Ссылка, "СправочникДокумент");
		КонецЕсли;
		// { RGS AKozhevnikova - для обмена с TKG
		
	// { RGS ASeryakov, 15.01.2019 18:56:19 SLI-0007668
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КостЦентры")
		 И ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI") = ПланыОбмена.SLBImportExport.ЭтотУзел()Тогда
		
		Узлы = Новый Массив();
		RCA = ПланыОбмена.SLBImportExport.НайтиПоКоду("RCA");
		Узлы.Добавить(RCA);
		
		Если ПланыОбмена.ИзменениеЗарегистрировано(RCA, Источник.Ссылка) И ЗначениеЗаполнено(Источник.Ссылка.ПодразделениеОрганизации) Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Источник.Ссылка.ПодразделениеОрганизации);
		
		КонецЕсли;
	// } RGS ASeryakov 15.01.2019 18:56:23 SLI-0007668
	
	Иначе
		// { RGS AArsentev 18.12.2017
		ЗапретитьОбмен = ПроверитьНаЗапретОбмена(Источник.Ссылка);
		Если ЗапретитьОбмен Тогда
			Возврат;
		Иначе
			ЗаписатьДляОтложеннойРегистрации(Источник.Ссылка, "СправочникДокумент");
		КонецЕсли;
		
	КонецЕсли;
	// } RGS MYurkevich 6/8/2015 3:17:17 PM -		
	
КонецПроцедуры

Процедура ПриЗаписиОбменImpExpПриЗаписиРН(Источник, Отказ, Замещение) Экспорт 
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() <> "SLI RU" Тогда
		Возврат;
	КонецЕсли;
	//[<-РКХ] 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;   
	
	ЗаписатьДляОтложеннойРегистрации(Источник.Отбор.Регистратор.Значение, "РН.InvoiceLinesCosts");    
	                                                                        
КонецПроцедуры

Процедура ЗаписатьДляОтложеннойРегистрации(Объект, Метаданные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьОтложенногоОбмена = РегистрыСведений.ОтложеннаяРегистрацияSLBImportExport.СоздатьМенеджерЗаписи();	
	ЗаписьОтложенногоОбмена.Объект 			= Объект;       	
	ЗаписьОтложенногоОбмена.Метаданные 		= Метаданные;
	ЗаписьОтложенногоОбмена.ДатаОбновления 	= ТекущаяДата();
	ЗаписьОтложенногоОбмена.Записать();
	
КонецПроцедуры

Процедура ОбработкаОтложеннойРегистрацииSLBImpExp() Экспорт
	
	// { RGS MYurkevich 28.06.2016 9:51:44 - 
	//ВремяЗапуска = ХранилищеОбщихНастроек.Загрузить("ОбработкаОтложеннойРегистрацииSLBImpExp", "ВремяЗапуска", , "ПользовательПессимист");

	//Если НЕ (ВремяЗапуска = Неопределено ИЛИ ВремяЗапуска = Дата(1,1,1)) Тогда
	//	ЗаписьЖурналаРегистрации("ОбработкаОтложеннойРегистрацииSLBImpExp - ПРОПУЩЕНО, т.к. предыдущее задание еще не завершилось");
	//	Возврат;
	//КонецЕсли;
	//
	//ХранилищеОбщихНастроек.Сохранить("ОбработкаОтложеннойРегистрацииSLBImpExp", "ВремяЗапуска", ТекущаяДата(), ,"ПользовательПессимист");
	// } RGS MYurkevich 28.06.2016 9:51:45 - 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтложеннаяРегистрацияSLBImportExport.Объект,
		|	ОтложеннаяРегистрацияSLBImportExport.Метаданные 
		|ИЗ
		|	РегистрСведений.ОтложеннаяРегистрацияSLBImportExport КАК ОтложеннаяРегистрацияSLBImportExport";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка		
		
			Если ВыборкаДетальныеЗаписи.Метаданные = "РН.InvoiceLinesCosts" Тогда								
				ОтложенныйПриЗаписиОбменImpExpПриЗаписиРН(ВыборкаДетальныеЗаписи.Объект);									
			ИначеЕсли ВыборкаДетальныеЗаписи.Метаданные = "СправочникДокумент" Тогда								
				ОтложенныйПриЗаписиОбменImpExpПриЗаписи(ВыборкаДетальныеЗаписи.Объект);
			Иначе				
				Продолжить;
			КонецЕсли;  		
			
			Запись = РегистрыСведений.ОтложеннаяРегистрацияSLBImportExport.СоздатьМенеджерЗаписи();
			Запись.Объект = ВыборкаДетальныеЗаписи.Объект;
			Запись.Метаданные = ВыборкаДетальныеЗаписи.Метаданные;
			Запись.Удалить();
		
		Исключение
			
		КонецПопытки;
		
	КонецЦикла; 
	
	// { RGS MYurkevich 28.06.2016 9:52:04 - 
	//ХранилищеОбщихНастроек.Сохранить("ОбработкаОтложеннойРегистрацииSLBImpExp", "ВремяЗапуска", Дата(1,1,1), ,"ПользовательПессимист");
	// } RGS MYurkevich 28.06.2016 9:52:04 - 
	
КонецПроцедуры

Процедура ОтложенныйПриЗаписиОбменImpExpПриЗаписи(Объект)
	
	Источник = Объект.ПолучитьОбъект();
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ГТД") Тогда
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.SoldTo); 		
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;  
		ЗарегистрироватьГТД(УзелОбмена,Источник); 		
		//делал оформление
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.СтрокиГТД") Тогда 
		
		Если Не ЗначениеЗаполнено(Источник.ГТД) Тогда
			Возврат;
		КонецЕсли; 
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ГТД.SoldTo);
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Ссылка);
		
		ЗарегистрироватьТоварыСтрокиГТД(УзелОбмена, Источник.Ссылка);
		
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.Инвойс") Тогда
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.Покупатель); 		
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;   		
		ЗарегистрироватьИнвойс(УзелОбмена, Источник);
		
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.InvoiceLinesClassification") Тогда
		ЗакрытиеПоставки = Источник.InvoiceLinesMatching;
		Если Не ЗначениеЗаполнено(ЗакрытиеПоставки) Тогда
			Возврат;
		КонецЕсли; 
		
		// ищем закрытие поставки, и из него берем SoldTo. Если хоть одно совпадает 
		// с узлом плана обмена, то регистрируем
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	InvoiceLinesCosts.SoldTo
		|ИЗ
		|	РегистрНакопления.InvoiceLinesCosts КАК InvoiceLinesCosts
		|ГДЕ
		|	InvoiceLinesCosts.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", ЗакрытиеПоставки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		УзелНайден = Ложь;
		Пока Выборка.Следующий() Цикл
			УзелОбмена = НайтиУзелПланаОбмена(Выборка.SoldTo);
			Если Не УзелОбмена.Пустая() Тогда
				УзелНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УзелНайден Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Ссылка);   			
			Если НЕ Источник.ProcessLevel.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ProcessLevel);	
			КонецЕсли;
			// { RGS Герасимов 25.03.2015 19:03:33 - KF-00000008
			//Если НЕ Источник.CreatedBy.Пустая() Тогда
			//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CreatedBy);	
			//КонецЕсли;
			//Если НЕ Источник.ModifiedBy.Пустая() Тогда
			//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ModifiedBy);	
			//КонецЕсли;
			// } RGS Герасимов 25.03.2015 19:03:33 - KF-00000008
			ЗарегистрироватьТЧInvoiceLC(УзелОбмена, Источник.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ГТДПрисоединенныеФайлы") Тогда    		
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ВладелецФайла.SoldTo);
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник);         		
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ИнвойсПрисоединенныеФайлы") Тогда  		
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ВладелецФайла.Покупатель);
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник);  
	// { RGS MYurkevich 9/18/2015 8:19:38 AM - 
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.CustomsFilesLightПрисоединенныеФайлы") Тогда    		
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ВладелецФайла.SoldTo);
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник);
		
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.CustomsFilesLight") Тогда    		
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.SoldTo);
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		
			// { RGS AKozhevnikova
		Если СокрЛП(Источник.SoldTo.Код) = "SLI TM" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ParcelsItems.Ссылка КАК Parcels,
			|	DOCsParcels.Ссылка КАК DOC
			|ИЗ
			|	Справочник.Parcels.Детали КАК ParcelsItems
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
			|		ПО ParcelsItems.Ссылка = DOCsParcels.Parcel
			|			И (НЕ DOCsParcels.Ссылка.Отменен)
			|ГДЕ
			|	ParcelsItems.СтрокаИнвойса В(&Items)";
			
			Запрос.УстановитьПараметр("Items", Источник.Items.ВыгрузитьКолонку("Item"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.Parcels);
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ВыборкаДетальныеЗаписи.DOC);
				
			КонецЦикла;
		КонецЕсли;
		// } RGS AKozhevnikova
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ExportRequestПрисоединенныеФайлы") Тогда    		
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ВладелецФайла.Company);
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник); 
	// } RGS MYurkevich 9/18/2015 8:19:38 AM - 
	
	// { RGS MYurkevich 6/8/2015 3:21:52 PM -  
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КостЦентры") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
		Если Не УзелОбмена.Пустая() И УзелОбмена<>ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
			Если НЕ Источник.TaxRegistration.Пустая() Тогда 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.TaxRegistration);
			КонецЕсли;
			Если НЕ Источник.ПодразделениеОрганизации.Пустая() Тогда 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ПодразделениеОрганизации);
			КонецЕсли;
		ИначеЕсли Не УзелОбмена.Пустая() И УзелОбмена=ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("RCA");
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Сегменты") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
		Если Не УзелОбмена.Пустая() И УзелОбмена<>ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		ИначеЕсли Не УзелОбмена.Пустая() И УзелОбмена=ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("RCA");
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.КонтрагентыLawson") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
		Если Не УзелОбмена.Пустая() И УзелОбмена<>ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		КонецЕсли;	 
		// } RGS MYurkevich 6/8/2015 3:21:54 PM - 
		// { RGS MYurkevich 9/9/2015 1:11:34 PM - SLI-0005756
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.LegalEntities") ИЛИ 
		ТипЗнч(Источник) = Тип("СправочникОбъект.GeoMarkets") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.Выбрать();
		Пока УзелОбмена.Следующий() Цикл
			Если УзелОбмена.Ссылка<>ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена.Ссылка, Источник);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ServicesCostsAllocation") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InvoiceLinesCosts.SoldTo
		|ИЗ
		|	РегистрНакопления.InvoiceLinesCosts КАК InvoiceLinesCosts
		|ГДЕ
		|	InvoiceLinesCosts.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УзелОбмена = НайтиУзелПланаОбмена(Выборка.SoldTo);
			Если УзелОбмена.Пустая() Тогда
				Возврат;
			КонецЕсли;
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник); 
		КонецЦикла;	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Service") Тогда
	 Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	AgentInvoice.SoldTo
		|ИЗ
		|	Документ.AgentInvoice.Services КАК AgentInvoiceServices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.AgentInvoice КАК AgentInvoice
		|		ПО AgentInvoiceServices.Ссылка = AgentInvoice.Ссылка
		|ГДЕ
		|	AgentInvoiceServices.Service = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УзелОбмена = НайтиУзелПланаОбмена(Выборка.SoldTo);
			Если НЕ УзелОбмена.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник); 
			КонецЕсли;
		КонецЦикла;		
		// } RGS MYurkevich 9/9/2015 1:11:34 PM - SLI-0005756
		// { RGS MYurkevich 06.04.2016 14:41:28 - 
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ExportRequest") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ExportShipment") 
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.OFSStoreTransactions") ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.CountriesOfProcessLevels")
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.ExportPurposes") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена.Ссылка, Источник);
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ExportRequest") Тогда
			ЗарегистрироватьСтрокиИнвойса(УзелОбмена.Ссылка, Источник.Ссылка, Неопределено);
		КонецЕсли;
		// } RGS MYurkevich 06.04.2016 14:41:28 - 
		// { RGS MYurkevich 15.06.2016 15:38:55 - SLK-0000595
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.SegmentsOfNonLawsonCompanies") 
		ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.ERPTreatments") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена.Ссылка, Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.TransportRequest") Тогда
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник); 

		ЗарегистрироватьСтрокиИнвойса(УзелОбмена, Источник.Ссылка, Неопределено);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Parcels.Ссылка
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.TransportRequest = &TransportRequest";
		Запрос.УстановитьПараметр("TransportRequest", Источник.Ссылка);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл       
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка.ПолучитьОбъект());
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.TripNonLawsonCompanies") Тогда    		
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если НЕ УзелОбмена.Пустая() Тогда	
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник); 
		КонецЕсли;				
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.TransportRequestПрисоединенныеФайлы") Тогда    		
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник); 
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.TripNonLawsonCompaniesПрисоединенныеФайлы") Тогда    		
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("KZ");
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник); 	
		
		// } RGS MYurkevich 15.06.2016 15:38:58 - SLK-0000595
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ПоставкаПрисоединенныеФайлы") Тогда  		
		
		Запрос = Новый Запрос;  
		Запрос.Параметры.Вставить("Поставка", Источник.ВладелецФайла.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист
		|ПОМЕСТИТЬ УпаковочныеЛисты
		|ИЗ
		|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
		|ГДЕ
		|	ПоставкаУпаковочныеЛисты.Ссылка = &Поставка
		|	И НЕ ПоставкаУпаковочныеЛисты.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.КонсолидированныйПакетЗаявокНаПеревозку.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.Покупатель КАК SoldTo
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка В
		|			(ВЫБРАТЬ
		|				УпаковочныеЛисты.УпаковочныйЛист
		|			ИЗ
		|				УпаковочныеЛисты КАК УпаковочныеЛисты)
		|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.Покупатель = ЗНАЧЕНИЕ(Справочник.SoldTo.ПустаяСсылка)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для каждого строкаSoltTo из результат цикл  			
			УзелОбмена = НайтиУзелПланаОбмена(строкаSoltTo.SoldTo);
			ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник);   			
		КонецЦикла; 			
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы") Тогда     	
		
		Запрос = Новый Запрос;  
		Запрос.Параметры.Вставить("УпакЛист", Источник.ВладелецФайла.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.Покупатель КАК SoldTo
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|ГДЕ
		|	НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.Покупатель = ЗНАЧЕНИЕ(Справочник.SoldTo.ПустаяСсылка)
		|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &УпакЛист";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для каждого строкаSoltTo из результат цикл  			
			УзелОбмена = НайтиУзелПланаОбмена(строкаSoltTo.SoldTo);
			ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник);   			
		КонецЦикла; 	   		
		// { RGS AArsentev 02.02.2017 S-I-0002298
		ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.ТипыНоменклатуры") Тогда
		
		УзелОбмена = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
		Если Не УзелОбмена.Пустая() И УзелОбмена<>ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
		КонецЕсли;
		// } RGS AArsentev 02.02.2017 S-I-0002298
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтложенныйПриЗаписиОбменImpExpПриЗаписиРН(Объект)
	
	Источник = РегистрыНакопления.InvoiceLinesCosts.СоздатьНаборЗаписей();
	Источник.Отбор.Регистратор.Установить(Объект);
	Источник.Прочитать();	
	
	УзелНайден = Ложь;
	Для Каждого СтрокаНабора Из Источник Цикл
		УзелОбмена = НайтиУзелПланаОбмена(СтрокаНабора.SoldTo);
		Если Не УзелОбмена.Пустая() Тогда
			УзелНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не УзелНайден Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);
	
	мКэшSegment 						= Новый Массив;
	мКэшAU 								= Новый Массив;
	мКэшСтрокаИнвойса 					= Новый Массив;	
	мКэшСтрокаЗаявкиНаЗакупку 			= Новый Массив;
	мКэшЭлементФормированияСтоимости 	= Новый Массив;
	мКэшДокументОснование 				= Новый Массив;
	мКэшТоварСтрокиГТД					= Новый Массив;
	мКэшТоварСтрокиГТДВладелец			= Новый Массив;
	
	мСтруктураКэшРегистрации	 		= Новый Структура;  
	мСтруктураКэшРегистрации.Вставить("Каталог",Новый Массив);
	мСтруктураКэшРегистрации.Вставить("ЕдиницаИзмерения",Новый Массив);
	мСтруктураКэшРегистрации.Вставить("КостЦентр",Новый Массив);
	мСтруктураКэшРегистрации.Вставить("Владелец",Новый Массив);  
	мСтруктураКэшРегистрации.Вставить("СтрокаЗаявкиНаЗакупку",Новый Массив);
	мСтруктураКэшРегистрации.Вставить("Type",Новый Массив);
	мСтруктураКэшРегистрации.Вставить("СтрокаИнвойса",Новый Массив);    
	
	// регистрация объектов из набора
	Для Каждого СтрокаНабора Из Источник Цикл
		
		Если НЕ СтрокаНабора.Segment.Пустая() Тогда   			
			Если мКэшSegment.Найти(СтрокаНабора.Segment) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.Segment);
				мКэшSegment.Добавить(СтрокаНабора.Segment);
			КонецЕсли;  			
		КонецЕсли;
		
		Если НЕ СтрокаНабора.AU.Пустая() Тогда   			
			Если мКэшAU.Найти(СтрокаНабора.AU) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.AU);
				мКэшAU.Добавить(СтрокаНабора.AU);
			КонецЕсли;			
		КонецЕсли;
		
		Если НЕ СтрокаНабора.СтрокаИнвойса.Пустая() Тогда 
			
			Если мКэшСтрокаИнвойса.Найти(СтрокаНабора.СтрокаИнвойса) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.СтрокаИнвойса);   
				мКэшСтрокаИнвойса.Добавить(СтрокаНабора.СтрокаИнвойса);
			КонецЕсли;	  		
	 
			ТекСтрокаЗаявкиНаЗакупку = СтрокаНабора.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку; 
			Если НЕ ТекСтрокаЗаявкиНаЗакупку.Пустая() Тогда    				
				Если мКэшСтрокаЗаявкиНаЗакупку.Найти(ТекСтрокаЗаявкиНаЗакупку) = Неопределено Тогда
					ЗарегистрироватьСтрокуЗаявкиНаЗакупку(УзелОбмена, ТекСтрокаЗаявкиНаЗакупку, мСтруктураКэшРегистрации);
					мКэшСтрокаЗаявкиНаЗакупку.Добавить(ТекСтрокаЗаявкиНаЗакупку);
				КонецЕсли;					
			КонецЕсли; 
			
		КонецЕсли;    		
		
		Если НЕ СтрокаНабора.ЭлементФормированияСтоимости.Пустая() Тогда 
			
			Если мКэшЭлементФормированияСтоимости.Найти(СтрокаНабора.ЭлементФормированияСтоимости) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.ЭлементФормированияСтоимости);
				мКэшЭлементФормированияСтоимости.Добавить(СтрокаНабора.ЭлементФормированияСтоимости);
			КонецЕсли;	  
		
		КонецЕсли;
		
		Если НЕ СтрокаНабора.ДокументОснование.Пустая() Тогда 
			
			Если мКэшДокументОснование.Найти(СтрокаНабора.ДокументОснование) = Неопределено Тогда   				
				Если ТипЗнч(СтрокаНабора.ДокументОснование) = Тип("ДокументСсылка.ГТД") Тогда
					ЗарегистрироватьГТД(УзелОбмена, СтрокаНабора.ДокументОснование); 
				ИначеЕсли ТипЗнч(СтрокаНабора.ДокументОснование) = Тип("ДокументСсылка.Инвойс") Тогда
					ЗарегистрироватьИнвойс(УзелОбмена, СтрокаНабора.ДокументОснование, мСтруктураКэшРегистрации);   
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.ДокументОснование);
				КонецЕсли;	     				
				мКэшДокументОснование.Добавить(СтрокаНабора.ДокументОснование);   				
			КонецЕсли;	  			
			
		КонецЕсли;
		
	КонецЦикла;      	
	
	// регистрация документа регистратора
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗакрытиеПоставки") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Регистратор);  	
		
		Если НЕ  Регистратор.ProcessLevel.Пустая() Тогда	 
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Регистратор.ProcessLevel);
		КонецЕсли;		
		// { RGS Герасимов 25.03.2015 19:04:18 - KF-00000008
		//Если НЕ  Регистратор.CreatedBy.Пустая() Тогда	 
		//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Регистратор.CreatedBy);
		//КонецЕсли;	
		//Если НЕ  Регистратор.ModifiedBy.Пустая() Тогда	 
		//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Регистратор.ModifiedBy);
		//КонецЕсли;	
	    // } RGS Герасимов 25.03.2015 19:04:18 - KF-00000008
		Для Каждого СтрокаТЧ Из Регистратор.Сопоставление Цикл
			
			Если НЕ СтрокаТЧ.СтрокаИнвойса.Пустая() И мКэшСтрокаИнвойса.Найти(СтрокаТЧ.СтрокаИнвойса) = Неопределено Тогда	 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.СтрокаИнвойса);
				мКэшСтрокаИнвойса.Добавить(СтрокаТЧ.СтрокаИнвойса);
			КонецЕсли;    		
			                                  
			Если НЕ СтрокаТЧ.ТоварСтрокиГТД.Пустая()  И мКэшТоварСтрокиГТД.Найти(СтрокаТЧ.ТоварСтрокиГТД) = Неопределено Тогда	 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.ТоварСтрокиГТД); 
				мКэшТоварСтрокиГТД.Добавить(СтрокаТЧ.ТоварСтрокиГТД);
				Если НЕ СтрокаТЧ.ТоварСтрокиГТД.Владелец.Пустая() И мКэшТоварСтрокиГТДВладелец.Найти(СтрокаТЧ.ТоварСтрокиГТД.Владелец) = Неопределено Тогда	 
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.ТоварСтрокиГТД.Владелец);
					мКэшТоварСтрокиГТДВладелец.Добавить(СтрокаТЧ.ТоварСтрокиГТД.Владелец);    
				КонецЕсли;  				
			КонецЕсли;   
			
		КонецЦикла; 
		
		//"ЗарегистрироватьПоставку" работает только для импортных поставок,
		//но в Закрытии поставки (Invoice lines matching) в качестве поставки может быть также экспортная поставка и временный импорт/экспорт
		Если НЕ Регистратор.Поставка.Пустая() И ТипЗнч(Регистратор.Поставка) = Тип("ДокументСсылка.Поставка") Тогда
			ЗарегистрироватьПоставку(УзелОбмена, Регистратор.Поставка);
		КонецЕсли;
		
		ЗарегистрироватьInvoiceLinesClassification(УзелОбмена, Регистратор, мСтруктураКэшРегистрации); 
		
		ЗарегистрироватьCustomsFilesOfGoods(УзелОбмена, Регистратор);
		
	КонецЕсли;    	
	
КонецПроцедуры


//Прочие

Процедура ЗарегистрироватьГТД(УзелОбмена, Источник)
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Ссылка);
	
	Если НЕ Источник.CustomsPost.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CustomsPost);
		Если НЕ Источник.CustomsPost.Customs.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CustomsPost.Customs);
		КонецЕсли;  
	КонецЕсли;  		
	Если НЕ Источник.CCA.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CCA);
	КонецЕсли;     		
	Если НЕ Источник.Regime.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Regime);
	КонецЕсли;
	// { RGS Герасимов 25.03.2015 19:04:55 - KF-00000008
	//Если НЕ Источник.ContractCurrency.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ContractCurrency);
	//КонецЕсли;
	// } RGS Герасимов 25.03.2015 19:04:55 - KF-00000008
	//  Shipment имеет составной тип!!!
	Если Источник.Shipment <> Неопределено И НЕ Источник.Shipment.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Shipment);
	КонецЕсли;
	// { RGS Герасимов 25.03.2015 19:05:15 - KF-00000008
	//Если НЕ Источник.КодВалютыТамСтоимости.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.КодВалютыТамСтоимости);
	//КонецЕсли;
	// } RGS Герасимов 25.03.2015 19:05:15 - KF-00000008
	Если НЕ Источник.SoldTo.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.SoldTo);
	КонецЕсли;
	// { RGS Герасимов 25.03.2015 19:05:36 - KF-00000008
	//Если НЕ Источник.CreatedBy.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CreatedBy);
	//КонецЕсли;
	//Если НЕ Источник.ModifiedBy.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ModifiedBy);
	//КонецЕсли;
	// } RGS Герасимов 25.03.2015 19:05:36 - KF-00000008
	Если НЕ Источник.ProcessLevel.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ProcessLevel);
	КонецЕсли;
	
	// строки ГТД
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиГТД.Ссылка
	|ИЗ
	|	Справочник.СтрокиГТД КАК СтрокиГТД
	|ГДЕ
	|	СтрокиГТД.ГТД = &ГТД";
	
	Запрос.УстановитьПараметр("ГТД", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл   
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		ЗарегистрироватьТоварыСтрокиГТД(УзелОбмена, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИнвойс(УзелОбмена, Источник, мСтруктураКэшРегистрации = Неопределено)
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Ссылка);
	
	Если НЕ Источник.Contract.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Contract);	                  
	КонецЕсли;  
	
	ЗарегистрироватьОбъектыКонтракта(УзелОбмена, Источник.Contract);
	
	Если НЕ Источник.Декларант.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Декларант);	                  
	КонецЕсли; 
	// { RGS Герасимов 25.03.2015 19:06:16 - KF-00000008
	//Если НЕ Источник.CreatedBy.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.CreatedBy);	                  
	//КонецЕсли;     
	//Если НЕ Источник.ModifiedBy.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.ModifiedBy);	                  
	//КонецЕсли;     
	//Если НЕ Источник.Specialist.Пустая() Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Specialist);	                  
	//КонецЕсли;
	// } RGS Герасимов 25.03.2015 19:06:16 - KF-00000008
	Если НЕ Источник.OperatingLocation.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.OperatingLocation);	                  
	КонецЕсли;
	
	ЗарегистрироватьСтрокиИнвойса(УзелОбмена, Источник.Ссылка, мСтруктураКэшРегистрации);
	
КонецПроцедуры

Процедура ЗарегистрироватьПоставку(УзелОбмена, Поставка)
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка);
	
	Если НЕ Поставка.Shipper.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.Shipper);
	КонецЕсли;
	
	Если НЕ Поставка.FreightForwarder.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.FreightForwarder);
	КонецЕсли;
	Если НЕ Поставка.POD.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.POD);
	КонецЕсли;
	Если НЕ Поставка.MOT.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.MOT);
	КонецЕсли;
	Если НЕ Поставка.ActualPOA.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.ActualPOA);
	КонецЕсли;
	Если НЕ Поставка.CCA.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.CCA);
	КонецЕсли;
	// { RGS Герасимов 25.03.2015 19:06:58 - KF-00000008
	//Если НЕ Поставка.Coordinator.Пустая() Тогда	
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.Coordinator);
	//КонецЕсли;
	//Если НЕ Поставка.Responsible.Пустая() Тогда	
	//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.Responsible);
	//КонецЕсли;
	// } RGS Герасимов 25.03.2015 19:06:58 - KF-00000008
	Если НЕ Поставка.ProcessLevel.Пустая() Тогда	
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Поставка.ProcessLevel);
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Поставка.УпаковочныеЛисты Цикл 		
		Если НЕ СтрокаТЧ.УпаковочныйЛист.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.УпаковочныйЛист);
		КонецЕсли;   		
	КонецЦикла; 
	
	Для Каждого СтрокаТЧ Из Поставка.OutOfComplianceReasons Цикл
		Если НЕ СтрокаТЧ.OutOfComplianceReason.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.OutOfComplianceReason);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗарегистрироватьInvoiceLinesClassification(УзелОбмена, ЗакрытиеПоставки, мСтруктураКэшРегистрации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	InvoiceLinesClassification.Ссылка,
		|	InvoiceLinesClassification.ProcessLevel,
		|	InvoiceLinesClassification.CreatedBy,
		|	InvoiceLinesClassification.ModifiedBy
		|ИЗ
		|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
		|ГДЕ
		|	InvoiceLinesClassification.InvoiceLinesMatching = &InvoiceLinesMatching";

	Запрос.УстановитьПараметр("InvoiceLinesMatching", ЗакрытиеПоставки);
 	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл    
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		
		Если НЕ Выборка.ProcessLevel.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.ProcessLevel);
		КонецЕсли;
		// { RGS Герасимов 25.03.2015 19:07:44 - KF-00000008
		//Если НЕ Выборка.CreatedBy.Пустая() Тогда
		//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.CreatedBy);
		//КонецЕсли;
		//Если НЕ Выборка.ModifiedBy.Пустая() Тогда
		//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.ModifiedBy);
		//КонецЕсли;
		// } RGS Герасимов 25.03.2015 19:07:44 - KF-00000008
		
		ЗарегистрироватьТЧInvoiceLC(УзелОбмена, Выборка.Ссылка, мСтруктураКэшРегистрации);  
	КонецЦикла;
 	
КонецПроцедуры

Процедура ЗарегистрироватьТЧInvoiceLC(УзелОбмена, InvoiceLC, мСтруктураКэшРегистрации = Неопределено)
	
	КэшПередан = мСтруктураКэшРегистрации <> Неопределено;
	
	Для Каждого СтрокаТЧ Из InvoiceLC.Classification Цикл
		
		Если НЕ СтрокаТЧ.InvoiceLine.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.InvoiceLine);
			
			Если НЕ КэшПередан Тогда   
				Если НЕ СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку.Пустая() Тогда
					ЗарегистрироватьСтрокуЗаявкиНаЗакупку(УзелОбмена, СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку, мСтруктураКэшРегистрации);
				КонецЕсли; 
			Иначе
				Если НЕ СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку.Пустая() И  мСтруктураКэшРегистрации["СтрокаЗаявкиНаЗакупку"].Найти(СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку) = Неопределено Тогда
					ЗарегистрироватьСтрокуЗаявкиНаЗакупку(УзелОбмена, СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку, мСтруктураКэшРегистрации);  
					мСтруктураКэшРегистрации["СтрокаЗаявкиНаЗакупку"].Добавить(СтрокаТЧ.InvoiceLine.СтрокаЗаявкиНаЗакупку);
				КонецЕсли; 	
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если НЕ КэшПередан Тогда  
			Если НЕ СтрокаТЧ.Type.Пустая() Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.Type);	
			КонецЕсли;
		Иначе
			Если НЕ СтрокаТЧ.Type.Пустая() И  мСтруктураКэшРегистрации["Type"].Найти(СтрокаТЧ.Type) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТЧ.Type);	
				мСтруктураКэшРегистрации["Type"].Добавить(СтрокаТЧ.Type);
			КонецЕсли; 	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗарегистрироватьОбъектыКонтракта(УзелОбмена, Contract)

	Если НЕ Contract.Seller.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Contract.Seller);
	КонецЕсли;
	Если НЕ Contract.ConsignTo.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Contract.ConsignTo);
	КонецЕсли;
	Если НЕ Contract.Incoterms.Пустая() Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Contract.Incoterms);
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьСтрокиИнвойса(УзелОбмена, Инвойс, мСтруктураКэшРегистрации)

	КэшПередан =  мСтруктураКэшРегистрации <> Неопределено;   
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Инвойс);
	УсловиеЗаявка = ?(ТипЗнч(Инвойс) = Тип("ДокументСсылка.TransportRequest"), " Items.TransportRequest = &Ссылка", " Items.Инвойс.Ссылка = &Ссылка");
	Условие = ?(ТипЗнч(Инвойс) = Тип("ДокументСсылка.ExportRequest"), " Items.ExportRequest = &Ссылка", УсловиеЗаявка); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Items.Ссылка,
	|	Items.СтрокаЗаявкиНаЗакупку
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК Items
	|ГДЕ" + Условие;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл       
		
		Если НЕ КэшПередан Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		Иначе
			Если мСтруктураКэшРегистрации["СтрокаИнвойса"].Найти(Выборка.Ссылка) = Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
				мСтруктураКэшРегистрации["СтрокаИнвойса"].Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли; 	   
		
		Если НЕ Выборка.СтрокаЗаявкиНаЗакупку.Пустая() Тогда
			ЗарегистрироватьСтрокуЗаявкиНаЗакупку(УзелОбмена, Выборка.СтрокаЗаявкиНаЗакупку, мСтруктураКэшРегистрации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьСтрокуЗаявкиНаЗакупку(УзелОбмена, СтрокаЗаявкиНаЗакупку, мСтруктураКэшРегистрации)
	
	
	КэшПередан = мСтруктураКэшРегистрации <> Неопределено;			
			
	Если НЕ КэшПередан Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку);	
		
		Если НЕ СтрокаЗаявкиНаЗакупку.Каталог.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.Каталог);
		КонецЕсли;    	
		Если НЕ СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения);
		КонецЕсли;   	
		Если НЕ СтрокаЗаявкиНаЗакупку.КостЦентр.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.КостЦентр);
		КонецЕсли;   	
		Если НЕ СтрокаЗаявкиНаЗакупку.Владелец.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.Владелец);
		КонецЕсли;
		
	Иначе
		
		Если мСтруктураКэшРегистрации["СтрокаЗаявкиНаЗакупку"].Найти(СтрокаЗаявкиНаЗакупку) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку);
			мСтруктураКэшРегистрации["СтрокаЗаявкиНаЗакупку"].Добавить(СтрокаЗаявкиНаЗакупку);
		КонецЕсли;
		
		Если НЕ СтрокаЗаявкиНаЗакупку.Каталог.Пустая() И мСтруктураКэшРегистрации["Каталог"].Найти(СтрокаЗаявкиНаЗакупку.Каталог) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.Каталог);
			мСтруктураКэшРегистрации["Каталог"].Добавить(СтрокаЗаявкиНаЗакупку.Каталог);
		КонецЕсли;    	
		Если НЕ СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения.Пустая() И мСтруктураКэшРегистрации["ЕдиницаИзмерения"].Найти(СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения);
			мСтруктураКэшРегистрации["ЕдиницаИзмерения"].Добавить(СтрокаЗаявкиНаЗакупку.ЕдиницаИзмерения);
		КонецЕсли;   	
		Если НЕ СтрокаЗаявкиНаЗакупку.КостЦентр.Пустая() И мСтруктураКэшРегистрации["КостЦентр"].Найти(СтрокаЗаявкиНаЗакупку.КостЦентр) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.КостЦентр);
			мСтруктураКэшРегистрации["КостЦентр"].Добавить(СтрокаЗаявкиНаЗакупку.КостЦентр);
		КонецЕсли;   	
		Если НЕ СтрокаЗаявкиНаЗакупку.Владелец.Пустая() И мСтруктураКэшРегистрации["Владелец"].Найти(СтрокаЗаявкиНаЗакупку.Владелец) = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаЗаявкиНаЗакупку.Владелец);
			мСтруктураКэшРегистрации["Владелец"].Добавить(СтрокаЗаявкиНаЗакупку.Владелец);
		КонецЕсли;		
		
	КонецЕсли;

	
КонецПроцедуры
 
Процедура ЗарегистрироватьТоварыСтрокиГТД(УзелОбмена, СтрокаГТД)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыСтрокГТД.Ссылка
		|ИЗ
		|	Справочник.ТоварыСтрокГТД КАК ТоварыСтрокГТД
		|ГДЕ
		|	ТоварыСтрокГТД.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", СтрокаГТД);
 	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПрисоединенныеФайлы(УзелОбмена, Источник)
	
	Если УзелОбмена.Пустая() Тогда
		Возврат;
	КонецЕсли;  
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Ссылка);			
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник.Том); 
	
КонецПроцедуры
 
Функция НайтиУзелПланаОбмена(SoldTo)
	
	Если SoldTo = Справочники.SoldTo.ПустаяСсылка() Тогда
		Возврат ПланыОбмена.SLBImportExport.ПустаяСсылка();
	Иначе
		//Возврат ПланыОбмена.SLBImportExport.НайтиПоРеквизиту("SoldTo", SoldTo);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	SLBImportExportParentCompanies.Ссылка
		|ИЗ
		|	ПланОбмена.SLBImportExport.ParentCompanies КАК SLBImportExportParentCompanies
		|ГДЕ
		|	SLBImportExportParentCompanies.SoldTo = &SoldTo
		|	И НЕ SLBImportExportParentCompanies.Ссылка.ЭтотУзел";
		
		Запрос.УстановитьПараметр("SoldTo", SoldTo);
		
		РезультатЗапроса = Запрос.Выполнить();	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат ?(НЕ ЗначениеЗаполнено(Выборка.Ссылка), ПланыОбмена.SLBImportExport.ПустаяСсылка(), Выборка.Ссылка);

	КонецЕсли;
		
КонецФункции
//[<-РКХ]

//[РКХ->]
Процедура ПередУдалениемОбменImpExpПередУдалением(Источник, Отказ) Экспорт
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() <> "SLI RU" Тогда
		Возврат;
	КонецЕсли;
	//[<-РКХ]
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
		
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ГТД") Тогда
		
		УзелОбмена = НайтиУзелПланаОбмена(Источник.SoldTo); 		
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;    
		Удаление = Новый УдалениеОбъекта(Источник.Ссылка);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Удаление); 	
		
	ИначеЕсли ТипЗнч(Источник)=Тип("СправочникОбъект.СтрокиГТД") Тогда 
		
		Если Не ЗначениеЗаполнено(Источник.ГТД) Тогда
			Возврат;
		КонецЕсли; 
		УзелОбмена = НайтиУзелПланаОбмена(Источник.ГТД.SoldTo);
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Удаление = Новый УдалениеОбъекта(Источник.Ссылка);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Удаление);
		
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.Инвойс") Тогда
		                                
		УзелОбмена = НайтиУзелПланаОбмена(Источник.Покупатель); 		
		Если УзелОбмена.Пустая() Тогда
			Возврат;
		КонецЕсли;   
		
		Удаление = Новый УдалениеОбъекта(Источник.Ссылка);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Удаление);

			
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.InvoiceLinesClassification") Тогда
		ЗакрытиеПоставки = Источник.InvoiceLinesMatching;
		Если Не ЗначениеЗаполнено(ЗакрытиеПоставки) Тогда
			Возврат;
		КонецЕсли; 
		
		// ищем закрытие поставки, и из него берем SoldTo. Если хоть одно совпадает 
		// с узлом плана обмена, то регистрируем
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	InvoiceLinesCosts.SoldTo
		|ИЗ
		|	РегистрНакопления.InvoiceLinesCosts КАК InvoiceLinesCosts
		|ГДЕ
		|	InvoiceLinesCosts.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", ЗакрытиеПоставки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		УзелНайден = Ложь;
		Пока Выборка.Следующий() Цикл
			УзелОбмена = НайтиУзелПланаОбмена(Выборка.SoldTo);
			Если Не УзелОбмена.Пустая() Тогда
				УзелНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УзелНайден Тогда
			Удаление = Новый УдалениеОбъекта(Источник.Ссылка);
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Удаление);  
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьCustomsFilesOfGoods(УзелОбмена, ЗакрытиеПоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CustomsFilesOfGoods.Регистратор
		|ИЗ
		|	РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
		|ГДЕ
		|	CustomsFilesOfGoods.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	CustomsFilesOfGoods.Регистратор";
	Запрос.Параметры.Вставить("Регистратор", ЗакрытиеПоставки);
 	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		
		НаборЗаписей = РегистрыСведений.CustomsFilesOfGoods.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать(); 
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
		
	КонецЕсли;
 	
КонецПроцедуры   

// Контроль обменов
Процедура КонтрольОбменовSLBImportExport(КодыПланаОбменаSLB) Экспорт
	
	// { RGS AArsentev 10.04.2017 - список настроенных синхронизаций
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиОбменаДанными.Код
	|ИЗ
	|	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
	|ГДЕ
	|	НЕ НастройкиОбменаДанными.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выгрузить();
	КодыПланаОбменаSLB = Результат.ВыгрузитьКолонку("Код");
	// } RGS AArsentev 10.04.2017
	
	ТекДата 							= ТекущаяДата(); 		
	ДатаНачалаАнализаОбмена 			= ТекДата - 6*60*60; 	// обмен должен быть совершен удачно менее 6 часов назад    	                                	 
	ДатаНачалаАнализаРегистрации 		= ТекДата - 30*60; 		// все объекты должны быть зарегистрированы не менее 30 минут назад  	                                	  
	СколькоЖдатьДоОтправкиСледПисьма	= 9*60*60;
	НадоОтправитьОтчет 					= Ложь;
	
	Попытка
		АнализУзлов = ПолучитьСтруктуруАнализаОбменаДляУзлов(КодыПланаОбменаSLB, ДатаНачалаАнализаОбмена);	
	Исключение
		АнализУзлов = Новый Структура;
	КонецПопытки;	
		
	Попытка
		НевыполненныхРегистраций = ПолучитьКоличествоНевыполненныхРегистраций(ДатаНачалаАнализаРегистрации);
	Исключение
		НевыполненныхРегистраций = -1;
	КонецПопытки;
	                                                	
	//Примем решение о необходимости отправки отчета
	Если АнализУзлов.Количество() Тогда
		Для каждого СтрАнализа из АнализУзлов Цикл
			Если НЕ СтрАнализа.Значение.ЗагрузкаВыполненаПоРегламенту ИЛИ НЕ СтрАнализа.Значение.ВыгрузкаВыполненаПоРегламенту Тогда
				НадоОтправитьОтчет = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НадоОтправитьОтчет = Истина;	
	КонецЕсли;	
	Если НевыполненныхРегистраций > 0 ИЛИ НевыполненныхРегистраций = -1 Тогда
		НадоОтправитьОтчет = Истина;
	КонецЕсли;	
	//<==
	
	Если НадоОтправитьОтчет Тогда 
		
		ВремяПредыдущегоОтправления 	= Неопределено;
		Попытка 
			ВремяПредыдущегоОтправления = ХранилищеОбщихНастроек.Загрузить("КонтрольОбменовSLBImportExport", "ВремяПредыдущегоОтправления", , "ПользовательПессимист");
		Исключение
		КонецПопытки;

		Если НЕ (ВремяПредыдущегоОтправления = Неопределено ИЛИ ВремяПредыдущегоОтправления = Дата(1,1,1)) Тогда 						
			Если НЕ (ВремяПредыдущегоОтправления <= (ТекДата - СколькоЖдатьДоОтправкиСледПисьма)) Тогда  
				ЗаписьЖурналаРегистрации("КонтрольОбменовSLBImportExport - отправление на почту необходимо, но ПРОПУЩЕНО, т.к. недавно уже были письма",УровеньЖурналаРегистрации.Информация);		
				Возврат;
			КонецЕсли;										
		КонецЕсли;   		
		
		СтруктураПараметровПисьма 			= ПолучитьПараметрыПисьма(АнализУзлов, НевыполненныхРегистраций, ДатаНачалаАнализаОбмена, ДатаНачалаАнализаРегистрации, ВремяПредыдущегоОтправления);
		СистемнаяУчетнаяЗапись 				= РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, СтруктураПараметровПисьма);   
		ХранилищеОбщихНастроек.Сохранить("КонтрольОбменовSLBImportExport", "ВремяПредыдущегоОтправления", ТекущаяДата(), ,"ПользовательПессимист");		
		
	КонецЕсли;  
	
КонецПроцедуры

Функция ПолучитьСтруктуруИнформацииПоУзлу(УзелИнформационнойБазы)
	
	ПустаяДата			= Дата(1,1,1);
	
	ИнформацияПоУзлу 		= Новый Структура;  	                                          		
	ИнформацияПоУзлу.Вставить("УзелИнформационнойБазы",			УзелИнформационнойБазы); 
	ИнформацияПоУзлу.Вставить("ДатаПоследнейЗагрузки",			ПустаяДата);
	ИнформацияПоУзлу.Вставить("ЗагрузкаВыполненаПоРегламенту",	Ложь);
	ИнформацияПоУзлу.Вставить("КомментарийКЗагрузкеДанных",		"Нет активных загрузок");	                                                                      	
	ИнформацияПоУзлу.Вставить("ДатаПоследнейВыгрузки",			ПустаяДата);
	ИнформацияПоУзлу.Вставить("ВыгрузкаВыполненаПоРегламенту",	Ложь);	
	ИнформацияПоУзлу.Вставить("КомментарийКВыгрузкеДанных",		"Нет активных выгрузок"); 	
	
	Возврат ИнформацияПоУзлу;
	
КонецФункции

Функция ПолучитьСтруктуруАнализаОбменаДляУзлов(КодыПланаОбменаSLB,ДатаНачалаАнализаОбмена)
		
	МассивУзловSLBImportExport = Новый Массив;
	
	Для каждого Код из КодыПланаОбменаSLB Цикл
		Узел = ПланыОбмена.SLBImportExport.НайтиПоКоду(Код);
		Если ЗначениеЗаполнено(Узел) Тогда
			МассивУзловSLBImportExport.Добавить(Узел);		
		КонецЕсли;
	КонецЦикла;      
	
	АнализУзлов 			= Новый Структура;
	
	Если НЕ МассивУзловSLBImportExport.Количество() Тогда
		Возврат АнализУзлов;
	КонецЕсли;	

	Для каждого Узел из МассивУзловSLBImportExport Цикл
		ИнформацияПоУзлу	= ПолучитьСтруктуруИнформацииПоУзлу(Узел);
		УИД 				= "guid"+СтрЗаменить(Строка(Узел.УникальныйИдентификатор()),"-","");
		АнализУзлов.Вставить(УИД, ИнформацияПоУзлу);	
	КонецЦикла;                  	
	
	//******************************************************** АНАЛИЗ ОБМЕНОВ	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзлыИнформационнойБазы", 	МассивУзловSLBImportExport);
	Запрос.УстановитьПараметр("ДатаНачалаАнализаОбмена", 	ДатаНачалаАнализаОбмена);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияОбменаДанными.Период КАК Период,
		|	ИсторияОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
		|	ИсторияОбменаДанными.ДатаПоследнейЗагрузки,
		|	ИсторияОбменаДанными.ДатаПоследнейВыгрузки,
		|	ИсторияОбменаДанными.РезультатПоследнейЗагрузки,
		|	ИсторияОбменаДанными.РезультатПоследнейВыгрузки,
		|	ИсторияОбменаДанными.КомментарийКЗагрузкеДанных,
		|	ИсторияОбменаДанными.КомментарийКВыгрузкеДанных
		|ИЗ
		|	РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменаДанными
		|ГДЕ
		|	ИсторияОбменаДанными.УзелИнформационнойБазы В(&УзлыИнформационнойБазы)
		|	И ИсторияОбменаДанными.Период >= НАЧАЛОПЕРИОДА(&ДатаНачалаАнализаОбмена, ДЕНЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|ИТОГИ ПО
		|	УзелИнформационнойБазы";

	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаУзелИнформационнойБазы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаУзелИнформационнойБазы.Следующий() Цикл
		
		ТекущийУзел 			= ВыборкаУзелИнформационнойБазы.УзелИнформационнойБазы;		
		УИД						= "guid"+СтрЗаменить(Строка(ТекущийУзел.УникальныйИдентификатор()),"-","");						
		СтруктураИнформации 	= АнализУзлов[УИД];	
		
		ВыборкаДетальныеЗаписи = ВыборкаУзелИнформационнойБазы.Выбрать();
		
		ДанныеЗагрузкиЗаполнены = Ложь;
		ДанныеВыгрузкиЗаполнены = Ложь;
		
		Пока ВыборкаДетальныеЗаписи.Следующий()  И (НЕ ДанныеЗагрузкиЗаполнены ИЛИ НЕ ДанныеВыгрузкиЗаполнены) Цикл

			// АНАЛИЗ ЗАГРУЗКИ  		
			Если НЕ ДанныеЗагрузкиЗаполнены Тогда
				
				РезультатПоследнейЗагрузки = ВыборкаДетальныеЗаписи.РезультатПоследнейЗагрузки;
				ДатаПоследнейЗагрузки	   = ВыборкаДетальныеЗаписи.ДатаПоследнейЗагрузки;
				ЭтоАнализируемаяЗапись	   = ТипЗнч(РезультатПоследнейЗагрузки) = Тип("Булево") И ТипЗнч(ДатаПоследнейЗагрузки) = Тип("Дата");
				
				Если ЭтоАнализируемаяЗапись Тогда 			
					Если РезультатПоследнейЗагрузки = Истина И ДатаПоследнейЗагрузки > ДатаНачалаАнализаОбмена Тогда  						
						СтруктураИнформации["ДатаПоследнейЗагрузки"] 			= ДатаПоследнейЗагрузки;
						СтруктураИнформации["ЗагрузкаВыполненаПоРегламенту"] 	= Истина;
						СтруктураИнформации["КомментарийКЗагрузкеДанных"]		= "Загрузка успешно завершена";
						ДанныеЗагрузкиЗаполнены 								= Истина;         						
					ИначеЕсли РезультатПоследнейЗагрузки = Ложь Тогда   						
						КомментарийКЗагрузкеДанных = ВыборкаДетальныеЗаписи.КомментарийКЗагрузкеДанных;  						
						ЭтоИгнорируемаяОшибка =  СтрНайти(КомментарийКЗагрузкеДанных,"Error calling context method (НачатьЧтение): Message number is less than or equal to the number of one of the previously received messages")
						ИЛИ СтрНайти(КомментарийКЗагрузкеДанных,"Ошибка при вызове метода контекста (НачатьЧтение): Номер сообщения меньше или равен номеру ранее принятого сообщения");
						
						Если НЕ ЭтоИгнорируемаяОшибка Тогда					 
							СтруктураИнформации["ДатаПоследнейЗагрузки"] 			= ДатаПоследнейЗагрузки;
							СтруктураИнформации["ЗагрузкаВыполненаПоРегламенту"] 	= Ложь;
							СтруктураИнформации["КомментарийКЗагрузкеДанных"] 		= ?(СокрЛП(КомментарийКЗагрузкеДанных) = "", "Прочая ошибка", КомментарийКЗагрузкеДанных); 				
							ДанныеЗагрузкиЗаполнены			 						= Истина;					
						КонецЕсли;   					
					КонецЕсли; 			
				КонецЕсли;  		           			
				
			КонецЕсли;     			
			// КОНЕЦ АНАЛИЗА ЗАГРУЗКИ
			
			// АНАЛИЗ ВЫГРУЗКИ  		
			Если НЕ ДанныеВыгрузкиЗаполнены Тогда
				
				РезультатПоследнейВыгрузки = ВыборкаДетальныеЗаписи.РезультатПоследнейВыгрузки;
				ДатаПоследнейВыгрузки	   = ВыборкаДетальныеЗаписи.ДатаПоследнейВыгрузки;
				ЭтоАнализируемаяЗапись	   = ТипЗнч(РезультатПоследнейВыгрузки) = Тип("Булево") И ТипЗнч(ДатаПоследнейВыгрузки) = Тип("Дата");
				
				Если ЭтоАнализируемаяЗапись Тогда 			
					Если РезультатПоследнейВыгрузки = Истина И ДатаПоследнейВыгрузки > ДатаНачалаАнализаОбмена Тогда  						
						СтруктураИнформации["ДатаПоследнейВыгрузки"] 			= ДатаПоследнейВыгрузки;
						СтруктураИнформации["ВыгрузкаВыполненаПоРегламенту"] 	= Истина;
						СтруктураИнформации["КомментарийКВыгрузкеДанных"]		= "Выгрузка успешно завершена";
						ДанныеВыгрузкиЗаполнены 								= Истина;         						
					ИначеЕсли РезультатПоследнейВыгрузки = Ложь Тогда  					
						КомментарийКВыгрузкеДанных = ВыборкаДетальныеЗаписи.КомментарийКВыгрузкеДанных;  						
					    СтруктураИнформации["ДатаПоследнейВыгрузки"] 			= ДатаПоследнейВыгрузки;
						СтруктураИнформации["ВыгрузкаВыполненаПоРегламенту"] 	= Ложь;
						СтруктураИнформации["КомментарийКВыгрузкеДанных"] 		= ?(СокрЛП(КомментарийКВыгрузкеДанных) = "", "Прочая ошибка", КомментарийКВыгрузкеДанных); 				
						ДанныеВыгрузкиЗаполнены			 						= Истина;			
					КонецЕсли; 			
				КонецЕсли;  		           			
				
			КонецЕсли;     			
			// КОНЕЦ АНАЛИЗА ВЫГРУЗКИ     		
			
		КонецЦикла;  	
		
	КонецЦикла;

	Возврат АнализУзлов;
	
КонецФункции	

Функция ПолучитьКоличествоНевыполненныхРегистраций(ДатаНачалаАнализаРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОтложеннаяРегистрацияSLBImportExport.Объект) КАК КоличествоРег
		|ИЗ
		|	РегистрСведений.ОтложеннаяРегистрацияSLBImportExport КАК ОтложеннаяРегистрацияSLBImportExport
		|ГДЕ
		|	ОтложеннаяРегистрацияSLBImportExport.ДатаОбновления <= &ДатаНачалаАнализаРегистрации";

	Запрос.УстановитьПараметр("ДатаНачалаАнализаРегистрации", ДатаНачалаАнализаРегистрации);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	НевыполненныхРегистраций = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НевыполненныхРегистраций = ВыборкаДетальныеЗаписи.КоличествоРег;
	КонецЕсли;
	
	Возврат НевыполненныхРегистраций;
	
КонецФункции

//TODO
Функция ПолучитьПараметрыПисьма(АнализУзлов, НевыполненныхРегистраций,  ДатаНачалаАнализаОбмена, ДатаНачалаАнализаРегистрации, ВремяПредыдущегоОтправления = Неопределено)
									
	СтруктураПараметровПисьма = Новый Структура;
	
	// Кому
		
	ПолучателиОтчета = Константы.АдресатыПолученияОтчетаПоЖурналуРегистрации.Получить();
		
	Если ПустаяСтрока(ПолучателиОтчета) Тогда
		ВызватьИсключение "Не указан ни один получатель отчета по обменам SLBImportExort.";	
	КонецЕсли;	
	СтруктураПараметровПисьма.Вставить("Кому", ПолучателиОтчета);
	
	ПредставлениеИБ = ОбщегоНазначения.ПолучитьПредставлениеИнформационнойБазы();
	
	// Тема
	Тема = "Ошибки и предупреждения обмена SLBImportExport информационной базы " + ПредставлениеИБ;	
	СтруктураПараметровПисьма.Вставить("Тема", Тема);
	
	// Тело
	ТекстТелаПисьма = 
		"Информация по ошибкам и предупреждениям обмена SLBImportExport .
		|Информационная база: " + ПредставлениеИБ;  
		
	Если НЕ АнализУзлов.Количество() тогда
		
		ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + "Внимание! Не заданы узлы обмена SLBImportExport для отслеживания!";			
		
	Иначе		
		
		Для каждого ТекАнализ из АнализУзлов Цикл
			
			СтрУзла = ТекАнализ.Значение;
			
			СтрокаТела = Символы.ПС + Символы.ПС + Символы.ПС + "УЗЕЛ: " + СтрУзла.УзелИнформационнойБазы + Символы.ПС + Символы.ПС +
							"С даты " + ДатаНачалаАнализаОбмена + " произошли следующие события:" + Символы.ПС +
							"Загрузка выполнена:    " + ?(СтрУзла.ЗагрузкаВыполненаПоРегламенту, " ДА", " НЕТ") + Символы.ПС +
							"Дата загрузки:         " + Строка(СтрУзла.ДатаПоследнейЗагрузки) + Символы.ПС +
							"Комментарий загрузки:  " + Строка(СтрУзла.КомментарийКЗагрузкеДанных) + Символы.ПС + Символы.ПС +
							"Выгрузка выполнена:    " + ?(СтрУзла.ВыгрузкаВыполненаПоРегламенту, " ДА", " НЕТ") + Символы.ПС +
							"Дата выгрузки:         " + Строка(СтрУзла.ДатаПоследнейВыгрузки) + Символы.ПС +
							"Комментарий выгрузки:  " + Строка(СтрУзла.КомментарийКВыгрузкеДанных); 
						
			ТекстТелаПисьма = ТекстТелаПисьма + СтрокаТела;		
				
		КонецЦикла;
	
	КонецЕсли;
	
	ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + Символы.ПС;	
	
	Если НевыполненныхРегистраций = -1 Тогда
		ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + "ОШИБКА определения невыполненных регистраций!";
	Иначе     		
		ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + "Невыполненных регистраций по обмену SLBImportExport до даты: " + ДатаНачалаАнализаРегистрации + ": " + НевыполненныхРегистраций;
	КонецЕсли;
	
	ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + Символы.ПС;	
	
	Если ВремяПредыдущегоОтправления <> Неопределено И ВремяПредыдущегоОтправления <> Дата(1,1,1) Тогда
		ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + "Предыдущее отправление этого письма было " + ВремяПредыдущегоОтправления + " письмо будет высылаться несколько раз в день, при наличии ошибки!";
	Иначе
		ТекстТелаПисьма = ТекстТелаПисьма + Символы.ПС + "Невозможно определить время предыдущего отправления этого письма";
	КонецЕсли;
	
	СтруктураПараметровПисьма.Вставить("Тело", ТекстТелаПисьма);
	
	Возврат СтруктураПараметровПисьма;
	
КонецФункции 
//[<-РКХ]

//[РКХ->]
Процедура ПриЗаписиОбменImpExpПриЗаписиРC(Источник, Отказ, Замещение) Экспорт
	// { RGS MYurkevich 30.06.2016 11:44:40 - SLI-0006553
	УзелОбменаSLI = ПланыОбмена.SLBImportExport.НайтиПоКоду("SLI");
	УзелОбменаRCA = ПланыОбмена.SLBImportExport.НайтиПоКоду("RCA");

	
	Если УзелОбменаRCA.Пустая() ИЛИ УзелОбменаSLI.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаSLI = ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
		УзелОбмена = УзелОбменаRCA;
	ИначеЕсли УзелОбменаRCA = ПланыОбмена.SLBImportExport.ЭтотУзел() Тогда
	    УзелОбмена = УзелОбменаSLI;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
				
	//18.07.16
	Попытка
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Источник);   	
	Исключение
	КонецПопытки;
	// регистрация объектов из набора
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.AUsAndLegalEntities") Тогда
		Для Каждого СтрокаНабора Из Источник Цикл
			
			Если НЕ СтрокаНабора.AU.Пустая() Тогда   			
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.AU);
			КонецЕсли;
			
			Если НЕ СтрокаНабора.ParentCompany.Пустая() Тогда   			
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.ParentCompany);
			КонецЕсли;
			
			Если НЕ СтрокаНабора.LegalEntity.Пустая() Тогда   			
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.LegalEntity);
			КонецЕсли;
			
		КонецЦикла;	
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СегментыКостЦентров") Тогда
		Для Каждого СтрокаНабора Из Источник Цикл
			
			Если НЕ СтрокаНабора.КостЦентр.Пустая() Тогда   			
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаНабора.КостЦентр);
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры 
//[<-РКХ]

// СОБЫТИЯ ДЛЯ РЕГИСТРАЦИИ МЕСТА СОЗДАНИЯ ОБЪЕКТА
///////////////////////////////////////////////////////////////////////////////

// процедура регистрируем место создания нового объекта информационной базы
Процедура ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(СсылкаНаОбъект, УзелОбмена = Неопределено)
	
	НаборЗаписейРегистра = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = СсылкаНаОбъект;
	СтрокаНабора.УзелОбмена = УзелОбмена;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// обработчик события перед записью документа для регистрации места создания
Процедура ПередЗаписьюДокументаРегистрацияОбъектаИнформационнойБазыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	НужноРегистрироватьМестоСоздания = Источник.ЭтоНовый();
		//И ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов;
	
	Источник.ДополнительныеСвойства.Вставить("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
КонецПроцедуры

// обработчик события при записи документа для регистрации места создания
Процедура ПриЗаписиДокументаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Источник, Отказ) Экспорт
	
	НужноРегистрироватьМестоСоздания = Ложь;
	Источник.ДополнительныеСвойства.Свойство("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
	Если НужноРегистрироватьМестосоздания <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (Источник.ОбменДанными.Загрузка = Истина ИЛИ Источник.ДополнительныеСвойства.Свойство("Leg7ReportLoading"))
		И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
		
		// обмен с определенным узлом
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Источник.ОбменДанными.Отправитель);
		
	Иначе
		
		// объект создан в этой информационной базе
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// { RGS AArsentev 18.12.2017
Функция ПроверитьНаЗапретОбмена(ДокСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ЗакрытиеПоставки") Тогда
		
		Запрещено = ПроверитьMatchingВРегистреДляЗапрета(ДокСсылка);
		
		Возврат Запрещено;
		
	ИначеЕсли ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ГТД") Тогда
		
		Shipment = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "Shipment");
		Если ЗначениеЗаполнено(Shipment) Тогда
			
			InvoiceLinesMatching = CustomsСервер.ПолучитьClosingDocument(Shipment);
			
			Если ЗначениеЗаполнено(InvoiceLinesMatching) Тогда
				Запрещено = ПроверитьMatchingВРегистреДляЗапрета(InvoiceLinesMatching);
				Возврат Запрещено;
			Иначе 
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.InvoiceLinesClassification") Тогда
		
		InvoiceLinesMatching = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "InvoiceLinesMatching");
		
		Если ЗначениеЗаполнено(InvoiceLinesMatching) Тогда
			Запрещено = ПроверитьMatchingВРегистреДляЗапрета(InvoiceLinesMatching);
			Возврат Запрещено;
		Иначе 
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ExportShipment") ИЛИ ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.Поставка") Тогда 
		
		InvoiceLinesMatching = CustomsСервер.ПолучитьClosingDocument(ДокСсылка);
		
		Если ЗначениеЗаполнено(InvoiceLinesMatching) Тогда
			Запрещено = ПроверитьMatchingВРегистреДляЗапрета(InvoiceLinesMatching);
			Возврат Запрещено;
		Иначе 
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 18.12.2017

// { RGS AArsentev 18.12.2017
Функция ПроверитьMatchingВРегистреДляЗапрета(Matching) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	rgsDisableOfExcangeToTB.Ссылка
	|ИЗ
	|	РегистрСведений.rgsDisableOfExcangeToTB КАК rgsDisableOfExcangeToTB
	|ГДЕ
	|	rgsDisableOfExcangeToTB.Ссылка = &ЗакрытиеПоставки";
	Запрос.УстановитьПараметр("ЗакрытиеПоставки", Matching);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 18.12.2017
