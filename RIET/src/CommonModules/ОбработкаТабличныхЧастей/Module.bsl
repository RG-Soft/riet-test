// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) И
		ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	    	                                               ?(ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента),ДокументОбъект.УчитыватьНДС,Истина), 
														   ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента),ДокументОбъект.СуммаВключаетНДС,Ложь),
	            	                                       УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт

	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	//Изменил Трефиленков Дмитрий, РГ-Софт
	Если Не СтрокаТабличнойЧасти.Цена = 0 И Не СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	//конец изменения

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт

	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;

КонецПроцедуры // РассчитатьСуммуВозвратнойТарыТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	//ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	//МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
	//		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент;
	//КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура ПересчитатьПлановуюСумму(СтрокаТЧ) Экспорт

	СтрокаТЧ.СуммаПлановая = СтрокаТЧ.Количество * СтрокаТЧ.ПлановаяСтоимость;

КонецПроцедуры // ПересчитатьПлановуюСумму()

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Заполнить СтавкаНДС
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
		и ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		и ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
						УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		ИначеЕсли ЦенаВключаетНДС  Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;
		
	Иначе // Надо пересчитывать строго по флагам включения
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				// Надо исключать НДС
				НадоИсключитьНДС = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);  
	КурсДок         = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	КратностьДок    = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ОбщегоНазначения.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	//Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	ТипЦен = "";
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		ТипЦен = ДокументОбъект.ТипЦен;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
		                            ВалютаДокумента, КурсДок, КратностьДок);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
						И ДокументОбъект.УчитыватьНДС, 
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
				СтрокаТабличнойЧасти.Коэффициент      = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Рассчитывает процент розничной наценкив строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Перем ЦенаСНалогами;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Рассчитывать процент имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНеавтоматизированныйРозничныйСкладДокумента(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
		СтрокаТабличнойЧасти.ЦенаВРознице = 0;
	Иначе

		// Пересчитываем в рубли
		ЦенаСНалогами = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ДокументОбъект.ВалютаДокумента, 
									ВалютаРегламентированногоУчета,
									ДокументОбъект.КурсДокумента, 1,ДокументОбъект.КратностьДокумента,1);
									
		ЕстьНалоги = ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента);
				   
		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли; 	
		
		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
							Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
							СуммаВключаетНДС, Истина, Истина, СтавкаНДС);

		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами;
		
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		                                               / ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;

КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиТабЧасти()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	//СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);

КонецПроцедуры // РассчитатьЦенуТабЧасти()

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Установить коэффициент
	СтрокаТабличнойЧасти.Коэффициент = 1; 

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СтруктураШапкиДокумента.Свойство("ТипЦен", ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",    ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",  ВалютаДокумента);
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",     УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СтрокаТабличнойЧасти.Цена             = 0;
		КонецЕсли;

	Иначе
		// из регистра
		Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                                 ТипЦен, ДатаДокумента,
		                                 ВалютаДокумента, ОбщегоНазначения.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 
		                                 ОбщегоНазначения.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				            ТипЦен.ЦенаВключаетНДС,
				            УчитыватьНДС, СуммаВключаетНДС, 
				            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент = 1
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
	// вычислим цену за базовую единицу
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Процедура заполняет номер ГТД и Страну происхождения в строке ТЧ
//
// Параметры
//  СтрокаТабличнойЧасти - Строка ТЧ
//  Поступление - Булево, проставлять номер ГТД для поступления или для расхода
//  Организация - СправочникСсылка.Организации, для какой организации определять остатки по номеру ГТД при расходе
//  ДатаОстатков - Дата, на которую определять остатки по номеру ГТД
//  СтруктураСоответствияИмен - Структура, в которой содержатся имена полей ТЧ соответствующие именам "Номенклатура"
//  Комиссионер - СправочникСсылка.Контрагенты, комиссионер, по которому показывать остатки по номеру ГТД
//
Процедура ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Поступление = Истина, Организация = Неопределено, ДатаОстатков = Неопределено, СтруктураСоответствияИмен = Неопределено, Комиссионер = Неопределено) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ОбщегоНазначения.ПолучитьМетаданныеДокументаПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	Если не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.НомерГТД = СтрокаТабличнойЧасти.Номенклатура.НомерГТД;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьНомерГТДИСтрануПроисхождения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ


// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы в строке возвратной тары документа.
//
// Параметры:
//  СтрокаВозвратнойТары - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ДокументОбъект) Экспорт

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаВозвратнойТары.Количество) Тогда
		СтрокаВозвратнойТары.Цена = 0;
	Иначе	
		СтрокаВозвратнойТары.Цена = СтрокаВозвратнойТары.Сумма / СтрокаВозвратнойТары.Количество;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении счета бухгалтерского учета  
// в строке табличной части документа (заполняет счет налогового учета).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//
Процедура ЗаполнитьСчетНУпоСчетуБУТабЧасти(СтрокаТабличнойЧасти, Знач ТекущаяДата = Неопределено) Экспорт

	СтрокаТабличнойЧасти.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетУчетаБУ), , , ТекущаяДата);

КонецПроцедуры // ЗаполнитьСчетНУпоСчетуБУТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
    //Изменил Трефиленков Дмитрий, РГ-Софт
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СодержаниеEng", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеEng = СтрокаТабличнойЧасти.Номенклатура.НаименованиеEng;

		Если ПустаяСтрока(НаименованиеEng) Тогда
			СтрокаТабличнойЧасти.СодержаниеEng = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.СодержаниеEng = НаименованиеEng;
		КонецЕсли;
	КонецЕсли;
	//конец изменения
	
КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	//СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;  // такого перечисления нет

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	СтрокаТабличнойЧасти.Коэффициент      = 1;

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу и розничную цену продажи по в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа;
//  ДокументОбъект                 - объект редактируемого документа;
//  СкладКомпании                  - ссылка на справочник, розничный склад компании по которому надо 
//                                   определить розничную цену;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ЗаказПокупателя                - ссылка на документ, Заказ покупателя, из резерва по которому надо
//                                   определить розничную цену, если не задан, то розничная цена
//                                   берется для сводного остатка
//
Процедура ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладКомпании,
	                                                   ВалютаРегламентированногоУчета, ЗаказПокупателя = Неопределено) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СкладКомпании) Тогда
		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Цена = 0;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						Истина,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
						И ДокументОбъект.УчитыватьНДС, 
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;

		СтрокаТабличнойЧасти.Коэффициент = 1;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти()

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику

	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;
		
	Иначе

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Контрагент)
		 Или ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда

			// берем из самого реквизита Номенклатура
			СтрокаТабличнойЧасти.Цена = 0;

		Иначе
			// из регистра
			// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				Цена = 0;
			Иначе
				Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
				                                ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
				                                ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
				                                ДокументОбъект.КратностьВзаиморасчетов);
			КонецЕсли;

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС, но без НП,
			// ставки бурутся из номенклатуры
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Цена) Тогда
				СтрокаТабличнойЧасти.Цена = 0;
			Иначе
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                                ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                                ДокументОбъект.УчитыватьНДС, Истина, 
				                                УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ДоговорКонтрагента   - договор контрагента в случае, если его надо брать не из данного документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;

			Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
			                            ДокументОбъект.КратностьВзаиморасчетов);
		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ДокументОбъект.УчитыватьНДС, Истина, 
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск()

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, Дата,
	                             Валюта = Неопределено, Курс = 0, Кратность = 1) Экспорт

	ПолученнаяЦена = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;

	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда

		СтруктураКурсаЦены = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
		                                               СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
		                                               Курс, Кратность);

	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()

