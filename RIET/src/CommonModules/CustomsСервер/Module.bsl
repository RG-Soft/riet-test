
// УДАЛИТЬ ИЗ ЭТОГО МОДУЛЯ. ЭТА ФУНКЦИЯ ЕСТЬ В ImportExportВызовСервера
Функция НайтиPOПоНомеру(Знач НомерPO) Экспорт
	
	НомерPO = CustomsКлиентСервер.ПолучитьНомерPOДляПоиска(НомерPO);
   	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерPO", НомерPO);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкиНаЗакупку.Ссылка
		|ИЗ
		|	Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
		|ГДЕ
		|	ЗаявкиНаЗакупку.Код = &НомерPO
		|	И (НЕ ЗаявкиНаЗакупку.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции  

Функция НайтиBORGПоНомеру(Знач НомерPO) Экспорт
	
	НомерPO = CustomsКлиентСервер.ПолучитьНомерPOДляПоиска(НомерPO);
   	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерPO", НомерPO);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	BORGs.Ссылка
		|ИЗ
		|	Справочник.BORGs КАК BORGs
		|ГДЕ
		|	BORGs.Код = &НомерPO";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// CUSTOMS

// CUSTOMS DOCUMENTS

Функция ПолучитьНомерТаможенногоДокумента(КодПоста, Дата, ПорядковыйНомер) Экспорт
	
	Номер = "";
	
	// Таможенный пост	
	ИспользуемыйКодПоста = СокрЛП(КодПоста);
	ИспользуемыйКодПоста = ?(ЗначениеЗаполнено(ИспользуемыйКодПоста), ИспользуемыйКодПоста, " ");	
	Номер = Номер + КодПоста;
	
	// Дата
	Номер = Номер + "-";
	ИспользуемаяДата = ?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДФ=ddMMyy"), " ");
	Номер = Номер + ИспользуемаяДата;
	
	// Номер за день
	Номер = Номер + "-";
	ИспользуемыйПорядковыйНомер = СокрЛП(ПорядковыйНомер);
	ИспользуемыйПорядковыйНомер = ?(ЗначениеЗаполнено(ИспользуемыйПорядковыйНомер), ИспользуемыйПорядковыйНомер, " ");
	Номер = Номер + ИспользуемыйПорядковыйНомер;
		
	Возврат Номер;
	
КонецФункции


// SHIPMENT CLOSING
// ПЕРЕНЕСТИ В МОДУЛИ МЕНЕДЖЕРА!

Функция ПолучитьClosingDocument(Shipment) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Shipment) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Shipment", Shipment);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ItemsMatching.Ссылка
		|ИЗ
		|	Документ.ЗакрытиеПоставки КАК ItemsMatching
		|ГДЕ
		|	ItemsMatching.Поставка = &Shipment
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CustomsFilesLight.Ссылка
		|ИЗ
		|	Документ.CustomsFilesLight КАК CustomsFilesLight
		|ГДЕ
		|	CustomsFilesLight.Shipment = &Shipment
		|	И НЕ CustomsFilesLight.ПометкаУдаления
		|	И CustomsFilesLight.TypeOfTransaction = ЗНАЧЕНИЕ(Перечисление.TypesOfCustomsFileLightTransaction.ТПО)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстЗапросаЗаполненияInvoiceLinesClassification(МассивItems=Неопределено) Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	InvoiceLines.Ссылка КАК InvoiceLine,
		|	Catalog.FiscalType КАК Type,
		|	Catalog.DescriptionRus КАК Translation
		|ИЗ
		|	Документ.ЗакрытиеПоставки КАК InvoiceLinesMatching
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ShipmentDOCs
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК InvoiceLines
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Catalog КАК Catalog
		|					ПО InvoiceLines.КодПоИнвойсу = Catalog.Код
		|				ПО DOCInvoices.Инвойс = InvoiceLines.Инвойс
		|					И (НЕ InvoiceLines.ПометкаУдаления)
		|			ПО ShipmentDOCs.УпаковочныйЛист = DOCInvoices.Ссылка
		|		ПО InvoiceLinesMatching.Поставка = ShipmentDOCs.Ссылка
		|ГДЕ
		|	InvoiceLinesMatching.Ссылка = &InvoiceLinesMatching
		|	И InvoiceLines.SoldTo.UseFiscalClassificationOfItems
		|" 
		+ ?(МассивItems = Неопределено, "", "
		|	И InvoiceLines.Ссылка В(&МассивItems)  
		|") 
		+  
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Goods.Ссылка,
		|	Catalog.FiscalType,
		|	Catalog.DescriptionRus
		|ИЗ
		|	Документ.ЗакрытиеПоставки КАК ЗакрытиеПоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Catalog КАК Catalog
		|				ПО Goods.КодПоИнвойсу = Catalog.Код
		|			ПО ExportShipmentExportRequests.ExportRequest = Goods.ExportRequest
		|				И (НЕ Goods.ПометкаУдаления)
		|		ПО ЗакрытиеПоставки.Поставка = ExportShipmentExportRequests.Ссылка
		|ГДЕ
		|	ЗакрытиеПоставки.Ссылка = &InvoiceLinesMatching
		|	И Goods.SoldTo.UseFiscalClassificationOfItems"
		+ ?(МассивItems = Неопределено, "", "
		|	И Goods.Ссылка В(&МассивItems)");	
	
КонецФункции

Функция ПолучитьShipmentCCDs(Shipment) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Shipment) Тогда
		Возврат Новый Массив;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Shipment", Shipment);
	// { RGS ASeryakov, 30.05.18 S-I-0005241
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	CCDs.Ссылка КАК CCD
	//|ИЗ
	//|	Документ.ГТД КАК CCDs
	//|ГДЕ
	//|	НЕ CCDs.ПометкаУдаления
	//|	И CCDs.Shipment = &Shipment";
	
	Если НЕ Shipment.ProcessLevel = Справочники.ProcessLevels.AZ И НЕ Shipment.ProcessLevel = Справочники.ProcessLevels.TM Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CCDs.Ссылка КАК CCD
		|ИЗ
		|	Документ.ГТД КАК CCDs
		|ГДЕ
		|	НЕ CCDs.ПометкаУдаления
		|	И CCDs.Shipment = &Shipment";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CustomsFilesLight.Ссылка КАК CCD
		|ИЗ
		|	Документ.CustomsFilesLight КАК CustomsFilesLight
		|ГДЕ
		|	НЕ CustomsFilesLight.ПометкаУдаления
		|	И CustomsFilesLight.Shipment = &Shipment";
		
	КонецЕсли;
	// } RGS ASeryakov 30.05.18 S-I-0005241
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("CCD");
	
КонецФункции 


// PAYMENTS

Функция ПолучитьCustomsPaymentUnallocatedSum(CustomsPayment) Экспорт
	
	CustomsPaymentUnallocatedSum = 0;
	
	Если ЗначениеЗаполнено(CustomsPayment) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("CustomsPayment", CustomsPayment);
		Запрос.Текст = ПолучитьТекстЗапросаCustomsPaymentUnallocatedSum();
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.SumОстаток) Тогда
				Возврат Выборка.SumОстаток;
			КонецЕсли; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат CustomsPaymentUnallocatedSum;
	
КонецФункции

Функция ПолучитьТекстЗапросаCustomsPaymentUnallocatedSum() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	UnallocatedCustomsPaymentsОстатки.SumОстаток КАК SumОстаток
		|ИЗ
		|	РегистрНакопления.UnallocatedCustomsPayments.Остатки(, CustomsPayment = &CustomsPayment) КАК UnallocatedCustomsPaymentsОстатки";
		
КонецФункции 

Функция ПолучитьМассивUnallocatedCustomsPayments() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	UnallocatedCustomsPaymentsОстатки.CustomsPayment
		|ИЗ
		|	РегистрНакопления.UnallocatedCustomsPayments.Остатки КАК UnallocatedCustomsPaymentsОстатки
		|ГДЕ
		|	UnallocatedCustomsPaymentsОстатки.SumОстаток > 0";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("CustomsPayment");
	
КонецФункции

Функция ПолучитьCCDUnpaidSum(CCD) Экспорт
	
	CCDUnpaidSum = 0;
	
	Если ЗначениеЗаполнено(CCD) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("CCD", CCD);
		Запрос.Текст = ПолучитьТекстЗапросаCCDUnpaidSum();
					
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.SumОстаток) Тогда
				Возврат Выборка.SumОстаток;
			КонецЕсли; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат CCDUnpaidSum;
	
КонецФункции

Функция ПолучитьТекстЗапросаCCDUnpaidSum() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	UnpaidCCDsОстатки.SumОстаток КАК SumОстаток
		|ИЗ
		|	РегистрНакопления.UnpaidCCDs.Остатки(, CCD = &CCD) КАК UnpaidCCDsОстатки";
		
КонецФункции 

Функция ПолучитьНеоплаченнуюСуммуТПО(ТПО) Экспорт
	
	НеоплаченнаяСуммаТПО = 0;
	
	Если ЗначениеЗаполнено(ТПО) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТПО", ТПО);
		Запрос.Текст = ПолучитьТекстЗапросаНеоплаченнойСуммыТПО();
					
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.SumОстаток) Тогда
				Возврат Выборка.SumОстаток;
			КонецЕсли; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеоплаченнаяСуммаТПО;
	
КонецФункции

Функция ПолучитьТекстЗапросаНеоплаченнойСуммыТПО() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	НеоплаченныеТПООстатки.SumОстаток КАК SumОстаток
		|ИЗ
		|	РегистрНакопления.НеоплаченныеТПО.Остатки(, ТПО = &ТПО) КАК НеоплаченныеТПООстатки";
		
КонецФункции

// ДОДЕЛАТЬ
Функция ПолучитьСтруктуруПодбораCustomsPaymentsForAllocation(CustomsDocument, PaymentKind) Экспорт
	
	СтруктураВозврата = Новый Структура("Customs, ParentCompanyForPayments, CCDReference, PaymentKind, CustomsPayments"); 
	
	СтруктураВозврата.PaymentKind = СокрЛП(PaymentKind);
	
	Если ЗначениеЗаполнено(CustomsDocument) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("CustomsDocument", CustomsDocument);
		
		// УНИФИЦИРОВАТЬ НАЗВАНИЯ РЕКВИЗИТОВ И УПРОСТИТЬ КОД
		ТипЗнчCustomsDocument = ТипЗнч(CustomsDocument);
		Если ТипЗнчCustomsDocument = Тип("ДокументСсылка.ГТД") Тогда
				
			Запрос.Текст =
				"ВЫБРАТЬ
				|	CustomsFiles.CustomsPost.Customs КАК Customs,
				|	CustomsFiles.SequenceNo КАК SeqNo,
				|	CustomsFiles.SoldTo.ParentCompanyForPayments КАК ParentCompanyForPayments
				|ИЗ
				|	Документ.ГТД КАК CustomsFiles
				|ГДЕ
				|	CustomsFiles.Ссылка = &CustomsDocument"
						
		ИначеЕсли ТипЗнчCustomsDocument = Тип("ДокументСсылка.CustomsFilesLight") Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	CustomsFilesLight.CustomsPost.Customs КАК Customs,
				|	CustomsFilesLight.SeqNo,
				|	CustomsFilesLight.SoldTo.ParentCompanyForPayments КАК ParentCompanyForPayments
				|ИЗ
				|	Документ.CustomsFilesLight КАК CustomsFilesLight
				|ГДЕ
				|	CustomsFilesLight.Ссылка = &CustomsDocument"		
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		СтруктураВозврата.Customs = Выборка.Customs;
		СтруктураВозврата.ParentCompanyForPayments = Выборка.ParentCompanyForPayments;
		СтруктураВозврата.CCDReference = Выборка.SeqNo;
		
	Иначе
				
		СтруктураВозврата.Customs = Справочники.Customs.ПустаяСсылка();
		СтруктураВозврата.ParentCompanyForPayments = Справочники.SoldTo.ПустаяСсылка();
		СтруктураВозврата.CCDReference = "";
		
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Customs", СтруктураВозврата.Customs); 
	Запрос.УстановитьПараметр("ParentCompanyForPayments", СтруктураВозврата.ParentCompanyForPayments); 
	Запрос.УстановитьПараметр("CCDReference", СтруктураВозврата.CCDReference);
	Запрос.УстановитьПараметр("PaymentKind", СтруктураВозврата.PaymentKind);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	UnallocatedCustomsPaymentsОстатки.CustomsPayment,
		|	UnallocatedCustomsPaymentsОстатки.CustomsPayment.PaymentKind КАК PaymentKind
		|ИЗ
		|	РегистрНакопления.UnallocatedCustomsPayments.Остатки(
		|			,
		|			ВЫБОР
		|					КОГДА &Customs = ЗНАЧЕНИЕ(Справочник.Customs.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CustomsPayment.Customs = &Customs
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ParentCompanyForPayments = ЗНАЧЕНИЕ(Справочник.SoldTo.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CustomsPayment.BankAccount.SoldTo = &ParentCompanyForPayments
		|				КОНЕЦ
		|				И (CustomsPayment.CCDReference = &CCDReference
		|					ИЛИ CustomsPayment.CCDReference = """")
		|				И ВЫБОР
		|					КОГДА &PaymentKind = """"
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CustomsPayment.PaymentKind = &PaymentKind
		|							ИЛИ CustomsPayment.PaymentKind = """"
		|				КОНЕЦ) КАК UnallocatedCustomsPaymentsОстатки
		|ГДЕ
		|	UnallocatedCustomsPaymentsОстатки.SumОстаток > 0";
		
	ТаблицаCustomsPayments = Запрос.Выполнить().Выгрузить();
	
	СтруктураВозврата.CustomsPayments = ТаблицаCustomsPayments.ВыгрузитьКолонку("CustomsPayment");
	
	Если НЕ ЗначениеЗаполнено(СтруктураВозврата.PaymentKind)
		И ТаблицаCustomsPayments.Количество() = 1
		И ЗначениеЗаполнено(ТаблицаCustomsPayments[0].PaymentKind) Тогда
		СтруктураВозврата.PaymentKind = ТаблицаCustomsPayments[0].PaymentKind;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции 

Функция ПолучитьСтруктуруПодбораCCDsForAllocation(CustomsPayment) Экспорт
	
	СтруктураВозврата = Новый Структура("Customs, SoldTo, CCDReference, PaymentKind, CCDs"); 
		
	СтруктураРеквизитовCustomsPayment = ПолучитьСтруктуруРеквизитовCustomsPaymentДляПодбораТаможенногоДокумента(CustomsPayment);
	
	СтруктураВозврата.Customs = СтруктураРеквизитовCustomsPayment.Customs;
	СтруктураВозврата.SoldTo = СтруктураРеквизитовCustomsPayment.SoldTo;
	СтруктураВозврата.CCDReference = СтруктураРеквизитовCustomsPayment.CCDReference;
	СтруктураВозврата.PaymentKind = СтруктураРеквизитовCustomsPayment.PaymentKind;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Customs", СтруктураВозврата.Customs);
	Запрос.УстановитьПараметр("SoldTo", СтруктураВозврата.SoldTo);
	Запрос.УстановитьПараметр("CCDReference", СтруктураВозврата.CCDReference);
	Запрос.УстановитьПараметр("PaymentKind", СтруктураВозврата.PaymentKind);
				
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	UnpaidCCDs.CCD
		|ИЗ
		|	РегистрНакопления.UnpaidCCDs.Остатки(
		|			,
		|			ВЫБОР
		|					КОГДА &SoldTo = ЗНАЧЕНИЕ(Справочник.SoldTo.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CCD.SoldTo = &SoldTo
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Customs = ЗНАЧЕНИЕ(Справочник.Customs.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CCD.CustomsPost.Customs = &Customs
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &CCDReference = """"
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ CCD.SequenceNo = &CCDReference
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &PaymentKind = """"
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ PaymentKind = &PaymentKind
		|				КОНЕЦ) КАК UnpaidCCDs
		|ГДЕ
		|	UnpaidCCDs.SumОстаток > 0";
	
	СтруктураВозврата.CCDs = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("CCD");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьСтруктуруПодбораТПОForAllocation(CustomsPayment) Экспорт
	
	СтруктураВозврата = Новый Структура("Customs, SoldTo, CCDReference, PaymentKind, ТПО"); 
	
	СтруктураРеквизитовCustomsPayment = ПолучитьСтруктуруРеквизитовCustomsPaymentДляПодбораТаможенногоДокумента(CustomsPayment);
	
	СтруктураВозврата.Customs = СтруктураРеквизитовCustomsPayment.Customs;
	СтруктураВозврата.SoldTo = СтруктураРеквизитовCustomsPayment.SoldTo;
	СтруктураВозврата.CCDReference = СтруктураРеквизитовCustomsPayment.CCDReference;
	СтруктураВозврата.PaymentKind = СтруктураРеквизитовCustomsPayment.PaymentKind;
			
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Customs", СтруктураВозврата.Customs);
	Запрос.УстановитьПараметр("SoldTo", СтруктураВозврата.SoldTo);
	Запрос.УстановитьПараметр("CCDReference", СтруктураВозврата.CCDReference);
	Запрос.УстановитьПараметр("PaymentKind", СтруктураВозврата.PaymentKind);
				
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НеоплаченныеТПООстатки.ТПО
		|ИЗ
		|	РегистрНакопления.НеоплаченныеТПО.Остатки(
		|			,
		|			ВЫБОР
		|					КОГДА &SoldTo = ЗНАЧЕНИЕ(Справочник.SoldTo.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ТПО.SoldTo = &SoldTo
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Customs = ЗНАЧЕНИЕ(Справочник.Customs.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ТПО.CustomsPost.Customs = &Customs
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &CCDReference = """"
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ТПО.SeqNo = &CCDReference
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &PaymentKind = """"
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ PaymentKind = &PaymentKind
		|				КОНЕЦ) КАК НеоплаченныеТПООстатки
		|ГДЕ
		|	НеоплаченныеТПООстатки.SumОстаток > 0";
	
	СтруктураВозврата.ТПО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТПО");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовCustomsPaymentДляПодбораТаможенногоДокумента(CustomsPayment)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Customs", Справочники.Customs.ПустаяСсылка());
	СтруктураВозврата.Вставить("SoldTo", Справочники.SoldTo.ПустаяСсылка());
	СтруктураВозврата.Вставить("CCDReference", "");
	СтруктураВозврата.Вставить("PaymentKind", "");
	
	Если ЗначениеЗаполнено(CustomsPayment) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("CustomsPayment", CustomsPayment);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	CustomsPayment.Customs,
			|	CustomsPayment.BankAccount.SoldTo КАК SoldTo,
			|	CustomsPayment.CCDReference,
			|	CustomsPayment.PaymentKind
			|ИЗ
			|	Документ.CustomsPayment КАК CustomsPayment
			|ГДЕ
			|	CustomsPayment.Ссылка = &CustomsPayment";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата.Customs = Выборка.Customs;
		СтруктураВозврата.SoldTo = Выборка.SoldTo;
		СтруктураВозврата.CCDReference = Выборка.CCDReference;
		СтруктураВозврата.PaymentKind = Выборка.PaymentKind;
		
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции


// ВЫГРУЗКА В LAWSON
	
// ДОДЕЛАТЬ
Функция ПолучитьТабличныйДокументВыгрузкиВLawson(СтруктураРеквизитовШапки, ТаблицаДокументов, ТаблицаДеталей) Экспорт
	
	Отказ = Ложь;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("МакетВыгрузкиВLawson"); 
	
	// Шапка
		
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");	
	ПараметрыШапки = ОбластьШапка.Параметры;
	
	ПараметрыШапки.Номер = СокрЛП(СтруктураРеквизитовШапки.Номер);
	ПараметрыШапки.DateTo = СтруктураРеквизитовШапки.Дата;
	ПараметрыШапки.PostingDate = СтруктураРеквизитовШапки.LastModified;
	ПараметрыШапки.SoldTo = СтруктураРеквизитовШапки.SoldTo;
	ПараметрыШапки.CompanyNo = СтруктураРеквизитовШапки.CompanyNo;
	// УДАЛИТЬ
	//ПараметрыШапки.TaxCode = СтруктураРеквизитовШапки.TaxCode;
	ПараметрыШапки.Responsible = СтруктураРеквизитовШапки.Responsible;
	ПараметрыШапки.Comment = СтруктураРеквизитовШапки.Comment;
	
	ТабДок.Вывести(ОбластьШапка);

	// Шапка таблицы
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	// Таблица
	СтруктураПоиска = Новый Структура("Document");
	ТаблицаДеталей.Индексы.Добавить("Document");
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
		         		 
		// Шапка ГТД
		ОбластьШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		ПараметрыОбласти = ОбластьШапкаДокумента.Параметры;
		
		ПараметрыОбласти.Vendor = СокрЛП(СтрокаТаблицыДокументов.VendorID);
		
		ПараметрыОбласти.RemitTo = ПолучитьRemitTo(ПараметрыОбласти.Vendor); 
			
		InvoiceNum = СократитьНомерПриНеобходимости(СтрокаТаблицыДокументов.DocumentNo);
		Если InvoiceNum <> Неопределено Тогда
			ПараметрыОбласти.InvoiceNum = InvoiceNum;
		КонецЕсли; 
		
		ПараметрыОбласти.InvoiceDate = СтрокаТаблицыДокументов.DocumentDate;
		ПараметрыОбласти.InvRecptDate = СтрокаТаблицыДокументов.InvRecptDate;
		ПараметрыОбласти.DueDate = СтрокаТаблицыДокументов.DueDate;

		СтруктураПоиска.Document = СтрокаТаблицыДокументов.Document;
		СтрокиТаблицыДеталей = ТаблицаДеталей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыДеталей.Количество() = 0 Тогда   //non-lawson
			Продолжить;
		КонецЕсли;
		ТаблицаДеталейДокумента = ТаблицаДеталей.Скопировать(СтрокиТаблицыДеталей);
		
		ИтогAmount = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаДеталейДокумента Цикл
			Если СтрНайти(СтрокаТаблицы.DocumentBaseNo, "Reverse") = 0 Тогда
				ИтогAmount = ИтогAmount + СтрокаТаблицы.Amount;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбласти.TranInvAmt = ПолучитьПредставлениеЧислаБезПробеловСТочкой(ИтогAmount);
		ПараметрыОбласти.Description = СокрЛП(СтрокаТаблицыДокументов.DocumentNo);
		
		ПараметрыОбласти.RUserField5 = СтрокаТаблицыДокументов.Commodity;
		
		ТабДок.Вывести(ОбластьШапкаДокумента);
			
		// Детали
		НомерСтроки = 1;
		Для Каждого СтрокаТаблицы Из ТаблицаДеталейДокумента Цикл
			
			// для отмены таможенной расписки нужен отдельный ваучер
			Если СтрНайти(СтрокаТаблицы.DocumentBaseNo, "Reverse") > 0 Тогда
				ОбластьШапкаДокумента.Параметры.TranInvAmt = ПолучитьПредставлениеЧислаБезПробеловСТочкой(СтрокаТаблицы.Amount);
				ОбластьШапкаДокумента.Параметры.Description = СокрЛП(СтрокаТаблицы.DocumentBaseNo);
				ТабДок.Вывести(ОбластьШапкаДокумента);
				НомерСтроки = 1;
			КонецЕсли;	
			
			ОбластьДеталиДокумента = Макет.ПолучитьОбласть("ДеталиДокумента");
			ПараметрыОбласти = ОбластьДеталиДокумента.Параметры;

			ПараметрыОбласти.DistribCounter = НомерСтроки;
			ПараметрыОбласти.Company = СтруктураРеквизитовШапки.CompanyNo;
						
			ПараметрыОбласти.Amount = ПолучитьПредставлениеЧислаБезПробеловСТочкой(СтрокаТаблицы.Amount);
			
			Если СтрокаТаблицы.НДС Тогда
				
				ПараметрыОбласти.TaxCode = СокрЛП(СтрокаТаблицыДокументов.TaxCode);

				ПараметрыОбласти.TaxableAmount = ПолучитьПредставлениеЧислаБезПробеловСТочкой(СтрокаТаблицы.Amount / 0.18);
				
			Иначе
				
				ПараметрыОбласти.AcctUnit = СокрЛП(СтрокаТаблицы.AUNo);
				
				ПараметрыОбласти.Account = СокрЛП(СтрокаТаблицы.AccountNo);
				
				ПараметрыОбласти.SubAcct = СокрЛП(СтрокаТаблицы.SubAccountNo);
		
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Activity) Тогда
				ПараметрыОбласти.Activity = СокрЛП(СтрокаТаблицы.Activity);
			КонецЕсли;
			
			ПараметрыОбласти.Description = СокрЛП(СтрокаТаблицы.DocumentBaseNo);
			
			ТабДок.Вывести(ОбластьДеталиДокумента);
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;

	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ТабДок;
		
КонецФункции

Функция ПолучитьПредставлениеЧислаБезПробеловСТочкой(Число)
	
	СтрокаЧисла = Формат(Число, "ЧДЦ=2; ЧРД=.");
	Возврат СтрЗаменить(СтрокаЧисла, Символы.НПП, "");
	
КонецФункции

Функция СократитьНомерПриНеобходимости(Знач Номер)
	
	Номер = СокрЛП(Номер);
	ДлинаНомера = СтрДлина(Номер);
	Если ДлинаНомера < 23 Тогда
		
		Возврат Номер;
		
	ИначеЕсли ДлинаНомера > 23 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to reduce """ + Номер + """ to 22 symbols: too long number!");
		Возврат Неопределено;
		
	КонецЕсли; 
	
	МассивЧастейНомера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Номер, "-");
	Если МассивЧастейНомера.Количество() <> 3 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to reduce """ + Номер + """ to 22 symbols: unknown number format!");
		Возврат Неопределено;		
	КонецЕсли; 
	
	Возврат МассивЧастейНомера[0] + "-" + МассивЧастейНомера[1] + "-" + Сред(МассивЧастейНомера[2],2);
	
КонецФункции 

Функция ПолучитьRemitTo(Vendor)
	
	Если Vendor = "RSGS064"
		ИЛИ Vendor = "RSGD052"
		ИЛИ Vendor = "RSGB01" Тогда
		Возврат "RU1";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции 


/////////////////////////////////////////////////////////////////////////////////////////
// SERVICES

Функция ПолучитьUnallocatedServices(Agent, Ссылка, МассивТекущихServices) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Agent", Agent);	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивТекущихServices", МассивТекущихServices);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументService.Ссылка
		|ИЗ
		|	Документ.Service КАК ДокументService
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ServicesCostsAllocation.Services КАК ServicesCostsAllocationServices
		|		ПО ДокументService.Ссылка = ServicesCostsAllocationServices.Service
		|			И ((НЕ ServicesCostsAllocationServices.Ссылка.ПометкаУдаления))
		|			И ((НЕ ServicesCostsAllocationServices.Ссылка = &Ссылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки КАК ЗакрытиеПоставки
		|		ПО ДокументService.DocumentBase = ЗакрытиеПоставки.Поставка
		|			И (ЗакрытиеПоставки.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CustomsFilesLight КАК CustomsFilesLight
		|		ПО ДокументService.DocumentBase = CustomsFilesLight.Ссылка
		|			И (CustomsFilesLight.Проведен)
		|ГДЕ
		|	ДокументService.Проведен
		|	И ДокументService.Agent = &Agent
		|	И ServicesCostsAllocationServices.Ссылка ЕСТЬ NULL 
		|	И (НЕ ДокументService.Ссылка В (&МассивТекущихServices))
		// { RGS AArsentev 28.03.2018 S-I-0004889
		//|	И (НЕ(ЗакрытиеПоставки.Поставка ЕСТЬ NULL 
		//|				И CustomsFilesLight.Ссылка ЕСТЬ NULL ))
		|	И ВЫБОР
		|		КОГДА ДокументService.DocumentBase.ProcessLevel <> ЗНАЧЕНИЕ(Справочник.ProcessLevels.AZ)
		|			И ДокументService.DocumentBase.ProcessLevel <> ЗНАЧЕНИЕ(Справочник.ProcessLevels.TM)
		|		ТОГДА НЕ(ЗакрытиеПоставки.Поставка ЕСТЬ NULL
		|					И CustomsFilesLight.Ссылка ЕСТЬ NULL)
		|		ИНАЧЕ НЕ(CustomsFilesLight.Ссылка ЕСТЬ NULL)
		|	КОНЕЦ
		// } RGS AArsentev 28.03.2018 S-I-0004889
		|";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции 

Функция ПолучитьСтруктуруИтоговServices(DocumentBase) Экспорт
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Base", 0);
	СтруктураИтогов.Вставить("Markup", 0);
	СтруктураИтогов.Вставить("Sum", 0);
	СтруктураИтогов.Вставить("Discount", 0);
	СтруктураИтогов.Вставить("GrandTotal", 0);
	
	Если ЗначениеЗаполнено(DocumentBase) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("DocumentBase", DocumentBase);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ДокументService.Base) КАК Base,
			|	СУММА(ДокументService.Markup) КАК Markup,
			|	СУММА(ДокументService.Sum) КАК Sum,
			|	СУММА(ДокументService.Discount) КАК Discount,
			|	СУММА(ДокументService.GrandTotal) КАК GrandTotal
			|ИЗ
			|	Документ.Service КАК ДокументService
			|ГДЕ
			|	ДокументService.DocumentBase = &DocumentBase
			|	И ДокументService.Проведен";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураИтогов, Выборка);
		КонецЕсли; 
	
	КонецЕсли; 
			
	Возврат СтруктураИтогов;
	
КонецФункции

Функция ПолучитьМассивServicesДляВыбораИзДокументаService(Port, Agent, ДатаПолученияЦены, Текст=Неопределено) Экспорт
	
	Если Текст <> Неопределено И НЕ ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Port) Тогда
		PortСРодителями = CustomsСерверПовтИсп.ПолучитьPortСРодителями(Port);
	Иначе
		PortСРодителями = Null;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("PortСРодителями", PortСРодителями);
	Запрос.УстановитьПараметр("Agent", Agent);
	Запрос.УстановитьПараметр("ДатаПолученияЦены", ДатаПолученияЦены);
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК PriceListOfServices
		|ПОМЕСТИТЬ PriceListsOfServices
		|ИЗ
		|	Документ.PriceListOfServices КАК Таблица
		|ГДЕ
		|	Таблица.Проведен
		|	И Таблица.Agent = &Agent
		|	И Таблица.Дата <= &ДатаПолученияЦены
		|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	PriceListOfServices
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Service
		|ПОМЕСТИТЬ ServicesFromPriceLists
		|ИЗ
		|	PriceListsOfServices КАК PriceListsOfServices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.PriceListOfServices.StandardTariffs КАК Таблица
		|		ПО PriceListsOfServices.PriceListOfServices = Таблица.Ссылка
		|ГДЕ
		|	Таблица.StartDate <= &ДатаПолученияЦены
		|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Service
		|ИЗ
		|	PriceListsOfServices КАК PriceListsOfServices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.PriceListOfServices.CostPlus КАК Таблица
		|		ПО PriceListsOfServices.PriceListOfServices = Таблица.Ссылка
		|ГДЕ
		|	Таблица.StartDate <= &ДатаПолученияЦены
		|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Service
		|ИЗ
		|	PriceListsOfServices КАК PriceListsOfServices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.PriceListOfServices.Quoted КАК Таблица
		|		ПО PriceListsOfServices.PriceListOfServices = Таблица.Ссылка
		|ГДЕ
		|	Таблица.StartDate <= &ДатаПолученияЦены
		|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ServicesFromPriceLists.Service
		|ИЗ
		|	ServicesFromPriceLists КАК ServicesFromPriceLists
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Services.Ports КАК ServicesPorts
		|		ПО ServicesFromPriceLists.Service = ServicesPorts.Ссылка
		|ГДЕ
		|	(&PortСРодителями ЕСТЬ NULL 
		|			ИЛИ ServicesPorts.Port ЕСТЬ NULL 
		|			ИЛИ ServicesPorts.Port В (&PortСРодителями))
		|";	
		
		Если ЗначениеЗаполнено(Текст) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|И ServicesFromPriceLists.Service.Наименование ПОДОБНО ""%"" + &Текст + ""%""";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ServicesFromPriceLists.Service.Наименование";
				
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Service");
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

Процедура ЗаполнитьCreationModification(Объект) Экспорт
	
	// Заполняет реквизиты CreatedBy, CreationDate, ModifiedBy, ModificationDate перед записью объекта
	
	Если Объект.ЭтоНовый() Тогда
		Объект.CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		Объект.CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ModifiedBy) Тогда
		Объект.ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ModificationDate) Тогда
		Объект.ModificationDate = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьModification(Объект) Экспорт
	
	// Заполняет реквизиты ModifiedBy, ModificationDate
	
	Объект.ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	Объект.ModificationDate = ТекущаяДата();
	
КонецПроцедуры

Процедура ОчиститьCreationModification(Объект) Экспорт
	
	Объект.CreatedBy = Неопределено;
	Объект.CreationDate = Неопределено;
	Объект.ModifiedBy = Неопределено;
	Объект.ModificationDate = Неопределено;
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеPDFToTXT() Экспорт
	
	Возврат ПолучитьОбщийМакет("тбPDFToText");
	
КонецФункции

Функция ЭтоБрокер() Экспорт
	
	Роли = Метаданные.Роли;
	Возврат РольДоступна(Роли.ImportExportBroker)
		И НЕ РольДоступна(Роли.ImportExportSpecialist)
		И НЕ РольДоступна(Роли.ImportExportAdministrator)
		И НЕ РольДоступна(Роли.ПолныеПрава);
	
КонецФункции

Функция ЭтоImportExportTracker() Экспорт
	
	Роли = Метаданные.Роли;
	Возврат (РольДоступна(Роли.ImportExportTracker) ИЛИ РольДоступна(Роли.SegmentLogisticsSpecialist))
		И НЕ РольДоступна(Роли.ImportExportSpecialist)
		И НЕ РольДоступна(Роли.ImportExportAdministrator)
		И НЕ РольДоступна(Роли.ПолныеПрава);
	
КонецФункции

Процедура РаспределитьСуммы(РаспределяемаяТаблица, ИмяРаспределяемогоОбъекта, СтрокаРаспределяемыхКолонок, ПредставлениеЭлементовРаспределяемогоОбъекта, ИмяКолонкиПропорции, ПредставлениеКолонкиПропорции, РаспределеннаяТаблица, Отказ) Экспорт
	
	Если НЕ РаспределяемаяТаблица.Количество() ИЛИ НЕ РаспределеннаяТаблица.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	МассивРаспределяемыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРаспределяемыхКолонок);
	
	СтруктураРасхождений = Новый Структура;
	Для Каждого НазваниеРаспределяемойКолонки Из МассивРаспределяемыхКолонок Цикл
		СтруктураРасхождений.Вставить(НазваниеРаспределяемойКолонки);
	КонецЦикла; 
	
	МногоРаспределяемыхОбъектов = РаспределяемаяТаблица.Колонки.Найти(ИмяРаспределяемогоОбъекта) <> Неопределено;
	
	Если МногоРаспределяемыхОбъектов Тогда
		СтруктураПоиска = Новый Структура(ИмяРаспределяемогоОбъекта);
		РаспределеннаяТаблица.Индексы.Добавить(ИмяРаспределяемогоОбъекта);
	КонецЕсли; 
	
	Для Каждого СтрокаРаспределяемойТаблицы Из РаспределяемаяТаблица Цикл
		
		// Найдем элементы, по которым нужно распределить суммы
		Если МногоРаспределяемыхОбъектов Тогда
			
			СтруктураПоиска[ИмяРаспределяемогоОбъекта] = СтрокаРаспределяемойТаблицы[ИмяРаспределяемогоОбъекта];
			ПорцияСтрок = РаспределеннаяТаблица.НайтиСтроки(СтруктураПоиска);
					
		Иначе
			
			ПорцияСтрок = РаспределеннаяТаблица;
			ПредставлениеРаспределяемогоОбъекта = ИмяРаспределяемогоОбъекта;
			
		КонецЕсли; 
		
		КоличествоСтрок = ПорцияСтрок.Количество();
		Если КоличествоСтрок = 0 Тогда
			
			ПредставлениеРаспределяемогоОбъекта = ?(МногоРаспределяемыхОбъектов, СтруктураПоиска[ИмяРаспределяемогоОбъекта], ИмяРаспределяемогоОбъекта); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось распределить суммы объекта """ + ПредставлениеРаспределяемогоОбъекта + """ по """ + ПредставлениеЭлементовРаспределяемогоОбъекта + """, так как не удалось найти """ + ПредставлениеЭлементовРаспределяемогоОбъекта + """!",
				, , , Отказ);
			Продолжить;	
			
		КонецЕсли;
		
		// Найдем итог колонки пропорции и самую большую строку, чтобы сбросить на нее ошибку округления, если она возникнет
		СамаяБольшаяСтрока = ПорцияСтрок[0];
		Если ЗначениеЗаполнено(ИмяКолонкиПропорции) Тогда
			
			ИтогКолонкиПропорции = ПорцияСтрок[0][ИмяКолонкиПропорции];	
			Для Индекс = 1 По (КоличествоСтрок-1) Цикл
				
				СтрокаРаспределеннойТаблицы = ПорцияСтрок[Индекс];
				ПропорцияСтроки = СтрокаРаспределеннойТаблицы[ИмяКолонкиПропорции];
				ИтогКолонкиПропорции = ИтогКолонкиПропорции + ПропорцияСтроки;
				Если ПропорцияСтроки > СамаяБольшаяСтрока[ИмяКолонкиПропорции] Тогда
					СамаяБольшаяСтрока = СтрокаРаспределеннойТаблицы;
				КонецЕсли; 
				
			КонецЦикла;
			
			РавнымиЧастями = Ложь;
			Если ИтогКолонкиПропорции = 0 Тогда	
				РавнымиЧастями = Истина;
				ИтогКолонкиПропорции = КоличествоСтрок;	
			КонецЕсли;
			
		Иначе
			
			РавнымиЧастями = Истина;
			ИтогКолонкиПропорции = КоличествоСтрок;
			
		КонецЕсли; 
		 
		// Запомним какие суммы должны быть распределены, чтобы потом исправить ошибку округления
		Для Каждого НазваниеРаспределяемойКолонки Из МассивРаспределяемыхКолонок Цикл
			СтруктураРасхождений[НазваниеРаспределяемойКолонки] = СтрокаРаспределяемойТаблицы[НазваниеРаспределяемойКолонки];			 
		КонецЦикла; 
		
		// Распределим суммы пропорционально значению в колонке пропорции
		Для Каждого СтрокаРаспределеннойТаблицы Из ПорцияСтрок Цикл
		
			Для Каждого НазваниеРаспределяемойКолонки Из МассивРаспределяемыхКолонок Цикл
				
				ПропорцияСтроки = ?(РавнымиЧастями, 1, СтрокаРаспределеннойТаблицы[ИмяКолонкиПропорции]); 
				СтрокаРаспределеннойТаблицы[НазваниеРаспределяемойКолонки] = СтрокаРаспределяемойТаблицы[НазваниеРаспределяемойКолонки] * ПропорцияСтроки / ИтогКолонкиПропорции;			 
				СтруктураРасхождений[НазваниеРаспределяемойКолонки] = СтруктураРасхождений[НазваниеРаспределяемойКолонки] - СтрокаРаспределеннойТаблицы[НазваниеРаспределяемойКолонки];
				
			КонецЦикла; 		
								
		КонецЦикла;
		
		// Исправим ошибку округления
		Для Каждого КлючИЗначение Из СтруктураРасхождений Цикл
			
			Если КлючИЗначение.Значение <> 0 Тогда
				СамаяБольшаяСтрока[КлючИЗначение.Ключ] = СамаяБольшаяСтрока[КлючИЗначение.Ключ] + КлючИЗначение.Значение;
			КонецЕсли; 
			
		КонецЦикла; 
						
	КонецЦикла;
	
КонецПроцедуры 

Процедура ОтменитьИспользованиеПараметровИОтборовВПользовательскихНастройках(ЭлементыПользовательскихНастроек) Экспорт
	
	Для Каждого ЭлементПользовательскойНастройки Из ЭлементыПользовательскихНастроек Цикл
		
		ТипЗнчЭлементаПользовательскойНастройки = ТипЗнч(ЭлементПользовательскойНастройки);
		Если (ТипЗнчЭлементаПользовательскойНастройки = Тип("ЭлементОтбораКомпоновкиДанных")
			ИЛИ ТипЗнчЭлементаПользовательскойНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных"))
			И ЭлементПользовательскойНастройки.Использование Тогда
			
			ЭлементПользовательскойНастройки.Использование = Ложь;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// IMPORT EXPORT TRACKING SUBSCRIPTIONS

Процедура СформироватьСообщенияДляImportTracking() Экспорт 
		
	//СформироватьСообщенияТрекинга();
	СформироватьСообщенияProjectMobilization();
	
КонецПроцедуры

Процедура СформироватьСообщенияТрекинга()  Экспорт
	
	Граница = ТекущаяДата() - 60*60;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ShipmentsForSubscriptions.Shipment
		|ИЗ
		|	РегистрСведений.ShipmentsForSubscriptions КАК ShipmentsForSubscriptions
		|ГДЕ
		|	ShipmentsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DOCsForSubscriptions.DOC
		|ИЗ
		|	РегистрСведений.DOCsForSubscriptions КАК DOCsForSubscriptions
		|ГДЕ
		|	DOCsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	TripsForSubscriptions.Trip,
		|	TripsForSubscriptions.Warehouse
		|ИЗ
		|	РегистрСведений.TripsForSubscriptions КАК TripsForSubscriptions
		|ГДЕ
		|	TripsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ParcelsForSubscriptions.Parcel
		|ИЗ
		|	РегистрСведений.ParcelsForSubscriptions КАК ParcelsForSubscriptions
		|ГДЕ
		|	ParcelsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DOCsInvoices.Ссылка КАК DOC,
		|	ShipmentsForSubscriptions.Stage,
		|	ShipmentsForSubscriptions.StageDate,
		|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
		|	Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
		|	Goods.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
		|	Goods.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
		|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
		|ПОМЕСТИТЬ Shipments
		|ИЗ
		|	РегистрСведений.ShipmentsForSubscriptions КАК ShipmentsForSubscriptions
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ShipmentsDOCs
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
		|					ПО Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
		|						И (ВЫБОР
		|							КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
		|						КОНЕЦ)
		|						И (НЕ ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe)
		|				ПО (Goods.Инвойс = DOCsInvoices.Инвойс)
		|					И (НЕ Goods.ПометкаУдаления)
		|			ПО ShipmentsDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
		|		ПО ShipmentsForSubscriptions.Shipment = ShipmentsDOCs.Ссылка
		|ГДЕ
		|	ShipmentsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DOCsForSubscriptions.DOC КАК DOC,
		|	DOCsForSubscriptions.Stage,
		|	DOCsForSubscriptions.StageDate,
		|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
		|	Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
		|	Goods.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
		|	Goods.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
		|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
		|ПОМЕСТИТЬ DOCs
		|ИЗ
		|	РегистрСведений.DOCsForSubscriptions КАК DOCsForSubscriptions
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
		|				ПО Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
		|					И (ВЫБОР
		|						КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
		|					КОНЕЦ)
		|					И (НЕ ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe)
		|			ПО DOCsInvoices.Инвойс = Goods.Инвойс
		|				И (НЕ Goods.ПометкаУдаления)
		|		ПО DOCsForSubscriptions.DOC = DOCsInvoices.Ссылка
		|ГДЕ
		|	DOCsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка КАК DOC,
		|	TripsForSubscriptions.Stage,
		|	TripsForSubscriptions.StageDate,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
		|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
		|ПОМЕСТИТЬ Trips
		|ИЗ
		|	РегистрСведений.TripsForSubscriptions КАК TripsForSubscriptions
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
		|						ПО СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
		|							И (ВЫБОР
		|								КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
		|							КОНЕЦ)
		|							И (НЕ ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe)
		|					ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
		|						И (НЕ СтрокиИнвойса.ПометкаУдаления)
		|				ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка
		|			ПО TripParcels.Parcel = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
		|		ПО TripsForSubscriptions.Trip = TripParcels.Ссылка
		|			И TripsForSubscriptions.Warehouse = TripParcels.Parcel.WarehouseTo
		|ГДЕ
		|	TripsForSubscriptions.LastModified <= &Граница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка КАК DOC,
		|	ParcelsForSubscriptions.Stage,
		|	ParcelsForSubscriptions.StageDate,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
		|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
		|ПОМЕСТИТЬ Parcels
		|ИЗ
		|	РегистрСведений.ParcelsForSubscriptions КАК ParcelsForSubscriptions
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
		|					ПО СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
		|						И (ВЫБОР
		|							КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
		|						КОНЕЦ)
		|						И (НЕ ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe)
		|				ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
		|					И (НЕ СтрокиИнвойса.ПометкаУдаления)
		|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка
		|		ПО ParcelsForSubscriptions.Parcel = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DOCs.DOC,
		|	DOCs.Stage,
		|	DOCs.StageDate,
		|	DOCs.PONo,
		|	DOCs.POLineNo,
		|	DOCs.PartNumber,
		|	DOCs.Description,
		|	DOCs.EMail
		|ИЗ
		|	DOCs КАК DOCs
		|ГДЕ
		|	НЕ DOCs.DOC В
		|				(ВЫБРАТЬ
		|					Shipments.DOC
		|				ИЗ
		|					Shipments КАК Shipments
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					Parcels.DOC
		|				ИЗ
		|					Parcels КАК Parcels
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					Trips.DOC
		|				ИЗ
		|					Trips КАК Trips)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Shipments.DOC,
		|	Shipments.Stage,
		|	Shipments.StageDate,
		|	Shipments.PONo,
		|	Shipments.POLineNo,
		|	Shipments.PartNumber,
		|	Shipments.Description,
		|	Shipments.EMail
		|ИЗ
		|	Shipments КАК Shipments
		|ГДЕ
		|	НЕ Shipments.DOC В
		|				(ВЫБРАТЬ
		|					Parcels.DOC
		|				ИЗ
		|					Parcels КАК Parcels
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					Trips.DOC
		|				ИЗ
		|					Trips КАК Trips)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Parcels.DOC,
		|	Parcels.Stage,
		|	Parcels.StageDate,
		|	Parcels.PONo,
		|	Parcels.POLineNo,
		|	Parcels.PartNumber,
		|	Parcels.Description,
		|	Parcels.EMail
		|ИЗ
		|	Parcels КАК Parcels
		|ГДЕ
		|	НЕ Parcels.DOC В
		|				(ВЫБРАТЬ
		|					Trips.DOC
		|				ИЗ
		|					Trips КАК Trips)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Trips.DOC,
		|	Trips.Stage,
		|	Trips.StageDate,
		|	Trips.PONo,
		|	Trips.POLineNo,
		|	Trips.PartNumber,
		|	Trips.Description,
		|	Trips.EMail
		|ИЗ
		|	Trips КАК Trips";
		
	Отказ = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Результаты = Запрос.ВыполнитьПакет();            
	
	// Удалим все старые Shipments
	ВыборкаУдаляемыхShipments = Результаты[0].Выбрать();
	Если ВыборкаУдаляемыхShipments.Количество() Тогда
		
		МенеджерЗаписи = РегистрыСведений.ShipmentsForSubscriptions.СоздатьМенеджерЗаписи();
		Пока ВыборкаУдаляемыхShipments.Следующий() Цикл
			
			МенеджерЗаписи.Shipment = ВыборкаУдаляемыхShipments.Shipment;
			МенеджерЗаписи.Удалить();
						
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим все старые DOCs
	ВыборкаУдаляемыхDOCs = Результаты[1].Выбрать();
	Если ВыборкаУдаляемыхDOCs.Количество() Тогда
		
		МенеджерЗаписи = РегистрыСведений.DOCsForSubscriptions.СоздатьМенеджерЗаписи();
		Пока ВыборкаУдаляемыхDOCs.Следующий() Цикл
			
			МенеджерЗаписи.DOC = ВыборкаУдаляемыхDOCs.DOC;
			МенеджерЗаписи.Удалить();
						
		КонецЦикла;
		
	КонецЕсли;
	
	// { RGS AGorlenko 10.03.2014 14:46:54 - S-I-0000620
	// Удалим все старые Parcels
	ВыборкаУдаляемыхParcels = Результаты[3].Выбрать();
	Если ВыборкаУдаляемыхParcels.Количество() Тогда
		
		МенеджерЗаписи = РегистрыСведений.ParcelsForSubscriptions.СоздатьМенеджерЗаписи();
		Пока ВыборкаУдаляемыхParcels.Следующий() Цикл
			
			МенеджерЗаписи.Parcel = ВыборкаУдаляемыхParcels.Parcel;
			МенеджерЗаписи.Удалить();
						
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим все старые Trips
	ВыборкаУдаляемыхTrips = Результаты[2].Выбрать();
	Если ВыборкаУдаляемыхTrips.Количество() Тогда
		
		МенеджерЗаписи = РегистрыСведений.TripsForSubscriptions.СоздатьМенеджерЗаписи();
		Пока ВыборкаУдаляемыхTrips.Следующий() Цикл
			
			МенеджерЗаписи.Trip = ВыборкаУдаляемыхTrips.Trip;
			МенеджерЗаписи.Warehouse = ВыборкаУдаляемыхTrips.Warehouse;
			МенеджерЗаписи.Удалить();
						
		КонецЦикла;
		
	КонецЕсли;
	// } RGS AGorlenko 10.03.2014 14:48:21 - S-I-0000620
	
	// Перейдем к обработке данных
	// { RGS AGorlenko 10.03.2014 15:53:02 - исключение DOC и объединение выполняем в запросе
	//ТаблицаShipments = Результаты[3].Выгрузить();
	//ТаблицаDOCs = Результаты[4].Выгрузить();
	//	
	//// Удалим все DOCs из таблицы DOCs, для которых уже есть записи в таблице Shipments
	//СтруктураПоискаПоDOC = Новый Структура("DOC");
	//ТаблицаУдаляемыхDOCs = ТаблицаShipments.Скопировать(,"DOC");
	//ТаблицаУдаляемыхDOCs.Свернуть("DOC", "");
	//Для Каждого СтрокаТаблицыУдаляемыхDOCs Из ТаблицаУдаляемыхDOCs Цикл
	//	
	//	СтруктураПоискаПоDOC.DOC = СтрокаТаблицыУдаляемыхDOCs.DOC;
	//	УдаляемыеСтроки = ТаблицаDOCs.НайтиСтроки(СтруктураПоискаПоDOC);
	//	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
	//		ТаблицаDOCs.Удалить(УдаляемаяСтрока);
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//// Объединим таблицы
	//ОбъединеннаяТаблица = ТаблицаShipments.СкопироватьКолонки("StageDate, PONo, POLineNo, PartNumber, Description, EMail");
	//ОбъединеннаяТаблица.Колонки.Добавить("Stage"); // Нам нужно чтобы она имела свободный тип, а не как в таблице Shipments
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаShipments Цикл
	//	
	//	НоваяСтрока = ОбъединеннаяТаблица.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//	
	//КонецЦикла;
	//ТаблицаShipments.Очистить();
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаDOCs Цикл
	//	
	//	НоваяСтрока = ОбъединеннаяТаблица.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//	
	//КонецЦикла;
	//ТаблицаDOCs.Очистить();
	ОбъединеннаяТаблица = Результаты[8].Выгрузить();
	// } RGS AGorlenko 10.03.2014 15:53:25 - исключение DOC и объединение выполняем в запросе
	
	// Сформируем сообщения
	СтруктураПоискаПоEmail = Новый Структура("EMail");
	Пока ОбъединеннаяТаблица.Количество() Цикл  
		
		ПерваяСтрокаОбъединеннойТаблицы = ОбъединеннаяТаблица[0];			
		СтруктураПоискаПоEmail.EMail = ПерваяСтрокаОбъединеннойТаблицы.EMail;
		МассивСтрокСОдинаковымEMail = ОбъединеннаяТаблица.НайтиСтроки(СтруктураПоискаПоEmail);
		
		ТаблицаСообщения = ОбъединеннаяТаблица.Скопировать(МассивСтрокСОдинаковымEMail);
		СформироватьСообщение(ТаблицаСообщения, Отказ);
		
		Для Каждого СтрокаТаблицы Из МассивСтрокСОдинаковымEMail Цикл
			ОбъединеннаяТаблица.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла; //закончили обход всей таблицы
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСообщенияProjectMobilization() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ImportExportTrackingSubscriptions.User,
	|	ImportExportTrackingSubscriptions.PONoExportRequestNo,
	|	ImportExportTrackingSubscriptions.POLineNo,
	|	ImportExportTrackingSubscriptions.ProjectMobilization,
	|	ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe,
	|	ImportExportTrackingSubscriptions.Frequency,
	|	ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения,
	|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
	|ИЗ
	|	РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
	|ГДЕ
	|	ImportExportTrackingSubscriptions.ProjectMobilizationSubscribe
	|	И НАЧАЛОПЕРИОДА(ImportExportTrackingSubscriptions.ProjectMobilization.EndDate, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&CurrentDate, ДЕНЬ)
	|	И НЕ ImportExportTrackingSubscriptions.User.EMail = """"
	|	И (ВЫБОР
	|				КОГДА НЕ ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВЫБОР
	|							КОГДА ImportExportTrackingSubscriptions.Frequency = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|								ТОГДА ВЫБОР
	|										КОГДА РАЗНОСТЬДАТ(ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения, &CurrentDate, ДЕНЬ) >= 1
	|											ТОГДА ИСТИНА
	|										ИНАЧЕ ЛОЖЬ
	|									КОНЕЦ
	|							КОГДА ImportExportTrackingSubscriptions.Frequency = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|								ТОГДА ВЫБОР
	|										КОГДА РАЗНОСТЬДАТ(ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения, &CurrentDate, ДЕНЬ) >= 7
	|											ТОГДА ИСТИНА
	|										ИНАЧЕ ЛОЖЬ
	|									КОНЕЦ
	|							КОГДА ImportExportTrackingSubscriptions.Frequency = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|								ТОГДА ВЫБОР
	|										КОГДА РАЗНОСТЬДАТ(ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения, &CurrentDate, МЕСЯЦ) >= 1
	|											ТОГДА ИСТИНА
	|										ИНАЧЕ ЛОЖЬ
	|									КОНЕЦ
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ImportExportTrackingSubscriptions.ДатаПоследнегоОповещения = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("CurrentDate", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выбрать();

	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ImportExportСервер.ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат.ProjectMobilization) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Вложения = Новый Массив();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		
		//International
		ТабДокInt = Обработки.ImportExportTracking.СформироватьВложениеIntДляПроекта(Результат.ProjectMobilization);
		       		
		ИмяФайлаInt = ВременныйФайл.Путь + "DPM_execution_report_" + СокрЛП(Результат.ProjectMobilization) + "_International" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xlsx";
		
		ТабДокInt.Записать(ИмяФайлаInt, ТипФайлаТабличногоДокумента.XLSX);
		      				
		Вложения.Добавить(ИмяФайлаInt);
		
		//Domestic
		ТабДокDomestic = Обработки.ImportExportTracking.СформироватьТабДокDomesticДляПроекта(Результат.ProjectMobilization);
		
		ИмяФайлаDomestic = ВременныйФайл.Путь + "DPM_execution_report_" + СокрЛП(Результат.ProjectMobilization) + "_Domestic" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xlsx";
		
		ТабДокDomestic.Записать(ИмяФайлаDomestic, ТипФайлаТабличногоДокумента.XLSX);
		    			
		Вложения.Добавить(ИмяФайлаDomestic);
		                            
		
		ImportExportСервер.ПослатьПисьмо(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP,
		Результат.EMail,
		"DPM execution report: " + СокрЛП(Результат.ProjectMobilization), 
		"Please find attached file with DPM execution report, project: " + СокрЛП(Результат.ProjectMobilization),
		, Вложения);
		
		Попытка
			УдалитьФайлы(ИмяФайлаInt);
		Исключение
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ИмяФайлаDomestic);
		Исключение
		КонецПопытки;
		
		////РГСофт.ЗарегистрироватьПочтовоеСообщение(Результат.EMail, "PM notification " + Строка(Результат.ProjectMobilization), "PM notification " + Строка(Результат.ProjectMobilization), Новый ХранилищеЗначения(Вложение, Новый СжатиеДанных(9)));
		
		// Пишем в регистр дату последней отправки
		менеджерЗаписи = РегистрыСведений.ImportExportTrackingSubscriptions.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(менеджерЗаписи, Результат);
		
		менеджерЗаписи.ДатаПоследнегоОповещения	= ТекущаяДата();
		менеджерЗаписи.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		 
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСообщение(ТаблицаСообщения, Отказ)

	EMail = ТаблицаСообщения[0].EMail;
	
	СтруктураПоискаПоStageИStageDate = Новый Структура("Stage, StageDate");
	ТекстСообщения = "";
	Пока ТаблицаСообщения.Количество() Цикл
		
		ПерваяСтрокаТаблицы = ТаблицаСообщения[0];
		СтруктураПоискаПоStageИStageDate.Stage = ПерваяСтрокаТаблицы.Stage;
		СтруктураПоискаПоStageИStageDate.StageDate = ПерваяСтрокаТаблицы.StageDate;
		
		СтрокиСОдинаковымStageИStageDate = ТаблицаСообщения.НайтиСтроки(СтруктураПоискаПоStageИStageDate);
		
		ПредставлениеStage = ПолучитьПредставлениеStage(ПерваяСтрокаТаблицы.Stage);
		
		ТекстСообщения = ТекстСообщения + "<br>
			|<br>
			|The stage of the following PO lines has been updated to """ + ПредставлениеStage + " - " + Формат(ПерваяСтрокаТаблицы.StageDate, "ДФ=dd.MM.yyyy") + """:";
		
		Для каждого СтрокаТаблицы из СтрокиСОдинаковымStageИStageDate Цикл
			
			ТекстСообщения = ТекстСообщения + "<br>
				|" + СокрЛП(СтрокаТаблицы.PONo) + " - " + СтрокаТаблицы.POLineNo + " - " + СокрЛП(СтрокаТаблицы.PartNumber) + " - " + СокрЛП(СтрокаТаблицы.Description);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из СтрокиСОдинаковымStageИStageDate Цикл
			ТаблицаСообщения.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;	
	
	РГСофт.ЗарегистрироватьПочтовоеСообщение(
		EMail,
		"PO statuses updates",
		ТекстСообщения);
	
КонецПроцедуры

Функция ПолучитьПредставлениеStage(Stage)
	
	DOCStages = Перечисления.DOCStages;
	ShipmentCargoStages = Перечисления.ShipmentCargoStages;
	ShipmentDocumentStages = Перечисления.ShipmentDocumentStages;
	// { RGS AGorlenko 10.03.2014 15:56:25 - S-I-0000620
	LocalDistributionStages = Перечисления.LocalDistributionStages;
	// } RGS AGorlenko 10.03.2014 15:56:33 - S-I-0000620
	
	Если Stage = DOCStages.Requested Тогда
		Возврат "Green light requested";
	ИначеЕсли Stage = DOCStages.Received Тогда
		Возврат "Green light received";
	ИначеЕсли Stage = DOCStages.Granted Тогда
		Возврат "Green light granted";
	ИначеЕсли Stage = DOCStages.Booked Тогда
		Возврат "DOC booked";
	ИначеЕсли Stage = ShipmentCargoStages.ETD Тогда
		Возврат "Planned for departure";
	ИначеЕсли Stage = ShipmentCargoStages.ATD Тогда
		Возврат "Departed";
	ИначеЕсли Stage = ShipmentCargoStages.ETA Тогда
		Возврат "Planned for arrival in port";
	ИначеЕсли Stage = ShipmentCargoStages.ATA Тогда
		Возврат "Arrived in port";
	ИначеЕсли Stage = ShipmentCargoStages.CollectedFromPort Тогда
		Возврат "Collected from port";
	ИначеЕсли Stage = ShipmentDocumentStages.PreAlert Тогда
		Возврат "Pre alert";
	ИначеЕсли Stage = ShipmentDocumentStages.DoxRcvd Тогда
		Возврат "Documents received";
	ИначеЕсли Stage = ShipmentDocumentStages.InCustoms Тогда
		Возврат "In customs";
	ИначеЕсли Stage = ShipmentDocumentStages.Cleared Тогда
		Возврат "Cleared";
	// { RGS AGorlenko 10.03.2014 15:57:08 - S-I-0000620
	ИначеЕсли Stage = LocalDistributionStages.ATA Тогда
		Возврат " Local distribution ATA";
	ИначеЕсли Stage = LocalDistributionStages.ATD Тогда
		Возврат "Local distribution ATD";
	ИначеЕсли Stage = LocalDistributionStages.ETA Тогда
		Возврат "Local distribution ETA";
	ИначеЕсли Stage = LocalDistributionStages.ETD Тогда
		Возврат "Local distribution ETD";
	ИначеЕсли Stage = LocalDistributionStages.DeliveredToWH Тогда
		Возврат "Delivery to transitional warehouse";
	// } RGS AGorlenko 10.03.2014 15:57:14 - S-I-0000620
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСообщенияДляExportTracking() Экспорт 
	
	//ЛеваяГраница = 
	//ПраваяГраница = ТекущаяДата() - 60*60;

	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Граница", Граница);
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ShipmentsForSubscriptions.Shipment
	//	|ИЗ
	//	|	РегистрСведений.ShipmentsForSubscriptions КАК ShipmentsForSubscriptions
	//	|ГДЕ
	//	|	ShipmentsForSubscriptions.LastModified <= &Граница
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	DOCsForSubscriptions.DOC
	//	|ИЗ
	//	|	РегистрСведений.DOCsForSubscriptions КАК DOCsForSubscriptions
	//	|ГДЕ
	//	|	DOCsForSubscriptions.LastModified <= &Граница
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	DOCsInvoices.Ссылка КАК DOC,
	//	|	ShipmentsForSubscriptions.Stage,
	//	|	ShipmentsForSubscriptions.StageDate,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
	//	|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
	//	|ИЗ
	//	|	РегистрСведений.ShipmentsForSubscriptions КАК ShipmentsForSubscriptions
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ShipmentsDOCs
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
	//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
	//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
	//	|					ПО Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
	//	|						И (ВЫБОР
	//	|							КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
	//	|								ТОГДА ИСТИНА
	//	|							ИНАЧЕ Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
	//	|						КОНЕЦ)
	//	|				ПО (Goods.Инвойс = DOCsInvoices.Инвойс)
	//	|					И ((НЕ Goods.ПометкаУдаления))
	//	|			ПО ShipmentsDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
	//	|		ПО ShipmentsForSubscriptions.Shipment = ShipmentsDOCs.Ссылка
	//	|ГДЕ
	//	|	ShipmentsForSubscriptions.LastModified <= &Граница
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	DOCsForSubscriptions.DOC КАК DOC,
	//	|	DOCsForSubscriptions.Stage,
	//	|	DOCsForSubscriptions.StageDate,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.КодПоставщика КАК PartNumber,
	//	|	Goods.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК Description,
	//	|	ImportExportTrackingSubscriptions.User.EMail КАК EMail
	//	|ИЗ
	//	|	РегистрСведений.DOCsForSubscriptions КАК DOCsForSubscriptions
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
	//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ImportExportTrackingSubscriptions КАК ImportExportTrackingSubscriptions
	//	|				ПО Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код = ImportExportTrackingSubscriptions.PONoExportRequestNo
	//	|					И (ВЫБОР
	//	|						КОГДА ImportExportTrackingSubscriptions.POLineNo = 0
	//	|							ТОГДА ИСТИНА
	//	|						ИНАЧЕ Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку = ImportExportTrackingSubscriptions.POLineNo
	//	|					КОНЕЦ)
	//	|			ПО DOCsInvoices.Инвойс = Goods.Инвойс
	//	|				И ((НЕ Goods.ПометкаУдаления))
	//	|		ПО DOCsForSubscriptions.DOC = DOCsInvoices.Ссылка
	//	|ГДЕ
	//	|	DOCsForSubscriptions.LastModified <= &Граница";
	//	
	//Отказ = Ложь;
	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//
	//Результаты = Запрос.ВыполнитьПакет();            
	//
	//// Удалим все старые Shipments
	//ВыборкаУдаляемыхShipments = Результаты[0].Выбрать();
	//Если ВыборкаУдаляемыхShipments.Количество() Тогда
	//	
	//	МенеджерЗаписи = РегистрыСведений.ShipmentsForSubscriptions.СоздатьМенеджерЗаписи();
	//	Пока ВыборкаУдаляемыхShipments.Следующий() Цикл
	//		
	//		МенеджерЗаписи.Shipment = ВыборкаУдаляемыхShipments.Shipment;
	//		МенеджерЗаписи.Удалить();
	//					
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//// Удалим все старые DOCs
	//ВыборкаУдаляемыхDOCs = Результаты[1].Выбрать();
	//Если ВыборкаУдаляемыхDOCs.Количество() Тогда
	//	
	//	МенеджерЗаписи = РегистрыСведений.DOCsForSubscriptions.СоздатьМенеджерЗаписи();
	//	Пока ВыборкаУдаляемыхDOCs.Следующий() Цикл
	//		
	//		МенеджерЗаписи.DOC = ВыборкаУдаляемыхDOCs.DOC;
	//		МенеджерЗаписи.Удалить();
	//					
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//// Перейдем к обработке данных
	//
	//ТаблицаShipments = Результаты[2].Выгрузить();
	//ТаблицаDOCs = Результаты[3].Выгрузить();
	//	
	//// Удалим все DOCs из таблицы DOCs, для которых уже есть записи в таблице Shipments
	//СтруктураПоискаПоDOC = Новый Структура("DOC");
	//ТаблицаУдаляемыхDOCs = ТаблицаShipments.Скопировать(,"DOC");
	//ТаблицаУдаляемыхDOCs.Свернуть("DOC", "");
	//Для Каждого СтрокаТаблицыУдаляемыхDOCs Из ТаблицаУдаляемыхDOCs Цикл
	//	
	//	СтруктураПоискаПоDOC.DOC = СтрокаТаблицыУдаляемыхDOCs.DOC;
	//	УдаляемыеСтроки = ТаблицаDOCs.НайтиСтроки(СтруктураПоискаПоDOC);
	//	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
	//		ТаблицаDOCs.Удалить(УдаляемаяСтрока);
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//// Объединим таблицы
	//ОбъединеннаяТаблица = ТаблицаShipments.СкопироватьКолонки("StageDate, PONo, POLineNo, PartNumber, Description, EMail");
	//ОбъединеннаяТаблица.Колонки.Добавить("Stage"); // Нам нужно чтобы она имела свободный тип, а не как в таблице Shipments
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаShipments Цикл
	//	
	//	НоваяСтрока = ОбъединеннаяТаблица.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//	
	//КонецЦикла;
	//ТаблицаShipments.Очистить();
	//
	//Для Каждого СтрокаТаблицы Из ТаблицаDOCs Цикл
	//	
	//	НоваяСтрока = ОбъединеннаяТаблица.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	//	
	//КонецЦикла;
	//ТаблицаDOCs.Очистить();
	//
	//// Сформируем сообщения
	//СтруктураПоискаПоEmail = Новый Структура("EMail");
	//Пока ОбъединеннаяТаблица.Количество() Цикл  
	//	
	//	ПерваяСтрокаОбъединеннойТаблицы = ОбъединеннаяТаблица[0];			
	//	СтруктураПоискаПоEmail.EMail = ПерваяСтрокаОбъединеннойТаблицы.EMail;
	//	МассивСтрокСОдинаковымEMail = ОбъединеннаяТаблица.НайтиСтроки(СтруктураПоискаПоEmail);
	//	
	//	ТаблицаСообщения = ОбъединеннаяТаблица.Скопировать(МассивСтрокСОдинаковымEMail);
	//	СформироватьСообщение(ТаблицаСообщения, Отказ);
	//	
	//	Для Каждого СтрокаТаблицы Из МассивСтрокСОдинаковымEMail Цикл
	//		ОбъединеннаяТаблица.Удалить(СтрокаТаблицы);
	//	КонецЦикла;
	//	
	//КонецЦикла; //закончили обход всей таблицы
	//
	//Если Отказ Тогда
	//	ОтменитьТранзакцию();
	//Иначе
	//	ЗафиксироватьТранзакцию();
	//КонецЕсли;
	
КонецПроцедуры

Процедура РассылкаEMail() Экспорт 
	
	// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	LocalDistributionForNonLawsonСервер.УстановкаПризнакаУведомлениеОтправленоДляУведомленийПоAcceptedTR();
	// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	EMailQueue.EMail,
	|	EMailQueue.Date,
	|	EMailQueue.Subject,
	|	EMailQueue.Body,
	|	EMailQueue.Copy,
	|	EMailQueue.ТипТекста,
	|	EMailQueue.АдресОтвета,
	|	EMailQueue.Attachment,
	|	EMailQueue.ЕстьОшибка,
	|	EMailQueue.GUID
	// { RGS ASeryakov, 25.09.2018 S-I-0005867
	|	,EMailQueue.КоличествоОтправок
	// } RGS ASeryakov, 25.09.2018 S-I-0005867
	|ИЗ
	|	РегистрСведений.EMailQueue КАК EMailQueue
	|
	|УПОРЯДОЧИТЬ ПО
	|	EMailQueue.Date";
	
	Выборка = Запрос.Выполнить().Выбрать();
	// { RGS AArsentev 15.02.2017 S-I-0002527
	ИмяФайла = "";
	// } RGS AArsentev 15.02.2017 S-I-0002527
	Пока Выборка.Следующий() цикл
		
		// { RGS ASeryakov, 25.09.2018 S-I-0005867
		Если Выборка.Date > ТекущаяДата() Тогда
			Продолжить;
		КонецЕсли;
		// { RGS ASeryakov, 25.09.2018 S-I-0005867
		
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		//// { RGS ASeryakov, 25.09.2018 S-I-0005867 //закомментировать
		//Если Выборка.ЕстьОшибка Тогда
		//	ЗаписьЖурналаРегистрации("Рассылка E-mail", УровеньЖурналаРегистрации.Ошибка, 
		//	, , "Некорректный адрес электронной почты: " + Выборка.EMail + " или копий " + Выборка.EMail);
		//	ЗафиксироватьТранзакцию();
		//	Продолжить;
		//КонецЕсли;
		//// } RGS ASeryakov, 25.09.2018 S-I-0005867
		
		МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.EMail = Выборка.EMail;
		МенеджерЗаписи.GUID = Выборка.GUID;
		МенеджерЗаписи.Date = Выборка.Date;
				
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Выборка.EMail);	
		ПараметрыПисьма.Вставить("Тема", Выборка.Subject);
		ПараметрыПисьма.Вставить("Тело", Выборка.Body);
		ПараметрыПисьма.Вставить("АдресОтвета", Выборка.АдресОтвета);
		// { RGS AGorlenko 25.12.2015 14:05:15 - поддержка различных типов текста
		//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		ПараметрыПисьма.Вставить("ТипТекста", ?(Выборка.ТипТекста.Пустая(), Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Выборка.ТипТекста));
		// } RGS AGorlenko 25.12.2015 14:05:17 - поддержка различных типов текста
		// { RGS AGorlenko 19.12.2015 0:20:27 - поддержка копий
		ПараметрыПисьма.Вставить("Копии", Выборка.Copy);
		// } RGS AGorlenko 19.12.2015 0:20:32 - поддержка копий
		
		Если Выборка.Attachment <> Неопределено Тогда 
			
			Вложения = Новый Соответствие;
			Вложение = Выборка.Attachment.Получить();	
			
			Если Вложение <> Неопределено Тогда 
				
				ИмяВложения = "";
				
				Если ТипЗнч(Вложение) = Тип("ТабличныйДокумент") Тогда
					
					Если СтрНайти(Выборка.Subject, "Work order") = 1 Тогда
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".pdf");
						ВременныйФайл = Новый Файл(ИмяВременногоФайла);
						ИмяВложения = "Work order " + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".pdf";
						ИмяФайла = ВременныйФайл.Путь + ИмяВложения;
						Вложение.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
					Иначе
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xls");
						ВременныйФайл = Новый Файл(ИмяВременногоФайла);
						// { RGS AArsentev 15.02.2017 S-I-0002527
						Если СтрНайти(Выборка.Subject, "Not accepted Domestic transport requests") = 1 Тогда
							ИмяВложения = "Not_accepted_Domestic_transport_requests " + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
							// } RGS AArsentev 15.02.2017 S-I-0002527
						ИначеЕсли СтрНайти(Выборка.Subject, "PM notification") = 0 Тогда
							ИмяВложения = "Notification_KS_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
						Иначе
							ИмяВложения = "Notification_PM_" + Формат(ТекущаяДата(), "Л=en_US; ДФ=d-MMM-yy") + ".xls";
						КонецЕсли;
						
						ИмяФайла = ВременныйФайл.Путь + ИмяВложения;
						Вложение.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
					КонецЕсли;
					
					Вложение = Новый Файл(ИмяФайла);
					Вложения.Вставить(ИмяВложения, Вложение);
				// { RGS LKhristyuk 6/1/2018 11:24:26 AM - вопрос S-I-0005089
				ИначеЕсли ТипЗнч(Вложение) =  Тип("ТаблицаЗначений") Тогда
					Если СтрНайти(Выборка.Subject, ", DOC - ") <> 0 
						// { RGS 03.09.2018 S-I-0005892
						ИЛИ СтрНайти(Выборка.Subject, ", SH - ") <> 0 Тогда
						// { RGS 03.09.2018 S-I-0005892
						Для Каждого Элемент Из Вложение Цикл
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("." + Элемент.Расширение);
							ВременныйФайл = Новый Файл(ИмяВременногоФайла);
							ИмяВложения = Элемент.Имя + "." + Элемент.Расширение;
							
							Вложения.Вставить(ИмяВложения, Элемент.ДвоичноеПредставление);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					// } RGS LKhristyuk 6/1/2018 11:24:29 AM - вопрос S-I-0005089	
				КонецЕсли;
				
				
				ПараметрыПисьма.Вставить("Вложения", Вложения);
				
			КонецЕсли;
			
		
		Попытка
			
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
			
			МенеджерЗаписи.Удалить();
         						
		Исключение
			
			ТекстОшибки = ИнформацияОбОшибке();
			
			Если ТекстОшибки = Неопределено Тогда
				ВызватьИсключение;
			КонецЕсли;
			//// { RGS ASeryakov, 25.09.2018 S-I-0005867 закомментировать
			//Если ТекстОшибки.Описание <> Неопределено 
			//	И (СтрНайти(ТекстОшибки.Описание, "Recipient address rejected: User unknown in relay recipient table") > 0 
			//	Или СтрНайти(ТекстОшибки.Описание, "Mailbox not available (SMTP error code") > 0
			//	Или СтрНайти(ТекстОшибки.Описание, "Почтовый ящик не доступен (SMTP error code") > 0) Тогда
			//	
			//	МенеджерЗаписи.Удалить();
			//	ЗафиксироватьТранзакцию();
			//	Прервать;
			//	
			//КонецЕсли;
			//
			//Если ТекстОшибки.Причина <> Неопределено 
			//	И (СтрНайти(ТекстОшибки.Причина.Описание, "Recipient address rejected: User unknown in relay recipient table") > 0 
			//	Или СтрНайти(ТекстОшибки.Причина.Описание, "Mailbox not available (SMTP error code") > 0
			//	Или СтрНайти(ТекстОшибки.Причина.Описание, "Почтовый ящик не доступен (SMTP error code") > 0) Тогда
			//	
			//	МенеджерЗаписи.Удалить();
			//	ЗафиксироватьТранзакцию();
			//	Прервать;
			//	
			//КонецЕсли;

			//Если ТекстОшибки.Описание <> Неопределено И (СтрНайти(ТекстОшибки.Описание, "Некорректный адрес электронной почты") > 0 
			//	ИЛИ СтрНайти(ТекстОшибки.Описание, "Недопустимый символ") > 0) Тогда
			//	
			//	МенеджерЗаписи.Прочитать();
			//	МенеджерЗаписи.ЕстьОшибка = Истина;
			//	МенеджерЗаписи.Записать();
			//
			//	ЗафиксироватьТранзакцию();
			//	Прервать;
			//	
			//КонецЕсли;
			//
			//ВызватьИсключение;
			//
			//// { RGS ASeryakov, 25.09.2018 S-I-0005867//закомментировать
			
			// считываем запись гарантировано , если не попали в условие ошибки
			МенеджерЗаписи.Прочитать();
			
			Если Выборка.ЕстьОшибка И Выборка.КоличествоОтправок >= 11 Тогда
					
					НаборЗаписей = РегистрыСведений.EMailQueue.СоздатьНаборЗаписей();
					НаборЗаписей.Записывать = Истина;
					НаборЗаписей.Отбор.GUID.Установить(Выборка.GUID);
					НаборЗаписей.Отбор.Date.Установить(Выборка.Date);
					НаборЗаписей.Записать();
					ЗафиксироватьТранзакцию();
					
				Продолжить;
			
			ИначеЕсли ТекстОшибки.Описание <> Неопределено И (СтрНайти(ТекстОшибки.Описание, "Некорректный адрес электронной почты") > 0 
				ИЛИ СтрНайти(ТекстОшибки.Описание, "Недопустимый символ") > 0
				ИЛИ СтрНайти(ТекстОшибки.Причина.Описание, "Почтовый ящик не доступен") > 0) Тогда
				
				//МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ЕстьОшибка = Истина;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
			
			МенеджерЗаписи.КоличествоОтправок = Выборка.КоличествоОтправок + 1;
			
			// Первые три отправка сразу 3 раза
			Если Выборка.КоличествоОтправок <= 3 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date;
				
			// Четвертая отправка через 1 мин.
			ИначеЕсли Выборка.КоличествоОтправок = 4 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 60;
				
			// Пятая отправка через 3 мин.
			ИначеЕсли Выборка.КоличествоОтправок = 5 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 180;
				
			// Шестая отправка через 5 мин.
			ИначеЕсли Выборка.КоличествоОтправок = 6 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 300;
				
			// Седьмая отправка через 15 мин.
			ИначеЕсли Выборка.КоличествоОтправок = 7 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 900;
				
			// Восьмая отправка через 1 час.
			ИначеЕсли Выборка.КоличествоОтправок = 8 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 3600;
				
			// Девятая отправка через 3 часа.
			ИначеЕсли Выборка.КоличествоОтправок = 9 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 10800;
				
			// Десятая отправка через 6 часов.
			ИначеЕсли Выборка.КоличествоОтправок = 10 Тогда
				
				МенеджерЗаписи.Date = Выборка.Date + 21600;
				
			// Одинадцатая отправка через 12 часов.
			ИначеЕсли Выборка.КоличествоОтправок > 10 Тогда
			
				МенеджерЗаписи.Date = Выборка.Date + 21600;
			
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			// } RGS ASeryakov, 25.09.2018 S-I-0005867
			
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		// { RGS AArsentev 15.02.2017 S-I-0002527
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			Попытка
				УдалитьФайлы(ИмяФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
		// } RGS AArsentev 15.02.2017 S-I-0002527
		
		//Прервать;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА CUSTOMS FILES В TCS / SVS

Процедура TCSPushCustomsFiles() Экспорт
	
	Обработки.TCSPushCustomsFiles.PushCustomsFiles();
	
КонецПроцедуры

Функция ПолучитьМассивParentCompaniesДляВыгрузкиTCS() Экспорт 
	
	МассивParentCompanies = Новый Массив;
	МассивParentCompanies.Добавить(Справочники.SoldTo.НайтиПоКоду("TCS"));
	МассивParentCompanies.Добавить(Справочники.SoldTo.НайтиПоКоду("SLB Vostok"));
	
	Возврат МассивParentCompanies;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПАРАМЕТРОВ СЕАНСА

Процедура УстановитьПараметрСеансаCCA(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.CCA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "CCA");	
	УстановленныеПараметры.Добавить("CCA");
	
КонецПроцедуры 

// УДАЛИТЬ
Процедура УстановитьПараметрСеансаСахалин(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.УДАЛИТЬСахалин = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "УДАЛИТЬСахалин");
	УстановленныеПараметры.Добавить("УДАЛИТЬСахалин");
	
КонецПроцедуры

// УДАЛИТЬ
Процедура ВыполнитьЗапросВЦикле(Массив, МаксимальноеЧислоИтераций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.ПометкаУдаления,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Номер,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Дата,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Проведен,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.НомерСтроки,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel.ПометкаУдаления,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel.Предопределенный,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel.Код,
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel.Наименование
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = &DOC";
	
	КоличествоИтераций = 0;
	Для Каждого DOC Из Массив Цикл
			
		Запрос.УстановитьПараметр("DOC", DOC);
				
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ы = 0;
		КонецЦикла; 
		
		КоличествоИтераций = КоличествоИтераций + 1;
		
		Если КоличествоИтераций = МаксимальноеЧислоИтераций Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// РИЗП - WEB Service FinanceToRIET

Функция ПолучитьПроведенныйРИЗП(DocReference) Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	ПредставлениеРИЗПа = "";
	
	// в поставке может быть несколько компаний
	МассивParentCompanyCode = ПолучитьМассивParentCompanyCodeИзDocReference(DocReference);
	Для Каждого ParentCompanyCode из МассивParentCompanyCode Цикл 
		
		Если ParentCompanyCode = "PA" Тогда 
			
			АдресWSDL = "http://ru0149app14.dir.slb.com/FinanceToRIET_PA/ws/FinanceToRIET.1cws?wsdl";
			
		ИначеЕсли ParentCompanyCode = "SLI RU" Тогда 
			
			АдресWSDL = "http://ru0149app14.dir.slb.com/FinanceToRIET_SLI_RU/ws/FinanceToRIET.1cws?wsdl";
			           						
		иначе	
			Продолжить;
		КонецЕсли;
		
		Определения = Новый WSОпределения(АдресWSDL, "FinanceWebService", "123456789");
		
		URIПространстваИмен = "http://www.FinanceToRIET.ru";
		
		Прокси = Новый WSПрокси(Определения, URIПространстваИмен, "FinanceToRIET", "FinanceToRIETSoap");
		Прокси.Пользователь = "FinanceWebService";
		Прокси.Пароль = "123456789";
		
		DocType = "";
		Если ТипЗнч(DocReference) = Тип("ДокументСсылка.InvoiceLinesClassification") Тогда 
			DocType = "InvoiceLinesClassification";
		ИначеЕсли ТипЗнч(DocReference) = Тип("ДокументСсылка.ЗакрытиеПоставки") Тогда 
			DocType = "ЗакрытиеПоставки";
		КонецЕсли;
		
		PostedRIZP = Прокси.СheckPostedRIZP(DocType, СокрЛП(DocReference.УникальныйИдентификатор()));
					
		Если Не ПустаяСтрока(PostedRIZP) Тогда 
			ПредставлениеРИЗПа = ПредставлениеРИЗПа + ?(ПустаяСтрока(ПредставлениеРИЗПа), "", ";") +  
				ParentCompanyCode + ": " + PostedRIZP;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ПредставлениеРИЗПа;
	
КонецФункции

Функция ПолучитьМассивParentCompanyCodeИзDocReference(DocReference)
	
	МассивParentCompanyCode = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DocReference", DocReference);
	
	Если ТипЗнч(DocReference) = Тип("ДокументСсылка.ЗакрытиеПоставки") Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.SoldTo.Код КАК ParentCompanyCode
		|ИЗ
		|	Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|ГДЕ
		|	ЗакрытиеПоставкиСопоставление.Ссылка = &DocReference";
		
	ИначеЕсли ТипЗнч(DocReference) = Тип("ДокументСсылка.InvoiceLinesClassification") Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InvoiceLinesClassificationClassification.InvoiceLine.SoldTo.Код КАК ParentCompanyCode
		|ИЗ
		|	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
		|ГДЕ
		|	InvoiceLinesClassificationClassification.Ссылка = &DocReference";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивParentCompanyCode.Добавить(СокрЛП(Выборка.ParentCompanyCode));
	КонецЦикла;
	
	Возврат МассивParentCompanyCode;
	
КонецФункции

