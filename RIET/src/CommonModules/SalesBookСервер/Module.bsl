// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УПП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УПП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	//СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",	Ложь);
	//СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка());
	//Добавила Федотова Л., РГ-Софт, 10.01.15, вопрос SLI-0005089
	СтруктураРеквизиты.Вставить("Курс",0);
	//
	СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",Ложь);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора,
																		//|УчетАгентскогоНДС,
																		//|ВидАгентскогоДоговора,
																		|Курс,
																		|РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Возвращает валюту регламентированного учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту рег. учета. Если валюта рег. учета не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции 
        
// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью.
// Проверяется также видимость элемента
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт

	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");

	Для Каждого Элемент из СписокТабличныхПолей Цикл
		Если Форма.Объект[Элемент.Представление].Количество() > 0 Тогда
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				// На табличное поле могут влиять также функциональные опции
				// Найти все функциональные опции, которые могут влиять на видимость этого табличного поля
				МетаданныеТабличнаяЧасть = Форма.Параметры.Ключ.Метаданные().ТабличныеЧасти.Найти(Элемент.Представление);
				Если МетаданныеТабличнаяЧасть <> Неопределено Тогда
					ЭтаТабличнаяЧастьНевидима = Ложь;
					Для каждого МетаданныеФункциональнойОпции Из Метаданные.ФункциональныеОпции Цикл
						Если МетаданныеФункциональнойОпции.Хранение.Тип = ОписаниеТипаБулево Тогда
							Если МетаданныеФункциональнойОпции.Состав.Найти(МетаданныеТабличнаяЧасть) <> Неопределено Тогда
								Если Форма.ПолучитьФункциональнуюОпциюФормы(МетаданныеФункциональнойОпции.Имя) = Ложь Тогда // Табличная часть невидима
									ЭтаТабличнаяЧастьНевидима = Истина;
									Прервать; // Больше нет смысла проверять эту табличную часть - она невидима
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если ЭтаТабличнаяЧастьНевидима = Истина Тогда
						Продолжить; // Продолжить со следующей табличной части
					КонецЕсли;
				КонецЕсли;
				// Эта табличная часть - первая видимая, у которой есть данные
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора)  Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является головной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ГоловнаяОрганизация");

	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Организация;
	Иначе
		Возврат ГоловнаяОрганизация; 
	КонецЕсли;

КонецФункции 

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) 
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОбъект, ДокументОснование) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Организация.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		Объект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	//Изменил Трефиленков Дмитрий, РГ-Софт
	
	// Подразделение.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
		Объект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
	КонецЕсли;
	
	//конец изменения
	
	// Склад.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		Объект.Склад = ДокументОснование.Склад;
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		Объект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
	   И (НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		  ИЛИ Объект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		Объект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			Если ДокументОснование.ДоговорКонтрагента.Курс > 0 Тогда
				Объект.КурсВзаиморасчетов = ДокументОснование.ДоговорКонтрагента.Курс;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					Объект.КратностьВзаиморасчетов = 1;
				КонецЕсли;
			Иначе
				СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
				Объект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

				// КратностьВзаиморасчетов.
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	// Банковский счет 
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Объект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				Объект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Объект.Касса) Тогда
				Объект.ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.ВалютаДокумента = Объект.БанковскийСчет.ВалютаДенежныхСредств;
			КонецЕсли;
		Иначе
			Объект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ТекущаяДата());
			Объект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		Объект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// УчитыватьНДС.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		Объект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		Объект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	//Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
	//	Если ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокументаОснования) Тогда
	//		Объект.ОтражатьВНалоговомУчете = ДокументОснование.ОтражатьВНалоговомУчете;
	//	Иначе
	//		Объект.ОтражатьВНалоговомУчете = Истина;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

Процедура ПроверитьНомерДокумента(ДокОбъект, НачальнаяДатаДокумента, НумерацияПриЗаписи = Ложь) Экспорт   

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		Если НумерацияПриЗаписи Тогда
			ДокОбъект.Номер = "";
		Иначе
			Если НЕ ЗначениеЗаполнено(ДокОбъект.Организация.Префикс) Тогда
				ДокОбъект.УстановитьНовыйНомер("00");
			Иначе
				ДокОбъект.УстановитьНовыйНомер(ДокОбъект.Организация.Префикс);
			КонецЕсли;
			ДокОбъект.Номер = ДокОбъект.Номер;
        КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный")
	   И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда
           		
		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

Функция ПолучитьТипыДокументовРасчетов(ИмяДокумента, ИмяРеквизита)  Экспорт
	
	Возврат Документы[ИмяДокумента].ПустаяСсылка().Метаданные().Реквизиты[ИмяРеквизита].Тип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение реквизитов в строках табличных частей

Процедура ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	Если Не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.НомерГТД = СтрокаТабличнойЧасти.Номенклатура.НомерГТД;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНомерГТДИСтрануПроисхождения()

Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
    
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СодержаниеEng", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеEng = СтрокаТабличнойЧасти.Номенклатура.НаименованиеEng;

		Если ПустаяСтрока(НаименованиеEng) Тогда
			СтрокаТабличнойЧасти.СодержаниеEng = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.СодержаниеEng = НаименованиеEng;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

Процедура РассылкаУведомленийКС() Экспорт  // SLI-0006169 - Notification KS - Добавила Петроченко НН 
	
	//т.к. получатели AU могут быть заполнены после проведения СФ, перед формированием рассылки пробуем дозаполнить графики
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	               |		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = ДокументРеализацияТоваровУслуг.Ссылка
	               |ГДЕ
	               |	ДокументРеализацияТоваровУслуг.Ссылка.ДатаВозвратаКС = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ДокументРеализацияТоваровУслуг.Ссылка.ДатаОтправкиКС <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СформироватьГрафикиУведомленийКС(Выборка.СчетФактура);
	КонецЦикла;
	
	// формируем очередь уведомлений
	СформироватьУведомленияКС();	
	
КонецПроцедуры 

Процедура СформироватьГрафикиУведомленийКС(СчетФактура) Экспорт // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	
	// { RGS LFedotova 15.12.2017 11:48:50 - вопрос S-B-0000235 - не проводятся СФ из-за того, что не заполнен график, 
	//график не заполняется, так как много ошибок
	//Отменила исполнение процедуры, чтобы пользователи могли продолжить работу
	Возврат;
	// } RGS LFedotova 15.12.2017 11:48:54 - вопрос S-B-0000235
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	
	// в любом случае отбираем все записи графиков по данной СФ, т.к. документы основания могут поменяться
	НаборЗаписейСФ = РегистрыСведений.ГрафикиУведомленийКС.СоздатьНаборЗаписей();
	НаборЗаписейСФ.Отбор.СчетФактураВыданный.Установить(СчетФактура);
	НаборЗаписейСФ.Прочитать();
	НаборЗаписейСФ.Очистить();
	
	Если СчетФактураОбъект.ПометкаУдаления ИЛИ СчетФактураОбъект.Дата < Дата('20160101') Тогда 
		НаборЗаписейСФ.Записать();
		Возврат;
	КонецЕсли;
	
	МассивРеализаций = Новый Массив;
	
	Для каждого СтрОснование Из СчетФактураОбъект.ДокументыОснования Цикл
		
		Если ТипЗнч(СтрОснование.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			МассивРеализаций.Добавить(СтрОснование.ДокументОснование);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивРеализаций.Количество() = 0 Тогда
		
		Если НаборЗаписейСФ.Количество() > 0 Тогда 
			НаборЗаписейСФ.Записать();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРеализаций", МассивРеализаций);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
	               |	РеализацияТоваровУслугТовары.КостЦентр
	               |ПОМЕСТИТЬ ВТ_реализации
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка В(&МассивРеализаций)
	               |	И РеализацияТоваровУслугТовары.Ссылка.ДатаВозвратаКС = ДАТАВРЕМЯ(1, 1, 1)
	               |	И РеализацияТоваровУслугТовары.Ссылка.ДатаОтправкиКС <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка,
	               |	РеализацияТоваровУслугУслуги.КостЦентр
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка В(&МассивРеализаций)
	               |	И РеализацияТоваровУслугУслуги.Ссылка.ДатаВозвратаКС = ДАТАВРЕМЯ(1, 1, 1)
	               |	И РеализацияТоваровУслугУслуги.Ссылка.ДатаОтправкиКС <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И НЕ РеализацияТоваровУслугУслуги.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_реализации.Реализация,
	               |	AUsПолучателиУведомленийКС.УровеньУведомленийКС,
	               |	AUsПолучателиУведомленийКС.УровеньУведомленийКС.ДнейСДатыОтсчета КАК ДнейСДатыОтсчета,
	               |	ВТ_реализации.Реализация.ДатаОтправкиКС КАК ДатаОтправкиКС
	               |ИЗ
	               |	ВТ_реализации КАК ВТ_реализации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsПолучателиУведомленийКС КАК AUsПолучателиУведомленийКС
	               |		ПО ВТ_реализации.КостЦентр = AUsПолучателиУведомленийКС.AU
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	               |		ПО ВТ_реализации.Реализация = ДокументРеализацияТоваровУслуг.Сделка
	               |			И (ДокументРеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно))
	               |			И (НЕ ДокументРеализацияТоваровУслуг.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	               |		ПО ВТ_реализации.Реализация = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадок)
	               |ГДЕ
	               |	НЕ AUsПолучателиУведомленийКС.УровеньУведомленийКС ЕСТЬ NULL 
	               |	И ДокументРеализацияТоваровУслуг.Ссылка ЕСТЬ NULL 
	               |	И ЗначенияСвойствОбъектов.Свойство ЕСТЬ NULL 
	               |	И НЕ ВТ_реализации.Реализация.ЭтоДокументИнтеркомпани";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Свернуть("Реализация,УровеньУведомленийКС,ДнейСДатыОтсчета,ДатаОтправкиКС");
	Для Каждого Стр из ТЗ Цикл
		
		НоваяСтрокаНЗ = НаборЗаписейСФ.Добавить();
		НоваяСтрокаНЗ.СчетФактураВыданный = СчетФактура;
		НоваяСтрокаНЗ.РеализацияТоваровУслуг = Стр.Реализация;
		НоваяСтрокаНЗ.УровеньУведомленийКС = Стр.УровеньУведомленийКС;
		
		НоваяСтрокаНЗ.ДатаНачалаУведомлений = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
			ПроизводственныйКалендарь, НачалоДня(Стр.ДатаОтправкиКС), Стр.ДнейСДатыОтсчета);
		
	КонецЦикла;
	 	
	НаборЗаписейСФ.Записать();
	    		    		
КонецПроцедуры // { SLI-0006169 - Notification KS - конец добавления

Процедура СформироватьУведомленияКС() // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	   	                         	
	// для каждой связки графика СФ+Реализация отбираем максимальную дату, которая <= тек. дате	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("УровеньУведомленийКС", Справочники.УровниУведомленийКС.НайтиПоКоду("Level 1"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикиУведомленийКС.СчетФактураВыданный,
	               |	ГрафикиУведомленийКС.РеализацияТоваровУслуг,
	               |	МАКСИМУМ(ГрафикиУведомленийКС.ДатаНачалаУведомлений) КАК ДатаНачалаУведомлений
	               |ПОМЕСТИТЬ ВТДатыГрафиков
	               |ИЗ
	               |	РегистрСведений.ГрафикиУведомленийКС КАК ГрафикиУведомленийКС
	               |ГДЕ
	               |	ГрафикиУведомленийКС.ДатаНачалаУведомлений <= &ТекДата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикиУведомленийКС.СчетФактураВыданный,
	               |	ГрафикиУведомленийКС.РеализацияТоваровУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТграфики.СчетФактураВыданный,
	               |	ВТграфики.РеализацияТоваровУслуг,
	               |	ГрафикиУведомленийКС.УровеньУведомленийКС,
	               |	ГрафикиУведомленийКС.ДатаНачалаУведомлений
	               |ПОМЕСТИТЬ ВТУровниГрафиков
	               |ИЗ
	               |	ВТДатыГрафиков КАК ВТграфики
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиУведомленийКС КАК ГрафикиУведомленийКС
	               |		ПО ВТграфики.СчетФактураВыданный = ГрафикиУведомленийКС.СчетФактураВыданный
	               |			И ВТграфики.РеализацияТоваровУслуг = ГрафикиУведомленийКС.РеализацияТоваровУслуг
	               |			И ВТграфики.ДатаНачалаУведомлений = ГрафикиУведомленийКС.ДатаНачалаУведомлений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугТовары.КостЦентр,
	               |	ВТУровниГрафиков.СчетФактураВыданный,
	               |	ВТУровниГрафиков.УровеньУведомленийКС,
	               |	ВТУровниГрафиков.РеализацияТоваровУслуг,
	               |	ВТУровниГрафиков.ДатаНачалаУведомлений
	               |ПОМЕСТИТЬ ВТГрафикиAU
	               |ИЗ
	               |	ВТУровниГрафиков КАК ВТУровниГрафиков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ПО ВТУровниГрафиков.РеализацияТоваровУслуг = РеализацияТоваровУслугТовары.Ссылка
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТУровниГрафиков.РеализацияТоваровУслуг
	               |			ИЗ
	               |				ВТУровниГрафиков КАК ВТУровниГрафиков)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугУслуги.КостЦентр,
	               |	ВТУровниГрафиков.СчетФактураВыданный,
	               |	ВТУровниГрафиков.УровеньУведомленийКС,
	               |	ВТУровниГрафиков.РеализацияТоваровУслуг,
	               |	ВТУровниГрафиков.ДатаНачалаУведомлений
	               |ИЗ
	               |	ВТУровниГрафиков КАК ВТУровниГрафиков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |		ПО ВТУровниГрафиков.РеализацияТоваровУслуг = РеализацияТоваровУслугУслуги.Ссылка
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТУровниГрафиков.РеализацияТоваровУслуг
	               |			ИЗ
	               |				ВТУровниГрафиков КАК ВТУровниГрафиков)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	AUsПолучателиУведомленийКС.Получатель КАК Получатель,
	               |	ВЫБОР
	               |		КОГДА AUsSubSubSegmentsDFMName.DFMName ЕСТЬ NULL 
	               |			ТОГДА ВТГрафикиAU.КостЦентр.Segment
	               |		ИНАЧЕ AUsSubSubSegmentsDFMName.DFMName
	               |	КОНЕЦ КАК Segment,
	               |	ВТГрафикиAU.РеализацияТоваровУслуг.Контрагент.КонтрагентLawson.Наименование КАК Client,
	               |	ВТГрафикиAU.РеализацияТоваровУслуг.ДоговорКонтрагента КАК Contract,
	               |	ВТГрафикиAU.СчетФактураВыданный.Номер КАК InvoiceNo,
	               |	НАЧАЛОПЕРИОДА(ВТГрафикиAU.СчетФактураВыданный.Дата, ДЕНЬ) КАК InvoiceDate,
				   //Исправила Федотова Л., РГ-Софт, 01.06.2016, вопрос 
				   //|	ВТГрафикиAU.СчетФактураВыданный.СуммаДокумента КАК InvoiceAmount,
				   |	ВТГрафикиAU.РеализацияТоваровУслуг.СуммаДокумента КАК InvoiceAmount,
				   |	ВТГрафикиAU.РеализацияТоваровУслуг.ВалютаДокумента.НаименованиеEng КАК Сurrency,
				   |	ВТГрафикиAU.РеализацияТоваровУслуг.ВалютаДокумента КАК СurrencyСсылка,
	               |	ВТГрафикиAU.РеализацияТоваровУслуг.ДатаОтправкиКС КАК KSSubmitDate,
	               |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТГрафикиAU.РеализацияТоваровУслуг.ДатаОтправкиКС, ДЕНЬ), &ТекДата, ДЕНЬ) КАК Days,
	               |	ВЫБОР
	               |		КОГДА ВТГрафикиAU.РеализацияТоваровУслуг.СтатусВозвратаКС = ЗНАЧЕНИЕ(Справочник.СтатусыВозвратаКС.ПустаяСсылка)
	               |			ТОГДА ""Just sent""
	               |		ИНАЧЕ ВТГрафикиAU.РеализацияТоваровУслуг.СтатусВозвратаКС
	               |	КОНЕЦ КАК Status,
	               |	ВЫБОР
	               |		КОГДА ВТГрафикиAU.РеализацияТоваровУслуг.СтатусВозвратаКС = ЗНАЧЕНИЕ(Справочник.СтатусыВозвратаКС.ПустаяСсылка)
	               |			ТОГДА ""KS just sent""
	               |		ИНАЧЕ ВТГрафикиAU.РеализацияТоваровУслуг.СтатусВозвратаКС.Определение
	               |	КОНЕЦ КАК StatusDefinition,
	               |	ВТГрафикиAU.РеализацияТоваровУслуг.КомментарийСтатусаВозвратаКС КАК StatusComment
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	ВТГрафикиAU КАК ВТГрафикиAU
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsПолучателиУведомленийКС КАК AUsПолучателиУведомленийКС
	               |		ПО ВТГрафикиAU.КостЦентр = AUsПолучателиУведомленийКС.AU
	               |			И ВТГрафикиAU.УровеньУведомленийКС = AUsПолучателиУведомленийКС.УровеньУведомленийКС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsSubSubSegmentsDFMName КАК AUsSubSubSegmentsDFMName
	               |		ПО ВТГрафикиAU.КостЦентр.Код = AUsSubSubSegmentsDFMName.AUCode
	               |			И ВТГрафикиAU.КостЦентр.Сегмент = AUsSubSubSegmentsDFMName.SubSubSegment
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Получатель,
	               |	ВТ.Segment,
	               |	ВТ.Client,
	               |	ВТ.Contract,
	               |	ВТ.InvoiceNo,
	               |	ВТ.InvoiceDate КАК InvoiceDate,
	               |	ВТ.InvoiceAmount,
	               |	ВТ.Сurrency,
	               |	ВТ.СurrencyСсылка,
	               |	ВТ.KSSubmitDate КАК KSSubmitDate,
	               |	ВТ.Days,
	               |	ВТ.Status, 
	               |	ВТ.StatusDefinition,
	               |	ВТ.StatusComment,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days >= 16
	               |				И ВТ.Days < 21
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК QTY_16_20,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days >= 21
	               |				И ВТ.Days <= 45
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК QTY_21_45,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days > 45
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК QTY_more45,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days >= 16
	               |				И ВТ.Days < 21
	               |			ТОГДА ВТ.InvoiceAmount
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Amount_16_20,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days >= 21
	               |				И ВТ.Days <= 45
	               |			ТОГДА ВТ.InvoiceAmount
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Amount_21_45,
	               |	ВЫБОР
	               |		КОГДА ВТ.Days > 45
	               |			ТОГДА ВТ.InvoiceAmount
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Amount_more45
	               |ИЗ
	               |	ВТ КАК ВТ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	KSSubmitDate,
	               |	InvoiceDate";
	
	ТЗ_СФ = Запрос.Выполнить().Выгрузить();
	
	МассивПолучателей = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗ_СФ, "Получатель");
	
	СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	СurrencyRUR = Справочники.Валюты.НайтиПоКоду("643"); 
	СurrencySLBUSD = Справочники.Валюты.НайтиПоКоду("999");
	СтруктураСurrencySLBUSD = ОбщегоНазначения.ПолучитьКурсВалюты(СurrencySLBUSD, ТекущаяДата()); 
			
	СтруктураОтбора = Новый Структура("Получатель");
	
	Для Каждого Получатель из МассивПолучателей Цикл
		
		СтруктураОтбора.Получатель = Получатель;
		
		ТЗполучателя = ТЗ_СФ.Скопировать(СтруктураОтбора,
			"Segment,Client,Contract,InvoiceNo,InvoiceDate,InvoiceAmount,Сurrency,KSSubmitDate,Days,Status,StatusDefinition,StatusComment");
		             				
		Тема = "List of KS awaiting signature";
		// { RGS VChaplygin - Заявка Овчинниковой
		Тема1 = "Please be kindly informed that there is a number of KS forms sent to Customers but not returned back signed.";
		Тема2 = "That&prime;s why your immediate actions are required.";
		// } RGS VChaplygin - Заявка Овчинниковой
		
		ТЗ = ТЗ_СФ.Скопировать(СтруктураОтбора, "Segment,СurrencyСсылка,QTY_16_20,QTY_21_45,QTY_more45,Amount_16_20,Amount_21_45,Amount_more45");
		ТЗ.Свернуть("Segment,СurrencyСсылка", "QTY_16_20,QTY_21_45,QTY_more45,Amount_16_20,Amount_21_45,Amount_more45");
		
		МассивSegment = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗ, "Segment");
		
		ТекстHTML = "<HTML>
		|<BODY>
		|<P>" + Тема1 + "</P>
		|<P>" + Тема2 + "</P>
		|<FONT FACE=""Arial Narrow"" SIZE=""7"">
		|<TABLE borderColor=#000000 cellSpacing=0 cellPadding=0 width=""1000"" border=1>
		|	<TR bgcolor=""#DDEBF7"">
		|		<TH width=""8%"">Days</TH>
		|		<TH colspan=""3"" width=""23%"">16-20</TH>
		|		<TH colspan=""3"" width=""23%"">21-45</TH>
		|		<TH colspan=""3"" width=""23%"">>45</TH>
		|		<TH colspan=""3"" width=""23%"">Total</TH>
		|	</TR>
		|	<TR bgcolor=""#DDEBF7"">
		|		<TH width=""8%"">Segment</TH>
		|		<TH width=""7%"">QTY</TH>
		|		<TH width=""7%"">RUR</TH>
		|		<TH width=""7%"">USD</TH>
		|		<TH width=""7%"">QTY</TH>
		|		<TH width=""7%"">RUR</TH>
		|		<TH width=""7%"">USD</TH>	
		|		<TH width=""7%"">QTY</TH>
		|		<TH width=""7%"">RUR</TH>
		|		<TH width=""7%"">USD</TH>
		|		<TH width=""7%"">QTY</TH>
		|		<TH width=""7%"">RUR</TH>
		|		<TH width=""7%"">USD</TH>
		|	</TR>";
		
		GT_QTY_16_20 = 0;
		GT_RUR_16_20 = 0;	
		GT_USD_16_20 = 0;
		
		GT_QTY_21_45 = 0;
		GT_RUR_21_45 = 0;	
		GT_USD_21_45 = 0;	
		
		GT_QTY_more45 = 0;
		GT_RUR_more45 = 0;	
		GT_USD_more45 = 0;	
		
		GT_QTY_Total = 0;
		GT_RUR_Total = 0;	
		GT_USD_Total = 0;
		
		Для Каждого Segment Из МассивSegment Цикл
			                   					
			ТЗSegment = ТЗ.Скопировать(Новый Структура("Segment", Segment));
			
			QTY_16_20 = 0;
			QTY_21_45 = 0;
			QTY_more45 = 0;
			
			RUR_16_20 = 0;
			RUR_21_45 = 0;
			RUR_more45 = 0;
			
			USD_16_20 = 0;
			USD_21_45 = 0;
			USD_more45 = 0;
			
			Для Каждого Стр Из ТЗSegment Цикл
				
				QTY_16_20 = QTY_16_20 + Стр.QTY_16_20;
				QTY_21_45 = QTY_21_45 + Стр.QTY_21_45;
				QTY_more45 = QTY_more45 + Стр.QTY_more45;
								
				СтруктураСurrency = ОбщегоНазначения.ПолучитьКурсВалюты(Стр.СurrencyСсылка, ТекущаяДата()); 
				
				// руб
				Если Стр.СurrencyСсылка = СurrencyRUR Тогда 
					
					RUR_16_20 = RUR_16_20 + Стр.Amount_16_20;
					RUR_21_45 = RUR_21_45 + Стр.Amount_21_45;
					RUR_more45 = RUR_more45 + Стр.Amount_more45;
					
				иначе
					
					RUR_16_20 = RUR_16_20 + ?(Стр.Amount_16_20 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_16_20, Стр.СurrencyСсылка, СurrencyRUR, СтруктураСurrency.Курс, 1, СтруктураСurrency.Кратность, 1));
					
					RUR_21_45 = RUR_21_45 + ?(Стр.Amount_21_45 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_21_45, Стр.СurrencyСсылка, СurrencyRUR, СтруктураСurrency.Курс, 1, СтруктураСurrency.Кратность, 1));
					
					RUR_more45 = RUR_more45 + ?(Стр.Amount_more45 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_more45, Стр.СurrencyСсылка, СurrencyRUR, СтруктураСurrency.Курс, 1, СтруктураСurrency.Кратность, 1));
					
				КонецЕсли;
				
				// SLB USD
				Если Стр.СurrencyСсылка = СurrencySLBUSD Тогда 
					
					USD_16_20 = USD_16_20 + Стр.Amount_16_20;
					USD_21_45 = USD_21_45 + Стр.Amount_21_45;
					USD_more45 = USD_more45 + Стр.Amount_more45;
					
				иначе
					
					USD_16_20 = USD_16_20 + ?(Стр.Amount_16_20 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_16_20, Стр.СurrencyСсылка, СurrencySLBUSD, 
						СтруктураСurrency.Курс, СтруктураСurrencySLBUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencySLBUSD.Кратность));
					
					USD_21_45 = USD_21_45 + ?(Стр.Amount_21_45 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_21_45, Стр.СurrencyСсылка, СurrencySLBUSD, 
						СтруктураСurrency.Курс, СтруктураСurrencySLBUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencySLBUSD.Кратность));
					
					USD_more45 = USD_more45 + ?(Стр.Amount_more45 = 0, 0, ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
						Стр.Amount_more45, Стр.СurrencyСсылка, СurrencySLBUSD, 
						СтруктураСurrency.Курс, СтруктураСurrencySLBUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencySLBUSD.Кратность));
					
				КонецЕсли;
				  								
			КонецЦикла;
			
			QTY_Total = QTY_16_20 + QTY_21_45 + QTY_more45;
			RUR_Total = RUR_16_20 + RUR_21_45 + RUR_more45;
			USD_Total = USD_16_20 + USD_21_45 + USD_more45;
			
			ТекстHTML = ТекстHTML + "
				|	<TR>
				|		<TD align=""center""><FONT SIZE=""-1"">" + СокрЛП(Segment) + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(QTY_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(RUR_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(USD_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(QTY_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(RUR_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(USD_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(QTY_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(RUR_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(USD_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(QTY_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(RUR_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(USD_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|	</TR>";
				
			GT_QTY_16_20 = GT_QTY_16_20 + QTY_16_20;
			GT_RUR_16_20 = GT_RUR_16_20 + RUR_16_20;	
			GT_USD_16_20 = GT_USD_16_20 + USD_16_20;
			
			GT_QTY_21_45 = GT_QTY_21_45 + QTY_21_45;
			GT_RUR_21_45 = GT_RUR_21_45 + RUR_21_45;	
			GT_USD_21_45 = GT_USD_21_45 + USD_21_45;	

			GT_QTY_more45 = GT_QTY_more45 + QTY_more45;
			GT_RUR_more45 = GT_RUR_more45 + RUR_more45;	
			GT_USD_more45 = GT_USD_more45 + USD_more45;	

			GT_QTY_Total = GT_QTY_Total + QTY_Total;
			GT_RUR_Total = GT_RUR_Total + RUR_Total;	
			GT_USD_Total = GT_USD_Total + USD_Total;	

		КонецЦикла;
		
		ТекстHTML = ТекстHTML + "
				|	<TR bgcolor=""#DDEBF7"">
				|		<TD align=""center""><FONT SIZE=""-1"">" + "Grand Total" + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_QTY_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_RUR_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_USD_16_20, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_QTY_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_RUR_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_USD_21_45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_QTY_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_RUR_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_USD_more45, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_QTY_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_RUR_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(GT_USD_Total, "ЧДЦ=; ЧРГ=.; ЧН=") + "</FONT></TD>
				|	</TR>";
				
		ТекстHTML = ТекстHTML + "
		|</TABLE>
		|</FONT>
		// { RGS VChaplygin - SLI-0006630 
		|<P><h3>Do not reply to this email address</h3></P>
		|<P>Please contact your Area/GM/Country AR Lead if you encounter any issue.</P>
		|<P>SLB Accounts Receivable Team</P>
		// } RGS VChaplygin - SLI-0006630 
		|</BODY>
		|</HTML>";
				
		ТабДок = Новый ТабличныйДокумент;
		
		Построитель = Новый ПостроительОтчета();
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗполучателя);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		
		Вложение = Новый ХранилищеЗначения(ТабДок, Новый СжатиеДанных(9));
				
		//ТекстHTML = "<HTML>
		//|<BODY>
		//// { RGS VChaplygin - Заявка Овчинниковой
		////|<P>" + Тема + ":</P>
		//|<P>" + Тема1 + "</P>
		//|<P>" + Тема2 + "</P>
		//|<FONT FACE=""Arial Narrow"" SIZE=""7"">
		//// } RGS VChaplygin - Заявка Овчинниковой
		//|<TABLE borderColor=#000000 cellSpacing=0 cellPadding=0 width=""1000"" border=1>
		//|	<TR bgcolor=""#DDEBF7"">
		//|		<TH width=""5%"">Seg</TH>
		//|		<TH width=""20%"">Client</TH>
		//|		<TH width=""24%"">Contract</TH>
		//|		<TH width=""14%"">Invoice &#8470;</TH>
		//|		<TH width=""9%"">Inv. Date</TH>
		//|		<TH width=""14%"">Invoice Amount</TH>
		//|		<TH width=""9%"">KS Subm. Date</TH>
		//|		<TH width=""5%"">Days</TH>
		//|	</TR>";
		//
		//Для Каждого Стр Из ТЗполучателя Цикл
		//	
		//	ТекстHTML = ТекстHTML + "
		//	|	<TR>
		//	|		<TD align=""center""><FONT SIZE=""-1"">" + СокрЛП(Стр.Segment) + "</FONT></TD>
		//	|		<TD align=""left""><FONT SIZE=""-1"">" + СокрЛП(Стр.Client) + "</FONT></TD>
		//	|		<TD align=""left""><FONT SIZE=""-1"">" + СокрЛП(Стр.Contract) + "</FONT></TD>
		//	|		<TD align=""center""><FONT SIZE=""-1"">" + СокрЛП(Стр.НомерСФ) + "</FONT></TD>
		//	|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(Стр.ДатаСФ, "Л=en_US; ДФ=d-MMM-yy") + "</FONT></TD>
		//	|		<TD align=""right""><FONT SIZE=""-1"">" + Формат(Стр.СуммаДокумента, "ЧДЦ=; ЧРГ=.; ЧН=0") + " " + Стр.ВалютаENG + "</FONT></TD>
		//	|		<TD align=""center""><FONT SIZE=""-1"">" + Формат(Стр.ДатаОтправкиКС, "Л=en_US; ДФ=d-MMM-yy") + "</FONT></TD>
		//	|		<TD align=""center""><FONT SIZE=""-1"">" + СокрЛП(Стр.OutstandingDays) + "</FONT></TD>
		//	|	</TR>";
		//	
		//КонецЦикла;
		//
		//ТекстHTML = ТекстHTML + "
		//|</TABLE>
		//|</FONT>
		//|</BODY>
		//|</HTML>";
		
		Тело = ТекстHTML;
		         		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатель, Тема, Тело, Вложение);
		         			 				 		
	КонецЦикла;
	 	 	
КонецПроцедуры  // } SLI-0006169 - Notification KS - конец добавления

Процедура ПриЗаписиПрисоединенногоФайлаРеализацияТоваровУслуг(Источник, Отказ) Экспорт // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	
	Если Источник.ВидДокумента <> Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.ПервичнаяДокументация
		И Источник.ВидДокумента <> Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументация
		И Источник.ВидДокумента <> Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументацияЧеклист Тогда   //RCA-0000242 - Кожевникова
		Возврат;	
	КонецЕсли;
	
	РеализацияСсылка = Источник.ВладелецФайла;
	
	ДатаВозвратаКС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияСсылка, "ДатаВозвратаКС");
	
	Если Не ЗначениеЗаполнено(ДатаВозвратаКС) Тогда 
		
		РеализацияОбъект = РеализацияСсылка.ПолучитьОбъект();
		
		// { RGS PBahushevich 9/14/2016 1:04:23 PM - Для загрузки приложения из обмена если документ еще не загружен
		Если  РеализацияОбъект = неопределено Тогда 
			Возврат;
		КонецЕсли;
		// } RGS PBahushevich 9/14/2016 1:04:42 PM - Для загрузки приложения из обмена если документ еще не загружен
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		РеализацияОбъект.ДатаВозвратаКС = Источник.ДатаСоздания;
		// { RGS AKozhevnikova
		РеализацияОбъект.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);

		//РеализацияОбъект.ОбменДанными.Загрузка = Истина;
		//
		////Добавила Федотова Л., РГ-Софт, 12.02.16, вопрос SLI-0006200
		////Проверим, утверждена ли реализация
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СтатусыУтвержденияКорректировок.Статус
		//|ИЗ
		//|	РегистрСведений.СтатусыУтвержденияКорректировок КАК СтатусыУтвержденияКорректировок
		//|ГДЕ
		//|	СтатусыУтвержденияКорректировок.КредитНота = &РеализацияСсылка
		//|	И СтатусыУтвержденияКорректировок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияОбъектов.Утверждена)";
		//
		//Запрос.УстановитьПараметр("РеализацияСсылка", РеализацияСсылка);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//
		//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		//	РеализацияОбъект.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
		//КонецЕсли;
		////конец добавления
	    // } RGS AKozhevnikova
		РеализацияОбъект.Записать();
		
		Документы.РеализацияТоваровУслуг.ОчиститьГрафикиУведомленийКС(РеализацияСсылка);
		
		ЗафиксироватьТранзакцию();
		          				
	КонецЕсли;
	
КонецПроцедуры   // } SLI-0006169 - Notification KS - конец добавления

