////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации=Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		ЕстьРасчеты  = Ложь;
	Иначе

		ЕстьРасчеты = (
		    ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		);
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		ЕстьРасчеты  = Ложь;
	Иначе
		ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыПоКредитам()

Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Знач ВидДокумента,ВидОперации = неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	//ВидыДокументовДДС.Вставить("АккредитивПереданный", "Выбытие");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПолученное", "Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее", "Выбытие");
	//ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПолученное", "Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств", "Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер", "Выбытие");
	//ВидыДокументовДДС.Вставить("АккредитивПолученный", "Поступление");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПереданное", "Поступление");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее", "Поступление");
	//ВидыДокументовДДС.Вставить("ПлатежноеТребованиеВыставленное", "Поступление");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств", "Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер", "Поступление");

	ВидыДокументовДДС.Вставить("АвансовыйОтчет", "Выбытие");
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", "Поступление");
	ВидыДокументовДДС.Вставить("ДокументРасчетовСКонтрагентом", "Поступление");
	
	
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 
	
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ВидДокумента="ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	ИначеЕсли ВидДокумента="ДокументРасчетовСКонтрагентом" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

Функция ПодготовитьТаблицуОплат(СтруктураШапкиДокумента) Экспорт

	Перем ВидОперации;

	СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации);
                                      
	Ссылка       = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	ЭтоВозврат   = (ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	//Зафиксируем расчеты-возврат в структуре шапки документа 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",ЭтоВозврат);

	ИмяТабличнойЧасти =?(ВидДокумента="АвансовыйОтчет","ОплатаПоставщикам","РасшифровкаПлатежа");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",     Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
	Запрос.УстановитьПараметр("ПоРасчетнымДокументам",  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		Тогда
		РассчитатьСуммуВВалютеРеглУчета = Ложь;
	Иначе
		РассчитатьСуммуВВалютеРеглУчета = не (СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	КонецЕсли;
	Запрос.УстановитьПараметр("РассчитатьСуммуВВалютеРеглУчета",РассчитатьСуммуВВалютеРеглУчета);
	
	ВалютнаяСуммаВКолонкеВзаиморасчетов = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты, Ложь, Истина);
	Запрос.УстановитьПараметр("ВалютнаяСуммаВКолонкеВзаиморасчетов",ВалютнаяСуммаВКолонкеВзаиморасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаПлатежей.ДоговорКонтрагента,
	|	ТаблицаПлатежей.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаПлатежей.КурсВзаиморасчетов,
	|	ТаблицаПлатежей.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
	|				ИЛИ &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетОплаты,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат = ИСТИНА
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетАванса,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|							ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|						ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|					КОНЕЦ * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|						ТОГДА ТаблицаПлатежей.СуммаПлатежа
	|					ИНАЧЕ ТаблицаПлатежей.СуммаВзаиморасчетов
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РублеваяСумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютнаяСуммаВКолонкеВзаиморасчетов = ИСТИНА
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|			ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|		КОНЕЦ КАК ЧИСЛО) КАК ВалютнаяСумма,
	|	ВЫРАЗИТЬ(ТаблицаПлатежей.СуммаВзаиморасчетов КАК ЧИСЛО) КАК СуммаВзаиморасчетов,
	|	ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа",Строка(ВидДокумента+"."+ИмяТабличнойЧасти));
	Если ВидДокумента="АвансовыйОтчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаПлатежа","Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств","Неопределено");
	КонецЕсли; 
	Если ВидДокумента="ПлатежноеПоручениеВходящее" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТаблицаПлатежей.Ссылка.ПодразделениеОрганизации","ТаблицаПлатежей.ПодразделениеОрганизации");
	КонецЕсли; 
	РеестрПлатежей = Запрос.Выполнить().Выгрузить();
	
	//Дополнение информацией о корр. счете
	РеестрПлатежей.Колонки.Добавить("КоррСчет",Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррСчет,"КоррСчет");
	
	Для НомерСубконто = 1 По 3 Цикл
		РеестрПлатежей.Колонки.Добавить("КоррСубконто"+НомерСубконто);
	КонецЦикла; 

	Для каждого Субконто из СтруктураШапкиДокумента.КоррСчет.ВидыСубконто Цикл

		Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств тогда
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДДС"),"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетОрганизации,"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо,"КоррСубконто"+Субконто.НомерСтроки);
		Иначе
			// ОбщегоНазначения.СообщитьОбОшибке("Субконто """+Строка(Субконто.ВидСубконто)+""" по счету """+Строка(КоррСчет)+""" не заполнено!",Ложь,"");
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатежа.Сделка) тогда
			СтрокаПлатежа.Сделка = Неопределено;
		КонецЕсли;
 		
		//Розов, РГ-Софт
		попытка
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатежа.РасчетыВУсловныхЕдиницах) тогда
				//СтрокаПлатежа.РасчетыВУсловныхЕдиницах = ложь;
			КонецЕсли;
		исключение
			сообщить("Возникло исключение в строке 263 модуля ""Управление денежными средствами"".");
		КонецПопытки;
		//Розов, РГ-Софт
		
	КонецЦикла;

	Возврат РеестрПлатежей;

КонецФункции

// Выполняет приход/расход (возврат) денег по платежным документам при расчетах с контрагентами
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ДвижениеДенег(ДокументОбъект,СтруктураШапкиДокумента,ОпределятьСостояниеРасчетов=Ложь,Отказ,Заголовок,БазовоеСодержаниеПроводки="",НомерЖурнала="", РеестрПлатежей = Неопределено, ПереворачиватьОтрицательныеПроводки = Ложь) Экспорт

	Перем ВидОперации;
	Если ОпределятьСостояниеРасчетов и не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата) Тогда
		//Оперативное определение состояния расчетов не требуется.
		ОпределятьСостояниеРасчетов = Ложь;
	КонецЕсли; 
	
	//Подготовим реестр платежей по данным документа
	Если РеестрПлатежей = Неопределено Тогда
		РеестрПлатежей = ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
	КонецЕсли; 

	Если РеестрПлатежей.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат Истина;
	КонецЕсли;

	//Получение основных данных документа для фильтра остатков
	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,"Поступление","Выбытие");
	Иначе	
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	ЭтоВозврат          = СтруктураШапкиДокумента.ЭтоВозврат;
	ЕстьРасчетыВУсловныхЕдиницах = не (РеестрПлатежей.Найти(Истина,"РасчетыВУсловныхЕдиницах")= Неопределено);
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	
	
	//Таблица значений для занесения промежуточных расчетов
	РеестрПроводок = РеестрПлатежей.Скопировать();
	РеестрПроводок.Колонки.Добавить("РезультатРаспределения",Новый ОписаниеТипов("Булево"));

	Если ОпределятьСостояниеРасчетов тогда
		
		//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
		РеестрПроводок.Очистить();
		
		//Для банковских документов дата движения может отличаться
		МоментДокумента = Новый МоментВремени(ДатаДока,СтруктураШапкиДокумента.Ссылка);

		ПлатежиСвернуто = РеестрПлатежей.Скопировать();
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			ПлатежиСвернуто.Свернуть("Контрагент,ДоговорКонтрагента,Сделка,СчетОплаты,ВалютаВзаиморасчетов,ПодразделениеОрганизации","СуммаВзаиморасчетов");//, РублеваяСумма,ВалютнаяСумма
		Иначе
			ПлатежиСвернуто.Свернуть("Контрагент,ДоговорКонтрагента,Сделка,СчетОплаты,ВалютаВзаиморасчетов","СуммаВзаиморасчетов");//, РублеваяСумма,ВалютнаяСумма flp
		КонецЕсли; 

		РеестрЗадолженности = ПлатежиСвернуто.Скопировать();
		РеестрЗадолженности.Очистить();

		//Дополним реестр задолженностей необходимыми колонками
		ТекущаяЗадолженность = ОбщегоНазначения.ПолучитьОстатокПоСчету(Организация,МоментДокумента,ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		ОбщегоНазначения.ДополнитьКолонкиТаблицыЗначений(РеестрЗадолженности,ТекущаяЗадолженность);
		ОбщегоНазначения.ДополнитьКолонкиТаблицыЗначений(РеестрПроводок,ТекущаяЗадолженность);

		//Получим таблицу задолженностей по данным бух. учета
		Для каждого ХарактеристикиПлатежа из ПлатежиСвернуто цикл

			//Для пустой оплаты не нужны остатки
			Если ХарактеристикиПлатежа.СуммаВзаиморасчетов=0 тогда
				Продолжить;
			КонецЕсли;

			СчетОплаты = ХарактеристикиПлатежа.СчетОплаты;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетОплаты) тогда
				//Если счет оплаты не заполнен (возможно при возврате), остатки оценивать не надо.
				Продолжить;
			КонецЕсли;

			//Определяем режим получения остатков
			ПолучитьОстаткиВВалюте = НЕ(ХарактеристикиПлатежа.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) 
				                     И ХарактеристикиПлатежа.СчетОплаты.Валютный;

			//Определяем фильтр по аналитике
			АналитикаСчета = Новый массив(3);

			Для каждого Субконто из ХарактеристикиПлатежа.СчетОплаты.ВидыСубконто Цикл

				Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Контрагент;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.ДоговорКонтрагента;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Сделка;
				КонецЕсли;

			КонецЦикла;

			УсловиеВалюта = Неопределено;

			Если ПолучитьОстаткиВВалюте Тогда
				УсловиеВалюта = ХарактеристикиПлатежа.ВалютаВзаиморасчетов;
			КонецЕсли;

			ЗнакФильтрПоОстаткам = ?(НаправлениеДвижения = "Поступление",1,-1);

			НомерСубконтоРасчетныеДокументы = 0;

			Если НЕ СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто")=Неопределено тогда
				НомерСубконтоРасчетныеДокументы = СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
			КонецЕсли;

			Если Не(НомерСубконтоРасчетныеДокументы=0) 
				и ХарактеристикиПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
				и ОбщегоНазначения.ЗначениеНеЗаполнено(ХарактеристикиПлатежа.Сделка) тогда
				Продолжить;

			КонецЕсли;

			ТекущаяЗадолженность = 	ОбщегоНазначения.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетОплаты,УсловиеВалюта ,АналитикаСчета[0],АналитикаСчета[1],АналитикаСчета[2],ЗнакФильтрПоОстаткам);

			Если не НомерСубконтоРасчетныеДокументы = 0 тогда
				УправлениеВзаиморасчетами.УпорядочитьТаблицуПоДокументу(ТекущаяЗадолженность,"Субконто" + НомерСубконтоРасчетныеДокументы);
			КонецЕсли;

			Если ТекущаяЗадолженность.Количество() > 0 тогда

				Для каждого СтрокаЗадолженности из ТекущаяЗадолженность цикл

					СтрокаРеестра = РеестрЗадолженности.Добавить();

					Для каждого Колонка из ПлатежиСвернуто.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = ХарактеристикиПлатежа[Колонка.Имя];
					КонецЦикла;

					Для каждого Колонка из ТекущаяЗадолженность.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = СтрокаЗадолженности[Колонка.Имя];
					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		СуммовыеРазницыПоДокументам = Неопределено;

		Если не(РеестрЗадолженности.Количество()=0) и ЕстьРасчетыВУсловныхЕдиницах тогда

			//При расчетах в условных единицах необходимо сформировать таблицу суммовых разниц по документам
			СуммовыеРазницыПоДокументам = Новый ТаблицаЗначений();
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("СуммоваяРазница",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Счет",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("КоличествоСубконто",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Субконто1");
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Субконто2");
			СуммовыеРазницыПоДокументам.Колонки.Добавить("Субконто3");

		КонецЕсли;

		УправлениеВзаиморасчетами.ФИФОПоРасчетам(РеестрПроводок, РеестрПлатежей,РеестрЗадолженности,СтруктураШапкиДокумента,"СчетОплаты", СуммовыеРазницыПоДокументам,Заголовок);	

	КонецЕсли;

	ПроводкиБУ = ДокументОбъект.Движения.Хозрасчетный;

	БазовыйСуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление","Кт","Дт");
	БазовыйСуфиксКоррСчета     = ?(НаправлениеДвижения = "Поступление","Дт","Кт");
	
	//Проводки по результатам распределения
	Для каждого РезультатРаспределения из РеестрПроводок Цикл

		Если РезультатРаспределения.ВалютнаяСумма=0 и РезультатРаспределения.РублеваяСумма=0 и РезультатРаспределения.СуммаВзаиморасчетов=0 тогда
			Продолжить;
		КонецЕслИ;
		
		Если ПереворачиватьОтрицательныеПроводки Тогда
			СуфиксСчетаРасчетов = ?(РезультатРаспределения.РублеваяСумма>0,БазовыйСуфиксСчетаРасчетов,БазовыйСуфиксКоррСчета);
			СуфиксКоррСчета     = ?(РезультатРаспределения.РублеваяСумма>0,БазовыйСуфиксКоррСчета,БазовыйСуфиксСчетаРасчетов);
		Иначе
			СуфиксСчетаРасчетов = БазовыйСуфиксСчетаРасчетов;
			СуфиксКоррСчета     = БазовыйСуфиксКоррСчета;
		КонецЕсли; 

		Если РезультатРаспределения.РезультатРаспределения тогда

			
			Если не (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено) и не ОбщегоНазначения.ЗначениеНеЗаполнено(РезультатРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли не ОбщегоНазначения.ЗначениеНеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе  				
				СодержаниеПроводки  = ?(ЭтоВозврат,"Возврат аванса","Оплата");
			КонецЕсли;

			СчетРасчетов = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(РезультатРаспределения.СчетОплаты),РезультатРаспределения.СчетАванса,РезультатРаспределения.СчетОплаты);

		Иначе

			Если не (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено) и не ОбщегоНазначения.ЗначениеНеЗаполнено(РезультатРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли не ОбщегоНазначения.ЗначениеНеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе
				СодержаниеПроводки  = ?(ЭтоВозврат,"Возврат","Оплата (аванс)");
			КонецЕсли;

			СчетРасчетов = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(РезультатРаспределения.СчетАванса),РезультатРаспределения.СчетОплаты,РезультатРаспределения.СчетАванса);

		КонецЕслИ;

		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = НомерЖурнала;

		Проводка["Счет"+СуфиксСчетаРасчетов]= СчетРасчетов;

		Если РезультатРаспределения.РезультатРаспределения тогда

			Для НомерСубконто = 1 по 3 Цикл
				ОбщегоНазначения.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],НомерСубконто,РезультатРаспределения["Субконто"+НомерСубконто]);
			КонецЦикла;

		Иначе
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Контрагенты",РезультатРаспределения.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Договоры",РезультатРаспределения.ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"ДокументыРасчетовСКонтрагентами",?(ОпределятьСостояниеРасчетов,СтруктураШапкиДокумента.Ссылка,РезультатРаспределения.Сделка));
		КонецЕслИ;

		Проводка["Счет"+СуфиксКоррСчета] = РезультатРаспределения.КоррСчет;

		Для НомерСубконто = 1 по 3 Цикл
			ОбщегоНазначения.УстановитьСубконто(Проводка["Счет"+СуфиксКоррСчета],Проводка["Субконто"+СуфиксКоррСчета],НомерСубконто,РезультатРаспределения["КоррСубконто"+НомерСубконто]);
		КонецЦикла;
        ЗнакСуммы = ?(ПереворачиватьОтрицательныеПроводки и РезультатРаспределения.РублеваяСумма<0,-1,1);
		
		Проводка.Сумма = РезультатРаспределения.РублеваяСумма*ЗнакСуммы;

		Если Проводка["Счет" + СуфиксКоррСчета].Валютный тогда
			Проводка["Валюта" + СуфиксКоррСчета]        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка["ВалютнаяСумма" + СуфиксКоррСчета] = РезультатРаспределения .ВалютнаяСумма*ЗнакСуммы;
		КонецЕсли;

		Если Проводка["Счет" + СуфиксСчетаРасчетов].Валютный Тогда
			Проводка["Валюта" + СуфиксСчетаРасчетов]        = РезультатРаспределения.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = РезультатРаспределения.СуммаВзаиморасчетов*ЗнакСуммы;
		КонецЕсли

	КонецЦикла;

	//Сумовые разницы по расчетам в условных единицах
	Если ЕстьРасчетыВУсловныхЕдиницах и ОпределятьСостояниеРасчетов тогда

		Если не СуммовыеРазницыПоДокументам = Неопределено тогда

			Если СуммовыеРазницыПоДокументам.Количество()>0 тогда
				УправлениеВзаиморасчетами.СуммовыеРазницыПриРасчетахВУсловныхЕдиницах(ДокументОбъект,СуммовыеРазницыПоДокументам,СтруктураШапкиДокумента,Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) И
		ОпределятьСостояниеРасчетов тогда
        //1. Регистрируем оплату в регистре расчетов для НДС 
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты) тогда
			// по расчетам с контрагентами для НДС данный вид операции не отрабатывается
			Возврат Истина;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			И Не СтруктураШапкиДокумента.Ссылка.Allocated Тогда
			//Добавил Трефиленков Дмитрий, РГ-Софт, если не обработано ПП - не учитываем для НДС 
			Возврат Истина;
		ИначеЕсли не (НаправлениеДвижения = "Поступление") = ЭтоВозврат тогда 
			УчетНДС.РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураШапкиДокумента, РеестрПроводок, ДокументОбъект.Движения, ЭтоВозврат, СуммовыеРазницыПоДокументам);
		Иначе
			УчетНДС.РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШапкиДокумента, РеестрПроводок, ДокументОбъект.Движения, ЭтоВозврат, СуммовыеРазницыПоДокументам);
		КонецЕсли;
	КонецЕсли;	

	Возврат Истина;

КонецФункции // ДвижениеДенег()

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

Функция ОграничитьТипыДокументовДляДокументовОплаты(Элемент, БазовоеОписаниеТипа,ЭтоВозврат = Ложь) Экспорт

	УдаляемыеТипыДокументовПоВидуОперации = Новый СписокЗначений();
	СписокТиповКУдалению                  = Новый Массив;
	БазовыеТипыДокументов                 = БазовоеОписаниеТипа.Типы();

	Если ЭтоВозврат тогда
		//Удалить документы приобретения, реализации
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Иначе
		//Удалить документы оплаты и возвратов
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	КонецЕсли;

	Размерность = БазовыеТипыДокументов.Количество();
	Для НомерЭлемента = 1 по Размерность Цикл
		РезультатПоиска = УдаляемыеТипыДокументовПоВидуОперации.НайтиПоЗначению(БазовыеТипыДокументов[Размерность-НомерЭлемента]);
		Если Не РезультатПоиска = Неопределено тогда
			СписокТиповКУдалению.Добавить(РезультатПоиска.Значение);
		КонецЕсли;
	КонецЦикла;

	//Установка ограничения типов для поля "РасчетныйДокумент"
	ОграниченныйТип = Новый ОписаниеТипов(БазовоеОписаниеТипа,,СписокТиповКУдалению);

	Элемент.ОграничениеТипа = ОграниченныйТип;

	Возврат СписокТиповКУдалению;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

#Если Клиент Тогда

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт

	Для Каждого Страница Из Панель.Страницы Цикл

		Если НЕ Страница.Имя = ИмяСтраницы Тогда
			Страница.Видимость = Ложь;
		Иначе
			Страница.Видимость = Истина;
		КонецЕсли;

	КонецЦикла;

	Панель.ТекущаяСтраница = Панель.Страницы[ИмяСтраницы];

КонецПроцедуры // УстановитьТекущуюСтраницу()

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа, с фильтром по переданному списку.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  СписокИсключения              - список значений перечисления, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперацииФильтр(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, СписокИсключения) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл

		Если СписокИсключения.НайтиПоЗначению(ЭлементЗаполнения.Имя) = Неопределено Тогда

		ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                            ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации()

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, 
											РасшифровкаПлатежа, ТипОперации = "") Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить()
	Иначе
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	КонецЕсли;

	// Устанавливаем булевы переменные. Заполнеям их только в том случае, если не указан вид операции (новый объект)

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) И ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации) Тогда

		// Флаги принадлежности к учету заполняем, только если оба не заполнены
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
			ДокументОбъект.ОтражатьВНалоговомУчете = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВНалоговомУчете");
		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента)
		И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ФормаОплаты)) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.БанковскийСчетКасса)) Тогда
			ДокументОбъект.БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчетКасса.ВалютаДенежныхСредств;
		КонецЕсли;    
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
		И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Касса)) Тогда
		ДокументОбъект.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
		ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
	   И (ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Организация)) Тогда

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) или ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента тогда
			//Изменил Трефиленков Дмитрий, РГ-Софт
			ДокументОбъект.СчетОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойБанковскийСчет");
			//конец изменения
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;

	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);

	ДокументОбъект.ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами;
	ДокументОбъект.ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам;

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
			И ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.СчетКонтрагента)
			И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
			И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
			
			ОсновнойДоговорКонтрагента = УправлениеПользователями.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
			
			Если НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда

				Если ДокументОбъект.Организация.Пустая() Тогда
					СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
					Организация = ОсновнойДоговорКонтрагента.Организация;
				ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
					ИЛИ ОсновнойДоговорКонтрагента.Организация=ДокументОбъект.Организация Тогда
					СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;

			КонецЕсли;

			СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
				И (ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда

				ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

			КонецЕсли;

		КонецЕсли; // Договор

	КонецЕсли; // Контрагент

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументОбъект.КурсДокумента) Тогда

		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);

		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

#КонецЕсли

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Если (НЕ МетаданныеРеквизиты.Найти("СчетДоходовБУ") = Неопределено)
		И (НЕ МетаданныеРеквизиты.Найти("СчетРасходовБУ") = Неопределено) Тогда
		ПроверятьВидДеятельности = Истина;
	Иначе
		ПроверятьВидДеятельности = Ложь;
	КонецЕсли;
	
	КэшСчетов = Новый Соответствие;
	
	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		Если ТабличнаяЧасть.Количество() > 1 Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
			
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Значение) Тогда 

				Если ОбщегоНазначения.ЗначениеНеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
		
		Если ПроверятьВидДеятельности Тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы["СчетДоходовБУ"]) ИЛИ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы["СчетРасходовБУ"]) Тогда
				//Один из счетов не заполнен, соответствие не проверяется
			Иначе			
				СчетДоходовБУВСтроке = СтрокаТаблицы["СчетДоходовБУ"];
				СчетДоходовБУЕНВД = КэшСчетов[СчетДоходовБУВСтроке];
				Если СчетДоходовБУЕНВД = Неопределено Тогда
					СчетДоходовБУЕНВД = ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СчетДоходовБУВСтроке);
					КэшСчетов[СчетДоходовБУВСтроке] = СчетДоходовБУЕНВД;					
				КонецЕсли;
				
				СчетРасходовБУВСтроке = СтрокаТаблицы["СчетРасходовБУ"];
				СчетРасходовБУЕНВД = КэшСчетов[СчетРасходовБУВСтроке];
				Если СчетРасходовБУЕНВД = Неопределено Тогда
					СчетРасходовБУЕНВД = ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СчетРасходовБУВСтроке);
					КэшСчетов[СчетРасходовБУВСтроке] = СчетРасходовБУЕНВД;
				КонецЕсли;
				
				Если НЕ СчетДоходовБУЕНВД = СчетРасходовБУЕНВД Тогда
					СтрокаСообщения = "Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности!"; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти()
