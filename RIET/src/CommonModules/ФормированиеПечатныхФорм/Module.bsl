
// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеЗаказчика",	" "); //добавила Л. Федотова 30.12.08
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	//Изменил Трефиленков Дмитрий, РГ-Софт
	СоответствиеПараметров.Вставить("ФактическийАдрес",			" ");
	СоответствиеПараметров.Вставить("АнглийскийАдрес",			" ");
	//конец изменения
	//Добавила Федотова Л., РГ-Софт, 31.08.13, вопрос SLI-0003817
	СоответствиеПараметров.Вставить("ДляИнвойса",			" ");
	//
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = СтрНайти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;

			Исключение

				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент            - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров  - Число, количество экземпляров на печать,
//  НаПринтер              - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок              - Заголовок окна табличного документа
//  НепосредственнаяПечать - используется только для режи
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", НепосредственнаяПечать = Ложь) Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров > 0 Тогда
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НЕ ПечДокумент.АвтоМасштаб
	   И ОбщегоНазначения.ЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать(НепосредственнаяПечать = Истина);

	Иначе

		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки = Ложь;
		ПечДокумент.ОтображатьСетку     = Ложь;
		ПечДокумент.Защита              = Ложь;
		ПечДокумент.ТолькоПросмотр      = Истина;

		ПечДокумент.Показать(Заголовок);

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";

	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";

	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

#Если Клиент Тогда
// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которму необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физичского лица
//
Функция ПолучитьПаспорныеДанныеСтрокой(ФизЛицо) Экспорт

	СтруктураПаспортныхДанных = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(РабочаяДата, Новый Структура("ФизЛицо",ФизЛицо));
    
	ВидДокумента       = СтруктураПаспортныхДанных.ДокументВид;
	Серия              = СтруктураПаспортныхДанных.ДокументСерия;
	Номер              = СтруктураПаспортныхДанных.ДокументНомер;
	ДатаВыдачи         = СтруктураПаспортныхДанных.ДокументДатаВыдачи;
	КемВыдан           = СтруктураПаспортныхДанных.ДокументКемВыдан;
	НомерПодразделения = СтруктураПаспортныхДанных.ДокументКодПодразделения;

	Если НЕ (ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаВыдачи)
		   И ОбщегоНазначения.ЗначениеНеЗаполнено(ВидДокумента)
		   И ОбщегоНазначения.ЗначениеНеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда

		Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
				+ "Серия: "   + Серия + ", № " + Номер 
				+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
				+ КемВыдан    + "; № подр. " + НомерПодразделения;

	Иначе

		Возврат "Отсутствуют данные об удостоверении личности."

	КонецЕсли;

КонецФункции // ПолучитьПаспорныеДанныеСтрокой()
#КонецЕсли

// Функция возвращает часть запроса для корректного заполнения содержания услуг
// при формировании печатных форм.
//
// Параметр:
//  ТабличнаяЧасть - имя табличной части, из которой выбирается содержание 
//                   услуг.
//
// Возвращаемое значение:
//  Строка - текст части запроса.
//
Функция ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг(Знач ТабличнаяЧасть) Экспорт
	
	ТабличнаяЧасть = ТабличнаяЧасть + ?(ПустаяСтрока(ТабличнаяЧасть), "", ".");
	
	ЧастьЗапроса = 
	"	ВЫБОР 
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Содержание ПОДОБНО """") ТОГДА
	|			ВЫРАЗИТЬ(" + ТабличнаяЧасть + "Содержание КАК Строка (1000))
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное ПОДОБНО """") ТОГДА
	|			ВЫРАЗИТЬ(" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		ИНАЧЕ
	|			" + ТабличнаяЧасть + "Номенклатура.Наименование
	|	КОНЕЦ";
	
	Возврат ЧастьЗапроса; 
	
КонецФункции // ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция формирует представление суммы прописью на английском языке в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописьюENG(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаАнглийском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "Л = en_US",Валюта.ПараметрыПрописиНаАнглийском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()
//конец изменения

Функция ПолучитьПараметрыПечатиСФ() Экспорт 
	
	Возврат Документы.СчетФактураВыданный.ПолучитьПараметрыПечатиСФ();
	
КонецФункции

Функция ПолучитьИмяМакетаКоллекцииПечатныхФорм(ИменаМакетов) Экспорт
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов);
	Возврат КоллекцияПечатныхФорм[0].ИмяМакета;
	
КонецФункции