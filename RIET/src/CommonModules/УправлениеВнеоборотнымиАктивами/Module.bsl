
// Функция возвращает счета учета по выбранному объекту
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Объект      - ... строительства по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНДС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

//Изменил Трефиленков Дмитрий, РГ-Софт

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                     Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте
	ТаблицаАмортизации.Колонки.Добавить("Валюта"                , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение"         , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
    //конец добавления
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",           Организация);
	//добавил Трефиленков Дмитрий, РГ-Софт для расчета амортизации в разрезе подразделений (+ параметр функции)
	Запрос.УстановитьПараметр("Подразделения",   Подразделения);
	//изменил Трефиленков Дмитрий, РГ-Софт: расчет амортизации в текущем месяце, если ОС было введено
	//в эксплуатацию 01.хх.хх в 00.00 
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета)+1);
  	//конец изменения
	Запрос.УстановитьПараметр("КонецПериода",          КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",           Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("НачислениеАмортизации", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);

	Если ОсновноеСредство = Неопределено Тогда
		Если Подразделения <> Неопределено Тогда
			Запрос1 = Новый Запрос();
			Запрос1.Текст = "ВЫБРАТЬ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			               |ИЗ
			               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			               |ГДЕ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)";
			Запрос1.УстановитьПараметр("Местонахождение", Подразделения);			   
			Запрос1.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   
			ОсновноеСредство = Запрос1.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
			Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
			ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
			//ТекстУсловияПоСубконто = " И Субконто1 В (&ОсновноеСредство)";
		Иначе
			ТекстУсловия = "";
			//ТекстУсловияПоСубконто = "";
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		//ТекстУсловияПоСубконто = " И Субконто1 В (&ОсновноеСредство)";
	Конецесли;

	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
	//|			СостоянияОСОрганизаций.Организация = &Организация  " + ТекстУсловия + ")) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
     
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство.Валюта,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.СтоимостьБУОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.АмортизацияБУОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.АмортизацияБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСНачалоПериода.АмортизацияБУОстаток, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновноеСредство)
	|				И НачислятьАмортизацию = ИСТИНА
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СостоянияОСОрганизаций.ОсновноеСредство
	|						ИЗ
	|							РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|						ГДЕ
	|							СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|							И СостоянияОСОрганизаций.ДатаСостояния < &Период
	|							И СостоянияОСОрганизаций.Организация = &Организация" + ТекстУсловия + "))) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + "
	|					И ПорядокПогашенияСтоимости = &НачислениеАмортизации) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + ") КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + ") КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + ") КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&НачалоПериода, ИСТИНА" + ТекстУсловия + ") КАК СтоимостьАмортизацияОСНачалоПериода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьАмортизацияОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&КонецПериода,  ИСТИНА" + ТекстУсловия + ") КАК СтоимостьАмортизацияОСОстаткиКонецПериода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьАмортизацияОСОстаткиКонецПериода.ОсновноеСредство,
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация" + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних";
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	Если Не Подразделения = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделения)";
	КонецЕсли;
    //конец добавления
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;
		
		//Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
		//	Если ВыдаватьСообщения Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан счет для начисления амортизации");
		//	КонецЕсли; 
		//	Продолжить;
		//КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			//Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			//Иначе
			//	КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
			//	СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			//КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " объем продукции для вычисления не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент амортизации не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент амортизации не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / 1000 * ВыборкаПоОС.КоэффициентАмортизации / 100 ;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;

			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				КоэффициентУскорения = 1;
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент ускорения не заполнен");
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = NULL Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не определилась дата начала использования (изменения параметров)!");
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));

			ЧислоЛетПользования       = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
			ЧислоЛетПользования       = Цел(Макс(1, ЧислоЛетПользования));

			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаРасчета), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			Если КонецМесяца(ДатаРасчета) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации = Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		КонецЕсли;

		ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;
		СуммаАмортизации     = Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		
		//добавил Трефиленков Дмитрий, РГ-Софт
		//если остается меньше рубля, то списываем все
		ОстатокНаСледующийМесяц = ВсегоОсталосьСписать-СуммаАмортизации;
		Если ОстатокНаСледующийМесяц < 1 Тогда
			СуммаАмортизации = ВсегоОсталосьСписать;	
		КонецЕсли;
	    //конец добавления

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте
		СтрокаАмортизации.Валюта                 = ВыборкаПоОС.ОсновноеСредствоВалюта;
		СтрокаАмортизации.Подразделение          = ВыборкаПоОС.Подразделение;
	    //конец добавления
		//СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоОС.СчетУчета;
		//СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНалогРегл(Объект, ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                                         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаНУ",                                Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииНУ",                          Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",                                ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                                      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
	ТаблицаАмортизации.Колонки.Добавить("Подразделение"         , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                              Организация);
	//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
	Запрос.УстановитьПараметр("Подразделения",   Подразделения);
	//изменил Трефиленков Дмитрий: расчет амортизации в текущем месяце, если ОС было введено
	//в эксплуатацию 01.хх.хх в 00.00 
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
  	//конец изменения
	Запрос.УстановитьПараметр("КонецПериода",                             КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                                   ДатаРасчета);
	Запрос.УстановитьПараметр("СубконтоОС",                               СубконтоОС);
	Запрос.УстановитьПараметр("ВидУчетаНУ",                               Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("СнятоСУчета",                              Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПорядокВключенияСтоимостиВСоставРасходов", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	Запрос.УстановитьПараметр("СчетРасходовНаКапитальныеВложения",        ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	
	Если ОсновноеСредство = Неопределено Тогда
		Если Подразделения <> Неопределено Тогда
			Запрос1 = Новый Запрос();
			Запрос1.Текст = "ВЫБРАТЬ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			               |ИЗ
			               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			               |ГДЕ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)";
			Запрос1.УстановитьПараметр("Местонахождение", Подразделения);			   
			Запрос1.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   
			ОсновноеСредство = Запрос1.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
			Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
			ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		Иначе
			ТекстУсловия = "";
			ТекстУсловияПоСубконто = "";
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
	Конецесли;
    
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиНачалоПериода.СтоимостьНУОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.СтоимостьНУОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.АмортизацияНУОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиКонецПериода.АмортизацияНУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиНачалоПериода.АмортизацияНУОстаток, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	НаправленияАмортизации.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(СтоимостьАмортизацияОСОстаткиНачалоПериода.СуммаКВОстаток, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация" + ТекстУсловия + "
	|				И НачислятьАмортизацию = ИСТИНА
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СостоянияОСОрганизаций.ОсновноеСредство
	|						ИЗ
	|							РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|						ГДЕ
	|							СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|							И СостоянияОСОрганизаций.ДатаСостояния < &Период
	|							И СостоянияОСОрганизаций.Организация = &Организация))) КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + "
	|					И ПорядокВключенияСтоимостиВСоставРасходов = &ПорядокВключенияСтоимостиВСоставРасходов) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|			И НачислениеАмортизацииНалоговыйУчетСрезПоследних.Организация = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК НаправленияАмортизации
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НаправленияАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&НачалоПериода, ИСТИНА" + ТекстУсловия + ") КАК СтоимостьАмортизацияОСОстаткиНачалоПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СтоимостьАмортизацияОСОстаткиНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&КонецПериода, ИСТИНА" + ТекстУсловия + ") КАК СтоимостьАмортизацияОСОстаткиКонецПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СтоимостьАмортизацияОСОстаткиКонецПериода.ОсновноеСредство,
	|	РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних";
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	Если Не Подразделения = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделения)";
	КонецЕсли;
    //конец добавления
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;

		//Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
		//	Если ВыдаватьСообщения Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан счет для начисления амортизации");
		//	КонецЕсли; 
		//	Продолжить;
		//КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.МетодНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан метод начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьНачальныйОстаток) Тогда
			//Стоимость на начало месяца = 0. 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации       = 0;
		СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
		СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользования);

		Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

			СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

		ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

			Если (ВыборкаПоОС.ПризнакНачисленияПоБазовойСтоимости = Истина) Тогда

				СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.СуммаНакопленнойАмортизации;
				СрокИспользованияДляВычисления = Макс(1, СрокИспользованияДляВычисления - ВыборкаПоОС.ФактическийСрокПолезногоИспользования);

				СуммаАмортизации               = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
				                                 ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

			Иначе

				СтоимостьДляВычисления = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияКонечныйОстаток;
				СуммаАмортизации       = СтоимостьДляВычисления * 2 / СрокИспользованияДляВычисления *
				                         ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

				СуммаАмортизации       = Макс(0, Мин(ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток, СуммаАмортизации));

				//Перешли 20% барьер. Переходим к начислению по базовой стоимости.
				Если (ВыборкаПоОС.СтоимостьКонечныйОстаток-ВыборкаПоОС.АмортизацияКонечныйОстаток-СуммаАмортизации)<= (ВыборкаПоОС.СтоимостьКонечныйОстаток*0.2) тогда

					ПереходКНачислениюПоБазовой = Объект.Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;

					Если Объект.Движения.Найти("НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет") = Неопределено Тогда

						Если ОсновноеСредство =Неопределено и ВыдаватьСообщения = Истина тогда
							ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: основное средство " + ВыборкаПоОС.ОсновноеСредство + " должно быть переведено на начисление амортизации по базовой стоимости.");
						КонецЕсли;

					Иначе

						//Определяем срок, прошедший с момента принятия к учету.
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ДатаПринятияКУчету) Тогда
							ФактСрокИспользованияНУ = 0;
						Иначе
							ГодПринятияКУчету = Год(ВыборкаПоОС.ДатаПринятияКУчету);
							ГодТекущий = Год(ДатаРасчета);
							МесяцПринятияКУчету = Месяц(ВыборкаПоОС.ДатаПринятияКУчету);
							МесяцТекущий = Месяц(ДатаРасчета);
							Если ГодТекущий > ГодПринятияКУчету Тогда
								ФактСрокИспользованияНУ = (ГодТекущий-ГодПринятияКУчету-1)*12+(12-МесяцПринятияКУчету) + МесяцТекущий;
							Иначе
								ФактСрокИспользованияНУ = МесяцТекущий - МесяцПринятияКУчету;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаДвижения                                       = ПереходКНачислениюПоБазовой.Добавить();
						СтрокаДвижения.Период                                = ДатаРасчета;
						СтрокаДвижения.Регистратор                           = Объект;
						СтрокаДвижения.ОсновноеСредство                      = ВыборкаПоОС.ОсновноеСредство; 
						СтрокаДвижения.Организация                           = Организация;
						СтрокаДвижения.СуммаНакопленнойАмортизации           = ВыборкаПоОС.АмортизацияКонечныйОстаток + СуммаАмортизации;
						СтрокаДвижения.ПризнакНачисленияПоБазовойСтоимости   = Истина;
						СтрокаДвижения.ФактическийСрокПолезногоИспользования = ФактСрокИспользованияНУ;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Остатки = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;

		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));

		//добавил Трефиленков Дмитрий, РГ-Софт
		//если остается меньше рубля, то списываем все
		ОстатокНаСледующийМесяц = Остатки-СуммаАмортизации;
		Если ОстатокНаСледующийМесяц < 1 Тогда
			СуммаАмортизации = Остатки;	
		КонецЕсли;
	    //конец добавления
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                                         = ВыборкаПоОС.ОсновноеСредство;
		//СтрокаАмортизации.СчетУчетаНУ                                = ВыборкаПоОС.СчетУчета;
		//СтрокаАмортизации.СчетАмортизацииНУ                          = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто                                = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации                     = ВыборкаПоОС.НаправлениеАмортизации;
		СтрокаАмортизации.Налог                                      = СуммаАмортизации;
		СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
 		//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
		СтрокаАмортизации.Подразделение          = ВыборкаПоОС.Подразделение;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл1(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                     Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте
	ТаблицаАмортизации.Колонки.Добавить("Валюта"                , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение"         , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
    //конец добавления
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",            НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",           Организация);
	//добавил Трефиленков Дмитрий, РГ-Софт для расчета амортизации в разрезе подразделений (+ параметр функции)
	Запрос.УстановитьПараметр("Подразделения",   Подразделения);
	//изменил Трефиленков Дмитрий, РГ-Софт: расчет амортизации в текущем месяце, если ОС было введено
	//в эксплуатацию 01.хх.хх в 00.00 
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета)+1);
  	//конец изменения
	Запрос.УстановитьПараметр("КонецПериода",          КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",           Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("НачислениеАмортизации", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
 	Запрос.УстановитьПараметр("СчетУчета", 				ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01"));
	Запрос.УстановитьПараметр("СчетАмортизации", 		ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01"));

	Если ОсновноеСредство = Неопределено Тогда
		Если Подразделения <> Неопределено Тогда
			//Запрос1 = Новый Запрос();
			//Запрос1.Текст = "ВЫБРАТЬ
			//			   |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			//			   |ИЗ
			//			   |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			//			   |ГДЕ
			//			   |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)";
			Запрос.УстановитьПараметр("Местонахождение", Подразделения);			   
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   
			//ОсновноеСредство = Запрос1.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
			Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
			ТекстУсловия =           " И ОсновноеСредство В (ВЫБРАТЬ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			               |ИЗ
			               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			               |ГДЕ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение))";
			ТекстУсловияПоСубконто = "";
		Иначе
			ТекстУсловия = "";
			ТекстУсловияПоСубконто = "";
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		ТекстУсловияПоСубконто = " И Субконто1 В (&ОсновноеСредство)";
	Конецесли;

	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	//СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
     
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	//добавил Трефиленков Дмитрий для учета ОС в валюте
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство.Валюта,
    //конец добавления
	//|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) - ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияОборот,
	//|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	//|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	//|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК Период,
	//|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	//|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК СтоимостьНаНачалоГода,
	|   МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ИЗ
	//|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НачислятьАмортизацию = ИСТИНА " + ТекстУсловия + "
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + "
	|		И ОсновноеСредство НЕ В (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = &СнятоСУчета И
	|			СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|			СостоянияОСОрганизаций.Организация = &Организация  " + ТекстУсловия + ")) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ПорядокПогашенияСтоимости = &НачислениеАмортизации " + ТекстУсловия + ") КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	//|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК СтоимостьОСНачалоПериода
	//|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОСНачалоПериода.Субконто1 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОСНачалоПериода.Счет
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &СчетУчета , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК СтоимостьОСКонецПериода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьОСКонецПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода,Счет = &СчетАмортизации , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК АмортизацияОСНачалоПериода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = АмортизацияОСНачалоПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &СчетАмортизации , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК АмортизацияОСКонецПериода
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = АмортизацияОСКонецПериода.Субконто1
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК ВыработкаОСОбороты
	//|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоГода, Организация = &Организация " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК СтоимостьНаНачалоГода
	//|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = СтоимостьНаНачалоГода.Субконто1 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчета = СтоимостьНаНачалоГода.Счет
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, , &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК АмортизацияНаНачалоГода
	//|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = АмортизацияНаНачалоГода.Субконто1 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизации = АмортизацияНаНачалоГода.Счет
	//|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
    //конец добавления
	|";
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	//Если Не Подразделения = Неопределено Тогда
	//	Запрос.Текст = Запрос.Текст + " 
	//	|	ГДЕ
	//	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделения)";
	//КонецЕсли;
    //конец добавления
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	//изменила Федотова Людмила, РГ-Софт
	Если Не Подразделения = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделения)
		| 	И НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию";
	Иначе
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		| 	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию";
	КонецЕсли;
    //конец добавления
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан способ амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " стоимость равна 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			//Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			//Иначе
			//	КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
			//	СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			//КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " объем продукции для вычисления не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент амортизации не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент амортизации не определен");
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / 1000 * ВыборкаПоОС.КоэффициентАмортизации / 100 ;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;

			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				КоэффициентУскорения = 1;
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " коэффициент ускорения не заполнен");
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = NULL Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не определилась дата начала использования (изменения параметров)!");
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));

			ЧислоЛетПользования       = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
			ЧислоЛетПользования       = Цел(Макс(1, ЧислоЛетПользования));

			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаРасчета), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			Если КонецМесяца(ДатаРасчета) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации = Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		КонецЕсли;

		ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;
		СуммаАмортизации     = Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать));

		//добавил Трефиленков Дмитрий, РГ-Софт
		//если остается меньше рубля, то списываем все
		ОстатокНаСледующийМесяц = ВсегоОсталосьСписать-СуммаАмортизации;
		Если ОстатокНаСледующийМесяц < 1 Тогда
			СуммаАмортизации = ВсегоОсталосьСписать;	
		КонецЕсли;
	    //конец добавления
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                     = ВыборкаПоОС.ОсновноеСредство;
		//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте
		СтрокаАмортизации.Валюта                 = ВыборкаПоОС.ОсновноеСредствоВалюта;
		СтрокаАмортизации.Подразделение          = ВыборкаПоОС.Подразделение;
	    //конец добавления
		СтрокаАмортизации.СчетУчетаБУ            = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииБУ      = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Бух                    = СуммаАмортизации;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНалогРегл1(Объект, ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                                         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаНУ",                                Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииНУ",                          Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",                                ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                                      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
	ТаблицаАмортизации.Колонки.Добавить("Подразделение"         , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                              Организация);
	//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
	Запрос.УстановитьПараметр("Подразделения",   Подразделения);
	//изменил Трефиленков Дмитрий: расчет амортизации в текущем месяце, если ОС было введено
	//в эксплуатацию 01.хх.хх в 00.00 
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
  	//конец изменения
	Запрос.УстановитьПараметр("КонецПериода",                             КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                                   ДатаРасчета);
	Запрос.УстановитьПараметр("СубконтоОС",                               СубконтоОС);
	Запрос.УстановитьПараметр("ВидУчетаНУ",                               Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("СнятоСУчета",                              Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПорядокВключенияСтоимостиВСоставРасходов", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	Запрос.УстановитьПараметр("СчетРасходовНаКапитальныеВложения",        ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("СчетУчета",        						  ПланыСчетов.Налоговый.НайтиПоКоду("01.01"));
	Запрос.УстановитьПараметр("СчетАмортизации",        				  ПланыСчетов.Налоговый.НайтиПоКоду("02.01"));
	
	Если ОсновноеСредство = Неопределено Тогда
		Если Подразделения <> Неопределено Тогда
			//Запрос1 = Новый Запрос();
			//Запрос1.Текст = "ВЫБРАТЬ
			//			   |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			//			   |ИЗ
			//			   |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			//			   |ГДЕ
			//			   |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)";
			Запрос.УстановитьПараметр("Местонахождение", Подразделения);			   
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   
			//ОсновноеСредство = Запрос1.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
			Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
			ТекстУсловия =           " И ОсновноеСредство В (ВЫБРАТЬ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
			               |ИЗ
			               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
			               |ГДЕ
			               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение))";
			ТекстУсловияПоСубконто = "";
		Иначе
			ТекстУсловия = "";
			ТекстУсловияПоСубконто = "";
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		ТекстУсловияПоСубконто = " И Субконто1 В (&ОсновноеСредство)";
	Конецесли;
    
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Период как ДатаПринятияКУчету,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) - ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	//|	НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ПризнакНачисленияПоБазовойСтоимости,
	//|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.СуммаНакопленнойАмортизации, 0) КАК СуммаНакопленнойАмортизации,
	//|	ЕСТЬNULL(НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ФактическийСрокполезногоИспользования, 0) КАК ФактическийСрокполезногоИспользования,
	|	НаправленияАмортизации.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	|	ЕСТЬNULL(РасходыНаКапитальныеВложения.СуммаОстатокДт, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	|   МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ИЗ
	//|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И НачислятьАмортизацию = ИСТИНА " + ТекстУсловия + "
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + "
	|		И ОсновноеСредство НЕ В (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = &СнятоСУчета И
	|			СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|			СостоянияОСОрганизаций.Организация = &Организация " + ТекстУсловия + ")) КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ПорядокВключенияСтоимостиВСоставРасходов = &ПорядокВключенияСтоимостиВСоставРасходов " + ТекстУсловия + ") КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство И НачислениеАмортизацииНалоговыйУчетСрезПоследних.Организация = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет = &СчетУчета, &СубконтоОС, Организация = &Организация И ВидУчета=&ВидУчетаНУ " + ТекстУсловияПоСубконто + ") КАК СтоимостьОСНачалоПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СтоимостьОСНачалоПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&КонецПериода, Счет = &СчетУчета, &СубконтоОС, Организация = &Организация И ВидУчета=&ВидУчетаНУ " + ТекстУсловияПоСубконто + ") КАК СтоимостьОСКонецПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СтоимостьОСКонецПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет = &СчетАмортизации, &СубконтоОС, Организация = &Организация И ВидУчета=&ВидУчетаНУ " + ТекстУсловияПоСубконто + ") КАК АмортизацияОСНачалоПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = АмортизацияОСНачалоПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&КонецПериода, Счет = &СчетАмортизации, &СубконтоОС, Организация = &Организация И ВидУчета=&ВидУчетаНУ " + ТекстУсловияПоСубконто + ") КАК АмортизацияОСКонецПериода
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = АмортизацияОСКонецПериода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних
	//|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииПоБазовойСтоимостиНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + ТекстУсловия + ") КАК НаправленияАмортизации
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = НаправленияАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет = &СчетРасходовНаКапитальныеВложения, &СубконтоОС, Организация = &Организация " + ТекстУсловияПоСубконто + ") КАК РасходыНаКапитальныеВложения
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = РасходыНаКапитальныеВложения.Субконто1
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода,Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
    //конец добавления
	|";
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	//Если Не Подразделения = Неопределено Тогда
	//	Запрос.Текст = Запрос.Текст + " 
	//	|	ГДЕ
	//	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)";
	//КонецЕсли;
    //конец добавления
	
	//добавил Трефиленков Дмитрий, РГ-Софт для раздельного расчета амортизации по подразделениям
	//изменила добавление Федотова Людмила, РГ-Софт 
	Если Не Подразделения = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)
		| 	И НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию";
	Иначе
		Запрос.Текст = Запрос.Текст + " 
		|	ГДЕ
		|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию";
	КонецЕсли;
    //конец добавления
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан счет для начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.МетодНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " не указан метод начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СтоимостьНачальныйОстаток) Тогда
			//Стоимость на начало месяца = 0. 
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: для основного средства " + ВыборкаПоОС.ОсновноеСредство + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации       = 0;
		СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
		СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользования);

		Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

			СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

		ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

			Если (ВыборкаПоОС.ПризнакНачисленияПоБазовойСтоимости = Истина) Тогда

				СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.СуммаНакопленнойАмортизации;
				СрокИспользованияДляВычисления = Макс(1, СрокИспользованияДляВычисления - ВыборкаПоОС.ФактическийСрокПолезногоИспользования);

				СуммаАмортизации               = СтоимостьДляВычисления / СрокИспользованияДляВычисления *
				                                 ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

			Иначе

				СтоимостьДляВычисления = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияКонечныйОстаток;
				СуммаАмортизации       = СтоимостьДляВычисления * 2 / СрокИспользованияДляВычисления *
				                         ?((ВыборкаПоОС.СпециальныйКоэффициент = 0), 1, ВыборкаПоОС.СпециальныйКоэффициент);

				СуммаАмортизации       = Макс(0, Мин(ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток, СуммаАмортизации));

				//Перешли 20% барьер. Переходим к начислению по базовой стоимости.
				Если (ВыборкаПоОС.СтоимостьКонечныйОстаток-ВыборкаПоОС.АмортизацияКонечныйОстаток-СуммаАмортизации)<= (ВыборкаПоОС.СтоимостьКонечныйОстаток*0.2) тогда

					ПереходКНачислениюПоБазовой = Объект.Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;

					Если Объект.Движения.Найти("НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет") = Неопределено Тогда

						Если ОсновноеСредство =Неопределено и ВыдаватьСообщения = Истина тогда
							ОбщегоНазначения.СообщитьОбОшибке("Налог. расчет амортизации: основное средство " + ВыборкаПоОС.ОсновноеСредство + " должно быть переведено на начисление амортизации по базовой стоимости.");
						КонецЕсли;

					Иначе

						//Определяем срок, прошедший с момента принятия к учету.
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаПоОС.ДатаПринятияКУчету) Тогда
							ФактСрокИспользованияНУ = 0;
						Иначе
							ГодПринятияКУчету = Год(ВыборкаПоОС.ДатаПринятияКУчету);
							ГодТекущий = Год(ДатаРасчета);
							МесяцПринятияКУчету = Месяц(ВыборкаПоОС.ДатаПринятияКУчету);
							МесяцТекущий = Месяц(ДатаРасчета);
							Если ГодТекущий > ГодПринятияКУчету Тогда
								ФактСрокИспользованияНУ = (ГодТекущий-ГодПринятияКУчету-1)*12+(12-МесяцПринятияКУчету) + МесяцТекущий;
							Иначе
								ФактСрокИспользованияНУ = МесяцТекущий - МесяцПринятияКУчету;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаДвижения                                       = ПереходКНачислениюПоБазовой.Добавить();
						СтрокаДвижения.Период                                = ДатаРасчета;
						СтрокаДвижения.Регистратор                           = Объект;
						СтрокаДвижения.ОсновноеСредство                      = ВыборкаПоОС.ОсновноеСредство; 
						СтрокаДвижения.Организация                           = Организация;
						СтрокаДвижения.СуммаНакопленнойАмортизации           = ВыборкаПоОС.АмортизацияКонечныйОстаток + СуммаАмортизации;
						СтрокаДвижения.ПризнакНачисленияПоБазовойСтоимости   = Истина;
						СтрокаДвижения.ФактическийСрокПолезногоИспользования = ФактСрокИспользованияНУ;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Остатки = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;

		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));

		//добавил Трефиленков Дмитрий, РГ-Софт
		//если остается меньше рубля, то списываем все
		ОстатокНаСледующийМесяц = Остатки-СуммаАмортизации;
		Если ОстатокНаСледующийМесяц < 1 Тогда
			СуммаАмортизации = Остатки;	
		КонецЕсли;
	    //конец добавления
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС                                         = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СчетУчетаНУ                                = ВыборкаПоОС.СчетУчета;
		СтрокаАмортизации.СчетАмортизацииНУ                          = ВыборкаПоОС.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто                                = "ОсновныеСредства";
		СтрокаАмортизации.НаправлениеАмортизации                     = ВыборкаПоОС.НаправлениеАмортизации;
		СтрокаАмортизации.Налог                                      = СуммаАмортизации;
		СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
 		//добавил Трефиленков Дмитрий для расчета амортизации в разрезе подразделений (+ параметр функции)
		СтрокаАмортизации.Подразделение          = ВыборкаПоОС.Подразделение;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл
 
// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл2(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	                      |	ВложенныйЗапрос.Местонахождение КАК Местонахождение
	                      |ПОМЕСТИТЬ ОС
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение
	                      |	ИЗ
	                      |		РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	                      |	ГДЕ
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)) КАК ВложенныйЗапрос
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ОсновноеСредство,
	                      |	Местонахождение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОС.ОсновноеСредство КАК ОС,
	                      |	ОС.ОсновноеСредство.Валюта КАК Валюта,
	                      |	ОС.Местонахождение КАК Подразделение,
	                      |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	                      |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетАмортизацииБУ,
	                      |	""ОсновныеСредства"" КАК ИмяСубконто,
	                      |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	                      |	Амортизация.СуммаБУ КАК Бух
	                      |ИЗ
	                      |	ОС КАК ОС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	                      |				&Дата,
	                      |				ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	                      |		ПО ОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	                      |				&Дата,
	                      |				ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	                      |		ПО ОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	                      |			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ
	                      |		ИЗ
	                      |			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	                      |		ГДЕ
	                      |			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	                      |			И РасчетАмортизацииОС.ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК Амортизация
	                      |		ПО ОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	                      |ГДЕ
	                      |	Амортизация.СуммаБУ <> 0");
	Запрос.УстановитьПараметр("Местонахождение", Подразделения);			   
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   

	Возврат Запрос.ВыполнитьПакет()[1].Выгрузить();

КонецФункции // РасчетАмортизацииБухРегл()

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииНалогРегл2(Объект, ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Подразделения = Неопределено) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	                      |	ВложенныйЗапрос.Местонахождение КАК Местонахождение
	                      |ПОМЕСТИТЬ ОС
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение
	                      |	ИЗ
	                      |		РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	                      |	ГДЕ
	                      |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Местонахождение)) КАК ВложенныйЗапрос
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ОсновноеСредство,
	                      |	Местонахождение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОС.ОсновноеСредство КАК ОС,
	                      |	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаНУ,
	                      |	СчетаНалоговогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетАмортизацииНУ,
	                      |	""ОсновныеСредства"" КАК ИмяСубконто,
	                      |	СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	                      |	Амортизация.СуммаНУ КАК Налог,
	                      |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СуммаКВОстаток, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	                      |	ОС.Местонахождение КАК Подразделение
	                      |ИЗ
	                      |	ОС КАК ОС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	                      |				&Дата,
	                      |				ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК СчетаНалоговогоУчетаОССрезПоследних
	                      |		ПО ОС.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(
	                      |				&Дата,
	                      |				ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних
	                      |		ПО ОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	                      |			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	                      |		ИЗ
	                      |			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	                      |		ГДЕ
	                      |			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	                      |			И РасчетАмортизацииОС.ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК Амортизация
	                      |		ПО ОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	                      |				&Дата,
	                      |				ОсновноеСредство В
	                      |					(ВЫБРАТЬ
	                      |						ОС.ОсновноеСредство КАК ОсновноеСредство
	                      |					ИЗ
	                      |						ОС КАК ОС)) КАК СтоимостьАмортизацияОСОстатки
	                      |		ПО ОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	                      |ГДЕ
	                      |	Амортизация.СуммаНУ <> 0");
	Запрос.УстановитьПараметр("Местонахождение", Подразделения);			   
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДатаРасчета));			   

	Возврат Запрос.ВыполнитьПакет()[1].Выгрузить();

КонецФункции // РасчетАмортизацииНалогРегл

//конец изменения

// Расчитывает сумму износа по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать износ.
//  ДатаРасчета                                 - Дата - Дата расчета износаю
//                                                Износ рассчитывается помесячно с начала года по заданную дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Список ОС с суммой рассчитонного износа
//
Функция РасчетИзносаБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина) Экспорт
	
	// Запрос определяет, являются ли объекты, перечисленные в параметре ОсновноеСредство, 
	// подлежащими начислению износа, и вычисляет их остаточную стоимость на дату расчета.
	//  В результате возвращается список только тех из переданных ОС, 
	// на которые действительно должен быть начислен износ на дату расчета.
	//
	//  Если параметр ОсновноеСредство не задан, возвращается список всех ОС,
	// у которых ПорядокПогашенияСтоимости = НачислениеИзноса и есть остаточная стоимость на дату расчета
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("КонецПериода", ДатаРасчета);
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса);
	Запрос.УстановитьПараметр("Состояние",                 Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство",          ОсновноеСредство);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода,
	|																			ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости 
	|																			И Организация = &Организация
	|                                                                           " + ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, 
	|																				  Организация = &Организация
	|																				  " + ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , ,
	|																	 Организация = &Организация
	|																	 " + ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК ВосстановительнаяСтоимость
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета        = ВосстановительнаяСтоимость.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , ,
	|																	 Организация = &Организация
	|																	 " + ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК Износ
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство          = Износ.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = Износ.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) > 0
	|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство НЕ В 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|		 ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		 ГДЕ
	|			СостоянияОСОрганизаций.Состояние      = &Состояние
	|			И
	|			СостоянияОСОрганизаций.ДатаСостояния <= &КонецПериода)
	|" +
	?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ОсновноеСредство), 
	  " И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство В (&ОсновноеСредство)",
	  "");
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МассивОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	// Строим соответствие ОС -> ОстаточнаяСтоимость
	ОстаточнаяСтоимостьОС = Новый Соответствие();
	Для Каждого СтрокаОС из ТаблицаОС Цикл
		ОстаточнаяСтоимостьОС.Вставить(СтрокаОС.ОсновноеСредство, СтрокаОС.ОстаточнаяСтоимость);
	КонецЦикла;
	
	// Формируем запрос, собирающий параметры для расчета износа
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", МассивОС);
	
	Для НомерМесяца = 1 По Месяц(ДатаРасчета) Цикл
		
		НомерМесяцаСтр = СокрЛП(НомерМесяца);
		
		Запрос.УстановитьПараметр("НачалоМесяца" + НомерМесяцаСтр, ДобавитьМесяц(НачалоГода(ДатаРасчета), НомерМесяца - 1));

		Запрос.Текст = Запрос.Текст + ?(НомерМесяца > 1, 
		                                "ОБЪЕДИНИТЬ ВСЕ
		                                |",
		                                "") +
										
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство                КАК ОсновноеСредство,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведения.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
		|	ПервоначальныеСведения.ОсновноеСредство.Код            КАК Код,
		|	ПервоначальныеСведения.ИнвентарныйНомер                КАК ИнвентарныйНомер,
		|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации     КАК СчетНачисленияИзноса,		
		|	ВЫРАЗИТЬ(&НачалоМесяца" + НомерМесяцаСтр + " КАК ДАТА) КАК НачалоМесяца,
		|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
		|	ПараметрыАмортизации.КоэффициентАмортизации            КАК НормаАмортизации
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ",
		|																			Организация = &Организация
		|																		    И ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости
		|																		    И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																				  Организация = &Организация
		|																				  И ОсновноеСредство В (&ОсновноеСредство)) КАК СчетаБухгалтерскогоУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоМесяца" + НомерМесяцаСтр + ", , ,
		|																	 Организация = &Организация
		|																	 И Субконто1 В (&ОсновноеСредство)) КАК ВосстановительнаяСтоимость
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетУчета        = ВосстановительнаяСтоимость.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки (&НачалоМесяца" + НомерМесяцаСтр + ", , ,
		|																	  Организация = &Организация
		|																	  И Субконто1 В (&ОсновноеСредство)) КАК Износ
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство          = Износ.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации = Износ.Счет
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																							   Организация = &Организация
		|																							   И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																									 Организация = &Организация 
		|																									 И ОсновноеСредство В (&ОсновноеСредство)
		|																									 И НачислятьАмортизацию = ИСТИНА) КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|";
		
	КонецЦикла;
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();

	ТаблицаОС.Колонки.Добавить("Износ");
	
	// Расчет износа по объектам ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.НормаАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. расчет износа: для основного средства " + СокрЛП(СтрокаОС.ОсновноеСредствоПредставление) 
				                                                               + " (" + СокрЛП(СтрокаОС.Код) + "), инв. № " 
				                                                               + СокрЛП(СтрокаОС.ИнвентарныйНомер) + " на " 
			                                                                   + Формат(СтрокаОС.НачалоМесяца, "ДФ=dd.MM.yyyy") 
			                                                                   + " не определена годовая норма аморт. отчислений");
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОС.Износ = СтрокаОС.ВосстановительнаяСтоимость * СтрокаОС.НормаАмортизации / 1200;
	
	КонецЦикла;
	
	// Сворачиваем таблицу по ОС и счету начисления износа
	ТаблицаОС.Свернуть("ОсновноеСредство, СчетНачисленияИзноса", "Износ");
	
	// Проверяем, не превышает ли рассчитанный износ остаточную стоимость ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаОС.Износ = Мин(СтрокаОС.Износ, ОстаточнаяСтоимостьОС[СтрокаОС.ОсновноеСредство]);
		
	КонецЦикла;
	
	Возврат ТаблицаОС;
	 
КонецФункции

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАммортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАммортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАммортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА и НИОКР
  
//Получает список НМА, учитываемых в указанной организации
//НМА включается в список если последняя организация, в которой он учитывался соответсвует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Организация - СправочникСсылка.Организация
//	НУ 			- булево - признак необходимости определения отражения объекта в НУ, по умолчанию - ложь 
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни обин объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрганизации(Период, Организация, НУ = ложь, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период,"+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|" +?(НУ,"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
		|  ","") +"
		|ГДЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Нет подходящих объектов
		Возврат Новый массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

//Функция получает таблицу значений с указанием списка ОС или НМА и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, ТипУчета, НомерЖурнала = Неопределено, ТекстПроводки = Неопределено) Экспорт

	ДатаРасчета = ДокОбъект.Дата;

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	//ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	//ТабЗатрат.Колонки.Добавить("СчетЗатратНУ");
	//ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	//ТабЗатрат.Колонки.Добавить("СчетАмортизацииНУ");
	//ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте на 01 и 02 счете
	//ТабЗатрат.Колонки.Добавить("Валюта");
	ТабЗатрат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	//конец добавления
	//ТабЗатрат.Колонки.Добавить("Субконто1");
	//ТабЗатрат.Колонки.Добавить("Субконто2");
	//ТабЗатрат.Колонки.Добавить("Субконто3");
	//ТабЗатрат.Колонки.Добавить("СубконтоНУ1");
	//ТабЗатрат.Колонки.Добавить("СубконтоНУ2");
	//ТабЗатрат.Колонки.Добавить("СубконтоНУ3");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.Сумма=0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " не указаны способы отражения расходов по амортизации",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения затрат по амортизации нет записей",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта " + СтрокаТЗ.ОбъектУчета + " в способах отражения расходов по амортизации не проставлены коэффициенты",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации есть нулевые коэффициенты",,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				НоваяСтрока = ТабЗатрат.Добавить();
				//НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
				//НоваяСтрока.СчетЗатратНУ             = СтрокаНапр.СчетЗатратНУ;
				НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
				//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте на 01 и 02 счете
				//Если ТипУчета = "Бух" Тогда
				//	НоваяСтрока.Валюта               = СтрокаТЗ.Валюта;
				//КонецЕсли;
				НоваяСтрока.Подразделение            = СтрокаТЗ.Подразделение;
			    //конец добавления
				//НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
				//НоваяСтрока.СчетАмортизацииНУ        = СтрокаТЗ.СчетАмортизацииНУ;
				//НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
				//НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
				//НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
				//НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;
				//НоваяСтрока.СубконтоНУ1              = СтрокаНапр.СубконтоНУ1;
				//НоваяСтрока.СубконтоНУ2              = СтрокаНапр.СубконтоНУ2;
				//НоваяСтрока.СубконтоНУ3              = СтрокаНапр.СубконтоНУ3;

				НоваяСтрока.Сумма                    = МассивСумм[СтрокаНапр.НомерСтроки - 1];
		КонецЦикла;

	КонецЦикла;

	//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте на 01 и 02 счете
	//Доллар = Справочники.Валюты.НайтиПоНаименованию("USD");
	//КурсДоллара = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоНаименованию("USD"), ДокОбъект.Дата).Курс;
	//конец добавления
	
	//Если ТипУчета = "Бух" Тогда

	//	ДопПараметры = Новый Структура;
	//	
	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Хозрасчетный;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		//добавил Трефиленков Дмитрий, РГ-Софт для учета ОС в валюте на 01 и 02 счете
	//		Если СтрокаЗатрат.Валюта = Доллар Тогда 
	//			Проводка.ВалютнаяСуммаКт= Проводка.Сумма*КурсДоллара;
	//		Иначе
	//			Проводка.ВалютнаяСуммаКт= Проводка.Сумма;
	//		КонецЕсли;
	// 		//конец добавления
	//		
	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, 2, СтрокаЗатрат.Подразделение);

	//	КонецЦикла;

	//КонецЕсли;

	//Если ТипУчета = "Нал" Тогда

	//	ДопПараметры = Новый Структура;

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, СтрокаЗатрат.СубконтоНУ1);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, СтрокаЗатрат.СубконтоНУ2);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, СтрокаЗатрат.СубконтоНУ3);

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, 2, СтрокаЗатрат.Подразделение);

	//	КонецЦикла;

	//КонецЕсли;

	//Если ТипУчета = "ПР" Тогда

	//	ДопПараметры = Новый Структура;

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, СтрокаЗатрат.СубконтоНУ1);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, СтрокаЗатрат.СубконтоНУ2);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, СтрокаЗатрат.СубконтоНУ3);
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;

	//	КонецЦикла;

	//КонецЕсли;
	//
	//Если ТипУчета = "ВР" Тогда

	//	ДопПараметры = Новый Структура;

	//	//формирование проводок
	//	Проводки = ДокОбъект.Движения.Налоговый;

	//	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаЗатрат.Сумма) тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Проводка = Проводки.Добавить();

	//		Проводка.Период       = ДатаРасчета;
	//		Проводка.Содержание   = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстПроводки), "Начислена амортизация", ТекстПроводки);
	//		Проводка.НомерЖурнала = НомерЖурнала;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.Сумма        = СтрокаЗатрат.Сумма;

	//		Проводка.СчетДт = СтрокаЗатрат.СчетЗатратНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 1, СтрокаЗатрат.СубконтоНУ1);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 2, СтрокаЗатрат.СубконтоНУ2);
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетЗатратНУ, Проводка.СубконтоДт, 3, СтрокаЗатрат.СубконтоНУ3);
	//		мВидУчета  = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//		ОтразитьНеПринимаемыеРасходы = Ложь;
	//		НалоговыйУчет.ОпределитьВидУчетаПоПБУ18(СтрокаЗатрат.СубконтоНУ1, мВидУчета, ОтразитьНеПринимаемыеРасходы);
	//		Если Не ОтразитьНеПринимаемыеРасходы Тогда
	//			НалоговыйУчет.ОпределитьВидУчетаПоПБУ18(СтрокаЗатрат.СубконтоНУ2, мВидУчета, ОтразитьНеПринимаемыеРасходы);
	//			Если Не ОтразитьНеПринимаемыеРасходы Тогда
	//				НалоговыйУчет.ОпределитьВидУчетаПоПБУ18(СтрокаЗатрат.СубконтоНУ3, мВидУчета, ОтразитьНеПринимаемыеРасходы);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Проводка.ВидУчетаДт = мВидУчета;

	//		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизацииНУ;
	//		ОбщегоНазначения.УстановитьСубконто(СтрокаЗатрат.СчетАмортизацииНУ, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
	//		Проводка.ВидУчетаКт = мВидУчета;

	//	КонецЦикла;

	//КонецЕсли;
	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

Функция ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Период) Экспорт
	
	ТаблицаОС = Новый ТаблицаЗначений;
	ТаблицаОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для каждого Значение Из СписокОС Цикл
	    НоваяСтрока = ТаблицаОС.Добавить();
	КонецЦикла; 
	ТаблицаОС.ЗагрузитьКолонку(СписокОС, "ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("СписокОС",          СписокОС);
	Запрос.УстановитьПараметр("ТаблицаОС",         ТаблицаОС);
	Запрос.УстановитьПараметр("НачалоПериода",     Период);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ?(ТипЗнч(Период) = Тип("МоментВремени"), 
	                                               Период.Дата, 
												   Период));
	Запрос.УстановитьПараметр("СубконтоОС",        ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("СнятоСУчета",       Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ВидУчетаНУ",        Перечисления.ВидыУчетаПоПБУ18.НУ);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
	//	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,		
	//	|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	//	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
	//	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокДт, 0) КАК ИзносБУ,		
	//	|	ОС_НУ.ОсновноеСредство КАК ОС_НУ,
	//	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,				
	//	|	ЕСТЬNULL(СтоимостьОС_НУ.СуммаОстатокДт, 0) КАК СтоимостьНУ,
	//	|	ЕСТЬNULL(АмортизацияОС_НУ.СуммаОстатокКт, 0) КАК АмортизацияНУ,
	//	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	//	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	//	|ИЗ
	//	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ОС_БУ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация И Субконто1 В (&СписокОС)) КАК СтоимостьОС_БУ
	//	|		ПО ОС_БУ.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И ОС_БУ.СчетУчета = СтоимостьОС_БУ.Счет
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация И Субконто1 В (&СписокОС)) КАК АмортизацияОС_БУ
	//	|		ПО ОС_БУ.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И ОС_БУ.СчетНачисленияАмортизации = АмортизацияОС_БУ.Счет
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ОС_НУ
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация и ВидУчета=&ВидУчетаНУ И Субконто1 В (&СписокОС)) КАК СтоимостьОС_НУ
	//	|			ПО ОС_НУ.ОсновноеСредство = СтоимостьОС_НУ.Субконто1 И ОС_НУ.СчетУчета = СтоимостьОС_НУ.Счет
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, , &СубконтоОС, Организация = &Организация и ВидУчета=&ВидУчетаНУ И Субконто1 В (&СписокОС)) КАК АмортизацияОС_НУ
	//	|			ПО ОС_НУ.ОсновноеСредство = АмортизацияОС_НУ.Субконто1 И ОС_НУ.СчетНачисленияАмортизации = АмортизацияОС_НУ.Счет
	//	|		ПО ОС_НУ.ОсновноеСредство = ОС_БУ.ОсновноеСредство
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	//	|		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	//	|		ПО ОС_НУ.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	//	|		ИЗ
	//	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	//	|		
	//	|		ГДЕ
	//	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаНачалаПериода И
	//	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	//	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(&СписокОС) И
	//	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	//	|		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство";
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	&ТаблицаОС КАК СписокОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокОС.ОсновноеСредство КАК ОС_БУ,
		|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
		|	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0) КАК АмортизацияБУ,
		|	0 КАК ИзносБУ,
		|	СписокОС.ОсновноеСредство КАК ОС_НУ,
		|	ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток, 0) КАК АмортизацияНУ,
		|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ,
		|	ВЫБОР
		|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СнятоСУчета
		|ИЗ
		|	СписокОС КАК СписокОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
		|		ГДЕ
		|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаНачалаПериода
		|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
		|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В(&СписокОС)
		|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
		|		ПО СписокОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаНачалаПериода, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
		|		ПО СписокОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(&НачалоПериода, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияСрезПоследних
		|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство";

	ТЗ = Запрос.Выполнить().Выгрузить();

	Возврат ТЗ;

КонецФункции

// Функция расчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьНУ
// - СтоимостьНУХоз
// - СтоимостьПР
// - СтоимостьПРХоз
// - СтоимостьВР
// - СтоимостьВРХоз
//
Функция РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВБухгалтерскомУчете,
                                               ОтражатьВНалоговомУчете,
                                               СчетУчетаБУВнеоборотногоАктива,
                                               СчетУчетаНУВнеоборотногоАктива,
                                               ОбъектСтроительства,
                                               Организация,
                                               Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьБУХоз", 0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьНУХоз", 0);
	СтруктураСтоимость.Вставить("СтоимостьПР",    0);
	СтруктураСтоимость.Вставить("СтоимостьПРХоз", 0);
	СтруктураСтоимость.Вставить("СтоимостьВР",    0);
	СтруктураСтоимость.Вставить("СтоимостьВРХоз", 0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаБУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаНУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("Хоз",                 Перечисления.СпособыСтроительства.Хозспособ);
	Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
	Запрос.УстановитьПараметр("Период",              Период);
	Запрос.УстановитьПараметр("ВидУчетаНУ",          Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",          Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР",          Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ,
	|	НалоговыйОстаткиПР.СуммаОстатокДт КАК СтоимостьПР,
	|	НалоговыйОстаткиВР.СуммаОстатокДт КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 = &Хоз
	|		ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБУХоз,
	|	ВЫБОР 
	|		КОГДА НалоговыйОстаткиНУ.Субконто2 = &Хоз
	|		ТОГДА НалоговыйОстаткиНУ.СуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьНУХоз,
	|	ВЫБОР 
	|		КОГДА НалоговыйОстаткиПР.Субконто2 = &Хоз
	|		ТОГДА НалоговыйОстаткиПР.СуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПРХоз,
	|	ВЫБОР 
	|		КОГДА НалоговыйОстаткиВР.Субконто2 = &Хоз
	|		ТОГДА НалоговыйОстаткиВР.СуммаОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьВРХоз
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК ХозрасчетныйОстатки	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаНУ) КАК НалоговыйОстаткиНУ
	|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиНУ.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаПР) КАК НалоговыйОстаткиПР
	|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиПР.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиПР.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация и ВидУчета=&ВидУчетаВР) КАК НалоговыйОстаткиВР
	|		ПО ХозрасчетныйОстатки.Субконто1 = НалоговыйОстаткиВР.Субконто1 и ХозрасчетныйОстатки.Субконто2 = НалоговыйОстаткиВР.Субконто2";
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ"   , ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьБУХоз", ТЗ.Итог("СтоимостьБУХоз"));
		СтруктураСтоимость.Вставить("СтоимостьНУ"   , ТЗ.Итог("СтоимостьНУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУХоз", ТЗ.Итог("СтоимостьНУХоз"));
		СтруктураСтоимость.Вставить("СтоимостьПР"   , ТЗ.Итог("СтоимостьПР"));
		СтруктураСтоимость.Вставить("СтоимостьПРХоз", ТЗ.Итог("СтоимостьПРХоз"));
		СтруктураСтоимость.Вставить("СтоимостьВР"   , ТЗ.Итог("СтоимостьВР"));
		СтруктураСтоимость.Вставить("СтоимостьВРХоз", ТЗ.Итог("СтоимостьВРХоз"));

	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", 	Состояние);
	Запрос.УстановитьПараметр("ОС",             ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизаций.Регистратор КАК Документ,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизаций.Организация = &Организация И
		|	СостоянияОСОрганизаций.Состояние = &СостояниеОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Регистратор.Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Функция ПолучитьПоследнееСостояниеОС(Период,ОсновноеСредство, Организация) Экспорт

	ДанныеОСостоянии = Новый Структура("СостояниеОС,Дата,Документ,Событие,НазваниеДокумента,НомерДокумента");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ОС",          ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	СостоянияОСОрганизаций.Регистратор КАК Документ,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Состояние КАК СостояниеОС,
	|	СобытияОСОрганизаций.Событие,
	|	СобытияОСОрганизаций.НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СостоянияОСОрганизаций.Регистратор = СобытияОСОрганизаций.Регистратор И СостоянияОСОрганизаций.ДатаСостояния = СобытияОСОрганизаций.Период И СостоянияОСОрганизаций.Организация = СобытияОСОрганизаций.Организация И СостоянияОСОрганизаций.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
	|
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
	|	СостоянияОСОрганизаций.Организация = &Организация И
	|	СостоянияОСОрганизаций.ДатаСостояния <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДоков = РезультатЗапроса.Выгрузить();

		ПоследняяЗаписьИндекс = ВыборкаДоков.Количество() - 1;
		
		ДанныеОСостоянии.Вставить("СостояниеОС"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].СостояниеОС);
		ДанныеОСостоянии.Вставить("Дата"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Дата);
		ДанныеОСостоянии.Вставить("Документ"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].Документ);
		ДанныеОСостоянии.Вставить("Событие"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Событие);
		ДанныеОСостоянии.Вставить("НазваниеДокумента" , ВыборкаДоков[ПоследняяЗаписьИндекс].НазваниеДокумента);
		ДанныеОСостоянии.Вставить("НомерДокумента"	  , ВыборкаДоков[ПоследняяЗаписьИндекс].НомерДокумента);

	КонецЕсли;
		
	Возврат ДанныеОСостоянии;
КонецФункции 

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

// Процедура выполняет стандартные действия при начале выбора состояния ОС в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытийОС(ЭлементФормы, ВидыСобытий=Неопределено, СтандартнаяОбработка, ЗаблокироватьПолученныеВидыСобытий = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий<>Неопределено Тогда

		Если ЗаблокироватьПолученныеВидыСобытий тогда
			// Удалим из выбора "неправильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеРавно;
			КонецЕсли;
		Иначе
			// Оставим в выборе только "правильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
        КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Процедура выполняет стандартные действия при начале выбора способов отражения расходов по амортизации формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация=Неопределено, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если Организация<>Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Поцедура проверяет дублирование состояний ОС. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийОС(Организация, ТаблицаЗаписей,Отказ,Заголовок) Экспорт

	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	ОС_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.СостоянияОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СостоянияОСОрганизаций.ОсновноеСредство,
			|	СостоянияОСОрганизаций.ДатаСостояния,
			|	СостоянияОСОрганизаций.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
			|
			|ГДЕ
			|	СостоянияОСОрганизаций.Организация = &Организация И
			|	СостоянияОСОрганизаций.Состояние = &Состояние И
			|	СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",ОС_ПоСостояниям[А-1]);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для основного средства <"+Строка(Выборка.ОсновноеСредство)+"> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.ДатаСостояния,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА
 
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО ОС

// Процедура проверяет наличие одних и тех же основных средств в табличной
// части "Основные средства" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ОсновноеСредство", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаТаблицыДублей.ОсновноеСредство));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части ""Основные средства"" указано одно и то же основное средство.";
								   
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиОС()

// Процедура проверяет наличие одинаковых инвентарных номеров основных средств 
// в табличной части "Основные средства" и выдает сообщение об ошибке при 
// проведении.
//
Процедура ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Удаляем лишние пробелы из полей, в которых хранятся инвентарные номера.
	Для Каждого СтрокаТаблицыОС Из ТаблицаПоОС Цикл
		СтрокаТаблицыОС.ИнвентарныйНомер = СокрЛП(СтрокаТаблицыОС.ИнвентарныйНомер);
	КонецЦикла;
	
	// Проверка повторения инвентарных номеров.
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ИнвентарныйНомер", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ИнвентарныйНомер", СтрокаТаблицыДублей.ИнвентарныйНомер));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части ""Основные средства"" указан одинаковый инвентарный номер.";
			
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиИнвентарныхНомеровОС()

//Изменил Трефиленков Дмитрий, РГ-Софт
Функция ПолучитьПодразделениеНачисленияАмортизации_(ИсходнаяЛокация) Экспорт
	
	Локация = ИсходнаяЛокация;
	
	Пока Истина Цикл
		Если Локация.ЭтоГруппа И Локация.НачислениеАмортизацииОС Тогда
			Возврат Локация;
		ИначеЕсли Не Локация.Родитель = Неопределено И НЕ Локация.Родитель.Пустая() Тогда
			Локация = Локация.Родитель;
		Иначе
			Сообщить("Не задано подразделение, по которому начисляется амортизация для локации "+ИсходнаяЛокация);		
			Возврат ИсходнаяЛокация;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПолучитьНалоговуюРегистрацию(Локация) Экспорт
	
	Возврат ?(Локация.ЭтоГруппа, Локация, Локация.Родитель);
	
КонецФункции

//конец изменения

////////////////////////////////////////////////////////////////////////////////
// ДОБАВЛЕНО КОМПАНИЕЙ РГ-СОФТ

//Добавил РГ-Софт - Иванов Антон - 2008-10-23
//Для новой версии модуля Регламентированная отчетность
// Определяет коэффициент распределения выручки по видам деятельности 
// (ЕНВД / не ЕНВД) за период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация;
//  НачДата     – Дата – начало периода расчета;
//	КонДата     - Дата - окончание периода расчета.
//
// Возвращаемое значение:
//  Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияВыручкиПоВидамДеятельности(Организация, Знач НачДата, Знач КонДата) Экспорт
	
	// Массив счетов, по которым рассчитывается выручка организации.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачДата",          НачДата);
	Запрос.УстановитьПараметр("КонДата",          КонДата);
	//Изменил - РГ-Софт - Иванов Антон - 2008-10-23
	//Исправил вызов общего модуля ОбщегоНазначения
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",  ОбщегоНазначения.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("МассивСчетов",     МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД)
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД))
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаНеЕНВД,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности, не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		
		Коэффициент = 1;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			
			Коэффициент = 1;
			
		ИначеЕсли ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
			
			Коэффициент = 0;
			
		Иначе
			
			Коэффициент = ВыручкаНеЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияВыручкиПоВидамДеятельности()

//Добавил РГ-Софт - Иванов Антон - 2008-10-23
//Для новой версии модуля Регламентированная отчетность
// Возвращает параметры состояния ОС 
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Состояние			- Перечисление.ВидыСостоянийОС
//  УпрУчет				- Булево, Учет, 
//  Организация		    - СправочникСсылка.Организации
// Возвращаемое значение структура с полями:
//	Дата,НомерДок,ИмяДок,Сумма,Регистратор
//
Функция ПолучитьАтрибутыСостоянияОС(ОС, Состояние, УпрУчет = Истина, Организация =  Неопределено) Экспорт 
	
	РегистрСобытий 	 = "СобытияОС";
	РегистрСостояний = "СостоянияОС";
	СуммаЗатрат 	 = "СуммаЗатрат";
	
	Если НЕ УпрУчет тогда
		
		РегистрСобытий 	 = РегистрСобытий   + "Организаций";
		РегистрСостояний = РегистрСостояний + "Организаций";
		СуммаЗатрат 	 = СуммаЗатрат		+ "БУ";
		
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+РегистрСостояний+".Регистратор.Ссылка КАК Регистратор,
	|	"+РегистрСостояний+".ОсновноеСредство,
	|	"+РегистрСостояний+".Состояние,
	|	ЕСТЬNULL("+РегистрСостояний+".ДатаСостояния, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСостояния,
	|	"+РегистрСобытий+".Событие,
	|	"+РегистрСобытий+".НомерДокумента,
	|	"+РегистрСобытий+".НазваниеДокумента,
	|	ЕСТЬNULL("+РегистрСобытий+"."+СуммаЗатрат+", 0) КАК Сумма
	|ИЗ
	|	РегистрСведений."+РегистрСостояний+" КАК "+РегистрСостояний+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрСобытий+" КАК "+РегистрСобытий+"
	|		ПО "+РегистрСостояний+".Регистратор = "+РегистрСобытий+".Регистратор 
	|		И "+РегистрСостояний+".ОсновноеСредство = "+РегистрСобытий+".ОсновноеСредство 
	|ГДЕ
	|		"+РегистрСостояний+".ОсновноеСредство = &ОсновноеСредство 
	|		И "+РегистрСостояний+".Состояние = &Состояние 
	|		И "+РегистрСобытий+".Событие.ВидСобытияОС в (&ВидСобытияОС)";
	
	ЗапросСостоянияОС = Новый Запрос;
	ЗапросСостоянияОС.УстановитьПараметр("Состояние",Состояние);
	СоответствиеСобытийСостояниям = ПолучитьСоответствиеСобытийСостояниямОС();
	ВидСобытия = Новый Массив;
	Событие    = СоответствиеСобытийСостояниям.Получить(Состояние);
	ВидСобытия.Добавить(Событие);
	Если Событие = Перечисления.ВидыСобытийОС.Списание тогда
		 ВидСобытия.Добавить(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	ЗапросСостоянияОС.УстановитьПараметр("ВидСобытияОС",ВидСобытия);
	ЗапросСостоянияОС.УстановитьПараметр("ОсновноеСредство",ОС);
	Если Не УпрУчет тогда
		ЗапросСостоянияОС.УстановитьПараметр("Организация",Организация);
		ТекстЗапроса= ТекстЗапроса+"
		|   И  "+РегистрСобытий+".Организация	= &Организация
		|   И  "+РегистрСостояний+".Организация = &Организация";
	КонецЕсли;
	
	ЗапросСостоянияОС.Текст	= ТекстЗапроса;
		
	ВыборкаСостояний = ЗапросСостоянияОС.Выполнить().Выбрать();
	СтруктураСостояния = Новый Структура;
	
	Если ВыборкаСостояний.Следующий() тогда
		
		СтруктураСостояния.Вставить( "Дата"        , ВыборкаСостояний.ДатаСостояния);
		СтруктураСостояния.Вставить( "ИмяДок"      , ВыборкаСостояний.НазваниеДокумента);
		СтруктураСостояния.Вставить( "НомерДок"    , ВыборкаСостояний.НомерДокумента);
		СтруктураСостояния.Вставить( "Сумма"	   , ВыборкаСостояний.Сумма);
		СтруктураСостояния.Вставить( "Регистратор" , ВыборкаСостояний.Регистратор);
		
	Иначе	                                              
		
		СтруктураСостояния.Вставить( "Дата"		   , '00010101000000');
		СтруктураСостояния.Вставить( "ИмяДок"	   , "");
		СтруктураСостояния.Вставить( "НомерДок"	   , "");
		СтруктураСостояния.Вставить( "Сумма"	   , 0);
		СтруктураСостояния.Вставить( "Регистратор" , Неопределено);
		
	КонецЕсли;	
	
	Возврат СтруктураСостояния;
	
КонецФункции

//Добавил РГ-Софт - Иванов Антон - 2008-10-23
//Для новой версии модуля Регламентированная отчетность
// Функция возвращает соответствие значений перечисления Виды событий ОС
// значениям перечисления СостоянияОС
Функция ПолучитьСоответствиеСобытийСостояниямОС()
	
	СоответствиеСобытийСостояниям = Новый Соответствие;
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ПринятоКУчету,Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.СнятоСУчета,Перечисления.ВидыСобытийОС.Списание);
	
	Возврат СоответствиеСобытийСостояниям;
	
КонецФункции

//Добавил РГ-Софт - Иванов Антон - 2008-10-23
//Для новой версии модуля Регламентированная отчетность
Функция ПредставлениеНалоговойЛьготыПоНалогуНаИмущество(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.ОсвобождениеОтНалогообложения Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения + ")";
		КонецЕсли;
		
	КонецЕсли;
		
	Если Ссылка.СнижениеНалоговойСтавки Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	ТекстПроУменьшение = "";
	
	Если Ссылка.УменьшениеСуммыНалогаВПроцентах Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
							 + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшения + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоНалогуНаИмущество()

//Добавил РГ-Софт - Иванов Антон - 2008-10-24
//Для новой версии модуля Регламентированная отчетность
Функция ПолучитьФормуВыбораЛьготыПоНалогуНаИмущество(ВыбранноеЗначение) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений();
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетАвансыИмущество.ПолучитьМакет("Списки");
	
	ТекущаяОбласть = Макет.Области.Найти("Льготы");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаЛьготы");
	Форма.Заголовок = Форма.Заголовок + " по налогу на имущество";
	Форма.СписокЛьгот = КодыЛьгот;
	
	ТекущаяСтрока = КодыЛьгот.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокЛьгот.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораЛьготыПоТранспортномуНалогу()

//Добавил РГ-Софт - Иванов Антон - 2008-11-07
//Для новой версии модуля Регламентированная отчетность
Функция ПолучитьСписокКодовЕдиницИзмеренияТС() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", "л. с");
	Список.Добавить("999", "Кгс");
	Список.Добавить("181", "БРТ");
	Список.Добавить("796", "шт");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКодовЕдиницИзмеренияТС()

//Добавил РГ-Софт - Иванов Антон - 2008-11-07
//Для новой версии модуля Регламентированная отчетность
Функция ПредставлениеНалоговойЛьготыПоТранспортномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = СокрЛП(Ссылка.НалоговаяЛьгота);
						 
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ", льготная ставка " + Ссылка.ЛьготнаяСтавка + " руб.";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (в процентах)", " на ") + Ссылка.ПроцентУменьшения + " %";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (на сумму)", " на ") + Ссылка.СуммаУменьшения + " руб.";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготы) 
	   И НЕ Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготы + ")";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоТранспортномуНалогу()

Функция ПолучитьРегистрациюВИФНСПоОрганизации(Организация) Экспорт
	
	НалоговыйОрган = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.ПометкаУдаления = ЛОЖЬ
		|	И РегистрацииВНалоговомОргане.Владелец = &Организация
		|	И РегистрацииВНалоговомОргане.Код = РегистрацииВНалоговомОргане.Владелец.КодНалоговогоОргана";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НалоговыйОрган = Выборка.Ссылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НалоговыйОрган;
	
КонецФункции // ПолучитьРегистрациюВИФНСПоОрганизации()

Функция ПолучитьФормуВыбораКодаТранспортногоСредства(ВыбранноеЗначение) Экспорт
	
	КодыВидовТС = ПолучитьКодыВидовТС();
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаВидаТранспортногоСредства");
	Форма.СписокКодов = КодыВидовТС;
	
	ТекущаяСтрока = КодыВидовТС.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокКодов.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораКодаТранспортногоСредства()

Функция ПолучитьКодыВидовТС() Экспорт

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("Списки2007Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("ВидыТранспортныхСредств");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции // ПолучитьКодыВидовТС() 

Функция ПредставлениеНалоговойЛьготыПоЗемельномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения по ст. 395 НК РФ";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395 + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы Тогда
		
		Если Ссылка.УменьшениеНалоговойБазыПоСтатье391 Тогда
		
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма 10 000 руб., установленная ст. 391 НК РФ";
			
			Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391) Тогда
				ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391 + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ссылка.УменьшениеНалоговойБазыНаСумму Тогда
			
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма " + Ссылка.НеОблагаемаяНалогомСумма + " руб., установленная местным нормативным актом";
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Освобождение от налогообложения, установленное местным нормативным актом";
		
	КонецЕсли;
		
		
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Доля не облагаемой налогом площади " + Ссылка.ДоляНеОблагаемойНалогомПлощадиЧислитель + "/" + Ссылка.ДоляНеОблагаемойНалогомПлощадиЗнаменатель;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ПроцентУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшенияСуммыНалога + "%";
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Ссылка.СуммаУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога в размере " + Ссылка.СуммаУменьшенияСуммыНалога + " руб.";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.СниженнаяНалоговаяСтавка) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоЗемельномуНалогу()
Процедура ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС, ЭтоНовыеОСИзРазукрупненияИлиКомплектации = Ложь) Экспорт
	Перем ПодразделениеПредыд;
	
	//добавил Трефиленков Дмитрий, РГ-Софт, вопрос SLI-0002274
	Если НЕ(ТипЗнч(Источник) = Тип("ДокументОбъект.ИзменениеПараметровНачисленияАмортизацииОС") 
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ИзменениеСостоянияОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ИзменениеСпециальногоКоэффициентаОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПринятиеКУчетуОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ВводНачальныхОстатковОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаЗаписейРегистров")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РазукрупнениеОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПодготовкаКПередачеОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеОС")) Тогда
		ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(Источник, Отказ);
	КонецЕсли;
	//конец добавления
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПроведения", Источник.Метаданные())  Тогда
		ДатаПроведения = ?(Источник.ДатаПроведения = Дата(1,1,1),Источник.Дата,Источник.ДатаПроведения);
	Иначе		
		ДатаПроведения = Источник.Дата;
	КонецЕсли;
	
	//Если проводим документ "Передача ОС", который введен на основании подготовки к передаче ОС,
	//то никаких цепочек не будет
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.ПередачаОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ПередачаОС")) 
		И НЕ Источник.Ссылка.ДокПодготовкаКПередачеОС = Документы.ПодготовкаКПередачеОС.ПустаяСсылка() Тогда
        Возврат;
	КонецЕсли;
		
	//Если перепроводим первый документ в цепочке, то очистим записи регистра РасчетАмортизацииОС,
	//чтобы не осталось более ранних неправильных записей
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПринятиеКУчетуОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ВводНачальныхОстатковОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") 
		ИЛИ ЭтоНовыеОСИзРазукрупненияИлиКомплектации Тогда
		
		Набор = РегистрыСведений.РасчетАмортизацииОС.СоздатьНаборЗаписей();
		Для Каждого ОС Из СписокОС Цикл
			Набор.Отбор.ОсновноеСредство.Значение = ОС;
			Набор.Отбор.ОсновноеСредство.Использование = Истина;
			Набор.Записать();                                                        
		КонецЦикла;
	КонецЕсли;
	
	//Найдем последовательность документов для каждого ОС из списка
	ТаблицаДокумент_ОС = Новый ТаблицаЗначений;
	ТаблицаДокумент_ОС.Колонки.Добавить("ОС", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДокумент_ОС.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	ТаблицаДокумент_ОС.Колонки.Добавить("Дата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаДокумент_ОС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для каждого ОС Из СписокОС Цикл
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДокументыУчетаОС.Ссылка КАК Документ,
		|	ДокументыУчетаОС.Ссылка.ПодразделениеОрганизации КАК Подразделение,
		|	&ОС,
		|	ДокументыУчетаОС.Ссылка.Дата КАК Период
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	КритерийОтбора.ДокументыУчетаОС(&ОС) КАК ДокументыУчетаОС
		|ГДЕ
		|	(НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИнвентаризацияОС)
		|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСостоянияОС)
		//|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеПараметровНачисленияАмортизацииОС)
		|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСпециальногоКоэффициентаОС)
		|	И ДокументыУчетаОС.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА ДокументыУчетаОС.Ссылка.ДатаПроведения = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ДокументыУчетаОС.Ссылка.ДатаПроведения ЕСТЬ NULL 
		|				ТОГДА ДокументыУчетаОС.Ссылка.Дата
		|			ИНАЧЕ ДокументыУчетаОС.Ссылка.ДатаПроведения
		|		КОНЕЦ >= &Дата
		|	И ВЫБОР
		|			КОГДА ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ПередачаОС
		|				ТОГДА ДокументыУчетаОС.Ссылка.ДокПодготовкаКПередачеОС = ЗНАЧЕНИЕ(Документ.ПодготовкаКПередачеОС.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтоимостьАмортизацияОСОбороты.Регистратор,
		|	СтоимостьАмортизацияОСОбороты.Подразделение,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		|	СтоимостьАмортизацияОСОбороты.Период
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&Дата, , Регистратор, ОсновноеСредство = &ОС) КАК СтоимостьАмортизацияОСОбороты
		|ГДЕ
		|	(СтоимостьАмортизацияОСОбороты.Регистратор ССЫЛКА Документ.НачислениеАмортизации
		|			ИЛИ СтоимостьАмортизацияОСОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.Документ,
		|	ВТ.Подразделение,
		|	ВТ.Период КАК Период
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("ОС", ОС);
		Запрос.УстановитьПараметр("Дата", ДатаПроведения);
		//Составим список подразделений, по которым могла бы быть амортизация по нашему ОС
		МассивПодразделений = Новый Массив;
		СписокДоков = Запрос.Выполнить().Выгрузить();
		
		//Возьмем очень большую дату для ограничения документов начисления амортизации справа, чтобы вошли все
		ДатаСправа = ТекущаяДата() + 100*365*24*60*60;
		Если Константы.ПерепроводитьЦепочкуДокументовОС.Получить() Тогда
			//Найдем дату второго документа из полученных, чтобы начисления амортизации 
			//брать только до конца месяца (включительно), к которому относится второй документ в цепочке,
			//остальные начисления амортизации не рассматриваем, так как они учтутся при проведении второго документа в цепочке.
			//Отбросим также все документы из полученных после второго 
			СписокДоковКопия = СписокДоков.Скопировать();
			СписокДоков.Очистить();
			Сч = 0;
			Для каждого Строка Из СписокДоковКопия Цикл
			    Сч = Сч + 1;
				Если Сч = 3 Тогда
					Прервать;
				КонецЕсли; 
			    НоваяСтрока = СписокДоков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				Если Сч = 2 Тогда
					ДатаСправа = НачалоМесяца(ДобавитьМесяц(Строка.Период,1));
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Для Каждого Строка Из СписокДоков Цикл
			Док = Строка.Документ;
			Если ТипЗнч(Док) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.МодернизацияОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.ПодготовкаКПередачеОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.ПередачаОС") ИЛИ
				//ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.СписаниеОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.НачислениеАмортизации") Тогда
				
				МассивПодразделений.Добавить(Док.ПодразделениеОрганизации);
				
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеОС") Тогда
				
				МассивПодразделений.Добавить(Док.ПодразделениеОрганизации);
				МассивПодразделений.Добавить(Док.Местонахождение);
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
				МассивПодразделений.Добавить(Строка.Подразделение);
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.РазукрупнениеОС") ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.КомплектацияОС") 
				ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС") Тогда
				
				ЗапросМестонахождение = Новый Запрос;
				ЗапросМестонахождение.Текст = "ВЫБРАТЬ
				|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
				|ИЗ
				|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
				
				ЗапросМестонахождение.УстановитьПараметр("Дата", ДатаПроведения);
				ЗапросМестонахождение.УстановитьПараметр("ОсновноеСредство", Док.ОС[0].ОсновноеСредство);
				
				Результат = ЗапросМестонахождение.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					МассивПодразделений.Добавить(Выборка.Местонахождение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		УправлениеЗапасамиПартионныйУчет.УдалитьПовторяющиесяЭлементы(МассивПодразделений);		
		
		Копия = МассивПодразделений;
		//добавим все подразделения выше по иерархии, а то мало ли как заведены документы начисления амортизации
		Для Каждого Подразделение Из Копия Цикл
			Пока Не Подразделение.Родитель.Пустая() Цикл 
				МассивПодразделений.Добавить(Подразделение.Родитель);
				Подразделение = Подразделение.Родитель;
			КонецЦикла;
		КонецЦикла;
		УправлениеЗапасамиПартионныйУчет.УдалитьПовторяющиесяЭлементы(МассивПодразделений);		
		
		//Теперь найдем все проведенные начисления амортизации по нашим подразделениям и добавим их в список доков
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
		Запрос.УстановитьПараметр("ДатаСправа", ДатаСправа);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачислениеАмортизации.Ссылка КАК Документ,
		               |	&ОС,
		               |	КОНЕЦПЕРИОДА(НачислениеАмортизации.Дата, МЕСЯЦ) КАК Период,
		               |	НачислениеАмортизации.ПодразделениеОрганизации КАК Подразделение
		               |ПОМЕСТИТЬ ВсеДоки
		               |ИЗ
		               |	Документ.НачислениеАмортизации КАК НачислениеАмортизации
		               |ГДЕ
		               |	НачислениеАмортизации.Проведен
		               |	И НачислениеАмортизации.ПодразделениеОрганизации В(&МассивПодразделений)
		               |	И НачислениеАмортизации.Дата >= &Дата
					   //|	И НачислениеАмортизации.Дата < &ДатаСправа          //Федотова Л., 13.07.10
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВТ.Документ,
		               |	ВТ.ОС,
		               |	ВТ.Период,
		               |	ВТ.Подразделение
		               |ИЗ
		               |	ВТ КАК ВТ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВсеДоки.Документ,
		               |	ВсеДоки.ОС,
		               |	ВсеДоки.Подразделение,
		               |	ВсеДоки.Период КАК Дата
		               |ИЗ
		               |	ВсеДоки КАК ВсеДоки
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВсеДоки.Период";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДокумент_ОС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	ТаблицаДокумент_ОС.Свернуть("Документ,ОС,Дата");
	
	//Выполним запрос по таблице значений, чтобы совершить обход ее по документам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДокумент_ОС.Документ,
	               |	ТаблицаДокумент_ОС.ОС,
	               |	ТаблицаДокумент_ОС.Дата
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&ТаблицаДокумент_ОС КАК ТаблицаДокумент_ОС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Документ КАК Документ,
	               |	ВТ.ОС КАК ОС,
	               |	ВТ.Дата КАК Дата
	               |ИЗ
	               |	ВТ КАК ВТ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |ИТОГИ ПО
	               |	Документ";
	
	Запрос.УстановитьПараметр("ТаблицаДокумент_ОС", ТаблицаДокумент_ОС);
	
	Результат = Запрос.Выполнить();
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Для каждого документа цепочки будем составлять массив ОС и перезаписывать движения 
	//по регистру СтоимостьАмортизацияОС и/или РасчетАмортизацииОС, создаваемые этим массивом ОС
	Пока ВыборкаДокумент.Следующий() Цикл
	    Выборка = ВыборкаДокумент.Выбрать();
		
		МассивОС = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивОС.Добавить(Выборка.ОС);
		КонецЦикла;
		
		Документ = ВыборкаДокумент.Документ;
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		Если НЕ(ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеСостоянияОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеСпециальногоКоэффициентаОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатковОС")
			//добавила Федотова Л., РГ-Софт, 15.11.12, вопрос №SLI-0002987 ->
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаОС")
			//<-
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров")  )
			//ИЛИ ЭтоНовыеОСИзРазукрупненияИлиКомплектации) 
			Тогда
			ДокументОбъект.ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, МассивОС);
		КонецЕсли;
		
		//Перезапишем регистр РасчетАмортизацииОС, исходя из новых движений регистра СтоимостьАмортизацияОС
		Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.НачислениеАмортизации") Тогда
			Привилегированный.ПроизвестиРасчетАмортизации(Документ, МассивОС);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры //ВыполнитьПроведениеСпискаОСПоРегистрамОС

//Добавила Федотова Л, РГ-Софт, 03.08.09
Процедура ПровестиПоРегистрамОСОбработкаПроведения(Источник, Отказ, РежимПроведения = Неопределено) Экспорт
	Перем ТаблицаДокументОС;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный
	КонецЕсли;
	
	// Получим список ОС
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПринятиеКУчетуОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		СписокОС = Источник.Ссылка.ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РазукрупнениеОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РазукрупнениеОС") Тогда
		СписокОС = Источник.Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС);
		СписокОС = Источник.Ссылка.НовыеОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС, Истина);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияОС") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.КомплектацияОС") Тогда
		СписокОС = Источник.Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС);
		СписокОС = Источник.Ссылка.НовоеОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС, Истина);
	Иначе
		СписокОС = Источник.Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьПроведениеСпискаОСПоРегистрамОС(Источник, Отказ, РежимПроведения, СписокОС);
	КонецЕсли;
	
КонецПроцедуры

//Добавила Федотова Л, РГ-Софт, 11.08.09
Процедура ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	//Если НЕ Источник.Проведен Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Проверим, есть ли записи в регистре "Стоимость и амортизация ОС" по данному регистратору
	//Если нет, по отменять проведение не будем
	//НаборЗаписей = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли; 
	
	ИсточникСсылка = Источник.Ссылка;
	ЭтоПервыйДокумент = ЛОЖЬ;
	// Получим список ОС
	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		СписокОС = ИсточникСсылка.ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
		ЭтоПервыйДокумент = ИСТИНА;
	Иначе
		СписокОС = ИсточникСсылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") Тогда
			ЭтоПервыйДокумент = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
 	ВыполнитьОтменуПроведенияПоРегистрамОСОбработкаУдаленияПроведения(Источник, СписокОС, ЭтоПервыйДокумент, Отказ);
  	
	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.РазукрупнениеОС") Тогда
		ЭтоПервыйДокумент = ИСТИНА;
		СписокОС = ИсточникСсылка.НовыеОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьОтменуПроведенияПоРегистрамОСОбработкаУдаленияПроведения(Источник, СписокОС, ЭтоПервыйДокумент, Отказ);
	КонецЕсли;

	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.КомплектацияОС") Тогда
		ЭтоПервыйДокумент = ИСТИНА;
		СписокОС = ИсточникСсылка.НовоеОС.ВыгрузитьКолонку("ОсновноеСредство");
		ВыполнитьОтменуПроведенияПоРегистрамОСОбработкаУдаленияПроведения(Источник, СписокОС, ЭтоПервыйДокумент, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОтменуПроведенияПоРегистрамОСОбработкаУдаленияПроведения(Источник, СписокОС, ЭтоПервыйДокумент, Отказ) Экспорт
	
	//Если отменяем проведение документа ПринятиеКУчетуОС или ВводНачальныхОстатковОС, то должны очистить  
	//регистр РасчетАмортизацииОС и удалить все проводки по данному ОС из регистра СтоимостьАмортизацияОС 
	ИсточникСсылка = Источник.Ссылка;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПроведения", Источник.Метаданные())  Тогда
		ДатаПроведенияИсточник = ?(Источник.ДатаПроведения = Дата(1,1,1),Источник.Дата,Источник.ДатаПроведения);
	Иначе		
		ДатаПроведенияИсточник = Источник.Дата;
	КонецЕсли;
	
	ТаблицаДокумент_ОС = Новый ТаблицаЗначений;
	ТаблицаДокумент_ОС.Колонки.Добавить("ОС", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДокумент_ОС.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	ТаблицаДокумент_ОС.Колонки.Добавить("Дата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));

	Если ЭтоПервыйДокумент Тогда
		//Очистим записи по регистру РасчетАмортизацииОС
		Для каждого ОС Из СписокОС Цикл
			РасчетАмортизацииОСНабор = РегистрыСведений.РасчетАмортизацииОС.СоздатьНаборЗаписей();
			РасчетАмортизацииОСНабор.Отбор.ОсновноеСредство.Значение = ОС;
			РасчетАмортизацииОСНабор.Отбор.ОсновноеСредство.Использование = Истина;
			РасчетАмортизацииОСНабор.Записать();
		КонецЦикла; 
		
	Иначе 
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументОбъект.ПередачаОС") 
			ИЛИ ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ПередачаОС")  Тогда
			Если ЗначениеЗаполнено(ИсточникСсылка.ДокПодготовкаКПередачеОС) Тогда
				Возврат;                                                                                   
			КонецЕсли;
		КонецЕсли;
		//Если отменяем проведение не первого документа цепочки по учету ОС, то должны найти предшествующий документ и провести
		//по регистру РасчетАмортизацииОС,
		//а по регистру СтоимостьАмортизацияОС отменим проведение текущего документа 
		Для каждого ОС Из СписокОС Цикл
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДокументыУчетаОС.Ссылка КАК Документ,
			|	ВЫБОР
			|		КОГДА ДокументыУчетаОС.Ссылка.ДатаПроведения = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ДокументыУчетаОС.Ссылка.ДатаПроведения ЕСТЬ NULL 
			|			ТОГДА ДокументыУчетаОС.Ссылка.Дата
			|		ИНАЧЕ ДокументыУчетаОС.Ссылка.ДатаПроведения
			|	КОНЕЦ КАК Дата
			|ИЗ
			|	КритерийОтбора.ДокументыУчетаОС(&ОС) КАК ДокументыУчетаОС
			|ГДЕ
			|	ДокументыУчетаОС.Ссылка.Проведен = ИСТИНА
			|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСостоянияОС)
			|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИнвентаризацияОС)
			//|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеПараметровНачисленияАмортизацииОС)
			|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСпециальногоКоэффициентаОС)
			|	И (НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ПередачаОС)
			|	И ВЫБОР
			|			КОГДА ДокументыУчетаОС.Ссылка.ДатаПроведения = ДАТАВРЕМЯ(1, 1, 1)
			|					ИЛИ ДокументыУчетаОС.Ссылка.ДатаПроведения ЕСТЬ NULL 
			|				ТОГДА ДокументыУчетаОС.Ссылка.Дата
			|			ИНАЧЕ ДокументыУчетаОС.Ссылка.ДатаПроведения
			|		КОНЕЦ < &Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
			
			Запрос.УстановитьПараметр("ОС", ОС);
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДатаПроведенияИсточник));
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаДокумент_ОС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				НоваяСтрока.ОС = ОС;
			КонецЦикла;
		КонецЦикла; 
		//Выполним запрос по таблице значений, чтобы совершить обход ее по документам
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДокументОС.Документ,
		|	ТаблицаДокументОС.ОС
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаДокументОС КАК ТаблицаДокументОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Документ КАК Документ,
		|	ВТ.ОС
		|ИЗ
		|	ВТ КАК ВТ
		|ИТОГИ ПО
		|	Документ";
		
		Запрос.УстановитьПараметр("ТаблицаДокументОС", ТаблицаДокумент_ОС);
		
		Результат = Запрос.Выполнить();
		ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ЗакрытиеПериодов.ПериодДанных) КАК ПериодДанных
		|ИЗ
		|	РегистрСведений.ЗакрытиеПериодов КАК ЗакрытиеПериодов
		|ГДЕ
		|	ЗакрытиеПериодов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.FixedAssets)
		|	И ЗакрытиеПериодов.ДатаЗакрытия <= &ТекДата";
		
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());  
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ДатаГраницы = НачалоМесяца(ТекущаяДата());
		
		Пока Выборка.Следующий() Цикл
			 ДатаГраницы = Выборка.ПериодДанных;
		КонецЦикла;
		
		Пока ВыборкаДокументы.Следующий() Цикл
			МассивОС = Новый Массив;
			Выборка = ВыборкаДокументы.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивОС.Добавить(Выборка.ОС);
			КонецЦикла;
			//ДатаГраницы = '2009.01.01';
			НачалоОткрытогоНалоговогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Перечисления.МодулиРазработки.FixedAssets);
			Если НачалоОткрытогоНалоговогоПериода = Неопределено Тогда
			    НачалоОткрытогоНалоговогоПериода = Дата(1,1,1);
			КонецЕсли; 
			ДатаПроведения = ВыборкаДокументы.Документ.Дата;
			//Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПроведения", ВыборкаДокументы.Документ.Метаданные())  Тогда
			//	ДатаПроведения = ?( ВыборкаДокументы.Документ.ДатаПроведения = Дата(1,1,1), ВыборкаДокументы.Документ.Дата,ВыборкаДокументы.Документ.ДатаПроведения);
			//КонецЕсли;	
			Если ДатаПроведенияИсточник > НачалоОткрытогоНалоговогоПериода Тогда
				Привилегированный.ПроизвестиРасчетАмортизации(ВыборкаДокументы.Документ, МассивОС);
			Иначе
				ПроизвестиЗаполнениеРегистраРасчетаАмортизацииНаДату(МассивОС, НачалоОткрытогоНалоговогоПериода - 24*60*60);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Очистим регистр СтоимостьАмортизацияОС по ОС из списка по текущему документу
	Если НЕ (ТипЗнч(ИсточникСсылка) = Тип("ДокументОбъект.ИзменениеПараметровНачисленияАмортизацииОС")
		ИЛИ ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС")) Тогда
		СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
		СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = ИсточникСсылка;
		СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
		СтоимостьАмортизацияОСНабор.Записать();
	КонецЕсли;
	
	//Найдем цепочку последующих документов по списку ОС и перезапишем их движения по регистрам
	//СтоимостьАмортизацияОС и РасчетАмортизацииОС по списку ОС
	//Найдем последовательность документов для каждого ОС из списка
	ТаблицаДокумент_ОС = Новый ТаблицаЗначений;
	ТаблицаДокумент_ОС.Колонки.Добавить("ОС", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДокумент_ОС.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	ТаблицаДокумент_ОС.Колонки.Добавить("Дата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаДокумент_ОС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для каждого ОС Из СписокОС Цикл
		Запрос = Новый Запрос;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.Текст = "ВЫБРАТЬ
		|	ДокументыУчетаОС.Ссылка КАК Документ,
		|	ДокументыУчетаОС.Ссылка.ПодразделениеОрганизации КАК Подразделение,
		|	&ОС,
		|	ДокументыУчетаОС.Ссылка.Дата КАК Период
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	КритерийОтбора.ДокументыУчетаОС(&ОС) КАК ДокументыУчетаОС
		|ГДЕ
		|	НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИнвентаризацияОС
		|	И НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСостоянияОС
		|	И НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ИзменениеСпециальногоКоэффициентаОС
		|	И НЕ ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ПередачаОС
		|	И ДокументыУчетаОС.Ссылка.Проведен
		|	И ВЫБОР
		|			КОГДА ДокументыУчетаОС.Ссылка.ДатаПроведения = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ДокументыУчетаОС.Ссылка.ДатаПроведения ЕСТЬ NULL 
		|				ТОГДА ДокументыУчетаОС.Ссылка.Дата
		|			ИНАЧЕ ДокументыУчетаОС.Ссылка.ДатаПроведения
		|		КОНЕЦ >= &Дата
		|	И ВЫБОР
		|			КОГДА ДокументыУчетаОС.Ссылка ССЫЛКА Документ.ПередачаОС
		|				ТОГДА ДокументыУчетаОС.Ссылка.ДокПодготовкаКПередачеОС = ЗНАЧЕНИЕ(Документ.ПодготовкаКПередачеОС.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ ДокументыУчетаОС.Ссылка = &Источник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтоимостьАмортизацияОСОбороты.Регистратор,
		|	СтоимостьАмортизацияОСОбороты.Подразделение,
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		|	СтоимостьАмортизацияОСОбороты.Период
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(&Дата, , Регистратор, ОсновноеСредство = &ОС) КАК СтоимостьАмортизацияОСОбороты
		|ГДЕ
		|	СтоимостьАмортизацияОСОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.Документ,
		|	ВТ.Подразделение,
		|	ВТ.Период КАК Период
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("ОС", ОС);
		Запрос.УстановитьПараметр("Дата", ДатаПроведенияИсточник);
		Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
		//Составим список подразделений, по которым могла бы быть амортизация по нашему ОС
		МассивПодразделений = Новый Массив;
		СписокДоков = Запрос.Выполнить().Выгрузить();
		
		//Возьмем очень большую дату для ограничения документов начисления амортизации справа, чтобы вошли все
		ДатаСправа = ТекущаяДата() + 100*365*24*60*60;
		Если Константы.ПерепроводитьЦепочкуДокументовОС.Получить() Тогда
			//Найдем дату второго документа из полученных, чтобы начисления амортизации 
			//брать только до конца месяца (включительно), к которому относится второй документ в цепочке,
			//остальные начисления амортизации не рассматриваем, так как они учтутся при проведении второго документа в цепочке.
			//Отбросим также все документы из полученных после второго 
			СписокДоковКопия = СписокДоков.Скопировать();
			СписокДоков.Очистить();
			Сч = 0;
			Для каждого Строка Из СписокДоковКопия Цикл
				Сч = Сч + 1;
				Если Сч = 3 Тогда
					Прервать;
				КонецЕсли; 
				НоваяСтрока = СписокДоков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				Если Сч = 2 Тогда
					ДатаСправа = НачалоМесяца(ДобавитьМесяц(Строка.Период,1));
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Для Каждого Строка Из СписокДоков Цикл
			Док = Строка.Документ;
			Если ТипЗнч(Док) = Тип("ДокументСсылка.ВводНачальныхОстатковОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.МодернизацияОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.ПередачаОС") ИЛИ
				//ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.СписаниеОС") ИЛИ
				ТипЗнч(Док) = Тип("ДокументСсылка.НачислениеАмортизации") Тогда
				
				МассивПодразделений.Добавить(Док.ПодразделениеОрганизации);
				
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеОС") Тогда
				
				МассивПодразделений.Добавить(Док.ПодразделениеОрганизации);
				МассивПодразделений.Добавить(Док.Местонахождение);
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.РазукрупнениеОС") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение
				|ИЗ
				|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
				
				Запрос.УстановитьПараметр("Дата", Док.ДатаПроведения);
				Запрос.УстановитьПараметр("ОсновноеСредство", Док.ОС[0].ОсновноеСредство);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					МассивПодразделений.Добавить(Выборка.Местонахождение);
				КонецЦикла;
				
			ИначеЕсли
				ТипЗнч(Док) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
				МассивПодразделений.Добавить(Строка.Подразделение);
			КонецЕсли;
		КонецЦикла;

		УправлениеЗапасамиПартионныйУчет.УдалитьПовторяющиесяЭлементы(МассивПодразделений);		
		
		Копия = МассивПодразделений;
		//добавим все подразделения выше по иерархии, а то мало ли как заведены документы начисления амортизации
		Для Каждого Подразделение Из Копия Цикл
			Пока Не Подразделение.Родитель.Пустая() Цикл 
				МассивПодразделений.Добавить(Подразделение.Родитель);
				Подразделение = Подразделение.Родитель;
			КонецЦикла;
		КонецЦикла;
		УправлениеЗапасамиПартионныйУчет.УдалитьПовторяющиесяЭлементы(МассивПодразделений);		
		
		//Теперь найдем все проведенные начисления амортизации по нашим подразделениям и добавим их в список доков
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
		Запрос.УстановитьПараметр("ДатаИсточник", ДатаПроведенияИсточник);
		Запрос.УстановитьПараметр("ОС", ОС);
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(СтоимостьАмортизацияОСОбороты.Период) КАК ПоследнийПериодВРегистреСтоимость
		|ПОМЕСТИТЬ ПоледнийПериодСтоимости
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(, , Регистратор, ОсновноеСредство = &ОС) КАК СтоимостьАмортизацияОСОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоледнийПериодСтоимости.ПоследнийПериодВРегистреСтоимость, ВложенныйЗапрос.ДатаИсточник) < ВложенныйЗапрос.ДатаИсточник
		|			ТОГДА ЕСТЬNULL(ПоледнийПериодСтоимости.ПоследнийПериодВРегистреСтоимость, ВложенныйЗапрос.ДатаИсточник)
		|		ИНАЧЕ ВложенныйЗапрос.ДатаИсточник
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ДатаДок
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ДатаИсточник КАК ДатаИсточник) КАК ВложенныйЗапрос,
		|	ПоледнийПериодСтоимости КАК ПоледнийПериодСтоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеАмортизации.Ссылка КАК Документ,
		|	&ОС,
		|	КОНЕЦПЕРИОДА(НачислениеАмортизации.Дата, МЕСЯЦ) КАК Период,
		|	НачислениеАмортизации.ПодразделениеОрганизации КАК Подразделение
		|ПОМЕСТИТЬ ВсеДоки
		|ИЗ
		|	Документ.НачислениеАмортизации КАК НачислениеАмортизации,
		|	ДатаДок КАК ДатаДок
		|ГДЕ
		|	НачислениеАмортизации.Проведен
		|	И НачислениеАмортизации.ПодразделениеОрганизации В(&МассивПодразделений)
		|	И НачислениеАмортизации.Дата >= ДатаДок.Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ.Документ,
		|	ВТ.ОС,
		|	ВТ.Период,
		|	ВТ.Подразделение
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеДоки.Документ,
		|	ВсеДоки.ОС,
		|	ВсеДоки.Подразделение,
		|	ВсеДоки.Период КАК Дата
		|ИЗ
		|	ВсеДоки КАК ВсеДоки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеДоки.Период";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДокумент_ОС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	ТаблицаДокумент_ОС.Свернуть("Документ,ОС,Дата");
	
	//Выполним запрос по таблице значений, чтобы совершить обход ее по документам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДокумент_ОС.Документ,
	|	ТаблицаДокумент_ОС.ОС,
	|	ТаблицаДокумент_ОС.Дата
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаДокумент_ОС КАК ТаблицаДокумент_ОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.Документ КАК Документ,
	|	ВТ.ОС КАК ОС,
	|	ВТ.Дата КАК Дата
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	Документ";
	
	Запрос.УстановитьПараметр("ТаблицаДокумент_ОС", ТаблицаДокумент_ОС);
	
	Результат = Запрос.Выполнить();
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Для каждого документа цепочки будем составлять массив ОС и перезаписывать движения 
	//по регистру СтоимостьАмортизацияОС и/или РасчетАмортизацииОС, создаваемые этим массивом ОС
	Пока ВыборкаДокумент.Следующий() Цикл
		Выборка = ВыборкаДокумент.Выбрать();
		
		МассивОС = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивОС.Добавить(Выборка.ОС);
		КонецЦикла;
		
		Документ = ВыборкаДокумент.Документ;
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		//Перезапишем регистр РасчетАмортизацииОС, исходя из новых движений регистра СтоимостьАмортизацияОС
		Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.НачислениеАмортизации") Тогда
			Привилегированный.ПроизвестиРасчетАмортизации(Документ, МассивОС);
		КонецЕсли;
		
		Если НЕ(ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеСостоянияОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ИзменениеСпециальногоКоэффициентаОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
			//добавила Федотова Л., РГ-Софт, 15.11.12, вопрос №SLI-0002987 ->
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаОС")
			//<-
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатковОС")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров")) Тогда
			ДокументОбъект.ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, МассивОС);   //10.05.11
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Добавила Федотова Л, РГ-Софт, 13.10.09
Процедура ПроизвестиЗаполнениеРегистраРасчетаАмортизацииНаДату(ОС, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	ОсновныеСредства.Ссылка В ИЕРАРХИИ(&ОС)";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОС", ОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//-> RG-Soft VIvanov 07/06/12
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	//<- RG-Soft
	Документ = Новый Структура ("Дата,ДатаПроведения,Организация", Дата, Дата, Организация);
	Привилегированный.ПроизвестиРасчетАмортизации(Документ, СписокОС);
	
КонецПроцедуры //ПроизвестиЗаполнениеРегистраРасчетаАмортизацииНаДату()

//Добавил Пронин Иван, РГ-Софт, 21.09.09
// Возвращает из регистров сведений НачислениеАмортизации и ПервоначальныеСведения 
// срез позледних на определенную дату, по данной организации и по переданному списку основных средств.
// Если ничего из регистров не было выбрано, то в таблицу возврата добавляются строки с заполненных полем Основное средство 
// 
//
// Параметры
//  Дата  		(Дата): дата, на которую делается срез
//  Организация (СправочникСсылка.Организации): организация, для которой необходим срез
//  масОС 		(Массив): список основных средств, по которым нужно определить срез
//
// Возвращаемое значение:
//   (Таблица значений): в таблице каждому основоному средству из переданного списка
//                       сопоставляются значения ресурсов регистров или их пустые значения,
//                       переданная дата и организация, признаки ЕстьДвижениеПервоначальныеСведения
//                       и ЕстьДвижениеНачислениеАмортизации равные ложь
//
Функция ПолучитьТаблицуПоАмортизации(Дата, Организация, масОС)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(НачислениеАмортизации.ОсновноеСредство, ПервоначальныеСведения.ОсновноеСредство) КАК ОсновноеСредство,
	               |	&Организация КАК Организация,
	               |	&Дата КАК Период,
	               |	ЛОЖЬ КАК ЕстьДвижениеПервоначальныеСведения,
	               |	ЛОЖЬ КАК ЕстьДвижениеНачислениеАмортизации,
	               |	ВЫБОР
	               |		КОГДА НачислениеАмортизации.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьПервоначальныеСведения,
	               |	ЕСТЬNULL(НачислениеАмортизации.НачислятьБУ, ЛОЖЬ) КАК НачислятьБУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.НачислятьНУ, ЛОЖЬ) КАК НачислятьНУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	               |	ЕСТЬNULL(НачислениеАмортизации.СрокБУ, 0) КАК СрокБУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.СтоимостьБУ, 0) КАК СтоимостьБУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.СрокНУ, 0) КАК СрокНУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.ДатаИзмененияБУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзмененияБУ,
	               |	ЕСТЬNULL(НачислениеАмортизации.ДатаВводаНУ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаНУ,
	               |	ЕСТЬNULL(ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ, 0) КАК ПервоначальнаяСтоимостьБУ,
	               |	ЕСТЬNULL(ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
	               |	ЕСТЬNULL(ПервоначальныеСведения.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	               |	ЕСТЬNULL(ПервоначальныеСведения.СпособПоступления, ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПустаяСсылка)) КАК СпособПоступления,
	               |	ЕСТЬNULL(ПервоначальныеСведения.ПорядокПогашенияСтоимости, ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.ПустаяСсылка)) КАК ПорядокПогашенияСтоимости,
	               |	ЕСТЬNULL(ПервоначальныеСведения.ПорядокВключенияСтоимостиВСоставРасходов, ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ПустаяСсылка)) КАК ПорядокВключенияСтоимостиВСоставРасходов,
	               |	ЕСТЬNULL(НачислениеАмортизации.СрокПолезногоИспользованияБУ, 0) КАК СрокПолезногоИспользованияБУ,
	               |	ЕСТЬNULL(ПервоначальныеСведения.СтоимостьДо2002, 0) КАК СтоимостьДо2002,
	               |	ЕСТЬNULL(ПервоначальныеСведения.АмортизацияДо2002, 0) КАК АмортизацияДо2002,
	               |	ЕСТЬNULL(ПервоначальныеСведения.КурсНаДатуПринятияКУчету, 0) КАК КурсНаДатуПринятияКУчету,
	               |	ЕСТЬNULL(ПервоначальныеСведения.КРПервоначальная, 0) КАК КРПервоначальная
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НачислениеАмортизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	               |		НачислениеАмортизацииСрезПоследних.НачислятьБУ КАК НачислятьБУ,
	               |		НачислениеАмортизацииСрезПоследних.НачислятьНУ КАК НачислятьНУ,
	               |		НачислениеАмортизацииСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	               |		НачислениеАмортизацииСрезПоследних.СрокБУ КАК СрокБУ,
	               |		НачислениеАмортизацииСрезПоследних.СтоимостьБУ КАК СтоимостьБУ,
	               |		НачислениеАмортизацииСрезПоследних.СрокНУ КАК СрокНУ,
	               |		НачислениеАмортизацииСрезПоследних.ДатаИзмененияБУ КАК ДатаИзмененияБУ,
	               |		НачислениеАмортизацииСрезПоследних.ДатаВводаНУ КАК ДатаВводаНУ,
	               |		НачислениеАмортизацииСрезПоследних.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ
	               |	ИЗ
	               |		РегистрСведений.НачислениеАмортизации.СрезПоследних(
	               |				&Дата,
	               |				ОсновноеСредство В (&ОС)
	               |					И Организация = &Организация) КАК НачислениеАмортизацииСрезПоследних) КАК НачислениеАмортизации
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	               |			ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	               |			ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	               |			ПервоначальныеСведенияСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	               |			ПервоначальныеСведенияСрезПоследних.СпособПоступления КАК СпособПоступления,
	               |			ПервоначальныеСведенияСрезПоследних.СтоимостьДо2002 КАК СтоимостьДо2002,
	               |			ПервоначальныеСведенияСрезПоследних.АмортизацияДо2002 КАК АмортизацияДо2002,
	               |			ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	               |			ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	               |			ПервоначальныеСведенияСрезПоследних.КурсНаДатуПринятияКУчету КАК КурсНаДатуПринятияКУчету,
	               |			ПервоначальныеСведенияСрезПоследних.КРПервоначальная КАК КРПервоначальная
	               |		ИЗ
	               |			РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&ОС)) КАК ПервоначальныеСведенияСрезПоследних) КАК ПервоначальныеСведения
	               |		ПО НачислениеАмортизации.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОС", масОС);
	
	табАмортизация = Запрос.Выполнить().Выгрузить();
	Для Каждого Элемент Из масОС Цикл
		НайтиСтроку = табАмортизация.Найти(Элемент, "ОсновноеСредство");
		Если НайтиСтроку = Неопределено Тогда
			НоваяСтрока = табАмортизация.Добавить();
			НоваяСтрока.ОсновноеСредство = Элемент;
			НоваяСтрока.ЕстьДвижениеПервоначальныеСведения = ЛОЖЬ;
			НоваяСтрока.ЕстьДвижениеНачислениеАмортизации = ЛОЖЬ;
			НоваяСтрока.ЕстьПервоначальныеСведения = ЛОЖЬ;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = Дата;
		КонецЕсли;
	КонецЦикла;

	Возврат табАмортизация;
	
КонецФункции

//Добавила Федотова Л, РГ-Софт, 22.09.09
Функция РазностьДат(ДатаНач, ДатаКон, ВидПериода = "Месяц") Экспорт
	
	//используется только при виде периода "Месяц" (другое пока не требовалось)
	Дата1 = НачалоМесяца(ДатаНач);
	Дата2 = НачалоМесяца(ДатаКон);
	
	Если Дата1 > Дата2 Тогда
		Возврат 0;
	КонецЕсли;
	
	Сч = 0;
	Пока Дата1 < Дата2 Цикл
		Дата1 = ДобавитьМесяц(Дата1, 1);
		Сч = Сч + 1;
	КонецЦикла;
	Возврат Сч;
	
КонецФункции


//Добавила Федотова Л, РГ-Софт, 07.12.11
Функция ПроверитьПоПодразделению(Подразделение, ДатаПроведения) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетАмортизацииОС.ОсновноеСредство,
		|	РасчетАмортизацииОС.СуммаБУ,
		|	РасчетАмортизацииОС.СуммаНУ
		|ПОМЕСТИТЬ Расчет
		|ИЗ
		|	РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
		|ГДЕ
		|	РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаПроведения, ДЕНЬ)
		|	И РасчетАмортизацииОС.РучнаяКорректировка = ИСТИНА
		|	И ВЫБОР
		|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА РасчетАмортизацииОС.Подразделение = &Подразделение
		|			ИНАЧЕ РасчетАмортизацииОС.Подразделение В ИЕРАРХИИ (&Подразделение)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьАмортизацияОС.ОсновноеСредство,
		|	СтоимостьАмортизацияОС.АмортизацияБУ,
		|	СтоимостьАмортизацияОС.АмортизацияНУ
		|ПОМЕСТИТЬ Стоимость
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
		|ГДЕ
		|	СтоимостьАмортизацияОС.Регистратор ССЫЛКА Документ.КорректировкаОС
		|	И СтоимостьАмортизацияОС.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроведения, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаПроведения, МЕСЯЦ)
		|	И ВЫБОР
		|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				ТОГДА СтоимостьАмортизацияОС.Подразделение = &Подразделение
		|			ИНАЧЕ СтоимостьАмортизацияОС.Подразделение В ИЕРАРХИИ (&Подразделение)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.ОсновноеСредство,
		|	Расчет.СуммаБУ - ЕСТЬNULL(Стоимость.АмортизацияБУ, 0) КАК АмортизацияБУ,
		|	Расчет.СуммаНУ - ЕСТЬNULL(Стоимость.АмортизацияНУ, 0) КАК АмортизацияНУ,
		|	Расчет.ОсновноеСредство.Код КАК КодОС
		|ПОМЕСТИТЬ ОбщаяТаблица
		|ИЗ
		|	Расчет КАК Расчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Стоимость
		|		ПО Расчет.ОсновноеСредство = Стоимость.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщаяТаблица.ОсновноеСредство,
		|	ОбщаяТаблица.АмортизацияБУ,
		|	ОбщаяТаблица.АмортизацияНУ,
		|	ОбщаяТаблица.КодОС
		|ИЗ
		|	ОбщаяТаблица КАК ОбщаяТаблица
		|ГДЕ
		|	(НЕ(ОбщаяТаблица.АмортизацияБУ = 0
		|				И ОбщаяТаблица.АмортизацияНУ = 0))";

	Запрос.УстановитьПараметр("ДатаПроведения", ДатаПроведения);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;

КонецФункции // ПроверитьПоПодразделению(Подразделение)

Процедура ЗаполнитьПризнакПроведенности(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Источник.ДополнительныеСвойства.Вставить("ДокументПроведен", Источник.Проведен);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА и НИОКР

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА   

#Область Имущество

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2011Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Ложь);
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2013Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	
КонецПроцедуры
//<=

// { RGS LFedotova 18.04.2018 20:54:34 - вопрос SLI-0007538
// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2017Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	
КонецПроцедуры
// } RGS LFedotova 18.04.2018 20:54:40 - вопрос SLI-0007538 

//Обновление рег. Отчетности на бух. Корп 3.0.36.18 ПОЛНОСТЬЮ ПЕРЕПИСАННАЯ ПРОЦЕДУРА!
Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Подразделение 		 	 = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Организация				 = ПараметрыОтчета.Организация; 	                    
	
	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= ПараметрыОтчета.КодНалоговогоОргана;
	КПП 		= ПараметрыОтчета.КПП;
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Если конфигурация БГУ 1.0, то выполним заполнение вторго раздела согласно алгоритма БГУ и далше делать ничего не будем.
	// РГ-Софт - Ничего не делаем
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	// РГ-Софт - Ничего не делаем  	             
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4.
	
	Раздел2 = Контейнер.Раздел2;
	
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;                      
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	// РГ-Софт Заполнение данными напрямую
	
	СтраницаРаздел2.П000020000101 		= 3;  						//КодВидаИмущества
	Попытка
		СтраницаРаздел2.П000020001001 	= Подразделение.КодПоОКТМО;	//было Выборка.КодПоОКАТО , теперь ОКТМО
	Исключение
		Сообщить("В конф. нет реквизита ОКТМО!");
	КонецПопытки;
	
	СтраницаРаздел2.П000020021003 			= 2.2; 					//Выборка.НалоговаяСтавка
	
	// РГ-СОфт - Специальный алгоритм
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	ДатаНачалаПериодаРасчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаРасчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1));
	
	КварталОтчета = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"));
	ГодОтчета     = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг"));
	
	Период = ДатаНачалаПериодаРасчета;
	Счетчик = 1;
	ТекстОбъединяющегоЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПринятияКУчету", Дата('20130101000000'));
	
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоНаименованию("USD"));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И СостоянияОСОрганизаций.ДатаСостояния >= ДАТАВРЕМЯ(2013, 1, 1)
	|	И НЕ СостоянияОСОрганизаций.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.МноголетниеНасаждения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС";
	
	Запрос.Выполнить();
	
	
	Пока Период <= ДатаКонцаПериодаРасчета Цикл
		
		НомерМесяца = Месяц(Период);
		
		Запрос.УстановитьПараметр("Период", Период);
		//Изменил РГ-Софт - Иванов Антон - 2009-02-13
		Если НомерМесяца = 1 И Год(Период) = ГодОтчета + 1 Тогда
			//Устанавливаем дату не 01.01, а 31.12 23:58. В 23:59 могут быть перемещения
			Запрос.УстановитьПараметр("Период", Период-1-2*60);
		Иначе
			Запрос.УстановитьПараметр("Период", Период);
		КонецЕсли;
		
		Сообщить(Строка(Период));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							СостоянияОСОрганизаций.ОсновноеСредство
		|						ИЗ
		|							РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|						ГДЕ
		|							СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|							И СостоянияОСОрганизаций.ДатаСостояния < &Период
		|							И СостоянияОСОрганизаций.Организация = &Организация)
		|				И НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ОсновныеСредства.Ссылка
		|						ИЗ
		|							Справочник.ОсновныеСредства КАК ОсновныеСредства
		|						ГДЕ
		|							ОсновныеСредства.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение)
		|	И НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.АрендованноеОС";		
		
		Запрос.Выполнить();
		
		// Отладка
		Запрос.Текст = 
		"ВЫБРАТЬ
		| *
		|ИЗ СписокОС
		|УПОРЯДОЧИТЬ ПО 
		| СписокОС.ОсновноеСредство.Наименование";
		
		а= Запрос.Выполнить().Выгрузить();
		ы=ы;
		// Отладка
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА СписокОС.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.МноголетниеНасаждения))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоНедвижимость,
		|	ВЫБОР
		|		КОГДА СписокОС.ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС
		|				ИЗ
		|					ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВключатьВНалоговуюБазу,
		|	" + Счетчик + " КАК Период,
		|	(ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)) * КурсыВалютСрезПоследних.Курс КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(ЛьготированиеИмуществаСрезПоследних.ЛьготируемоеИмущество, ЛОЖЬ) КАК ОсвобождениеОтНалогообложения
		|ПОМЕСТИТЬ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
		|ИЗ
		|	СписокОС КАК СписокОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Период, ) КАК СтоимостьАмортизацияОСОстатки
		|		ПО СписокОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО СписокОС.ОсновноеСредство.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготированиеИмущества.СрезПоследних(&Период, ) КАК ЛьготированиеИмуществаСрезПоследних
		|		ПО СписокОС.ОсновноеСредство = ЛьготированиеИмуществаСрезПоследних.ОС";
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"УНИЧТОЖИТЬ СписокОС";
		Запрос.Выполнить();
		
		ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
		+ ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		|",
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ *
		|")
		+ ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
		"ПОМЕСТИТЬ НалоговаяБазаПоНалогуНаИмущество
		|",
		"")
		+ "ИЗ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
		|ГДЕ
		|	ОстаточнаяСтоимость > 0
		|";
		
		
		Счетчик = Счетчик + 1;
		
		//Период  = ?(Счетчик = 13, КонецМесяца(Период), ДобавитьМесяц(Период, 1));  //Стандартный алгоритм
		Период = ДобавитьМесяц(Период,1);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОбъединяющегоЗапроса) Тогда
		Возврат;
	КонецЕсли;         
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	ПерваяСтраницаРаздела2 = Истина;
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗАпрос.Период КАК Период,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
	|ИЗ
	|(ВЫБРАТЬ
	|	Период,
	|	ОстаточнаяСтоимость КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимость,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ЭтоНедвижимость = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимости,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ЭтоНедвижимость = ИСТИНА И ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
	|ИЗ
	|	НалоговаяБазаПоНалогуНаИмущество) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Период
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//РГ-СОФТ
	СтраницаРаздел2.П000020000101 = 3;  //КодВидаИмущества
	Попытка
		СтраницаРаздел2.П000020001001 = Подразделение.КодПоОКТМО;
	Исключение
		Сообщить("В конф. нет реквизита ОКТМО!");
	КонецПопытки;
	//ПТД_Раздел2.Области.П000020016003_КодЛьготы.Значение = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
	//ПТД_Раздел2.Области.П000020020003_КодЛьготы.Значение = ?(Выборка.СнижениеНалоговойСтавки, "2012000", "");
	СтраницаРаздел2.П000020021003 = 2.2;  //Выборка.НалоговаяСтавка
	
	//ПТД_Раздел2.Области.П000020018003_Числ.Значение = ДоляСтоимостиЧислитель;
	//ПТД_Раздел2.Области.П000020018003_Знам.Значение = ДоляСтоимостиЗнаменатель;
	//РГ-СОФТ
	
	//Расчет();	                 
	
	ПерваяСтраница = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные[0].Значение;
			
			ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
			ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель); 
			
			ВидИмущества =             Выборка.ВидИмущества;
			КодВидаИмущества = 3;
			
			Если ВидИмущества = Перечисления.ВидыИмущества.ВходитВСоставЕСГС Тогда
				КодВидаИмущества = 1;
			ИначеЕсли ВидИмущества = Перечисления.ВидыИмущества.НаходитсяНаТерриторииДругогоГосударства Тогда
				КодВидаИмущества = 4;       
				ДоляСтоимостиЧислитель = 0;
				ДоляСтоимостиЗнаменатель = 0;
			ИначеЕсли ВидИмущества = Перечисления.ВидыИмущества.ИспользуетсяВОЭЗКалининградскойОбласти Тогда
				КодВидаИмущества = 5;
			Иначе
				Если ДоляСтоимостиЧислитель = 1 И ДоляСтоимостиЗнаменатель = 1 Тогда
					КодВидаИмущества = 3; 
				Иначе
					КодВидаИмущества = 2;
				КонецЕсли;   			   
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = 3;  //КодВидаИмущества
			Попытка
				СтраницаРаздел2.П000020001001 = Подразделение.КодПоОКТМО;
			Исключение
				Сообщить("В конф. нет реквизита ОКТМО!");
			КонецПопытки;
			
			//ПТД_Раздел2.Области.П000020016003_КодЛьготы.Значение = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			//ПТД_Раздел2.Области.П000020020003_КодЛьготы.Значение = ?(Выборка.СнижениеНалоговойСтавки, "2012000", "");
			СтраницаРаздел2.П000020021003 = 2.2;  //Выборка.НалоговаяСтавка
			
			//ПТД_Раздел2.Области.П000020018003_Числ.Значение = ДоляСтоимостиЧислитель;
			//ПТД_Раздел2.Области.П000020018003_Знам.Значение = ДоляСтоимостиЗнаменатель;
			
			//Расчет();		
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			Если Выборка.Период = 1 Тогда
				
				СтраницаРаздел2.П000020002003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020002004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 2 Тогда
				
				СтраницаРаздел2.П000020003003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020003004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 3 Тогда
				
				СтраницаРаздел2.П000020004003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020004004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 4 Тогда
				
				СтраницаРаздел2.П000020005003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020005004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 5 Тогда
				
				СтраницаРаздел2.П000020006003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020006004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 6 Тогда
				
				СтраницаРаздел2.П000020007003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020007004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 7 Тогда
				
				СтраницаРаздел2.П000020008003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020008004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 8 Тогда
				
				СтраницаРаздел2.П000020009003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020009004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 9 Тогда
				
				СтраницаРаздел2.П000020010003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020010004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 10 Тогда
				
				СтраницаРаздел2.П000020011003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020011004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 11 Тогда
				
				СтраницаРаздел2.П000020012003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020012004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 12 Тогда
				
				СтраницаРаздел2.П000020013003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020013004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				
			ИначеЕсли Выборка.Период = 13 Тогда
				
				СтраницаРаздел2.П000020014003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020014004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				СтраницаРаздел2.П000020014103 = Выборка.ОстаточнаяСтоимостьНедвижимости;
				СтраницаРаздел2.П000020014104 = Выборка.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества;
				
				СтраницаРаздел2.П000020027003 = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
				
			КонецЕсли;
			
			//Расчет();		
			
			Если НЕ ЗначениеЗаполнено(мСсылкаНО) 
				ИЛИ (мСсылкаНО.Код = Организация.КодНалоговогоОргана) Тогда
				
				СуммаНалога = СтраницаРаздел2.П000020018003;
				
				СуммаЛьготы = СуммаНалога * (ПроцентУменьшенияСуммыНалога / 100);
				
				СтраницаРаздел2.П000020019003_КодЛьготы = ?(СуммаЛьготы = 0, "", "2012000");
				СтраницаРаздел2.П000020020003 = Мин(СуммаНалога, СуммаЛьготы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;       	
	
	// Заполнение раздела 3
	
	// РГ-Софт - Раздел 3 в данной организации не заполняется. 
	// Справка:
	// Раздел 3 заполняется для имущества, налоговой базой для которого является кадастровая стоимость
	
КонецПроцедуры
//<=

// { RGS LFedotova 18.04.2018 21:15:33 - вопрос SLI-0007538
// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Организация = ПараметрыОтчета.Организация;
	
	// { RGS LFedotova 18.04.2018 21:29:58 - вопрос SLI-0007538
	Подразделение = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	// } RGS LFedotova 18.04.2018 21:30:11 - вопрос SLI-0007538
	
	// { RGS LFedotova 18.04.2018 21:29:58 - вопрос SLI-0007538
	//РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	Если НЕ Подразделение.Пустая() Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, "РегистрацияВНалоговомОргане, КодИМНС");
		РеквизитыОрганизации.Вставить("КодНалоговогоОргана",РеквизитыОрганизации.КодИМНС);
	Иначе	
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КонецЕсли; 
	// } RGS LFedotova 18.04.2018 21:30:11 - вопрос SLI-0007538
	
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	
	// { RGS LFedotova 18.04.2018 21:33:20 - вопрос SLI-0007538
	//РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	Если НЕ Подразделение.Пустая() Тогда
		РегистрацияВНалоговомОргане = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	Иначе	
		РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	КонецЕсли; 
	// } RGS LFedotova 18.04.2018 21:33:35 - вопрос SLI-0007538
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	// { RGS LFedotova 18.04.2018 22:46:45 - вопрос SLI-0007538
	//ОрганизацииУплачивающиеАвансы = РасчетИмущественныхНалогов.ОрганизацииУплачивающиеАвансы(Организация, мДатаКонцаПериодаОтчета, "НалогНаИмущество");
	//Если ОрганизацииУплачивающиеАвансы.Количество() = 0 Тогда 
	//	
	//	// { RGS LFedotova 18.04.2018 21:39:29 - вопрос SLI-0007538
	//	//ПутьКРегистру = ОписаниеПутиВИнтерфейсеКПорядкуУплатыНалоговНаМестах();
	//	// } RGS LFedotova 18.04.2018 21:39:37 - вопрос SLI-0007538 
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru='Не настроена уплата авансов по налогу на имущество на %1 для %2
	//		|%3'"), 
	//		ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
	//		// { RGS LFedotova 18.04.2018 21:40:14 - вопрос SLI-0007538
	//		//,Организация, ПутьКРегистру));
	//		,Организация));
	//		// } RGS LFedotova 18.04.2018 21:40:19 - вопрос SLI-0007538 
	//		
	//	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	//	
	//	Возврат;	
	//	
	//КонецЕсли;
	// } RGS LFedotova 18.04.2018 22:47:00 - вопрос SLI-0007538 

	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(&Период, НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда 
		// { RGS LFedotova 18.04.2018 21:41:23 - вопрос SLI-0007538
		//ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		// } RGS LFedotova 18.04.2018 21:42:01 - вопрос SLI-0007538
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружена ставка налога на имущество на %1 для %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			// { RGS LFedotova 18.04.2018 21:43:15 - вопрос SLI-0007538
			//,Организация, ПутьКРегистру));
			,Организация));
			// } RGS LFedotova 18.04.2018 21:43:23 - вопрос SLI-0007538 
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4,5 (прочее имущество).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	// { RGS LFedotova 18.04.2018 21:45:48 - вопрос SLI-0007538
	Запрос.УстановитьПараметр("Подразделение", 			ПараметрыОтчета.Подразделение);
	// } RGS LFedotova 18.04.2018 21:46:11 - вопрос SLI-0007538 
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	// { RGS LFedotova 18.04.2018 21:47:16 - вопрос SLI-0007538
	//|	РасчетНалогаНаИмущество.Организация = &Организация
	|	РасчетНалогаНаИмущество.Организация = &Подразделение
	// } RGS LFedotova 18.04.2018 21:47:33 - вопрос SLI-0007538 
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		// { RGS LFedotova 18.04.2018 21:50:50 - вопрос SLI-0007538
		//ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Подразделение, мДатаКонцаПериодаОтчета);
		// } RGS LFedotova 18.04.2018 21:51:05 - вопрос SLI-0007538
	КонецЕсли;	
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		// { RGS LFedotova 18.04.2018 21:35:44 - вопрос SLI-0007538
		//ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		// } RGS LFedotova 18.04.2018 21:36:20 - вопрос SLI-0007538 
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
				// { RGS LFedotova 18.04.2018 21:38:20 - вопрос SLI-0007538
				//|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				|%2'"),	СтрокаТаблицы.ОсновноеСредство));
				// } RGS LFedotova 18.04.2018 21:38:38 - вопрос SLI-0007538
				
		КонецЦикла;
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество КАК ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
		
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.КБК = Льготы.КБК
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
			
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
					
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101           = КодВидаИмущества; 
			СтраницаРаздел2.П000020001001           = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100           = КБК;
			СтраницаРаздел2.П000020013003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020016003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020017003           = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020015003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020015003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020021003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020018003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020018003, "", ДополнительныеПараметры);
						
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда 
				
				СтраницаРаздел2.П000020019003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020020003 = Число(СтраницаРаздел2.П000020020003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020020003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020020003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	
	НедвижимоеИмущество = Новый Массив;
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.Здания);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.Сооружения);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	
	ПерваяВтораяАмортизационныеГруппы = Новый Массив;
	ПерваяВтораяАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПерваяГруппа);
	ПерваяВтораяАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ВтораяГруппа);
	
	Запрос.УстановитьПараметр("НедвижимоеИмущество", НедвижимоеИмущество);
	Запрос.УстановитьПараметр("ПерваяВтораяАмортизационныеГруппы", ПерваяВтораяАмортизационныеГруппы);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|	И ВложенныйЗапрос.ОсновноеСредство.ГруппаОС В(&НедвижимоеИмущество)
	|	И НЕ ВложенныйЗапрос.ОсновноеСредство.АмортизационнаяГруппа В (&ПерваяВтораяАмортизационныеГруппы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния <= &КонецПериода
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	//|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&КонецПериодаГраница,
	//|			Организация = &Организация
	//|				И 
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер КАК УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	ЕСТЬNULL(ОсновныеСредства.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	ЕСТЬNULL(ОсновныеСредства.ШифрПоЕНАОФ, """") КАК ШифрПоЕНАОФ
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ОсновныеСредства.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ИнвентарныйНомер, """"),
	|	ЕСТЬNULL(ОсновныеСредства.КодПоОКОФ.Код, """"),
	|	ЕСТЬNULL(ОсновныеСредства.ШифрПоЕНАОФ, """")";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		СтраницаРаздел21.П000210001001 = ?(ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения),
		                                   Выборка.КадастровыйНомерПомещения, Выборка.КадастровыйНомер);
		СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		Если Не ЗначениеЗаполнено(СтраницаРаздел21.П000210001001) И Не ЗначениеЗаполнено(СтраницаРаздел21.П000210002001) Тогда
			СтраницаРаздел21.П000210003001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(Выборка.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		Если Месяц(мДатаКонцаПериодаОтчета) = 3 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0104;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 6 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0107;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 9 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0110;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	
	// Заполнение раздела 3
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ВложенныйЗапрос.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ВложенныйЗапрос.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 =  Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел3 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
			НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
		
		ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
		
		ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
		СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
		СтраницаРаздел3.П000030001100 = "18210602010021000110";
		СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
		СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
		СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
		СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
		
		СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
		СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
		СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
		
		СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтраницаРаздел3.П000030006003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
		
		СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
		СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
		
		СтраницаРаздел3.П000030007003 = Выборка.НалоговаяСтавка;
		
		КоличествоМесяцевВПериоде = ?(Год(мДатаКонцаПериодаОтчета) < 2016, Месяц(мДатаКонцаПериодаОтчета), 3);
		Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < КоличествоМесяцевВПериоде Тогда 
			СтраницаРаздел3.П000030008003_Числ = Строка(Выборка.КоличествоМесяцевВладения);
			СтраницаРаздел3.П000030008003_Знам = Строка(КоличествоМесяцевВПериоде);
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030009003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030009003, "", ДополнительныеПараметры);
		
		Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
			СтраницаРаздел3.П000030010003_КодЛьготы = "2012500";
			СтраницаРаздел3.П000030011003 = Выборка.СуммаУменьшенияСуммыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030011003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030011003, "", ДополнительныеПараметры);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры
// } RGS LFedotova 18.04.2018 21:15:48 - вопрос SLI-0007538 


// { RGS MYurkevich 29.01.2015 13:38:09 - Обновление на 3.0.37.38
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер) Экспорт

	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Подразделение 		 	 = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Организация				 = ПараметрыОтчета.Организация; 	                    
	
	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= ПараметрыОтчета.КодНалоговогоОргана;
	КПП 		= ПараметрыОтчета.КПП;
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Если конфигурация БГУ 1.0, то выполним заполнение вторго раздела согласно алгоритма БГУ и далше делать ничего не будем.
	// РГ-Софт - Ничего не делаем
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	// РГ-Софт - Ничего не делаем  	             
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4.
	
	Раздел2 = Контейнер.Раздел2;
	
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;                      
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	// РГ-Софт Заполнение данными напрямую
	
	СтраницаРаздел2.П000020000101 		= 3;  						//КодВидаИмущества
	Попытка
		СтраницаРаздел2.П000020001001 	= Подразделение.КодПоОКТМО;	//было Выборка.КодПоОКАТО , теперь ОКТМО
	Исключение
		Сообщить("В конф. нет реквизита ОКТМО!");
	КонецПопытки;
	
	СтраницаРаздел2.П000020021003 			= 2.2; 					//Выборка.НалоговаяСтавка
	
	// РГ-СОфт - Специальный алгоритм
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	ДатаНачалаПериодаРасчета = мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаРасчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1));

	КварталОтчета = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"));
	ГодОтчета     = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг"));
	
	Период = ДатаНачалаПериодаРасчета;
	Счетчик = 1;
	ТекстОбъединяющегоЗапроса = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПринятияКУчету", Дата('20130101000000'));
	
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоНаименованию("USD"));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И СостоянияОСОрганизаций.ДатаСостояния >= ДАТАВРЕМЯ(2013, 1, 1)
	|	И НЕ СостоянияОСОрганизаций.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.МноголетниеНасаждения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОС";
	
	Запрос.Выполнить();
	
	
	Пока Период <= ДатаКонцаПериодаРасчета Цикл

		НомерМесяца = Месяц(Период);

		Запрос.УстановитьПараметр("Период", Период);
		//Изменил РГ-Софт - Иванов Антон - 2009-02-13
		Если НомерМесяца = 1 И Год(Период) = ГодОтчета + 1 Тогда
			//Устанавливаем дату не 01.01, а 31.12 23:58. В 23:59 могут быть перемещения
			Запрос.УстановитьПараметр("Период", Период-1-2*60);
		Иначе
			Запрос.УстановитьПараметр("Период", Период);
		КонецЕсли;
		
		Сообщить(Строка(Период));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							СостоянияОСОрганизаций.ОсновноеСредство
		|						ИЗ
		|							РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|						ГДЕ
		|							СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|							И СостоянияОСОрганизаций.ДатаСостояния < &Период
		|							И СостоянияОСОрганизаций.Организация = &Организация)
		|				И НЕ ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ОсновныеСредства.Ссылка
		|						ИЗ
		|							Справочник.ОсновныеСредства КАК ОсновныеСредства
		|						ГДЕ
		|							ОсновныеСредства.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение)
		|	И НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.АрендованноеОС";		
		
		Запрос.Выполнить();
		
		// Отладка
		Запрос.Текст = 
		"ВЫБРАТЬ
		| *
		|ИЗ СписокОС
		|УПОРЯДОЧИТЬ ПО 
		| СписокОС.ОсновноеСредство.Наименование";
		
		а= Запрос.Выполнить().Выгрузить();
		ы=ы;
		// Отладка
		              		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫБОР
		|		КОГДА СписокОС.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.МноголетниеНасаждения))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоНедвижимость,
		|	ВЫБОР
		|		КОГДА СписокОС.ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС
		|				ИЗ
		|					ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВключатьВНалоговуюБазу,
		|	" + Счетчик + " КАК Период,
		|	(ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)) * КурсыВалютСрезПоследних.Курс КАК ОстаточнаяСтоимость,
		|	ЕСТЬNULL(ЛьготированиеИмуществаСрезПоследних.ЛьготируемоеИмущество, ЛОЖЬ) КАК ОсвобождениеОтНалогообложения
		|ПОМЕСТИТЬ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
		|ИЗ
		|	СписокОС КАК СписокОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Период, ) КАК СтоимостьАмортизацияОСОстатки
		|		ПО СписокОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО СписокОС.ОсновноеСредство.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготированиеИмущества.СрезПоследних(&Период, ) КАК ЛьготированиеИмуществаСрезПоследних
		|		ПО СписокОС.ОсновноеСредство = ЛьготированиеИмуществаСрезПоследних.ОС";
				
		Запрос.Выполнить();
				
			
			Запрос.Текст = 
			"УНИЧТОЖИТЬ СписокОС";
			Запрос.Выполнить();
			
			ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			                              |",
										  "ОБЪЕДИНИТЬ ВСЕ
										  |ВЫБРАТЬ *
			                              |")
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ПОМЕСТИТЬ НалоговаяБазаПоНалогуНаИмущество
										  |",
										  "")
									  + "ИЗ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
			                            |ГДЕ
			                            |	ОстаточнаяСтоимость > 0
										|";
									                           
									
		Счетчик = Счетчик + 1;
	
		//Период  = ?(Счетчик = 13, КонецМесяца(Период), ДобавитьМесяц(Период, 1));  //Стандартный алгоритм
		Период = ДобавитьМесяц(Период,1);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОбъединяющегоЗапроса) Тогда
		Возврат;
	КонецЕсли;         
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	ПерваяСтраницаРаздела2 = Истина;
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗАпрос.Период КАК Период,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗАпрос.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
	|ИЗ
	|(ВЫБРАТЬ
	|	Период,
	|	ОстаточнаяСтоимость КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимость,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ЭтоНедвижимость = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимости,
	|	ВЫБОР КОГДА ВключатьВНалоговуюБазу = ИСТИНА И ЭтоНедвижимость = ИСТИНА И ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
    |ИЗ
	|	НалоговаяБазаПоНалогуНаИмущество) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Период
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	//РГ-СОФТ
	СтраницаРаздел2.П000020000101 = 3;  //КодВидаИмущества
	Попытка
		СтраницаРаздел2.П000020001001 = Подразделение.КодПоОКТМО;
	Исключение
		Сообщить("В конф. нет реквизита ОКТМО!");
	КонецПопытки;
	СтраницаРаздел2.П000020021003 = 2.2;  //Выборка.НалоговаяСтавка             
	
	ПерваяСтраница = Истина;	
	
	Пока Выборка.Следующий() Цикл			
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				СтраницаРаздел2 =  Раздел2[Раздел2.Количество()-1].Данные[0].Значение;
				
			Иначе                                        
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли; 		
			
			СтраницаРаздел2.П000020000101 = 3;  //КодВидаИмущества
			Попытка
				СтраницаРаздел2.П000020001001 =  Подразделение.КодПоОКТМО;
			Исключение
				Сообщить("В конф. нет реквизита ОКТМО!");
			КонецПопытки;
			
			СтраницаРаздел2.П000020021003 = 2.2;  //Выборка.НалоговаяСтавка   		
			
				
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		
			Если Выборка.Период = 1 Тогда
				
				СтраницаРаздел2.П000020002003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020002004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 2 Тогда

				СтраницаРаздел2.П000020003003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020003004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 3 Тогда

				СтраницаРаздел2.П000020004003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020004004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 4 Тогда

				СтраницаРаздел2.П000020005003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020005004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
			
			ИначеЕсли Выборка.Период = 5 Тогда
		                                                   
				СтраницаРаздел2.П000020006003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020006004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 6 Тогда
				
				СтраницаРаздел2.П000020007003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020007004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
 
			ИначеЕсли Выборка.Период = 7 Тогда
				
				СтраницаРаздел2.П000020008003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020008004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 8 Тогда
		
				СтраницаРаздел2.П000020009003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020009004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 9 Тогда

				СтраницаРаздел2.П000020010003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020010004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 10 Тогда
				
				СтраницаРаздел2.П000020011003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020011004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 11 Тогда
				
				СтраницаРаздел2.П000020012003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020012004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 12 Тогда
				
				СтраницаРаздел2.П000020013003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020013004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 13 Тогда
				
				СтраницаРаздел2.П000020014003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020014004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				СтраницаРаздел2.П000020014103 = Выборка.ОстаточнаяСтоимостьНедвижимости;
				СтраницаРаздел2.П000020014104 = Выборка.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества;

				СтраницаРаздел2.П000020027003 = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(мСсылкаНО) 
			 ИЛИ (мСсылкаНО.Код = Организация.КодНалоговогоОргана) Тогда
			 
				СуммаНалога = СтраницаРаздел2.П000020022003;
								
				СуммаЛьготы = СуммаНалога * (ПроцентУменьшенияСуммыНалога / 100);
							  
				СтраницаРаздел2.П000020024003_КодЛьготы = ?(СуммаЛьготы = 0, "", "2012000");
				СтраницаРаздел2.П000020025003 = Мин(СуммаНалога, СуммаЛьготы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;     	
	 	
	// Заполнение раздела 3
	
	// РГ-Софт - Раздел 3 в данной организации не заполняется. 
	// Справка:
	// Раздел 3 заполняется для имущества, налоговой базой для которого является кадастровая стоимость
	
КонецПроцедуры
// } RGS MYurkevich 29.01.2015 13:38:09 - Обновление на 3.0.37.38	

// { RGS LFedotova 12.02.2018 16:09:29 - вопрос SLI-0007489
// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2017Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003_1", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020027003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);

КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация = ПараметрыОтчета.Организация;
	// { RGS LFedotova 13.02.2018 23:10:54 - вопрос SLI-0007489
	Подразделение = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	// } RGS LFedotova 13.02.2018 23:11:10 - вопрос SLI-0007489
	
	// { RGS LFedotova 03.03.2018 20:08:31 - вопрос SLI-0007489
	//РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	Если НЕ Подразделение.Пустая() Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, "РегистрацияВНалоговомОргане, КодИМНС");
		РеквизитыОрганизации.Вставить("КодНалоговогоОргана",РеквизитыОрганизации.КодИМНС);
	Иначе	
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КонецЕсли; 
	// } RGS LFedotova 03.03.2018 20:08:33 - вопрос	SLI-0007489
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	
	// { RGS LFedotova 03.03.2018 20:11:17 - вопрос SLI-0007489
	//РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	Если НЕ Подразделение.Пустая() Тогда
		РегистрацияВНалоговомОргане = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	Иначе	
		РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	КонецЕсли; 
	// } RGS LFedotova 03.03.2018 20:11:21 - вопрос SLI-0007489
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(&Период, НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		// { RGS LFedotova 12.02.2018 20:51:39 - вопрос SLI-0007489
		//ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		// } RGS LFedotova 12.02.2018 20:52:07 - вопрос SLI-0007489
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружена ставка налога на имущество на %1 для %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
		// { RGS LFedotova 12.02.2018 20:51:39 - вопрос SLI-0007489
			//,Организация, ПутьКРегистру));
			,Организация));
		// } RGS LFedotova 12.02.2018 20:52:07 - вопрос SLI-0007489
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	// { RGS LFedotova 03.03.2018 20:17:13 - вопрос SLI-0007489
	Запрос.УстановитьПараметр("Подразделение", 			ПараметрыОтчета.Подразделение);
	// } RGS LFedotova 03.03.2018 20:17:31 - вопрос SLI-0007489
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНедвижимости КАК ОстаточнаяСтоимостьНедвижимости,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	//|	РасчетНалогаНаИмущество.Организация = &Организация
	|	РасчетНалогаНаИмущество.Организация = &Подразделение
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		// { RGS LFedotova 03.03.2018 20:22:49 - вопрос SLI-0007489
		//ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Подразделение, мДатаКонцаПериодаОтчета);
		// } RGS LFedotova 03.03.2018 20:22:55 - вопрос SLI-0007489
	КонецЕсли;
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		// { RGS LFedotova 12.02.2018 20:53:54 - вопрос SLI-0007489
		//ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		// } RGS LFedotova 12.02.2018 20:54:08 - вопрос SLI-0007489
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
		// { RGS LFedotova 12.02.2018 20:53:54 - вопрос SLI-0007489
				//|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				|%2'"),	СтрокаТаблицы.ОсновноеСредство));
		// } RGS LFedotova 12.02.2018 20:54:08 - вопрос SLI-0007489
				
		КонецЦикла;
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество как ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
	
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	СУММА(ВложенныйЗапрос.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.КБК = Льготы.КБК
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(ОстаточнаяСтоимостьНедвижимости),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	СУММА(СуммаАвансовыхПлатежей),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
		
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
				
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = КодВидаИмущества;
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100 = КБК;
			СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020020003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
					
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014103 = Число(СтраницаРаздел2.П000020014103) + Выборка.ОстаточнаяСтоимостьНедвижимости;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014104 = Число(СтраницаРаздел2.П000020014104) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНедвижимости, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020023003 = Число(СтраницаРаздел2.П000020023003) + Выборка.СуммаАвансовыхПлатежей;
						
			СтраницаРаздел2.П000020027003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
									
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
				СтраницаРаздел2.П000020024003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020025003 = Число(СтраницаРаздел2.П000020025003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020025003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020025003, "", ДополнительныеПараметры);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	
	НедвижимоеИмущество = Новый Массив;
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.Здания);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.Сооружения);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	НедвижимоеИмущество.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	
	Запрос.УстановитьПараметр("НедвижимоеИмущество", НедвижимоеИмущество);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|	И ВложенныйЗапрос.ОсновноеСредство.ГруппаОС В(&НедвижимоеИмущество)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния <= &КонецПериода
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	//|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&КонецПериодаГраница,
	//|			Организация = &Организация
	//|				И 
	|			ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер КАК УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	ЕСТЬNULL(ОсновныеСредства.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	ЕСТЬNULL(ОсновныеСредства.ШифрПоЕНАОФ, """") КАК ШифрПоЕНАОФ
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ОсновныеСредства.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ИнвентарныйНомер, """"),
	|	ЕСТЬNULL(ОсновныеСредства.КодПоОКОФ.Код, """"),
	|	ЕСТЬNULL(ОсновныеСредства.ШифрПоЕНАОФ, """")";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		СтраницаРаздел21.П000210001001 = ?(ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения),
		                                   Выборка.КадастровыйНомерПомещения, Выборка.КадастровыйНомер);
		СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		Если Не ЗначениеЗаполнено(СтраницаРаздел21.П000210001001) И Не ЗначениеЗаполнено(СтраницаРаздел21.П000210002001) Тогда
			СтраницаРаздел21.П000210003001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(Выборка.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа3112;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	// Заполнение раздела 3
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ВложенныйЗапрос.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ВложенныйЗапрос.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 = Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел3 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
				НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
				НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
				
				СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
			
			ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
			
			ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);

			СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
			СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел3.П000030001100 = "18210602010021000110";
			СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
			СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
			СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
			
			СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
			СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
			
			СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
			СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
			
			СтраницаРаздел3.П000030011003 = Выборка.СуммаАвансовыхПлатежей;
									
			СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел3.П000030007003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			
			СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
			СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
			
			СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
			
			Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < 12 Тогда
				СтраницаРаздел3.П000030009003_Числ = Строка(Выборка.КоличествоМесяцевВладения);
				СтраницаРаздел3.П000030009003_Знам = "12";
			КонецЕсли;
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
			
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда        
				
				СтраницаРаздел3.П000030012003_КодЛьготы = "2012500";
				СтраницаРаздел3.П000030013003 = Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры
// } RGS LFedotova 12.02.2018 16:14:49 - вопрос SLI-0007489 

#КонецОбласти

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
		  
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 	= ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение 	= ПравоеЗначение;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры 
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2013Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020027003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);

КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2011Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014104", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000100", Истина, Ложь);
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2007Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000100", Истина, Ложь);
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_КодЛьготы", Истина, Ложь);
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_Процент", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_Ставка", Истина, Ложь);
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
Процедура ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2013Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_Процент", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_Ставка", Истина, Ложь);
	
КонецПроцедуры
//<=

// { RGS MYurkevich 29.01.2015 14:47:11 - Обновление на 3.0.37.38
Процедура ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002303_1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002503_1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002703_1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002303_2", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002503_2", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002703_2", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002303_3", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002503_3", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002703_3", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_Основание", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_Основание", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003_Процент", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003_Основание", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003_Ставка", Истина, Ложь);
	
КонецПроцедуры
// } RGS MYurkevich 29.01.2015 14:47:11 - Обновление на 3.0.37.38	

// { RGS MYurkevich 29.01.2015 16:30:54 - Обновление на 3.0.37.38
Процедура ЗаполнитьОтчетТранспортныйНалогФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	             	
	ТранспортныйНалогЗаполнитьДанныеПоАвтотранспорту(ПараметрыОтчета, Контейнер); 	                                                              	
	
КонецПроцедуры
// } RGS MYurkevich 29.01.2015 16:30:54 - Обновление на 3.0.37.38	

// { RGS LFedotova 29.01.2018 21:41:25 - вопрос SLI-0007473
Процедура ЗаполнитьОтчетТранспортныйНалогФормаОтчета2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	             	
	ТранспортныйНалогЗаполнитьДанныеПоАвтотранспорту(ПараметрыОтчета, Контейнер); 	                                                              	
	
КонецПроцедуры
// } RGS LFedotova 29.01.2018 21:41:45 - вопрос SLI-0007473

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
////////////////////////////////////////////////////////////////////////////////
// РГ-СОФТ

//Добавил - РГ-Софт - Иванов Антон - 2008-11-07
//Для процедуры заполнения, написанная Трефиленковым
//Я изменил только вызов функций модуля РегламентированнаяОтчетность
Процедура ТранспортныйНалогЗаполнитьДанныеПоАвтотранспорту(ПараметрыОтчета, Контейнер)

	Перем ТекущаяОбласть; 
	
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Подразделение 		 	 = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Организация				 = ПараметрыОтчета.Организация; 
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	
	Раздел1 = Контейнер.Раздел1;
	СтраницаРаздел1 =  Раздел1[0].Данные[0].Значение;
	
	мТаблицаСоответствияСтавок = Новый ТаблицаЗначений;
	мТаблицаСоответствияСтавок.Колонки.Добавить("Ставка");
	мТаблицаСоответствияСтавок.Колонки.Добавить("КодВида");
	Область = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("СоответствиеСтавок").ПолучитьОбласть("Ставки");
	Для ф=1 по 83 Цикл                         
		СтрокаТаблицы = мТаблицаСоответствияСтавок.Добавить();
		СтрокаТаблицы.Ставка = СокрЛП(Область.Область(ф, 1).Текст);
		СтрокаТаблицы.КодВида = СокрЛП(Область.Область(ф, 2).Текст);
	КонецЦикла; 	    
	
	Запрос = Новый Запрос();
	ЧислоМесяцев = Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) + 1;
	Текст = "";              
	For i = 0 To ЧислоМесяцев-1 Do
		Текст = Текст + "
				   |		ВЫБРАТЬ
	               |			РегистрацияВГАИСрезПоследних.ОС КАК ОС,
	               |			РегистрацияВГАИСрезПоследних.Локация КАК Локация,
	               |			РегистрацияВГАИСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
	               |			&Дата"+ i +"Кон КАК Период
	               |		ИЗ
	               |			РегистрСведений.РегистрацияВГАИ.СрезПоследних(&Дата"+ i +"Нач, ) КАК РегистрацияВГАИСрезПоследних
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			РегистрацияВГАИСрезПоследних.ОС,
	               |			РегистрацияВГАИСрезПоследних.Локация,
	               |			РегистрацияВГАИСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
	               |			&Дата"+ i +"Кон КАК Период
	               |		ИЗ
	               |			РегистрСведений.РегистрацияВГАИ.СрезПоследних(&Дата"+ i +"Кон, ) КАК РегистрацияВГАИСрезПоследних
	               |";
		Период = ДобавитьМесяц(мДатаНачалаПериодаОтчета,i);
		//Запрос.УстановитьПараметр("Дата"+ i +"Нач",Новый Граница(НачалоМесяца(Период),ВидГраницы.Включая));
		//изменила Федотова Л., РГ-Софт, 23.03.10, так как не учитывались в месяце выбытия ОС, 
		//снятые с учета первого числа месяца
		Запрос.УстановитьПараметр("Дата"+ i +"Нач",Новый Граница(НачалоМесяца(Период),ВидГраницы.Исключая));
		
		Запрос.УстановитьПараметр("Дата"+ i +"Кон", КонецМесяца(Период));
		Если i<> ЧислоМесяцев-1 Тогда
			Текст = Текст + "
	               |		ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
	Enddo;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка КАК ОС,
	               |	ОсновныеСредства.Мощность,
	               |	ОсновныеСредства.РегистрационныйНомер,
	               |	ОсновныеСредства.Марка,
	               |	ОсновныеСредства.НомерПаспорта,
	               |	ОсновныеСредства.ДатаВыпуска,  
	               |	ВложенныйЗапрос.Период КАК КоличествоМесяцев,
	               |	ВложенныйЗапрос.РегистрационныйЗнак КАК РегистрационныйЗнак,
	               |	ОсновныеСредства.ВидТранспортногоСредства.Код КАК Код
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ВложенныйЗапрос.ОС КАК ОС,
	               |		ВложенныйЗапрос.Локация КАК Локация,
	               |		ВложенныйЗапрос.РегистрационныйЗнак КАК РегистрационныйЗнак,
	               |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Период) КАК Период
	               |	ИЗ
	               |		("+Текст+") КАК ВложенныйЗапрос
				   |	СГРУППИРОВАТЬ ПО
				   |	ВложенныйЗапрос.ОС,
				   |	ВложенныйЗапрос.Локация,
				   |	ВложенныйЗапрос.РегистрационныйЗнак) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ПО ВложенныйЗапрос.ОС = ОсновныеСредства.Ссылка
	               |ГДЕ
	               |	ОсновныеСредства.Автотранспорт = ИСТИНА
	               |	И ОсновныеСредства.Мощность > 0
	               |	И ВложенныйЗапрос.Локация В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	СписокОС = Запрос.Выполнить().Выгрузить();  
	
	мКодыОКЕИ = ТранспортныйНалогПоказателиСписковВыбора2014Кв1("КодыОКЕИ");
	
	n = 1;
	
	Для каждого СтрокаОС Из СписокОС Цикл
		
		Если n > 1 Тогда       
			
			Раздел2.Добавить().Данные = Новый СписокЗначений();
			НомерТекущейСтраницыРаздел2 = Раздел2.Количество()-1;
			
			СтруктураНовойТаблицыМногостраничныхРазделов = Новый Структура();
			Для Каждого Показатель Из Раздел2[0].Данные[0].Значение Цикл
				Если Неопределено = Показатель.Значение Тогда 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ);
				Иначе 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЕсли;
			КонецЦикла;
			
			Раздел2[НомерТекущейСтраницыРаздел2].Данные.Добавить(СтруктураНовойТаблицыМногостраничныхРазделов); 
			Раздел2Текущий = Раздел2[НомерТекущейСтраницыРаздел2];
			СтраницаРаздел2 =  Раздел2Текущий.Данные[0].Значение;  			
					
		КонецЕсли;
		
		ТранспортныйНалогЗаполнитьСтрокуРаздела2(ПараметрыОтчета, Контейнер, СтраницаРаздел2, СтрокаОС, n, мТаблицаСоответствияСтавок, мКодыОКЕИ);
		
		n=n+1;
		                           
	КонецЦикла;
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
//Добавил - РГ-Софт - Иванов Антон - 2008-11-07
//Для процедуры заполнения, написанная Трефиленковым
Процедура ТранспортныйНалогЗаполнитьСтрокуРаздела2(ПараметрыОтчета, Контейнер, СтраницаРаздел2, ОС, i, мТаблицаСоответствияСтавок, мКодыОКЕИ)
	                                    
	ДатаПодписи 	= ПараметрыОтчета.ДатаПодписи; 
	Подразделение 	= ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	//30.01.14             
	СтраницаРаздел2.П000020002003 = Подразделение.КодПоОКТМО;
	СтраницаРаздел2.П000020003003 = ОС.Код;
	СтраницаРаздел2.П000020004003 = ОС.НомерПаспорта;
	СтраницаРаздел2.П000020005003 = ОС.Марка;
	СтраницаРаздел2.П000020006003 = ОС.РегистрационныйЗнак;
	
	Если ПараметрыОтчета.мДатаНачалаПериодаОтчета < '2017.01.01' Тогда
		СтраницаРаздел2.П000020007003 = ОС.Мощность;
		//устанавливаем л.с.      
		Результат = мКодыОКЕИ.Найти("251", "Код"); 
		Если Результат <> Неопределено Тогда
			СтраницаРаздел2.П000020008003 = Результат.Получить(0);
		Конецесли;

		СтраницаРаздел2.П000020011003 = ОС.КоличествоМесяцев;
		//ставка налога
		//Добавил - РГ-Софт - Пронин Иван - 2009-10-15
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			НайтиПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Москва общ");
			Если Не ЗначениеЗаполнено(НайтиПодразделение) Тогда
				Сообщить("Не найдено подразделение ""Мосва общая""!", СтатусСообщения.Внимание);
				СрокПолезногоИспользования = Неопределено;
				
			Иначе
				//опрелеление главного элемента в иерархии
				Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Если ЗначениеЗаполнено(Подразделение.Родитель) Тогда
					пРодитель = Подразделение.Родитель;
					Пока ЗначениеЗаполнено(пРодитель) Цикл
						Родитель = пРодитель;
						пРодитель = Родитель.Родитель;
					КонецЦикла;
				Иначе
					Родитель = Подразделение;
				КонецЕсли;
				
				Если НайтиПодразделение = Родитель Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	НачислениеАмортизацииСрезПоследних.СрокПолезногоИспользованияБУ
					|ИЗ
					|	РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииСрезПоследних";
					Запрос.УстановитьПараметр("Дата", ДатаПодписи);
					Запрос.УстановитьПараметр("ОсновноеСредство", ОС.ОС);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Если Выборка.Следующий() Тогда
						СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияБУ;	
					Иначе
						Сообщить("Для данного ОС """ + Строка(ОС) + """ срок полезного использования не найден.", СтатусСообщения.Информация);
					    СрокПолезногоИспользования = Неопределено;
					КонецЕсли;
					
				Иначе
					
					СрокПолезногоИспользования = Неопределено;
					
				КонецЕсли;			
				
			КонецЕсли;
			
			
		Иначе
			
			Сообщить("Подразделение не заполнено!", СтатусСообщения.Внимание);
			СрокПолезногоИспользования = Неопределено;
			
		КонецЕсли;
		
		//Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640 
		СрокСДатыИзготовления = Год(ДатаПодписи) - Год(ОС.ДатаВыпуска);
		
		//Добавила параметр СрокСДатыИзготовления Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640 
		мСтавкаНал = ТранспортныйНалогПолучитьСтавкуНалога(ПараметрыОтчета, ОС.Код, ОС.Мощность, СрокПолезногоИспользования, СрокСдатыИзготовления, мТаблицаСоответствияСтавок);
		//Если мСтавкаНал = 0 Тогда
		//	НачЗначениеСтр = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку("", 15, " "); // очистим квадратики
		//Иначе
		//	НачЗначение = СтрЗаменить(Строка(мСтавкаНал), Символ(160), "");
		//	НачЗначениеСтр = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НачЗначение + ?(Цел(мСтавкаНал) = мСтавкаНал, ".00",""), 15, " ");
		//КонецЕсли;
		//СтраницаРаздел2.П000020014003 = НачЗначениеСтр;  //П000020013003
		СтраницаРаздел2.П000020014003 = мСтавкаНал;  //П000020013003
		
		
		//Обновление рег. Отчетности на бух. Корп 3.0.36.18  
		СтраницаРаздел2.П000020020003 = 0; 			  //П000020018003 - было
		СтраницаРаздел2.П000020022003 = 0;            //П000020020003
		СтраницаРаздел2.П000020024003 = 0;            //П000020022003
		СтраницаРаздел2.П000020019003_КодЛьготы = ""; //П000020017003_КодЛьготы
		СтраницаРаздел2.П000020019003_Основание = ""; //П000020017003_Основание       
		СтраницаРаздел2.П000020021003_КодЛьготы = ""; //П000020019003_КодЛьготы                  
		СтраницаРаздел2.П000020021003_Основание = ""; //П000020019003_Основание
		СтраницаРаздел2.П000020021003_Процент   = 0;  //П000020019003_Процент
		СтраницаРаздел2.П000020023003_КодЛьготы = ""; //П000020021003_КодЛьготы
		СтраницаРаздел2.П000020023003_Основание = ""; //П000020021003_Основание
		СтраницаРаздел2.П000020023003_Ставка    = 0;  //П000020021003_Ставка
		//<=       	
		
		//Обновление рег. Отчетности на бух. Корп 3.0.36.18
		СтраницаРаздел2.П000020012003_Числ = 1;
		СтраницаРаздел2.П000020012003_Знам = 1;
		//<=
	Иначе
		СтраницаРаздел2.П000020009003 = ОС.Мощность;
		
		//устанавливаем л.с.      
		Результат = мКодыОКЕИ.Найти("251", "Код"); 
		Если Результат <> Неопределено Тогда
			СтраницаРаздел2.П000020010003 = Результат.Получить(0);
		Конецесли;
		
		СтраницаРаздел2.П000020014003 = ОС.КоличествоМесяцев;
		//ставка налога
		//Добавил - РГ-Софт - Пронин Иван - 2009-10-15
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			НайтиПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Москва общ");
			Если Не ЗначениеЗаполнено(НайтиПодразделение) Тогда
				Сообщить("Не найдено подразделение ""Мосва общая""!", СтатусСообщения.Внимание);
				СрокПолезногоИспользования = Неопределено;
			Иначе
				//опрелеление главного элемента в иерархии
				Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Если ЗначениеЗаполнено(Подразделение.Родитель) Тогда
					пРодитель = Подразделение.Родитель;
					Пока ЗначениеЗаполнено(пРодитель) Цикл
						Родитель = пРодитель;
						пРодитель = Родитель.Родитель;
					КонецЦикла;
				Иначе
					Родитель = Подразделение;
				КонецЕсли;
				
				Если НайтиПодразделение = Родитель Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	НачислениеАмортизацииСрезПоследних.СрокПолезногоИспользованияБУ
					|ИЗ
					|	РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииСрезПоследних";
					Запрос.УстановитьПараметр("Дата", ДатаПодписи);
					Запрос.УстановитьПараметр("ОсновноеСредство", ОС.ОС);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Если Выборка.Следующий() Тогда
						СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияБУ;	
					Иначе
						Сообщить("Для данного ОС """ + Строка(ОС) + """ срок полезного использования не найден.", СтатусСообщения.Информация);
						СрокПолезногоИспользования = Неопределено;
					КонецЕсли;
					
				Иначе
					
					СрокПолезногоИспользования = Неопределено;
					
				КонецЕсли;			
				
			КонецЕсли;
		Иначе
			Сообщить("Подразделение не заполнено!", СтатусСообщения.Внимание);
			СрокПолезногоИспользования = Неопределено;
			
		КонецЕсли;
		
		//Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640 
		СрокСДатыИзготовления = Год(ДатаПодписи) - Год(ОС.ДатаВыпуска);
		
		//Добавила параметр СрокСДатыИзготовления Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640 
		мСтавкаНал = ТранспортныйНалогПолучитьСтавкуНалога(ПараметрыОтчета, ОС.Код, ОС.Мощность, СрокПолезногоИспользования, СрокСдатыИзготовления, мТаблицаСоответствияСтавок);
		СтраницаРаздел2.П000020017003 = мСтавкаНал;  	
		СтраницаРаздел2.П000020020003 = 0; 			  
		//СтраницаРаздел2.П000020022003 = 0;            
		//СтраницаРаздел2.П000020024003 = 0;            
		СтраницаРаздел2.П000020022003_КодЛьготы = ""; 
		СтраницаРаздел2.П000020022003_Основание = "";        
		СтраницаРаздел2.П000020024003_КодЛьготы = "";                  
		СтраницаРаздел2.П000020024003_Основание = ""; 
		СтраницаРаздел2.П000020024003_Процент   = 0;  
		СтраницаРаздел2.П000020026003_КодЛьготы = ""; 
		СтраницаРаздел2.П000020026003_Основание = ""; 
		СтраницаРаздел2.П000020026003_Ставка    = 0;  
		СтраницаРаздел2.П000020015003_Числ = 1;
		СтраницаРаздел2.П000020015003_Знам = 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияВГАИ.Период КАК Период,
		|	РегистрацияВГАИ.Локация,
		|	РегистрацияВГАИ.Локация.Родитель,
		|	РегистрацияВГАИ.Локация.Родитель.Родитель
		|ИЗ
		|	РегистрСведений.РегистрацияВГАИ КАК РегистрацияВГАИ
		|ГДЕ
		|	РегистрацияВГАИ.ОС = &ОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("ОС", ОС.ОС);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДатаРегистрации = Дата(1,1,1);	
		ДатаПрекращенияРегистрации = Дата(1,1,1);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
				ДатаПрекращенияРегистрации = ВыборкаДетальныеЗаписи.Период;
			КонецЕсли; 
			Если ВыборкаДетальныеЗаписи.Локация = Подразделение ИЛИ ВыборкаДетальныеЗаписи.ЛокацияРодитель = Подразделение
				ИЛИ ВыборкаДетальныеЗаписи.ЛокацияРодительРодитель = Подразделение Тогда
				ДатаРегистрации	= ВыборкаДетальныеЗаписи.Период;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		СтраницаРаздел2.П000020007003 = ДатаРегистрации;
		СтраницаРаздел2.П000020008003 = ДатаПрекращенияРегистрации;
		
		//СтраницаРаздел2.П000020011003 = ВыборкаТранспортныхСредств.ЭкологическийКласс;
		//СтраницаРаздел2.П000020012003 = ВыборкаТранспортныхСредств.КоличествоЛетПрошедшихСГодаВыпускаТС;
		
		Если ЗначениеЗаполнено(ОС.ДатаВыпуска) Тогда
			СтраницаРаздел2.П000020013003 = Формат(ОС.ДатаВыпуска, "ДФ=гггг");
		КонецЕсли;
		
		//СтраницаРаздел2.П000020014003 = ВыборкаТранспортныхСредств.КоличествоМесяцевВладения;
		//СтраницаРаздел2.П000020015003_Числ = ВыборкаТранспортныхСредств.ДоляВПравеОбщейСобственностиЧислитель;
		//СтраницаРаздел2.П000020015003_Знам = ВыборкаТранспортныхСредств.ДоляВПравеОбщейСобственностиЗнаменатель;
		//СтраницаРаздел2.П000020017003 = ВыборкаТранспортныхСредств.НалоговаяСтавка;
		//СтраницаРаздел2.П000020018003 = ВыборкаТранспортныхСредств.ПовышающийКоэффициент;
		//СтраницаРаздел2.П000020020003 = ВыборкаТранспортныхСредств.КоличествоМесяцевЛьготы;
		
		СтраницаРаздел2.П000020022003_КодЛьготы = "";
		СтраницаРаздел2.П000020022003_Основание = "";
		СтраницаРаздел2.П000020023003 = 0;
		СтраницаРаздел2.П000020024003_КодЛьготы = "";
		СтраницаРаздел2.П000020024003_Основание = "";
		СтраницаРаздел2.П000020024003_Процент 	= 0;
		СтраницаРаздел2.П000020025003 = 0;
		СтраницаРаздел2.П000020026003_КодЛьготы = "";
		СтраницаРаздел2.П000020026003_Основание = "";
		СтраницаРаздел2.П000020026003_Ставка 	= 0;
		СтраницаРаздел2.П000020030003 = 0;
		
		//Если ВыборкаТранспортныхСредств.КодНалоговойЛьготы  = "20230" Тогда
		//	СтраницаРаздел2.П000020026003_КодЛьготы = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
		//	СтраницаРаздел2.П000020026003_Основание = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
		//	Если ВыборкаТранспортныхСредств.ЛьготнаяСтавка < ВыборкаТранспортныхСредств.НалоговаяСтавка Тогда 
		//		СтраницаРаздел2.П000020026003_Ставка = ВыборкаТранспортныхСредств.ЛьготнаяСтавка;
		//	КонецЕсли;
		//ИначеЕсли ВыборкаТранспортныхСредств.КодНалоговойЛьготы  = "20220" Тогда 
		//	СтраницаРаздел2.П000020024003_КодЛьготы = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
		//	СтраницаРаздел2.П000020024003_Основание = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
		//	Если ВыборкаТранспортныхСредств.ПроцентУменьшения > 0 И ВыборкаТранспортныхСредств.ПроцентУменьшения < 100 Тогда 
		//		СтраницаРаздел2.П000020024003_Процент = ВыборкаТранспортныхСредств.ПроцентУменьшения;
		//	КонецЕсли;
		//Иначе
		//	СтраницаРаздел2.П000020022003_КодЛьготы = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
		//	СтраницаРаздел2.П000020022003_Основание = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
		//КонецЕсли;
		
		СтраницаРаздел2.П000020028003 = "";
		СтраницаРаздел2.П000020029003 = 0;
		
		//Если ВыборкаТранспортныхСредств.СуммаНалоговогоВычета > 0 Тогда
		//	СтраницаРаздел2.П000020028003 = "40200";
		//	СтраницаРаздел2.П000020029003 = ВыборкаТранспортныхСредств.СуммаНалоговогоВычета;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
//Добавил - РГ-Софт - Иванов Антон - 2008-11-07
//Для процедуры заполнения, написанная Трефиленковым
Функция ТранспортныйНалогПолучитьСтавкуНалога(ПараметрыОтчета, Код, Мощность, СрокПолезногоИспользования, СрокСдатыИзготовления, мТаблицаСоответствияСтавок)

	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета; 	
	ДатаПодписи 			 = ПараметрыОтчета.ДатаПодписи; 
	Подразделение 			 = ?(ПараметрыОтчета.Свойство("Подразделение"), ПараметрыОтчета.Подразделение,Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо70,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо70Более3лет,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо85,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо85Более3лет,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо100Более3лет,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо125,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо150,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо175,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо225,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеСвыше250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыДо20,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыДо35,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыСвыше35,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо150,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеСвыше250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо110,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо130,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыСвыше200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ДругиеСамоходные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ДругиеСамоходныеСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СнегоходыДо50,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СнегоходыСвыше50,
	               |	СтавкиТранспортногоНалогаСрезПоследних.КатераДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.КатераСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЯхтыДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЯхтыСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГидроциклыДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГидроциклыСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Несамоходные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СамолетыРеактивные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Самолеты,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Другие,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо110После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо130После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыСвыше200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо100После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо150После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо250После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеСвыше250После5
	               |ИЗ
	               |	РегистрСведений.СтавкиТранспортногоНалога.СрезПоследних(&Дата, ПодразделениеОрганизации = &Подразделение) КАК СтавкиТранспортногоНалогаСрезПоследних";
	//Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Дата", мДатаКонцаПериодаОтчета); //исправила Федотова Л., РГ-СОфт, 13.06.12
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Ставки = Запрос.Выполнить().Выбрать();
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
		
		Если Ставки.Следующий() Тогда
			//определяем ставку по коду вида т.с. и мощности
			СтрокаТЗ = мТаблицаСоответствияСтавок.Найти(Код, "КодВида");
			ИмяСтавки = СтрокаТЗ.Ставка;
			Если      ИмяСтавки = "Самолеты, вертолеты и иные воздушные суда, имеющие двигатели" Тогда
				Возврат Ставки.Самолеты; 
			ИначеЕсли ИмяСтавки = "Яхты и другие парусно-моторные суда" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ЯхтыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ЯхтыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Катера, моторные лодки и другие водные транспортные средства" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.КатераДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.КатераСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Гидроциклы" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГидроциклыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ГидроциклыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Несамоходные (буксируемые) суда, для которых определяется валовая вместимость" Тогда
				Возврат Ставки.Несамоходные; 
			ИначеЕсли ИмяСтавки = "Другие водные и воздушные транспортные средства, не имеющие двигателей" Тогда
				Возврат Ставки.Другие; 
			ИначеЕсли ИмяСтавки = "Автомобили легковые" Тогда
				//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
				Если      Мощность <= 70 Тогда
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо70Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо70; 
					КонецЕсли;	
				ИначеЕсли Мощность > 70 И Мощность <= 85 Тогда
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо85Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо85; 
					КонецЕсли;	
				ИначеЕсли Мощность > 85 И Мощность <= 100 Тогда
					//Добавила Федотова Л., РГ-Софт, 13.06.13, вопрос SLI-0003630
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо100Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо100; 
					КонецЕсли;	
				ИначеЕсли Мощность > 100 И Мощность <= 125 Тогда
					Возврат Ставки.ЛегковыеДо125; 
				ИначеЕсли Мощность > 125 И Мощность <= 150 Тогда
					Возврат Ставки.ЛегковыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 175 Тогда
					Возврат Ставки.ЛегковыеДо175; 
				ИначеЕсли Мощность > 175 И Мощность <= 200 Тогда
					Возврат Ставки.ЛегковыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 225 Тогда
					Возврат Ставки.ЛегковыеДо225; 
				ИначеЕсли Мощность > 225 И Мощность <= 250 Тогда
					Возврат Ставки.ЛегковыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ЛегковыеСвыше250; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Другие самоходные транспортные средства, машины и механизмы на пневматическом и гусеничном ходу" Тогда
				//Добавила условия Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640
				Если Мощность <= 100 Тогда
					Возврат Ставки.ДругиеСамоходные; 
				ИначеЕсли  Мощность > 100 Тогда
					Возврат Ставки.ДругиеСамоходныеСвыше100; 
				КонецЕсли;                            
			ИначеЕсли ИмяСтавки = "Автобусы" Тогда
				
				Если СрокПолезногоИспользования/12 > 5 Тогда
					Если      Мощность <= 110 Тогда
						Возврат Ставки.АвтобусыДо110После5; 
					//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
					ИначеЕсли Мощность > 110 И Мощность <= 130 Тогда
						Возврат Ставки.АвтобусыДо130После5; 
					ИначеЕсли Мощность > 130 И Мощность <= 200 Тогда
						Возврат Ставки.АвтобусыДо200После5; 
					ИначеЕсли Мощность > 200 Тогда
						Возврат Ставки.АвтобусыСвыше200После5; 
					КонецЕсли;	
				Иначе
					
					Если      Мощность <= 110 Тогда
						Возврат Ставки.АвтобусыДо110; 
					//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
					ИначеЕсли Мощность > 110 И Мощность <= 130 Тогда
						Возврат Ставки.АвтобусыДо130; 
					ИначеЕсли Мощность > 130 И Мощность <= 200 Тогда
						Возврат Ставки.АвтобусыДо200; 
					ИначеЕсли Мощность > 200 Тогда
						Возврат Ставки.АвтобусыСвыше200; 
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ИмяСтавки = "Мотоциклы и мотороллеры" Тогда
				Если      Мощность <= 20 Тогда
					Возврат Ставки.МотоциклыДо20; 
				ИначеЕсли Мощность > 20 И Мощность <= 35 Тогда
					Возврат Ставки.МотоциклыДо35; 
				ИначеЕсли Мощность > 35 Тогда
					Возврат Ставки.МотоциклыСвыше35; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Снегоходы, мотосани" Тогда
				Если      Мощность <= 50 Тогда
					Возврат Ставки.СнегоходыДо50; 
				ИначеЕсли Мощность > 50 Тогда
					Возврат Ставки.СнегоходыСвыше50; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Автомобили грузовые" Тогда
				Если СрокПолезногоИспользования/12 > 5 Тогда
					
					Если      Мощность <= 100 Тогда
						Возврат Ставки.ГрузовыеДо100После5; 
					ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
						Возврат Ставки.ГрузовыеДо150После5; 
					ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
						Возврат Ставки.ГрузовыеДо200После5; 
					ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
						Возврат Ставки.ГрузовыеДо250После5; 
					ИначеЕсли Мощность > 250 Тогда
						Возврат Ставки.ГрузовыеСвыше250После5; 
					КонецЕсли;
					
				Иначе
					
					Если      Мощность <= 100 Тогда
						Возврат Ставки.ГрузовыеДо100; 
					ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
						Возврат Ставки.ГрузовыеДо150; 
					ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
						Возврат Ставки.ГрузовыеДо200; 
					ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
						Возврат Ставки.ГрузовыеДо250; 
					ИначеЕсли Мощность > 250 Тогда
						Возврат Ставки.ГрузовыеСвыше250; 
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Сообщить("Не определена ставка для кода вида ТС: " + Код);
			КонецЕсли;	
			Возврат 13;
		Иначе
			Сообщить("Не заданы ставки налога для локации " + Подразделение);	
			Возврат 0;
		КонецЕсли;		
		
	Иначе
		
		Если Ставки.Следующий() Тогда
			//определяем ставку по коду вида т.с. и мощности
			СтрокаТЗ = мТаблицаСоответствияСтавок.Найти(Код, "КодВида");
			ИмяСтавки = СтрокаТЗ.Ставка;
			Если      ИмяСтавки = "Самолеты, вертолеты и иные воздушные суда, имеющие двигатели" Тогда
				Возврат Ставки.Самолеты; 
			ИначеЕсли ИмяСтавки = "Яхты и другие парусно-моторные суда" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ЯхтыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ЯхтыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Катера, моторные лодки и другие водные транспортные средства" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.КатераДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.КатераСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Гидроциклы" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГидроциклыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ГидроциклыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Несамоходные (буксируемые) суда, для которых определяется валовая вместимость" Тогда
				Возврат Ставки.Несамоходные; 
			ИначеЕсли ИмяСтавки = "Другие водные и воздушные транспортные средства, не имеющие двигателей" Тогда
				Возврат Ставки.Другие; 
			ИначеЕсли ИмяСтавки = "Автомобили легковые" Тогда
				//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
				Если      Мощность <= 70 Тогда
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо70Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо70; 
					КонецЕсли;	
				ИначеЕсли Мощность > 70 И Мощность <= 85 Тогда
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо85Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо85; 
					КонецЕсли;	
				ИначеЕсли Мощность > 85 И Мощность <= 100 Тогда
					//Добавила Федотова Л., РГ-Софт, 13.06.13, вопрос SLI-0003630
					Если СрокСДатыИзготовления >= 3 Тогда
						Возврат Ставки.ЛегковыеДо100Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо100; 
					КонецЕсли;	
				ИначеЕсли Мощность > 100 И Мощность <= 125 Тогда
					Возврат Ставки.ЛегковыеДо125; 
				ИначеЕсли Мощность > 125 И Мощность <= 150 Тогда
					Возврат Ставки.ЛегковыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 175 Тогда
					Возврат Ставки.ЛегковыеДо175; 
				ИначеЕсли Мощность > 175 И Мощность <= 200 Тогда
					Возврат Ставки.ЛегковыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 225 Тогда
					Возврат Ставки.ЛегковыеДо225; 
				ИначеЕсли Мощность > 225 И Мощность <= 250 Тогда
					Возврат Ставки.ЛегковыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ЛегковыеСвыше250; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Другие самоходные транспортные средства, машины и механизмы на пневматическом и гусеничном ходу" Тогда
				//Добавила условия Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003640
				Если Мощность <= 100 Тогда
					Возврат Ставки.ДругиеСамоходные; 
				ИначеЕсли  Мощность > 100 Тогда
					Возврат Ставки.ДругиеСамоходныеСвыше100; 
				КонецЕсли;                            
			ИначеЕсли ИмяСтавки = "Автобусы" Тогда
				Если      Мощность <= 110 Тогда
					Возврат Ставки.АвтобусыДо110; 
					//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
				ИначеЕсли Мощность > 110 И Мощность <= 130 Тогда
					Возврат Ставки.АвтобусыДо130; 
				ИначеЕсли Мощность > 130 И Мощность <= 200 Тогда
					Возврат Ставки.АвтобусыДо200; 
				ИначеЕсли Мощность > 200 Тогда
					Возврат Ставки.АвтобусыСвыше200; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Мотоциклы и мотороллеры" Тогда
				Если      Мощность <= 20 Тогда
					Возврат Ставки.МотоциклыДо20; 
				ИначеЕсли Мощность > 20 И Мощность <= 35 Тогда
					Возврат Ставки.МотоциклыДо35; 
				ИначеЕсли Мощность > 35 Тогда
					Возврат Ставки.МотоциклыСвыше35; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Снегоходы, мотосани" Тогда
				Если      Мощность <= 50 Тогда
					Возврат Ставки.СнегоходыДо50; 
				ИначеЕсли Мощность > 50 Тогда
					Возврат Ставки.СнегоходыСвыше50; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Автомобили грузовые" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГрузовыеДо100; 
				ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
					Возврат Ставки.ГрузовыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
					Возврат Ставки.ГрузовыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
					Возврат Ставки.ГрузовыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ГрузовыеСвыше250; 
				КонецЕсли;	
			Иначе
				Сообщить("Не определена ставка для кода вида ТС: " + Код);
			КонецЕсли;	
			Возврат 13;
		Иначе
			Сообщить("Не заданы ставки налога для локации " + Подразделение);	
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

КонецФункции
//<=

//Обновление рег. Отчетности на бух. Корп 3.0.36.18
// загружает данные стандартные данные из Макет.Списки
//
Функция ТранспортныйНалогПоказателиСписковВыбора2014Кв1(РазделВМакете)
		
	МакетСоставаПоказателей = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("СпискиВыбора2014Кв1");
	
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);
	
	ТаблицаЗначенийПоказателей = Новый ТаблицаЗначений;
	ТаблицаЗначенийПоказателей.Колонки.Добавить("Код");
	ТаблицаЗначенийПоказателей.Колонки.Добавить("Название");
	
	Если ТекОбласть <> Неопределено Тогда
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда				
				Возврат ТаблицаЗначенийПоказателей;
			Иначе				
				НовСтрока 			= ТаблицаЗначенийПоказателей.Добавить();
				НовСтрока.Код 		= КодПоказателя;
				НовСтрока.Название 	= Название;				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийПоказателей;
	
КонецФункции
//<=

// { RGS LFedotova 12.02.2018 16:33:28 - вопрос SLI-0007489
Функция ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана = Неопределено, КПП = Неопределено)
	
	НалоговыйОрган = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		КодыРегистрацииОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КодНалоговогоОргана, КПП");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Код", ?(ЗначениеЗаполнено(КодНалоговогоОргана), КодНалоговогоОргана, КодыРегистрацииОрганизации.КодНалоговогоОргана));
		Запрос.УстановитьПараметр("КПП", ?(ЗначениеЗаполнено(КПП), КПП, КодыРегистрацииОрганизации.КПП));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|				И Организации.ОбособленноеПодразделение
		|			ТОГДА Организации.ГоловнаяОрганизация
		|		ИНАЧЕ Организации.Ссылка
		|	КОНЕЦ КАК Организация
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрацииВНалоговомОргане.Ссылка,
		|	РегистрацииВНалоговомОргане.Владелец
		|ПОМЕСТИТЬ ВТ_РегистрацииВНалоговомОргане
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.ПометкаУдаления = ЛОЖЬ
		|	И РегистрацииВНалоговомОргане.Код = &Код
		|	И РегистрацииВНалоговомОргане.КПП = &КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РегистрацииВНалоговомОргане.Ссылка
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацииВНалоговомОргане КАК ВТ_РегистрацииВНалоговомОргане
		|		ПО ВТ_Организации.Организация = ВТ_РегистрацииВНалоговомОргане.Владелец";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НалоговыйОрган = Выборка.Ссылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НалоговыйОрган;
	
КонецФункции // ПолучитьРегистрациюВНалоговомОрганеПоОрганизации()
// } RGS LFedotova 12.02.2018 16:33:48 - вопрос SLI-0007489 

