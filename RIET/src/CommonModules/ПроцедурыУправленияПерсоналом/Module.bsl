///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(Знач Текст, Организация = "") Экспорт

	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;

	ТекстУсловияОрганизации = "";
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) Тогда
		ТекстУсловияОрганизации = " И Организация = &парамГоловнаяОрганизация";
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	РаботникиОрганизаций.Физлицо.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"" " + ТекстУсловияОрганизации +") КАК РаботникиОрганизаций";
	
	Запрос.Текст = ТекстЗапроса;

	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

	Возврат ТекстАвтоПодбора

КонецФункции // ПодобратьФИОРаботникаКандидата()

#Если Клиент Тогда

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Текст 		- строка - начало ФИО
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(Знач Текст, НачальноеЗначение, Организация = "") Экспорт

	Запрос = Новый Запрос;

	ТекстУсловияОрганизации = "";
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) Тогда
		ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	РаботникиОрганизаций.Физлицо КАК Ссылка,
	|	РаботникиОрганизаций.Физлицо.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"" " + ТекстУсловияОрганизации + ") КАК РаботникиОрганизаций";
	
	Запрос.Текст = ТекстЗапроса;

	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();

	Количество = Выборка.Количество();

	Если Количество = 0 Тогда

		ОбщегоНазначения.СообщитьОбОшибке("В поле ввода неверно задано наименование работника!");

		Возврат НачальноеЗначение;

	ИначеЕсли Количество < 51 Тогда

		Значение = Новый СписокЗначений;

		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;

		Возврат Значение;

	Иначе
		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПодобратьСписокРаботниковКандидатов()

#КонецЕсли

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

	МассивСтрок = Новый Массив();

	Если Разделитель = " " Тогда

		Стр = СокрЛП(Стр);

		Пока 1 = 1 Цикл

			Поз = СтрНайти(Стр,Разделитель);

			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));

		КонецЦикла;

	Иначе

		ДлинаРазделителя = СтрДлина(Разделитель);

		Пока 1 = 1 Цикл

			Поз = СтрНайти(Стр,Разделитель);
			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));

			Стр = Сред(Стр,Поз + ДлинаРазделителя);

		КонецЦикла;

	КонецЕсли;

КонецФункции // глРазложить

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);

	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе

		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")

	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия  = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя      = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции 

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции 

// Определяет размер часовой тарифной ставки на основании месячного оклада и других необходимых параметров
//
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеМесячнойСтавки(Оклад, ПродолжительностьРабочейНедели, ЧислоРабочихДнейВГоду, ЧислоПредпраздничныхДнейВГоду) Экспорт

	Если ПродолжительностьРабочейНедели = 40 Тогда
		СреднемесячноеКоличествоЧасов = (ЧислоРабочихДнейВГоду * 8 + ЧислоПредпраздничныхДнейВГоду * 7) / 12;

	Иначе
		СреднемесячноеКоличествоЧасов = ПродолжительностьРабочейНедели / 5 * (ЧислоРабочихДнейВГоду + ЧислоПредпраздничныхДнейВГоду) / 12;

	КонецЕсли;

	// расчет часовой ставки
	Возврат ?(СреднемесячноеКоличествоЧасов = 0, 0, Оклад / СреднемесячноеКоличествоЧасов);

КонецФункции

// Возвращает подразделение работника на дату начала события 
//
Функция ПодразделениеРаботникаНаДату(ФизЛицо, Приказ, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Приказ",  Приказ);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Физлицо = &ФизЛицо И Приказ = &Приказ) КАК РаботникиОрганизацийСрезПоследних
	|
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.Физлицо = &Физлицо";
	ПрежниеДанные = Запрос.Выполнить().Выбрать();

	Если ПрежниеДанные.Следующий() тогда
		Возврат ПрежниеДанные.ПодразделениеОрганизации; 
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 

	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);

	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Обеспечивает подблор данных по физлицу и организации
// подбираются приказ о приеме, подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//	Организация
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		Приказ
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ОбязательныйПодбор = Ложь, УчетнаяПолитикаПоПерсоналу) Экспорт

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	СписокСтруктурныхПодразделений = ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",СписокСтруктурныхПодразделений);

	// Выбор приказов о приеме на работу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Приказ КАК Приказ,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность КАК Должность,
	|	РаботникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
	|	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизаций.Должность.Наименование КАК ДолжностьНаименование,
	|	РаботникиОрганизаций.ТабельныйНомер
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Физлицо = &Физлицо И Организация В (&СписокСтруктурныхПодразделений)) КАК РаботникиОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизаций.Период";

	Запрос.Текст = ТекстЗапроса;

	НаборыДанных = Запрос.Выполнить().Выгрузить(); 

	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() = 0 Тогда
		
		Возврат НеОпределено; 

	ИначеЕсли НаборыДанных.Количество() = 1 И НЕ ОбязательныйПодбор Тогда  // Если нашли один набор данных то используем его
		Возврат НаборыДанных[0]; 

	Иначе  // Если набоов данных несколько - предложим выбрать из списка.

		СписокНаборовДанных = Новый СписокЗначений;

		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.ФизлицоНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;

		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);

		Если ВыбранныйНаборДанных = НеОпределено Тогда
			Возврат НеОпределено;

		Иначе
			Возврат ВыбранныйНаборДанных.Значение;

		КонецЕсли;

	КонецЕсли;

КонецФункции  // ПодборДанныхПоФизлицу

// проставляет в строку табличной части или реквизит формы полученные данные по физлицу
Процедура ПроставитьДанныеСтроки(НаборДанных, ЭлементФормы) Экспорт

	Если НаборДанных = НеОпределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда

		// поле Приказ есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Приказ") <> НеОпределено Тогда
			Если ЭлементФормы.ТекущаяСтрока <> НеОпределено Тогда
				ЭлементФормы.ТекущаяСтрока.Приказ = НаборДанных.Приказ;
			Иначе
				
			КонецЕсли;
		КонецЕсли;
		
		//ЭлементФормы.ТекущаяСтрока.Приказ = НаборДанных.Приказ;
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> НеОпределено Тогда
			Если ЭлементФормы.ТекущаяСтрока <> НеОпределено Тогда
				ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборДанных.ПодразделениеОрганизации;
			Иначе
				
			КонецЕсли;
		КонецЕсли;

	Иначе

		ЭлементФормы = НаборДанных.Приказ;

	КонецЕсли; 

КонецПроцедуры // ПроставитьДанныеСтроки

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемнт формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;

		Если СтрокаТЧ <> Неопределено Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ]    = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  //  СинхронизироватьСтроки

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ВКЛЮЧЕНИЕ (ВЫКЛЮЧЕНИЕ) ПОДДЕРЖКИ ВНУТРЕННОГО СОВМЕСТИТЕЛЬСТВА          
