
#Если Клиент Тогда

// Функция возвращает значение экспортных переменных модуля приложений
//
// Параметры
//  ИмяПеременной - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
//
// завершение работы только при условии удачной установки монопольного режима работы
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		Сообщить("Установлен режим завершения работы пользователей """ + Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно + """.", СтатусСообщения.Внимание);
		ЗавершитьРаботуСистемы(Ложь);
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно);
		Возврат;
	КонецЕсли; 
	
	ТекущийРежимЗавершения = Константы.РежимЗавершенияРаботыПользователей.Получить();
	
	Если ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.РазрешитьРаботу Тогда
		
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы Тогда
		
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей Тогда
		
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно);
		
	ИначеЕсли ТекущийРежимЗавершения = Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно Тогда
			
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		ПодстрокиСтрокиСоединения  = ПроцедурыУправленияПерсоналом.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
		
		Если ПодстрокиСтрокиСоединения.Количество()> 1 и Лев(ПодстрокиСтрокиСоединения[0], 5) = "Srvr=" и Лев(ПодстрокиСтрокиСоединения[1], 4) = "Ref=" Тогда
			
			ИмяСервера = Сред(ПодстрокиСтрокиСоединения[0],7, СтрДлина(ПодстрокиСтрокиСоединения[0]) - 7);
			ИмяИБ      = Сред(ПодстрокиСтрокиСоединения[1],6, СтрДлина(ПодстрокиСтрокиСоединения[1]) - 6);
			
			Попытка
				connector = Новый COMОбъект("V8.ComConnector");
				server = connector.ConnectServer(ИмяСервера);
				
				ПодстрокиПараметровЗапуска = ПроцедурыУправленияПерсоналом.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
				Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
					server.AddAuthentication(ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
				КонецЕсли;
				
				ibDesc = server.CreateInfoBaseInfo();
				ibDesc.Name = ИмяИБ;
				connections = server.GetIBConnections(ibDesc);
				
				Для каждого connection Из connections Цикл
					
					Если Не ИмяПользователя() = connection.userName Тогда
						server.Disconnect(connection);
					КонецЕсли; 
					
				КонецЦикла;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки; 
			
		КонецЕсли;
		
		Соединения = ПолучитьСоединенияИнформационнойБазы();
		Если Соединения.Количество() > 1 Тогда
			
			Сообщение = "Не удалось завершить работу пользователей:";
			
			Для каждого Соединение Из Соединения Цикл
				Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
					Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
				КонецЕсли;
			КонецЦикла; 
			
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Иначе
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
		
	Иначе 
		
		Константы.РежимЗавершенияРаботыПользователей.Установить(Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы);
		
	КонецЕсли;
	
	ТекущийРежимЗавершения = Константы.РежимЗавершенияРаботыПользователей.Получить();
	Сообщить("Установлен режим завершения работы пользователей """ + ТекущийРежимЗавершения + """.", СтатусСообщения.Внимание);
		
КонецПроцедуры

// процедура контроля завершения работы программы
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт    

	ТекущийРежим = Константы.РежимЗавершенияРаботыПользователей.Получить();  
	
	Если ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ПредупредитьПользователейОЗавершенииРаботы Тогда
		Предупреждение("Предупреждение о завершении работы. " + Константы.СообщениеЗавершенияРаботы.Получить(), 30, "Завершение работы системы");
	ИначеЕсли ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ЗавершитьССохранениемДанныхПользователей Тогда
		Предупреждение("Работа системы будет завершена! " + Константы.СообщениеЗавершенияРаботы.Получить(), 10, "Завершение работы системы");
		ЗавершитьРаботуСистемы(Истина);
	ИначеЕсли ТекущийРежим = Перечисления.РежимыЗавершенияРаботыПользователей.ПрекратитьРаботуБезусловно Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецЕсли

#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда

// Функция возвращает значение экспортных переменных модуля приложений
//
// Параметры
//  ИмяПеременной - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
//
Функция глЗначениеПеременной(ИмяПеременной) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	КэшИзменен = Ложь;
	ПолученноеЗначение = ОбщегоНазначения.ПолучитьЗначениеПеременной(ИмяПеременной, Кэш, КэшИзменен);
	
	Если КэшИзменен Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	      
КонецФункции

#КонецЕсли
