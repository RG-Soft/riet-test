/////////////////////////////////////////////////////////////
//ВЕРСИЯ ПРОЦЕДУР И ФУНКЦИЙ ОБЛАСТИ "ТиповаяБухгалтерия": БУХ. КОРП. 3.0.38.42 бета

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;

	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
		
	// Добавлено Булавский РГ-Софт 17_06_2012	
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС12 Тогда
		Возврат 12;
	// конец добавления

	КонецЕсли;

	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенности(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", СпособСтроительства = Неопределено, ЭтоУслуга = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
	Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
		ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	КонецЕсли;
	
	Если ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;

	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда	
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
			
		Если ВидЦенности = Неопределено Тогда
			ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
			Если  СчетУчета = "нет" Или Не ЗначениеЗаполнено(СчетУчета) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			ИначеЕсли  СчетУчета = ПланСчетовБУ.Материалы ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.Материалы) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			ИначеЕсли СчетУчета = ПланСчетовБУ.ОборудованиеКУстановке ИЛИ СчетУчета = ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств
				ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ОборудованиеКУстановке) ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ОС;
			//ИначеЕсли СчетУчета = ПланСчетовБУ.ПриобретениеНематериальныхАктивов   DELETE
			//	ИЛИ СчетУчета.ПринадлежитЭлементу(ПланСчетовБУ.ПриобретениеНематериальныхАктивов)   Тогда
			//	ВидЦенности = Перечисления.ВидыЦенностей.НМА;
			Иначе 
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;

		Если ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
			Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
				ЭтоУслуга = Объект.Услуга;
			КонецЕсли;
			Если ЭтоУслуга Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;	
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;	
			КонецЕсли;                                       
		КонецЕсли;
		ВидыЦенностейПоСчетамУчета.Вставить(СчетУчета, ВидЦенности);
			
	//ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда	
	//	ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда	
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда	
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству 
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе	
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;
		
	Иначе	
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенности()

// Функция определяет объект учета (ценность) в строке табличной части.
// Сама табличная часть задается в параметре ТаблицаЗначений. В результате 
// анализа этой табличной части определяется из какой именно колонки нужно 
// взять объект учета.
Функция ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений) Экспорт

	Ценность = "";

	Если ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.Номенклатура;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОбъектСтроительства") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.ОбъектСтроительства;

	ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
		Ценность = СтрокаТаблицы.НематериальныйАктив;

	КонецЕсли;

	Возврат Ценность;

КонецФункции // ОпределитьЦенностьИзСтрокиТабличнойЧасти()

// Функция определяет вид ценнности по переданным в нее субконто счета учета.
// 
Функция ПолучитьЦенностьПоСубконто(Субконто1, Субконто2, Субконто3) Экспорт

	ВидЦенности = Неопределено;

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);

	Для каждого Субконто Из МассивСубконто Цикл

		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			ВидЦенности = Субконто;

		//ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда   DELETE
		//	ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			ВидЦенности = Субконто;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЦенности = Субконто;
			
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЦенности = Субконто;
			
		КонецЕсли; 

		// Если вид ценности определен, то прекращаем поиск
		Если ВидЦенности <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ВидЦенности;

КонецФункции // ПолучитьЦенностьПоСубконто()

// Функция для выбора подчиненных счетов-фактур на аванс по ссылке на документ оплаты
// Помимо списка документов получает дополнительные реквизиты (договор, ставка НДС)
Функция ВыбратьПодчиненныеСФНаАванс(ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда

		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.ДоговорКонтрагента,
		|	СчетФактураВыданный.СтавкаНДС
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументСсылка
		|	И СчетФактураВыданный.НаАванс = ИСТИНА
		|	И (НЕ СчетФактураВыданный.ПометкаУдаления)";

		Результат = Запрос.Выполнить().Выгрузить();

	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбщегоНазначения.НайтиПодчиненныйДокумент()

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Расчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РаспределитьСуммуПоСтолбцу()

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШапкиДокумента, ТаблицаЗначений) Экспорт

	ВидыЦенностейПоСчетамУчета = Неопределено;
	ЕстьКолонкаУслуга = ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СчетУчетаЦенности = "";
        СпособСтроительства = Неопределено;
		
		Если ТаблицаЗначений.Колонки.Найти("СчетУчетаБУ") <> Неопределено Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаБУ;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);

		ИначеЕсли ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетЗатрат;
			Ценность          = ПолучитьЦенностьПоСубконто(СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
			// Особая обработка для затрат на строительство
			Если ТипЗнч(Ценность) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Для НомерСубконто =1 По 3 Цикл
					Если ТипЗнч(СтрокаТаблицы["Субконто"+НомерСубконто]) = Тип("ПеречислениеСсылка.СпособыСтроительства")  Тогда
						СпособСтроительства = СтрокаТаблицы["Субконто"+НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
		ИначеЕсли Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетУчетаЦенности) Тогда
			СчетУчетаЦенности = СтрокаТаблицы.СчетУчетаЦенности;
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = ОпределитьЦенностьИзСтрокиТабличнойЧасти(СтрокаТаблицы, ТаблицаЗначений);
			
		ИначеЕсли ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.ОсновноеСредство;

		ИначеЕсли ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено Тогда
			СчетУчетаЦенности = "нет";
			Ценность          = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;

		ЭтоДопРасходы         = (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов");
		УчетАгентскогоНДС     = Ложь;
		ВидАгентскогоДоговора = "";

		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда
			УчетАгентскогоНДС = СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
		Если СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") тогда
			ВидАгентскогоДоговора = СтруктураШапкиДокумента.ВидАгентскогоДоговора;
		КонецЕсли;
		
		Если ЕстьКолонкаУслуга Тогда
			СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора,СпособСтроительства, СтрокаТаблицы.Услуга, ВидыЦенностейПоСчетамУчета);
		Иначе
			СтрокаТаблицы.ВидЦенности       = ОпределитьВидЦенности(Ценность, СчетУчетаЦенности, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора,СпособСтроительства, , ВидыЦенностейПоСчетамУчета);
		КонецЕсли;			
		СтрокаТаблицы.СчетУчетаЦенности = СчетУчетаЦенности;
		СтрокаТаблицы.Ценность          = Ценность;

	КонецЦикла

КонецПроцедуры // ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт

	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда

		// Произошло изменение пометки на удаление
		//Попытаемся найти счет-фактуру
		СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);

		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура) Тогда

			// Есть счет-фактура, нужно установить для него пометку удаления
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт

	//Добавила ПодразделениеОрганизации Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
 	//Результат = Новый Структура("Организация, Контрагент, Договор, ВидСчетаФактуры, СуммаДокумента, ВалютаДокумента, СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение, СуммаНДСДокумента, СуммаРубДокумента, СчетФактураБезНДС");
	Результат = Новый Структура("Организация, Контрагент, Договор, ПодразделениеОрганизации, ВидСчетаФактуры, СуммаДокумента, ВалютаДокумента, СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение, СуммаНДСДокумента, СуммаРубДокумента, СчетФактураБезНДС");
    Результат.СуммаДокумента = 0;
	Результат.СуммаНДСДокумента = 0;
	Результат.СуммаУвеличение = 0;
	Результат.СуммаНДСУвеличение = 0;
	Результат.СуммаУменьшение = 0;
	Результат.СуммаНДСУменьшение = 0;
	Результат.СчетФактураБезНДС = 0;
	Результат.СуммаРубДокумента	= 0;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		Или ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный")
		Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
		ЭтоПолученныйСФ = Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		и (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс или СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);  
		//Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
		Результат.Вставить("ПодразделениеОрганизации", СчетФактура.ПодразделениеОрганизации);  
		//<-
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Возврат;
	КонецЕслИ;
	
	//Добавила Федотова Л., РГ-Софт, 30.07.12 ->
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")  и ОбщегоНазначения.ЕстьРеквизитДокумента("ВидСчетаФактуры", СчетФактура.Метаданные()) Тогда
		ДокументОснование = СчетФактура.ДокументОснование;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
            Результат.ВидСчетаФактуры = ?(ЭтоКорректировочныйСФ(ДокументОснование), Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, 
		          Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		//-> RG-Soft VIvanov 08/08/12
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС") Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
			Результат.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;	  
		КонецЕсли;
		//<-
	КонецЕсли;
	//<-
                                                                                               
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;			
		КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// ТЧ оснований не заполнена, параметры определить нельзя
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	//Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
		Запрос.УстановитьПараметр("Основания", ДокументыОснования);
	    ТекстЗапроса = "";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", ДокументыОснования[0].ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
			ТекстЗапроса = "ВЫБРАТЬ
			               |	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
			               |	РеализацияТоваровУслугТовары.Ссылка.Контрагент КАК Контрагент,
			               |	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			               |	ВЫБОР
			               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ КАК ВалютаДокумента,
			               |	РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
			               |	РеализацияТоваровУслугТовары.СуммаБезНДСРуб,
			               |	РеализацияТоваровУслугТовары.СуммаНДСРуб,
			               |	РеализацияТоваровУслугТовары.Ссылка.ПодразделениеОрганизации,
			               |	РеализацияТоваровУслугТовары.Сумма,
			               |	РеализацияТоваровУслугТовары.СуммаНДС,
			               |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
			               |	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			               |	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
			               |ПОМЕСТИТЬ Док
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			               |ГДЕ
			               |	РеализацияТоваровУслугТовары.Ссылка В(&Основания)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	РеализацияТоваровУслугУслуги.Ссылка.Организация,
			               |	РеализацияТоваровУслугУслуги.Ссылка.Контрагент,
			               |	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента,
			               |	ВЫБОР
			               |		КОГДА РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ,
			               |	РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС,
			               |	РеализацияТоваровУслугУслуги.СуммаБезНДСРуб,
			               |	РеализацияТоваровУслугУслуги.СуммаНДСРуб,
			               |	РеализацияТоваровУслугУслуги.Ссылка.ПодразделениеОрганизации,
			               |	РеализацияТоваровУслугУслуги.Сумма,
			               |	РеализацияТоваровУслугУслуги.СуммаНДС,
			               |	РеализацияТоваровУслугУслуги.СтавкаНДС,
			               |	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			               |	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			               |ГДЕ
			               |	РеализацияТоваровУслугУслуги.Ссылка В(&Основания)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	Док.Организация,
			               |	Док.Контрагент,
			               |	Док.Договор,
			               |	Док.ВалютаДокумента,
			               |	Док.СуммаВключаетНДС,
			               |	СУММА(Док.СуммаБезНДСРуб) КАК СуммаБезНДСРуб,
			               |	СУММА(Док.СуммаНДСРуб) КАК СуммаНДСРуб,
			               |	Док.ПодразделениеОрганизации,
			               |	СУММА(ВЫБОР
			               |			КОГДА Док.СуммаВключаетНДС
			               |				ТОГДА Док.Сумма - Док.СуммаНДС
			               |			ИНАЧЕ Док.Сумма
			               |		КОНЕЦ) КАК СуммаБезНДС,
			               |	СУММА(Док.СуммаНДС) КАК СуммаНДС,
			               |	МАКСИМУМ(Док.СтавкаНДС) КАК СтавкаНДС,
			               |	Док.ВалютаВзаиморасчетов,
			               |	Док.РасчетыВУсловныхЕдиницах
			               |ПОМЕСТИТЬ ДокСвернутый
			               |ИЗ
			               |	Док КАК Док
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	Док.Организация,
			               |	Док.Контрагент,
			               |	Док.Договор,
			               |	Док.ВалютаДокумента,
			               |	Док.СуммаВключаетНДС,
			               |	Док.ПодразделениеОрганизации,
			               |	Док.ВалютаВзаиморасчетов,
			               |	Док.РасчетыВУсловныхЕдиницах
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ДокСвернутый.Организация,
			               |	ДокСвернутый.Контрагент,
			               |	ДокСвернутый.Договор,
			               |	ДокСвернутый.ВалютаДокумента,
			               |	ДокСвернутый.СуммаВключаетНДС,
			               |	ДокСвернутый.ПодразделениеОрганизации,
			               |	ВЫБОР
			               |		КОГДА ДокСвернутый.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И НЕ ДокСвернутый.РасчетыВУсловныхЕдиницах
			               |			ТОГДА ДокСвернутый.СуммаБезНДС
			               |		ИНАЧЕ ДокСвернутый.СуммаБезНДСРуб
			               |	КОНЕЦ КАК СуммаБезНДС,
			               |	ВЫБОР
			               |		КОГДА ДокСвернутый.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И НЕ ДокСвернутый.РасчетыВУсловныхЕдиницах
			               |			ТОГДА ДокСвернутый.СуммаНДС
			               |		ИНАЧЕ ДокСвернутый.СуммаНДСРуб
			               |	КОНЕЦ КАК СуммаНДС,
			               |	ДокСвернутый.СтавкаНДС,
			               |	ДокСвернутый.ВалютаВзаиморасчетов,
			               |	ДокСвернутый.РасчетыВУсловныхЕдиницах,
			               |	ДокСвернутый.СуммаБезНДСРуб,
			               |	ДокСвернутый.СуммаНДСРуб
			               |ПОМЕСТИТЬ ДокСветнутыйВНужнойВалюте
			               |ИЗ
			               |	ДокСвернутый КАК ДокСвернутый
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ДокСветнутыйВНужнойВалюте.Организация КАК Организация,
			               |	ДокСветнутыйВНужнойВалюте.Контрагент КАК Контрагент,
			               |	ДокСветнутыйВНужнойВалюте.Договор КАК Договор,
			               |	ДокСветнутыйВНужнойВалюте.ВалютаДокумента КАК ВалютаДокумента,
			               |	СУММА(ДокСветнутыйВНужнойВалюте.СуммаБезНДС + ДокСветнутыйВНужнойВалюте.СуммаНДС) КАК СуммаДокумента,
			               |	СУММА(ДокСветнутыйВНужнойВалюте.СуммаНДС) КАК СуммаНДСДокумента,
			               |	ВЫБОР
			               |		КОГДА ДокСветнутыйВНужнойВалюте.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК ЕстьНДС,
			               |	ДокСветнутыйВНужнойВалюте.СуммаВключаетНДС,
			               |	СУММА(ВЫБОР
			               |			КОГДА НЕ &КорректировочныйСчетФактура
			               |				ТОГДА 0
			               |			ИНАЧЕ ВЫБОР
			               |					КОГДА ДокСветнутыйВНужнойВалюте.СуммаБезНДС + ДокСветнутыйВНужнойВалюте.СуммаНДС > 0
			               |						ТОГДА ДокСветнутыйВНужнойВалюте.СуммаБезНДС + ДокСветнутыйВНужнойВалюте.СуммаНДС
			               |					ИНАЧЕ 0
			               |				КОНЕЦ
			               |		КОНЕЦ) КАК СуммаУвеличение,
			               |	СУММА(ВЫБОР
			               |			КОГДА НЕ &КорректировочныйСчетФактура
			               |				ТОГДА 0
			               |			ИНАЧЕ ВЫБОР
			               |					КОГДА ДокСветнутыйВНужнойВалюте.СуммаБезНДС + ДокСветнутыйВНужнойВалюте.СуммаНДС < 0
			               |						ТОГДА 0 - ДокСветнутыйВНужнойВалюте.СуммаБезНДС - ДокСветнутыйВНужнойВалюте.СуммаНДС
			               |					ИНАЧЕ 0
			               |				КОНЕЦ
			               |		КОНЕЦ) КАК СуммаУменьшение,
			               |	СУММА(ВЫБОР
			               |			КОГДА НЕ &КорректировочныйСчетФактура
			               |				ТОГДА 0
			               |			ИНАЧЕ ВЫБОР
			               |					КОГДА ДокСветнутыйВНужнойВалюте.СуммаНДС > 0
			               |						ТОГДА ДокСветнутыйВНужнойВалюте.СуммаНДС
			               |					ИНАЧЕ 0
			               |				КОНЕЦ
			               |		КОНЕЦ) КАК СуммаНДСУвеличение,
			               |	СУММА(ВЫБОР
			               |			КОГДА НЕ &КорректировочныйСчетФактура
			               |				ТОГДА 0
			               |			ИНАЧЕ ВЫБОР
			               |					КОГДА ДокСветнутыйВНужнойВалюте.СуммаНДС < 0
			               |						ТОГДА 0 - ДокСветнутыйВНужнойВалюте.СуммаНДС
			               |					ИНАЧЕ 0
			               |				КОНЕЦ
			               |		КОНЕЦ) КАК СуммаНДСУменьшение,
			               |	ДокСветнутыйВНужнойВалюте.СуммаБезНДСРуб,
			               |	ДокСветнутыйВНужнойВалюте.СуммаНДСРуб,
			               |	ДокСветнутыйВНужнойВалюте.ПодразделениеОрганизации
			               |ИЗ
			               |	ДокСветнутыйВНужнойВалюте КАК ДокСветнутыйВНужнойВалюте
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ДокСветнутыйВНужнойВалюте.Организация,
			               |	ДокСветнутыйВНужнойВалюте.Контрагент,
			               |	ДокСветнутыйВНужнойВалюте.Договор,
			               |	ДокСветнутыйВНужнойВалюте.ВалютаДокумента,
			               |	ДокСветнутыйВНужнойВалюте.СуммаВключаетНДС,
			               |	ДокСветнутыйВНужнойВалюте.СуммаБезНДСРуб,
			               |	ДокСветнутыйВНужнойВалюте.СуммаНДСРуб,
			               |	ДокСветнутыйВНужнойВалюте.ПодразделениеОрганизации,
			               |	ВЫБОР
			               |		КОГДА ДокСветнутыйВНужнойВалюте.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ";

						   
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ПередачаОС.Ссылка.Организация КАК Организация,
			               |	ПередачаОС.Ссылка.Контрагент КАК Контрагент,
			               |	ПередачаОС.Ссылка.ДоговорКонтрагента КАК Договор,
			               |	ВЫБОР
			               |		КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ КАК ВалютаДокумента,
						   // { RGS LFedotova 26.07.2017 12:18:52 - вопрос SLI-0007316
						   //|	СУММА(ВЫБОР
						   //|			КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
						   //|					И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
						   //|				ТОГДА ПередачаОС.Сумма
						   //|			ИНАЧЕ ПередачаОС.Сумма * ПередачаОС.Ссылка.КурсВзаиморасчетов / ПередачаОС.Ссылка.КратностьВзаиморасчетов
						   //|		КОНЕЦ) КАК СуммаДокумента,
						   //|	СУММА(ВЫБОР
						   //|			КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
						   //|					И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
						   //|				ТОГДА ПередачаОС.СуммаНДС
						   //|			ИНАЧЕ ПередачаОС.СуммаНДС * ПередачаОС.Ссылка.КурсВзаиморасчетов / ПередачаОС.Ссылка.КратностьВзаиморасчетов
						   //|		КОНЕЦ) КАК СуммаНДСДокумента,
						   |	СУММА(ВЫБОР
						   |			КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
						   |					И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
						   |				ТОГДА ПередачаОС.Сумма
						   |			ИНАЧЕ ПередачаОС.СуммаБезНДСРуб + ПередачаОС.СуммаНДСРуб
						   |		КОНЕЦ) КАК СуммаДокумента,
						   |	СУММА(ВЫБОР
						   |			КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
						   |					И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
						   |				ТОГДА ПередачаОС.СуммаНДС
						   |			ИНАЧЕ ПередачаОС.СуммаНДСРуб
						   |		КОНЕЦ) КАК СуммаНДСДокумента,
						   // } RGS LFedotova 26.07.2017 12:19:11 - вопрос SLI-0007316
						   |	ВЫБОР
			               |		КОГДА ПередачаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК ЕстьНДС,
			               |	ПередачаОС.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			               |	ПередачаОС.Ссылка.ПодразделениеОрганизации
			               |ИЗ
			               |	Документ.ПередачаОС.ОС КАК ПередачаОС
			               |ГДЕ
			               |	ПередачаОС.Ссылка В(&Основания)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПередачаОС.Ссылка.Организация,
			               |	ПередачаОС.Ссылка.Контрагент,
			               |	ПередачаОС.Ссылка.ДоговорКонтрагента,
			               |	ПередачаОС.Ссылка.СуммаВключаетНДС,
			               |	ВЫБОР
			               |		КОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И ПередачаОС.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА ПередачаОС.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ,
			               |	ВЫБОР
			               |		КОГДА ПередачаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ,
			               |	ПередачаОС.Ссылка.ПодразделениеОрганизации";
						   
		//->RG-Soft VIvavanov 15/08/12
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.Организация КАК Организация,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.Контрагент КАК Контрагент,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента КАК Договор,
			               |	ВЫБОР
			               |		КОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ КАК ВалютаДокумента,
			               |	СУММА(ВЫБОР
			               |			КОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |					И ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |				ТОГДА ОтчетПринципалуОПродажахТовары.СуммаВознаграждения
			               |			ИНАЧЕ ОтчетПринципалуОПродажахТовары.СуммаВознаграждения * ОтчетПринципалуОПродажахТовары.Ссылка.КурсВзаиморасчетов / ОтчетПринципалуОПродажахТовары.Ссылка.КратностьВзаиморасчетов
			               |		КОНЕЦ) КАК СуммаДокумента,
			               |	СУММА(ВЫБОР
			               |			КОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |					И ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |				ТОГДА ОтчетПринципалуОПродажахТовары.СуммаНДСВознаграждения
			               |			ИНАЧЕ ОтчетПринципалуОПродажахТовары.СуммаНДСВознаграждения * ОтчетПринципалуОПродажахТовары.Ссылка.КурсВзаиморасчетов / ОтчетПринципалуОПродажахТовары.Ссылка.КратностьВзаиморасчетов
			               |		КОНЕЦ) КАК СуммаНДСДокумента,
			               |	ВЫБОР
			               |		КОГДА ОтчетПринципалуОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК ЕстьНДС,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
			               |ИЗ
			               |	Документ.ОтчетПринципалуОПродажах.Товары КАК ОтчетПринципалуОПродажахТовары
			               |ГДЕ
			               |	ОтчетПринципалуОПродажахТовары.Ссылка В (&Основания)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.Организация,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.Контрагент,
			               |	ОтчетПринципалуОПродажахТовары.Ссылка.СуммаВключаетНДС,
			               |	ВЫБОР
			               |		КОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА ОтчетПринципалуОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ,
			               |	ВЫБОР
			               |		КОГДА ОтчетПринципалуОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ";
		
		//->RG-Soft Пахоменков  23/05/13
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
			Запрос.Параметры.Вставить("ТекущаяДата",ТекущаяДата());
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ОтчетАгентаПоРасходам.Организация,
			               |	ОтчетАгентаПоРасходам.Контрагент,
			               |	ОтчетАгентаПоРасходам.ДоговорПринципала КАК ДоговорКонтрагента,
			               |	ВЫБОР
			               |		КОГДА ОтчетАгентаПоРасходам.ДоговорПринципала.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
			               |				И ОтчетАгентаПоРасходам.Ссылка.ДоговорПринципала.РасчетыВУсловныхЕдиницах = ЛОЖЬ
			               |			ТОГДА ОтчетАгентаПоРасходам.Ссылка.ДоговорПринципала.ВалютаВзаиморасчетов
			               |		ИНАЧЕ &ВалютаРегламентированногоУчета
			               |	КОНЕЦ КАК ВалютаДокумента,
			               |	ЛОЖЬ КАК СуммаВключаетНДС,
			               |	ВЫБОР
			               |		КОГДА ОтчетАгентаПоРасходам.АгентскаяСтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК ЕстьНДС,
			               |	ОтчетАгентаПоРасходам.АгентскийНДС КАК СуммаНДСДокумента,
			               |	ОтчетАгентаПоРасходам.АгентскаяСумма КАК СуммаДокумента,
			               |	ОтчетАгентаПоРасходам.ПодразделениеОрганизации
			               |ИЗ
			               |	Документ.ОтчетАгентаПоРасходам КАК ОтчетАгентаПоРасходам
			               |ГДЕ
			               |	ОтчетАгентаПоРасходам.Ссылка В(&Основания)";
		//<-					   
		КонецЕсли;
		//<-			   
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапроса;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
	    Возврат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		ПерваяСтрока = Истина;
		РазныеОрганизации = ложь;
		РазныеКонтрагенты = ложь;
		РазныеДоговоры = ложь;
		//Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
		РазныеПодразделения = ложь;
		
		РазныеВалюты = ложь;
		Пока Выборка.Следующий() Цикл
			ЭтоКорректировочный = Ложь;
			Если ПерваяСтрока Тогда
				ПерваяСтрока = Ложь;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				Если ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Результат.СуммаРубДокумента = 	Результат.СуммаРубДокумента + Выборка.СуммаБезНДСРуб + Выборка.СуммаНДСРуб;
				Иначе
					Результат.СуммаРубДокумента = 	Результат.СуммаДокумента;
				КонецЕсли;
			Иначе
				РазныеОрганизации	= РазныеОрганизации или не Результат.Организация= 	Выборка.Организация;
				РазныеКонтрагенты	= РазныеКонтрагенты или не Результат.Контрагент = 	Выборка.Контрагент;
				РазныеВалюты		= РазныеВалюты или не Результат.ВалютаДокумента	= Выборка.ВалютаДокумента;
				РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры или не Результат.Договор = Выборка.Договор);
				//Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
				РазныеПодразделения	= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры или не Результат.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации);
				
				Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
				Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
									
				Если ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					
					Результат.СуммаРубДокумента = 	Результат.СуммаРубДокумента + Выборка.СуммаБезНДСРуб + Выборка.СуммаНДСРуб;
					
					ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;						
					
					Если ЭтоКорректировочный Тогда						
						Результат.СуммаУвеличение       =	Результат.СуммаУвеличение    + Выборка.СуммаУвеличение;
						Результат.СуммаУменьшение    =	Результат.СуммаУменьшение + Выборка.СуммаУменьшение;
						Результат.СуммаНДСУвеличение    =	Результат.СуммаНДСУвеличение    + Выборка.СуммаНДСУвеличение;
						Результат.СуммаНДСУменьшение = Результат.СуммаНДСУменьшение + Выборка.СуммаНДСУменьшение;
					Иначе
						Результат.СуммаУвеличение = 0;
						Результат.СуммаУменьшение = 0;					
						Результат.СуммаНДСУвеличение = 0;
						Результат.СуммаНДСУменьшение = 0;					
					КонецЕсли;
					
				Иначе
					Результат.СуммаРубДокумента = 	Результат.СуммаДокумента;
					Результат.СуммаУвеличение = 0;
					Результат.СуммаУменьшение = 0;					
					Результат.СуммаНДСУвеличение = 0;
					Результат.СуммаНДСУменьшение = 0;					
				КонецЕсли;
				
				Если Результат.СчетФактураБезНДС Тогда
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
		//Добавила РазныеПодразделения Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
		//Если РазныеОрганизации или РазныеКонтрагенты или РазныеВалюты Тогда
		Если РазныеОрганизации или РазныеКонтрагенты или РазныеПодразделения или РазныеВалюты Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
							?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
							?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
							?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
							//Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
							?(РазныеПодразделения,Символы.ПС+" - не совпадает налоговая регистрация","")+
							//<-
							?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
							Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
			Если РазныеОрганизации Тогда
				 Результат.Организация = Неопределено;
			КонецЕсли; 				
			Если РазныеКонтрагенты Тогда
				 Результат.Контрагент = Неопределено;
			КонецЕсли; 				
			Если РазныеВалюты Тогда
				 Результат.ВалютаДокумента = Неопределено;
			КонецЕсли; 				
			Если РазныеДоговоры тогда
				 Результат.Договор = Неопределено;
			 КонецЕсли;
			 //Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
			 Если РазныеПодразделения тогда
				 Результат.ПодразделениеОрганизации = Неопределено;
			 КонецЕсли;
			 //<-
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПолучитьПараметрыСчетаФактуры()

// Процедура вызывается по кнопке "Расчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСНачисленный в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));
	
	ВидыНачисленияРеализация = Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |		,
	               |		Организация = &Организация
	               |		    И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |		    И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";
			
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    ВыручкаНДС = ВыручкаНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			ВыручкаБезНДС = ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			ВыручкаЕНВД = ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС;
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			ВыручкаНДС0 = ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьВыручкуДляНДС()

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(НачПериода=Неопределено, КонПериода= Неопределено,Организация, Фильтр = Неопределено,ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, СчетФактураПроведен = Неопределено, ДатаСФНеБолее = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  ?(ОбщегоНазначения.ЗначениеНеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Фильтр",      Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(НачПериода)) И (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(НачПериода)) И (ОбщегоНазначения.ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (ОбщегоНазначения.ЗначениеНеЗаполнено(НачПериода)) И (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Организация), "", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Фильтр), "", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ТОГДА СчетФактураВыданный.Ссылка
					|		ИНАЧЕ СчетФактураПолученный.Ссылка
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ТОГДА СчетФактураВыданный.Ссылка.Проведен
					|		ИНАЧЕ СчетФактураПолученный.Ссылка.Проведен
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаСФНеБолее), "", ?(ОбщегоНазначения.ЗначениеНеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
					|			ТОГДА СчетФактураВыданный.Дата
					|		ИНАЧЕ СчетФактураПолученный.Дата
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Ссылка
	|			ИНАЧЕ СчетФактураПолученный.Ссылка
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Проведен
	|			ИНАЧЕ СчетФактураПолученный.Проведен
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПринятиеКУчетуОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.МодернизацияОС
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ТОГДА СчетФактураВыданный.Дата
	|			ИНАЧЕ СчетФактураПолученный.Дата
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.Ссылка)";
		
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация",Условие_Основание);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции // ОпределитьНаличиеСчетовФактурПолученных()

Функция ПроводитьПоРазделуУчетаНДС(ДатаДокумента) Экспорт
	
	ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
	
	Возврат ДатаНачалаУчетаНДС <= ДатаДокумента;
	
КонецФункции

// Определяет дату начала налогового периода для НДС по учетной политике
Функция ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат НачалоМесяца(Дата);
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = НачалоКвартала(Дата);
	Иначе
		Результат = НачалоМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено) Экспорт
	
	Если УчетнаяПолитикаНУ = неопределено Тогда
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли не УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") тогда
		 Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат КонецМесяца(Дата);
	КонецЕсли;
	
	Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
		Результат = КонецКвартала(Дата);
	Иначе
		Результат = КонецМесяца(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
//Преобразование промежуточных таблиц для НДС

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции


//////////////////////////////////////////////////////////////////////////
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление МПЗ или затрат в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, ИдТабЧасти, Движения, Отказ) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	УчитыватьНДСПредъявленный = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДСПредъявленный = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДСПредъявленный Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	
	ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено;
	ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено;
	
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли; 
	
	СчетаУчетаОСиНМАиОБъектовСтроительства = ОпределитьСчетаУчетаЦенностей("ВНА");
	СчетаУчетаОС = ОпределитьСчетаУчетаЦенностей("ОС");
	СчетаУчетаНМА = ОпределитьСчетаУчетаЦенностей("НМА");
	
	ОсобыеУсловияБлокировкиВычета2006_ОСиНМА = (СтруктураШапкиДокумента.Дата >= '20060101');
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		Если (ТипЗнч(СтрокаДок.СчетУчетаЦенности) = Тип("ПланСчетовСсылка.Хозрасчетный")) и СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Пропускаем забалансовые поступления
			Продолжить;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" и ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДок.СчетФактура) Тогда
			//По строкам АО, в которых не указана СФ записи в регистре не формируются 
			Продолжить;
		КонецЕсли;
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;

		Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
			СтрокаДвижения.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		Иначе
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		КонецЕсли;	
			
		СтрокаДвижения.СчетУчетаНДС = СтрокаДок.СчетУчетаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
		//////////////////////////////////////
		// Обработка специфических ситуаций
		Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
			или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
			или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства
			или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС
			или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
			или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
			или не (СчетаУчетаОСиНМАиОБъектовСтроительства.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)
			тогда // Блокирование вычета для ОС и объектов строительства (в т.ч. СМР)
		
			Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
				ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.Выгрузить();
				ТаблицаДвижений_НДСпоОСиНМА.Очистить();
			КонецЕсли; 
				
			СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

			СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияОС.ВидЦенности	= СтрокаДок.ВидЦенности;

			Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
				// при проведении авансовых отчетов порядок заполнения данных измерений иной
				СтрокаДвиженияОС.СчетФактура= СтрокаДок.СчетФактура;
			Иначе
				СтрокаДвиженияОС.СчетФактура= СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;

			Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
				СтрокаДвиженияОС.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
			Иначе
				СтрокаДвиженияОС.СтавкаНДС	= СтрокаДок.СтавкаНДС;
			КонецЕсли;	
				
			СтрокаДвиженияОС.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
			СтрокаДвиженияОС.НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость"),СтруктураШапкиДокумента.НДСВключенВСтоимость,Ложь);
			
			// DELETE
			//Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
			//	или не (СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено) 
			//	Тогда
			//	СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
			//	СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
			//ИначеЕсли СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС 
			//	или СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование 
			//	или не (СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено) 
			//	тогда
			//	СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
			//	СтрокаДвиженияОС.Объект 	= СтрокаДок.Ценность;
			//Иначе
			//	СтрокаДвиженияОС.Состояние	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			//	
			//	// Определим объект строительства
			//	ОбъектСтроительства = Неопределено;
			//	Если ТаблицаПредъявленногоНДС.Колонки.Найти("ОбъектСтроительства")=Неопределено Тогда
			//		ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
			//		Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
			//			Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) 
			//				и ТипЗнч(СтрокаДок["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
			//				ОбъектСтроительства = СтрокаДок["Субконто"+НомерСубконто];
			//				Прервать;
			//			КонецЕсли; 
			//		КонецЦикла;
			//	Иначе
			//		ОбъектСтроительства = СтрокаДок.ОбъектСтроительства;
			//	КонецЕсли; 
			//	
			//	СтрокаДвиженияОС.Объект 	= ОбъектСтроительства;
			//КонецЕсли; 
			
			СтрокаДвиженияОС.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаДвиженияОС.НДС         = СтрокаДок.НДС;
			
			//СтрокаДвиженияОС.ВидДвижения  = ВидДвиженияНакопления.Приход;

			СтрокаДвиженияОС.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			Если ОсобыеУсловияБлокировкиВычета2006_ОСиНМА тогда
				СтрокаДвиженияОС.НеВлияетНаВычет = (СчетаУчетаОС.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = неопределено и СчетаУчетаНМА.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = неопределено);
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС 
			и не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено)  
			тогда //Отражение в составе косвенных расходов, подлежащих распределению
			
			СтатьяЗатрат = Неопределено;

			Если ТаблицаПредъявленногоНДС.Колонки.Найти("СтатьяЗатрат")=Неопределено Тогда
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) 
						и ТипЗнч(СтрокаДок["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
						СтатьяЗатрат = СтрокаДок["Субконто"+НомерСубконто];
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			КонецЕсли; 
			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтатьяЗатрат)
				и (СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД или 
				СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
				Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
			    
				Если ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
					ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.Выгрузить();
					ТаблицаДвижений_НДСКосвенныеРасходы.Очистить();
				КонецЕсли;
				
				СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();

				СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
				
				СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;

				Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвиженияКР.СчетФактура= СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвиженияКР.СчетФактура= СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;

				Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
					СтрокаДвиженияКР.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
				Иначе
					СтрокаДвиженияКР.СтавкаНДС	= СтрокаДок.СтавкаНДС;
				КонецЕсли;	
					
				СтрокаДвиженияКР.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
				СтрокаДвиженияКР.НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость"),СтруктураШапкиДокумента.НДСВключенВСтоимость,Ложь);
				
				СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
				
				СтрокаДвиженияКР.СчетЗатрат = СтрокаДок.СчетУчетаЦенности;
				
				ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетУчетаЦенности.ВидыСубконто;
				Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
					Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("Субконто"+НомерСубконто) = Неопределено) тогда
						СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["Субконто"+НомерСубконто];
					КонецЕсли; 
				КонецЦикла;
				
				СтрокаДвиженияКР.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете и не (ТаблицаПредъявленногоНДС.Колонки.Найти("СчетЗатратНУ")= Неопределено) Тогда
					СтрокаДвиженияКР.СчетЗатратНУ = СтрокаДок.СчетЗатратНУ;
					
					ВидыСубконтоСчетаЗатрат = СтрокаДок.СчетЗатратНУ.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (ТаблицаПредъявленногоНДС.Колонки.Найти("СубконтоНУ"+НомерСубконто) = Неопределено) тогда
							СтрокаДвиженияКР["СубконтоНУ"+НомерСубконто] = СтрокаДок["СубконтоНУ"+НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
				
				СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
				СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
			КонецЕсли; 
		КонецЕсли;
		// Обработка специфических ситуаций
		//////////////////////////////////////
		
		//////////////////////////////////////
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") и СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда

			СтрокаДвижения2 = ТаблицаДвижений_НДСПредъявленный.Добавить();

			СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения2.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения2.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			СтрокаДвижения2.СчетУчетаНДС = СтрокаДвижения.СчетУчетаНДС;
			
			СтрокаДвижения2.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения2.НДС         = СтрокаДвижения.НДС;
			
			СтрокаДвижения2.ВидДвижения  = ВидДвиженияНакопления.Расход;
			
			СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			
			
			Если ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
				ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.Выгрузить();
				ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();
			КонецЕсли;
			
			СтрокаДвиженияВкл = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();

			СтрокаДвиженияВкл.Организация = СтрокаДвижения.Организация;
			СтрокаДвиженияВкл.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвиженияВкл.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвиженияВкл.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвиженияВкл.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			СтрокаДвиженияВкл.СчетУчетаНДС = СтрокаДвижения.СчетУчетаНДС;
			
			СтрокаДвиженияВкл.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвиженияВкл.НДС         = СтрокаДвижения.НДС;
			
		КонецЕсли;
		// Отражение включения НДС в стоимость 
		//////////////////////////////////////
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
	КонецЕсли; 

	Если не ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
	КонецЕсли; 

	Если не ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// Формирует список счетов учета косвенных расходов
Функция ОпределитьСчетаУчетаКосвенныхРасходов() Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);
	СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";
	
	Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);
	
	СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СчетаУчетаЗатрат;

КонецФункции

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "") Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
	
	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли; 
	//Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда      DELETE
	//	СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	//КонецЕсли;  
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель =&Счет
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	ВременныеСчетаУчетаЗатрат = СчетаУчетаЗатрат.Скопировать();
	
	Для каждого Счет из ВременныеСчетаУчетаЗатрат Цикл
		
		Запрос.УстановитьПараметр("Счет",Счет.Значение);
		Результат = Запрос.Выполнить().Выгрузить();
		                     
		Пока Результат.Количество()>0 Цикл
			
			Для каждого строка из Результат цикл
				СчетаУчетаЗатрат.Добавить(строка.Ссылка);
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель","Родитель.Родитель");
			Результат = Запрос.Выполнить().Выгрузить();
			
		КонецЦикла;
		
    КонецЦикла;
	
	Возврат СчетаУчетаЗатрат;


КонецФункции
 
 
// Процедура вызывается из модулей документов прихода.
Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, НДСНеВлияетНаРасчеты = Ложь, ТаблицаАвансов = Неопределено) Экспорт
	
	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено;
	
	Сумма = 0;
	ВалютнаяСумма = 0;
	Если НДСНеВлияетНаРасчеты Тогда
		НДС = 0;
		ВалютныйНДС = 0;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
	  	СчитатьВалютнуюСумму = Не ( СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов));
		ВалютаРасчетов = ?(СчитатьВалютнуюСумму, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	Иначе
		СчитатьВалютнуюСумму = Ложь;
		ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
			
		Если СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Поступление забалансовых товары не влияет на состояние расчетов
			Продолжить;
		КонецЕсли;
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.СуммаБезНДСВал;
		КонецЕсли;
		
		Если НДСНеВлияетНаРасчеты Тогда
			НДС = НДС + СтрокаДок.НДС;
			Если СчитатьВалютнуюСумму Тогда
				ВалютныйНДС = ВалютныйНДС + СтрокаДок.НДСВал;
			КонецЕсли;
		Иначе
			Сумма = Сумма + СтрокаДок.НДС;
			Если СчитатьВалютнуюСумму Тогда
				ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.НДСВал;
			КонецЕсли;
		КонецЕсли; 

	КонецЦикла;
	
	Если Не (Сумма = 0 и ВалютнаяСумма = 0) Тогда
		СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Поставщик			= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижения.Документ 			= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.ВалютаРасчетов		= ВалютаРасчетов;

		СтрокаДвижения.Сумма				= Сумма;
		Если СчитатьВалютнуюСумму Тогда
			СтрокаДвижения.ВалютнаяСумма	= ВалютнаяСумма;
		Иначе
			СтрокаДвижения.ВалютнаяСумма	= Сумма;
		КонецЕсли;

		СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
		
		Если НДСНеВлияетНаРасчеты Тогда
		
			СтрокаДвиженияНДС = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
			
			СтрокаДвиженияНДС.Организация			= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияНДС.Поставщик				= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвиженияНДС.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			СтрокаДвиженияНДС.Документ	 			= СтруктураШапкиДокумента.Ссылка;
			СтрокаДвиженияНДС.РасчетыСБюджетом		= Истина;

			СтрокаДвиженияНДС.Сумма				= НДС;

			СтрокаДвиженияНДС.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
			
		КонецЕсли; 
		
	КонецЕсли; 
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

	// при необходимости отражаем операции зачета аванса в подсистеме НДС
	Если не ТаблицаАвансов=Неопределено
		и не ?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора, СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора) = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		Тогда
		ТаблицаРаспределенныхОплат = ТаблицаАвансов.Скопировать();
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаАванса из ТаблицаРаспределенныхОплат Цикл
			Если СтрокаАванса.Сумма = 0 или ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаАванса.Сделка) или ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаАванса.ДокументОплаты) тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаАванса из СтрокиКУдалению Цикл
			ТаблицаРаспределенныхОплат.Удалить(СтрокаАванса);
		КонецЦикла;
		Если не ТаблицаРаспределенныхОплат.Количество()=0 тогда
			
			СоответствиеКолонок = Новый Соответствие();
			СоответствиеКолонок.Вставить("Контрагент","Поставщик");
			СоответствиеКолонок.Вставить("ВалютаВзаиморасчетов","ВалютаРасчетов");
			СоответствиеКолонок.Вставить("Сделка","СчетФактура");
			СоответствиеКолонок.Вставить("СуммаВал","ВалютнаяСумма");
			ПереименованиеКолонок(ТаблицаРаспределенныхОплат, СоответствиеКолонок);
			
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Организация");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Документ");
			
			// Погашение задолженности
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СчетФактура"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
			
			// Погашение документов оплаты
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("ДокументОплаты"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);

			// Отражение распределенной задолженности
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам	= Движения.НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
			
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("РаспределеннаяСумма");
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("Сумма"),"РаспределеннаяСумма");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
			
		КонецЕсли;
	КонецЕсли; 

	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество()>0 Тогда
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = неопределено 
		и ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество()>0 
		Тогда
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность()

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")	Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	    	СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда 
		
		СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();
		
		
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.Выгрузить();
		ТаблицаДвижений_НДСКосвенныеРасходы.Очистить();
		
		Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
			Если Не СтруктураШапкиДокумента.Свойство("СтатьяЗатрат") Тогда
				Если ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
					СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
				Иначе
					ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено)
							И ТипЗнч(СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							СтатьяЗатрат = СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто];
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
			КонецЕсли; 
			// Если счет учета не соответствует счету учета косвенных расходов, то движения делать не нужно
			Если Не (СчетаУчетаКосвенныхРасходов.НайтиПоЗначению(СтруктураШапкиДокумента.СчетЗатрат) = Неопределено) Тогда
				Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДок.СчетФактура) И Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтатьяЗатрат)
					И (СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Или 
					СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются)
					Тогда // Необходимо включить запись в состав косвенных расходов для последующего распределения
					
					СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
					
					СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
					
					СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;
					
					СтрокаДвиженияКР.СчетФактура 	= СтрокаДок.СчетФактура;
					
					СтрокаДвиженияКР.СтавкаНДС		= СтрокаДок.СтавкаНДС;
					
					СтрокаДвиженияКР.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
					СтрокаДвиженияКР.НДСВключенВСтоимость = СтрокаДок.НДСВключенВСтоимость;
					
					СтрокаДвиженияКР.СтатьяЗатрат 	= СтатьяЗатрат;
					
					СтрокаДвиженияКР.СчетЗатрат 	= СтруктураШапкиДокумента.СчетЗатрат;
					
					ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
					Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
						Если не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
							СтрокаДвиженияКР["Субконто"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
						КонецЕсли; 
					КонецЦикла;
					
					СтрокаДвиженияКР.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						СтрокаДвиженияКР.СчетЗатратНУ = СтруктураШапкиДокумента.СчетЗатратНУ;
						
						ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатратНУ.ВидыСубконто;
						Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
							Если Не (СтрокаДок["КорСубконтоСписанияБУ" + НомерСубконто] = Неопределено) тогда
								СтрокаДвиженияКР["СубконтоНУ"+НомерСубконто] = СтрокаДок["КорСубконтоСписанияБУ"+НомерСубконто];
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
					
					СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
					СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСНачисленный"
Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,ДвиженияНДСПредъявленный,Движения) Экспорт
	
	ВидыЦенностей_Агентские = Новый списокЗначений();
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	СчетНДС = ПланыСчетов.Хозрасчетный.НДС;
	
	ТаблицаДвижений_НДСНачисленный = Неопределено;
	Для каждого СтрокаДвижений_НДСПредъявленный Из ДвиженияНДСПредъявленный Цикл
		Если СтрокаДвижений_НДСПредъявленный.ВидДвижения = ВидДвиженияНакопления.Приход 
			и не ВидыЦенностей_Агентские.НайтиПоЗначению(СтрокаДвижений_НДСПредъявленный.ВидЦенности) = Неопределено Тогда
			
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.выгрузить();
				ТаблицаДвижений_НДСНачисленный.Очистить();
			КонецЕсли;
			СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			
			СтрокаДвижений_НДСНачисленный.Покупатель	= СтрокаДвижений_НДСПредъявленный.Поставщик;
			СтрокаДвижений_НДСНачисленный.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаДвижений_НДСПредъявленный.ВидЦенности;
			СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаДвижений_НДСПредъявленный.СтавкаНДС;
			
			СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= СтрокаДвижений_НДСПредъявленный.СуммаБезНДС;
			СтрокаДвижений_НДСНачисленный.НДС			= СтрокаДвижений_НДСПредъявленный.НДС;
			
			СтрокаДвижений_НДСНачисленный.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод;
			
			СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		
		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда

		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	
	КонецЕсли; 
	
КонецПроцедуры //СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС()

Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ЭтоВозврат = ложь) Экспорт

	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений_НДСНачисленный.Очистить();
	
	ТаблицаДвижений_НДСРеализация0	= Неопределено;

	ЕстьКомиссионный = Ложь;
	ЕстьДоговорКомиссии = Ложь;
	
	Для Каждого Колонка Из ТабЧасть.Колонки Цикл
		Если Колонка.Имя = "Комиссионный" Тогда
			ЕстьКомиссионный = Истина;
		ИначеЕсли Колонка.Имя = "ДоговорКомиссии" Тогда
			ЕстьДоговорКомиссии = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И ?(ЕстьКомиссионный, СтрокаВыбытия.Комиссионный, Ложь) И ?(ЕстьДоговорКомиссии, СтрокаВыбытия.ДоговорКомиссии.УчетАгентскогоНДС, Ложь);

		Если СтрокаВыбытия.СуммаБезНДС + СтрокаВыбытия.НДС = 0 
			тогда
			Продолжить;                       
		КонецЕсли;

		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
		СтрокаДвижения.Покупатель  = ?(СтруктураШапкиДокумента.Свойство("Контрагент"),СтруктураШапкиДокумента.Контрагент,СтруктураШапкиДокумента.Организация);
		СтрокаДвижения.Валюта  = СтруктураШапкиДокумента.ВалютаДокумента;
		
		Если ЭтоВозврат Тогда
			СтрокаДвижения.СчетФактура 			= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка),СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
		Иначе	
			//СтрокаДвижения.СчетФактура = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СделкаИсходн),СтруктураШапкиДокумента.СделкаИсходн,СтруктураШапкиДокумента.Ссылка);
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;  
		//изменил Трефиленков Дмитрий, РГ-Софт

		СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		//-> RG-Soft VIvanov 02/04/12
		//Если ОбщегоНазначения.ЕстьРеквизитДокумента("Операция", СтруктураШапкиДокумента.Ссылка.Метаданные()) Тогда
		//	Если ЭтоВозврат	ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно
		//		ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
		//		СтрокаДвижения.СчетФактура 			= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка),СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", СтруктураШапкиДокумента.Ссылка.Метаданные()) Тогда
			Если ЭтоВозврат	
				ИЛИ ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота) 
				И (НЕ СтруктураШапкиДокумента.Корректировка)) Тогда
					СтрокаДвижения.СчетФактура 			= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка),СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
					СтрокаДвижения.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
					//<- RG-Soft VIvanov 02/04/12
			КонецЕсли; 
		КонецЕсли; 
		//конец изменения
		                             
		СтрокаДвижения.СтавкаНДС   = СтрокаВыбытия.СтавкаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.НДС         = СтрокаВыбытия.НДС*?(ЭтоВозврат,-1,1);
		
		
		//ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
		//USD = Справочники.Валюты.НайтиПоНаименованию("USD");
		//ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
		
		СтрокаДвижения.СуммаБезНДСВВалюте = СтрокаВыбытия.СуммаБезНДСВал*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.НДСВВалюте         = СтрокаВыбытия.НДСВал*?(ЭтоВозврат,-1,1);
		
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаДвижения.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод;
		
		Если СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли; 
		
		Если СтрокаВыбытия.СтавкаНДС = Ставка0 
			и не СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
			и не СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер"
			и не (СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка)) Тогда
			// { RGS LFedotova 29.09.2017 17:39:04 - СФ 981
			
			//Если ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
			//	ТаблицаДвижений_НДСРеализация0	= Движения.НДСРеализация0.Выгрузить();
			//	ТаблицаДвижений_НДСРеализация0.Очистить();
			//КонецЕсли; 
			//СтрокаДвижения0 = ТаблицаДвижений_НДСРеализация0.добавить();
			//
			//СтрокаДвижения0.ВидЦенности = СтрокаДвижения.ВидЦенности;
			//СтрокаДвижения0.Покупатель  = СтрокаДвижения.Покупатель;
			//СтрокаДвижения0.СчетФактура = СтрокаДвижения.СчетФактура;
			//СтрокаДвижения0.СтавкаНДС   = Ставка0;
			//
			//СтрокаДвижения0.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			//СтрокаДвижения0.НДС         = СтрокаДвижения.НДС;
			//
			//СтрокаДвижения0.ВидДвижения = ВидДвиженияНакопления.Приход;
			// } RGS LFedotova 29.09.2017 17:39:11 - СФ 981
		
		КонецЕсли; 

	КонецЦикла;
	
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда
		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.ДатаПроведения;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
		Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.ДатаПроведения;
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
		Движения.НДСРеализация0.ДобавитьДвижение();
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации()

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ТаблицаАвансов = Неопределено, ЭтоВозврат = ложь) Экспорт

	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСРасчетыСПокупателями	= Движения.НДСРасчетыСПокупателями.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Неопределено; 
	
	Сумма = 0;
	ВалютнаяСумма = 0;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
	  	СчитатьВалютнуюСумму = Не ( СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов));
		ВалютаРасчетов = ?(СчитатьВалютнуюСумму, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	Иначе
		СчитатьВалютнуюСумму = Ложь;
		ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
			
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.СуммаБезНДСВал;
		КонецЕсли;
		
		Сумма = Сумма + СтрокаДок.НДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.НДСВал;
		КонецЕсли;

	КонецЦикла;
	
	//Если Не ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")  DELETE
	//	Или Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
	  Если  Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Если Не (Сумма = 0 и ВалютнаяСумма = 0) Тогда
			СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
			
			СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.Покупатель			= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			
			СтрокаДвижения.Документ				= СтруктураШапкиДокумента.Ссылка;
			//Если ЭтоВозврат и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка) и не ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Если ЭтоВозврат и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка)  Тогда
				СтрокаДвижения.Документ 		= СтруктураШапкиДокумента.Сделка;
			КонецЕсли; 
			//Изменил Трефиленков Дмитрий, РГ-Софт
			Попытка
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
					СтрокаДвижения.СчетФактура 		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка),
									СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
					
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда	
					СтрокаДвижения.СчетФактура 		= СтруктураШапкиДокумента.Сделка;
				КонецЕсли;
			Исключение
			КонецПопытки;
			//конец изменения
			
			//Если ЭтоВозврат Тогда
			//	Если ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			//		СтрокаДвижения.ДокументОплаты	= СтруктураШапкиДокумента.Ссылка
			//	Иначе
			//		СтрокаДвижения.СчетФактура 		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка),
			//											СтруктураШапкиДокумента.Ссылка,СтруктураШапкиДокумента.Сделка);
			//	КонецЕсли;
			//Иначе	
			//	СтрокаДвижения.СчетФактура 			= СтруктураШапкиДокумента.Ссылка;
			//КонецЕсли; 
			СтрокаДвижения.ВалютаРасчетов		= ВалютаРасчетов;

			СтрокаДвижения.Сумма				= Сумма*?(ЭтоВозврат,-1,1);
			Если СчитатьВалютнуюСумму Тогда
				СтрокаДвижения.ВалютнаяСумма	= ВалютнаяСумма*?(ЭтоВозврат,-1,1);
			Иначе
				СтрокаДвижения.ВалютнаяСумма	= Сумма*?(ЭтоВозврат,-1,1);
			КонецЕсли;

			СтрокаДвижения.НалоговыйПериод		= СтруктураШапкиДокумента.НалоговыйПериод;
		КонецЕсли; 
		
		ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
    КонецЕсли;
	
	// при необходимости отражаем операции зачета аванса в подсистеме НДС
	Если не ТаблицаАвансов=Неопределено
		и не ?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора, СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора) = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		Тогда
		ТаблицаРаспределенныхОплат = ТаблицаАвансов.Скопировать();
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаАванса из ТаблицаРаспределенныхОплат Цикл
			Если СтрокаАванса.Сумма = 0 или ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаАванса.Сделка) или ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаАванса.ДокументОплаты) тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаАванса из СтрокиКУдалению Цикл
			ТаблицаРаспределенныхОплат.Удалить(СтрокаАванса);
		КонецЦикла;
		//убрал Трефиленков Дмитрий, РГ-Софт, 26 июня 2008 года
		//СформироватьДвиженияПоРаспределениюАвансов0(СтруктураШапкиДокумента, ТаблицаРаспределенныхОплат, Движения, Отказ);
		Если не ТаблицаРаспределенныхОплат.Количество()=0 тогда
		
			СоответствиеКолонок = Новый Соответствие();
			СоответствиеКолонок.Вставить("Контрагент","Покупатель");
			СоответствиеКолонок.Вставить("ВалютаВзаиморасчетов","ВалютаРасчетов");
			СоответствиеКолонок.Вставить("Сделка","СчетФактура");
			СоответствиеКолонок.Вставить("СуммаВал","ВалютнаяСумма");
			ПереименованиеКолонок(ТаблицаРаспределенныхОплат, СоответствиеКолонок);
			
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Документ");
			
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Организация");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("ЗачетАванса", Новый ОписаниеТипов("Булево"));
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(Истина, "ЗачетАванса");
			СтрокаРаспределеннойОплаты = Неопределено; //добавленная строка
			//Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")     DELETE
			//	И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
			//	ТаблицаРаспределенныхОплат.Колонки.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
			//	Для Каждого СтрокаРаспределеннойОплаты Из ТаблицаРаспределенныхОплат Цикл
			//		СтрокаРаспределеннойОплаты.СчетФактура = СтруктураШапкиДокумента.ДокументОтгрузки;
			//		СтрокаРаспределеннойОплаты.Период = Макс(СтрокаРаспределеннойОплаты.СчетФактура.Дата, СтрокаРаспределеннойОплаты.ДокументОплаты.Дата);
			//		Если Не СтрокаРаспределеннойОплаты.ДокументОплаты.Дата < СтрокаРаспределеннойОплаты.СчетФактура.Дата Тогда
			//			СтрокаРаспределеннойОплаты.ЗачетАванса = Ложь;
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;    
			
			// Погашение задолженности
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СчетФактура"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);
			
			// Погашение документов оплаты
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("ДокументОплаты"),"Документ");
			ТаблицаОплат = ПолучитьДанныеПоЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаРаспределенныхОплат, Истина);
			Если не ТаблицаОплат = Неопределено Тогда
				ТаблицаОплат.Колонки.Документ.Имя = "ДокументОплаты";
			КонецЕсли; 
			
			ТаблицаОплатСкорректированная = ТаблицаРаспределенныхОплат.Скопировать();
			
			СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента, ДокументОплаты, ВалютаРасчетов");
			Для Каждого СтрокаТаблицы Из ТаблицаОплатСкорректированная Цикл
				//СтрокаТаблицы.СчетФактура = Неопределено;
				Если Не СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И 
					Не СтрокаТаблицы.ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И 
					ТаблицаОплат <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
					СтрокиЗадолженности = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
					Если СтрокиЗадолженности.Количество() > 0 И СтрокиЗадолженности[0].ВалютнаяСумма <> 0 Тогда
						СтрокаТаблицы.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ВалютнаяСумма,
																		СтрокаТаблицы.ВалютаРасчетов,
																		СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																		СтрокиЗадолженности[0].Сумма/СтрокиЗадолженности[0].ВалютнаяСумма, 1);
					КонецЕсли;
				КонецЕсли;
				// Если это реализация отгруженной продукции, то аванс может быть оплатой для целей НДС
				//Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")  DELETE
				//	И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке 
				//	И Не СтрокаРаспределеннойОплаты.ЗачетАванса Тогда
				//	СтрокаТаблицы.ВидДвижения 	= ВидДвиженияНакопления.Расход;
				//	СтрокаТаблицы.Сумма			= (-1)*СтрокаТаблицы.Сумма;
				//	СтрокаТаблицы.ВалютнаяСумма	= (-1)*СтрокаТаблицы.ВалютнаяСумма;
				//Иначе
					СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход;
				//КонецЕсли;
			КонецЦикла;
			// Если это реализация отгруженной продукции, то аванс может быть оплатой для целей НДС
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплатСкорректированная, ТаблицаДвижений_НДСРасчетыСПокупателями);

			// Отражение распределенной задолженности
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("РаспределеннаяСумма");
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("Сумма"),"РаспределеннаяСумма");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("КурсоваяРазница");
			
			Для Счетчик = 0 По ТаблицаРаспределенныхОплат.Количество() - 1 Цикл
				Если ТаблицаРаспределенныхОплат[Счетчик].ЗачетАванса Тогда
					ТаблицаРаспределенныхОплат[Счетчик].КурсоваяРазница = ТаблицаОплатСкорректированная[Счетчик].Сумма - ТаблицаРаспределенныхОплат[Счетчик].РаспределеннаяСумма;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей	= Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей);
			
		КонецЕсли;
		
	КонецЕсли; 

	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество()>0 Тогда
		Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
	КонецЕсли; 	
	
	Если не ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Неопределено 
		и ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество()>0 
		Тогда
		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность()

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Розница(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ЭтоВозврат = ложь) Экспорт

	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей	= Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
	
	Сумма = 0;
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
			
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Сумма = Сумма + СтрокаДок.НДС;

	КонецЦикла;
	
	Если Не (Сумма = 0) Тогда
		СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
		
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетФактура 			= ?(ЭтоВозврат И Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);
		СтрокаДвижения.ДокументОплаты 		= ?(ЭтоВозврат И Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, СтруктураШапкиДокумента.Ссылка);

		СтрокаДвижения.РаспределеннаяСумма	= Сумма*?(ЭтоВозврат,-1,1);

		СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
	КонецЕсли; 
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

	Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество()>0 Тогда
		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность()

//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС
//////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Непосредственное заполнение таблицы движений для регистра "НДСПартииТоваров"
// Данные движения необходимо делать в следующих случаях:
// 1. Когда ведется сложный учет НДС и происходит приходование товаров или материалов.
//    Это соответсвтвует ситуации когда у организации существуют виды деятельности, 
//    облагаемые НДС по-разному, например обычный НДС, НДС по ставке 0%, и т.п.).
// 2. Когда происходит оприходование оборудования, требуегощего монтажа (бухсчет 07)
//    для того чтобы впоследствии, можно было правильно рассчитать суммы для отражения в 
//    регистре НДССтроительство при передаче этого оборудования в монтаж.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТЗ, ТаблицаДвиженийНДСПартии, Отказ) экспорт
	
	Если ТЗ.Количество()=0 тогда
		//Отрабатывать ничего не надо.
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли; 
	
	Если ТЗ.Колонки.Найти("Партия") = неопределено тогда 
		ТЗ.Колонки.Добавить("Партия");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;
	Если ТЗ.Колонки.Найти("Склад") = неопределено тогда 
		ТЗ.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("Услуга") = неопределено тогда 
		ТЗ.Колонки.Добавить("Услуга", новый описаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("НДСВключенВСтоимость")= Неопределено Тогда
		ТЗ.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВключенВСтоимость,"НДСВключенВСтоимость");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетФактура")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетФактура");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура");
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетУчетаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетУчетаНДС");
		Если СтруктураШапкиДокумента.Свойство("СчетУчетаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС,"СчетУчетаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СтавкаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СтавкаНДС");
		Если СтруктураШапкиДокумента.Свойство("СтавкаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС,"СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	ЕстьСтоимость	= не ( ТЗ.Колонки.Найти("Стоимость") = Неопределено);
	ЕстьСуммаБезНДС	= не ( ТЗ.Колонки.Найти("СуммаБезНДС") = Неопределено);
	ЕстьНДС			= не ( ТЗ.Колонки.Найти("НДС") = Неопределено);
	
	ТЗ.Свернуть("СчетФактура, Партия,Склад, ВидЦенности,СчетУчетаЦенности,Номенклатура,НДСВключенВСтоимость, Услуга,СчетУчетаНДС, СтавкаНДС",
		"Количество"+?(ЕстьСтоимость,", Стоимость"+?(ЕстьНДС,", НДС",""),?(ЕстьСуммаБезНДС,", СуммаБезНДС","") + ?(ЕстьНДС,", НДС","")));
		
	Для Каждого СтрокаДок из ТЗ Цикл
		
		Если СтрокаДок.СчетУчетаЦенности.Забалансовый Тогда
			// Для товаров, учтываемых на забалансовых счетах учет НДС не ведется.
			Продолжить;
		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ГотоваяПродукция 
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
			или СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная)
			Тогда
			// Готовая продукция в партионном учете для  НДС не отображается.
			Продолжить;
		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.Полуфабрикаты
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда
			// Полуфабрикаты собственного производства в партионном учете для  НДС не отображаются.
			Продолжить;
		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ
			 Тогда
			// Розница в продажных ценах без учета номенкладтуры.
			// Не требуется вести учет по партиям в дальнейшем
			Продолжить;
		ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учитываются в регистре.

		ИначеЕсли СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
			или СтрокаДок.СчетУчетаЦенности = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
			или СтрокаДок.СчетУчетаЦенности.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
			Тогда
			// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
		Иначе 
			// Не отражаем в регистре партий.
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСПартии.Добавить();
		СтрокаДвижения.Активность	= Истина;
		СтрокаДвижения.Период		= СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижения.СчетФактура	= СтрокаДок.СчетФактура;
		СтрокаДвижения.НДСВключенВСтоимость = СтрокаДок.НДСВключенВСтоимость;
		Если УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаДок.СчетУчетаЦенности) Тогда
			СтрокаДвижения.Склад		= СтрокаДок.Склад;
		КонецЕсли; 
		СтрокаДвижения.СчетУчета	= СтрокаДок.СчетУчетаЦенности;
		СтрокаДвижения.ВидЦенности	= СтрокаДок.ВидЦенности;
		СтрокаДвижения.Номенклатура = СтрокаДок.Номенклатура;
		СтрокаДвижения.Партия		= СтрокаДок.Партия;
		Если СтрокаДок.Услуга Тогда
			СтрокаДвижения.Количество =	0;
		Иначе	
			СтрокаДвижения.Количество =	СтрокаДок.Количество;
		КонецЕсли;
		
		СтрокаДвижения.СчетУчетаНДС	= СтрокаДок.СчетУчетаНДС;
		СтрокаДвижения.СтавкаНДС	= СтрокаДок.СтавкаНДС;
		
		СтрокаДвижения.Стоимость	= ?(ЕстьСтоимость,СтрокаДок.Стоимость,?(ЕстьСуммаБезНДС,СтрокаДок.СуммаБезНДС,0) + ?(ЕстьНДС,СтрокаДок.НДС,0));
		СтрокаДвижения.НДС			= ?(ЕстьНДС,СтрокаДок.НДС,0);
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПартииТоваров()

//Удалает повторяющиеся элементы массива.
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМасссиве = Новый Соответствие; 
		БылоНеопределено = Ложь;
		
		КолвоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента = ТипЗнч(ЭлементМассива); 
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМасссиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМасссиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручкиИсходная,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь) Экспорт
	
	//DELETE
	//ТаблицаВыручки = ТаблицаВыручкиИсходная.Скопировать();
	//ВидДокумента = "";
	//СтруктураШапкиДокумента.Свойство("ВидДокумента",ВидДокумента);
	//ВестиСуммовойУчетПоСкладамБУ = УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	//
	//Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	//	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	//	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	//КонецЕсли; 
	//
	//ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();
	//ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	//ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	//ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	//
	//Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
	//	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	//КонецЕсли;
	//
	//Для Каждого Кол Из ТаблицаВыручки.Колонки Цикл
	//	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Кол.Имя) = Неопределено Тогда
	//		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения); 
	//	КонецЕсли; 
	//КонецЦикла;
	//	
	//Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
	//	ТаблицаВыручки.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));
	//КонецЕсли;
	//ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый описаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	//
	//ЕстьСтавкаНДС = не (ТаблицаВыручки.Колонки.Найти("СтавкаНДС") = неопределено);
	//Если не ЕстьСтавкаНДС тогда
	//	Если СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров") Тогда
	//		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров,"НДСВСтоимостиТоваров")	
	//	КонецЕсли; 
	//КонецЕсли;
	//
	////////////////////////////////////////////////////////////////////////////////////
	//// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	//ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", новый описаниеТипов("Булево"));
	//ЕстьСкладВТЧ = не (ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено);
	//ВыданоСообщениеБезНДС = Ложь;
	//ВыданоСообщение0 = Ложь;
	//
	//Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
	//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетУчетаБУ) Тогда
	//		// Не указан счет учета ТМЦ, такое возможно только для услуг.
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//		
	//	ИначеЕсли СтрокаСписания.СчетУчетаБУ.Забалансовый Тогда
	//		// Для товаров, учтываемых на забалансовых счетах учет НДС не ведется.
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//		
	//	ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.Количество) Тогда
	//		// Строки с пустым количеством игнорируем
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//		
	//	ИначеЕсли СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ГотоваяПродукция 
	//		или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
	//		или СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная
	//		или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная)
	//		Тогда
	//		// Готовая продукция в партионном учете для  НДС не отображается.
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//		
	//	ИначеЕсли СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.Полуфабрикаты
	//		или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты)
	//		Тогда
	//		// Полуфабрикаты собственного производства в партионном учете для  НДС не отображаются.
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//		
	//	ИначеЕсли СтруктураШапкиДокумента.СложныйУчетНДС Тогда
	//		//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
	//		СтрокаСписания.СписыватьПоПартиямНДС = Истина;

	//	ИначеЕсли СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке
	//		или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
	//		или СтрокаСписания.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств
	//		или СтрокаСписания.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
	//		Тогда
	//		// Оставляем строки только по ОС. По ним партионный учет ведется всегда!
	//		СтрокаСписания.СписыватьПоПартиямНДС = Истина;

	//	Иначе 
	//		 Если ЕстьСтавкаНДС Тогда
	//			 Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС и не ВыданоСообщениеБезНДС Тогда
	//				 ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров или списывать на расходы (ст. 170 НК РФ).
	//				 |Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
	//				 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
	//			 ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и не ВыданоСообщение0 Тогда
	//				 ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
	//				 |До этого момента вычет должен быть заблокирован.
	//				 |Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
	//				 |и выполнить все связанные с этим действия!", ВыданоСообщение0,Заголовок,СтатусСообщения.Информация);
	//			 КонецЕсли;
	//		 ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
	//			 или СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости
	//			 тогда
	//			 Если не ВыданоСообщениеБезНДС Тогда
	//				 Если ВидДокумента = "СписаниеТоваров" тогда
	//					 ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>,
	//					 	 | НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
	//					 	 | Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
	//						 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
	//				 Иначе
	//					 ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике по налоговому учету необходимо установить флаг ""Организация осуществляет реализацию без НДС или с НДС 0%""
	//						 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
	//				 КонецЕсли; 
	//			 КонецЕсли; 
	//		 КонецЕсли;
	//		
	//		СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
	//	КонецЕсли;
	//	
	//	Если ЕстьСтавкаНДС Тогда
	//		Если ЭтоВозврат тогда 
	//			СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;	 
	//		ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
	//			СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	//		Иначе
	//   			СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
	//		КонецЕсли; 
	//	 КонецЕсли;
	//	 Если ЕстьСкладВТЧ тогда
	//		 Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.Склад)  Тогда
	//			 СтрокаСписания.Склад = справочники.Склады.ПустаяСсылка();
	//		 КонецЕсли; 
	//	 КонецЕсли;
	//КонецЦикла; 
	//
	//КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	//
	//Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
	//	ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
	//	Если НЕ ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
	//		ТаблицаВыручки.Удалить(ЭлементКоллекции); 
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	//
	//Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	//	ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//КонецЕсли; 
	//
	//
	//Если ТаблицаВыручки.Количество() = 0 Тогда
	//	//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
	//	Возврат ТаблицаВыручки;
	//КонецЕсли; 

	//Запрос = Новый Запрос;
	//
	//Если не ЭтоВозвратОтПокупателя Тогда
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	НДСПартииТоваровОстатки.Склад КАК Склад,
	//	|	НДСПартииТоваровОстатки.СчетУчета КАК СчетУчета,
	//	|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
	//	|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
	//	|	НДСПартииТоваровОстатки.Партия КАК Партия,
	//	|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
	//	|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
	//	|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
	//	|	НДСПартииТоваровОстатки.КоличествоОстаток,
	//	|	НДСПартииТоваровОстатки.СтоимостьОстаток,
	//	|	ВЫБОР
	//	|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ЕстьКоличество,
	//	|	НДСПартииТоваровОстатки.ВидЦенности,
	//	|	НДСПартииТоваровОстатки.СчетУчетаНДС,
	//	|	НДСПартииТоваровОстатки.СтавкаНДС,
	//	|	НДСПартииТоваровОстатки.НДСОстаток
	//	|ИЗ
	//	|	РегистрНакопления.НДСПартииТоваров.Остатки(
	//	|		&МоментСписания,
	//	|		Организация = &Организация
	//	|		    И СчетУчета В (&СписокСчетовУчета)
	//	|		    И Номенклатура В (&СписокНоменклатуры)
	//	|) КАК НДСПартииТоваровОстатки
	//	|ГДЕ
	//	|	(НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ДатаПартии,
	//	|	ДатаСФ";
	//	
	//	Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//		// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
	//	ИначеЕсли ВестиСуммовойУчетПоСкладамБУ Тогда

	//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
	//												"И Склад В (&СписокСкладов) ");
	//	КонецЕсли;
	//											
	//Иначе
	//	Запрос.УстановитьПараметр("ДокументРеализации",СтруктураШапкиДокумента.Сделка);
	//	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	НДСПартииТоваров.Склад КАК Склад,
	//	|	НДСПартииТоваров.СчетУчета КАК СчетУчета,
	//	|	НДСПартииТоваров.Номенклатура КАК Номенклатура,
	//	|	НДСПартииТоваров.Партия.Дата КАК ДатаПартии,
	//	|	НДСПартииТоваров.Партия КАК Партия,
	//	|	НДСПартииТоваров.СчетФактура.Дата КАК ДатаСФ,
	//	|	НДСПартииТоваров.СчетФактура КАК СчетФактура,
	//	|	НДСПартииТоваров.НДСВключенВСтоимость,
	//	|	НДСПартииТоваров.Количество КАК КоличествоОстаток,
	//	|	НДСПартииТоваров.Стоимость КАК СтоимостьОстаток,
	//	|	ВЫБОР
	//	|		КОГДА НДСПартииТоваров.Количество > 0
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ЕстьКоличество,
	//	|	НДСПартииТоваров.ВидЦенности,
	//	|	НДСПартииТоваров.СчетУчетаНДС,
	//	|	НДСПартииТоваров.СтавкаНДС,
	//	|	НДСПартииТоваров.НДС КАК НДСОстаток
	//	|ИЗ
	//	|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
	//	|ГДЕ
	//	|	НДСПартииТоваров.Регистратор = &ДокументРеализации
	//	|	И НДСПартииТоваров.СчетУчета В(&СписокСчетовУчета)
	//	|	И НДСПартииТоваров.Номенклатура В(&СписокНоменклатуры)
	//	|	И НДСПартииТоваров.ВидДвижения = &ВидДвиженияРасход
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ДатаПартии УБЫВ,
	//	|	ДатаСФ УБЫВ";
	//	
	//КонецЕсли; 
	//										
	//Запрос.УстановитьПараметр("МоментСписания", 		Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("Организация", 			СтруктураШапкидокумента.Организация);
	//
	//Запрос.УстановитьПараметр("СписокСкладов", 			УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Склад")));
	//Запрос.УстановитьПараметр("СписокСчетовУчета", 		УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("СчетУчетаБУ")));
	//Запрос.УстановитьПараметр("СписокНоменклатуры", 	УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));
	//
	//ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	//
	//СортироватьПоУказанномуДокументуПриВозврате = ЭтоВозврат и не ЭтоВозвратОтПокупателя и НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка);

	//Если СортироватьПоУказанномуДокументуПриВозврате Тогда
	//	ТаблицаПартий.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", новый описаниеТипов("Булево"));
	//КонецЕсли; 
	//
	//Для каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
	//	
	//	//Установим отбор таблицы запроса
	//	Если ЭтоВозвратОтПокупателя Тогда
	//		Отбор = Новый Структура("Номенклатура, ЕстьКоличество", СтрокаКСписанию.Номенклатура, Истина);
	//	Иначе
	//		Отбор = Новый Структура("СчетУчета, Номенклатура, ЕстьКоличество", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Истина);
	//	КонецЕсли; 
	//	
	//	Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//		// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
	//	ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) и Не ЭтоВозвратОтПокупателя Тогда
	//		Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
	//	КонецЕсли;
	//	
	//	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаКСписанию.Партия) Тогда
	//		Отбор.Вставить("Партия", СтрокаКСписанию.Партия);
	//	КонецЕсли;
	//	
	//	ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
	//	СписатьПоКлючу = СтрокаКСписанию.Количество;
	//	
	//	// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
	//	ТаблицаОстатки  = Новый ТаблицаЗначений;
	//	// Добавим колонку с индексом
	//	ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	//	
	//	
	//	Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
	//		ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	//	КонецЦикла;
	//	Индекс = 0;
	//	Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
	//		НоваяСтрока = ТаблицаОстатки.Добавить();
	//		НоваяСтрока.ИндексНайденнойСтроки = Индекс;
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ); 

	//		Если СортироватьПоУказанномуДокументуПриВозврате Тогда
	//			НоваяСтрока.ПартияСовпадаетСУказаннымДокументомДляВозврата = (НоваяСтрока.Партия = СтруктураШапкиДокумента.Сделка);
	//		КонецЕсли; 
	//		Индекс = Индекс + 1;
	//	КонецЦикла;
	//	
	//	НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "Убыв", "Возр");
	//	НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
	//	ТаблицаОстатки.Сортировать(?(СортироватьПоУказанномуДокументуПриВозврате,"ПартияСовпадаетСУказаннымДокументомДляВозврата Убыв, ","")+
	//								"ДатаПартии "+НаправлениеСортировкиПартий+
	//								", Партия "+НаправлениеСортировкиПартий+
	//								", ДатаСФ "+НаправлениеСортировкиПартий+
	//								", СчетФактура "+НаправлениеСортировкиПартий+
	//								", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
	//	
	//	ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетУчетаНДС");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//	ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
	//	Если ЭтоВозврат и не ЭтоВозвратОтПокупателя Тогда
	//		ТаблицаСписанияПоСтроке.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый описаниеТипов("Булево"));
	//	КонецЕсли; 
	//	
	//	Для каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
	//		
	//		Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания,СтрокаТаблицыПартийНДС);

	//		СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
	//		СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
	//		СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
	//		
	//		Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
	//			СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
	//		Иначе
	//			СтрокаТаблицыСписания.Склад					= СтрокаТаблицыПартийНДС.Склад;	
	//		КонецЕсли; 
	//		
	//		Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
	//		ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
	//		Иначе
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
	//		КонецЕсли;
	//		
	//		СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
	//		
	//		Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
	//			Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
	//			КонецЕсли;
	//		КонецЕсли;
	//					
	//		СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
	//		
	//		СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
	//		СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
	//		СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
	//		
	//		Если СписатьПоКлючу<=0 Тогда
	//			прервать;
	//		КонецЕсли; 
	//		
	//	КонецЦикла;
	//	
	//	//Распределение доп. расходов
	//	ПартииКСписанию = ТаблицаСписанияПоСтроке.Скопировать();
	//	ПартииКСписанию.Свернуть("Партия", "Количество, Стоимость");
	//	
	//	Для Каждого Партия Из ПартииКСписанию Цикл
	//		//Установим отбор таблицы запроса
	//		Если ЭтоВозвратОтПокупателя Тогда
	//			Отбор = Новый Структура("Номенклатура, Партия", СтрокаКСписанию.Номенклатура, Партия.Партия);
	//		Иначе
	//			Отбор = Новый Структура("СчетУчета, Номенклатура, Партия", СтрокаКСписанию.СчетУчетаБУ, СтрокаКСписанию.Номенклатура, Партия.Партия);
	//		КонецЕсли;
	//		Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" и СтруктураШапкиДокумента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//			// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
	//		ИначеЕсли УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
	//			Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
	//		КонецЕсли;

	//		ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
	//		
	//		//Определим коэффициент доп. расходов
	//		СуммаПоПартии = 0;
	//		Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
	//			Если СтрокаПартии.ЕстьКоличество Тогда
	//				СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
	//			ИначеЕсли СортироватьПоУказанномуДокументуПриВозврате Тогда
	//				СтрокаПартии.ПартияСовпадаетСУказаннымДокументомДляВозврата = (СтрокаПартии.Партия = СтруктураШапкиДокумента.Сделка);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
	//		Если СуммаПоПартии = 0 Тогда
	//			КоличествоПоПартии = 0;
	//			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
	//				Если СтрокаПартии.ЕстьКоличество Тогда
	//					КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		//Проверим наличие доп расходов
	//		Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если СуммаПоПартии <> 0 Тогда
	//			К = Партия.Стоимость / СуммаПоПартии;
	//		Иначе
	//			К = Партия.Количество / КоличествоПоПартии;
	//		КонецЕсли;
	//		
	//		//Спишем доп. расходы
	//		Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
	//			
	//			Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
	//			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСписания, СтрокаПартии);

	//			СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
	//			СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
	//			
	//			Если ЭтоВозвратОтПокупателя и не УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаКСписанию.СчетУчетаБУ) Тогда
	//				СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
	//			Иначе
	//				СтрокаТаблицыСписания.Склад					= СтрокаПартии.Склад;	
	//			КонецЕсли; 
	//			
	//			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаПартии.НДСВключенВСтоимость) Тогда
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
	//			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
	//			Иначе
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
	//				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
	//			КонецЕсли;
	//			
	//			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
	//			
	//			Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
	//				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
	//					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
	//				КонецЕсли;
	//			КонецЕсли;
	//							
	//			СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
	//			СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//	//Перенесем данные в итоговую таблицу движений
	//	Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
	//		
	//		СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
	//		
	//		Для Каждого Кол Из ТаблицаСписанияНДСПоСтрокам.Колонки Цикл
	//			Если НЕ ТаблицаСписанияПоСтроке.Колонки.Найти(Кол.Имя) = Неопределено Тогда
	//				СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаСписания[Кол.Имя];
	//			ИначеЕсли НЕ ТаблицаВыручки.Колонки.Найти(Кол.Имя) = Неопределено Тогда 
	//				СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаКСписанию[Кол.Имя];
	//			КонецЕсли;
	//		КонецЦикла;
	//		СтрокаТаблицыСписанияНДС["СчетУчета"] = СтрокаТаблицыСписанияНДС["СчетУчетаБУ"];
	//	КонецЦикла;
	//	
	//	// Таблицу значений перенесем в найденные строки
	//	Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
	//		ЗаполнитьЗначенияСвойств(ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки],СтрокаТЧ);
	//	КонецЦикла;
	//	
	//	//Если СписатьПоКлючу>0 тогда
	//	//	ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура + ", счет учета " + СтрокаКСписанию.СчетУчетаБУ +?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад))+?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаКСписанию.Партия),""," (партия <"+строка(СтрокаКСписанию.Партия)+">)");
	//	//	Если ВидДокумента = "ПоступлениеИзПереработки" Тогда
	//	//		ТекстСообщения = ТекстСообщения + Символы.ПС + "Возможно, для изготовления продукции использовались полуфабрикаты или продукция собственного производства";
	//	//	КонецЕсли;
	//	//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок);
	//	//КонецЕсли;
	//	
	//КонецЦикла;
	//
	//ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация"); 
	//Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
	//	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	//КонецЕсли; 
	//QuieryId = 0;
	//Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
	//	QuieryId = QuieryId + 1;
	//	СтрокаСписания.QuieryId = QuieryId;
	//КонецЦикла; 
	//
	//Возврат ТаблицаСписанияНДСПоСтрокам;
	
КонецФункции

// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
/////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ

// Процедура вызывается из процедур.
// В тех случаях, когда розничная реализация в организации переведена на ЕНВД,
// при передаче товаров в розницу, происходит автоматическое включение НДС в себестоимость
// этих товаров
Процедура ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, ВключитьВСтоимость, НаборДвиженийХозрасчетный, НаборДвиженийНалоговый,Заголовок, Движения, ОтражатьПоПартиям = Истина) Экспорт

	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	Построитель_ТаблицаСписания.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСписания); //ОписаниеИсточника_ТаблицаСписания
	//Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Если ВключитьВСтоимость Тогда
		Отбор.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Использование = Истина;
	Иначе
		Отбор.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Использование = Истина;
	КонецЕсли; 
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			Если не ВключитьВСтоимость Тогда
				СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
				СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
				СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
			КонецЕсли; 
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетБУ") Тогда
		Если не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ") Тогда
			ОшибкаВПолучении = Ложь;
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Бух");
			
			СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ",?(ОшибкаВПолучении,Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		КонецЕсли; 
		
		ПартионныйУчетБУ = (СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
	
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетБУ",ПартионныйУчетБУ);
	Иначе
		ПартионныйУчетБУ = СтруктураШапкиДокумента.ПартионныйУчетБУ;
	КонецЕсли;
	
	Если (не (СтруктураШапкиДокумента.Свойство("НалоговыйУчетСпособОценкиМПЗ") или СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ")) и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) 
		или не СтруктураШапкиДокумента.Свойство("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		
		СтруктураШапкиДокумента.Вставить("НалоговыйУчетСпособОценкиМПЗ",?(ОшибкаВПолучении,Перечисления.СпособыОценки.ПоСредней, УчетнаяПолитика.СпособОценкиМПЗ));
		СтруктураШапкиДокумента.Вставить("СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость",?(?(ОшибкаВПолучении, истина, ОбщегоНазначения.ЗначениеНеЗаполнено(УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость)),Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, УчетнаяПолитика.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость));
	КонецЕсли; 
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ") Тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ПартионныйУчетНУ = (СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
						или СтруктураШапкиДокумента.НалоговыйУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО);
		Иначе
			ПартионныйУчетНУ = Ложь;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетНУ",ПартионныйУчетНУ);
	Иначе
		ПартионныйУчетНУ = СтруктураШапкиДокумента.ПартионныйУчетНУ;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ЕстьNull(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, Неопределено) как СчетФактураДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
		КонецЕсли; 
	КонецЦикла;
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ОсобыйПорядокОтражения_ст170НКРФ = (ВключитьВСтоимость и СтруктураШапкиДокумента.Дата >='20060101');
	
	Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
		
		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость" 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(новый моментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка),ВидГраницы.Исключая));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&Период,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)
		|		    И ВидЦенности В (&ВидыЦенностей)
		|		    И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	(НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток) > 0
		|ИТОГИ ПО
		|	СчетФактура";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС"); 
			
			
			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл
				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");
				Если СтрокаОстаткаПоСФ = Неопределено Тогда
				     ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					 ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					 ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					 ОбрабатываемаяСтрока.НДС					= 0;
				Иначе
					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					
					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока); 
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл
						СуммаБезНДС_ВСтоимость	= Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость			= Мин(СтрокаОстатка.НДС,НДСКСписанию);
						
						СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию			= НДСКСписанию - НДС_ВСтоимость;
						
						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;
						
						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли; 
						
						Если СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли; 
						
					КонецЦикла; 
					Если не (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию			= НДСКСписанию;
						
						ОбрабатываемаяСтрока.СуммаБезНДС			= ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС					= ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Отразить в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
  	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленный);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСПредъявленный.Количество() = 0 Тогда
		Движения.НДСПредъявленный.мПериод            = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
	КонецЕсли; 

	// Отразить в регистре НДСВключенныйВСтоимость
	ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.Выгрузить();
	ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСВключенныйВСтоимость);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСВключенныйВСтоимость.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСВключенныйВСтоимость.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСВключенныйВСтоимость.Количество() = 0 Тогда
		Движения.НДСВключенныйВСтоимость.мПериод            = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений   = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли;
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	Если ОсобыйПорядокОтражения_ст170НКРФ
		и (не ДанныеДляОбработки.Итог("НДСКСписанию") = 0 или не ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0)
		Тогда
		
		Если СтруктураШапкиДокумента.Дата >='20060530' Тогда
			//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
			СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС, Покупатель","СуммаБезНДСКСписанию", "НДСКСписанию", "Поставщик");
			
			ТаблицаДвижений_НДСНачисленный	= Движения.НДСначисленный.Выгрузить();
			ТаблицаДвижений_НДСНачисленный.Очистить();
			ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСНачисленный);
			ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования, Истина);
			
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
			
			//Зачистить таблицу от записей с пустыми суммами
			СтрокиКУдалению = ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("НДС, СуммаБезНДС", 0,0));
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			Если не ТаблицаДвижений_НДСНачисленный.Количество() = 0 Тогда
				Движения.НДСначисленный.мПериод            = СтруктураШапкиДокумента.Дата;
				Движения.НДСначисленный.мТаблицаДвижений   = ТаблицаДвижений_НДСНачисленный;
				Движения.НДСначисленный.ДобавитьДвижение();
			КонецЕсли;
		Иначе
			
			// Отразить в регистре НДСПредъявленный (в книге покупок)
			ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.Выгрузить();
			ТаблицаДвижений_НДСПредъявленный.Очистить();
			
			//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
			СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС","СуммаБезНДСКСписанию", "НДСКСписанию");
			
			
			ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СтруктураПереименования);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленный);
			ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СтруктураПереименования, истина);
			
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			
			//Зачистить таблицу от записей с пустыми суммами
			СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСсписанНаРасходы,"Событие");
			
			Если не ТаблицаДвижений_НДСПредъявленный.Количество() = 0 Тогда
				Движения.НДСПредъявленный.мПериод            = СтруктураШапкиДокумента.Дата;
				Движения.НДСПредъявленный.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленный;
				Движения.НДСПредъявленный.ДобавитьДвижение();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
	КолонкиТаблицыСписания = ДанныеДляОбработки.Колонки;
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии
	
	Если ВключитьВСтоимость Тогда
		МассивСтоимость = ДанныеДляОбработки.ВыгрузитьКолонку("Стоимость");
		МассивКоличество = ДанныеДляОбработки.ВыгрузитьКолонку("Количество");
		МассивНДС = ДанныеДляОбработки.ВыгрузитьКолонку("НДС");
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			
			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость, СтрокаТаблицыВключения,КолонкиТаблицыСписания, НаборДвиженийХозрасчетный,НаборДвиженийНалоговый,Заголовок);
			
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
			    СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
			    СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
				Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
				     СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС - СтрокаТаблицыВключения.НДСКСписанию;
				КонецЕсли;  
			КонецЕсли;

		КонецЦикла;
		
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			
			ДанныеДляОбработки.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСтоимость,"Стоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивКоличество,"Количество");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивНДС,"НДС");
		КонецЕсли;
			
		Если ОсобыйПорядокОтражения_ст170НКРФ 
			и не (ДанныеДляОбработки.Итог("НДСКСписанию") = 0 и ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если не СтрокаДанных.НДСКСписанию = 0  
					или не СтрокаДанных.СуммаБезНДСКСписанию = 0 
					Тогда
					//Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указанаия счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки+1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;
					
					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС; 
					
				КонецЕсли; 
			КонецЦикла; 
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);
			
			
			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;
			
			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("QuieryId", СтрокаДанных.QuieryId));
					Если не СтрокиТаблицы_ДанныеДляОбработки.Количество() = 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки+1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
		КонецЕсли; 
			
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	Иначе
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость, СтрокаТаблицыВключения,КолонкиТаблицыСписания, НаборДвиженийХозрасчетный,НаборДвиженийНалоговый,Заголовок);
		    СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
		    СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
		    СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
		КонецЦикла;
		Если ОтражатьПоПартиям Тогда
			ДанныеДляОбработки.ЗаполнитьЗначения(Ложь, "НДСВключенВСтоимость");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого СтрокаСписания из ТаблицаСписания Цикл
	    Если ?(ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости) Тогда
			СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;
		КонецЕсли; 
	КонецЦикла; 
	
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

Процедура СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(СтруктураШапкиДокумента,ВключитьВСтоимость = Истина, СтрокаСписания, КолонкиСтрокиСписания, НаборДвиженийХозрасчетный,НаборДвиженийНалоговый,Заголовок, ЭтоВозврат=Ложь)
	
	Если ВключитьВСтоимость Тогда
		ЕстьКолонкаНДСКСписанию = (не КолонкиСтрокиСписания.Найти("НДСКСписанию")= неопределено);
		
		ДляБУСписыватьНаРаcходы = (СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы);
		
		ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету = (ДляБУСписыватьНаРаcходы 
								или (СтруктураШапкиДокумента.Дата >='20060101' и СтруктураШапкиДокумента.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ));
		ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету = (СтруктураШапкиДокумента.Дата >='20060101');
	КонецЕсли; 
	
	Если СтрокаСписания.НДС = 0 и (не (ВключитьВСтоимость и ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0)) тогда
		//Формирование проводки не требуется
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "БУ: Не хватает данных для формирования проводки по "+?(ВключитьВСтоимость,"включению НДС в стоимость МПЗ","исключению НДС из стоимости МПЗ:");
	НедостаточноДанных = Ложь;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетФактура) тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете-фактуре";
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " счет-фактура <"+Строка(СтрокаСписания.СчетФактура)+">";
	
		Если (ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетУчетаНДС)) тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете учета НДС";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
		ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Ложь;
		// Для списания на расходы необходим "СчетСписанияНДСБУ" в строке т.ч. 
		Если ВключитьВСтоимость 
			и (ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
			или (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету и (ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0))) // Есть НДС к списанию на отдельный счет
			и ?(КолонкиСтрокиСписания.Найти("СчетСписанияНДСБУ") = неопределено,Истина,ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетСписанияНДСБУ))
		 	Тогда
			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДСБУ") = неопределено Тогда
			    ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
				НедостаточноДанных = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		// Для включения в стоимость (исключения из стоимости) необходим "КорСчетСписанияБУ" в строке т.ч. 
		Если ((ВключитьВСтоимость 
			и не ДляБУСписыватьНаРаcходы // НДС списывается на отдельный счет
			и не (ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету и СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			или не ВключитьВСтоимость или ИспользоватьКорСчетСписанияПриСписанииНаРасходы) 
			и ?(КолонкиСтрокиСписания.Найти("КорСчетСписанияБУ") = неопределено,Истина,ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.КорСчетСписанияБУ))
		 	Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
			НедостаточноДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НедостаточноДанных Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке,, Заголовок,СтатусСообщения.Внимание);
	Иначе
		
		ПартионныйУчетБУ = ?(СтруктураШапкиДокумента.Свойство("ПартионныйУчетБУ"),СтруктураШапкиДокумента.ПартионныйУчетБУ,Истина);

		// отразим факт включения НДС в стоимость (исключения из стоимости) соотвествующей проводкой 
		Если (не ВключитьВСтоимость = ЭтоВозврат) Тогда

			Если ВключитьВСтоимость тогда
				Если ДляБУСписыватьНаРаcходы тогда
				    СуммаКВключениюВСтоимость = 0;
					СуммаКСписанию = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				ИначеЕсли ДляБУСписыватьНаРаcходыЕслиНДСПринятКВычету тогда
					СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
					СуммаКСписанию = ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
				Иначе
				    СуммаКВключениюВСтоимость = СтрокаСписания.НДС + ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);
					СуммаКСписанию = 0;
				КонецЕсли;
			Иначе
				СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
				СуммаКСписанию = 0;
			КонецЕсли; 
			
			Если не СуммаКВключениюВСтоимость = 0 Тогда
				
				МассивКоррСубконто = новый Массив(3);
				Для НомерСубконто=1 По 3 Цикл
					Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
					КонецЕсли;
				КонецЦикла;
				
				// проводка, отражающая включение НДС в стоимость
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.НомерЖурнала = "НДС";
				СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияБУ; 
				
				Если ПартионныйУчетБУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания, 
								  МассивКоррСубконто[0],
								  МассивКоррСубконто[1],
								  МассивКоррСубконто[2]
								  );

				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
				СтрокаСписанияПроводка.Сумма        = СуммаКВключениюВСтоимость;
			КонецЕсли; 
			
			Если не СуммаКСписанию = 0 Тогда
				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
				    СчетСписания = СтрокаСписания.КорСчетСписанияБУ;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				Иначе	
				    СчетСписания = СтрокаСписания.СчетСписанияНДСБУ;
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("СубконтоСписанияНДСБУ"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["СубконтоСписанияНДСБУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли; 
				
				
				// проводка, отражающая включение НДС в стоимость
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.НомерЖурнала = "НДС";
				
				СтрокаСписанияПроводка.СчетДт = СчетСписания; 
				
				Если ПартионныйУчетБУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания, 
								  МассивКоррСубконто[0],
								  МассивКоррСубконто[1],
								  МассивКоррСубконто[2]
								  );

				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС списан на расходы";
				СтрокаСписанияПроводка.Сумма        = СуммаКСписанию;
			КонецЕсли; 

		ИначеЕсли (ВключитьВСтоимость =  ЭтоВозврат) тогда

			МассивКоррСубконто = новый Массив(3);
			Для НомерСубконто=1 По 3 Цикл
				Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияБУ"+НомерСубконто)= Неопределено Тогда
					МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияБУ"+НомерСубконто];
				КонецЕсли;
			КонецЦикла;
			// обратная проводка, отражающая исключение НДС из стоимости при
			// передаче из розницы ЕНВД в опт

			СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
			СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
			СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
			СтрокаСписанияПроводка.НомерЖурнала = "НДС";
			СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияБУ; 
			Если ПартионныйУчетБУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
				СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания,
							  МассивКоррСубконто[0],
							  МассивКоррСубконто[1],
							  МассивКоррСубконто[2]
							   ,,,);

	 		СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
			ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
			ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

			СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС исключен из стоимости МПЗ";
			СтрокаСписанияПроводка.Сумма        = СтрокаСписания.НДС;

		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ПартионныйУчетНУ = ?(СтруктураШапкиДокумента.Свойство("ПартионныйУчетНУ"),СтруктураШапкиДокумента.ПартионныйУчетНУ,Истина);
		
		СообщениеОбОшибке = "НУ: Не хватает данных для формирования проводки по "+?(ВключитьВСтоимость,"включению НДС в стоимость МПЗ","исключению НДС из стоимости МПЗ:");
		НедостаточноДанных = Ложь;
		
		КорСчетСписанияБУ_ЕНВД = ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СтрокаСписания.КорСчетСписанияБУ);
		СчетСписанияНДСБУ_ЕНВД = ?(не КолонкиСтрокиСписания.Найти("СчетСписанияНДСБУ") = Неопределено, ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетСписанияНДСБУ),КорСчетСписанияБУ_ЕНВД,ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СтрокаСписания.СчетСписанияНДСБУ)),КорСчетСписанияБУ_ЕНВД);
		
		ВозможенПустойКоррСчетНУ = ?(СтруктураШапкиДокумента.ВидДокумента = "ПеремещениеТоваров",СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный , Ложь) ;
		
		ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Ложь;
		
		// Для включения в стоимость (исключения из стоимости) необходим "КорСчетСписанияНУ" в строке т.ч. 
		Если ((ВключитьВСтоимость 
			и не (ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету и СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			или не ВключитьВСтоимость) 
			и (?(КолонкиСтрокиСписания.Найти("КорСчетСписанияНУ") = неопределено, Истина,ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.КорСчетСписанияНУ)) и не КорСчетСписанияБУ_ЕНВД)
		 	Тогда
			Если не ВозможенПустойКоррСчетНУ Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
				НедостаточноДанных = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		// Для списания на расходы необходим "СчетСписанияНДСНУ" в строке т.ч. 
		Если ВключитьВСтоимость 
			и ДляНУСписыватьНаРаcходыЕслиНДСПринятКВычету
			и (ЕстьКолонкаНДСКСписанию и не СтрокаСписания.НДСКСписанию = 0) // Есть НДС к списанию на отдельный счет
			и (?(КолонкиСтрокиСписания.Найти("СчетСписанияНДСНУ") = неопределено,Истина,
			ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетСписанияНДСНУ) )и не СчетСписанияНДСБУ_ЕНВД)
		 	Тогда
			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДСНУ") = неопределено Тогда
				ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			Иначе
				Если не ВозможенПустойКоррСчетНУ Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
					НедостаточноДанных = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если НедостаточноДанных Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СообщениеОбОшибке,, Заголовок,СтатусСообщения.Внимание);
		Иначе
		
			// отразим факт включения НДС в стоимость соотвествующей проводкой 
			Если (не ВключитьВСтоимость = ЭтоВозврат) тогда
				Если не СтрокаСписания.НДС = 0 
					и не КорСчетСписанияБУ_ЕНВД
					Тогда
				
					МассивКоррСубконто = новый Массив(3);
					Для НомерСубконто=1 По 3 Цикл
						Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
						КонецЕсли;
					КонецЦикла;

					// проводка, отражающая включение НДС в стоимость
					СтрокаСписанияПроводка = НаборДвиженийНалоговый.Добавить();
					СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
					СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
					СтрокаСписанияПроводка.КорректируемыйДокумент = СтруктураШапкиДокумента.Ссылка;
					СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияНУ; 
					
					Если ПартионныйУчетНУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
					КонецЕсли;
					
					УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
					СтрокаСписанияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);
									  
					СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС включен в стоимость МПЗ";
					СтрокаСписанияПроводка.Сумма        = СтрокаСписания.НДС;
				КонецЕсли;
				
				Если не ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0) = 0
					и не СчетСписанияНДСБУ_ЕНВД
					Тогда
					Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
					    СчетСписания = СтрокаСписания.КорСчетСписанияНУ;
						МассивКоррСубконто = новый Массив(3);
						Для НомерСубконто=1 По 3 Цикл
							Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
								МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
							КонецЕсли;
						КонецЦикла;
					Иначе	
					    СчетСписания = СтрокаСписания.СчетСписанияНДСНУ;
						МассивКоррСубконто = новый Массив(3);
						Для НомерСубконто=1 По 3 Цикл
							Если не КолонкиСтрокиСписания.Найти("СубконтоСписанияНДСНУ"+НомерСубконто)= Неопределено Тогда
								МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["СубконтоСписанияНДСНУ"+НомерСубконто];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли; 
				

					// проводка, отражающая включение НДС в стоимость
					СтрокаСписанияПроводка = НаборДвиженийНалоговый.Добавить();
					СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
					СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
					СтрокаСписанияПроводка.КорректируемыйДокумент = СтруктураШапкиДокумента.Ссылка;
					
					СтрокаСписанияПроводка.СчетДт = СчетСписания; 
					
					Если ПартионныйУчетНУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
					КонецЕсли;
					
					УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания, 
									  МассивКоррСубконто[0],
									  МассивКоррСубконто[1],
									  МассивКоррСубконто[2]
									  );
					СтрокаСписанияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
					ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);
									  
					СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС списан на расходы";
					СтрокаСписанияПроводка.Сумма        = СтрокаСписания.НДСКСписанию;
				КонецЕсли;

			ИначеЕсли не КорСчетСписанияБУ_ЕНВД 
				и ВключитьВСтоимость = ЭтоВозврат 
				тогда

				МассивКоррСубконто = новый Массив(3);
				Для НомерСубконто=1 По 3 Цикл
					Если не КолонкиСтрокиСписания.Найти("КорСубконтоСписанияНУ"+НомерСубконто)= Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписанияНУ"+НомерСубконто];
					КонецЕсли;
				КонецЦикла;
				// обратная проводка, отражающая исключение НДС из стоимости при
				// передаче из розницы ЕНВД в опт

				СтрокаСписанияПроводка = НаборДвиженийНалоговый.Добавить();
				СтрокаСписанияПроводка.Период       = СтруктураШапкиДокумента.Дата;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.КорректируемыйДокумент = СтруктураШапкиДокумента.Ссылка;
				СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписанияНУ; 
				Если ПартионныйУчетНУ и УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;
				
				УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(СтрокаСписанияПроводка, СтрокаСписания,
								  МассивКоррСубконто[0],
								  МассивКоррСубконто[1],
								  МассивКоррСубконто[2]
								   ,,,);

				СтрокаСписанияПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				ОбщегоНазначения.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Договоры", СтрокаСписания.СчетФактураДоговорКонтрагента);
				
				СтрокаСписанияПроводка.Содержание = ?(ЭтоВозврат,"Сторно: ","")+"НДС исключен из стоимости МПЗ";
				СтрокаСписанияПроводка.Сумма        = СтрокаСписания.НДС;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок, Движения) Экспорт

	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"ДокументОтгрузки");
	Иначе
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	// Отразить в регистре НДСПредъявленныйРеализация0
	ТаблицаДвижений_НДСПредъявленныйРеализация0	= Движения.НДСПредъявленныйРеализация0.Выгрузить();
	ТаблицаДвижений_НДСПредъявленныйРеализация0.Очистить();
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли; 
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленныйРеализация0);
	
	Движения.НДСПредъявленныйРеализация0.мПериод            = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений   = ТаблицаДвижений_НДСПредъявленныйРеализация0;
	Движения.НДСПредъявленныйРеализация0.ДобавитьДвижение();
	
	//КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	////////////////////////////////////////////////////////
	// Движения по НДС партии и по регистру бухгалтерии

	Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
		СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаСписания, НаборДвиженийХозрасчетный,Заголовок);
	КонецЦикла; //Для каждого Строка Из ТаблицаСписания Цикл
	// Движения по НДС партии и по регистру бухгалтерии
	////////////////////////////////////////////////////////
	
КонецПроцедуры // ОтразитьПредположениеСтавки0()

Процедура СформироватьПроводкиПоПредположениюСтавки0(СтруктураШапкиДокумента,СтрокаДвижения, НаборДвиженийХозрасчетный,Заголовок)
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.НДС) тогда
		//Формирование проводки не требуется
		Возврат;
	ИначеЕсли (ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.СчетУчетаНДС))
	 Тогда
		// Недостаточно данных для формирования проводки по данной строке
		ОбщегоНазначения.СообщитьОбОшибке("Не хватает данных для формирования проводки по отнесению НДС на счет учета НДС по товарам реализованным по ставке 0% (экспорт).",, Заголовок,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// отразим факт включения НДС в стоимость соотвествующей проводкой 
	СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();
	
	// проводка, отражающая включение НДС в стоимость
	СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; 
	ОбщегоНазначения.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);
	ОбщегоНазначения.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
	ОбщегоНазначения.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);

	СтрокаДвиженияПроводка.СчетКт = СтрокаДвижения.СчетУчетаНДС; // 19.хх
	ОбщегоНазначения.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
	ОбщегоНазначения.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	СтрокаДвиженияПроводка.Содержание = "В связи с применением НДС 0% по реализации";
	СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;

	СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;
	СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;
	СтрокаДвиженияПроводка.НомерЖурнала = "НДС";
	
КонецПроцедуры

//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА

Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаСписания, Движения, Отказ) Экспорт
	
	//DELETE
	//ТаблицаДвижений_НДСпоОСиНМА = Неопределено;
	//
	//СчетаУчетаОборудования = ОпределитьСчетаУчетаЦенностей("ОС");
	//
	//Для каждого СтрокаСписания Из ТаблицаСписания Цикл
	//	Если СчетаУчетаОборудования.НайтиПоЗначению(СтрокаСписания.СчетУчета) = неопределено	Тогда
	//		// Оставляем строки только по ОС
	//		Продолжить;
	//	КонецЕсли;
	//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСписания.СчетФактура) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
	//		ТаблицаДвижений_НДСпоОСиНМА	= Движения.НДСпоОСиНМА.Выгрузить();
	//		ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	//	КонецЕсли; 
	//			
	//	СтрокаДвиженияОС = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

	//	СтрокаДвиженияОС.Организация	= СтруктураШапкиДокумента.Организация;
	//	СтрокаДвиженияОС.ВидЦенности	= СтрокаСписания.ВидЦенности;
	//	СтрокаДвиженияОС.СчетФактура	= СтрокаСписания.СчетФактура;
	//	СтрокаДвиженияОС.СтавкаНДС		= СтрокаСписания.СтавкаНДС;
	//	СтрокаДвиженияОС.СчетУчетаНДС	= СтрокаСписания.СчетУчетаНДС;
	//	СтрокаДвиженияОС.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
	//	СтрокаДвиженияОС.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
	//	СтрокаДвиженияОС.Объект 		= СтрокаСписания.Номенклатура;
	//	
	//	Множитель = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС" или СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Приход,1,-1);
	//	СтрокаДвиженияОС.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС)*Множитель;
	//	СтрокаДвиженияОС.НДС         	= СтрокаСписания.НДС*Множитель;
	//	
	//	СтрокаДвиженияОС.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
	//	
	//	СтрокаДвиженияОС.ВидДвижения = ?(СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС", ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	//	
	//	Если СтруктураШапкиДокумента.ВидДокумента = "ПередачаОборудованияВМонтаж" и СтрокаСписания.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
	//		
	//		СтрокаДвиженияОС.Событие = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
	//		
	//		СтрокаДвиженияВМонтаж = ТаблицаДвижений_НДСпоОСиНМА.Добавить();

	//		СтрокаДвиженияВМонтаж.Организация	= СтрокаДвиженияОС.Организация;
	//		СтрокаДвиженияВМонтаж.ВидЦенности	= СтрокаДвиженияОС.ВидЦенности;
	//		СтрокаДвиженияВМонтаж.СчетФактура	= СтрокаДвиженияОС.СчетФактура;
	//		СтрокаДвиженияВМонтаж.СтавкаНДС		= СтрокаДвиженияОС.СтавкаНДС;
	//		СтрокаДвиженияВМонтаж.СчетУчетаНДС	= СтрокаДвиженияОС.СчетУчетаНДС;
	//		СтрокаДвиженияВМонтаж.НДСВключенВСтоимость = СтрокаДвиженияОС.НДСВключенВСтоимость;
	//		//СтрокаДвиженияВМонтаж.Состояние		= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;  DELETE
	//		СтрокаДвиженияВМонтаж.Объект 		= СтруктураШапкиДокумента.ОбъектСтроительства;
	//		СтрокаДвиженияВМонтаж.СуммаБезНДС 	= (СтрокаСписания.Стоимость - СтрокаСписания.НДС);
	//		СтрокаДвиженияВМонтаж.НДС         	= СтрокаСписания.НДС;
	//		
	//		СтрокаДвиженияВМонтаж.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
	//		
	//		СтрокаДвиженияВМонтаж.ВидДвижения	= ВидДвиженияНакопления.Приход;
	//		СтрокаДвиженияОС.Событие			= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//Если не ТаблицаДвижений_НДСпоОСиНМА = Неопределено Тогда
	//	ТаблицаДвижений_НДСпоОСиНМА.Свернуть("Период,Активность,ДатаСобытия,Организация,ВидЦенности,СчетФактура,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость,Состояние,Объект,ВидДвижения","СуммаБезНДС,НДС");
	//	СтрокиКУдалению = новый Массив();
	//	Для каждого СтрокаТаблицы Из ТаблицаДвижений_НДСпоОСиНМА Цикл
	//		Если СтрокаТаблицы.СуммаБезНДС =0 и СтрокаТаблицы.НДС = 0 Тогда
	//			СтрокиКУдалению.Добавить(СтрокаТаблицы);
	//		КонецЕсли; 
	//	КонецЦикла; 
	//	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	//		ТаблицаДвижений_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
	//	КонецЦикла; 
	//	
	//	
	//	Если ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 тогда
	//		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
	//		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	//		Движения.НДСпоОСиНМА.ДобавитьДвижение();
	//	КонецЕсли;
	//КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается из модулей документа расхода.
Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт

	//DELETE
	//УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	//
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.Свойство("СчетЗатрат") Тогда
	//	ВидыСубконтоСчетаЗатрат = СтруктураШапкиДокумента.СчетЗатрат.ВидыСубконто;
	//	Для НомерСубконто = 1 По ВидыСубконтоСчетаЗатрат.Количество() Цикл
	//		Если Не (СтруктураШапкиДокумента["Субконто" + НомерСубконто] = Неопределено) Тогда
	//			Если (ТипЗнч(СтруктураШапкиДокумента["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства")) Тогда
	//				ОбъектОСиНМА = СтруктураШапкиДокумента["Субконто" + НомерСубконто];
	//				Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
	//				Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
	//				Прервать;
	//			//ИначеЕсли (ТипЗнч(СтруктураШапкиДокумента["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.НематериальныеАктивы")) Тогда DELETE
	//			//	ОбъектОСиНМА = СтруктураШапкиДокумента["Субконто" + НомерСубконто];
	//			//	Состояние 	= Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
	//			//	Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
	//			//	Прервать;
	//			КонецЕсли;	
	//		КонецЕсли; 
	//	КонецЦикла;
	//КонецЕсли; 
	//
	//Если ОбъектОСиНМА = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Объект строительства не указан!");
	////ИначеЕсли ОбъектОСиНМА = Справочники.НематериальныеАктивы.ПустаяСсылка() Тогда  DELETE
	////	ОбщегоНазначения.СообщитьОбОшибке("Объект НМА не указан!");
	//ИначеЕсли ОбъектОСиНМА = Неопределено Тогда
	//		//В структуре шапки нет объекта строительства или НМА
	//		Возврат;
	//КонецЕсли;	
	//
	//ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	//ТаблицаДвижений_НДСпоОСиНМА.Колонки.СуммаБезНДС.Имя = "Стоимость";
	//ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	//
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартий,ТаблицаДвижений_НДСпоОСиНМА);
	//
	//КоличествоДвижений = ТаблицаДвижений_НДСпоОСиНМА.Количество();
	//Если КоличествоДвижений > 0 Тогда
	//	Для Счетчик = КоличествоДвижений - 1 По 0 Цикл
	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТаблицаДвижений_НДСпоОСиНМА[Счетчик].СчетФактура) Тогда
	//			ТаблицаДвижений_НДСпоОСиНМА.Удалить(Счетчик);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');
	//Если ОсобыеУсловияБлокировкиВычета2006 Тогда
	//	ВидыЦенностей_ВычетБлокируется = новый СписокЗначений();
	//	ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ОС);
	//	ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.Оборудование);
	//	ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	//КонецЕсли; 
	//
	//// Колонка Стоимость у нас будет фактически колонкой СуммаБезНДС рег. НДСпоОСиНМА
	//Для Каждого СтрокаТаблицы ИЗ ТаблицаДвижений_НДСпоОСиНМА Цикл
	//	СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДС;
	//	Если ОсобыеУсловияБлокировкиВычета2006 Тогда
	//		СтрокаТаблицы.НеВлияетНаВычет = (ВидыЦенностей_ВычетБлокируется.НайтиПоЗначению(СтрокаТаблицы.ВидЦенности) = неопределено);
	//	КонецЕсли; 
	//КонецЦикла;	
	//
	//ТаблицаДвижений_НДСпоОСиНМА.Колонки.Стоимость.Имя = "СуммаБезНДС";
	//
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(ОбъектОСиНМА,"Объект");
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Состояние,"Состояние");
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	//
	//Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
	//Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	//Движения.НДСпоОСиНМА.ДобавитьДвижение();
	
КонецПроцедуры

// Процедура вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Процедура СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Движения, Отказ) Экспорт
	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	Запрос.УстановитьПараметр("ВидЦенности_Исключение",Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|			И Объект В (&Объект)
	|			И Состояние = &Состояние
	|			И (НЕ ВидЦенности = &ВидЦенности_Исключение)) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет";

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
КонецПроцедуры	

// Процедура вызывается из модулей документа принятие к учету ОС и документов списания
// Процедура "погашает" соответствующие записи по переданным параметрам на указанную  дату
Функция СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента, Объект, Состояние, Событие, ДатаЗаписи, КоэффициентРаспределения, Движения, Отказ) Экспорт
	
	//коэффициент не должен быть более единицы
	Если КоэффициентРаспределения > 1 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли КоэффициентРаспределения = 0 тогда
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("КонецПериода",   Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("ВидЦенности",   	Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("Состояние", 		Состояние);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация КАК Организация,
	|	НДСпоОСиНМАОстатки.Объект КАК Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура КАК СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние КАК Состояние,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток) КАК СуммаCНДС,
	|	СУММА(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСпоОСиНМАОстатки.НДСОстаток) КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И Объект В (&Объект)
	|		    И Состояние = &Состояние
	|		    И ВидЦенности = &ВидЦенности) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет";

	Результат = Запрос.Выполнить();
	//Ничего нет в регистре!
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	ТаблицаНДСпоОСиНМА = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаCНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаCНДС")),"СуммаCНДС");
	
	Если ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС") <> 0 Тогда
		ТаблицаНДСпоОСиНМА.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(Окр(КоэффициентРаспределения*ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС"),2),ТаблицаНДСпоОСиНМА.ВыгрузитьКолонку("СуммаБезНДС")),"СуммаБезНДС");
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ТаблицаНДСпоОСиНМА Цикл
		СтрокаТаблицы.НДС = СтрокаТаблицы.СуммаCНДС - СтрокаТаблицы.СуммаБезНДС;
	КонецЦикла; 
	
	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	ТаблицаДвижений_НДСпоОСиНМА.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСпоОСиНМА,ТаблицаДвижений_НДСпоОСиНМА);
	
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Событие,"Событие");
	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСпоОСиНМА.мПериод          = ДатаЗаписи;
	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
	Возврат ТаблицаНДСпоОСиНМА.Итог("СуммаБезНДС");
	
КонецФункции	

Процедура ОтразитьПринятиеКУчетуОС(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, НаборДвиженийХозрасчетный,Заголовок, ПереданНДСНаСтроительство = Ложь) Экспорт

	//DELETE
	//Если ТаблицаСписания.Количество() = 0 Тогда
	//	//Нет данных для отражения принятия к учету ОС
	//	Возврат;
	//КонецЕсли; 
	//
	//ТаблицаДляОбработки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаСписания,Новый Структура("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость,Стоимость,НДС"));
	//ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура, СчетУчетаНДС, СтавкаНДС,НДСВключенВСтоимость","Стоимость, НДС");
	//
	//ОжидаетсяПринятиеКУчетуОС = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ОжидаетсяПринятиеКУчетуОС", ОжидаетсяПринятиеКУчетуОС);
	//Запрос.УстановитьПараметр("Период",  				СтруктураШапкиДокумента.Дата);
	//Запрос.УстановитьПараметр("Организация",  		СтруктураШапкиДокумента.Организация);
	//Запрос.УстановитьПараметр("СчетаФактуры",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	//Запрос.УстановитьПараметр("ВидыЦенностей",      УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("ВидЦенности")));
	//Запрос.УстановитьПараметр("Номенклатура",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("Номенклатура")));
	//Запрос.УстановитьПараметр("СчетУчетаНДС",       УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СчетУчетаНДС")));
	//Запрос.УстановитьПараметр("СтавкаНДС",       	УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("СтавкаНДС")));
	//Запрос.УстановитьПараметр("НДСВключенВСтоимость",УдалитьПовторяющиесяЭлементыМассива(ТаблицаДляОбработки.ВыгрузитьКолонку("НДСВключенВСтоимость")));
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НДСпоОСиНМАОстатки.Организация,
	//|	НДСпоОСиНМАОстатки.Объект,
	//|	НДСпоОСиНМАОстатки.СчетФактура,
	//|	НДСпоОСиНМАОстатки.ВидЦенности,
	//|	НДСпоОСиНМАОстатки.СтавкаНДС,
	//|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	//|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	//|	НДСпоОСиНМАОстатки.Состояние,
	//|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток,
	//|	НДСпоОСиНМАОстатки.НДСОстаток,
	//|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	//|ИЗ
	//|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	//|		&Период,
	//|		Организация = &Организация
	//|		    И Объект В (&Номенклатура)
	//|		    И СчетФактура В (&СчетаФактуры)
	//|		    И ВидЦенности В (&ВидыЦенностей)
	//|		    И СтавкаНДС В (&СтавкаНДС)
	//|		    И СчетУчетаНДС В (&СчетУчетаНДС)
	//|		    И Состояние = &ОжидаетсяПринятиеКУчетуОС) КАК НДСпоОСиНМАОстатки";

	//ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	//Распределение = Новый Структура("СуммаСНДС","Стоимость");
	//Фильтр = Новый Структура("СчетФактура,ВидЦенности,Субконто1",,,"Номенклатура");
	//ТаблицаКорректировкиНДСПокупки = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаДляОбработки,ТаблицаРезультатов,Распределение,Фильтр);
	//
	//Если ТаблицаКорректировкиНДСПокупки.Количество() = 0 Тогда
	//	ТаблицаДляОбработки.Свернуть("СчетФактура,ВидЦенности,Номенклатура","Стоимость");
	//	Для каждого СтрокаВключенияВСтоимость Из ТаблицаДляОбработки Цикл
	//		ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаВключенияВСтоимость.СчетФактура+">, вид ценности <"+СтрокаВключенияВСтоимость.ВидЦенности+">, номенклатура <"+СтрокаВключенияВСтоимость.Номенклатура+">."+Символы.ПС+
	//		"Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС.",,Заголовок,СтатусСообщения.Внимание);
	//	КонецЦикла; 
	//	Возврат;
	//КонецЕсли;
	//
	//// Выделение суммы без НДС и суммы НДС
	//Для каждого СтрокаКорректировкиНДСПокупки из ТаблицаКорректировкиНДСПокупки Цикл
	//	БазоваяСуммаСНДС = СтрокаКорректировкиНДСПокупки.СуммаБезНДС+ СтрокаКорректировкиНДСПокупки.НДС;
	//	СтрокаКорректировкиНДСПокупки.СуммаБезНДС = Окр(СтрокаКорректировкиНДСПокупки.СуммаСНДС*СтрокаКорректировкиНДСПокупки.СуммаБезНДС/БазоваяСуммаСНДС,2);
	//	СтрокаКорректировкиНДСПокупки.НДС = СтрокаКорректировкиНДСПокупки.СуммаСНДС - СтрокаКорректировкиНДСПокупки.СуммаБезНДС;
	//КонецЦикла; 
	//
	//////////////////////////////////////////////////////////
	////Отражение движений в регистре НДС покупки
	//ТаблицаКорректировкиНДСПокупки.ЗаполнитьЗначения(?(ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию),"Событие");
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКорректировкиНДСПокупки, ТаблицаДвиженийПокупки);
	////Отражение движений в регистре НДС покупки
	//////////////////////////////////////////////////////////
	//
	//////////////////////////////////////////////////////////
	//// Движения по НДС партии
	//ТаблицаКорректировкиНДСПокупки.Колонки.Субконто1.Имя = "Номенклатура";
	//Для каждого СтрокаСписания Из ТаблицаСписания Цикл
	//	
	//	СтрокиКорректировкиНДСПокупки = ТаблицаКорректировкиНДСПокупки.НайтиСтроки(Новый Структура("СчетФактура,ВидЦенности, Номенклатура",СтрокаСписания.СчетФактура,СтрокаСписания.ВидЦенности,СтрокаСписания.Номенклатура));
	//	Если СтрокиКорректировкиНДСПокупки.Количество()=0 Тогда
	//		//Если не найдены строки в результирующей таблице, включение НДС в стоимость не произведено.
	//		ОбщегоНазначения.СообщитьОбОшибке("Не обнаружена запись о предъявлении НДС поставщиком по счету-фактуре <"+СтрокаСписания.СчетФактура+">, вид ценности <"+СтрокаСписания.ВидЦенности+">, номенклатура <"+СтрокаСписания.Номенклатура+">.
	//		| Событие "+?(ПереданНДСНаСтроительство,"передачи на строительство (в монтаж)","принятия к учету ОС")+" не зафиксировано в учете НДС (строка "+СтрокаСписания.НомерСтроки+").",,Заголовок,СтатусСообщения.Внимание);
	//		Продолжить;
	//	КонецЕсли;
	//	
	//КонецЦикла; //Для каждого Строка Из ТаблицаСписания Цикл
	//// Движения по НДС партии
	//////////////////////////////////////////////////////////
	//
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

//Предназначена для отражения НДС при принятии к учету объекта строительства хоз  способом.
Процедура СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Движения, Отказ, СуммаБезНДС, СуммаНДС) Экспорт

	// Начисление НДС в бюджет. Подготовка записи для отражения в книге продаж.
	СтрокаДвижений_НДСНачисленный 						= Движения.НДСНачисленный.Добавить();
	СтрокаДвижений_НДСНачисленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСНачисленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСНачисленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	// { RGS EParshina 29.12.2018 16:16:47 - SLI-0007797	
	СтрокаДвижений_НДСНачисленный.СтавкаНДС				= РГСофт.ПолучитьСсылкуСтавкаНДСОтПериода(СтруктураШапкиДокумента.Дата);
	//СтрокаДвижений_НДСНачисленный.СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	// } RGS EParshina 29.12.2018 16:16:47 - SLI-0007797
	СтрокаДвижений_НДСНачисленный.Покупатель			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСНачисленный.ВидНачисления			= Перечисления.НДСВидНачисления.НДСНачисленКУплате;
	
	СтрокаДвижений_НДСНачисленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСНачисленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСНачисленный.Событие 				= Перечисления.СобытияПоНДСПродажи.Реализация;
	СтрокаДвижений_НДСНачисленный.ДатаСобытия 			= СтруктураШапкиДокумента.Дата;
	СтрокаДвижений_НДСНачисленный.СчетУчетаНДС			= ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	

	// Предъявление НДС себе же для последующего принятия к вычету.
	СтрокаДвижений_НДСПредъявленный 					= Движения.НДСПредъявленный.Добавить();
	СтрокаДвижений_НДСПредъявленный.Период 				= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСПредъявленный.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетФактура			= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСПредъявленный.ВидЦенности			= Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
	СтрокаДвижений_НДСПредъявленный.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18;
	СтрокаДвижений_НДСПредъявленный.Поставщик			= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСПредъявленный.СчетУчетаНДС		= Планысчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.Ссылка;
	
	СтрокаДвижений_НДСПредъявленный.СуммаБезНДС			= СуммаБезНДС;
	СтрокаДвижений_НДСПредъявленный.НДС					= СуммаНДС;
	
	СтрокаДвижений_НДСПредъявленный.Событие 			= Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
	СтрокаДвижений_НДСПредъявленный.ДатаСобытия 		= СтруктураШапкиДокумента.Дата;
	
	// Отражение в регистре НДС расчеты с поставщиками для последующего контроля.
	СтрокаДвижений_НДСРасчетыСПоставщиками 				= Движения.НДСРасчетыСПоставщиками.Добавить();
	СтрокаДвижений_НДСРасчетыСПоставщиками.Период 		= СтруктураШапкиДокумента.Дата;
	
	СтрокаДвижений_НДСРасчетыСПоставщиками.Организация	= СтруктураШапкиДокумента.Организация;
	СтрокаДвижений_НДСРасчетыСПоставщиками.Документ		= СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижений_НДСРасчетыСПоставщиками.Сумма		= СтрокаДвижений_НДСПредъявленный.НДС;
	СтрокаДвижений_НДСРасчетыСПоставщиками.РасчетыСБюджетом	= Истина;
	
	СтрокаДвижений_НДСРасчетыСПоставщиками.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
	
КонецПроцедуры

//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблиццы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблиццы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПоставщиками". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат, СуммовыеРазницыПоДокументам = Неопределено) Экспорт

	УчестьСуммовыеРазницы = СуммовыеРазницыПоДокументам <> Неопределено И СуммовыеРазницыПоДокументам.Количество() > 0;
	
	Если (УчестьСуммовыеРазницы И (не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС")
		или не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС")))
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если УчестьСуммовыеРазницы Тогда
			Если не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
				СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
			КонецЕсли;
			Если не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
				СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УчестьСуммовыеРазницы Тогда
		УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
		УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
		УчестьСуммовыеРазницы = УчитыватьПоложительныеРазницыДляНДС и УчитыватьОтрицательныеРазницыДляНДС;
	КонецЕсли;
	
	Если УчестьСуммовыеРазницы Тогда
		СуммовыеРазницы = СуммовыеРазницыПоДокументам.Скопировать();
		СуммовыеРазницы.Свернуть("Документ, Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов", "СуммоваяРазница");
		СтруктураОтбораСР = Новый Структура("Документ, Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов");
	КонецЕсли;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПоставщиками.
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	
	Если не ЭтоВозврат Тогда
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
	КонецЕсли; 
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Поставщик","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	СтронируемыеРаспределенныеОплаты = ПолучитьСтронируемыеРаспределенныеОплатыБезДокумента(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат, Ложь);
	СтруктураОтбораСторно = Новый Структура("СчетФактура");
	
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = новый массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		 ИЛИ СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли; 
		
		СуммоваяРазницаПоСтроке = 0;
		
		Если СтрокаТаблицыОплат.РезультатРаспределения и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицыОплат.Сделка) Тогда
			СтрокаТаблицыДвижений.Документ	= СтрокаТаблицыОплат.Сделка;
			
			// Отразим запись как погашающую ранее отраженную задолженность
			Если ЭтоВозврат и не УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.Сделка).Направление = Неопределено тогда
			Иначе
				
				// Если не отключен учет суммовых разниц, требуется скорректировать распределяемую сумму - 
				// не сумма оплаты, а сумма оплаченной задолженности
				Если УчестьСуммовыеРазницы И СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах Тогда
					СтруктураОтбораСР.Документ = СтрокаТаблицыДвижений.Документ;
					СтруктураОтбораСР.Контрагент = СтрокаТаблицыДвижений.Поставщик;
					СтруктураОтбораСР.ДоговорКонтрагента = СтрокаТаблицыДвижений.ДоговорКонтрагента;
					СтруктураОтбораСР.ВалютаВзаиморасчетов = СтрокаТаблицыДвижений.ВалютаРасчетов;
					СтрокиСР = СуммовыеРазницы.НайтиСтроки(СтруктураОтбораСР);
					Если СтрокиСР.Количество() > 0 Тогда
						Если Не УчитыватьПоложительныеРазницыДляНДС И СтрокиСР[0].СуммоваяРазница > 0 Тогда
							СтрокаТаблицыДвижений.Сумма = СтрокаТаблицыДвижений.Сумма - СтрокиСР[0].СуммоваяРазница;
						ИначеЕсли Не УчитыватьОтрицательныеРазницыДляНДС И СтрокиСР[0].СуммоваяРазница < 0 Тогда
							СтрокаТаблицыДвижений.Сумма = СтрокаТаблицыДвижений.Сумма - СтрокиСР[0].СуммоваяРазница;
						ИначеЕсли Не СтрокиСР[0].СуммоваяРазница = 0 Тогда
							СуммоваяРазницаПоСтроке =  СтрокиСР[0].СуммоваяРазница;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШапкиДокумента.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 
				
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Поставщик			= СтрокаТаблицыДвижений.Поставщик;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.Документ				= СтрокаТаблицыОплат.Сделка;
				
				СтрокаРаспределеннойОплаты.ВалютаРасчетов		= СтрокаТаблицыДвижений.ВалютаРасчетов;
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВалютнаяСумма	    = СтрокаТаблицыДвижений.ВалютнаяСумма;
				
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) *СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВалютнаяСумма 			= (-1) * СтрокаТаблицыДвижений.ВалютнаяСумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
			ИначеЕсли не ЭтоВозврат и УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.Сделка).Направление = Неопределено тогда
				
				// Сторнирование распределенной оплаты, ранее отраженной в книге
				СтруктураОтбораСторно.СчетФактура = СтрокаТаблицыОплат.Сделка;
				СтрокиСторно = СтронируемыеРаспределенныеОплаты.НайтиСтроки(СтруктураОтбораСторно);
				Если СтрокиСторно.Количество() > 0 Тогда
					
					СуммаДвижения = СтрокаТаблицыДвижений.Сумма;
					Если не СуммоваяРазницаПоСтроке = 0 Тогда
						СуммаДвижения = СуммаДвижения - СуммоваяРазницаПоСтроке;
					КонецЕсли; 

					СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
					СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
					СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
					
					Для Каждого СтрокаСторно Из СтрокиСторно Цикл
						Если СуммаДвижения <> 0 Тогда
							СтрокаРаспределеннойОплаты.РаспределеннаяСумма = СтрокаРаспределеннойОплаты.РаспределеннаяСумма + Мин(СуммаДвижения, (-1)*СтрокаСторно.РаспределеннаяСумма);
							СуммаДвижения = СуммаДвижения - Мин(СуммаДвижения, (-1)*СтрокаСторно.РаспределеннаяСумма);
						КонецЕсли;
					КонецЦикла;
					Если СуммаДвижения <> 0 Или СуммоваяРазницаПоСтроке > 0 Тогда
						СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
						СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
						СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
						СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
						
						СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СуммаДвижения + СуммоваяРазницаПоСтроке;
						Если Не СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах И 
							Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И
							Не ТаблицаОплат.Колонки.Найти("КурсоваяРазница") = Неопределено Тогда
							СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.КурсоваяРазница;
						КонецЕсли;
						
						СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
					ИначеЕсли Не СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах
						И Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
						И Не ТаблицаОплат.Колонки.Найти("КурсоваяРазница") = Неопределено 
						И Не СтрокаТаблицыОплат.СтрокаТаблицыОплат = 0
						Тогда
						СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();


						СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
						СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
						СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;

						
						СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= 0;
						СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.КурсоваяРазница;

						
						СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
					КонецЕсли;
				Иначе	
					СтрокаРаспределеннойОплаты = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
					СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
					СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
					СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
					
					СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СтрокаТаблицыДвижений.Сумма;
					СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				КонецЕсли;
			КонецЕслИ;

			Если ЭтоВозврат Тогда
				СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
				СтрокаТаблицыДвижений.ВалютнаяСумма = СтрокаТаблицыДвижений.ВалютнаяСумма*(-1);
				Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" тогда
					// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
					СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
			Если ЭтоВозврат Тогда
				Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" Тогда
					СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Расход;
				Иначе
					СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
					СтрокаТаблицыДвижений.ВалютнаяСумма = СтрокаТаблицыДвижений.ВалютнаяСумма*(-1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПоставщиками.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() > 0 Тогда

		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;

		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();

	КонецЕсли;

	Если Не ЭтоВозврат и ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() > 0 Тогда

		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();

	КонецЕсли;
	
КонецПроцедуры // РегистрацияОплаты_НДСРасчетыСПоставщиками()

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПокупателями". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат, СуммовыеРазницыПоДокументам = Неопределено) Экспорт

	УчестьСуммовыеРазницы = СуммовыеРазницыПоДокументам <> Неопределено И СуммовыеРазницыПоДокументам.Количество() > 0;
	
	Если (УчестьСуммовыеРазницы И (не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС")
		или не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС")))
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
        Если УчестьСуммовыеРазницы Тогда
			Если не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС") Тогда
				СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС));
			КонецЕсли;
			Если не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС") Тогда
				СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УчестьСуммовыеРазницы Тогда
		УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
		УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
		УчестьСуммовыеРазницы = УчитыватьПоложительныеРазницыДляНДС Или УчитыватьОтрицательныеРазницыДляНДС;
	КонецЕсли;
	
	Если УчестьСуммовыеРазницы Тогда
		СуммовыеРазницы = СуммовыеРазницыПоДокументам.Скопировать();
		СуммовыеРазницы.Свернуть("Документ, Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов", "СуммоваяРазница");
		СтруктураОтбораСР = Новый Структура("Документ, Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов");
	КонецЕсли;
	
	СоответствиеНачислятьНДСПоОтгрузке = ПолучитьЗначенияНачислятьНДСПоОтгрузке(ТаблицаОплат);
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПокупателями.
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Покупатель","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	Если не ЭтоВозврат Тогда
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
	КонецЕсли; 
	
	ТаблицаЗадолженности = ПолучитьДанныеПоЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаОплат);
	СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента, Документ, ВалютаРасчетов");
	
	СтронируемыеРаспределенныеОплаты = ПолучитьСтронируемыеРаспределенныеОплатыБезДокумента(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат);
	СтруктураОтбораСторно = Новый Структура("СчетФактура");
	
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = новый массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Или 
			СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли; 
		
		НачислятьНДСПоОтгрузке = Неопределено;  //добавлененая строка 
		//Если ТипЗнч(СтрокаТаблицыОплат.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда DELETE
		//	НачислятьНДСПоОтгрузке = СоответствиеНачислятьНДСПоОтгрузке[СтрокаТаблицыОплат.Сделка];
		//КонецЕсли;
			
		СуммоваяРазницаПоСтроке = 0;
		
		Если СтрокаТаблицыОплат.РезультатРаспределения и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицыОплат.Сделка) Тогда
			// Отразим запись как погашающую ранее отраженную задолженность
			Если ЭтоВозврат и не УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.Сделка).Направление = Неопределено тогда
				СтрокаТаблицыДвижений.Документ	= СтрокаТаблицыОплат.Сделка;
			Иначе
				
				//DELETE
				//Если ТипЗнч(СтрокаТаблицыОплат.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И НачислятьНДСПоОтгрузке <> Неопределено 
				//	И НачислятьНДСПоОтгрузке.НачислятьНДСПоОтгрузке И Не ОбщегоНазначения.ЗначениеНеЗаполнено(НачислятьНДСПоОтгрузке.ДокументОтгрузки) Тогда
				//	СтрокаТаблицыДвижений.Документ	= НачислятьНДСПоОтгрузке.ДокументОтгрузки;
				//Иначе
				СтрокаТаблицыДвижений.Документ	= СтрокаТаблицыОплат.Сделка;
				//КонецЕсли;
				
				Если Не СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах И 
					Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И
					ТаблицаОплат <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыДвижений);
					СтрокиЗадолженности = ТаблицаЗадолженности.НайтиСтроки(СтруктураОтбора);
					Если СтрокиЗадолженности.Количество() > 0 Тогда
						СтрокаТаблицыДвижений.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыДвижений.ВалютнаяСумма,
																				СтрокаТаблицыДвижений.ВалютаРасчетов,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																				СтрокиЗадолженности[0].Сумма/СтрокиЗадолженности[0].ВалютнаяСумма, 1);
					КонецЕсли;
				// Если не отключен учет суммовых разниц, требуется скорректировать распределяемую сумму - 
				// не сумма оплаты, а сумма оплаченной задолженности
				ИначеЕсли УчестьСуммовыеРазницы И СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах Тогда
					СтруктураОтбораСР.Документ = СтрокаТаблицыДвижений.Документ;
					СтруктураОтбораСР.Контрагент = СтрокаТаблицыДвижений.Покупатель;
					СтруктураОтбораСР.ДоговорКонтрагента = СтрокаТаблицыДвижений.ДоговорКонтрагента;
					СтруктураОтбораСР.ВалютаВзаиморасчетов = СтрокаТаблицыДвижений.ВалютаРасчетов;
					СтрокиСР = СуммовыеРазницы.НайтиСтроки(СтруктураОтбораСР);
					Если СтрокиСР.Количество() > 0 Тогда
						Если Не УчитыватьПоложительныеРазницыДляНДС И СтрокиСР[0].СуммоваяРазница > 0 Тогда
							СтрокаТаблицыДвижений.Сумма = СтрокаТаблицыДвижений.Сумма - СтрокиСР[0].СуммоваяРазница;
						ИначеЕсли Не УчитыватьОтрицательныеРазницыДляНДС И СтрокиСР[0].СуммоваяРазница < 0 Тогда
							СтрокаТаблицыДвижений.Сумма = СтрокаТаблицыДвижений.Сумма - СтрокиСР[0].СуммоваяРазница;
						ИначеЕсли Не СтрокиСР[0].СуммоваяРазница = 0 Тогда
							СуммоваяРазницаПоСтроке =  СтрокиСР[0].СуммоваяРазница;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШапкиДокумента.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 
				
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Покупатель			= СтрокаТаблицыДвижений.Покупатель;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.Документ				= СтрокаТаблицыОплат.Сделка;
				
				СтрокаРаспределеннойОплаты.ВалютаРасчетов		= СтрокаТаблицыДвижений.ВалютаРасчетов;
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВалютнаяСумма	    = СтрокаТаблицыДвижений.ВалютнаяСумма;
				
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				Попытка
					СтрокаРаспределеннойОплаты.ПодразделениеОрганизации	= СтрокаТаблицыОплат.ПодразделениеОрганизации;
				Исключение
				КонецПопытки;
				
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) * СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВалютнаяСумма 			= (-1) * СтрокаТаблицыДвижений.ВалютнаяСумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
				
				
			ИначеЕсли не ЭтоВозврат и УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.Сделка).Направление = Неопределено тогда
				
				
				// Сторнирование распределенной оплаты, ранее отраженной в книге
				СтруктураОтбораСторно.СчетФактура = СтрокаТаблицыОплат.Сделка;
				СтрокиСторно = СтронируемыеРаспределенныеОплаты.НайтиСтроки(СтруктураОтбораСторно);
				Если СтрокиСторно.Количество() > 0 Тогда
					
					СуммаДвижения = СтрокаТаблицыДвижений.Сумма;
					Если не СуммоваяРазницаПоСтроке = 0 Тогда
						СуммаДвижения = СуммаДвижения - СуммоваяРазницаПоСтроке;
					КонецЕсли; 

					СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
					СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
					СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
					
					Для Каждого СтрокаСторно Из СтрокиСторно Цикл
						Если СуммаДвижения <> 0 Тогда
							СтрокаРаспределеннойОплаты.РаспределеннаяСумма = СтрокаРаспределеннойОплаты.РаспределеннаяСумма + Мин(СуммаДвижения, (-1)*СтрокаСторно.РаспределеннаяСумма);
							СуммаДвижения = СуммаДвижения - Мин(СуммаДвижения, (-1)*СтрокаСторно.РаспределеннаяСумма);
						КонецЕсли;
					КонецЦикла;
					Если СуммаДвижения <> 0 Или СуммоваяРазницаПоСтроке <> 0 Тогда
						СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
						СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
						СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
						СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
						
						СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СуммаДвижения + СуммоваяРазницаПоСтроке;
						Если Не СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах И 
							Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И
							Не ТаблицаОплат.Колонки.Найти("КурсоваяРазница") = Неопределено Тогда
							СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.КурсоваяРазница;
						КонецЕсли;
						
						СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
						Попытка
							СтрокаРаспределеннойОплаты.ПодразделениеОрганизации	= СтрокаТаблицыОплат.ПодразделениеОрганизации;
						Исключение
						КонецПопытки;
					ИначеЕсли Не СтрокаТаблицыОплат.РасчетыВУсловныхЕдиницах
						И Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
						И Не ТаблицаОплат.Колонки.Найти("КурсоваяРазница") = Неопределено 
						И Не СтрокаТаблицыОплат.СтрокаТаблицыОплат = 0
						Тогда
						СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();


						СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
						СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.Сделка;
						СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;

						
						СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= 0;
						СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.КурсоваяРазница;

						
						СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
						Попытка
							СтрокаРаспределеннойОплаты.ПодразделениеОрганизации	= СтрокаТаблицыОплат.ПодразделениеОрганизации;
						Исключение
						КонецПопытки;
					КонецЕсли;
				Иначе	
					СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
					СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
					//DELETE
					//Если ТипЗнч(СтрокаТаблицыОплат.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И НачислятьНДСПоОтгрузке <> Неопределено 
					//	И НачислятьНДСПоОтгрузке.НачислятьНДСПоОтгрузке И Не ОбщегоНазначения.ЗначениеНеЗаполнено(НачислятьНДСПоОтгрузке.ДокументОтгрузки) Тогда
					//	СтрокаРаспределеннойОплаты.СчетФактура	= НачислятьНДСПоОтгрузке.ДокументОтгрузки;
					//Иначе
					СтрокаРаспределеннойОплаты.СчетФактура	= СтрокаТаблицыОплат.Сделка;
					//КонецЕсли;
					СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
					
					СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СтрокаТаблицыДвижений.Сумма;
					СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.РублеваяСумма - СтрокаТаблицыДвижений.Сумма;
					СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
					Попытка
						СтрокаРаспределеннойОплаты.ПодразделениеОрганизации	= СтрокаТаблицыОплат.ПодразделениеОрганизации;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕслИ;

		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
		
		Попытка
			СтрокаТаблицыДвижений.ПодразделениеОрганизации	= СтрокаТаблицыОплат.ПодразделениеОрганизации;
		Исключение
		КонецПопытки;
		
		
		Если ЭтоВозврат Тогда
			 СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
			 СтрокаТаблицыДвижений.ВалютнаяСумма = СтрокаТаблицыДвижений.ВалютнаяСумма*(-1);
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПокупателями.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда

		Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;

		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();

	КонецЕсли;
	
	Если не ЭтоВозврат и ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() > 0 Тогда

		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод      = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();

	КонецЕсли;

КонецПроцедуры // РегистрацияОплаты_НДСРасчетыСПокупателями()

Функция ПолучитьДанныеПоЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаОплат, Аванс = Ложь)
	
	МассивСФ = Новый Массив;
	МассивПокупателей = Новый Массив;
	МассивДоговоров = Новый Массив;
	МассивСФ = Новый Массив;
	МассивВалют = Новый Массив;
	ЕстьПризнакРасчетовВУЕ = ТаблицаОплат.Колонки.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено;	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		//RG-Soft Розов 15.09.06
		РасчетыВУсловныхЕдиница = ?(ЕстьПризнакРасчетовВУЕ, ?(СтрокаТаблицы.РасчетыВУсловныхЕдиницах=null,ложь,СтрокаТаблицы.РасчетыВУсловныхЕдиницах), ?(СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах=null,ложь,СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах));
		Если Не РасчетыВУсловныхЕдиница И
			Не ?(Аванс, СтрокаТаблицы.ВалютаРасчетов, СтрокаТаблицы.ВалютаВзаиморасчетов) = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			МассивСФ.Добавить(?(Аванс, СтрокаТаблицы.ДокументОплаты, СтрокаТаблицы.Сделка));
			МассивПокупателей.Добавить(?(Аванс, СтрокаТаблицы.Покупатель, СтрокаТаблицы.Контрагент));
			МассивДоговоров.Добавить(СтрокаТаблицы.ДоговорКонтрагента);
			МассивВалют.Добавить(?(Аванс, СтрокаТаблицы.ВалютаРасчетов, СтрокаТаблицы.ВалютаВзаиморасчетов));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСФ.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НДСРасчетыСПокупателямиОстатки.Покупатель,
		               |	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОстатки.Документ,
		               |	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
		               |	СУММА(НДСРасчетыСПокупателямиОстатки.СуммаОстаток) КАК Сумма,
		               |	СУММА(НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСумма
		               |ИЗ
		               |	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(
		               |		&Дата,
		               |		Организация = &Организация
		               |			И Покупатель В (&СписокПокупателей)
		               |			И ДоговорКонтрагента В (&СписокДоговоров)
		               |			И Документ В (&СписокСФ)
		               |			И ВалютаРасчетов В (&СписокВалют)) КАК НДСРасчетыСПокупателямиОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НДСРасчетыСПокупателямиОстатки.Организация,
		               |	НДСРасчетыСПокупателямиОстатки.Документ,
		               |	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОстатки.Покупатель,
		               |	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов";
		Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);			   
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокПокупателей", УдалитьПовторяющиесяЭлементыМассива(МассивПокупателей));
		Запрос.УстановитьПараметр("СписокДоговоров", УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров));
		Запрос.УстановитьПараметр("СписокСФ", УдалитьПовторяющиесяЭлементыМассива(МассивСФ));
		Запрос.УстановитьПараметр("СписокВалют", УдалитьПовторяющиесяЭлементыМассива(МассивВалют));
		
		Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоЗадолженностиВалютныеДоговора()

Функция ПолучитьЗначенияНачислятьНДСПоОтгрузке(ТаблицаОплат)
	
	СоответствиеЗначений = Новый Соответствие;
	
	// Для документов вида "РеализацияОтгруженныхТоваров" нужно получить флаг "НачислятьНДСПоОтгрузке" на дату 
	// документа отгрузки
	СписокДокументов = Новый СписокЗначений;
	//Для Каждого СтрокаОплаты из ТаблицаОплат Цикл     DELETE
	//	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОплаты.Сделка) И ТипЗнч(СтрокаОплаты.Сделка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
	//		СписокДокументов.Добавить(СтрокаОплаты.Сделка);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если Не СписокДокументов.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияОтгруженныхТоваров.Ссылка,
		               |	РеализацияОтгруженныхТоваров.ДокументОтгрузки КАК СсылкаДокументОтгрузки,
		               |	РеализацияОтгруженныхТоваров.ДокументОтгрузки.Дата КАК Дата,
		               |	РеализацияОтгруженныхТоваров.ДокументОтгрузки.Организация КАК Организация
		               |ИЗ
		               |	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
		               |ГДЕ
		               |	РеализацияОтгруженныхТоваров.Ссылка В(&СписокДокументов)";
					   
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			РезультатЗапроса = РезультатЗапроса.Выгрузить();
			
			Для Каждого СтрокаЗапроса Из РезультатЗапроса Цикл
				
				ТекущееЗначение = СоответствиеЗначений[СтрокаЗапроса.Ссылка];
				Если ТекущееЗначение = Неопределено Тогда
					ТекущееЗначение = СоответствиеЗначений[НачалоМесяца(СтрокаЗапроса.Дата)];
					Если ТекущееЗначение <> Неопределено Тогда
						ТекущееЗначение = ТекущееЗначение.НачислятьНДСПоОтгрузке;
					КонецЕсли;
				КонецЕсли;
				Если ТекущееЗначение = Неопределено Тогда
					Отказ = Ложь;
					УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтрокаЗапроса.Дата, Отказ, СтрокаЗапроса.Организация, "Нал");
					Если Отказ Тогда
						ТекущееЗначение = Ложь;
					Иначе
						ТекущееЗначение = УчетнаяПолитика.НачислятьНДСПоОтгрузке;
					КонецЕсли;
				КонецЕсли;
				СоответствиеЗначений.Вставить(СтрокаЗапроса.Ссылка, Новый Структура("ДокументОтгрузки, НачислятьНДСПоОтгрузке", СтрокаЗапроса.СсылкаДокументОтгрузки, ТекущееЗначение));
				СоответствиеЗначений.Вставить(НачалоМесяца(СтрокаЗапроса.Дата), ТекущееЗначение);
				
			КонецЦикла;
			
			НачальноеКоличество = СоответствиеЗначений.Количество();
			Для Счетчик = НачальноеКоличество-1 По 0 Цикл
				Если ТипЗнч(СоответствиеЗначений[Счетчик]) = Тип("Дата") Тогда
					СоответствиеЗначений.Удалить(Счетчик);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоответствиеЗначений;
	
КонецФункции

Функция ПолучитьСтронируемыеРаспределенныеОплатыБезДокумента(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат, ЭтоПродажи = Истина)
	
	МассивСФ = Новый Массив;
	
	Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
		
		Если СтрокаОплаты.РезультатРаспределения И 
			Не ЭтоВозврат 
			И УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаОплаты.Сделка).Направление = Неопределено Тогда

			МассивСФ.Добавить(СтрокаОплаты.Сделка);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСУчетРаспределенныхОплатОстатки.Организация,
	               |	НДСУчетРаспределенныхОплатОстатки.СчетФактура,
	               |	НДСУчетРаспределенныхОплатОстатки.РаспределеннаяСуммаОстаток КАК РаспределеннаяСумма
	               |ИЗ
	               |	РегистрНакопления." + ?(ЭтоПродажи, "НДСУчетРаспределенныхОплатПокупателей", "НДСУчетРаспределенныхОплатПоставщикам") + ".Остатки(
	               |		&Период,
	               |		Организация = &Организация
	               |		    И СчетФактура В (&МассивСФ)
	               |		    И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК НДСУчетРаспределенныхОплатОстатки
	               |ГДЕ
	               |	НДСУчетРаспределенныхОплатОстатки.РаспределеннаяСуммаОстаток < 0";
				   
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивСФ", МассивСФ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
//  РЕГИСТРАЦИЯ СУММОВЫХ РАЗНИЦ В ПОДСИСТЕМЕ НДС

//////////////////////////////////////////////////
//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПОСТАВЩИКАМИ

// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, Движения) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") 
		или не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС")
		или не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС")
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") тогда
			СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод",?(ОшибкаВПолучении,Перечисления.Периодичность.Месяц,УчетнаяПолитика.НДСНалоговыйПериод));
		КонецЕсли;
		
		Если не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС));
		КонецЕсли;
	КонецЕсли;
	
	УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
	УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС;
	
	ВыделятьНДСпоСР = (УчитыватьПоложительныеРазницыДляНДС или УчитыватьОтрицательныеРазницыДляНДС);
	
	Если не ВыделятьНДСпоСР Тогда
		// Суммовые разницы не нужно учитывать для НДС по приобретеннию
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
		Если СтрокаТаблицы.СуммоваяРазница>0 и УчитыватьПоложительныеРазницыДляНДС Тогда
			//Строка обрабатывается
			Продолжить;
		ИначеЕсли СтрокаТаблицы.СуммоваяРазница<0 и УчитыватьОтрицательныеРазницыДляНДС Тогда
			//Строка обрабатывается
			Продолжить;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТаблицаСуммовыхРазниц.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		// Нечего обрабатывать
		Возврат;
	КонецЕсли;
	
	//Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Сумма","СуммоваяРазница");
	СоответствиеКолонок.Вставить("Поставщик","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	////СоответствиеКолонок.Вставить("СчетФактура","Документ");
	
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммовыхРазниц,ТаблицаДвижений_НДСРасчетыСПоставщиками);
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок,Истина);
	
	Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
	Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение(); //Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
	
	
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
	СчетаФактурыПолученные = УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Документ"), Истина);

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, СчетаФактурыПолученные, Движения);
	
	СвернутаяТаблицаСФ = ТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть("Документ","СуммоваяРазница");
	Для каждого СчетФактура Из СвернутаяТаблицаСФ Цикл
		Если РеестрСчетовФактур.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		ИначеЕсли РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура",СчетФактура.Документ)).Количество()=0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		КонецЕсли;
	КонецЦикла;
	
	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура","Документ");

	
	РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,РеестрСчетовФактур,Распределение,Отбор); 

	СтрокиКУдалению = новый массив();
	
	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.СуммоваяРазница=0 
			или СтрокаРеестра.Базис_СНДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
		СтрокаРеестра.СР_НДС =  Окр(СтрокаРеестра.СуммоваяРазница*СтрокаРеестра.Базис_НДС/СтрокаРеестра.Базис_СНДС,2);
		СтрокаРеестра.СР_БезНДС =  СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
	КонецЦикла; 
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли; 
	
	// Отражение сумовой разницы в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.Выгрузить();
	ТаблицаДвижений_НДСПредъявленный.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("СуммаБезНДС","СР_БезНДС");
	СоответствиеКолонок.Вставить("НДС","СР_НДС");
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РеестрСчетовФактур,ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,"Событие");
	
	ПереименованиеКолонок(ТаблицаДвижений_НДСПредъявленный, СоответствиеКолонок,Истина);
	
	
	Если (РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0)
		или (РеестрСчетовФактур.Итог("ЕстьОСНМА")>0)
		или (РеестрСчетовФактур.Итог("ЕстьРеализация0")>0)
		или (РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0)
		тогда
		
		Построитель_РеестрСчетовФактур = новый ПостроительЗапроса();
		ОписаниеИсточника_РеестрСчетовФактур = новый ОписаниеИсточникаДанных(РеестрСчетовФактур);
		
		Построитель_РеестрСчетовФактур.ИсточникДанных = ОписаниеИсточника_РеестрСчетовФактур;
	КонецЕсли;
	
	// Если есть включение НДС в стоимость, необходимо пропорционально уменьшить 
	// сумму НДС предъявленного и зафиксировать включение НДС в стоимость в специальном регистре
	Если РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда
		ТаблицаДвижений_НДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость.Выгрузить();
		ТаблицаДвижений_НДСВключенныйВСтоимость.Очистить();

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьВключениеВСтоимость");
		ОтборПостроитель.ЕстьВключениеВСтоимость.Значение = 1;
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСВключенныйВСтоимость = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель.ЕстьВключениеВСтоимость.Использование = Ложь;
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСВключенныйВСтоимость.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСВключенныйВСтоимость Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ВключенВСтоимость_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
		    	СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ВключенВСтоимость_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Корректировки_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСВключенныйВСтоимость);
		
		// Внесем корректирующие записи в регистр "НДС предъявленный"
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Добавить("Событие");
		ТаблицаДвижений_НДСВключенныйВСтоимость.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСВключенныйВСтоимость,ТаблицаДвижений_НДСПредъявленный);
		
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("ВидДвижения");
		ТаблицаДвижений_НДСВключенныйВСтоимость.Колонки.Удалить("Событие");
		
		
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();

	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьВключениеВСтоимость")>0 Тогда

	// Далее корректировка регистра НДСПредъявленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ДобавитьДвижение();
	
	
	// Если есть остатки в регистре косвенных расходов, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьКосвенныеРасходы");
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Значение = 1;
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСКосвенныеРасходы = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьКосвенныеРасходы"].Использование = Ложь;
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСКосвенныеРасходы.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСКосвенныеРасходы Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Косвенные_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Косвенные_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСКосвенныеРасходы Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСКосвенныеРасходы.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,Корректировки_НДСКосвенныеРасходы,Движения,СтруктураШапкиДокумента.НДСНалоговыйПериод);
		
	КонецЕсли; //РеестрСчетовФактур.Итог("ЕстьКосвенныеРасходы")>0 Тогда
	
	// Если есть остатки в регистре ОС (НМА), необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОСНМА");
		ОтборПостроитель["ЕстьОСНМА"].Значение = 1;
		ОтборПостроитель["ЕстьОСНМА"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСпоОСиНМА = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОСНМА"].Использование = Ложь;
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСпоОСиНМА.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСпоОСиНМА Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.ОС_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.ОС_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСпоОСиНМА Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСпоОСиНМА.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,Корректировки_НДСпоОСиНМА,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОСНМА")>0 Тогда

	// Если есть остатки в регистре партий, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьОстаткиПоПартиям");
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Значение = 1;
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПартииТоваров = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьОстаткиПоПартиям"].Использование = Ложь;
		Корректировки_НДСПартииТоваров.Колонки.Добавить("Стоимость",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСПартииТоваров.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСПартииТоваров Цикл
			Если не СтрокаКорректировки.Базис_СНДС =0 Тогда
				СтрокаКорректировки.Стоимость = Окр(СтрокаКорректировки.СуммоваяРазница*СтрокаКорректировки.Партии_СНДС/СтрокаКорректировки.Базис_СНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Партии_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПартииТоваров Цикл
			Если СтрокаРеестра.Стоимость=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПартииТоваров.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПартииТоваров.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","Стоимость,НДС");
		
		ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,Корректировки_НДСПартииТоваров,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
	// Если были обороты по предположению 0%, необходимо пропорционально отразить 
	// там же и суммовую разницу
	Если РеестрСчетовФактур.Итог("ЕстьРеализация0")>0 Тогда

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьРеализация0");
		ОтборПостроитель["ЕстьРеализация0"].Значение = 1;
		ОтборПостроитель["ЕстьРеализация0"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСПредъявленныйРеализация0 = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьРеализация0"].Использование = Ложь;
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСПредъявленныйРеализация0.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Реализация0_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Реализация0_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСПредъявленныйРеализация0 Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		Корректировки_НДСПредъявленныйРеализация0.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС","СуммаБезНДС,НДС");
		
		ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,Корректировки_НДСПредъявленныйРеализация0,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение(СтруктураШапкиДокумента, СчетаФактурыПолученные, Движения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СчетаФактурыПолученные);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток, 0)) КАК Косвенные_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОстаток, 0)) КАК Косвенные_НДС,
	|	СУММА(ЕСТЬNULL(НДСПартииТоваровОстатки.СтоимостьОстаток, 0)) КАК Партии_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПартииТоваровОстатки.НДСОстаток, 0)) КАК Партии_НДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0)) КАК ОС_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК ОС_НДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0)) КАК ВключенВСтоимость_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0)) КАК ВключенВСтоимость_НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход, 0)) КАК Реализация0_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.НДСПриход, 0)) КАК Реализация0_НДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПредъявленныйРеализация0Обороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход = 0
	|							И НДСПредъявленныйРеализация0Обороты.НДСПриход = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьРеализация0,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСКосвенныеРасходыОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток = 0
	|							И НДСКосвенныеРасходыОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьКосвенныеРасходы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСпоОСиНМАОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСпоОСиНМАОстатки.СуммаБезНДСОстаток = 0
	|							И НДСпоОСиНМАОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОСНМА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПартииТоваровОстатки.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПартииТоваровОстатки.СтоимостьОстаток = 0
	|							И НДСПартииТоваровОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОстаткиПоПартиям,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСВключенныйВСтоимостьОбороты.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот = 0
	|							И НДСВключенныйВСтоимостьОбороты.НДСОборот = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьВключениеВСтоимость
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПартииТоваров.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСПартииТоваровОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПартииТоваровОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПартииТоваровОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПартииТоваровОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПартииТоваровОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И Состояние = &Предположение0) КАК НДСПредъявленныйРеализация0Обороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйРеализация0Обороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПредъявленныйРеализация0Обороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПредъявленныйРеализация0Обороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСКосвенныеРасходыОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСКосвенныеРасходыОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСКосвенныеРасходыОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСКосвенныеРасходыОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСКосвенныеРасходыОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСпоОСиНМАОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСВключенныйВСтоимостьОбороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСВключенныйВСтоимостьОбороты.СчетУчетаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Приобретение()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по косвенным расходам
Процедура ОтразитьСуммовыеРазницыПоКосвеннымРасходам(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения, ПериодичностьНДС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериодаДата",   СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("НачалоПериода",      ?(ПериодичностьНДС = Перечисления.Периодичность.Квартал,НачалоКвартала(СтруктураШапкиДокумента.Дата),НачалоМесяца(СтруктураШапкиДокумента.Дата)));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОстатки.Организация,
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СуммаБезНДС,
	|	НДСКосвенныеРасходы.НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСКосвенныеРасходыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОстатки.Организация = НДСКосвенныеРасходы.Организация
	|			И НДСКосвенныеРасходыОстатки.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОстатки.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОстатки.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОстатки.СчетУчетаНДС = НДСКосвенныеРасходы.СчетУчетаНДС
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|			И (НДСКосвенныеРасходы.Период >= &НачалоПериода)
	|			И (НДСКосвенныеРасходы.Период <= &КонецПериодаДата)
	|			И НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОборот, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОборот, 0) = 0))";

	ТаблицаЗаписей_НДСКосвенныеРасходы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСКосвенныеРасходы = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСКосвенныеРасходы,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСКосвенныеРасходы Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСКосвенныеРасходы.Количество()>0 Тогда
		
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаЗаписей_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по ОС (НМА)
Процедура ОтразитьСуммовыеРазницыПоОСНМА(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.Организация,
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	НДСпоОСиНМАОстатки.ВидЦенности,
	|	НДСпоОСиНМАОстатки.СтавкаНДС,
	|	НДСпоОСиНМАОстатки.СчетУчетаНДС,
	|	НДСпоОСиНМАОстатки.НДСВключенВСтоимость,
	|	НДСпоОСиНМАОстатки.Объект,
	|	НДСпоОСиНМАОстатки.Состояние,
	|	НДСпоОСиНМАОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСпоОСиНМАОстатки.НДСОстаток КАК НДС,
	|	НДСпоОСиНМАОстатки.НеВлияетНаВычет
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСпоОСиНМАОстатки
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) = 0))";

	ТаблицаЗаписей_НДСпоОСиНМА = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСпоОСиНМА = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСпоОСиНМА,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСпоОСиНМА Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСпоОСиНМА.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСпоОСиНМА.Количество()>0 Тогда
		
		Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаЗаписей_НДСпоОСиНМА;
		Движения.НДСпоОСиНМА.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по остаткам партий
Процедура ОтразитьСуммовыеРазницыПоПартиям(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НДСПартииТоваровОстатки.Организация,
	|	НДСПартииТоваровОстатки.СчетУчета,
	|	НДСПартииТоваровОстатки.Номенклатура,
	|	НДСПартииТоваровОстатки.Партия,
	|	НДСПартииТоваровОстатки.Склад,
	|	НДСПартииТоваровОстатки.СчетФактура,
	|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
	|	НДСПартииТоваровОстатки.ВидЦенности,
	|	НДСПартииТоваровОстатки.СчетУчетаНДС,
	|	НДСПартииТоваровОстатки.СтавкаНДС,
	|	НДСПартииТоваровОстатки.СтоимостьОстаток КАК Стоимость,
	|	НДСПартииТоваровОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)
	|			И СтавкаНДС В (&СписокСтавкиНДС)
	|			И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПартииТоваровОстатки
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСПартииТоваровОстатки.СтоимостьОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСПартииТоваровОстатки.НДСОстаток, 0) = 0))";

	ТаблицаЗаписей_НДСПартииТоваров = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Распределение = Новый Структура("Стоимость,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСПартииТоваров = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,ТаблицаЗаписей_НДСПартииТоваров,Распределение,Отбор);
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПартииТоваров Цикл
		Если СтрокаРеестра.Стоимость=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПартииТоваров.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПартииТоваров.Количество()>0 Тогда
		
		Движения.НДСПартииТоваров.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений = ТаблицаЗаписей_НДСПартииТоваров;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
	КонецЕсли; 

КонецПроцедуры

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по реализации 0%
Процедура ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетУчетаНДС"),Истина));
	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|		,
	|		&КонецПериода,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)
	|		    И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПредъявленныйРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС";

	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счетчик = ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		СтрокаТаблицы = ТаблицаЗаписей_НДСПредъявленныйРеализация0[Счетчик];
		Если (СтрокаТаблицы.СуммаБезНДС = 0) и (СтрокаТаблицы.НДС = 0) Тогда 
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Распределение = Новый Структура("СуммаБезНДС,НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	
	ТаблицаЗаписей_НДСПредъявленныйРеализация0 = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, ТаблицаЗаписей_НДСПредъявленныйРеализация0, Распределение, Отбор);
	
	 //Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	 //на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСПредъявленныйРеализация0 Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСПредъявленныйРеализация0.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСПредъявленныйРеализация0.Количество()>0 Тогда
		
		Движения.НДСПредъявленныйРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаЗаписей_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
		
	КонецЕсли; 

КонецПроцедуры  // ОтразитьСуммовыеРазницыПоРеализации0_НДСПредъявленный()

//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПОСТАВЩИКАМИ
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//  ПО НДС НАЧИСЛЕННОМУ ПО РЕАЛИЗАЦИИ

// Процедура вызывается из модуля управления взаиморасчетами в тех случаях,
// когда взаиморасчеты с поставщиками ведутся в У.Е. с использованием рублевого 
// покрытия. По переданной таблице суммовых разниц формируются движения 
// корректирующие суммы событий, отраженных в регистре "НДСПокупки".
Процедура КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураШапкиДокумента, ИсходнаяТаблицаСуммовыхРазниц, Движения) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС")
		или не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС")
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");

		Если не СтруктураШапкиДокумента.Свойство("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС") Тогда
			СтруктураШапкиДокумента.Вставить("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС",?(ОшибкаВПолучении, Истина, УчетнаяПолитика.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС));
		КонецЕсли;
	КонецЕсли;
	
	УчитыватьПоложительныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	УчитыватьОтрицательныеРазницыДляНДС = СтруктураШапкиДокумента.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС;
	
	ВыделятьНДСпоСР = (УчитыватьПоложительныеРазницыДляНДС или УчитыватьОтрицательныеРазницыДляНДС);
	
	Если не ВыделятьНДСпоСР Тогда
		// Суммовые разницы не нужно учитывать для НДС по реализации
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл
		Если СтрокаТаблицы.СуммоваяРазница>0 и УчитыватьПоложительныеРазницыДляНДС Тогда
			//Строка обрабатывается
			продолжить;
		ИначеЕсли СтрокаТаблицы.СуммоваяРазница<0 и УчитыватьОтрицательныеРазницыДляНДС Тогда
			//Строка обрабатывается
			продолжить;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТаблицаСуммовыхРазниц.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	Если ТаблицаСуммовыхРазниц.Количество() = 0 Тогда
		// Нечего обрабатывать
		Возврат;
	КонецЕсли;
	
	//Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Сумма","СуммоваяРазница");
	СоответствиеКолонок.Вставить("Покупатель","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	//СоответствиеКолонок.Вставить("Документ","Документ");
	
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок);

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСуммовыхРазниц,ТаблицаДвижений_НДСРасчетыСПокупателями);
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок,Истина);
	
	Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
	Движения.НДСРасчетыСПокупателями.ДобавитьДвижение(); //Откорректируем информацию о задолженности в регистре взаиморасчетов на суммовую разницу
	
	
	// формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
	СчетаФактурыПолученные = УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Документ"), Истина);

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, СчетаФактурыПолученные, Движения);
	
	СвернутаяТаблицаСФ = ТаблицаСуммовыхРазниц.Скопировать();
	СвернутаяТаблицаСФ.Свернуть("Документ","СуммоваяРазница");
	Для каждого СчетФактура Из СвернутаяТаблицаСФ Цикл
		Если РеестрСчетовФактур.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		ИначеЕсли РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура",СчетФактура.Документ)).Количество()=0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не отражена суммовая разница в размере "+Формат(СчетФактура.СуммоваяРазница, "ЧЦ=15; ЧДЦ=2")  +" в регистрах НДС по документу <"+Строка(СчетФактура.Документ)+">");
		КонецЕсли;
	КонецЦикла;
	
	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"),"СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница","СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура","Документ");
	
	РеестрСчетовФактур = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц,РеестрСчетовФактур,Распределение,Отбор);//,Исключить); 

	СтрокиКУдалению = новый массив();
	
	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.СуммоваяРазница=0 
			или СтрокаРеестра.Базис_СНДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
		СтрокаРеестра.СР_НДС =  Окр(СтрокаРеестра.СуммоваяРазница*СтрокаРеестра.Базис_НДС/СтрокаРеестра.Базис_СНДС,2);
		СтрокаРеестра.СР_БезНДС =  СтрокаРеестра.СуммоваяРазница - СтрокаРеестра.СР_НДС;
	КонецЦикла; 
	
	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество()>0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если РеестрСчетовФактур.Количество()=0 Тогда
	    Возврат;
	КонецЕсли; 
	
	// Отражение сумовой разницы в регистре НДСНачисленный
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений_НДСНачисленный.Очистить();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("СуммаБезНДС","СР_БезНДС");
	СоответствиеКолонок.Вставить("НДС","СР_НДС");
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РеестрСчетовФактур,ТаблицаДвижений_НДСНачисленный);
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация,"Событие");
	
	ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СоответствиеКолонок,Истина);
	
	// Далее корректировка регистра НДСНачисленный не планируется
	// Заполним набор записей регистра полученным результатом
	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ДобавитьДвижение();
	
	Если (РеестрСчетовФактур.Итог("ЕстьРеализация0")>0)
		тогда
		
		Построитель_РеестрСчетовФактур = новый ПостроительЗапроса();
		ОписаниеИсточника_РеестрСчетовФактур = новый ОписаниеИсточникаДанных(РеестрСчетовФактур);
		
		Построитель_РеестрСчетовФактур.ИсточникДанных = ОписаниеИсточника_РеестрСчетовФактур;

		ОтборПостроитель = Построитель_РеестрСчетовФактур.Отбор;
		
		ОтборПостроитель.Добавить("ЕстьРеализация0");
		ОтборПостроитель["ЕстьРеализация0"].Значение = 1;
		ОтборПостроитель["ЕстьРеализация0"].Использование = Истина;
		Построитель_РеестрСчетовФактур.Выполнить();
		
		Корректировки_НДСНачисленныйРеализация0 = Построитель_РеестрСчетовФактур.Результат.Выгрузить();
		ОтборПостроитель["ЕстьРеализация0"].Использование = Ложь;
		Корректировки_НДСНачисленныйРеализация0.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		Корректировки_НДСНачисленныйРеализация0.Колонки.Добавить("НДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаКорректировки Из Корректировки_НДСНачисленныйРеализация0 Цикл
			Если не СтрокаКорректировки.Базис_БезНДС =0 Тогда
				СтрокаКорректировки.СуммаБезНДС = Окр(СтрокаКорректировки.СР_БезНДС*СтрокаКорректировки.Реализация0_БезНДС/СтрокаКорректировки.Базис_БезНДС,2);
			КонецЕсли; 
			Если не СтрокаКорректировки.Базис_НДС =0 Тогда
				СтрокаКорректировки.НДС = Окр(СтрокаКорректировки.СР_НДС*СтрокаКорректировки.Реализация0_НДС/СтрокаКорректировки.Базис_НДС,2);
			КонецЕсли; 
		КонецЦикла; 
		
		// Если суммовая разница невелика, велика вероятность того, что в реестре СФ присутствуют записи
		// на которые суммовая разница не относится
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаРеестра Из Корректировки_НДСНачисленныйРеализация0 Цикл
			Если СтрокаРеестра.СуммаБезНДС=0 
				и СтрокаРеестра.НДС=0 
				тогда
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				продолжить;
			КонецЕсли; 
		КонецЦикла; 
		Если СтрокиКУдалению.Количество()>0 Тогда
		    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Корректировки_НДСНачисленныйРеализация0.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли; 
		
		//ПереименованиеКолонок(Корректировки_НДСНачисленныйРеализация0, СоответствиеКолонок,Истина);
		Корректировки_НДСНачисленныйРеализация0.Свернуть("СчетФактура, ВидЦенности, СтавкаНДС","СуммаБезНДС,НДС");//, СчетУчетаНДС
		
		ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный(СтруктураШапкиДокумента,Корректировки_НДСНачисленныйРеализация0,Движения);
		
	КонецЕсли; //Если РеестрСчетовФактур.Итог("ЕстьОстаткиПоПартиям")>0 Тогда
	
КонецПроцедуры // КорректировкаРегистровНДСПоСуммовымРазницам_Реализация()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Реализация".
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация(СтруктураШапкиДокумента, СчетаФактурыПолученные, Движения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СчетаФактурыПолученные);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("Предположение0",     Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(НДСРеализация0.Реализация0_БезНДС) КАК Реализация0_БезНДС,
	|	СУММА(НДСРеализация0.Реализация0_НДС) КАК Реализация0_НДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСРеализация0.СчетФактура ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьРеализация0,
	|	НДСНачисленныйОбороты.ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСНачисленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_БезНДС,
	|			СУММА(ВЫБОР
	|					КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|						ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.НДСОборот, 0)
	|					ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0)
	|				КОНЕЦ) КАК Реализация0_НДС,
	|			НДСРеализация0Обороты.СчетФактура КАК СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности КАК ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель КАК Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			РегистрНакопления.НДСРеализация0.Обороты(
	|				,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|				    И СчетФактура В (&СписокСчетовФактур)) КАК НДСРеализация0Обороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДСРеализация0Обороты.СчетФактура,
	|			НДСРеализация0Обороты.ВидЦенности,
	|			НДСРеализация0Обороты.Покупатель,
	|			НДСРеализация0Обороты.СтавкаНДС) КАК НДСРеализация0
	|		ПО НДСНачисленныйОбороты.СчетФактура = НДСРеализация0.СчетФактура
	|			И НДСНачисленныйОбороты.ВидЦенности = НДСРеализация0.ВидЦенности
	|			И НДСНачисленныйОбороты.Покупатель = НДСРеализация0.Покупатель
	|			И НДСНачисленныйОбороты.СтавкаНДС = НДСРеализация0.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления,
	|	НДСНачисленныйОбороты.ПодразделениеОрганизации";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);

КонецФункции // ПолучитьДанныеПоКорректируемымСчетамФактурам_Реализация()

// Функция вызывается из процедуры "КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение".
// Цель работы процедуры - отразить суммовые разницы по реализации 0%
Процедура ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный(СтруктураШапкиДокумента,ТаблицаСуммовыхРазниц,Движения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",	УдалитьПовторяющиесяЭлементыМассива(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("КонецПериода",       Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.Состояние,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.СтавкаНДС,
	|	НДСРеализация0Обороты.Покупатель,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход - НДСРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСРеализация0Обороты.НДСПриход)
	|		КОГДА НДСРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСРеализация0Обороты.НДСПриход - НДСРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|		,
	|		&КонецПериода,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И СтавкаНДС В (&СписокСтавкиНДС)) КАК НДСРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.Состояние,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.СтавкаНДС,
	|	НДСРеализация0Обороты.Покупатель";

	ТаблицаЗаписей_НДСРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счетчик = ТаблицаЗаписей_НДСРеализация0.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		СтрокаТаблицы = ТаблицаЗаписей_НДСРеализация0[Счетчик];
		Если (СтрокаТаблицы.СуммаБезНДС = 0) и (СтрокаТаблицы.НДС = 0) Тогда 
			ТаблицаЗаписей_НДСРеализация0.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Распределение = Новый Структура("СуммаБезНДС, НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС");
	
	ТаблицаЗаписей_НДСРеализация0 = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, ТаблицаЗаписей_НДСРеализация0, Распределение, Отбор);
	
	 //Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	 //на которые суммовая разница не относится
	СтрокиКУдалению = новый Массив();
	Для каждого СтрокаРеестра Из ТаблицаЗаписей_НДСРеализация0 Цикл
		Если СтрокаРеестра.СуммаБезНДС=0 
			и СтрокаРеестра.НДС=0 
			тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗаписей_НДСРеализация0.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаЗаписей_НДСРеализация0.Количество()>0 Тогда
		
		Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаЗаписей_НДСРеализация0;
		Движения.НДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли; 

КонецПроцедуры  // ОтразитьСуммовыеРазницыПоРеализации0_НДСНачисленный()

//  ПО НДС НАЧИСЛЕННОМУ ПО РЕАЛИЗАЦИИ
//////////////////////////////////////////////////

//  РЕГИСТРАЦИЯ СУММОВЫХ РАЗНИЦ В ПОДСИСТЕМЕ НДС
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  ДВИЖЕНИЯ ПО НДС НАЛОГОВОГО АГЕНТА

Процедура ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ТаблицаВыручки, Движения) Экспорт
	
	Если ТаблицаВыручки.Колонки.Найти("Комиссионный") = Неопределено 
		Или ТаблицаВыручки.Колонки.Найти("ДоговорКомиссии") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС;
			Если ОтражатьНДСКомитента Тогда
					
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период 		= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 	= "Начислен НДС в качестве налогового агента";

				Проводка.СчетДт			= СтрокаТаблицы.СчетРасчетовСКомитентом;
				Если ТаблицаВыручки.Колонки.Найти("Комитент") <> Неопределено Тогда
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.Комитент);
				Иначе
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтрокаТаблицы.ДоговорКомиссии.Владелец);
				КонецЕсли;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтрокаТаблицы.ДоговорКомиссии);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
									
				Если СтрокаТаблицы.СчетРасчетовСКомитентом.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				КонецЕсли;
									
				Проводка.СчетКт			= ПланыСчетов.Хозрасчетный.НДС;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
									
				Проводка.Сумма			= СтрокаТаблицы.НДС;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//  ДВИЖЕНИЯ ПО НДС НАЛОГОВОГО АГЕНТА
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  УПРОЩЕННЫЙ УЧЕТ НДС


Функция УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация);
		Если Не СтруктураШапкиДокумента.Свойство("УпрощенныйУчетНДС") Тогда
			//СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС));
			СтруктураШапкиДокумента.Вставить("УпрощенныйУчетНДС", ?(ОшибкаВПолучении, Ложь, Истина));
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.Свойство("НачислятьНДСПоОтгрузке") Тогда
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.НачислятьНДСПоОтгрузке));
		КонецЕсли;
	КонецЕсли; 
	
	Если Не СтруктураШапкиДокумента.УпрощенныйУчетНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") И Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
		И Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") DELETE
	//	И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Процедура УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаНачисленногоНДС, Движения, Отказ, СторноНачисления = Ложь) Экспорт
	
	Если ТаблицаНачисленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УпрощенныйНДС_ПроводитьДокументПоНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда
		Если Не СтруктураШапкиДокумента.Свойство("ВидДоговора") Тогда
			Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
				И Не СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Не СтруктураШапкиДокумента.ВидДокумента = "ОтчетКомиссионераОПродажах")
			И Не СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	ЕстьПокупательВТаблице = ТаблицаНачисленногоНДС.Колонки.Найти("Покупатель") <> Неопределено;
	ЕстьСобытие = ТаблицаНачисленногоНДС.Колонки.Найти("Событие") <> Неопределено;
	ЕстьСчетФактура = ТаблицаНачисленногоНДС.Колонки.Найти("СчетФактура") <> Неопределено;
	СтавкаНДСВШапке = СтруктураШапкиДокумента.Свойство("СтавкаНДС") И ТаблицаНачисленногоНДС.Колонки.Найти("СтавкаНДС") = Неопределено;
	ЕстьСчетДоходовБУ = ТаблицаНачисленногоНДС.Колонки.Найти("СчетДоходовБУ") <> Неопределено;
	ЕстьИнформацияОКомиссии = ТаблицаНачисленногоНДС.Колонки.Найти("Комиссионный") <> Неопределено
								И ТаблицаНачисленногоНДС.Колонки.Найти("ДоговорКомиссии") <> Неопределено;
	ЕстьСчетУчета = ТаблицаНачисленногоНДС.Колонки.Найти("СчетУчетаБУ") <> Неопределено;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленногоНДС Цикл
		
		Если ?(СтавкаНДСВШапке, СтруктураШапкиДокумента.СтавкаНДС, СтрокаТаблицы.СтавкаНДС) = Перечисления.СтавкиНДС.БезНДС
			И ЕстьСчетДоходовБУ 
			//И ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходовБУ) Тогда
			И ОбщегоНазначения.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходовБУ) Тогда
			// Реализация, облагаемая ЕНВД не отражается в книге продаж
			Продолжить;
		КонецЕсли;
		
		ОтражатьНДСКомитента = ?(ЕстьИнформацияОКомиссии, СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС , Ложь);
		
		Если ЕстьСчетУчета 
			И ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ)
			И СтрокаТаблицы.СчетУчетаБУ.Забалансовый 
			И Не ОтражатьНДСКомитента Тогда
			// Не начислять НДС по товару, учитываемому на забалансовом счете
			Продолжить;
		КонецЕсли;

		НоваяЗапись = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
		Если СторноНачисления Тогда
			НоваяЗапись.СуммаБезНДС = - НоваяЗапись.СуммаБезНДС;
			НоваяЗапись.НДС = - НоваяЗапись.НДС;
		КонецЕсли;
		
		НоваяЗапись.Организация = СтруктураШапкиДокумента.Организация;
		НоваяЗапись.Покупатель 	= ?(ЕстьПокупательВТаблице, СтрокаТаблицы.Покупатель, ?(СтруктураШапкиДокумента.Свойство("Контрагент"), СтруктураШапкиДокумента.Контрагент, Неопределено));
		Если Не (НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
				Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент) Тогда
			НоваяЗапись.ДоговорКонтрагента = Неопределено;
		ИначеЕсли НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент И ОтражатьНДСКомитента Тогда
			НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКомиссии;
		КонецЕсли;
		НоваяЗапись.СчетФактура = ?(ЕстьСчетФактура, СтрокаТаблицы.СчетФактура, СтруктураШапкиДокумента.Ссылка);
		НоваяЗапись.СтавкаНДС 	= ?(СтавкаНДСВШапке, СтруктураШапкиДокумента.СтавкаНДС, СтрокаТаблицы.СтавкаНДС);
		Если ЕстьСобытие Тогда
			НоваяЗапись.Событие	= СтрокаТаблицы.Событие;
		ИначеЕсли НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда
					Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы
					Или НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
			НоваяЗапись.Событие	= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Иначе
			НоваяЗапись.Событие	= Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли;
		НоваяЗапись.ДатаСобытия	= СтруктураШапкиДокумента.Дата;
		НоваяЗапись.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
				
	КонецЦикла;                      
	
	//ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Активность, Период, Организация, Покупатель, ДоговорКонтрагента, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста", "СуммаБезНДС, НДС");
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Активность, Период, Организация, Покупатель, ДоговорКонтрагента, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ДатаОплаты, ДокументОплаты, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста,НалоговыйПериод,ДатаУточненки,ПодразделениеОрганизации,ИнвойсинговыйЦентр", "СуммаБезНДС, НДС");
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Количество() > 0 Тогда

		Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.ДатаПроведения;
		Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
		Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры

//  УПРОЩЕННЫЙ УЧЕТ НДС
//////////////////////////////////////////////////////////////////////////

// Функция получает сумму НДС по сумме с НДС и ставке
// СуммаСНДС - число (15,2), сумма, включающая НДС
// СтавкаНДС - Значение перечисления СтавкиНДС
// Взвращаемое значение - Число (15,2), сумма НДС
Функция ОпределитьСуммуНДС(СуммаСНДС, СтавкаНДС) Экспорт
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Множитель = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Множитель = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Множитель = 10/110;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Множитель = 10/110;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Множитель = 18/118;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Множитель = 18/118;
	// { RGS EParshina 29.12.2018 16:18:02 - SLI-0007797
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Множитель = 20/120;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Множитель = 20/120;
	// } RGS EParshina 29.12.2018 16:18:02 - SLI-0007797
	// Добавлено Булавский А. РГ-Софт 17_06_2012
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС12 Тогда
		Множитель = 12/112;
	// конец добавления
	КонецЕсли; 
	Возврат СуммаСНДС*Множитель;
КонецФункции // ()

// Получает версию постановления в зависимости от переданной даты
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить действующую версию постановления
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - учет НДС ведется в соответствии с Постановлением Правительства РФ 
//				от 2 декабря 2000 г. N 914
//              2 - учет НДС в соответствии с проектом Постановления Правительства РФ 
//				"О счетах-фактурах и признании утратившими силу некоторых нормативных 
//				актов Правительства Российской Федерации"
//
Функция ПолучитьВерсиюПостановления(Дата) Экспорт
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		И Дата >= НачалоПримененияИсправленныхСчетовФактур Тогда
		Возврат 2; // Дата начала применения исправленных счетов-фактур задана и меньше или равна переданной даты
	Иначе
		Возврат 1; // Дата начала применения исправленных счетов-фактур не задана или задана, но больше, чем переданная дата 
	КонецЕсли;	
		
КонецФункции		

//-> RG-Soft VIvanov 02/04/12
Процедура ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, Объект, СуммаДокументаДляРегистрацииВЖурнале = 0, НДСДокументаДляРегистрацииВЖурнале = 0, Отказ, Заголовок) Экспорт
	
	Если УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДвиженияЖурналУчетаСчетовФактур = Объект.Движения.ЖурналУчетаСчетовФактур;
	
	СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
	
	СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
	СтрокаДвижения.Организация     = СтруктураШапкиДокумента.Организация;	
	СтрокаДвижения.Контрагент      = СтруктураШапкиДокумента.Контрагент;
	СтрокаДвижения.СчетФактура     = СтруктураШапкиДокумента.Ссылка;
	СтрокаДвижения.КодВидаОперации = СтруктураШапкиДокумента.КодВидаОперации;
	СтрокаДвижения.Валюта          = СтруктураШапкиДокумента.ВалютаДокумента;
	
	РасчетыВУсловныхЕдиницах = Ложь;
    	
	Если СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") Тогда
		Если СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах Тогда
			СтрокаДвижения.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
			Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				РасчетыВУсловныхЕдиницах = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;		
		
	Если СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" Тогда
		
		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
		
		СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
		
		СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоДокумента;
		СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоДокумента;

		СтрокаДвижения.СуммаПоСчетуФактуре = 0 - СуммаДокументаДляРегистрацииВЖурнале;
		СтрокаДвижения.СуммаНДС            = 0 - НДСДокументаДляРегистрацииВЖурнале;
			
		Если РасчетыВУсловныхЕдиницах Тогда
			
			//ПараметрыСФ = Неопределено;
			//ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);
			//
			//СтрокаДвижения.СуммаПоСчетуФактуре = 0 - ПараметрыСФ.СуммаДокумента;
			//СтрокаДвижения.СуммаНДС            = 0 - ПараметрыСФ.СуммаНДСДокумента;
            СтруктураКурсов = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ДокументОснование.Дата);
		
			СтрокаДвижения.СуммаПоСчетуФактуре  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.СуммаПоСчетуФактуре,
																			СтруктураШапкиДокумента.ВалютаДокумента,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																			СтруктураКурсов.Курс, 1,
																			СтруктураКурсов.Кратность, 1);
            СтрокаДвижения.СуммаНДС  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.СуммаНДС,
																			СтруктураШапкиДокумента.ВалютаДокумента,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																			СтруктураКурсов.Курс, 1,
																			СтруктураКурсов.Кратность, 1);


		КонецЕсли;
		
		СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СчетКнигиПокупок" Тогда
		
		// { РГ-Софт Пахоменков А. 07.04.2015 для книги покупок, когда этот контрагетн - коммитент
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Продавец) Тогда
			СтрокаДвижения.Продавец 	= СтруктураШапкиДокумента.Продавец;
			
						
		КонецЕсли;
		// } РГ-Софт Пахоменков А. 07.04.2015		
			
		//rg-soft Лактюшкина Н.10.01.2017   для журнала счетов-фактур {
			СтрокаДвижения.СуммаПоСчетуФактуреКомиссия 	= СуммаДокументаДляРегистрацииВЖурнале;	
			СтрокаДвижения.СуммаНДСКомиссия 			= НДСДокументаДляРегистрацииВЖурнале;
			СтрокаДвижения.КодВидаОперацииКомиссия 		= СтруктураШапкиДокумента.КодВидаОперации;
		//} rg-soft Лактюшкина Н 10.01.2017

		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
		
		//rg-soft Лактюшкина Н.16.12.2016  для книги покупок дата выставления = дате входящего документа {
		//СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.ДатаПроведения;
		СтрокаДвижения.ДатаВыставленияПолучения       =  СтруктураШапкиДокумента.ДатаВходящегоДокумента;
		//}
		СтрокаДвижения.КодСпособаВыставленияПолучения = 1;
		
		СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоДокумента;
		СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоДокумента;

		СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
		СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
			
		СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
		
		Если СтруктураШапкиДокумента.Корректировочный  Тогда
			
			СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерСФ;
			СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаСФ;
			
			СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерВходящегоДокумента;
			СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаВходящегоДокумента;
			
			Если СуммаДокументаДляРегистрацииВЖурнале < 0 Тогда 
				// { РГ-Софт Пахоменков А. 09.12.2014
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение  = -СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДСРазницаУменьшение             = -НДСДокументаДляРегистрацииВЖурнале;				
				// } РГ-Софт Пахоменков А. 09.12.2014
			Иначе
				// { РГ-Софт Пахоменков А. 09.12.2014
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение  = СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДСРазницаУвеличение           	 = НДСДокументаДляРегистрацииВЖурнале;				
				// } РГ-Софт Пахоменков А. 09.12.2014
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СчетФактураВыданный" Тогда
		
		
		// Определим контрагента для СМР хозспособом и налогового агента
		Если НЕ ЗначениеЗаполнено(СтрокаДвижения.Контрагент) //СМР 
			ИЛИ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда //Налоговый агент
			СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		
		СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
		
		//СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.ДатаВыставления;
		СтрокаДвижения.ДатаВыставленияПолучения       = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаВыставления),СтруктураШапкиДокумента.ДатаВыставления,СтруктураШапкиДокумента.Дата);
		СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаВыставления;
		СтрокаДвижения.Период          				  = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаВыставления),СтруктураШапкиДокумента.ДатаВыставления,СтруктураШапкиДокумента.Дата);
				
		Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			
			СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
			СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправляемогоКорректировочногоДокумента;
				СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсправляемогоКорректировочногоДокумента;
			Иначе
				СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
			// { РГ-Софт Пахоменков А. 09.12.2014
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение = СтруктураШапкиДокумента.СуммаКУменьшению;
			СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение = СтруктураШапкиДокумента.СуммаКДоплате;			
			// } РГ-Софт Пахоменков А. 09.12.2014
			
			СтрокаДвижения.СуммаНДСРазницаУменьшение             = СтруктураШапкиДокумента.СуммаНДСКУменьшению;
			СтрокаДвижения.СуммаНДСРазницаУвеличение            = СтруктураШапкиДокумента.СуммаНДСКДоплате;
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
				СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;
			//ИначеЕсли  ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//	Если СтруктураШапкиДокумента.ДокументОснование.Исправление Тогда
			//		СтрокаДвижения.НомерИсправления = ОбщегоНазначения.НомерИсправления;
			//		СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;
			//	КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
				СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
				СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;
			Иначе				
				СтрокаДвижения.НомерСчетаФактуры   = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
				СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
			СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
			СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
		
		КонецЕсли;
		
		Если РасчетыВУсловныхЕдиницах И НЕ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			
			//ПараметрыСФ = Неопределено;
			//ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);

			//СтрокаДвижения.СуммаПоСчетуФактуре = ПараметрыСФ.СуммаДокумента;
			//СтрокаДвижения.СуммаНДС            = ПараметрыСФ.СуммаНДСДокумента;
			СтруктураКурсов = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ДокументОснование.Дата);
		
			СтрокаДвижения.СуммаПоСчетуФактуре  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.СуммаПоСчетуФактуре,
																			СтруктураШапкиДокумента.ВалютаДокумента,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																			СтруктураКурсов.Курс, 1,
																			СтруктураКурсов.Кратность, 1);
			СтрокаДвижения.СуммаНДС  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.СуммаНДС,
																			СтруктураШапкиДокумента.ВалютаДокумента,
																			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																			СтруктураКурсов.Курс, 1,
																			СтруктураКурсов.Кратность, 1);
			
		КонецЕсли;
		
		СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
		
		Если СтруктураШапкиДокумента.СчетФактураНеВыставляется Тогда
			СтрокаДвижения.СчетФактураНеВыставляется = СтруктураШапкиДокумента.СчетФактураНеВыставляется;
			СтрокаДвижения.ДатаВыставленияПолучения  = СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Период          			 = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		// { РГ-Софт Пахоменков А. 03.04.2015
		//Если СтруктураШапкиДокумента.КодВидаОперации = "04" И СтруктураШапкиДокумента.ДатаВыставления >= Дата(2015,1,1) Тогда
		// { rg-soft Лактюшкина Н. 10.01.2017     КодВидаОперации изменили на "01".
		Если СтруктураШапкиДокумента.КодВидаОперации = "01" И СтруктураШапкиДокумента.ДатаВыставления >= Дата(2015,1,1) Тогда
			СтрокаДвижения.СуммаПоСчетуФактуреКомиссия 	= СтрокаДвижения.СуммаПоСчетуФактуре;	
			СтрокаДвижения.СуммаНДСКомиссия 			= СтрокаДвижения.СуммаНДС;
			СтрокаДвижения.КодВидаОперацииКомиссия 		= СтрокаДвижения.КодВидаОперации;
			
			СтрокаДвижения.Продавец 					= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.Контрагент 					= СтруктураШапкиДокумента.ОтчетАгентаПоРасходам.Контрагент;
			// { RGS LFedotova 19.01.2017 10:50:20 - вопрос SLI-0007079
			//СтрокаДвижения.НомерСчетаФактурыПродавца 	= СтруктураШапкиДокумента.ДокументОснование.НомерВходящегоДокумента;
			СтрокаДвижения.НомерСчетаФактурыПродавца 	= СтруктураШапкиДокумента.ДокументОснование.Номер;
			// } RGS LFedotova 19.01.2017 10:52:58 - вопрос SLI-0007079
		КонецЕсли;		
		// } rg-soft Лактюшкина Н. 10.01.2017
		
	//Иначе // любые другие документы поступления
	//	
	//	СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
	//	
	//	СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
	//	СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
	//	
	//	СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоСчетаФактуры;
	//	СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоСчетаФактуры;
	//	
	//	СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
	//	СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
	//	
	//	Если СтрокаДвижения.СуммаНДС = 0 Тогда
	//		СтавкаБезНДС = Истина;
	//		ОпределитьСтавкуБезНДС(Объект, СтавкаБезНДС);
	//		СтрокаДвижения.ПоСтавкеБезНДС = СтавкаБезНДС;
	//	КонецЕсли;		
				
	КонецЕсли;
	
	Если СтрокаДвижения.КодСпособаВыставленияПолучения = 0 Тогда
		СтрокаДвижения.КодСпособаВыставленияПолучения = 1;
	КонецЕсли;
	
	//Обновление на бух. корп. 3.0.38.42
	Если СтруктураШапкиДокумента.Свойство("КППКонтрагента") И НЕ ПустаяСтрока(СокрЛП(СтруктураШапкиДокумента.КППКонтрагента)) Тогда
		СтрокаДвижения.КППКонтрагента = СтруктураШапкиДокумента.КППКонтрагента;
	КонецЕсли;
	//<=
	
	ДвиженияЖурналУчетаСчетовФактур.Записать();
	
КонецПроцедуры

Функция ЭтоКорректировочныйСФ(Реализация)
	
	Если ТипЗнч(Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(Реализация) Или ТипЗнч(Реализация) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ТипЗнч(Реализация.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(Реализация.Сделка) Тогда
			Возврат Реализация.Корректировка ИЛИ ЭтоКорректировочныйСФ(Реализация.Сделка);	
		Иначе
			Возврат Реализация.Корректировка;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
//<- RG-Soft VIvanov 02/04/12


//-> Добавила Л. Федотова, 30.07.2012
// Процедура проверяет соответствие реквизитов счета-фактуры выданной и документа-основания.
// В случае несоответствия выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина) Экспорт
	
	Если ДокОбъект.ПометкаУдаления Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Если ВидДокумента = "СчетФактураПолученный" Тогда		
	//	МассивЗначений = Новый Массив;
	//	МассивЗначений.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	//	МассивЗначений.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);		
	//Иначе
	//	МассивЗначений = Новый Массив;
	//	МассивЗначений.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	//	МассивЗначений.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);		
	//КонецЕсли;
	СчетФактура = НайтиПодчиненныйСчетФактуру(
		//ДокОбъект.Ссылка, ВидДокумента, Новый Структура("ВидСчетаФактуры", МассивЗначений));
		ДокОбъект.Ссылка, ВидДокумента);
	Если НЕ ЗначениеЗаполнено(СчетФактура) 
		ИЛИ СчетФактура = ДокОбъект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();		
	Если СчетФактураОбъект.ПометкаУдаления Тогда
		ОбщегоНазначения.СообщитьОбОшибке(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВернутьСтр("ru='Документ ""%1"" помечен на удаление. Реквизиты документа автоматически не перезаполнены'"),
				СчетФактура),
			Ложь,
			"",
			СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
		
	Попытка
		СчетФактураОбъект.Заблокировать();
		СчетФактураОбъект.ДополнительныеСвойства.Вставить("СообщитьОбИзмененииРеквизитов", Истина);
		// { RGS EParshina 21.11.2018 12:27:04 - Распровелись документы
		Если ДокОбъект.ДополнительныеСвойства.Свойство("ПровестиДокументЛюбойЦеной") Тогда
			СчетФактураОбъект.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
		КонецЕсли;
		// } RGS EParshina 21.11.2018 12:27:04 - Распровелись документы
				
		Если УчетНДС.ПолучитьВерсиюПостановления(СчетФактураОбъект.Дата) = 2 Тогда					
			Если СчетФактураОбъект.Проведен Тогда
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			СчетФактураОбъект.Записать();
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ВернутьСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
				СчетФактура),
			Ложь,
			"",
			СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
//<-

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьДокументРасчетовКакСчетФактуру", МетаданныеОснования) 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("РасчетныйДокумент", МетаданныеОснования)
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				//DELETE
				//Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
				//	И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат 
				//	И ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент.Сделка) Тогда
				//	ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
				//	МетаданныеОснования = ДокументСсылка.Метаданные();
				//	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
				//		Возврат Неопределено;
				//	КонецЕсли;
				//Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				//КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		Если ВидДокумента = "СчетФактураПолученный" 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", МетаданныеОснования)
			И ДокументСсылка.ПредъявленСчетФактура 
			И не ДокументСсылка = ИсключитьИзВыборкиСФ
			Тогда
			Возврат ДокументСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ СФ.Ссылка  = &ИсключитьИзВыборкиСФ
			|";
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") 
					ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Запрос.Текст = Запрос.Текст + "
						|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " В (&"+ЭлементОтбора.Ключ + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
						|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " = &"+ЭлементОтбора.Ключ;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

//-> RG-Soft VIvanov 15/08/12
Функция ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Результат = ?(ЭтоКорректировочныйСФ(ДокументОснование), Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, 
		Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС") Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		Результат = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;	  
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		Результат = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") тогда
		Результат = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
	Иначе
		Результат = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура формирует список выбора кодов видов операций
//
// Параметры
//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра 
//                 формируется список выбора
//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - полученные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы выданные");
		СписокВыбора.Добавить("03", "03 - возврат от покупателя");
		СписокВыбора.Добавить("04", "04 - полученные товары, работы, услуги от комитента");
		СписокВыбора.Добавить("05", "05 - авансы выданные комитенту");
		СписокВыбора.Добавить("10", "10 - полученные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
	ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - реализованные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - авансы полученные");
		СписокВыбора.Добавить("03", "03 - возврат поставщику");
		СписокВыбора.Добавить("04", "04 - реализованные товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - авансы полученные за товары, работы, услуги комитента");
		СписокВыбора.Добавить("06", "06 - налоговый агент, статья 161 НК");
		СписокВыбора.Добавить("07", "07 - списание за счет прибыли, пп.2 п.1 статьи 146 НК");
		СписокВыбора.Добавить("08", "08 - строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
		СписокВыбора.Добавить("09", "09 - суммы, связанные с расчетами по оплате, статья 162 НК");
		СписокВыбора.Добавить("10", "10 - переданные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с датой и номером переданного платежно-расчетного документа для подстановки в счет-фактуру
//
Функция ДатаНомерПлатежноРасчетногоДокумента(ДокументОснование) Экспорт

	ДатаНомер = Новый Структура("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", '00010101', "");

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ДатаНомер;
	КонецЕсли;

	РеквизитыМетаданных = ДокументОснование.Метаданные().Реквизиты;
	ЕстьРеквизитыВходящегоДокумента = РеквизитыМетаданных.Найти("НомерВходящегоДокумента") <> Неопределено
		И РеквизитыМетаданных.Найти("ДатаВходящегоДокумента") <> Неопределено;

	Если ЕстьРеквизитыВходящегоДокумента Тогда
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДокументОснование,
			"ДатаВходящегоДокумента,НомерВходящегоДокумента");
		ДатаНомер.ДатаПлатежноРасчетногоДокумента  = ДанныеДокумента.ДатаВходящегоДокумента;
		ДатаНомер.НомерПлатежноРасчетногоДокумента = ДанныеДокумента.НомерВходящегоДокумента;
	Иначе
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДокументОснование,
			"Дата,Номер");
		ДатаНомер.ДатаПлатежноРасчетногоДокумента  = ДанныеДокумента.Дата;
		ДатаНомер.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОснование);
	КонецЕсли;

	Возврат ДатаНомер;

КонецФункции
//<- RG-Soft VIvanov

#Область ПроверкаКонтрагентов
// { РГ-Софт Пахоменков А. 21.01.2015 ПроверкаКонтрагентов
Процедура ОпределитьНедействующихКонтрагентовВКнигахФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = Параметры.ДанныеДляПроверкиКонтрагентов;
	
	ИндексОсновногоРаздела 		= ДанныеДляПроверкиКонтрагентов.ИндексОсновногоРаздела;
	СписокСформированныхЛистов 	= ДанныеДляПроверкиКонтрагентов.СписокСформированныхЛистов;
	ОсновнойРаздел 				= СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
	
	Если ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС() Тогда
		
		// Проверяем контрагентов на корректность 
		ПроверяемыеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
		ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентов(ПроверяемыеКонтрагенты);
		
		Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
			
			ВыделитьКонтрагентовСОшибками(ПроверяемыеКонтрагенты, ОсновнойРаздел);
			
			ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;
				
			// Формируем книгу покупок, в которой оставляем только некорректных контрагентов
			ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
				Отчеты.КнигаПокупок2014.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			Иначе
				Отчеты.КнигаПродаж2014.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			КонецЕсли;
			РезультатФормированияОтчета = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
			
			КонтрагентыСОшибками = РезультатФормированияОтчета.СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
			
			// Книгу с некоректными контрагентами не формируем, если нет некорректных контрагентов
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		КонтрагентыСОшибками);
			Результат.Вставить("ОсновнойРаздел", 			ОсновнойРаздел);

		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		Новый ТабличныйДокумент);
			Результат.Вставить("ОсновнойРаздел", 			ОсновнойРаздел);
			
		Конецесли;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры
// } РГ-Софт Пахоменков А. 21.01.2015

// { РГ-Софт Пахоменков А. 21.01.2015 ПроверкаКонтрагентов
Процедура ВыделитьКонтрагентовСОшибками(НедействующиеКонтрагенты, ТабличныйДокумент, НомерПервойКолонки = 1)
	
	// Подкрашиваем контрагентов с ошибками
	Для каждого СтрокаСНедействующимКонтрагентом Из НедействующиеКонтрагенты Цикл
		
		Область = ТабличныйДокумент.Область(СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента, НомерПервойКолонки, 
			СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента, ТабличныйДокумент.ШиринаТаблицы);
			
		Область.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры
// } РГ-Софт Пахоменков А. 21.01.2015

#КонецОбласти

#Область ТиповаяБухгалтерия

/////////////////////////////////////////////////////////////
//ВЕРСИЯ ПРОЦЕДУР И ФУНКЦИЙ ОБЛАСТИ "ТиповаяБухгалтерия": БУХ. КОРП. 3.0.38.42 бета

//Эти процедуры требуют сверки изменений в запросах
//ПолучитьзаписиКнигиПродаж 
//ПолучитьСчетаФактурыДокументыКнигаПродаж 
//ПолучитьЗаписиДополнительныхЛистовКнигиПродаж -
//ПолучитьЗаписиКнигиПокупок
//ПолучитьЗаписиДополнительныхЛистовКнигиПокупок
//ПолучитьСчетаФактурыДокументыКнигаПокупок

// Вспомогательные процедуры 

Функция ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		// Формируется книга для передачи в электронном виде или проверка контрагентов отключена
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ИспользованиеПроверкиВозможно = ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно;
	
	Если НЕ ИспользованиеПроверкиВозможно Тогда
		// Проверка контрагентов отключена
		Возврат Ложь;
	КонецЕсли;
	
	// Есть два режима формирования книг:
	// Выводить все строки или только с некорреткными контрагентами 
	ВыводитьТолькоНекорректныхКонтрагентов	= ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов;
	
	Если НЕ ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УменьшитьСуммуИтога(СтрокаИтога, СтрокаВычитаемая, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
		Колонки = Новый Структура("ВсегоПокупок, СуммаБезНДС18, НДС18, СуммаБезНДС10, НДС10, НДС0, СуммаСовсемБезНДС");
	ИначеЕсли СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		Колонки = Новый Структура("ВсегоПродаж, СуммаБезНДС18, НДС18, СуммаБезНДС10, НДС10, НДС0, СуммаСовсемБезНДС");
	ИначеЕсли СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		Колонки = Новый Структура("СуммаДокумента, СуммаНДС, СуммаДокументаРазницаУменьшение, СуммаДокументаРазницаУвеличение, СуммаНДСРазницаУменьшение, СуммаНДСРазницаУвеличение");
	КонецЕсли;
	
	Для каждого Колонка Из Колонки Цикл
		Параметр = Колонка.Ключ;
		СтрокаИтога[Параметр] = СтрокаИтога[Параметр] - СтрокаВычитаемая[Параметр];
	КонецЦикла; 
	
КонецПроцедуры

Функция ВыводитьСтроку(СтруктураПараметров, Строка, ЭтоИтог = Ложь) Экспорт
	
	Если НЕ ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;

	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") И Строка.Строки.Количество()>0  Тогда 
		ДанныеВСтроке = Строка.Строки[0];
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	ВыводитьСтроку = Ложь;
	Если ЭтоИтог Тогда
		// В строке итога нет ИНН, КПП и даты, есть только контрагент 
		ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", ДанныеВСтроке.Контрагент)).Количество() > 0;
	Иначе
		// Разные алгоритмы для разных книг, так как отличаются имена полей
		Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПродавецИНН, 
				ДанныеВСтроке.ПродавецКПП, 
				ДанныеВСтроке.ДатаСчетаФактурыСортировка)).Количество() > 0;
		ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПокупательИНН, 
				ДанныеВСтроке.ПокупательКПП, 
				ДанныеВСтроке.ДатаСчетаФактурыСортировка)).Количество() > 0;
		ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.КонтрагентИНН, 
				ДанныеВСтроке.КонтрагентКПП, 
				ДанныеВСтроке.ДатаСчетаФактуры)).Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, Строка, ОбластьТабличногоДокумента) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	
	// Если проверка не включена, то не добавляем контрагентов на проверку
	Если НЕ ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно Тогда
		Возврат;
	КонецЕсли;
	
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	Контрагент 	= Строка.Контрагент;
	
	// Проверяем условия, при которых добавлять контрагентов на проверку не нужно
	Если СтруктураПараметров.Свойство("ЗаполнениеДокумента") И СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ НедействующиеКонтрагенты = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) 
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты")
		ИЛИ ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события
	Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") 
		ИЛИ ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактурыСортировка;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") И Строка.Строки.Количество()>0  Тогда 
		ДанныеВСтроке = Строка.Строки[0];
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	НоваяСтрока = НедействующиеКонтрагенты.Добавить();
	НоваяСтрока.СтрокаТабличногоДокумента 	= ОбластьТабличногоДокумента.Верх;
	НоваяСтрока.Контрагент 					= Контрагент;
	НоваяСтрока.Дата 						= НачалоДня(ДатаСобытия);
	Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.ПродавецИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.ПродавецКПП;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.ПокупательИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.ПокупательКПП;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.КонтрагентИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.КонтрагентКПП;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает структуру вариантов представления счета-фактуры
// Определяет строку доп. информации, присваивает значение переменной СтрокаДополнительнойИнформации
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, СтруктураПараметров)
	
	ВариантыПредставленияСФ = УчетНДСПереопределяемый.ОпределитьДатуИНомерСчетаФактурыДляПечати(
		ЗаписьКниги.СчетФактура,
		ЗаписьКниги.НомерСчетаФактуры,
		ЗаписьКниги.ДатаСчетаФактуры,
		ЗаписьКниги.ОбрабатыватьНомерДокумента,
		ЗаписьКниги.СчетФактураДокумент);
	
	Возврат ВариантыПредставленияСФ;
		
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного
Функция ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры корректировочного исправленного
Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает номер и дату счета-фактуры исправленного
Функция ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента(ИНН, КПП)
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	
	Если СтрДлина(ИНН) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;

КонецФункции

// Книга продаж, дополнительные листы книги продаж

Функция ПолучитьЗаписиКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	НДСЗаписиКнигиПродаж.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	НДСЗаписиКнигиПродаж.СчетФактура.Дата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И НДСЗаписиКнигиПродаж.СчетФактура.КредитНота
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|			ИЛИ &ОтражатьРеализацииБезНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.СчетФактура.Дата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И НДСЗаписиКнигиПродаж.СчетФактура.КредитНота
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты";
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);

	// Создаем общий запрос
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактураДата, ДЕНЬ) КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактурыСортировка,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|					ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|							ТОГДА ВЫБОР
	|									КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|											ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|										ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|									ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|								КОНЕЦ
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|						ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|					КОНЕЦ
	|			КОНЕЦ, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактурыСортировка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.ИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.ИНН
	|	КОНЕЦ КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.КПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.КПП
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА &ТекстРозничнаяПродажа
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре КАК КонтрагентПоСчетуФактуре
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре) КАК Приоритеты
	|		ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = Приоритеты.КонтрагентПоСчетуФактуре
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|			И (Приоритеты.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаСчетаФактурыСортировка,
	|	НомерСчетаФактурыСортировка,
	|	Исправление
	|ИТОГИ
	|	МИНИМУМ(НомерСчетаФактурыСортировка),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПродаж)
	|		ИНАЧЕ СУММА(ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный)
	|ПО
	|	ОБЩИЕ,
	|	НалоговыйПериод,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить();

	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхКниги") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги = ПоместитьВоВременноеХранилище(Выборка, 
			СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги);
	КонецЕсли;

	Возврат Выборка;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода"	, СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", СтруктураПараметров.ВыводитьПродавцовПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
		
	ДатаПроверкиПараметровУчета ='00010101';
	Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации 
		И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		// Параметры для заполнения документа "Дополнительный лист книги покупок
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
	Иначе	
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;
	КонецЕсли;	
	
	ПрименяетсяОсвобождениеОтУплатыНДС = 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета);
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
		УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 3
		// { RGS LFedotova 20.01.2018 23:04:48 - вопрос SLI-0007468
		ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 4);
		// } RGS LFedotova 20.01.2018 23:05:07 - вопрос SLI-0007468
	ОтражатьРеализацииБезНДС = ДатаПроверкиПараметровУчета < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
		
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница"	, ВидыЦенностей_СуммоваяРазница);
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
	Запрос.УстановитьПараметр("ПКО_РозничнаяВыручка", Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("ОПК_РозничнаяВыручка", Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка);
	
	Запрос.УстановитьПараметр("ТекстРозничнаяПродажа",
		ВернутьСтр("ru = 'Розничная продажа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры

Процедура ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос)
				   
	// Счета-фактуры выданные, составленные от имени продавца, возникают у комиссионера, в книге не отражаются.
	// Т.к. у счетов-фактур, составленных от имени продавца, и выданных комитенту на вознаграждение один и тот же 
	// документ - основание (отчет комитенту), то необходимо отбирать только счета-фактуры на вознаграждение, 
	// чтобы не задвоились записи при соединении регистра НДС и списка документов.
	//
	// Счета-фактуры полученные, составленные от имени продавца, отражаются в базе комитента и
	// на основании их комитент принимает НДС к вычету, поэтому для счетов-фактур полученных отбор по
	// флагу "Составлен от имени продавца" не должен выполняться.
	// 
	// Счета-фактуры (полученные и выданные) на аванс в базе комиссионера, составленные от имени продавца, 
	// не формируют движения по регистрам НДС, поэтому задвоение данных при соединении регистров с ними не возникает.
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Обновление рег. Отчетности на бух. Корп 3.0.37.25
	//Внимание, КПП или КППКонтрагента в КПППродавцаДляПечати - это нюанс SLI, а не тип. бух.
	//<=
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре,
	|	СчетаФактурыДокументы.СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|						ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|						И СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|					ТОГДА СчетФактураВыданный.ДокументОснование
	|				ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|			КОНЕЦ КАК СчетФактура,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ КАК НомерСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ КАК ДатаСчетаФактуры,
	|			СчетФактураВыданный.Ссылка КАК СчетФактураДокумент,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаСуммовуюРазницу,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	|			ВЫБОР
	|				КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|								ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|								ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|						И НЕ СчетФактураВыданный.Ссылка.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорАванса,
	|			3 КАК Приоритет,
	|			СчетФактураВыданный.Ссылка КАК Ссылка,
	|			СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|			СчетФактураВыданный.НомерСтроки КАК НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|			ЛОЖЬ КАК СводныйКомиссионный
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = ЕСТЬNULL(СчетаФактурыДокументы.Контрагент, ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.ИНН
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ИНН
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.КПП
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|				И ЖурналУчетаСчетовФактур.КППКонтрагента <> """"
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|				И ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.КПП
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				И ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).СводныйКомиссионный
	|				И НЕ ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ЖурналУчетаСчетовФактур.ИндексСтроки
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.НомерСтроки
	|	КОНЕЦ КАК НомерСтроки,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Посредник.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Посредник.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Посредник.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Посредник,
	|	ЖурналУчетаСчетовФактур.Посредник.ИНН КАК ПосредникИНН,
	|	ЖурналУчетаСчетовФактур.Посредник.КПП КАК ПосредникКПП,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.Ссылка
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|	И ЖурналУчетаСчетовФактур.Организация В(&Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактурыСортировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправления
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры)
	|	КОНЕЦ КАК ДатаСчетаФактурыСортировка,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.Приоритет КАК Приоритет,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ВТ_РегистрацияСчетовФактур.ПродавецДляПечати КАК ПродавецДляПечати,
	|	ВТ_РегистрацияСчетовФактур.ИННПродавцаДляПечати КАК ИННПродавцаДляПечати,
	|	ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати КАК КПППродавцаДляПечати,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре,
	|	ВТ_РегистрацияСчетовФактур.КодВидаОперации,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ВТ_РегистрацияСчетовФактур.ВсегоПродажВВалюте,
	|	ВТ_РегистрацияСчетовФактур.Посредник,
	|	ВТ_РегистрацияСчетовФактур.ПосредникИНН,
	|	ВТ_РегистрацияСчетовФактур.ПосредникКПП,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименование,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьЗаписиДополнительныхЛистовКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	// Создаем общий запрос
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);

	//Обновление на бух. корп. 3.0.38.42
	//|			ИЛИ НДСЗаписиКнигиПродаж.КорректируемыйПериод <= ДАТАВРЕМЯ(2014, 10, 1)) // AP_TODO
	//<=
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК Период,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И НДСЗаписиКнигиПродаж.СчетФактура.КредитНота
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	(НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|				И НДСЗаписиКнигиПродаж.Организация В (&Организация)
	|				И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = ИСТИНА
	|				И НДСЗаписиКнигиПродаж.Активность
	|				И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|					ИЛИ &ОтражатьРеализацииБезНДС)
	//|			ИЛИ НДСЗаписиКнигиПродаж.КорректируемыйПериод <= ДАТАВРЕМЯ(2014, 10, 1))
	| )
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И НДСЗаписиКнигиПродаж.СчетФактура.КредитНота
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты";
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда      
								
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");
								
	ИначеЕсли СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецПериода");

	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактура.Дата КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.ИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.ИНН
	|	КОНЕЦ КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.КПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент.КПП
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА &ТекстРозничнаяПродажа
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КорректируемыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.Период КАК ДатаОформления,
	|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре КАК КонтрагентПоСчетуФактуре
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре) КАК Приоритеты
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактураДокумент
	|				ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			КОНЕЦ)
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = Приоритеты.КонтрагентПоСчетуФактуре
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА Приоритеты.СчетФактураДокумент = ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|				ИНАЧЕ Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			КОНЕЦ)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|			И (Приоритеты.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ВсегоПродаж)
	|		ИНАЧЕ СУММА(ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактура,
	|	ДоговорАванса,
	|	СторнирующаяЗаписьДопЛиста";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления,", "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПреобразоватьЗаписиКнигиПродаж(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено,
		СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
		ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
		
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;

	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
		
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур);
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;

	Счетчик = 0; // Счетчик строк книги продаж

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
				ТабличныйДокумент.Вывести(СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
			КонецЕсли;
		
			Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги  Из ИтогПоДокументу.Строки Цикл
							
							Если ЗаписьКниги.СводныйКорректировочный Тогда
								
								Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
									Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
										Счетчик = Счетчик + 1;
										ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента);
									Иначе
										УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКнигиДетальная, СтруктураПараметров);
										УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
									КонецЕсли;
								КонецЦикла;
								
							ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;

							Иначе
								Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
									Счетчик = Счетчик + 1;
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
								Иначе									
									УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКниги, СтруктураПараметров);
									УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);								
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
					
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
			Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
				Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
						
						Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа"  
							ИЛИ ЗаписьКниги.СводныйКорректировочный Тогда
														
							Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
								Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
									Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
										ПараметрыСтроки = ТаблицаДокумента.Добавить();
									КонецЕсли;
									
									Счетчик = Счетчик + 1;
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
									
									Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента);
									КонецЕсли;								
								Иначе
									УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
								КонецЕсли;
								
							КонецЦикла;
							
						ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
						Иначе
							Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
								КонецЕсли;
							Иначе
								УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)
	
	// Определить частичные оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДСОборот + НДСЗаписиКнигиПродаж.НДСОборот) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты))) КАК НДСЗаписиКнигиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм

	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПродаж.НДС = 0
	|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
	КонецЦикла; 

	Возврат ДополнительнаяИнформацияПоСФ;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки = Новый Структура;

	СоставСтроки.Вставить("ВсегоПродаж",       ЗаписьКниги.ВсегоПродаж);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.Строки[0].СчетФактура);
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	
	СоставСтроки.Вставить("Ном",         НомерСтроки);
	СоставСтроки.Вставить("КодОперации", РасшифровкаДанныхПокупателя.КодВидаОперации);
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Покупатель) Тогда
		СоставСтроки.Вставить("Покупатель",    РасшифровкаДанныхПокупателя.Покупатель);
		СоставСтроки.Вставить("ПокупательИНН", РасшифровкаДанныхПокупателя.ПокупательИНН);
		СоставСтроки.Вставить("ПокупательКПП", РасшифровкаДанныхПокупателя.ПокупательКПП);
		СоставСтроки.Вставить("Графа8", Строка(РасшифровкаДанныхПокупателя.ПокупательИНН) 
			+ ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПокупательКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПокупательКПП), ""));
		СоставСтроки.Вставить("Посредник", РасшифровкаДанныхПокупателя.Посредник);
		СоставСтроки.Вставить("ПосредникИНН_КПП", "" + Строка(РасшифровкаДанныхПокупателя.ПосредникИНН) 
			+ ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПосредникКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПосредникКПП), ""));
	КонецЕсли;
	
	СоставСтроки.Вставить("Валюта", 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		"" + РасшифровкаДанныхПокупателя.Валюта + ", " + РасшифровкаДанныхПокупателя.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте", 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта), РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер", ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата", ВариантыПредставленияСФ.НомерДата);
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		ИдентификаторСтроки = Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор());
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[ИдентификаторСтроки];
		Если СтрокаДополнительнойИнформации <> Неопределено 
			И СтрокаДополнительнойИнформации.Строки.Количество() <> 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	СоставСтроки.Вставить("НомерДатаИсправления", НомерДатаИсправления);

	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	СоставСтроки.Вставить("НомерДатаКорректировки", НомерДатаКорректировки);
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(
		РасшифровкаДанныхПокупателя, СтруктураПараметров);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", НомерДатаИсправленияКорректировки);
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	Если ЭтоДетальнаяЗапись Тогда 
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
					+ Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) 
					+ НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
				СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
				СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
						+ Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
					
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) 
						+ НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
					СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
					СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);

				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты",      ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",  ЗаписьКниги.НомерИсправления);
		СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("НомКСчФПрод",  ЗаписьКниги.НомерКорректировки);
		СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("НомИспрКСчФ",  ЗаписьКниги.НомерИсправленияКорректировки);
		СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасшифровкаДанныхПокупателя.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		
		// Сведения о покупателе
		
		МассивСвПок = Новый Массив();
		
		Если СоставСтроки.Свойство("ПокупательИНН")
			И НЕ ПустаяСтрока(СоставСтроки.ПокупательИНН) Тогда
			МассивСвПок.Добавить(
				ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПокупательИНН, ПараметрыЗаполнения.ПокупательКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		// Сведения о посреднике
		
		Если СоставСтроки.Свойство("Посредник")
			И НЕ ПустаяСтрока(РасшифровкаДанныхПокупателя.ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", 
				ПолучитьСтруктуруРеквизитовКонтрагента(РасшифровкаДанныхПокупателя.ПосредникИНН, РасшифровкаДанныхПокупателя.ПосредникКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ЗаписьКниги.ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ЗаписьКниги.ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", ЗаписьКниги.СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", ЗаписьКниги.СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  ЗаписьКниги.НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    ЗаписьКниги.НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    ЗаписьКниги.НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  ЗаписьКниги.СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНомерИДатуИсправленногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)

	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) + ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy") ;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерКорректировки + ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		НомерДата = "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФКнигаПродаж(ЗаписьКниги, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки  + ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат НомерДата;
	
КонецФункции

Функция ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДопЛисты,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&НачалоПериода,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА
		|				И КорректируемыйПериод >= &НачалоПериода
		|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;

КонецФункции

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабличныйДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = ВернутьСтр("ru='Отбор: Контрагент '") + ?(ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора), ВернутьСтр("ru='в группе '"), "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

Функция ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров) Экспорт
	
	// Создаем общий запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И (ЗаписьДополнительногоЛиста = ИСТИНА
	|						И КорректируемыйПериод >= &НачалоПериода
	|						И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста),ВидГраницы.Исключая));
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	// { RGS EParshina 29.12.2018 16:22:23 - SLI-0007797
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	// } RGS EParshina 29.12.2018 16:22:23 - SLI-0007797
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПродаж", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, 
	ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, 
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(
		СтруктураПараметров, СписокСчетовФактур, Истина);
	
	Счетчик = 0; // Счетчик строк книги продаж
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
					Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
						
						Счетчик = Счетчик + 1;

						ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе	
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
				Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					
					ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
					
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписиКниги, СтруктураПараметров, Секция, НомерСтроки)
	
	КоличествоЗаписей  = ЗаписиКниги.Количество();
	ТекущаяЗапись      = 0;
	ВсегоПродаж        = 0;
	ВсегоПродажВВалюте = 0;
	СуммаБезНДС18      = 0;
	НДС18              = 0;
	СуммаБезНДС10      = 0;
	НДС10              = 0;
	НДС0               = 0;
	СуммаСовсемБезНДС  = 0;
	Покупатель         = "";
	Графа8             = "";
	
	ДатыНомераОплатыПоКонтрагентам = "";
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
		
	Для Каждого ЗаписьКниги Из ЗаписиКниги Цикл
		
		ЭтоДетальнаяЗапись = Ложь;
		Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
			ЗаписьКнигиДетальная = ЗаписьКниги.Строки[0];
		Иначе
			ЗаписьКнигиДетальная = ЗаписьКниги;
			ЭтоДетальнаяЗапись = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Секция, ЗаписьКнигиДетальная);
		
		ТекущаяЗапись = ТекущаяЗапись + 1;
		
		Если ЗначениеЗаполнено(ЗаписьКнигиДетальная.НомерДокументаОплаты) Тогда
			
			НомерДатаОплаты = "" + ЗаписьКнигиДетальная.НомерДокументаОплаты 
				+ ";" + Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				
			ДатыНомераОплатыПоКонтрагентам = ДатыНомераОплатыПоКонтрагентам 
				+ ?(НЕ ЗначениеЗаполнено(ДатыНомераОплатыПоКонтрагентам), "", 
				?(НЕ ЗначениеЗаполнено(НомерДатаОплаты), "", "," + Символы.ПС)) + НомерДатаОплаты;
				
			СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
			СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКнигиДетальная.НомерДокументаОплаты;
			СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
		Иначе
			
			ВсегоПродаж         = ВсегоПродаж + ЗаписьКнигиДетальная.ВсегоПродаж;
			ВсегоПродажВВалюте  = ВсегоПродажВВалюте 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта), ЗаписьКнигиДетальная.ВсегоПродажВВалюте, 0);
				
			СуммаБезНДС18       = СуммаБезНДС18 + ЗаписьКнигиДетальная.СуммаБезНДС18;
			НДС18               = НДС18 + ЗаписьКнигиДетальная.НДС18;
			СуммаБезНДС10       = СуммаБезНДС10 + ЗаписьКнигиДетальная.СуммаБезНДС10;
			НДС10               = НДС10 + ЗаписьКнигиДетальная.НДС10;
			НДС0                = НДС0 + ЗаписьКнигиДетальная.НДС0;
			СуммаСовсемБезНДС   = СуммаСовсемБезНДС + ЗаписьКнигиДетальная.СуммаСовсемБезНДС;
			
			Покупатель = Покупатель + ?(Покупатель = "", "", ";" + Символы.ПС) + ЗаписьКнигиДетальная.Покупатель;
				
			Графа8 = Графа8 + ?(Графа8 = "", "", ";" + Символы.ПС) 
				+ ЗаписьКнигиДетальная.ПокупательИНН 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПокупательКПП), "/" + ЗаписьКнигиДетальная.ПокупательКПП, "");
				
			// Сведения о покупателе
			
			МассивСвПок = Новый Массив();
			
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПокупательИНН) Тогда
				МассивСвПок.Добавить(
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПокупательИНН, ЗаписьКнигиДетальная.ПокупательКПП));
			КонецЕсли;

		КонецЕсли;
		
		Если ТекущаяЗапись = КоличествоЗаписей Тогда
			
			ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(ЗаписьКнигиДетальная, СтруктураПараметров);
			
			СоставСтроки = Новый Структура;
			
			СоставСтроки.Вставить("ДатаНомер", ВариантыПредставленияСФ.ДатаНомер);
			СоставСтроки.Вставить("НомерДата", ВариантыПредставленияСФ.НомерДата);
			
			СоставСтроки.Вставить("Ном",           НомерСтроки);
			СоставСтроки.Вставить("КодОперации",   ЗаписьКнигиДетальная.КодВидаОперации);
			СоставСтроки.Вставить("Покупатель",    Покупатель);
			СоставСтроки.Вставить("ПокупательИНН", ЗаписьКнигиДетальная.ПокупательИНН);
			СоставСтроки.Вставить("ПокупательКПП", ЗаписьКнигиДетальная.ПокупательКПП);
			СоставСтроки.Вставить("Графа8",        Графа8);
			
			// Сведения о посреднике
			
			СоставСтроки.Вставить("Посредник",     ЗаписьКнигиДетальная.Посредник);
			СоставСтроки.Вставить("ПосредникИНН_КПП","" + ЗаписьКнигиДетальная.ПосредникИНН + 
				?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПосредникКПП), "/" + ЗаписьКнигиДетальная.ПосредникКПП, ""));
				
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПосредникИНН) Тогда
				СоставСтроки.Вставить("СвПос", 
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПосредникИНН, ЗаписьКнигиДетальная.ПосредникКПП));
			КонецЕсли;
	
			СоставСтроки.Вставить("Валюта",
				?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта),
				"" + ЗаписьКнигиДетальная.Валюта + ", " + ЗаписьКнигиДетальная.ВалютаКод,  ""));
				
			СоставСтроки.Вставить("ВсегоПродажВВалюте",  ВсегоПродажВВалюте);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоставСтроки.Вставить("ВсегоПродаж",        ВсегоПродаж);
	СоставСтроки.Вставить("ВсегоПродажВВалюте", ВсегоПродажВВалюте);
	СоставСтроки.Вставить("СуммаБезНДС18",      СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",              НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",      СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",              НДС10);
	СоставСтроки.Вставить("НДС0",               НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС",  СуммаСовсемБезНДС);
	СоставСтроки.Вставить("Контрагент",         Покупатель);
	СоставСтроки.Вставить("НомерДатаОплаты",    ДатыНомераОплатыПоКонтрагентам);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);

	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("ОКВ", Строка(ЗаписьКнигиДетальная.ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьКнигиДетальная.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

// Книга покупок, дополнительные листы книги покупок

// Получает записи книги покупок за период
//
Функция ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупок.Период КАК Период,
		|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
		|	КОНЕЦ КАК Контрагент,
		|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|	КОНЕЦ КАК ПродавецИНН,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
		|	КОНЕЦ КАК ПродавецКПП,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	НДСЗаписиКнигиПокупок.ДокументОплаты,
		|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
		|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДС18,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
		|				ТОГДА НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС18,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
		|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДС10,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
		|				ТОГДА НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС10,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаСовсемБезНДС,
		|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
		|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
		|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
		|			КОНЕЦ
		|	КОНЕЦ КАК Продавец,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|			ТОГДА """"
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаОприходования,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|					ТОГДА ВЫБОР
		|							КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|							ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|									ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|								ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаПринятияНаУчет,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НаАванс,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
		|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтавкаНДС_Аванс,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорАванса,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Исправление,
		|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|	КОНЕЦ КАК ДатаСобытия,
		|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
		|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
		|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Ваучер
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Ваучер
		|		ИНАЧЕ """"""""
		|	КОНЕЦ КАК Ваучер,
		|	НДСЗаписиКнигиПокупок.Поставщик.КонтрагентLawson.Код КАК LawsonID,
		|	НДСЗаписиКнигиПокупок.ПодразделениеОрганизации КАК НалоговаяРегистрация
		|ПОМЕСТИТЬ ЗаписиКнигиПокупок
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
		|ГДЕ
		|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
		|	И НЕ НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
		|	И (НДСЗаписиКнигиПокупок.НДС <> 0
		|			ИЛИ НДСЗаписиКнигиПокупок.СуммаБезНДС <> 0)
		|	И НДСЗаписиКнигиПокупок.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупок.Период,
		|	НДСЗаписиКнигиПокупок.Организация,
		|	НДСЗаписиКнигиПокупок.ДокументОплаты,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
		|	КОНЕЦ,
		|	ЕСТЬNULL(НДСЗаписиКнигиПокупок.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
		|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.ИНН
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|							И &ВыводитьПокупателейПоАвансам
		|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация.КПП
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
		|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
		|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
		|			КОНЕЦ
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ),
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.Поставщик,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|			ТОГДА """"
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|					ТОГДА ВЫБОР
		|							КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|							ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ ВЫБОР
		|								КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|									ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|								ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
		|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
		|	НДСЗаписиКнигиПокупок.ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Ваучер
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Ваучер
		|		ИНАЧЕ """"""""
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.Поставщик.КонтрагентLawson.Код,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура";

	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецКПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецКПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЗаписиКнигиПокупок.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ЗаписиКнигиПокупок.Исправление КАК Исправление,
	|	ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры КАК ДокументОснованиеСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|							И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, ДЕНЬ) КАК ДатаСчетаФактурыСортировка,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
	|	ЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП,
	|	ЗаписиКнигиПокупок.Ваучер,
	|	ЗаписиКнигиПокупок.LawsonID,
	|	ЗаписиКнигиПокупок.НалоговаяРегистрация
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПринятияНаУчет,
	|	ДатаОплаты,
	|	ДатаСчетаФактуры,
	|	НомерСчетаФактуры,
	|	Продавец
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(ДатаОплаты),
	|	МАКСИМУМ(ДатаОприходования),
	|	МАКСИМУМ(ДатаПринятияНаУчет),
	|	МАКСИМУМ(НаАванс),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(НДС)
	|		ИНАЧЕ СУММА(НДС)
	|	КОНЕЦ КАК НДС,
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	ОБЩИЕ,
	|	СчетФактураДокумент,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
		
	Выборка = Запрос.Выполнить();

	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхКниги") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги = ПоместитьВоВременноеХранилище(Выборка, 
			СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги);
	КонецЕсли;

	Возврат Выборка;
	
КонецФункции // ПолучитьЗаписиКнигиПокупок()

// Получает записи дополнительных листов за период
//
Функция ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
		|	КОНЕЦ КАК Контрагент,
		|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|	КОНЕЦ КАК ПродавецИНН,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
		|	КОНЕЦ КАК ПродавецКПП,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	НДСЗаписиКнигиПокупок.ДокументОплаты,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
		|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|			ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
		|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
		|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДС18,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
		|				ТОГДА НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС18,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
		|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДС10,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
		|				ТОГДА НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС10,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДС0,
		|	СУММА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
		|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаСовсемБезНДС,
		|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
		|	НДСЗаписиКнигиПокупок.СчетФактура.Дата КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
		|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
		|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
		|			КОНЕЦ
		|	КОНЕЦ КАК Продавец,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|			ТОГДА """"
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаОприходования,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НаАванс,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
		|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтавкаНДС_Аванс,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорАванса,
		|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
		|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
		|	НДСЗаписиКнигиПокупок.Период КАК ДатаОформления,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
		|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|			КОНЕЦ
		|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Исправление,
		|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|	КОНЕЦ КАК ДатаСобытия,
		|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
		|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
		|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты
		|ПОМЕСТИТЬ ЗаписиКнигиПокупок
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
		|ГДЕ
		|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
		|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = ИСТИНА
		|	И (НДСЗаписиКнигиПокупок.НДС <> 0
		|			ИЛИ НДСЗаписиКнигиПокупок.СуммаБезНДС <> 0)
		|	И НДСЗаписиКнигиПокупок.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупок.ДокументОплаты,
		|	НДСЗаписиКнигиПокупок.Событие,
		|	НДСЗаписиКнигиПокупок.Организация,
		|	НДСЗаписиКнигиПокупок.СчетФактура.Дата,
		|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
		|	НДСЗаписиКнигиПокупок.Период,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
		|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|			ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		КОНЕЦ, ДЕНЬ),
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
		|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
		|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
		|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
		|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.ИНН
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.ИНН
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик.КПП
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА НДСЗаписиКнигиПокупок.Организация.КПП
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик.КПП
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НДСЗаписиКнигиПокупок.СчетФактура.КредитНота
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
		|					И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|						ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
		|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупок.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеСокращенное, 1, 250)
		|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Организация.НаименованиеПолное, 1, 250)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250) = """"
		|					ТОГДА НДСЗаписиКнигиПокупок.Поставщик.Наименование
		|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупок.Поставщик.НаименованиеПолное, 1, 250)
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.Поставщик,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
		|			ТОГДА """"
		|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
		|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
		|					ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА НДСЗаписиКнигиПокупок.СчетФактура.Дата
		|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ,
		|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
		|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты";
		
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
		"ЗаписьДополнительногоЛиста = ИСТИНА 
		|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоНалоговогоПериода 
		|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецНалоговогоПериода");
		
	ИначеЕсли СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
		"ЗаписьДополнительногоЛиста = ИСТИНА 
		|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПериода 
		|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецПериода");
		
	КонецЕсли;
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецИНН
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ИННПродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.ПродавецКПП
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.ПродавецКПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Организации).НаименованиеПолное, 1, 250)
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|				И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование
	|					ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).Наименование
	|				ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.ДатаОформления, ДЕНЬ) КАК ДатаОформления,
	|	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
	|	ЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.Посредник,
	|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	|	ТаблицаСчетаФактурыДокументы.ПосредникКПП
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаСобытия,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(ДатаОприходования),
	|	МАКСИМУМ(НаАванс),
	|	ВЫБОР
	|		КОГДА НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(НДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	ИсправленныйСчетФактура";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,", "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции

// Получает итоги книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организация по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица значений
//
Функция ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС), 0) КАК НДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И ЗаписьДополнительногоЛиста = ИСТИНА
	|					И КорректируемыйПериод >= &НачалоПериода
	|					И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";
	 
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);

	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	// { RGS EParshina 29.12.2018 16:23:33 - SLI-0007797
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	// } RGS EParshina 29.12.2018 16:23:33 - SLI-0007797

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_Авансы = Новый Массив;
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Авансы", ВидыЦенностей_Авансы);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод,
	ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(
		СписокСчетовФактур, СтруктураПараметров);
	
	Счетчик = 0;
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли; 

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
					Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуКнигиПокупок(
							ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого ИтогПоИсправлениям Из ЗаписьПоСФ.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоИсправлениям.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					ПараметрыСтроки.Ном = Счетчик;
					
					ЗаполнитьСтрокуКнигиПокупок(
						ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПокупателейПоАвансам", СтруктураПараметров.ВыводитьПокупателейПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДатаПроверкиПараметровУчета ='00010101';	
	Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации 
		И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		// Параметры для заполнения документа "Дополнительный лист книги покупок
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;	
	Иначе
		
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
		УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 3
		// { RGS LFedotova 20.01.2018 23:04:48 - вопрос SLI-0007468
		ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 4);
		// } RGS LFedotova 20.01.2018 23:05:07 - вопрос SLI-0007468
			
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	// { RGS EParshina 29.12.2018 16:24:24 - SLI-0007797
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	// } RGS EParshina 29.12.2018 16:24:24 - SLI-0007797

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = Новый Массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыВыданные", Перечисления.ВидыЦенностей.АвансыВыданные);
	
	ВидыЦенностей_СуммовыеРазницы = Новый Массив;
	ВидыЦенностей_СуммовыеРазницы.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммовыеРазницы);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_НалоговыйАгент = Новый Массив;
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
КонецПроцедуры

Процедура ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос)    
	                                   	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокументРасшифровка,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	СчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетаФактурыДокументы.Исправление КАК Исправление,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	СчетаФактурыДокументы.СводныйКомиссионный,
	|	СчетаФактурыДокументы.Контрагент
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументыПредварительная
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.Исправление
	|						И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|					ТОГДА СчетФактураВыданный.Ссылка
	|				ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|			КОНЕЦ КАК СчетФактура,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ КАК НомерСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ КАК ДатаСчетаФактуры,
	|			СчетФактураВыданный.Ссылка КАК СчетФактураДокумент,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорАванса,
	|			СчетФактураВыданный.Ссылка КАК Ссылка,
	|			СчетФактураВыданный.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|			СчетФактураВыданный.Ссылка.Исправление КАК Исправление,
	|			СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|			СчетФактураВыданный.НомерСтроки КАК НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|			ЛОЖЬ КАК СводныйКомиссионный
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			СчетКнигиПокупок.Ссылка,
	|			СчетКнигиПокупок.НомерВходящегоДокумента,
	|			СчетКнигиПокупок.ДатаВходящегоДокумента,
	|			СчетКнигиПокупок.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			СчетКнигиПокупок.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|			ЛОЖЬ,
	|			СчетКнигиПокупок.Контрагент,
	|			0,
	|			ЛОЖЬ,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	|		ГДЕ
	|			СчетКнигиПокупок.Проведен
	|			И СчетКнигиПокупок.Организация В(&Организация)
	|			И НЕ СчетКнигиПокупок.ПометкаУдаления
	|			И СчетКнигиПокупок.ВключатьВКнигуПокупок
	|			И НЕ СчетКнигиПокупок.WHT
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.Ссылка.ДокументОснование,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			СчетФактураВыданный.Ссылка,
	|			СчетФактураВыданный.Ссылка.ВидСчетаФактуры,
	|			СчетФактураВыданный.Ссылка.Исправление,
	|			СчетФактураВыданный.Ссылка.Контрагент,
	|			СчетФактураВыданный.НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|			И СчетФактураВыданный.Ссылка.ДокументОснование ССЫЛКА Документ.СчетКнигиПокупок
	|			И СчетФактураВыданный.Ссылка.ДокументОснование.ВключатьВКнигуПокупок
	|			И СчетФактураВыданный.Ссылка.ДокументОснование.WHT
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.Исправление
	|						И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка
	|				ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|			КОНЕЦ,
	|			СчетФактураПолученный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			СчетФактураПолученный.Ссылка,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры,
	|			СчетФактураПолученный.Ссылка.Исправление,
	|			СчетФактураПолученный.Ссылка.Контрагент,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.СводныйКомиссионный
	|					ТОГДА 0
	|				ИНАЧЕ СчетФактураПолученный.НомерСтроки
	|			КОНЕЦ,
	|			СчетФактураПолученный.Ссылка.СводныйКорректировочный,
	|			СчетФактураПолученный.Ссылка.СводныйКомиссионный
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)) КАК СчетаФактурыДокументы
	|		ПО (ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|				ИЛИ ЗаписиКнигиПокупок.ДокументОплаты = СчетаФактурыДокументы.СчетФактура)
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = СчетаФактурыДокументы.Контрагент
	|			И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (НЕ ЗаписиКнигиПокупок.НаАванс
	|				ИЛИ СчетаФактурыДокументы.НаАванс
	|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент КАК СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_ОбъединениеСФ
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСчетаФактурыДокументы.СчетФактура,
	|	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДокументКонтрагент,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры,
	|	ВТ_ОбъединениеСФ.СчетФактураДокумент,
	|	ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СтавкаНДСАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокументРасшифровка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.Ссылка КАК Ссылка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСтроки,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументыПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъединениеСФ КАК ВТ_ОбъединениеСФ
	|		ПО ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса = ВТ_ОбъединениеСФ.ДоговорАванса
	|			И ТаблицаСчетаФактурыДокументыПредварительная.ВидСчетаФактуры = ВТ_ОбъединениеСФ.ВидСчетаФактуры
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Исправление = ВТ_ОбъединениеСФ.Исправление
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура = ВТ_ОбъединениеСФ.СчетФактура
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Контрагент = ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.ИНН
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ИНН
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.КПП
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|				И ЖурналУчетаСчетовФактур.КППКонтрагента <> """"
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|				И ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.КПП
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПокупокВВалюте,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|	И ЖурналУчетаСчетовФактур.Организация В(&Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактурыСортировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправления
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры)
	|	КОНЕЦ КАК ДатаСчетаФактурыСортировка,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ПродавецДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент) КАК ПродавецДляПечати,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ИННПродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.ИНН) КАК ИННПродавцаДляПечати,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.КПП) КАК КПППродавцаДляПечати,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент КАК КонтрагентПоСчетуФактуре,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименованиеПолное,
	|	ВТ_РегистрацияСчетовФактур.ВсегоПокупокВВалюте КАК ВсегоПокупокВВалюте,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ВТ_РегистрацияСчетовФактур.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ВТ_РегистрацияСчетовФактур.Посредник.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ВТ_РегистрацияСчетовФактур.Посредник.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ВТ_РегистрацияСчетовФактур.Посредник.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Посредник,
	|	ВТ_РегистрацияСчетовФактур.Посредник.ИНН КАК ПосредникИНН,
	|	ВТ_РегистрацияСчетовФактур.Посредник.КПП КАК ПосредникКПП
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|						ИЛИ ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|					ТОГДА ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.Выполнить();

КонецПроцедуры

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупокОбороты.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.Период";
				   
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПреобразоватьЗаписиКнигиПокупок(
	СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено,
	СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Ложь;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(
		СписокСчетовФактур, СтруктураПараметров);

	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли; 
	
	Счетчик = 0; // Счетчик строк книги покупок
	ВсегоНДС = 0;
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
				ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
			КонецЕсли;
			
			Для Каждого ИтогПоДокументу Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
					
					Если ЗаписьКниги.СводныйКорректировочный Тогда
						Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
							Если ВыводитьСтроку(СтруктураПараметров, ДетальнаяЗапись) Тогда
								Счетчик = Счетчик + 1;
								ВсегоНДС = ВсегоНДС + ЗаписьКниги.НДС;

								ПараметрыСтроки.Ном = Счетчик;
								
								ЗаполнитьСтрокуКнигиПокупок(
									ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
								
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ДетальнаяЗапись, ОбластьТабличногоДокумента);
							Иначе
								УменьшитьСуммуИтога(ИтогПоКонтрагенту, ДетальнаяЗапись, СтруктураПараметров);
								УменьшитьСуммуИтога(ИтогПоОрганизации, ДетальнаяЗапись, СтруктураПараметров);
							КонецЕсли;
						КонецЦикла;
					Иначе	
						Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
							Счетчик = Счетчик + 1;
							ВсегоНДС = ВсегоНДС + ЗаписьКниги.НДС;

							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(
								ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
						Иначе
							УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКниги, СтруктураПараметров);
							УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла; 
			
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Для каждого ИтогПоДокументу Из ИтогПоОрганизации.Строки Цикл
			Для каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
				
				Если ЗаписьКниги.СводныйКорректировочный Тогда
					Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
						Если ВыводитьСтроку(СтруктураПараметров, ДетальнаяЗапись) Тогда
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							ВсегоНДС = ВсегоНДС + ЗаписьКниги.НДС;

							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(
								ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ДетальнаяЗапись, ОбластьТабличногоДокумента);
							КонецЕсли;
						Иначе
							УменьшитьСуммуИтога(ИтогПоОрганизации, ДетальнаяЗапись, СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
						
						Если СтруктураПараметров.ЗаполнениеДокумента Тогда
							ПараметрыСтроки = ТаблицаДокумента.Добавить();
						КонецЕсли;	
						
						Счетчик = Счетчик + 1;
						ВсегоНДС = ВсегоНДС + ЗаписьКниги.НДС;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуКнигиПокупок(
							ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
							ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
						КонецЕсли;
					Иначе
						УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ИтогПоОрганизации.НДС = ВсегоНДС;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПокупок(
	ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)

	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	
	// { RGS LFedotova 12.09.2017 0:24:05 - вопросы SLI-0007348, SLI-0007349
	ИзменитьДатуОприходованияИНомер(ПараметрыЗаполнения, ЗаписьКниги);
	// } RGS LFedotova 12.09.2017 0:24:58 - вопрос SLI-0007348, SLI-0007349
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки = Новый Структура;
	
	СоставСтроки.Вставить("КодОперации", ПараметрыЗаполнения.КодВидаОперации);

	СоставСтроки.Вставить("ПродавецИНН", ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", ПараметрыЗаполнения.ПродавецКПП);
	
	Графа10 = Строка(ПараметрыЗаполнения.ПродавецИНН) 
		+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , "")
		+ Строка(ПараметрыЗаполнения.ПродавецКПП);

	СоставСтроки.Вставить("Валюта", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод, ""));
	СоставСтроки.Вставить("ВсегоПокупок",      ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС",               ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер",         ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата",         ВариантыПредставленияСФ.НомерДата);
	СоставСтроки.Вставить("ДатаОприходования", Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	КонецЕсли;
	
	НомерДатаИсправления = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаИсправления", НомерДатаИсправления);	
	
	НомерДатаКорректировки = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаКорректировки", НомерДатаКорректировки);
	
	НомерДатаИсправленияКорректировки = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", НомерДатаИсправленияКорректировки);	
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	МассивДокПдтвУпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстНомерГТД = "";
	ТекстСтранаНомерГТД = "";
	
	ТекстГрафа7 = "";
	ТекстГрафа9 = "";
	ТекстГрафа10 = "";
	МассивСвПрод = Новый Массив();
	
	СуммаСНДС = 0;
	
	Если ЭтоДетальнаяЗапись Тогда
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				СтруктураДокПдтвУпл = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл");
				СтруктураДокПдтвУпл.НомДокПдтвУпл = ЗаписьКниги.НомерДокументаОплаты;
				СтруктураДокПдтвУпл.ДатаДокПдтвУпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвУпл.Добавить(СтруктураДокПдтвУпл);
				
			КонецЕсли;
		КонецЕсли;
		
		СоставСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокументРасшифровка;
		
	Иначе
		
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," 
						+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером 
						+ ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+ Символы.ПС) + НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					СтруктураДокПдтвУпл = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл");
					СтруктураДокПдтвУпл.НомДокПдтвУпл = ЗаписьКниги.НомерДокументаОплаты;
					СтруктураДокПдтвУпл.ДатаДокПдтвУпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвУпл.Добавить(СтруктураДокПдтвУпл);
				КонецЕсли;
			КонецЕсли;
			
			СоставСтроки.СчетФактура = СтрокаЗаписи.СчетФактураДокументРасшифровка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ГТД и страна происхождения
	СчетаФактуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") 
					+ СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") 
					+ СокрЛП(СтрокаДополнительнойИнформации.ГТД);
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;

	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	
	// { RGS LFedotova 20.01.2018 22:24:59 - вопрос SLI-0007468
	ТекстНомерГТД = СтрЗаменить(ТекстНомерГТД,"-","/");
	// } RGS LFedotova 20.01.2018 22:25:26 - вопрос SLI-0007468
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
		
	// Дополнительная информация по сводному комиссионному счету-фактуре (продавцы, платежно-расчетные документы)
	// в учете комитента-покупателя
	СчетаФактурыДокументы = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактураДокумент"));
	
	Для Каждого СчетФактураДокумент Из СчетаФактурыДокументы Цикл
		
		Если ЗначениеЗаполнено(СчетФактураДокумент) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактураДокумент.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаДополнительнойИнформации.Графа7)) Тогда
				ТекстГрафа7 = ТекстГрафа7 + ?(ПустаяСтрока(ТекстГрафа7), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа7;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаДополнительнойИнформации.Графа9)) Тогда
				ТекстГрафа9 = ТекстГрафа9 + ?(ПустаяСтрока(ТекстГрафа9), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа9;
				ТекстГрафа10 = ТекстГрафа10 + ?(ПустаяСтрока(ТекстГрафа10), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа10;
				МассивСвПрод = СтрокаДополнительнойИнформации.МассивСвПрод;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты); // Постановление 1137 до редакции 735
	СоставСтроки.Вставить("НомерДатаОплаты", ?(ПустаяСтрока(ТекстГрафа7), ТекстОплатыСНомером, ТекстГрафа7)); // Постановление в редакции 735/1279
	СоставСтроки.Вставить("Продавец",        ?(ПустаяСтрока(ТекстГрафа9), ПараметрыЗаполнения.Продавец, ТекстГрафа9));
	СоставСтроки.Вставить("Графа10",         ?(ПустаяСтрока(ТекстГрафа9), Графа10, ТекстГрафа10));
	
	Если НЕ ПустаяСтрока(ТекстГрафа9) Тогда
		
		Посредник        = ПараметрыЗаполнения.Продавец;
		ПосредникИНН     = ПараметрыЗаполнения.ПродавецИНН;
		ПосредникКПП     = ПараметрыЗаполнения.ПродавецКПП;
		ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПродавецИНН) 
			+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" + Строка(ПараметрыЗаполнения.ПродавецКПП), "");
		СоставСтроки.Вставить("Контрагент", ТекстГрафа9);

	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаполнения.Посредник) Тогда
		
		Посредник        = ПараметрыЗаполнения.Посредник;
		ПосредникИНН     = ПараметрыЗаполнения.ПосредникИНН;
		ПосредникКПП     = ПараметрыЗаполнения.ПосредникКПП;
		ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПосредникИНН)
			+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + Строка(ПараметрыЗаполнения.ПосредникКПП), "");
		
	Иначе
		
		Посредник = "";
		ПосредникИНН_КПП = "";
		ПосредникИНН = "";
		ПосредникКПП = "";
		
	КонецЕсли;
	
	СоставСтроки.Вставить("Посредник", Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП", ПосредникИНН_КПП);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", ПараметрыСтроки.Ном);
		
		СоставСтроки.Вставить("НомСчФПрод", ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ", ЗаписьКниги.НомерИсправления);
		СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("НомКСчФПрод", ЗаписьКниги.НомерКорректировки);
		СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("НомИспрКСчФ", ЗаписьКниги.НомерИсправленияКорректировки);
		СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy"));
		
		СоставСтроки.Вставить("НомТД", ТекстНомерГТД);
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		СоставСтроки.Вставить("СтоимПокупВ", СоставСтроки.ВсегоПокупок);
		СоставСтроки.Вставить("СумНДСВыч", СоставСтроки.НДС);
		СоставСтроки.Вставить("СумНДС", СоставСтроки.НДС); // Для раздела 8.1
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		МассивДатаУчТов = Новый Массив();
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОприходования) Тогда
			МассивДатаУчТов.Добавить(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
		КонецЕсли; 
		
		СоставСтроки.Вставить("ДатаУчТов", МассивДатаУчТов);
		
		СоставСтроки.Вставить("ДокПдтвУпл", МассивДокПдтвУпл);
		
		Если МассивСвПрод.Количество() = 0
			И НЕ ПустаяСтрока(ПараметрыЗаполнения.ПродавецИНН) Тогда
			МассивСвПрод.Добавить(
				ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПродавецИНН, ПараметрыЗаполнения.ПродавецКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПрод", МассивСвПрод);
		
		Если НЕ ПустаяСтрока(ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", 
				ПолучитьСтруктуруРеквизитовКонтрагента(ПосредникИНН, ПосредникКПП));
		КонецЕсли;
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел81.Добавить(); 
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел8.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

// { RGS LFedotova 13.09.2017 15:12:21 - вопросы SLI-0007348, SLI-0007349
Процедура ИзменитьДатуОприходованияИНомер(ПараметрыЗаполнения, ЗаписьКниги)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетКнигиПокупок.Ссылка КАК СчетФактура,
	|	ДокументПроводкаDSS.PeriodLawson,
	|	СчетКнигиПокупок.ТаможеннаяДекларация,
	|	ДокументПроводкаDSS.SourceCode,
	|	СчетКнигиПокупок.Дата,
	|	ДокументПроводкаDSS.Description КАК НомерГТД
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ДокументПроводкаDSS
	|		ПО СчетКнигиПокупок.Ссылка = ДокументПроводкаDSS.Документ
	|ГДЕ
	|	СчетКнигиПокупок.Ссылка = &СКП
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетКнигиПокупок.Ссылка,
	|	ДокументПроводкаDSS.PeriodLawson,
	|	СчетКнигиПокупок.ТаможеннаяДекларация,
	|	ДокументПроводкаDSS.SourceCode,
	|	СчетКнигиПокупок.Дата,
	|	ДокументПроводкаDSS.Description
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.СчетФактура,
	|	МАКСИМУМ(ВТ.PeriodLawson) КАК PeriodLawson,
	|	ВТ.ТаможеннаяДекларация,
	|	ВТ.Дата,
	|	МАКСИМУМ(ВТ.НомерГТД) КАК НомерГТД
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.SourceCode = ""AD""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.СчетФактура,
	|	ВТ.ТаможеннаяДекларация,
	|	ВТ.Дата";
	
	Запрос.УстановитьПараметр("СКП", ПараметрыЗаполнения.СчетФактура);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если ПараметрыЗаполнения.КодВидаОперации = "20" ИЛИ ПараметрыЗаполнения.КодВидаОперации = "01" Тогда
			ЗаписьКниги.ДатаОприходования = Выборка.PeriodLawson;
		КонецЕсли; 
		
		Если ПараметрыЗаполнения.КодВидаОперации = "20" Тогда
		    ПараметрыЗаполнения.НомерСчетаФактуры = Выборка.НомерГТД;
			ПараметрыЗаполнения.ДатаСчетаФактуры = Выборка.Дата;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
// } RGS LFedotova 13.09.2017 15:12:41 - вопросы SLI-0007348, SLI-0007349

// Получает страну происхождения и номер ГТД по списку счетов-фактур в виде, отражаемом в книге покупок
//
Функция ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	//Обновление рег. Отчетности на бух. Корп 3.0.38.42
	//ВНИМАНИЕ! Эта функция сильно изменена и обрезана! Возможно, нам достаточно только номер ГТД?
	//<=
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;

	// Дополнение по ГТД и стране происхождения
	Запрос = Новый Запрос;
	Запрос.Текст =
	// { RGS LFedotova 06.09.2017 22:26:12 - вопрос SLI-0007341
	//"ВЫБРАТЬ
	//|	СчетКнигиПокупок.Ссылка КАК СчетФактура,
	//|	МАКСИМУМ("""") КАК СтранаПроисхождения,
	//|	СчетКнигиПокупок.НомерВходящегоДокумента КАК НомерГТД,
	//|	СУММА(1) КАК КоличествоЭлементов
	//|ИЗ
	//|	Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	//|ГДЕ
	//|	СчетКнигиПокупок.Ссылка В (&СписокСФ)
	//|	И СчетКнигиПокупок.ТаможеннаяДекларация
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СчетКнигиПокупок.Ссылка,
	//|	СчетКнигиПокупок.НомерВходящегоДокумента";
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетКнигиПокупок.Ссылка КАК СчетФактура,
	|	МАКСИМУМ("""") КАК СтранаПроисхождения,
	|	СУММА(1) КАК КоличествоЭлементов,
	|	ДокументПроводкаDSS.Description КАК НомерГТД,
	|	ДокументПроводкаDSS.SourceCode,
	|	ДокументПроводкаDSS.PeriodLawson
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ДокументПроводкаDSS
	|		ПО СчетКнигиПокупок.Ссылка = ДокументПроводкаDSS.Документ
	|ГДЕ
	|	СчетКнигиПокупок.Ссылка В(&СписокСФ)
	|	И СчетКнигиПокупок.ТаможеннаяДекларация
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетКнигиПокупок.Ссылка,
	|	ДокументПроводкаDSS.Description,
	|	ДокументПроводкаDSS.SourceCode,
	|	ДокументПроводкаDSS.PeriodLawson
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.СчетФактура,
	|	ВТ.СтранаПроисхождения,
	|	ВТ.КоличествоЭлементов,
	|	ВТ.НомерГТД,
	|	ВТ.PeriodLawson
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.SourceCode = ""AD""";
	// } RGS LFedotova 06.09.2017 22:26:18 - вопрос SLI-0007341
	
	Запрос.УстановитьПараметр("СписокСФ", СписокСчетовФактур);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТД");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа7");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа9");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа10");
	
	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), СтрокаСФ);
	КонецЦикла;

	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИнформации = "";
		СтрокаИнформацииГТД = "";
		
		Для каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения);
			ГТДРез = "";
			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл 
				ГТДРез = ГТДРез + ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
			КонецЦикла;
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", ?(ПустаяСтрока(ГТДРез), "", ";")) + ГТДРез;
			СтрокаИнформацииГТД = СтрокаИнформацииГТД + ?(ПустаяСтрока(СтрокаИнформацииГТД), "", ?(ПустаяСтрока(ГТДРез), "", ";")) + ГТДРез;
		КонецЦикла;
		СтрокаСФ.ГТДиСтрана = СтрокаИнформации;
		СтрокаСФ.ГТД        = СтрокаИнформацииГТД;
		
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		Если ПустаяСтрока(СтрокаИнформацииГТД) Тогда
			СтрокаСФ.ГТДиСтрана = "Не указана страна " + СтрокаСФ.НомерГТД;
			СтрокаСФ.ГТД		= СтрокаСФ.НомерГТД;			
		КонецЕсли;
		//<=
		
	КонецЦикла;
	
	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре;
	
КонецФункции

// Журнал учета счетов-фактур

Функция ПолучитьЗаписиЖурналаСчетовФактур(СтруктураПараметров) Экспорт
	Перем СформироватьОтчетПоСтандартнойФорме;
	Перем ГруппироватьПоКонтрагентам;
	Перем ОтбиратьПоКонтрагенту;
	Перем КонтрагентДляОтбора, МассивКонтрагентовДляОтбора;
	Перем КонецПериодаОтчета;
	
	Если НЕ СтруктураПараметров.Свойство("СформироватьОтчетПоСтандартнойФорме", СформироватьОтчетПоСтандартнойФорме) Тогда
		СформироватьОтчетПоСтандартнойФорме	= Истина;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ГруппироватьПоКонтрагентам", ГруппироватьПоКонтрагентам) Тогда
		ГруппироватьПоКонтрагентам	= Ложь;
	КонецЕсли;
	ГруппироватьПоКонтрагентам	= НЕ СформироватьОтчетПоСтандартнойФорме И ГруппироватьПоКонтрагентам;
	
	Если НЕ СтруктураПараметров.Свойство("ОтбиратьПоКонтрагенту", ОтбиратьПоКонтрагенту) Тогда
		ОтбиратьПоКонтрагенту	= Ложь;
	КонецЕсли;
	ОтбиратьПоКонтрагенту	= НЕ СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту;
	
	Если ОтбиратьПоКонтрагенту И СтруктураПараметров.Свойство("КонтрагентДляОтбора", КонтрагентДляОтбора) Тогда
		
		// Массив контрагентов и их обособленных подразделений
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", КонтрагентДляОтбора);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ОбособленноеПодразделение
		|	И Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагент)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОбособленноеПодразделение
		|	И Контрагенты.ГоловнойКонтрагент В ИЕРАРХИИ(&Контрагент)";
		
		Результат	= Запрос.Выполнить();
		МассивКонтрагентовДляОтбора	= Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("Квартал",            НачалоКвартала(СтруктураПараметров.НалоговыйПериод));
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентовДляОтбора);
		
	// Поддержка возможности формирования отчета за произвольный период
	Если СтруктураПараметров.Свойство("КонецПериодаОтчета", КонецПериодаОтчета) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураПараметров.НалоговыйПериод));
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(СтруктураПараметров.КонецПериодаОтчета));
		Запрос.УстановитьПараметр("ПравилаПостановления735", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериодаОтчета) = 3);
	Иначе
		Запрос.УстановитьПараметр("ПравилаПостановления735", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.НалоговыйПериод) = 3);		
	КонецЕсли;
	
	// Для совместимости с УП
	МассивПустыеСсылкиСчетовФактур = Новый Массив;
	ТипыРесурса = Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.Ресурсы.СчетФактураВыданныйПокупателю.Тип.Типы();
	Для Каждого ТекущийТип Из ТипыРесурса Цикл
		МассивПустыеСсылкиСчетовФактур.Добавить(Документы[Метаданные.НайтиПоТипу(ТекущийТип).Имя].ПустаяСсылка());
	КонецЦикла;
	Если МассивПустыеСсылкиСчетовФактур.Количество() > 1 Тогда
		// Для составных типов может быть не выбрано ничего.
		МассивПустыеСсылкиСчетовФактур.Добавить(Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПустыеСсылкиСчетовФактур", МассивПустыеСсылкиСчетовФактур);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.НаименованиеПолное КАК Комитент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры КАК НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.ИНН КАК КомитентИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.КПП КАК КомитентКПП,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|ПОМЕСТИТЬ ВТ_СчетаФактурыОтКомитента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			,
	|			ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|				И НЕ СчетФактураВыданныйПокупателю В (&МассивПустыеСсылкиСчетовФактур)
	|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.НаименованиеПолное,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.ИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент.КПП,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			,
	|			ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|				И НЕ СчетФактураВыданныйПокупателю В (&МассивПустыеСсылкиСчетовФактур)
	|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаОперации,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуре, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК СуммаПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДС, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение
	|	КОНЕЦ КАК СуммаНДСРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение
	|	КОНЕЦ КАК СуммаНДСРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ПоСтавкеБезНДС, ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС
	|	КОНЕЦ КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА """"
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер КАК СубкомиссионерСсылка,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Субкомиссионер,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаСделки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.ИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.КПП,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.Комитент, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.НаименованиеПолное
	|	КОНЕЦ КАК Комитент,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентИНН, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.ИНН
	|	КОНЕЦ КАК КомитентИНН,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентКПП, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.КПП
	|	КОНЕЦ КАК КомитентКПП,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.НомерСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|	КОНЕЦ КАК НомерСчетаФактурыКомитента,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ДатаСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС КАК СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличениеИтоговая,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура.СводныйКорректировочный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СводныйКорректировочный,
	|	ЛОЖЬ КАК СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурСрезПоследних
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			&Квартал,
	|			Период = &Квартал
	|				И Организация В (&СписокОрганизаций)
	|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
	|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
	|ГДЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Контрагент
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуре, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДС, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ПоСтавкеБезНДС, ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА """"
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.КППКонтрагента
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.НаименованиеПолное, 1, 250)
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаСделки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.ИНН,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер.КПП,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.Комитент, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.НаименованиеПолное
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентИНН, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентКПП, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец.КПП
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.НомерСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ДатаСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура.СводныйКорректировочный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК Документ.СчетФактураВыданный).СводныйКомиссионный
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК Документ.СчетФактураПолученный).СводныйКомиссионный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			&Квартал,
	|			Период = &Квартал
	|				И Организация В (&СписокОрганизаций)
	|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
	|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
	|ГДЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.Контрагент ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент.ГоловнаяОрганизация
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент.ОбособленноеПодразделение
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.Контрагент ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ВЫБОР
	|								КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|									ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.Наименование
	|								ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.НаименованиеПолное, 1, 250)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнаяОрганизация.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|								ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнаяОрганизация.Наименование
	|							ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.ГоловнаяОрганизация.НаименованиеПолное, 1, 250)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
	|					ТОГДА ЖурналУчетаСчетовФактур.Контрагент.Наименование
	|				ИНАЧЕ ПОДСТРОКА(ЖурналУчетаСчетовФактур.Контрагент.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.Контрагент.ИНН КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КППКонтрагента ПОДОБНО """"
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.КПП
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.КППКонтрагента
	|	КОНЕЦ КАК КонтрагентКПП,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.Комитент,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураПолученный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).Номер КАК СчетФактураВыданныйНомер
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактураДокумент,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаПередачиПолучения,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.КонтрагентИНН КАК КонтрагентИНН,
	|	ЖурналУчетаСчетовФактур.КонтрагентКПП КАК КонтрагентКПП,
	|	ЖурналУчетаСчетовФактур.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное КАК НаименованиеВалюты,
	|	ЖурналУчетаСчетовФактур.Валюта.Код КАК КодВалюты,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК СчетФактураБезНДС,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КорректировочныйСчетФактура КАК КорректировочныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер КАК СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.Комитент,
	|	ЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение) КАК СуммаДокументаРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК СуммаДокументаРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДСРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре) КАК СуммаДокумента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая) КАК СуммаПоСчетуФактуреИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСИтоговая) КАК СуммаНДСИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая) КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая) КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая) КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая) КАК СуммаНДСРазницаУвеличениеИтоговая
	|ПОМЕСТИТЬ ЗаписиРегистраЖурналУчетаСчетовФактур
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЖурналУчетаСчетовФактур
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.Организация,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Контрагент,
	|	ЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.Комитент,
	|	ЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЧастьЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК СчетФактура,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер КАК Субкомиссионер,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерИНН КАК СубкомиссионерИНН,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерКПП КАК СубкомиссионерКПП,
	|	МИНИМУМ(ВТ_ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних КАК ВТ_ЖурналУчетаСчетовФактурСрезПоследних
	|ГДЕ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерСсылка <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерИНН,
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерКПП";
	
	Если НЕ ОтбиратьПоКонтрагенту Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)", "ИСТИНА");
	КонецЕсли;
	
	// Поддержка возможности формирования отчета за произвольный период
	Если СтруктураПараметров.Свойство("КонецПериодаОтчета", КонецПериодаОтчета) Тогда
		
		ЗаменяемыйСтандартныйТекст1 = "ИЗ
		|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
		|			&Квартал,
		|			Период = &Квартал
		|				И Организация В (&СписокОрганизаций)
		|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
		|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
		|ГДЕ
		|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)";
		
				
		ЗаменяемыйСтандартныйТекст2 = "ИЗ
		|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
		|			&Квартал,
		|			Период = &Квартал
		|				И Организация В (&СписокОрганизаций)
		|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
		|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
		|ГДЕ
		|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
		
		Если КонецКвартала(СтруктураПараметров.КонецПериодаОтчета) = КонецКвартала(СтруктураПараметров.НалоговыйПериод) Тогда
			
			// Мы делаем отчет за период внутри квартала
			НовыйТекст1 = "ИЗ
			|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
			|			&Квартал,
			|			Период = &Квартал
			|				И Организация В (&СписокОрганизаций)
			|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
			| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
			|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
			|ГДЕ
			|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода";
			
			НовыйТекст2 = "ИЗ
			|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
			|			&Квартал,
			|			Период = &Квартал
			|				И Организация В (&СписокОрганизаций)
			|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
			| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
			|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
			|ГДЕ
			|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода
			|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
			
		Иначе
			
			// Мы делаем отчет за период, который не попадает целиком в один квартал
			Если НачалоКвартала(СтруктураПараметров.НалоговыйПериод) >= '20150101' Тогда
				//Правила заполнения с 2015 года
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЛОЖЬ";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|	И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода
				|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
				
			ИначеЕсли КонецКвартала(СтруктураПараметров.КонецПериодаОтчета) <'20150101' Тогда
				//Правила заполнения до 2015 года				
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЛОЖЬ";
			Иначе
				//Ранее 2015 года и 2015 год
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения >= &НачалоПериода
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015,1,1)";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|	И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ ДАТАВРЕМЯ(2015,1,1) И &КонецПериода
				|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст1, НовыйТекст1);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст2, НовыйТекст2);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства = Запрос.Выполнить().Выгрузить();
	
	// Выданные счета-фактуры сортируем по дате передачи и далее по номеру с учетом префиксов,
	// чтобы обеспечить правильную сортировку для номеров разной значности.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента КАК СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение КАК СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение КАК СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая КАК СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая КАК СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая КАК СуммаНДСРазницаУвеличениеИтоговая,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЕСТЬNULL(ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер, ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры) КАК НомерСчетаФактурыДляСортировки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СводныйКомиссионный
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	НомерСчетаФактурыДляСортировки
	|ИТОГИ
	|	МАКСИМУМ(КонтрагентНаименование),
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(СуммаДокументаРазницаУменьшение),
	|	СУММА(СуммаДокументаРазницаУвеличение),
	|	СУММА(СуммаНДСРазницаУменьшение),
	|	СУММА(СуммаНДСРазницаУвеличение),
	|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
	|	МАКСИМУМ(СуммаНДСИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая)
	|ПО
	|	СчетФактураДокумент";
	
	Если ГруппироватьПоКонтрагентам Тогда
		
		ЗаменяемыйСтандартныйТекст = "ПО
		|	СчетФактураДокумент";
		
		НовыйТекст = "ПО
		|	Контрагент,
		|	СчетФактураДокумент";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст, НовыйТекст);
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");
	КонецЕсли;
	
	ВыставленныеСчетаФактуры = Запрос.Выполнить();
	
	// Полученные счета-фактуры сортируем по дате получения, наименованию контрагента,
	// номер счета-фактуры контрагента
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры";
	
	Если ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = Запрос.Текст + "
			|ИТОГИ
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДС),
			|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
			|	МАКСИМУМ(СуммаНДСИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(КонтрагентНаименование)
			|ПО
			|	Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");
	КонецЕсли;
	
	ПолученныеСчетаФактуры = Запрос.Выполнить();

	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхВыставленныеСчетаФактуры")
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхПолученныеСчетаФактуры")
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхДополнительныеСвойства") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхВыставленныеСчетаФактуры = 
			ПоместитьВоВременноеХранилище(ВыставленныеСчетаФактуры, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхВыставленныеСчетаФактуры);

		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхПолученныеСчетаФактуры = 
			ПоместитьВоВременноеХранилище(ПолученныеСчетаФактуры, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхПолученныеСчетаФактуры);
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхДополнительныеСвойства = 
			ПоместитьВоВременноеХранилище(ДополнительныеСвойства, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхДополнительныеСвойства);
			
	КонецЕсли;

	Возврат Новый Структура("ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры, ДополнительныеСвойства", 
		ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры, ДополнительныеСвойства);

КонецФункции

Процедура ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(
	ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур, СтруктураПараметров, ДополнительныеСвойства = Неопределено, НомерПП = 1) Экспорт
	
	ТекстБезНДС = "без НДС";
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур);
	
	// Универсальная структура для заполнения журнала по разным версиям постановления
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("КодОперации", 	 		ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации);
	СоставСтроки.Вставить("НомерСчетаФактуры", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
	СоставСтроки.Вставить("ДатаСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДата", 	 			"" + ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры 
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерИсправления", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
	СоставСтроки.Вставить("ДатаИсправления", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправления", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", 	ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
	СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаКорректировки",	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));	
	СоставСтроки.Вставить("ДатаПередачиПолучения",	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("КонтрагентИННКПП",		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
	СоставСтроки.Вставить("Валюта",					СокрП(ЗаписьЖурналаУчетаСчетовФактур.НаименованиеВалюты) 
		+ ", " + ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		ДопСвойстваСчетаФактуры = ДополнительныеСвойства.НайтиСтроки(Новый Структура("СчетФактура", ЗаписьЖурналаУчетаСчетовФактур.СчетФактураДокумент));
		Субкомиссионер          = "";
		СубкомиссионерИНН_КПП   = "";
		Если ДопСвойстваСчетаФактуры.Количество() > 0 Тогда
			ТаблицаДопСвойств = ДополнительныеСвойства.СкопироватьКолонки();
			Для каждого СтрокаДопСвойства Из ДопСвойстваСчетаФактуры Цикл
				НоваяСтрока = ТаблицаДопСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДопСвойства);
			КонецЦикла;
			ТаблицаДопСвойств.Сортировать("НомерСтроки");
			Для каждого СтрокаТаблицы Из ТаблицаДопСвойств Цикл
				Субкомиссионер = Субкомиссионер + ?(ПустаяСтрока(Субкомиссионер), "", ";") 
					+ СтрокаТаблицы.Субкомиссионер;
				СубкомиссионерИНН_КПП = СубкомиссионерИНН_КПП + ?(ПустаяСтрока(СубкомиссионерИНН_КПП), "", ";")
					+ СокрЛП(СтрокаТаблицы.СубкомиссионерИНН)
					+ ?(НЕ ПустаяСтрока(СтрокаТаблицы.СубкомиссионерКПП),"/", "") 
					+ СокрЛП(СтрокаТаблицы.СубкомиссионерКПП);
			КонецЦикла;
			
			// Формат выгрузки раздела 11 декларации по НДС (с 1 квартала 2015 года)
			// не учитывает возможность реализации товаров комитента через нескольких субкомиссионеров
			// в один день (и получение на все реализации сводного счета-фактуры от комитента)
			// Для выгрузки используется один из субкомиссионеров (по последней или единственной строке ТаблицаДопСвойств)
			
			Если НЕ ПустаяСтрока(СтрокаТаблицы.СубкомиссионерИНН) Тогда
				
				СоставСтроки.Вставить("СвКомис", 
					ПолучитьСтруктуруРеквизитовКонтрагента(СтрокаТаблицы.СубкомиссионерИНН, СтрокаТаблицы.СубкомиссионерКПП));
				
			КонецЕсли;
			
		КонецЕсли;
		
		СоставСтроки.Вставить("Субкомиссионер",        Субкомиссионер);
		СоставСтроки.Вставить("СубкомиссионерИНН_КПП", СубкомиссионерИНН_КПП);
	КонецЕсли;
	
	СоставСтроки.Вставить("КомитентИНН_КПП", СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП));	
	СоставСтроки.Вставить("НомерДатаСчетаФактурыКомитента",	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента),";", "") 
		+ Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy"));	
		
	Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
		
		СоставСтроки.Вставить("СуммаДокумента", "");
		СоставСтроки.Вставить("СуммаНДС", "");
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокументаРазницаУменьшение);
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокументаРазницаУвеличение);
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДСРазницаУменьшение);
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДСРазницаУвеличение);
		
	Иначе
		
		СоставСтроки.Вставить("СуммаДокумента", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокумента);
		СоставСтроки.Вставить("СуммаНДС", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДС);
		
		СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", "");
		СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", "");
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", "");
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", "");
		
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.Контрагент = ЗаписьЖурналаУчетаСчетовФактур.Организация Тогда
		СоставСтроки.Вставить("КонтрагентНаименование", СтруктураПараметров.НаименованиеОрганизацииДляПечатныхФорм);
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураБезНДС Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
			СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ТекстБезНДС);
			СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ТекстБезНДС);
		Иначе
			СоставСтроки.Вставить("СуммаНДС", ТекстБезНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			
			// Раздел 10
			
			// Массив структур со сведениями о посреднической деятельности
			СтруктураСвПосрДеят = Новый Структура(
				"НомСчФОтПрод,ДатаСчФОтПрод,ОКВ,СтоимТовСчФВс,СумНДССчФ,РазСтКСчФУм,РазСтКСчФУв,РазНДСКСчФУм,РазНДСКСчФУв,СвПрод");
				
			СтруктураСвПосрДеят.НомСчФОтПрод  = СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента);
			СтруктураСвПосрДеят.ДатаСчФОтПрод = Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy");
			СтруктураСвПосрДеят.ОКВ           = ЗаписьЖурналаУчетаСчетовФактур.КодВалюты;
			
			СтруктураСвПосрДеят.СтоимТовСчФВс = СоставСтроки.СуммаДокумента;
			СтруктураСвПосрДеят.СумНДССчФ     = СоставСтроки.СуммаНДС;
			
			СтруктураСвПосрДеят.РазСтКСчФУм   = СоставСтроки.СуммаДокументаРазницаУменьшение;
			СтруктураСвПосрДеят.РазСтКСчФУв   = СоставСтроки.СуммаДокументаРазницаУвеличение;
			СтруктураСвПосрДеят.РазНДСКСчФУм  = СоставСтроки.СуммаНДСРазницаУменьшение;
			СтруктураСвПосрДеят.РазНДСКСчФУв  = СоставСтроки.СуммаНДСРазницаУвеличение;
			
			Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН) Тогда
				
				СтруктураСвПосрДеят.СвПрод = ПолучитьСтруктуруРеквизитовКонтрагента(
					ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН, ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП);
				
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("НомерПор", НомерПП);
			// Осуществляем поиск по таблице, в случе если записи нет - добавляем новую строку, 
			// иначе добавляем сведения о комитенте в колонку "СвПосрДеят"
			СтрокиРаздела10 = СтруктураПараметров.ТаблицаРаздел10.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиРаздела10.Количество() = 0 Тогда
				
				СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел10.Добавить();
				
				СоставСтроки.Вставить("НомерПор", НомерПП);
				СоставСтроки.Вставить("ДатаВыст", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
				СоставСтроки.Вставить("ДатаСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомИспрСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
				СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомКСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
				СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомИспрКСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры);
				СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				МассивКодовОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации, ";");
				СоставСтроки.Вставить("КодВидОпер", МассивКодовОпераций);
				
				Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН) Тогда
					СоставСтроки.Вставить("СвПокуп", 
						ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН, ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
				КонецЕсли;
				
				МассивСвПосрДеят = Новый Массив();
				МассивСвПосрДеят.Добавить(СтруктураСвПосрДеят);
				СоставСтроки.Вставить("СвПосрДеят", МассивСвПосрДеят);
				
				ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
				
			Иначе
				
				СтрокаРаздела = СтрокиРаздела10[0];
				МассивСвПосрДеят = СтрокаРаздела.СвПосрДеят;
				МассивСвПосрДеят.Добавить(СтруктураСвПосрДеят);
				
			КонецЕсли;
			
		Иначе
			
			// Раздел 11
			
			СоставСтроки.Вставить("НомерПор", НомерПП);
			СоставСтроки.Вставить("ДатаПолуч", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
			СоставСтроки.Вставить("ДатаСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомИспрСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
			СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомКСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
			СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомИспрКСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры);
			СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			МассивКодовОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации, ";");
			СоставСтроки.Вставить("КодВидОпер", МассивКодовОпераций);
			СоставСтроки.Вставить("КодВидСд", ЗаписьЖурналаУчетаСчетовФактур.КодВидаСделки);
			СоставСтроки.Вставить("ОКВ", ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);
			
			СоставСтроки.Вставить("СтоимТовСчФВс", СоставСтроки.СуммаДокумента);
			СоставСтроки.Вставить("СумНДССчФ",     СоставСтроки.СуммаНДС);
			СоставСтроки.Вставить("РазСтКСчФУм",   СоставСтроки.СуммаДокументаРазницаУменьшение);
			СоставСтроки.Вставить("РазСтКСчФУв",   СоставСтроки.СуммаДокументаРазницаУвеличение);
			СоставСтроки.Вставить("РазНДСКСчФУм",  СоставСтроки.СуммаНДСРазницаУменьшение);
			СоставСтроки.Вставить("РазНДСКСчФУв",  СоставСтроки.СуммаНДСРазницаУвеличение);
			
			Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН) Тогда
				СоставСтроки.Вставить("СвПрод", 
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН, ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
			КонецЕсли;
				
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел11.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНедействующихКонтрагентовВЖурналеУчетаСчетовФактурФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов 	= Параметры.ДанныеДляПроверкиКонтрагентов;
	ЖурналУчетаСчетовФактур 		= ДанныеДляПроверкиКонтрагентов.ЖурналУчетаСчетовФактур;
	
	Если ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС() Тогда
		
		// Проверяем контрагентов на корректность 
		ПроверяемыеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
		ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентов(ПроверяемыеКонтрагенты);
		
		Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
			
			ВыделитьКонтрагентовСОшибками(ПроверяемыеКонтрагенты, ЖурналУчетаСчетовФактур, 2);
			ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;

			ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			
			РезультатФормированияОтчета = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
			КонтрагентыСОшибками = РезультатФормированияОтчета.СформированныйЖурнал;
			
			// Книгу с некоректными контрагентами не формируем, если нет некорректных контрагентов
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		КонтрагентыСОшибками);
			Результат.Вставить("ЖурналУчетаСчетовФактур", 	ЖурналУчетаСчетовФактур);

		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		Новый ТабличныйДокумент);
			Результат.Вставить("ЖурналУчетаСчетовФактур", 	ЖурналУчетаСчетовФактур);
			
		Конецесли;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

//Прочее

Функция КонтрагентРезидентТаможенногоСоюза(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
		Возврат ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ГосударствоЧленТаможенногоСоюза(СтранаМира) Экспорт

	Если ЗначениеЗаполнено(СтранаМира)
		И ТипЗнч(СтранаМира) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
		
		Беларусь = Справочники.КлассификаторСтранМира.НайтиПоКоду("112");
		Казахстан = Справочники.КлассификаторСтранМира.НайтиПоКоду("398");
		
		Возврат (СтранаМира = Беларусь) ИЛИ (СтранаМира = Казахстан);
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли; 

КонецФункции

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	НачалоПримененияФЗ134 = '20140101';
	
	Если Дата < НачалоПримененияФЗ134 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ134()

// { RGS LFedotova 30.06.2017 18:03:47 - вопрос SLI-0007289
Функция ВедетсяУчетНДСПоФЗ56(Дата) Экспорт
	
	НачалоПримененияФЗ56 = '20170701';
	// { RGS LFedotova 29.09.2017 16:32:18 - СФ 981
	ОкончаниеПримененияФЗ56 = '20171001';
	
	//Если Дата < НачалоПримененияФЗ56 Тогда
	Если Дата < НачалоПримененияФЗ56 ИЛИ Дата >= ОкончаниеПримененияФЗ56 Тогда
	// } RGS LFedotova 29.09.2017 16:32:25 - СФ 981
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВедетсяУчетНДСПоФЗ56()
// } RGS LFedotova 30.06.2017 18:04:42 - вопрос SLI-0007289

Функция ПодготовитьЗаписьЖурналаУчетаСчетовФактур(ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписиЖурналаУчетаСчетовФактур	= ТаблицаРеквизиты.Скопировать();
	                                                          
	КолонкиГруппировки = ""
	+ "Период,"											// <Дата> - период движений - дата документа
	+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
	+ "Организация,"									// <СправочникСсылка.Организации> - организация
	+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
	+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
	+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
	+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник(комиссионер,агент)
	+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
	+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
	+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
	+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
	+ "КодВидаОперации,"								// <Строка,10> - код вида операции
	+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
	+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
	+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
	+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
	+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
	+ "НомерИсправления,"								// <Строка,11> - Номер исправления
	+ "ДатаИсправления,"								// <Дата> - Дата исправления
	+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
	+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
	+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
	+ "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
	+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
	+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
	+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
	+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
	+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
	+ "ИндексСтроки";									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
	
	КолонкиСуммирования = ""
	+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
	+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
	+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
	+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссии
	+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
	+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
	+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
	+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
	+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
	+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
	+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
	+ "СуммаНДСРазницаУвеличениеКомиссия";				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
	
	ЗаписиЖурналаУчетаСчетовФактур.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	
	Возврат ЗаписиЖурналаУчетаСчетовФактур;	

КонецФункции

Процедура СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты);
	
	Если Параметры.ЗаписьЖурнала.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиЖурнала = Параметры.ЗаписьЖурнала;
	
	Для каждого ЗаписьЖурнала Из ЗаписиЖурнала Цикл 
		
		ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ЗаписьЖурнала.Период);
		
		Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаписьЖурнала.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			ЗаписьЖурнала.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЗаписьЖурнала.НомерСчетаФактуры, Истина, Ложь);	
		КонецЕсли;
		
		Если ЗаписьЖурнала.Период >= '20150101'
			И (ЗаписьЖурнала.СуммаПоСчетуФактуреКомиссия <> 0
			ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
			ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0) Тогда 
			Если СтрДлина(ЗаписьЖурнала.КодВидаОперации) >= 4 Тогда 
				Если СтрНайти(ЗаписьЖурнала.КодВидаОперации, "04") > 0 Тогда
					ЗаписьЖурнала.КодВидаОперацииКомиссия = "04";
				ИначеЕсли СтрНайти(ЗаписьЖурнала.КодВидаОперации, "05") > 0 Тогда	
					ЗаписьЖурнала.КодВидаОперацииКомиссия  = "05"
				ИначеЕсли СтрНайти(ЗаписьЖурнала.КодВидаОперации, "13") > 0 Тогда	
					ЗаписьЖурнала.КодВидаОперацииКомиссия  = "13"
				КонецЕсли;
			Иначе
				ЗаписьЖурнала.КодВидаОперацииКомиссия  = ЗаписьЖурнала.КодВидаОперации;	
			КонецЕсли;
		КонецЕсли;	
		
		Движение = Движения.ЖурналУчетаСчетовФактур.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьЖурнала);	
		
	КонецЦикла;
	
	Движения.ЖурналУчетаСчетовФактур.Записывать	= Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ЗаписьЖурнала
	
	СписокОбязательныхКолонок = ""
		+ "Период,"											// <Дата> - период движений - дата документа
		+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"									// <СправочникСсылка.Организации> - организация
		+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
		+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
															// 	если сделка осуществляется через обособленное подразделение контрагента
		+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
		+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник
		+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
		+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
		+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
		+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
		+ "КодВидаОперации,"								// <Строка,10> - код вида операции
		+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
		+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
		+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
		+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
		+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
		+ "НомерИсправления,"								// <Строка,11> - Номер исправления
		+ "ДатаИсправления,"								// <Дата> - Дата исправления
		+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
		+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
		+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
		+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
		+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
		+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
		+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
		+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
		+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
		+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
		+ "СуммаНДСРазницаУвеличениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
		+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
		+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
	    + "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
		+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
		+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
		+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
		+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
		+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
		+ "ИндексСтроки";									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
	Параметры.Вставить("ЗаписьЖурнала", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(ТаблицаДвижений, РучнаяОперация = Ложь) Экспорт

	Если ТаблицаДвижений.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений.Скопировать();

	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			ТекущаяСтрока.СтавкаНДС = Неопределено;

		КонецЕсли;
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;

		КонецЕсли;
	КонецЦикла;

	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("Период, Организация, Регистратор, СчетФактура, СтавкаНДС, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод",
		"СуммаБезНДС, НДС");

	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));

	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");

	Для каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл

		НачалоНалоговогоПериодаКорректировки = НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод);
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура, НалоговыйПериод", СтрокаДопЛиста.СчетФактура, НачалоНалоговогоПериодаКорректировки);

		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли;

		Если НЕ (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Квартал,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";

		Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", 		 КонецДня(СтрокаДопЛиста.Период));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтрокаДопЛиста.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", 		 СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?		 (ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));

		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда

			ТаблицаЗаписей = Результат.Выгрузить();

			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");

			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.Период, "ДатаСобытия");

			ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений.Колонки.НДС.Имя = "НДССторно";

			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);

			ТаблицаДвижений.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений.Колонки.НДССторно.Имя = "НДС";
						
			Если НЕ РучнаяОперация Тогда
				
				ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);
				
			КонецЕсли;	

			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Период, 	  "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Регистратор, "Регистратор");

		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.Свернуть("Период, Организация, Регистратор, ВидЦенности, Событие, ДатаСобытия, СчетФактура, СтавкаНДС,
							|Покупатель, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
							"СуммаБезНДС, НДС");

КонецПроцедуры

#КонецОбласти
