////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//    ПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Может принимать значения
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию).
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "",
	Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь) Экспорт
	
	//!!!{отредактировала Петроченко Н. RG-Soft КонтактнаяИнформация - имя общего модуля, заменено на тзКонтактнаяИнформация, 
	//нужно избавиться от старого механизма!}
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов);
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		// Добавим новые реквизиты
		Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		КонецЕсли;
		ДобавленныеРеквизиты = Новый Массив;
		Для Каждого СтрокаРеквизита Из МассивДобавляемыхРеквизитов Цикл
			Если ПустаяСтрока(СтрокаРеквизита.Путь) Тогда
				ДобавленныеРеквизиты.Добавить(СтрокаРеквизита.Имя);
			КонецЕсли;
		КонецЦикла;
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
		Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", Строка(ПоложениеЗаголовкаКИ));
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты", ДобавленныеРеквизиты);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
		Если Не ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
			Форма.Элементы[ИмяЭлементаДляРазмещения].Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	Если РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
		ДанныеИдентификатораСтрокиТабличнойЧасти = "0";
	Иначе
		ДанныеИдентификатораСтрокиТабличнойЧасти = "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)";
	КонецЕсли;
	
	Если РеквизитыОбъекта.Найти("ДействуетС") = Неопределено Тогда
		ДанныеДействуетСТабличнойЧасти = " """" КАК ДействуетС, ";
	Иначе
		ДанныеДействуетСТабличнойЧасти  = " КонтактнаяИнформация.ДействуетС КАК ДействуетС, ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, " + ДанныеДействуетСТабличнойЧасти + "
		|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ " +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		тзКонтактнаяИнформация = Запрос.Выполнить().Выгрузить();       //RG-Soft
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из тзКонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
					Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
					НайденныеСтроки = тзКонтактнаяИнформация.НайтиСтроки(Отбор);
					ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
							НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
						КонецЕсли;
					КонецЦикла;
					ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапросаИсторическаяИнформация = " КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация КАК ЭтоИсторическаяКонтактнаяИнформация,
										|	КонтактнаяИнформация.ДействуетС                  КАК ДействуетС, "
	Иначе
		тзКонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		ТекстЗапросаИсторическаяИнформация = "ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,0 КАК ДействуетС, ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки, " + ТекстЗапросаИсторическаяИнформация + "
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.МногострочноеПоле            КАК МногострочноеПоле,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.Подсказка                    КАК Подсказка,
	|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "      КАК ИдентификаторСтроки,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                    КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО 
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Используется
	|	И ЕстьNULL(ВидыКонтактнойИнформации.Родитель.Используется, Истина)
	|	И (
	|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", тзКонтактнаяИнформация);
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	тзКонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	тзКонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид = Неопределено;
	ПорядковыйНомер = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из тзКонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4",
						"КонтактнаяИнформацияПоле",
						ИмяТабличнойЧасти,
						СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
						ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ));
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
				ПорядковыйНомер = 1;
			Иначе
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			
			Если Индекс = Неопределено Тогда
				
				ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
				
				ОбъектКонтактнойИнформации.ИмяРеквизита = ИмяРеквизита;
				Если Не ОтложеннаяИнициализация Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию.
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(УправлениеКонтактнойИнформациейСлужебный.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ВернутьСтр("ru = 'Некорректный формат контактной информации.'"), ,
				ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", Строка(ПоложениеЗаголовкаКИ));
	Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
	Форма.ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = тзКонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создаем группы для контактной информации.
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	СтатусКонтекстногоМеню = 0;
	ПредыдущийЭлемент = Неопределено;
	
	Для Каждого СтрокаКИ Из тзКонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(СтрокаКИ.Вид);
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2);
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, Ложь, Истина);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, СтатическийЭлемент);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация);
		
		Если СтатическийЭлемент Тогда
			
			СозданныеЭлементы.Удалить(ИндексЭлемента);
			
		Иначе
			
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
					тзКонтактнаяИнформация.Получить(КонтактнаяИнформация.Индекс(СтрокаКИ) + 1));
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОтложеннаяИнициализация И Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = ВернутьСтр("ru = 'Добавить дополнительное поле контактной информации'");
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Заголовок = ВернутьСтр("ru = 'Добавить'");
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	Параметры = Форма.ПараметрыКонтактнойИнформации;
	
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = Параметры.ПоложениеЗаголовка;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УдалитьКомандыИЭлементыФормы(Форма);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		СтатическиеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.ИсключаемыеВиды);
		ИменаТабличныхЧастейПоВидамКИ = Неопределено;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
					ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;
				
				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
				
			Иначе
				
				Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);
				
				Если Индекс = Неопределено Тогда // Реквизит создается динамически
					Если Не ОтложеннаяИнициализация Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(Индекс);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Параметры.ИсключаемыеВиды, ОтложеннаяИнициализация);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПослеЗаписиНаСервере(Форма, Объект) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	
	// Только для контактной информации в составе табличной части
	Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
	СтрокиТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор);
	ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(СтрокиТабличнойЧасти, ИмяОбъекта);
	
	Для Каждого СтрокаТаблицы Из СтрокиТабличнойЧасти Цикл
			ВидИнформации = СтрокаТаблицы.Вид;
			ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			ТабличнаяЧастьФормы = Форма.Объект[ИменаТабличныхЧастейПоВидамКИ[ВидИнформации]];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Вид", ВидИнформации);
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаКИ = НайденныеСтроки[0];
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = СтрокаКИ.Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = СтрокаКИ.ЗначенияПолей;
					
				КонецЕсли;
			КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Представление = Форма[ИмяРеквизита];
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,, ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.ЗначенияПолей,
					ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
				Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
				Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
					Если ПустаяСтрока(СтрокаТаблицы.Представление)
						ИЛИ СтрокаТаблицы.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
							Продолжить;
					КонецЕсли;
				КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				
				ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				
			КонецЦикла;

		Иначе
			ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации,, ДействуетС);
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект    - Произвольный - Объект-владелец контактной информации.
//    Результат - Произвольный - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
// Возвращаемое значение:
//    Неопределено
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ЭтоДобавлениеКомментария);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
	ИначеЕсли Результат.Свойство("ПоменятьМестамиЭлементы") Тогда
		ЗначениеПервогоЭлемента = Форма[Результат.ПервыйЭлемент];
		Форма[Результат.ПервыйЭлемент] = Форма[Результат.ВторойЭлемент];
		Форма[Результат.ВторойЭлемент] = ЗначениеПервогоЭлемента ;
		
		// перемещение комментариев если они есть
		Отбор = Новый Структура("ИмяРеквизита", Результат.ПервыйЭлемент);
		ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		НайденнаяСтрокаПервыйЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Отбор = Новый Структура("ИмяРеквизита", Результат.ВторойЭлемент);
		НайденнаяСтрокаВторойЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Если ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий)
			И ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий) Тогда
				КомментарийПервыйЭлемент = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				НайденнаяСтрокаПервыйЭлемент.Комментарий = НайденнаяСтрокаВторойЭлемент.Комментарий;
				НайденнаяСтрокаВторойЭлемент.Комментарий = КомментарийПервыйЭлемент;
				Форма.Элементы["Комментарий" + Результат.ПервыйЭлемент].Заголовок = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				Форма.Элементы["Комментарий" + Результат.ВторойЭлемент].Заголовок = НайденнаяСтрокаВторойЭлемент.Комментарий;
			
		ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий)
			ИЛИ ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий) Тогда
				КомментарийПервыйЭлемент = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				НайденнаяСтрокаПервыйЭлемент.Комментарий = НайденнаяСтрокаВторойЭлемент.Комментарий;
				НайденнаяСтрокаВторойЭлемент.Комментарий = КомментарийПервыйЭлемент;
				
				ИзменитьКомментарий(Форма, Результат.ПервыйЭлемент, ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий));
				ИзменитьКомментарий(Форма, Результат.ВторойЭлемент, ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Обработчик подписки события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполненияКонтактнойИнформации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик подписки события "ПередЗаписью" для обновления контактной информации для списков.
//
Процедура ОбработкаОбновленияКонтактнойИнформации(Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформациюДляСписков(Объект);

КонецПроцедуры

// Обработчик подписки события "ОбработкаЗаполнения" для документов.
//
Процедура ОбработкаЗаполненияКонтактнойИнформацииДокумента(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Выполняет отложенную инициализацию реквизитов и элементов контактной информации
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//
Процедура ВыполнитьОтложеннуюИнициализацию(Форма, Объект) Экспорт
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(, "Вид, Представление, ЗначенияПолей, Комментарий");
	Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	ИмяЭлементаДляРазмещения = Форма.ПараметрыКонтактнойИнформации.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = Форма.ПараметрыКонтактнойИнформации.ПоложениеЗаголовка;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Форма.ПараметрыКонтактнойИнформации.ИсключаемыеВиды);
	
	Для Каждого ВидКонтактнойИнформации Из Форма.ПараметрыКонтактнойИнформации.ИсключаемыеВиды Цикл
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
		МассивСтрок = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СохраненноеЗначение = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор)[0];
			ТекущееЗначение = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(ТекущееЗначение, СохраненноеЗначение);
			Форма[ТекущееЗначение.ИмяРеквизита] = СохраненноеЗначение.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ПустаяДекорацияКонтактнаяИнформация") <> Неопределено
		И Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Форма.Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами.

// Проверяет адрес на соответствие требованиям к адресной информации.
//
// Параметры:
//   АдресВXML					 - Строка -  строка XML контактной информации.
//   ПараметрыПроверки	 - Структура, СправочникСсылка.ВидыКонтактнойИнформации - флаги проверки адреса.
//          АдресТолькоРоссийский - Булево - Адрес должен быть только Российским. По умолчанию ИСТИНА.
//          ФорматАдреса - Строка - По какому классифткатору проверять "КЛАДР" или "ФИАС". По умолчанию "КЛАДР".
// Возвращаемое значение:
//   Структура - содержит структуру с полями:
//        * Результат - Строка - результат проверки: "Корректный", "НеПроверен", "СодержитОшибки".
//        * СписокОшибок - СписокЗначений - Информация о ошибках.
Функция ПроверитьАдрес(Знач АдресВXML, ПараметрыПроверки = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдресВXML(АдресВXML, ПараметрыПроверки);
КонецФункции

// Преобразует все входящие форматы контактной информации в XML.
//
// Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, СписокЗначений - описание полей контактной информации.
//    Представление - Строка  - представления. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации - 
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
// Возвращаемое значение:
//     Строка  - XML данные контактной информации.
//
Функция КонтактнаяИнформацияВXML(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйВид = Неопределено) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.ПривестиКонтактнуюИнформациюXML(Новый Структура(
		"ЗначенияПолей, Представление, ВидКонтактнойИнформации",
		ЗначенияПолей, Представление, ОжидаемыйВид));
	Возврат Результат.ДанныеXML;
	
КонецФункции

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML.
//
// Параметры:
//    XMLСтрока - Строка - контактная информацию.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ТипыКонтактнойИнформации - соответствующий тип.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ТипКонтактнойИнформации(XMLСтрока);
КонецФункции

// Разбирает представление контактной информации и возвращает строку XML.
// Для почтовых адресов корректный разбор не гарантируется.
//
//  Параметры:
//      Представление - Строка  - строковое представление контактной информации, выводимое пользователю.
//      ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//
// Возвращаемое значение:
//      Строка - контактная информация в XML.
//
Функция КонтактнаяИнформацияXMLПоПредставлению(Представление, ОжидаемыйВид) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(
		УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ОжидаемыйВид));
		
КонецФункции

// Получает представление контактной информации (адреса, телефона, электронной почты и т.п.).
//
// Параметры:
//    XMLСтрока               - ОбъектXDTO, Строка - объект или XML контактной информации.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//    Строка - представление контактной информации.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(XMLСтрока, ВидКонтактнойИнформации);
	
КонецФункции

// Получает комментарий для контактной информации.
//
// Параметры:
//   XMLСтрока - ОбъектXDTO, Строка - объект или XML контактной информации.
//
// Возвращаемое значение:
//   Строка
//
Функция КомментарийКонтактнойИнформации(XMLСтрока) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат "";
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Возврат ОбъектXDTO.Комментарий;
	
КонецФункции

// Получает комментарий для контактной информации.
//
// Параметры:
//   XMLСтрока   - ОбъектXDTO, Строка - объект или XML контактной информации. 
//   Комментарий - Строка - новое значение комментария.
//
//
Процедура УстановитьКомментарийКонтактнойИнформации(XMLСтрока, Знач Комментарий) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	ОбъектXDTO.Комментарий = Комментарий;
	Если ЭтоСтрока Тогда
		XMLСтрока = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает информацию о стране адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Структура - описание страны адреса. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - соответствующий элемент страны мира.
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//
// Если передана пустая строка, то возвращается пустая структура.
// Если страна не найдена в справочнике, то но найдена в классфикаторе, то поле "Ссылка" результата не заполнено.
// Если страна не найдена ни в адресе, ни в классификаторе, то будет заполнено только поле "Наименование".
//
Функция СтранаАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Результат = Новый Структура("Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3");
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Читаем наименование страны
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение ВернутьСтр("ru = 'Невозможно определить страну, ожидается адрес.'");
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Адрес.Страна);
	ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, Результат.Наименование);
	Возврат ?(ДанныеСтраны = Неопределено, Результат, ДанныеСтраны);
КонецФункции

// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция РегионАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение ВернутьСтр("ru = 'Невозможно определить субъекта РФ, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено, "", СокрЛП(АдресРФ.СубъектРФ));
	
КонецФункции

// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция ГородАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение ВернутьСтр("ru = 'Невозможно определить город, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено, "", СокрЛП(АдресРФ.Город));
	
КонецФункции

// Возвращает домен сетевого адреса для веб-ссылки или адреса электронной почты.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - требуемое значение.
//
Функция ДоменАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = СтрНайти(ДоменАдреса, "://");
			Если Позиция > 0 Тогда
				ДоменАдреса = Сред(ДоменАдреса, Позиция + 3);
			КонецЕсли;
			Позиция = СтрНайти(ДоменАдреса, "/");
			Возврат ?(Позиция = 0, ДоменАдреса, Лев(ДоменАдреса, Позиция - 1));
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = СтрНайти(ДоменАдреса, "@");
			Возврат ?(Позиция = 0, ДоменАдреса, Сред(ДоменАдреса, Позиция + 1));
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение ВернутьСтр("ru = 'Невозможно определить домен, ожидается электронная почта или веб-ссылка.'");	
КонецФункции

// Возвращает строку с номером телефона без кода и дополнительного номера.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - требуемое значение.
//
Функция НомерТелефонаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение ВернутьСтр("ru = 'Невозможно определить номер, ожидается телефона или факс.'");
КонецФункции

// Сравнивает два экземпляра контактной информации.
//
// Параметры:
//    Данные1 - ОбъектXTDO - объект с контактной информацией.
//            - Строка     - контактная информация в формате XML.
//            - Структура  - описание контактной информацию. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить  комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                                             Используется в случае, если не удалось вычислить  тип из ЗначенияПолей.
//    Данные2 - ОбъектXTDO, Строка, Структура - аналогично Данные1.
//
// Возвращаемое значение:
//     ТаблицаЗначений: - таблица отличающихся полей со следующими колонками:
//        * Путь      - Строка - XPath, идентифицирующий различающееся значение. Значение "ТипКонтактнойИнформации"
//                               означает, что переданные экземпляры контактной информации различаются типом.
//        * Описание  - Строка - описание отличающегося реквизита в терминах предметной области.
//        * Значение1 - Строка - значение, соответствующая объекту, переданному в параметре Данные1.
//        * Значение2 - Строка - значение, соответствующая объекту, переданному в параметре Данные2.
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.РазличияКонтактнойИнформации(Данные1, Данные2);
КонецФункции

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//     ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//
// Возвращаемое значение:
//     Строка - строковое представление значения.
//
Функция КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов,, ВидКонтактнойИнформации, Дата);
	
	Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
		Возврат КонтактнаяИнформацияОбъекта[0].Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Предназначена для создания временной таблицы с контактной информацией нескольких объектов.
//
// Параметры:
//    МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - для формирования.
//    МассивОбъектов - Массив - владельцы контактной информации, все элементы должны быть одного типа.
//    ТипыКИ         - Массив - необязательный, используется если не задан все типы.
//    ВидыКИ         - Массив -  необязательный, используется если не задан все виды.
//
// В менеджере создается временная таблица ВТКонтактнаяИнформация с полями:
//    * Объект        - Ссылка - владелец КИ.
//    * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//    * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//    * ЗначенияПолей - Строка - данные значений полей.
//    * Представление - Строка - представление КИ.
//
Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено, Дата = Неопределено) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
	Иначе
		ВызватьИсключение ВернутьСтр("ru = 'Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
		
		УсловияОтбора = ?(ВидыКИ = Неопределено, "", " КонтактнаяИнформация.Вид В (&ВидыКИ)");
		Если ПустаяСтрока(УсловияОтбора) Тогда
			УсловиеИ = "";
		Иначе
			УсловиеИ = " И ";
		КонецЕсли;
		УсловияОтбора = УсловияОтбора + ?(ТипыКИ = Неопределено, "", УсловиеИ + " КонтактнаяИнформация.Тип В (&ТипыКИ)");
		Если НЕ ПустаяСтрока(УсловияОтбора) Тогда
			УсловияОтбора = " ГДЕ " + УсловияОтбора;
		КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.Ссылка КАК Объект,
				|	КонтактнаяИнформация.Вид КАК Вид,
				|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
				|ПОМЕСТИТЬ СрезКонтактнойИнформации
				|ИЗ
				|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов)
				|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
				|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	КонтактнаяИнформация.Вид, КонтактнаяИнформация.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.Ссылка КАК Объект,
				|	КонтактнаяИнформация.Вид КАК Вид,
				|	КонтактнаяИнформация.Тип КАК Тип,
				|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
				|	КонтактнаяИнформация.Представление КАК Представление,
				|	КонтактнаяИнформация.ЗначенияПолей
				|ПОМЕСТИТЬ ВТКонтактнаяИнформация
				|ИЗ
				|	СрезКонтактнойИнформации КАК СрезКонтактнойИнформации
				|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
				|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
				|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка " + УсловияОтбора);
				
				Запрос.УстановитьПараметр("ДействуетС", Дата);
	Иначе
		Дата = "";
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей, " + Дата + "
			|	КонтактнаяИнформация.Представление КАК Представление
			|ПОМЕСТИТЬ ВТКонтактнаяИнформация
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов)
			|	" + ?(ТипыКИ = Неопределено, "", "И КонтактнаяИнформация.Тип В (&ТипыКИ)") + "
			|	" + ?(ВидыКИ = Неопределено, "", "И КонтактнаяИнформация.Вид В (&ВидыКИ)") + "
			|");
			
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	Запрос.УстановитьПараметр("ВидыКИ", ВидыКИ);
	
	Запрос.Выполнить();
КонецПроцедуры

// Предназначена для получения контактной информации для нескольких объектов.
//
// Параметры:
//    МассивОбъектов - Массив - владельцы контактной информации, все элементы должны быть одного типа.
//    ТипыКИ         - Массив - необязательный, используется если не задан все типы.
//    ВидыКИ         - Массив -  необязательный, используется если не задан все виды.
//
// Возвращаемое значение
//    Таблица значений - результат. Колонки:
//        * Объект        - Ссылка - владелец КИ.
//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//        * ЗначенияПолей - Строка - данные значений полей.
//        * Представление - Строка - представление КИ.
//
Функция КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
	Иначе
		ВызватьИсключение ВернутьСтр("ru = 'Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ, ВидыКИ, Дата);
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
		ДействуетС = " КонтактнаяИнформация.ДействуетС КАК ДействуетС, ";
	Иначе
		ДействуетС = "";
	КонецЕсли;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей, " + ДействуетС + "
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет контактную информацию в объектах.
//
// Параметры:
//    ДанныеЗаполнения - ТаблицаЗначений - описывает объекты для для заполнения. Содержит колонки:
//        * Приемник    - Произвольный - ссылка или объект, в котором нужно заполнить КИ.
//        * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации  - вид контактной информации, заполняемый в
//                                                                     приемнике.
//        * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//        * КлючСтроки  - Структура - фильтр для поиска строки в табличной части, где Ключ - имя колонки в табличной
//                                    части, Значение - значение отбора.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения, Дата = Неопределено) Экспорт
	
	ПредыдущийПриемник = Неопределено;
	ДанныеЗаполнения.Сортировать("Приемник, ВидКИ");
	
	Для Каждого СтрокаЗаполнения Из ДанныеЗаполнения Цикл
		
		Приемник = СтрокаЗаполнения.Приемник;
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Приемник)) Тогда
			Приемник = Приемник.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПредыдущийПриемник <> Неопределено И ПредыдущийПриемник <> Приемник Тогда
			Если ПредыдущийПриемник.Ссылка = Приемник.Ссылка Тогда
				Приемник = ПредыдущийПриемник;
			Иначе
				ПредыдущийПриемник.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ВидКИ = СтрокаЗаполнения.ВидКИ;
		ИмяОбъектаПриемника = Приемник.Метаданные().Имя;
		ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъектаПриемника);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, Дата);
		Иначе
			Если ТипЗнч(СтрокаЗаполнения.КлючСтроки) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗаполнения.КлючСтроки.Свойство("НомерСтроки") Тогда
				КоличествоСтрокТабличнойЧасти = Приемник[ИмяТабличнойЧасти].Количество();
				НомерСтроки = СтрокаЗаполнения.КлючСтроки.НомерСтроки;
				Если НомерСтроки > 0 И НомерСтроки <= КоличествоСтрокТабличнойЧасти Тогда
					СтрокаТабличнойЧасти = Приемник[ИмяТабличнойЧасти][НомерСтроки - 1];
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти, Дата);
				КонецЕсли;
			Иначе
				СтрокиТабличнойЧасти = Приемник[ИмяТабличнойЧасти].НайтиСтроки(СтрокаЗаполнения.КлючСтроки);
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти, Дата);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийПриемник = Приемник;
		
	КонецЦикла;
	
	Если ПредыдущийПриемник <> Неопределено Тогда
		ПредыдущийПриемник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию объекта.
//
// Параметры:
//    Приемник    - Произвольный - ссылка или объект, в котором нужно заполнить КИ.
//    ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, заполняемый в приемнике.
//    СтруктураКИ - Структура - заполненная структура контактной информации.
//    КлючСтроки  - Структура  - отбор для поиска строки в табличной части, Ключ - Имя колонки в табличной части,
//                               значение - значение отбора.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъекта(Приемник, ВидКИ, СтруктураКИ, КлючСтроки = Неопределено, Дата = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("Приемник");
	ДанныеЗаполнения.Колонки.Добавить("ВидКИ");
	ДанныеЗаполнения.Колонки.Добавить("СтруктураКИ");
	ДанныеЗаполнения.Колонки.Добавить("КлючСтроки");
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	СтрокаЗаполнения.Приемник = Приемник;
	СтрокаЗаполнения.ВидКИ = ВидКИ;
	СтрокаЗаполнения.СтруктураКИ = СтруктураКИ;
	СтрокаЗаполнения.КлючСтроки = КлючСтроки;
	
	ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения, Дата);
	
КонецПроцедуры

// Проверяет контактную информацию
//
// Параметры:
//  Представление - Строка - Строка  - представления. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//  ЗначенияПолей - Строка, Структура, Соответствие, СписокЗначений - описание полей контактной информации.
//  ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//  ТипИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации
//  ИмяРеквизита - Строка - Имя реквизита на форме
//  Комментарий - Строка - Комментарий
//  ПутьКРеквизиту - Строка - Путь к реквизиту
// 
// Возвращаемое значение:
//  Число - уровень ошибок, 0 - ошибки отсутствуют.
//
Функция ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "") Экспорт
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР
//
// Параметры:
//   Адреса                  - Массив - XDTO объекты или строки XML контактной информации
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Массив - содержит массив структур, содержимое структуры см. описание функции СведенияОбАдресе
//
Функция СведенияОбАдресах(Адреса, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры);
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР
//
// Параметры:
//   Адрес                  - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * КодРегиона       - Строка - код региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа.
//        * ОкругСокращение  - Строка - сокращение округа.
//        * РегионСокращение - Строка - сокращение региона.
//        * Район            - Строка - текстовое представление района.
//        * РайонСокращение  - Строка - сокращение района.
//        * Город            - Строка - текстовое представление города
//        * ГородСокращение  - Строка - сокращение города.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории.
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории.
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории.
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории.
//        * Здание - Структура - структура с информацией о здании адреса
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - код КЛАДР региона.
//           ** Район           - Строка    - код КЛАДР район.
//           ** Город           - Строка    - код КЛАДР города.
//           ** НаселенныйПункт - Строка    - код КЛАДР населенного пункта.
//           ** Улица           - Строка    - код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обратная совместимость.

//  Возвращает значения всей контактной информации определенного вида для объекта-владельца.
//
//  Параметры:
//      Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                              контрагент, партнер и т.д.).
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//
//  Возвращаемое значение:
//      Таблица значений -информация. Колонками: 
//          * НомерСтроки     - Число     - номер строки дополнительной табличной части объекта-владельца.
//          * Представление   - Строка    - представление КИ, введенное пользователем.
//          * СтруктураПолей  - Структура - пары ключ-значение данных информации.
//
Функция ТаблицаКонтактнойИнформацииОбъекта(Ссылка, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Запрос = Новый Запрос;
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
		ДействуетС = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
			|ПОМЕСТИТЬ СрезКонтактнойИнформации
			|ИЗ
			|	%1.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
			|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			|	И КонтактнаяИнформация.Вид = &Вид
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	СрезКонтактнойИнформации КАК СрезКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
			|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
			|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка 
			|УПОРЯДОЧИТЬ ПО 
			| КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти", МетаданныеОбъекта.ПолноеИмя());
		
			Запрос.УстановитьПараметр("ДействуетС", ДействуетС);
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ 
		|	КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
		|	КонтактнаяИнформация.Представление                     КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей                     КАК ЗначенияПолей
		|ИЗ
		|	%1.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид
		|УПОРЯДОЧИТЬ ПО 
		| КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти", МетаданныеОбъекта.ПолноеИмя());
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("СтруктураПолей");
	Результат.Индексы.Добавить("НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка, "НомерСтроки, Представление");
		СтрокаДанных.СтруктураПолей = ПредыдущаяСтруктураКонтактнойИнформацииXML(
			Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
	КонецЦикла;
	
	Возврат  Результат;
КонецФункции

// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - XML контактной информации.
//    СокращенныйСоставПолей - Булево - если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка  - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СокращенныйСоставПолей);
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСписокПолейВСтроку(
			СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - XML контактной информации или пары ключ-значение.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры контактной информации. 
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - текстовое представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
			ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации <> Неопределено Тогда
		// Генерируем по виду
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			ВидКонтактнойИнформации.Тип);
		
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями.
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

// Определяет данные страны по справочнику стран или классификатору ОКСМ.
//
// Параметры:
//    КодСтраны    - Строка, Число - код ОКСМ страны. Если не указано, то поиск по коду не производится.
//    Наименование - Строка - Наименование страны. Если не указано, то поиск по наименованию не производится.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - соответствующий элемент страны мира.
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена ни в адресе, ни в классификаторе.
//
Функция ДанныеСтраныМира(Знач КодСтраны = Неопределено, Знач Наименование = Неопределено) Экспорт
	Возврат Справочники.СтраныМира.ДанныеСтраныМира(КодСтраны, Наименование);
КонецФункции

// Определяет данные страны по классификатору ОКСМ.
//
// Параметры:
// Параметры:
//    Код - Строка, Число - код ОКСМ страны.
//    ТипКода - Строка - Варианты: КодСтраны (по умолчанию), Альфа2, Альфа3
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена в классификаторе.
//
Функция ДанныеКлассификатораСтранМираПоКоду(Знач Код, Знач ТипКода = "КодСтраны") Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоКоду(Код, ТипКода);
КонецФункции

// Определяет данные страны по классификатору ОКСМ.
//
// Параметры:
//    Наименование - Строка - наименование страны.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена в классификаторе.
//
Функция ДанныеКлассификатораСтранМираПоНаименованию(Знач Наименование) Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоНаименованию(Наименование);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Получить значения определенного типа контактной информации у объекта.
//
// Параметры
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//    ТаблицаЗначений - колонки 
//        * Значение - строка - строковое представление значения
//        * Вид      - строка - представление вида контактной информации
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформацияОбъекта", КонтактнаяИнформацияОбъекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление,
	|	КонтактнаяИнформацияОбъекта.Вид
	|ПОМЕСТИТЬ ВТКонтактнаяИнформацияОбъекта
	|ИЗ
	|	&КонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияОбъекта.Вид) КАК Вид
	|ИЗ
	|	ВТКонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Устанавливает свойства вида контактной информации.
//
// Параметры:
//    Параметры - Структура - содержит структуру с полями:
//        * Вид - СправочникСсылка.ВидыКонтактнойИнформации, Строка   - Ссылка на вид контактной информации или
//                                                                      идентификатор предопределенного элемента.
//        * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации или его
//                                                                      идентификатор.
//        * Подсказка - Строка                                        - Подсказка к виду контактной информации.
//        * Порядок - Число, Неопределено                             - Порядок вида контактной информации, положение в
//                                                                      списке относительно других элементов:
//                                                                          Неопределено - не переназначать;
//                                                                          0            - назначить автоматически;
//                                                                          Число > 0    - назначить указанный порядок.
//        * МожноИзменятьСпособРедактирования - Булево                - Истина, если есть возможность изменять способ
//                                                                      редактирования только в диалоге, Ложь - иначе.
//        * РедактированиеТолькоВДиалоге - Булево                     - Истина, если редактировать только в диалоге,
//                                                                      Ложь - иначе.
//        * ОбязательноеЗаполнение                                    - Булево - Истина, если требуется обязательное
//                                                                      заполнение поля, Ложь - иначе.
//        * РазрешитьВводНесколькихЗначений - Булево                  - Признак возможности использования дополнительных
//                                                                      полей ввода для данного вида.
//        * ЗапретитьРедактированиеПользователем - Булево             - Признак недоступности редактирования
//                                                                      пользователем свойства вида контактной
//                                                                      информации.
//        * Используется - Булево -                                     Признак использования вида контактной информации
//                                                                      Значение по умолчанию Истина.
//        * НастройкиПроверки - Структура, Неопределено               - Настройки проверки вида контактной информации.
//            Для типа Адрес - Структура, содержащая поля:
//                * АдресТолькоРоссийский        - Булево - Истина, если возможен ввод только российских адресов.
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес (только если АдресТолькоРоссийский = Истина).
//                * ПроверятьПоФИАС              - Булево - Истина, если требуется проверка адреса по ФИАС, иначе
//                                                          проверка по КЛАДР (только если АдресТолькоРоссийский = Истина
//                                                          и ПроверятьКорректность = Истина).
//                * ЗапрещатьВводНекорректного   - Булево - Устарел. Все переданные значения игнорируются.
//                                                          Для запрета пользователю записывать некорректные адреса,
//                                                          следует использовать параметр ПроверятьКорректность.
//                * СкрыватьНеактуальныеАдреса   - Булево - Истина, если не требуется показывать неактуальные адреса при
//                                                          вводе (только если АдресТолькоРоссийский = Истина).
//                * ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в
//                                                          представление адреса.
//            Для типа АдресЭлектроннойПочты - Структура, содержащая поля:
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес электронной почты.
//                * ЗапрещатьВводНекорректного   - Булево - Устарел. Все переданные значения игнорируются.
//                                                          Для запрета пользователю записывать некорректные адреса,
//                                                          следует использовать параметр ПроверятьКорректность.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено.
//
// Примечание:
//
//    При использовании параметра Порядок следует внимательно следить за уникальностью назначаемого значения. Если
//    после выполнения обновления значения порядка окажутся неуникальными в пределах группы, то настройка порядка
//    пользователем будет невозможна.
//    В общем случае рекомендуется не использовать этот параметр (порядок не изменится), либо заполнять его значением
//    0 (порядок будет назначен автоматически в подсистеме "Настройка порядка элементов" при выполнении процедуры).
//    Для размещения видов КИ в определенной последовательности относительно друг друга без явного размещения в начале
//    списка достаточно вызывать данную процедуру в нужной последовательности для каждого вида КИ с указанием
//    порядка 0. Если добавляется предопределенный вид КИ к уже существующим в ИБ, не рекомендуется назначать порядок
//    в явном виде.
// 
Процедура УстановитьСвойстваВидаКонтактнойИнформации(Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Вид) = Тип("Строка") Тогда
		Объект = Справочники.ВидыКонтактнойИнформации[Параметры.Вид].ПолучитьОбъект();
	Иначе
		Объект = Параметры.Вид.ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Тип                                  = Параметры.Тип;
	Объект.Подсказка                            = Параметры.Подсказка;
	Объект.МожноИзменятьСпособРедактирования    = Параметры.МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге         = Параметры.РедактированиеТолькоВДиалоге;
	Объект.ОбязательноеЗаполнение               = Параметры.ОбязательноеЗаполнение;
	Объект.РазрешитьВводНесколькихЗначений      = Параметры.РазрешитьВводНесколькихЗначений;
	Объект.ЗапретитьРедактированиеПользователем = Параметры.ЗапретитьРедактированиеПользователем;
	Объект.Используется                         = Параметры.Используется;
	Объект.ХранитьИсториюИзменений              = Параметры.ХранитьИсториюИзменений;
	
	НастройкиПроверки = Параметры.НастройкиПроверки;
	ПроверятьНастройки = ТипЗнч(НастройкиПроверки) = Тип("Структура");
	
	Если ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
	Иначе
		УстановитьЗначенияРеквизитовПроверки(Объект);
	КонецЕсли;
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.ПроверитьПараметрыВидаКонтактнойИнформации(Объект);
	
	Если Результат.ЕстьОшибки Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	
	Если Параметры.Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Параметры.Порядок;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Возвращает структуру параметров вида контактной информации для определенного типа
// 
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации, Строка - тип контактной информации для
//                                                                заполнения свойства НастройкиПроверки.
// 
// Возвращаемое значение:
//    Структура - содержит структуру с полями:
//        * Вид - СправочникСсылка.ВидыКонтактнойИнформации, Строка   - Ссылка на вид контактной информации или
//                                                                      идентификатор предопределенного элемента.
//        * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации или его
//                                                                      идентификатор.
//        * Подсказка - Строка                                        - Подсказка к виду контактной информации.
//        * Порядок - Число, Неопределено                             - Порядок вида контактной информации, положение в
//                                                                      списке относительно других элементов:
//                                                                          Неопределено - не переназначать;
//                                                                          0            - назначить автоматически;
//                                                                          Число > 0    - назначить указанный порядок.
//        * МожноИзменятьСпособРедактирования - Булево                - Истина, если есть возможность изменять способ
//                                                                      редактирования только в диалоге, Ложь - иначе.
//        * РедактированиеТолькоВДиалоге - Булево                     - Истина, если редактировать только в диалоге,
//                                                                      Ложь - иначе.
//        * ОбязательноеЗаполнение                                    - Булево - Истина, если требуется обязательное
//                                                                      заполнение поля, Ложь - иначе.
//        * РазрешитьВводНесколькихЗначений - Булево                  - Признак возможности использования дополнительных
//                                                                      полей ввода для данного вида.
//        * ЗапретитьРедактированиеПользователем - Булево             - Признак недоступности редактирования
//                                                                      пользователем свойства вида контактной
//                                                                      информации.
//        * Используется - Булево -                                     Признак использования вида контактной информации
//                                                                      Значение по умолчанию Истина.
//        * НастройкиПроверки - Структура, Неопределено               - Настройки проверки вида контактной информации.
//            Для типа Адрес - Структура, содержащая поля:
//                * АдресТолькоРоссийский        - Булево - Истина, если возможен ввод только российских адресов.
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес (только если АдресТолькоРоссийский = Истина).
//                * ПроверятьПоФИАС              - Булево - Истина, если требуется проверка адреса по ФИАС, иначе
//                                                          проверка по КЛАДР (только если АдресТолькоРоссийский = Истина
//                                                          и ПроверятьКорректность = Истина).
//                * СкрыватьНеактуальныеАдреса   - Булево - Истина, если не требуется показывать неактуальные адреса при
//                                                          вводе (только если АдресТолькоРоссийский = Истина).
//                * ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в
//                                                          представление адреса.
//            Для типа АдресЭлектроннойПочты - Структура, содержащая поля:
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес электронной почты.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено.
//
Функция ПараметрыВидаКонтактнойИнформации(Тип = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации[Тип];
	Иначе
		УстанавливаемыйТип = Тип;
	КонецЕсли;
	
	ПараметрыВида = Новый Структура;
	ПараметрыВида.Вставить("Вид");
	ПараметрыВида.Вставить("Тип", УстанавливаемыйТип);
	ПараметрыВида.Вставить("Подсказка");
	ПараметрыВида.Вставить("Порядок");
	ПараметрыВида.Вставить("МожноИзменятьСпособРедактирования", Ложь);
	ПараметрыВида.Вставить("РедактированиеТолькоВДиалоге", Ложь);
	ПараметрыВида.Вставить("ОбязательноеЗаполнение", Ложь);
	ПараметрыВида.Вставить("РазрешитьВводНесколькихЗначений", Ложь);
	ПараметрыВида.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	ПараметрыВида.Вставить("ХранитьИсториюИзменений", Ложь);
	ПараметрыВида.Вставить("Используется", Истина);
	
	Если УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("АдресТолькоРоссийский", Ложь);
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
		НастройкиПроверки.Вставить("ПроверятьПоФИАС", Ложь);
		НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
		НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", Ложь);
	ИначеЕсли УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
	ИначеЕсли УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", Истина);
	Иначе
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	ПараметрыВида.Вставить("НастройкиПроверки", НастройкиПроверки);
	
	Возврат ПараметрыВида;
	
КонецФункции

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//    Объект - ЛюбаяСсылка - номер телефона или факса.
//    ЗначенияПолей - Строка - контактная информация в формате XML.
//    ВидИнформации - Справочник.ВидыКонтактнойИнформация - ссылка на вид контактной информации.
//    ТипИнформации - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//    ИдентификаторСтроки - Число - идентификатор строки табличной части.
//    Дата - Дата - Дата с которой действует запись контактной информации,
//                  используется при хранение истории изменения контактной информации.
Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0, Дата = Неопределено) Экспорт
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ВидИнформации);
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	Если ЗначениеЗаполнено(Дата) Тогда
		НоваяСтрока.ДействуетС    = Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет представление в поле агрегате ВидДляСписка для вывода в контактной информации
//  в динамических списках и отчетах
//
// Параметры:
//  Объект - ОбъектСсылка - ссылка на объект конфигурации, содержащий табличную часть контактная информация
//
Процедура ОбновитьКонтактнуюИнформациюДляСписков(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		УправлениеКонтактнойИнформациейСлужебный.ОбновитьКонтактнуюИнформациюДляСписков();
	Иначе
		Если Объект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
			УправлениеКонтактнойИнформациейСлужебный.ОбновитьКонтактнуюИнформациюДляСписковДляОбъекта(Объект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет отложенное обновление контактной информации для списков
//
// Параметры:
//  Параметры	 - Структура - Параметры обработчика обновления
//  РазмерПорции - Число -  Необязательный параметр размер порции обрабатываемых данных за один запуск.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписковОтложенно(Параметры, РазмерПорции = 1000) Экспорт
	
	ОбъектыСВидомДляСписка = Неопределено;
	Параметры.Свойство("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		// расчет количества
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ОбъектыСВидомДляСписка = Новый Массив;
		ТекстЗапроса = "";
		Разделитель = "";
		
		ШаблонЗапроса = "ВЫБРАТЬ
					| КОЛИЧЕСТВО(ТаблицаСКонтактнойИнформацией.Ссылка) КАК Количество,
					| ТИПЗНАЧЕНИЯ(ТаблицаСКонтактнойИнформацией.Ссылка) КАК Ссылка
					|ИЗ
					| %1.%2 КАК ТаблицаСКонтактнойИнформацией
					| СГРУППИРОВАТЬ ПО
					|	ТИПЗНАЧЕНИЯ(ТаблицаСКонтактнойИнформацией.Ссылка)";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
				
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					КонтактнаяИнформация = Метаданные.Справочники[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
					Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
						ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Справочник", ИмяОбъекта);
						Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Документ") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 9);
				
				Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
					КонтактнаяИнформация = Метаданные.Документы[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
					Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
						ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Документ", ИмяОбъекта);
						Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Количество = 0;
		ОбъектыСВидомДляСписка = Новый Массив;
		Пока РезультатЗапроса.Следующий() Цикл
			Количество = Количество + РезультатЗапроса.Количество;
			ОбъектыСВидомДляСписка.Добавить(РезультатЗапроса.Ссылка);
		КонецЦикла;
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Количество;
		Параметры.Вставить("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	КонецЕсли;
	
	Если ОбъектыСВидомДляСписка = Неопределено ИЛИ ОбъектыСВидомДляСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаСВидомДляСписка = Метаданные.НайтиПоТипу(ОбъектыСВидомДляСписка.Получить(0)).ПолноеИмя();
	ТекстЗапроса = " ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0") + "
	|	КонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	" + ПолноеИмяОбъектаСВидомДляСписка + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформация.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА КонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	|				ТОГДА 0
	|				ИНАЧЕ 1
	|		КОНЕЦ) = 0";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Количество = РезультатЗапроса.Количество();
	Если Количество > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			Объект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
			ОбновитьКонтактнуюИнформациюДляСписков(Объект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЦикла;
		Если Количество < 1000 Тогда
			ОбъектыСВидомДляСписка.Удалить(0);
		КонецЕсли;
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Количество;
	Иначе
		ОбъектыСВидомДляСписка.Удалить(0);
	КонецЕсли;

	Если ОбъектыСВидомДляСписка.Количество() > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает доступность элементов контактной информации на форме
//
// Параметры:
//    Форма - УправляемаяФорма - передаваемая форма.
//    Элементы - Соответствие -  Список видов контактной информации, для которых устанавливается доступ
//        ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//        ** Значение - Булево           - Если ЛОЖЬ, то элемент доступен только для просмотра.
//
Процедура УстановитьДоступностьЭлементовКонтактнойИнформации(Форма, Элементы) Экспорт
	Для каждого Элемент Из Элементы Цикл
		
		Отбор = Новый Структура("Вид", Элемент.Ключ);
		НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки <> Неопределено Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЭлементКИ = Форма.Элементы[НайденнаяСтрока.ИмяРеквизита];
				ЭлементКИ.ТолькоПросмотр = НЕ Элемент.Значение;
			КонецЦикла;
			// Если у элемента только просмотр, то удаляем возможность добавления этого элемента на форму.
			Если НЕ Элемент.Значение Тогда
				Для каждого ЭлементКонтекстногоМеню Из Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов Цикл
					Если ЭлементКонтекстногоМеню.Значение.Ссылка = Элемент.Ключ Тогда
						Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Удалить(ЭлементКонтекстногоМеню);
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти("КонтактнаяИнформацияДобавитьПолеВвода") <> Неопределено
		И Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Количество() = 0 Тогда
		// Делаем кнопку Добавить недоступной, т.к. контекстное меню пустое. 
		Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет список колонки для загрузки данных колонками контактной информации
//
// Параметры:
//  МетаданныеСправочника	 - ОбъектМетаданных - Метаданные справочника
//  ИнформацияПоКолонкам	 - ТаблицаЗначение - колонки макета
//
Процедура КолонкиДляЗагрузкиДанных(МетаданныеСправочника, ИнформацияПоКолонкам) Экспорт
	
	Если МетаданныеСправочника.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = ИнформацияПоКолонкам.Количество() + 1;
	
	ВидыКонтактнойИнформации = ВидыКонтактнойИнформацияОбъекта(Справочники[МетаданныеСправочника.Имя].ПустаяСсылка());
	
	Для каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		ИмяКолонки = "КонтактнаяИнформация_" + СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВидКонтактнойИнформации.Наименование);
		Если ИнформацияПоКолонкам.Найти(ИмяКолонки, "ИмяКолонки") = Неопределено Тогда
			СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
			СтрокаИнфоПроКолонки.ИмяКолонки = ИмяКолонки;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки = ВидКонтактнойИнформации.Представление;
			СтрокаИнфоПроКолонки.ТипКолонки = Новый ОписаниеТипов("Строка");
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Ложь;
			СтрокаИнфоПроКолонки.Позиция = Позиция;
			СтрокаИнфоПроКолонки.Группа = ВернутьСтр("ru = 'Контактная информация'");
			СтрокаИнфоПроКолонки.Видимость = Истина;
			СтрокаИнфоПроКолонки.Примечание = ВидКонтактнойИнформации.Подсказка;
			СтрокаИнфоПроКолонки.Ширина = 30;
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Виды контактной информация объекта
//
// Параметры:
//  ВладелецКонтактнойИнформации - Ссылка на владельца контактной информации.
//                                 Объект владельца контактной информации.
//                                 ДанныеФормыСтруктура (по типу объекта владельца свойств).
// Возвращаемое значение:
//  ТаблицаЗначений -  виды контактной информации
//
Функция ВидыКонтактнойИнформацияОбъекта(ВладелецКонтактнойИнформации) Экспорт
	
	Если ТипЗнч(ВладелецКонтактнойИнформации) = Тип("ДанныеФормыСтруктура") Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ВладелецКонтактнойИнформации)) Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации);
	Иначе
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипСсылки);
	ПолноеИмяОбъектаМетаданных = МетаданныеСправочника.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА
		|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.Используется = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл 
		Если СтрСравнить(РезультатЗапроса.ИмяПредопределенныхДанных, ИмяГруппыВидовКИ) = 0 Тогда
			ГруппаВидовКИ = РезультатЗапроса.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ГруппаВидовКИ) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Представление,
	|	ВидыКонтактнойИнформации.Подсказка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь)
	
	Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет, ЭтоКоманда);
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиПоЗначению(ИмяЭлемента);
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.ПараметрыКонтактнойИнформации.ПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			Если СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Верх) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Верх;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Лево) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Лево;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Право) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Право;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Низ) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Низ;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Нет) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Авто;
			КонецЕсли;
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ЭтоДобавлениеКомментария)
	
	Если Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	// Заголовок и поле ввода
	ЗаголовокЭлемента = Форма.Элементы.Найти("Заголовок" + ИмяРеквизита);
	ИмяКомментария = "Комментарий" + ИмяРеквизита;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
		
		ТекущийЭлемент = ?(ГруппаПолейВвода.ПодчиненныеЭлементы.Найти(ПолеВвода.Имя) = Неопределено, ПолеВвода.Родитель, ПолеВвода);
		ИндексТекущегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(ТекущийЭлемент);
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексТекущегоЭлемента + 1);
		
		Комментарий = Комментарий(Форма, НайденнаяСтрока.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
		
		Если ЗаголовокСлева Тогда
			
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
			ИндексЗаголовка = ГруппаЗаголовков.ПодчиненныеЭлементы.Индекс(ЗаголовокЭлемента);
			СледующийЗаголовок = ГруппаЗаголовков.ПодчиненныеЭлементы.Получить(ИндексЗаголовка + 1);
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
			Форма.Элементы.Переместить(Заглушка, ГруппаЗаголовков, СледующийЗаголовок);
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
			
		КонецЕсли;
		
	Иначе
		
		Комментарий = Форма.Элементы[ИмяКомментария];
		Форма.Элементы.Удалить(Комментарий);
		УдалитьОписаниеЭлемента(Форма, ИмяКомментария);
		
		Если ЗаголовокСлева Тогда
			
			ЗаголовокЭлемента.Высота = 1;
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			ЗаглушкаЗаголовка = Форма.Элементы[ИмяЗаглушки];
			Форма.Элементы.Удалить(ЗаглушкаЗаголовка);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
	ЗаглушкаДействия = Форма.Элементы.Найти(ИмяЗаглушкиДействия);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		Если ЗаглушкаДействия = Неопределено Тогда
			
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			Действие = Форма.Элементы["Команда" + ИмяРеквизита];
			ИндексКоманды = ГруппаДействий.ПодчиненныеЭлементы.Индекс(Действие);
			СледующийЭлемент = ГруппаДействий.ПодчиненныеЭлементы.Получить(ИндексКоманды + 1);
			Если ЗаглушкаДействия <> СледующийЭлемент Тогда
				Форма.Элементы.Переместить(ЗаглушкаДействия, ГруппаДействий, СледующийЭлемент);
			КонецЕсли;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 2;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаглушкаДействия.Высота = 1 Тогда
			
			Форма.Элементы.Удалить(ЗаглушкаДействия);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено)
	
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");
	
	Если ДобавлениеНовогоЗначения Тогда
		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, РедактированиеТолькоВДиалоге, Подсказка, МногострочноеПоле");
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);
	
	Если ДобавлениеНовогоЗначения Тогда
		
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
		
		КоличествоСтрокВида = НайденныеСтроки.Количество();
		ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
		ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		ЭтоПоследняяСтрока = Ложь;
		Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		Иначе
			ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
			"КонтактнаяИнформацияПоле",
			СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x"),
			КоличествоСтрокВида + 1);
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.Вид = ДобавляемыйВид;
		НоваяСтрока.Тип = ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ИнформацияОВидеКИ.Наименование, Истина));
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЕстьКомментарий = Ложь;
		ОбязательноеЗаполнение = Ложь;
	Иначе
		ЭтоПоследняяСтрока = СледующаяСтрока = Неопределено;
		Если Не ЭтоПоследняяСтрока Тогда
			ИмяСледующегоРеквизита = СледующаяСтрока.ИмяРеквизита;
		КонецЕсли;
		ИмяРеквизита = ИнформацияОВидеКИ.ИмяРеквизита;
		ЕстьКомментарий = ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение;
	КонецЕсли;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	// Отрисовка на форме
	Если ЗаголовокСлева Тогда
		ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Заголовок = Заголовок(Форма, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаЗаголовков, ИнформацияОВидеКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		Если СледующаяСтрока = Неопределено Тогда
			
			ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
			
			Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
				ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
			КонецЕсли;
			
			ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
			СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
			
		Иначе
			
			СледующийЭлемент = Форма.Элементы[СледующаяСтрока.ИмяРеквизита];
			
		КонецЕсли;
		
		Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		
	КонецЕсли;
	
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;
	
	ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	// Выводим комментарий
	Если ЕстьКомментарий Тогда
		
		ИмяКомментария = "Комментарий" + ИмяРеквизита;
		Комментарий = Комментарий(Форма, Результат.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		
		Если Не ЭтоПоследняяСтрока Тогда
			
			ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
			
			Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
				ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
			КонецЕсли;
			
			ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
			СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
			
			Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заглушка , если заголовок у поля сверху.
	Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
		
		ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
		Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 2);
		
	КонецЕсли;
	
	Действие = Действие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
	Если Не ЭтоПоследняяСтрока Тогда
		СледующееДействие = Форма.Элементы.Найти(ИмяСледующегоДействия);
		Если СледующееДействие <> Неопределено Тогда
			Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1 И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеНовогоЗначения Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
				Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент.Подсказка = ИнформацияОВидеКИ.Подсказка;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	
	Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода.
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ИнформацияОВидеКИ.МногострочноеПоле Тогда
			Элемент.Высота = 5;
			Элемент.МногострочныйРежим = Истина;
		Иначе
			Элемент.Высота = 1;
			Элемент.МногострочныйРежим = Ложь;
		КонецЕсли;
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		
		// Ввод комментария через контекстное меню.
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = ВернутьСтр("ru = 'Ввести комментарий'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = ВернутьСтр("ru = 'Ввести комментарий'");
		Команда.Картинка = БиблиотекаКартинок.Комментарий;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.ХранитьИсториюИзменений Тогда
		// Вывод истории контактной информации через контекстное меню.
		ИмяКоманды = "КонтекстноеМенюИстория" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = ВернутьСтр("ru = 'История изменений...'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
		Команда.Подсказка = ВернутьСтр("ru = 'Показывает историю изменения контактной информации'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ИмяКоманды = "КонтекстноеМенюКартаЯндекс" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = ВернутьСтр("ru = 'Адрес на Яндекс.Картах'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
		Команда.Подсказка = ВернутьСтр("ru = 'Показывает адрес на картах Яндекс.Карты'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		ИмяКоманды = "КонтекстноеМенюКартаGoogle" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = ВернутьСтр("ru = 'Адрес на Google Maps'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
		Команда.Подсказка = ВернутьСтр("ru = 'Показывает адрес на карте Google Maps'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

	КонецЕсли;
	
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип) 
		И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		
			Элемент.КнопкаВыбора = Истина;
			
			Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
				Элемент.РедактированиеТекста = Ложь;
				Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Процедура ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление)
	
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	
	Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Если Направление > 0 Тогда 
		ТекстКоманды = ВернутьСтр("ru = 'Переместить вверх'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды = ВернутьСтр("ru = 'Переместить вниз'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок = ТекстКоманды;
	Команда.Подсказка = ТекстКоманды;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.Доступность = Истина;
	ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

КонецПроцедуры

Функция Действие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	Тип = ВидКонтактнойИнформации.Тип;
	СоздаватьДействиеДляТипа = Новый Соответствие();
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ?(КоличествоАдресов > 1, Истина, Ложь));
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, Истина);
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если НЕ МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
				СоздаватьДействиеДляТипа[Тип] = Ложь;
			КонецЕсли;
		Иначе
			СоздаватьДействиеДляТипа[Тип] = Ложь;
		КонецЕсли;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		СоздаватьДействиеДляТипа[Тип] = Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ВидКонтактнойИнформации.РедактированиеТолькоВДиалоге Тогда
		СоздаватьДействиеДляТипа[Тип] = Ложь;
	КонецЕсли;
	
	Если СоздаватьДействиеДляТипа[Тип] = Истина Тогда
		
		// Есть действие
		ИмяКоманды = "Команда" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		Команда.Отображение = ОтображениеКнопки.Картинка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		Элемент.ИмяКоманды = ИмяКоманды;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
				И НЕ ВидКонтактнойИнформации.РедактированиеТолькоВДиалоге Тогда
			
			Элемент.Заголовок = ВернутьСтр("ru = 'Заполнить'");
			Команда.Подсказка = ВернутьСтр("ru = 'Заполнить адрес из другого поля'");
			Команда.Картинка = БиблиотекаКартинок.ПереместитьВлево;
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = ВернутьСтр("ru = 'Перейти'");
			Команда.Подсказка = ВернутьСтр("ru = 'Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = ВернутьСтр("ru = 'Написать письмо'");
			Команда.Подсказка = ВернутьСтр("ru = 'Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
				Элемент.Заголовок = ВернутьСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Подсказка = ВернутьСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Картинка = БиблиотекаКартинок.ПозвонитьИлиОтправитьSMS;
			Иначе
				Элемент.Заголовок = ВернутьСтр("ru = 'Позвонить'");
				Команда.Подсказка = ВернутьСтр("ru = 'Позвонить по телефону'");
				Команда.Картинка = БиблиотекаКартинок.Позвонить;
			КонецЕсли;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			Элемент.Заголовок = ВернутьСтр("ru = 'Skype'");
			Команда.Подсказка = ВернутьСтр("ru = 'Skype'");
			Команда.Картинка = БиблиотекаКартинок.Skype;
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		
		// Действия нет, ставим заглушку.
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = ?(ВидКонтактнойИнформации.МногострочноеПоле, 5, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали  = Ложь;
	Элемент.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.Высота = 1;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления) 
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = Группировка;
		ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);
		
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
		
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	
	Объект.ПроверятьКорректность = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);
	Если Объект.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Объект.ПроверятьПоФИАС       = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьПоФИАС);
	КонецЕсли;
	
	Объект.АдресТолькоРоссийский = Ложь;
	Объект.ВключатьСтрануВПредставление = Ложь;
	Объект.СкрыватьНеактуальныеАдреса = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ, ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКИ.ДействуетС;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКИ.ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) Тогда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И СтрокаКИ.РедактированиеТолькоВДиалоге
			И ПустаяСтрока(СтрокаКИ.Представление) Тогда
			Форма[СтрокаКИ.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Иначе
			Форма[СтрокаКИ.ИмяРеквизита] = СтрокаКИ.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВидаКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(СтрокаКИ.Вид);
	СтруктураВидаКИ.Вставить("Ссылка", СтрокаКИ.Вид);
	
	Если ЭтоНовыйВидКИ И СтруктураВидаКИ.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(СтруктураВидаКИ, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя табличной части документа по виду контактной информации.
//
// Параметры:
//    ВидКИ      - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//    ИмяОбъекта - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Строка - имя табличной части или пустая строка, если табличной части нет.
//
Функция ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяВидаКонтактнойИнформации
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВидКИ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Сред(РезультатЗапроса.ИмяВидаКонтактнойИнформации, 
			СтрНайти(РезультатЗапроса.ИмяВидаКонтактнойИнформации, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает имена табличных частей документа по виду контактной информации.
//
// Параметры:
//    ТаблицаВидовКонтактнойИнформации - ТаблицаЗначений - Список видов контактной информации.
//     * Вид - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    ИмяОбъекта                       - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Соответствие - имена табличных части или пустая строка, если табличной части нет.
//
Функция ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	               |ПОМЕСТИТЬ ВидыКИ
	               |ИЗ
	               |	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяТабличнойЧасти,
	               |	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	               |ИЗ
	               |	ВидыКИ КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти, СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
		
		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда 
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
		Если АдресРФ <> Неопределено Тогда
			// Российский адрес
			СтрокаТабличнойЧасти.Регион = АдресРФ.СубъектРФ;
			СтрокаТабличнойЧасти.Город  = АдресРФ.Город;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если СтрНачинаетсяС(КодСтраны, "+") Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		// Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - СтрНайти(АдресСтрокой, "://") );
		Поз = СтрНайти(АдресСервера, "/");
		// Удалим путь
		АдресСервера = ?(Поз = 0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию в табличной части "Контактная информация" приемника.
//
// Параметры:
//        * Приемник    - Произвольный - Объект, в котором нужно заполнить КИ.
//        * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, заполняемый в
//                                                                    приемнике.
//        * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//        * СтрокаТабличнойЧасти - СтрокаТабличнойЧасти, Неопределено - данные приемника, если контактная информация
//                                 заполняется для строки.
//                                                                      Неопределено, если контактная информация
//                                                                      заполняется для приемника.
//        * Дата         - Дата - Дата с который действует контактная информация. Используется только
//                                если у вида КИ установлен флаг ХранитьИсториюИзменений
//
Процедура ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтруктураКИ, СтрокаТабличнойЧасти = Неопределено, Дата = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ДанныеЗаполнения = Приемник;
	Иначе
		ДанныеЗаполнения = СтрокаТабличнойЧасти;
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("Вид", ВидКИ);
	НайденныеСтрокиКИ = Приемник.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Приемник.КонтактнаяИнформация.Добавить();
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаКИ.ИдентификаторСтрокиТабличнойЧасти = СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти;
		КонецЕсли;
	Иначе
		СтрокаКИ = НайденныеСтрокиКИ[0];
	КонецЕсли;
	
	// Из любого понимаемого - в XML.
	ЗначенияПолей = КонтактнаяИнформацияВXML(СтруктураКИ, , ВидКИ);
	Представление = ПредставлениеКонтактнойИнформации(ЗначенияПолей);
	
	СтрокаКИ.Тип           = ВидКИ.Тип;
	СтрокаКИ.Вид           = ВидКИ;
	СтрокаКИ.Представление = Представление;
	СтрокаКИ.ЗначенияПолей = ЗначенияПолей;
	
	Если ВидКИ.ХранитьИсториюИзменений Тогда
		СтрокаКИ.ДействуетС = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей);
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = ВернутьСтр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Заполняет дополнительные реквизиты строки табличной части "Контактная информация".
//
// Параметры:
//    СтрокаКИ      - СтрокаТабличнойЧасти - строка "Контактная информация".
//    Представление - Строка                     - представление значения.
//    ЗначенияПолей - СписокЗначений, ОбъектXTDO - значения полей.
//
Процедура ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей)
	
	Если ТипЗнч(ЗначенияПолей) = Тип("ОбъектXDTO") Тогда
		ОбъектКИ = ЗначенияПолей;
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, СтрокаКИ.Вид);
	КонецЕсли;
	
	ТипИнформации = СтрокаКИ.Тип;

	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКИ, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет контактную информацию и перезаполняет значение полей
//
Функция ПроверитьЗаполнениеКонтактнойИнформации(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "") Экспорт
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоРоссийскийАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если Источник <> Неопределено И Источник.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Адрес = Источник;
	Иначе
		Адрес = Источник.Состав;
	КонецЕсли;
	
	Если Адрес <> Неопределено И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = УправлениеКонтактнойИнформациейСлужебный.ОшибкиЗаполненияАдресаXDTO(Адрес, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Объект, Знач ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Наименование, если есть в объекте-приемнике.
	Наименование = Неопределено;
	Если ДанныеЗаполнения.Свойство("Наименование", Наименование)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Наименование") Тогда
			Объект.Наименование = Наименование;
	КонецЕсли;
	
	// { RGS LFedotova 28.10.2016 18:15:40 - вопрос SLI-0006897
	
	// Таблица контактной информации, заполняется только если КИ не находится в другой ТЧ.
	//КонтактнаяИнформация = Неопределено;
	//Если ДанныеЗаполнения.Свойство("КонтактнаяИнформация", КонтактнаяИнформация) 
	//	И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КонтактнаяИнформация") Тогда
	//
	//	Если ТипЗнч(КонтактнаяИнформация) = Тип("ТаблицаЗначений") Тогда
	//		КолонкиТаблицы = КонтактнаяИнформация.Колонки;
	//	Иначе
	//		КолонкиТаблицы = КонтактнаяИнформация.ВыгрузитьКолонки().Колонки;
	//	КонецЕсли;
	//	
	//	Если КолонкиТаблицы.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
	//		
	//		Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
	//			НоваяСтрокаКИ = Объект.КонтактнаяИнформация.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ, , "ЗначенияПолей");
	//			НоваяСтрокаКИ.ЗначенияПолей = КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Представление, СтрокаКИ.Вид);
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	КонтактИнформация = Неопределено;
	Если ДанныеЗаполнения.Свойство("КонтактнаяИнформация", КонтактИнформация) 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КонтактнаяИнформация") Тогда
	
		Если ТипЗнч(КонтактИнформация) = Тип("ТаблицаЗначений") Тогда
			КолонкиТаблицы = КонтактИнформация.Колонки;
		Иначе
			КолонкиТаблицы = КонтактИнформация.ВыгрузитьКолонки().Колонки;
		КонецЕсли;
		
		Если КолонкиТаблицы.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
			
			Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
				НоваяСтрокаКИ = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ, , "ЗначенияПолей");
				НоваяСтрокаКИ.ЗначенияПолей = КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Представление, СтрокаКИ.Вид);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	// } RGS LFedotova 28.10.2016 18:16:02 - вопрос SLI-0006897
	
КонецПроцедуры

// Этот модуль предназначен для реализации алгоритмов работы 
// с контактной информацией.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

//Процедура дополняет представление адреса строкой 
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьПолныйАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		Результат = "," + 
		СокрЛП(Запись.Поле1) + ", " +
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет "преобразование" строкового представления адреса в структуру
Функция ПолучитьСтруктуруАдресаИзСтроки(Знач СтроковыйАдрес) Экспорт
	
	Если ПустаяСтрока(СтроковыйАдрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	
	Если (ЧислоВхожденийЗапятойВАдрес = 9) ИЛИ (ЧислоВхожденийЗапятойВАдрес = 12) Тогда
		
		СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтроковыйАдрес);
		
	ИначеЕсли ЧислоВхожденийЗапятойВАдрес >= 1 Тогда
		
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", СокрЛП(Лев(СтроковыйАдрес, СтрНайти(СтроковыйАдрес, ",") - 1)));
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);			
		
	Иначе
		// вообще запятых нет в представлении - значит необычный Российский Адрес
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", Справочники.КлассификаторСтранМира.Россия.Наименование);
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);
		
	КонецЕсли;
		
	Возврат СтруктураАдреса;	
	
КонецФункции


// Процедура считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Процедура ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт
	
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Вид КАК Вид,
	|	ВложенныйЗапрос.Тип КАК Тип,
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле1) КАК Поле1,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле2) КАК Поле2,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле3) КАК Поле3,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле4) КАК Поле4,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле5) КАК Поле5,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле6) КАК Поле6,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле7) КАК Поле7,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле8) КАК Поле8,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле9) КАК Поле9,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле10) КАК Поле10,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипДома) КАК ТипДома,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКорпуса) КАК ТипКорпуса,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКвартиры) КАК ТипКвартиры,
	|	МАКСИМУМ(ВложенныйЗапрос.Представление) КАК Представление,
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Объект КАК Объект,
	|		ВидыКонтактнойИнформации.Тип КАК Тип,
	|		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|		"""" КАК Представление,
	|		"""" КАК Поле1,
	|		"""" КАК Поле2,
	|		"""" КАК Поле3,
	|		"""" КАК Поле4,
	|		"""" КАК Поле5,
	|		"""" КАК Поле6,
	|		"""" КАК Поле7,
	|		"""" КАК Поле8,
	|		"""" КАК Поле9,
	|		"""" КАК Поле10,
	|		"""" КАК ТипДома,
	|		"""" КАК ТипКорпуса,
	|		"""" КАК ТипКвартиры,
	|		"""" КАК Комментарий,
	|		"""" КАК ЗначениеПоУмолчанию
	|	ИЗ
	|		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|	ГДЕ
	|		(НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|		И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегистрСведенийКонтактнаяИнформация.Объект,
	|		РегистрСведенийКонтактнаяИнформация.Тип,
	|		РегистрСведенийКонтактнаяИнформация.Вид,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.Поле1,
	|		РегистрСведенийКонтактнаяИнформация.Поле2,
	|		РегистрСведенийКонтактнаяИнформация.Поле3,
	|		РегистрСведенийКонтактнаяИнформация.Поле4,
	|		РегистрСведенийКонтактнаяИнформация.Поле5,
	|		РегистрСведенийКонтактнаяИнформация.Поле6,
	|		РегистрСведенийКонтактнаяИнформация.Поле7,
	|		РегистрСведенийКонтактнаяИнформация.Поле8,
	|		РегистрСведенийКонтактнаяИнформация.Поле9,
	|		РегистрСведенийКонтактнаяИнформация.Поле10,
	|		РегистрСведенийКонтактнаяИнформация.ТипДома,
	|		РегистрСведенийКонтактнаяИнформация.ТипКорпуса,
	|		РегистрСведенийКонтактнаяИнформация.ТипКвартиры,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Комментарий КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.ЗначениеПоУмолчанию
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК РегистрСведенийКонтактнаяИнформация
	|	ГДЕ
	|		РегистрСведенийКонтактнаяИнформация.Объект = &Объект) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Вид,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление УБЫВ,
	|	ВложенныйЗапрос.Тип.Порядок,
	|	Вид";
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Представление = СокрП(стр.Представление);
		стр.Комментарий   = СокрП(стр.Комментарий);
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТабЗн);
	
КонецПроцедуры	

// } RGS MYurkevich 12.03.2015 11:39:46 - КонтактнаяИнформацияВТЧ

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюКакНабор(НаборЗаписей, Ссылка, Отказ)

	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		Запись = НаборЗаписей[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	КопияНабора = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаНабораЗаписей Из КопияНабора Цикл
		НаборЗаписей.Отбор.Вид.Установить(СтрокаНабораЗаписей.Вид);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаНабораЗаписей);
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
		
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюСравниваяСКопией(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации)
	
	ТабКопия = КопияНабораКонтактнойИнформации.Выгрузить();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Запись.Объект = Ссылка;
		
		Отбор = Новый Структура("Объект,Тип,Вид", Запись.Объект, Запись.Тип, Запись.Вид);
		Строки = ТабКопия.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Отличаются = Не ПустаяСтрока(Запись.Представление);
		Иначе
			Отличаются = Ложь;
			СтрКопия = Строки[0];
			
			Для Каждого Колонка Из ТабКопия.Колонки Цикл
				Если СтрКопия[Колонка.Имя] <> Запись[Колонка.Имя] Тогда
					Отличаются = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Отличаются Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Отбор.Тип.Установить(Запись.Тип);
		Набор.Отбор.Вид.Установить(Запись.Вид);
		
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			новЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(новЗапись, Запись);
		КонецЕсли;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка);
	
КонецПроцедуры



// Создать копию набора записей контактной информации
//
Функция СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборЗаписей) Экспорт
	
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(Запись.Представление) Тогда
			новЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(новЗапись, Запись);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Набор;
	
КонецФункции

#Если Клиент Тогда

// Процедура выполняется при активизации строки табличного поля, в котором
// отображается контактная информация объектов в их формах, и управляет
// доступностью кнопки командной панели установки значения по умолчанию.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  КнопкаУстановитьОсновным - Кнопка командной панели
//
Процедура КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			КнопкаУстановитьОсновным.Пометка     = Истина;
			КнопкаУстановитьОсновным.Доступность = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Тогда
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Ложь;
		Иначе
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Истина;
		КонецЕсли; 
	Иначе
		КнопкаУстановитьОсновным.Пометка     = Ложь;
		КнопкаУстановитьОсновным.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняется при выводе строки табличного поля, в котором
// отображается контактная информация объектов в их формах.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  ОформлениеСтроки - Оформление строки табличного поля
//  ДанныеСтроки - данные строки табличного поля
//
Процедура КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Вид) = Тип("Строка") Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	Если Элемент.Колонки.Картинка.Видимость Тогда
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		Если ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если ПолучитьПредставлениеАдреса(ДанныеСтроки) = ДанныеСтроки.Представление Тогда
				// Формат МНС
				Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
				Иначе
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 8;
				КонецЕсли; 
			Иначе
				Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
				Иначе
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 7;
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 9;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 4;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 10;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 5;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 11;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 6;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Параметры:
//  СтруктураПараметров - структура, параметры записи, для которой надо установить признак основной
//   Ключи:
//    Объект, СправочникСсылка, значение измерения Объект регистра сведений
//    Тип, ПеречислениеСсылка.ТипыКонтактнойИнформации
//    Вид, СправочникСсылка.ВидыКонтактнойИнформации
//
Процедура УстановитьЗаписьОсновной(НаборЗаписей, ТабличноеПоле, Кнопка) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
	
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
			
		Иначе
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			Кнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обраьботчик события "ПередУдалением" табличного поля набора записей.
//
// Параметры:
//  Элемент - Табличное поле
//  Отказ - Булево
//
Процедура УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка")) Тогда
	
		ОтветНаВопрос = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка") Тогда
			Элемент.Значение.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Представление       = "";
			Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		
		СтруктураЗаписи.Вставить("ТипДома"  ,     Запись.ТипДома);
		СтруктураЗаписи.Вставить("ТипКорпуса"  ,  Запись.ТипКорпуса);
		СтруктураЗаписи.Вставить("ТипКвартиры"  , Запись.ТипКвартиры);

		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Процедура контролирует возможность редактирования текста в поле ввода представления КИ.
//
Процедура УстановитьВозможностьРедактированияТекстаКИ(Элемент) Экспорт

	Если Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление)
	   И (ПолучитьПредставлениеАдреса(Элемент.ТекущиеДанные) = Элемент.ТекущиеДанные.Представление) Тогда
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ПоследнееЗначениеЭлементаТайпингаВидаКИ) Экспорт

	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда
			Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
			Элемент.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.ТекущиеДанные.Вид;
	
КонецПроцедуры

// Обработчик события "ПередОкончаниемРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ) Экспорт
	
	Если мОбработкаТайпингаВидаКИ И НЕ НоваяСтрока Тогда
		мОбработкаТайпингаВидаКИ = Ложь;
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		Элемент.Колонки.Вид.ЭлементУправления.ВыделенныйТекст = мТекстТайпингаВидаКИ;
		мТекстТайпингаВидаКИ = "";
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен вид");
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПриИзменении" представления КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		СтруктураПолей = РазложитьТелефонПоПолям(Элемент.Значение);
		ТабличноеПоле.ТекущиеДанные.Поле3 = СтруктураПолей.СамТелефон;
		ТабличноеПоле.ТекущиеДанные.Поле1 = СтруктураПолей.КодСтраны;
		ТабличноеПоле.ТекущиеДанные.Поле2 = СтруктураПолей.КодГорода;
		
		СформироватьПредставлениеТелефона(ТабличноеПоле.ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ТабличноеПоле,
														  НаборКонтактнойИнформации, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт

	СсылкаНаОбъект = НаборКонтактнойИнформации.Отбор.Объект.Значение;
	Если (СсылкаНаОбъект = Неопределено) ИЛИ (СсылкаНаОбъект.Пустая()) Тогда
		Отказ = Истина;
		Предупреждение("Перед добавлением контактной информации запишите объект!");
		Возврат;
	КонецЕсли;
	
	Если Не Копирование Тогда
		Если мКнопкаРедактироватьКИВДиалоге.Пометка  Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации, , Форма);
		Иначе
			ТабличноеПоле.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
		КонецЕсли;
	Иначе
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,, Форма, ПолучитьСтруктуруЗаписиРегистра(ТабличноеПоле.ТекущиеДанные));
		Иначе
			УстановитьВозможностьРедактированияТекстаКИ(ТабличноеПоле);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, ДоступностьОбъекта = Истина, Форма = Неопределено) Экспорт

	Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
		Отказ = Истина;
		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
		ОбработкаРедактирования.РедактироватьЗапись(Элемент.ТекущиеДанные, , Форма);
	Иначе
		УстановитьВозможностьРедактированияТекстаКИ(Элемент);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриИзменении" Типа КИ табличного поля
// набора записей регистра сведений
//
Процедура КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Вид)
	   И ТипЗнч(ТабличноеПоле.ТекущиеДанные.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ТабличноеПоле.ТекущиеДанные.Вид.Тип <> Элемент.Значение Тогда
	
		ТабличноеПоле.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

// Процедура копирует из строки источника адрес в строку приемника
Процедура СкопироватьДанныеАдреса(СтрокаИсточник, СтрокаПриемник)
	
	СтрокаПриемник.Представление = СтрокаИсточник.Представление;
	СтрокаПриемник.Комментарий   = СтрокаИсточник.Комментарий;
	
	Для а = 1 По 10 Цикл
		СтрокаПриемник["Поле" + Строка(а)] = СтрокаИсточник["Поле" + Строка(а)];
	КонецЦикла;
	
КонецПроцедуры

// Процедура копирует КИ из Ффактич адреса в юридический и наоборот
Процедура СкопироватьАдресКонтактнойИнформации(СтрокаСАдресом, ТаблицаКИ) Экспорт
	
	Если (СтрокаСАдресом = Неопределено) Или (ТаблицаКИ = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ИначеЕсли СтрокаСАдресом.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
		ВидПоиска = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗадаватьВопросОбИзменении = Истина;
	
	// бежим по всем записям регистра и те которые нужно поменять - меняем
	Для Каждого СтрокаДляИзменения Из ТаблицаКИ Цикл
		
		// если представление не заполнено то только тогда можно предложить его поменять
		Если СтрокаДляИзменения.Вид = ВидПоиска И НЕ ЗначениеЗаполнено(СтрокаДляИзменения.Представление) Тогда
			
			Если ЗадаватьВопросОбИзменении Тогда
				
				// вопрос задаем только в том случае, если представление не заполнено, а когда оно заполнено, то ничего не спрашиваем и не меняем
				НужноМенятьАдрес = Вопрос("Изменился " + СтрокаСАдресом.Вид.Наименование + ".
											|Автоматически изменить " + СтрокаДляИзменения.Вид.Наименование + "?", РежимДиалогаВопрос.ДаНет);
				// если менять не нужно - то не меняем							
				Если НужноМенятьАдрес <> КодВозвратаДиалога.Да Тогда 
					Возврат;
				КонецЕсли;
				ЗадаватьВопросОбИзменении = Ложь;
			КонецЕсли;
			
			// изменяем адрес
			СкопироватьДанныеАдреса(СтрокаСАдресом, СтрокаДляИзменения);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;
	
	ТипДома = Неопределено;
	ТипКорпуса = Неопределено;
	ТипКвартиры = Неопределено;
	Если ТипЗнч(Запись) = Тип("Структура") Тогда
		Запись.Свойство("ТипДома",     ТипДома);
		Запись.Свойство("ТипКорпуса",  ТипКорпуса);
		Запись.Свойство("ТипКвартиры", ТипКвартиры);
	Иначе
		ТипДома     = Запись.ТипДома;
		ТипКорпуса  = Запись.ТипКорпуса;
		ТипКвартиры = Запись.ТипКвартиры;
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипДома), ТипДома, "дом") + " № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКорпуса), ТипКорпуса, "корпус") + " " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв.") + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//Функция по структуре с адресом возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Регион), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Город), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		
		ТипДома = Неопределено;
		ТипКорпуса = Неопределено;
		ТипКвартиры = Неопределено;
		СтруктураАдреса.Свойство("ТипДома", ТипДома);
		СтруктураАдреса.Свойство("ТипКорпуса", ТипКорпуса);
		СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", "      + ?(ЗначениеЗаполнено(ТипДома),     ТипДома,     "дом") + " № ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", "   + ?(ЗначениеЗаполнено(ТипКорпуса),  ТипКорпуса,  "корпус") + " ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв."));
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = СтруктураАдреса.Представление;
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

//Функция по строке адреса (разделенная через запятую) возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтрока(СтрокаАдреса) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтрокаАдреса);
	ПредставлениеАдреса = ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса);
	Возврат ПредставлениеАдреса
	
КонецФункции


// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 

КонецПроцедуры // СформироватьПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура переносит строку из таблицы в Структуру
Процедура ПеренестиСтрокуТаблицыВСтруктуру(Таблица, СтрокаТаблицы, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ СтрокаТаблицы = Неопределено 
		ИЛИ Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Функция возвращает пустое значение определенного типа,
//  в соответствии с видом объекта контактной информации
//
// Параметры
//  ВидОбъектаКонтактнойИнформации - ПеречислениеСсылка.ВидыОбъектовКонтактнойИнформации
//
// Возвращаемое значение:
//   СправочникСсылка (пустая) или Неопределено
//
Функция ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации(ВидОбъектаКонтактнойИнформации) Экспорт

	Если ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица Тогда
		Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации()

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция НачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент, ТекущийПользователь) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

   	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = СтрНайти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезанную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = СтрНайти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которого необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется дополнение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классификатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитьКодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры // РазложитьКодАдресногоЭлементаНаСоставляющие()

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция ПолучитьПолноеНазвание(Знач КодЭлемента, НачальныйУровеньДетализации = 1, КонечныйУровеньДетализации = 6) Экспорт
	
	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;

	РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);
	
	Название = "";
	НовыйКод = 0;

	Если (КодРегиона > 0) Тогда
		НовыйКод = КодРегиона * МаскаРегиона();
		Если (1 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 1) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодРайона > 0) Тогда
		НовыйКод = НовыйКод + КодРайона * МаскаРайона();
		Если (2 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 2) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодГорода > 0) Тогда
		НовыйКод = НовыйКод + КодГорода * МаскаГорода();
		Если (3 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 3) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодНаселенногоПункта > 0) Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * МаскаНасПункта();
		Если (4 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 4) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодУлицы > 0) Тогда
		НовыйКод = НовыйКод + КодУлицы * МаскаУлицы();
		Если (5 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 5) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодДома > 0) Тогда
		НовыйКод = НовыйКод + КодДома * МаскаДома();
		Если (6 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 6) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции // ПолучитьПолноеНазвание()

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнный пункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт
	
	КодРазбора = КодЭлемента;
	ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлемента(КодРазбора);
	
	КодРегиона = Цел(КодРазбора / МаскаРегиона());
	КодРазбора = КодРазбора % МаскаРегиона();

	КодРайона = Цел(КодРазбора / МаскаРайона());
	КодРазбора = КодРазбора % МаскаРайона();

	КодГорода = Цел(КодРазбора / МаскаГорода());
	КодРазбора = КодРазбора % МаскаГорода();

	КодНаселенногоПункта = Цел(КодРазбора / МаскаНасПункта());
	КодРазбора = КодРазбора % МаскаНасПункта();

	КодУлицы = Цел(КодРазбора / МаскаУлицы());
	
	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегиона И
	              |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайона И
	              |	АдресныйКлассификатор.КодГородаВКоде = &КодГорода И
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПункта И
	              |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицы И
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	Запрос.УстановитьПараметр("КодРайона", КодРайона);
	Запрос.УстановитьПараметр("КодГорода", КодГорода);
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	Запрос.УстановитьПараметр("КодУлицы", КодУлицы);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		                         Выборка.Код,
		                         Выборка.Наименование,
		                         Выборка.Сокращение,
		                         Выборка.ТипАдресногоЭлемента,
		                         Выборка.Индекс,
		                         Выборка.КодРегионаВКоде,
		                         Выборка.КодРайонаВКоде,
		                         Выборка.КодГородаВКоде,
		                         Выборка.КодНаселенногоПунктаВКоде,
		                         Выборка.КодУлицыВКоде);

	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Структура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
		
		Если ТипАдрЭлемента <= 5 Тогда
			
			КодЭлемента = КодЭлементаРодителя;
			
			РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

			Если КодРегиона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде)";
				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
			КонецЕсли;
			
			Если КодРайона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
			КонецЕсли;
			
			Если КодГорода <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
			КонецЕсли;
			
			Если КодНаселенногоПункта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
			КонецЕсли;
			
			Если КодУлицы <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
			КонецЕсли;
		
		Иначе
			// ограничиваем по коду элемента
			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
			
			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗначениеКода И &КонечноеЗначениеКода)";
			Запрос.УстановитьПараметр("НачальноеЗначениеКода", КодЭлементаРодителя);
			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				  |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде

	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Наименование = &Наименование И
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
				  ОграничениеПоКоду;
	

	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	Иначе 
		Структура =  ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат ВРЕГ(СтрЗаменить("" + Номер, " ", "")) = ВРЕГ(СтрЗаменить("" + Интервал, " ", ""));
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли СтрНайти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = СтрНайти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = ВыделитьЧислоИЗСтроки(Лев(Интервал, Позиция - 1));
		МаксЗначение = ВыделитьЧислоИЗСтроки(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

Функция ВыделитьЧислоИЗСтроки(СтрокаСимволов)
	
	Набор = "0";
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		Если КодСимвола(СтрокаСимволов, Индекс) >= 48 И КодСимвола(СтрокаСимволов, Индекс) <= 57 Тогда
			Набор = Набор + Сред(СтрокаСимволов, Индекс, 1);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Число(Набор);
	
КонецФункции

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = СтрНайти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", 6);
	Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 10000000000) * 10000000000);
	Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 10000000000 + 1) * 10000000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИндексДома) Тогда
		Возврат Улица.Индекс;
	Иначе
		Возврат ИндексДома;
	КонецЕсли;
	
КонецФункции

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
        РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - СТАНДАРТНЫЕ ОБРАБОТЧИКИ ПРИ РАБОТЕ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

#Если Клиент Тогда
	
// Процедура устанавливает последние значения тайпинга для адресныхЭлементов
Процедура УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов(Регион, Район, Город, НаселенныйПункт, Улица,
							ПоследнееЗначениеРегион, ПоследнееЗначениеРайон, ПоследнееЗначениеГород, ПоследнееЗначениеНаселенныйПункт, ПоследнееЗначениеУлица) Экспорт
	
	ПоследнееЗначениеРегион          = Регион;
	ПоследнееЗначениеРайон           = Район;
	ПоследнееЗначениеГород           = Город;
	ПоследнееЗначениеНаселенныйПункт = НаселенныйПункт;
	ПоследнееЗначениеУлица           = Улица;
	
КонецПроцедуры // УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов()

// Процедура модального редактирования адреса
Процедура РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма = Неопределено, КлючФормы = Неопределено) Экспорт
	
	ОбработкаРедактированияАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактированияАдреса.мВозвратСтруктуры = Истина;	
	ОбработкаРедактированияАдреса.РедактироватьМодальноЭлементАдресаРазделенногоЗапятыми(Элемент, ЭтаФорма, КлючФормы);
	
КонецПроцедуры

// Стандартный обработчик "Начало выбора из списка" для выпадающего списка сокращений адресного элемента
Процедура АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень) Экспорт
	
	СтандартнаяОбработка = Ложь;
	НазваниеТерриториальнойЕдиницы = СокрЛП(ОбрезатьСокращение(ПолеРедактирования));
	СписокСокращений = ПолучитьСписокСокращений(НазваниеТерриториальнойЕдиницы, Уровень);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ЭтаФорма.ВыбратьИзСписка(СписокСокращений, Элемент);
		Если Сокращение <> Неопределено Тогда
			ПолеРедактирования = НазваниеТерриториальнойЕдиницы + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // АдресныйЭлементПриВыбореИзСпискаСокращений()

// Процедура автоподбора текста для адресного элемента
Процедура АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента, СтруктураЭлемента) Экспорт
	
	МассивПоиска = Новый Массив();
	МассивПоиска.Добавить("Наименование");
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
		
	СтруктураЭлемента = ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураОграничений, 
												  "АдресныйКлассификатор", МассивПоиска, "Наименование");
	
КонецПроцедуры

// Функция определяет необходимый уровень для детализации имени адресного элемента
Функция ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
	
	НачальныйУровеньАдреса = 1;
	
	Если ЗначениеЗаполнено(ПолеРегиона) И (УровеньЭлемента >= 2) Тогда
		НачальныйУровеньАдреса = 2;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеРайона) И (УровеньЭлемента >= 3) Тогда
		НачальныйУровеньАдреса = 3;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеГорода) И (УровеньЭлемента >= 4) Тогда
		НачальныйУровеньАдреса = 4;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеНаселенногоПункта) И (УровеньЭлемента >= 5) Тогда
		НачальныйУровеньАдреса = 5;	
	КонецЕсли;
	
	Возврат НачальныйУровеньАдреса;		
КонецФункции
											  
// Процедура обработки окончания ввода текста для адресного элемента
Процедура АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
	НачальныйУровеньДетализацииАдреса = ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента);
	
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, 
		СтруктураОграничений, ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, НачальныйУровеньДетализацииАдреса, УровеньЭлемента - 1);
		
КонецПроцедуры
	
// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаГорода(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, 
													ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, 2, Истина);
		
КонецПроцедуры

// Процедура обработки подбора текста для Города
Функция АвтоПодборТекстаВЭлементеУправленияПоГороду(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаГорода(Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = ПроцедурыПоискаПоСтроке.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// Процедура обработки окончания ввода текста для Города
Процедура АдресныйЭлементОкончаниеВводаТекстаУлицы(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеГорода, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, 
													ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	СтруктураЭлемента = Новый Структура();
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправленияПоГородуУлице(Элемент, Текст, Значение, СтандартнаяОбработка, 
		ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, 6, Ложь, ПолеГорода);
		
КонецПроцедуры
	
// Процедура обработки подбора текста для Улице
Функция АвтоПодборТекстаВЭлементеУправленияПоУлице(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолеГорода) Экспорт

	РезультатЗапроса = ВернутьРезультатЗапросаПоискаУлицыГорода(ПолеГорода, Текст, 2);
	МассивПолеВыбора = Новый Массив();
	МассивПолеВыбора.Добавить("Наименование");
	СтруктураНайденногоЭлемента = ПроцедурыПоискаПоСтроке.ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МассивПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

// функция возвращает результат запроса для поиска города
Функция ВернутьРезультатЗапросаПоискаГорода(ИмяГорода, КоличествоСтрокВыборки) Экспорт
	
	ОграничениеПоИмени = ПроцедурыПоискаПоСтроке.СформироватьОграничениеПоПолюВхождениеВНачало("АдресныйКлассификатор.Наименование", Тип("Строка"));
	
	НачалоЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(КоличествоСтрокВыборки) + " 
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
				  | " + ОграничениеПоИмени + "
				  |	И "; 
				  
	ТекстЗапроса = НачалоЗапроса + " (АдресныйКлассификатор.ТипАдресногоЭлемента = 3 ) 
					| Объединить ВСЕ 
					| 
					|" + НачалоЗапроса + "  			  
	 			  	|	  (АдресныйКлассификатор.ТипАдресногоЭлемента = 1) 
				  	| 	И (АдресныйКлассификатор.КодРегионаВКоде В (77, 78)) 
				  	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", ИмяГорода + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Возврат РезультатЗапроса;
	
КонецФункции

// функция возвращает результат запроса для поиска улицы города
Функция ВернутьРезультатЗапросаПоискаУлицыГорода(ИмяГорода, ИмяУлицы, КоличествоСтрокВыборки) Экспорт
	
	МассивИменПоиска = Новый Массив();
	МассивИменПоиска.Добавить("Наименование");
	
	СтруктураОграничений = СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода);
	РезультатПодбора = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбораДляРегистра(ИмяУлицы, СтруктураОграничений, "АдресныйКлассификатор", МассивИменПоиска, КоличествоСтрокВыборки);
	
	Возврат РезультатПодбора;

КонецФункции



#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм, 
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка, Свидетельство");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
	Если ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + "
		//rg-soft - начало изменения
		//|	Организации.НаименованиеСокращенное КАК СокращенноеНаименование,
		//|	ВЫБОР 
		//|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
		//|			ТОГДА Организации.НаименованиеСокращенное 
		//|		ИНАЧЕ
		//|			Организации.НаименованиеПолное
		//|	КОНЕЦ КАК НаименованиеДляПечатныхФорм,
		//rg-soft - конец изменения
		|   Организации.НаименованиеПолное как НаименованиеДляПечатныхФорм,
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Организации.Представление КАК СокращенноеНаименование,
		|	Организации.НаименованиеПолное КАК НаименованиеДляПечатныхФорм,";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
		
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено) Тогда

		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		
		Если ЮрФизЛицо.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			Сведения.КПП = Данные.КПП;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			
			Сведения.Свидетельство = "свидетельство " + Данные.СвидетельствоСерияНомер + " от " + Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");
			
		КонецЕсли;

	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		Сведения.КПП       = Данные.КПП;
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование",          СокрЛП(Данные.ПолноеНаименование));
	Сведения.Вставить("СокращенноеНаименование",     ""); // СокрЛП(Данные.СокращенноеНаименование));   изменено rg-soft
	Сведения.Вставить("НаименованиеДляПечатныхФорм", СокрЛП(Данные.НаименованиеДляПечатныхФорм));
	Сведения.Вставить("Представление",               СокрЛП(Данные.Наименование));
	
	Сведения.Вставить("ИНН",              Данные.ИНН);
	Сведения.Вставить("Телефоны",         ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
	Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
	Сведения.Вставить("Банк",             Данные.Банк);
	Сведения.Вставить("БИК",              Данные.БИК);
	Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
	Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
	Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический"));
	Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));

	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
		Сведения.ПолноеНаименование = Сведения.Представление;
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	ОбъектКонтактнойИнформации = Объект;
	
	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		
		Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			
			ОбъектКонтактнойИнформации = Объект.ИндивидуальныйПредприниматель;
			
			Окончание = "ФизЛица";
			
		Иначе
			
			Окончание = "Организации";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Окончание = "Контрагента";
		
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание];

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	
	ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание];

	Факс = "";
	
	Если Окончание = "Организации" Тогда
		
		ВидФакса = Справочники.ВидыКонтактнойИнформации["ФаксОрганизации"];
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид"   , ВидФакса);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Факс = ", факс: " + РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
	КонецЕсли;


	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Если Окончание = "Организации" Тогда
		Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Запрос.УстановитьПараметр("Объект", Объект.ИндивидуальныйПредприниматель);
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление + Факс;
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция раскладывает номер телефона, по полям для записи в КИ объекта
//
// Параметры
//  
//  НомерТелефона - строка, номер телефона для преобразования
//
// Возвращаемое значение:
//   Список значений
//
Функция РазложитьТелефонПоПолям(НомерТелефона) Экспорт

	КодСтраны = "";
	НачалоКодаСтраны = СтрНайти(НомерТелефона, "+");
	Если НачалоКодаСтраны > 0 Тогда
		Для а = (НачалоКодаСтраны + 1) По СтрДлина(НомерТелефона) Цикл
			Если Сред(НомерТелефона, а, 1) = " " Тогда
				Прервать;
			КонецЕсли; 
			КодСтраны = КодСтраны + Сред(НомерТелефона, а, 1);
		КонецЦикла; 
	КонецЕсли; 
	КодСтраны = СокрЛП(КодСтраны);

	КодГорода = "";
	Если СтрЧислоВхождений(НомерТелефона, "(") = 1 И СтрЧислоВхождений(НомерТелефона, ")") = 1 Тогда
		НачалоКодаГорода = СтрНайти(НомерТелефона, "(");
		КонецКодаГорода = СтрНайти(НомерТелефона, ")");
		Если КонецКодаГорода > НачалоКодаГорода Тогда
			КодГорода = Сред(НомерТелефона, (НачалоКодаГорода + 1), (КонецКодаГорода - НачалоКодаГорода - 1));
		КонецЕсли;
	КонецЕсли;
	КодГорода = СокрЛП(КодГорода);

	СамТелефон = НомерТелефона;
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("+" + КодСтраны), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("(" + КодГорода + ")"), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодСтраны) И Лев(СокрЛ(КодСтраны), 1) <> "+" Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Пока Лев(КодСтраны, 1) = "0" Цикл
			КодСтраны = Сред(КодСтраны, 2);
		КонецЦикла;
		Если НЕ ПустаяСтрока(КодСтраны) Тогда
			КодСтраны = "+" + КодСтраны;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон", КодСтраны, КодГорода, ПривестиНомерТелефонаКШаблону(СамТелефон));
	
	Возврат СтруктураПолейТелефона;

КонецФункции // ()

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()


#Если Клиент Тогда

// Процедура по коду адресного элемента возвращает строковые представления его иерархии
Процедура ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом) Экспорт
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
		Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;	
	
КонецПроцедуры

// Стандартный обработчик "При Изменении" адресного элемента
Процедура АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, 
			ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	
КонецПроцедуры

//  Процедура формирует строковое представление адресных элементов -
// "родителей" переданного в переданных параметрах
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Элемент) Экспорт

	Если (Элемент.ТипАдресногоЭлемента > 4) И НЕ ЗначениеЗаполнено(НаселенныйПункт) Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаНасПункта(), 4);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 3) И НЕ ЗначениеЗаполнено(Город) Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаГорода(), 3);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 2) И НЕ ЗначениеЗаполнено(Район) Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРайона(), 2);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 1) И НЕ ЗначениеЗаполнено(Регион) Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРегиона(), 1);
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает имя адресного элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента) Экспорт
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

//  Процедура проверяет правильность заполнения потомков определенного адресного элемента
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Регион, Район, Город, НаселенныйПункт, Улица, Элемент) Экспорт
	
	КодЭлемента = Неопределено;
	
	ИмяРегиона = ?(Элемент.ТипАдресногоЭлемента = 1, Элемент.Наименование, Регион);
	ИмяРайона = ?(Элемент.ТипАдресногоЭлемента = 2, Элемент.Наименование, Район);
	ИмяГорода = ?(Элемент.ТипАдресногоЭлемента = 3, Элемент.Наименование, Город);
	ИмяНаселенногоПункта = ?(Элемент.ТипАдресногоЭлемента = 4, Элемент.Наименование, НаселенныйПункт);
	ИмяУлицы = ?(Элемент.ТипАдресногоЭлемента = 5, Элемент.Наименование, Улица);
	
	Если (Элемент.ТипАдресногоЭлемента < 2) И ЗначениеЗаполнено(ИмяРайона) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, "", "", "", 2);
		СтруктураОграничений.Свойство("КодРайонаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) Тогда
			// очищаем элемент и все что ниже него по иерархии
			Район = "";	
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента < 3) И ЗначениеЗаполнено(ИмяГорода) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, "", "", 3);
		СтруктураОграничений.Свойство("КодГородаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 4) И ЗначениеЗаполнено(ИмяНаселенногоПункта) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, "", 4);
		СтруктураОграничений.Свойство("КодНаселенногоПунктаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) 	Тогда
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 5) И ЗначениеЗаполнено(ИмяУлицы) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, ИмяУлицы, 5);
		СтруктураОграничений.Свойство("КодУлицыВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Улица = "";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция по адресу возвращает структуру ограничений	
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) Экспорт 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя);
			
	Иначе
		СтруктураОграничений = Новый Структура();
	КонецЕсли;
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы)
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции


// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРегионаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 1);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 5);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры


// Процедура обрабатывает событие ПередНачаломДобавления в форме списка
// справочника КонтактныеЛицаКонтрагентов
//
Процедура ПередНачаломДобавленияКонтактногоЛица(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, СправочникСписок, ЭтаФорма) Экспорт

	Если НЕ ЭтоГруппа
	   И НЕ Копирование
	   И ((СправочникСписок.Отбор.ОбъектВладелец.Использование И СправочникСписок.Отбор.ОбъектВладелец.ВидСравнения = ВидСравнения.Равно)
	 ИЛИ (СправочникСписок.Отбор.ВидКонтактногоЛица.Использование И СправочникСписок.Отбор.ВидКонтактногоЛица.ВидСравнения = ВидСравнения.Равно)) Тогда

		Отказ = Истина;

		НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Если СправочникСписок.Отбор.ОбъектВладелец.Использование Тогда
			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			НовыйОбъект.ОбъектВладелец     = СправочникСписок.Отбор.ОбъектВладелец.Значение;

		Иначе
			НовыйОбъект.ВидКонтактногоЛица = СправочникСписок.Отбор.ВидКонтактногоЛица.Значение;

		КонецЕсли;

		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();

	КонецЕсли;

КонецПроцедуры

// Стандартный обработчик "Обработка выбора" адресного элемента
Процедура АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись) Экспорт
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РежимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура ОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбораГруппы", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры



// Функция возвращает представление адреса за пределами РФ без Страны
Функция ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(Страна, Представление) Экспорт
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
		
		ИмяСтраны = Страна + ", ";
		ПозицияСтраныВАдресе = СтрНайти(Представление, ИмяСтраны);
		// Если только страна в начале, то удаляем ее, иначе не трогаем
		Если ПозицияСтраныВАдресе = 1 Тогда
			ТекущееПредставлениеАдреса = Сред(Представление, СтрДлина(ИмяСтраны) + 1);	
		КонецЕсли;
		
	Иначе
		ТекущееПредставлениеАдреса = Представление;
	КонецЕсли;

	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Процедура формирует представление для Адреса за пределами РФ
Функция СформироватьПредставлениеАдресаЗаПределамиРФ(Страна, Представление) Экспорт

	ТекущееПредставлениеАдреса = Представление;	
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
			
		ПозицияСтраныВАдресе = СтрНайти(Представление, Страна);
		// добавляем страну в самое начало представления, если ее там еще нет
		Если ПозицияСтраныВАдресе <> 1 Тогда
			ТекущееПредставлениеАдреса = Страна + ", " + Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Функция возвращает структуру ограничений улицы по городу
Функция СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода) Экспорт
	
	ОбрезанноеИмяГорода = ВРег(ОбрезатьСокращение(ИмяГорода));
	
	Если ОбрезанноеИмяГорода = "МОСКВА" ИЛИ ОбрезанноеИмяГорода = "САНКТ-ПЕТЕРБУРГ" Тогда
		//это вот и есть исключение
		СтруктураОграничений = Новый Структура();
		
		КодРегионаВКоде = ?(ОбрезанноеИмяГорода = "МОСКВА", 77, 78);
		СтруктураОграничений.Вставить("КодРегионаВКоде", КодРегионаВКоде);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", 5);
		
	Иначе
		// ищем только для города
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу("", "", ОбрезанноеИмяГорода, "", "", 5);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		
	КонецЕсли;

	Возврат СтруктураОграничений;
	
КонецФункции

#КонецЕсли

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции



#Если Клиент Тогда


////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ КОНТАКТНОЙ ИНФОРМАЦИИ В ДИАЛОГЕ

// Редактировать прочую контактную информацию                                  
Процедура РедактироватьПрочуюКИ(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	//Форма = ПолучитьОбщуюФорму("РедактированиеПрочейКИ");
	//Форма.СтруктураДляРедактирования = СтруктураДляРедактирования;
	//Форма.ВладелецФормы  = ЭтаФорма;
	//Форма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	//Форма.ОткрытьМодально();
	//
	//ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);

КонецПроцедуры

// Редактировать контактную информацию в диалоге
Функция РедактироватьКонтактнуюИнформациюВДиалоге(Запись, НаборЗаписей, ФормаВладелец) Экспорт

	Если Запись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.Вид                     = Запись.Вид;
	ОбработкаРедактирования.Тип                     = Запись.Тип;
	ОбработкаРедактирования.ДоступностьОбъекта      = Ложь;
	//ОбработкаРедактирования.ОтключитьКнопкуЗаписать = Истина;                         // нет таких реквизитов
	//ОбработкаРедактирования.ТолькоПросмотрФормы     = ФормаВладелец.ТолькоПросмотр;   // нет таких реквизитов
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		СоответствиеПредставлений = Новый Соответствие;
		
		Для Каждого ЗаписьИзНабора Из НаборЗаписей Цикл
			Если ЗаписьИзНабора.Тип = Запись.Тип И Не ПустаяСтрока(ЗаписьИзНабора.Представление) Тогда
				Если СоответствиеПредставлений.Получить(ЗаписьИзНабора.Представление) = Неопределено Тогда
					//ОбработкаРедактирования.АдресаДляКопирования.Добавить(ЗаписьИзНабора, ЗаписьИзНабора.Представление); //нет такого реквизита
					//СоответствиеПредставлений.Вставить(ЗаписьИзНабора.Представление, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаРедактирования.РедактироватьЗапись(Запись, , ФормаВладелец, , Истина);

КонецФункции // РедактироватьКонтактнуюИнформациюВДиалоге()

// Открыть форму настройки видов контактной информации по объекту
Процедура ОткрытьФормуНастройкиВидовКИ(ВидОбъектаКИ) Экспорт

	Форма = Справочники.ВидыКонтактнойИнформации.ПолучитьФормуСписка("ФормаСписка", , ВидОбъектаКИ);
	Форма.СправочникСписок.Отбор.ВидОбъектаКонтактнойИнформации.Установить(ВидОбъектаКИ);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.ВидОбъектаКонтактнойИнформации.Видимость = Ложь;
	Форма.СправочникСписок.Порядок.Установить("Порядок,Наименование");
	Форма.Открыть();

КонецПроцедуры

// Отобразить надписи, настроить вид, создать доп. кнопки для элементов связанных с вводом КИ
Процедура ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ТолькоПросмотр) Экспорт

	СтруктураДляРедактирования.ДопКнопки.Очистить();
	
	// Настроим основные поля ввода, кнопки и надписи связанные с контактной информацией
	ВсегоВидовКИ    = СтруктураДляРедактирования.Настройки.Количество();
	текНомерВидаКИ = 0;
	Для Каждого СтрПоля Из СтруктураДляРедактирования.Элементы Цикл
		
		// определим какой вид КИ будет отображаться в поле ввода
		СтрВидаКИ = Неопределено;
		Пока текНомерВидаКИ < ВсегоВидовКИ Цикл
			Стр = СтруктураДляРедактирования.Настройки.Получить(текНомерВидаКИ);
			Если Стр.Вид <> СтруктураДляРедактирования.ВидПрочейКИ Тогда
				СтрВидаКИ = Стр;
				Прервать;
			КонецЕсли;
			
			текНомерВидаКИ = текНомерВидаКИ + 1;
		КонецЦикла;
		текНомерВидаКИ = текНомерВидаКИ + 1;
		СтрПоля.СтрНастройки = СтрВидаКИ;
		
		// если не нашелся вид КИ то скроем элементы
		Если СтрВидаКИ = Неопределено Тогда
			Если СтрПоля.Кнопка <> Неопределено Тогда
				СтрПоля.Кнопка.Видимость    = Ложь;
			КонецЕсли;
			СтрПоля.ПолеВвода.Видимость = Ложь;
			СтрПоля.Надпись.Видимость   = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрПоля.Тип = СтрВидаКИ.Тип;
		
		// получим прочие виды такого же типа
		масВидов = ПолучитьПрочиеВидыТакогоЖеТипа(СтруктураДляРедактирования.Настройки, СтрВидаКИ.Тип, СтрВидаКИ.Вид);
		
		// настроим поле ввода
		Поле = СтрПоля.ПолеВвода;
		Поле.Видимость            = Истина;
		Поле.КнопкаВыбора         = ЕстьКнопкаВыбораКИ(СтрВидаКИ.Тип);
		Поле.КнопкаОткрытия       = ЕстьКнопкаОткрытияКИ(СтрВидаКИ.Тип);
		Поле.РедактированиеТекста = Не СтрВидаКИ.РедактированиеВДиалоге;
		Поле.ЦветФонаПоля         = ?(СтрВидаКИ.РедактированиеВДиалоге, Новый Цвет(255, 251, 245), ЦветаСтиля.ЦветФонаПоля);
		
		// картинка для вида КИ
		Картинка = ПолучитьКартинкуПоТипу(СтрВидаКИ.Тип, СтрВидаКИ.НомерКартинки);
		
		ОтображатьКнопки = СтруктураДляРедактирования.ОтображатьКнопкиВместоНадписей И СтруктураДляРедактирования.ЕстьПолныеПрава;
		
		// настроим надпись
		Надпись = СтрПоля.Надпись;
		Если ОтображатьКнопки Тогда
			Надпись.Видимость = Ложь;
		Иначе
			Надпись.Видимость = Истина;
			Надпись.Картинка  = Картинка;
			Надпись.Заголовок = "  " + СтрВидаКИ.Наименование + ":";
		КонецЕсли;
		
		// настроим кнопку
		Кнопка = СтрПоля.Кнопка;
		Если Кнопка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Кнопка.Кнопки.Очистить();
		Если Не ОтображатьКнопки Тогда
			Кнопка.Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		Кнопка.Видимость = Истина;
		Кнопка.Картинка  = Картинка;
		Кнопка.Заголовок = СтрВидаКИ.Наименование;
		
		// заполним дополнительные кнопки
		Для Каждого СтрВида Из СтруктураДляРедактирования.Настройки Цикл
			Если ТипЗнч(СтрВида.Вид) = Тип("Строка") Тогда
				Продолжить;
			ИначеЕсли СтрВида.Вид = СтруктураДляРедактирования.ВидПрочейКИ Тогда
				Продолжить;
			ИначеЕсли СтрВида.Вид = СтрВидаКИ.Вид Тогда
				Продолжить;
			КонецЕсли;
			
			Картинка = ПолучитьКартинкуПоТипу(СтрВида.Тип, СтрВида.НомерКартинки);
			ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, СтрВида.Вид, СтрВидаКИ.Вид, СтрВида.Наименование, СтруктураДляРедактирования.ОбработчикДляДопКнопок, Картинка, 1);
		КонецЦикла;
		
		// Разделитель
		Кнопка.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
		
		// Кнопка Добавить
		//ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, Неопределено, СтрВидаКИ.Вид, "Добавить новый вид контактной информации", СтруктураДляРедактирования.ОбработчикДляДопКнопок, БиблиотекаКартинок.КИДобавить, 2);
		ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, Неопределено, СтрВидаКИ.Вид, "Добавить новый вид контактной информации", СтруктураДляРедактирования.ОбработчикДляДопКнопок,, 2);

		// Кнопка Скопировать
		Если масВидов.Количество() > 0 И Не ТолькоПросмотр Тогда
			ДобавитьДополнительнуюКнопку(Кнопка.Кнопки, СтруктураДляРедактирования, Кнопка, Неопределено, СтрВидаКИ.Вид, "Скопировать из ...", СтруктураДляРедактирования.ОбработчикДляДопКнопок, Картинка, 3);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительнуюКнопку(Кнопки, СтруктураДляРедактирования, КнопкаВладелец, Вид, ВидВладельца, ТекстКнопки, Обработчик, Картинка, ТипДействия)

	новКнопка = Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Действие, ТекстКнопки, Обработчик);
	Если Картинка <> Неопределено Тогда
		новКнопка.Картинка = Картинка;
	КонецЕсли;
	
	новСтр = СтруктураДляРедактирования.ДопКнопки.Добавить();
	новСтр.Кнопка         = новКнопка;
	новСтр.КнопкаВладелец = КнопкаВладелец;
	новСтр.Вид            = Вид;
	новСтр.ВидВладельца   = ВидВладельца;
	новСтр.ТипДействия    = ТипДействия;

КонецПроцедуры

// Заполнить значения полей ввода на основной форме и установить картинку в надписи "Прочая КИ"
Процедура ЗаполнитьЗначенияКИ(СтруктураДляРедактирования) Экспорт
	// очистим сначала все поля ввода
	Для Каждого Стр из СтруктураДляРедактирования.Элементы Цикл
		Стр.ПолеВвода.Значение = "";
	КонецЦикла;
	
	Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
		СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = "";
	КонецЕсли;
	
	КолвоПрочейКИ = 0;
	Для Каждого Запись Из СтруктураДляРедактирования.НаборКонтактнойИнформации Цикл
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Вид", Запись.Вид);
			Отбор.Вставить("Тип", Запись.Тип);
			Строки = СтруктураДляРедактирования.Настройки.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				КолвоПрочейКИ = КолвоПрочейКИ + 1;
				Продолжить;
			КонецЕсли;
			
			Стр = СтруктураДляРедактирования.Элементы.Найти(Строки[0], "СтрНастройки");
			Если Стр<>Неопределено Тогда
				Стр.ПолеВвода.Значение = Запись.Представление;
			Иначе
				Если Запись.Вид = СтруктураДляРедактирования.ВидПрочейКИ Тогда
					Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
						СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = Запись.Представление;
					КонецЕсли;
				Иначе
					КолвоПрочейКИ = КолвоПрочейКИ + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДляРедактирования.НадписьПрочаяКИ <> Неопределено Тогда
		СтруктураДляРедактирования.НадписьПрочаяКИ.Заголовок = "Прочая контактная информация (" + ?(КолвоПрочейКИ = 0, "пусто", КолвоПрочейКИ) + ")";
	КонецЕсли;

КонецПроцедуры

// Проверить необходимость скопировать введенные данные в другой вид КИ
Процедура ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, ТабЗнКИ) Экспорт

	Если (Запись = Неопределено) ИЛИ ПустаяСтрока(Запись.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	// найдем виды в которые нужно скопировать
	СтрЗамены = СтруктураДляРедактирования.Замены.Найти(Запись.Вид, "Вид1");
	Если СтрЗамены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// найдем запись которую надо заменять
	ЗаписьЗаменяемого = Неопределено;
	Для Каждого ЗаписьПоиска Из СтруктураДляРедактирования.НаборКонтактнойИнформации Цикл
		Если ЗаписьПоиска.Вид = СтрЗамены.Вид2 Тогда
			ЗаписьЗаменяемого = ЗаписьПоиска;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если (ЗаписьЗаменяемого = Неопределено) ИЛИ (Запись.Представление = ЗаписьЗаменяемого.Представление) ИЛИ Не ПустаяСтрока(ЗаписьЗаменяемого.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	// спросим, нужно ли заменять
	//СтрВопроса = "Скопировать """ + Запись.Вид + """ в """ + СтрЗамены.Вид2 + """?";
	СтрВопроса = "Изменился " + Запись.Вид.Наименование + ".
	|Автоматически изменить " + СтрЗамены.Вид2.Наименование + "?";
	
	Если Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// запишем новые данные
	СкопироватьДанныеКИИзЗаписиВДругую(Запись, ЗаписьЗаменяемого);
	
	// заменим значение на основной форме
	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(СтрЗамены.Вид2, "Вид");
	Если СтрНастройки <> Неопределено Тогда
		СтрЭл = СтруктураДляРедактирования.Элементы.Найти(СтрНастройки, "СтрНастройки");
		Если СтрЭл <> Неопределено Тогда
			СтрЭл.ПолеВвода.Значение = Запись.Представление;
		КонецЕсли;
	КонецЕсли;
	
	// проверим, нужно ли менять в таблице значений
	Если ТабЗнКИ <> Неопределено Тогда
		СтрКИ = ТабЗнКИ.Найти(СтрЗамены.Вид2, "Вид");
		Если СтрКИ <> Неопределено Тогда
			СтрКИ.Представление = Запись.Представление;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

// Нажатие на одну из дополнительных кнопок
Процедура НажатиеДопКнопкиКИ(СтруктураДляРедактирования, Кнопка, ЭтаФорма) Экспорт

	СтрДопКнопки = СтруктураДляРедактирования.ДопКнопки.Найти(Кнопка, "Кнопка");
	Если СтрДопКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаВладелец = СтрДопКнопки.КнопкаВладелец;
	СтрКнопки = СтруктураДляРедактирования.Элементы.Найти(КнопкаВладелец, "Кнопка");
	Если СтрКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Вид = СтрДопКнопки.Вид;
	ВидВладельца = СтрДопКнопки.ВидВладельца;
	Тип = СтрКнопки.Тип;
	
	Если СтрДопКнопки.ТипДействия = 1 Тогда
		// замена позиции
		Стр1 = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
		Стр2 = СтруктураДляРедактирования.Настройки.Найти(ВидВладельца, "Вид");
		Если (Стр1<>Неопределено) И (Стр2<>Неопределено) Тогда
			Попытка
			
				НачатьТранзакцию();
				
				Объект1 = Вид.ПолучитьОбъект();
				Объект2 = ВидВладельца.ПолучитьОбъект();
				
				Порядок = Объект1.Порядок;
				Объект1.Порядок = Объект2.Порядок;
				Объект2.Порядок = Порядок;
				Объект1.Записать();
				Объект2.Записать();
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
				Возврат;
				
			КонецПопытки;
			
			СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(СтруктураДляРедактирования.ВидОбъекта);
			ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
			ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
		КонецЕсли;
		
	ИначеЕсли СтрДопКнопки.ТипДействия = 2 Тогда
		// создание нового вида
		//Форма = Обработки.РедактированиеКонтактнойИнформации.ПолучитьФорму("ФормаСозданияНовогоВида");
		//Форма.ВидОбъекта = СтруктураДляРедактирования.ВидОбъекта;
		//Форма.ЗаменяемыйВид = ВидВладельца;
		//Результат = Форма.ОткрытьМодально();
		Результат = Неопределено;
		Если ТипЗнч(Результат) <> Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Возврат;
		КонецЕсли;  		
		
		// добавим запись в набор записей регистра сведений
		Запись = СтруктураДляРедактирования.НаборКонтактнойИнформации.Добавить();
		Запись.Тип = Результат.Тип;
		Запись.Вид = Результат;
		
		СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(СтруктураДляРедактирования.ВидОбъекта);
		
		ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
		ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
		
		// откроем форму редактирования
		КнопкаКИНажатие(СтруктураДляРедактирования, КнопкаВладелец, ЭтаФорма);
		
	ИначеЕсли СтрДопКнопки.ТипДействия = 3 Тогда
		
		// копирование значения
		ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, Тип, ВидВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении значения в поле ввода
Процедура ПолеВводаКИПриИзменении(СтруктураДляРедактирования, Элемент) Экспорт

	СтрокаЭлемента = СтруктураДляРедактирования.Элементы.Найти(Элемент, "ПолеВвода");
	Если СтрокаЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтрокаЭлемента.СтрНастройки.Вид, СтрокаЭлемента.Тип);
	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоляВЗаписиПоПредставлению(Запись, Элемент.Значение);
	ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, Неопределено);

КонецПроцедуры

// При начале выбора в поле ввода
Процедура ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СтрЭл = СтруктураДляРедактирования.Элементы.Найти(Элемент, "ПолеВвода,Кнопка");
	Если СтрЭл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтрЭл.СтрНастройки.Вид, СтрЭл.Тип);
	
	СтруктураДляРедактирования.ОткрытаФормаРедактирования = Истина;
	
	РедактироватьКонтактнуюИнформациюВДиалоге(Запись, СтруктураДляРедактирования.НаборКонтактнойИнформации, ЭтаФорма);
	
	СтруктураДляРедактирования.ТекущийЭлемент = Элемент;
	СтруктураДляРедактирования.ОткрытаФормаРедактирования = Ложь;
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
	ПроверитьНеобходимостьКопированияКИ(Запись, СтруктураДляРедактирования, Неопределено);
	
КонецПроцедуры

// При нажатии кнопки открытие в поле ввода
Процедура ПолеВводаКИОткрытие(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// При очистке в поле ввода
Процедура ПолеВводаКИОчистка(СтруктураДляРедактирования, Элемент, СтандартнаяОбработка) Экспорт
	
	// если не изменить текущий элемент, то после очистки адреса будет открываться форма
	СтруктураДляРедактирования.ТекущийЭлемент = Элемент;
	
КонецПроцедуры

// Нажатие на кнопку контактной информации
Процедура КнопкаКИНажатие(СтруктураДляРедактирования, Элемент, ЭтаФорма) Экспорт
	
	ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, Элемент, Ложь, ЭтаФорма);
	
КонецПроцедуры

// При изменении значения в поле ввода прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(СтруктураДляРедактирования, Элемент) Экспорт

	Запись = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, СтруктураДляРедактирования.ВидПрочейКИ, Перечисления.ТипыКонтактнойИнформации.Другое);
	Если Запись <> Неопределено Тогда
		Запись.Представление = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	ПолеВвода = ЭтаФорма.ТекущийЭлемент;
	СтрЭлемента = СтруктураДляРедактирования.Элементы.Найти(ПолеВвода, "ПолеВвода");
	
	Если СтрЭлемента <> Неопределено Тогда
		ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, СтрЭлемента.СтрНастройки.Тип, СтрЭлемента.СтрНастройки.Вид);
	КонецЕсли;

КонецПроцедуры

Процедура РедактированиеНастроекОтображенияКИНажатие(СтруктураДляРедактирования, ЭтаФорма, КоличествоПолейВводаНаФорме) Экспорт

	ВидОбъекта = СтруктураДляРедактирования.ВидОбъекта;
	Форма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаСписка",,ВидОбъекта);
	Форма.СправочникСписок.Отбор.ВидОбъектаКонтактнойИнформации.Установить(ВидОбъекта);
	Форма.СправочникСписок.Порядок.Установить("Порядок");
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.ВидОбъектаКонтактнойИнформации.Видимость = Ложь;
	Форма.ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость = Ложь;
	Форма.ОткрытьМодально();
	
	СтруктураДляРедактирования.Настройки = ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта);
	ОтобразитьЭлементыВводаКИ(СтруктураДляРедактирования, ЭтаФорма.ТолькоПросмотр);
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);

КонецПроцедуры

// Выполнить обработку после смены текущего элемента в форме
Процедура ОбработатьПроверкуСменыТекущегоЭлемента(СтруктураДляРедактирования, ЭтаФорма) Экспорт

	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
	ТекущаяСтраница    = ?(СтруктураДляРедактирования.ОсновнаяПанельФормы = Неопределено, Неопределено, СтруктураДляРедактирования.ОсновнаяПанельФормы.ТекущаяСтраница);
	СтраницаИзменилась = ТекущаяСтраница <> СтруктураДляРедактирования.ТекущаяСтраница;
	СтруктураДляРедактирования.ТекущаяСтраница = ТекущаяСтраница;
	
	Стр = СтруктураДляРедактирования.Элементы.Найти(ТекущийЭлемент, "ПолеВвода");
	Если СтраницаИзменилась И (Стр <> Неопределено) И ПустаяСтрока(Стр.ПолеВвода.Значение) И (Стр.СтрНастройки <> Неопределено) И (Стр.СтрНастройки.РедактированиеВДиалоге) Тогда
		Если Не СтруктураДляРедактирования.ОткрытаФормаРедактирования Тогда
			Если СтруктураДляРедактирования.НадписьПрочаяКИ <> Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент = СтруктураДляРедактирования.НадписьПрочаяКИ;
				СтруктураДляРедактирования.ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
			ИначеЕсли СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент = СтруктураДляРедактирования.ПолеВводаПрочейКИ;
				СтруктураДляРедактирования.ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЭлемент = СтруктураДляРедактирования.ТекущийЭлемент ИЛИ СтраницаИзменилась Тогда
		СтруктураДляРедактирования.ТекущийЭлемент = ТекущийЭлемент;
		Возврат;
	КонецЕсли;
	СтруктураДляРедактирования.ТекущийЭлемент = ТекущийЭлемент;
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Стр = СтруктураДляРедактирования.Элементы.Найти(ТекущийЭлемент, "ПолеВвода");
	Если Стр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Стр.ПолеВвода.Значение) И (Стр.СтрНастройки <> Неопределено) И (Стр.СтрНастройки.РедактированиеВДиалоге) Тогда
		Если Не СтруктураДляРедактирования.ОткрытаФормаРедактирования Тогда
			ПолеВводаКИНачалоВыбора(СтруктураДляРедактирования, ТекущийЭлемент, Ложь, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРУКТУРОЙ РЕДАКТИРОВАНИЯ

// Подготовить структуру хранящую данные для отображения контактной информации на форме элемента
Функция ПодготовитьСтруктуруДляОтображенияКИ(ВидОбъекта, ОбработчикДляДопКнопок, НаборКонтактнойИнформации, ОсновнаяПанельФормы, СтраницаКИ, НадписьПрочаяКИ, ПолеВводаПрочейКИ, ВидПрочейКИ, КнопкаРедактированияНастроек, ОтображатьКнопкиВместоНадписей) Экспорт

	Стр = Новый Структура;
	Стр.Вставить("ОбработчикДляДопКнопок",         ОбработчикДляДопКнопок);
	Стр.Вставить("НадписьПрочаяКИ",                НадписьПрочаяКИ);
	Стр.Вставить("ПолеВводаПрочейКИ",              ПолеВводаПрочейКИ);
	Стр.Вставить("ВидПрочейКИ",                    ВидПрочейКИ);
	Стр.Вставить("ТекущийЭлемент",                 Неопределено);
	Стр.Вставить("НаборКонтактнойИнформации",      НаборКонтактнойИнформации);
	Стр.Вставить("ВидОбъекта",                     ВидОбъекта);
	Стр.Вставить("ОткрытаФормаРедактирования",     Ложь);
	Стр.Вставить("ОсновнаяПанельФормы",            ОсновнаяПанельФормы);
	Стр.Вставить("СтраницаКИ",                     СтраницаКИ);
	Стр.Вставить("ТекущаяСтраница",                ?(ОсновнаяПанельФормы = Неопределено, Неопределено, ОсновнаяПанельФормы.ТекущаяСтраница));
	Стр.Вставить("Настройки",                      ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта));
	Стр.Вставить("ЕстьПолныеПрава",                РольДоступна("ПолныеПрава"));
	Стр.Вставить("ОтображатьКнопкиВместоНадписей", ОтображатьКнопкиВместоНадписей);
	
	Если КнопкаРедактированияНастроек <> Неопределено Тогда
		КнопкаРедактированияНастроек.Видимость = Стр.ЕстьПолныеПрава;
	КонецЕсли;
	
	Элементы = Новый ТаблицаЗначений;
	Элементы.Колонки.Добавить("Кнопка");
	Элементы.Колонки.Добавить("ПолеВвода");
	Элементы.Колонки.Добавить("Надпись");
	Элементы.Колонки.Добавить("Тип");
	Элементы.Колонки.Добавить("СтрНастройки");
	Стр.Вставить("Элементы", Элементы);
	
	ДопКнопки = Новый ТаблицаЗначений;
	ДопКнопки.Колонки.Добавить("Кнопка");
	ДопКнопки.Колонки.Добавить("КнопкаВладелец");
	ДопКнопки.Колонки.Добавить("Вид");
	ДопКнопки.Колонки.Добавить("ВидВладельца");
	ДопКнопки.Колонки.Добавить("ТипДействия"); // 1 - сменить вид, 2 - добавить новый вид, 3 - скопировать, 4 - настройка видок КИ
	Стр.Вставить("ДопКнопки", ДопКнопки);
	
	Замены = Новый ТаблицаЗначений;
	Замены.Колонки.Добавить("Вид1");
	Замены.Колонки.Добавить("Вид2");
	ЗаполнитьЗаменыПоВидуОбъекта(Замены, ВидОбъекта);
	Стр.Вставить("Замены", Замены);
	
	Возврат Стр;

КонецФункции // ПодготовитьСтруктуруДляОтображенияКИ()

// Очистить структуру для редактирования контактной информации
Процедура ОчиститьСтруктуруРедактированияКИ(СтруктураДляРедактирования) Экспорт

	СтруктураДляРедактирования = Неопределено;

КонецПроцедуры

// Заполнить замены в контактной информации производимые для вида объекта
Процедура ЗаполнитьЗаменыПоВидуОбъекта(Замены, ВидОбъекта)

	Если ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		ДобавитьЗамену(Замены, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Истина);
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		ДобавитьЗамену(Замены, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Истина);
	КонецЕсли;

КонецПроцедуры

// Добавить запись в таблицу замен
Процедура ДобавитьЗамену(Замены, Вид1, Вид2, ВОбеСтороны)

	новСтр = Замены.Добавить();
	новСтр.Вид1 = Вид1;
	новСтр.Вид2 = Вид2;
	
	Если ВОбеСтороны Тогда
		новСтр = Замены.Добавить();
		новСтр.Вид1 = Вид2;
		новСтр.Вид2 = Вид1;
	КонецЕсли;
	
КонецПроцедуры

// В структуру для отображения добавить кнопку и поле ввода
Процедура ДобавитьКнопкуИПоле(СтруктураДляОтображения, Надпись, Кнопка, ПолеВВода) Экспорт

	новСтр = СтруктураДляОтображения.Элементы.Добавить();
	новСтр.Надпись   = Надпись;
	новСтр.Кнопка    = Кнопка;
	новСтр.ПолеВвода = ПолеВВода;

КонецПроцедуры

// Редактируется ли вид контактной информации в основной форме
Функция ВидРедактируетсяВОсновнойФорме(СтруктураДляРедактирования, Вид) Экспорт

	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
	Если СтрНастройки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураДляРедактирования.Элементы.Найти(СтрНастройки, "СтрНастройки") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ВидРедактируетсяВОсновнойФорме()

// Редактируется ли вид контактной информации в диалоге
Функция ВидРедактируетсяВДиалоге(СтруктураДляРедактирования, Вид) Экспорт

	СтрНастройки = СтруктураДляРедактирования.Настройки.Найти(Вид, "Вид");
	Если СтрНастройки = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат СтрНастройки.РедактированиеВДиалоге;
	КонецЕсли;

КонецФункции // ВидРедактируетсяВДиалоге()


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Получить виды контактной информации такого же типа
Функция ПолучитьПрочиеВидыТакогоЖеТипа(Настройки, Тип, Вид)

	масВидов = Новый Массив;
	
	Для Каждого Стр Из Настройки Цикл
		Если (Стр.Тип = Тип) И (Стр.Вид <> Вид) Тогда
			масВидов.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат масВидов;

КонецФункции // ПолучитьПрочиеВидыТакогоЖеТипа()

// Есть ли кнопка выбора у поля ввода
Функция ЕстьКнопкаВыбораКИ(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЕстьКнопкаВыбораКИ()

// Есть ли кнопка открытия у поля ввода
Функция ЕстьКнопкаОткрытияКИ(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ЕстьКнопкаОткрытияКИ()

// Получить картинку для отображения типа
Функция ПолучитьКартинкуПоТипу(Тип, НомерКартинки = 0) Экспорт

	//Если НомерКартинки = 1 Тогда
	//	Возврат БиблиотекаКартинок.КИФакс;
	//	
	//ИначеЕсли НомерКартинки = 2 Тогда
	//	Возврат БиблиотекаКартинок.КИАдресИМНС;
	//
	//ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//	Возврат БиблиотекаКартинок.КИАдрес;
	//	
	//ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	//	Возврат БиблиотекаКартинок.КИEmail;
	//	
	//ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
	//	Возврат БиблиотекаКартинок.КИWWW;
	//	
	//ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
	//	Возврат БиблиотекаКартинок.КИТелефон;
	//	
	//ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
	//	Возврат БиблиотекаКартинок.ПрочаяКонтактнаяИнформация;
	//	
	//Иначе
		Возврат Новый Картинка;
	//КонецЕсли;

КонецФункции // ПолучитьКартинкуПоТипу()

// Выполнить копирование записи контактной информации
Процедура ВыполнитьКопированиеКИВДиалоге(СтруктураДляРедактирования, ЭтаФорма, Тип, Вид)

	масВидов = ПолучитьПрочиеВидыТакогоЖеТипа(СтруктураДляРедактирования.Настройки, Тип, Вид);
	колВидов = масВидов.Количество();
	Если колВидов = 0 Тогда
		Предупреждение("Нет других видов контактной информации этого же типа!");
		Возврат;
	КонецЕсли;
	
	спсВидов = Новый СписокЗначений;
	Для Каждого стрВида Из масВидов Цикл
		спсВидов.Добавить(стрВида.Вид);
	КонецЦикла;
	
	выбрВид = спсВидов.ВыбратьЭлемент("Откуда скопировать");
	Если выбрВид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись1 = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, Вид,              Тип);
	Запись2 = ПолучитьЗаписьВНаборе(СтруктураДляРедактирования.НаборКонтактнойИнформации, выбрВид.Значение, Тип);
	Если Запись1=Неопределено ИЛИ Запись2=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьДанныеКИИзЗаписиВДругую(Запись2, Запись1);
	
	ЗаполнитьЗначенияКИ(СтруктураДляРедактирования);
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры // ВыполнитьКопированиеКИВДиалоге()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАБОРОМ ЗАПИСЕЙ КОНТАКТНОЙ ИНФОРМАЦИИ

// Очистить поля хранящие контактную информацию в записи из набора
Процедура ОчиститьЗаписьКонтактнойИнформации(Запись) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Представление = "";
	Запись.Комментарий   = "";
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	Запись.Поле5 = "";
	Запись.Поле6 = "";
	Запись.Поле7 = "";
	Запись.Поле8 = "";
	Запись.Поле9 = "";
	Запись.Поле10= "";
	Запись.ТипДома     = Неопределено;
	Запись.ТипКорпуса  = Неопределено;
	Запись.ТипКвартиры = Неопределено;

КонецПроцедуры

// Скопировать данные из одной записи в другую
Процедура СкопироватьДанныеКИИзЗаписиВДругую(Откуда, Куда) Экспорт

	Куда.Представление = Откуда.Представление;
	Куда.Поле1         = Откуда.Поле1;
	Куда.Поле2         = Откуда.Поле2;
	Куда.Поле3         = Откуда.Поле3;
	Куда.Поле4         = Откуда.Поле4;
	Куда.Поле5         = Откуда.Поле5;
	Куда.Поле6         = Откуда.Поле6;
	Куда.Поле7         = Откуда.Поле7;
	Куда.Поле8         = Откуда.Поле8;
	Куда.Поле9         = Откуда.Поле9;
	Куда.Поле10        = Откуда.Поле10;
	Куда.ТипДома       = Откуда.ТипДома;
	Куда.ТипКорпуса    = Откуда.ТипКорпуса;
	Куда.ТипКвартиры   = Откуда.ТипКвартиры;
	Куда.Комментарий   = Откуда.Комментарий;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи
Процедура ЗаполнитьПоляВЗаписиПоПредставлению(Запись, Представление) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	ИначеЕсли Запись.Представление = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЗаписьКонтактнойИнформации(Запись);
	Запись.Представление = Представление;
		
	Если ПустаяСтрока(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		// Для телефона попробуем разобрать составляющие
		ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление);
		
	ИначеЕсли Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		  ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление);
		  
	КонецЕсли;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для телефона
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление)

	текСтр = СокрЛП(Представление);
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	
	// вырежем добавочный номер
	Поз = СтрНайти(ВРЕГ(текСтр), "ДОБ.");
	Если Поз <> 0 Тогда
		Запись.Поле4 = СокрЛП(Сред(текСтр, Поз+4));
		текСтр = СокрЛП(Лев(текСтр, Поз-1));
		
		Если Прав(текСтр, 1) = "," Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
	КонецЕсли;
	
	// вырежем код города
	Поз = СтрНайти(текСтр, "(");
	Если Поз <> 0 Тогда
		Запись.Поле1 = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = СтрНайти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			Запись.Поле2 = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	// все оставшееся это номер
	Запись.Поле3 = ПривестиНомерТелефонаКШаблону(текСтр);
	
	// Поправим представление
	СформироватьПредставлениеТелефона(Запись);
	Представление = Запись.Представление;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для адреса
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление)

	Стр = СокрЛП(Представление);
	предУровень = 0;
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Поз = СтрНайти(Стр, ",");
		текСтр = СокрЛП(?(Поз=0, Стр, Лев(Стр, Поз-1)));
		Стр = СокрЛП(?(Поз=0, "", Сред(Стр, Поз+1)));
		текВ = ВРег(текСтр);
		
		Если СтрДлина(текСтр) = 6 И ОбщегоНазначения.ТолькоЦифрыВСтроке(текСтр) Тогда
			// это индекс
			Запись.Поле1 = текСтр;
			Продолжить;
			
		ИначеЕсли Лев(текВ,6) = "ДОМ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,7));
			//Запись.ТипДома = Перечисления.ТипыДомов.Дом;
			Продолжить;
			
		ИначеЕсли Лев(текВ,11) = "ВЛАДЕНИЕ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,12));
			//Запись.ТипДома = Перечисления.ТипыДомов.Владение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,7) = "КОРПУС " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,8));
			//Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
			Продолжить;
			
		ИначеЕсли Лев(текВ,9) = "СТРОЕНИЕ " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,10));
			//Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Строение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "КВ." Тогда
			// это номер квартиры
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			//Запись.ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "ОФ." Тогда
			// это номер офиса
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			//Запись.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
			Продолжить;
			
		КонецЕсли;
		
		// попробуем найти адресное сокращение и по нему определить тип поля
		Поз=0;
		Для Сч=1 По СтрДлина(текСтр) Цикл
			Если Сред(текСтр,Сч,1) = " " Тогда
				Поз = Сч;
			КонецЕсли;
		КонецЦикла;
		
		Если Поз=0 Тогда
			Продолжить;
		КонецЕсли;
		
		АдрСокр = СокрЛП(Сред(текСтр, Поз+1));
		ТЗ = "ВЫБРАТЬ
		|	МИНИМУМ(АдресныеСокращения.Уровень) Как Уровень
		|ИЗ
		|	Справочник.АдресныеСокращения КАК АдресныеСокращения
		|ГДЕ
		|	АдресныеСокращения.Сокращение = &Сокращение
		|	И АдресныеСокращения.Уровень > &предУровень";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТЗ;
		Запрос.УстановитьПараметр("Сокращение",  АдрСокр);
		Запрос.УстановитьПараметр("предУровень", предУровень);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		Уровень = Выборка.Уровень;
		предУровень = Уровень;
		
		Если Уровень=1 Тогда
			Запись.Поле2 = текСтр;
		ИначеЕсли Уровень=2 Тогда
			Запись.Поле3 = текСтр;
		ИначеЕсли Уровень=3 Тогда
			Запись.Поле4 = текСтр;
		ИначеЕсли Уровень=4 Тогда
			Запись.Поле5 = текСтр;
		ИначеЕсли Уровень=5 Тогда
			Запись.Поле6 = текСтр;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Получить запись в наборе записей по типу и виду
Функция ПолучитьЗаписьВНаборе(Набор, Вид, Тип) Экспорт

	Для Каждого Запись Из Набор Цикл
		
		Если (Запись.Тип = Тип) И (Запись.Вид = Вид) Тогда
			Возврат Запись;
		КонецЕсли;
		
	КонецЦикла;
	
	Запись = Набор.Добавить();
	Запись.Вид = Вид;
	Запись.Тип = Тип;
	
	Возврат Запись;

КонецФункции // ПолучитьЗаписьВНаборе()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ ОТОБРАЖЕНИЯ КИ

// Получить настройки для редактирования контактной информации
Функция ПолучитьНастройкиОтображенияКонтактнойИнформации(ВидОбъекта)

	ТЗ = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка Как Вид,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РедактированиеВДиалоге,
	|	ВидыКонтактнойИнформации.МожноРедактироватьТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.НомерКартинки,
	|	ВидыКонтактнойИнформации.Порядок КАК Порядок
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Тип,
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТЗ;
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъекта);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьНастройкиПоУмолчанию()

// Определяет, есть ли у объекта реквизит с заданным именем.
//
// Параметры:
//     ИмяРеквизита - Строка       - Имя реквизита, наличие которого проверяется.
//     Объект       - Произвольный - Проверяемый объект.
//
// Возвращаемое значение:
//     Булево - результат проверки.
//
Функция ЕстьРеквизитОбъекта(Знач ИмяРеквизита, Знач Объект)
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, Неопределено);
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Если ПроверкаРеквизита[ИмяРеквизита] <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверкаРеквизита[ИмяРеквизита] = "";
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита.Наименование = Неопределено;
КонецФункции

#КонецОбласти