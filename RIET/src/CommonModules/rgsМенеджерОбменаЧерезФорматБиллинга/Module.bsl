// Конвертация RG-Soft: Schlumberger от 11/28/2016 4:43:36 PM
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКУстановкеПроведения = Новый Массив;
	КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКОтменеПроведения = Новый Массив;
	КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКПометкеУдаления = Новый Массив;
	
	табДвижений = Новый ТаблицаЗначений;
	табДвижений.Колонки.Добавить("СсылкаНаДокумент");
	табДвижений.Колонки.Добавить("ИмяРегистра");
	табДвижений.Колонки.Добавить("Движения");
	
	КомпонентыОбмена.ПараметрыКонвертации.ДвиженияДокументовПоРегистрам = табДвижений; 
	
	табЗаписей = Новый ТаблицаЗначений;
	табЗаписей.Колонки.Добавить("СсылкаНаДокумент");
	табЗаписей.Колонки.Добавить("ИмяРегистра");
	табЗаписей.Колонки.Добавить("ИмяРеквизита");
	табЗаписей.Колонки.Добавить("Движения");
	
	КомпонентыОбмена.ПараметрыКонвертации.ДанныеДокументовПоРС = табЗаписей;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		КомпонентыОбмена.ДокументыДляОтложенногоПРоведения.Очистить();
	
		таблицыДвижений   = КомпонентыОбмена.ПараметрыКонвертации.ДвиженияДокументовПоРегистрам;
		
		// { RGS AArsentev 5/2/2017 12:46:49 PM - SVS-0000762
		ДатаЗапрета = LocalDistributionОбменДаннымиСерверПовтИспСеанс.ПолучитьДатуЗапрета();
		// { RGS AArsentev 05.12.2017
		ДатаДляЗагрузкиВЗакрытыйПериод = РГСофт.ПолучитьДатуДляЗагрузкиВЗакрытыйПериод();
		Если ДатаДляЗагрузкиВЗакрытыйПериод <> Неопределено И ДатаДляЗагрузкиВЗакрытыйПериод < ДатаЗапрета Тогда
			ДатаЗапрета = ДатаДляЗагрузкиВЗакрытыйПериод;
		КонецЕсли;
		// } RGS AArsentev 05.12.2017
		// } RGS AArsentev 5/2/2017 12:46:49 PM - SVS-0000762
		
		Для Каждого текДокумент ИЗ КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКУстановкеПроведения Цикл
			
			// { RGS LFedotova 15.09.2017 10:57:37 - вопрос SLI-0007357
			ДокументУтвержден = ПроверитьУтверждениеДокумента(текДокумент);
			// } RGS LFedotova 15.09.2017 10:57:46 - вопрос SLI-0007357
			
			// { RGS AArsentev 5/2/2017 12:46:49 PM - SVS-0000762
			Если ТипЗнч(текДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				// { RGS LFedotova 19.09.2017 15:16:29 - вопрос SLI-0007360
				ИЛИ ТипЗнч(текДокумент) = Тип("ДокументСсылка.Tickets")
				// } RGS LFedotova 19.09.2017 15:16:36 - вопрос SLI-0007360 
				Тогда
				ДатаДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДокумент, "ДатаПроведения");
			Иначе
				ДатаДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДокумент, "Дата");
			КонецЕсли;
			
			// { RGS LFedotova 07.09.2017 22:33:08 - вопрос SLI-0007342
			Если НЕ ТипЗнч(текДокумент) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И 
				// { RGS LFedotova 15.09.2017 11:12:07 - вопрос SLI-0007357
				НЕ ДокументУтвержден И
				// } RGS LFedotova 15.09.2017 11:12:20 - вопрос SLI-0007357 
				ДатаДок <> Неопределено и ДатаДок < КонецДня(ДатаЗапрета) Тогда
			// } RGS LFedotova 07.09.2017 22:33:27 - вопрос SLI-0007342
				 Продолжить
			КонецЕсли;
			
			Если ДатаДок = Неопределено Тогда
				Продолжить	
			КонецЕсли;
			// } RGS AArsentev 5/2/2017 12:46:49 PM - SVS-0000762
			
			текОБ = текДокумент.ПолучитьОбъект();
			текОБ.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
			ОбменДаннымиXDTOСервер.ВыполнитьПроведениеДокументаПриЗагрузке(КомпонентыОбмена,текОБ,Истина); 
			
	//		текОБ = текДокумент.ПолучитьОбъект();
	//		текОб.Проведен = Истина;
	//		текОб.ОбменДанными.Загрузка = Истина;
	///		текОб.Записать();
	//	
	//		Движения = таблицыДвижений.НайтиСтроки(НОвый Структура("СсылкаНаДокумент",текДокумент));
	//		Для Каждого текСтрока ИЗ Движения Цикл
	//			ЗаписатьДвиженияДокументаПоРегистру(текСтрока.СсылкаНаДокумент,текСтрока.Движения,текСтрока.ИмяРегистра);
	//		КОнецЦикла;
			 
		КонецЦикла; 
		
		Для Каждого текДокумент ИЗ КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКОтменеПроведения Цикл
			
			// { RGS AArsentev 22.07.2017
			Если ТипЗнч(текДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДатаДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДокумент, "ДатаПроведения");
			Иначе
				ДатаДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДокумент, "Дата");
			КонецЕсли;
			
			Если ДатаДок <> Неопределено И ДатаДок < КонецДня(ДатаЗапрета) Тогда
				 Продолжить
			КонецЕсли;
			
			Если ДатаДок = Неопределено Тогда
				Продолжить	
			КонецЕсли;
			// } RGS AArsentev 22.07.2017
			
			текОБ = текДокумент.ПолучитьОбъект();
			текОБ.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
			ОбменДаннымиXDTOСервер.ОтменитьПроведениеОбъектаВИБ(текОБ, КомпонентыОбмена.УзелКорреспондента); 
	
	//		текОБ = текДокумент.ПолучитьОбъект();
	//		Попытка
	//			текОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		ИСключение
	//			ЗаписьЖурналаРегистрации("Обмен данными.СинхронизацияДанныхЧерезФорматБиллинга.Получение данных",
	//					УровеньЖурналаРегистрации.Предупреждение,,,"Не удалось отменить проведение документа: "+текОБ);
	//		КОнецПопытки;
		КонецЦикла;
		 
	//////////////////////////////////////////////////////////////////////наборы регистров сведений
		данныеДляРС = КомпонентыОбмена.ПараметрыКонвертации.ДанныеДокументовПоРС;
		спкДокументов =  данныеДляРС.Скопировать(,"СсылкаНаДокумент");
		спкДокументов.Свернуть("СсылкаНаДокумент");
		Для Каждого текДокумент ИЗ спкДокументов Цикл
						
			Записи = данныеДляРС.НайтиСтроки(НОвый Структура("СсылкаНаДокумент",текДокумент.СсылкаНаДокумент));
			Для Каждого текСтрока ИЗ Записи Цикл
				ЗаписатьДанныеРС(текСтрока.СсылкаНаДокумент,текСтрока.Движения,текСтрока.ИмяРегистра,текСтрока.ИмяРеквизита);
			КОнецЦикла;
			
		КонецЦикла;
		Для Каждого текДокумент ИЗ КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКПометкеУдаления Цикл
			
			текОБ = текДокумент.ПолучитьОбъект();
			
			Если текОБ.Проведен Тогда
				текОБ.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
				ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(текОБ, Ложь, Ложь, КомпонентыОбмена.УзелКорреспондента);
	
				текОБ.Записать(РежимЗаписиДОкумента.ОтменаПроведения);
	
			КонецЕсли;
			
			текОб.Проведен = Ложь;
			текОб.ПометкаУДаления = Истина;
			текОб.ОбменДанными.Загрузка = Истина;
			текОб.Записать();
			
		КонецЦикла;
		
		//-> RG-Soft VIvanov 2016/11/21
		НаборЗаписей = РегистрыСведений.РезультатыОбменаДанными.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипПроблемы.Установить(Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
		НаборЗаписей.Прочитать();
		Для Каждого текЗапись Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(текЗапись.ПроблемныйОбъект) Тогда
				Продолжить;
			КонецЕсли;
			Если текЗапись.УзелИнформационнойБазы <> КомпонентыОбмена.УзелКорреспондента Тогда
				Продолжить;
			КонецЕсли;
			// { RGS AArsentev 14.08.2017
			Если ТипЗнч(текЗапись.ПроблемныйОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДатаДок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текЗапись.ПроблемныйОбъект, "ДатаПроведения");
			Иначе
				ДатаДок = текЗапись.ДатаДокумента;
			КонецЕсли;
			Если ДатаДок < КонецДня(ДатаЗапрета) Тогда
				 Продолжить
			КонецЕсли;
			// } RGS AArsentev 14.08.2017
			текОбъект = текЗапись.ПроблемныйОбъект.ПолучитьОбъект();
			текОбъект.ДополнительныеСвойства.Вставить("ПровестиДокументЛюбойЦеной", Истина);
			ОбменДаннымиXDTOСервер.ВыполнитьПроведениеДокументаПриЗагрузке(КомпонентыОбмена,текОбъект,Истина);
		КонецЦикла;
		//<- RG-Soft VIvanov 2016/11/21
		 
	КонецЕсли;
КонецПроцедуры

// { RGS LFedotova 15.09.2017 11:00:46 - вопрос SLI-0007357
Функция ПроверитьУтверждениеДокумента(текДокумент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыУтвержденияКорректировок.Статус
		|ИЗ
		|	РегистрСведений.СтатусыУтвержденияКорректировок КАК СтатусыУтвержденияКорректировок
		|ГДЕ
		|	СтатусыУтвержденияКорректировок.КредитНота = &ТекДокумент";
	
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыУтвержденияОбъектов.Утверждена Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьУтверждениеДокумента(текДокумент)
// } RGS LFedotova 15.09.2017 11:00:51 - вопрос SLI-0007357

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
	Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
	    ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
	КонецЕсли;
		ДобавитьПОД_Документ_SiebelOrders_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Tickets_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктСверкиВзаиморасчетов_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗакрытиеСчетовНаПредоплату_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаВалютыВРегистре_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_ДокументыОстатковНаДату_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Agreements_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_CashCode_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Catalog_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Corporations_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_CountriesOfProcessLevels_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_GeoMarkets_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_LegalEntities_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Oilfields_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_PayableCentres_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ProcessLevels_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_SoldTo_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_TNVEDCodes_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_UOMs_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Wells_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_О(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоверенностиНалогоплательщика_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДолжностиОрганизаций_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗаказНаряды_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗаявкиНаЗакупку_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИнвойсинговыеЦентры_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛица_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыLawson_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КостЦентры_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураИмпорт_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НомераГТД_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Сегменты_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатусыВозвратаКС_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатрат_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТерриториальныеУсловия_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыНоменклатуры_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТомаХраненияФайлов_Отпр(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отпр(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_SiebelOrders_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Tickets_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктСверкиВзаиморасчетов_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗакрытиеСчетовНаПредоплату_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаВалютыВРегистре_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Agreements_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_CashCode_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Catalog_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Corporations_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_CountriesOfProcessLevels_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_GeoMarkets_Группа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_GeoMarkets_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_LegalEntities_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Oilfields_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_PayableCentres_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ProcessLevels_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_SoldTo_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_TNVEDCodes_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_TNVEDCodesГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_UOMs_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Wells_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанкиГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_П(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоверенностиНалогоплательщика_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДолжностиОрганизаций_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗаказНаряды_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗаявкиНаЗакупку_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИнвойсинговыеЦентры_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛица_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыLawson_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыLawsonГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураИмпорт_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураИмпортГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НомераГТД_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделенияГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыИРасходыГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Сегменты_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СегментыГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатусыВозвратаКС_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатрат_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатратГруппа_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТерриториальныеУсловия_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыНоменклатуры_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТомаХраненияФайлов_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Пол(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Пол(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_SiebelOrders_Отпр
Процедура ДобавитьПОД_Документ_SiebelOrders_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_SiebelOrders_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.SiebelOrders;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_SiebelOrders");
КонецПроцедуры
#КонецОбласти
#Область Документ_Tickets_Отпр
Процедура ДобавитьПОД_Документ_Tickets_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_Tickets_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Tickets;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Tickets");
КонецПроцедуры
#КонецОбласти
#Область Документ_АктСверкиВзаиморасчетов_Отпр
Процедура ДобавитьПОД_Документ_АктСверкиВзаиморасчетов_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АктСверкиВзаиморасчетов_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АктСверкиВзаиморасчетов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктСверкиВзаиморасчетов");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВводОстатковПоВзаиморасчетам_Отпр
Процедура ДобавитьПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВводОстатковПоВзаиморасчетам_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводОстатковПоВзаиморасчетам_Отпр");
КонецПроцедуры

Функция ПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ВыборкаДанных(КомпонентыОбмена)
	масДокументов = НОвый Массив();
		текДокумент = НОвый Структура();
		текДокумент.Вставить("Номер",1);
		//текДокумент.Вставить("Ответственный",ПараметрыСеанса.ТекущийПользователь);
		
		Дата = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
		текДокумент.Вставить("Дата",Дата);
		
		Стек = Новый Массив;
		
		ОргСЛА = Справочники.Организации.НайтиПоКоду("00001");
	
		текДОкумент.Вставить("Организация",ОргСЛА);
		
		
		табДанных = НОвый ТаблицаЗначений();
		табДанных.Колонки.Добавить("ДоговорКонтрагента");
		табДанных.Колонки.Добавить("ПодразделениеОрганизации");
		табДанных.Колонки.Добавить("Сделка");
		табДанных.Колонки.Добавить("СчетНаПредоплату");
		табДанных.Колонки.Добавить("КостЦентр");
		табДанных.Колонки.Добавить("WO");
		табДанных.Колонки.Добавить("СуммаВзаиморасчетов");
		табДанных.Колонки.Добавить("СуммаУпр");
		табДанных.Колонки.Добавить("СуммаРегл");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
			|	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
			|	ВзаиморасчетыСПокупателямиОстатки.Сделка,
			|	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату,
			|	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
			|	ВзаиморасчетыСПокупателямиОстатки.WO,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток КАК СуммаУпр,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток  КАК СуммаРегл
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&Дата, ) КАК ВзаиморасчетыСПокупателямиОстатки
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.КорректировкаДолга
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр В (&Смит)
			|						И (НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.КонтрагентДебитор.КонтрагентLawson.Код ПОДОБНО &КодОС
			|							И НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.КонтрагентКредитор.КонтрагентLawson.Код ПОДОБНО &КодОС)
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг
			|					ИЛИ ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеВходящее
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр В (&Смит)
			|						И НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОС
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОС
			|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		спкСмит = Новый СписокЗначений;
		спкСмит.Добавить(Справочники.ИнвойсинговыеЦентры.НайтиПоНаименованию("Smith"));
		спкСмит.Добавить(Справочники.ИнвойсинговыеЦентры.НайтиПоНаименованию("Smith-South"));
		Запрос.УстановитьПараметр("Смит",спкСмит);
		Запрос.УстановитьПараметр("КодОС","OC%");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			нвСтрока = табДанных.Добавить();
			ЗаполнитьЗначенияСвойств(нвСтрока,ВыборкаДетальныеЗаписи);
			нвСтрока.Сделка = ПолучитьСтруктуруВыгрузкиСоставногоТипа(ВыборкаДетальныеЗаписи.Сделка);
		КонецЦикла;
		
		
		текДокумент.Вставить("Остатки",табДанных);
		текДокумент.Вставить("Тикеты",Новый ТаблицаЗначений());
		текДокумент.Вставить("Комментарий", "Выгрузка остатков из баз SLI от "+Формат(Дата,"ДЛФ=ДД"));
		
		масДокументов.Добавить(текДокумент);
		Возврат масДокументов;
КонецФункции
#КонецОбласти
#Область Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр
Процедура ДобавитьПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводОстатковПоВзаиморасчетам_Отпр");
КонецПроцедуры

Функция ПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр_ВыборкаДанных(КомпонентыОбмена)
	масДокументов = НОвый Массив();
		текДокумент = НОвый Структура();
		текДокумент.Вставить("Номер",2);
		//текДокумент.Вставить("Ответственный",ПараметрыСеанса.ТекущийПользователь);
		
		Дата = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
		текДокумент.Вставить("Дата",Дата);
		
		Стек = Новый Массив;
		
		ОргСЛА = Справочники.Организации.НайтиПоКоду("00001");
	
		текДОкумент.Вставить("Организация",ОргСЛА);
		
		
		табДанных = НОвый ТаблицаЗначений();
		табДанных.Колонки.Добавить("Тикет");
		табДанных.Колонки.Добавить("Сумма");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Тикеты.Тикет,
			|	Тикеты.СуммаОстаток  КАК Сумма
			|ИЗ
			|	РегистрНакопления.Тикеты.Остатки(&Дата, ) КАК Тикеты
			|ГДЕ
			|	НЕ Тикеты.Тикет.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОС 
			|	И НЕ Тикеты.Тикет.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОСРус 
			|";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		спкСмит = Новый СписокЗначений;
		Запрос.УстановитьПараметр("КодОС","OC%");
		Запрос.УстановитьПараметр("КодОСРус","ОС%");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			нвСтрока = табДанных.Добавить();
			ЗаполнитьЗначенияСвойств(нвСтрока,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		
		текДокумент.Вставить("Тикеты",табДанных);
		текДокумент.Вставить("Остатки",Новый ТаблицаЗначений());
		текДокумент.Вставить("Комментарий", "Выгрузка остатков тикетов из базы SLI от "+Формат(Дата,"ДЛФ=ДД"));
		
		масДокументов.Добавить(текДокумент);
		Возврат масДокументов;
КонецФункции
#КонецОбласти
#Область Документ_ЗакрытиеСчетовНаПредоплату_Отпр
Процедура ДобавитьПОД_Документ_ЗакрытиеСчетовНаПредоплату_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗакрытиеСчетовНаПредоплату_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗакрытиеСчетовНаПредоплату;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗакрытиеСчетовНаПредоплату");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Отпр
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаДолга_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаДолга;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаВалютыВРегистре_Отпр
Процедура ДобавитьПОД_Документ_ПереоценкаВалютыВРегистре_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПереоценкаВалютыВРегистре_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПереоценкаВалютыВРегистре;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаВалютыВРегистре");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее_Отпр
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеВходящее_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеВходящее");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеИсходящее_Отпр
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеИсходящее_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеИсходящее");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отпр
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Отпр
Процедура ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетНаОплатуПокупателю_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отпр
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный");
КонецПроцедуры
#КонецОбласти
#Область ДокументыОстатковНаДату_Отпр
Процедура ДобавитьПОД_ДокументыОстатковНаДату_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ДокументыОстатковНаДату_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_ДокументыОстатковНаДату_Отпр_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_ДокументыОстатковНаДату_Отпр_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_SiebelOrders");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Tickets");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗакрытиеСчетовНаПредоплату");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеВходящее");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеИсходящее");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный");
КонецПроцедуры

Процедура ПОД_ДокументыОстатковНаДату_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_SiebelOrders 						=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.SiebelOrders"));
	ИспользованиеПКО.Документ_Tickets 							=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.Tickets"));
	ИспользованиеПКО.Документ_ЗакрытиеСчетовНаПредоплату 		=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ЗакрытиеСчетовНаПредоплату"));
	ИспользованиеПКО.Документ_КорректировкаДолга 				=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.КорректировкаДолга"));
	ИспользованиеПКО.Документ_ПлатежноеПоручениеВходящее 		=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	ИспользованиеПКО.Документ_ПлатежноеПоручениеИсходящее 		=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг 			=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ИспользованиеПКО.Документ_СчетНаОплатуПокупателю 			=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	ИспользованиеПКО.Документ_СчетФактураВыданный 				=  (ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный"));
КонецПроцедуры

Функция ПОД_ДокументыОстатковНаДату_Отпр_ВыборкаДанных(КомпонентыОбмена)
	масДокументов = НОвый Массив();
	
		Дата = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыСПокупателямиОстатки.Сделка,
			|	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаУпрОстаток КАК СуммаУпр,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток  КАК СуммаРегл
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&Дата, ) КАК ВзаиморасчетыСПокупателямиОстатки
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.КорректировкаДолга
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр В (&Смит)
			|						И (НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.КонтрагентДебитор.КонтрагентLawson.Код ПОДОБНО &КодОС
			|							И НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.КонтрагентКредитор.КонтрагентLawson.Код ПОДОБНО &КодОС)
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг
			|					ИЛИ ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеВходящее
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.ИнвойсинговыйЦентр В (&Смит)
			|						И НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОС
			|			КОГДА ВзаиморасчетыСПокупателямиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
			|				ТОГДА НЕ ВзаиморасчетыСПокупателямиОстатки.Сделка.Контрагент.КонтрагентLawson.Код ПОДОБНО &КодОС
			|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		спкСмит = Новый СписокЗначений;
		спкСмит.Добавить(Справочники.ИнвойсинговыеЦентры.НайтиПоНаименованию("Smith"));
		спкСмит.Добавить(Справочники.ИнвойсинговыеЦентры.НайтиПоНаименованию("Smith-South"));
		Запрос.УстановитьПараметр("Смит",спкСмит);
		Запрос.УстановитьПараметр("КодОС","OC%");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сделка) Тогда
				масДокументов.Добавить(ВыборкаДетальныеЗаписи.Сделка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетНаПредоплату) Тогда
				масДокументов.Добавить(ВыборкаДетальныеЗаписи.СчетНаПредоплату);
			КонецЕсли;
	
		КонецЦикла;
		
		Возврат масДокументов;
КонецФункции
#КонецОбласти
#Область Справочник_Agreements_Отпр
Процедура ДобавитьПОД_Справочник_Agreements_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Agreements_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Agreements;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Agreements");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CashCode_Отпр
Процедура ДобавитьПОД_Справочник_CashCode_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_CashCode_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.CashCode;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_CashCode");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Catalog_Отпр
Процедура ДобавитьПОД_Справочник_Catalog_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Catalog_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Catalog;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Catalog");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Corporations_Отпр
Процедура ДобавитьПОД_Справочник_Corporations_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Corporations_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Corporations;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Corporations");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CountriesOfProcessLevels_Отпр
Процедура ДобавитьПОД_Справочник_CountriesOfProcessLevels_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_CountriesOfProcessLevels_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.CountriesOfProcessLevels;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_CountriesOfProcessLevels");
КонецПроцедуры
#КонецОбласти
#Область Справочник_GeoMarkets_Отправка
Процедура ДобавитьПОД_Справочник_GeoMarkets_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_GeoMarkets_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.GeoMarkets;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_GeoMarkets_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_GeoMarkets");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_GeoMarkets_Группа");
КонецПроцедуры

Процедура ПОД_Справочник_GeoMarkets_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_GeoMarkets = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_GeoMarkets_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_LegalEntities_Отпр
Процедура ДобавитьПОД_Справочник_LegalEntities_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_LegalEntities_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.LegalEntities;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_LegalEntities");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Oilfields_Отпр
Процедура ДобавитьПОД_Справочник_Oilfields_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Oilfields_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Oilfields;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Oilfields");
КонецПроцедуры
#КонецОбласти
#Область Справочник_PayableCentres_Отпр
Процедура ДобавитьПОД_Справочник_PayableCentres_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_PayableCentres_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.PayableCentres;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_PayableCentres");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ProcessLevels_Отпр
Процедура ДобавитьПОД_Справочник_ProcessLevels_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ProcessLevels_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ProcessLevels;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ProcessLevels");
КонецПроцедуры
#КонецОбласти
#Область Справочник_SoldTo_Отпр
Процедура ДобавитьПОД_Справочник_SoldTo_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_SoldTo_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.SoldTo;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_SoldTo");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TNVEDCodes_Отпр
Процедура ДобавитьПОД_Справочник_TNVEDCodes_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_TNVEDCodes_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.TNVEDCodes;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_TNVEDCodes_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_TNVEDCodes");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_TNVEDCodesГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_TNVEDCodes_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_TNVEDCodes = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_TNVEDCodesГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_UOMs_Отпр
Процедура ДобавитьПОД_Справочник_UOMs_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_UOMs_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.UOMs;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_UOMs");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Wells_Отпр
Процедура ДобавитьПОД_Справочник_Wells_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Wells_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Wells;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Wells");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отпр
Процедура ДобавитьПОД_Справочник_Банки_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Банки = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_БанкиГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отпр
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_О
Процедура ДобавитьПОД_Справочник_Валюты_О(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_О";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоверенностиНалогоплательщика_Отпр
Процедура ДобавитьПОД_Справочник_ДоверенностиНалогоплательщика_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоверенностиНалогоплательщика_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоверенностиНалогоплательщика;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоверенностиНалогоплательщика");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отпр
Процедура ДобавитьПОД_Справочник_Договоры_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Договоры_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Договоры_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Договоры = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ДоговорыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДолжностиОрганизаций_Отпр
Процедура ДобавитьПОД_Справочник_ДолжностиОрганизаций_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДолжностиОрганизаций_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДолжностиОрганизаций;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДолжностиОрганизаций_Отпр");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отпр
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЕдиницыИзмерения_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗаказНаряды_Отпр
Процедура ДобавитьПОД_Справочник_ЗаказНаряды_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЗаказНаряды_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗаказНаряды;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗаказНаряды");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗаявкиНаЗакупку_Отпр
Процедура ДобавитьПОД_Справочник_ЗаявкиНаЗакупку_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЗаявкиНаЗакупку_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗаявкиНаЗакупку;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗаявкиНаЗакупку");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ИнвойсинговыеЦентры_Отпр
Процедура ДобавитьПОД_Справочник_ИнвойсинговыеЦентры_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ИнвойсинговыеЦентры_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ИнвойсинговыеЦентры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ИнвойсинговыеЦентры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтактныеЛица_Отпр
Процедура ДобавитьПОД_Справочник_КонтактныеЛица_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтактныеЛица_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КонтактныеЛица;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛица");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отпр
Процедура ДобавитьПОД_Справочник_Контрагенты_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыLawson_Отпр
Процедура ДобавитьПОД_Справочник_КонтрагентыLawson_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыLawson_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КонтрагентыLawson;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_КонтрагентыLawson_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыLawson");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыLawsonГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_КонтрагентыLawson_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КонтрагентыLawson = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыLawsonГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КостЦентры_Отпр
Процедура ДобавитьПОД_Справочник_КостЦентры_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КостЦентры_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КостЦентры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КостЦентры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отпр
Процедура ДобавитьПОД_Справочник_Номенклатура_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураИмпорт_Отпр
Процедура ДобавитьПОД_Справочник_НоменклатураИмпорт_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураИмпорт_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатураИмпорт;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_НоменклатураИмпорт_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураИмпорт");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураИмпортГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатураИмпорт_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатураИмпорт = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураИмпортГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Отпр
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурныеГруппы_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТД_Отпр
Процедура ДобавитьПОД_Справочник_НомераГТД_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НомераГТД_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НомераГТД;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НомераГТД");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отпр
Процедура ДобавитьПОД_Справочник_Организации_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отпр
Процедура ДобавитьПОД_Справочник_Подразделения_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Подразделения_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Подразделения_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Подразделения = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ПодразделенияГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отпр
Процедура ДобавитьПОД_Справочник_Пользователи_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходы_Отпр
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПрочиеДоходыИРасходы_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ПрочиеДоходыИРасходы_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрочиеДоходыИРасходы");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрочиеДоходыИРасходыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ПрочиеДоходыИРасходы_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ПрочиеДоходыИРасходы = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ПрочиеДоходыИРасходыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Отпр
Процедура ДобавитьПОД_Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РеализацияТоваровУслугПрисоединенныеФайлы;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РеализацияТоваровУслугПрисоединенныеФ");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сегменты_Отпр
Процедура ДобавитьПОД_Справочник_Сегменты_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Сегменты_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Сегменты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Сегменты_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Сегменты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СегментыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Сегменты_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Сегменты = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СегментыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отпр
Процедура ДобавитьПОД_Справочник_Склады_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СкладыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатусыВозвратаКС_Отпр
Процедура ДобавитьПОД_Справочник_СтатусыВозвратаКС_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатусыВозвратаКС_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатусыВозвратаКС;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатусыВозвратаКС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отпр
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатрат_Отпр
Процедура ДобавитьПОД_Справочник_СтатьиЗатрат_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиЗатрат_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтатьиЗатрат_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатрат");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатратГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиЗатрат_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиЗатрат = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиЗатратГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отпр
Процедура ДобавитьПОД_Справочник_СтраныМира_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТерриториальныеУсловия_Отпр
Процедура ДобавитьПОД_Справочник_ТерриториальныеУсловия_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТерриториальныеУсловия_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТерриториальныеУсловия;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТерриториальныеУсловия");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыНоменклатуры_Отпр
Процедура ДобавитьПОД_Справочник_ТипыНоменклатуры_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыНоменклатуры_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отпр
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТомаХраненияФайлов_Отпр
Процедура ДобавитьПОД_Справочник_ТомаХраненияФайлов_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТомаХраненияФайлов_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТомаХраненияФайлов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТомаХраненияФайлов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отпр
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отпр(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отпр";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отпр_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отпр_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_SiebelOrders_Пол
Процедура ДобавитьПОД_Документ_SiebelOrders_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_SiebelOrders_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.SiebelOrders";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_SiebelOrders");
КонецПроцедуры
#КонецОбласти
#Область Документ_Tickets_Пол
Процедура ДобавитьПОД_Документ_Tickets_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_Tickets_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.Tickets";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Tickets");
КонецПроцедуры
#КонецОбласти
#Область Документ_АктСверкиВзаиморасчетов_Пол
Процедура ДобавитьПОД_Документ_АктСверкиВзаиморасчетов_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АктСверкиВзаиморасчетов_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АктСверкиВзаиморасчетов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктСверкиВзаиморасчетов");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗакрытиеСчетовНаПредоплату_Пол
Процедура ДобавитьПОД_Документ_ЗакрытиеСчетовНаПредоплату_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗакрытиеСчетовНаПредоплату_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗакрытиеСчетовНаПредоплату";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗакрытиеСчетовНаПредоплату");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Пол
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаДолга_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаВалютыВРегистре_Пол
Процедура ДобавитьПОД_Документ_ПереоценкаВалютыВРегистре_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПереоценкаВалютыВРегистре_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПереоценкаВалютыВРегистре";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаВалютыВРегистре");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее_Пол
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеВходящее_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПлатежноеПоручениеВходящее";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеВходящее");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеИсходящее_Пол
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеИсходящее_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПлатежноеПоручениеИсходящее";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеИсходящее");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Пол
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю_Пол
Процедура ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетНаОплатуПокупателю_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетНаОплатуПокупателю";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Пол
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Agreements_Пол
Процедура ДобавитьПОД_Справочник_Agreements_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Agreements_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Agreements";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Agreements");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CashCode_Пол
Процедура ДобавитьПОД_Справочник_CashCode_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_CashCode_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.CashCode";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_CashCode");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Catalog_Пол
Процедура ДобавитьПОД_Справочник_Catalog_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Catalog_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Catalog";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Catalog");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Corporations_Пол
Процедура ДобавитьПОД_Справочник_Corporations_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Corporations_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Corporations";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Corporations");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CountriesOfProcessLevels_Пол
Процедура ДобавитьПОД_Справочник_CountriesOfProcessLevels_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_CountriesOfProcessLevels_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.CountriesOfProcessLevels";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_CountriesOfProcessLevels");
КонецПроцедуры
#КонецОбласти
#Область Справочник_GeoMarkets_Группа
Процедура ДобавитьПОД_Справочник_GeoMarkets_Группа(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_GeoMarkets_Группа";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.GeoMarketsГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_GeoMarkets_Группа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_GeoMarkets_Пол
Процедура ДобавитьПОД_Справочник_GeoMarkets_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_GeoMarkets_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.GeoMarkets";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_GeoMarkets");
КонецПроцедуры
#КонецОбласти
#Область Справочник_LegalEntities_Пол
Процедура ДобавитьПОД_Справочник_LegalEntities_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_LegalEntities_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.LegalEntities";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_LegalEntities");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Oilfields_Пол
Процедура ДобавитьПОД_Справочник_Oilfields_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Oilfields_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Oilfields";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Oilfields");
КонецПроцедуры
#КонецОбласти
#Область Справочник_PayableCentres_Пол
Процедура ДобавитьПОД_Справочник_PayableCentres_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_PayableCentres_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.PayableCentres";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_PayableCentres");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ProcessLevels_Пол
Процедура ДобавитьПОД_Справочник_ProcessLevels_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ProcessLevels_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ProcessLevels";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ProcessLevels");
КонецПроцедуры
#КонецОбласти
#Область Справочник_SoldTo_Пол
Процедура ДобавитьПОД_Справочник_SoldTo_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_SoldTo_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.SoldTo";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_SoldTo");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TNVEDCodes_Пол
Процедура ДобавитьПОД_Справочник_TNVEDCodes_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_TNVEDCodes_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.TNVEDCodes";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_TNVEDCodes");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TNVEDCodesГруппа_Пол
Процедура ДобавитьПОД_Справочник_TNVEDCodesГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_TNVEDCodesГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.TNVEDCodesГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_TNVEDCodesГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_UOMs_Пол
Процедура ДобавитьПОД_Справочник_UOMs_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_UOMs_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.UOMs";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_UOMs");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Wells_Пол
Процедура ДобавитьПОД_Справочник_Wells_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Wells_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Wells";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Wells");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Пол
Процедура ДобавитьПОД_Справочник_Банки_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа_Пол
Процедура ДобавитьПОД_Справочник_БанкиГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанкиГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанкиГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Пол
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_П
Процедура ДобавитьПОД_Справочник_Валюты_П(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_П";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоверенностиНалогоплательщика_Пол
Процедура ДобавитьПОД_Справочник_ДоверенностиНалогоплательщика_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоверенностиНалогоплательщика_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДоверенностиНалогоплательщика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоверенностиНалогоплательщика");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Пол
Процедура ДобавитьПОД_Справочник_Договоры_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыГруппа_Пол
Процедура ДобавитьПОД_Справочник_ДоговорыГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДоговорыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДолжностиОрганизаций_Пол
Процедура ДобавитьПОД_Справочник_ДолжностиОрганизаций_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДолжностиОрганизаций_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДолжностиОрганизаций";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДолжностиОрганизаций_Отпр");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Пол
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЕдиницыИзмерения_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗаказНаряды_Пол
Процедура ДобавитьПОД_Справочник_ЗаказНаряды_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЗаказНаряды_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЗаказНаряды";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗаказНаряды");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗаявкиНаЗакупку_Пол
Процедура ДобавитьПОД_Справочник_ЗаявкиНаЗакупку_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЗаявкиНаЗакупку_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЗаявкиНаЗакупку";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗаявкиНаЗакупку");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ИнвойсинговыеЦентры_Пол
Процедура ДобавитьПОД_Справочник_ИнвойсинговыеЦентры_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ИнвойсинговыеЦентры_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ИнвойсинговыеЦентры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ИнвойсинговыеЦентры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтактныеЛица_Пол
Процедура ДобавитьПОД_Справочник_КонтактныеЛица_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтактныеЛица_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтактныеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛица");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Пол
Процедура ДобавитьПОД_Справочник_Контрагенты_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыLawson_Пол
Процедура ДобавитьПОД_Справочник_КонтрагентыLawson_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыLawson_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыLawson";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыLawson");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыLawsonГруппа_Пол
Процедура ДобавитьПОД_Справочник_КонтрагентыLawsonГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыLawsonГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыLawsonГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыLawsonГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Пол
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Пол
Процедура ДобавитьПОД_Справочник_Номенклатура_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Пол
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураИмпорт_Пол
Процедура ДобавитьПОД_Справочник_НоменклатураИмпорт_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураИмпорт_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураИмпорт";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураИмпорт");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураИмпортГруппа_Пол
Процедура ДобавитьПОД_Справочник_НоменклатураИмпортГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураИмпортГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураИмпортГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураИмпортГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы_Пол
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурныеГруппы_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатурныеГруппы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТД_Пол
Процедура ДобавитьПОД_Справочник_НомераГТД_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НомераГТД_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НомераГТД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НомераГТД");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Пол
Процедура ДобавитьПОД_Справочник_Организации_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Пол
Процедура ДобавитьПОД_Справочник_Подразделения_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияГруппа_Пол
Процедура ДобавитьПОД_Справочник_ПодразделенияГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПодразделенияГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПодразделенияГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Пол
Процедура ДобавитьПОД_Справочник_Пользователи_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходы_Пол
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПрочиеДоходыИРасходы_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПрочиеДоходыИРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрочиеДоходыИРасходы");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходыГруппа_Пол
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыИРасходыГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПрочиеДоходыИРасходыГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПрочиеДоходыИРасходыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрочиеДоходыИРасходыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Пол
Процедура ДобавитьПОД_Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_РеализацияТоваровУслугПрисоединенныеФайлы_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.РеализацияТоваровУслугПрисоединенныеФайлы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РеализацияТоваровУслугПрисоединенныеФ");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сегменты_Пол
Процедура ДобавитьПОД_Справочник_Сегменты_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Сегменты_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Сегменты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Сегменты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СегментыГруппа_Пол
Процедура ДобавитьПОД_Справочник_СегментыГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СегментыГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СегментыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СегментыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Пол
Процедура ДобавитьПОД_Справочник_Склады_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Пол
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СкладыГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатусыВозвратаКС_Пол
Процедура ДобавитьПОД_Справочник_СтатусыВозвратаКС_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатусыВозвратаКС_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатусыВозвратаКС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатусыВозвратаКС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Пол
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатрат_Пол
Процедура ДобавитьПОД_Справочник_СтатьиЗатрат_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиЗатрат_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиЗатрат";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатрат");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатратГруппа_Пол
Процедура ДобавитьПОД_Справочник_СтатьиЗатратГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиЗатратГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиЗатратГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиЗатратГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Пол
Процедура ДобавитьПОД_Справочник_СтраныМира_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТерриториальныеУсловия_Пол
Процедура ДобавитьПОД_Справочник_ТерриториальныеУсловия_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТерриториальныеУсловия_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТерриториальныеУсловия";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТерриториальныеУсловия");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыНоменклатуры_Пол
Процедура ДобавитьПОД_Справочник_ТипыНоменклатуры_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыНоменклатуры_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТипыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Пол
Процедура ДобавитьПОД_Справочник_ТипыЦен_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТомаХраненияФайлов_Пол
Процедура ДобавитьПОД_Справочник_ТомаХраненияФайлов_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТомаХраненияФайлов_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТомаХраненияФайлов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТомаХраненияФайлов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Пол
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Пол
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Пол(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛицаГруппа_Пол";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Документ_SiebelOrders(ПравилаКонвертации);
	ДобавитьПКО_Документ_Tickets(ПравилаКонвертации);
	ДобавитьПКО_Документ_АктСверкиВзаиморасчетов(ПравилаКонвертации);
	ДобавитьПКО_Документ_ЗакрытиеСчетовНаПредоплату(ПравилаКонвертации);
	ДобавитьПКО_Документ_КорректировкаДолга(ПравилаКонвертации);
	ДобавитьПКО_Документ_ПереоценкаВалютыВРегистре(ПравилаКонвертации);
	ДобавитьПКО_Документ_ПлатежноеПоручениеВходящее(ПравилаКонвертации);
	ДобавитьПКО_Документ_ПлатежноеПоручениеИсходящее(ПравилаКонвертации);
	ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации);
	ДобавитьПКО_Документ_СчетНаОплатуПокупателю(ПравилаКонвертации);
	ДобавитьПКО_Документ_СчетФактураВыданный(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Agreements(ПравилаКонвертации);
	ДобавитьПКО_Справочник_BORGs(ПравилаКонвертации);
	ДобавитьПКО_Справочник_CashCode(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Catalog(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Cities(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Corporations(ПравилаКонвертации);
	ДобавитьПКО_Справочник_CountriesOfProcessLevels(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ermSourcesIDs(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ermTriggerTypes(ПравилаКонвертации);
	ДобавитьПКО_Справочник_GeoMarkets(ПравилаКонвертации);
	ДобавитьПКО_Справочник_GeoMarkets_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_LegalEntities(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Oilfields(ПравилаКонвертации);
	ДобавитьПКО_Справочник_PayableCentres(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ProcessLevels(ПравилаКонвертации);
	ДобавитьПКО_Справочник_SoldTo(ПравилаКонвертации);
	ДобавитьПКО_Справочник_TimeZones(ПравилаКонвертации);
	ДобавитьПКО_Справочник_TNVEDCodes(ПравилаКонвертации);
	ДобавитьПКО_Справочник_TNVEDCodesГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_UOMs(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Warehouses(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Wells(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДоверенностиНалогоплательщика(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДоговорыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДолжностиОрганизаций_Отпр(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗаказНаряды(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ИнвойсинговыеЦентры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтактныеЛица(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыLawson(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыLawsonГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КостЦентры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураИмпорт(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураИмпортГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппы(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НомераГТД(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Организации(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПодразделенияГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПрочиеДоходыИРасходы(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПрочиеДоходыИРасходыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Сегменты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СегментыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Склады(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатусыВозвратаКС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиЗатрат(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиЗатратГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТерриториальныеУсловия(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТомаХраненияФайлов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_ВводОстатковПоВзаиморасчетам_Отпр
Процедура ДобавитьПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВводОстатковПоВзаиморасчетам_Отпр";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВводОстатковПоВзаиморасчетам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Остатки", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Остатки;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "WO";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЗаказНаряды";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КостЦентр";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сделка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаУпр";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетНаПредоплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Тикеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Тикеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Тикет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Tickets";

КонецПроцедуры

Процедура ПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Остатки",ДанныеИБ.Остатки);
	ДанныеXDTO.Вставить("Тикеты",ДанныеИБ.Тикеты);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Документ_SiebelOrders
Процедура ДобавитьПКО_Документ_SiebelOrders(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_SiebelOrders";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.SiebelOrders;
	ПравилоКонвертации.ОбъектФормата = "Документ.SiebelOrders";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_SiebelOrders_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_SiebelOrders_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_SiebelOrders_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Agreement";
	НоваяСтрока.СвойствоФормата = "Agreement";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AU";
	НоваяСтрока.СвойствоФормата = "AU";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Client";
	НоваяСтрока.СвойствоФормата = "Client";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CustomerID";
	НоваяСтрока.СвойствоФормата = "CustomerID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Geomarket";
	НоваяСтрока.СвойствоФормата = "Geomarket";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "GLDate";
	НоваяСтрока.СвойствоФормата = "GLDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LawsonInvoice";
	НоваяСтрока.СвойствоФормата = "LawsonInvoice";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LawsonOrder";
	НоваяСтрока.СвойствоФормата = "LawsonOrder";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Location";
	НоваяСтрока.СвойствоФормата = "Location";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Name";
	НоваяСтрока.СвойствоФормата = "Name";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NetTotal";
	НоваяСтрока.СвойствоФормата = "NetTotal";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProductLine";
	НоваяСтрока.СвойствоФормата = "ProductLine";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Segment";
	НоваяСтрока.СвойствоФормата = "Segment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ShipTo";
	НоваяСтрока.СвойствоФормата = "ShipTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Status";
	НоваяСтрока.СвойствоФормата = "Status";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Type";
	НоваяСтрока.СвойствоФормата = "Type";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Details", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Details;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Account";
	НоваяСтрока.СвойствоФормата = "Account";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AU";
	НоваяСтрока.СвойствоФормата = "AU";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Description";
	НоваяСтрока.СвойствоФормата = "Description";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LineID";
	НоваяСтрока.СвойствоФормата = "LineID";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ParentLineID";
	НоваяСтрока.СвойствоФормата = "ParentLineID";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PartNumber";
	НоваяСтрока.СвойствоФормата = "PartNumber";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_SiebelOrders_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	табDetails = ДанныеИБ.Details.Выгрузить();
		ДанныеXDTO.Вставить("Details",табDetails);
		ДанныеXDTO.Вставить("LawsonCompanyCode",4);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_SiebelOrders_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Details") И ЗначениеЗаполнено(ДанныеXDTO.Details) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Details Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Account", Строка.Account); 
				СтруктураДанныхСтроки.Вставить("AU", Строка.AU); 
				СтруктураДанныхСтроки.Вставить("Description", Строка.Description);  
				СтруктураДанныхСтроки.Вставить("LineID", Строка.LineID);  
				СтруктураДанныхСтроки.Вставить("ParentLineID", Строка.ParentLineID);  
				СтруктураДанныхСтроки.Вставить("PartNumber", Строка.PartNumber);  
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);  
				СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество);  
				СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура);  
				СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);  
				СтруктураДанныхСтроки.Вставить("Цена", Строка.Цена);  
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Details", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_SiebelOrders_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СсылкаНаДокумент = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(),ДанныеИБ.Ссылка);
	ДобавитьДокументКПометкеПроведен (КомпонентыОбмена,СсылкаНаДокумент);                 
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_Tickets
Процедура ДобавитьПКО_Документ_Tickets(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Tickets";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.Tickets;
	ПравилоКонвертации.ОбъектФормата = "Документ.Tickets";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Tickets_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_Tickets_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Tickets_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AccountingUnit";
	НоваяСтрока.СвойствоФормата = "AccountingUnit";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Agreement";
	НоваяСтрока.СвойствоФормата = "Agreement";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Agreements";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "GeoMarket";
	НоваяСтрока.СвойствоФормата = "GeoMarket";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Oilfields";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProductLine";
	НоваяСтрока.СвойствоФормата = "ProductLine";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SiebelOrder";
	НоваяСтрока.СвойствоФормата = "SiebelOrder";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_SiebelOrders";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TicketNumber";
	НоваяСтрока.СвойствоФормата = "TicketNumber";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Wells";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "Курс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статус";
	НоваяСтрока.СвойствоФормата = "СтатусДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "TicketsStatuses";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаPM";
	НоваяСтрока.СвойствоФормата = "СуммаPM";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаRech";
	НоваяСтрока.СвойствоФормата = "СуммаRech";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаWS";
	НоваяСтрока.СвойствоФормата = "СуммаWS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетPM";
	НоваяСтрока.СвойствоФормата = "СчетPM";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетRech";
	НоваяСтрока.СвойствоФормата = "СчетRech";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетWS";
	НоваяСтрока.СвойствоФормата = "СчетWS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПроведения";
	НоваяСтрока.СвойствоФормата = "ДатаПроведения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипТикета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Invoices", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Invoices;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Amount";
	НоваяСтрока.СвойствоФормата = "Amount";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Group";
	НоваяСтрока.СвойствоФормата = "Group";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Invoice";
	НоваяСтрока.СвойствоФормата = "Invoice";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Lawson", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Lawson;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Account";
	НоваяСтрока.СвойствоФормата = "Account";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаPM";
	НоваяСтрока.СвойствоФормата = "СуммаPM";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаRech";
	НоваяСтрока.СвойствоФормата = "СуммаRech";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаWS";
	НоваяСтрока.СвойствоФормата = "СуммаWS";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_Tickets_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
	
		сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Тип);
		ДанныеXDTO.Вставить("ТипТикета",сткДанных);
		табLawson = ДанныеИБ.Lawson.Выгрузить();
		ДанныеXDTO.Вставить("Lawson",табLawson);
		табInvoices = ДанныеИБ.Invoices.Выгрузить();
		ДанныеXDTO.Вставить("Invoices",табInvoices);
		ОргСЛА = Справочники.Организации.НайтиПоКоду("00001");
		ДанныеXDTO.Вставить("Организация",ОргСЛА);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_Tickets_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипТикета") Тогда
	
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ТипТикета);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.Тип = текСсылка;	               
	
	КонецЕсли;
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Lawson") И ЗначениеЗаполнено(ДанныеXDTO.Lawson) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Lawson Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Account", Строка.Account); 
				СтруктураДанныхСтроки.Вставить("СуммаPM", Строка.СуммаPM); 
				СтруктураДанныхСтроки.Вставить("СуммаRech", Строка.СуммаRech);  
				СтруктураДанныхСтроки.Вставить("СуммаWS", Строка.СуммаWS);  
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Lawson", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Invoices") И ЗначениеЗаполнено(ДанныеXDTO.Invoices) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Invoices Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Account", Строка.Account); 
				СтруктураДанныхСтроки.Вставить("Group", Строка.Group); 
				СтруктураДанныхСтроки.Вставить("Invoice", Строка.Invoice);  
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Invoices", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_Tickets_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ДанныеИБ=Неопределено Тогда
		ДанныеИБ.Тип = ПолученныеДанные.Тип;
	КОнецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_АктСверкиВзаиморасчетов
Процедура ДобавитьПКО_Документ_АктСверкиВзаиморасчетов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АктСверкиВзаиморасчетов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АктСверкиВзаиморасчетов;
	ПравилоКонвертации.ОбъектФормата = "Документ.АктСверкиВзаиморасчетов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АктСверкиВзаиморасчетов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АктСверкиВзаиморасчетов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АктСверкиВзаиморасчетов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TreasurySupervisor";
	НоваяСтрока.СвойствоФормата = "TreasurySupervisor";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыводитьКурсовыеРазницы";
	НоваяСтрока.СвойствоФормата = "ВыводитьКурсовыеРазницы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачала";
	НоваяСтрока.СвойствоФормата = "ДатаНачала";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОстатокНаКонец";
	НоваяСтрока.СвойствоФормата = "ОстатокНаКонец";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОстатокНаНачало";
	НоваяСтрока.СвойствоФормата = "ОстатокНаНачало";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительКонтрагента";
	НоваяСтрока.СвойствоФормата = "ПредставительКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтактныеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительОрганизации";
	НоваяСтрока.СвойствоФормата = "ПредставительОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Расхождение";
	НоваяСтрока.СвойствоФормата = "Расхождение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СверкаСогласована";
	НоваяСтрока.СвойствоФормата = "СверкаСогласована";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УбратьПереоценки";
	НоваяСтрока.СвойствоФормата = "УбратьПереоценки";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Контрагенты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Контрагенты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПоДаннымКонтрагента", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПоДаннымКонтрагента;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дебет";
	НоваяСтрока.СвойствоФормата = "Дебет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДебетВал";
	НоваяСтрока.СвойствоФормата = "ДебетВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кредит";
	НоваяСтрока.СвойствоФормата = "Кредит";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КредитВал";
	НоваяСтрока.СвойствоФормата = "КредитВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПоДаннымОрганизации", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПоДаннымОрганизации;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дебет";
	НоваяСтрока.СвойствоФормата = "Дебет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДебетВал";
	НоваяСтрока.СвойствоФормата = "ДебетВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Кредит";
	НоваяСтрока.СвойствоФормата = "Кредит";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КредитВал";
	НоваяСтрока.СвойствоФормата = "КредитВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АктСверкиВзаиморасчетов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	/////////////////////////////////////ПоДаннымОрганизации
	табДанных = ДанныеИБ.ПоДаннымОрганизации.Выгрузить();
	табДанных.Колонки.Добавить("ДокументДляОбмена");
	Для Каждого текСтрока ИЗ табДанных Цикл
		Если ЗначениеЗаполнено(текСтрока.Документ) Тогда
			текСтрока.ДокументДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.Документ);
		Иначе
			текСтрока.ДокументДляОбмена = "";	
		КонецЕсли;		
	КонецЦикла;
	табДанных.Колонки.Удалить("Документ");
	табДанных.Колонки.ДокументДляОбмена.Имя = "Документ";
	ДанныеXDTO.Вставить("ПоДаннымОрганизации",табДанных);
	
	/////////////////////////////////////ПоДаннымКонтрагента
	табДанных = ДанныеИБ.ПоДаннымКонтрагента.Выгрузить();
	табДанных.Колонки.Добавить("ДокументДляОбмена");
	Для Каждого текСтрока ИЗ табДанных Цикл
		Если ЗначениеЗаполнено(текСтрока.Документ) Тогда
			текСтрока.ДокументДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.Документ);
		Иначе
			текСтрока.ДокументДляОбмена = "";	
		КонецЕсли;		
	КонецЦикла;
	табДанных.Колонки.Удалить("Документ");
	табДанных.Колонки.ДокументДляОбмена.Имя = "Документ";
	ДанныеXDTO.Вставить("ПоДаннымКонтрагента",табДанных);
	
	
	/////////////////////////////////////Контрагенты
	ДанныеXDTO.Вставить("Контрагенты",ДанныеИБ.Контрагенты.Выгрузить());
	Если ДанныеИБ.Контрагенты.Количество() > 0 Тогда
		текКонтрагент = ДанныеИБ.Контрагенты[0].Контрагент;
		ДанныеXDTO.Вставить("КонтрагентСсылка",ПолучитьСтруктуруXDTOизСсылки (текКонтрагент,КомпонентыОбмена));
		текДоговор =   ДанныеИБ.Контрагенты[0].ДоговорКонтрагента;
		ДанныеXDTO.Вставить("ДоговорКонтрагентаСсылка",ПолучитьСтруктуруXDTOизСсылки (текДоговор,КомпонентыОбмена));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АктСверкиВзаиморасчетов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	/////////////////////////////////////////////////////ПоДаннымОрганизации
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("ПоДаннымОрганизации") И ЗначениеЗаполнено(ДанныеXDTO.ПоДаннымОрганизации) Тогда   
			Для Каждого Строка Из ДанныеXDTO.ПоДаннымОрганизации Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
				СтруктураДанныхСтроки.Вставить("КредитВал", Строка.КредитВал); 
				СтруктураДанныхСтроки.Вставить("Кредит", Строка.Кредит); 
				
				СтруктураДанныхСтроки.Вставить("Договор", Строка.Договор); 
				СтруктураДанныхСтроки.Вставить("ДебетВал", Строка.ДебетВал); 
				СтруктураДанныхСтроки.Вставить("Дебет", Строка.Дебет); 
				СтруктураДанныхСтроки.Вставить("Дата", Строка.Дата); 
				
				
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Документ);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
				СтруктураДанныхСтроки.Вставить("Документ",текСсылка);	               
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("ПоДаннымОрганизации", МассивСтрок);
		КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////ПоДаннымКонтрагента
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("ПоДаннымКонтрагента") И ЗначениеЗаполнено(ДанныеXDTO.ПоДаннымКонтрагента) Тогда   
			Для Каждого Строка Из ДанныеXDTO.ПоДаннымКонтрагента Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
				СтруктураДанныхСтроки.Вставить("КредитВал", Строка.КредитВал); 
				СтруктураДанныхСтроки.Вставить("Кредит", Строка.Кредит); 
				
				СтруктураДанныхСтроки.Вставить("Договор", Строка.Договор); 
				СтруктураДанныхСтроки.Вставить("ДебетВал", Строка.ДебетВал); 
				СтруктураДанныхСтроки.Вставить("Дебет", Строка.Дебет); 
				СтруктураДанныхСтроки.Вставить("Дата", Строка.Дата); 
				
				
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Документ);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
				СтруктураДанныхСтроки.Вставить("Документ",текСсылка);	               
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("ПоДаннымКонтрагента", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////Контрагенты
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Контрагенты") И ЗначениеЗаполнено(ДанныеXDTO.Контрагенты) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Контрагенты Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента); 
				СтруктураДанныхСтроки.Вставить("Контрагент", Строка.Контрагент); 
	
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		Иначе
			СтруктураДанныхСтроки = Новый Структура; 
			Если ДанныеXDTO.Свойство("КонтрагентСсылка") И ЗначениеЗаполнено(ДанныеXDTO.КонтрагентСсылка) Тогда
				СтруктураДанныхСтроки.Вставить("Контрагент", ДанныеXDTO.КонтрагентСсылка); 
			КонецЕсли;
			Если ДанныеXDTO.Свойство("ДоговорКонтрагентаСсылка") И ЗначениеЗаполнено(ДанныеXDTO.ДоговорКонтрагентаСсылка) Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДанныеXDTO.ДоговорКонтрагентаСсылка); 
			КонецЕсли;
			
			МассивСтрок.Добавить(СтруктураДанныхСтроки);     
		КонецЕсли;  
		
		Если МассивСтрок.Количество() > 0 Тогда       
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагенты", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры

Процедура ПКО_Документ_АктСверкиВзаиморасчетов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого текСтрока Из ПолученныеДанные.ПоДаннымОрганизации Цикл
		лкСТрока = ПолученныеДанные.ДополнительныеСвойства.ПоДаннымОрганизации[ПолученныеДанные.ПоДаннымОрганизации.Индекс(текСтрока)];
		текСтрока.Документ = лкСТрока.Документ ;
	КонецЦикла;
	Для каждого текСтрока Из ПолученныеДанные.ПоДаннымКонтрагента Цикл
		лкСТрока = ПолученныеДанные.ДополнительныеСвойства.ПоДаннымКонтрагента[ПолученныеДанные.ПоДаннымКонтрагента.Индекс(текСтрока)];
		текСтрока.Документ = лкСТрока.Документ ;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗакрытиеСчетовНаПредоплату
Процедура ДобавитьПКО_Документ_ЗакрытиеСчетовНаПредоплату(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗакрытиеСчетовНаПредоплату";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗакрытиеСчетовНаПредоплату;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗакрытиеСчетовНаПредоплату";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Счета", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Счета;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.СвойствоФормата = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";

КонецПроцедуры

Процедура ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
	
		табСчета = ДанныеИБ.Счета.Выгрузить();
		ДанныеXDTO.Вставить("Счета",табСчета);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Счета") И ЗначениеЗаполнено(ДанныеXDTO.Счета) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Счета Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Валюта", Строка.Валюта); 
				СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", Строка.КурсВзаиморасчетов); 
				СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", Строка.СуммаВзаиморасчетов);  
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", Строка.СчетНаОплату);  
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Счета", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга
Процедура ДобавитьПКО_Документ_КорректировкаДолга(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаДолга";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаДолга_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_КорректировкаДолга_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаДолга_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийКорректировкаДолга";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПроведения";
	НоваяСтрока.СвойствоФормата = "ДатаПроведения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИспользоватьВспомогательныйСчет";
	НоваяСтрока.СвойствоФормата = "ИспользоватьВспомогательныйСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентДебитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйПериод";
	НоваяСтрока.СвойствоФормата = "НалоговыйПериод";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
			
		табДанных = ДанныеИБ.СуммыДолга.Выгрузить();
		табДанных.Колонки.Добавить("СделкаДляОбмена");
		табДанных.Колонки.Добавить("ДоговорКонтрагентаДляОбмена");
	
		табДебиторская = табДанных.СкопироватьКолонки();
		табКредиторская = табДанных.СкопироватьКолонки();
		
		Для Каждого текСтрока ИЗ табДанных Цикл
			
			Если ЗначениеЗаполнено(текСтрока.Сделка) Тогда
	
				текСтрока.СделкаДляОбмена =ПолучитьСтруктуруXDTOизСсылки(текСтрока.Сделка,КомпонентыОбмена);
			Иначе
				текСтрока.СделкаДляОбмена = "";	
			КонецЕсли;	
				
			Если ЗначениеЗаполнено(текСтрока.ДоговорКонтрагента) Тогда
	
				текСтрока.ДоговорКонтрагентаДляОбмена = ПолучитьСтруктуруXDTOизСсылки(текСтрока.ДоговорКонтрагента,КомпонентыОбмена);
				//текСтрока.ДоговорКонтрагентаДляОбмена = сткДанных;
			Иначе
				текСтрока.ДоговорКонтрагентаДляОбмена = "";	
			КонецЕсли;	
				
			Если текСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		    	нвСтрока = табДебиторская.Добавить();
		    Иначе
		    	нвСтрока = табКредиторская.Добавить();
		    КОнецЕСли;
		    ЗаполнитьЗначенияСвойств(нвСтрока,текСтрока);
		
		КОнецЦикла;
	
		табДебиторская.Колонки.Удалить("Сделка");
		табДебиторская.Колонки.СделкаДляОбмена.Имя = "Сделка";
		табДебиторская.Колонки.Удалить("ДоговорКонтрагента");
		табДебиторская.Колонки.ДоговорКонтрагентаДляОбмена.Имя = "ДоговорКонтрагента";
	
		табКредиторская.Колонки.Удалить("Сделка");
		табКредиторская.Колонки.СделкаДляОбмена.Имя = "Сделка";
		табКредиторская.Колонки.Удалить("ДоговорКонтрагента");
		табКредиторская.Колонки.ДоговорКонтрагентаДляОбмена.Имя = "ДоговорКонтрагента";
	
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность",табДебиторская);
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность",табКредиторская);
		ДанныеXDTO.Вставить("ПодразделениеОрганизации",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	табДолга = ПолученныеДанные.СуммыДолга.ВыгрузитьКолонки();
	///////////////////////////////////////////////ДебиторскаяЗадолженность
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("ДебиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.ДебиторскаяЗадолженность) Тогда   
		Для Каждого Строка Из ДанныеXDTO.ДебиторскаяЗадолженность Цикл 
		
		
		
			нвСтрока = табДолга.Добавить();
		
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.ДоговорКонтрагента);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			нвСтрока.ДоговорКонтрагента  = текСсылка;	               
	
			нвСтрока.КратностьВзаиморасчетов =  Строка.КратностьВзаиморасчетов;
			нвСтрока.КурсВзаиморасчетов =  Строка.КурсВзаиморасчетов;
			нвСтрока.Сумма =  Строка.Сумма;
			нвСтрока.СуммаВзаиморасчетов =  Строка.СуммаВзаиморасчетов;
			нвСтрока.СуммаНУ =  Строка.СуммаНУ;
			нвСтрока.ВидЗадолженности =  Перечисления.ВидыЗадолженности.Дебиторская;
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Сделка);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			нвСтрока.Сделка  = текСсылка;	               
	
		КонецЦикла;
	КонецЕсли;  
	
	Если ДанныеXDTO.Свойство("КредиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.КредиторскаяЗадолженность) Тогда   
		Для Каждого Строка Из ДанныеXDTO.КредиторскаяЗадолженность Цикл 
		
			нвСтрока = табДолга.Добавить();
		
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.ДоговорКонтрагента);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			нвСтрока.ДоговорКонтрагента  = текСсылка;	               
	
			нвСтрока.КратностьВзаиморасчетов =  Строка.КратностьВзаиморасчетов;
			нвСтрока.КурсВзаиморасчетов =  Строка.КурсВзаиморасчетов;
			нвСтрока.Сумма =  Строка.Сумма;
			нвСтрока.СуммаВзаиморасчетов =  Строка.СуммаВзаиморасчетов;
			нвСтрока.СуммаНУ =  Строка.СуммаНУ;
			нвСтрока.ВидЗадолженности =  Перечисления.ВидыЗадолженности.Кредиторская;
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Сделка);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			нвСтрока.Сделка  = текСсылка;	               
	
		КонецЦикла;
	КонецЕсли;  
	
	Если табДолга.Количество() > 0 Тогда 
	   ПолученныеДанные.СуммыДолга.Загрузить(табДолга);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	Если ДанныеXDTO.СВойство("ПодразделениеОрганизации")  Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ПодразделениеОрганизации);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.ПодразделениеОрганизации = текСсылка;	               
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ДанныеИБ = Неопределено Тогда
		ДанныеИБ.СуммыДолга.Загрузить(ПолученныеДанные.СуммыДолга.Выгрузить());
		ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;	               
	КонецЕсли;
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаВалютыВРегистре
Процедура ДобавитьПКО_Документ_ПереоценкаВалютыВРегистре(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПереоценкаВалютыВРегистре";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПереоценкаВалютыВРегистре;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПереоценкаВалютыВРегистре";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсовыеРазницыAP";
	НоваяСтрока.СвойствоФормата = "КурсовыеРазницыAP";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсовыеРазницыAR";
	НоваяСтрока.СвойствоФормата = "КурсовыеРазницыAR";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПереоценкаВалютыВРегистре";
	НоваяСтрока.СвойствоФормата = "ПереоценкаВалютыВРегистре";

КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее
Процедура ДобавитьПКО_Документ_ПлатежноеПоручениеВходящее(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручениеВходящее";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПлатежноеПоручениеВходящее";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Allocated";
	НоваяСтрока.СвойствоФормата = "Allocated";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Batch";
	НоваяСтрока.СвойствоФормата = "Batch";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ValueDate";
	НоваяСтрока.СвойствоФормата = "ValueDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПоступлениеБезналичныхДенежныхСредств";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПроведения";
	НоваяСтрока.СвойствоФормата = "ДатаПроведения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КостЦентр";
	НоваяСтрока.СвойствоФормата = "КостЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйПериод";
	НоваяСтрока.СвойствоФормата = "НалоговыйПериод";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.СвойствоФормата = "Оплачено";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРаспределения";
	НоваяСтрока.СвойствоФормата = "СуммаРаспределения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "СчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "СчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сделка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерLawson";
	НоваяСтрока.СвойствоФормата = "НомерLawson";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.СвойствоФормата = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаПредоплату";
	НоваяСтрока.СвойствоФормата = "СчетНаПредоплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РеквизитыКонтрагента", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РеквизитыКонтрагента;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.СвойствоФормата = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Реквизит";
	НоваяСтрока.СвойствоФормата = "Реквизит";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипКонтрагента";
	НоваяСтрока.СвойствоФормата = "ТипКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеВходящее_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
	
		табДанных = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
		табДанных.Колонки.Добавить("СделкаДляОбмена");
		Для Каждого текСтрока ИЗ табДанных Цикл
			Если ЗначениеЗаполнено(текСтрока.Сделка) Тогда
				текСтрока.СделкаДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.Сделка);
			Иначе
				текСтрока.СделкаДляОбмена = "";	
			КонецЕсли;		
		КонецЦикла;
		табДанных.Колонки.Удалить("Сделка");
		табДанных.Колонки.СделкаДляОбмена.Имя = "Сделка";
		ДанныеXDTO.Вставить("РасшифровкаПлатежа",табДанных);
	
		табДанных = ДанныеИБ.РеквизитыКонтрагента.Выгрузить();
		ДанныеXDTO.Вставить("РеквизитыКонтрагента",табДанных);
		ДанныеXDTO.Вставить("ПодразделениеОрганизации",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеВходящее_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	///////////////////////////////////////////////РасшифровкаПлатежа
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда   
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента); 
			СтруктураДанныхСтроки.Вставить("КратностьВзаиморасчетов", Строка.КратностьВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", Строка.КурсВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("НомерLawson", Строка.НомерLawson); 
			СтруктураДанныхСтроки.Вставить("НомерСчета", Строка.НомерСчета); 
			СтруктураДанныхСтроки.Вставить("ПодразделениеОрганизации", Строка.ПодразделениеОрганизации); 
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС); 
			СтруктураДанныхСтроки.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДвиженияДенежныхСредств); 
			СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", Строка.СуммаВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС); 
			СтруктураДанныхСтроки.Вставить("СуммаПлатежа", Строка.СуммаПлатежа); 
			СтруктураДанныхСтроки.Вставить("СчетНаПредоплату", Строка.СчетНаПредоплату); 
	
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Сделка);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			СтруктураДанныхСтроки.Вставить("Сделка",текСсылка);	               
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", массивСтрок);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////РеквизитыКонтрагента
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("РеквизитыКонтрагента") И ЗначениеЗаполнено(ДанныеXDTO.РеквизитыКонтрагента) Тогда   
		Для Каждого Строка Из ДанныеXDTO.РеквизитыКонтрагента Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("Значение", Строка.Значение); 
			СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
			СтруктураДанныхСтроки.Вставить("Реквизит", Строка.Реквизит); 
			СтруктураДанныхСтроки.Вставить("ТипКонтрагента", Строка.ТипКонтрагента); 
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("РеквизитыКонтрагента", массивСтрок);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	Если ДанныеXDTO.СВойство("ПодразделениеОрганизации")  Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ПодразделениеОрганизации);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.ПодразделениеОрганизации = текСсылка;	               
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеВходящее_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого текСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл
			лкСТрока = ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа[ПолученныеДанные.РасшифровкаПлатежа.Индекс(текСтрока)];
			текСтрока.Сделка = лкСТрока.Сделка ;
		КонецЦикла;
		Если НЕ ДанныеИБ = Неопределено Тогда
			ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
			ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;	               
		КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеИсходящее
Процедура ДобавитьПКО_Документ_ПлатежноеПоручениеИсходящее(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручениеИсходящее";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПлатежноеПоручениеИсходящее";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийППИсходящее";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсходящийНомер";
	НоваяСтрока.СвойствоФормата = "ИсходящийНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодБК";
	НоваяСтрока.СвойствоФормата = "КодБК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКАТО";
	НоваяСтрока.СвойствоФормата = "КодОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.СвойствоФормата = "Оплачено";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "ОчередностьПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "СчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "СчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПлательщика";
	НоваяСтрока.СвойствоФормата = "ТекстПлательщика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстПолучателя";
	НоваяСтрока.СвойствоФормата = "ТекстПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сделка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.СвойствоФормата = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РеквизитыКонтрагента", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РеквизитыКонтрагента;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.СвойствоФормата = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Реквизит";
	НоваяСтрока.СвойствоФормата = "Реквизит";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипКонтрагента";
	НоваяСтрока.СвойствоФормата = "ТипКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
	
		табДанных = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
		табДанных.Колонки.Добавить("СделкаДляОбмена");
		Для Каждого текСтрока ИЗ табДанных Цикл
			Если ЗначениеЗаполнено(текСтрока.Сделка) Тогда
				текСтрока.СделкаДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.Сделка);
			Иначе
				текСтрока.СделкаДляОбмена = "";	
			КонецЕсли;		
		КонецЦикла;
		табДанных.Колонки.Удалить("Сделка");
		табДанных.Колонки.СделкаДляОбмена.Имя = "Сделка";
		ДанныеXDTO.Вставить("РасшифровкаПлатежа",табДанных);
	
		табДанных = ДанныеИБ.РеквизитыКонтрагента.Выгрузить();
		ДанныеXDTO.Вставить("РеквизитыКонтрагента",табДанных);
	
		ДанныеXDTO.Вставить("СтруктурноеПодразделениеПолучатель",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	///////////////////////////////////////////////РасшифровкаПлатежа
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда   
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента); 
			СтруктураДанныхСтроки.Вставить("КратностьВзаиморасчетов", Строка.КратностьВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", Строка.КурсВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС); 
			СтруктураДанныхСтроки.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДвиженияДенежныхСредств); 
			СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", Строка.СуммаВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС); 
			СтруктураДанныхСтроки.Вставить("СуммаПлатежа", Строка.СуммаПлатежа); 
	
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Сделка);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			СтруктураДанныхСтроки.Вставить("Сделка",текСсылка);	               
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", массивСтрок);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////РеквизитыКонтрагента
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("РеквизитыКонтрагента") И ЗначениеЗаполнено(ДанныеXDTO.РеквизитыКонтрагента) Тогда   
		Для Каждого Строка Из ДанныеXDTO.РеквизитыКонтрагента Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("Значение", Строка.Значение); 
			СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
			СтруктураДанныхСтроки.Вставить("Реквизит", Строка.Реквизит); 
			СтруктураДанныхСтроки.Вставить("ТипКонтрагента", Строка.ТипКонтрагента); 
	
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("РеквизитыКонтрагента", массивСтрок);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	Если ДанныеXDTO.СВойство("СтруктурноеПодразделениеПолучатель")  Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.СтруктурноеПодразделениеПолучатель);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.ПодразделениеОрганизации = текСсылка;	               
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеИсходящее_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого текСтрока Из ПолученныеДанные.РасшифровкаПлатежа Цикл
			лкСТрока = ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа[ПолученныеДанные.РасшифровкаПлатежа.Индекс(текСтрока)];
			текСтрока.Сделка = лкСТрока.Сделка ;
		КонецЦикла;
		Если НЕ ДанныеИБ = Неопределено Тогда
			ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
			ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;	               
		КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermDueDateFrom";
	НоваяСтрока.СвойствоФормата = "ermDueDateFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermDueDateTo";
	НоваяСтрока.СвойствоФормата = "ermDueDateTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermTriggerDate";
	НоваяСтрока.СвойствоФормата = "ermTriggerDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Архив";
	НоваяСтрока.СвойствоФормата = "Архив";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЭлектронногоДокумента";
	НоваяСтрока.СвойствоФормата = "ВидЭлектронногоДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыводитьИННКППГрузополучателя";
	НоваяСтрока.СвойствоФормата = "ВыводитьИННКППГрузополучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВозвратаКС";
	НоваяСтрока.СвойствоФормата = "ДатаВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтправкиКС";
	НоваяСтрока.СвойствоФормата = "ДатаОтправкиКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПроведения";
	НоваяСтрока.СвойствоФормата = "ДатаПроведения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСверки";
	НоваяСтрока.СвойствоФормата = "ДатаСверки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Доверенность";
	НоваяСтрока.СвойствоФормата = "Доверенность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КомментарийСтатусаВозвратаКС";
	НоваяСтрока.СвойствоФормата = "КомментарийСтатусаВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Корректировка";
	НоваяСтрока.СвойствоФормата = "Корректировка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КредитНота";
	НоваяСтрока.СвойствоФормата = "КредитНота";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйПериод";
	НоваяСтрока.СвойствоФормата = "НалоговыйПериод";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НеЗаполнятьГрузоотправителя";
	НоваяСтрока.СвойствоФормата = "НеЗаполнятьГрузоотправителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчетаНаОплату";
	НоваяСтрока.СвойствоФормата = "НомерСчетаНаОплату";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОснованиеКредитНоты";
	НоваяСтрока.СвойствоФормата = "ОснованиеКредитНоты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтражатьВНалоговомУчете";
	НоваяСтрока.СвойствоФормата = "ОтражатьВНалоговомУчете";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПримечаниеДляСФ";
	НоваяСтрока.СвойствоФормата = "ПримечаниеДляСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Принципал";
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПрочиеПродажи";
	НоваяСтрока.СвойствоФормата = "ПрочиеПродажи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.СвойствоФормата = "Сделка";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусВозвратаКС";
	НоваяСтрока.СвойствоФормата = "СтатусВозвратаКС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатусыВозвратаКС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УтвержденаКредитНота";
	НоваяСтрока.СвойствоФормата = "УтвержденаКредитНота";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.СвойствоФормата = "УчитыватьНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДокументИнтеркомпани";
	НоваяСтрока.СвойствоФормата = "ЭтоДокументИнтеркомпани";
	
	// { RGS LFedotova 07.06.2018 11:54:23 - вопрос SLI-0007577
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДокументБиллинга";
	НоваяСтрока.СвойствоФормата = "ЭтоДокументБиллинга";
	// } RGS LFedotova 07.06.2018 11:54:30 - вопрос SLI-0007577 
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПроведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Предоплата", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Предоплата;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументАванса";
	НоваяСтрока.СвойствоФормата = "ДокументАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПлатежноеПоручениеВходящее";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсАванса";
	НоваяСтрока.СвойствоФормата = "КурсАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.СвойствоФормата = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "WO";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Oilfields";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProductLine";
	НоваяСтрока.СвойствоФормата = "ProductLine";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ticket";
	НоваяСтрока.СвойствоФормата = "Ticket";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Tickets";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TicketNumber";
	НоваяСтрока.СвойствоФормата = "TicketNumber";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Wells";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.СвойствоФормата = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КостЦентр";
	НоваяСтрока.СвойствоФормата = "КостЦентр";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТД";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезНДСРуб";
	НоваяСтрока.СвойствоФормата = "СуммаБезНДСРуб";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСРуб";
	НоваяСтрока.СвойствоФормата = "СуммаНДСРуб";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "WO";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Oilfields";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProductLine";
	НоваяСтрока.СвойствоФормата = "ProductLine";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ticket";
	НоваяСтрока.СвойствоФормата = "Ticket";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Tickets";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TicketNumber";
	НоваяСтрока.СвойствоФормата = "TicketNumber";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Wells";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КостЦентр";
	НоваяСтрока.СвойствоФормата = "КостЦентр";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СодержаниеEng";
	НоваяСтрока.СвойствоФормата = "СодержаниеEng";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезНДСРуб";
	НоваяСтрока.СвойствоФормата = "СуммаБезНДСРуб";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСРуб";
	НоваяСтрока.СвойствоФормата = "СуммаНДСРуб";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//если выгружаем только кл. св-ва то процедуру выполнять не надо
	Если СтекВыгрузки.КОличество() >1 Тогда
		Возврат;
	КОнецЕсли;
	
	ТабТовары = ДанныеИБ.ТОвары.Выгрузить();
	ТабТОвары.Колонки.Добавить("WOДляОбмена");
	Для Каждого текСтрока ИЗ ТабТовары Цикл
		Если ЗначениеЗаполнено(текСтрока.WO) Тогда
			текСтрока.WOДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.WO);
		Иначе
			текСтрока.WOДляОбмена = "";	
		КонецЕсли;		
	КонецЦикла;
	ТабТОвары.Колонки.Удалить("WO");
	ТабТОвары.Колонки.WOДляОбмена.Имя = "WO";
	ДанныеXDTO.Вставить("Товары",табТОвары);
	
	
	ТабУслуги = ДанныеИБ.Услуги.Выгрузить();
	ТабУслуги.Колонки.Добавить("WOДляОбмена");
	Для Каждого текСтрока ИЗ ТабУслуги Цикл
		Если ЗначениеЗаполнено(текСтрока.WO) Тогда
			текСтрока.WOДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.WO);
		Иначе
			текСтрока.WOДляОбмена = "";	
		КонецЕсли;		
	КонецЦикла;
	ТабУслуги.Колонки.Удалить("WO");
	ТабУслуги.Колонки.WOДляОбмена.Имя = "WO";
	
	ДанныеXDTO.Вставить("Услуги",ТабУслуги);
	
	
	
	табПодписантов = Новый ТаблицаЗначений();
	табПодписантов.Колонки.Добавить("Сторона");
	табПодписантов.Колонки.Добавить("Роль");
	табПодписантов.Колонки.Добавить("Представитель");
	табПодписантов.Колонки.Добавить("Должность");
	
	Если ЗначениеЗаполнено(ДанныеИБ.Руководитель) Тогда
		нвСтрока = табПодписантов.Добавить();
		нвСтрока.Представитель = ПолучитьСтруктуруXDTOизСсылки(ДанныеИБ.Руководитель,КомпонентыОбмена);
		нвСтрока.Сторона = "Организация";
		нвСтрока.Роль = "Руководитель";
		нвСтрока.Должность = ПолучитьСтруктуруXDTOизСсылки(ДанныеИБ.Руководитель.Должность,КомпонентыОбмена);
	КОнецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ГлавныйБухгалтер) Тогда
		нвСтрока = табПодписантов.Добавить();
		нвСтрока.Представитель = ПолучитьСтруктуруXDTOизСсылки(ДанныеИБ.ГлавныйБухгалтер,КомпонентыОбмена);
		нвСтрока.Сторона = "Организация";
		нвСтрока.Роль = "ГлавныйБухгалтер";
		нвСтрока.Должность = ПолучитьСтруктуруXDTOизСсылки(ДанныеИБ.ГлавныйБухгалтер.Должность,КомпонентыОбмена);
	КОнецЕсли;
	
	
	ДанныеXDTO.Вставить("Подписанты",табПодписантов);
	
	табПредоплата = ДанныеИБ.Предоплата.Выгрузить();
	ДанныеXDTO.Вставить("Предоплата",табПредоплата);
	
		ДанныеXDTO.Вставить("ПодразделениеОрганизации",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	//ДанныеXDTO.Вставить("Ответственный",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Ответственный));
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	/////////////////////////////////////////////////////УСЛУГИ
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда   
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура); 
			СтруктураДанныхСтроки.Вставить("Цена", Строка.Цена); 
			СтруктураДанныхСтроки.Вставить("СуммаНДСРуб", Строка.СуммаНДСРуб);  
			СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);  
			СтруктураДанныхСтроки.Вставить("СуммаБезНДСРуб", Строка.СуммаБезНДСРуб);  
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);  
			СтруктураДанныхСтроки.Вставить("СтранаПроисхождения", Строка.СтранаПроисхождения);  
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС);  
			СтруктураДанныхСтроки.Вставить("НомерГТД", Строка.НомерГТД);  
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);  
			СтруктураДанныхСтроки.Вставить("Коэффициент", Строка.Коэффициент);  
			СтруктураДанныхСтроки.Вставить("КостЦентр", Строка.КостЦентр);  
			СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.КоличествоМест);  
			СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество);  
			СтруктураДанныхСтроки.Вставить("Well", Строка.Well);  
			СтруктураДанныхСтроки.Вставить("TicketNumber", Строка.TicketNumber);  
			СтруктураДанныхСтроки.Вставить("ProductLine", Строка.ProductLine);  
			СтруктураДанныхСтроки.Вставить("Oilfield", Строка.Oilfield);  
			СтруктураДанныхСтроки.Вставить("Ticket", Строка.Ticket);  
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.WO);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			СтруктураДанныхСтроки.Вставить("WO",текСсылка);	               
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);     
		КонецЦикла;
	КонецЕсли;  
	
	Если МассивСтрокТовары.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////УСЛУГИ
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда   
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("Цена", Строка.Цена); 
			СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура); 
			СтруктураДанныхСтроки.Вставить("Содержание", Строка.Содержание); 
			СтруктураДанныхСтроки.Вставить("СодержаниеEng", Строка.СодержаниеEng); 
			СтруктураДанныхСтроки.Вставить("СуммаНДСРуб", Строка.СуммаНДСРуб);  
			СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);  
			СтруктураДанныхСтроки.Вставить("СуммаБезНДСРуб", Строка.СуммаБезНДСРуб);  
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);  
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС);  
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);  
			СтруктураДанныхСтроки.Вставить("Коэффициент", Строка.Коэффициент);  
			СтруктураДанныхСтроки.Вставить("КостЦентр", Строка.КостЦентр);  
			СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество);  
			СтруктураДанныхСтроки.Вставить("Well", Строка.Well);  
			СтруктураДанныхСтроки.Вставить("TicketNumber", Строка.TicketNumber);  
			СтруктураДанныхСтроки.Вставить("ProductLine", Строка.ProductLine);  
			СтруктураДанныхСтроки.Вставить("Oilfield", Строка.Oilfield);  
			СтруктураДанныхСтроки.Вставить("Ticket", Строка.Ticket);  
	
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.WO);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			СтруктураДанныхСтроки.Вставить("WO",текСсылка);	               
	
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	
	Если МассивСтрокУслуги.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////ПОДПИСАНТЫ
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("Подписанты") И ЗначениеЗаполнено(ДанныеXDTO.Подписанты) Тогда   
		Для Каждого Строка Из ДанныеXDTO.Подписанты Цикл 
		
			Если Строка.Сторона = "Организация" И Строка.Роль = "Руководитель" Тогда
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Представитель);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			    ПолученныеДанные.Руководитель = текСсылка; 
			КонецЕсли;
	
		
			Если Строка.Сторона = "Организация" И Строка.Роль = "ГлавныйБухгалтер" Тогда
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.Представитель);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			    ПолученныеДанные.ГлавныйБухгалтер = текСсылка; 
			КонецЕсли;
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("Подписанты", массивСтрок);
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////ПРЕДОПЛАТА
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("Предоплата") И ЗначениеЗаполнено(ДанныеXDTO.Предоплата) Тогда   
		Для Каждого Строка Из ДанныеXDTO.Предоплата Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("КурсАванса", Строка.КурсАванса); 
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма); 
			СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", Строка.СуммаВзаиморасчетов); 
			СтруктураДанныхСтроки.Вставить("ДокументАванса", Строка.ДокументАванса); 
			СтруктураДанныхСтроки.Вставить("СчетНаОплату", Строка.СчетНаОплату); 
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("Предоплата", массивСтрок);
	КонецЕсли;
	Если ДанныеXDTO.СВойство("ПодразделениеОрганизации")  Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ПодразделениеОрганизации);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.ПодразделениеОрганизации = текСсылка;	               
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого текСтрока Из ПолученныеДанные.Товары Цикл
		лкСТрока = ПолученныеДанные.ДополнительныеСвойства.ТОвары[ПолученныеДанные.Товары.Индекс(текСтрока)];
		текСтрока.WO = лкСТрока.WO ;
	КонецЦикла;
	Для каждого текСтрока Из ПолученныеДанные.Услуги Цикл
		лкСТрока = ПолученныеДанные.ДополнительныеСвойства.Услуги[ПолученныеДанные.Услуги.Индекс(текСтрока)];
		текСтрока.WO = лкСТрока.WO ;
	КонецЦикла;
	//Для каждого текСтрока Из ПолученныеДанные.Подписанты Цикл
	//	лкСТрока = ПолученныеДанные.ДополнительныеСвойства.Подписанты[ПолученныеДанные.Подписанты.Индекс(текСтрока)];
	//	текСтрока.Представитель = лкСТрока.Представитель ;
	//	текСтрока.Должность = лкСТрока.Должность ;
	//КонецЦикла;
	Если НЕ ДанныеИБ = Неопределено Тогда
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	//	ДанныеИБ.Подписанты.Загрузить(ПолученныеДанные.Подписанты.Выгрузить());
		
		ДанныеИБ.Руководитель = ПолученныеДанные.Руководитель;
		ДанныеИБ.ГлавныйБухгалтер = ПолученныеДанные.ГлавныйБухгалтер;
		ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;	               
		
	
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетНаОплатуПокупателю
Процедура ДобавитьПКО_Документ_СчетНаОплатуПокупателю(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетНаОплатуПокупателю";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетНаОплатуПокупателю";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПокупателю_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетНаОплатуПокупателю_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетНаОплатуПокупателю_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Архив";
	НоваяСтрока.СвойствоФормата = "Архив";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСчетНаОплатуПокупателю";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДнейНаОплату";
	НоваяСтрока.СвойствоФормата = "ДнейНаОплату";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КостЦентр";
	НоваяСтрока.СвойствоФормата = "КостЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КостЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Локация";
	НоваяСтрока.СвойствоФормата = "Локация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Примечание";
	НоваяСтрока.СвойствоФормата = "Примечание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Процент";
	НоваяСтрока.СвойствоФормата = "Процент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "СтруктурнаяЕдиница";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "СчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.СвойствоФормата = "УчитыватьНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "WO";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Oilfields";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SIR";
	НоваяСтрока.СвойствоФормата = "SIR";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ticket";
	НоваяСтрока.СвойствоФормата = "Ticket";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Tickets";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Wells";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.СвойствоФормата = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "WO";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Oilfield";
	НоваяСтрока.СвойствоФормата = "Oilfield";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Oilfields";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SIR";
	НоваяСтрока.СвойствоФормата = "SIR";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ticket";
	НоваяСтрока.СвойствоФормата = "Ticket";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Tickets";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Well";
	НоваяСтрока.СвойствоФормата = "Well";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Wells";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СодержаниеEng";
	НоваяСтрока.СвойствоФормата = "СодержаниеEng";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПокупателю_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество()>1 Тогда      //не делаем обработку если выгружаются только кл. св-ва
			Возврат;
		КонецЕсли;
	
		ТабТовары = ДанныеИБ.ТОвары.Выгрузить();
		ТабТОвары.Колонки.Добавить("WOДляОбмена");
		Для Каждого текСтрока ИЗ ТабТовары Цикл
			Если ЗначениеЗаполнено(текСтрока.WO) Тогда
				текСтрока.WOДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.WO);
			Иначе
				текСтрока.WOДляОбмена = "";	
			КонецЕсли;		
		КонецЦикла;
		ТабТОвары.Колонки.Удалить("WO");
		ТабТОвары.Колонки.WOДляОбмена.Имя = "WO";
		ДанныеXDTO.Вставить("Товары",табТОвары);
		
		
		ТабУслуги = ДанныеИБ.Услуги.Выгрузить();
		ТабУслуги.Колонки.Добавить("WOДляОбмена");
		Для Каждого текСтрока ИЗ ТабУслуги Цикл
			Если ЗначениеЗаполнено(текСтрока.WO) Тогда
				текСтрока.WOДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.WO);
			Иначе
				текСтрока.WOДляОбмена = "";	
			КонецЕсли;		
		КонецЦикла;
		ТабУслуги.Колонки.Удалить("WO");
		ТабУслуги.Колонки.WOДляОбмена.Имя = "WO";
		
		ДанныеXDTO.Вставить("Услуги",ТабУслуги);
		
		
		ДанныеXDTO.Вставить("ПодразделениеОрганизации",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПокупателю_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	/////////////////////////////////////////////////////УСЛУГИ
		МассивСтрокТовары = Новый Массив;
		Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Товары Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура); 
				СтруктураДанныхСтроки.Вставить("Цена", Строка.Цена); 
				СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);  
				СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);  
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС);  
				СтруктураДанныхСтроки.Вставить("Коэффициент", Строка.Коэффициент);  
				СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.КоличествоМест);  
				СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество);  
				СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);  
				СтруктураДанныхСтроки.Вставить("Well", Строка.Well);  
				СтруктураДанныхСтроки.Вставить("SIR", Строка.SIR);  
				СтруктураДанныхСтроки.Вставить("Oilfield", Строка.Oilfield);  
				СтруктураДанныхСтроки.Вставить("Ticket", Строка.Ticket);  
				
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.WO);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
				СтруктураДанныхСтроки.Вставить("WO",текСсылка);	               
		
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрокТовары.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
		
		
		///////////////////////////////////////////////УСЛУГИ
		МассивСтрокУслуги = Новый Массив;
		Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Услуги Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Цена", Строка.Цена); 
				СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура); 
				СтруктураДанныхСтроки.Вставить("Содержание", Строка.Содержание); 
				СтруктураДанныхСтроки.Вставить("СодержаниеEng", Строка.СодержаниеEng); 
				СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);  
				СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);  
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС);  
				СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество);  
				СтруктураДанныхСтроки.Вставить("Well", Строка.Well);  
				СтруктураДанныхСтроки.Вставить("SIR", Строка.SIR);  
				СтруктураДанныхСтроки.Вставить("Oilfield", Строка.Oilfield);  
				СтруктураДанныхСтроки.Вставить("Ticket", Строка.Ticket);  
	
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.WO);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
				СтруктураДанныхСтроки.Вставить("WO",текСсылка);	               
		
				МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);     
		
			КонецЦикла;
		КонецЕсли;  
		
		Если МассивСтрокУслуги.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	
	Если ДанныеXDTO.Свойство("ПодразделениеОрганизации") И ЗначениеЗаполнено(ДанныеXDTO.ПодразделениеОрганизации) Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ПодразделениеОрганизации);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
	    ПолученныеДанные.ПодразделениеОрганизации = текСсылка;
	КОнецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетНаОплатуПокупателю_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого текСтрока Из ПолученныеДанные.Товары Цикл
			лкСТрока = ПолученныеДанные.ДополнительныеСвойства.ТОвары[ПолученныеДанные.Товары.Индекс(текСтрока)];
			текСтрока.WO = лкСТрока.WO ;
		КонецЦикла;
		Для каждого текСтрока Из ПолученныеДанные.Услуги Цикл
			лкСТрока = ПолученныеДанные.ДополнительныеСвойства.Услуги[ПолученныеДанные.Услуги.Индекс(текСтрока)];
			текСтрока.WO = лкСТрока.WO ;
		КонецЦикла;
		Если НЕ ДанныеИБ = Неопределено Тогда
			ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
			ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
			ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;
		КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный
Процедура ДобавитьПКО_Документ_СчетФактураВыданный(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураВыданный_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютнаяСумма";
	НоваяСтрока.СвойствоФормата = "ВалютнаяСумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыСчетаФактуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выставлен";
	НоваяСтрока.СвойствоФормата = "Выставлен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыставления";
	НоваяСтрока.СвойствоФормата = "ДатаВыставления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправленияИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПредполагаемойОплаты";
	НоваяСтрока.СвойствоФормата = "ПредполагаемаяДатаОплаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвойсинговыйЦентр";
	НоваяСтрока.СвойствоФормата = "ИнвойсинговыйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнвойсинговыеЦентры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСпособаВыставления";
	НоваяСтрока.СвойствоФормата = "КодСпособаВыставления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комитент";
	НоваяСтрока.СвойствоФормата = "Комитент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КППКонтрагента";
	НоваяСтрока.СвойствоФормата = "КППКонтрагента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаАванс";
	НоваяСтрока.СвойствоФормата = "НаАванс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НеВыводитьИтогПоПятойКолонке";
	НоваяСтрока.СвойствоФормата = "НеВыводитьИтогПоПятойКолонке";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НеВыводитьУсловияОплаты";
	НоваяСтрока.СвойствоФормата = "НеВыводитьУсловияОплаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НеСворачиватьСтроки";
	НоваяСтрока.СвойствоФормата = "НеСворачиватьСтроки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправленияИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НумероватьСтраницы";
	НоваяСтрока.СвойствоФормата = "НумероватьСтраницы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПечатьСведенийОПодразделении";
	НоваяСтрока.СвойствоФормата = "ПечатьСведенийОПодразделении";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Под0";
	НоваяСтрока.СвойствоФормата = "Под0";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "ПометкаУдаления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставлениеВалюты";
	НоваяСтрока.СвойствоФормата = "ПредставлениеВалюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Продавец";
	НоваяСтрока.СвойствоФормата = "Продавец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СводныйКомиссионный";
	НоваяСтрока.СвойствоФормата = "СводныйКомиссионный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СводныйКорректировочный";
	НоваяСтрока.СвойствоФормата = "СводныйКорректировочный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКДоплате";
	НоваяСтрока.СвойствоФормата = "СуммаКДоплате";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКУменьшению";
	НоваяСтрока.СвойствоФормата = "СуммаКУменьшению";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДСДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСКДоплате";
	НоваяСтрока.СвойствоФормата = "СуммаНДСКДоплате";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСКУменьшению";
	НоваяСтрока.СвойствоФормата = "СуммаНДСКУменьшению";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СформированПриВводеНачальныхОстатковНДС";
	НоваяСтрока.СвойствоФормата = "СформированПриВводеНачальныхОстатковНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактураБезНДС";
	НоваяСтрока.СвойствоФормата = "СчетФактураБезНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактураНеВыставляется";
	НоваяСтрока.СвойствоФормата = "СчетФактураНеВыставляется";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "УчитыватьИсправлениеИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТД";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.СвойствоФормата = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетНаОплатуПокупателю";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДатаНомерДокументовОплаты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДатаНомерДокументовОплаты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	табДанных = ДанныеИБ.Авансы.Выгрузить();
	ДанныеXDTO.Вставить("Авансы",табДанных);
	табДанных = ДанныеИБ.ДатаНомерДокументовОплаты.Выгрузить();
	ДанныеXDTO.Вставить("ДатаНомерДокументовОплаты",табДанных);
	
	//табДанных = ДанныеИБ.ДокументыОснования.Выгрузить();
	//ДанныеXDTO.Вставить("ДокументыОснования",табДанных);
	
	табДанных = ДанныеИБ.ДокументыОснования.Выгрузить();
	табДанных.Колонки.Добавить("ОснованиеДляОбмена");
	Для Каждого текСтрока ИЗ табДанных Цикл
		Если ЗначениеЗаполнено(текСтрока.ДокументОснование) Тогда
			текСтрока.ОснованиеДляОбмена = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока.ДокументОснование);
		Иначе
			текСтрока.ОснованиеДляОбмена = "";	
		КонецЕсли;		
	КонецЦикла;
	табДанных.Колонки.Удалить("ДокументОснование");
	табДанных.Колонки.ОснованиеДляОбмена.Имя = "ДокументОснование";
	ДанныеXDTO.Вставить("ДокументыОснования",табДанных);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ДанныеXDTO.Вставить("ДокументОснование",ПолучитьСтруктуруXDTOизСсылки(ДанныеИБ.ДокументОснование,КомпонентыОбмена) );
	КонецЕсли;
	ДанныеXDTO.Вставить("ПодразделениеОрганизации",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ПодразделениеОрганизации));
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	////////////////////////////////////////////////////////////////////////////////////////// Авансы
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда   
			Для Каждого Строка Из ДанныеXDTO.Авансы Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("Количество", Строка.Количество); 
				СтруктураДанныхСтроки.Вставить("Номенклатура", Строка.Номенклатура); 
				СтруктураДанныхСтроки.Вставить("НомерГТД", Строка.НомерГТД); 
				СтруктураДанныхСтроки.Вставить("Содержание", Строка.Содержание); 
				СтруктураДанныхСтроки.Вставить("СтавкаНДС", Строка.СтавкаНДС); 
				СтруктураДанныхСтроки.Вставить("СтранаПроисхождения", Строка.СтранаПроисхождения); 
				СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма); 
				СтруктураДанныхСтроки.Вставить("СуммаНДС", Строка.СуммаНДС); 
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", Строка.СчетНаОплату); 
	
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрок);
		КонецЕсли;
		////////////////////////////////////////////////////////////////////////////////////////// ДокументыОснования
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда   
			Для Каждого Строка Из ДанныеXDTO.ДокументыОснования Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", Строка.ДатаИсходногоДокумента); 
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", Строка.НомерИсходногоДокумента); 
	
				сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка.ДокументОснование);           
				текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
				СтруктураДанныхСтроки.Вставить("ДокументОснование", текСсылка); 
				
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("ДатаНомерДокументовОплаты") И ЗначениеЗаполнено(ДанныеXDTO.ДатаНомерДокументовОплаты) Тогда   
			Для Каждого Строка Из ДанныеXDTO.ДатаНомерДокументовОплаты Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("ДатаПлатежноРасчетногоДокумента", Строка.ДатаПлатежноРасчетногоДокумента); 
				СтруктураДанныхСтроки.Вставить("НомерПлатежноРасчетногоДокумента", Строка.НомерПлатежноРасчетногоДокумента); 
	
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаНомерДокументовОплаты", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
	
		Если ДанныеXDTO.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеXDTO.ДокументОснование) Тогда   
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ДокументОснование);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			ПолученныеДанные.ДокументОснование =текСсылка;
		КонецЕсли;
	Если ДанныеXDTO.СВойство("ПодразделениеОрганизации")  Тогда
		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.ПодразделениеОрганизации);           
		текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
		ПолученныеДанные.ПодразделениеОрганизации = текСсылка;	               
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////РЕГИСТРЫ
	Для каждого текСтрока Из ПолученныеДанные.ДокументыОснования Цикл
		лкСТрока = ПолученныеДанные.ДополнительныеСвойства.ДокументыОснования[ПолученныеДанные.ДокументыОснования.Индекс(текСтрока)];
		текСтрока.ДокументОснование = лкСТрока.ДокументОснование ;
	КонецЦикла;
	
	Если НЕ данныеИБ = Неопределено Тогда
		ДанныеИБ.ДокументОснование = ПолученныеДанные.ДокументОснование;
		ДанныеИБ.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеОрганизации;	               
		ДанныеИБ.ДокументыОснования.Загрузить(ПолученныеДанные.ДокументыОснования.Выгрузить());
	КонецЕсли;
	СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Agreements
Процедура ДобавитьПКО_Справочник_Agreements(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Agreements";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Agreements;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Agreements";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AgreementDescription";
	НоваяСтрока.СвойствоФормата = "AgreementDescription";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ClientContractNumber";
	НоваяСтрока.СвойствоФормата = "ClientContractNumber";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Expired";
	НоваяСтрока.СвойствоФормата = "Expired";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "GeoMarket";
	НоваяСтрока.СвойствоФормата = "GeoMarket";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LegalContract";
	НоваяСтрока.СвойствоФормата = "LegalContract";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ShipTo";
	НоваяСтрока.СвойствоФормата = "ShipTo";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SiebelName";
	НоваяСтрока.СвойствоФормата = "SiebelName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SSSegment";
	НоваяСтрока.СвойствоФормата = "SSSegment";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "ДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачала";
	НоваяСтрока.СвойствоФормата = "ДатаНачала";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвестПроект";
	НоваяСтрока.СвойствоФормата = "ИнвестПроект";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЛокацияПродаж";
	НоваяСтрока.СвойствоФормата = "ЛокацияПродаж";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнаяНоменклатура";
	НоваяСтрока.СвойствоФормата = "ОсновнаяНоменклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Создан";
	НоваяСтрока.СвойствоФормата = "Создан";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_BORGs
Процедура ДобавитьПКО_Справочник_BORGs(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_BORGs";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.BORGs;
	ПравилоКонвертации.ОбъектФормата = "Справочник.BORGs";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DefaultAU";
	НоваяСтрока.СвойствоФормата = "DefaultAU";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DefaultWH";
	НоваяСтрока.СвойствоФормата = "DefaultWH";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "OracleERP";
	НоваяСтрока.СвойствоФормата = "OracleERP";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Segment";
	НоваяСтрока.СвойствоФормата = "Segment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Компания";
	НоваяСтрока.СвойствоФормата = "Компания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Компания";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CashCode
Процедура ДобавитьПКО_Справочник_CashCode(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_CashCode";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.CashCode;
	ПравилоКонвертации.ОбъектФормата = "Справочник.CashCode";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПлатежныйЦентр";
	НоваяСтрока.СвойствоФормата = "ПлатежныйЦентр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_PayableCentres";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Catalog
Процедура ДобавитьПКО_Справочник_Catalog(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Catalog";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Catalog;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Catalog";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CheckedCustoms";
	НоваяСтрока.СвойствоФормата = "CheckedCustoms";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CheckedFiscal";
	НоваяСтрока.СвойствоФормата = "CheckedFiscal";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DescriptionEng";
	НоваяСтрока.СвойствоФормата = "DescriptionEng";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DescriptionRus";
	НоваяСтрока.СвойствоФормата = "DescriptionRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FiscalType";
	НоваяСтрока.СвойствоФормата = "FiscalType";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NetWeight";
	НоваяСтрока.СвойствоФормата = "NetWeight";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодТНВЭД";
	НоваяСтрока.СвойствоФормата = "КодТНВЭД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_TNVEDCodes";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Cities
Процедура ДобавитьПКО_Справочник_Cities(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Cities";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Cities;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Cities";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TimeZone";
	НоваяСтрока.СвойствоФормата = "TimeZone";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_TimeZones";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Corporations
Процедура ДобавитьПКО_Справочник_Corporations(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Corporations";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Corporations;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Corporations";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CreationDate";
	НоваяСтрока.СвойствоФормата = "CreationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ModificationDate";
	НоваяСтрока.СвойствоФормата = "ModificationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_CountriesOfProcessLevels
Процедура ДобавитьПКО_Справочник_CountriesOfProcessLevels(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_CountriesOfProcessLevels";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.CountriesOfProcessLevels;
	ПравилоКонвертации.ОбъектФормата = "Справочник.CountriesOfProcessLevels";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameForMoveIT";
	НоваяСтрока.СвойствоФормата = "NameForMoveIT";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TMSID";
	НоваяСтрока.СвойствоФормата = "TMSID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("TMSID");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ermSourcesIDs
Процедура ДобавитьПКО_Справочник_ermSourcesIDs(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ermSourcesIDs";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ermSourcesIDs;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ermSourcesIDs";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ermTriggerTypes
Процедура ДобавитьПКО_Справочник_ermTriggerTypes(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ermTriggerTypes";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ermTriggerTypes;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ermTriggerTypes";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ermTriggerTypes_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ermTriggerTypes_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_GeoMarkets
Процедура ДобавитьПКО_Справочник_GeoMarkets(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_GeoMarkets";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.GeoMarkets;
	ПравилоКонвертации.ОбъектФормата = "Справочник.GeoMarkets";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets_Группа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_GeoMarkets_Группа
Процедура ДобавитьПКО_Справочник_GeoMarkets_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_GeoMarkets_Группа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.GeoMarkets;
	ПравилоКонвертации.ОбъектФормата = "Справочник.GeoMarketsГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets_Группа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_LegalEntities
Процедура ДобавитьПКО_Справочник_LegalEntities(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_LegalEntities";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.LegalEntities;
	ПравилоКонвертации.ОбъектФормата = "Справочник.LegalEntities";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CompanyCode";
	НоваяСтрока.СвойствоФормата = "CompanyCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CostCenter";
	НоваяСтрока.СвойствоФормата = "CostCenter";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CountryCode";
	НоваяСтрока.СвойствоФормата = "CountryCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CreationDate";
	НоваяСтрока.СвойствоФормата = "CreationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ERPID";
	НоваяСтрока.СвойствоФормата = "ERPID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FinanceLocCode";
	НоваяСтрока.СвойствоФормата = "FinanceLocCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FinanceProcess";
	НоваяСтрока.СвойствоФормата = "FinanceProcess";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "InTMS";
	НоваяСтрока.СвойствоФормата = "InTMS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ModificationDate";
	НоваяСтрока.СвойствоФормата = "ModificationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameRus";
	НоваяСтрока.СвойствоФормата = "NameRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ParentCompany";
	НоваяСтрока.СвойствоФормата = "ParentCompany";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_SoldTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ReplaceWIth";
	НоваяСтрока.СвойствоФормата = "ReplaceWIth";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_LegalEntities";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SoldToAddress";
	НоваяСтрока.СвойствоФормата = "SoldToAddress";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SoldToAddressRus";
	НоваяСтрока.СвойствоФормата = "SoldToAddressRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Oilfields
Процедура ДобавитьПКО_Справочник_Oilfields(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Oilfields";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Oilfields;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Oilfields";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнвентарныйНомер";
	НоваяСтрока.СвойствоФормата = "ИнвентарныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеENG";
	НоваяСтрока.СвойствоФормата = "НаименованиеENG";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеРодПадеж";
	НоваяСтрока.СвойствоФормата = "НаименованиеРодПадеж";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИнвентарныйНомер,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_PayableCentres
Процедура ДобавитьПКО_Справочник_PayableCentres(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_PayableCentres";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.PayableCentres;
	ПравилоКонвертации.ОбъектФормата = "Справочник.PayableCentres";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_PayableCentres_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_PayableCentres_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Подразделения", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Подразделения;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_PayableCentres_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяТЧ = "Подразделения";
	
	табДанных = ДанныеИБ[ИмяТЧ].Выгрузить();
	данныеXDTO.Вставить(ИмяТЧ,табДанных);
КонецПроцедуры

Процедура ПКО_Справочник_PayableCentres_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяТЧ = "Подразделения";
	ИмяКолонки1 = "Подразделение";
	
	
	МассивСтрок = Новый Массив; 
	Если ДанныеXDTO.Свойство(ИмяТЧ) И ЗначениеЗаполнено(ДанныеXDTO[ИмяТЧ]) Тогда       
		Для Каждого Строка Из ДанныеXDTO[ИмяТЧ] Цикл       
			СтруктураДанныхСтроки = Новый Структура;       
			СтруктураДанныхСтроки.Вставить(ИмяКолонки1, Строка[ИмяКолонки1]);      
			МассивСтрок.Добавить(СтруктураДанныхСтроки);         
		КонецЦикла; 
	КонецЕсли;
	Если МассивСтрок.Количество() > 0 Тогда       
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТЧ, МассивСтрок);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ProcessLevels
Процедура ДобавитьПКО_Справочник_ProcessLevels(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ProcessLevels";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ProcessLevels;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ProcessLevels";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ProcessLevels_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ProcessLevels_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Corporation";
	НоваяСтрока.СвойствоФормата = "Corporation";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Corporations";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Country";
	НоваяСтрока.СвойствоФормата = "Country";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_CountriesOfProcessLevels";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "EMailsForTemporaryItemsNotification";
	НоваяСтрока.СвойствоФормата = "EMailsForTemporaryItemsNotification";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FromTMSIDsList";
	НоваяСтрока.СвойствоФормата = "FromTMSIDsList";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LeaveDocumentsInDesktopUntilAllItemsAreInCustomsFiles";
	НоваяСтрока.СвойствоФормата = "LeaveDocumentsInDesktopUntilAllItemsAreInCustomsFiles";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("FromTMSIDs", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.FromTMSIDs;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FromTMSID";
	НоваяСтрока.СвойствоФормата = "FromTMSID";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ProcessLevels_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяТЧ = "FromTMSIDs";
	
	табДанных = ДанныеИБ[ИмяТЧ].Выгрузить();
	данныеXDTO.Вставить(ИмяТЧ,табДанных);
КонецПроцедуры

Процедура ПКО_Справочник_ProcessLevels_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяТЧ = "FromTMSIDs";
	ИмяКолонки1 = "FromTMSID";
	
	МассивСтрок = Новый Массив; 
	Если ДанныеXDTO.Свойство(ИмяТЧ) И ЗначениеЗаполнено(ДанныеXDTO[ИмяТЧ]) Тогда       
		Для Каждого Строка Из ДанныеXDTO[ИмяТЧ] Цикл       
			СтруктураДанныхСтроки = Новый Структура;       
			СтруктураДанныхСтроки.Вставить(ИмяКолонки1, Строка[ИмяКолонки1]);      
			МассивСтрок.Добавить(СтруктураДанныхСтроки);         
		КонецЦикла; 
	КонецЕсли;
	Если МассивСтрок.Количество() > 0 Тогда       
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТЧ, МассивСтрок);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_SoldTo
Процедура ДобавитьПКО_Справочник_SoldTo(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_SoldTo";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.SoldTo;
	ПравилоКонвертации.ОбъектФормата = "Справочник.SoldTo";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Address1";
	НоваяСтрока.СвойствоФормата = "Address1";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CompanyNo";
	НоваяСтрока.СвойствоФормата = "CompanyNo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Country";
	НоваяСтрока.СвойствоФормата = "Country";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_CountriesOfProcessLevels";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Lawson";
	НоваяСтрока.СвойствоФормата = "Lawson";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Leg7LegalEntityDetermining";
	НоваяСтрока.СвойствоФормата = "Leg7LegalEntityDetermining";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_Leg7LegalEntityDetermining";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LegalEntityForLeg7";
	НоваяСтрока.СвойствоФормата = "LegalEntityForLeg7";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_LegalEntities";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameForMoveIt";
	НоваяСтрока.СвойствоФормата = "NameForMoveIt";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameRus";
	НоваяСтрока.СвойствоФормата = "NameRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ParentCompanyForPayments";
	НоваяСтрока.СвойствоФормата = "ParentCompanyForPayments";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_SoldTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PostalAddressForInvoiceAndSupportingDocuments";
	НоваяСтрока.СвойствоФормата = "PostalAddressForInvoiceAndSupportingDocuments";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PostalAddressForInvoiceAndSupportingDocumentsRus";
	НоваяСтрока.СвойствоФормата = "PostalAddressForInvoiceAndSupportingDocumentsRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Prefix";
	НоваяСтрока.СвойствоФормата = "Prefix";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "StartOfExportToTMS";
	НоваяСтрока.СвойствоФормата = "StartOfExportToTMS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "UseFiscalClassificationOfItems";
	НоваяСтрока.СвойствоФормата = "UseFiscalClassificationOfItems";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TimeZones
Процедура ДобавитьПКО_Справочник_TimeZones(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_TimeZones";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.TimeZones;
	ПравилоКонвертации.ОбъектФормата = "Справочник.TimeZones";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TNVEDCodes
Процедура ДобавитьПКО_Справочник_TNVEDCodes(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_TNVEDCodes";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.TNVEDCodes;
	ПравилоКонвертации.ОбъектФормата = "Справочник.TNVEDCodes";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FullDescription";
	НоваяСтрока.СвойствоФормата = "FullDescription";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Rate";
	НоваяСтрока.СвойствоФормата = "Rate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ShortDescription";
	НоваяСтрока.СвойствоФормата = "ShortDescription";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "UOM";
	НоваяСтрока.СвойствоФормата = "UOM";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_TNVEDCodesГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_TNVEDCodesГруппа
Процедура ДобавитьПКО_Справочник_TNVEDCodesГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_TNVEDCodesГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.TNVEDCodes;
	ПравилоКонвертации.ОбъектФормата = "Справочник.TNVEDCodesГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "FullDescription";
	НоваяСтрока.СвойствоФормата = "FullDescription";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ShortDescription";
	НоваяСтрока.СвойствоФормата = "ShortDescription";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_TNVEDCodesГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_UOMs
Процедура ДобавитьПКО_Справочник_UOMs(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_UOMs";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.UOMs;
	ПравилоКонвертации.ОбъектФормата = "Справочник.UOMs";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "BasicUOM";
	НоваяСтрока.СвойствоФормата = "BasicUOM";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ConversionFactor";
	НоваяСтрока.СвойствоФормата = "ConversionFactor";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CreatedBy";
	НоваяСтрока.СвойствоФормата = "CreatedBy";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CreationDate";
	НоваяСтрока.СвойствоФормата = "CreationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "InTMS";
	НоваяСтрока.СвойствоФормата = "InTMS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ModificationDate";
	НоваяСтрока.СвойствоФормата = "ModificationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ModifiedBy";
	НоваяСтрока.СвойствоФормата = "ModifiedBy";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameRus";
	НоваяСтрока.СвойствоФормата = "NameRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameRusFilled";
	НоваяСтрока.СвойствоФормата = "NameRusFilled";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Standard";
	НоваяСтрока.СвойствоФормата = "Standard";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TMSId";
	НоваяСтрока.СвойствоФормата = "TMSId";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TMSIdForItemUOM";
	НоваяСтрока.СвойствоФормата = "TMSIdForItemUOM";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Warehouses
Процедура ДобавитьПКО_Справочник_Warehouses(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Warehouses";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Warehouses;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Warehouses";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Address1";
	НоваяСтрока.СвойствоФормата = "Address1";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Address2";
	НоваяСтрока.СвойствоФормата = "Address2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Address3";
	НоваяСтрока.СвойствоФормата = "Address3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "AddressRus";
	НоваяСтрока.СвойствоФормата = "AddressRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "City";
	НоваяСтрока.СвойствоФормата = "City";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Cities";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContactEMail";
	НоваяСтрока.СвойствоФормата = "ContactEMail";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContactName";
	НоваяСтрока.СвойствоФормата = "ContactName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ContactPhone";
	НоваяСтрока.СвойствоФормата = "ContactPhone";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CountryCode";
	НоваяСтрока.СвойствоФормата = "CountryCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CreationDate";
	НоваяСтрока.СвойствоФормата = "CreationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "InTMS";
	НоваяСтрока.СвойствоФормата = "InTMS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ModificationDate";
	НоваяСтрока.СвойствоФормата = "ModificationDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NameRus";
	НоваяСтрока.СвойствоФормата = "NameRus";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Port";
	НоваяСтрока.СвойствоФормата = "Port";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProcessLevel";
	НоваяСтрока.СвойствоФормата = "ProcessLevel";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ProcessLevels";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "RCACountry";
	НоваяСтрока.СвойствоФормата = "RCACountry";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_CountriesOfProcessLevels";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Warehouse";
	НоваяСтрока.СвойствоФормата = "Warehouse";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Wells
Процедура ДобавитьПКО_Справочник_Wells(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Wells";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Wells;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Wells";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеENG";
	НоваяСтрока.СвойствоФормата = "НаименованиеENG";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанкиГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа
Процедура ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанкиГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанкиГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанкиГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета
Процедура ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "CashCode";
	НоваяСтрока.СвойствоФормата = "CashCode";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_CashCode";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВсегдаУказыватьКПП";
	НоваяСтрока.СвойствоФормата = "ВсегдаУказыватьКПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаЗакрытия";
	НоваяСтрока.СвойствоФормата = "ДатаЗакрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОткрытия";
	НоваяСтрока.СвойствоФормата = "ДатаОткрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеEng";
	НоваяСтрока.СвойствоФормата = "НаименованиеEng";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИДатаРазрешения";
	НоваяСтрока.СвойствоФормата = "НомерИДатаРазрешения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РеквизитыПлатежа";
	НоваяСтрока.СвойствоФормата = "РеквизитыПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РеквизитыПлатежаENG";
	НоваяСтрока.СвойствоФормата = "РеквизитыПлатежаENG";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаДенежныхСредств,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Стек = Новый Массив;
		Стек.Добавить(ДанныеИБ.Ссылка);
		
		сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Владелец);
		Если НЕ сткДанных = Неопределено Тогда
			ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,Стек);
		Иначе
			ЗначениеСвойства = Неопределено;		
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец",ЗначениеСвойства);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.КлючевыеСвойства.Владелец);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			ПолученныеДанные.Владелец = текСсылка;	               
		
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ДанныеИБ=Неопределено Тогда
		ДанныеИБ.Владелец = ПолученныеДанные.Владелец;
	КОнецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоверенностиНалогоплательщика
Процедура ДобавитьПКО_Справочник_ДоверенностиНалогоплательщика(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоверенностиНалогоплательщика";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоверенностиНалогоплательщика;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДоверенностиНалогоплательщика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоверенностиНалогоплательщика_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоверенностиНалогоплательщика_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "ДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительИмеетУЛ";
	НоваяСтрока.СвойствоФормата = "ДоверительИмеетУЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительРук_ИНН";
	НоваяСтрока.СвойствоФормата = "ДоверительРук_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительФЛ_Гражданство";
	НоваяСтрока.СвойствоФормата = "ДоверительФЛ_Гражданство";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительФЛ_ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДоверительФЛ_ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительФЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "ДоверительФЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительФЛ_ОГРН";
	НоваяСтрока.СвойствоФормата = "ДоверительФЛ_ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительЮЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "ДоверительЮЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительЮЛ_КПП";
	НоваяСтрока.СвойствоФормата = "ДоверительЮЛ_КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительЮЛ_НаимОрг";
	НоваяСтрока.СвойствоФормата = "ДоверительЮЛ_НаимОрг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительЮЛ_ОГРН";
	НоваяСтрока.СвойствоФормата = "ДоверительЮЛ_ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверительЯвляетсяЮЛ";
	НоваяСтрока.СвойствоФормата = "ДоверительЯвляетсяЮЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаверенаНотариально";
	НоваяСтрока.СвойствоФормата = "ЗаверенаНотариально";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДовер";
	НоваяСтрока.СвойствоФормата = "НомерДовер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусФЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "НотариусФЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусЮЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "НотариусЮЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусЮЛ_КПП";
	НоваяСтрока.СвойствоФормата = "НотариусЮЛ_КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусЮЛ_НаимОрг";
	НоваяСтрока.СвойствоФормата = "НотариусЮЛ_НаимОрг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусЮЛ_ОГРН";
	НоваяСтрока.СвойствоФормата = "НотариусЮЛ_ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НотариусЯвляетсяЮЛ";
	НоваяСтрока.СвойствоФормата = "НотариусЯвляетсяЮЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительФЛ_Гражданство";
	НоваяСтрока.СвойствоФормата = "ПредставительФЛ_Гражданство";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительФЛ_ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ПредставительФЛ_ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительФЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "ПредставительФЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительФЛ_ОГРН";
	НоваяСтрока.СвойствоФормата = "ПредставительФЛ_ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЮЛ_ИНН";
	НоваяСтрока.СвойствоФормата = "ПредставительЮЛ_ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЮЛ_КПП";
	НоваяСтрока.СвойствоФормата = "ПредставительЮЛ_КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЮЛ_НаимОрг";
	НоваяСтрока.СвойствоФормата = "ПредставительЮЛ_НаимОрг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЮЛ_ОГРН";
	НоваяСтрока.СвойствоФормата = "ПредставительЮЛ_ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЯвляетсяСотрудником";
	НоваяСтрока.СвойствоФормата = "ПредставительЯвляетсяСотрудником";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредставительЯвляетсяЮЛ";
	НоваяСтрока.СвойствоФормата = "ПредставительЯвляетсяЮЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакДоверителя";
	НоваяСтрока.СвойствоФормата = "ПризнакДоверителя";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПолномочияПредставителя", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПолномочияПредставителя;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак01";
	НоваяСтрока.СвойствоФормата = "Признак01";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак02";
	НоваяСтрока.СвойствоФормата = "Признак02";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак03";
	НоваяСтрока.СвойствоФормата = "Признак03";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак04";
	НоваяСтрока.СвойствоФормата = "Признак04";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак05";
	НоваяСтрока.СвойствоФормата = "Признак05";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак06";
	НоваяСтрока.СвойствоФормата = "Признак06";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак07";
	НоваяСтрока.СвойствоФормата = "Признак07";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак08";
	НоваяСтрока.СвойствоФормата = "Признак08";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак09";
	НоваяСтрока.СвойствоФормата = "Признак09";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак10";
	НоваяСтрока.СвойствоФормата = "Признак10";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак11";
	НоваяСтрока.СвойствоФормата = "Признак11";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак12";
	НоваяСтрока.СвойствоФормата = "Признак12";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак13";
	НоваяСтрока.СвойствоФормата = "Признак13";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак14";
	НоваяСтрока.СвойствоФормата = "Признак14";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак15";
	НоваяСтрока.СвойствоФормата = "Признак15";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак16";
	НоваяСтрока.СвойствоФормата = "Признак16";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак17";
	НоваяСтрока.СвойствоФормата = "Признак17";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак18";
	НоваяСтрока.СвойствоФормата = "Признак18";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Признак19";
	НоваяСтрока.СвойствоФормата = "Признак19";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакПолныеПолномочия";
	НоваяСтрока.СвойствоФормата = "ПризнакПолныеПолномочия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВыдачи,НомерДовер,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_ДоверенностиНалогоплательщика_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИмяТЧ = "ПолномочияПредставителя";
	
	табДанных = ДанныеИБ[ИмяТЧ].Выгрузить();
	данныеXDTO.Вставить(ИмяТЧ,табДанных);
КонецПроцедуры

Процедура ПКО_Справочник_ДоверенностиНалогоплательщика_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяТЧ = "ПолномочияПредставителя";   
	ИмяКолонки1 = "Признак01";
	ИмяКолонки2 = "Признак02";
	ИмяКолонки3 = "Признак03";
	ИмяКолонки4 = "Признак04";
	ИмяКолонки5 = "Признак05";
	ИмяКолонки6 = "Признак06";
	ИмяКолонки7 = "Признак07";
	ИмяКолонки8 = "Признак08";
	ИмяКолонки9 = "Признак09";
	ИмяКолонки10 = "Признак10";
	ИмяКолонки11 = "Признак11";
	ИмяКолонки12 = "Признак12";
	ИмяКолонки13 = "Признак13";
	ИмяКолонки14 = "Признак14";
	ИмяКолонки15 = "Признак15";
	ИмяКолонки16 = "Признак16";
	ИмяКолонки17 = "Признак17";
	ИмяКолонки18 = "Признак18";
	ИмяКолонки19 = "Признак19";
	ИмяКолонки20 = "КПП";
	ИмяКолонки21 = "ОКАТО";
	ИмяКолонки22 = "ПризнакПолныеПолномочия";
	
	МассивСтрок = Новый Массив; 
	Если ДанныеXDTO.Свойство(ИмяТЧ) И ЗначениеЗаполнено(ДанныеXDTO[ИмяТЧ]) Тогда       
		Для Каждого Строка Из ДанныеXDTO[ИмяТЧ] Цикл       
			СтруктураДанныхСтроки = Новый Структура;       
			СтруктураДанныхСтроки.Вставить(ИмяКолонки1, Строка[ИмяКолонки1]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки2, Строка[ИмяКолонки2]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки3, Строка[ИмяКолонки3]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки4, Строка[ИмяКолонки4]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки5, Строка[ИмяКолонки5]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки6, Строка[ИмяКолонки6]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки7, Строка[ИмяКолонки7]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки8, Строка[ИмяКолонки8]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки9, Строка[ИмяКолонки9]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки10, Строка[ИмяКолонки10]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки11, Строка[ИмяКолонки11]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки12, Строка[ИмяКолонки12]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки13, Строка[ИмяКолонки13]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки14, Строка[ИмяКолонки14]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки15, Строка[ИмяКолонки15]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки16, Строка[ИмяКолонки16]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки17, Строка[ИмяКолонки17]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки18, Строка[ИмяКолонки18]);      
			СтруктураДанныхСтроки.Вставить(ИмяКолонки19, Строка[ИмяКолонки19]);      
			МассивСтрок.Добавить(СтруктураДанныхСтроки);         
		КонецЦикла; 
	КонецЕсли;
	Если МассивСтрок.Количество() > 0 Тогда       
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТЧ, МассивСтрок);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры
Процедура ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Договоры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Договоры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractCurrency";
	НоваяСтрока.СвойствоФормата = "crmContractCurrency";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractID";
	НоваяСтрока.СвойствоФормата = "crmContractID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractName";
	НоваяСтрока.СвойствоФормата = "crmContractName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmContractValueUSD";
	НоваяСтрока.СвойствоФормата = "crmContractValueUSD";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedBy";
	НоваяСтрока.СвойствоФормата = "crmCreatedBy";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmCreatedDate";
	НоваяСтрока.СвойствоФормата = "crmCreatedDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmDFNName";
	НоваяСтрока.СвойствоФормата = "crmDFNName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmEffectiveDate";
	НоваяСтрока.СвойствоФормата = "crmEffectiveDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "crmExpiryDate";
	НоваяСтрока.СвойствоФормата = "crmExpiryDate";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermAmendment";
	НоваяСтрока.СвойствоФормата = "ermAmendment";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermAmendmentName";
	НоваяСтрока.СвойствоФормата = "ermAmendmentName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermContractID";
	НоваяСтрока.СвойствоФормата = "ermContractID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermCustomerID";
	НоваяСтрока.СвойствоФормата = "ermCustomerID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermDocumentFlowPeriodFrom";
	НоваяСтрока.СвойствоФормата = "ermDocumentFlowPeriodFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermDocumentFlowPeriodTo";
	НоваяСтрока.СвойствоФормата = "ermDocumentFlowPeriodTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermPtDaysFrom";
	НоваяСтрока.СвойствоФормата = "ermPtDaysFrom";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermPtType";
	НоваяСтрока.СвойствоФормата = "ermPtType";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermSourceID";
	НоваяСтрока.СвойствоФормата = "ermSourcesIDs";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ermSourcesIDs";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermTrigger";
	НоваяСтрока.СвойствоФормата = "ermTrigger";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ermTriggerTypes";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ermНеИспользоватьPtDaysTo";
	НоваяСтрока.СвойствоФормата = "ermНеИспользоватьPtDaysTo";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PIC_ID";
	НоваяСтрока.СвойствоФормата = "PIC_ID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SiebelID";
	НоваяСтрока.СвойствоФормата = "SiebelID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SiebelName";
	НоваяСтрока.СвойствоФормата = "SiebelName";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВедениеВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВедениеВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВедениеВзаиморасчетовПоДоговорам";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидАгентскогоДоговора";
	НоваяСтрока.СвойствоФормата = "ВидАгентскогоДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыАгентскихДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачала";
	НоваяСтрока.СвойствоФормата = "ДатаНачала";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончания";
	НоваяСтрока.СвойствоФормата = "ДатаОкончания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнениеКНазванию";
	НоваяСтрока.СвойствоФормата = "ДополнениеКНазванию";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Курс";
	НоваяСтрока.СвойствоФормата = "Курс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеEng";
	НоваяСтрока.СвойствоФормата = "НаименованиеEng";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСПоСтавкам4и2";
	НоваяСтрока.СвойствоФормата = "НДСПоСтавкам4и2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОплатаПоКурсуММВБ";
	НоваяСтрока.СвойствоФормата = "ОплатаПоКурсуММВБ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Процент";
	НоваяСтрока.СвойствоФормата = "Процент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РеализацияНаЭкспорт";
	НоваяСтрока.СвойствоФормата = "РеализацияНаЭкспорт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпособыРасчетаКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДоговора";
	НоваяСтрока.СвойствоФормата = "СрокДоговора";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплаты";
	НоваяСтрока.СвойствоФормата = "СрокОплаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКонтракта";
	НоваяСтрока.СвойствоФормата = "СуммаКонтракта";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипДоговора";
	НоваяСтрока.СвойствоФормата = "ТипДоговора";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТребуетсяChecklist";
	НоваяСтрока.СвойствоФормата = "ТребуетсяChecklist";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Условия";
	НоваяСтрока.СвойствоФормата = "Условия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчетАгентскогоНДС";
	НоваяСтрока.СвойствоФормата = "УчетАгентскогоНДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КодыCRMпоСегментам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КодыCRMпоСегментам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ERP_ContractID";
	НоваяСтрока.СвойствоФормата = "ERP_ContractID";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "PIC_ID";
	НоваяСтрока.СвойствоФормата = "PIC_ID";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Segment";
	НоваяСтрока.СвойствоФормата = "Segment";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СегментыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Дата,Номер");
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ДанныеXDTO.КлючевыеСвойства.Вставить("Ответственный",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Ответственный));
	
	Стек = Новый Массив;
	Стек.Добавить(ДанныеИБ.Ссылка);
	
	сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Владелец);
	
	ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
	ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,Стек);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент",ЗначениеСвойства);
	
	табКоды = ДанныеИБ.КодыCRMпоСегментам.Выгрузить();
	ДанныеXDTO.Вставить("КодыCRMпоСегментам",табКоды);
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Если ДанныеXDTO.КлючевыеСвойства.Свойство("Ответственный") Тогда
	//	ПолученныеДанные.ДополнительныеСвойства.Вставить(ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.КлючевыеСвойства.Ответственный));           
	//КонецЕсли;  
	
		МассивСтрок = Новый Массив;
		Если ДанныеXDTO.Свойство("КодыCRMпоСегментам") И ЗначениеЗаполнено(ДанныеXDTO.КодыCRMпоСегментам) Тогда   
			Для Каждого Строка Из ДанныеXDTO.КодыCRMпоСегментам Цикл 
			
				СтруктураДанныхСтроки = Новый Структура; 
				СтруктураДанныхСтроки.Вставить("ERP_ContractID", Строка.ERP_ContractID); 
				СтруктураДанныхСтроки.Вставить("PIC_ID", Строка.PIC_ID); 
				СтруктураДанныхСтроки.Вставить("Segment", Строка.Segment);  
		
				МассивСтрок.Добавить(СтруктураДанныхСтроки);     
			КонецЦикла;
		КонецЕсли;  
		Если МассивСтрок.Количество() > 0 Тогда 
		   ПолученныеДанные.ДополнительныеСвойства.Вставить("КодыCRMпоСегментам", МассивСтрок);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыГруппа
Процедура ДобавитьПКО_Справочник_ДоговорыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДоговорыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ДолжностиОрганизаций_Отпр
Процедура ДобавитьПКО_Справочник_ДолжностиОрганизаций_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДолжностиОрганизаций_Отпр";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДолжностиОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДолжностиОрганизаций";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКЕИ";
	НоваяСтрока.СвойствоФормата = "КодПоОКЕИ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеEng";
	НоваяСтрока.СвойствоФормата = "НаименованиеEng";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("КодПоОКЕИ,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗаказНаряды
Процедура ДобавитьПКО_Справочник_ЗаказНаряды(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗаказНаряды";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЗаказНаряды;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗаказНаряды";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Процент";
	НоваяСтрока.СвойствоФормата = "Процент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплаты";
	НоваяСтрока.СвойствоФормата = "СрокОплаты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ИнвойсинговыеЦентры
Процедура ДобавитьПКО_Справочник_ИнвойсинговыеЦентры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ИнвойсинговыеЦентры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ИнвойсинговыеЦентры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ИнвойсинговыеЦентры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтактныеЛица
Процедура ДобавитьПКО_Справочник_КонтактныеЛица(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтактныеЛица";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КонтактныеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтактныеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтактныеЛица_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_КонтактныеЛица_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КонтактныеЛица_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидКонтактногоЛица";
	НоваяСтрока.СвойствоФормата = "ВидКонтактногоЛица";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыКонтактныхЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Имя";
	НоваяСтрока.СвойствоФормата = "Имя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Отчество";
	НоваяСтрока.СвойствоФормата = "Отчество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Роль";
	НоваяСтрока.СвойствоФормата = "Роль";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ОтветственныеЛицаОрганизаций";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Фамилия";
	НоваяСтрока.СвойствоФормата = "Фамилия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъектВладелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_КонтактныеЛица_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ОбъектВладелец",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ОбъектВладелец));
КонецПроцедуры

Процедура ПКО_Справочник_КонтактныеЛица_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ОбъектВладелец") Тогда
		
			сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.КлючевыеСвойства.ОбъектВладелец);           
			текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
			ПолученныеДанные.ОбъектВладелец = текСсылка;	               
		
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_КонтактныеЛица_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ДанныеИБ=Неопределено Тогда
		ДанныеИБ.ОбъектВладелец = ПолученныеДанные.ОбъектВладелец;
	КОнецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DescriptionFull";
	НоваяСтрока.СвойствоФормата = "DescriptionFull";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LawsonID";
	НоваяСтрока.СвойствоФормата = "LawsonID";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресЭП";
	НоваяСтрока.СвойствоФормата = "АдресЭП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдостоверяющийЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИННВведенКорректно";
	НоваяСтрока.СвойствоФормата = "ИННВведенКорректно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодКлассификатора";
	НоваяСтрока.СвойствоФормата = "КодКлассификатора";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентLawson";
	НоваяСтрока.СвойствоФормата = "КонтрагентLawson";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыLawson";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КППВведенКорректно";
	НоваяСтрока.СвойствоФормата = "КППВведенКорректно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеEnglish";
	НоваяСтрока.СвойствоФормата = "НаименованиеEnglish";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновноеКонтактноеЛицо";
	НоваяСтрока.СвойствоФормата = "ОсновноеКонтактноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтактныеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "ОсновнойДоговорКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проверено";
	НоваяСтрока.СвойствоФормата = "Проверено";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасширенноеПредставлениеИНН";
	НоваяСтрока.СвойствоФормата = "РасширенноеПредставлениеИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасширенноеПредставлениеКПП";
	НоваяСтрока.СвойствоФормата = "РасширенноеПредставлениеКПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Страна";
	НоваяСтрока.СвойствоФормата = "Страна";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресЭП";
	НоваяСтрока.СвойствоФормата = "АдресЭП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.СвойствоФормата = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыКонтактнойИнформации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоменноеИмяСервера";
	НоваяСтрока.СвойствоФормата = "ДоменноеИмяСервера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТелефона";
	НоваяСтрока.СвойствоФормата = "НомерТелефона";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТелефонаБезКодов";
	НоваяСтрока.СвойствоФормата = "НомерТелефонаБезКодов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Регион";
	НоваяСтрока.СвойствоФормата = "Регион";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Страна";
	НоваяСтрока.СвойствоФормата = "Страна";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.СвойствоФормата = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыКонтактнойИнформации";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ДанныеXDTO.КлючевыеСвойства.Вставить("Ответственный",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.Ответственный));
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация",ДанныеИБ.КонтактнаяИнформация.Выгрузить());
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Если ДанныеXDTO.КлючевыеСвойства.Свойство("Ответственный") Тогда
	//	ПолученныеДанные.ДополнительныеСвойства.Вставить(ПолучитьСтруктуруЗагрузкиСоставногоТипа(ДанныеXDTO.КлючевыеСвойства.Ответственный));           
	//КонецЕсли;  
	
	///////////////////////////////////////////////КонтактнаяИнформация
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация") И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда   
		Для Каждого Строка Из ДанныеXDTO.КонтактнаяИнформация Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("АдресЭП", Строка.АдресЭП); 
			СтруктураДанныхСтроки.Вставить("Вид", Строка.Вид); 
			СтруктураДанныхСтроки.Вставить("Город", Строка.Город); 
			СтруктураДанныхСтроки.Вставить("ДоменноеИмяСервера", Строка.ДоменноеИмяСервера); 
			СтруктураДанныхСтроки.Вставить("ЗначенияПолей", Строка.ЗначенияПолей); 
			СтруктураДанныхСтроки.Вставить("НомерТелефона", Строка.НомерТелефона); 
			СтруктураДанныхСтроки.Вставить("НомерТелефонаБезКодов", Строка.НомерТелефонаБезКодов); 
			СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
			СтруктураДанныхСтроки.Вставить("Регион", Строка.Регион); 
			СтруктураДанныхСтроки.Вставить("Страна", Строка.Страна); 
			СтруктураДанныхСтроки.Вставить("Тип", Строка.Тип); 
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтактнаяИнформация", массивСтрок);
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыLawson
Процедура ДобавитьПКО_Справочник_КонтрагентыLawson(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыLawson";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КонтрагентыLawson;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыLawson";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыLawson";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыLawsonГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыLawsonГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыLawsonГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КонтрагентыLawson;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыLawsonГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыLawsonГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КостЦентры
Процедура ДобавитьПКО_Справочник_КостЦентры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КостЦентры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КостЦентры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КостЦентры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КостЦентры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_КостЦентры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КостЦентры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "DefaultActivity";
	НоваяСтрока.СвойствоФормата = "DefaultActivity";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Geomarket";
	НоваяСтрока.СвойствоФормата = "Geomarket";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets_Группа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "NonLawson";
	НоваяСтрока.СвойствоФормата = "NonLawson";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "OnlyMS";
	НоваяСтрока.СвойствоФормата = "OnlyMS";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Segment";
	НоваяСтрока.СвойствоФормата = "Segment";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SubGeomarket";
	НоваяСтрока.СвойствоФормата = "SubGeomarket";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets_Группа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "SubSegment";
	НоваяСтрока.СвойствоФормата = "SubSegment";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "TaxRegistration";
	НоваяСтрока.СвойствоФормата = "TaxRegistration";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сегмент";
	НоваяСтрока.СвойствоФормата = "Сегмент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";

КонецПроцедуры

Процедура ПКО_Справочник_КостЦентры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если стекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СегментыКостЦентров.Период,
			|	СегментыКостЦентров.Код
			|ИЗ
			|	РегистрСведений.СегментыКостЦентров КАК СегментыКостЦентров
			|ГДЕ
			|	СегментыКостЦентров.КостЦентр = &КостЦентр";
		
		Запрос.УстановитьПараметр("КостЦентр", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		табРезультата = ПолучитьТаблицуРегистраСКолонкамиБезТипов("СегментыКостЦентров","РегистрСведений");
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				нвСтрока = табРезультата.Добавить();
			    нвСтрока.Период =  ВыборкаДетальныеЗаписи.Период;
				нвСтрока.Код = ВыборкаДетальныеЗаписи.Код;
		КонецЦикла;
		
		ДанныеXDTO.Вставить("СегментыКостЦентров", табРезультата);
КонецПроцедуры

Процедура ПКО_Справочник_КостЦентры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ПолученныеДанные.ДополнительныеСвойства,
			"РегистрСведений","СегментыКостЦентров",КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_КостЦентры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("СегментыКостЦентров") И 
			ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.СегментыКостЦентров) Тогда
		НаборЗаписей = РегистрыСведений.СегментыКостЦентров.СоздатьНаборЗаписей();
		СсылкаНаКостЦентр = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(),ДанныеИБ.Ссылка);
		
		Для Каждого текСтрока ИЗ ПолученныеДанные.ДополнительныеСвойства.СегментыКостЦентров Цикл
			НаборЗаписей.Отбор.Период.Установить(текСтрока.Период);
			НаборЗаписей.Отбор.Код.Установить(текСтрока.Код);
			нвСтрока = НаборЗаписей.Добавить();
			нвСтрока.Код = текСтрока.Код;
			нвСтрока.Период = текСтрока.Период;
			нвСтрока.КостЦентр = СсылкаНаКостЦентр;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура
Процедура ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Catalog";
	НоваяСтрока.СвойствоФормата = "Catalog";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Catalog";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ProductLine";
	НоваяСтрока.СвойствоФормата = "ProductLine";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Сегменты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоКаталогу";
	НоваяСтрока.СвойствоФормата = "КодПоКаталогу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодТНВЭД";
	НоваяСтрока.СвойствоФормата = "КодТНВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НоменклатураИмпорт";
	НоваяСтрока.СвойствоФормата = "НоменклатураИмпорт";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураИмпорт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НоменклатурнаяГруппа";
	НоваяСтрока.СвойствоФормата = "НоменклатурнаяГруппа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяЗатрат";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.СвойствоФормата = "Тип";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипУпр";
	НоваяСтрока.СвойствоФормата = "ТипУпр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Услуга";
	НоваяСтрока.СвойствоФормата = "Услуга";

	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураИмпорт
Процедура ДобавитьПКО_Справочник_НоменклатураИмпорт(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураИмпорт";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатураИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураИмпорт";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПроекта";
	НоваяСтрока.СвойствоФормата = "КодПроекта";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеРусское";
	НоваяСтрока.СвойствоФормата = "НаименованиеРусское";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураИмпортГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.СвойствоФормата = "Тип";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипУпр";
	НоваяСтрока.СвойствоФормата = "ТипУпр";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыНоменклатуры";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураИмпортГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураИмпортГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураИмпортГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатураИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураИмпортГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураИмпортГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппы
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурныеГруппы";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатурныеГруппы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТД
Процедура ДобавитьПКО_Справочник_НомераГТД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НомераГТД";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НомераГТД";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВнутреннийНомер";
	НоваяСтрока.СвойствоФормата = "ВнутреннийНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаГТД";
	НоваяСтрока.СвойствоФормата = "ДатаГТД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИтогоИнвойсыПоГТД";
	НоваяСтрока.СвойствоФормата = "ИтогоИнвойсыПоГТД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцВLawson";
	НоваяСтрока.СвойствоФормата = "МесяцВLawson";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пошлина10";
	НоваяСтрока.СвойствоФормата = "Пошлина10";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пошлина11";
	НоваяСтрока.СвойствоФормата = "Пошлина11";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пошлина20";
	НоваяСтрока.СвойствоФормата = "Пошлина20";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПрочиеПошлины";
	НоваяСтрока.СвойствоФормата = "ПрочиеПошлины";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Таможня";
	НоваяСтрока.СвойствоФормата = "Таможня";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоКомплект";
	НоваяСтрока.СвойствоФормата = "ЭтоКомплект";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации
Процедура ДобавитьПКО_Справочник_Организации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Организации_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВариантНаименованияДляПечатныхФорм";
	НоваяСтрока.СвойствоФормата = "ВариантНаименованияДляПечатныхФорм";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВариантыНаименованияДляПечатныхФорм";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОбменаСКонтролирующимиОрганами";
	НоваяСтрока.СвойствоФормата = "ВидОбменаСКонтролирующимиОрганами";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОбменаСКонтролирующимиОрганами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРегистрации";
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ИндивидуальныйПредприниматель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИностраннаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ИностраннаяОрганизация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВСтранеРегистрации";
	НоваяСтрока.СвойствоФормата = "КодВСтранеРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодНалоговогоОргана";
	НоваяСтрока.СвойствоФормата = "КодНалоговогоОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКВЭД";
	НоваяСтрока.СвойствоФормата = "КодОКВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКОНХ";
	НоваяСтрока.СвойствоФормата = "КодОКОНХ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКОПФ";
	НоваяСтрока.СвойствоФормата = "КодОКОПФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКФС";
	НоваяСтрока.СвойствоФормата = "КодОКФС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКТМО";
	НоваяСтрока.СвойствоФормата = "КодПоОКТМО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КрупнейшийНалогоплательщик";
	НоваяСтрока.СвойствоФормата = "КрупнейшийНалогоплательщик";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеИнострОрганизации";
	НоваяСтрока.СвойствоФормата = "НаименованиеИнострОрганизации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеНалоговогоОргана";
	НоваяСтрока.СвойствоФормата = "НаименованиеНалоговогоОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКВЭД";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКОПФ";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКОПФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКФС";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКФС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменЗадействован";
	НоваяСтрока.СвойствоФормата = "ОбменЗадействован";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменКаталогОтправкиДанныхОтчетности";
	НоваяСтрока.СвойствоФормата = "ОбменКаталогОтправкиДанныхОтчетности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменКодАбонента";
	НоваяСтрока.СвойствоФормата = "ОбменКодАбонента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомерПФР";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомерФСС";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерФСС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоКодОргана";
	НоваяСтрока.СвойствоФормата = "СвидетельствоКодОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоНаименованиеОргана";
	НоваяСтрока.СвойствоФормата = "СвидетельствоНаименованиеОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПостоянногоМестонахождения";
	НоваяСтрока.СвойствоФормата = "СтранаПостоянногоМестонахождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТерриториальныеУсловияПФР";
	НоваяСтрока.СвойствоФормата = "ТерриториальныеУсловияПФР";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТерриториальныеУсловия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресЭП";
	НоваяСтрока.СвойствоФормата = "АдресЭП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.СвойствоФормата = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыКонтактнойИнформации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоменноеИмяСервера";
	НоваяСтрока.СвойствоФормата = "ДоменноеИмяСервера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТелефона";
	НоваяСтрока.СвойствоФормата = "НомерТелефона";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТелефонаБезКодов";
	НоваяСтрока.СвойствоФормата = "НомерТелефонаБезКодов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Регион";
	НоваяСтрока.СвойствоФормата = "Регион";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Страна";
	НоваяСтрока.СвойствоФормата = "Страна";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.СвойствоФормата = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыКонтактнойИнформации";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//	Если ДанныеXDTO.Свойство("ОсновнойБанковскийСчет") И ЗначениеЗаполнено(ДанныеИБ.ОсновнойБанковскийСчет) Тогда
	//		ДанныеXDTO.ОсновнойБанковскийСчет.Вставить("Владелец",ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ОсновнойБанковскийСчет.Владелец));
	//	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОсновнойБанковскийСчет") И ЗначениеЗаполнено(ДанныеИБ.ОсновнойБанковскийСчет) Тогда
		Стек = Новый Массив;
		Стек.Добавить(ДанныеИБ.ОсновнойБанковскийСчет);
		
		
		сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(ДанныеИБ.ОсновнойБанковскийСчет.Владелец);
		
		ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
		ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,Стек);
		
		ДанныеXDTO.ОсновнойБанковскийСчет.Вставить("Владелец",ЗначениеСвойства);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация",ДанныеИБ.КонтактнаяИнформация.Выгрузить());
КонецПроцедуры

Процедура ПКО_Справочник_Организации_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	///////////////////////////////////////////////КонтактнаяИнформация
	массивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация") И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда   
		Для Каждого Строка Из ДанныеXDTO.КонтактнаяИнформация Цикл 
		
			СтруктураДанныхСтроки = Новый Структура; 
			СтруктураДанныхСтроки.Вставить("АдресЭП", Строка.АдресЭП); 
			СтруктураДанныхСтроки.Вставить("Вид", Строка.Вид); 
			СтруктураДанныхСтроки.Вставить("Город", Строка.Город); 
			СтруктураДанныхСтроки.Вставить("ДоменноеИмяСервера", Строка.ДоменноеИмяСервера); 
			СтруктураДанныхСтроки.Вставить("ЗначенияПолей", Строка.ЗначенияПолей); 
			СтруктураДанныхСтроки.Вставить("НомерТелефона", Строка.НомерТелефона); 
			СтруктураДанныхСтроки.Вставить("НомерТелефонаБезКодов", Строка.НомерТелефонаБезКодов); 
			СтруктураДанныхСтроки.Вставить("Представление", Строка.Представление); 
			СтруктураДанныхСтроки.Вставить("Регион", Строка.Регион); 
			СтруктураДанныхСтроки.Вставить("Страна", Строка.Страна); 
			СтруктураДанныхСтроки.Вставить("Тип", Строка.Тип); 
	
			массивСтрок.Добавить(СтруктураДанныхСтроки);     
	
		КонецЦикла;
	КонецЕсли;  
	
	Если массивСтрок.Количество() > 0 Тогда 
	   ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтактнаяИнформация", массивСтрок);
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры

Процедура ПКО_Справочник_Организации_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	тест =12;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения
Процедура ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "GeoMarket";
	НоваяСтрока.СвойствоФормата = "GeoMarket";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_GeoMarkets";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПодразделения";
	НоваяСтрока.СвойствоФормата = "ВидПодразделения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидПодразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйОрган";
	НоваяСтрока.СвойствоФормата = "НалоговыйОрган";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,КПП,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияГруппа
Процедура ДобавитьПКО_Справочник_ПодразделенияГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПодразделенияГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПодразделенияГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ПодразделенияГруппа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "LegalEntity";
	НоваяСтрока.СвойствоФормата = "LegalEntity";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_LegalEntities";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Location";
	НоваяСтрока.СвойствоФормата = "Location";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРегистрации";
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ИндивидуальныйПредприниматель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИностраннаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ИностраннаяОрганизация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВСтранеРегистрации";
	НоваяСтрока.СвойствоФормата = "КодВСтранеРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодИМНС";
	НоваяСтрока.СвойствоФормата = "КодИМНС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодИФНСПолучателя";
	НоваяСтрока.СвойствоФормата = "КодИФНСПолучателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКВЭД";
	НоваяСтрока.СвойствоФормата = "КодОКВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКОНХ";
	НоваяСтрока.СвойствоФормата = "КодОКОНХ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКОПФ";
	НоваяСтрока.СвойствоФормата = "КодОКОПФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКФС";
	НоваяСтрока.СвойствоФормата = "КодОКФС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "КодПоОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "КодПоОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКТМО";
	НоваяСтрока.СвойствоФормата = "КодПоОКТМО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеЗаказчика";
	НоваяСтрока.СвойствоФормата = "НаименованиеЗаказчика";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеИМНС";
	НоваяСтрока.СвойствоФормата = "НаименованиеИМНС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеИнострОрганизации";
	НоваяСтрока.СвойствоФормата = "НаименованиеИнострОрганизации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКВЭД";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКОПФ";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКОПФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОКФС";
	НоваяСтрока.СвойствоФормата = "НаименованиеОКФС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйОрган";
	НоваяСтрока.СвойствоФормата = "НалоговыйОрган";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НачислениеАмортизацииОС";
	НоваяСтрока.СвойствоФормата = "НачислениеАмортизацииОС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменЗадействован";
	НоваяСтрока.СвойствоФормата = "ОбменЗадействован";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменКаталогОтправкиДанныхОтчетности";
	НоваяСтрока.СвойствоФормата = "ОбменКаталогОтправкиДанныхОтчетности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменКаталогПрограммыЭлектроннойПочты";
	НоваяСтрока.СвойствоФормата = "ОбменКаталогПрограммыЭлектроннойПочты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбменКодАбонента";
	НоваяСтрока.СвойствоФормата = "ОбменКодАбонента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомерПФР";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомерФСС";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерФСС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоКодОргана";
	НоваяСтрока.СвойствоФормата = "СвидетельствоКодОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоНаименованиеОргана";
	НоваяСтрока.СвойствоФормата = "СвидетельствоНаименованиеОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПостоянногоМестонахождения";
	НоваяСтрока.СвойствоФормата = "СтранаПостоянногоМестонахождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТерриториальныеУсловияПФР";
	НоваяСтрока.СвойствоФормата = "ТерриториальныеУсловияПФР";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТерриториальныеУсловия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,КПП,Наименование,Родитель,ИНН");
КонецПроцедуры

Процедура ПКО_Справочник_ПодразделенияГруппа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И НЕ ДанныеИБ.ЭтоГруппа Тогда
	
		ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными("В базе "+Строка(ДанныеИБ)+ " Прилетело "+Строка(ПолученныеДанные), КомпонентыОбмена, УровеньЖурналаРегистрации.Предупреждение);
	
	
	КОнецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Недействителен";
	НоваяСтрока.СвойствоФормата = "Недействителен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подготовлен";
	НоваяСтрока.СвойствоФормата = "Подготовлен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Служебный";
	НоваяСтрока.СвойствоФормата = "Служебный";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//Если ДанныеИБ = Неопределено Тогда
	//	ПолученныеДанные.Код = ПолученныеДанные.Наименование;
	//КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходы
Процедура ДобавитьПКО_Справочник_ПрочиеДоходыИРасходы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПрочиеДоходыИРасходы";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПрочиеДоходыИРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПрочихДоходовИРасходов";
	НоваяСтрока.СвойствоФормата = "ВидПрочихДоходовИРасходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыПрочихДоходовИРасходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятиеКналоговомуУчету";
	НоваяСтрока.СвойствоФормата = "ПринятиеКналоговомуУчету";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПрочиеДоходыИРасходыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходыГруппа
Процедура ДобавитьПКО_Справочник_ПрочиеДоходыИРасходыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПрочиеДоходыИРасходыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПрочиеДоходыИРасходыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПрочиеДоходыИРасходыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РеализацияТоваровУслугПрисоединенныеФ
Процедура ДобавитьПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_РеализацияТоваровУслугПрисоединенныеФ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.РеализацияТоваровУслугПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.РеализацияТоваровУслугПрисоединенныеФайлы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Автор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДокумента";
	НоваяСтрока.СвойствоФормата = "ВидДокумента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыПрисоединенныхДокументовРеализацийТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецФайла";
	НоваяСтрока.СвойствоФормата = "ВладелецФайла";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаМодификацииУниверсальная";
	НоваяСтрока.СвойствоФормата = "ДатаМодификацииУниверсальная";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСоздания";
	НоваяСтрока.СвойствоФормата = "ДатаСоздания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Зашифрован";
	НоваяСтрока.СвойствоФормата = "Зашифрован";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Изменил";
	НоваяСтрока.СвойствоФормата = "Изменил";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндексКартинки";
	НоваяСтрока.СвойствоФормата = "ИндексКартинки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Описание";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодписанЭП";
	НоваяСтрока.СвойствоФормата = "ПодписанЭП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПутьКФайлу";
	НоваяСтрока.СвойствоФормата = "ПутьКФайлу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Размер";
	НоваяСтрока.СвойствоФормата = "Размер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Расширение";
	НоваяСтрока.СвойствоФормата = "Расширение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Редактирует";
	НоваяСтрока.СвойствоФормата = "Редактирует";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусИзвлеченияТекста";
	НоваяСтрока.СвойствоФормата = "СтатусИзвлеченияТекста";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтатусыИзвлеченияТекстаФайлов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипХраненияФайла";
	НоваяСтрока.СвойствоФормата = "ТипХраненияФайла";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыХраненияФайлов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Том";
	НоваяСтрока.СвойствоФормата = "Том";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТомаХраненияФайлов";

	ПравилоКонвертации.ПоляПоиска.Добавить("ПутьКФайлу,Том");
КонецПроцедуры

Процедура ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//А=1;
		//
		//Если ДанныеИБ.ТипХраниенияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		//	
		//	
		//Иначе
		//	ДвДанные = ДанныеИБ.ТекстХранилище.ПОлучить();
		//	
		//	Строка = Base64Строка(ДвДанные);
		//	Если ЗначениеЗаполнено(Строка) Тогда
		//		ДанныеXDTO.ВСтавить("ТекстХранилище",Строка);	
		//	КонецЕсли;
		//	
		//	ДвДанные = ДанныеИБ.ФайлХранилище.ПОлучить();
		//	Строка = Base64Строка(ДвДанные);
		//	Если ЗначениеЗаполнено(Строка) Тогда
		//		ДанныеXDTO.ВСтавить("ФайлХранилище",Строка);	
		//	КонецЕсли;
		//
		//КонецЕсли;
		//
КонецПроцедуры

Процедура ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// тут мы возвращаем все на место после того что сделали перед записью полученных данных
	
	ПравилоКонвертации = ОБменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_РеализацияТоваровУслугПрисоединенныеФ"); 
	ПравилоКонвертации.ЭтоРегистрСведений = Ложь;
	//////////////////////
КонецПроцедуры

Процедура ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// ниже хитрый финт ушами
	// типовые механизмы определяют что это загрузка файла и по типовым механизмам происходит так 
	// если файл не новый - удаляется сначала старый файл, а потом грузится новый файл
	// но так как у нас хранилище одно - то в исходном хранилище файл удалится, что совсем не комильфо
	// этот процесс происходит после обработчика перед записью полученных данных
	// соответственно этим признаком обходим лишнюю обработку
	ПравилоКонвертации = ОБменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_РеализацияТоваровУслугПрисоединенныеФ"); 
	ПравилоКонвертации.ЭтоРегистрСведений = Истина;
	//////////////////////////////////
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане
Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Доверенность";
	НоваяСтрока.СвойствоФормата = "Доверенность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПредставителя";
	НоваяСтрока.СвойствоФормата = "ДокументПредставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКТМО";
	НоваяСтрока.СвойствоФормата = "КодНалоговогоОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеИФНС";
	НоваяСтрока.СвойствоФормата = "НаименованиеИФНС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОбособленногоПодразделения";
	НоваяСтрока.СвойствоФормата = "НаименованиеОбособленногоПодразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представитель";
	НоваяСтрока.СвойствоФормата = "Представитель";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УполномоченноеЛицоПредставителя";
	НоваяСтрока.СвойствоФормата = "УполномоченноеЛицоПредставителя";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Сегменты
Процедура ДобавитьПКО_Справочник_Сегменты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Сегменты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Сегменты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Сегменты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СегментыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СегментыГруппа
Процедура ДобавитьПКО_Справочник_СегментыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СегментыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Сегменты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СегментыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СегментыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады
Процедура ДобавитьПКО_Справочник_Склады(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСклада";
	НоваяСтрока.СвойствоФормата = "КодСклада";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦенРозничнойТорговли";
	НоваяСтрока.СвойствоФормата = "ТипЦенРозничнойТорговли";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатусыВозвратаКС
Процедура ДобавитьПКО_Справочник_СтатусыВозвратаКС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатусыВозвратаКС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатусыВозвратаКС;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатусыВозвратаКС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Определение";
	НоваяСтрока.СвойствоФормата = "Определение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВидДвиженияДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатрат
Процедура ДобавитьПКО_Справочник_СтатьиЗатрат(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиЗатрат";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиЗатрат";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидРасходовНУ";
	НоваяСтрока.СвойствоФормата = "ВидРасходовНУ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыРасходовНУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтнесениеРасходовКДеятельностиЕНВД";
	НоваяСтрока.СвойствоФормата = "ОтнесениеРасходовКДеятельностиЕНВД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ОтнесениеРасходовКДеятельностиЕНВД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатратГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатратГруппа
Процедура ДобавитьПКО_Справочник_СтатьиЗатратГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиЗатратГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиЗатратГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатратГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТерриториальныеУсловия
Процедура ДобавитьПКО_Справочник_ТерриториальныеУсловия(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТерриториальныеУсловия";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТерриториальныеУсловия;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТерриториальныеУсловия";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыНоменклатуры
Процедура ДобавитьПКО_Справочник_ТипыНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыНоменклатуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокОкругления";
	НоваяСтрока.СвойствоФормата = "ПорядокОкругления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПорядкиОкругления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТомаХраненияФайлов
Процедура ДобавитьПКО_Справочник_ТомаХраненияФайлов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТомаХраненияФайлов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТомаХраненияФайлов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТомаХраненияФайлов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МаксимальныйРазмер";
	НоваяСтрока.СвойствоФормата = "МаксимальныйРазмер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолныйПутьLinux";
	НоваяСтрока.СвойствоФормата = "ПолныйПутьLinux";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолныйПутьWindows";
	НоваяСтрока.СвойствоФормата = "ПолныйПутьWindows";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокЗаполнения";
	НоваяСтрока.СвойствоФормата = "ПорядокЗаполнения";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ПолныйПутьWindows");
	ПравилоКонвертации.ПоляПоиска.Добавить("ПолныйПутьWindows");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица
Процедура ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Доверенность";
	НоваяСтрока.СвойствоФормата = "Доверенность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Должность";
	НоваяСтрока.СвойствоФормата = "Должность";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДолжностиОрганизаций_Отпр";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодИМНС";
	НоваяСтрока.СвойствоФормата = "КодИМНС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоРождения";
	НоваяСтрока.СвойствоФормата = "МестоРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеEng";
	НоваяСтрока.СвойствоФормата = "НаименованиеEng";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФИОродительныйПадеж";
	НоваяСтрока.СвойствоФормата = "ФИОродительныйПадеж";

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// TicketsStatuses.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "TicketsStatuses";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.TicketsStatuses;
	ПравилоКонвертации.ТипXDTO = "TicketsStatuses";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.ARBilling, "ARBilling");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.FASales, "FASales");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.InterCompany, "InterCompany");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.Lawson, "Lawson");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.NotInSiebel, "NotInSiebel");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.Oracle, "Oracle");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.OracleSmith, "OracleSmith");
	ЗначенияДляОтправки.Вставить(Перечисления.TicketsStatuses.OtherSales, "OtherSales");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ARBilling", Перечисления.TicketsStatuses.ARBilling);
	ЗначенияДляПолучения.Вставить("FASales", Перечисления.TicketsStatuses.FASales);
	ЗначенияДляПолучения.Вставить("InterCompany", Перечисления.TicketsStatuses.InterCompany);
	ЗначенияДляПолучения.Вставить("Lawson", Перечисления.TicketsStatuses.Lawson);
	ЗначенияДляПолучения.Вставить("NotInSiebel", Перечисления.TicketsStatuses.NotInSiebel);
	ЗначенияДляПолучения.Вставить("Oracle", Перечисления.TicketsStatuses.Oracle);
	ЗначенияДляПолучения.Вставить("OracleSmith", Перечисления.TicketsStatuses.OracleSmith);
	ЗначенияДляПолучения.Вставить("OtherSales", Перечисления.TicketsStatuses.OtherSales);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВариантыНаименованияДляПечатныхФорм.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВариантыНаименованияДляПечатныхФорм";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыНаименованияДляПечатныхФорм;
	ПравилоКонвертации.ТипXDTO = "ВариантыНаименованияДляПечатныхФорм";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование, "ПолноеНаименование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование, "СокращенноеНаименование");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПолноеНаименование", Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование);
	ЗначенияДляПолучения.Вставить("СокращенноеНаименование", Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВедениеВзаиморасчетовПоДоговорам.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВедениеВзаиморасчетовПоДоговорам";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПравилоКонвертации.ТипXDTO = "ВедениеВзаиморасчетовПоДоговорам";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом, "ПоДоговоруВЦелом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам, "ПоРасчетнымДокументам");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПоДоговоруВЦелом", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	ЗначенияДляПолучения.Вставить("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидПодразделения.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидПодразделения";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидПодразделения;
	ПравилоКонвертации.ТипXDTO = "ВидПодразделения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидПодразделения.ОбщехозяйственныеРасходы, "ОбщехозяйственныеРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидПодразделения.Отделение, "Отделение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидПодразделения.Представительство, "Представительство");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидПодразделения.Филиал, "Филиал");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОбщехозяйственныеРасходы", Перечисления.ВидПодразделения.ОбщехозяйственныеРасходы);
	ЗначенияДляПолучения.Вставить("Отделение", Перечисления.ВидПодразделения.Отделение);
	ЗначенияДляПолучения.Вставить("Представительство", Перечисления.ВидПодразделения.Представительство);
	ЗначенияДляПолучения.Вставить("Филиал", Перечисления.ВидПодразделения.Филиал);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыАгентскихДоговоров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыАгентскихДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыАгентскихДоговоров;
	ПравилоКонвертации.ТипXDTO = "ВидыАгентскихДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыАгентскихДоговоров.Аренда, "Аренда");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыАгентскихДоговоров.Нерезидент, "Нерезидент");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Аренда", Перечисления.ВидыАгентскихДоговоров.Аренда);
	ЗначенияДляПолучения.Вставить("Нерезидент", Перечисления.ВидыАгентскихДоговоров.Нерезидент);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыДДС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыДДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДвиженийДенежныхСредств;
	ПравилоКонвертации.ТипXDTO = "ВидыДДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыкупСобственныхАкций, "ВыкупСобственныхАкций");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыкупСобственныхДолевыхИнструментов, "ВыкупСобственныхДолевыхИнструментов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов, "ВыплатаДивидендов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендовПроцентов, "ВыплатаДивидендовПроцентов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДолиМеньшинства, "ВыплатаДолиМеньшинства");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовВСвязиСоСтроительством, "ВыплатаПроцентовВСвязиСоСтроительством");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовФинансовая, "ВыплатаПроцентовФинансовая");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыпускДолговыхИнструментов, "ВыпускДолговыхИнструментов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыпускКомплексныхФинансовыхИнструментов, "ВыпускКомплексныхФинансовыхИнструментов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиДоходныхВложений, "ВыручкаОтПродажиДоходныхВложений");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиНематериальныхАктивов, "ВыручкаОтПродажиНематериальныхАктивов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиОбъектовОсновныхСредств, "ВыручкаОтПродажиОбъектовОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений, "ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ЗаймыПредоставленныеДругимОрганизациям, "ЗаймыПредоставленныеДругимОрганизациям");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ОплатаНИОКР, "ОплатаНИОКР");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов, "ОплатаОборотныхАктивов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ОплатаПоПенсионнымПланам, "ОплатаПоПенсионнымПланам");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда, "ОплатаТруда");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеЗаймовИКредитов, "ПогашениеЗаймовИКредитов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеОбязательствПоФинансовойАренде, "ПогашениеОбязательствПоФинансовойАренде");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПолученныеДивиденды, "ПолученныеДивиденды");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПолученныеПроценты, "ПолученныеПроценты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеПлатежейПоФинансовойАренде, "ПоступлениеПлатежейПоФинансовойАренде");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями, "ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям, "ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЭмиссииАкций, "ПоступленияОтЭмиссииАкций");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДоходныхВложенийВМатериальныеЦенности, "ПриобретениеДоходныхВложенийВМатериальныеЦенности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДочернихОрганизаций, "ПриобретениеДочернихОрганизаций");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеНематериальныхАктивов, "ПриобретениеНематериальныхАктивов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеОбъектовОсновныхСредств, "ПриобретениеОбъектовОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеПрочихАктивовИнвестиционное, "ПриобретениеПрочихАктивовИнвестиционное");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности, "ПрочиеПоступленияПоТекущейДеятельности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности, "ПрочиеПоступленияПоФинансовойДеятельности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности, "ПрочиеРасходыПоИнвестиционнойДеятельности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности, "ПрочиеРасходыПоТекущейДеятельности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоФинансовойДеятельности, "ПрочиеРасходыПоФинансовойДеятельности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.РасчетыПоНалогамИСборам, "РасчетыПоНалогамИСборам");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.РеализацияПрочихАктивовИнвестиционная, "РеализацияПрочихАктивовИнвестиционная");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков, "СредстваПолученныеОтПокупателейИЗаказчиков");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВыкупСобственныхАкций", Перечисления.ВидыДвиженийДенежныхСредств.ВыкупСобственныхАкций);
	ЗначенияДляПолучения.Вставить("ВыкупСобственныхДолевыхИнструментов", Перечисления.ВидыДвиженийДенежныхСредств.ВыкупСобственныхДолевыхИнструментов);
	ЗначенияДляПолучения.Вставить("ВыплатаДивидендов", Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов);
	ЗначенияДляПолучения.Вставить("ВыплатаДивидендовПроцентов", Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендовПроцентов);
	ЗначенияДляПолучения.Вставить("ВыплатаДолиМеньшинства", Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДолиМеньшинства);
	ЗначенияДляПолучения.Вставить("ВыплатаПроцентовВСвязиСоСтроительством", Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовВСвязиСоСтроительством);
	ЗначенияДляПолучения.Вставить("ВыплатаПроцентовФинансовая", Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовФинансовая);
	ЗначенияДляПолучения.Вставить("ВыпускДолговыхИнструментов", Перечисления.ВидыДвиженийДенежныхСредств.ВыпускДолговыхИнструментов);
	ЗначенияДляПолучения.Вставить("ВыпускКомплексныхФинансовыхИнструментов", Перечисления.ВидыДвиженийДенежныхСредств.ВыпускКомплексныхФинансовыхИнструментов);
	ЗначенияДляПолучения.Вставить("ВыручкаОтПродажиДоходныхВложений", Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиДоходныхВложений);
	ЗначенияДляПолучения.Вставить("ВыручкаОтПродажиНематериальныхАктивов", Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиНематериальныхАктивов);
	ЗначенияДляПолучения.Вставить("ВыручкаОтПродажиОбъектовОсновныхСредств", Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиОбъектовОсновныхСредств);
	ЗначенияДляПолучения.Вставить("ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений", Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиЦенныхБумагИИныхФинансовыхВложений);
	ЗначенияДляПолучения.Вставить("ЗаймыПредоставленныеДругимОрганизациям", Перечисления.ВидыДвиженийДенежныхСредств.ЗаймыПредоставленныеДругимОрганизациям);
	ЗначенияДляПолучения.Вставить("ОплатаНИОКР", Перечисления.ВидыДвиженийДенежныхСредств.ОплатаНИОКР);
	ЗначенияДляПолучения.Вставить("ОплатаОборотныхАктивов", Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов);
	ЗначенияДляПолучения.Вставить("ОплатаПоПенсионнымПланам", Перечисления.ВидыДвиженийДенежныхСредств.ОплатаПоПенсионнымПланам);
	ЗначенияДляПолучения.Вставить("ОплатаТруда", Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда);
	ЗначенияДляПолучения.Вставить("ПогашениеЗаймовИКредитов", Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеЗаймовИКредитов);
	ЗначенияДляПолучения.Вставить("ПогашениеОбязательствПоФинансовойАренде", Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеОбязательствПоФинансовойАренде);
	ЗначенияДляПолучения.Вставить("ПолученныеДивиденды", Перечисления.ВидыДвиженийДенежныхСредств.ПолученныеДивиденды);
	ЗначенияДляПолучения.Вставить("ПолученныеПроценты", Перечисления.ВидыДвиженийДенежныхСредств.ПолученныеПроценты);
	ЗначенияДляПолучения.Вставить("ПоступлениеПлатежейПоФинансовойАренде", Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеПлатежейПоФинансовойАренде);
	ЗначенияДляПолучения.Вставить("ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями", Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями);
	ЗначенияДляПолучения.Вставить("ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям", Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям);
	ЗначенияДляПолучения.Вставить("ПоступленияОтЭмиссииАкций", Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЭмиссииАкций);
	ЗначенияДляПолучения.Вставить("ПриобретениеДоходныхВложенийВМатериальныеЦенности", Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДоходныхВложенийВМатериальныеЦенности);
	ЗначенияДляПолучения.Вставить("ПриобретениеДочернихОрганизаций", Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДочернихОрганизаций);
	ЗначенияДляПолучения.Вставить("ПриобретениеНематериальныхАктивов", Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеНематериальныхАктивов);
	ЗначенияДляПолучения.Вставить("ПриобретениеОбъектовОсновныхСредств", Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеОбъектовОсновныхСредств);
	ЗначенияДляПолучения.Вставить("ПриобретениеПрочихАктивовИнвестиционное", Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеПрочихАктивовИнвестиционное);
	ЗначенияДляПолучения.Вставить("ПрочиеПоступленияПоТекущейДеятельности", Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности);
	ЗначенияДляПолучения.Вставить("ПрочиеПоступленияПоФинансовойДеятельности", Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходыПоИнвестиционнойДеятельности", Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходыПоТекущейДеятельности", Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходыПоФинансовойДеятельности", Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоФинансовойДеятельности);
	ЗначенияДляПолучения.Вставить("РасчетыПоНалогамИСборам", Перечисления.ВидыДвиженийДенежныхСредств.РасчетыПоНалогамИСборам);
	ЗначенияДляПолучения.Вставить("РеализацияПрочихАктивовИнвестиционная", Перечисления.ВидыДвиженийДенежныхСредств.РеализацияПрочихАктивовИнвестиционная);
	ЗначенияДляПолучения.Вставить("СредстваПолученныеОтПокупателейИЗаказчиков", Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыДоговоров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
	ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку, "СКомиссионеромНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку, "СКомитентомНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыКонтактнойИнформации.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыКонтактнойИнформации";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO = "ВидыКонтактнойИнформации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица, "EmailКонтактныеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, "EmailКонтрагенты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "EmailОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "EmailПользователя");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица, "АдресДляИнформированияКонтактныеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "АдресДляИнформированияФизическиеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица, "АдресЗаПределамиРФФизическиеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "АдресМестаПроживанияФизическиеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АнглийскийАдресКонтрагента, "АнглийскийАдресКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АнглийскийАдресОрганизации, "АнглийскийАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДляИнвойсаАдресКонтрагента, "ДляИнвойсаАдресКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДляИнвойсаАдресОрганизации, "ДляИнвойсаАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица, "ДругаяИнформацияКонтактныеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты, "ДругаяИнформацияКонтрагенты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, "ДругаяИнформацияОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдресКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашнийФизическиеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "ТелефонКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица, "ТелефонМобильныйКонтактныеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "ТелефонОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "ТелефонПользователя");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации, "ТелефонПоЮридическомуАдресуОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица, "ТелефонРабочийКонтактныеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочийФизическиеЛица");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации, "УчредительныйАдресИностраннойОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "ФаксКонтрагенты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "ФаксОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактАдресКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактАдресОрганизации");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮрАдресКонтрагента");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮрАдресОрганизации");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("EmailКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица);
	ЗначенияДляПолучения.Вставить("EmailКонтрагенты", Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ЗначенияДляПолучения.Вставить("EmailОрганизации", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	ЗначенияДляПолучения.Вставить("EmailПользователя", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	ЗначенияДляПолучения.Вставить("АдресДляИнформированияКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица);
	ЗначенияДляПолучения.Вставить("АдресДляИнформированияФизическиеЛица", Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	ЗначенияДляПолучения.Вставить("АдресЗаПределамиРФФизическиеЛица", Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
	ЗначенияДляПолучения.Вставить("АдресМестаПроживанияФизическиеЛица", Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	ЗначенияДляПолучения.Вставить("АнглийскийАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.АнглийскийАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("АнглийскийАдресОрганизации", Справочники.ВидыКонтактнойИнформации.АнглийскийАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ДляИнвойсаАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ДляИнвойсаАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("ДляИнвойсаАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ДляИнвойсаАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ДругаяИнформацияКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица);
	ЗначенияДляПолучения.Вставить("ДругаяИнформацияКонтрагенты", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	ЗначенияДляПолучения.Вставить("ДругаяИнформацияОрганизации", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонДомашнийФизическиеЛица", Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	ЗначенияДляПолучения.Вставить("ТелефонКонтрагента", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ЗначенияДляПолучения.Вставить("ТелефонМобильныйКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);
	ЗначенияДляПолучения.Вставить("ТелефонОрганизации", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонПользователя", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ЗначенияДляПолучения.Вставить("ТелефонПоЮридическомуАдресуОрганизации", Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонРабочийКонтактныеЛица", Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	ЗначенияДляПолучения.Вставить("ТелефонРабочийФизическиеЛица", Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ЗначенияДляПолучения.Вставить("УчредительныйАдресИностраннойОрганизации", Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
	ЗначенияДляПолучения.Вставить("ФаксКонтрагенты", Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ЗначенияДляПолучения.Вставить("ФаксОрганизации", Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	ЗначенияДляПолучения.Вставить("ФактАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("ФактАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ЮрАдресКонтрагента", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ЗначенияДляПолучения.Вставить("ЮрАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыКонтактныхЛиц.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыКонтактныхЛиц";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтактныхЛиц;
	ПравилоКонвертации.ТипXDTO = "ВидыКонтактныхЛиц";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента, "КонтактноеЛицоКонтрагента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт, "ЛичныйКонтакт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо, "ПрочееКонтактноеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("КонтактноеЛицоКонтрагента", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	ЗначенияДляПолучения.Вставить("ЛичныйКонтакт", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
	ЗначенияДляПолучения.Вставить("ПрочееКонтактноеЛицо", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОбменаСКонтролирующимиОрганами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОбменаСКонтролирующимиОрганами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОбменаСКонтролирующимиОрганами;
	ПравилоКонвертации.ТипXDTO = "ВидыОбменаСКонтролирующимиОрганами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате, "ОбменВУниверсальномФормате");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен, "ОбменОтключен");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер, "ОбменЧерезСпринтер");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОбменВУниверсальномФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	ЗначенияДляПолучения.Вставить("ОбменОтключен", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен);
	ЗначенияДляПолучения.Вставить("ОбменЧерезСпринтер", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийКорректировкаДолга.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийКорректировкаДолга";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийКорректировкаДолга";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности, "ПереносЗадолженности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета, "ПроведениеВзаимозачета");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности, "СписаниеЗадолженности");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПереносЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
	ЗначенияДляПолучения.Вставить("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
	ЗначенияДляПолучения.Вставить("СписаниеЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПоступлениеБезналичныхДенежныхСредств.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПоступлениеБезналичныхДенежныхСредств";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступлениеБезналичныхДенежныхСредств";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком, "ВозвратДенежныхСредствПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств, "ИнкассацияДенежныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя, "ОплатаПокупателя");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты, "ПоступленияОтПродажиИностраннойВалюты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты, "ПриобретениеИностраннойВалюты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств, "ПрочееПоступлениеБезналичныхДенежныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами, "ПрочиеРасчетыСКонтрагентами");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам, "РасчетыПоКредитамИЗаймам");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратДенежныхСредствПоставщиком", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	ЗначенияДляПолучения.Вставить("ИнкассацияДенежныхСредств", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств);
	ЗначенияДляПолучения.Вставить("ОплатаПокупателя", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	ЗначенияДляПолучения.Вставить("ПоступленияОтПродажиИностраннойВалюты", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ЗначенияДляПолучения.Вставить("ПриобретениеИностраннойВалюты", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты);
	ЗначенияДляПолучения.Вставить("ПрочееПоступлениеБезналичныхДенежныхСредств", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	ЗначенияДляПолучения.Вставить("ПрочиеРасчетыСКонтрагентами", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ЗначенияДляПолучения.Вставить("РасчетыПоКредитамИЗаймам", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийППИсходящее.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийППИсходящее";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийППИсходящее;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийППИсходящее";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю, "ВозвратДенежныхСредствПокупателю");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику, "ОплатаПоставщику");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет, "ПереводНаДругойСчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога, "ПеречислениеНалога");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств, "ПрочееСписаниеБезналичныхДенежныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами, "ПрочиеРасчетыСКонтрагентами");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами, "РасчетыПоКредитамИЗаймамСКонтрагентами");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратДенежныхСредствПокупателю", Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ЗначенияДляПолучения.Вставить("ОплатаПоставщику", Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("ПереводНаДругойСчет", Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
	ЗначенияДляПолучения.Вставить("ПеречислениеНалога", Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
	ЗначенияДляПолучения.Вставить("ПрочееСписаниеБезналичныхДенежныхСредств", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
	ЗначенияДляПолучения.Вставить("ПрочиеРасчетыСКонтрагентами", Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
	ЗначенияДляПолучения.Вставить("РасчетыПоКредитамИЗаймамСКонтрагентами", Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРеализацияТоваровУслуг.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРеализацияТоваровУслуг";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРеализацияТоваров;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота, "ВнутренняяКредитНота");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ, "КредитНотаОтрицатСФ");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно, "КредитНотаСторно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности, "ОтгрузкаБезПереходаПраваСобственности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, "ПродажаКомиссия");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент, "РеализацияАгент");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВнутренняяКредитНота", Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота);
	ЗначенияДляПолучения.Вставить("КредитНотаОтрицатСФ", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ);
	ЗначенияДляПолучения.Вставить("КредитНотаСторно", Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно);
	ЗначенияДляПолучения.Вставить("Оборудование", Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПраваСобственности", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	ЗначенияДляПолучения.Вставить("ПродажаКомиссия", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	ЗначенияДляПолучения.Вставить("РеализацияАгент", Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСчетНаОплатуПокупателю.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСчетНаОплатуПокупателю";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСчетНаОплатуПокупателю;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийСчетНаОплатуПокупателю";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетНаОплатуПокупателю.ПредоплатаПоДоговору, "ПредоплатаПоДоговору");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетНаОплатуПокупателю.СчетНаОплату, "СчетНаОплату");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПредоплатаПоДоговору", Перечисления.ВидыОперацийСчетНаОплатуПокупателю.ПредоплатаПоДоговору);
	ЗначенияДляПолучения.Вставить("СчетНаОплату", Перечисления.ВидыОперацийСчетНаОплатуПокупателю.СчетНаОплату);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыПрисоединенныхДокументовРеализацийТоваровУслуг";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг;
	ПравилоКонвертации.ТипXDTO = "ВидыПрисоединенныхДокументовРеализацийТоваровУслуг";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.ПервичнаяДокументация, "ПервичнаяДокументация");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактура, "СчетФактура");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументация, "СчетФактураПервичнаяДокументация");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументацияЧеклист, "СчетФактураПервичнаяДокументацияЧеклист");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.ЧЕКЛИСТ, "ЧЕКЛИСТ");
	// { RGS LFedotova 04.01.2018 23:21:29 -  вопрос S-B-0000247
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.EMail, "EMail");
	// } RGS LFedotova 04.01.2018 23:21:41 -  вопрос S-B-0000247
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПервичнаяДокументация", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.ПервичнаяДокументация);
	ЗначенияДляПолучения.Вставить("СчетФактура", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактура);
	ЗначенияДляПолучения.Вставить("СчетФактураПервичнаяДокументация", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументация);
	ЗначенияДляПолучения.Вставить("СчетФактураПервичнаяДокументацияЧеклист", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.СчетФактураПервичнаяДокументацияЧеклист);
	ЗначенияДляПолучения.Вставить("ЧЕКЛИСТ", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.ЧЕКЛИСТ);
	// { RGS LFedotova 04.01.2018 23:23:10 - вопрос S-B-0000247
	ЗначенияДляПолучения.Вставить("EMail", Перечисления.ВидыПрисоединенныхДокументовРеализацийТоваровУслуг.EMail);
	// } RGS LFedotova 04.01.2018 23:23:23 - вопрос S-B-0000247
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыПрочихДоходовИРасходов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыПрочихДоходовИРасходов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПрочихДоходовИРасходов;
	ПравилоКонвертации.ТипXDTO = "ВидыПрочихДоходовИРасходов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате, "ВозмещениеУбытковКПолучениюУплате");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях, "ДолевоеУчастиеВИностранныхОрганизациях");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях, "ДолевоеУчастиеВРоссийскихОрганизациях");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы, "КурсовыеРазницы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности, "НДСПоСписаннойКредиторскойЗадолженности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы, "ОтчисленияВОценочныеРезервы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю, "ПремияПокупателю");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, "ПрибыльУбытокПрошлыхЛет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, "ПроцентыКПолучениюУплате");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, "ПроцентыНачисленныеПоСт269");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам, "ПроцентыПоГосударственнымЦеннымБумагам");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0, "ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы, "ПрочиеВнереализационныеДоходыРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, "ПрочиеОперационныеДоходыРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам, "РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков, "РасходыНаУслугиБанков");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов, "РасходыОтСниженияСтоимостиАктивов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, "СписаниеДебиторскойКредиторскойЗадолженности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, "ШтрафыПениНеустойкиКПолучениюУплате");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозмещениеУбытковКПолучениюУплате", Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ЗначенияДляПолучения.Вставить("ДолевоеУчастиеВИностранныхОрганизациях", Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ЗначенияДляПолучения.Вставить("ДолевоеУчастиеВРоссийскихОрганизациях", Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ЗначенияДляПолучения.Вставить("КурсовыеРазницы", Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ЗначенияДляПолучения.Вставить("НДСПоСписаннойКредиторскойЗадолженности", Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	ЗначенияДляПолучения.Вставить("ОтчисленияВОценочныеРезервы", Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ЗначенияДляПолучения.Вставить("ПремияПокупателю", Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	ЗначенияДляПолучения.Вставить("ПрибыльУбытокПрошлыхЛет", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначенияДляПолучения.Вставить("ПроцентыКПолучениюУплате", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ЗначенияДляПолучения.Вставить("ПроцентыНачисленныеПоСт269", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	ЗначенияДляПолучения.Вставить("ПроцентыПоГосударственнымЦеннымБумагам", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ЗначенияДляПолучения.Вставить("ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	ЗначенияДляПолучения.Вставить("ПрочиеВнереализационныеДоходыРасходы", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ЗначенияДляПолучения.Вставить("ПрочиеОперационныеДоходыРасходы", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначенияДляПолучения.Вставить("РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам", Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ЗначенияДляПолучения.Вставить("РасходыНаУслугиБанков", Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	ЗначенияДляПолучения.Вставить("РасходыОтСниженияСтоимостиАктивов", Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	ЗначенияДляПолучения.Вставить("СписаниеДебиторскойКредиторскойЗадолженности", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ЗначенияДляПолучения.Вставить("ШтрафыПениНеустойкиКПолучениюУплате", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыРасходовНУ.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыРасходовНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыРасходовНУ;
	ПравилоКонвертации.ТипXDTO = "ВидыРасходовНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.Амортизация, "Амортизация");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.АрендаФедеральногоИМуниципальногоИмущества, "АрендаФедеральногоИМуниципальногоИмущества");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, "ДобровольноеЛичноеСтрахование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности, "ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, "ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.КомандировочныеРасходы, "КомандировочныеРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.МатериальныеРасходы, "МатериальныеРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.НалогиИСборы, "НалогиИСборы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, "НеУчитываемыеВЦеляхНалогообложения");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.НИОКР, "НИОКР");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ОбязательноеИДобровольноеСтрахованиеИмущества, "ОбязательноеИДобровольноеСтрахованиеИмущества");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ОплатаТруда, "ОплатаТруда");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ОсвоениеПриродныхРесурсов, "ОсвоениеПриродныхРесурсов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы, "ПредставительскиеРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ПрочиеРасходы, "ПрочиеРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые, "РасходыНаРекламуНормируемые");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств, "РемонтОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, "ТранспортныеРасходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Амортизация", Перечисления.ВидыРасходовНУ.Амортизация);
	ЗначенияДляПолучения.Вставить("АрендаФедеральногоИМуниципальногоИмущества", Перечисления.ВидыРасходовНУ.АрендаФедеральногоИМуниципальногоИмущества);
	ЗначенияДляПолучения.Вставить("ДобровольноеЛичноеСтрахование", Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	ЗначенияДляПолучения.Вставить("ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности", Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	ЗначенияДляПолучения.Вставить("ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников", Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	ЗначенияДляПолучения.Вставить("КомандировочныеРасходы", Перечисления.ВидыРасходовНУ.КомандировочныеРасходы);
	ЗначенияДляПолучения.Вставить("МатериальныеРасходы", Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	ЗначенияДляПолучения.Вставить("НалогиИСборы", Перечисления.ВидыРасходовНУ.НалогиИСборы);
	ЗначенияДляПолучения.Вставить("НеУчитываемыеВЦеляхНалогообложения", Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	ЗначенияДляПолучения.Вставить("НИОКР", Перечисления.ВидыРасходовНУ.НИОКР);
	ЗначенияДляПолучения.Вставить("ОбязательноеИДобровольноеСтрахованиеИмущества", Перечисления.ВидыРасходовНУ.ОбязательноеИДобровольноеСтрахованиеИмущества);
	ЗначенияДляПолучения.Вставить("ОплатаТруда", Перечисления.ВидыРасходовНУ.ОплатаТруда);
	ЗначенияДляПолучения.Вставить("ОсвоениеПриродныхРесурсов", Перечисления.ВидыРасходовНУ.ОсвоениеПриродныхРесурсов);
	ЗначенияДляПолучения.Вставить("ПредставительскиеРасходы", Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходы", Перечисления.ВидыРасходовНУ.ПрочиеРасходы);
	ЗначенияДляПолучения.Вставить("РасходыНаРекламуНормируемые", Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	ЗначенияДляПолучения.Вставить("РемонтОсновныхСредств", Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств);
	ЗначенияДляПолучения.Вставить("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСкладов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСкладов;
	ПравилоКонвертации.ТипXDTO = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Оптовый, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Розничный, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ВидыСкладов.Оптовый);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ВидыСкладов.Розничный);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСчетаФактуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыСчетаФактуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
	ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент, "НалоговыйАгент");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "НаСуммовуюРазницу");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Перевыставление, "Перевыставление");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ЗначенияДляПолучения.Вставить("НаСуммовуюРазницу", Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	ЗначенияДляПолучения.Вставить("Перевыставление", Перечисления.ВидСчетаФактурыВыставленного.Перевыставление);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыЭД.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыЭД";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
	ПравилоКонвертации.ТипXDTO = "ВидыЭД";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктВыполненныхРабот, "АктВыполненныхРабот");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктЗаказчик, "АктЗаказчик");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктИсполнитель, "АктИсполнитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав, "АктНаПередачуПрав");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями, "ВозвратТоваровМеждуОрганизациями");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ВыпискаБанка, "ВыпискаБанка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ДопДанные, "ДопДанные");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗаказТовара, "ЗаказТовара");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗапросВыписки, "ЗапросВыписки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗапросЗонд, "ЗапросЗонд");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗапросНаОтзывЭД, "ЗапросНаОтзывЭД");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗапросНочнойВыписки, "ЗапросНочнойВыписки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ЗапросОСостоянииЭД, "ЗапросОСостоянииЭД");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ИзвещениеОПолучении, "ИзвещениеОПолучении");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД, "ИзвещениеОСостоянииЭД");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.КаталогТоваров, "КаталогТоваров");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.Квитанция, "Квитанция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "КорректировочныйСчетФактура");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ, "ОтветНаЗаказ");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, "ОтчетОПродажахКомиссионногоТовара");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, "ОтчетОСписанииКомиссионногоТовара");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.Ошибка, "Ошибка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями, "ПередачаТоваровМеждуОрганизациями");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПлатежноеПоручение, "ПлатежноеПоручение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПлатежноеТребование, "ПлатежноеТребование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.Подтверждение, "Подтверждение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПрайсЛист, "ПрайсЛист");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПредложениеОбАннулировании, "ПредложениеОбАннулировании");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ПроизвольныйЭД, "ПроизвольныйЭД");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, "СоглашениеОбИзмененииСтоимостиОтправитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель, "СоглашениеОбИзмененииСтоимостиПолучатель");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.СчетНаОплату, "СчетНаОплату");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.СчетФактура, "СчетФактура");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12, "ТОРГ12");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12Покупатель, "ТОРГ12Покупатель");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ12Продавец");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.УведомлениеОбУточнении, "УведомлениеОбУточнении");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АктВыполненныхРабот", Перечисления.ВидыЭД.АктВыполненныхРабот);
	ЗначенияДляПолучения.Вставить("АктЗаказчик", Перечисления.ВидыЭД.АктЗаказчик);
	ЗначенияДляПолучения.Вставить("АктИсполнитель", Перечисления.ВидыЭД.АктИсполнитель);
	ЗначенияДляПолучения.Вставить("АктНаПередачуПрав", Перечисления.ВидыЭД.АктНаПередачуПрав);
	ЗначенияДляПолучения.Вставить("ВозвратТоваровМеждуОрганизациями", Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ЗначенияДляПолучения.Вставить("ВыпискаБанка", Перечисления.ВидыЭД.ВыпискаБанка);
	ЗначенияДляПолучения.Вставить("ДопДанные", Перечисления.ВидыЭД.ДопДанные);
	ЗначенияДляПолучения.Вставить("ЗаказТовара", Перечисления.ВидыЭД.ЗаказТовара);
	ЗначенияДляПолучения.Вставить("ЗапросВыписки", Перечисления.ВидыЭД.ЗапросВыписки);
	ЗначенияДляПолучения.Вставить("ЗапросЗонд", Перечисления.ВидыЭД.ЗапросЗонд);
	ЗначенияДляПолучения.Вставить("ЗапросНаОтзывЭД", Перечисления.ВидыЭД.ЗапросНаОтзывЭД);
	ЗначенияДляПолучения.Вставить("ЗапросНочнойВыписки", Перечисления.ВидыЭД.ЗапросНочнойВыписки);
	ЗначенияДляПолучения.Вставить("ЗапросОСостоянииЭД", Перечисления.ВидыЭД.ЗапросОСостоянииЭД);
	ЗначенияДляПолучения.Вставить("ИзвещениеОПолучении", Перечисления.ВидыЭД.ИзвещениеОПолучении);
	ЗначенияДляПолучения.Вставить("ИзвещениеОСостоянииЭД", Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД);
	ЗначенияДляПолучения.Вставить("КаталогТоваров", Перечисления.ВидыЭД.КаталогТоваров);
	ЗначенияДляПолучения.Вставить("Квитанция", Перечисления.ВидыЭД.Квитанция);
	ЗначенияДляПолучения.Вставить("КорректировочныйСчетФактура", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	ЗначенияДляПолучения.Вставить("ОтветНаЗаказ", Перечисления.ВидыЭД.ОтветНаЗаказ);
	ЗначенияДляПолучения.Вставить("ОтчетОПродажахКомиссионногоТовара", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ЗначенияДляПолучения.Вставить("ОтчетОСписанииКомиссионногоТовара", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ЗначенияДляПолучения.Вставить("Ошибка", Перечисления.ВидыЭД.Ошибка);
	ЗначенияДляПолучения.Вставить("ПередачаТоваровМеждуОрганизациями", Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ЗначенияДляПолучения.Вставить("ПлатежноеПоручение", Перечисления.ВидыЭД.ПлатежноеПоручение);
	ЗначенияДляПолучения.Вставить("ПлатежноеТребование", Перечисления.ВидыЭД.ПлатежноеТребование);
	ЗначенияДляПолучения.Вставить("Подтверждение", Перечисления.ВидыЭД.Подтверждение);
	ЗначенияДляПолучения.Вставить("ПрайсЛист", Перечисления.ВидыЭД.ПрайсЛист);
	ЗначенияДляПолучения.Вставить("ПредложениеОбАннулировании", Перечисления.ВидыЭД.ПредложениеОбАннулировании);
	ЗначенияДляПолучения.Вставить("ПроизвольныйЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
	ЗначенияДляПолучения.Вставить("СоглашениеОбИзмененииСтоимостиОтправитель", Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	ЗначенияДляПолучения.Вставить("СоглашениеОбИзмененииСтоимостиПолучатель", Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ЗначенияДляПолучения.Вставить("СчетНаОплату", Перечисления.ВидыЭД.СчетНаОплату);
	ЗначенияДляПолучения.Вставить("СчетФактура", Перечисления.ВидыЭД.СчетФактура);
	ЗначенияДляПолучения.Вставить("ТОРГ12", Перечисления.ВидыЭД.ТОРГ12);
	ЗначенияДляПолучения.Вставить("ТОРГ12Покупатель", Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ЗначенияДляПолучения.Вставить("ТОРГ12Продавец", Перечисления.ВидыЭД.ТОРГ12Продавец);
	ЗначенияДляПолучения.Вставить("УведомлениеОбУточнении", Перечисления.ВидыЭД.УведомлениеОбУточнении);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ОтветственныеЛицаОрганизаций.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ОтветственныеЛицаОрганизаций";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ТипXDTO = "ОтветственныеЛицаОрганизаций";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, "ГлавныйБухгалтер");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель, "Исполнитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Кассир, "Кассир");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры, "ОтветственныйЗаНалоговыеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, "Руководитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы, "РуководительКадровойСлужбы");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель, "УполномоченныйПредставитель");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ЗначенияДляПолучения.Вставить("Исполнитель", Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
	ЗначенияДляПолучения.Вставить("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаНалоговыеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры);
	ЗначенияДляПолучения.Вставить("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ЗначенияДляПолучения.Вставить("РуководительКадровойСлужбы", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
	ЗначенияДляПолучения.Вставить("УполномоченныйПредставитель", Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ОтнесениеРасходовКДеятельностиЕНВД.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ОтнесениеРасходовКДеятельностиЕНВД";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтнесениеРасходовКДеятельностиЕНВД;
	ПравилоКонвертации.ТипXDTO = "ОтнесениеРасходовКДеятельностиЕНВД";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД, "РасходыОтносятсяКЕНВД");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД, "РасходыОтносятсяКнеЕНВД");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются, "РасходыРаспределяются");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("РасходыОтносятсяКЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	ЗначенияДляПолучения.Вставить("РасходыОтносятсяКнеЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД);
	ЗначенияДляПолучения.Вставить("РасходыРаспределяются", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_Leg7LegalEntityDetermining.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_Leg7LegalEntityDetermining";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.Leg7LegalEntityDetermining;
	ПравилоКонвертации.ТипXDTO = "Leg7LegalEntityDetermining";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.Leg7LegalEntityDetermining.DefaultLegalEntity, "DefaultLegalEntity");
	ЗначенияДляОтправки.Вставить(Перечисления.Leg7LegalEntityDetermining.FiscalRegistration, "FiscalRegistration");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("DefaultLegalEntity", Перечисления.Leg7LegalEntityDetermining.DefaultLegalEntity);
	ЗначенияДляПолучения.Вставить("FiscalRegistration", Перечисления.Leg7LegalEntityDetermining.FiscalRegistration);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_ПолФизическогоЛица.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядкиОкругления.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПорядкиОкругления";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядкиОкругления;
	ПравилоКонвертации.ТипXDTO = "ПорядкиОкругления";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр0_01, "Окр0_01");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр0_05, "Окр0_05");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр0_1, "Окр0_1");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр0_5, "Окр0_5");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр1, "Окр1");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр10, "Окр10");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр100, "Окр100");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр5, "Окр5");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругления.Окр50, "Окр50");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Окр0_01", Перечисления.ПорядкиОкругления.Окр0_01);
	ЗначенияДляПолучения.Вставить("Окр0_05", Перечисления.ПорядкиОкругления.Окр0_05);
	ЗначенияДляПолучения.Вставить("Окр0_1", Перечисления.ПорядкиОкругления.Окр0_1);
	ЗначенияДляПолучения.Вставить("Окр0_5", Перечисления.ПорядкиОкругления.Окр0_5);
	ЗначенияДляПолучения.Вставить("Окр1", Перечисления.ПорядкиОкругления.Окр1);
	ЗначенияДляПолучения.Вставить("Окр10", Перечисления.ПорядкиОкругления.Окр10);
	ЗначенияДляПолучения.Вставить("Окр100", Перечисления.ПорядкиОкругления.Окр100);
	ЗначенияДляПолучения.Вставить("Окр5", Перечисления.ПорядкиОкругления.Окр5);
	ЗначенияДляПолучения.Вставить("Окр50", Перечисления.ПорядкиОкругления.Окр50);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыРасчетаКомиссионногоВознаграждения.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СпособыРасчетаКомиссионногоВознаграждения";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтавкиНДС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС12, "НДС12");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС2");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС2_102");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС12", Перечисления.СтавкиНДС.НДС12);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС2", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС2_102", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтатусыИзвлеченияТекстаФайлов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СтатусыИзвлеченияТекстаФайлов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыИзвлеченияТекстаФайлов;
	ПравилоКонвертации.ТипXDTO = "СтатусыИзвлеченияТекстаФайлов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен, "Извлечен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось, "ИзвлечьНеУдалось");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен, "НеИзвлечен");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Извлечен", Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен);
	ЗначенияДляПолучения.Вставить("ИзвлечьНеУдалось", Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось);
	ЗначенияДляПолучения.Вставить("НеИзвлечен", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтатусыУтвержденияОбъектов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СтатусыУтвержденияОбъектов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыУтвержденияОбъектов;
	ПравилоКонвертации.ТипXDTO = "СтатусыУтвержденияОбъектов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыУтвержденияОбъектов.ВПроцессеУтверждения, "ВПроцессеУтверждения");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыУтвержденияОбъектов.Новая, "Новая");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыУтвержденияОбъектов.Отклонена, "Отклонена");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыУтвержденияОбъектов.Отменена, "Отменена");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыУтвержденияОбъектов.Утверждена, "Утверждена");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВПроцессеУтверждения", Перечисления.СтатусыУтвержденияОбъектов.ВПроцессеУтверждения);
	ЗначенияДляПолучения.Вставить("Новая", Перечисления.СтатусыУтвержденияОбъектов.Новая);
	ЗначенияДляПолучения.Вставить("Отклонена", Перечисления.СтатусыУтвержденияОбъектов.Отклонена);
	ЗначенияДляПолучения.Вставить("Отменена", Перечисления.СтатусыУтвержденияОбъектов.Отменена);
	ЗначенияДляПолучения.Вставить("Утверждена", Перечисления.СтатусыУтвержденияОбъектов.Утверждена);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Сторона.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Сторона";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.Сторона;
	ПравилоКонвертации.ТипXDTO = "Сторона";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.Сторона.Контрагент, "Контрагент");
	ЗначенияДляОтправки.Вставить(Перечисления.Сторона.Организация, "Организация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Контрагент", Перечисления.Сторона.Контрагент);
	ЗначенияДляПолучения.Вставить("Организация", Перечисления.Сторона.Организация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыКонтактнойИнформации.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ТипыКонтактнойИнформации";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO = "ТипыКонтактнойИнформации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, "Skype");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "Адрес");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "ВебСтраница");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "Другое");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, "Факс");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Skype", Перечисления.ТипыКонтактнойИнформации.Skype);
	ЗначенияДляПолучения.Вставить("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ЗначенияДляПолучения.Вставить("ВебСтраница", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ЗначенияДляПолучения.Вставить("Другое", Перечисления.ТипыКонтактнойИнформации.Другое);
	ЗначенияДляПолучения.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ЗначенияДляПолучения.Вставить("Факс", Перечисления.ТипыКонтактнойИнформации.Факс);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыТикетов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ТипыТикетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыТикетов;
	ПравилоКонвертации.ТипXDTO = "ТипыТикетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТикетов.Инвойс, "Инвойс");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТикетов.КредитНота, "КредитНота");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Инвойс", Перечисления.ТипыТикетов.Инвойс);
	ЗначенияДляПолучения.Вставить("КредитНота", Перечисления.ТипыТикетов.КредитНота);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыХраненияФайлов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ТипыХраненияФайлов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыХраненияФайлов;
	ПравилоКонвертации.ТипXDTO = "ТипыХраненияФайлов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе, "ВИнформационнойБазе");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыХраненияФайлов.ВТомахНаДиске, "ВТомахНаДиске");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВИнформационнойБазе", Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);
	ЗначенияДляПолучения.Вставить("ВТомахНаДиске", Перечисления.ТипыХраненияФайлов.ВТомахНаДиске);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮрЛицоНеРезидент, "ЮрЛицоНеРезидент");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИндивидуальныйПредприниматель", Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮрЛицоНеРезидент", Перечисления.ЮридическоеФизическоеЛицо.ЮрЛицоНеРезидент);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДополнительныеСвойства,ВидРегистра,ИмяРегистра,КомпонентыОбмена)
	массивСтрок = ПолучитьМассивСтрокРегистраИЗОбъектаXDTO(ДанныеXDTO,ВидРегистра,ИмяРегистра,КомпонентыОбмена);
		
		Если массивСтрок.Количество() > 0 Тогда 
			ДополнительныеСвойства.Вставить(ИмяРегистра, массивСтрок);
		КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДанныеРСДокументаКЗаписи(СсылкаНаДокумент,Записи,ИмяРегистра,ИмяРеквизита,КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДанныеДокументовПоРС") Тогда
		нвСтрока =  КомпонентыОбмена.ПараметрыКонвертации.ДанныеДокументовПоРС.Добавить();
		нвСтрока.СсылкаНаДокумент = СсылкаНаДокумент;
		нвСтрока.ИмяРегистра = ИмяРегистра;
		нвСтрока.ИмяРеквизита = ИмяРеквизита;
		нвСтрока.Движения = Записи;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДвиженияДокументаКПроведению(СсылкаНаДокумент,Движения,ИмяРегистра,КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДвиженияДокументовПоРегистрам") Тогда
		нвСтрока =  КомпонентыОбмена.ПараметрыКонвертации.ДвиженияДокументовПоРегистрам.Добавить();
		нвСтрока.СсылкаНаДокумент = СсылкаНаДокумент;
		нвСтрока.ИмяРегистра = ИмяРегистра;
		нвСтрока.Движения = Движения;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДокументКОтменеПроведения(КомпонентыОбмена,СсылкаНаДокумент)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("МассивДокументовКОтменеПроведения") Тогда
		КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКОтменеПроведения.Добавить(СсылкаНаДокумент);
	КОнецЕсли;
КонецПроцедуры
Процедура ДобавитьДокументКПометкеПроведен(КомпонентыОбмена,СсылкаНаДокумент)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("МассивДокументовКУстановкеПроведения") Тогда
		КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКУстановкеПроведения.Добавить(СсылкаНаДокумент);
	КОнецЕсли;
КонецПроцедуры
Процедура ДобавитьДокументКПометкеУдаления(КомпонентыОбмена,СсылкаНаДокумент)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("МассивДокументовКПометкеУдаления") Тогда
		КомпонентыОбмена.ПараметрыКонвертации.МассивДокументовКПометкеУдаления.Добавить(СсылкаНаДокумент);
	КОнецЕсли;
КонецПроцедуры
Процедура ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,ИмяРегистра,КомпонентыОбмена)
	Если ДопСвойства.Свойство(ИмяРегистра) Тогда
		
		ДобавитьДвиженияДокументаКПроведению(СсылкаНаДокумент,ДопСвойства[ИмяРегистра],ИмяРегистра,КомпонентыОбмена);
	
	КонецЕсли;
КонецПроцедуры
Процедура ДопСвойстваПоРегиструСведенийВДвиженияДляЗаписи(СсылкаНаДокумент,ИмяРегистра,ИмяРеквизита,ДопСвойства,КомпонентыОбмена)
	Если ДопСвойства.Свойство(ИмяРегистра) Тогда
			ДобавитьДанныеРСДокументаКЗаписи(СсылкаНаДокумент, ДопСвойства[ИмяРегистра],ИмяРегистра,ИмяРеквизита,КомпонентыОбмена);
		КонецЕсли;
КонецПроцедуры
Процедура ЗаписатьДанныеРС(СсылкаНаДокумент,Записи,ИмяРегистра,ИмяРеквизита)
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяРеквизита].Установить(СсылкаНаДокумент);
		
		Для Каждого текСтрока ИЗ  Записи Цикл
			нвСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(нвСтрока,текСтрока);
		КОнецЦикла;
		
		НаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗаписатьДвиженияДокументаПоРегистру(СсылкаНаДокумент,Движения,ИмяРегистра)
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
		
		Для Каждого текСтрока ИЗ  Движения Цикл
			нвСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(нвСтрока,текСтрока);
		КОнецЦикла;
		
		НаборЗаписей.Записать();
КонецПроцедуры
Процедура ОбработатьВыгрузкуДанныхРегистровДокумента(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена)
	ДанныеXDTO.Вставить("ДокументПроведен",ДанныеИБ.Проведен);
	
	ДанныеXDTO.Вставить("СтатусыУтвержденияКорректировок", ПолучитьДанныеXDTOИзРС(ДанныеИБ.Ссылка,"СтатусыУтвержденияКорректировок","КредитНота",КомпонентыОбмена));
	
	Если ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ДанныеXDTO.Вставить("ВзаиморасчетыСПокупателями", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"ВзаиморасчетыСПокупателями",КомпонентыОбмена));
		ДанныеXDTO.Вставить("ПродажиВыручка_SB", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"ПродажиВыручка_SB",КомпонентыОбмена));
		ДанныеXDTO.Вставить("Тикеты", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"Тикеты",КомпонентыОбмена));
		
		ДанныеXDTO.Вставить("НомераИнвойсовLawson", ПолучитьДанныеXDTOИзРС(ДанныеИБ.Ссылка,"НомераИнвойсовLawson","Документ",КомпонентыОбмена));
	
	
	
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		ДанныеXDTO.Вставить("ВзаиморасчетыСПокупателями", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"ВзаиморасчетыСПокупателями",КомпонентыОбмена));
		
		ДанныеXDTO.Вставить("НомераИнвойсовLawson", ПолучитьДанныеXDTOИзРС(ДанныеИБ.Ссылка,"НомераИнвойсовLawson","Документ",КомпонентыОбмена));
	
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.Tickets") Тогда
		
		ДанныеXDTO.Вставить("Тикеты", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"Тикеты",КомпонентыОбмена));
		
		ДанныеXDTO.Вставить("НомераИнвойсовLawson", ПолучитьДанныеXDTOИзРС(ДанныеИБ.Ссылка,"НомераИнвойсовLawson","Документ",КомпонентыОбмена));
	
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		
		ДанныеXDTO.Вставить("ВзаиморасчетыСПокупателями", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"ВзаиморасчетыСПокупателями",КомпонентыОбмена));
		ДанныеXDTO.Вставить("СчетаНаПредоплату", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"СчетаНаПредоплату",КомпонентыОбмена));
		
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		ДанныеXDTO.Вставить("ВзаиморасчетыСПокупателями", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"ВзаиморасчетыСПокупателями",КомпонентыОбмена));
	
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ДанныеXDTO.Вставить("СчетаНаПредоплату", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"СчетаНаПредоплату",КомпонентыОбмена));
		
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ЗакрытиеСчетовНаПредоплату") Тогда
		
		ДанныеXDTO.Вставить("ВзаиморасчетыСПокупателями", ПолучитьДанныеXDTOИзДвиженийДокумента(ДанныеИБ.Ссылка,"СчетаНаПредоплату",КомпонентыОбмена));
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьДанныеРегистровДокументаИзXDTO(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена)
	ДопСвойства = ПолученныеДанные.ДополнительныеСвойства;
	
	Если ДанныеXDTO.Свойство("ДокументПроведен") Тогда  
		ДопСвойства.Вставить("ДокументПроведен", ДанныеXDTO.ДокументПроведен);
	Иначе
		ДопСвойства.Вставить("ДокументПроведен", Ложь);
	КонецЕсли;
	
	ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрСведений","СтатусыУтвержденияКорректировок",КомпонентыОбмена);
	
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","ВзаиморасчетыСПокупателями",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","ПродажиВыручка_SB",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","Тикеты",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрСведений","НомераИнвойсовLawson",КомпонентыОбмена);
		
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","ВзаиморасчетыСПокупателями",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрСведений","НомераИнвойсовLawson",КомпонентыОбмена);
		
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.Tickets") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","Тикеты",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрСведений","НомераИнвойсовLawson",КомпонентыОбмена);
		
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","ВзаиморасчетыСПокупателями",КомпонентыОбмена);
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","СчетаНаПредоплату",КомпонентыОбмена);
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","ВзаиморасчетыСПокупателями",КомпонентыОбмена);
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","СчетаНаПредоплату",КомпонентыОбмена);
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ЗакрытиеСчетовНаПредоплату") Тогда
		ДобавитьДанныеРегистраXDTOВДополнительныеСвойства(ДанныеXDTO,ДопСвойства,"РегистрНакопления","СчетаНаПредоплату",КомпонентыОбмена);
	
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьДанныеXDTOИзДвиженийДокумента(СсылкаНаДокумент,ИмяРегистра,КомпонентыОбмена)
	табДанных = ПолучитьДвиженияДокументаПоРН(СсылкаНаДокумент,ИмяРегистра);
		табРезультата = ПолучитьТаблицуРегистраСКолонкамиБезТипов(ИмяРегистра,Ложь);
		
		
		Для Каждого текСтрока ИЗ табДанных Цикл
			нвСтрока = табРезультата.Добавить();
			Для Каждого текКолонка ИЗ табРезультата.Колонки Цикл
	
				ИмяКолонки = текКолонка.Имя;
	
				Если НЕ ЗначениеЗАполнено(текСтрока[ИмяКолонки]) Тогда
					Продолжить;
				КонецЕсли;
	
				стекВыгрузки = Новый Массив;
				стекВыгрузки.Добавить(1);
	
	
				
				сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока[ИмяКолонки]);
				Если ИмяКолонки = "ВидДвижения" Тогда
					ЗначениеСвойства = Строка(текСтрока[ИмяКолонки]);		
				ИначеЕсли  ТипЗнч(сткДанных) = Тип("Структура")Тогда
					ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(сткДанных.ИмяПКО, "ИмяПКПД");
					Если ПКПД <> Неопределено Тогда
						ЗначениеСвойства = ПКПД.КонвертацииЗначенийПриОтправке.Получить(сткДанных.Значение);
					Иначе
						ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
						ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,стекВыгрузки);
					КонецЕсли;
				Иначе  
					ЗначениеСвойства = текСтрока[ИмяКолонки];		
				КонецЕсли;
				
				нвСтрока[ИмяКолонки] = ЗначениеСвойства;			
			
			КОнецЦикла;
		КонецЦикла;
		
	
		Возврат табРезультата;
КонецФункции
Функция ПолучитьДанныеXDTOИзРС(СсылкаНаДокумент,ИмяРегистра,ИмяРеквизита,КомпонентыОбмена)
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяРеквизита].Установить(СсылкаНаДокумент);
		НаборЗаписей.Прочитать();
		
		табДанных =  НаборЗаписей.Выгрузить();
	
		табРезультата = ПолучитьТаблицуРегистраСКолонкамиБезТипов(ИмяРегистра,"РегистрСведений");
		
		
		Для Каждого текСтрока ИЗ табДанных Цикл
			нвСтрока = табРезультата.Добавить();
			Для Каждого текКолонка ИЗ табРезультата.Колонки Цикл
	
				ИмяКолонки = текКолонка.Имя;
	
				Если НЕ ЗначениеЗАполнено(текСтрока[ИмяКолонки]) Тогда
					Продолжить;
				КонецЕсли;
	
				стекВыгрузки = Новый Массив;
				стекВыгрузки.Добавить(1);
	
	
				сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(текСтрока[ИмяКолонки]);
				
				Если ИмяКолонки = "ВидДвижения" Тогда
					ЗначениеСвойства = Строка(текСтрока[ИмяКолонки]);		
				ИначеЕсли  ТипЗнч(сткДанных) = Тип("Структура")Тогда
					ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(сткДанных.ИмяПКО, "ИмяПКПД");
					Если ПКПД <> Неопределено Тогда
						ЗначениеСвойства = ПКПД.КонвертацииЗначенийПриОтправке.Получить(сткДанных.Значение);
					Иначе
						ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
						ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,стекВыгрузки);
					КонецЕсли;
				Иначе  
					ЗначениеСвойства = текСтрока[ИмяКолонки];		
				КонецЕсли;
				
				нвСтрока[ИмяКолонки] = ЗначениеСвойства;			
			
			КОнецЦикла;
		КонецЦикла;
		Возврат табРезультата;
КонецФункции
Функция ПолучитьДвиженияДокументаПоРН(СсылкаНаДокумент,ИмяРегистра)
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
		НаборЗаписей.Прочитать();
		
		Возврат НаборЗаписей.Выгрузить();
КонецФункции
Функция ПолучитьМассивСтрокРегистраИЗОбъектаXDTO(ДанныеXDTO,ВидРегистра,ИмяРегистра,КомпонентыОбмена)
	табДанных = ПолучитьТаблицуРегистраСКолонкамиБезТипов(ИмяРегистра,ВидРегистра);                               
	                                                                                                       
	МассивСтрок = Новый Массив;
	Если ДанныеXDTO.Свойство(ИмяРегистра) И ЗначениеЗаполнено(ДанныеXDTO[ИмяРегистра]) Тогда   
		Для Каждого Строка Из ДанныеXDTO[ИмяРегистра] Цикл 
			СтруктураДанныхСтроки = Новый Структура; 
		   	Для Каждого текКолонка ИЗ табДанных.Колонки Цикл
				
				Если текКолонка.Имя = "ВидДвижения" И ВидРегистра = "РегистрНакопления" Тогда
					СтруктураДанныхСтроки.Вставить(текКолонка.Имя, ВидДвиженияНакопления[Строка[текКолонка.Имя]]); 
				Иначе
			   		сткДанных = ПолучитьСтруктуруЗагрузкиСоставногоТипа(Строка[текКолонка.Имя]);
					текСсылка = ПолучитьСсылкуИзСтруктурыЗагрузки(сткДанных,КомпонентыОбмена); 
					СтруктураДанныхСтроки.Вставить(текКолонка.Имя, текСсылка); 
		   	    КонецЕсли;
		   	КонецЦикла;             
	
			МассивСтрок.Добавить(СтруктураДанныхСтроки);     
		КонецЦикла;
	КонецЕсли;  
	
	Возврат МассивСтрок;
КонецФункции
Функция ПолучитьСсылкуИзСтруктурыЗагрузки(Данные,КомпонентыОбмена)
	текСсылка = "";	  
		                                      
		Если типЗнч(Данные) = Тип("Структура") И Данные.Свойство("ИмяПКО") Тогда
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(Данные.ИмяПКО, "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				текСсылка = ПКПД.КонвертацииЗначенийПриПолучении.Получить(Данные.Значение);
			Иначе
				ПКОСвойство = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,Данные.ИмяПКО);
				текСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,Данные.Значение, ПКОСвойство,"ПолучитьСсылку");
				текСсылка = текСсылка.Ссылка;
			КонецЕсли;
		Иначе
			текСсылка = Данные;
		КонецЕсли;
		
		Возврат текСсылка;
КонецФункции
Функция ПолучитьСтруктуруXDTOизСсылки(Ссылка,КомпонентыОбмена)
	стекВыгрузки = Новый Массив;
		стекВыгрузки.Добавить(1);
	
	
		сткДанных = ПолучитьСтруктуруВыгрузкиСоставногоТипа(Ссылка);
	
		Если  ТипЗнч(сткДанных) = Тип("Структура")Тогда
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(сткДанных.ИмяПКО, "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				ЗначениеСвойства = ПКПД.КонвертацииЗначенийПриОтправке.Получить(сткДанных.Значение);
			Иначе
				ПравилоКонвертации= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,сткДанных.ИмяПКО);	
				ЗначениеСвойства = ОбменДаннымиXDTOСервер.ДанныеXDTOИзДанныхИБ(КомпонентыОбмена,сткДанных.Значение,ПравилоКонвертации,стекВыгрузки);
			КонецЕсли;
		Иначе  
			ЗначениеСвойства = Ссылка;		
		КонецЕсли;
	
		Возврат ЗначениеСвойства;
КонецФункции
Функция ПолучитьСтруктуруВыгрузкиСоставногоТипа(СсылкаНаОбъект)
	Если СсылкаНаОБъект = Неопределено Тогда
		Возврат СсылкаНаОБъект;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(СсылкаНаОбъект);
	ИмяПКО = "";
	
	Если ТипСсылки = Тип("СправочникСсылка.Организации") Тогда
	    ИмяПКО = "Справочник_Организации";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
	    ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	    ИмяПКО = "Справочник_Договоры";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ЗаказНаряды") Тогда
		ИмяПКО = "Справочник_ЗаказНаряды";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ИмяПКО = "Справочник_КонтактныеЛица";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.КостЦентры") Тогда
		ИмяПКО = "Справочник_КостЦентры";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИнвойсинговыеЦентры") Тогда
		ИмяПКО = "Справочник_ИнвойсинговыеЦентры";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Если СсылкаНаОбъект.ЭтоГруппа Тогда
			ИмяПКО = "Справочник_ПодразделенияГруппа";
		Иначе
			ИмяПКО = "Справочник_Подразделения";
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Tickets") Тогда
		ИмяПКО = "Документ_Tickets";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗакрытиеСчетовНаПредоплату") Тогда
		ИмяПКО = "Документ_ЗакрытиеСчетовНаПредоплату";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИмяПКО = "Документ_СчетНаОплатуПокупателю";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ИмяПКО = "Документ_КорректировкаДолга";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ИмяПКО = "Документ_ПлатежноеПоручениеВходящее";
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ИмяПКО = "Документ_ПлатежноеПоручениеИсходящее";
		
	ИначеЕсли ТипСсылки = Тип("ПеречислениеСсылка.ТипыТикетов") Тогда
		ИмяПКО = "ТипыТикетов";
		
	ИначеЕсли ТипСсылки = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		ИмяПКО = "СтавкиНДС";
	ИначеЕсли ТипСсылки = Тип("ПеречислениеСсылка.СтатусыУтвержденияОбъектов") Тогда
		ИмяПКО = "СтатусыУтвержденияОбъектов";
	ИначеЕсли ТипСсылки = Тип("Строка") Тогда
	    ИмяПКО = "";
	ИначеЕсли ТипСсылки = Тип("Число") Тогда
	    ИмяПКО = "";
	ИначеЕсли ТипСсылки = Тип("Дата") Тогда
	    ИмяПКО = "";
	ИначеЕсли ТипСсылки = Тип("Булево") Тогда
	    ИмяПКО = "";
	ИначеЕсли ТипСсылки = Тип("ВидДвиженияНакопления") Тогда
		ИмяПКО = "";
	Иначе
		СообщениеОбмена = "В процедуре ПолучитьСтруктуруВыгрузкиСоставногоТипа не удалось определить тип: "+ТипСсылки;
			ЗаписьЖурналаРегистрации("Обмен данными.СинхронизацияДанныхЧерезФорматБиллинга.Отправка данных",
					УровеньЖурналаРегистрации.Предупреждение,,,СообщениеОбмена);
	КонецЕсли;
	
	Если НЕ ИмяПКО = "" Тогда
		Возврат Новый Структура("Значение, ИмяПКО", СсылкаНаОбъект, ИмяПКО);
	Иначе
		Возврат СсылкаНаОБъект;
	КонецЕсли;
КонецФункции
Функция ПолучитьСтруктуруЗагрузкиСоставногоТипа(СтруктураОбъекта)
	сткРезультата = Новый Структура();
	ИмяПКО = "";
	
	Если НЕ (ТипЗнч(СтруктураОбъекта) = Тип("Структура")) Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ТипЗначения") Тогда	
		ТипЗначения = СтруктураОбъекта.ТипЗначения;
		Если ТипЗначения = "Организация" Тогда
			ИмяПКО = "Справочник_Организации";
		ИначеЕсли ТипЗначения = "Контрагент" Тогда
			ИмяПКО = "Справочник_Контрагенты";
		ИначеЕсли ТипЗначения = "ЗаказНаряды" Тогда
			ИмяПКО = "Справочник_ЗаказНаряды";
		ИначеЕсли ТипЗначения = "Пользователь" Тогда
			ИмяПКО = "Справочник_Пользователи";
		ИначеЕсли ТипЗначения = "КонтактныеЛица" Тогда
			ИмяПКО = "Справочник_КонтактныеЛица";
		ИначеЕсли ТипЗначения = "ФизическиеЛица" Тогда
			ИмяПКО = "Справочник_ФизическиеЛица";
		ИначеЕсли ТипЗначения = "ФизическоеЛицо" Тогда
			ИмяПКО = "Справочник_ФизическиеЛица";
		ИначеЕсли ТипЗначения = "Договор" Тогда
			ИмяПКО = "Справочник_Договоры";
		ИначеЕсли ТипЗначения = "Валюта" Тогда
			ИмяПКО = "Справочник_Валюты";
		ИначеЕсли ТипЗначения = "ЕдиницаИзмерения" Тогда
			ИмяПКО = "Справочник_ЕдиницыИзмерения";
		ИначеЕсли ТипЗначения = "Номенклатура" Тогда
			ИмяПКО = "Справочник_Номенклатура";
		ИначеЕсли ТипЗначения = "Подразделение" Тогда
			ИмяПКО = "Справочник_Подразделения";
		ИначеЕсли ТипЗначения = "ПодразделенияГруппа" Тогда
			ИмяПКО = "Справочник_ПодразделенияГруппа";
		ИначеЕсли ТипЗначения = "КостЦентры" Тогда
			ИмяПКО = "Справочник_КостЦентры";
		ИначеЕсли ТипЗначения = "ИнвойсинговыеЦентры" Тогда
			ИмяПКО = "Справочник_ИнвойсинговыеЦентры";
		ИначеЕсли ТипЗначения = "РеализацияТоваровУслуг" Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли ТипЗначения = "РеализацияТоваровУслуг" Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли ТипЗначения = "КорректировкаДолга" Тогда
			ИмяПКО = "Документ_КорректировкаДолга";
		ИначеЕсли ТипЗначения = "ПлатежноеПоручениеВходящее" Тогда
			ИмяПКО = "Документ_ПлатежноеПоручениеВходящее";
		ИначеЕсли ТипЗначения = "ПлатежноеПоручениеИсходящее" Тогда
			ИмяПКО = "Документ_ПлатежноеПоручениеИсходящее";
		ИначеЕсли ТипЗначения = "СчетНаОплатуПокупателю" Тогда
			ИмяПКО = "Документ_СчетНаОплатуПокупателю";
		ИначеЕсли ТипЗначения = "Tickets" Тогда
			ИмяПКО = "Документ_Tickets";
		Иначе
			ЗаписьЖурналаРегистрации("Обмен данными.СинхронизацияДанныхЧерезФорматБиллинга.Получение данных",
					УровеньЖурналаРегистрации.Информация,,,"Не определен составной тип. Имя типа: "+ТипЗначения);
		КонецЕсли;		 
		
		сткРезультата.Вставить("Значение",СтруктураОбъекта);
		сткРезультата.Вставить("ИмяПКО",ИмяПКО);
	ИначеЕсли СтруктураОбъекта.Свойство("ТипЗначенияXDTO") Тогда
		Если СтруктураОбъекта.ТипЗначенияXDTO.Имя = "СтавкиНДС" Тогда
			ИмяПКО = "СтавкиНДС";
		ИначеЕсли СтруктураОбъекта.ТипЗначенияXDTO.Имя = "СтатусыУтвержденияОбъектов" Тогда
			ИмяПКО = "СтатусыУтвержденияОбъектов";
		КОнецЕсли;	
		сткРезультата.Вставить("Значение",СтруктураОбъекта.Значение);
		сткРезультата.Вставить("ИмяПКО",ИмяПКО);
	КонецЕсли;
		
	Если НЕ ИмяПКО = "" Тогда
		Возврат сткРезультата;
	Иначе
		Возврат СтруктураОбъекта;
	КонецЕсли;
КонецФункции
Функция ПолучитьСтруктуруКлючевыхСвойств(ОбъектДанных)
	сткРезультата = Новый Структура;
	Если ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.Организации") ИЛИ
		ТипЗнч(ОбъектДанных) = Тип("СправочникОбъект.Организации") ИЛИ 
		
		ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.Контрагенты") ИЛИ
		ТипЗнч(ОбъектДанных) = Тип("СправочникОбъект.Контрагенты") 	Тогда
	
		сткОрганизации = НОвый структура();
	
		сткОрганизации.Вставить("Ссылка",Строка(ОбъектДанных.Ссылка.УникальныйИдентификатор()));
		сткОрганизации.Вставить("НаименованиеСокращенное",ОбъектДанных.НаименованиеСокращенное);
		сткОрганизации.Вставить("НаименованиеПолное",ОбъектДанных.НаименованиеПолное);
		сткОрганизации.Вставить("Наименование",ОбъектДанных.Наименование);
		сткОрганизации.Вставить("ИНН",ОбъектДанных.ИНН);
		сткОрганизации.Вставить("КПП",ОбъектДанных.КПП);
	
		сткОрганизации.Вставить("ЮридическоеФизическоеЛицо",ОбъектДанных.ЮридическоеФизическоеЛицо);
		сткРегистрация = НОвый Структура();
		сткРегистрация.Вставить("Ссылка",Строка(ОбъектДанных.РегистрацияВНалоговомОргане.УникальныйИдентификатор()));
		сткРегистрация.Вставить("ОКАТО",ОбъектДанных.Наименование);
		сткРегистрация.Вставить("Наименование",ОбъектДанных.Наименование);
		сткОрганизации.Вставить("РегистрацияВНалоговомОргане",сткРегистрация);
		
		сткРезультата.Вставить("ОрганизацииСсылка",сткОрганизации);
	
	
	
	КонецЕсли;
	
	Возврат сткРезультата;
КонецФункции
Функция ПолучитьТаблицуРегистраСКолонкамиБезТипов(ИмяРегистра,ВидРегистра)
	Если ВидРегистра= "РегистрСведений" Тогда
		табИсточник = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе
		табИсточник = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	КонецЕСли;
	
		табРезультата = НОвый ТаблицаЗначений;
		Для Каждого текКолонка ИЗ табИсточник.Колонки Цикл
			Если текКолонка.Имя = "НомерСтроки" 
			ИЛИ текКолонка.Имя = "Активность" 
			ИЛИ текКолонка.Имя = "МоментВремени" Тогда
				Продолжить;
			КОнецЕсли;
			табРезультата.Колонки.Добавить(текКолонка.Имя); 
		КОнецЦикла;
		Возврат табРезультата;
КонецФункции
Процедура СохранитьДопСвойстваДокументаДляЗаписиВРегисты(ДанныеИБ,ПолученныеДанные,КомпонентыОбмена)
	СсылкаНаДокумент = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(),ДанныеИБ.Ссылка);
	
	ДопСвойства = ПолученныеДанные.ДополнительныеСвойства;
	
	Если ДопСвойства.СвойстВо("ДокументПроведен") и ДопСвойства.ДокументПроведен Тогда                           
		
		ДобавитьДокументКПометкеПроведен(КомпонентыОбмена,СсылкаНаДокумент);                 
	ИначеЕсли ПолученныеДанные.ПометкаУдаления Тогда
		ДобавитьДокументКПометкеУдаления(КомпонентыОбмена,СсылкаНаДокумент);
	ИначеЕсли НЕ ДанныеИБ = Неопределено И ДанныеИБ.Проведен Тогда
		ДобавитьДокументКОтменеПроведения(КомпонентыОбмена,СсылкаНаДокумент);
	КонецЕсли;
	
	
	ДопСвойстваПоРегиструСведенийВДвиженияДляЗаписи(СсылкаНаДокумент,"СтатусыУтвержденияКорректировок","КредитНота",ДопСвойства,КомпонентыОбмена);   
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"ВзаиморасчетыСПокупателями",КомпонентыОбмена);          
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"ПродажиВыручка_SB",КомпонентыОбмена);          
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"Тикеты",КомпонентыОбмена);          
	
	
		ДопСвойстваПоРегиструСведенийВДвиженияДляЗаписи(СсылкаНаДокумент,"НомераИнвойсовLawson","Документ",ДопСвойства,КомпонентыОбмена);   
		   
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"ВзаиморасчетыСПокупателями",КомпонентыОбмена);          
	
		ДопСвойстваПоРегиструСведенийВДвиженияДляЗаписи(СсылкаНаДокумент,"НомераИнвойсовLawson","Документ",ДопСвойства,КомпонентыОбмена);   
		
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.Tickets") Тогда
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"Тикеты",КомпонентыОбмена);          
	
		ДопСвойстваПоРегиструСведенийВДвиженияДляЗаписи(СсылкаНаДокумент,"НомераИнвойсовLawson","Документ",ДопСвойства,КомпонентыОбмена);   
		   
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"ВзаиморасчетыСПокупателями",КомпонентыОбмена);          
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"СчетаНаПредоплату",КомпонентыОбмена);       
		   
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"ВзаиморасчетыСПокупателями",КомпонентыОбмена);          
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"СчетаНаПредоплату",КомпонентыОбмена);       
	
	ИначеЕсли ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ЗакрытиеСчетовНаПредоплату") Тогда
	
		ДопСвойстваПоРегиструНакопленияВДвиженияДляЗаписи(СсылкаНаДокумент, ДопСвойства,"СчетаНаПредоплату",КомпонентыОбмена);       
	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("МассивДокументовКУстановкеПроведения");
	ПараметрыКонвертации.Вставить("МассивДокументовКОтменеПроведения");
	ПараметрыКонвертации.Вставить("ДвиженияДокументовПоРегистрам");
	ПараметрыКонвертации.Вставить("ДанныеДокументовПоРС");
	ПараметрыКонвертации.Вставить("МассивДокументовКПометкеУдаления");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_ДокументыОстатковНаДату_Отпр_ПриОбработке" Тогда 
		ПОД_ДокументыОстатковНаДату_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_GeoMarkets_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_GeoMarkets_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_TNVEDCodes_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_TNVEDCodes_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Договоры_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Договоры_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КонтрагентыLawson_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_КонтрагентыLawson_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатураИмпорт_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатураИмпорт_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Подразделения_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Подразделения_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПрочиеДоходыИРасходы_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_ПрочиеДоходыИРасходы_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Сегменты_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Сегменты_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиЗатрат_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиЗатрат_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отпр_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отпр_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_SiebelOrders_ПриОтправкеДанных" Тогда 
		ПКО_Документ_SiebelOrders_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_SiebelOrders_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_SiebelOrders_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_SiebelOrders_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_SiebelOrders_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Tickets_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Tickets_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Tickets_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Tickets_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Tickets_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Tickets_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктСверкиВзаиморасчетов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АктСверкиВзаиморасчетов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктСверкиВзаиморасчетов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АктСверкиВзаиморасчетов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктСверкиВзаиморасчетов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АктСверкиВзаиморасчетов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗакрытиеСчетовНаПредоплату_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручениеВходящее_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручениеВходящее_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеВходящее_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручениеВходящее_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручениеИсходящее_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеИсходящее_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручениеИсходящее_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ermTriggerTypes_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ermTriggerTypes_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_PayableCentres_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_PayableCentres_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_PayableCentres_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_PayableCentres_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ProcessLevels_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ProcessLevels_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ProcessLevels_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ProcessLevels_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоверенностиНалогоплательщика_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоверенностиНалогоплательщика_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоверенностиНалогоплательщика_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоверенностиНалогоплательщика_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Договоры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛица_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтактныеЛица_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛица_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КонтактныеЛица_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛица_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КонтактныеЛица_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КостЦентры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КостЦентры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КостЦентры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КостЦентры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КостЦентры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КостЦентры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПодразделенияГруппа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ПодразделенияГруппа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_РеализацияТоваровУслугПрисоединенныеФ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВводОстатковПоВзаиморасчетам_Отпр_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВводОстатковПоВзаиморасчетам_Тикеты_Отпр_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_ДокументыОстатковНаДату_Отпр_ВыборкаДанных" Тогда 
		Возврат ПОД_ДокументыОстатковНаДату_Отпр_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
