////////////////////////////////////////////////////////////////////////////////
// ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	//Обновление рег. Отчетности на бух. Корп 3.0.36.18
	// { RGS MYurkevich 29.01.2015 18:00:31 - Обновление на 3.0.37.38
	//Сообщить("отключено");
	// } RGS MYurkevich 29.01.2015 18:00:31 - Обновление на 3.0.37.38	
	
	//Если КонтролирующийОрган = "ФСС" Тогда
	//	
	//	// регулируем видимость ЭУ отправки ФСС
	//	// и одновременно получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = Неопределено;
	//	ДокументооборотСФССКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
	//	
	//ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
	//	
	//	// регулируем видимость ЭУ отправки ФСРАР
	//	// и одновременно получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = Неопределено;
	//	ДокументооборотСФСРАРКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
	//	
	//ИначеЕсли КонтролирующийОрган = "РПН" Тогда
	//	
	//	// регулируем видимость ЭУ отправки РПН
	//	// и одновременно получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = Неопределено;
	//	ДокументооборотСРПНКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовки);
	//	
	//Иначе
	//	
	//	// убираем видимость меню отправки через сервис спецоператора
	//	СдачаОтчетностиЧерезСервисСпецоператораКлиентСервер.УстановитьВидимостьКнопкиОтправкиЧерезПредставителя(Форма);
	//	
	//	// регулируем видимость ЭУ отправки с использованием встроенного механизма
	//	// и одновременно получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = Неопределено;
	//	ДокументооборотСКОКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган, ПараметрыПрорисовки);
	//	
	//КонецЕсли;
	//
	//// применяем параметры прорисовки
	//ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки);
	//<=	
	
КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган) Экспорт
	
	//Обновление рег. Отчетности на бух. Корп 3.0.36.18
	//Если КонтролирующийОрган = "ФСС" Тогда
	//	
	//	//получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = ДокументооборотСФССКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	//	
	//ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
	//	
	//	//получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = ДокументооборотСФСРАРКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	//	
	//ИначеЕсли КонтролирующийОрган = "РПН" Тогда
	//	
	//	//получаем параметры прорисовки панели отправки
	//	ПараметрыПрорисовки = ДокументооборотСРПНКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	//	
	//Иначе
	//	
	//	ПараметрыПрорисовки = ДокументооборотСКОКлиентСервер.ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма, КонтролирующийОрган);
	//	
	//КонецЕсли;
	//
	//// применяем параметры прорисовки
	//ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки);
	//<=
		
КонецПроцедуры

Процедура ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовки) Экспорт
	
	// Находим панель отправки
	ГруппаПанельОтправки = Форма.Элементы.Найти("ГруппаПанельОтправки");
	Если ГруппаПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Если ПараметрыПрорисовки не удалось определить, скрываем панель
	Если ПараметрыПрорисовки = Неопределено Тогда
		ГруппаПанельОтправки.Видимость = Ложь;
		Возврат;
	Иначе
		ГруппаПанельОтправки.Видимость = Истина;
	КонецЕсли;
	
	// Если нет доступа к контексту ЭДО, то скрываем панель
	Если НЕ ДокументооборотСКОВызовСервера.ЕстьДоступККонтекстуЭДО() Тогда
		ГруппаПанельОтправки.Видимость = Ложь;
		Возврат;
	Иначе
		ГруппаПанельОтправки.Видимость = Истина;
	КонецЕсли;
	
	СостояниеОтправки 			= ПараметрыПрорисовки.ТекущийЭтапОтправки;
	ЕстьНеотправленныеИзвещения = ПараметрыПрорисовки.НеотправленныеИзвещения.ЕстьНеотправленныеИзвещения;
	ЕстьКритическиеОшибки 		= ПараметрыПрорисовки.ЕстьКритическиеОшибки;
	
	СостояниеСдачиОтчетности = СостояниеОтправки.СостояниеСдачиОтчетности;
	
	// Находим блок состояния отправки
	БлокСостоянияОтправки = Форма.Элементы.Найти("БлокСостоянияОтправки");
	Если БлокСостоянияОтправки = Неопределено Тогда
		
		// Поддерживаем старую панель 
		ЭлементФормыНаименованиеЭтапа = Форма.Элементы.Найти("НадписьСостояниеОтправки");
		Если ЭлементФормыНаименованиеЭтапа <> Неопределено Тогда
			ЭлементФормыНаименованиеЭтапа.Заголовок = СостояниеОтправки.ТекстНадписи;
		КонецЕсли;
		
	Иначе
		
		// Находим блок критических ошибок отправки
		БлокКритическихОшибок = Форма.Элементы.Найти("БлокКритическихОшибок");
		Если БлокКритическихОшибок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Находим блок неотправленных извещений
		БлокНеотправленныхИзвещений = Форма.Элементы.Найти("БлокНеотправленныхИзвещений");
		Если БлокНеотправленныхИзвещений = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// Определяем цвет фона
		БлокСостоянияОтправки.ЦветФона = ДокументооборотСКОВызовСервера.ЦветФонаПанелиОтправкиПоСтатусу(СостояниеСдачиОтчетности);
		
		// Наименование протокола
		ЭлементФормыГиперссылкаПротокол = Форма.Элементы.Найти("ГиперссылкаПротокол");
		Если ЭлементФормыГиперссылкаПротокол <> Неопределено Тогда
			Если ЗначениеЗаполнено(СостояниеОтправки.НаименованиеПротокола) Тогда
				ЭлементФормыГиперссылкаПротокол.Видимость = Истина;
				ЭлементФормыГиперссылкаПротокол.Заголовок = СостояниеОтправки.НаименованиеПротокола;
			Иначе
				ЭлементФормыГиперссылкаПротокол.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Наименование текущего этапа
		ЭлементФормыНаименованиеЭтапа = Форма.Элементы.Найти("НаименованиеЭтапа");
		Если ЭлементФормыНаименованиеЭтапа <> Неопределено Тогда
			ЭлементФормыНаименованиеЭтапа.Заголовок = СостояниеОтправки.ТекстНадписи;
		КонецЕсли;
			
		// Этапы отправки
		ЭлементФормыЭтапыОтправки = Форма.Элементы.Найти("ЭтапыОтправки");
		Если ЭлементФормыЭтапыОтправки <> Неопределено Тогда
			ЭлементФормыЭтапыОтправки.Видимость = 
				СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат");
		Конецесли;
		
		// Комментарий к этапу
		ЭлементФормыКомментарийЭтапа = Форма.Элементы.Найти("КомментарийЭтапа");
		Если ЭлементФормыКомментарийЭтапа <> Неопределено Тогда
			
			КомментарийКСостоянию = СостояниеОтправки.КомментарийКСостоянию;
			
			Если ЗначениеЗаполнено(КомментарийКСостоянию) Тогда
				
				ЭлементФормыКомментарийЭтапа.Заголовок 					= КомментарийКСостоянию;
				ЭлементФормыКомментарийЭтапа.Видимость 					= Истина;
				ЭлементФормыКомментарийЭтапа.РастягиватьПоГоризонтали 	= Истина;
				Если Форма.Элементы.Найти("ОтступПередКнопкойОбновитьОтправку") <> Неопределено Тогда 
					Форма.Элементы.ОтступПередКнопкойОбновитьОтправку.Видимость = Ложь;
				КонецЕсли;
				
			Иначе
				
				ЭлементФормыКомментарийЭтапа.Видимость = Ложь;
				ЭлементФормыКомментарийЭтапа.РастягиватьПоГоризонтали = Ложь;
				Если Форма.Элементы.Найти("ОтступПередКнопкойОбновитьОтправку") <> Неопределено Тогда 
					Форма.Элементы.ОтступПередКнопкойОбновитьОтправку.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Кнопка Обновить
		ЭлементФормыОбновитьОтправку = Форма.Элементы.Найти("ОбновитьОтправку");
		Если ЭлементФормыОбновитьОтправку <> Неопределено Тогда
			ЭлементФормыОбновитьОтправку.Видимость = ВидимостьКнопкиОтправкаПоСостоянию(СостояниеСдачиОтчетности);
		КонецЕсли;
		
		// Критические ошибки
		ЭлементФормыБлокКритическихОшибок = Форма.Элементы.Найти("БлокКритическихОшибок");
		Если ЭлементФормыБлокКритическихОшибок <> Неопределено Тогда
			
			// Форматированная строка
			ЭлементФормыКритическиеОшибки = Форма.Элементы.Найти("КритическиеОшибки");
			Если ЭлементФормыКритическиеОшибки <> Неопределено Тогда
				
				ЭлементФормыКритическиеОшибки.Видимость 			= ЕстьКритическиеОшибки;
				Форма.Элементы.ЗначокКритическойОшибки.Видимость 	= ЕстьКритическиеОшибки;

			КонецЕсли;
			
		КонецЕсли;
		
		// Поддержка старых элементов формы
		ЭлементФормыЗаголовокКритическихОшибок = Форма.Элементы.Найти("ЗаголовокКритическихОшибок");
		Если ЭлементФормыЗаголовокКритическихОшибок <> Неопределено Тогда
			ЭлементФормыЗаголовокКритическихОшибок.Видимость = ЕстьКритическиеОшибки;
		КонецЕсли;
		
		ЭлементФормыГиперссылкаНаКритическиеОшибки = Форма.Элементы.Найти("ГиперссылкаНаКритическиеОшибки");
		Если ЭлементФормыГиперссылкаНаКритическиеОшибки <> Неопределено Тогда
			ЭлементФормыГиперссылкаНаКритическиеОшибки.Видимость = ЕстьКритическиеОшибки;
		КонецЕсли;
				
		// Неотправленные извещения
		ЭлементФормыБлокНеотправленныхИзвещений = Форма.Элементы.Найти("БлокНеотправленныхИзвещений");
		Если ЭлементФормыБлокНеотправленныхИзвещений <> Неопределено Тогда
			ЭлементФормыБлокНеотправленныхИзвещений.Видимость = ЕстьНеотправленныеИзвещения;
		КонецЕсли;
		
		// Видимость панели с ошибками и неотправленными извещениями
		ЭлементФормыБлокОшибокИИзвещений = Форма.Элементы.Найти("БлокОшибокИИзвещений");
		Если ЭлементФормыБлокОшибокИИзвещений <> Неопределено Тогда
			ЭлементФормыБлокОшибокИИзвещений.Видимость = ЕстьКритическиеОшибки ИЛИ ЕстьНеотправленныеИзвещения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидимостьКнопкиОтправкаПоСостоянию(СостояниеСдачиОтчетности) Экспорт
	
	 Возврат СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота")
				И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота")
				И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ПриемПодтвержден")
				И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат")
				И СостояниеСдачиОтчетности <> ПредопределенноеЗначение("Перечисление.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана")
	
КонецФункции

Функция СсылкаНаОтчетПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "мСохраненныйДок") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Ссылка") Тогда
		Возврат Форма.Объект.Ссылка;
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "АвтозапросФСС") <> 0 Тогда
		Возврат Форма.ОтправкаОбъект.ОтчетСсылка;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

Функция СтрокаОС() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux32";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux64";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows32";
	Иначе
		Возврат "Windows64";
	КонецЕсли;
	
КонецФункции

Функция ЭтоЛинукс() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64);
	
КонецФункции 

Функция ЭтоФайрФокс() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0;
	
КонецФункции

Функция ЭтоФайрФоксХромИлиСафари() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0 ИЛИ СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Chrome") <> 0 ИЛИ СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Safari") <> 0);
	
КонецФункции 

// Функция возвращает массив имен объектов метаданных.
// 
// Параметры:
//	Массив элементов справочника ВидыОтправляемыхДокументов
//
// Результат:
//	Массив соответствующих видов прочих уведомлений
//
Функция МассивВидовПрочихУведомленийПоддерживающихДокументооборот(МассивВидовОтправляемыхДокументов) Экспорт
	
	МассивВидовПрочихУведомленийПоддерживающихДокументооборот = Новый Массив;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПостановкиНаУчет")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОткрытиеЗакрытиеСчета")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УчастиеВРоссийскихИностранныхОрганизациях")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СозданиеОбособленныхПодразделений")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗакрытиеОбособленныхПодразделений")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеорганизацияЛиквидацияОрганизации")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПостановкаНаУчетОрганизацииПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПостановкаНаУчетПредпринимателяПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СнятиеСУчетаОрганизацииПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СнятиеСУчетаПредпринимателяПлательщикаЕНВД")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ИзменениеОбъектаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОтказОтУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УтратаПраваНаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПереходНаУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПрекращениеДеятельностиУСН")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН"));
	КонецЕсли;
	
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатента")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента"));
	КонецЕсли;
	Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме")) <> Неопределено Тогда
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме"));
	КонецЕсли;
	//Если МассивВидовОтправляемыхДокументов.Найти(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОбУтратеПраваНаПатент")) <> Неопределено Тогда
	//	МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент"));
	//КонецЕсли;
	
	Возврат МассивВидовПрочихУведомленийПоддерживающихДокументооборот;

КонецФункции

Функция ТелефонМобильныйБезРазделителей(Знач ТелефонМобильный) Экспорт
	
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "+7", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "+", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "(", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, ") ", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, "-", "");
	ТелефонМобильный = СтрЗаменить(ТелефонМобильный, " ", "");
	ТелефонМобильный = СокрЛП(ТелефонМобильный);
	
	Если ПустаяСтрока(ТелефонМобильный) Тогда
		Возврат "";
	Иначе
		Возврат "8" + ТелефонМобильный;
	КонецЕсли;
		
КонецФункции

Функция СтрокаВФорматеДляСравнения(Знач Текст) Экспорт
	
	Результат = Строка(Текст);
	Результат = СокрЛП(Результат);
	Результат = Врег(Результат);
	
	Возврат Результат;
	
КонецФункции


Функция ФорматированноеПредставлениеСпискаВложений(МассивЭлементов) Экспорт
	
	МассивПредставлений = Новый Массив;
	Для Каждого Элемент Из МассивЭлементов Цикл
		ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВернутьСтр("ru = '%1 (%2)'"), Элемент.ИмяФайла, ТекстовоеПредставлениеРазмераФайла(Элемент.Размер));
			
		МассивПредставлений.Добавить(Новый ФорматированнаяСтрока(ПредставлениеФайла,,,, Элемент.ИмяФайла));
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("");
		МассивПредставлений.Добавить(Символы.ПС);
		
	КонецЦикла;
	
	Представление = Новый ФорматированнаяСтрока(МассивПредставлений);
	
	Возврат Представление;
	
КонецФункции

Функция ТекстовоеПредставлениеРазмераФайла(РазмерВБайтах) Экспорт
	
	Размер = 0;
	РазмерВКилобайтах = Окр(РазмерВБайтах / 1024);
	Если РазмерВБайтах = 0 Тогда
		Шаблон = ВернутьСтр("ru = '%1 Б'");
	ИначеЕсли РазмерВКилобайтах < 1000 Тогда
		Размер = РазмерВКилобайтах;
		Шаблон = ВернутьСтр("ru = '%1 КБ'");
	Иначе
		Размер = Окр(РазмерВКилобайтах / 1024);
		Шаблон = ВернутьСтр("ru = '%1 МБ'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Размер);
	
КонецФункции

Функция ЗаменитьНечитаемыеСимволы(ИсходнаяСтрока, ЗаменятьНа = "_") Экспорт
	
	СтрокаПослеЗамены = ИсходнаяСтрока;
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	Для Индекс = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Индекс, 1);
		Если КодСимвола(ТекущийСимвол) < 32 Тогда
			СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ТекущийСимвол, ЗаменятьНа);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

#КонецОбласти