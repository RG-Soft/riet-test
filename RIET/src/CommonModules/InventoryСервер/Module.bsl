
// ДОДЕЛАТЬ
Процедура ВосстановитьПартионныйУчет(ГраницаВосстановления) Экспорт
	
	Последовательность = Последовательности.InventoryBatches;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаВосстановления", ГраницаВосстановления);
	// ПОМЕТКА УДАЛЕНИЯ ЧЕРЕЗ ТОЧКУ ОТ ПОЛЯ СОСТАВНОГО ТИПА!
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	InventoryBatches.Регистратор,
		|	InventoryBatches.МоментВремени КАК МоментВремени
		|ИЗ
		|	Последовательность.InventoryBatches КАК InventoryBatches
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.InventoryBatches.Границы КАК InventoryBatchesГраницы
		|		ПО InventoryBatches.МоментВремени > InventoryBatchesГраницы.МоментВремени
		|ГДЕ
		|	InventoryBatches.Период <= &ГраницаВосстановления
		|	И (НЕ InventoryBatches.Регистратор.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";
	// НАДО ЗАБЛОКИРОВАТЬ ДЛЯ ИЗМЕНЕНИЯ!
	
	Пока Истина Цикл
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			ЗафиксироватьТранзакцию();
			Прервать;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Попытка
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = "Не удалось провести """ + ДокументОбъект + """: " + ОписаниеОшибки();
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);	
			Прервать;
		КонецПопытки;
		
		Попытка
			Последовательность.УстановитьГраницу(ДокументОбъект.МоментВремени());
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = "Не удалось перенести последовательность на """ + ДокументОбъект + """: " + ОписаниеОшибки();
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		    Прервать;
		КонецПопытки;
		
		// НАДО ОТОБРАЖАТЬ ТЕКУЩЕЕ СОСТОЯНИЕ!
		#Если Клиент Тогда
		Состояние("Себестоимость рассчитана до " + Выборка.МоментВремени);
		#КонецЕсли
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
 //УДАЛИТЬ

Процедура ЗапомнитьСтарыйМоментВремени(Объект, ИмяТаблицы) Экспорт
	
	Если Объект.ЭтоНовый() Тогда
		
		Объект.мСтарыйМоментВремени = Неопределено;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таблица.МоментВремени
			|ИЗ
			|	Документ." + ИмяТаблицы + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Объект.мСтарыйМоментВремени = Выборка.МоментВремени;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьДвиженияПоInvПартииТоваровВДополнительныхСвойствах(Объект) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	InvПартииТоваров.Период,
		|	InvПартииТоваров.Номенклатура,
		|	InvПартииТоваров.InventoryLocation,
		|	InvПартииТоваров.Партия,
		|	InvПартииТоваров.Количество,
		|	InvПартииТоваров.Сумма
		|ИЗ
		|	РегистрНакопления.InvПартииТоваров КАК InvПартииТоваров
		|ГДЕ
		|	InvПартииТоваров.Регистратор = &Регистратор";	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Объект.ДополнительныеСвойства.Вставить("ДвиженияДоЗаписи", Выгрузка);
	
КонецПроцедуры

Функция ЗаполнениеНалоговойРегистрации(МассивAU) Экспорт
	
	МассивTR = Новый Массив;
	
	Для каждого Элемент из МассивAU цикл
		МассивTR.Добавить(Элемент.TaxRegistration);
	КонецЦикла;
	
	МассивTR = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(МассивTR);
	
	Если МассивTR.Количество() = 1 Тогда
		Возврат МассивTR[0];
	Иначе
		РГСофтКлиентСервер.СообщитьОбОшибке("В документе неоднозначная налоговая регистрация");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьДокументВВыбранномРежиме(ДокументОбъект, РежимЗаписи) Экспорт 
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		ТекстОшибки = "Не удалось провести документ """ + ДокументОбъект + """:
			|" + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
    	
КонецПроцедуры

