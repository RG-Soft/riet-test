
// Обработчик регламентного задания ПроверкаОтветаНаЗапросТехническойДокументации
//
Процедура ПроверкаОтветаНаЗапросТехническойДокументации() Экспорт
	
	// сначала проверим, нет ли запросов, которые надо закрыть автоматически
	ПроверитьСтатусыTD();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TDStatusesСрезПоследних.PartNo,
	|	TDStatusesСрезПоследних.DOC,
	|	TDStatusesСрезПоследних.Status,
	|	TDStatusesСрезПоследних.EMail,
	|	TDStatusesСрезПоследних.EMail.Дата КАК ДатаОтправки,
	|	TDStatusesСрезПоследних.Item
	|ИЗ
	|	РегистрСведений.TDStatuses.СрезПоследних КАК TDStatusesСрезПоследних
	|ГДЕ
	|	TDStatusesСрезПоследних.EMail <> ЗНАЧЕНИЕ(Документ.EMails.ПустаяСсылка)
	|	И РАЗНОСТЬДАТ(TDStatusesСрезПоследних.EMail.Дата, &ТекущаяДата, ДЕНЬ) >= 3";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		докОбъект = Результат.EMail.ПолучитьОбъект();
		докОбъект.Дата = ТекущаяДата();
		докОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтатусыTD()
	
	ТД = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TDStatusesСрезПоследних.PartNo,
	|	TDStatusesСрезПоследних.Status,
	|	TDStatusesСрезПоследних.DOC,
	|	TDStatusesСрезПоследних.Query,
	|	TDStatusesСрезПоследних.Item
	|ИЗ
	|	РегистрСведений.TDStatuses.СрезПоследних(, ) КАК TDStatusesСрезПоследних
	|ГДЕ
	|	TDStatusesСрезПоследних.Status <> ЗНАЧЕНИЕ(Перечисление.TDStatuses.Received)
	|	И НЕ TDStatusesСрезПоследних.DOC.Booked = ДАТАВРЕМЯ(1, 1, 1)";
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.TDStatuses.СоздатьНаборЗаписей();
	Пока Результат.Следующий() Цикл
		
		стрНабора = Набор.Добавить();
		стрНабора.Период 		= ТД;
		стрНабора.DOC 			= Результат.DOC;
		стрНабора.PartNo		= Результат.PartNo;
		стрНабора.Query			= Результат.Query;
		стрНабора.Item			= Результат.Item;
		стрНабора.ModifiedBy	= Пользователи.ТекущийПользователь();
		стрНабора.Status		= Перечисления.TDStatuses.Received;
	КонецЦикла;
	
	Если Набор.Количество() > 0 Тогда
		Набор.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

//E-mail

Функция ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщенияПриИзмененииСтатуса(ПараметрыПисьма) Экспорт
		
	СтруктураПараметров = Новый Структура;
	
	// здесь нужно получить список PO номеров
	ответ = ПолучитьСписокPOИПолучателей(ПараметрыПисьма);
	
	POs = ответ.СписокPO;
	
	ПараметрыПисьма.Вставить("СписокPO", 	 Ответ.СписокPO);
	ПараметрыПисьма.Вставить("СписокБоргов", Ответ.Борги);
	
	номераPO = "";
	
	Для каждого текPO из POs Цикл
		
		номераPO = номераPO + ?(ПустаяСтрока(номераPO), "", ", ") + СокрЛП(текPO.POnumber);
		
	КонецЦикла;
	
	// получим адрес автора
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("User", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.EMail КАК EMailBox
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &User";
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Автор = Неопределено;
	Если Результат.Следующий() Тогда
		Автор = Результат.EMailBox;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("PartNo", 		НайтиСоздатьPartNo(ПараметрыПисьма.PartNo, ПараметрыПисьма.Item));
	СтруктураПараметров.Вставить("Recipients", 	ответ.СписокRecipients);
	СтруктураПараметров.Вставить("ReplyTo", 	Автор);
	СтруктураПараметров.Вставить("Subject", 	"[TD.RCA.SLB.COM] Request for new TD for Part no. " + СокрЛП(ПараметрыПисьма.PartNo) +		 
		", " + ПараметрыПисьма.DocType + " " + ПараметрыПисьма.DocNo + ?(ЗначениеЗаполнено(номераPO), ", and PO " + номераPO, ""));
		
	СтруктураПараметров.Вставить("Body", 		ПодготовитьТекстПисьма(ПараметрыПисьма));
	СтруктураПараметров.Вставить("TechDoc", 	Истина);
	
	Если ЗначениеЗаполнено(ПараметрыПисьма.Coordinator) Тогда 
		СтруктураПараметров.Вставить("Copy", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПисьма.Coordinator, "EMail"));
	КонецЕсли;

	СтруктураПараметров.Вставить("УдаленныеБорги", Ответ.УдаленныеБорги);
	
	// { RGS AAresntev 22.05.2018
	Если СтруктураПараметров.Свойство("Copy") И ЗначениеЗаполнено(СтруктураПараметров.Copy) И СтруктураПараметров.Recipients.Количество() = 0 Тогда
		СтруктураПараметров.Recipients.Добавить(СтруктураПараметров.Copy);
		СтруктураПараметров.Copy = "";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("DOC", 	ПараметрыПисьма.DOC);
	СтруктураПараметров.Вставить("Query", 	ПараметрыПисьма.Query);
	// } RGS AAresntev 22.05.2018
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСписокPOИПолучателей(ПараметрыПисьма)
	
	Ответ = Новый Структура("СписокPO, СписокRecipients, Борги, УдаленныеБорги", Неопределено, Неопределено, Неопределено);
	
	борги 		= новый Массив;
	кодыБоргов 	= Новый Массив;
	POs			= новый Массив;
	
	//если передается BORG
	Если ТипЗнч(ПараметрыПисьма.DOC) = Тип("СправочникСсылка.BORGs") Тогда 
		борги.Добавить(ПараметрыПисьма.DOC);
	ИначеЕсли ТипЗнч(ПараметрыПисьма.DOC) = Тип("ДокументСсылка.ExportRequest") Тогда 
		борги.Добавить(ПараметрыПисьма.DOC.BORG);
	КонецЕсли;
	
	Если ПараметрыПисьма.Items <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец КАК PO,
		|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК POnumber,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК БОРГ
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	СтрокиИнвойса.Ссылка В(&Items)
		|	И СтрокиИнвойса.КодПоИнвойсу = &PartNo";
		
		Запрос.УстановитьПараметр("Items", ПараметрыПисьма.Items);
		Запрос.УстановитьПараметр("PartNo", СокрЛП(ПараметрыПисьма.PartNo));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Результат.БОРГ) Тогда
				борги.Добавить(Результат.БОРГ);
			Иначе
				Если ЗначениеЗаполнено(Результат.POnumber) Тогда
					кодыБоргов.Добавить(Лев(СокрЛП(Результат.POnumber), 4));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.PO) Тогда
				POs.Добавить(Новый Структура("PO, POnumber", Результат.PO, Результат.POnumber));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Ответ.СписокPO = POs;
	
	УдаленныеБорги = Новый Массив;
	списокПолучателей = Новый СписокЗначений;
	списокБоргов = Новый Массив;
	
	Если борги.Количество() > 0 или кодыБоргов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	BORGs.Ссылка КАК BORG
		|ИЗ
		|	Справочник.BORGs КАК BORGs
		|ГДЕ
		|	(BORGs.Код В (&кодыБоргов)
		|			ИЛИ BORGs.Ссылка В (&борги))
		|	И BORGs.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	BORGsTechnicalDescriptionContacts.Contact.Ссылка КАК User,
		|	BORGsTechnicalDescriptionContacts.Contact.EMail КАК EMail,
		|	BORGsTechnicalDescriptionContacts.Ссылка КАК Борг
		|ИЗ
		|	Справочник.BORGs.TechnicalDescriptionContacts КАК BORGsTechnicalDescriptionContacts
		|ГДЕ
		|	(BORGsTechnicalDescriptionContacts.Ссылка.Код В (&кодыБоргов)
		|			ИЛИ BORGsTechnicalDescriptionContacts.Ссылка.Ссылка В (&борги))
		|	И НЕ BORGsTechnicalDescriptionContacts.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("кодыБоргов", кодыБоргов);
		Запрос.УстановитьПараметр("борги", борги);
		
		Результат = Запрос.ВыполнитьПакет();
		                        		
		ВыборкаBorgs = Результат[0].Выбрать();
		Пока ВыборкаBorgs.Следующий() Цикл
			
			УдаленныеБорги.Добавить(ВыборкаBorgs.BORG);
									      						
		КонецЦикла;
		       			
		ВыборкаBorgsTDContacts = Результат[1].Выбрать();
		Пока ВыборкаBorgsTDContacts.Следующий() Цикл
			
			списокПолучателей.Добавить(ВыборкаBorgsTDContacts.EMail, Строка(ВыборкаBorgsTDContacts.User));
			
			Если НЕ списокБоргов.Найти(ВыборкаBorgsTDContacts.Борг) = Неопределено Тогда
				
				списокБоргов.Добавить(ВыборкаBorgsTDContacts.Борг);
								
			КонецЕсли;
			      						
		КонецЦикла;
				
	КонецЕсли;
	
	Ответ.УдаленныеБорги = УдаленныеБорги;
	Ответ.Борги 			= списокБоргов;
	Ответ.СписокRecipients 	= списокПолучателей;

	Возврат Ответ;
	
КонецФункции

Функция ПодготовитьТекстПисьма(ПараметрыПисьма)
	
	PartNo = НайтиСоздатьPartNo(ПараметрыПисьма.PartNo, ПараметрыПисьма.Item);
	// { RGS LKhristyuk 5/25/2018 11:02:18 AM - вопрос S-I-0005321
	PartNoDescription = СокрЛП(PartNo.DescriptionEng);
	// } RGS LKhristyuk 5/25/2018 11:02:21 AM - вопрос S-I-0005321  
	
	
	текстБорги = "";
	
	Если НЕ ПараметрыПисьма.СписокБоргов = Неопределено Тогда 
		Для каждого текБорг из ПараметрыПисьма.СписокБоргов Цикл
			
			текстБорги = текстБорги + ?(ПустаяСтрока(текстБорги), "", ", ") + СокрЛП(текБорг);
			
		КонецЦикла;
	КонецЕсли;

	HTMLСсылка = "<a href=""" + РГСофтСерверПовтИспСеанс.ПолучитьАдресБазы() + "e1cib/command/ОбщаяКоманда.rgsМониторСопровождения"">RIET Support</a>";
	Текст = "<br>
	|" + HTMLСсылка + "<br>";
	
	RIET_support = Текст;
	
	Автор = Пользователи.ТекущийПользователь();
	ЭлПочтаАвтора = Автор.EMail;
	
	текстАвтор = "<a href=""mailto:" + ЭлПочтаАвтора + """>" + СокрЛП(Автор) + "</a>";
	
	текстПоддержкаПочта = "<a href=""mailto:riet-support@slb.com"">riet-support@slb.com</a>"; 
	// { RGS LKhristyuk 5/25/2018 11:04:18 AM - вопрос S-I-0005321
	//текстПартНо = ПолучитьПолнуюСсылкуНаОбъект(PartNo, "Part no. " + СокрЛП(ПараметрыПисьма.PartNo));
	текстПартНо = "<br>" + СтрЗаменить(ПолучитьПолнуюСсылкуНаОбъект(PartNo, "Part no. " + СокрЛП(ПараметрыПисьма.PartNo)),"<br>","") + " (" + PartNoDescription + ")";
	// } RGS LKhristyuk 5/25/2018 11:04:20 AM - вопрос S-I-0005321 
	
	
	// { RGS LKhristyuk 5/24/2018 3:29:24 PM - вопрос  S-I-0005322
	текстПартНоВнеш = СтрЗаменить(текстПартНо,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
	текстПартНоВнеш = "<br>" + СтрЗаменить(текстПартНоВнеш,"<br>","") + " (для внешних пользователей)<br>";
	// } RGS LKhristyuk 5/24/2018 3:29:25 PM - вопрос  S-I-0005322 
	
	текстДокИПО = "";
	текстДокИПО = текстДокИПО + ПолучитьПолнуюСсылкуНаОбъект(ПараметрыПисьма.DOC, ПараметрыПисьма.DOCType + " no " + ПараметрыПисьма.DOCNo) + Символы.ПС;
	// { RGS LKhristyuk 5/24/2018 5:32:58 PM - вопрос  S-I-0005322
	текстДокИПОВнеш = СтрЗаменить(текстДокИПО,"<br>","") + " (для внешних пользователей)" + "<br>";
	текстДокИПОВнеш = СтрЗаменить(текстДокИПОВнеш,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
	текстДокИПО = текстДокИПО + текстДокИПОВнеш;
	// } RGS LKhristyuk 5/24/2018 5:32:58 PM - вопрос  S-I-0005322
		
	Для каждого текPO из ПараметрыПисьма.СписокPO Цикл 		
		Если ЗначениеЗаполнено(текPO.PO) Тогда
			// { RGS LKhristyuk 5/25/2018 11:46:49 AM - вопрос S-I-0005321 
			//текстДокИПО = текстДокИПО + СокрЛП(ПолучитьПолнуюСсылкуНаОбъект(текPO.PO, текPO.POnumber)) + Символы.ПС;
			текстДокИПО = текстДокИПО + СтрЗаменить(СокрЛП(ПолучитьПолнуюСсылкуНаОбъект(текPO.PO, текPO.POnumber)), "<br>","") + " (" + текPO.PO.Комментарий + ")" + "<br>";
			// } RGS LKhristyuk 5/25/2018 11:46:51 AM - вопрос S-I-0005321  

			// { RGS LKhristyuk 5/24/2018 6:25:08 PM - вопрос S-I-0005322
			текстДокИПОВнеш = СтрЗаменить(СокрЛП(ПолучитьПолнуюСсылкуНаОбъект(текPO.PO, текPO.POnumber)), "<br>","") + " (" + текPO.PO.Комментарий + ")" + " (для внешних пользователей)" + "<br>";
			текстДокИПОВнеш = СтрЗаменить(текстДокИПОВнеш,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
			текстДокИПО = текстДокИПО + текстДокИПОВнеш;
			// } RGS LKhristyuk 5/24/2018 6:25:09 PM - вопрос S-I-0005322 
		Иначе
			текстДокИПО = текстДокИПО + текPO.POnumber + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Текст = 
	"Below part number for which Technical Descriptions is required to be uploaded to Data Base. To start uploading click on links below.
	|" + текстПартНо + "
	// { RGS LKhristyuk 5/24/2018 3:28:02 PM - вопрос S-I-0005322
	|" + текстПартНоВнеш + "
	// } RGS LKhristyuk 5/24/2018 3:28:09 PM - вопрос S-I-0005322 
	|DOC / Export request / BORG and PO:
	|" + текстДокИПО + "
	|Additional information:<br>
	|<P><STRONG><FONT size=4>" + ПараметрыПисьма.Query + "</FONT></STRONG></P>
	|If you are no longer involved in Technical Description providing" + ?(НЕ ПустаяСтрока(текстБорги), "for " + текстБорги , "") + "  (e.g. you was transfered or changed position) notify logistic team by clicking on the link or send request on  " + текстПоддержкаПочта + ".
	|" + RIET_support +" <br>
	|
	|NOTE! If it is a single case just forward this email to required responsible person!<br> 
	|Requestor: " + текстАвтор + "<br>
	|Don't send TD to this email! Use part number links above<br>
	|
	|This is an automated message. Please do not reply to this email. If you need additional help, visit " + RIET_support + " or send request on " + текстПоддержкаПочта + ".
	|
	|<br>----------------------------------==============================================----------------------------------<br>
	|
	|Ниже указан парт номер, для которого необходимо создать техническое описание. Чтобы создать описание перейдите по ссылке для каждого парт номера
	|" + текстПартНо + "
	// { RGS LKhristyuk 5/24/2018 3:28:02 PM - вопрос S-I-0005322
	|" + текстПартНоВнеш + "
	// } RGS LKhristyuk 5/24/2018 3:28:09 PM - вопрос S-I-0005322
	|Упаковочный лист / Заявка на экспорт / БОРГ и заявки на закупку:
	|" + текстДокИПО + "
	|Заявка на техническую документацию:<br>
	|<P><STRONG><FONT size=4>" + ПараметрыПисьма.Query + "</FONT></STRONG></P>
	|Если вы более не участвуете в процессе предоставления технических описаний" + ?(НЕ ПустаяСтрока(текстБорги), "for " + текстБорги , "") + " (например вас перевели на другую локацию или вы сменили позицию) оповестите команду логистов кликнув по ссылке и отправив сгенерированное письмо " + текстПоддержкаПочта + " 
	|" + RIET_support +" <br>
	|
	|! Если это единичный случай когда необходима смена контактного лица, просто перешлите это письмо на нужного сотрудника <br>
	|Заявка оформлена: " + текстАвтор + "<br>
	|
	|Это автоматически сгенерированное сообщение. Пожалуйста, не отвечайте на него. Если вам нужна помощь, пожалуйста создайте вопрос по ссылке  " + RIET_support + " или отправьте вопрос на " + текстПоддержкаПочта + ".";

	Возврат Текст;	
	
КонецФункции

Функция ПолучитьПолнуюСсылкуНаОбъект(Ссылка, ОписаниеСсылки)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
	
	ПолнаяСсылка = РГСофтСерверПовтИспСеанс.ПолучитьАдресБазы() + НавигационнаяСсылка;
	
	HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ОписаниеСсылки + "</a>";
	Текст = "<br>
	|" + HTMLСсылка + "<br>";
	
	Возврат Текст;
	
КонецФункции

Функция НайтиСоздатьPartNo(PartNo, Item = Неопределено)  Экспорт
	
	Если ТипЗнч(PartNo) = Тип("СправочникСсылка.Catalog") Тогда
		Возврат PartNo;
	КонецЕсли;
	
	// { RGS AArsentev 25.06.2018 - Для N/A
	Если (ВРег(PartNo) = "N/A" ИЛИ ВРег(PartNo) = "NA" ИЛИ ВРег(PartNo) = "N\A") И ЗначениеЗаполнено(Item) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Catalog.Ссылка
		|ИЗ
		|	Справочник.Catalog КАК Catalog
		|ГДЕ
		|	Catalog.Код = &Код
		|	И НЕ Catalog.ПометкаУдаления
		|	И Catalog.DescriptionEng = &DescriptionEng";
		
		Запрос.УстановитьПараметр("Код", PartNo);
		Запрос.УстановитьПараметр("DescriptionEng", Item.НаименованиеТовара);
		
	Иначе
	// } RGS AArsentev 25.06.2018 - Для N/A
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Catalog.Ссылка
		|ИЗ
		|	Справочник.Catalog КАК Catalog
		|ГДЕ
		|	Catalog.Код = &Код
		|	И НЕ Catalog.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Код", PartNo);
		
	КонецЕсли;
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		спрОбъект = Справочники.Catalog.СоздатьЭлемент();
		спрОбъект.Код = PartNo;
		Если ЗначениеЗаполнено(Item) Тогда
			спрОбъект.DescriptionEng	= Item.НаименованиеТовара;
			спрОбъект.DescriptionRus	= Item.DescriptionRus;
		КонецЕсли;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

// записываем новое значение статуса, а в ответ получаем текущую историю
Функция ЗаписатьНовоеЗначениеСтатуса(Status, PartNo, DOC, Query, Item, EMail = Неопределено)  Экспорт
	
	менеджерЗаписи = РегистрыСведений.TDStatuses.СоздатьМенеджерЗаписи();
	менеджерЗаписи.Период 		= ТекущаяДатаСеанса();
	менеджерЗаписи.ModifiedBy 	= Пользователи.ТекущийПользователь();
	менеджерЗаписи.DOC			= DOC;
	// { RGS AArsentev 14.06.2018 - Работа с TD из ER
	//менеджерЗаписи.PartNo		= TDСервер.НайтиСоздатьPartNo(PartNo);
	менеджерЗаписи.PartNo		= TDСервер.НайтиСоздатьPartNo(PartNo, Item);
	// } RGS AArsentev 14.06.2018 - Работа с TD из ER
	менеджерЗаписи.Status		= Status;
	менеджерЗаписи.Query		= Query;
	менеджерЗаписи.EMail		= EMail;
	// { RGS AArsentev 28.05.2018
	менеджерЗаписи.Item		= Item;
	// } RGS AArsentev 28.05.2018
	
	менеджерЗаписи.Записать(Ложь);
	
	Если ТипЗнч(DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда 
		Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЗарегистрироватьTDStatus(DOC);
	КонецЕсли;

КонецФункции


Функция ПодготовитьТекстПисьмаSubmitted(ЗаписьРегистраTD) Экспорт
	
	//	Technical description: 101257045 | Edit  
	//	DOC and PO: ARUQ; CODSU655
	//	Task description: 1) Function / principle of operation/using 2) Dimensions/length/diameter/voltage 3) Material 4) Manufacturer 5) Picture / drawing 6) Net weight per item 
	//	Completed by: Anton Dryukov

	Если ТипЗнч(ЗаписьРегистраTD.DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		DOCtype = "DOC";
		DOCNo = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьРегистраTD.DOC, "Номер"));
		
	ИначеЕсли ТипЗнч(ЗаписьРегистраTD.DOC) = Тип("ДокументСсылка.ExportRequest") Тогда
		
		DOCtype = "Export request";
		DOCNo = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьРегистраTD.DOC, "Номер"));  		
		
	Иначе  //если BORG
		
		DOCType = "BORG";
		DOCNo = СокрЛП(ЗаписьРегистраTD.DOC);
		
	КонецЕсли;
	
	HTMLСсылка = "<a href=""" + РГСофтСерверПовтИспСеанс.ПолучитьАдресБазы() + "e1cib/command/ОбщаяКоманда.rgsМониторСопровождения"">RIET Support</a>";
	Текст = "<br>
	|" + HTMLСсылка + "<br>";
	
	RIET_support = Текст;
	
	Автор = Пользователи.ТекущийПользователь();
	
	ЭлПочтаАвтора = Автор.EMail;
	
	текстАвтор = "<a href=""mailto:" + ЭлПочтаАвтора + """>" + СокрЛП(Автор) + "</a>";
	
	текстПоддержкаПочта = "<a href=""mailto:riet-support@slb.com"">riet-support@slb.com</a>"; 
	
	текстПартНо = ПолучитьПолнуюСсылкуНаОбъект(ЗаписьРегистраTD.PartNo, "Part no. " + СокрЛП(ЗаписьРегистраTD.PartNo));
	
	текстДокИПО = "";
	
	текстДокИПО = текстДокИПО + ПолучитьПолнуюСсылкуНаОбъект(ЗаписьРегистраTD.DOC, DOCType + " no " + DOCNo) + Символы.ПС;
	
	// { RGS AArsentev 30.05.2018
	текстПартНоВнеш = СтрЗаменить(текстПартНо,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
	текстПартНоВнеш = "<br>" + СтрЗаменить(текстПартНоВнеш,"<br>","") + " (для внешних пользователей)<br>";
	
	текстДокИПОВнеш = СтрЗаменить(текстДокИПО,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
	текстДокИПОВнеш = "<br>" + СтрЗаменить(текстДокИПОВнеш,"<br>","") + " (для внешних пользователей)<br>";	
	// } RGS AArsentev 30.05.2018
	
	СписокPO = ПолучитьСписокPO(ЗаписьРегистраTD.DOC, ЗаписьРегистраTD.PartNo);
	
	Для каждого текPO из СписокPO Цикл 
		
		// { RGS ASeryakov 23.01.2018 18:00:00 - S-I-0005138
		//Если ЗначениеЗаполнено(текPO.PO) Тогда
		//	текстДокИПО = текстДокИПО + СокрЛП(ПолучитьПолнуюСсылкуНаОбъект(текPO.PO, текPO.POnumber)) + Символы.ПС;
		//Иначе
		//	текстДокИПО = текстДокИПО + текPO.POnumber + Символы.ПС;
		//КонецЕсли;
		Если ЗначениеЗаполнено(текPO.Значение.PO) Тогда
			текстДокИПО = текстДокИПО + СокрЛП(ПолучитьПолнуюСсылкуНаОбъект(текPO.Значение.PO, текPO.Значение.POnumber)) + Символы.ПС;
		Иначе
			текстДокИПО = текстДокИПО + текPO.Значение.POnumber + Символы.ПС;
		КонецЕсли;
		// { RGS ASeryakov 23.01.2018 18:00:00 - S-I-0005138
	КонецЦикла;
	
	Текст = 
	"Technical description: " + СокрЛП(текстПартНо) + "
	// { RGS AArsentev 30.05.2018
	|" + СокрЛП(текстПартНоВнеш) + "
	// } RGS AArsentev 30.05.2018
	|DOC / Export request / BORG and PO:
	|" + текстДокИПО + "
	// { RGS AArsentev 30.05.2018
	|" + СокрЛП(текстДокИПОВнеш) + "
	// } RGS AArsentev 30.05.2018
	|Task description:<br>
	|<P><STRONG><FONT size=4>" + ЗаписьРегистраTD.Query + "</FONT></STRONG></P>
	|
	// { RGS AArsentev 20.06.2018
	|Requested by: &АвторЗапроса&
	|<br>
	// } RGS AArsentev 20.06.2018
	|Completed by: " + текстАвтор + "
	|
	|<P>This is an automated message. Please do not reply to this email. If you need additional help, visit " + RIET_support + " or send request on " + текстПоддержкаПочта + ".</P>
	|
	|<br>----------------------------------==============================================----------------------------------<br>
	|
	|Парт номер, для которого добавлено техническое описание: " + СокрЛП(текстПартНо) + "
	|Упаковочный лист / Заявка на экспорт / БОРГ и заявки на закупку:
	|" + текстДокИПО + "
	|Заявка на техническую документацию:<br>
	|<P><STRONG><FONT size=4>" + ЗаписьРегистраTD.Query + "</FONT></STRONG></P>
	|
	|<P>Это автоматически сгенерированное сообщение. Пожалуйста, не отвечайте на него. Если вам нужна помощь, пожалуйста создайте вопрос по ссылке " + RIET_support + " или отправьте вопрос на " + текстПоддержкаПочта + ".</P>";

	Возврат Текст;
	
КонецФункции

Функция ПолучитьСписокPO(DOC, PartNo)
	
	СписокPO = Новый СписокЗначений();
	
	массивItems = ПолучитьМассивItems(DOC);
	
	Если массивItems <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец КАК PO,
		|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК POnumber,
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК БОРГ
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	СтрокиИнвойса.Ссылка В(&Items)
		|	И СтрокиИнвойса.КодПоИнвойсу = &PartNo";
		
		Запрос.УстановитьПараметр("Items", массивItems);
		Запрос.УстановитьПараметр("PartNo", СокрЛП(PartNo));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Результат.PO) Тогда
				СписокPO.Добавить(Новый Структура("PO, POnumber", Результат.PO, Результат.POnumber));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокPO;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивItems(DOC)   Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", DOC);
	
	Если ТипЗнч(DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СтрокиИнвойса.Ссылка КАК Item
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|		ПО СтрокиИнвойса.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
		|ГДЕ
		|	НЕ СтрокиИнвойса.ПометкаУдаления
		|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(DOC) = Тип("ДокументСсылка.ExportRequest") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СтрокиИнвойса.Ссылка КАК Item
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	НЕ СтрокиИнвойса.ПометкаУдаления
		|	И СтрокиИнвойса.ExportRequest = &Ссылка";
		
	иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		Возврат ТЗ.ВыгрузитьКолонку("Item");
	иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

