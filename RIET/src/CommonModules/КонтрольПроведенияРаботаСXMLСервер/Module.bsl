
Функция СформироватьXMLПредставлениеОбъекта(ДанныеШапки, ДанныеТЧ, Отказ, ТекстОшибки) Экспорт
	
	Если ДанныеШапки.ТипДокумента = "Реализация" Или ДанныеШапки.ТипДокумента = "Поступление" Тогда
		XMLТекст = ПолучитьXMLПредставлениеОбъектаТН(ДанныеШапки, ДанныеТЧ, ТекстОшибки);
	ИначеЕсли ДанныеШапки.ТипДокумента = "КорректировкаРеализации" ИЛИ ДанныеШапки.ТипДокумента = "КорректировкаПоступления" Тогда
		XMLТекст = ПолучитьXMLПредставлениеОбъектаКорТН(ДанныеШапки, ДанныеТЧ, ТекстОшибки);
	ИначеЕсли ДанныеШапки.ТипДокумента = "СчетФактура" Тогда
		XMLТекст = ПолучитьXMLПредставлениеОбъектаСФ(ДанныеШапки, ДанныеТЧ, ТекстОшибки);
	КонецЕсли;
	
	Если XMLТекст = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат XMLТекст;
	
КонецФункции

Функция ПолучитьXMLПредставлениеОбъектаТН(ДанныеШапки, ДанныеТЧ, ТекстОшибки)
	
	ПространствоИменСхемы = "ICO_TORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
	
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ПолучитьИДФайл(ДанныеШапки), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8",, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01",, ТекстОшибки);
	
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СокрЛП(ДанныеШапки.ОрганизацияИНН) + "_" + СокрЛП(ДанныеШапки.ОрганизацияКПП), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", СокрЛП(ДанныеШапки.КонтрагентИНН) + "_" + СокрЛП(ДанныеШапки.КонтрагентКПП), Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СокрЛП(ДанныеШапки.ОрганизацияНаименование), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СокрЛП(ДанныеШапки.ОрганизацияИНН), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", "---", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ", СвОЭДОтпр, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ДанныеШапки.Дата,"ДФ=HH.mm.ss"), Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", "Товарная накладная", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", "0330212", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "ТОРГ-12", Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СокрЛП(ДанныеШапки.ОрганизацияНаименование), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СокрЛП(ДанныеШапки.ОрганизацияИНН), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СокрЛП(ДанныеШапки.ОрганизацияКПП), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Поставщик, "ИдСв", ИдСв, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СокрЛП(ДанныеШапки.КонтрагентНаименование), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СокрЛП(ДанныеШапки.КонтрагентИНН), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СокрЛП(ДанныеШапки.КонтрагентКПП), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Грузополучатель, "ИдСв", ИдСв, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ТН, "НомТН", СокрЛП(ДанныеШапки.Номер), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
		
		// ТЧ
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		НомерСтроки = 0;
		Для каждого ТекСтрока Из ДанныеТЧ Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", СокрЛП(ТекСтрока.НоменклатураНаименование), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", СокрЛП(ТекСтрока.НоменклатураАртикул), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КодТов", СокрЛП(ТекСтрока.НоменклатураКод), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", СокрЛП(ТекСтрока.ЕдиницаИзмеренияНаименование), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", СокрЛП(ТекСтрока.ЕдиницаИзмеренияКод), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НомерГТД", СокрЛП(ТекСтрока.НомерГТД), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Услуга", ТекСтрока.Услуга, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", ТекСтрока.Количество, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Цена", ТекСтрока.Цена, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", ТекСтрока.СуммаБезНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаНДСИзСоответствия(ТекСтрока.СтавкаНДС), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", ТекСтрока.СуммаНДС, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", ТекСтрока.Сумма, Истина, ТекстОшибки);
			Таблица.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", ДанныеТЧ.Итог("Количество"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", ДанныеТЧ.Итог("СуммаБезНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", ДанныеТЧ.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", ДанныеТЧ.Итог("Сумма"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);

		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		Договор = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Договор", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Договор, "НомДог", ДанныеШапки.ДоговорНомер, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Договор, "ДатаДог", Формат(ДанныеШапки.ДоговорДата, "ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "Договор", Договор, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "Валюта", ДанныеШапки.ВалютаКод, Истина, ТекстОшибки);
		
		Если ДанныеШапки.Владелец().Колонки.Найти("ИсхПоставщикНаименование") <> Неопределено Тогда
			
			ИсхПоставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
				ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
					СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СокрЛП(ДанныеШапки.ИсхПоставщикНаименование), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СокрЛП(ДанныеШапки.ИсхПоставщикИНН), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СокрЛП(ДанныеШапки.ИсхПоставщикКПП), , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИсхПоставщик, "ИдСв", ИдСв, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвТНО, "ИсхПоставщик", ИсхПоставщик, , ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, Файл, , , , НазначениеТипаXML.Неявное);
		НоваяЗаписьXML.Закрыть();

		// Удалим пространство имен
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайла, "windows-1251");
		СтрокаФайл = Текст.ПолучитьСтроку(2);
		СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИменСхемы + """", "");
		Текст.ЗаменитьСтроку(2, СтрокаФайл);
		
		УдалитьФайлы(ИмяФайла);

	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Текст.ПолучитьТекст();

КонецФункции

Функция ПолучитьXMLПредставлениеОбъектаКорТН(ДанныеШапки, ДанныеТЧ, ТекстОшибки)
	
	ПространствоИменСхемы = "ICO_KORTORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
	
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ПолучитьИДФайл(ДанныеШапки), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8",, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01",, ТекстОшибки);
	
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СокрЛП(ДанныеШапки.ОрганизацияИНН) + "_" + СокрЛП(ДанныеШапки.ОрганизацияКПП), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", СокрЛП(ДанныеШапки.КонтрагентИНН) + "_" + СокрЛП(ДанныеШапки.КонтрагентКПП), Истина, ТекстОшибки);
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СокрЛП(ДанныеШапки.ОрганизацияНаименование), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СокрЛП(ДанныеШапки.ОрганизацияИНН), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", "---", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ", СвОЭДОтпр, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ДанныеШапки.Дата,"ДФ=HH.mm.ss"), Истина, ТекстОшибки);
			СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "КОРР ТОРГ-12", Истина, ТекстОшибки);
				
				ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(ТН, "НомТН", СокрЛП(ДанныеШапки.Номер), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
					
					// ТЧ
					Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
					НомерСтроки = 0;
					Для каждого ТекСтрока Из ДанныеТЧ Цикл
						
						НомерСтроки = НомерСтроки + 1;
						СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(СведТов, "НомТов", НомерСтроки, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НаимТовДо", СокрЛП(ТекСтрока.НоменклатураНаименование), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НаимТовПосле", СокрЛП(ТекСтрока.НоменклатураНаименование), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", СокрЛП(ТекСтрока.НоменклатураАртикул), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "КодТов", СокрЛП(ТекСтрока.НоменклатураКод), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", СокрЛП(ТекСтрока.ЕдиницаИзмеренияНаименование), Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", СокрЛП(ТекСтрока.ЕдиницаИзмеренияКод), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НомерГТДДо", СокрЛП(ТекСтрока.НомерГТДДо), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НомерГТДПосле", СокрЛП(ТекСтрока.НомерГТДПосле), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "Услуга", ТекСтрока.Услуга, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НеттоДо", ТекСтрока.КоличествоДо, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "НеттоПосле", ТекСтрока.КоличествоПосле, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "ЦенаДо", ТекСтрока.ЦенаДо, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "ЦенаПосле", ТекСтрока.ЦенаПосле, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДСДо", ТекСтрока.СуммаБезНДСДо, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДСПосле", ТекСтрока.СуммаБезНДСПосле, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДСДо", СтавкаНДСИзСоответствия(ТекСтрока.СтавкаНДСДо), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДСПосле", СтавкаНДСИзСоответствия(ТекСтрока.СтавкаНДСПосле), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумНДСДо", ТекСтрока.СуммаНДСДо, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумНДСПосле", ТекСтрока.СуммаНДСПосле, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДСДо", ТекСтрока.СуммаДо, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДСПосле", ТекСтрока.СуммаПосле, Истина, ТекстОшибки);
						Таблица.СвТов.Добавить(СведТов);
						
					КонецЦикла;
					
					ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
				
				Договор = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Договор", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(Договор, "НомДог", ДанныеШапки.ДоговорНомер, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Договор, "ДатаДог", Формат(ДанныеШапки.ДоговорДата, "ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвТНО, "Договор", Договор, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвТНО, "Валюта", ДанныеШапки.ВалютаКод, Истина, ТекстОшибки);
		
			ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
			
			ИспрДок = ПолучитьОбъектТипаCML("Файл.Документ.ИспрДок", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ИспрДок, "НаимОсн", ДанныеШапки.ОснованиеТип, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИспрДок, "НомОсн", ДанныеШапки.ОснованиеНомер, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ИспрДок, "ДатаОсн", Формат(ДанныеШапки.ОснованиеДата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Документ, "ИспрДок", ИспрДок, Истина, ТекстОшибки);
			
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, Файл, , , , НазначениеТипаXML.Неявное);
		НоваяЗаписьXML.Закрыть();

		// Удалим пространство имен
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайла, "windows-1251");
		СтрокаФайл = Текст.ПолучитьСтроку(2);
		СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИменСхемы + """", "");
		Текст.ЗаменитьСтроку(2, СтрокаФайл);
		
		УдалитьФайлы(ИмяФайла);

	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Текст.ПолучитьТекст();

КонецФункции

Функция ПолучитьXMLПредставлениеОбъектаСФ(ДанныеШапки, ДанныеТЧ, ТекстОшибки)
	
	ПространствоИменСхемы = "SFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ПолучитьИДФайл(ДанныеШапки), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8",, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02",, ТекстОшибки);

		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", СокрЛП(ДанныеШапки.ОрганизацияИНН) + "_" + СокрЛП(ДанныеШапки.ОрганизацияКПП), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", СокрЛП(ДанныеШапки.КонтрагентИНН) + "_" + СокрЛП(ДанныеШапки.КонтрагентКПП), Истина, ТекстОшибки);
	
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СокрЛП(ДанныеШапки.ОрганизацияНаименование), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СокрЛП(ДанныеШапки.ОрганизацияИНН), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", "---", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, , ТекстОшибки);
	
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
	
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115101", Истина, ТекстОшибки);
	
			СвСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ",СокрЛП(ДанныеШапки.Номер), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", Формат(ДанныеШапки.Дата, "ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", Формат(ДанныеШапки.ВалютаКод, "ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
	
				Если ДанныеШапки.НомерИсправления <> 0 Тогда
						ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", ДанныеШапки.НомерИсправления, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ИспрСчФ", ИспрСчФ, , ТекстОшибки);
				КонецЕсли;
				
				Продавец = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
					ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
						СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СокрЛП(ДанныеШапки.ОрганизацияНаименование), Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СокрЛП(ДанныеШапки.ОрганизацияИНН), , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СокрЛП(ДанныеШапки.ОрганизацияКПП), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Продавец, "ИдСв", ИдСв, Истина, ТекстОшибки);
					Адрес = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
					СтруктураАдреса = ПолучитьСтруктуруАдресаУчастника(ДанныеШапки.ОрганизацияСсылка);
					Если СтруктураАдреса.КодСтр = Неопределено Тогда
						АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтруктураАдреса, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Район", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Город", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", СтруктураАдреса, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Адрес, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
					Иначе
						АдрИно = ПолучитьОбъектТипаCML("АдрИноТип", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(АдрИно, "КодСтр", СтруктураАдреса, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрИно, "АдрТекст", СтруктураАдреса, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Адрес, "АдрИно", АдрИно, Истина, ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Продавец, "Адрес", Адрес, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", Продавец, Истина, ТекстОшибки);
					
				Грузоотправитель = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
					Если ЗначениеЗаполнено(ДанныеШапки.ГрузоотправительСсылка) Тогда
						ГрузОтпр = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
							НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
								ЗаполнитьСвойствоXDTO(АдрРФ, "НаимОрг", СокрЛП(ДанныеШапки.ГрузоотправительНаименование), Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(ГрузОтпр, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
					        Адрес = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
							СтруктураАдреса = ПолучитьСтруктуруАдресаУчастника(ДанныеШапки.ГрузоотправительСсылка);
							Если СтруктураАдреса.КодСтр = Неопределено Тогда
								АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтруктураАдреса, Истина, ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Район", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Город", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", СтруктураАдреса, , ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(Адрес, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
							Иначе
								АдрИно = ПолучитьОбъектТипаCML("АдрИноТип", ПространствоИменСхемы);
									ЗаполнитьСвойствоXDTO(АдрИно, "КодСтр", СтруктураАдреса, Истина, ТекстОшибки);
									ЗаполнитьСвойствоXDTO(АдрИно, "АдрТекст", СтруктураАдреса, Истина, ТекстОшибки);
								ЗаполнитьСвойствоXDTO(Адрес, "АдрИно", АдрИно, Истина, ТекстОшибки);
							КонецЕсли;
							ЗаполнитьСвойствоXDTO(ГрузОтпр, "Адрес", Адрес, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Грузоотправитель, "ГрузОтпр", ГрузОтпр, Истина, ТекстОшибки);
					Иначе
						ЗаполнитьСвойствоXDTO(Грузоотправитель, "ОнЖе", "он же", Истина, ТекстОшибки);
					КонецЕсли;
				ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", Грузоотправитель, , ТекстОшибки);
			
				Если ЗначениеЗаполнено(ДанныеШапки.ГрузополучательСсылка) Тогда
					ГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
						НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(АдрРФ, "НаимОрг", СокрЛП(ДанныеШапки.ГрузоотправительНаименование), Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ГрузПолуч, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
				        Адрес = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
						СтруктураАдреса = ПолучитьСтруктуруАдресаУчастника(ДанныеШапки.ГрузоотправительСсылка);
						Если СтруктураАдреса.КодСтр = Неопределено Тогда
							АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтруктураАдреса, Истина, ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Район", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Город", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", СтруктураАдреса, , ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(Адрес, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
						Иначе
							АдрИно = ПолучитьОбъектТипаCML("АдрИноТип", ПространствоИменСхемы);
								ЗаполнитьСвойствоXDTO(АдрИно, "КодСтр", СтруктураАдреса, Истина, ТекстОшибки);
								ЗаполнитьСвойствоXDTO(АдрИно, "АдрТекст", СтруктураАдреса, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(Адрес, "АдрИно", АдрИно, Истина, ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ГрузПолуч, "Адрес", Адрес, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", ГрузПолуч, Истина, ТекстОшибки);
				КонецЕсли;
				
				Покупатель = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
					ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
						СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СокрЛП(ДанныеШапки.КонтрагентНаименование), Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СокрЛП(ДанныеШапки.КонтрагентИНН), , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СокрЛП(ДанныеШапки.КонтрагентКПП), , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Покупатель, "ИдСв", ИдСв, Истина, ТекстОшибки);
			        Адрес = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
					СтруктураАдреса = ПолучитьСтруктуруАдресаУчастника(ДанныеШапки.КонтрагентСсылка);
					Если СтруктураАдреса.КодСтр = Неопределено Тогда
						АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", СтруктураАдреса, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Район", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Город", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", СтруктураАдреса, , ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", СтруктураАдреса, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Адрес, "АдрРФ", АдрРФ, Истина, ТекстОшибки);
					Иначе
						АдрИно = ПолучитьОбъектТипаCML("АдрИноТип", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(АдрИно, "КодСтр", СтруктураАдреса, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(АдрИно, "АдрТекст", СтруктураАдреса, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Адрес, "АдрИно", АдрИно, Истина, ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Покупатель, "Адрес", Адрес, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", Покупатель, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);	
				
			ТаблСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
				НомерСтроки = 0;
				Для каждого ТекСтрока Из ДанныеТЧ Цикл
					НомерСтроки = НомерСтроки + 1;
					СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", НомерСтроки, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", СокрЛП(ТекСтрока.НоменклатураНаименование), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", СокрЛП(ТекСтрока.ЕдиницаИзмеренияКод), , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "КолТов", ТекСтрока.Количество, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТов", ТекСтрока.Цена, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", ТекСтрока.СуммаБезНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "НалСт", СтавкаНДСИзСоответствияСФ(ТекСтрока.СтавкаНДС), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", ТекСтрока.Сумма, Истина, ТекстОшибки);
					Акциз = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
						Если ТекСтрока.СуммаАкциза > 0 Тогда
							ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", ТекСтрока.СуммаАкциза, Истина, ТекстОшибки);
						Иначе
							ЗаполнитьСвойствоXDTO(Акциз, "БезАкциз", "без акциза", Истина, ТекстОшибки);
						КонецЕсли;
					ЗаполнитьСвойствоXDTO(СведТов, "Акциз", Акциз, Истина, ТекстОшибки);
					СумНал = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
						Если ТекСтрока.СуммаНДС > 0 Тогда
							ЗаполнитьСвойствоXDTO(СумНал, "СумНДС", ТекСтрока.СуммаНДС, Истина, ТекстОшибки);
						Иначе
							ЗаполнитьСвойствоXDTO(СумНал, "БезНДС", "без НДС", Истина, ТекстОшибки);
						КонецЕсли;
					ЗаполнитьСвойствоXDTO(СведТов, "СумНал", СумНал, Истина, ТекстОшибки);
					Если ЗначениеЗаполнено(ТекСтрока.СтранаПроисхожденияКод) И ЗначениеЗаполнено(ТекСтрока.НомерГТД) Тогда
						СвТД = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.СвТД", ПространствоИменСхемы);
							ЗаполнитьСвойствоXDTO(СвТД, "КодПроисх", ТекСтрока.СтранаПроисхожденияКод, Истина, ТекстОшибки);
							ЗаполнитьСвойствоXDTO(СвТД, "НомерТД", ТекСтрока.НомерГТД, Истина, ТекстОшибки);
						СведТов.СвТД.Добавить(СвТД);
					КонецЕсли;
					ТаблСчФакт.СведТов.Добавить(СведТов);
				КонецЦикла;
				
				ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", ДанныеТЧ.Итог("СуммаБезНДС"), Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", ДанныеТЧ.Итог("Сумма"), Истина, ТекстОшибки);
					СумНалВсего = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
						Если ДанныеТЧ.Итог("СуммаНДС") > 0 Тогда
							ЗаполнитьСвойствоXDTO(СумНалВсего, "СумНДС", ДанныеТЧ.Итог("СуммаНДС"), Истина, ТекстОшибки);
						Иначе
							ЗаполнитьСвойствоXDTO(СумНалВсего, "БезНДС", "без НДС", Истина, ТекстОшибки);
						КонецЕсли;
					ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
				
			ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
			
			Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
				ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеШапки.ОрганизацияИНН, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДанныеШапки.РуководительДолжность, Истина, ТекстОшибки);
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
					    СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(ДанныеШапки.РуководительФИО);
						ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураФИО, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураФИО, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураФИО, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
				
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, Файл, , , , НазначениеТипаXML.Неявное);
		НоваяЗаписьXML.Закрыть();

		// Удалим пространство имен
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайла, "windows-1251");
		СтрокаФайл = Текст.ПолучитьСтроку(2);
		СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИменСхемы + """", "");
		Текст.ЗаменитьСтроку(2, СтрокаФайл);
		
		УдалитьФайлы(ИмяФайла);

	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Текст.ПолучитьТекст();
	
КонецФункции

#Область ВспомогательныеФункции

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, СтруктураЗначений, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь)
	
	Если ТипЗнч(СтруктураЗначений) = Тип("Структура") Тогда
		Если СтруктураЗначений.Свойство(ИмяСвойства) Тогда	// Если свойста нет в структуре, то пропускаем
			Значение = СтруктураЗначений[ИмяСвойства];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Значение = СтруктураЗначений;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

Функция МассивПодстрок(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьИДФайл(СсылкаНаОбъект)

	Возврат "DP_OTORG12_" + СсылкаНаОбъект.ОрганизацияИНН + "_" + СсылкаНаОбъект.ОрганизацияКПП + "_" + СсылкаНаОбъект.КонтрагентИНН + "_" + СсылкаНаОбъект.КонтрагентКПП + "_" + Строка(Новый УникальныйИдентификатор);

КонецФункции

Функция СтавкаНДСИзСоответствия(ПрикладноеЗначение)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	Значение = Неопределено;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если КлючИЗначение.Значение = ПрикладноеЗначение Тогда
			Значение = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция СтавкаНДСИзСоответствияСФ(ПрикладноеЗначение)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("0%",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10%",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18%",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20%",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	Значение = Неопределено;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если КлючИЗначение.Значение = ПрикладноеЗначение Тогда
			Значение = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьСтруктуруАдресаУчастника(Ссылка)
	
	СтруктураАдреса = Новый Структура("Индекс, Регион, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт, КодСтр, АдрТекст");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА КИ.Вид = &ВидКИ_ЮрАдрес
		|			ТОГДА 1
		|		КОГДА КИ.Вид = &ВидКИ_ФактАдрес
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Приоритет,
		|	КИ.Ссылка КАК Ссылка,
		|	КИ.ЗначенияПолей КАК ЗначенияПолей
		|ИЗ
		|	Справочник.ИмяСправочника.КонтактнаяИнформация КАК КИ
		|ГДЕ
		|	КИ.Ссылка = &Ссылка
		|	И КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("ВидКИ_ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Запрос.УстановитьПараметр("ВидКИ_ФактАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", "Организации");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.УстановитьПараметр("ВидКИ_ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запрос.УстановитьПараметр("ВидКИ_ФактАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", "Контрагенты");
	Иначе
		Возврат СтруктураАдреса;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗначенияПолей = Выборка.ЗначенияПолей;
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
			РезультатыЧтения = Новый Структура;
			XDTOДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
			
			// Индекс просто ставим
			СтруктураАдреса.Индекс = Формат(УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(XDTOДанныеАдреса), "ЧГ=");
			
			// Получим детали насленного пункта
			АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(XDTOДанныеАдреса);
			Если АдресРФ <> Неопределено Тогда
				СтруктураАдреса.Регион = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, "СубъектРФ");
				СтруктураАдреса.КодРегион = АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.Регион);
				
				Если НЕ ЗначениеЗаполнено(СтруктураАдреса.КодРегион) Тогда
					СтруктураАдреса.КодРегион = "00";
				КонецЕсли;
				
				// Для района запишем только наименование
				Район = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, "СвРайМО/Район");
				СтруктураАдреса.Район = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(Район).Наименование;
				
				СтруктураАдреса.Город = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, "Город");
				СтруктураАдреса.НаселПункт = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, "НаселПункт");
				СтруктураАдреса.Улица = УправлениеКонтактнойИнформациейСлужебный.ПолучитьXDTOРеквизитОбъекта(АдресРФ, "Улица");
			Иначе
				СтруктураАдреса.АдрТекст = XDTOДанныеАдреса.Представление;
				Страна = XDTOДанныеАдреса.Состав.Страна;
				СтруктураАдреса.КодСтр = Справочники.СтраныМира.НайтиПоНаименованию(Страна, Истина).Код;
			КонецЕсли;
			
			// Дом, строение, помещение
			ЗданияИПомещения = УправлениеКонтактнойИнформациейСлужебный.ЗданияИПомещенияАдреса(XDTOДанныеАдреса);
			
			СтрокаТаблицы = ЗданияИПомещения.Здания.Найти("Дом", "Тип");
			Если СтрокаТаблицы <> Неопределено Тогда
				СтруктураАдреса.Дом = СтрокаТаблицы.Значение;
			КонецЕсли;
			
			СтрокаТаблицы = ЗданияИПомещения.Здания.Найти("Корпус", "Тип");
			Если СтрокаТаблицы <> Неопределено Тогда
				СтруктураАдреса.Корпус = СтрокаТаблицы.Значение;
			КонецЕсли;
			
			СтрокаТаблицы = ЗданияИПомещения.Помещения.Найти("Квартира", "Тип");
			Если СтрокаТаблицы <> Неопределено Тогда
				СтруктураАдреса.Кварт = СтрокаТаблицы.Значение;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтруктураАдреса = ПолучитьСтруктуруАдресаУчастникаЧерезРегистр(Ссылка);
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьСтруктуруАдресаУчастникаЧерезРегистр(Ссылка)
	
	СтруктураАдреса = Новый Структура("Индекс, Регион, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт, КодСтр, АдрТекст");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КИ.Представление,
		|	КИ.Поле1 КАК Индекс,
		|	КИ.Поле2 КАК Регион,
		|	КИ.Поле3 КАК Район,
		|	КИ.Поле4 КАК Город,
		|	КИ.Поле5 КАК НаселПункт,
		|	КИ.Поле6 КАК Улица,
		|	КИ.Поле7 КАК Дом,
		|	КИ.Поле8 КАК Корпус,
		|	КИ.Поле9 КАК Квартира,
		|	ВЫБОР
		|		КОГДА КИ.Вид = &ВидКИ_ЮрАдрес
		|			ТОГДА 1
		|		КОГДА КИ.Вид = &ВидКИ_ФактАдрес
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КИ
		|ГДЕ
		|	КИ.Объект = &Ссылка
		|	И КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("ВидКИ_ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Запрос.УстановитьПараметр("ВидКИ_ФактАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.УстановитьПараметр("ВидКИ_ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Запрос.УстановитьПараметр("ВидКИ_ФактАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Иначе
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат СтруктураАдреса;
	КонецПопытки;

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Индекс) Тогда
			СтруктураАдреса.Индекс = Выборка.Индекс;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.Регион) Тогда
			СтруктураАдреса.Регион = Выборка.Регион;
			СтруктураАдреса.КодРегион = АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.Регион);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураАдреса.КодРегион) Тогда
			СтруктураАдреса.КодРегион = "00";
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Выборка.Район) Тогда
			СтруктураАдреса.Район = Выборка.Район;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Выборка.Город) Тогда
			СтруктураАдреса.Город = Выборка.Город;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.НаселПункт) Тогда
			СтруктураАдреса.НаселПункт = Выборка.НаселПункт;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.Улица) Тогда
			СтруктураАдреса.Улица = Выборка.Улица;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.Дом) Тогда
			СтруктураАдреса.Дом = Выборка.Дом;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Корпус) Тогда
			СтруктураАдреса.Корпус = Выборка.Корпус;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Квартира) Тогда
			СтруктураАдреса.Кварт = Выборка.Квартира;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

#КонецОбласти
