/////////////////////////////////////////////////////////////
//ВЕРСИЯ ПРОЦЕДУР И ФУНКЦИЙ ОБЛАСТИ "ТиповаяБухгалтерия": БУХ. КОРП. 3.0.38.42 бета

#Область ТиповаяБухгалтерия

////////////////////////////////////////////////////////////////////////////////
// Содержит процедуры для заполнения форм отчетности по НДС:
//- налоговой декларации по НДС с 1 квартала 2015 года
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет контейнер с показателями декларации по НДС
// Для версии отчета ФормаОтчета2015Кв1
Процедура ЗаполнитьОтчетНДСФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
#Область ПодготовкаОбщихДанных

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	УчетНДС2012 = ПараметрыОтчета.мДатаКонцаПериодаОтчета >= '20120101';
	ОрганизацияНеПлательшикНДС = УчетнаяПолитика.СистемаНалогообложения(
		ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета) 
		<> Перечисления.СистемыНалогообложения.Общая;
	ОрганизацияОсвобожденаОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(
		ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	
	// События
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	// Суммы связанные с расчетами по оплате суммы включаются в общий объем реализации
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	//<=
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	//<=
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр090 = Новый СписокЗначений;
	ВидыЦенностейСтр090.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр090", ВидыЦенностейСтр090);
	
	ВидыЦенностейСтр130 =  Новый СписокЗначений;
	ВидыЦенностейСтр130.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	//<=	
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр170 =  Новый СписокЗначений;
	ВидыЦенностейСтр170.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр170", ВидыЦенностейСтр170);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	//ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	//ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	//<=                                                                              	
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр120 = Новый СписокЗначений;
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
	//	Если ВидыЦенностейСтр130.НайтиПоЗначению(ВидЦенности) = Неопределено 
	//		И ВидыЦенностейСтр140.НайтиПоЗначению(ВидЦенности) = Неопределено 
	//		И ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
	//		И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено
	//		И ВидыЦенностейСтр170.НайтиПоЗначению(ВидЦенности) = Неопределено 
	//		И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
	//		ВидыЦенностейСтр120.Добавить(ВидЦенности);
	//	КонецЕсли;
	//КонецЦикла;
	ВидыЦенностейСтр120.Добавить(Перечисления.ВидыЦенностей.Товары);
	ВидыЦенностейСтр120.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	//<=
	Запрос.УстановитьПараметр("ВидыЦенностейСтр120", ВидыЦенностейСтр120);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011711", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", 	ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	//Обновление рег. Отчетности на бух. Корп 3.0.38.39
	//ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	//ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	//ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	//ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	//<=	

	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	// { RGS EParshina 29.12.2018 16:37:05 - SLI-0007797
	ПеречисленияСтавкиНДСНДС18  = Новый Массив;
	ПеречисленияСтавкиНДСНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	ПеречисленияСтавкиНДСНДС18.Добавить(Перечисления.СтавкиНДС.НДС20);
	// } RGS EParshina 29.12.2018 16:37:05 - SLI-0007797
	Запрос.УстановитьПараметр("СтавкаНДС18",	ПеречисленияСтавкиНДСНДС18);
	// { RGS EParshina 29.12.2018 16:37:05 - SLI-0007797
	ПеречисленияСтавкиНДСНДС18118  = Новый Массив;
	ПеречисленияСтавкиНДСНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	ПеречисленияСтавкиНДСНДС18.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	// } RGS EParshina 29.12.2018 16:37:05 - SLI-0007797
	Запрос.УстановитьПараметр("СтавкаНДС18_118", ПеречисленияСтавкиНДСНДС18118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";

	Запрос.Выполнить();
	
#КонецОбласти

#Область Раздел2
	
	Если Контейнер.Свойство("Раздел2") Тогда
		
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		//В этот раздел попадают только СКП (один КПП из СКП.КПП - одна страница) по книге продаж, вид ценности - налоговый агент (иностранцы), 
		//событие "Начислен к уплате"
		//010 - КПП УчетНДСФормированиеОтчетности
		//020 - Полное наименование контрагента из документа
		//030 - ИНН Организации (Шлюмовский)
		//040 - КБК - значение 18210301000011000110
		//050 - ОКТМО из организации
		//060 - сумма ндс (руб)
		//070 - код операции - 1011711
		//080 - не заполняем
		//090 - не заполняем
		//100 - не заполняем
		//<=
		
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				И НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеНачисленНДС)
		|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагенты.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000200002003,
		|	Контрагенты.ЮридическоеФизическоеЛицо КАК ПокупательЮридическоеФизическоеЛицо,
		|	МАКСИМУМ(""1011711"") КАК П000200007003,
		|	Контрагенты.Ссылка КАК П000200002003_Расшифровка,
		|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003
		|ИЗ
		|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагенты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
		|	Контрагенты.ЮридическоеФизическоеЛицо,
		|	Контрагенты.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагенты.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250)
		|	КОНЕЦ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Заменим обращение к реквизиту контрагент договора
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента.Владелец", "ДоговорКонтрагента." + БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		СтраницаРаздел2 = Раздел2[0].Данные;
		
		Если СтраницаРаздел2.П000200005003 = Неопределено Тогда
			СтраницаРаздел2.П000200005003 = "";
			ОКАТО = "";
		Иначе	
			ОКАТО = СтраницаРаздел2.П000200005003;
		КонецЕсли;
				
		Для Каждого Показатель Из СтраницаРаздел2 Цикл
			СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел2.Количество() > 1 Цикл
			Раздел2.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		//Обновление на бух. корп. 3.0.38.41
		КППРаздела2   = ПараметрыОтчета.Организация.РегистрацияВНалоговомОргане.КПП;
		ИННРаздела2   = ПараметрыОтчета.Организация.ИНН;
		ОКТМОРаздела2 = ПараметрыОтчета.Организация.РегистрацияВНалоговомОргане.КодПоОКТМО;
		//<=
				
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела2 = Раздел2.Добавить();
				НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные;
			
			ДанныеЛистаРаздел2ФИО = (Выборка.ПокупательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
			
			СтраницаРаздел2.П000200001003 = КППРаздела2;              //Обновление рег. Отчетности на бух. Корп 3.0.38.39
			СтраницаРаздел2.П000200002003 = Выборка.П000200002003;
			СтраницаРаздел2.П000200003003 = ИННРаздела2;              //Обновление рег. Отчетности на бух. Корп 3.0.38.39
			//Обновление рег. Отчетности на бух. Корп 3.0.38.39
			СтраницаРаздел2.П000200004003 = "18210301000011000110"; //КБК
			//<=
			//Обновление рег. Отчетности на бух. Корп 3.0.38.39
			СтраницаРаздел2.П000200005003 = ОКТМОРаздела2;			
			//<=
			СтраницаРаздел2.П000200006003 = Выборка.П000200006003;
			СтраницаРаздел2.П000200007003 = Выборка.П000200007003;
			//Обновление рег. Отчетности на бух. Корп 3.0.38.39
			//СтраницаРаздел2.П000200008003 = Выборка.П000200008003;
			//СтраницаРаздел2.П000200009003 = Выборка.П000200009003;
			//<=			
		
			Если ДанныеЛистаРаздел2ФИО Тогда
				СтраницаРаздел2.П000200001003 = "";
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
				ОбщегоНазначенияБПВызовСервера.ФамилияИнициалыФизЛица(П000200002003, ФамилияРаздел2, ИмяРаздел2, ОтчествоРаздел2);
				
				ФамилияРаздел2 = СокрЛП(ФамилияРаздел2);
				ИмяРаздел2 = СокрЛП(ИмяРаздел2);
				ОтчествоРаздел2 = СокрЛП(ОтчествоРаздел2);
				
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
			Иначе
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	
#КонецОбласти

#Область Раздел3

	Если Контейнер.Свойство("Раздел3") Тогда
		
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
			|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура
		|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|				И ВЫБОР
		|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|					КОГДА &СУчетомКорректировок = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр120)
		|							И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300012003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр170)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300017003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3, ЗначенияДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти 

//***********************************3 раздел (приложение 1), 4-й раздел и 6-й раздел, приведенные здесь, удалены за ненужностью в SLI.

#Область РазделыС8По9
	
	Если Контейнер.Свойство("Раздел8") Тогда
		
		// Сведения из книги покупок об операциях, отражаемых за истекший налоговый период
		
		Раздел8 = Контейнер.Раздел8;
		
		ПараметрыРаздел8 = Новый Структура;
		ПараметрыРаздел8.Вставить("Организация",                         ПараметрыОтчета.Организация);
		ПараметрыРаздел8.Вставить("НачалоПериода",                       ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел8.Вставить("КонецПериода",                        ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел8.Вставить("ФормироватьДополнительныеЛисты",      Ложь);
		ПараметрыРаздел8.Вставить("ДополнительныеЛистыЗаТекущийПериод",  Ложь);
		ПараметрыРаздел8.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
		ПараметрыРаздел8.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыРаздел8.Вставить("ВыводитьТолькоДопЛисты",              Ложь);
		ПараметрыРаздел8.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
		ПараметрыРаздел8.Вставить("ВключатьОбособленныеПодразделения",   Истина);
		ПараметрыРаздел8.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());
		ПараметрыРаздел8.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
		ПараметрыРаздел8.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
		
		ПараметрыРаздел8.Вставить("СписокОрганизаций");
		ПараметрыРаздел8.Вставить("ДатаФормированияДопЛиста");
		ПараметрыРаздел8.Вставить("ЗаполнениеДокумента", Ложь);
		ПараметрыРаздел8.Вставить("ЗаполнениеДекларации", Истина);
		
		ДанныеДляПроверкиКонтрагентов = Новый Структура;
		ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
		ПараметрыРаздел8.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		Отчеты.КнигаПокупок2014.СформироватьОтчет(ПараметрыРаздел8, АдресХранилища);
		//<=
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел8")
			И РезультатВыполнения.СписокСформированныхЛистов.Количество() > 0 Тогда
			
			СтруктураДанныхРаздел8 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел8.Записи = РезультатВыполнения.ТаблицаРаздел8;
			СтруктураДанныхРаздел8.Итоги = РезультатВыполнения.ИтогиРаздел8;
			Раздел8.Вставить("Данные", СтруктураДанныхРаздел8);
			Раздел8.Вставить("Отчет", РезультатВыполнения.СписокСформированныхЛистов[0].Значение);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел8_Прил1") Тогда 
		
		// Сведения из дополнительных листов книги покупок
		
		Раздел81 = Контейнер.Раздел8_Прил1;
		
		ПараметрыРаздел81 = Новый Структура;
		ПараметрыРаздел81.Вставить("Организация", ПараметрыОтчета.Организация);
		
		ПараметрыРаздел81.Вставить("НачалоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел81.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
		
		ПараметрыРаздел81.Вставить("НачалоНалоговогоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел81.Вставить("КонецНалоговогоПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);

		ПараметрыРаздел81.Вставить("ФормироватьДополнительныеЛисты",      Истина);
		ПараметрыРаздел81.Вставить("ДополнительныеЛистыЗаТекущийПериод",  Истина);
		ПараметрыРаздел81.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
		ПараметрыРаздел81.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыРаздел81.Вставить("ВыводитьТолькоДопЛисты",              Истина);
		ПараметрыРаздел81.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
		ПараметрыРаздел81.Вставить("ВключатьОбособленныеПодразделения",   Истина);
		ПараметрыРаздел81.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());
		ПараметрыРаздел81.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
		ПараметрыРаздел81.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
		
		ПараметрыРаздел81.Вставить("СписокОрганизаций");
		ПараметрыРаздел81.Вставить("ДатаФормированияДопЛиста");
		ПараметрыРаздел81.Вставить("ЗаполнениеДокумента", Ложь);
		ПараметрыРаздел81.Вставить("ЗаполнениеДекларации", Истина);
		
		ДанныеДляПроверкиКонтрагентов = Новый Структура;
		ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
		ПараметрыРаздел81.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		Отчеты.КнигаПокупок2014.СформироватьОтчет(ПараметрыРаздел81, АдресХранилища);
		//<=
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел81") 
			И РезультатВыполнения.Свойство("ТабличныйДокументРаздел81") Тогда
			
			СтруктураДанныхРаздел81 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел81.Записи = РезультатВыполнения.ТаблицаРаздел81;
			СтруктураДанныхРаздел81.Итоги = РезультатВыполнения.ИтогиРаздел81;
			Раздел81.Вставить("Данные", СтруктураДанныхРаздел81);
			Раздел81.Вставить("Отчет", РезультатВыполнения.ТабличныйДокументРаздел81);
		
		КонецЕсли;
			
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел9") Тогда
		
		// Сведения из книги продаж об операциях, отражаемых за истекший налоговый период
		
		Раздел9 = Контейнер.Раздел9;
		
		// Параметры отчета
		
		ПараметрыРаздел9 = Новый Структура;
		ПараметрыРаздел9.Вставить("Организация",                         ПараметрыОтчета.Организация);
		ПараметрыРаздел9.Вставить("НачалоПериода",                       ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел9.Вставить("КонецПериода",                        ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		ПараметрыРаздел9.Вставить("ФормироватьДополнительныеЛисты",      Ложь);
		ПараметрыРаздел9.Вставить("ДополнительныеЛистыЗаТекущийПериод",  Ложь);
		ПараметрыРаздел9.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
		ПараметрыРаздел9.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыРаздел9.Вставить("ВыводитьТолькоДопЛисты",              Ложь);
		ПараметрыРаздел9.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
		ПараметрыРаздел9.Вставить("ВключатьОбособленныеПодразделения",   Истина);
		ПараметрыРаздел9.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());
		ПараметрыРаздел9.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
		ПараметрыРаздел9.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
		ПараметрыРаздел9.Вставить("ВыводитьПродавцовПоАвансам",          Ложь);
		
		ПараметрыРаздел9.Вставить("СписокОрганизаций");
		ПараметрыРаздел9.Вставить("ДатаФормированияДопЛиста");
		ПараметрыРаздел9.Вставить("ЗаполнениеДокумента", Ложь);
		ПараметрыРаздел9.Вставить("ЗаполнениеДекларации", Истина);
		
		ДанныеДляПроверкиКонтрагентов = Новый Структура;
		ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
		ПараметрыРаздел9.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		Отчеты.КнигаПродаж2014.СформироватьОтчет(ПараметрыРаздел9, АдресХранилища);
		//<=
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел9")
			И РезультатВыполнения.СписокСформированныхЛистов.Количество() > 0 Тогда
			
			СтруктураДанныхРаздел9 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел9.Записи = РезультатВыполнения.ТаблицаРаздел9;
			СтруктураДанныхРаздел9.Итоги = РезультатВыполнения.ИтогиРаздел9;
			Раздел9.Вставить("Данные", СтруктураДанныхРаздел9);
			Раздел9.Вставить("Отчет", РезультатВыполнения.СписокСформированныхЛистов[0].Значение);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел9_Прил1") Тогда 
		
		// Сведения из дополнительных листов книги продаж
		
		Раздел91 = Контейнер.Раздел9_Прил1;
		
		ПараметрыРаздел91 = Новый Структура;
		ПараметрыРаздел91.Вставить("Организация", ПараметрыОтчета.Организация);
		
		ПараметрыРаздел91.Вставить("НачалоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел91.Вставить("КонецПериода",
			?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
		
		ПараметрыРаздел91.Вставить("НачалоНалоговогоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздел91.Вставить("КонецНалоговогоПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);

		ПараметрыРаздел91.Вставить("ФормироватьДополнительныеЛисты",      Истина);
		ПараметрыРаздел91.Вставить("ДополнительныеЛистыЗаТекущийПериод",  Истина);
		ПараметрыРаздел91.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
		ПараметрыРаздел91.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыРаздел91.Вставить("ВыводитьТолькоДопЛисты",              Истина);
		ПараметрыРаздел91.Вставить("ВыводитьПокупателейПоАвансам",        Ложь);
		ПараметрыРаздел91.Вставить("ВключатьОбособленныеПодразделения",   Истина);
		ПараметрыРаздел91.Вставить("СписокСформированныхЛистов",          Новый СписокЗначений());
		ПараметрыРаздел91.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
		ПараметрыРаздел91.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
		ПараметрыРаздел91.Вставить("ВыводитьПродавцовПоАвансам",          Ложь);
		
		ПараметрыРаздел91.Вставить("СписокОрганизаций");
		ПараметрыРаздел91.Вставить("ДатаФормированияДопЛиста");
		ПараметрыРаздел91.Вставить("ЗаполнениеДокумента", Ложь);
		ПараметрыРаздел91.Вставить("ЗаполнениеДекларации", Истина);
		
		ДанныеДляПроверкиКонтрагентов = Новый Структура;
		ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
		ПараметрыРаздел91.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
			
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		//Обновление рег. Отчетности на бух. Корп 3.0.38.39
		Отчеты.КнигаПродаж2014.СформироватьОтчет(ПараметрыРаздел91, АдресХранилища);
		//<=
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел91")
			И РезультатВыполнения.Свойство("ТабличныйДокументРаздел91") Тогда
			
			СтруктураДанныхРаздел91 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел91.Записи = РезультатВыполнения.ТаблицаРаздел91;
			СтруктураДанныхРаздел91.Итоги = РезультатВыполнения.ИтогиРаздел91;
			Раздел91.Вставить("Данные", СтруктураДанныхРаздел91);
			Раздел91.Вставить("Отчет", РезультатВыполнения.ТабличныйДокументРаздел91);

		КонецЕсли;
			
	КонецЕсли;
	
#КонецОбласти

#Область РазделыС10По11
	
	Если Контейнер.Свойство("Раздел10")
		И Контейнер.Свойство("Раздел11") Тогда
	
		Раздел10 = Контейнер.Раздел10;
		Раздел11 = Контейнер.Раздел11;
		
		ПараметрыРаздела = Новый Структура;
		ПараметрыРаздела.Вставить("Организация",                         ПараметрыОтчета.Организация);
		ПараметрыРаздела.Вставить("НалоговыйПериод",                     ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		ПараметрыРаздела.Вставить("ГруппироватьПоКонтрагентам",          Ложь);
		ПараметрыРаздела.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
		ПараметрыРаздела.Вставить("КонтрагентДляОтбора",                 Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыРаздела.Вставить("ОтбиратьПоКонтрагенту",               Ложь);
		ПараметрыРаздела.Вставить("ВключатьОбособленныеПодразделения",   Истина);
		ПараметрыРаздела.Вставить("ЗаполнениеДекларации",                Истина);
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		
		ДанныеДляПроверкиКонтрагентов = Новый Структура;
		ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", Ложь);
		ПараметрыРаздела.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыРаздела, АдресХранилища);
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел10")
			И РезультатВыполнения.Свойство("ТабличныйДокументРаздел10") Тогда
			СтруктураДанныхРаздел10 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел10.Записи = РезультатВыполнения.ТаблицаРаздел10;
			Раздел10.Вставить("Данные", СтруктураДанныхРаздел10);
			Раздел10.Вставить("Отчет", РезультатВыполнения.ТабличныйДокументРаздел10);
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ТаблицаРаздел11")
			И РезультатВыполнения.Свойство("ТабличныйДокументРаздел11") Тогда
			СтруктураДанныхРаздел11 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел11.Записи = РезультатВыполнения.ТаблицаРаздел11;
			Раздел11.Вставить("Данные", СтруктураДанныхРаздел11);
			Раздел11.Вставить("Отчет", РезультатВыполнения.ТабличныйДокументРаздел11);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область Раздел12
	
	Если Контейнер.Свойство("Раздел12") Тогда
		
		Раздел12 = Контейнер.Раздел12;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер КАК НомерСчетаФактуры,
		|	СчетФактураВыданный.Дата КАК ДатаСчетаФактуры,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.КППКонтрагента ПОДОБНО """"
		|			ТОГДА СчетФактураВыданный.Контрагент.КПП
		|		ИНАЧЕ СчетФактураВыданный.КППКонтрагента
		|	КОНЕЦ КАК КППпокупателя,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетФактураВыданный.Контрагент.НаименованиеПолное, 1, 250) ПОДОБНО """"
		|			ТОГДА СчетФактураВыданный.Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(СчетФактураВыданный.Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК КонтрагентНаименование,
		|	СчетФактураВыданный.СуммаНДСДокумента КАК СумНалПокуп,
		|	СчетФактураВыданный.СуммаДокумента КАК СтоимТовСНалВс,
		|	СчетФактураВыданный.СуммаДокумента - СчетФактураВыданный.СуммаНДСДокумента КАК СтоимТовБНалВс,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК ОКВ,
		|	СчетФактураВыданный.Ссылка КАК СчетФактураРасшифровка,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеВалюты
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	НЕ СчетФактураВыданный.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
		|	И СчетФактураВыданный.СуммаНДСДокумента > 0
		|	И СчетФактураВыданный.Организация В(&Организация)
		|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (&ОрганизацияНеПлательшикНДС
		|			ИЛИ &ОрганизацияОсвобожденаОтУплатыНДС)
		|	И СчетФактураВыданный.Проведен
		|	И НЕ СчетФактураВыданный.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОрганизацияНеПлательшикНДС", ОрганизацияНеПлательшикНДС);
		Запрос.УстановитьПараметр("ОрганизацияОсвобожденаОтУплатыНДС", ОрганизацияОсвобожденаОтУплатыНДС); 
		
		Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		ТаблицаРаздел12 = Новый ТаблицаЗначений;
		
		ТаблицаРаздел12.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
		ТаблицаРаздел12.Колонки.Добавить("НомСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		ТаблицаРаздел12.Колонки.Добавить("ДатаСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		ТаблицаРаздел12.Колонки.Добавить("СвПокуп");
		ТаблицаРаздел12.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
		ТаблицаРаздел12.Колонки.Добавить("СтоимТовБНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		ТаблицаРаздел12.Колонки.Добавить("СумНалПокуп", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		ТаблицаРаздел12.Колонки.Добавить("СтоимТовСНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаСчетовФактур = Результат.Выгрузить();
				
			ТабличныйДокументРаздел12 = Новый ТабличныйДокумент;
			МакетРаздел12 = ПолучитьОбщийМакет("СведенияИзСчетовФактур");
			
			ОбластьШапка = МакетРаздел12.ПолучитьОбласть("Шапка");
			ТабличныйДокументРаздел12.Вывести(ОбластьШапка);
			
			ОбластьСтрока = МакетРаздел12.ПолучитьОбласть("Строка");
			
			НомерСтроки = 1;
			
			Для Каждого СтрокаВыборки Из ТаблицаСчетовФактур Цикл
				
				СтрокаРаздела12 = ТаблицаРаздел12.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаздела12, СтрокаВыборки);
				
				Если НЕ ПустаяСтрока(СтрокаВыборки.ИННпокупателя) Тогда
					
					СтруктураСвПок = Новый Структура();
					Если СтрДлина(СтрокаВыборки.ИННпокупателя) > 10 Тогда
						СтруктураСвПок.Вставить("ИННФЛ", СтрокаВыборки.ИННпокупателя);
					Иначе
						СтруктураСвПок.Вставить("ИННЮЛ", СтрокаВыборки.ИННпокупателя);
						СтруктураСвПок.Вставить("КПП", СтрокаВыборки.КППпокупателя);
					КонецЕсли;
					
					СтрокаРаздела12.СвПокуп = СтруктураСвПок;
					
				КонецЕсли;
				
				СтрокаРаздела12.НомСчФ   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаВыборки.НомерСчетаФактуры, Истина, Истина);
				СтрокаРаздела12.ДатаСчФ  = Формат(СтрокаВыборки.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаРаздела12.НомерПор = НомерСтроки;
				
				ОбластьСтрока.Параметры.Ном = НомерСтроки;
				ОбластьСтрока.Параметры.НомерДата = "" + СтрокаРаздела12.НомСчФ + ";" +  СтрокаРаздела12.ДатаСчФ;
				ОбластьСтрока.Параметры.КонтрагентНаименование = СтрокаВыборки.КонтрагентНаименование;
				ОбластьСтрока.Параметры.КонтрагентИННКПП = "" + СтрокаВыборки.ИННпокупателя 
					+ ?(ЗначениеЗаполнено(СтрокаВыборки.КППпокупателя), "/" + Строка(СтрокаВыборки.КППпокупателя), "");
				ОбластьСтрока.Параметры.Валюта = СокрЛП(СтрокаВыборки.НаименованиеВалюты) + ", " + СтрокаВыборки.ОКВ;
				ОбластьСтрока.Параметры.СуммаДокумента = СтрокаВыборки.СтоимТовСНалВс;
				ОбластьСтрока.Параметры.СуммаНДС = СтрокаВыборки.СумНалПокуп;
				ОбластьСтрока.Параметры.СчетФактураРасшифровка = СтрокаВыборки.СчетФактураРасшифровка;
				
				ТабличныйДокументРаздел12.Вывести(ОбластьСтрока);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			СтруктураДанныхРаздел12 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел12.Записи = ТаблицаРаздел12;
			Раздел12.Вставить("Данные", СтруктураДанныхРаздел12);
			Раздел12.Вставить("Отчет", ТабличныйДокументРаздел12);
			
		Иначе
			СтруктураДанныхРаздел12 = Новый Структура("Записи,Итоги");
			СтруктураДанныхРаздел12.Записи = ТаблицаРаздел12;
			Раздел12.Вставить("Данные", СтруктураДанныхРаздел12);
			Раздел12.Вставить("Отчет", Новый ТабличныйДокумент);
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнер", Контейнер);

	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);

КонецПроцедуры

// Создает список показателей декларации по НДС, которые будут автоматически заполняться
// Для версии отчета ФормаОтчета2015Кв1
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти