
Процедура УстановитьПараметрСеансаShowNamesAndDescriptionsRUS(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ПараметрыСеанса.ShowNamesAndDescriptionsRUS = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ShowNamesAndDescriptionsRUS");	
	
	ЯзыкПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Язык;
	ПараметрыСеанса.ShowNamesAndDescriptionsRUS = ?(ЯзыкПользователя = Метаданные.Языки.Русский, Истина, Ложь);

	УстановленныеПараметры.Добавить("ShowNamesAndDescriptionsRUS");
	
КонецПроцедуры 

Функция ПолучитьUniversalTime(LocalTime, Warehouse=Неопределено) Экспорт 
	
	// Преобразуем местное время в заданном часовом поясе в универсальное время
	// Если второй параметр не указан, то используется часовой пояс сеанса
	
	Если Warehouse = Неопределено Тогда 
		Возврат УниверсальноеВремя(LocalTime, ЧасовойПоясСеанса());
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Warehouse", Warehouse);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Warehouses.City.TimeZone.Код КАК TimeZone,
	|	Warehouses.NameRus КАК WarehouseNameRus,
	|	Warehouses.City
	|ИЗ
	|	Справочник.Warehouses КАК Warehouses
	|ГДЕ
	|	Warehouses.Ссылка = &Warehouse";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.TimeZone) Тогда 
			
			Возврат УниверсальноеВремя(LocalTime, СокрЛП(Выборка.TimeZone));
			
		иначе
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда
				Сообщить("Для города '" + СокрЛП(Выборка.City) +
				"' (локации/склада '" + СокрЛП(Выборка.WarehouseNameRus) + "') не заполнен часовой пояс.
				|Пожалуйста, напишите на riet-support-ld@slb.com");
			иначе
				Сообщить("In city '" + СокрЛП(Выборка.City) +
				"' of location '" + СокрЛП(Выборка.WarehouseNameRus) + "') time-zone is empty.
				|Please contact riet-support-ld@slb.com");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		    		
	Возврат Неопределено;		
	
КонецФункции

Функция CopyWithContent(TRссылка, Multimodal = Ложь) Экспорт 
	
	TRОбъект = TRссылка.ПолучитьОбъект();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Сохраним новый Transport request
	НовыйTransportRequest = TRОбъект.Скопировать();
	НовыйTransportRequest.Дата = ТекущаяДата();
	
	Если РольДоступна("LocalDistributionSpecialist_ForNonLawsonCompanies") 
		ИЛИ РольДоступна("LocalDistributionOperator_ForNonLawsonCompanies") 
		ИЛИ РольДоступна("LocalDistributionBillingSpecialist_ForNonLawsonCompanies")
		ИЛИ РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies") Тогда  
		НовыйTransportRequest.Requestor = TRОбъект.Requestor;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НовыйTransportRequest.PayingEntity) Тогда
		НовыйTransportRequest.PayingEntity = Перечисления.PayingEntities.S;
	КонецЕсли;
	
	// { RGS AArsentev 26.07.2018 Multimodal copy
	Если Multimodal Тогда
		TRОбъект_Ссылка = TRОбъект.Ссылка;
		ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(TRОбъект_Ссылка,"RequiredDeliveryLocalTime,RequiredDeliveryUniversalTime,ReadyToShipLocalTime,ReadyToShipUniversalTime,RequestedLocalTime,RequestedUniversalTime,Specialist");
		НовыйTransportRequest.RequiredDeliveryLocalTime = ЗначенияРеквизитов.RequiredDeliveryLocalTime;
		НовыйTransportRequest.RequiredDeliveryUniversalTime = ЗначенияРеквизитов.RequiredDeliveryUniversalTime;
		
		НовыйTransportRequest.ReadyToShipLocalTime = ЗначенияРеквизитов.ReadyToShipLocalTime;
		НовыйTransportRequest.ReadyToShipUniversalTime = ЗначенияРеквизитов.ReadyToShipUniversalTime;
		
		НовыйTransportRequest.RequestedLocalTime = ЗначенияРеквизитов.RequestedLocalTime;
		НовыйTransportRequest.RequestedUniversalTime = ЗначенияРеквизитов.RequestedUniversalTime;
		
		НовыйTransportRequest.Specialist = ЗначенияРеквизитов.Specialist;
		НовыйTransportRequest.ParentTR = TRОбъект_Ссылка;
	КонецЕсли;
	// } RGS AArsentev 26.07.2018 Multimodal copy
	
	// { LGoncharova 27.11.2018 S-I-0006255
	НовыйTransportRequest.ДополнительныеСвойства.Вставить("НеПроверятьReasonForTR", Истина);
	// } LGoncharova 27.11.2018 S-I-0006255
	
	НовыйTransportRequest.Записать();
	
	// Скопируем все товары и грузовые места
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("TransportRequest", TRОбъект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Items.Ссылка
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|ГДЕ
		|	Items.TransportRequest = &TransportRequest
		|	И НЕ Items.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Parcels.Ссылка,
		|	Parcels.Код
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.TransportRequest = &TransportRequest
		|	И НЕ Parcels.ПометкаУдаления";	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Скопируем все товары, заодно запомним соответствие старых и новых товаров
	СоответствиеСтарыхИНовыхТоваров = Новый Соответствие;
	ВыборкаItems = Результаты[0].Выбрать();
	Пока ВыборкаItems.Следующий() Цикл
		
		НовыйТоварОбъект = ВыборкаItems.Ссылка.Скопировать();
		НовыйТоварОбъект.TransportRequest = НовыйTransportRequest.Ссылка;
		НовыйТоварОбъект.Записать();
		СоответствиеСтарыхИНовыхТоваров.Вставить(ВыборкаItems.Ссылка, НовыйТоварОбъект.Ссылка);		
		
	КонецЦикла;
	
	// Скопируем все не отмененные грузовые места
	ВыборкаParcels = Результаты[1].Выбрать();
	Пока ВыборкаParcels.Следующий() Цикл
		
		НовыйParcel = ВыборкаParcels.Ссылка.Скопировать();
		НовыйParcel.Код = СтрЗаменить(НовыйParcel.Код, СокрЛП(TRОбъект.Номер), СокрЛП(НовыйTransportRequest.Номер));
		НовыйParcel.TransportRequest = НовыйTransportRequest.Ссылка;
		
		// Заменим в табличной части старые товары на новые
		ParcelItems = НовыйParcel.Детали;
		Для Каждого СтрокаТЧ Из ParcelItems Цикл	
			СтрокаТЧ.СтрокаИнвойса = СоответствиеСтарыхИНовыхТоваров[СтрокаТЧ.СтрокаИнвойса];	
		КонецЦикла;
		
		НовыйParcel.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйTransportRequest.Ссылка;
		
КонецФункции

Процедура CancelApproval (Approval) Экспорт 
	
	ApprovalОбъект = Approval.ПолучитьОбъект();
	
	ApprovalОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Функция ПолучитьCostsSumSLBUSD(Знач BaseCostsSum, Знач Currency, Знач Дата) Экспорт 
	
	Если Не ЗначениеЗаполнено(BaseCostsSum) Тогда
		Возврат BaseCostsSum;
	КонецЕсли;
	
	CurrencyUSD = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("USD");

	Если ЗначениеЗаполнено(Currency) И Currency = CurrencyUSD Тогда
		Возврат BaseCostsSum;
	КонецЕсли;
	       		
	СтруктураCurrency = ОбщегоНазначения.ПолучитьКурсВалюты(Currency, Дата);
	СтруктураCurrencyUSD = ОбщегоНазначения.ПолучитьКурсВалюты(CurrencyUSD, Дата);
	
	Возврат ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
		BaseCostsSum, Currency, CurrencyUSD, 
		СтруктураCurrency.Курс, СтруктураCurrencyUSD.Курс, 
		СтруктураCurrency.Кратность, СтруктураCurrencyUSD.Кратность); 
	
КонецФункции

Функция CreateParcelsFromHistory(Item, Ссылка, Номер) Экспорт 
	
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить("Ссылка", Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодПоИнвойсу", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Item, "КодПоИнвойсу"));
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ParcelsДетали.Ссылка,
		               |	ParcelsДетали.Ссылка.PackingType,
		               |	ParcelsДетали.Ссылка.Length,
		               |	ParcelsДетали.Ссылка.Width,
		               |	ParcelsДетали.Ссылка.DIMsUOM,
		               |	ParcelsДетали.Ссылка.SpecialHandling,
		               |	ParcelsДетали.Ссылка.HazardClass,
		               |	ParcelsДетали.Ссылка.Height
		               |ИЗ
		               |	РегистрНакопления.ImportItemsWithoutCustomsFiles.Обороты(, , , Item.КодПоИнвойсу = &КодПоИнвойсу) КАК ImportItemsWithoutCustomsFilesОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
		               |		ПО ImportItemsWithoutCustomsFilesОбороты.Item = ParcelsДетали.СтрокаИнвойса
		               |			И (НЕ ParcelsДетали.Ссылка.Отменен)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ParcelsДетали.СтрокаИнвойса.Инвойс.Дата УБЫВ"; 
		
		ЗапросParcel = новый Запрос;
		ЗапросParcel.Текст = "ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = &DOC";
		ЗапросParcel.УстановитьПараметр("DOC", Ссылка);
		Результат = ЗапросParcel.Выполнить().Выбрать();
		КолВоПарселей = Результат.Количество() + 1;		
		
		//КодПарселя = ?(СтрДлина(КолВоПарселей) = 1, "-0" + КолВоПарселей, "-" + КолВоПарселей);
		//СтруктураСвойств.Вставить("Код", СокрЛП(Номер) + КодПарселя);
		СтруктураСвойств.Вставить("Код", "");
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ExportRequest") Тогда 
		 				
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ParcelsДетали.Ссылка,
		               |	ParcelsДетали.Ссылка.PackingType,
		               |	ParcelsДетали.Ссылка.Length,
		               |	ParcelsДетали.Ссылка.Width,
		               |	ParcelsДетали.Ссылка.DIMsUOM,
		               |	ParcelsДетали.Ссылка.SpecialHandling,
		               |	ParcelsДетали.Ссылка.HazardClass,
		               |	ParcelsДетали.Ссылка.Height
		               |ИЗ
		               |	РегистрНакопления.ExportItemsWithoutCustomsFiles.Обороты(, , , Item.КодПоИнвойсу = &КодПоИнвойсу) КАК ExportItemsWithoutCustomsFilesОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
		               |		ПО ExportItemsWithoutCustomsFilesОбороты.Item = ParcelsДетали.СтрокаИнвойса
		               |			И (НЕ ParcelsДетали.Ссылка.Отменен)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ParcelsДетали.СтрокаИнвойса.ExportRequest.Дата УБЫВ"; 
		
		ЗапросParcel = новый Запрос;
		ЗапросParcel.Текст = "ВЫБРАТЬ
		|	Parcels.Ссылка
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.ExportRequest = &ExportRequest";
		ЗапросParcel.УстановитьПараметр("ExportRequest", Ссылка);
		Результат = ЗапросParcel.Выполнить().Выбрать();
		КолВоПарселей = Результат.Количество() + 1;		
		
		КодПарселя = ?(СтрДлина(КолВоПарселей) = 1, "-0" + КолВоПарселей, "-" + КолВоПарселей);
		
		СтруктураСвойств.Вставить("Код", СокрЛП(Номер) + КодПарселя);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.TransportRequest") Тогда
		
		Запрос.УстановитьПараметр("Stage", Перечисления.TransportRequestStages.CompletelyDelivered);
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.Ссылка,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.PackingType КАК PackingType,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.Length КАК Length,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.Width КАК Width,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.Height КАК Height,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.DIMsUOM КАК DIMsUOM,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.SpecialHandling КАК SpecialHandling,
		               |	ParcelsOfTransportRequestsWithoutShipment.Parcel.HazardClass КАК HazardClass
		               |ИЗ
		               |	РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests,
		               |	РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment КАК ParcelsOfTransportRequestsWithoutShipment
		               |ГДЕ
		               |	StagesOfTransportRequests.Stage = &Stage
		               |	И ParcelsOfTransportRequestsWithoutShipment.Parcel.Детали.СтрокаИнвойса.КодПоИнвойсу = &КодПоИнвойсу
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ParcelsOfTransportRequestsWithoutShipment.Период УБЫВ";

		ЗапросParcel = новый Запрос;
		ЗапросParcel.Текст = "ВЫБРАТЬ
		|	Parcels.Ссылка
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.TransportRequest = &TransportRequest";
		ЗапросParcel.УстановитьПараметр("TransportRequest", Ссылка);
		Результат = ЗапросParcel.Выполнить().Выбрать();
		КолВоПарселей = Результат.Количество() + 1;		
		
		КодПарселя = ?(СтрДлина(КолВоПарселей) = 1, "-0" + КолВоПарселей, "-" + КолВоПарселей);
		
		СтруктураСвойств.Вставить("Код", СокрЛП(Номер) + КодПарселя);
		
	иначе 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез <> Неопределено Тогда
		
		Если Рез.Количество() > 0 тогда
			         			 
			СтруктураСвойств.Вставить("PackingType",Рез[0].PackingType);
			СтруктураСвойств.Вставить("Length",Рез[0].Length);
			СтруктураСвойств.Вставить("Width",Рез[0].Width);
			СтруктураСвойств.Вставить("Height",Рез[0].Height);
			СтруктураСвойств.Вставить("DIMsUOM",Рез[0].DIMsUOM);
			СтруктураСвойств.Вставить("SpecialHandling",Рез[0].SpecialHandling);
			СтруктураСвойств.Вставить("HazardClass",Рез[0].HazardClass);
			
			Возврат СтруктураСвойств;
			
		иначе
			
			Message = New UserMessage();
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				Message.Text = "Совпадений по артикулу не найдено, нужно создать грузовое место вручную.";
			иначе
				Message.Text = "Failed to find current part number, you need to create parcel manually.";
			КонецЕсли;
			
			Message.Message();
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;   	
		
КонецФункции  // } RGS AArsentev 06.09.2016 12:25:41 - S-I-0001784

////////////////////////////////////////////////////////////
// ФОНОВЫЕ ЗАДАНИЯ

Процедура ОбновитьCatalogИзItems(Trip) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Trip", Trip);

	Запрос.Текст = "ВЫБРАТЬ
	               |	Catalog.Ссылка КАК Catalog,
	               |	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNumber,
	               |	ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК DescriptionEng,
	               |	ParcelsДетали.СтрокаИнвойса.DescriptionRus КАК DescriptionRus
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Catalog КАК Catalog
	               |			ПО ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу = Catalog.Код
	               |		ПО TripNonLawsonCompaniesParcels.Parcel = ParcelsДетали.Ссылка
	               |ГДЕ
	               |	TripNonLawsonCompaniesParcels.Ссылка = &Trip";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСозданныхЭлементов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
	
		Если ЗначениеЗаполнено(Выборка.Catalog) 
			Или МассивСозданныхЭлементов.Найти(СокрЛП(Выборка.PartNumber)) <> Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		НовыйЭлементCatalogа = Справочники.Catalog.СоздатьЭлемент();
		НовыйЭлементCatalogа.Код = СокрЛП(Выборка.PartNumber);
		НовыйЭлементCatalogа.DescriptionEng = СокрЛП(Выборка.DescriptionEng);
		НовыйЭлементCatalogа.DescriptionRus = СокрЛП(Выборка.DescriptionRus);
		НовыйЭлементCatalogа.Записать();
		
		МассивСозданныхЭлементов.Добавить(СокрЛП(Выборка.PartNumber));
			
	КонецЦикла; 	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ
 
Процедура ОбновитьPlannedArrivalVsCurrentDateВTripsNonLawson() Экспорт
	
	// Current date > Planned Arrival to Destination + 14 days – red
	// Current date > Planned Arrival to Destination + 7 days  – orange
	// Current date > Planned Arrival to Destination + 2 days  – yellow
	  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	TripNonLawsonCompaniesStops.Ссылка КАК Trip,
		|	TripNonLawsonCompaniesStops.PlannedArrivalUniversalTime КАК PlannedArrivalUTM
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
		|ГДЕ
		|	TripNonLawsonCompaniesStops.Ссылка.Closed = ДАТАВРЕМЯ(1, 1, 1)
		|	И TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination)
		|	И НЕ TripNonLawsonCompaniesStops.Ссылка.ПометкаУдаления";
		
	ВыборкаNonClosed = Запрос.Выполнить().Выбрать();
	Пока ВыборкаNonClosed.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаNonClosed.PlannedArrivalUTM) Тогда 
			PlannedArrivalVsCurrentDate = 0;
		иначе
			PlannedArrivalVsCurrentDate = (НачалоДня(УниверсальноеВремя(ТекущаяДата())) - НачалоДня(ВыборкаNonClosed.PlannedArrivalUTM)) / 86400;
		КонецЕсли;
				
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		TripОбъект = ВыборкаNonClosed.Trip.ПолучитьОбъект();
		TripОбъект.PlannedArrivalVsCurrentDate = PlannedArrivalVsCurrentDate;
		TripОбъект.ОбменДанными.Загрузка = Истина;
		TripОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	   		
КонецПроцедуры

Процедура SendDetailedInformationOnTransportRequests() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;
	
	// Подготовим почту для отправки сообщений
	ИнтернетПочтовыйПрофиль = ImportExportСервер.ПолучитьИнтернетПочтовыйПрофильДляОтправки();			
	ИнтернетПочта = Новый ИнтернетПочта;
	ИнтернетПочта.Подключиться(ИнтернетПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	LocalDistributionSettingsForNonLawsonCompaniesСрезПоследних.ManagementAccountantSubscription,
	               |	LocalDistributionSettingsForNonLawsonCompaniesСрезПоследних.Company
	               |ИЗ
	               |	РегистрСведений.LocalDistributionSettingsForNonLawsonCompanies.СрезПоследних(&ТекДата, ) КАК LocalDistributionSettingsForNonLawsonCompaniesСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ManagementAccountantSubscription) Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			FormAndSendDetailedInformationOnTransportRequests(ИнтернетПочта, ИнтернетПочтовыйПрофиль.ПользовательSMTP, 
				Выборка.ManagementAccountantSubscription, Выборка.Company);
		Исключение
			ЗаписьЖурналаРегистрации(
				"Failed to send Detailed information on transport requests",
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.ManagementAccountantSubscription,
				ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	         	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура FormAndSendDetailedInformationOnTransportRequests(ИнтернетПочта, АдресОтправителя, EMails, Company)
	
	Вложения = Новый Массив();
	МассивФайлов = Новый Массив();
	
	ТабДок = Новый ТабличныйДокумент;
		
	ОтчетОбъект = Отчеты.DetailedInformationOnTransportRequests.Создать();

	НастройкиПользователя = ОтчетОбъект.КомпоновщикНастроек;
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = НастройкиПользователя.Настройки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ВариантыНастроек = СхемаКомпоновкиДанных.ВариантыНастроек; 
	Для Каждого ВариантНастроек ИЗ ВариантыНастроек Цикл
		Если ВариантНастроек.Имя = "Main" Тогда 
			ВариантНастроекMain = ВариантНастроек.Настройки;
			КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастроекMain);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НачалоПериода = НачалоДня(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-2)));
	КонецПериода = КонецДня(КонецМесяца(ТекущаяДата()));
	
	ПараметрыДанных = ВариантНастроекMain.ПараметрыДанных.Элементы;
	ПараметрPeriodOfTransportRequests = ПараметрыДанных.Найти("PeriodOfTransportRequests");
	ПараметрPeriodOfTransportRequests.Значение = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	PeriodOfTransportRequests = ПараметрPeriodOfTransportRequests.Значение;
			
	ПараметрыДанных.Найти("Company").Значение = Company;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ВариантНастроекMain, , ,
		Тип("ГенераторМакетаКомпоновкиДанных"),);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ТабДок = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
	
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	
	ИмяФайла = ВременныйФайл.Путь + "DetailedInformationOnTransportRequests_" + Формат(ТекущаяДата(), "ДФ=""ггггММдд""") + ".xlsx";
	
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;

	МассивФайлов.Добавить(ИмяФайла);
	Вложения.Добавить(ImportExportСервер.СформироватьЗипАрхивФайлов(ИмяФайла, МассивФайлов));
	
	ImportExportСервер.ПослатьПисьмо(ИнтернетПочта, АдресОтправителя,
		EMails,
		"Detailed information on transport requests", 
		"Please find attached file with list of detailed information on transport requests for period "+ 
			Формат(НачалоПериода, "ДФ=""ггггММдд""") +" - "+ Формат(КонецПериода, "ДФ=""ггггММдд""")+".
			|This notification is sent every month.",
		, Вложения, "riet-support@slb.com");
		
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	          			
КонецПроцедуры

// { RGS AArsentev 31.08.2016 16:35:54 - S-I-0001827 
Процедура ФормированиеЗадачДляОператоров() Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ГрафикУведомленийДляTrip.Trip,
	//|	ГрафикУведомленийДляTrip.Период КАК Период,
	//|	ГрафикУведомленийДляTrip.Trip.Operator КАК Operator
	//|ИЗ
	//|	РегистрСведений.ГрафикУведомленийДляTrip КАК ГрафикУведомленийДляTrip
	//|ГДЕ
	//|	ГрафикУведомленийДляTrip.Период <= &Период
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Период УБЫВ";
	//Запрос.УстановитьПараметр("Период", ТекущаяДата());
	//Результат = Запрос.Выполнить().Выгрузить();
	//Трипы = Результат.Скопировать();
	//Трипы.Свернуть("Trip,Operator");
	//Для Каждого Трип из Трипы Цикл 
	//	НачатьТранзакцию();
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Trip", Трип.Trip);
	//	Уведомления = Результат.Скопировать(Отбор);
	//	ВремяДляЗадачи = Уведомления[0].Период; //Сохраняем время для формирования задачи
	//	
	//	// чистим регистр от задач которые сформированы, если есть
	//	Для каждого Элемент из Уведомления Цикл 
	//		НаборЗаписей = РегистрыСведений.ГрафикУведомленийДляTrip.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Trip.Установить(Элемент.Trip);
	//		НаборЗаписей.Отбор.Период.Установить(Элемент.Период); 
	//		НаборЗаписей.Записать();
	//	КонецЦикла;
	//	
	//	// { RGS AArsentev 27.01.2017 13:20:55 - S-I-0002442
	//	Удален = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Трип.Trip, "ПометкаУдаления");
	//	Если Удален тогда
	//		ЗафиксироватьТранзакцию();
	//		Продолжить
	//	КонецЕсли;
	//	// } RGS AArsentev 27.01.2017 13:20:55 - S-I-0002442
	//	
	//	//Создадим задачи на следующий день, если закончились, но поставка не закрыта
	//	СоздадимГрафикУведомленияНаДень(Трип.Trip);
	//	
	//	//формируем задачу по операторам
	//	Задача = Задачи.МестоположениеПоставки.СоздатьЗадачу();
	//	Задача.Trip = Трип.Trip;
	//	Задача.Дата = ТекущаяДата();
	//	Задача.Critical = ПроверитьETA(Трип.Trip);
	//	Задача.Наименование = "Местоположение "+Трип.Trip;
	//	Если ВремяДляЗадачи <= НачалоДня(Текущаядата()) Тогда
	//		Задача.Выполнена = Истина;
	//	Иначе
	//		ЗаписьЖурналаРегистрации(
	//		"Значения переменных: ТекДата - " + ТекущаяДата() + ", ВремяДляЗадачи - " + ВремяДляЗадачи + "",
	//		УровеньЖурналаРегистрации.Информация,
	//		Метаданные.Задачи.МестоположениеПоставки,
	//		,
	//		ОписаниеОшибки());
	//	КонецЕсли;
	//	
	//	Попытка
	//		Задача.Записать();
	//	Исключение
	//		ЗаписьЖурналаРегистрации(
	//		"Ошибка в формировании регламентного задания",
	//		УровеньЖурналаРегистрации.Предупреждение,
	//		Метаданные.Задачи.МестоположениеПоставки,
	//		,
	//		ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//	ЗафиксироватьТранзакцию();
	//	
	//КонецЦикла;
	
	//Выполним старые задачи
	
	//Отберем все старые задачи
	//ЗапросЗадачи = Новый Запрос;
	//ЗапросЗадачи.Текст = "ВЫБРАТЬ
	//|	МестоположениеПоставки.Ссылка КАК Ссылка,
	//|	МестоположениеПоставки.Trip КАК Trip,
	//|	МестоположениеПоставки.Дата
	//|ИЗ
	//|	Задача.МестоположениеПоставки КАК МестоположениеПоставки
	//|ГДЕ
	//|	НЕ МестоположениеПоставки.Выполнена
	//|	И МестоположениеПоставки.Trip В
	//|			(ВЫБРАТЬ
	//|				TripNonLawsonCompaniesStops.Ссылка.Ссылка КАК Ссылка
	//|			ИЗ
	//|				Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	//|			ГДЕ
	//|				TripNonLawsonCompaniesStops.ActualArrivalLocalTime < &Период
	//|				И TripNonLawsonCompaniesStops.Type = &Type)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	МестоположениеПоставки.Дата УБЫВ";
	//
	//ЗапросЗадачи.УстановитьПараметр("Период", ТекущаяДата());
	//ЗапросЗадачи.УстановитьПараметр("Type", Перечисления.StopsTypes.Destination);
	//
	//РезультатЗадачи = ЗапросЗадачи.Выполнить().Выгрузить();
	////свернем по трипам
	//Трипы = РезультатЗадачи.Скопировать();
	//Трипы.Свернуть("Trip");
	//
	//Для Каждого Трип из Трипы Цикл
	//	
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Trip", Трип.Trip);
	//	ЗадачиПоТрипам = РезультатЗадачи.Скопировать(Отбор);
	//	ЗадачиПоТрипам.Сортировать("Дата Возр");
	//	Количество = ЗадачиПоТрипам.Количество();
	//	ид = 1;
	//	//Выполняем все, что меньше сегодня
	//	Для Каждого ЗадачаПоТрипу из ЗадачиПоТрипам Цикл
	//		Если ЗадачаПоТрипу.Дата < НачалоДня(ТекущаяДата()) Тогда
	//			Уведомление = ЗадачаПоТрипу.Ссылка.ПолучитьОбъект();
	//			Уведомление.Выполнена = Истина;
	//			Уведомление.Записать();
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МестоположениеПоставки.Ссылка,
	|	МестоположениеПоставки.Trip,
	|	МестоположениеПоставки.НачалоПериодаНотификации,
	|	МестоположениеПоставки.КонецПериодаНотификации,
	|	МестоположениеПоставки.Trip.MOT
	|ИЗ
	|	Задача.МестоположениеПоставки КАК МестоположениеПоставки
	|ГДЕ
	|	НЕ МестоположениеПоставки.Выполнена
	|	И НЕ МестоположениеПоставки.ПометкаУдаления
	|	И НЕ МестоположениеПоставки.Trip.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НеобходимоЗакрытьЗадачу = ПроверитьДатыDestination(Результат.Trip);
		
		Если НеобходимоЗакрытьЗадачу Тогда
			Уведомление = Результат.Ссылка.ПолучитьОбъект();
			Уведомление.Выполнена = Истина;
			Уведомление.Записать();
		ИначеЕсли Результат.КонецПериодаНотификации < ТекущаяДата() Тогда
			СдвигЧасов = ПолучимСдвигПоMOT(Результат.TripMOT);
			Уведомление = Результат.Ссылка.ПолучитьОбъект();
			Уведомление.НачалоПериодаНотификации = Результат.КонецПериодаНотификации;
			Уведомление.КонецПериодаНотификации = Результат.КонецПериодаНотификации + СдвигЧасов;
			Попытка
				Уведомление.Critical = ОпределитьRDD(Результат.Trip);
			Исключение
				Уведомление.Critical = Ложь;
			КонецПопытки;
			Уведомление.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// { RGS AArsentev 21.05.2018 S-I-0005195
	ПроверкаОчередиПочтовыхСообщений();
	// } RGS AArsentev 21.05.2018 S-I-0005195
		
КонецПроцедуры // } RGS AArsentev 31.08.2016 16:35:54 - S-I-0001827

////////////////////////////////////////////////////////////
// ПЕЧАТЬ

Функция ПолучитьКартинкуПодписи(Specialist)  Экспорт 
	
	УстановитьПривилегированныйРежим(Истина); 
	
	КартинкаПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Specialist, "КартинкаПодписи");
	
	Если ЗначениеЗаполнено(КартинкаПодписи) Тогда 
		Возврат ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(КартинкаПодписи);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////
// ШтрихКод

Процедура СохранитьШтрихКод(Trip, ШтрихКод) Экспорт
	
	НаборЗаписей = РегистрыСведений.BarcodeOfTrip.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Trip.Значение		= Trip;
	НаборЗаписей.Отбор.Trip.Использование	= Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Trip	= Trip;
	НоваяЗапись.Barcode	= ШтрихКод;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьШтрихКод(Trip) Экспорт
	
	Если Не ЗначениеЗаполнено(Trip) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ШтрихКодСформирован(Trip) Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
		СлучайноеЧисло = Цел(ГСЧ.СлучайноеЧисло(1));
		
		НовыйШтрихКод = "" + Формат(СлучайноеЧисло, "ЧЦ=12; ЧВН=; ЧГ=0");
		НовыйШтрихКод = НовыйШтрихКод + КонтрольныйСимволEAN(НовыйШтрихКод);
		
		Пока Не ШтрихКодУникальный(НовыйШтрихКод) Цикл

			ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
			СлучайноеЧисло = Цел(ГСЧ.СлучайноеЧисло(1));
			
			НовыйШтрихКод = "" + Формат(СлучайноеЧисло, "ЧЦ=12; ЧВН=; ЧГ=0");
			НовыйШтрихКод = НовыйШтрихКод + КонтрольныйСимволEAN(НовыйШтрихКод);
			
		КонецЦикла;	
		
		СохранитьШтрихКод(Trip, НовыйШтрихКод);
		
	КонецЕсли;	

КонецПроцедуры

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип = 13) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

Функция ШтрихКодСформирован(Trip) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	BarcodeOfTrip.Trip,
	|	BarcodeOfTrip.Barcode
	|ИЗ
	|	РегистрСведений.BarcodeOfTrip КАК BarcodeOfTrip
	|ГДЕ
	|	BarcodeOfTrip.Trip = &Trip";
	
	Запрос.УстановитьПараметр("Trip", Trip);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ШтрихКодУникальный(ШтрихКод) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	BarcodeOfTrip.Trip,
	|	BarcodeOfTrip.Barcode
	|ИЗ
	|	РегистрСведений.BarcodeOfTrip КАК BarcodeOfTrip
	|ГДЕ
	|	BarcodeOfTrip.Barcode = &Barcode";
	
	Запрос.УстановитьПараметр("Barcode", ШтрихКод);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
	КонецЕсли;
	
	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;

	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	
	Если ПараметрыШтрихкода.Свойство("УголПоворота") Тогда
		ВнешняяКомпонента.УголПоворота = ПараметрыШтрихкода.УголПоворота;
	Иначе
		ВнешняяКомпонента.УголПоворота = 0;
	КонецЕсли;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция выполняет подключение внешней компоненты и ее первоначальную настройку.
// Возвращаемое значение: НЕОПРЕДЕЛЕНО - компоненту не удалось загрузить.
Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодов", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		// Если в системе установлен шрифт Tahoma.
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") = Истина Тогда
			// Выбираем его как шрифт для формирования картинки.
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			// Шрифт Tahoma в системе отсутствует.
			// Обойдем все доступные компоненте шрифты.
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте.
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штрихкода.
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Установим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкода = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкода = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода= "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов.
		Если КодСимвола(Штрихкод, 1) = 40 Тогда
			ТипШтрихкода = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Пользователи web DB

Функция НайтиПользователяWebDBПоПоставке(Trip) Экспорт
	
	ПользовательWebDB = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиWebDB.Ссылка
	|ИЗ
	|	Справочник.ПользователиWebDB КАК ПользователиWebDB
	|ГДЕ
	|	ПользователиWebDB.Trip = &Trip
	|	И НЕ ПользователиWebDB.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Trip", Trip);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПользовательWebDB = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПользовательWebDB;
	
КонецФункции

Процедура СоздатьПользователяWebDB(Trip) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	BarcodeOfTrip.Trip,
	|	BarcodeOfTrip.Barcode
	|ИЗ
	|	РегистрСведений.BarcodeOfTrip КАК BarcodeOfTrip
	|ГДЕ
	|	BarcodeOfTrip.Trip = &Trip";
	
	Запрос.УстановитьПараметр("Trip", Trip);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПользовательWebDB = НайтиПользователяWebDBПоПоставке(Trip);
		Если ЗначениеЗаполнено(ПользовательWebDB) Тогда
			СпрОбъект = ПользовательWebDB.ПолучитьОбъект();
		Иначе
			СпрОбъект = Справочники.ПользователиWebDB.СоздатьЭлемент();
		КонецЕсли;
		
		СпрОбъект.Код			= Выборка.Barcode;
		СпрОбъект.Наименование	= Выборка.Barcode;
		СпрОбъект.Trip			= Trip;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден шрих-код.'; en = 'Barcode could not be found.'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// { RGS AArsentev 29.08.2016 12:30:43 - S-I-0001830 
&НаСервере
Функция OracleCoding(Company, AcquisitionCost, Recharge, ProductLineКод, CostCenterКод, Trip, Парам = Неопределено) Экспорт
	
	Если Парам = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Trip) Тогда
			Возврат	"";
		КонецЕсли;
	КонецЕсли;
	
	Если СокрЛП(Company) = "SLI-SMI RU" Тогда
		
		CO = "3840";		
		CC = Сред(СокрЛП(CostCenterКод), 2);
		BL = СокрЛП(ProductLineКод);
		
		Если СокрЛП(ProductLineКод) = "100" ИЛИ СокрЛП(ProductLineКод) = "120" 
			ИЛИ СокрЛП(ProductLineКод) = "129" ИЛИ СокрЛП(ProductLineКод) = "119" Тогда 
			MAJ = "5110";
		ИначеЕсли СокрЛП(ProductLineКод) = "825" ИЛИ СокрЛП(ProductLineКод) = "820" ИЛИ СокрЛП(ProductLineКод) = "880"
			ИЛИ СокрЛП(ProductLineКод) = "882" ИЛИ СокрЛП(ProductLineКод) = "674" Тогда 
			MAJ = "6130";
		Иначе 
			MAJ = "0000";
		КонецЕсли;
		
		MIN = "000";			
		ICO = "0000";
		LOC = "000000";
		
		СтрокаOracleCoding = CO + "." + CC + "." + BL + "." + MAJ + "." + MIN + "." + ICO + "." + LOC + ".";

	Иначе
		
		СтрокаOracleCoding = "9660." + СокрЛП(ProductLineКод) + "." + СокрЛП(CostCenterКод) + ".";
		CO = "9660";
		BL = СокрЛП(ProductLineКод);
		CC = СокрЛП(CostCenterКод);
		ICO = "0000";
		
		Если AcquisitionCost = Перечисления.YesNo.Yes Тогда		
			
			СтрокаOracleCoding = СтрокаOracleCoding + "5233.000.0000.609999";
			MAJ = "5233";
			MIN = "000";
			LOC = "609999";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Trip) Тогда
				
				Если Recharge Тогда	
					СтрокаOracleCoding = СтрокаOracleCoding + "6252..0000.";
					MAJ = "6252";
				иначе
					СтрокаOracleCoding = СтрокаOracleCoding + "6200..0000.";
					MAJ = "6200";
				КонецЕсли;
				
				MIN = "";
				LOC = "";
				
			иначе
				
				Если Recharge Тогда	
					
					Если Trip.TypeOfTransport = Перечисления.TypesOfTransport.Rental Тогда
						
						СтрокаOracleCoding = СтрокаOracleCoding + "6252.861.0000.449102";
						MAJ = "6252";
						// { RGS ASeryakov 25/10/2017 19:38:00 PM -SI-00000168
						//MIN = "861";
						MIN = "705";
						// } RGS ASeryakov 25/10/2017 19:38:00 PM -SI-00000168
						LOC = "449102";
						
					Иначе
						
						СтрокаOracleCoding = СтрокаOracleCoding + "6252.880.0000.449102";
						MAJ = "6252";
						MIN = "880";
						LOC = "449102";
						
					КонецЕсли;
					
				иначе
					
					Если Trip.TypeOfTransport = Перечисления.TypesOfTransport.Rental Тогда
						
						СтрокаOracleCoding = СтрокаOracleCoding + "6200.861.0000.449071";
						MAJ = "6200";
						// { RGS ASeryakov 25/10/2017 19:38:00 PM -SI-00000168
						//MIN = "861";
						MIN = "705";
						// } RGS ASeryakov 25/10/2017 19:38:00 PM -SI-00000168
						LOC = "449071";
						
					Иначе
						
						СтрокаOracleCoding = СтрокаOracleCoding + "6200.705.0000.441061";
						MAJ = "6200";
						MIN = "705";
						LOC = "441061";
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Парам = 1 Тогда
		Возврат CO
	ИначеЕсли Парам = 2 Тогда
		Возврат BL
	ИначеЕсли Парам = 3 Тогда
		Возврат CC
	ИначеЕсли Парам = 4 Тогда
		Возврат MAJ
	ИначеЕсли Парам = 5 Тогда
		Возврат MIN
	ИначеЕсли Парам = 6 Тогда
		Возврат ICO
	ИначеЕсли Парам = 7 Тогда
		Возврат LOC
	Иначе
		Возврат СтрокаOracleCoding		
	КонецЕсли; 
	
			
КонецФункции // } RGS AArsentev 29.08.2016 12:30:43 - S-I-0001830 


Функция ПреобразоватьДатуВСтроку(Вариант) Экспорт
	
	ДатаЧисло = ТекущаяДата();
	
	Если Вариант = 1 Тогда 
		
		Месяц = Месяц(ДатаЧисло);
		Если Месяц = 1 Тогда 
			МесяцСтрока = "Jan";
		ИначеЕсли Месяц = 2 Тогда
			МесяцСтрока = "Feb";
		ИначеЕсли Месяц = 3 Тогда
			МесяцСтрока = "Mar";
		ИначеЕсли Месяц = 4 Тогда
			МесяцСтрока = "Apr";
		ИначеЕсли Месяц = 5 Тогда
			МесяцСтрока = "May";
		ИначеЕсли Месяц = 6 Тогда
			МесяцСтрока = "Jun";
		ИначеЕсли Месяц = 7 Тогда
			МесяцСтрока = "Jul";
		ИначеЕсли Месяц = 8 Тогда
			МесяцСтрока = "Aug";
		ИначеЕсли Месяц = 9 Тогда
			МесяцСтрока = "Sep";
		ИначеЕсли Месяц = 10 Тогда
			МесяцСтрока = "Oct";
		ИначеЕсли Месяц = 11 Тогда
			МесяцСтрока = "Nov";
		ИначеЕсли Месяц = 12 Тогда
			МесяцСтрока = "Dec";
		КонецЕсли;
		
		Год = Прав(СтрЗаменить(Год(ДатаЧисло),Символы.НПП,""),2);
		
		Значение = "" + МесяцСтрока + "-" + Год;
		Возврат "T&M Accrual " + Значение;
		
	ИначеЕсли Вариант = 2 Тогда
				
		День = День(ДатаЧисло);
		
		Месяц = Месяц(ДатаЧисло);
		Если Месяц = 1 Тогда 
			МесяцСтрока = "JAN";
		ИначеЕсли Месяц = 2 Тогда
			МесяцСтрока = "FEB";
		ИначеЕсли Месяц = 3 Тогда
			МесяцСтрока = "MAR";
		ИначеЕсли Месяц = 4 Тогда
			МесяцСтрока = "APR";
		ИначеЕсли Месяц = 5 Тогда
			МесяцСтрока = "MAY";
		ИначеЕсли Месяц = 6 Тогда
			МесяцСтрока = "JUN";
		ИначеЕсли Месяц = 7 Тогда
			МесяцСтрока = "JUL";
		ИначеЕсли Месяц = 8 Тогда
			МесяцСтрока = "AUG";
		ИначеЕсли Месяц = 9 Тогда
			МесяцСтрока = "SEP";
		ИначеЕсли Месяц = 10 Тогда
			МесяцСтрока = "OCT";
		ИначеЕсли Месяц = 11 Тогда
			МесяцСтрока = "NOV";
		ИначеЕсли Месяц = 12 Тогда
			МесяцСтрока = "DEC";
		КонецЕсли;
		
		Год = СтрЗаменить(Год(ДатаЧисло),Символы.НПП,"");
		
		Значение = "" + День + "-" + МесяцСтрока + "-" + Год;
		Возврат Значение;
		
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Процедура СоздадимГрафикУведомленияНаДень(Трип)
	
	СледДень = НачалоДня(ТекущаяДата()) + 86400;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикУведомленийДляTripСрезПоследних.Trip) КАК Trip
	|ИЗ
	|	РегистрСведений.ГрафикУведомленийДляTrip.СрезПоследних(&Период, Trip = &Trip) КАК ГрафикУведомленийДляTripСрезПоследних";
	Запрос.УстановитьПараметр("Период",КонецДня(СледДень));
	Запрос.УстановитьПараметр("Trip",Трип);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Если Результат.Trip = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	TripNonLawsonCompaniesStops.Ссылка.Ссылка КАК Ссылка,
		|	TripNonLawsonCompaniesStops.Ссылка.Operator КАК Operator,
		|	ЕСТЬNULL(ОператорыДляУведомлений.ПервоеУведомление, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервоеУведомление,
		|	ЕСТЬNULL(ОператорыДляУведомлений.ВтороеУведомление, ДАТАВРЕМЯ(1, 1, 1)) КАК ВтороеУведомление,
		|	ЕСТЬNULL(ОператорыДляУведомлений.ЧасовойПояс, 0) КАК ЧасовойПояс
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыДляУведомлений КАК ОператорыДляУведомлений
		|		ПО TripNonLawsonCompaniesStops.Ссылка.Operator = ОператорыДляУведомлений.Оператор
		|ГДЕ
		|	TripNonLawsonCompaniesStops.Type = &Type
		|	И TripNonLawsonCompaniesStops.ActualArrivalLocalTime = ДАТАВРЕМЯ(1, 1, 1)
		|	И TripNonLawsonCompaniesStops.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Трип);
		Запрос.УстановитьПараметр("Type", Перечисления.StopsTypes.Destination);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПустаяДата =Дата("01.01.0001 00:00:00");
			Если Выборка.ПервоеУведомление = ПустаяДата ИЛИ Выборка.ВтороеУведомление = ПустаяДата ИЛИ Выборка.ЧасовойПояс = 0 Тогда
				Возврат
			КонецЕсли;
			ПоясСервера = Справочники.TimeZones.НайтиПоКоду(ЧасовойПояс()).StandardTimeOffset;
			
			НаборЗаписей = РегистрыСведений.ГрафикУведомленийДляTrip.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Trip.Установить(Трип);
			
			ПервоеУведомлениеВСекундах = Выборка.ПервоеУведомление - ПустаяДата;
			ВтороеУведомлениеВСекундах = Выборка.ВтороеУведомление - ПустаяДата;
			
			Время = СледДень + ПервоеУведомлениеВСекундах; //первое уведомление
			Запись = НаборЗаписей.Добавить();
			Запись.Trip = Трип;
			Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
			
			Время = СледДень + ВтороеУведомлениеВСекундах; //второе уведомление
			Запись = НаборЗаписей.Добавить();
			Запись.Trip = Трип;
			Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
			
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПроверитьETA(Трип)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.PlannedArrivalLocalTime
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|ГДЕ
	|	TripNonLawsonCompaniesStops.Ссылка = &Ссылка
	|	И TripNonLawsonCompaniesStops.Type = &Type";
	Запрос.УстановитьПараметр("Ссылка", Трип);
	Запрос.УстановитьПараметр("Type", Перечисления.StopsTypes.Destination);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	Если Результат.PlannedArrivalLocalTime < ТекущаяДата() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ФормированиеУведомленийПоRequestedTR() Экспорт
	
	Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
		Возврат;
	КонецЕсли;

	//Список Трипов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	StagesOfTransportRequests.TransportRequest КАК TransportRequest,
	|	РАЗНОСТЬДАТ(StagesOfTransportRequests.TransportRequest.RequestedUniversalTime, &ТекущаяДатаUniversal, ДЕНЬ) КАК Просточка,
	|	StagesOfTransportRequests.TransportRequest.Номер КАК TransportRequestNo,
	|	StagesOfTransportRequests.TransportRequest.Requestor КАК Requestor,
	|	StagesOfTransportRequests.TransportRequest.Specialist КАК Specialist,
	|	StagesOfTransportRequests.TransportRequest.RequestedLocalTime КАК RequestedLocalTime,
	|	StagesOfTransportRequests.TransportRequest.RequestedUniversalTime КАК RequestedUniversalTime,
	|	StagesOfTransportRequests.TransportRequest.PickUpWarehouse.Наименование КАК PickUpWarehouse,
	|	StagesOfTransportRequests.TransportRequest.DeliverTo.Наименование КАК DeliverTo,
	|	StagesOfTransportRequests.TransportRequest.Urgency.Код КАК Urgency,
	|	ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК НаименованиеТовара
	|ИЗ
	|	РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	|		ПО StagesOfTransportRequests.TransportRequest = ParcelsДетали.Ссылка.TransportRequest
	|ГДЕ
	|	StagesOfTransportRequests.Stage = &Stage
	|	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления
	|	И НЕ ParcelsДетали.СтрокаИнвойса.TransportRequest.ПометкаУдаления
	|	И РАЗНОСТЬДАТ(StagesOfTransportRequests.TransportRequest.RequestedUniversalTime, &ТекущаяДатаUniversal, ДЕНЬ) > &КоличествоДней
	|
	|УПОРЯДОЧИТЬ ПО
	|	StagesOfTransportRequests.TransportRequest.Дата";
	Запрос.УстановитьПараметр("Stage", Перечисления.TransportRequestStages.Requested);
	Запрос.УстановитьПараметр("ТекущаяДатаUniversal", УниверсальноеВремя(ТекущаяДата()));
	
	//Получатели
	ЗапросПолучатели = Новый Запрос;
	ЗапросПолучатели.Текст = "ВЫБРАТЬ
	|	TripsNonLawsonApprovalManagers.ApprovalManager КАК ApprovalManager,
	|	TripsNonLawsonApprovalManagers.NotificationOnPending КАК NotificationOnPending,
	|	TripsNonLawsonApprovalManagers.ApprovalManager.EMail КАК EMail
	|ИЗ
	|	РегистрСведений.TripsNonLawsonApprovalManagers КАК TripsNonLawsonApprovalManagers
	|ГДЕ
	|	TripsNonLawsonApprovalManagers.NotificationOnPending <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	NotificationOnPending
	|ИТОГИ ПО
	|	NotificationOnPending";
	
	РезультатЗапроса = ЗапросПолучатели.Выполнить();
	
	ВыборкаNotificationOnPending = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаNotificationOnPending.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаNotificationOnPending.Выбрать();
		
		Получатели = "";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Получатели = Получатели + ВыборкаДетальныеЗаписи.EMail + "; ";
		КонецЦикла;
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			
			КоличествоДней = ВыборкаNotificationOnPending.NotificationOnPending;
			i = 0;
			Тема = "Not accepted Domestic transport requests, more "+ КоличествоДней + " day" + ?(КоличествоДней = 1,"","s");
			Тело = "Please find attached file with requested TRs not accepted by planners.
					|This information is sent every day at 8 am (Moscow time)";
			Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
			Результат = Запрос.Выполнить().Выгрузить();
			СписокTR = Результат.Скопировать();
			СписокTR.Свернуть("TransportRequest, TransportRequestNo, Requestor, Specialist, RequestedLocalTime, RequestedLocalTime, PickUpWarehouse, DeliverTo, RequestedUniversalTime, Urgency");
			СписокTR.Колонки.Добавить("Description");
			Для Каждого TR ИЗ СписокTR Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("TransportRequest", TR.TransportRequest);
				ДанныеTR = Результат.Скопировать(Отбор);
				МассивТовары = ДанныеTR.ВыгрузитьКолонку("НаименованиеТовара");
				TR.Description = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивТовары, ", ");
				i = i + 1;
			КонецЦикла;
			
			Если i <> 0 Тогда
				
				СписокTR.Колонки.Удалить("TransportRequest");
				ТабДок = Новый ТабличныйДокумент;
				Построитель = Новый ПостроительОтчета();
				Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(СписокTR);
				Построитель.ВыводитьЗаголовокОтчета = Ложь;
				Построитель.Вывести(ТабДок);
				
				Вложение = Новый ХранилищеЗначения(ТабДок);
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатели, Тема, Тело, Вложение, ТипТекстаПочтовогоСообщения.HTML);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
Процедура ФормированиеУведомленийПоAcceptedTR() Экспорт
	
	//Если Не РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиУведомленийTransportRequest.TransportRequest КАК TransportRequest,
	|	ГрафикиУведомленийTransportRequest.ТипУведомления КАК ТипУведомления,
	|	ГрафикиУведомленийTransportRequest.ПолучательУведомленийTransportRequest КАК Получатель,
	|	ГрафикиУведомленийTransportRequest.ДатаОтправки КАК ДатаОтправки,
	|	ГрафикиУведомленийTransportRequest.УведомлениеОтправлено КАК УведомлениеОтправлено,
	|	ГрафикиУведомленийTransportRequest.ГУИД
	|ИЗ
	|	РегистрСведений.ГрафикиУведомленийTransportRequest КАК ГрафикиУведомленийTransportRequest
	|ГДЕ
	|	ГрафикиУведомленийTransportRequest.ДатаОтправки МЕЖДУ &Дата1 И &Дата2
	|	И НЕ ГрафикиУведомленийTransportRequest.УведомлениеСоздано
	|	И НЕ ГрафикиУведомленийTransportRequest.ТрипСоздан";
	
	//Запрос.УстановитьПараметр("Дата1", ТекущаяДата()-300);
	//Запрос.УстановитьПараметр("Дата2", ТекущаяДата()+300);
	Запрос.УстановитьПараметр("Дата1", ТекущаяДата() - 1800);
	Запрос.УстановитьПараметр("Дата2", ТекущаяДата() + 1800);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			АдресRequestor	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.TransportRequest.Requestor, "EMail");
			АдресSpecialist	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.TransportRequest.Specialist, "EMail");
			Если ЗначениеЗаполнено(Выборка.TransportRequest.NotificationRecipients) Тогда 
				АдресNotificationRecipients	 = Выборка.TransportRequest.NotificationRecipients;
			КонецЕсли;
			
			Если Выборка.ТипУведомления = Перечисления.ТипыУведомленийTransportRequest.Уведомление40день Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.TransportRequest.Requestor, "Код")));
				Если ПользовательИБ <> Неопределено И ПользовательИБ.Язык = Метаданные.Языки.Русский Тогда
					Тема =  "Заявка на перевозку " + СокрЛП(Выборка.TransportRequest.Номер) + " Внимание!!!";
					Тело = "<p>Пожалуйста, согласуйте одну из предложенных опций по данной перевозке, иначе заявка на перевозку " + Выборка.TransportRequest.Номер + " будет отменена в системе в течение следующих 5 дней.</p>";
				Иначе 
					Тема = "Transport request " + СокрЛП(Выборка.TransportRequest.Номер) + " Attention!!!";
					Тело = "<p>Please confirm one of the options for this delivery otherwise Transport Request " + Выборка.TransportRequest.Номер + " is going to be automatically cancelled within next 5 days.</p>";
				КонецЕсли;
			ИначеЕсли Выборка.ТипУведомления = Перечисления.ТипыУведомленийTransportRequest.Уведомление45день Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.TransportRequest.Requestor, "Код")));
				Если ПользовательИБ <> Неопределено И ПользовательИБ.Язык = Метаданные.Языки.Русский Тогда
					Тема =  "Заявка на перевозку " + СокрЛП(Выборка.TransportRequest.Номер) + " Внимание!!!";
					Тело = "<p>Заявка " + Выборка.TransportRequest.Номер + " должна быть отменена в системе, так как ни одна из опций не была согласована.</p>";
				Иначе 
					Тема = "Transport request " + СокрЛП(Выборка.TransportRequest.Номер) + " Attention!!!";
					Тело = "<p>Transport Request " + Выборка.TransportRequest.Номер + " should be cancelled in RIET due to missing option approval.</p>";
				КонецЕсли;
			КонецЕсли;
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Выборка.TransportRequest.Ссылка);
			НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
			ПолнаяСсылка = "http://ru0149app35.dir.slb.com/RIET/#" + НавигационнаяСсылка;
			Тело = "<HTML> " + Тело + "
			|
			|<p>Link to the transport request / ссылка на заявку: " + ПолнаяСсылка + "</p>";
			
			Если Выборка.Получатель = Перечисления.ПолучателиУведомленийTransportRequest.Заявитель Тогда
				ЗарегистрироватьПочтовоеСообщение(АдресRequestor, Тема, Тело, , Перечисления.ТипыТекстовЭлектронныхПисем.HTML,,, 
							Выборка.TransportRequest, Выборка.ТипУведомления, Перечисления.ПолучателиУведомленийTransportRequest.Заявитель);
			ИначеЕсли Выборка.Получатель = Перечисления.ПолучателиУведомленийTransportRequest.СпециалистОтделаЛогистики Тогда			
			ЗарегистрироватьПочтовоеСообщение(АдресSpecialist, Тема, Тело, , Перечисления.ТипыТекстовЭлектронныхПисем.HTML,,,
						Выборка.TransportRequest, Выборка.ТипУведомления, Перечисления.ПолучателиУведомленийTransportRequest.СпециалистОтделаЛогистики);
			ИначеЕсли Выборка.Получатель = Перечисления.ПолучателиУведомленийTransportRequest.ПрочиеПолучатели Тогда			
				Если ЗначениеЗаполнено(АдресNotificationRecipients) Тогда
					ЗарегистрироватьПочтовоеСообщение(АдресNotificationRecipients, Тема, Тело, , Перечисления.ТипыТекстовЭлектронныхПисем.HTML,,, 
							Выборка.TransportRequest, Выборка.ТипУведомления, Перечисления.ПолучателиУведомленийTransportRequest.ПрочиеПолучатели);
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗарегистрироватьПочтовоеСообщение(АдресПолучателя, Тема, Тело, Вложение = Неопределено, ТипТекста = Неопределено, 
			Копия = Неопределено, АдресОтвета = Неопределено, TR, ТипУведомлений, ПолучательУведомления)
	
	ИдентификаторУникальный = Новый УникальныйИдентификатор();
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.EMailQueue.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.EMail = АдресПолучателя;
	МенеджерЗаписи.Date = ТекущаяДата();
	МенеджерЗаписи.Subject = Тема;
	МенеджерЗаписи.Body = СокрЛП(Тело);
	МенеджерЗаписи.ТипТекста = ТипТекста;
	МенеджерЗаписи.Copy = Копия;
	МенеджерЗаписи.Attachment = Вложение;
	
	Если АдресОтвета <> Неопределено Тогда 
		МенеджерЗаписи.АдресОтвета = АдресОтвета;
	КонецЕсли;
	
	МенеджерЗаписи.GUID = ИдентификаторУникальный;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьДанныеГрафиковУведомленийTransportRequest(ИдентификаторУникальный, TR, ТипУведомлений, ПолучательУведомления);
	
КонецПроцедуры

Процедура ОбновитьДанныеГрафиковУведомленийTransportRequest(ГУИД, TR, ТипУведомлений, ПолучательУведомления)
	
	МенеджерЗаписи = РегистрыСведений.ГрафикиУведомленийTransportRequest.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.TransportRequest = TR;
	МенеджерЗаписи.ТипУведомления = ТипУведомлений;
	МенеджерЗаписи.ПолучательУведомленийTransportRequest = ПолучательУведомления;

	МенеджерЗаписи.Прочитать();	
	
	МенеджерЗаписи.УведомлениеСоздано = Истина;
	МенеджерЗаписи.УведомлениеОтправлено = Ложь;
	МенеджерЗаписи.ТрипСоздан = Ложь;
	МенеджерЗаписи.ГУИД = ГУИД;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

Процедура УстановкаПризнакаУведомлениеОтправленоДляУведомленийПоAcceptedTR() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EMailQueue.GUID КАК GUID
	|ПОМЕСТИТЬ РассылкаСОшибками
	|ИЗ
	|	РегистрСведений.EMailQueue КАК EMailQueue
	|ГДЕ
	|	EMailQueue.ЕстьОшибка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиУведомленийTransportRequest.TransportRequest КАК TransportRequest,
	|	ГрафикиУведомленийTransportRequest.ТипУведомления КАК ТипУведомления,
	|	ГрафикиУведомленийTransportRequest.ПолучательУведомленийTransportRequest КАК ПолучательУведомленийTransportRequest
	|ИЗ
	|	РегистрСведений.ГрафикиУведомленийTransportRequest КАК ГрафикиУведомленийTransportRequest
	|		ЛЕВОЕ СОЕДИНЕНИЕ РассылкаСОшибками КАК РассылкаСОшибками
	|		ПО ГрафикиУведомленийTransportRequest.ГУИД = РассылкаСОшибками.GUID
	|ГДЕ
	|	ГрафикиУведомленийTransportRequest.УведомлениеСоздано
	|	И НЕ ГрафикиУведомленийTransportRequest.УведомлениеОтправлено";
	//|	И НЕ ГрафикиУведомленийTransportRequest.TransportRequest ЕСТЬ NULL
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаУведомлений = Результат.Выгрузить();
		Для каждого СтрокаТаблицыУведомлений Из ТаблицаУведомлений Цикл
			МенеджерЗаписи = РегистрыСведений.ГрафикиУведомленийTransportRequest.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.TransportRequest = СтрокаТаблицыУведомлений.TransportRequest;
			МенеджерЗаписи.ТипУведомления = СтрокаТаблицыУведомлений.ТипУведомления;
			МенеджерЗаписи.ПолучательУведомленийTransportRequest = СтрокаТаблицыУведомлений.ПолучательУведомленийTransportRequest;
			МенеджерЗаписи.Прочитать();	
			
			МенеджерЗаписи.УведомлениеОтправлено = Истина;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры
// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147

Функция ПолучитьRequestorSpecialist(Trip, Параметр) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest КАК TR,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.Requestor КАК Requestor,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.Specialist КАК Specialist,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse КАК PickUpFrom,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo КАК DeliverTo,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.Comments КАК Comments,
	|	StagesOfTransportRequests.Stage
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|		ПО TripNonLawsonCompaniesParcels.Parcel.TransportRequest = StagesOfTransportRequests.TransportRequest
	|ГДЕ
	|	TripNonLawsonCompaniesParcels.Ссылка = &Trip";
	Запрос.УстановитьПараметр("Trip", Trip);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Параметр = "Specialist" Тогда
			Возврат Выборка.Specialist;
		ИначеЕсли Параметр = "Requestor" Тогда
			Возврат Выборка.Requestor;
		ИначеЕсли Параметр = "PickUpFrom" Тогда
			Возврат Выборка.PickUpFrom;
		ИначеЕсли Параметр = "DeliverTo" Тогда
			Возврат Выборка.DeliverTo;
		ИначеЕсли Параметр = "TransportRequestComments" Тогда
			Возврат Выборка.Comments;
		ИначеЕсли Параметр = "Stage" Тогда
			Возврат Выборка.Stage;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДатыDestination(Трип)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.ActualArrivalLocalTime,
	|	TripNonLawsonCompaniesStops.ActualDepartureLocalTime
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|ГДЕ
	|	TripNonLawsonCompaniesStops.Ссылка = &Трип
	|	И TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination)";
	Запрос.УстановитьПараметр("Трип",Трип);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат Ложь
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ActualArrivalLocalTime) И ЗначениеЗаполнено(Выборка.ActualDepartureLocalTime) Тогда
			Возврат Истина
		Иначе
			Возврат Ложь
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучимСдвигПоMOT(MOT)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	MOT_Trip_Notification.HoursAfter_ATD
	|ИЗ
	|	РегистрСведений.MOT_Trip_Notification КАК MOT_Trip_Notification
	|ГДЕ
	|	MOT_Trip_Notification.MOT = &MOT";
	Запрос.УстановитьПараметр("MOT", MOT);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.HoursAfter_ATD * 3600;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьRDD(Трип)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(Parcels.TransportRequest.RequiredDeliveryLocalTime) КАК RDD
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В(&Парсели)
	|	И НЕ Parcels.ПометкаУдаления";
	Запрос.УстановитьПараметр("Парсели",Трип.Parcels.ВыгрузитьКолонку("Parcel"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.RDD - ТекущаяДата() <= 86400 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ПроставитьGL_ВDoc() Экспорт
	
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	|ГДЕ
	|	НЕ КонсолидированныйПакетЗаявокНаПеревозку.ПометкаУдаления
	|	И КонсолидированныйПакетЗаявокНаПеревозку.Granted = &Granted
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозку.Отменен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонсолидированныйПакетЗаявокНаПеревозку.Дата";
	Запрос.УстановитьПараметр("Granted", Дата("01.01.0001 00:00:00"));
	Результат = Запрос.Выполнить().Выбрать();
	i = 0;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.Ссылка.ApprovalBorgs.Количество() > 0 Тогда
			
			МассивИнвойсов = Результат.Ссылка.Инвойсы.ВыгрузитьКолонку("Инвойс");
			
			ЗапросБорги = Новый Запрос;
			ЗапросБорги.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК Борг,
			|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate КАК GOLDReceiptDate
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
			|ГДЕ
			|	СтрокиИнвойса.Инвойс В(&Инвойсы)
			|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В (&ИспользованныеБорги)
			|	И НЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ ЕСТЬ NULL
			|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate >= &GOLDReceiptDate
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate,
			|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ";
			ЗапросБорги.УстановитьПараметр("Инвойсы", МассивИнвойсов);
			ЗапросБорги.УстановитьПараметр("ИспользованныеБорги", Результат.Ссылка.ApprovalBorgs.ВыгрузитьКолонку("Borg"));
			ЗапросБорги.УстановитьПараметр("GOLDReceiptDate", Дата("29.01.2018 00:00:00"));
			
			РезультатБорги = ЗапросБорги.Выполнить();
			Если Не РезультатБорги.Пустой() Тогда
				
				ДокументИзменен = Ложь;
				Док = Результат.Ссылка.ПолучитьОбъект();
				
				Для Каждого Строка Из Док.ApprovalBorgs Цикл
					Если Строка.Approve Тогда
						Продолжить
					КонецЕсли;
					ЗапросПоБоргам = Новый Запрос;
					ЗапросПоБоргам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК Борг,
					|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate КАК GOLDReceiptDate
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
					|ГДЕ
					|	СтрокиИнвойса.Инвойс В(&Инвойсы)
					|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ = &ТекБорг
					|	И НЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ ЕСТЬ NULL
					|
					|СГРУППИРОВАТЬ ПО
					|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GOLDReceiptDate,
					|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ";
					ЗапросПоБоргам.УстановитьПараметр("Инвойсы", МассивИнвойсов);
					ЗапросПоБоргам.УстановитьПараметр("ТекБорг", Строка.Borg);
					
					РезультатПоБорга = ЗапросПоБоргам.Выполнить().Выгрузить();
					
					Approve = ПроверитьGOLD(РезультатПоБорга, Строка.Borg);
					Если Approve.Approve Тогда
						
						ДокументИзменен = Истина;
						Строка.Approve = Истина;
						Строка.ApproveDate = Результат.Ссылка.Дата;
						Строка.User = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДокументИзменен Тогда
					i = i + 1;
					ПроверитьBORGsApprove(Док);
					Попытка
						Док.Записать();
					Исключение
						
					КонецПопытки
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПроверитьGOLD(ТаблицаДанных, ТекБорг)
	
	Утверждение = Новый Структура;
	
	Approve = Истина;
	Если Лев(ТекБорг.Код, 1) = "A" ИЛИ Лев(ТекБорг.Код, 2) = "YA" ИЛИ Лев(ТекБорг.Код, 1) = "V" Тогда
		Отбор = Новый Структура("Борг", ТекБорг);
		ДанныеПоБоргу = ТаблицаДанных.Скопировать(Отбор);
		ДанныеПоБоргу.Сортировать("GOLDReceiptDate Убыв");
		ВыдатьПредупреждение = Ложь;
		ДатаУдовлетворяет = Ложь;
		Для Каждого Строка Из ДанныеПоБоргу Цикл
			Если Строка.GOLDReceiptDate < Дата("29.01.2018 00:00:00") Тогда
				Approve = Ложь;
				Если ДатаУдовлетворяет Тогда
					ВыдатьПредупреждение = Истина;
				КонецЕсли;
			Иначе 
				ДатаУдовлетворяет = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Approve = Ложь;
	КонецЕсли;
	
	Утверждение.Вставить("Approve", Approve);
	Утверждение.Вставить("GOLDReceiptDate", ?(Строка = Неопределено, Неопределено,Строка.GOLDReceiptDate));
	
	Возврат Утверждение
	
КонецФункции

Процедура ПроверитьBORGsApprove(Док);
	
	ВсеApprove = Истина;
	Для Каждого Строка Из Док.ApprovalBorgs Цикл
		Если Строка.Approve Тогда
			Продолжить
		Иначе
			ВсеApprove = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Док.GL_FromSegment = ВсеApprove;
	
КонецПроцедуры

// { RGS DKazanskiy 14.04.2018 14:28:56 - S-I-0004903
// Обработчик регламентного задания ЗаполнениеРегистраStagesOfTransportRequestsPeriodic
Процедура ЗаполнениеРегистраStagesOfTransportRequestsPeriodic() Экспорт
	
	// Должен выполняться в последний день месяца для переноса текущих статусов в периодический регистр 
	// 
	Если НЕ КонецМесяца(ТекущаяДата()) = КонецДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	// проверим, есть ли данные за данный период в регистре (проверка на более частое расписание)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	StagesOfTransportRequestsPeriodicСрезПоследних.TransportRequest
	|ИЗ
	|	РегистрСведений.StagesOfTransportRequestsPeriodic.СрезПоследних(&ДатаСреза, ) КАК StagesOfTransportRequestsPeriodicСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// иначе, копируем данные из основного регистра статусов. 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	StagesOfTransportRequests.TransportRequest,
	|	StagesOfTransportRequests.Stage,
	|	&ТекущаяДата КАК Период,
	|	StagesOfTransportRequests.ModificationDate
	|ИЗ
	|	РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|ГДЕ
	|	StagesOfTransportRequests.Stage В (ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyShipped), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.Requested), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Набор = РегистрыСведений.StagesOfTransportRequestsPeriodic.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Попытка
		Набор.Записать(Ложь);
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры

Функция ПолучитьAllocation(CCD) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CustomsPaymentAllocation.Ссылка
	|ИЗ
	|	Документ.CustomsPaymentAllocation КАК CustomsPaymentAllocation
	|ГДЕ
	|	CustomsPaymentAllocation.CustomsDocument = &CCD
	|
	|СГРУППИРОВАТЬ ПО
	|	CustomsPaymentAllocation.Ссылка";
	Запрос.УстановитьПараметр("CCD", CCD);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.CustomsPaymentAllocation.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// { RGS AArsentev 21.05.2018 S-I-0005195
Процедура ПроверкаОчередиПочтовыхСообщений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	EMailQueue.Date КАК Date,
	|	EMailQueue.EMail КАК EMail
	|ИЗ
	|	РегистрСведений.EMailQueue КАК EMailQueue
	|ГДЕ
	|	EMailQueue.Date <= &ТекДатаМинусЧас
	|	И НЕ EMailQueue.ЕстьОшибка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Date";
	Запрос.УстановитьПараметр("ТекДатаМинусЧас", ТекущаяДата() - 7200);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Константы.АдресатыПолученияОшибокОчередиПочтовыхСообщений.Получить());
		ПараметрыПисьма.Вставить("Тема", "Контроль очереди рассылки почтовых сообщений базы RIET");
		ПараметрыПисьма.Вставить("Тело", "Необходимо проверить очередь рассылки, имеются письма которые должны были отправиться более 2-х часов назад!");
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		ПараметрыПисьма.Вставить("Копии", "");
		Попытка
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
		Исключение
		КонецПопытки
		
	КонецЕсли;
		
	
КонецПроцедуры

// { RGS DKazanskiy 02.07.2018 - S-I-0005455
// Обработчик регламентного задания УведомлениеОСтатусеРеестров
// ВНИМАНИЕ!!! Данное задание должно выполняться 1 раз в день! Иначе будет повторная рассылка писем!
//
Процедура УведомлениеОСтатусеРеестров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникРеестры.Ссылка,
	|	СправочникРеестры.ПометкаУдаления,
	|	СправочникРеестры.Код,
	|	СправочникРеестры.Наименование,
	|	СправочникРеестры.ДатаРегистрации,
	|	СправочникРеестры.Координатор,
	|	ВЫБОР
	|		КОГДА СправочникРеестры.ДатаПолученияОтПодрядчика = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(СправочникРеестры.ДатаПолученияОтПодрядчика, ВЫБОР
	|					КОГДА СправочникРеестры.ДатаФинализации = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(СправочникРеестры.ДатаФинализации, ДЕНЬ)
	|				КОНЕЦ, ДЕНЬ)
	|	КОНЕЦ КАК ДнейВОбработке,
	|	СправочникРеестры.Координатор.EMail
	|ПОМЕСТИТЬ Начальная
	|ИЗ
	|	Справочник.Реестры КАК СправочникРеестры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРеестров.СрезПоследних КАК СтатусыРеестровСрезПоследних
	|		ПО (СтатусыРеестровСрезПоследних.Реестр = СправочникРеестры.Ссылка)
	|ГДЕ
	|	СтатусыРеестровСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеестров.Registered)
	|	И НЕ СправочникРеестры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начальная.Ссылка,
	|	Начальная.ПометкаУдаления,
	|	Начальная.Код,
	|	Начальная.Наименование,
	|	Начальная.ДатаРегистрации,
	|	Начальная.Координатор,
	|	Начальная.ДнейВОбработке,
	|	Начальная.КоординаторEMail как EMail
	|ИЗ
	|	Начальная КАК Начальная
	|ГДЕ
	|	(Начальная.ДнейВОбработке = 3
	|			ИЛИ Начальная.ДнейВОбработке = 5)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Адресаты = Новый Массив;
		Если НЕ ПустаяСтрока(Результат.EMail) Тогда
			Адресаты.Добавить(Результат.EMail);
		КонецЕсли;
		
		Адресаты.Добавить("ALozhkina@slb.com");
		Адресаты.Добавить("TMakovskaya@slb.com");
		
		Получатели = "";
		Для каждого Адрес из Адресаты Цикл
			Получатели = Получатели + Адрес + "; ";
		КонецЦикла;

		
		// формируем текст письма
		Справочники.Реестры.УведомитьПоЭлектроннойПочте(Получатели, Строка(Результат.Ссылка) , "Реестр " + Строка(Результат.ссылка) + " находится в обработке " + Строка(Результат.ДнейВОбработке));
		
	КонецЦикла;
	
	// теперь оповещаем биллинг
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникРеестры.Ссылка,
	|	СтатусыРеестровСрезПоследних.Статус,
	|	СтатусыРеестровСрезПоследних.Период КАК ПериодСтатуса,
	|	СправочникРеестры.ДатаФинализации,
	|	СправочникРеестры.СпециалистБиллинга,
	|	МАКСИМУМ(РАЗНОСТЬДАТ(СтатусыРеестровLog.Date, ВЫБОР
	|				КОГДА СправочникРеестры.ДатаФинализацииБиллингом = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &ТекущаяДата
	|				ИНАЧЕ СправочникРеестры.ДатаФинализацииБиллингом
	|			КОНЕЦ, ДЕНЬ)) КАК ДнейВОбработке
	|ПОМЕСТИТЬ Начальная
	|ИЗ
	|	Справочник.Реестры КАК СправочникРеестры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРеестров.СрезПоследних КАК СтатусыРеестровСрезПоследних
	|		ПО (СтатусыРеестровСрезПоследних.Реестр = СправочникРеестры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРеестровLog КАК СтатусыРеестровLog
	|		ПО (СтатусыРеестровLog.LogTo = СправочникРеестры.Ссылка)
	|			И (СтатусыРеестровLog.LogType = ЗНАЧЕНИЕ(Справочник.LogTypes.ИзменениеСтатуса))
	|ГДЕ
	|	НЕ СтатусыРеестровСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеестров.Registered)
	|	И НЕ СтатусыРеестровСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеестров.FINISHED)
	|	И НЕ СправочникРеестры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникРеестры.Ссылка,
	|	СтатусыРеестровСрезПоследних.Статус,
	|	СтатусыРеестровСрезПоследних.Период,
	|	СправочникРеестры.ДатаФинализации,
	|	СправочникРеестры.СпециалистБиллинга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начальная.Ссылка,
	|	Начальная.Статус,
	|	Начальная.ПериодСтатуса,
	|	Начальная.ДатаФинализации,
	|	Начальная.СпециалистБиллинга,
	|	Начальная.ДнейВОбработке,
	|	Начальная.СпециалистБиллинга.EMail как EMail
	|ИЗ
	|	Начальная КАК Начальная
	|ГДЕ
	|	(Начальная.ДнейВОбработке = 3
	|			ИЛИ Начальная.ДнейВОбработке = 5)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Адресаты = Новый Массив;
		Если НЕ ПустаяСтрока(Результат.EMail) Тогда
			Адресаты.Добавить(Результат.EMail);
		КонецЕсли;
		
		Адресаты.Добавить("TMakovskaya@slb.com");
		Адресаты.Добавить("EBrezhneva@slb.com");
		Адресаты.Добавить("VGrechka@slb.com");
		
		Получатели = "";
		Для каждого Адрес из Адресаты Цикл
			Получатели = Получатели + Адрес + "; ";
		КонецЦикла;

		
		// формируем текст письма
		Справочники.Реестры.УведомитьПоЭлектроннойПочте(Получатели, Строка(Результат.Ссылка) , "Реестр " + Строка(Результат.ссылка) + " находится в обработке " + Строка(Результат.ДнейВОбработке));
		
	КонецЦикла;

КонецПроцедуры

// { RGS AArsentev 01.08.2018 S-I-0005459
Процедура ОбновитьMobillizationProjectВItems() Экспорт
	
	// РО с BORG YA46 и ARS1 у которых в поле PO Requisition Name есть строчка CAT1, автоматически добавляются в Project D&M ASG DFP tracking
	// у которых нет признака collected from port, включая заказы из отчета PO lines w/o invoices and DOCs
	
	НачатьТранзакцию();
	
	ЗапросВключение = Новый Запрос;
	ЗапросВключение.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка КАК Item,
	|	СтрокиИнвойса.ProjectMobilization КАК ProjectMobilization,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК НомерЗаявкиНаЗакупку,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий КАК RequisitionName,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК СтрокаЗаявкиНаЗакупкуВладелецБОРГ,
	|	СтрокиИнвойса.Инвойс КАК Инвойс,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC,
	|	ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort КАК CollectedFromPort
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|			ПО (ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка)
	|		ПО СтрокиИнвойса.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
	|ГДЕ
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В(&Borgs)
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий ПОДОБНО &Комент
	|	И СтрокиИнвойса.ProjectMobilization = &ProjectMobilization
	|	И ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort = &CollectedFromPort
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиИнвойса.Ссылка,
	|	СтрокиИнвойса.ProjectMobilization,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ,
	|	СтрокиИнвойса.Инвойс,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка,
	|	ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка,
	|	СтрокиИнвойса.ProjectMobilization,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
	|	СтрокиЗаявкиНаЗакупку.Владелец.Комментарий,
	|	СтрокиЗаявкиНаЗакупку.Владелец.БОРГ,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.СтрокиЗаявкиНаЗакупку КАК СтрокиЗаявкиНаЗакупку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ПО (СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = СтрокиЗаявкиНаЗакупку.Ссылка)
	|			И (НЕ СтрокиИнвойса.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.POSuppliersNotRequiringEUC КАК POSuppliersNotRequiringEUC
	|		ПО СтрокиЗаявкиНаЗакупку.Владелец.Поставщик = POSuppliersNotRequiringEUC.POSupplierName
	|			И СтрокиЗаявкиНаЗакупку.Владелец.ДатаЗаявкиНаЗакупку >= POSuppliersNotRequiringEUC.PODateFrom
	|ГДЕ
	|	НЕ СтрокиЗаявкиНаЗакупку.ПометкаУдаления
	|	И СтрокиИнвойса.Ссылка ЕСТЬ NULL
	|	И POSuppliersNotRequiringEUC.POSupplierName ЕСТЬ NULL
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В(&Borgs)
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий ПОДОБНО &Комент
	|	И СтрокиИнвойса.ProjectMobilization = &ProjectMobilization
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиИнвойса.Ссылка,
	|	СтрокиИнвойса.ProjectMobilization,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
	|	СтрокиЗаявкиНаЗакупку.Владелец.Комментарий,
	|	СтрокиЗаявкиНаЗакупку.Владелец.БОРГ";
	
	МассивБоргов = Новый Массив;
	МассивБоргов.Добавить(Справочники.BORGs.НайтиПоКоду("YA46"));
	МассивБоргов.Добавить(Справочники.BORGs.НайтиПоКоду("ARS1"));
	
	Проект = Справочники.ProjectMobilization.НайтиПоКоду("000000600");
	ПроектПустой = Справочники.ProjectMobilization.ПустаяСсылка();
	
	ЗапросВключение.УстановитьПараметр("Borgs", МассивБоргов);
	ЗапросВключение.УстановитьПараметр("Комент", "%CAT1%");
	ЗапросВключение.УстановитьПараметр("ProjectMobilization", ПроектПустой);
	ЗапросВключение.УстановитьПараметр("CollectedFromPort", Дата("01.01.0001 00:00:00"));
	
	РезультатВключение = ЗапросВключение.Выполнить().Выбрать();
	
	Пока РезультатВключение.Следующий() Цикл
		
		Айтем = РезультатВключение.Item.ПолучитьОбъект();
		Айтем.ProjectMobilization = Проект;
		Попытка
			Айтем.Записать()
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Все заказы, прошедшие collected form port в import shipment, должы исключаться из проекта.
	
	ЗапросИсключение = Новый Запрос;
	ЗапросИсключение.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка КАК Item,
	|	СтрокиИнвойса.ProjectMobilization КАК ProjectMobilization,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК НомерЗаявкиНаЗакупку,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий КАК RequisitionName,
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК СтрокаЗаявкиНаЗакупкуВладелецБОРГ,
	|	СтрокиИнвойса.Инвойс КАК Инвойс,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC,
	|	ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort КАК CollectedFromPort
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|			ПО (ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка)
	|		ПО СтрокиИнвойса.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
	|ГДЕ
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В(&Borgs)
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.Комментарий ПОДОБНО &Комент
	|	И СтрокиИнвойса.ProjectMobilization = &ProjectMobilization
	|	И ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort <> &CollectedFromPort";
	
	ЗапросИсключение.УстановитьПараметр("Borgs", МассивБоргов);
	ЗапросИсключение.УстановитьПараметр("Комент", "%CAT1%");
	ЗапросИсключение.УстановитьПараметр("ProjectMobilization", Проект);
	ЗапросИсключение.УстановитьПараметр("CollectedFromPort", Дата("01.01.0001 00:00:00"));
	
	РезультатИсключение = ЗапросИсключение.Выполнить().Выбрать();
	
	Пока РезультатИсключение.Следующий() Цикл
		Item = РезультатИсключение.Item.ПолучитьОбъект();
		Item.ProjectMobilization = ПроектПустой;
		Попытка
			Item.Записать()
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // } RGS AArsentev 01.08.2018 S-I-0005459



