// Формируется список счетов учета номенклатуры, стоимость которой
// необходимо корректировать.
Функция СписокСчетовУчетаНоменклатуры(Учет, Организация = Неопределено, Период = Неопределено) Экспорт
	
	Если Учет = "Нал" Тогда
		ИмяПланаСчетов = "Налоговый";
		
	Иначе
		ИмяПланаСчетов = "Хозрасчетный";
	КонецЕсли; 
	
	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ОборудованиеКУстановке);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПриобретениеОбъектовОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПокупныеПолуфабрикатыИКомплектующие);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Топливо);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Тара);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ЗапасныеЧасти);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].МатериалыПереданныеВПереработку);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СтроительныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ИнвентарьИХозяйственныеПринадлежности);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СпецоснасткаИСпецодеждаНаСкладе);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Полуфабрикаты);
	Если (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Организация)) И (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Период)) И (ИмяПланаСчетов = "Хозрасчетный") Тогда
		
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Период, УчетнаяПолитикаНеЗадана, Организация, "Бух");
		
		УчетВПродажныхЦенах = Ложь;
		Если УчетнаяПолитикаБУ.Количество() > 0 Тогда	
			Если (УчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				УчетВПродажныхЦенах = Истина;
			КонецЕсли;
		КонецЕсли;
		Если УчетВПродажныхЦенах Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Товары);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			Счета = Запрос.Выполнить().Выгрузить();
			Для Каждого Счет Из Счета Цикл
				Если (НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.Товары) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ) Тогда
					
					СписокСчетов.Добавить(Счет.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
		КонецЕсли;
	Иначе
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
	КонецЕсли;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
	
	Возврат СписокСчетов;   
	
КонецФункции // МассивСчетовУчетаНоменклатуры()
// Формируется список счетов на которых ведутся расчеты с контрагентами.
Функция ПолучитьСчетаРасчетов()

	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	Возврат СписокСчетов;

КонецФункции // ПолучитьСчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, не зависящие от структуры данных конфигурации

// СписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	
	//1. Приведем переданную таблицу перемещений к тербуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	МассивСумм = Неопределено;
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	
	// То же самое, но в соответствии - для удобства поиска
	СоотвСумм = Новый Соответствие;
	
	Для Каждого ЭлементСумм Из МассивСумм Цикл
		СоотвСумм.Вставить(ЭлементСумм, ЭлементСумм);
	КонецЦикла;
	
	Инд=0;
	Пока Инд< Таб.Колонки.Количество() Цикл
		
		Колонка = Таб.Колонки[Инд];
		
		// Имя колонки не совпадает с количеством и колонками стоимости
		Если ВРег(Колонка.Имя) <> ВРег("Количество") Тогда
			
			// Это колонка суммы
			Если СоотвСумм[Колонка.Имя] <> Неопределено Тогда
				Инд = Инд+1;
				Продолжить;
			КонецЕсли;
			
			// Колонки, оканчивающиеся на ПрефиксПараметровНовогоСостояния - правые (новое состояние), им должны соответствовать такие же левые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Если Прав(Колонка.Имя, СтрДлина(ПрефиксПараметровНовогоСостояния)) = ПрефиксПараметровНовогоСостояния  Тогда
				ИмяСоответствующейКолонки=Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-СтрДлина(ПрефиксПараметровНовогоСостояния));
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				// И наоборот, колонки, не оканчивающиеся на ПрефиксПараметровНовогоСостояния - левые (новое состояние), им должны соответствовать такие же правые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Иначе
				ИмяСоответствующейКолонки=Колонка.Имя+ПрефиксПараметровНовогоСостояния;
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				
				СтруктураСостояния.Вставить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Инд=Инд+1;
	КонецЦикла;
	
	// В таблице перемещений заменим параметры состояний индексами состояний, сами параметры будут храниться в СоотвПараметровСостояний
	
	Таб.Колонки.Добавить("Источник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	Таб.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	
	СоотвПараметровСостояний = Новый Соответствие;
	
	Для Каждого Строка Из Таб Цикл // поиск выплняется полным перебором
		
		// Состояния-источники
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Источник = ИндексСостояния;
		
		
		// То же самое для состояний-приемников
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если Элемент.Ключ = "ВременнаяРазница" или Элемент.Ключ = "ПостояннаяРазница" тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Приемник = ИндексСостояния;
		
	КонецЦикла;
	
	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным
	Для Каждого Строка Из Таб Цикл
		
		Если Строка.Количество<0 Тогда
			Буф=Строка.Приемник;
			Строка.Приемник = Строка.Источник;
			Строка.Источник = Буф;
			Строка.Количество = - Строка.Количество;
			Для Каждого КолСумма Из МассивСумм Цикл
				Строка[КолСумма] = - Строка[КолСумма];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// "Свертка" встречных перемещений
	Инд=0;
	КолВо = Таб.Количество();
	
	Пока Инд<КолВо Цикл
		
		Инд2 = Инд+1;
		Пока Инд2<КолВо Цикл
			
			Строка2 = Таб[Инд2];
			Строка  = Таб[Инд];
			
			// Если найдено соответствующее встречное перемещение
			Если Строка.Источник = Строка2.Приемник
				И Строка.Приемник = Строка2.Источник Тогда
				
				Если Строка.Количество>Строка2.Количество Тогда
					УменьшитьНаКоличество = Строка2.Количество;
				Иначе
					УменьшитьНаКоличество = Строка.Количество;
				КонецЕсли;
				
				Строка.Количество  = Строка.Количество  - УменьшитьНаКоличество;
				Строка2.Количество = Строка2.Количество - УменьшитьНаКоличество;
				
				Для Каждого КолСумма Из МассивСумм Цикл
					
					Если Строка.Количество>Строка2.Количество Тогда
						УменьшитьНаСтоимость = Строка2[КолСумма];
					Иначе
						УменьшитьНаСтоимость = Строка[КолСумма];
					КонецЕсли;
					
					// То же самое - со стоимостью
					Строка[КолСумма]  = Строка[КолСумма]  - УменьшитьНаСтоимость;
					Строка2[КолСумма] = Строка2[КолСумма]  - УменьшитьНаСтоимость;
				КонецЦикла;
				
				// На этом обход можно прервать: быть не более одной пары встречных перемещений
				Прервать;
				
			Иначе
				Инд2 = Инд2+1;
			КонецЕсли;
			
		КонецЦикла; 
		
		Инд = Инд+1;
		
	КонецЦикла; 
	
	// Удалим обнулившиеся строки
	// Удаляем только строки со всеми нулевыми суммами и нулевым количеством
	
	КолВо = Таб.Количество();
	Инд=0;
	Пока Инд<КолВо Цикл
		
		Строка  = Таб[Инд];
		
		НеНужноУдалять = Строка.Количество<>0;
		
		Если Не НеНужноУдалять Тогда
		
			Для Каждого КолСумма Из МассивСумм Цикл
						
				НеНужноУдалять = НеНужноУдалять Или Строка[КолСумма]<>0;
				
			КонецЦикла;
		
		КонецЕсли;
		
		Если Не НеНужноУдалять Тогда
			Таб.Удалить(Строка);
			
			КолВо = КолВо-1;
		Иначе
			Инд=Инд+1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины= Новый Соответствие;
			ПараметрыИсточника = Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным деревом
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
			
			//ПройденныеВершины = Новый Соответствие;
			//НомерВершины = Элемент.Ключ;
			//ПройденныеВершины.Вставить(НомерВершины, -1);
			
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	СтСумм = Новый Структура; // структура сумм
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				СтСумм.Вставить(КолСумма, -Строка[КолСумма]);
			КонецЦикла;
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтСумм, СтруктураДопПараметров)
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	Для каждого Строка Из ТаблицаПеремещений Цикл
		
		// Анализируем только ненулевые дуги
		Если Строка.Количество<>0 Тогда
			
			// Если источника нет среди приемников, значит это начало дерева
			Если Приемники[Строка.Источник]=Неопределено Тогда
				
				ВершинаНайдена = Ложь; // признак того, что вершина уже есть в массиве
				Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
					
					// Такая вершина уже имеется в списке начал
					Если Строка.Источник = НачалоДерева Тогда
						ВершинаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВершинаНайдена Тогда
					МассивНачалДеревьев.Добавить(Строка.Источник);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		СтСумм = Новый Структура; // структура сумм
		Для Каждого КолСумма Из МассивСумм Цикл
			СтСумм.Вставить(КолСумма, Строка[КолСумма]);
		КонецЦикла;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, СтруктураСумм", Строка.Количество, СтСумм)); // Вместе с вершиной-приемником запоминаем количество перемещения
		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников+1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавдленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
КонецПроцедуры // СписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины=ЭлементВершина.Ключ;
		ИндСтрокиПеремещения=ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		//Если ПройденныеВершины[НомерВершины]<>Неопределено Тогда
			
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая=ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество=СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством = ИндСтрокиПеремещения;
			
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество = Строка.Количество;
							ИндСтрокиСМинКоличеством = Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
//		КопияПройденныеВершины=Новый Соответствие;
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		//Для Каждого Элемент Из ПройденныеВершины Цикл
		//	КопияПройденныеВершины.Вставить(Элемент.Ключ, Элемент.Значение);
		//КонецЦикла;
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;
		
		//КопияПройденныеВершины.Вставить(НомерВершины, ИндСтрокиПеремещения);
		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
	СтКорректировка = Новый Структура; // структура корректировок
	СтСуммы = Новый Структура; // структура сумм в сстоянии
		
	// Состояние можно использовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник = ЭлементПриемник.Ключ;
			Количество = ЭлементПриемник.Значение.Количество;
			
			Состояние = Состояния[Приемник];
			
			// Заполним структуру корректировки сумм
			Для Каждого ЭлементСумма Из ЭлементПриемник.Значение.СтруктураСумм Цикл
				
				Если СостояниеИсточник.Количество > Количество Тогда
					СтКорректировка.Вставить(ЭлементСумма.Ключ, Окр(СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]*Количество /СостояниеИсточник.Количество, 2));
				Иначе
					СтКорректировка.Вставить(ЭлементСумма.Ключ, СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]);
				КонецЕсли;
				
				// Суммы в новом состоянии
				СтСуммы.Вставить(ЭлементСумма.Ключ, СтКорректировка[ЭлементСумма.Ключ]);
				
				// Корректировка равна разности между правильным движением и уже выполненным движением
				СтКорректировка[ЭлементСумма.Ключ] = СтКорректировка[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтКорректировка, СтруктураДопПараметров);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			
			// Поступление в состояние: добавим суммы
			Для Каждого ЭлементСумма Из СтСуммы Цикл
				
				Состояние.СтруктураСумм[ЭлементСумма.Ключ]         = Состояние.СтруктураСумм[ЭлементСумма.Ключ]         + ЭлементСумма.Значение;
				СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] = СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров);
			
		КонецЦикла;
		
		// Остаток в состоянии после перемещений: суммы
		СтОстаток = Новый Структура;
		Для Каждого ЭлементСумма Из СостояниеИсточник.СтруктураСумм Цикл
			СтОстаток.Вставить(ЭлементСумма.Ключ, ЭлементСумма.Значение);
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СтОстаток, СтруктураДопПараметров);
		
		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон,  Префикс, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Сумма КАК Стоимость,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.СчетКт КАК Счет,
		|	ВложенныйЗапрос.СчетДт КАК Счет" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоКт1 КАК Субконто1,
		|	ВложенныйЗапрос.СубконтоКт2 КАК Субконто2,
		|	ВложенныйЗапрос.СубконтоКт3 КАК Субконто3,
		|	ВложенныйЗапрос.СубконтоДт1 КАК Субконто1" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоДт2 КАК Субконто2" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоДт3 КАК Субконто3" + Префикс + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.СчетКт КАК СчетКт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатураКт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ КАК НоменклатураДт,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт1,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт2,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт3,
		|		ХозрасчетныйОбороты.СчетДт КАК СчетДт,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт1,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт2,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт3,";
		Если СтруктураДопПараметров.Учет = "Нал" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ (ВЫБОР КОГДА ХозрасчетныйОбороты.ВидУчетаКт = &ВидУчета ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ) КОНЕЦ) КАК Сумма,";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаОборот КОНЕЦ) КАК Сумма,";
		КонецЕсли;
		
	    Запрос.Текст = Запрос.Текст + "
		|		СУММА(ВЫБОР КОГДА (ХозрасчетныйОбороты.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотКт КОНЕЦ) КАК Количество
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&СписокСчетов), , СчетКт В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОбороты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Хозрасчетный.Ссылка КАК Счет,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|			ИЗ
		|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|			
		|			ГДЕ
		|				Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Хозрасчетный.Ссылка) КАК СуммовойУчетКт
		|			ПО ХозрасчетныйОбороты.СчетКт = СуммовойУчетКт.Счет
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Хозрасчетный.Ссылка КАК Счет,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|			ИЗ
		|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|			
		|			ГДЕ
		|				Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Хозрасчетный.Ссылка) КАК СуммовойУчетДт
		|			ПО ХозрасчетныйОбороты.СчетДт = СуммовойУчетДт.Счет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйОбороты.СчетКт,
		|		ХозрасчетныйОбороты.СчетДт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ) КАК ВложенныйЗапрос
		|
		|ГДЕ
		|	ВЫБОР КОГДА ВложенныйЗапрос.СубконтоКт1 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт1.Дата КОГДА ВложенныйЗапрос.СубконтоКт2 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт2.Дата КОГДА ВложенныйЗапрос.СубконтоКт3 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт3.Дата ИНАЧЕ (&ДатаНач) КОНЕЦ >= &ДатаНач И
		|	(ВложенныйЗапрос.НоменклатураКт = ВложенныйЗапрос.НоменклатураДт) И ";
		
		Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров)) И";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	(ВложенныйЗапрос.СчетДт <> ВложенныйЗапрос.СчетКт ИЛИ ВложенныйЗапрос.СубконтоКт1 <> ВложенныйЗапрос.СубконтоДт1 ИЛИ ВложенныйЗапрос.СубконтоКт2 <> ВложенныйЗапрос.СубконтоДт2 ИЛИ ВложенныйЗапрос.СубконтоКт3 <> ВложенныйЗапрос.СубконтоДт3)";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Учет, СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
		
	Если СтруктураДопПараметров.Учет = "Нал" Тогда
		
		Запрос.УстановитьПараметр("ВидУчета",     СтруктураДопПараметров.ВидУчетаПБУ18);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
	КонецЕсли; 
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураДопПараметров.Учет = "Нал" Тогда      // создание таблицы для информации о корректируемых документах у перемещений МПЗ
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОборотыДтКт.СчетДт КАК Счет,
	               |	НалоговыйОборотыДтКт.СчетКт КАК КорСчет,
	               |	ВЫБОР
	               |		КОГДА НалоговыйОборотыДтКт.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	               |			ТОГДА НалоговыйОборотыДтКт.КорректируемыйДокумент
	               |		ИНАЧЕ НалоговыйОборотыДтКт.Регистратор
	               |	КОНЕЦ КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто1
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт1
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК КорСубконто1,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто2
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт2
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК КорСубконто2,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто3
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт3
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК КорСубконто3,
	               |	НалоговыйОборотыДтКт.СчетДт КАК СчетДт,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто1
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт1
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Субконто1,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто2
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт2
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Субконто2,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто3
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт3
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Субконто3,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОборотыДтКт.ВидУчетаКт = &ВидУчета
	               |				ТОГДА НалоговыйОборотыДтКт.Сумма
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
	               |		&ДатаНач,
	               |		&ДатаКон,
	               |		(СчетДт В ИЕРАРХИИ (&СписокСчетов)
	               |		    ИЛИ СчетКт В ИЕРАРХИИ (&СписокСчетов))
	               |		    И Организация = &Организация) КАК НалоговыйОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Налоговый.Ссылка КАК Счет,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто1,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто2,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто3
	               |		ИЗ
	               |			ПланСчетов.Налоговый.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый КАК Налоговый
	               |				ПО ХозрасчетныйВидыСубконто.Ссылка = Налоговый.Ссылка
	               |		ГДЕ
	               |			Налоговый.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Налоговый.Ссылка) КАК СуммовойУчетКт
	               |		ПО НалоговыйОборотыДтКт.СчетКт = СуммовойУчетКт.Счет
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Налоговый.Ссылка КАК Счет,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто1,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто2,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	               |						ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК Субконто3
	               |		ИЗ
	               |			ПланСчетов.Налоговый.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый КАК Налоговый
	               |				ПО ХозрасчетныйВидыСубконто.Ссылка = Налоговый.Ссылка
	               |		ГДЕ
	               |			Налоговый.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Налоговый.Ссылка) КАК СуммовойУчетДт
	               |		ПО НалоговыйОборотыДтКт.СчетДт = СуммовойУчетДт.Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОборотыДтКт.СчетДт,
	               |	НалоговыйОборотыДтКт.СчетКт,
	               |	ВЫБОР
	               |		КОГДА НалоговыйОборотыДтКт.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	               |			ТОГДА НалоговыйОборотыДтКт.КорректируемыйДокумент
	               |		ИНАЧЕ НалоговыйОборотыДтКт.Регистратор
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто1
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт1
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто2
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт2
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетКт.Субконто3
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоКт3
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто1
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт1
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто2
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт2
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА СуммовойУчетДт.Субконто3
	               |			ТОГДА НалоговыйОборотыДтКт.СубконтоДт3
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	НалоговыйОборотыДтКт.СчетДт";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Учет));
	Запрос.УстановитьПараметр("ВидУчета",     СтруктураДопПараметров.ВидУчетаПБУ18);
	
	ТабПерем = Запрос.Выполнить().Выгрузить();
	
    СтруктураДопПараметров.Вставить("ТаблицаПеремещений", ТабПерем);
КонецЕсли;
	
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет                         = СтруктураДопПараметров.Учет;
	СписокНеКорректируемыхСчетов = СтруктураДопПараметров.СписокНеКорректируемыхСчетов; // список счетов списание номенклатуры на которые не надо корректировать
	МассивНоменклатуры           = СтруктураДопПараметров.ТаблицаТоваров;
	
	МассивСумм = Неопределено; // список суммовых ресурсов, списываемых пропорционально количеству
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	ТекстВидУчетаПБУ18 = "";
	Если Учет = "Нал" Тогда
		ТекстВидУчетаПБУ18   = "ВидУчета = &ВидУчетаПБУ18";
	    ВидУчетаПБУ18                = СтруктураДопПараметров.ВидУчетаПБУ18;
		
	КонецЕсли;
	
	Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстаток)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстаток) КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток)             ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоОстаток) КОНЕЦ КАК КоличествоОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриход)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриход) КОНЕЦ КАК СуммаПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриход)              ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриход) КОНЕЦ КАК КоличествоПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя) КОНЕЦ КАК СуммаВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя)  КОНЕЦ КАК КоличествоВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику)        ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику) КОНЕЦ КАК СуммаВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)  КОНЕЦ КАК КоличествоВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходов)            ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходов) КОНЕЦ КАК СуммаПриходОтходов,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)       ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)  КОНЕЦ КАК КоличествоПриходОтходов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОстатковИПриходов.Счет КАК Счет,
		|		ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3 КАК Субконто3,";
		Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ) КАК СуммаОстаток,";
		Иначе
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК СуммаОстаток,";
		КонецЕсли;
		Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток КОНЕЦ) КАК КоличествоОстаток,";
		
		Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) КОНЕЦ КАК СуммаПриход,";
		Иначе
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаОборотДт КОНЕЦ ИНАЧЕ 0 КОНЕЦ) КАК СуммаПриход,";
		КонецЕсли;
		Текст = Текст +"

		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) КОНЕЦ КАК КоличествоПриход,
		|		0 КАК СуммаВозвратОтПокупателя,
		|		0 КАК КоличествоВозвратОтПокупателя,
		|		0 КАК СуммаВозвратПоставщику,
		|		0 КАК КоличествоВозвратПоставщику,
		|		0 КАК СуммаПриходОтходов,
		|		0 КАК КоличествоПриходОтходов
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + "
		|	ГДЕ
		|		(ВЫБОР КОГДА ТаблицаОстатковИПриходов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаОстатковИПриходов.Счет,
		|		ТаблицаОстатковИПриходов.Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаВозвратов.Счет,
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3,
		|		0,
		|		0,
		|		0,
		|		0,";
		Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),";
		Иначе
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ Иначе 0 Конец),";
		КонецЕсли;	
	Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ),";
		Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ),";
		Иначе
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ Иначе 0 Конец),";
		КонецЕсли;	
	Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.КоличествоОборотКт >= 0 ТОГДА ТаблицаВозвратов.КоличествоОборотКт ИНАЧЕ 0 КОНЕЦ),";
		Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),";
		Иначе
			Текст = Текст +"
			|		СУММА(ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ Иначе 0 Конец),";
		КонецЕсли;	
	Текст = Текст +"
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ТаблицаВозвратов
		|	
		|	ГДЕ (НЕ ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца  И НЕ ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаВозвратов.КоличествоОборотКт < 0)";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + " И
		|		(ВЫБОР КОГДА ТаблицаВозвратов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаВозвратов.Счет,
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВнутренееПеремещение.Счет,
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3,
		|		0,
		|		0,";
	Если ТекстВидУчетаПБУ18 = "" Тогда
			Текст = Текст +"
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ)),";
		Иначе
			Текст = Текст +"
		|		СУММА(-ВЫБОР КОГДА " + ТекстВидУчетаПБУ18 + " Тогда (ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ) Иначе 0 Конец),";
			КонецЕсли;	
	Текст = Текст +"
	
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.КоличествоОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.КоличествоОборотДт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ВнутренееПеремещение";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + "
		|	ГДЕ
		|		(ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто1 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто2 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВнутренееПеремещение.Счет,
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3";
		
	// Если есть операции списания, которе не должны быть скорректированы, то эти
	// операции необходимо учесть при расчете среденвзвешенной стоимости номенклатуры.
	Если СписокНеКорректируемыхСчетов <> Неопределено Тогда
		
		Текст = Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		0,
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокНеКорректируемыхСчетов), , Организация = &Организация, , ) КАК ТаблицаНеУчитываемыхСписаний";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаНеУчитываемыхСписаний.Счет,
			|		ТаблицаНеУчитываемыхСписаний.Субконто1,
			|		ТаблицаНеУчитываемыхСписаний.Субконто2,
			|		ТаблицаНеУчитываемыхСписаний.Субконто3";
	
	КонецЕсли; 
	
	Текст = Текст + ") КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Хозрасчетный.Ссылка КАК Счет,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|		
		|		ГДЕ
		|			Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Хозрасчетный.Ссылка) КАК СуммовойУчет
		|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ";
			
				
			
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СписокСчетов",  СписокСчетовУчетаНоменклатуры(Учет, СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокНеКорректируемыхСчетов", СписокНеКорректируемыхСчетов);
		
	Если Учет = "Нал" Тогда
		Текст = СтрЗаменить(Текст, "Хозрасчетный", "Налоговый");
		Запрос.УстановитьПараметр("ВидУчетаПБУ18", ВидУчетаПБУ18);   
		Запрос.УстановитьПараметр("ВидУчетаНУ", Перечисления.ВидыУчетаПоПБУ18.НУ);   
		Запрос.УстановитьПараметр("Возврат",       Перечисления.УсловияПоступленияИВыбытияИмущества.Возврат);
	КонецЕсли; 
		
	Запрос.Текст = Текст;
	
	ТабПартий = Запрос.Выполнить().Выгрузить();
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Парам=Новый Структура;
	Для Каждого Состояние Из Состояния Цикл
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Парам.Вставить("Счет", ПараметрыСостояния["Счет"]);
		Парам.Вставить("Субконто1", ПараметрыСостояния["Субконто1"]);
		Парам.Вставить("Субконто2", ПараметрыСостояния["Субконто2"]);
		Парам.Вставить("Субконто3", ПараметрыСостояния["Субконто3"]);
		
		Количество=0;
		СтруктураСумм = Новый Структура; // структура, хранящая суммы
		
		// Заполнение сумм
		Для Каждого ЭлементСумма Из МассивСумм Цикл
			СтруктураСумм.Вставить(ЭлементСумма, 0);
		КонецЦикла;
		
		НайдСтроки=ТабПартий.НайтиСтроки(Парам);
		Для Каждого СтрокаТаблицы Из НайдСтроки Цикл
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоПриходОтходов;
			Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаПриходОтходов;
			
			СтруктураСумм.Вставить("Стоимость",  СтруктураСумм[ЭлементСумма] + Сумма);
			
			// Отметим найденные строки (участвующие в перемещениях), чтобы потом добавить все остальные остатки
			СтрокаТаблицы.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		Состояние.Значение.Вставить("СтруктураСумм", СтруктураСумм);
	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	ИндСостояния=Состояния.Количество();
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход;
			
			СтруктураСумм = Новый Структура; // структура, хранящая суммы
			
			СтруктураСумм.Вставить("Стоимость", СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход);
						
			ИндСостояния=ИндСостояния+1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, СтруктураСумм", 0, 0, Новый Соответствие, Количество, СтруктураСумм));
			
			СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет, Субконто1, Субконто2, Субконто3", СтрокаТаблицы.Счет, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3));
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, ИсходнаяСуммаКорректировки, СтруктураДопПараметров)
	СуммаКорректировки = ИсходнаяСуммаКорректировки.Стоимость;
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли; 
	Учет = СтруктураДопПараметров.Учет;
	
	Движение = СтруктураДопПараметров.Регистратор.Движения[?(Учет = "Нал", "Налоговый", "Хозрасчетный")];
	
	УчетВПродажныхЦенах = Ложь;
	Если НЕ Учет = "Нал" Тогда
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураДопПараметров.Период, УчетнаяПолитикаНеЗадана, СтруктураДопПараметров.Организация, "Бух");
		Если УчетнаяПолитикаБУ.Количество() > 0 Тогда	
			Если (УчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				УчетВПродажныхЦенах = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Учет = "Нал" Тогда
		ПараметрыСостояния = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3", ПараметрыСостоянияПриемника.Счет, ПараметрыСостоянияПриемника.Субконто1, ПараметрыСостоянияПриемника.Субконто2, ПараметрыСостоянияПриемника.Субконто3, ПараметрыСостоянияИсточника.Счет, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3);
		ОперацийСписания = СтруктураДопПараметров.ТаблицаПеремещений.НайтиСтроки(ПараметрыСостояния);
		ПоказательКоличества =  ОперацийСписания.Количество();
		ПоказательСуммы      =  СуммаКорректировки;
		
		Для каждого ОперацияСписания Из ОперацийСписания Цикл
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = "Корректировка стоимости перемещения";
			
			Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
			
			Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
			
			Проводка.Сумма = ПоказательСуммы / ПоказательКоличества;
			ПоказательСуммы = ПоказательСуммы - Проводка.Сумма;
			ПоказательКоличества = ПоказательКоличества - 1;
			
			Проводка.КорректируемыйДокумент = ОперацияСписания.Регистратор;
				Проводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;      
				Проводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;
			
		КонецЦикла;
	Иначе
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = "Корректировка стоимости перемещения";
		
		ДопПроводкаДт = Ложь;
		ДопПроводкаКт = Ложь;
		
		СчетДт = ПараметрыСостоянияПриемника.Счет;
		СчетКт = ПараметрыСостоянияИсточника.Счет;
				
		Если УчетВПродажныхЦенах Тогда
			Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
				ДопПроводкаКт = Истина;
				СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
				ДопПроводкаКт = Истина;
				СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;
				
			Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
				ДопПроводкаДт = Истина;
				СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
			ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
				ДопПроводкаДт = Истина;
				СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
			КонецЕсли;	
		КонецЕсли;
		
		Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
				
		Проводка.Сумма = СуммаКорректировки;
			
		Если ДопПроводкаДт Тогда
			
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = "Корректировка стоимости перемещения";
		
			Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
			
			Проводка.СчетКт = СчетДт;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияПриемника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияПриемника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияПриемника.Субконто3);
			
			Проводка.Сумма = - СуммаКорректировки;
			
		КонецЕсли;
		
		Если ДопПроводкаКт Тогда
			
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = "Корректировка стоимости перемещения";
		
			Проводка.СчетДт = СчетКт;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
			
			Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
			
			Проводка.Сумма = - СуммаКорректировки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Здесь формируются все записи по внешнему списанию 
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, знач ОбщееКоличество, знач ОбщаяСтоимость, СтруктураДопПараметров)
	ОбщаяСтоимость = ОбщаяСтоимость.Стоимость;
	Учет = СтруктураДопПараметров.Учет;
	
	Движение = СтруктураДопПараметров.Регистратор.Движения[?(Учет = "Нал", "Налоговый", "Хозрасчетный")];
	
	// Отберем из общей таблицы списания нужные операции списания.
	ОперацийСписания = СтруктураДопПараметров.ТаблицаОперацийСписания.НайтиСтроки(ПараметрыСостоянияИсточника);
	
	УчетВПродажныхЦенах = Ложь;
	Если НЕ Учет = "Нал" Тогда
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураДопПараметров.Период, УчетнаяПолитикаНеЗадана, СтруктураДопПараметров.Организация, "Бух");
		Если УчетнаяПолитикаБУ.Количество() > 0 Тогда	
			Если (УчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				УчетВПродажныхЦенах = Истина;
			КонецЕсли;
		КонецЕсли;
		СчетВнереализационныхРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СчетВнереализационныхДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Иначе
		СчетВнереализационныхРасходов = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
		СчетВнереализационныхДоходов = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
		
	КонецЕсли;
	
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
			Если ОбщееКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			Если ОперацияСписания.КорСчет.ВидыСубконто.Количество() > 1 Тогда 
				Если ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьИмяПредопределенного(ОперацияСписания.КорСчет.ВидыСубконто[1].ВидСубконто) = "ПартииМатериаловВЭксплуатации" Тогда
					Продолжить;
					// Возвраты спецодежды не корректируются, т.к. имеют особый порядок учета
				КонецЕсли;                                                           
			КонецЕсли;
			
			
			ДолжноБытьСписано  = Окр(ОбщаяСтоимость/ОбщееКоличество * ОперацияСписания.Количество, 2); 
			СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
			
	
		
		// Уменьшим обую стоимость и количество.
		ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписано;
		ОбщееКоличество = ОбщееКоличество - ОперацияСписания.Количество;
		
		// Для расчета по средней и для корректировки списания МПЗ на косвенные расходы третью корректировку делать не надо
		Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Тогда
			Если СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "2" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("ПодразделениеПересчета, Продукция", ОперацияСписания.КорСубконто1, ПараметрыСостоянияИсточника.Субконто1));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаКорректировки <> 0 Тогда
			
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = "Корректировка стоимости списания";
			
			ОбратнаяПроводка = Ложь;
		
			ДопПроводкаДт = Ложь;
			ДопПроводкаКт = Ложь;
			
			СчетДт = ОперацияСписания.КорСчет;
			СчетКт = ПараметрыСостоянияИсточника.Счет;
			
			Если УчетВПродажныхЦенах Тогда
				Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				
				Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;	
			КонецЕсли;
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "6" 
			 Или Лев(ОперацияСписания.КорСчет.Код, 1) = "7"
			 Или Лев(ОперацияСписания.КорСчет.Код, 2) = "ПВ" Тогда // корректировка возврата поставщику производится за счет внереализационных доходов/расходов
				Проводка.СчетДт = ?(СуммаКорректировки > 0, СчетВнереализационныхРасходов, СчетВнереализационныхДоходов);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
			Иначе
				Проводка.СчетДт = ОперацияСписания.КорСчет;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
			КонецЕсли;
			
			Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
						
			Проводка.Сумма = СуммаКорректировки;
			
			Если ДопПроводкаДт Тогда
				
				Проводка = Движение.Добавить();
				
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "6" 
			 Или Лев(ОперацияСписания.КорСчет.Код, 1) = "7"
			 Или Лев(ОперацияСписания.КорСчет.Код, 2) = "ПВ" Тогда // корректировка возврата поставщику производится за счет внереализационных доходов/расходов
					Проводка.СчетДт = ?(СуммаКорректировки > 0, СчетВнереализационныхРасходов, СчетВнереализационныхДоходов);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
				Иначе
					Проводка.СчетДт = ОперацияСписания.КорСчет;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
				КонецЕсли;
			
				Проводка.СчетКт = СчетДт;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
				
				Проводка.Сумма = - СуммаКорректировки;
				
			КонецЕсли;
			
			Если ДопПроводкаКт Тогда
				
				Проводка = Движение.Добавить();
				
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
				
				Если Лев(ОперацияСписания.КорСчет.Код, 1) = "6" 
					Или Лев(ОперацияСписания.КорСчет.Код, 1) = "7"
					Или Лев(ОперацияСписания.КорСчет.Код, 2) = "ПВ" Тогда // корректировка возврата поставщику производится за счет внереализационных доходов/расходов
					Проводка.СчетДт = ?(СуммаКорректировки > 0, СчетВнереализационныхРасходов, СчетВнереализационныхДоходов);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
				Иначе
					Проводка.СчетДт = СчетКт;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
				КонецЕсли;
				
				Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
				
				Проводка.Сумма = - СуммаКорректировки;
				
			КонецЕсли;
			
			Если Учет = "Нал" Тогда
				Проводка.КорректируемыйДокумент = ОперацияСписания.Регистратор;
				Если СтруктураДопПараметров.ВидУчетаПБУ18 <> Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
					Проводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;      
					Проводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

Функция ПолучитьТаблицуОперацийСписания(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров)
	
	Учет          = СтруктураДопПараметров.Учет;
	Если СтруктураДопПараметров.Учет <> "Бух" Тогда    
	    ВидУчетаПБУ18 = СтруктураДопПараметров.ВидУчетаПБУ18;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.КорСубконто2,
		|	ВложенныйЗапрос.КорСубконто3,";
		
		Если Учет = "Нал" Тогда
			Запрос.Текст = Запрос.Текст + "
				|	ВложенныйЗапрос.Регистратор,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСписания.Счет КАК Счет,
		|		ТаблицаСписания.Субконто1 КАК Субконто1,
		|		ТаблицаСписания.Субконто2 КАК Субконто2,
		|		ТаблицаСписания.Субконто3 КАК Субконто3,
		|		ТаблицаСписания.КорСчет КАК КорСчет,
		|		ТаблицаСписания.КорСубконто1 КАК КорСубконто1,
		|		ТаблицаСписания.КорСубконто2 КАК КорСубконто2,
		|		ТаблицаСписания.КорСубконто3 КАК КорСубконто3,";
		
		Если Учет = "Нал" Тогда
			Запрос.Текст = Запрос.Текст + "
				|		ВЫБОР КОГДА ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца ТОГДА Налоговый.КорректируемыйДокумент ИНАЧЕ ТаблицаСписания.Регистратор КОНЕЦ КАК Регистратор,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		ВЫБОР КОГДА ТаблицаСписания.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто1 КОГДА ТаблицаСписания.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто2 КОГДА ТаблицаСписания.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто3 ИНАЧЕ NULL КОНЕЦ КАК Номенклатура,
		|		ВЫБОР КОГДА ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто1 КОГДА ТаблицаСписания.КорСубконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто2 КОГДА ТаблицаСписания.КорСубконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто3 ИНАЧЕ NULL КОНЕЦ КАК КорНоменклатура,";
		Если Учет = "Нал" Тогда  
			
			Запрос.Текст = Запрос.Текст + "	
			|		ВЫБОР КОГДА (ТаблицаСписания.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА ТаблицаСписания.ВидУчета = &ВидУчетаПБУ18 ТОГДА ТаблицаСписания.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК Сумма,";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|		ВЫБОР КОГДА (ТаблицаСписания.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаОборотКт КОНЕЦ КАК Сумма,";
		КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|		ВЫБОР КОГДА (ТаблицаСписания.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.КоличествоОборотКт КОНЕЦ КАК Количество
		|	ИЗ";
		
		Если Учет = "Нал" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, Запись, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ТаблицаСписания
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый КАК Налоговый
			|	ПО ТаблицаСписания.Регистратор = Налоговый.Регистратор И ТаблицаСписания.НомерСтроки = Налоговый.НомерСтроки
			|	
			|	ГДЕ
			|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ИЛИ
			|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ(ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) Или (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Склады)))";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация , , ) КАК ТаблицаСписания
			|	
			|	ГДЕ
			|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ИЛИ
			|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ(ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) Или (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Склады)))";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Хозрасчетный.Ссылка КАК Счет,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|		
		|		ГДЕ
		|			Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Хозрасчетный.Ссылка) КАК СуммовойУчет
		|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
		|
		|ГДЕ
		|	(НЕ(ВложенныйЗапрос.КорСчет В ИЕРАРХИИ (&СписокСчетов)) ИЛИ
		|	(ВЫБОР КОГДА (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура КОНЕЦ))";
		
		Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И
			|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров))";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.КорСубконто2,
		|	ВложенныйЗапрос.КорСубконто3,";
		
		Если Учет = "Нал" Тогда
			Запрос.Текст = Запрос.Текст + "
				|	ВложенныйЗапрос.Регистратор,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ";
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Учет, СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
	
	Если СтруктураДопПараметров.Учет <> "Бух" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		Запрос.УстановитьПараметр("ВидУчетаПБУ18", ВидУчетаПБУ18);
		Запрос.УстановитьПараметр("Возврат",       Перечисления.УсловияПоступленияИВыбытияИмущества.Возврат);
	КонецЕсли; 
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	СтруктураДопПараметров.Вставить("ТаблицаОперацийСписания", Таб);
	
	Возврат Таб;
		
КонецФункции // ПолучитьТаблицуОперацийСписания()

Процедура КорректировкаСтоимости(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров) Экспорт

	// В структуру дополнительных параметров добавим таблицу операции списания
	ПолучитьТаблицуОперацийСписания(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	
	РассчитатьСписаниеПоСредней(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);

КонецПроцедуры
