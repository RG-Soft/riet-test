
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Объект.Ссылка.Пустая() Тогда
		ОбновитьТекущийСтатус();
		
		// для старых версий регистров
		Если ЗначениеЗаполнено(Объект.УдалитьПлательщик) И 
			Объект.Плательщики.Количество() = 0 Тогда
			
			Стр = Объект.Плательщики.Добавить();
			Стр.Плательщик = Объект.УдалитьПлательщик;
			
		КонецЕсли;
		
		// для старых версий регистров
		Если Объект.ПричиныНесоблюденияСроков.Количество() = 0 Тогда
			
			Стр = Объект.ПричиныНесоблюденияСроков.Добавить();
			Стр.Причина = Объект.ПричинаНесоблюденияСроков;
			
		КонецЕсли;
		
		// для старых версий регистров
		Если Объект.ПричиныНесоблюденияСроковБиллинг.Количество() = 0 Тогда
			
			Стр = Объект.ПричиныНесоблюденияСроковБиллинг.Добавить();
			Стр.Причина = Объект.ПричинаНесоблюденияСроковБиллингом;
			
		КонецЕсли;
		
		// для старых версий регистров
		Если Объект.ПричиныВозврата.Количество() = 0 Тогда
			
			Стр = Объект.ПричиныВозврата.Добавить();
			Стр.Причина = Объект.ПричинаВозврата;
			
		КонецЕсли;
		
	Иначе
		Объект.ДатаРегистрации = ТекущаяДата();
		Объект.Координатор = Пользователи.ТекущийПользователь();	
		// нулевая строка. 
		// При копировании могут быть строки
		Если Объект.Плательщики.Количество() = 0 Тогда
			Объект.Плательщики.Добавить();
		КонецЕсли;
		Если Объект.ПричиныНесоблюденияСроков.Количество() = 0 Тогда
			Объект.ПричиныНесоблюденияСроков.Добавить();
		КонецЕсли;
		Если Объект.ПричиныНесоблюденияСроковБиллинг.Количество() = 0 Тогда
			Объект.ПричиныНесоблюденияСроковБиллинг.Добавить();
		КонецЕсли;
		Если Объект.ПричиныВозврата.Количество() = 0 Тогда
			Объект.ПричиныВозврата.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	Списком 			   = Объект.Плательщики.Количество() > 1;
	СпискомПричины 		   = Объект.ПричиныНесоблюденияСроков.Количество() > 1;
	СпискомПричиныБиллинг  = Объект.ПричиныНесоблюденияСроковБиллинг.Количество() > 1;
	СпискомПричиныВозврата = Объект.ПричиныВозврата.Количество() > 1;
	
	УправлениеВидимостью(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПолеПлательщики();
	ОбновитьПолеПричины();
	ОбновитьПолеПричиныБиллинг();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		
		ТекущийОбъект.мЭтоВозврат = ЭтоВозврат;
		ТекущийОбъект.мЭтоСубмит  = ЭтоСубмит;
		ТекущийОбъект.мЭтоАкцепт  = ЭтоАкцепт;
		ТекущийОбъект.мТихаяЗапись = ТихаяЗапись;
		
		Справочники.Реестры.ЗаписатьЛоги(Отказ, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповестить("ОбновлениеСпискаРеестров");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	Период = Новый ДиалогРедактированияСтандартногоПериода();
	
	Период.Период.ДатаНачала 	= Объект.ПериодОказанияУслугНачало;
	Период.Период.ДатаОкончания = Объект.ПериодОказанияУслугОкончание;
	
	Период.Показать(Новый ОписаниеОповещения("ОбработкаВыбораПериодаОказанияУслуг", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ReturnAction(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПричиныВозврата.Количество() = 0 или (Объект.ПричиныВозврата.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.ПричиныВозврата[0].Причина))) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать причину возврата реестра координатору", , ?(СпискомПричиныВозврата, "ПричиныВозврата", "ПричинаВозврата"),  "Объект");
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Истина;
	Записать();
	ЭтоВозврат = Ложь;
	ОбновитьТекущийСтатус();
	
	УправлениеВидимостью(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Submit(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		// вычищаем причину возврата реестра в работу, если уже починили
		Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered") Тогда
			Объект.ПричинаВозврата = Неопределено;
		КонецЕсли;
		
		Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Accepted") Тогда
			Объект.ДатаФинализацииБиллингом = ТекущаяДата();
		КонецЕсли;
		
		ЭтоСубмит = Истина;
		Записать();
		ЭтоСубмит = Ложь;
		ОбновитьОтображениеДанных();
		ОбновитьТекущийСтатус();
		
		УправлениеВидимостью(ЭтаФорма, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Accept(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЭтоАкцепт = Истина;
		Записать();
		ЭтоАкцепт = Ложь;
		
		ОбновитьОтображениеДанных();
		ОбновитьТекущийСтатус();
		
		УправлениеВидимостью(ЭтаФорма, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестр(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОЗаписи", ЭтаФорма, Новый Структура("Финальный", Истина)), "Элемент еще не записан, невозможно присоединить файлы. Записать?", РежимДиалогаВопрос.ОКОтмена);

	Иначе
		
		ЗагрузитьФинальныйРеестр();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияОтПодрядчикаПриИзменении(Элемент)
	
	ОбновитьТекущийСтатус();
	УправлениеВидимостью(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрПолученный(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОЗаписи", ЭтаФорма, Новый Структура("Финальный", Ложь)), "Элемент еще не записан, невозможно присоединить файлы. Записать?", РежимДиалогаВопрос.ОКОтмена);

	Иначе
		
		ЗагрузитьПервоначальныйРеестр();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОригинальныйФайл(Команда)
	
	Адрес = ПоказатьФайлНаСервере(Объект.Ссылка, Ложь);
	Если Адрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	Данные.Записать(ИмяФайла);
	
	ЗапуститьПриложение(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФинальныйРеестр(Команда)
	
	Адрес = ПоказатьФайлНаСервере(Объект.Ссылка, Истина);
	Если Адрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	Данные.Записать(ИмяФайла);
	
	ЗапуститьПриложение(ИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура СпециалистБиллингаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеСпециалистыБиллинга());
	
	ДанныеВыбора = СписокВыбора;
		
КонецПроцедуры

&НаКлиенте
Процедура ПричиныБиллингНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеПричины());
	
	//ДанныеВыбора = СписокВыбора;	
	
	ПараметрыФормы = Новый Структура;
	Режим = Элемент.Имя;
	Если Элемент = Элементы.ПричиныБиллинг Тогда
		ПараметрыФормы.Вставить("Отмеченные",    ПричиныБиллинг);
	ИначеЕсли Элемент = Элементы.Причины Тогда
		ПараметрыФормы.Вставить("Отмеченные",    Причины);
	ИначеЕсли Элемент = Элементы.ПричиныВозврата Тогда
		ПараметрыФормы.Вставить("Отмеченные",    ПричиныВозврата);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.OutOfComplianceReasons"));
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокВыбора);
	ПараметрыФормы.Вставить("ВводСписком", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", Истина);
	
	Обработчик = Новый ОписаниеОповещения("ОтборыЗавершениеВводаСпискомСФлажками", ЭтаФорма, Новый Структура("Режим", Режим));
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Блокировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗавершениеВводаСпискомСФлажками(Результат, ДопПараметры) Экспорт	
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ДопПараметры.Режим].Очистить();
	
	Для каждого ТекРез из Результат Цикл
		Если НЕ ТекРез.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЭтаФорма[ДопПараметры.Режим].Добавить(ТекРез.Значение);	
	КонецЦикла;
	
	Если ДопПараметры.Режим = "ПричиныБиллинг" Тогда
		СохранитьПричиныБиллинг()
	ИначеЕсли ДопПараметры.Режим = "Причины" Тогда
		СохранитьПричины();
	ИначеЕсли ДопПараметры.Режим = "ПричиныВозврата" Тогда
		СохранитьПричиныВозврата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикиПриИзменении(Элемент)
	СохранитьПлательщиков();
КонецПроцедуры

&НаКлиенте
Процедура ПричиныБиллингПриИзменении(Элемент)
	СохранитьПричиныБиллинг();
КонецПроцедуры

&НаКлиенте
Процедура ПричиныПриИзменении(Элемент)
	СохранитьПричины();
КонецПроцедуры

&НаКлиенте
Процедура СпискомПриИзменении(Элемент)
	
	Если НЕ Списком Тогда
		// удаляем все строки, кроме нулевого плательщика
		Удаляемые = Новый Массив;
		Для каждого ТекСтрока из Объект.Плательщики Цикл
			Если Объект.Плательщики.Индекс(ТекСтрока) > 0 Тогда
				Удаляемые.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекЭл из Удаляемые Цикл
			Объект.Плательщики.Удалить(ТекЭл);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПолеПлательщики();
	УстановитьВидимостьПолейПлательщиков(ЭтаФорма, Объект, Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура СпискомПричиныПриИзменении(Элемент)
	
	Если НЕ СпискомПричины Тогда
		// удаляем все строки, кроме нулевого плательщика
		Удаляемые = Новый Массив;
		Для каждого ТекСтрока из Объект.ПричиныНесоблюденияСроков Цикл
			Если Объект.ПричиныНесоблюденияСроков.Индекс(ТекСтрока) > 0 Тогда
				Удаляемые.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекЭл из Удаляемые Цикл
			Объект.ПричиныНесоблюденияСроков.Удалить(ТекЭл);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПолеПричины();
	УстановитьВидимостьПолейПричины(ЭтаФорма, Объект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СпискомПричиныВозвратаПриИзменении(Элемент)
	
	Если НЕ СпискомПричиныВозврата Тогда
		// удаляем все строки, кроме нулевого плательщика
		Удаляемые = Новый Массив;
		Для каждого ТекСтрока из Объект.ПричиныВозврата Цикл
			Если Объект.ПричиныВозврата.Индекс(ТекСтрока) > 0 Тогда
				Удаляемые.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекЭл из Удаляемые Цикл
			Объект.ПричиныВозврата.Удалить(ТекЭл);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПолеПричиныВозврата();
	УстановитьВидимостьПолейПричины(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпискомПричиныБиллингПриИзменении(Элемент)
	Если НЕ СпискомПричиныБиллинг Тогда
		// удаляем все строки, кроме нулевого плательщика
		Удаляемые = Новый Массив;
		Для каждого ТекСтрока из Объект.ПричиныНесоблюденияСроковБиллинг Цикл
			Если Объект.ПричиныНесоблюденияСроковБиллинг.Индекс(ТекСтрока) > 0 Тогда
				Удаляемые.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекЭл из Удаляемые Цикл
			Объект.ПричиныНесоблюденияСроковБиллинг.Удалить(ТекЭл);
			Модифицированность = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПолеПричиныБиллинг();
	УстановитьВидимостьПолейПричины(ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьПолеПлательщики()
	
	Плательщики.Очистить();
	
	Для каждого ТекПлательщик из Объект.Плательщики Цикл
		
		Плательщики.Добавить(ТекПлательщик.Плательщик);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПлательщиков()
	
	Объект.Плательщики.Очистить();
	Для каждого ТекПлательщик из Плательщики Цикл
		
		Стр = Объект.Плательщики.Добавить();
		Стр.Плательщик = ТекПлательщик.Значение;
		
	КонецЦикла;
	
	Если Объект.Плательщики.Количество() = 0 Тогда
		Объект.Плательщики.Добавить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеПричины()
	
	Причины.Очистить();
	
	Для каждого ТекПричина из Объект.ПричиныНесоблюденияСроков Цикл
		
		Причины.Добавить(ТекПричина.Причина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеПричиныВозврата()
	
	ПричиныВозврата.Очистить();
	
	Для каждого ТекПричина из Объект.ПричиныВозврата Цикл
		
		ПричиныВозврата.Добавить(ТекПричина.Причина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПричины()
	
	Объект.ПричиныНесоблюденияСроков.Очистить();
	Для каждого ТекПричина из Причины Цикл
		
		Стр = Объект.ПричиныНесоблюденияСроков.Добавить();
		Стр.Причина = ТекПричина.Значение;
		
	КонецЦикла;
	
	Если Объект.ПричиныНесоблюденияСроков.Количество() = 0 Тогда
		Объект.ПричиныНесоблюденияСроков.Добавить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПричиныВозврата()
	
	Объект.ПричиныВозврата.Очистить();
	Для каждого ТекПричина из ПричиныВозврата Цикл
		
		Стр = Объект.ПричиныВозврата.Добавить();
		Стр.Причина = ТекПричина.Значение;
		
	КонецЦикла;
	
	Если Объект.ПричиныВозврата.Количество() = 0 Тогда
		Объект.ПричиныВозврата.Добавить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеПричиныБиллинг()
	
	ПричиныБиллинг.Очистить();
	
	Для каждого ТекПричина из Объект.ПричиныНесоблюденияСроковБиллинг Цикл
		
		ПричиныБиллинг.Добавить(ТекПричина.Причина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПричиныБиллинг()
	
	Объект.ПричиныНесоблюденияСроковБиллинг.Очистить();
	Для каждого ТекПричина из ПричиныБиллинг Цикл
		
		Стр = Объект.ПричиныНесоблюденияСроковБиллинг.Добавить();
		Стр.Причина = ТекПричина.Значение;
		
	КонецЦикла;
	
	Если Объект.ПричиныНесоблюденияСроковБиллинг.Количество() = 0 Тогда
		Объект.ПричиныНесоблюденияСроковБиллинг.Добавить();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийСтатус()
	ТекущийСтатус 		= РегистрыСведений.СтатусыРеестров.ТекущийСтатусРеестра(Объект.Ссылка);
	ДнейВСтатусе  		= РегистрыСведений.СтатусыРеестров.КоличествоДнейВТекущемСтатусе(Объект.Ссылка);
	ДнейВСтатусеБиллинг = 0;
	Если ДнейВСтатусе = 0 и ЗначениеЗаполнено(Объект.ДатаПолученияОтПодрядчика) Тогда
		ДнейВСтатусе = (НачалоДня(ТекущаяДата()) - НачалоДня(Объект.ДатаПолученияОтПодрядчика)) / 86400;
	КонецЕсли;
	
	ДатаОбработкиКоординатором = РегистрыСведений.СтатусыРеестровLog.ДатаЗавершенияОбработкиКоординатором(Объект.Ссылка);
	Если НЕ ДатаОбработкиКоординатором = Неопределено ТОгда
		ДнейВСтатусеБиллинг = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаОбработкиКоординатором)) / 86400;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериодаОказанияУслуг(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодОказанияУслугНачало 	= Результат.ДатаНачала;
	Объект.ПериодОказанияУслугОкончание = Результат.ДатаОкончания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма, Объект)
	
	ТекущийСтатус 			= Форма.ТекущийСтатус;
	ДнейВСтатусе  			= Форма.ДнейВСтатусе;
	ДнейВСтатусеБиллинг  	= Форма.ДнейВСтатусеБиллинг;
	Элементы      			= Форма.Элементы;
	
	// если количество дней > 5 и статус = зарегистрирован, то надо показать причину
	Элементы.ГруппаПричинаНесоблюденияСроков.Видимость 			=  ЗначениеЗаполнено(Объект.ДатаПолученияОтПодрядчика) И (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered") И ДнейВСтатусе >= 5);
	Элементы.ГруппаПричинаНесоблюденияСроковБиллингом.Видимость =  ДнейВСтатусеБиллинг >= 5;
	
	Элементы.СпециалистБиллинга.Видимость = ЗначениеЗаполнено(Объект.ДатаФинализации);
	Элементы.СпециалистБиллинга.ТолькоПросмотр = (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.SubmittedCoordinator") И (ЗначениеЗаполнено(Объект.СпециалистБиллинга) И НЕ Пользователи.ТекущийПользователь() = Объект.СпециалистБиллинга))
													или ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Accepted")
													или ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Finished");  
	
	Элементы.ГруппаПричинаВозврата.Видимость = (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Accepted")) или ЗначениеЗаполнено(Объект.ПричинаВозврата);
	Элементы.ГруппаФинальныйРеестр.Видимость = ЗначениеЗаполнено(Объект.ДатаПолученияОтПодрядчика);
	
	Элементы.ЗагрузитьРеестрПолученный.Видимость = (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered") или ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.ПустаяСсылка")); //НЕ ЕстьФайлНаСервере(Объект.Ссылка, Ложь);
	Элементы.ПоказатьОригинальныйФайл.Видимость = ЕстьФайлНаСервере(Объект.Ссылка, Ложь);//НЕ Элементы.ЗагрузитьРеестрПолученный.Видимость;
	
	Элементы.ЗагрузитьРеестр.Видимость = (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.ПустаяСсылка") или ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered"));
	Элементы.ПоказатьФинальныйРеестр.Видимость = ЕстьФайлНаСервере(Объект.Ссылка, Истина);//Элементы.ПоказатьОригинальныйФайл.Видимость И НЕ Элементы.ЗагрузитьРеестр.Видимость;
	
	Элементы.ГруппаПоляКоординатора.ТолькоПросмотр = ( ЗначениеЗаполнено(ТекущийСтатус) И НЕ ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered"));
	                                	
	// Установить видимость кнопок
	УстановитьВидимостьКнопок(Форма, Объект);
	
	// 
	УстановитьВидимостьПолейПлательщиков(Форма, Объект);
	
	//
	УстановитьВидимостьПолейПричины(Форма, Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКнопок(Форма, Объект)
	
	ТекущийСтатус = Форма.ТекущийСтатус;
	ДнейВСтатусе  = Форма.ДнейВСтатусе;
	Элементы      = Форма.Элементы;

	// скрываем все кнопки
	Кнопки = Новый Массив;
	//Кнопки.Добавить(Элементы.ФормаЗаписатьИЗакрыть);
	Кнопки.Добавить(Элементы.СписокSubmit);
	Кнопки.Добавить(Элементы.ФормаReturn);
	Кнопки.Добавить(Элементы.ФормаAccept); 
	                                   
	Для каждого Кнопка из Кнопки Цикл
		
		Кнопка.Видимость = Ложь;
		
	КонецЦикла;
	
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Registered") или ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.ПустаяСсылка") Тогда
		Если ЗначениеЗаполнено(Объект.ДатаФинализации) Тогда
			Элементы.СписокSubmit.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.SubmittedCoordinator") Тогда
		Элементы.ФормаAccept.Видимость = (Объект.СпециалистБиллинга = Пользователи.ТекущийПользователь() );
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Accepted") Тогда
		Элементы.СписокSubmit.Видимость = Истина;
		Если Объект.ПричиныВозврата.Количество() > 0 И 
			ЗначениеЗаполнено(Объект.ПричиныВозврата[0].Причина) Тогда
			Элементы.ФормаReturn.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРеестров.Finished") Тогда 
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	ИначеЕсли  ТекущийСтатус = Неопределено Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;	
	КонецЕсли;
	
	/// установим кнопку по умолчанию
	КнопкаПоДефолту = Неопределено;
	
	Для каждого ТекКнопка из Кнопки Цикл
		
		Если НЕ ТекКнопка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекКнопка = Элементы.ФормаЗаписатьИЗакрыть Тогда
			Продолжить;
		КонецЕсли;
		
		КнопкаПоДефолту = ТекКнопка;
		Прервать;
		
	КонецЦикла;
	
	Если НЕ КнопкаПоДефолту = Неопределено Тогда
		КнопкаПоДефолту.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОЗаписи(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Попытка
			ЗаписатьОбъект();
		Исключение
			ПоказатьПредупреждение(, "Не удалось записать элемент справочника!");
			Возврат;
		КонецПопытки;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
		
			Если ДопПараметры.Финальный Тогда
				ЗагрузитьФинальныйРеестр();
			Иначе			
				ЗагрузитьПервоначальныйРеестр();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПервоначальныйРеестр()
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
			
	Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект, Новый Структура("Финальный", Ложь));
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФинальныйРеестр()
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
			
	Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект, Новый Структура("Финальный", Истина));
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура LoadFile(РезультатПомещенияФайлов, ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяXLSФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	Если ДополнительныеПараметры.Финальный Тогда 
		// прикрепляем файл к реестру
		ПрикрепитьФайлРеестра(ДополнительныеПараметры);
		
		Попытка 
			ТихаяЗапись = Истина;
			ЗаписатьОбъект();
			ТихаяЗапись = Ложь;
		Исключение
		КонецПопытки;
		
	Иначе
		ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, ДополнительныеПараметры);
	КонецЕсли;
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
	УправлениеВидимостью(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбъект()
	
	СпрОбъект = РеквизитФормыВЗначение("Объект");
	СпрОбъект.мЭтоВозврат = ЭтоВозврат;
	СпрОбъект.мЭтоСубмит  = ЭтоСубмит;
	СпрОбъект.мЭтоАкцепт  = ЭтоАкцепт;
	СпрОбъект.мТихаяЗапись = ТихаяЗапись;
	
	СпрОбъект.Записать();
	
	ЗначениеВРеквизитФормы(СпрОбъект, "Объект");
	
	ОбновитьТекущийСтатус();
	УправлениеВидимостью(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, ДополнительныеПараметры)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, ДополнительныеПараметры);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ТекстОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	RecordSet = Новый COMObject("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока RecordSet.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(RecordSet.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			RecordSet.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = RecordSet.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		RecordSet.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	ТаблицаExcel.Колонки.Добавить("НомерТрипа", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		RecordSet.Close();
		RecordSet.Open(sqlString);
		
		RecordSet.MoveFirst();
		
		СвойстваСтруктуры = "НомерТрипа";
		СтруктураИменИНомеровКолонок = Новый Структура("НомерТрипа", 1);
		
		НомерСтроки = 0;
		Пока RecordSet.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				RecordSet.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = RecordSet.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			RecordSet.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, ДополнительныеПараметры) 
	
	Если ТаблицаExcel.Количество() = 0 Тогда
		Сообщить("Файл не содержит данных о поставках. Файл не прикреплен к реестру!");
		Возврат;
	КонецЕсли;
	
	// иначе заполняем табличную часть трипами
	ЗаполнитьСписокТрипов(ТаблицаExcel);
	
	// прикрепляем файл к реестру
	ПрикрепитьФайлРеестра(ДополнительныеПараметры);	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТрипов(ТаблицаExcel)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	TripNonLawsonCompanies.Ссылка,
	|	TripNonLawsonCompanies.Номер
	|ИЗ
	|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
	|ГДЕ
	|	TripNonLawsonCompanies.Номер В(&Номера)";
	
	НомераТрипов = Новый Массив;
	
	Для каждого ТекСтрокаТаблицы из ТаблицаExcel Цикл
		
		Номера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрокаТаблицы.НомерТрипа, Символы.ПС);
		
		Для каждого Номер из Номера Цикл
			НомераТрипов.Добавить(Номер);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номера", НомераТрипов);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Объект.Поставки.Очистить();
	
	НайденныеНомера = Новый Массив;
	
	Пока Результат.Следующий() Цикл
		Стр = Объект.Поставки.Добавить();
		Стр.Поставка = Результат.Ссылка;
		
		НайденныеНомера.Добавить(СокрЛП(Результат.Номер));
	КонецЦикла;
	
	// отобразим, что не нашли
	Для каждого ТекНомер из НомераТрипов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденныеНомера.Найти(СокрЛП(ТекНомер)) = Неопределено Тогда
			Сообщить("Не найден документ с номером: " + Строка(ТекНомер));	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьФайлРеестра(ДополнительныеПараметры)
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ДополнительныеПараметры.ПолноеИмяФайла);
    АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Если ДополнительныеПараметры.Финальный Тогда
		ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка, "Final", "xlsx",, , АдресВХранилище, , "Финальный файл реестра подрядчика", , , , "Реестр подрядчика финализированный"); 
		Если Не ЗначениеЗаполнено(Объект.ДатаФинализации) Тогда 
			Объект.ДатаФинализации = ТекущаяДата();
		КонецЕсли;
	Иначе
		ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка, "Original", "xlsx",, , АдресВХранилище, , "Оригинальный файл реестра подрядчика", , , , "Реестр подрядчика"); 
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПолученияОтПодрядчика) Тогда
			Объект.ДатаПолученияОтПодрядчика = ТекущаяДата();
			ОбновитьТекущийСтатус();
			УправлениеВидимостью(ЭтаФорма, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказатьФайлНаСервере(Реестр, Финальный)
	
	Если Финальный Тогда
		Возврат Справочники.Реестры.ПолучитьФинальныйРеестр(Реестр);	
	Иначе
		Возврат Справочники.Реестры.ПолучитьОригинальныйРеестр(Реестр);	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьФайлНаСервере(Реестр, Финальный)
	
	Если Финальный Тогда
		Возврат Справочники.Реестры.ФинальныйРеестрЗагружен(Реестр);	
	Иначе
		Возврат Справочники.Реестры.ИсходныйРеестрЗагружен(Реестр);	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьДокументТестНаСервере()
	
	Возврат Справочники.Реестры.СоздатьДокументRentalCosts(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументТест(Команда)
	Док = СоздатьДокументТестНаСервере();
	ПоказатьЗначение(, Док);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейПлательщиков(Форма, Объект, ПоКоманде = Ложь)
	
	Элементы = Форма.Элементы;
	
	Если Объект.Плательщики.Количество() = 1 И НЕ Форма.Списком Тогда
		Элементы.Плательщики.Видимость = Ложь;
		Элементы.Плательщик.Видимость = Истина;
	Иначе
		Элементы.Плательщики.Видимость = Истина;
		Элементы.Плательщик.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПолейПричины(Форма, Объект, ПоКоманде = Ложь)
	
	Элементы = Форма.Элементы;
	
	Если Объект.ПричиныНесоблюденияСроков.Количество() = 1 И НЕ Форма.СпискомПричины Тогда
		Элементы.Причины.Видимость = Ложь;
		Элементы.ПричинаНесоблюденияСроков.Видимость = Истина;
	Иначе
		Элементы.Причины.Видимость = Истина;
		Элементы.ПричинаНесоблюденияСроков.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ПричиныНесоблюденияСроковБиллинг.Количество() = 1 И НЕ Форма.СпискомПричиныБиллинг Тогда
		Элементы.ПричиныБиллинг.Видимость = Ложь;
		Элементы.ПричинаНесоблюденияСроковБиллингом.Видимость = Истина;
	Иначе
		Элементы.ПричиныБиллинг.Видимость = Истина;
		Элементы.ПричинаНесоблюденияСроковБиллингом.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ПричиныВозврата.Количество() = 1 И НЕ Форма.СпискомПричиныВозврата Тогда
		Элементы.ПричиныВозврата.Видимость = Ложь;
		Элементы.ПричинаВозврата.Видимость = Истина;
	Иначе
		Элементы.ПричиныВозврата.Видимость = Истина;
		Элементы.ПричинаВозврата.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеСпециалистыБиллинга()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль.Имя = ""LocalDistributionBillingSpecialist_ForNonLawsonCompanies""";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеПричины()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	OutOfComplianceReasons.Ссылка как Причина
	|ИЗ
	|	Справочник.OutOfComplianceReasons КАК OutOfComplianceReasons
	|ГДЕ
	|	OutOfComplianceReasons.ResponsibleForOutOfCompliance = ЗНАЧЕНИЕ(Перечисление.ResponsibleForOutOfCompliance.Catalogues)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Причина");
КонецФункции

&НаКлиенте
Процедура ПричиныВозвратаПриИзменении(Элемент)
	
	СохранитьПричиныВозврата();
	УстановитьВидимостьКнопок(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаВозвратаПриИзменении(Элемент)
	УстановитьВидимостьКнопок(ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти