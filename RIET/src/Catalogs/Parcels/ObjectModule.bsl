
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.свойство("СтрокаИнвойса") Тогда 
		
		//заполняем парсель из истории (по парт номеру инвойса)	
		PackingType = ДанныеЗаполнения.PackingType;
		Length = ДанныеЗаполнения.Length;
		Width = ДанныеЗаполнения.Width;
		Height = ДанныеЗаполнения.Height;
		DIMsUOM = ДанныеЗаполнения.DIMsUOM;
		SpecialHandling = ДанныеЗаполнения.SpecialHandling;
		HazardClass = ДанныеЗаполнения.HazardClass;
		Код = ДанныеЗаполнения.Код;
		
		НоваяСтрока = Детали.Добавить();
		НоваяСтрока.СтрокаИнвойса = ДанныеЗаполнения.СтрокаИнвойса;
		НоваяСтрока.Qty = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "Количество");
		НоваяСтрока.QtyUOM = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "ЕдиницаИзмерения");
		НоваяСтрока.NetWeight = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "NetWeight");
		НоваяСтрока.НомерЗаявкиНаЗакупку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "НомерЗаявкиНаЗакупку");
		НоваяСтрока.СтрокаЗаявкиНаЗакупку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку");
		
		Если ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда 
			НоваяСтрока.Receiver = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "ImportReference");
			НоваяСтрока.СерийныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.СтрокаИнвойса, "СерийныйНомер");
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ExportRequest") Тогда 
			ExportRequest = ДанныеЗаполнения.Ссылка;
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.TransportRequest") Тогда 
			TransportRequest = ДанныеЗаполнения.Ссылка;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(NumOfParcels) Тогда
		NumOfParcels = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(DIMsUOM) Тогда
		DIMsUOM = Справочники.UOMs.CM;
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(WeightUOM) Тогда
		WeightUOM = Справочники.UOMs.KG;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	CreatedBy = Неопределено;
	CreationDate = Неопределено;
	ModifiedBy = Неопределено;
	ModificationDate = Неопределено;
	Если Не ЗначениеЗаполнено(ОбъектКопирования.HazardClass) Тогда
		HazardClass = Справочники.HazardClasses.NonHazardous
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ExportRequest) ИЛИ ЗначениеЗаполнено(TransportRequest) Тогда 
		Код = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
      

////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных(Отказ);
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();
	
	ДозаполнитьРеквизитыCДополнительнымиДанными(
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest,
		ДополнительныеСвойства.ТаблицаItems);
		
	// { RGS AARsentev 27.02.2018 - LOGS
	ЗарегистрироватьИзменения(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовТЧДетали);
	// } RGS AARsentev 27.02.2018 - LOGS
	
	ПроверитьВозможностьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаВыгруженныхВTMSTrips,
		// { RGS AGorlenko 11.11.2014 1:07:31 - трипы, в которых есть парсель, для контроля Wh-from
		ДополнительныеСвойства.ВыборкаTripsCДругимWhFrom,
		// } RGS AGorlenko 11.11.2014 1:07:32 - трипы, в которых есть парсель, для контроля Wh-from
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовТЧGoods,
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest,
		// { RGS AARsentev 27.02.2018 - LOGS
		ДополнительныеСвойства.ИзменилисьТолькоОтражаемыеВЛогахРеквизиты
		// } RGS AARsentev 27.02.2018 - LOGS
		);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
			
	ПроверитьРеквизитыСДополнительнымиДанными(
		Отказ,
		ДополнительныеСвойства.ВыборкаParcelsСТакимЖеКодом,
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		ДополнительныеСвойства.ТаблицаItems,
		ДополнительныеСвойства.ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	// { RGS AArsentev 25.07.2016 16:17:00
	//УстановитьПривилегированныйРежим(Истина);
	//СтрокаИсключаемыхРеквизитов = "CreatedBy, CreationDate, ModifiedBy, ModificationDate, Проведен";
	//Изменения = ImportExportСервер.РегистрацияИзмененийРеквизитовОбъекта(ЭтотОбъект, СтрокаИсключаемыхРеквизитов);
	//
	//Если Изменения <> Неопределено тогда
	//	Запрос = новый запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка КАК Ссылка,
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA,
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.MOT,
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Accepted,
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Received,
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Requested
	//	|ИЗ
	//	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	//	|ГДЕ
	//	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = &Parcel";
	//	Запрос.УстановитьПараметр("Parcel", Ссылка);
	//	Результат = Запрос.Выполнить().Выбрать();
	//	Если Результат.Количество() > 0 Тогда
	//		Результат.Следующий();
	//		НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
	//		НаборЗаписей.Отбор.DOC.Установить(Результат[0].Ссылка);
	//		НаборЗаписей.Прочитать();
	//		Запись = НаборЗаписей.Добавить();
	//		Запись.Период = ТекущаяДата();
	//		Запись.Version = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(Результат[0].Ссылка) + 1;
	//		Запись.DOC = Результат[0].Ссылка;
	//		Запись.CCA = Результат[0].CCA;
	//		Запись.MOT = Результат[0].MOT;
	//		Запись.Received = Результат[0].Received;
	//		Запись.Accepted = Результат[0].Accepted;
	//		Запись.Requested = Результат[0].Requested;
	//		Запись.ИзменилсяСостав = Истина;	
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	// { RGS AArsentev 25.07.2016 16:17:00
		
	
	ОбновитьРеквизитыItems(Отказ, ДополнительныеСвойства.ТаблицаItems);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	//ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных(Отказ)
	
	Если ЗначениеЗаполнено(TransportRequest) Тогда
		LocalOnly = Истина;
		Проверен = Истина;
		Отменен = ПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Проверен = Ложь;
	КонецЕсли;

	Код = СокрЛП(Код);	
	DONo = СокрЛП(DONo);	
	SerialNo = СокрЛП(SerialNo);
	Comment = СокрЛП(Comment);
	
	Если ЭтоНовый() Тогда
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		CreationDate = ТекущаяДата();
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;	
	
	Для Каждого СтрокаДеталей Из Детали Цикл
		СтрокаДеталей.НомерЗаявкиНаЗакупку = ВРег(СокрЛП(СтрокаДеталей.НомерЗаявкиНаЗакупку));		
		СтрокаДеталей.Receiver = ВРег(СокрЛП(СтрокаДеталей.Receiver));
		СтрокаДеталей.СерийныйНомер = ВРег(СокрЛП(СтрокаДеталей.СерийныйНомер));
	КонецЦикла;
	
	// Перезаполним некоторое поля размеров и весов в шапке
	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(ЭтотОбъект, Справочники.UOMs.CM, Справочники.UOMs.KG);
	
	РаспределитьВесаПоСтрокамТЧ(Отказ);
	
	ТаблицаPONo = Детали.Выгрузить(,"НомерЗаявкиНаЗакупку");
	ТаблицаPONo.Свернуть("НомерЗаявкиНаЗакупку");
	ТаблицаPONo.Сортировать("НомерЗаявкиНаЗакупку");
	МассивPONo = ТаблицаPONo.ВыгрузитьКолонку("НомерЗаявкиНаЗакупку");
	POList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивPONo, ", ");
	
	Если LocalOnly Тогда 
		Repacked = Ложь;
	иначе
		LocalImpacked = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Urgency) Тогда
		Urgency = Перечисления.Urgencies.Standard;
	КонецЕсли;
	
	Наименование =
		СокрЛП(Код)
		+ " " + PackingType
		+ " " + Формат(LengthCM, "ЧДЦ=1") + "x" + Формат(WidthCM, "ЧДЦ=1") + "x" + Формат(HeightCM, "ЧДЦ=1") + " cm."
		+ " Gross: " + Формат(GrossWeightKG, "ЧДЦ=2") + " kg.";
	
КонецПроцедуры

Процедура РаспределитьВесаПоСтрокамТЧ(Отказ)
	
	Если Детали.Количество() > 0 Тогда
		
		РаспределяемаяТаблица = Новый ТаблицаЗначений;
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,4));	
		РаспределяемаяТаблица.Колонки.Добавить("ChargeableWeight", ТипЧисло);
		РаспределяемаяТаблица.Колонки.Добавить("GrossWeightKG", ТипЧисло);
		НоваяСтрока = РаспределяемаяТаблица.Добавить();
		НоваяСтрока.ChargeableWeight = ChargeableWeight;
		НоваяСтрока.GrossWeightKG = GrossWeightKG;
		
		НеУдалосьРаспределить = Ложь;
		CustomsСервер.РаспределитьСуммы(РаспределяемаяТаблица, "Parcel " + ЭтотОбъект, "ChargeableWeight,GrossWeightKG", "Items", "Qty", "Qty", Детали, НеУдалосьРаспределить);
		Если НеУдалосьРаспределить И Проверен Тогда
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ)
	
	Если Отменен ИЛИ ПометкаУдаления Тогда
		
		// Если пытаемся отменить или пометить на удаление проверенный Парсель
		Если Проверен Тогда
			ТекстОшибки = "Parcel can not be marked as Canceled and Final at the same time!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, , , Отказ);
		КонецЕсли;
			
		Возврат;	
		
	КонецЕсли;
	
	// Проверим заполнение кода для неэкспортных парселей
	Если НЕ ЗначениеЗаполнено(ExportRequest) 
		И НЕ ЗначениеЗаполнено(TransportRequest)
		И НЕ ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		ТекстОшибки = """No."" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	    	ТекстОшибки,
			ЭтотОбъект, "Код", , Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Детали Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтрокаИнвойса) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": не заполнен ""Item / Товар""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + ": ""Item"" is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
				
		КонецЕсли;
		 			
	КонецЦикла;
	
	Если НЕ Проверен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Детали Цикл
		  		  		 				
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Qty) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": не заполнено поле ""Qty / Количество""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + ": ""Qty"" is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].Qty", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.QtyUOM) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": не заполнено поле ""UOM / Ед. изм.""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + ": ""UOM"" is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].QtyUOM", , Отказ);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(NumOfParcels) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Num. of parcels / Количество одинаковых упаковок'!";
		иначе
			ТекстОшибки = "'Num. of parcels' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "NumOfParcels", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(PackingType) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Packing type / Тип упаковки'!";
		иначе
			ТекстОшибки = "'Packing type' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "PackingType", , Отказ);
	КонецЕсли;
	
	// В импортных парселях должен быть заполнен DO no.
	Если НЕ LocalOnly И НЕ ЗначениеЗаполнено(ExportRequest)
		И НЕ ЗначениеЗаполнено(TransportRequest)
		И НЕ ЗначениеЗаполнено(DONo) Тогда
		ТекстОшибки = """DO no."" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "DONo", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(DIMsUOM) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'UOM / Ед. изм.' для размеров упаковки!";
		иначе
			ТекстОшибки = "'DIMs UOM' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "DIMsUOM", , Отказ);				
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Length) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Length / Длина'!";
		иначе
			ТекстОшибки = "'Length' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Length", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Width) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Width / Ширина'!";
		иначе
			ТекстОшибки = "'Width' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Width", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Height) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Height / Высота'!";
		иначе
			ТекстОшибки = "'Height' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Height", , Отказ);
	КонецЕсли;
	
	// Проверим веса
	
	Если Не LocalOnly И НЕ ЗначениеЗаполнено(NetWeight) Тогда
		ТекстОшибки = """Total net weight"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "NetWeight", , Отказ);
	КонецЕсли;
		
	// Итог веса нетто по табличной части должен совпадать с весом нетто в шапке
	ИтогNetWeight = Детали.Итог("NetWeight");
	Если ИтогNetWeight <> 0 И ИтогNetWeight <> NetWeight Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Итог веса нетто в таблице товаров (" + ИтогNetWeight +
				") должен совпадать с весом нетто в шапке (" + NetWeight + ")!";
		иначе
			ТекстОшибки = "Items total net weight in lines (" + ИтогNetWeight + 
				") differs from total net weight in header (" + NetWeight + ")!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "NetWeight", , Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GrossWeight) Тогда
		
		// { RGS AGorlenko 28.11.2014 15:51:04 - для локальных парселей сверяем с gross weight corrected (если он заполнен), для импортных - с gross weight
		//Если NetWeight > GrossWeight Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Total net weight"" can not exceed ""Total gross weight""!",
		//		ЭтотОбъект, "NetWeight", , Отказ);
		//КонецЕсли;
		Если Не LocalOnly ИЛИ GrossWeightCorrected = 0 Тогда
			Если NetWeight > GrossWeight Тогда
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "'Net weight / Вес нетто' не может превышать 'Gross weight / Вес брутто'!";
				иначе
					ТекстОшибки = "'Total net weight' can not exceed 'Total gross weight'!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "NetWeight", , Отказ);
			КонецЕсли;
		Иначе
			Если NetWeight > GrossWeightCorrected Тогда
				ТекстОшибки = """Total net weight"" can not exceed ""Total gross weight (corrected)""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "NetWeight", , Отказ);
			КонецЕсли;
		КонецЕсли;
		// } RGS AGorlenko 28.11.2014 15:51:46 - net weight не загружаем
		
	Иначе
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Gross weight / Вес брутто'!";
		иначе
			ТекстОшибки = "'Total gross weight' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "GrossWeight", , Отказ);
			
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(WeightUOM) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'UOM / Ед. изм.' для веса!";
		иначе
			ТекстОшибки = "'Weight UOM' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "WeightUOM", , Отказ);			
	КонецЕсли;   			  			
	
	Если (LocalOnly ИЛИ ЗначениеЗаполнено(ExportRequest))
		И Не ЗначениеЗаполнено(HazardClass) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Hazard class / Класс опасности'!";
		иначе
			ТекстОшибки = "'Hazard class' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "HazardClass", , Отказ);
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(TransportRequest)
		И WarehouseTo = Справочники.Warehouses.UNKN Тогда
		ТекстОшибки = "Warehouse-To can not be 'UNKNOWN'!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "WarehouseTo", , Отказ);
	КонецЕсли;
	
	Если Детали.Количество() = 0 Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнена таблица 'Items / Товары'!";
		иначе
			ТекстОшибки = "'Items' table is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Детали", , Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если НЕ ЭтоНовый() Тогда
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			|	Parcels.Код КАК No,
			|	Parcels.DONo,
			|	Parcels.ПометкаУдаления,
			|	Parcels.Проверен,
			|	Parcels.GrossWeightKG КАК GrossWeightKG,
			|	Parcels.LengthCM КАК LengthCM,
			|	Parcels.WidthCM КАК WidthCM,
			|	Parcels.HeightCM КАК HeightCM,
			|	Parcels.WarehouseFrom,
			|	Parcels.DeliveredToWH,
			|	Parcels.NumOfParcels,
			|	Parcels.PackingType,
			|	Parcels.SerialNo,
			|	Parcels.NetWeightKG,
			|	Parcels.VolumeWeight,
			|	Parcels.LocalOnly,
			|	Parcels.Отменен,
			|	Parcels.WarehouseTo,
			|	Parcels.Urgency,
			|	Parcels.Repacked,
			|	Parcels.SpecialHandling,
			|	Parcels.LocalImpacked,
			|	Parcels.HazardClass,
			|	Parcels.CubicMeters,
			|	Parcels.Наименование,
			|	Parcels.Length,
			|	Parcels.Width,
			|	Parcels.Height,
			|	Parcels.GrossWeight,
			|	Parcels.TransportRequest,
			|	Parcels.NetWeight,
			|	Parcels.Comment,
			|	Parcels.RDD,
			|	Parcels.ModifiedBy,
			|	Parcels.ModificationDate
			|ИЗ
			|	Справочник.Parcels КАК Parcels
			|ГДЕ
			|	Parcels.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("СтарыеРеквизитыТЧGoods",
			"ВЫБРАТЬ
			|	ParcelsItems.НомерЗаявкиНаЗакупку,
			|	ParcelsItems.СтрокаЗаявкиНаЗакупку,
			|	ParcelsItems.Receiver,
			|	ParcelsItems.СерийныйНомер,
			|	ParcelsItems.СтрокаИнвойса,
			|	ParcelsItems.Qty,
			|	ParcelsItems.QtyUOM,
			|	ParcelsItems.NetWeight,
			|	ParcelsItems.GrossWeightKG,
			|	ParcelsItems.ChargeableWeight,
			|	ParcelsItems.НомерСтроки
			|ИЗ
			|	Справочник.Parcels.Детали КАК ParcelsItems
			|ГДЕ
			|	ParcelsItems.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("ВыгруженныеВTMSTrips",
			"ВЫБРАТЬ
			|	TripParcels.Ссылка.Представление КАК TripПредставление
			|ИЗ
			|	Документ.Trip.Parcels КАК TripParcels
			|ГДЕ
			|	TripParcels.Parcel = &Ссылка
			|	И TripParcels.Ссылка.DomesticOBSentToTMS
			|	И НЕ TripParcels.Ссылка.ПометкаУдаления");
			
		// { RGS AGorlenko 11.11.2014 0:56:50 - трипы, в которых есть парсель, для контроля Wh-from
		СтруктураТекстов.Вставить("TripsCДругимWhFrom",
			"ВЫБРАТЬ
			|	TripParcels.Ссылка.Представление КАК TripПредставление
			|ИЗ
			|	Документ.Trip.Parcels КАК TripParcels
			|ГДЕ
			|	TripParcels.Parcel = &Ссылка
			|	И TripParcels.Ссылка.WarehouseFrom <> &WarehouseFrom
			|	И НЕ TripParcels.Ссылка.ПометкаУдаления");
		СтруктураПараметров.Вставить("WarehouseFrom", WarehouseFrom);
		// } RGS AGorlenko 11.11.2014 0:58:41 - трипы, в которых есть парсель, для контроля Wh-from
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ExportRequest) Тогда
		
		СтруктураПараметров.Вставить("ExportRequest", ExportRequest);
		СтруктураТекстов.Вставить("РеквизитыExportRequest", 
			"ВЫБРАТЬ
			|	ExportRequest.Номер,
			|	ExportRequest.AcceptedBySpecialist,
			|	ExportRequest.LocalATA,
			|	ExportRequest.Company КАК ParentCompany,
			|	ExportRequest.Submitted,
			|	ExportRequest.InternationalOBSentToTMS
			|ИЗ
			|	Документ.ExportRequest КАК ExportRequest
			|ГДЕ
			|	ExportRequest.Ссылка = &ExportRequest");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(TransportRequest) Тогда
		
		СтруктураПараметров.Вставить("TransportRequest", TransportRequest);
		СтруктураТекстов.Вставить("РеквизитыTransportRequest", 
			"ВЫБРАТЬ
			|	TransportRequest.Номер,
			|	TransportRequest.Проведен,
			|	TransportRequest.Specialist
			|ИЗ
			|	Документ.TransportRequest КАК TransportRequest
			|ГДЕ
			|	TransportRequest.Ссылка = &TransportRequest");
		
	КонецЕсли;

	InvoiceLines = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Детали, "СтрокаИнвойса");	
	Если InvoiceLines.Количество() Тогда
			
		СтруктураПараметров.Вставить("InvoiceLines", InvoiceLines);
		СтруктураТекстов.Вставить("РеквизитыItems",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК InvoiceLine,
			|	Items.ЕдиницаИзмерения КАК UOM,
			|	Items.ПометкаУдаления,
			|	Items.ExportRequest,
			|	Items.TransportRequest,
			|	Items.НомерЗаявкиНаЗакупку КАК PONo,
			|	Items.СтрокаЗаявкиНаЗакупку КАК POLine,
			|	Items.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку КАК POLineNo,
			|	Items.ImportReference КАК Reference,
			|	Items.СерийныйНомер КАК SerialNum,
			|	ЕСТЬNULL(Items.Инвойс.Отменен, ЛОЖЬ) КАК InvoiceCancelled,
			|	Items.Инвойс.Номер КАК InvoiceNo,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(справочник.Warehouses.пустаяСсылка)) = ЗНАЧЕНИЕ(справочник.Warehouses.пустаяСсылка)
			|			ТОГДА ЕСТЬNULL(BORGs1.DefaultWH, ЗНАЧЕНИЕ(справочник.Warehouses.пустаяСсылка))
			|		ИНАЧЕ ЕСТЬNULL(Items.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(справочник.Warehouses.пустаяСсылка))
			|	КОНЕЦ КАК DefaultWarehouseTo,
			|	Items.Количество КАК Qty,
			|	Items.NetWeight,
			|	Items.WeightUOM,
			|	Items.Final,
			|	Items.СтрокаЗаявкиНаЗакупку.Владелец.Поставщик КАК Supplier,
			|	Items.СтрокаЗаявкиНаЗакупку.СпециальныеИнструкции КАК SpecialInstructions,
			|	ВЫРАЗИТЬ(Items.НаименованиеТовара КАК СТРОКА(300)) КАК НаименованиеТовара,
			|	Items.HazardClass
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs1
			|		ПО (НЕ BORGs1.ПометкаУдаления)
			|			И (ПОДСТРОКА(Items.НомерЗаявкиНаЗакупку, 1, 2) = BORGs1.Код)
			|ГДЕ
			|	Items.Ссылка В(&InvoiceLines)");
					
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		
		// { RGS AGorlenko 07.05.2014 17:04:07 - убираем префиксы
		//Если ЗначениеЗаполнено(Prefix) Тогда
		//	
		//	СтруктураПараметров.Вставить("Код", Код);
		//	СтруктураПараметров.Вставить("Prefix", Prefix);
		//	СтруктураТекстов.Вставить("ParcelsСТакимЖеКодом",
		//		"ВЫБРАТЬ
		//		|	Parcels.Представление
		//		|ИЗ
		//		|	Справочник.Parcels КАК Parcels
		//		|ГДЕ
		//		|	Parcels.Код = &Код
		//		|	И Parcels.Prefix = &Prefix
		//		|	И Parcels.Ссылка <> &Ссылка
		//		|	И НЕ Parcels.Отменен");
		//		
		//иначе	
		// } RGS AGorlenko 07.05.2014 17:04:12 - убираем префиксы
			
			СтруктураПараметров.Вставить("Код", Код);
			СтруктураТекстов.Вставить("ParcelsСТакимЖеКодом",
				"ВЫБРАТЬ
				|	Parcels.Представление
				|ИЗ
				|	Справочник.Parcels КАК Parcels
				|ГДЕ
				|	Parcels.Код = &Код
				|	И Parcels.Ссылка <> &Ссылка
				|	И (НЕ Parcels.Отменен)");
				
		// { RGS AGorlenko 07.05.2014 17:04:29 - убираем префиксы
		//КонецЕсли;
		// } RGS AGorlenko 07.05.2014 17:04:35 - убираем префиксы
		
	КонецЕсли;
	
	Если Проверен Тогда
					
		Если InvoiceLines.Количество() Тогда
			
			СтруктураТекстов.Вставить("QtyИNetWeightInvoiceLinesВДругихParcels",
				"ВЫБРАТЬ
				|	ParcelsItems.СтрокаИнвойса,
				|	СУММА(ParcelsItems.Qty) КАК Qty,
				|	СУММА(ParcelsItems.NetWeight) КАК NetWeight
				|ИЗ
				|	Справочник.Parcels.Детали КАК ParcelsItems
				|ГДЕ
				|	ParcelsItems.Ссылка.Проверен
				|	И ParcelsItems.Ссылка <> &Ссылка
				|	И ParcelsItems.СтрокаИнвойса В(&InvoiceLines)
				|	И НЕ ParcelsItems.Ссылка.Repacked
				|
				|СГРУППИРОВАТЬ ПО
				|	ParcelsItems.СтрокаИнвойса");
			
		КонецЕсли; 	
		 				
	КонецЕсли;
	 	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовТЧGoods", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыТЧGoods") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовТЧGoods = СтруктураРезультатов.СтарыеРеквизитыТЧGoods.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовТЧДетали", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыТЧGoods") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовТЧДетали = СтруктураРезультатов.СтарыеРеквизитыТЧGoods.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаВыгруженныхВTMSTrips", Неопределено);
	Если СтруктураРезультатов.Свойство("ВыгруженныеВTMSTrips") Тогда
		ДополнительныеСвойства.ВыборкаВыгруженныхВTMSTrips = СтруктураРезультатов.ВыгруженныеВTMSTrips.Выбрать();
	КонецЕсли;
	
	// { RGS AGorlenko 11.11.2014 1:04:32 - трипы, в которых есть парсель, для контроля Wh-from
	ДополнительныеСвойства.Вставить("ВыборкаTripsCДругимWhFrom", Неопределено);
	Если СтруктураРезультатов.Свойство("TripsCДругимWhFrom") Тогда
		ДополнительныеСвойства.ВыборкаTripsCДругимWhFrom = СтруктураРезультатов.TripsCДругимWhFrom.Выбрать();
	КонецЕсли;
	// } RGS AGorlenko 11.11.2014 1:04:33 - трипы, в которых есть парсель, для контроля Wh-from
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовExportRequest", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыExportRequest") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest = СтруктураРезультатов.РеквизитыExportRequest.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовTransportRequest", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыTransportRequest") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest = СтруктураРезультатов.РеквизитыTransportRequest.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаParcelsСТакимЖеКодом", Неопределено);
	Если СтруктураРезультатов.Свойство("ParcelsСТакимЖеКодом") Тогда
		ДополнительныеСвойства.ВыборкаParcelsСТакимЖеКодом = СтруктураРезультатов.ParcelsСТакимЖеКодом.Выбрать();
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ВыборкаПроведенныхDOCs", Неопределено);
	Если СтруктураРезультатов.Свойство("ПроведенныеDOCs") Тогда
		ДополнительныеСвойства.ВыборкаПроведенныхDOCs = СтруктураРезультатов.ПроведенныеDOCs.Выбрать();
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItems") Тогда
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
		ДополнительныеСвойства.ТаблицаItems.Индексы.Добавить("InvoiceLine");
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("QtyИNetWeightInvoiceLinesВДругихParcels") Тогда
		ДополнительныеСвойства.ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels = СтруктураРезультатов.QtyИNetWeightInvoiceLinesВДругихParcels.Выбрать();
	КонецЕсли;
	    		             	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыCДополнительнымиДанными(ВыборкаРеквизитовExportRequest, ВыборкаРеквизитовTransportRequest, ТаблицаItems)	
	
	// Если у экспортного парселя не заполнен номер - присвоим его
	Если ЗначениеЗаполнено(ExportRequest) И НЕ ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		УстановитьКодПоRequest(ВыборкаРеквизитовExportRequest.Номер);	
	КонецЕсли;
	Если ЗначениеЗаполнено(TransportRequest) И НЕ ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		УстановитьКодПоRequest(ВыборкаРеквизитовTransportRequest.Номер);	
	КонецЕсли;

	СинхронизироватьОтменуИПометкуУдаления(ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
	
	ЗаполнитьWarehouseToПриНеобходимости(ТаблицаItems);
	
	NewInvoiceList = "";
	NewSuppliersList = "";
	NewDescriptionOfItems = "";
	NewSpecialInstructions = Перечисления.YesNo.No;
	Если ТаблицаItems <> Неопределено Тогда 
		
		ТаблицаInvoiceNo = ТаблицаItems.Скопировать(,"InvoiceNo");
		ТаблицаInvoiceNo.Свернуть("InvoiceNo");
		ТаблицаInvoiceNo.Сортировать("InvoiceNo");
		МассивInvoiceNo = ТаблицаInvoiceNo.ВыгрузитьКолонку("InvoiceNo");
		NewInvoiceList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивInvoiceNo, ", ");
		
		ТаблицаSuppliers = ТаблицаItems.Скопировать(,"Supplier");
		ТаблицаSuppliers.Свернуть("Supplier");
		ТаблицаSuppliers.Сортировать("Supplier");
		МассивSupplier = ТаблицаSuppliers.ВыгрузитьКолонку("Supplier");
		NewSuppliersList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивSupplier, ", ");
		
		МассивSpecialInstructions = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаItems, "SpecialInstructions");
		NewSpecialInstructions = ?(МассивSpecialInstructions.Количество() = 0, Перечисления.YesNo.No, Перечисления.YesNo.Yes);
		
		МассивDescriptionOfItems = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаItems, "НаименованиеТовара");
		NewDescriptionOfItems = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивDescriptionOfItems, ", ");

	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceList, NewInvoiceList);
	РГСофтКлиентСервер.УстановитьЗначение(SuppliersList, NewSuppliersList);
    РГСофтКлиентСервер.УстановитьЗначение(SpecialInstructions, NewSpecialInstructions);
	РГСофтКлиентСервер.УстановитьЗначение(DescriptionOfItems, NewDescriptionOfItems);
	
	ЗаполнитьNetWeightВПервойСтрокеТЧПриНеобходимости(ТаблицаItems);
	
КонецПроцедуры

Процедура УстановитьКодПоRequest(Знач RequestNo)
	
	// Код будет строиться по принципу RequestNo-ПорядковыйНомерИзДвухЦифр
	RequestNo = СокрЛП(RequestNo);
	Префикс = RequestNo + "-";
	
	// Получим новый код c порядковым номером для этого request
	// { RGS vchaplygin 18.04.2018 19:03:06 - S-I-0005106 в части кривой нумерации
	//УстановитьНовыйКод(Префикс);
	//// Сократим порядковый номер до двух цифр
	//Код = СтрЗаменить(Код, Префикс, "");
	//Пока СтрДлина(СокрЛП(Код)) <> 2 Цикл
	//	Код = Сред(Код, 2);
	//КонецЦикла;
	//// Вернем обратно префикс в виде RequestNo
	//Код = Префикс + Код;
	
	Индекс = "01";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Parcels.Код) КАК Код
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |ГДЕ
	               |	Parcels.TransportRequest = &TransportRequest";
	Запрос.УстановитьПараметр("TransportRequest", TransportRequest);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Индекс = СтрЗаменить(Выборка.Код, Префикс, "");
			// Сократим порядковый номер до двух цифр
			// { RGS AARsentev 24.05.2018 - уходит в бесконечный цикл при копировании TR с содержимым
			Если НЕ ЗначениеЗаполнено(Выборка.Код) Тогда
				Индекс = "00";
			Иначе
			// } RGS AARsentev 24.05.2018
				Пока СтрДлина(СокрЛП(Индекс)) <> 2 Цикл
					Индекс = Сред(Индекс, 2);
				КонецЦикла;
			КонецЕсли;
			Попытка
			
				ИндексЧисло = Число(Индекс);
				ИндексЧисло = ИндексЧисло + 1;
				Индекс = Формат(ИндексЧисло, "ЧЦ=2; ЧВН="); // Историческое ограничение 2 символа
			
			Исключение
				
				// Нет особого смылса, по умолчению Индекс = "01"
				//ИндексЧисло = 1;
				//Индекс = Формат(ИндексЧисло, "ЧЦ=2; ЧВН="); // Историческое ограничение 2 символа
			
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Вернем обратно префикс в виде RequestNo
	Код = Префикс + Индекс;
	// } RGS vchaplygin 18.04.2018 19:13:45 - S-I-0005106 в части кривой нумерации
	
КонецПроцедуры

Процедура СинхронизироватьОтменуИПометкуУдаления(ВыборкаСтарыхРеквизитовШапки)
	
	Если ПометкаУдаления Тогда
		
		Отменен = Истина;
		
	Иначе
		
		Если НЕ ЭтоНовый() Тогда
			
			Если ВыборкаСтарыхРеквизитовШапки.ПометкаУдаления Тогда
				Отменен = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьWarehouseToПриНеобходимости(ТаблицаItems)
	
	// Пытаемся заполнить из BORG Warehouse to только для final парселей
	Если Не Проверен
		ИЛИ ЗначениеЗаполнено(WarehouseTo)
		ИЛИ ЗначениеЗаполнено(ExportRequest)
		ИЛИ ЗначениеЗаполнено(TransportRequest) Тогда
		Возврат;
	КонецЕсли; 
		
	ТаблицаDefaultWarehouseTo = ТаблицаItems.Скопировать( ,"DefaultWarehouseTo");
	ТаблицаDefaultWarehouseTo.Свернуть("DefaultWarehouseTo");
	Если ТаблицаDefaultWarehouseTo.Количество() = 1 Тогда
		
		//Если ЗначениеЗаполнено(WarehouseTo) и WarehouseTo <> ТаблицаDefaultWarehouseTo[0].DefaultWarehouseTo Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Non critical err.: Warehouse to differs from default Warehouse in PO BORG.",
		//		ЭтотОбъект, "WarehouseTo");
		//	Возврат;
		//КонецЕсли;
		
		// { RGS AGorlenko 18.06.2015 18:51:07 - если для борга указан склад unknown, то указываем wh-from
		//WarehouseTo = ТаблицаDefaultWarehouseTo[0].DefaultWarehouseTo;
		DefaultWarehouseTo = ТаблицаDefaultWarehouseTo[0].DefaultWarehouseTo;
		WarehouseTo = ?(DefaultWarehouseTo = Справочники.Warehouses.UNKN, WarehouseFrom, DefaultWarehouseTo);
		// } RGS AGorlenko 18.06.2015 18:51:43 - если для борга указан склад unknown, то указываем wh-from
		
	// { RGS AGorlenko 20.11.2015 18:32:19 - S-I-0001376
	Иначе
	
		WarehouseTo = WarehouseFrom;
	// } RGS AGorlenko 20.11.2015 18:34:38 - S-I-0001376
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьNetWeightВПервойСтрокеТЧПриНеобходимости(ТаблицаItems)
	
	// Иногда ни в строке инвойса, ни в строке парселя не указывается вес нетто
	// Зато вес нетто указан в шапке парселя, и, если в нем лежит один товар, - значит вес нетто из шапки можно спустить на товар 
	
	// Если парсель еще не проверен - выходим
	Если НЕ Проверен Тогда
		Возврат;
	КонецЕсли;
	
	// Если Net weight в шапке не заполнен - выходим
	Если НЕ ЗначениеЗаполнено(NetWeight) Тогда
		Возврат;
	КонецЕсли;
	
	// Если в табличной части не одна строка - выходим
	Если Детали.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрокаТЧ = Детали[0];
	
	// Если в строке парселя Net weight уже указан - выходим
	Если ЗначениеЗаполнено(ПерваяСтрокаТЧ.NetWeight) Тогда
		Возврат;
	КонецЕсли;
		
	// Если в Item Net weight указан - выходим
	РеквизитыItem = ТаблицаItems.Найти(ПерваяСтрокаТЧ.СтрокаИнвойса, "InvoiceLine"); // В проверенном парселе Item должен быть уже указан
	Если ЗначениеЗаполнено(РеквизитыItem.NetWeight) Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрокаТЧ.NetWeight = NetWeight;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаВыгруженныхВTMSTrips, ВыборкаTripsCДругимWhFrom, ВыборкаСтарыхРеквизитовШапки, 
	ВыборкаСтарыхРеквизитовТЧGoods, ВыборкаРеквизитовExportRequest, ВыборкаРеквизитовTransportRequest, ИзменилисьТолькоОтражаемыеВЛогахРеквизиты)
	
	ПроверитьВозможностьИзмененияПоExportRequest(Отказ, ВыборкаРеквизитовExportRequest);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьИзмененияПоTransportRequest(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовTransportRequest, ИзменилисьТолькоОтражаемыеВЛогахРеквизиты);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьИзмененияПоTrip(Отказ, ВыборкаВыгруженныхВTMSTrips, ВыборкаTripsCДругимWhFrom);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьВозможностьИзмененияПоDOC(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовТЧGoods); 
	
КонецПроцедуры 

Процедура ПроверитьВозможностьИзмененияПоExportRequest(Отказ, ВыборкаРеквизитовExportRequest)
	
	Если НЕ ЗначениеЗаполнено(ExportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаРеквизитовExportRequest.LocalATA) Тогда
		
		ТекстОшибки = "You can not change Parcel '" + СокрЛП(ЭтотОбъект) + "', because '" + ExportRequest + "' has passed 'Local ATA' stage!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,,, Отказ);
			
	ИначеЕсли ВыборкаРеквизитовExportRequest.InternationalOBSentToTMS Тогда
		
		ТекстОшибки = "You can not change Parcel '" + СокрЛП(ЭтотОбъект) + "', because Int. OB sent to TMS for " + ExportRequest + "!
			|For changing need to cancel Int. OB sent to TMS in Export request.";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,,, Отказ);		
			
	ИначеЕсли CustomsСервер.ЭтоImportExportTracker() И ЗначениеЗаполнено(ВыборкаРеквизитовExportRequest.AcceptedBySpecialist) Тогда
		
		ТекстОшибки = "You can not change Parcel '" + СокрЛП(ЭтотОбъект) + "', because '" + ExportRequest + "' is already accepted by export specialist!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,,, Отказ);		
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияПоTransportRequest(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовTransportRequest, ИзменилисьТолькоОтражаемыеВЛогахРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(TransportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	МассивItemsHazardClass = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(
		ДополнительныеСвойства.ТаблицаItems, "HazardClass");
		
	Если МассивItemsHazardClass.Количество() > 0 
		И МассивItemsHazardClass.Найти(HazardClass) = Неопределено Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Класс опасности отличается от указанного в товарах!";
		иначе
			ТекстОшибки = "Hazard class differs from hazard classes in Items!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "HazardClass", , Отказ);
			
	КонецЕсли;
	
	// { RGS AArsentev 27.02.2018 - LOGS, резрешаем, но логгируем
	Если ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Истина Тогда
		Возврат
	КонецЕсли;
	// } RGS AArsentev 27.02.2018 - LOGS, резрешаем, но логгируем
		
	Если ВыборкаРеквизитовTransportRequest.Проведен Тогда 
		// { RGS AArsentev 18.08.2016 18:01:05 - S-I-0001832
		Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
			Если ВыборкаСтарыхРеквизитовШапки.NumOfParcels <> NumOfParcels Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Нельзя менять количество упаковок для грузового места, если заявка принята специалистом!";
				иначе
					ТекстОшибки = "It is not allowed to change number of parcels in accepted by specialist transport request!";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "NumOfParcels", , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// } RGS AArsentev 18.08.2016 18:01:05 - S-I-0001832
		МассивParcels = Новый Массив;
		МассивParcels.Добавить(Ссылка);
		
		Отказ = Не Документы.TransportRequest.РазрешеноРедактироватьAcceptedTransportRequest(Ссылка, МассивParcels);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияПоTrip(Отказ, ВыборкаВыгруженныхВTMSTrips, ВыборкаTripsCДругимWhFrom)
	
	// { RGS ASeryakov, 28.07.2018 19:20:09 1803M-027
	//Если ЭтоНовый() ИЛИ ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда
	Если ЭтоНовый() Тогда
	// } RGS ASeryakov 28.07.2018 19:20:11 1803M-027
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ExportRequest) ИЛИ ЗначениеЗаполнено(TransportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаВыгруженныхВTMSTrips.Следующий() Тогда
		
		ТекстОшибки = "You can not modify current Parcel, because it was already sent to TMS by """ + ВыборкаВыгруженныхВTMSTrips.TripПредставление + """!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	
	// { RGS AGorlenko 11.11.2014 1:08:54 - трипы, в которых есть парсель, для контроля Wh-from
	Если ВыборкаTripsCДругимWhFrom.Следующий() Тогда
		
		ТекстОшибки = "You can not modify current Parcel, because it used in """ + ВыборкаTripsCДругимWhFrom.TripПредставление + """ which has a different warehouse from!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	// } RGS AGorlenko 11.11.2014 1:08:56 - трипы, в которых есть парсель, для контроля Wh-from
	
КонецПроцедуры 

Процедура ПроверитьВозможностьИзмененияПоDOC(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовТЧGoods)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ExportRequest) ИЛИ ЗначениеЗаполнено(TransportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, изменились ли какие-нибудь реквизиты, которые могут повлиять на целостность DOC
	СтрокаСвойствСтрокиТЧGoods = "НомерЗаявкиНаЗакупку, СтрокаЗаявкиНаЗакупку, Receiver, СерийныйНомер, СтрокаИнвойса, Qty, QtyUOM";
	
	ТаблицаПроверкиТЧGoods = Детали.Выгрузить(, СтрокаСвойствСтрокиТЧGoods);
	ТаблицаПроверкиТЧGoods.Колонки.Добавить("Признак");
	ТаблицаПроверкиТЧGoods.ЗаполнитьЗначения(1, "Признак");
	
	Пока ВыборкаСтарыхРеквизитовТЧGoods.Следующий() Цикл
		
		НоваяСтрокаТаблицыПроверки = ТаблицаПроверкиТЧGoods.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыПроверки, ВыборкаСтарыхРеквизитовТЧGoods, СтрокаСвойствСтрокиТЧGoods);
		НоваяСтрокаТаблицыПроверки.Признак = -1;
					 
	КонецЦикла; 
	ТаблицаПроверкиТЧGoods.Свернуть(СтрокаСвойствСтрокиТЧGoods, "Признак");
	
	СтруктураПоискаПоПризнаку = Новый Структура("Признак", 0);
	НайденныеСтроки = ТаблицаПроверкиТЧGoods.НайтиСтроки(СтруктураПоискаПоПризнаку);
	Для Каждого СтрокаТаблицыПроверки Из НайденныеСтроки Цикл
		ТаблицаПроверкиТЧGoods.Удалить(СтрокаТаблицыПроверки);			 
	КонецЦикла; 
	
	// Попробуем найти проведенный DOC с этим парселем
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DOCsParcels.Ссылка.Представление КАК DOСПредставление,
	|	DOCsParcels.Ссылка.SentToTMS
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
	|ГДЕ
	|	DOCsParcels.Parcel = &Ссылка
	|	И (DOCsParcels.Ссылка.Booked > ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ DOCsParcels.Ссылка.Granted > ДАТАВРЕМЯ(1, 1, 1))
	|	И DOCsParcels.Ссылка.Проведен";
	
	ВыборкаПроведенныхDOC = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПроведенныхDOC.Следующий() Тогда
		
		Если ВыборкаПроведенныхDOC.SentToTMS Тогда
			
			ТекстОшибки = "You can not change Parcel, because '" + СокрЛП(ВыборкаПроведенныхDOC.DOСПредставление) + " was sent to TMS!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
			
		КонецЕсли; 
		       		
		Если СокрЛП(ВРег(DONo)) <> СокрЛП(ВРег(ВыборкаСтарыхРеквизитовШапки.DONo))
			ИЛИ (ВыборкаСтарыхРеквизитовШапки.Проверен И НЕ Проверен)
			ИЛИ (ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.WarehouseFrom) И НЕ ЗначениеЗаполнено(WarehouseFrom))
			ИЛИ ТаблицаПроверкиТЧGoods.Количество() > 0 
			ИЛИ (СокрЛП(ВыборкаСтарыхРеквизитовШапки.No) <> СокрЛП(Код) 
			И Справочники.ServiceProviders.WarehouseFromInLeg7(WarehouseFrom)) Тогда
			                                 			
			Если СокрЛП(ВернутьСтр(DONo)) <> СокрЛП(ВернутьСтр(ВыборкаСтарыхРеквизитовШапки.DOno)) Тогда
				
				ТекстОшибки = "You can not change DO no., because Parcel '" + СокрЛП(ЭтотОбъект) + "' is already included in the booked or granted '" + ВыборкаПроведенныхDOC.DOСПредставление + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DONo", , Отказ);
				
			КонецЕсли; 
			
			Если ВыборкаСтарыхРеквизитовШапки.Проверен И НЕ Проверен Тогда
				
				ТекстОшибки = "You can not change Final, because Parcel '" + СокрЛП(ЭтотОбъект) + "' is already included in the booked or granted '" + ВыборкаПроведенныхDOC.DOСПредставление + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Проверен", , Отказ);
				
			КонецЕсли;
			
			Если СокрЛП(ВыборкаСтарыхРеквизитовШапки.No) <> СокрЛП(Код) 
				И Справочники.ServiceProviders.WarehouseFromInLeg7(WarehouseFrom) Тогда
				
				ТекстОшибки = "You can not change No., because Parcel '" + СокрЛП(ЭтотОбъект) + "' is already included in the booked or granted '" + ВыборкаПроведенныхDOC.DOСПредставление + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "No", , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.WarehouseFrom) И НЕ ЗначениеЗаполнено(WarehouseFrom) Тогда
				
				ТекстОшибки = "You can not clear Warehouse from, because Parcel '" + СокрЛП(ЭтотОбъект) + "' is already included in the booked or granted '" + ВыборкаПроведенныхDOC.DOСПредставление + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "WarehouseFrom", , Отказ);
				
			КонецЕсли;
			
			Если ТаблицаПроверкиТЧGoods.Количество() Тогда
				
				ТекстОшибки = "You can not change Items, because Parcel '" + СокрЛП(ЭтотОбъект) + "' is already included in the booked or granted '" + ВыборкаПроведенныхDOC.DOСПредставление + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали", , Отказ);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, ВыборкаParcelsСТакимЖеКодом, ВыборкаРеквизитовExportRequest, 
	ТаблицаItems, ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels)
	
	Если Отменен Тогда		
		Возврат;	
	КонецЕсли;
	
	// Проверим, что нет дублей с таким же кодом
	Если ВыборкаParcelsСТакимЖеКодом <> Неопределено Тогда
		
		Пока ВыборкаParcelsСТакимЖеКодом.Следующий() Цикл			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Номер """ + СокрЛП(Код) + """ уже существует для """ + ВыборкаParcelsСТакимЖеКодом.Представление + """!";
			иначе
				ТекстОшибки = "No. """ + СокрЛП(Код) + """ is already used in Parcel """ + ВыборкаParcelsСТакимЖеКодом.Представление + """!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Код", , Отказ);	
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Проверен Тогда
		Возврат;
	КонецЕсли;
	          			
	// DIMs UOM
	Если DIMsUOM <> Справочники.UOMs.CM Тогда
		
		DIMsUOMStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(DIMsUOM, "StandardUOM");
		Если DIMsUOMStandardUOM <> Справочники.UOMs.CM Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Нельзя использовать единицу измерения '" + DIMsUOM + "' для размеров упаковки!";
			иначе
				ТекстОшибки = "It is not allowed to use '" + DIMsUOM + "' as DIMs UOM!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DIMsUOM", , Отказ);
		КонецЕсли;
			
	КонецЕсли;
	
	// Weight UOM
	Если WeightUOM <> Справочники.UOMs.KG Тогда
		
		WeightUOMStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(WeightUOM, "StandardUOM");
		Если WeightUOMStandardUOM <> Справочники.UOMs.KG Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Нельзя использовать единицу измерения '" + WeightUOM + "' для веса!";
			иначе
				ТекстОшибки = "It is not allowed to use '" + WeightUOM + "' as Weight UOM!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "WeightUOM", , Отказ);
		КонецЕсли;
			
	КонецЕсли;

	// Для final импортных и локальных парселей Leg7
	
	// проверяем warehouse from
	Если Проверен И Не ЗначениеЗаполнено(ExportRequest) И Не ЗначениеЗаполнено(TransportRequest) 
		И WarehouseFrom = Справочники.Warehouses.Other Тогда
		ТекстОшибки = "You can not use ""Other"" warehouse from!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "WarehouseFrom", , Отказ);
	КонецЕсли;
	
	// проверяем warehouse to
	Если Проверен И НЕ ЗначениеЗаполнено(ExportRequest) И Не ЗначениеЗаполнено(TransportRequest) 
		И Справочники.ServiceProviders.WarehouseFromInLeg7(WarehouseFrom) Тогда
		
		Если НЕ ЗначениеЗаполнено(WarehouseTo) Тогда 
			
			ТекстОшибки = "'Warehouse to' is empty!
				|You can choose 'Warehouse to' manually.
				|If that does not help - contact riet-support-ld@slb.com.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "WarehouseTo", , Отказ);
				
		// { RGS AGorlenko 10.04.2014 12:10:11 - warehouse to все же может быть портом
		//иначе
		//	
		//	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(WarehouseTo, "Warehouse") Тогда 
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//			"It is not allowed to use Location (former Warehouse) '" + СокрЛП(WarehouseTo) + "' as it is not a Warehouse!
		//			|contact riet-support@slb.com.",
		//			ЭтотОбъект, "WarehouseTo", , Отказ);
		//	КонецЕсли;
		// } RGS AGorlenko 10.04.2014 12:10:31 - warehouse to все же может быть портом
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверки для экспортных парселей, которые будет выгружаться в TMS
	// ВЫНЕСТИ В ПРОЦЕДУРУ, КОТОРАЯ ВЫЗЫВАЕТСЯ В Т. Ч. ИЗ EXPORT REQUEST
	Если ЗначениеЗаполнено(ExportRequest)
		И Документы.ExportRequest.ПолучитьExportToTMSПоExportRequest(ExportRequest) Тогда
		
		Если НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PackingType, "InTMS") Тогда
			ТекстОшибки = "'Packing type' is not in TMS!
				|Choose packing type that is in TMS.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PackingType", , Отказ);
		КонецЕсли;
		
		Если НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(DIMsUOM, "InTMS") Тогда
			ТекстОшибки = "'DIMs UOM' is not in TMS!
				|Choose DIMs UOM that is in TMS.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DIMsUOM", , Отказ);	
		КонецЕсли;
		
		Если НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(WeightUOM, "InTMS") Тогда
			ТекстОшибки = "'Weight UOM' is not in TMS!
				|Choose Weight UOM that is in TMS.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "WeightUOM", , Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Детали Цикл
			
		РеквизитыInvoiceLine = ТаблицаItems.Найти(СтрокаТЧ.СтрокаИнвойса, "InvoiceLine");
		
		Если РеквизитыInvoiceLine.ПометкаУдаления Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": товар помечен на удаление!";
			иначе
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Item is marked for deletion!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
		КонецЕсли;
		
		Если РеквизитыInvoiceLine.InvoiceCancelled = Истина Тогда
			ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Import invoice is canceled!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
		КонецЕсли;
		
		Если СтрокаТЧ.QtyUOM <> РеквизитыInvoiceLine.UOM Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": единица измерения количества '" + СокрЛП(СтрокаТЧ.QtyUOM) + 
					"' отличается от единицы измерения '" + СокрЛП(РеквизитыInvoiceLine.UOM) + "' в товаре!";
			иначе
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Qty UOM '" + СокрЛП(СтрокаТЧ.QtyUOM) + 
					"' differs from Qty UOM '" + СокрЛП(РеквизитыInvoiceLine.UOM) + "' in Item!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыInvoiceLine.WeightUOM)
			И ЗначениеЗаполнено(WeightUOM)
			И РеквизитыInvoiceLine.WeightUOM <> WeightUOM Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": единица измерения веса '" + СокрЛП(РеквизитыInvoiceLine.WeightUOM) + 
					"' отличается от единицы измерения веса'" + СокрЛП(WeightUOM) + "' для грузового места!";
			иначе
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Weight UOM '" + СокрЛП(РеквизитыInvoiceLine.WeightUOM) + 
					"' differs from Weight UOM '" + СокрЛП(WeightUOM) + "' in Parcel!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
			
		КонецЕсли;
		
		Если СтрокаТЧ.СерийныйНомер <> РеквизитыInvoiceLine.SerialNum Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": серийный номер '" + СтрокаТЧ.СерийныйНомер + 
					"' отличается от серийного номера '" + РеквизитыInvoiceLine.SerialNum + "' в товаре!";
			иначе
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": S/N '" + СтрокаТЧ.СерийныйНомер + 
					"' differs from S/N '" + РеквизитыInvoiceLine.SerialNum + "' in Item!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ExportRequest) Тогда
			
			Если ExportRequest <> РеквизитыInvoiceLine.ExportRequest Тогда
				
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Item does not belong to '" + ExportRequest + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
			
			Если TransportRequest <> РеквизитыInvoiceLine.TransportRequest Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": товар не принадлежит '" + TransportRequest + "'!";
				иначе
					ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Item does not belong to '" + TransportRequest + "'!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
				
			КонецЕсли;
	
		Иначе
			
			Если СтрокаТЧ.НомерЗаявкиНаЗакупку <> РеквизитыInvoiceLine.PONo Тогда
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": PO no. '" + СтрокаТЧ.НомерЗаявкиНаЗакупку + "' differs from PO no. '" + РеквизитыInvoiceLine.PONo + "' in Item (Invoice line)!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыInvoiceLine.POLine) И СтрокаТЧ.СтрокаЗаявкиНаЗакупку <> РеквизитыInvoiceLine.POLineNo Тогда
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": PO line no. '" + СтрокаТЧ.СтрокаЗаявкиНаЗакупку + "' differs from PO line no. '" + РеквизитыInvoiceLine.POLineNo + "' in Item (Invoice line)!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
			КонецЕсли;
			
			Если СтрокаТЧ.Receiver <> РеквизитыInvoiceLine.Reference Тогда
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Receiver '" + СтрокаТЧ.Receiver + "' differs from Reference '" + РеквизитыInvoiceLine.Reference + "' in Item (Invoice line)!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].СтрокаИнвойса", , Отказ);
			КонецЕсли;
			 						
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РеквизитыInvoiceLine.NetWeight)
			// { RGS AGorlenko 20.11.2015 18:20:58 - S-I-0001375
			//И НЕ ЗначениеЗаполнено(СтрокаТЧ.NetWeight) Тогда
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.NetWeight) И НЕ ДополнительныеСвойства.Свойство("ОтключитьКонтрольЗаполненностиNetWeight") Тогда
			// } RGS AGorlenko 20.11.2015 18:23:29 - S-I-0001375
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": вес нетто товара не заполнен!";
			иначе
				ТекстОшибки = "Parcel line " + СтрокаТЧ.НомерСтроки + ": Item total net weight is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки - 1) + "].NetWeight", , Отказ);
		КонецЕсли;
		    					
	КонецЦикла;

	// Проверим, что количество и вес нетто в Invoice lines не меньше чем количество в текущем и других Parcels
	
	// Выгрузим количество в текущем Parcel в таблицу
	ТаблицаQtyИNetWeight = Детали.Выгрузить(, "СтрокаИнвойса, Qty, NetWeight");
	// { RGS AArsentev 09.08.2016 14:03:20 - S-I-0001786
	Если НЕ Repacked Тогда
	// } RGS AArsentev 09.08.2016 14:03:20 - S-I-0001786
	// Добавим количество из других Parcels
	Если ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels <> Неопределено Тогда
		
		Пока ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels.Следующий() Цикл
			НоваяСтрокаТаблицы = ТаблицаQtyИNetWeight.Добавить();
			НоваяСтрокаТаблицы.СтрокаИнвойса = ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels.СтрокаИнвойса;
			НоваяСтрокаТаблицы.Qty = ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels.Qty;
			НоваяСтрокаТаблицы.NetWeight = ВыборкаQtyИNetWeightInvoiceLinesВДругихParcels.NetWeight;
		КонецЦикла;
		
	КонецЕсли;
	КонецЕсли;
	
	ТаблицаQtyИNetWeight.Свернуть("СтрокаИнвойса", "Qty, NetWeight");
	
	Для Каждого СтрокаТаблицы Из ТаблицаQtyИNetWeight Цикл
			
		РеквизитыInvoiceLine = ТаблицаItems.Найти(СтрокаТаблицы.СтрокаИнвойса, "InvoiceLine");
		
		Если СтрокаТаблицы.Qty > РеквизитыInvoiceLine.Qty Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Общее количество (" + РеквизитыInvoiceLine.Qty + ") в ""Товаре " + 
					СокрЛП(СтрокаТаблицы.СтрокаИнвойса) + """ меньше чем количество (" + 
					СтрокаТаблицы.Qty + ") в текущей строке и в сумме с другими упаковками!";
			иначе
				ТекстОшибки = "Qty (" + РеквизитыInvoiceLine.Qty + ") in ""Item " + 
					СокрЛП(СтрокаТаблицы.СтрокаИнвойса) + """ is less than Qty (" + 
					СтрокаТаблицы.Qty + ") in the current and other Parcels!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали", , Отказ);
			
		КонецЕсли; 
			
		Если ЗначениеЗаполнено(РеквизитыInvoiceLine.NetWeight) И СтрокаТаблицы.NetWeight > РеквизитыInvoiceLine.NetWeight Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Общий вес нетто (" + РеквизитыInvoiceLine.NetWeight + ") в ""Товаре " + 
					СокрЛП(СтрокаТаблицы.СтрокаИнвойса) + """ меньше чем ""Вес нетто"" (" + 
					СтрокаТаблицы.NetWeight + ") в текущей строке и в сумме с другими упаковками!";
			иначе
				ТекстОшибки = "Net weight (" + РеквизитыInvoiceLine.NetWeight + ") in ""Item " + 
					СокрЛП(СтрокаТаблицы.СтрокаИнвойса) + """ is less than ""Items net weight"" (" + 
					СтрокаТаблицы.NetWeight + ") in the current and other Parcels!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Детали", , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ОбновитьРеквизитыItems(Отказ, ТаблицаItems)
	
	Если НЕ Проверен ИЛИ LocalOnly Тогда
		Возврат;
	КонецЕсли;
	
	// Если в Items не стоит галочка Final - поробуем поставить ее
	Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
		Если НЕ СтрокаТаблицы.Final Тогда
			
			ItemОбъект = СтрокаТаблицы.InvoiceLine.ПолучитьОбъект();
			ItemОбъект.Final = Истина;
			Попытка
				ItemОбъект.Записать();
			Исключение
				СтрокаТЧ = Детали.Найти(СтрокаТаблицы.InvoiceLine, "СтрокаИнвойса");
				ТекстОшибки = "Failed to mark Item """ + СокрЛП(ItemОбъект) + """ as Final!
					|See errors above.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Детали[" + (СтрокаТЧ.НомерСтроки-1) + "].СтрокаИнвойса", , Отказ);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//	
//	// Если Parcel - новый - значит он еще не может относится ни к одному DOC - выходим
//	Если ЭтоНовый() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если ни один реквизит не изменился - значит ничего регистрировать не надо - выходим
//	ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки; 	
//	Если СокрЛП(Код) = СокрЛП(ВыборкаСтарыхРеквизитовШапки.No)
//		И GrossWeightKG = ВыборкаСтарыхРеквизитовШапки.GrossWeightKG
//		И LengthCM = ВыборкаСтарыхРеквизитовШапки.LengthCM
//		И WidthCM = ВыборкаСтарыхРеквизитовШапки.WidthCM
//		И HeightCM = ВыборкаСтарыхРеквизитовШапки.HeightCM Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	// Определим CCA из DOC
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Parcel", Ссылка);
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	DOCsParcels.Ссылка КАК DOC,
//		|	DOCsParcels.Ссылка.CCA КАК CCA
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
//		|ГДЕ
//		|	DOCsParcels.Parcel = &Parcel
//		|	И (НЕ DOCsParcels.Ссылка.Отменен)
//		|	И DOCsParcels.Ссылка.Requested <> ДАТАВРЕМЯ(1, 1, 1)";
//		
//	Результат = Запрос.Выполнить();
//	
//	// Если DOC найти не удалось - выходим
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ВыборкаРеквизитовDOC = Результат.Выбрать();
//	ВыборкаРеквизитовDOC.Следующий();
//	
//	// Если в DOC не заполнен CCA - выходим
//	Если НЕ ЗначениеЗаполнено(ВыборкаРеквизитовDOC.CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим ссылку на Agent NEK
//	NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если эта строка не относится к NEK - тогда ничего делать не нужно, выходим
//	Если ВыборкаРеквизитовDOC.CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если мы дошли до этой строки - значит изменились реквизиты и этот парсель относится к DOC с CCA = NEK - регистрируем для обмена
//	CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//	
//	// Если изменился код, то для обмена надо зарегистрировать и DOC
//	Если СокрЛП(Код) <> СокрЛП(ВыборкаСтарыхРеквизитовШапки.No) Тогда
//		
//		УзелNEK = CustomsСервер.ПолучитьУзелNEK(ЭтотОбъект, Отказ);
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//		
//		CustomsСервер.ЗарегистрироватьДляОбменаСсылку(УзелNEK, ВыборкаРеквизитовDOC.DOC, ЭтотОбъект, Отказ);
//				
//	КонецЕсли;
//	
//КонецПроцедуры

// { RGS AGorlenko 07.03.2014 15:41:26 - S-I-0000620
Процедура ЗарегистрироватьДляSubscriptions(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Определим значения старых реквизитов	
	СтарыйDeliveredToWH = '00010101';
	Stage = Неопределено;
	StageDate = '00010101';
	
	Если ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		СтарыйDeliveredToWH = ВыборкаСтарыхРеквизитовШапки.DeliveredToWH;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(DeliveredToWH) И DeliveredToWH <> СтарыйDeliveredToWH Тогда
		
		Stage = Перечисления.LocalDistributionStages.DeliveredToWH;
		StageDate = DeliveredToWH;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Stage) Тогда 	
		
		МенеджерЗаписи = РегистрыСведений.ParcelsForSubscriptions.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Parcel = Ссылка;
		МенеджерЗаписи.Stage = Stage;
		МенеджерЗаписи.StageDate = StageDate;
		МенеджерЗаписи.LastModified = ТекущаяДата();
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ТекстОшибки = "Не удалось зарегистрировать """ + ЭтотОбъект + """ для подписчиков PO tracking: " + ОписаниеОшибки();
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьДляSubscriptions(Отказ);
	
	// { RGS AArsentev 27.02.2018 - LOGS
	Если ДополнительныеСвойства.ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(TransportRequest) Тогда
			TR = TransportRequest.ПолучитьОбъект();
			TR.ОбменДанными.Загрузка = Истина;
			TR.TotalNumOfParcels = ПересчитаемОбщееКоличествоПарселей(TR.Ссылка);
			TR.Записать();
			ПересчитатьДвижения(TransportRequest);
		КонецЕсли;
		
		ЗапросTRIP = Новый Запрос;
		ЗапросTRIP.Текст = "ВЫБРАТЬ
		|	TripNonLawsonCompaniesParcels.Ссылка
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
		|ГДЕ
		|	TripNonLawsonCompaniesParcels.Parcel = &Parcel";
		ЗапросTRIP.УстановитьПараметр("Parcel", Ссылка);
		РезультатTRIP = ЗапросTRIP.Выполнить().Выбрать();
		Пока РезультатTRIP.Следующий() Цикл
			
			TRIP = РезультатTRIP.Ссылка.ПолучитьОбъект();
			TRIP.ДополнительныеСвойства.Вставить("ВнестиИзмененияПарселя", Истина);
			//TRIP.ОбменДанными.Загрузка = Истина;
			
			Если TRIP.Проведен Тогда
				TRIP.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				TRIP.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	// } RGS AArsentev 27.02.2018 - LOGS
	
	// { RGS AArsentev 10.07.2017 S-I-0003308
	Если ЗначениеЗаполнено(TransportRequest) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(TransportRequest, "Проведен") Тогда
			Stage = РегистрыСведений.StagesOfTransportRequests.ПолучитьTransportRequestStage(TransportRequest);
			ОбновитьStage(TransportRequest, Stage);
		КонецЕсли;
	КонецЕсли;
	// } RGS AArsentev 10.07.2017 S-I-0003308
	
КонецПроцедуры
// } RGS AGorlenko 07.03.2014 15:41:35 - S-I-0000620

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

// { RGS AArsentev 10.07.2017 S-I-0003308
Процедура ПересчитатьДвижения(TR)
	
	УстановитьПривилегированныйРежим(Истина);
	TransportReq = TR.ПолучитьОбъект();
	ДвиженияParcelsOfTransportRequestsWithoutShipment = TransportReq.Движения.ParcelsOfTransportRequestsWithoutShipment;
	
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Записывать = Истина;
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Parcels.Ссылка КАК Parcel,
	|	Parcels.NumOfParcels,
	|	Parcels.ПометкаУдаления
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.TransportRequest = &Ссылка
	|	И НЕ Parcels.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка",TR);
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаParcel из Результат Цикл
		
		Движение = ДвиженияParcelsOfTransportRequestsWithoutShipment.ДобавитьПриход();
		Движение.Период = TR.Дата;
		Движение.Parcel = СтрокаParcel.Parcel;
		Движение.TransportRequest = TR;
		Движение.NumOfParcels = СтрокаParcel.NumOfParcels;
		
	КонецЦикла;
	
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Записать();
	
КонецПроцедуры // } RGS AArsentev 10.07.2017 S-I-0003308

// { RGS AArsentev 10.07.2017 S-I-0003308
Процедура ОбновитьStage(Ссылка, NewStage)
	
	ЗапросРеквизиты = Новый Запрос;
	ЗапросРеквизиты.Текст = "ВЫБРАТЬ
	|	TransportRequests.Ссылка,
	|	TransportRequests.ПометкаУдаления,
	|	TransportRequests.Номер,
	|	TransportRequests.Дата,
	|	TransportRequests.Проведен,
	|	StagesOfTransportRequests.Stage,
	|	TransportRequests.Specialist,
	|	TransportRequests.Company
	|ИЗ
	|	Документ.TransportRequest КАК TransportRequests
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|		ПО TransportRequests.Ссылка = StagesOfTransportRequests.TransportRequest
	|ГДЕ
	|	TransportRequests.Ссылка = &Ссылка";
	ЗапросРеквизиты.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаСтарыхРеквизитовШапки = ЗапросРеквизиты.Выполнить().Выгрузить();
	
	Если ВыборкаСтарыхРеквизитовШапки.Количество() = 0
		И ВыборкаСтарыхРеквизитовШапки[0].Stage = NewStage Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.StagesOfTransportRequests.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.TransportRequest = Ссылка;
	МенеджерЗаписи.Stage = NewStage;
	МенеджерЗаписи.ModificationDate = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры // } RGS AArsentev 10.07.2017 S-I-0003308

// { RGS AArsentev 27.02.2018 - LOGS
Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаДеталей)

	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ИзменилисьТолькоОтражаемыеВЛогахРеквизиты", Неопределено);
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();
	СтрокаИсключаемыхРеквизитов = "Наименование, ExportRequest, УДАЛИТЬPackingType, Length, Width, Height, DIMsUOM, GrossWeight, WeightUOM, ChargeableWeight, POList, InvoiceList, Urgency, CreatedBy, CreationDate, ModifiedBy, ModificationDate, DescriptionOfItems, DeliveredToWH, SpecialInstructions, SuppliersList, Prefix, LengthCorrected, WidthCorrected, HeightCorrected, CubicMetersCorrected, GrossWeightCorrected, LengthCMCorrected, WidthCMCorrected, HeightCMCorrected, GrossWeightKGCorrected"; 
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
	ЭтотОбъект,
	ВыборкаСтарыхРеквизитовШапки,
	Новый Массив,
	МетаданныеОбъекта.Реквизиты,
	СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);
	
	ИзменилсяВесНетто_КоличествоВДеталях = Неопределено;
	ИзменилсяНеТолькоВесНетто_КоличествоВДеталях = Неопределено;
	ЕстьИзмененияВТЧДеталей = Ложь;
	
	Если ВыборкаДеталей <> Неопределено Тогда
		ТекстИзмененийItems = ПолучитьТекстИзмененияТабличнойЧасти(
		ЭтотОбъект.Детали,
		ВыборкаДеталей,
		МетаданныеОбъекта.ТабличныеЧасти.Детали,
		ИзменилсяВесНетто_КоличествоВДеталях,
		ИзменилсяНеТолькоВесНетто_КоличествоВДеталях);
		ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийItems);
		
		Если ТекстИзмененийItems <> "" Тогда
			ЕстьИзмененияВТЧДеталей = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстИзменений = "" Тогда
		ДополнительныеСвойства.Вставить("ИзменилисьТолькоОтражаемыеВЛогахРеквизиты", Неопределено);
		Возврат;
	КонецЕсли;
	
	
	МенеджерЗаписи = РегистрыСведений.ParcelLogs.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date = ТекущаяДата();
	МенеджерЗаписи.LogType = Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text = ТекстИзменений;
	МенеджерЗаписи.Записать();
	
	ЗаполнитьИзмененияВРегистрСтатистики(ВыборкаСтарыхРеквизитовШапки, ЕстьИзмененияВТЧДеталей, ИзменилсяВесНетто_КоличествоВДеталях, ИзменилсяНеТолькоВесНетто_КоличествоВДеталях);
	
КонецПроцедуры // } RGS AArsentev 27.02.2018 - LOGS

// { RGS AArsentev 27.02.2018 - LOGS
Процедура ЗаполнитьИзмененияВРегистрСтатистики(СтарыеРеквизитыШапки, ЕстьИзмененияВТЧДеталей, ИзменилсяВесНетто_КоличествоВДеталях, ИзменилсяНеТолькоВесНетто_КоличествоВДеталях)
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ЭтотОбъект);
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	МассивОтражаемыхРеквизитов = Новый Массив;
	МассивОтражаемыхРеквизитов.Добавить("LengthCM");
	МассивОтражаемыхРеквизитов.Добавить("WidthCM");
	МассивОтражаемыхРеквизитов.Добавить("HeightCM");
	МассивОтражаемыхРеквизитов.Добавить("GrossWeightKG");
	МассивОтражаемыхРеквизитов.Добавить("NumOfParcels");
	МассивОтражаемыхРеквизитов.Добавить("NetWeightKG");	
	
	МассивОтражаемыхРеквизитов.Добавить("Наименование");
	МассивОтражаемыхРеквизитов.Добавить("Length");
	МассивОтражаемыхРеквизитов.Добавить("Width");
	МассивОтражаемыхРеквизитов.Добавить("Height");
	МассивОтражаемыхРеквизитов.Добавить("GrossWeight");
	МассивОтражаемыхРеквизитов.Добавить("CubicMeters");
	МассивОтражаемыхРеквизитов.Добавить("ModifiedBy");
	МассивОтражаемыхРеквизитов.Добавить("ModificationDate");
	МассивОтражаемыхРеквизитов.Добавить("VolumeWeight");
	МассивОтражаемыхРеквизитов.Добавить("NetWeigh");
	
	ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Неопределено;
	Для каждого Реквизит ИЗ ИзмененныеРеквизиты Цикл
		
		Если МассивОтражаемыхРеквизитов.Найти(Реквизит) = Неопределено Тогда
			ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Ложь;
			Продолжить;
		КонецЕсли;
		Событие = "";
		Если ЭтотОбъект[Реквизит] <> СтарыеРеквизитыШапки[Реквизит] Тогда
			ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Истина;
			Если Реквизит = "LengthCM" Тогда
				Событие = "Изменилась длина, см.";
			ИначеЕсли Реквизит = "WidthCM" Тогда
				Событие = "Изменилась ширина, см.";
			ИначеЕсли Реквизит = "HeightCM" Тогда
				Событие = "Изменилась высота, см.";
			ИначеЕсли Реквизит = "GrossWeightKG" Тогда
				Событие = "Изменился вес, кг.";
			ИначеЕсли Реквизит = "NumOfParcels" Тогда
				Событие = "Изменилось количество";
			ИначеЕсли Реквизит = "NetWeightKG" Тогда
				Событие = "Изменился вес нетто, кг.";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Событие) Тогда
				МенеджерЗаписи = РегистрыСведений.ParcelChangeEvents.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Parcel = Ссылка;
				МенеджерЗаписи.Date = ТекущаяДата();
				МенеджерЗаписи.Event = Событие;
				МенеджерЗаписи.Before = СтарыеРеквизитыШапки[Реквизит];
				МенеджерЗаписи.After = ЭтотОбъект[Реквизит];
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
 	Если ИзменилисьТолькоОтражаемыеВЛогахРеквизиты = Истина И ЕстьИзмененияВТЧДеталей = Истина Тогда
		Если ИзменилсяВесНетто_КоличествоВДеталях = Истина И ИзменилсяНеТолькоВесНетто_КоличествоВДеталях <> Истина Тогда
			ДополнительныеСвойства.Вставить("ИзменилисьТолькоОтражаемыеВЛогахРеквизиты", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ИзменилисьТолькоОтражаемыеВЛогахРеквизиты", Ложь);
		КонецЕсли;
	Иначе
		ДополнительныеСвойства.Вставить("ИзменилисьТолькоОтражаемыеВЛогахРеквизиты", ИзменилисьТолькоОтражаемыеВЛогахРеквизиты);
	КонецЕсли
	
КонецПроцедуры // } RGS AArsentev 27.02.2018 - LOGS


Функция ПолучитьТекстИзмененияТабличнойЧасти(НоваяТабличнаяЧасть, СтараяТаблица, МетаданныеТабличнойЧасти, ИзменилсяВесНетто_КоличествоВДеталях, ИзменилсяНеТолькоВесНетто_КоличествоВДеталях)
	
	ТекстИзменения = "";
	
	КоличествоСтарыхСтрок = СтараяТаблица.Количество();
	КоличествоНовыхСтрок = НоваяТабличнаяЧасть.Количество();
	
	МаксСтрок = Макс(КоличествоСтарыхСтрок, КоличествоНовыхСтрок);
	Для Индекс = 0 По МаксСтрок - 1 Цикл
		
		ТекстИзмененияСтроки = "";	
		Для каждого РеквизитТЧ Из МетаданныеТабличнойЧасти.Реквизиты Цикл
			Если РеквизитТЧ.Имя = "GrossWeightKG" ИЛИ РеквизитТЧ.Имя = "ChargeableWeight" Тогда
				Продолжить
			КонецЕсли;
			
			Если Индекс < КоличествоСтарыхСтрок Тогда
				
				СтароеЗначение = СтараяТаблица[Индекс][РеквизитТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(СтароеЗначение) Тогда
					СтароеЗначение = Неопределено;
				КонецЕсли;
				
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			
			Если Индекс < КоличествоНовыхСтрок Тогда
				
				НовоеЗначение = НоваяТабличнаяЧасть[Индекс][РеквизитТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(НовоеЗначение) Тогда
					НовоеЗначение = Неопределено;
				КонецЕсли;
				
			Иначе
				НовоеЗначение = Неопределено;
			КонецЕсли;

			Если СтароеЗначение <> НовоеЗначение Тогда
				Если РеквизитТЧ.Имя = "NetWeight" ИЛИ РеквизитТЧ.Имя = "Qty" Тогда
					ИзменилсяВесНетто_КоличествоВДеталях = Истина;
				Иначе
					ИзменилсяНеТолькоВесНетто_КоличествоВДеталях = Истина;
				КонецЕсли;
				ПредставлениеСтарогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(СтароеЗначение);
				ПредставлениеНовогоРеквизита = ПолучитьПредставлениеРеквизитаДляЛогов(НовоеЗначение);
				ТекстИзмененияСтроки = ТекстИзмененияСтроки + "
					|" + Символы.Таб + Символы.Таб + РеквизитТЧ.Синоним + ": " + ПредставлениеСтарогоРеквизита + " -> " + ПредставлениеНовогоРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекстИзмененияСтроки <> "" Тогда
			ТекстИзменения = ТекстИзменения + "
				|" + Символы.Таб + "Line " + (Индекс + 1) + ":" + ТекстИзмененияСтроки;
		КонецЕсли;
					
	КонецЦикла;
	
	Если ТекстИзменения <> "" Тогда
		ТекстИзменения = МетаданныеТабличнойЧасти.Синоним + ":" + ТекстИзменения;
	КонецЕсли;
	
	Возврат ТекстИзменения;
	
КонецФункции

Функция ПолучитьПредставлениеРеквизитаДляЛогов(ЗначениеРеквизита)
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеРеквизита), СокрЛП(ЗначениеРеквизита), "empty");
	
КонецФункции

// { RGS AArsentev 05.04.2018
Функция ПересчитаемОбщееКоличествоПарселей(TR)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Parcels.Ссылка КАК Parcel,
	|	Parcels.NumOfParcels,
	|	Parcels.ПометкаУдаления
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.TransportRequest = &Ссылка
	|	И НЕ Parcels.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", TR);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		TotalNumOfParcels = Результат.Итог("NumOfParcels");
	Иначе 
		TotalNumOfParcels = 0;
	КонецЕсли;
	
	Возврат TotalNumOfParcels
	
КонецФункции // } RGS AArsentev 05.04.2018