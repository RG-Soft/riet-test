
/////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты для новых парселей
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Проверен = Истина;
		Объект.LocalOnly = Истина;
	КонецЕсли; 
		
	НастроитьПараметрВыбораInTMS();
			
	// Настроим видимость стандартных размеров
	UOMCM = Справочники.UOMs.CM;
	ЭтоНеСантиметры = ЗначениеЗаполнено(Объект.DIMsUOM) И Объект.DIMsUOM <> UOMCM;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DIMsStandardUOM", "Видимость", ЭтоНеСантиметры);
	Если Элементы.DIMsStandardUOM.Видимость Тогда
		DIMsStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.DIMsUOM, "StandardUOM");
	КонецЕсли;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "LengthCM", "Видимость", ЭтоНеСантиметры);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WidthCM", "Видимость", ЭтоНеСантиметры);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "HeightCM", "Видимость", ЭтоНеСантиметры);
		
	// Настроим видимость стандартных весов
	UOMKG = Справочники.UOMs.KG;
	ЭтоНеКилограммы = ЗначениеЗаполнено(Объект.WeightUOM) И Объект.WeightUOM <> UOMKG;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WeightStandardUOM", "Видимость", ЭтоНеКилограммы);
	Если Элементы.WeightStandardUOM.Видимость Тогда
		WeightStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.WeightUOM, "StandardUOM");
	КонецЕсли;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalGrossWeightKG", "Видимость", ЭтоНеКилограммы);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalNetWeightKG", "Видимость", ЭтоНеКилограммы);
			
	НастроитьСписокTrips();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НастроитьСписокTrips();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрВыбораInTMS()
	
	ПараметрВыбораInTMS = Новый ПараметрВыбора("Отбор.InTMS", Истина);
	
	РГСофт.ДобавитьПараметрВыбора(Элементы.PackingType, ПараметрВыбораInTMS);
	Элементы.PackingType.БыстрыйВыбор = Истина;
	
	РГСофт.ДобавитьПараметрВыбора(Элементы.DIMsUOM, ПараметрВыбораInTMS);
	
	РГСофт.ДобавитьПараметрВыбора(Элементы.WeightUOM, ПараметрВыбораInTMS);
		      		
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокTrips()
	
	Trips.Параметры.УстановитьЗначениеПараметра("Parcel", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));

КонецПроцедуры

/////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначения.УстановитьЗначение(ТекущийОбъект.ModifiedBy, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ВладелецФормы <> Неопределено
	    И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
		И ВладелецФормы.Имя = "Parcels" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		ОповеститьОВыборе(Массив);
	КонецЕсли;
	
	Оповестить("ИзмененParcel", Объект.Ссылка); 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// DIMS

&НаКлиенте
Процедура DIMsUOMПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	ЭтоНЕСантиметры = ЗначениеЗаполнено(Объект.DIMsUOM) И Объект.DIMsUOM <> UOMCM;
	Элементы.LengthCM.Видимость = ЭтоНЕСантиметры;
	Элементы.WidthCM.Видимость  = ЭтоНЕСантиметры;
	Элементы.HeightCM.Видимость = ЭтоНЕСантиметры;
	Элементы.DIMsStandardUOM.Видимость = ЭтоНЕСантиметры;
	
КонецПроцедуры

&НаКлиенте
Процедура LengthПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);

КонецПроцедуры

&НаКлиенте
Процедура WidthПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);	
	
КонецПроцедуры

&НаКлиенте
Процедура HeightПриИзменении(Элемент)
	
	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// WEIGHT

&НаКлиенте
Процедура WeightUOMПриИзменении(Элемент)
	
	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);	
	ЭтоНеКилограммы = ЗначениеЗаполнено(Объект.WeightUOM) И Объект.WeightUOM <> UOMKG;
	Элементы.WeightStandardUOM.Видимость = ЭтоНеКилограммы;
	Элементы.TotalGrossWeightKG.Видимость = ЭтоНеКилограммы;
	Элементы.TotalNetWeightKG.Видимость = ЭтоНеКилограммы;

КонецПроцедуры

&НаКлиенте
Процедура GrossWeightПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ExportRequest) И Объект.GrossWeight <> 0 И Объект.NetWeight = 0 Тогда
		Объект.NetWeight = Объект.GrossWeight * 0.95;
	КонецЕсли;

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// ДЕТАЛИ

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	#Если ВебКлиент Тогда
	АктивноеОкно = АктивноеОкно();
	Если АктивноеОкно <> Неопределено Тогда
		Если АктивноеОкно.Содержимое.Количество() > 0 Тогда
			Если АктивноеОкно.Содержимое[0].ИмяФормы = "Справочник.СтрокиИнвойса.Форма.ФормаВыбора" Тогда
				АктивноеОкно.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзParcelLine");
	
	СтруктураНастройки.Вставить("CurrentParcel", Объект.Ссылка);
	СтруктураНастройки.Вставить("ExportRequest", Объект.ExportRequest);
	СтруктураНастройки.Вставить("TransportRequest", Объект.TransportRequest);
	СтруктураНастройки.Вставить("LocalOnly", Объект.LocalOnly);
	СтруктураНастройки.Вставить("DONo", Объект.DONo);
	
	СоответствиеInvoiceLinesИQty = ImportExportКлиентСервер.ПолучитьСоответствиеInvoiceLineИParcelQty(Объект.Детали);
	СтруктураНастройки.Вставить("СоответствиеInvoiceLinesИQty", СоответствиеInvoiceLinesИQty);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор нескольких items
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.СтрокиИнвойса") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Получим данные сразу для всех items
		ДанныеItems = ImportExportВызовСервера.ПолучитьДанныеItemsДляParcelLines(ВыбранноеЗначение);
		
		// Создадим и заполним остальные строки
		Для ы = 0 По ВыбранноеЗначение.ВГраница() Цикл
			
			НоваяСтрока = Объект.Детали.Добавить();
			НоваяСтрока.СтрокаИнвойса = ВыбранноеЗначение[ы];
			ImportExportКлиентСервер.ПерезаполнитьParcelLineПоInvoiceLineПриНеобходимости(ЗначениеЗаполнено(Объект.ExportRequest), НоваяСтрока, ДанныеItems[НоваяСтрока.СтрокаИнвойса]);
			
			Модифицированность = Истина;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтрокаИнвойсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
		
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзParcelLine");
	
	СтруктураНастройки.Вставить("CurrentParcel", Объект.Ссылка);
	СтруктураНастройки.Вставить("ExportRequest", Объект.ExportRequest);
	СтруктураНастройки.Вставить("TransportRequest", Объект.TransportRequest);
	СтруктураНастройки.Вставить("LocalOnly", Объект.LocalOnly);
	СтруктураНастройки.Вставить("DONo", Объект.DONo);
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтрокаСвойств = "НомерЗаявкиНаЗакупку, СтрокаЗаявкиНаЗакупку, Receiver, СерийныйНомер, Qty, QtyUOM";
	СтруктураParcelLine = Новый Структура(СтрокаСвойств);
	ЗаполнитьЗначенияСвойств(СтруктураParcelLine, ТекущиеДанные, СтрокаСвойств);
	СтруктураНастройки.Вставить("СтруктураParcelLine", СтруктураParcelLine);
	
	СоответствиеInvoiceLinesИQty = ImportExportКлиентСервер.ПолучитьСоответствиеInvoiceLineИParcelQty(Объект.Детали, ТекущиеДанные.НомерСтроки);
	СтруктураНастройки.Вставить("СоответствиеInvoiceLinesИQty", СоответствиеInvoiceLinesИQty);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", СтруктураПараметров, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтрокаИнвойсаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ImportExportКлиентСервер.ПерезаполнитьParcelLineПоInvoiceLineПриНеобходимости(ЗначениеЗаполнено(Объект.TransportRequest), ТекущиеДанные);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// Trips

&НаКлиенте
Процедура TripsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Trips.ТекущиеДанные;	
	
	Если ТекДанные <> Неопределено Тогда 
		ПоказатьЗначение(,ТекДанные.Trip);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеталиNetWeightПриИзменении(Элемент)
	
	ТекДанные = Элементы.Детали.ТекущиеДанные;
	NewNetWeight = ТекДанные.NetWeight;
	Айтем = ТекДанные.СтрокаИнвойса;
	Если ЗначениеЗаполнено(ТекДанные.NetWeight) И ТекДанные.NetWeight <> Общегоназначения.ЗначениеРеквизитаОбъекта(Айтем, "NetWeight") Тогда
		Айтем = ТекДанные.СтрокаИнвойса;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Item", Айтем);
		СтруктураДанных.Вставить("NewNetWeight", NewNetWeight);
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьItemNetWeight", ЭтаФорма, СтруктураДанных);
		ПоказатьВопрос(Оповещение, "Change 'NetWeight' in "+ Айтем +" on - "+ NewNetWeight +"? / Изменить вес нетто в "+ Айтем +" на - "+ NewNetWeight +"?", РежимДиалогаВопрос.ДаНет,,, "Заполнение данных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьItemNetWeight(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменитьItemNetWeight(Параметры);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьItemNetWeight(Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	Айтем = Параметры.Item.ПолучитьОбъект();
	Айтем.ОбменДанными.Загрузка = Истина;
	Айтем.NetWeight = Параметры.NewNetWeight;
	Попытка
		Айтем.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить вес нетто");
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеталиQtyПриИзменении(Элемент)
	
	ТекДанные = Элементы.Детали.ТекущиеДанные;
	NewQty = ТекДанные.Qty;
	Айтем = ТекДанные.СтрокаИнвойса;
	Если ЗначениеЗаполнено(ТекДанные.Qty) И ТекДанные.Qty <> Общегоназначения.ЗначениеРеквизитаОбъекта(Айтем, "Количество") Тогда
		Айтем = ТекДанные.СтрокаИнвойса;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Item", Айтем);
		СтруктураДанных.Вставить("NewQty", NewQty);
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьItemQty", ЭтаФорма, СтруктураДанных);
		ПоказатьВопрос(Оповещение, "Change 'Qty' in "+ Айтем +" on - "+ NewQty +"? / Изменить количество в "+ Айтем +" на - "+ NewQty +"?", РежимДиалогаВопрос.ДаНет,,, "Заполнение данных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьItemQty(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменитьItemQty(Параметры);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьItemQty(Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	Айтем = Параметры.Item.ПолучитьОбъект();
	Айтем.ОбменДанными.Загрузка = Истина;
	Айтем.Количество = Параметры.NewQty;
	Попытка
		Айтем.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить количество");
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


