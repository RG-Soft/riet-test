
/////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	// Заполним реквизиты для новых парселей
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Проверен = Истина;
	КонецЕсли; 
	
	НастроитьПоExportToTMS();
	
	Если ЗначениеЗаполнено(Объект.ExportRequest) Тогда
		
		Элементы.Код.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Код.АвтоОтметкаНезаполненного = Ложь;
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DONo", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "RDD", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ГруппаLocalDistribution", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ДеталиReceiver", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ДеталиНомерЗаявкиНаЗакупку", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ДеталиСтрокаЗаявкиНаЗакупку", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DOC", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Trip", "Видимость", Ложь);	
		
	Иначе
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ExportRequest", "Видимость", Ложь);
		
	КонецЕсли;
	      		
	// Настроим видимость стандартных размеров
	UOMCM = Справочники.UOMs.CM;
	ЭтоНеСантиметры = ЗначениеЗаполнено(Объект.DIMsUOM) И Объект.DIMsUOM <> UOMCM;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DIMsStandardUOM", "Видимость", ЭтоНеСантиметры);
	// { RGS AGorlenko 09.11.2014 15:00:09 - поддержка скорректированных размеров
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DIMsStandardUOMCorrected", "Видимость", ЭтоНеСантиметры);
	// } RGS AGorlenko 09.11.2014 15:00:25 - поддержка скорректированных размеров
	Если Элементы.DIMsStandardUOM.Видимость Тогда
		DIMsStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.DIMsUOM, "StandardUOM");
	КонецЕсли;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "LengthCM", "Видимость", ЭтоНеСантиметры);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WidthCM", "Видимость", ЭтоНеСантиметры);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "HeightCM", "Видимость", ЭтоНеСантиметры);
	// { RGS AGorlenko 09.11.2014 15:00:09 - поддержка скорректированных размеров
	Если (Объект.LengthCorrected = 0 ИЛИ Объект.Length = Объект.LengthCorrected) И (Объект.WidthCorrected = 0 ИЛИ Объект.Width = Объект.WidthCorrected)
		И (Объект.HeightCorrected = 0 ИЛИ Объект.Height = Объект.HeightCorrected) Тогда
		Элементы.DimsPerParcelCorrected.Видимость = Ложь;
	Иначе
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "LengthCMCorrected", "Видимость", ЭтоНеСантиметры);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WidthCMCorrected", "Видимость", ЭтоНеСантиметры);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "HeightCMCorrected", "Видимость", ЭтоНеСантиметры);
	КонецЕсли;
	// } RGS AGorlenko 09.11.2014 15:00:25 - поддержка скорректированных размеров
	
	// Настроим видимость стандартных весов
	UOMKG = Справочники.UOMs.KG;
	ЭтоНеКилограммы = ЗначениеЗаполнено(Объект.WeightUOM) И Объект.WeightUOM <> UOMKG;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WeightStandardUOM", "Видимость", ЭтоНеКилограммы);
	// { RGS AGorlenko 09.11.2014 15:00:09 - поддержка скорректированных размеров
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WeightStandardUOMCorrected", "Видимость", ЭтоНеСантиметры);
	// } RGS AGorlenko 09.11.2014 15:00:25 - поддержка скорректированных размеров
	Если Элементы.WeightStandardUOM.Видимость Тогда
		WeightStandardUOM = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.WeightUOM, "StandardUOM");
	КонецЕсли;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalGrossWeightKG", "Видимость", ЭтоНеКилограммы);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalNetWeightKG", "Видимость", ЭтоНеКилограммы);
	// { RGS AGorlenko 09.11.2014 15:00:09 - поддержка скорректированных размеров
	Если Объект.GrossWeightCorrected = 0 ИЛИ Объект.GrossWeight = Объект.GrossWeightCorrected Тогда
		Элементы.TotalWeightCorrected.Видимость = Ложь;
	Иначе
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalGrossWeightKGCorrected", "Видимость", ЭтоНеКилограммы);
	КонецЕсли;
	// } RGS AGorlenko 09.11.2014 15:00:25 - поддержка скорректированных размеров
		
	ЗаполнитьDOCAndTrip();
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.ParcelОткрытие, Объект.Ссылка);
	       		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьNumOfParcels()  //S-I-0002122
	
	// { RGS EParshina 10.12.2018 17:15:02 - S-I-0006297	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Для Каждого СтрТЧ из Объект.Детали Цикл
			
			Попытка
				
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТЧ.СтрокаИнвойса, "Инвойс.ProcessLevel") = 
					ПредопределенноеЗначение("Справочник.ProcessLevels.RUEA") Тогда 
					
					Элементы.NumOfParcels.Доступность = Истина;
					Прервать;
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	Иначе
		Элементы.NumOfParcels.Доступность = Истина;
	КонецЕсли;
	// } RGS EParshina 10.12.2018 17:15:04 - S-I-0006297
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьПоLocalOnly();
	
	НастроитьДоступностьNumOfParcels();  //S-I-0002122
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоExportToTMS()
	
	ExportToTMS = Документы.ExportRequest.ПолучитьExportToTMSПоExportRequest(Объект.ExportRequest);
	Если ExportToTMS Тогда
		
		ПараметрВыбораInTMS = Новый ПараметрВыбора("Отбор.InTMS", Истина);
		
		РГСофт.ДобавитьПараметрВыбора(Элементы.PackingType, ПараметрВыбораInTMS);
		Элементы.PackingType.БыстрыйВыбор = Истина;
		
		РГСофт.ДобавитьПараметрВыбора(Элементы.DIMsUOM, ПараметрВыбораInTMS);
		
		РГСофт.ДобавитьПараметрВыбора(Элементы.WeightUOM, ПараметрВыбораInTMS);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьDOCAndTrip()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ ЗначениеЗаполнено(Объект.ExportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcel", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	DOCsParcels.Ссылка КАК DOC
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		|ГДЕ
		|	DOCsParcels.Parcel = &Parcel
		|
		|УПОРЯДОЧИТЬ ПО
		|	DOCsParcels.Ссылка.Отменен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	TripsParcels.Ссылка КАК Trip
		|ИЗ
		|	Документ.Trip.Parcels КАК TripsParcels
		|ГДЕ
		|	TripsParcels.Parcel = &Parcel
		|
		|УПОРЯДОЧИТЬ ПО
		|	TripsParcels.Ссылка.ПометкаУдаления";
		
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаDOCs = Результаты[0].Выбрать();
	Если ВыборкаDOCs.Следующий() Тогда
		DOC = ВыборкаDOCs.DOC;
		Элементы.DOC.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	ВыборкаTrips = Результаты[1].Выбрать();
	Если ВыборкаTrips.Следующий() Тогда
		Trip = ВыборкаTrips.Trip;
		Элементы.Trip.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура LocalOnlyПриИзменении(Элемент)
	
	УстановитьВидимостьПоLocalOnly();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоLocalOnly()
	
	// { RGS AGorlenko 07.05.2014 19:07:11 - убираем префиксы
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Prefix", "Видимость", Объект.LocalOnly);
	// } RGS AGorlenko 07.05.2014 19:07:12 - убираем префиксы
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Repacked", "Видимость", Не Объект.LocalOnly);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "LocalImpacked", "Видимость", Объект.LocalOnly);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	
	ОбщегоНазначения.УстановитьЗначение(ТекущийОбъект.ModifiedBy, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.ParcelИнтерактивнаяЗапись, Объект.Ссылка);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповестим DOC, из которого начали создавать Parcel
	Если ВладелецФормы <> Неопределено
	    И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
		И ВладелецФормы.Имя = "Parcels" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		ОповеститьОВыборе(Массив);
	КонецЕсли;
	
	Оповестить("ИзмененParcel", Объект.Ссылка); 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// DIMS

&НаКлиенте
Процедура DIMsUOMПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	ЭтоНЕСантиметры = ЗначениеЗаполнено(Объект.DIMsUOM) И Объект.DIMsUOM <> UOMCM;
	Элементы.LengthCM.Видимость = ЭтоНЕСантиметры;
	Элементы.WidthCM.Видимость = ЭтоНЕСантиметры;
	Элементы.HeightCM.Видимость = ЭтоНЕСантиметры;
	Элементы.DIMsStandardUOM.Видимость = ЭтоНЕСантиметры;
	// { RGS AGorlenko 09.11.2014 15:05:27 - поддержка скорректированных размеров
	Элементы.WidthCMCorrected.Видимость = ЭтоНЕСантиметры;
	Элементы.HeightCMCorrected.Видимость = ЭтоНЕСантиметры;
	// } RGS AGorlenko 09.11.2014 15:05:39 - поддержка скорректированных размеров
	
КонецПроцедуры

&НаКлиенте
Процедура LengthПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);

КонецПроцедуры

&НаКлиенте
Процедура WidthПриИзменении(Элемент)

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);	
	
КонецПроцедуры

&НаКлиенте
Процедура HeightПриИзменении(Элемент)
	
	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// WEIGHT

&НаКлиенте
Процедура WeightUOMПриИзменении(Элемент)
	
	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);	
	ЭтоНеКилограммы = ЗначениеЗаполнено(Объект.WeightUOM) И Объект.WeightUOM <> UOMKG;
	Элементы.WeightStandardUOM.Видимость = ЭтоНеКилограммы;
	Элементы.WeightStandardUOM.Видимость = ЭтоНеКилограммы;
	Элементы.TotalGrossWeightKG.Видимость = ЭтоНеКилограммы;
	Элементы.TotalNetWeightKG.Видимость = ЭтоНеКилограммы;
	// { RGS AGorlenko 09.11.2014 15:05:27 - поддержка скорректированных размеров
	Элементы.WeightStandardUOMCorrected.Видимость = ЭтоНеКилограммы;
	// } RGS AGorlenko 09.11.2014 15:05:39 - поддержка скорректированных размеров
	
КонецПроцедуры

&НаКлиенте
Процедура GrossWeightПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ExportRequest) И Объект.GrossWeight <> 0 И Объект.NetWeight = 0 Тогда
		Объект.NetWeight = Объект.GrossWeight * 0.95;
	КонецЕсли;

	ImportExportКлиентСервер.ПересчитатьРазмерыИВесParcel(Объект, UOMCM, UOMKG);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// ДЕТАЛИ

&НаКлиенте
Процедура FillEmptyInvoiceLines(Команда)

	Если Объект.LocalOnly Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Automatic search of items in not provided for local parcels!",
			, "LocalOnly", "Объект");
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.DONo)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""DO no."" is empty!",
			, "DONo", "Объект");
		Возврат;
	КонецЕсли;
	
	FillEmptyInvoiceLinesНаСервере();
		 	
КонецПроцедуры

&НаСервере
Процедура FillEmptyInvoiceLinesНаСервере()
		
	Для Каждого СтрокаТЧ Из Объект.Детали Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтрокаИнвойса) Тогда
			
			КоличествоНайденныхInvoiceLine = Справочники.Parcels.ЗаполнитьInvoiceLineВParcelLine(СтрокаТЧ, Объект.DONo, Объект.LocalOnly, Объект.ExportRequest, Объект.TransportRequest, Объект.Ссылка, Объект.Детали);
			
			Если КоличествоНайденныхInvoiceLine = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find Items for ""Parcel line #" + СтрокаТЧ.НомерСтроки + """!
					|Try to select item line manually.",
					, "Детали[" + (СтрокаТЧ.НомерСтроки-1) + "].СтрокаИнвойса", "Объект");
					
			ИначеЕсли КоличествоНайденныхInvoiceLine > 1 Тогда 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Found several Items for ""Parcel line #" + СтрокаТЧ.НомерСтроки + """!
					|Try to select item line manually.",
					, "Детали[" + (СтрокаТЧ.НомерСтроки-1) + "].СтрокаИнвойса", "Объект");
				
			Иначе
				
				Модифицированность = Истина;
					
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.LocalOnly И НЕ ЗначениеЗаполнено(Объект.ExportRequest) И НЕ ЗначениеЗаполнено(СокрЛП(Объект.DONo)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""DO no."" is empty!",
			, "DONo", "Объект", Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	#Если ВебКлиент Тогда
	АктивноеОкно = АктивноеОкно();
	Если АктивноеОкно <> Неопределено Тогда
		Если АктивноеОкно.Содержимое.Количество() > 0 Тогда
			Если АктивноеОкно.Содержимое[0].ИмяФормы = "Справочник.СтрокиИнвойса.Форма.ФормаВыбора" Тогда
				АктивноеОкно.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзParcelLine");
	
	СтруктураНастройки.Вставить("CurrentParcel", Объект.Ссылка);
	СтруктураНастройки.Вставить("ExportRequest", Объект.ExportRequest);
	СтруктураНастройки.Вставить("TransportRequest", Объект.TransportRequest);
	СтруктураНастройки.Вставить("LocalOnly", Объект.LocalOnly);
	СтруктураНастройки.Вставить("DONo", Объект.DONo);
	
	СоответствиеInvoiceLinesИQty = ImportExportКлиентСервер.ПолучитьСоответствиеInvoiceLineИParcelQty(Объект.Детали);
	СтруктураНастройки.Вставить("СоответствиеInvoiceLinesИQty", СоответствиеInvoiceLinesИQty);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор нескольких items
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.СтрокиИнвойса") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Получим данные сразу для всех items
		ДанныеItems = ImportExportВызовСервера.ПолучитьДанныеItemsДляParcelLines(ВыбранноеЗначение);
		
		// Создадим и заполним остальные строки
		Для ы = 0 По ВыбранноеЗначение.ВГраница() Цикл
			
			НоваяСтрока = Объект.Детали.Добавить();
			НоваяСтрока.СтрокаИнвойса = ВыбранноеЗначение[ы];
			ImportExportКлиентСервер.ПерезаполнитьParcelLineПоInvoiceLineПриНеобходимости(ЗначениеЗаполнено(Объект.ExportRequest), НоваяСтрока, ДанныеItems[НоваяСтрока.СтрокаИнвойса]);
			
			Модифицированность = Истина;
			
		КонецЦикла;
			
	КонецЕсли;
	
	НастроитьДоступностьNumOfParcels();   //S-I-0002122

КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтрокаИнвойсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
		
	Если НЕ Объект.LocalOnly И НЕ ЗначениеЗаполнено(Объект.ExportRequest) И НЕ ЗначениеЗаполнено(СокрЛП(Объект.DONo)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""DO no."" не заполнено!",
			, "DONo", "Объект", Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзParcelLine");
	
	СтруктураНастройки.Вставить("CurrentParcel", Объект.Ссылка);
	СтруктураНастройки.Вставить("LocalOnly", Объект.LocalOnly);
	СтруктураНастройки.Вставить("ExportRequest", Объект.ExportRequest);
	СтруктураНастройки.Вставить("TransportRequest", Объект.TransportRequest);
	СтруктураНастройки.Вставить("DONo", Объект.DONo);
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	СтрокаСвойств = "НомерЗаявкиНаЗакупку, СтрокаЗаявкиНаЗакупку, Receiver, СерийныйНомер, Qty, QtyUOM";
	СтруктураParcelLine = Новый Структура(СтрокаСвойств);
	ЗаполнитьЗначенияСвойств(СтруктураParcelLine, ТекущиеДанные, СтрокаСвойств);
	СтруктураНастройки.Вставить("СтруктураParcelLine", СтруктураParcelLine);
	
	СоответствиеInvoiceLinesИQty = ImportExportКлиентСервер.ПолучитьСоответствиеInvoiceLineИParcelQty(Объект.Детали, ТекущиеДанные.НомерСтроки);
	СтруктураНастройки.Вставить("СоответствиеInvoiceLinesИQty", СоответствиеInvoiceLinesИQty);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", СтруктураПараметров, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеталиСтрокаИнвойсаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Детали.ТекущиеДанные;
	
	ImportExportКлиентСервер.ПерезаполнитьParcelLineПоInvoiceLineПриНеобходимости(ЗначениеЗаполнено(Объект.ExportRequest), ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПриИзменении(Элемент)
	
	НастроитьДоступностьNumOfParcels();   //S-I-0002122
	
КонецПроцедуры

