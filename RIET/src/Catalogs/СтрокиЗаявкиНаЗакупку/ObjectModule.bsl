
Процедура ПриКопировании(ОбъектКопирования)
	
	CustomsСервер.ОчиститьCreationModification(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	ПроверитьЗаполнениеРеквизитов(Отказ);
	
	// { RGS AArsentev 23.07.2017 S-I-0005680
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();
	
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
	// } RGS AArsentev 23.07.2017 S-I-0005680
	
КонецПроцедуры

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
	
	PONo = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Код"));
	Код = PONo + "-" + СформироватьНомерСтрокиСтрокой(НомерСтрокиЗаявкиНаЗакупку);
	
	// Очистим наименование и описание номенклатуры от лишних символов
	КодПоставщика = ВРег(СокрЛП(КодПоставщика));
	ОписаниеНоменклатуры = СокрЛП(ОписаниеНоменклатуры);
	Наименование = СокрЛП(Наименование);
	АктивитиКод = СокрЛП(АктивитиКод);
	ТипЗапроса = СокрЛП(ТипЗапроса);
	НазначениеРасходов = СокрЛП(НазначениеРасходов);
	ТипНазначенияРасходов = СокрЛП(ТипНазначенияРасходов);
	СпособПеревозки = СокрЛП(СпособПеревозки);
	ИнструкцииПоТранспортировке = СокрЛП(ИнструкцииПоТранспортировке);
	СпециальныеИнструкции = СокрЛП(СпециальныеИнструкции);
	
	// Продублируем в наименование описание номенклатуры
	Если Не ЗначениеЗаполнено(Наименование)
		ИЛИ НЕ СтрНайти(ОписаниеНоменклатуры, Наименование) Тогда
		Наименование = ОписаниеНоменклатуры;
	КонецЕсли;
		
	// Заполним код поставщика
	Если НЕ ЗначениеЗаполнено(КодПоставщика)
		И ЗначениеЗаполнено(Каталог) Тогда	
		КодПоставщика = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Каталог, "Код"));			
	КонецЕсли;
	
	CustomsСервер.ЗаполнитьCreationModification(ЭтотОбъект);
	
КонецПроцедуры

Функция СформироватьНомерСтрокиСтрокой(Значение)
	
	ЗначениеСтрокой = "" + Значение;
	
	Пока СтрДлина(ЗначениеСтрокой) < 3 Цикл
		ЗначениеСтрокой = "0" + ЗначениеСтрокой;
	КонецЦикла;
	
	Возврат ЗначениеСтрокой;
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитов(Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""No."" не заполнено!",
			ЭтотОбъект, "Код", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СокрЛП(ОписаниеНоменклатуры)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Part description"" не заполнено!",
			ЭтотОбъект, "ОписаниеНоменклатуры", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

// { RGS AArsentev 23.07.2017 S-I-0005680
Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();
	СтрокаИсключаемыхРеквизитов = "CreatedBy, CreationDate, ModifiedBy, ModificationDate"; 
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		Новый Массив,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.POLinesLogs.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // } RGS AArsentev 23.07.2017 S-I-0005680

// { RGS AArsentev 23.07.2017 S-I-0005680
Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не ЭтоНовый() Тогда 
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			|	СтрокиЗаявкиНаЗакупку.Владелец,
			|	СтрокиЗаявкиНаЗакупку.Код,
			|	СтрокиЗаявкиНаЗакупку.Наименование,
			|	СтрокиЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку,
			|	СтрокиЗаявкиНаЗакупку.КодПоставщика,
			|	СтрокиЗаявкиНаЗакупку.Каталог,
			|	СтрокиЗаявкиНаЗакупку.ОписаниеНоменклатуры,
			|	СтрокиЗаявкиНаЗакупку.Количество,
			|	СтрокиЗаявкиНаЗакупку.ЕдиницаИзмерения,
			|	СтрокиЗаявкиНаЗакупку.Цена,
			|	СтрокиЗаявкиНаЗакупку.Валюта,
			|	СтрокиЗаявкиНаЗакупку.ИтогоПоСтроке,
			|	СтрокиЗаявкиНаЗакупку.ИтогоПоСтрокеДолл,
			|	СтрокиЗаявкиНаЗакупку.Классификатор,
			|	СтрокиЗаявкиНаЗакупку.КостЦентр,
			|	СтрокиЗаявкиНаЗакупку.АктивитиКод,
			|	СтрокиЗаявкиНаЗакупку.ТипЗапроса,
			|	СтрокиЗаявкиНаЗакупку.НазначениеРасходов,
			|	СтрокиЗаявкиНаЗакупку.ТипНазначенияРасходов,
			|	СтрокиЗаявкиНаЗакупку.СпособПеревозки,
			|	СтрокиЗаявкиНаЗакупку.ИнструкцииПоТранспортировке,
			|	СтрокиЗаявкиНаЗакупку.СпециальныеИнструкции,
			|	СтрокиЗаявкиНаЗакупку.SupplierPromisedDate,
			|	СтрокиЗаявкиНаЗакупку.GOLDReceiptDate,
			|	СтрокиЗаявкиНаЗакупку.GoodsReceiptDate,
			|	СтрокиЗаявкиНаЗакупку.DONumber,
			|	СтрокиЗаявкиНаЗакупку.HTC,
			|	СтрокиЗаявкиНаЗакупку.UrgentFlag,
			|	СтрокиЗаявкиНаЗакупку.Status,
			|	СтрокиЗаявкиНаЗакупку.CurrentRDD,
			|	СтрокиЗаявкиНаЗакупку.SupplierRequiredDate,
			|	СтрокиЗаявкиНаЗакупку.CountryOfOrigin,
			|	СтрокиЗаявкиНаЗакупку.Hub1,
			|	СтрокиЗаявкиНаЗакупку.ProjectMobilization,
			|	СтрокиЗаявкиНаЗакупку.GL_From_Segment,
			|	СтрокиЗаявкиНаЗакупку.GL_Date,
			|	СтрокиЗаявкиНаЗакупку.ПометкаУдаления,
			// { RGS DKazanskiy 11.12.2018 14:44:31 - S-I-0006451
			|	СтрокиЗаявкиНаЗакупку.Restock,
			|	СтрокиЗаявкиНаЗакупку.Restock_Date
			// } RGS DKazanskiy 11.12.2018 14:44:40 - S-I-0006451
			|ИЗ
			|	Справочник.СтрокиЗаявкиНаЗакупку КАК СтрокиЗаявкиНаЗакупку
			|ГДЕ
			|	СтрокиЗаявкиНаЗакупку.Ссылка = &Ссылка");
					
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 23.07.2017 S-I-0005680