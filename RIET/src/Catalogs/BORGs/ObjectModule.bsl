
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();
	
	ПроверитьЗаполнениеРеквизитов(
		Отказ,
		ДополнительныеСвойства.ВыборкаAUsAndBORGs);
		
		
	// { RGS ASeryakov, 07.12.2018 14:16:16 S-I-0006301
	ContactsTo = TechnicalDescriptionContacts.Выгрузить().ВыгрузитьКолонку("Contacts");
	ContactsAfter = ПолучитьContacts(Ссылка).ВыгрузитьКолонку("Contacts");

	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ContactsTo, ContactsAfter) И ContactsTo.Количество() > ContactsAfter.Количество() Тогда
		
		Recipient = ПолучитьМассивУдаленныхЭлементов(ContactsTo, ContactsAfter);
		
		УстановитьПривилегированныйРежим(Истина);
		
			ОбновитьTDStatusesDOCsAtDeleteRecipient(Отказ, Recipient);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если НЕ Отказ Тогда
			Сообщить("TD status was successfully updated.");
		КонецЕсли;
		
	КонецЕсли;
	

	// } RGS ASeryakov 07.12.2018 14:16:25 S-I-0006301

КонецПроцедуры

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных(Отказ)
	
	Код = СокрЛП(Код);
	Наименование = СокрЛП(Наименование);
	
	// Для нового БОРГа автоматически пропишем связь этого борга и Default AU
	Если ЭтоНовый() И ЗначениеЗаполнено(DefaultAU) Тогда
		
		МенеджерЗаписи = РегистрыСведений.AUsAndBORGs.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.AU = DefaultAU;
		
		НоваяСсылка = Справочники.BORGs.ПолучитьСсылку();
		УстановитьСсылкуНового(НоваяСсылка);
		МенеджерЗаписи.BORG = НоваяСсылка;
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to link current BORG with Default AU.
				|See errors above.
				|" + ОписаниеОшибки(),
				,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбщегоНазначения.ОчиститьТаблицуОтСтрокСПустымиРеквизитами(TechnicalDescriptionContacts, "Contact");
	
КонецПроцедуры 

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	Если НЕ ПометкаУдаления Тогда
		     						
		Если ЗначениеЗаполнено(DefaultAU) Тогда
			    								
			Если ЗначениеЗаполнено(Ссылка) Тогда
				
				СтруктураПараметров.Вставить("AU", DefaultAU);
				СтруктураПараметров.Вставить("BORG", Ссылка);
				СтруктураТекстов.Вставить("AUsAndBORGs",
					"ВЫБРАТЬ
					|	AUsAndBORGs.AU
					|ИЗ
					|	РегистрСведений.AUsAndBORGs КАК AUsAndBORGs
					|ГДЕ
					|	AUsAndBORGs.AU = &AU
					|	И AUsAndBORGs.BORG = &BORG");
				
			КонецЕсли; 	
			
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаAUsAndBORGs", Неопределено);
	Если СтруктураРезультатов.Свойство("AUsAndBORGs") Тогда
		ДополнительныеСвойства.ВыборкаAUsAndBORGs = СтруктураРезультатов.AUsAndBORGs.Выбрать();
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроверитьЗаполнениеРеквизитов(Отказ, ВыборкаAUsAndBORGs)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Код)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'No.' is empty!",
			ЭтотОбъект, "Код", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Name' is empty!",
			ЭтотОбъект, "Наименование", , Отказ);		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Компания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Company' is empty!",
			ЭтотОбъект, "Компания", , Отказ);
	КонецЕсли;
	
	// Segment
	Если НЕ ЗначениеЗаполнено(Segment) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Segment' is empty!",
			ЭтотОбъект, "Segment", , Отказ);
	Иначе
		
		Если ЗначениеЗаполнено(Segment.Родитель) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Select Segment, not Sub segment!",
				ЭтотОбъект, "Segment", , Отказ);
		КонецЕсли;
				
	КонецЕсли;
	
	// Default AU
	Если НЕ ЗначениеЗаполнено(DefaultAU) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Default AU' is empty!",
			ЭтотОбъект, "DefaultAU", , Отказ);

	Иначе
		
		Если ЗначениеЗаполнено(Ссылка)
			И ВыборкаAUsAndBORGs.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""You can not use ""AU " + СокрЛП(DefaultAU) + """ as default AU because it is not specified in the ""AUs and BORGs"" register for the ""BORG " + СокрЛП(ЭтотОбъект) + """!",
				ЭтотОбъект, "DefaultAU", , Отказ);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Segment) И DefaultAU.Segment <> Segment Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Segment '" + СокрЛП(DefaultAU.Segment) + "' in AU differs from Segment in BORG!",
				ЭтотОбъект, "DefaultAU", , Отказ);
 		КонецЕсли;

	КонецЕсли;
	
	// Default WH
	Если ЗначениеЗаполнено(DefaultWH)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DefaultWH, "Warehouse")
		И DefaultWH <> Справочники.Warehouses.UNKN Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Default WH' is not a warehouse for Leg7!",
			ЭтотОбъект, "DefaultWH", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не ЗначениеЗаполнено(DefaultWH) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьParcelsWarehouseTo();
	
КонецПроцедуры

Процедура ОбновитьParcelsWarehouseTo()  
	
	//каждый раз при изменении default WH в борге, нужно делать обновление WH to для всех парселей, 
	//в которых указан WH from Major или НЕК и в деталях есть PO с этим боргом и парсель еще не в final trip.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	МассивWHFrom = Новый Массив;
	МассивWHFrom.Добавить(Справочники.Warehouses.НайтиПоКоду("RUS_SPBM"));
	МассивWHFrom.Добавить(Справочники.Warehouses.НайтиПоКоду("RUS_MJRM"));
	
	Запрос.УстановитьПараметр("МассивWHFrom", МассивWHFrom);
	Запрос.УстановитьПараметр("BORG", Ссылка);

	//отбираем только те парсели, для которых определен один default WH из айтемов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH) КАК NumDistinctWH
	               |ПОМЕСТИТЬ ВТ_NumWH
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ParcelsДетали.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Parcel
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК DefaultWH,
	               |	ParcelsДетали.Ссылка.WarehouseTo КАК WarehouseTo,
	               |	ЕСТЬNULL(ВТ_NumWH.NumDistinctWH, 0) КАК NumDistinctWH
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
	               |		ПО ParcelsДетали.Ссылка = TripParcels.Parcel
	               |			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_NumWH КАК ВТ_NumWH
	               |		ПО ParcelsДетали.Ссылка = ВТ_NumWH.Parcel
	               |ГДЕ
	               |	ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ = &BORG
	               |	И ParcelsДетали.Ссылка.ExportRequest = ЗНАЧЕНИЕ(Документ.ExportRequest.ПустаяСсылка)
	               |	И ParcelsДетали.Ссылка.WarehouseFrom В(&МассивWHFrom)
	               |	И ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)
	               |	И ВЫБОР
	               |			КОГДА ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Warehouses.UNKN)
	               |					И ParcelsДетали.Ссылка.WarehouseTo <> ParcelsДетали.Ссылка.WarehouseFrom
	               |				ТОГДА ИСТИНА
	               |			КОГДА ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) <> ParcelsДетали.Ссылка.WarehouseTo
	               |					И ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Warehouses.UNKN)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И TripParcels.Ссылка ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ParcelsДетали.Ссылка,
	               |	ЕСТЬNULL(ParcelsДетали.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ.DefaultWH, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)),
	               |	ParcelsДетали.Ссылка.WarehouseTo,
	               |	ВТ_NumWH.NumDistinctWH";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ParcelОбъект = Выборка.Parcel.ПолучитьОбъект();
		Если Выборка.NumDistinctWH = 1 Тогда
			РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseTo, ?(Выборка.DefaultWH = Справочники.Warehouses.UNKN, ParcelОбъект.WarehouseFrom, Выборка.DefaultWH));
		Иначе
			РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseTo, ParcelОбъект.WarehouseFrom);
		КонецЕсли;
		
		ParcelОбъект.ОбменДанными.Загрузка = Истина;
		ParcelОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS ASeryakov, 07.12.2018 14:16:16 S-I-0006301
Функция ПолучитьContacts(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	BORGsTechnicalDescriptionContacts.Contact
	|ИЗ
	|	Справочник.BORGs.TechnicalDescriptionContacts КАК BORGsTechnicalDescriptionContacts
	|ГДЕ
	|	BORGsTechnicalDescriptionContacts.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьМассивУдаленныхЭлементов(МассивИсходный, МассивИзмененный)
	
	МассивУдаленных = Новый Массив();
	ТаблицаУдаленных = МассивИсходный;
	
	Для каждого Строка Из МассивИсходный Цикл
	
		Если МассивИзмененный.Найти(Строка) = Неопределено Тогда
			
			МассивУдаленных.Добавить();
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивУдаленных;
	
КонецФункции // ПулучитьТаблицуУдаленныхЭлементов()

Процедура ОбновитьTDStatusesDOCsAtDeleteRecipient(Отказ, Recipient)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	TDStatusesСрезПоследних.DOC КАК DOC,
	|	TDStatusesСрезПоследних.Query КАК Query,
	|	TDStatusesСрезПоследних.Item КАК Item,
	|	TDStatusesСрезПоследних.PartNo КАК PartNo
	|ИЗ
	|	РегистрСведений.TDStatuses.СрезПоследних(, EMail.Recipients.Recipient В (&Recipient)) КАК TDStatusesСрезПоследних
	|ГДЕ
	|	TDStatusesСрезПоследних.Status = ЗНАЧЕНИЕ(Перечисление.TDStatuses.Requested)";
	
	Запрос.УстановитьПараметр("Recipient", Recipient);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтрокаОшибок = "";
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.TDStatuses.СоздатьНаборЗаписей();
			НаборЗаписей.Записывать = Истина;
			НаборЗаписей.Отбор.DOC = Выборка.DOC;
			НаборЗаписей.Отбор.Query = Выборка.Query;
			НаборЗаписей.Отбор.Item = Выборка.Item;
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.Период 		= ТекущаяДатаСеанса();
			НаборЗаписей.ModifiedBy 	= Пользователи.ТекущийПользователь();
			НаборЗаписей.DOC			= Выборка.DOC;
			НаборЗаписей.PartNo		= Выборка.PartNo;
			НаборЗаписей.Status		= Перечисления.TDStatuses.Submitted;
			НаборЗаписей.DOC 		= Выборка.DOC;
			НаборЗаписей.Query		= Выборка.Query;
			НаборЗаписей.Item		= Выборка.Item;
			НаборЗаписей.EMail		= Неопределено;
			
			НаборЗаписей.Записать(Ложь);
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			Отказ = Истина;
			

			ОтменитьТранзакцию();
			
			DOC = ?(Выборка.DOC = Неопределено, "DOC не получен", Строка(Выборка.DOC));
			
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Failed to update TD statuses in DOCs at delete Recipient in BORG: " + Выборка.DOC + " PartNo: " + СокрЛП(Выборка.PartNo) +";"+" Описание ошибки: " + ОписаниеОшибки();
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаОшибок) Тогда
	
		Сообщить("Failed to update TD statuses in DOCs at delete Recipient in BORG,
		|please send request via RIET-support." + Символы.ПС + СтрокаОшибок, СтатусСообщения.ОченьВажное);
	
	КонецЕсли;
	
КонецПроцедуры

// } RGS ASeryakov 07.12.2018 14:16:25 S-I-0006301