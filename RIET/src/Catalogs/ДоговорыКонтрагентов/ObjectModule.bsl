////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью элемента справочника.
//
Процедура ПередЗаписью(Отказ, Сообщать = Истина) Экспорт

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Не ЭтоНовый() и не ПометкаУдаления=Ссылка.ПометкаУдаления тогда
		//В случае установки или снятия пометки удаления не производть проверкую
		Возврат;
	КонецЕсли;

	// Проверим можно ли изменять реквизиты договора.
	// Проверка осуществляется только если записывается уже существующий договор
	Если НЕ ЭтоНовый() Тогда

		Если ЭтоГруппа Тогда

			// Для группы владельца менять нельзя
			Если Владелец <> Ссылка.Владелец Тогда

				Если не Сообщать=Ложь тогда
					Сообщить("Нельзя изменять контрагента для группы договоров.", СтатусСообщения.Важное);
				КонецЕсли;
				Отказ = Истина;
			КонецЕсли; 

		Иначе

			// Проверим Заполнение обязательных реквизитов "Организация"
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) Тогда
				Если не Сообщать=Ложь тогда
					Сообщить("Для договора """ + Наименование + """ не указана организация.
							 |Элемент не записан.", 
							 СтатусСообщения.Важное);
				КонецЕсли;
				Отказ = Истина;
			КонецЕсли;

			// Проверим возможность смены владельца для договора
			Если Владелец <> Ссылка.Владелец Тогда

				Если КритерииОтбора.ДокументыПоДоговоруКонтрагента.Найти(Ссылка).Количество() > 0 Тогда

					Если не Сообщать=Ложь тогда
						Сообщить("Существуют документы, оформленные по договору """ + Наименование + """.
							 |Контрагент договора не может быть изменен, элемент не записан.", 
							 СтатусСообщения.Важное);
					КонецЕсли;
					Отказ = Истина;

				КонецЕсли;

			КонецЕсли;

			// Проверим возможность смены способа ведения взаиморасчетов и валюты взаиморасчетов
			Если ВедениеВзаиморасчетов <> Ссылка.ВедениеВзаиморасчетов
			 ИЛИ ВалютаВзаиморасчетов <> Ссылка.ВалютаВзаиморасчетов 
			 ИЛИ ВидДоговора <> Ссылка.ВидДоговора
			 ИЛИ Организация <> Ссылка.Организация
			 ИЛИ РасчетыВУсловныхЕдиницах <> Ссылка.РасчетыВУсловныхЕдиницах Тогда
			    МассивДокументов = КритерииОтбора.ДокументыПоДоговоруКонтрагента.Найти(Ссылка);
			    ЕстьПроведенныеДокументы = Ложь;

				Для каждого Документ из МассивДокументов Цикл

					ЕстьПроведенныеДокументы = Документ.Проведен;

					Если ЕстьПроведенныеДокументы тогда
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если ЕстьПроведенныеДокументы Тогда
                    Если не Сообщать=Ложь тогда
						Сообщить("Существуют документы, проведенные по договору """ + Наименование + """.
								 |Реквизиты ""Организация"", ""Ведение взаиморасчетов"", ""Валюта взаиморасчетов"", ""Вид договора"", ""Расчеты в условных единицах"" не могут быть изменены.
								 |Элемент не записан.", 
								 СтатусСообщения.Важное);
					КонецЕслИ;
					Отказ = Истина;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли; // Если ЭтоГруппа Тогда

	КонецЕсли; // Если НЕ ЭтоНовый() Тогда

	// Проверим заполнение обязательных реквизитов.
	Если Не ЭтоГруппа Тогда

		// Проверим Заполнение обязательных реквизитов "Организация"
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Организация) Тогда
			Если не Сообщать=Ложь тогда
				Сообщить("Не указана организация для договора.", СтатусСообщения.Важное);
			КонецЕслИ;	
			Отказ = Истина;
		КонецЕсли; 

		// Проверим, заполнена ли валюта
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) Тогда
			Если не Сообщать=Ложь тогда
				Сообщить("Не указана валюта договора ", СтатусСообщения.Важное);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;

		// Проверим, заполнен ли вид договора
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВидДоговора) Тогда
			Если не Сообщать=Ложь тогда
				Сообщить("Не указан вид договора ", СтатусСообщения.Важное);
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
	//-> RG-Soft VIvanov 2016/08/12
	Если Не Отказ Тогда
		Если Не ЗначениеЗаполнено(ermContractID) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыКонтрагентов.ermContractID) КАК ermContractID
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.ermContractID ПОДОБНО &Префикс
			|	И ДоговорыКонтрагентов.Ссылка <> &Ссылка";
			Префикс = Константы.ermSourceID.Получить().Код; 
			Запрос.УстановитьПараметр("Префикс", Префикс + "[0-9]%");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекНомерСтрокой = Выборка.ermContractID;
				Если ПустаяСтрока(ТекНомерСтрокой) Тогда
					текНомер = 1;
				Иначе
					ТекНомерСтрокой = СокрЛП(Прав(ТекНомерСтрокой, СтрДлина(ТекНомерСтрокой) - СтрДлина(Префикс)));
					Попытка
						текНомер = Число(текНомерСтрокой) + 1;
					Исключение
						текНомер = 1;
					КонецПопытки;
				КонецЕсли;
			Иначе
				текНомер = 1;
			КонецЕсли;
			ЧислоНулей = 10 - СтрДлина(Префикс) - СтрДлина(Строка(текНомер));
			ermContractID = Префикс;
			Для инд = 1 По ЧислоНулей Цикл
				ermContractID = ermContractID + "0";
			КонецЦикла;
			ermContractID = ermContractID + Строка(текНомер);
			ДубльДоговора = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ermContractID",ermContractID);
			Если ЗначениеЗаполнено(ДубльДоговора) Тогда
				ЗаписьЖурналаРегистрации("АвтонумерацияErmContractID", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДоговорыКонтрагентов, Ссылка, "Найден существующий договор с ERM Contract ID " + ermContractID + ".");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//<- RG-Soft VIvanov 2016/08/12

КонецПроцедуры // ПередЗаписью()

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

//-> RG-Soft VIvanov 2016/08/12
Процедура ПриКопировании(ОбъектКопирования)
	
	ermContractID = "";	
	
КонецПроцедуры
//<- RG-Soft VIvanov 2016/08/12

