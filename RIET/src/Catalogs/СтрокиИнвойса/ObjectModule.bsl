
////////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерСтрокиИнвойса = 0;
	ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРОВЕРКИ ЗАПОЛНЕНИЯ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодПоИнвойсу) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Part no. / Артикул'!";
		иначе
			ТекстОшибки = "'Part no.' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "КодПоИнвойсу", , Отказ);
		
	КонецЕсли;
	
	Если НЕ Final Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();	
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(
		ДополнительныеСвойства.ВыборкаРеквизитовInvoice,
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest,
		ДополнительныеСвойства.ВыборкаMaxItemNo,
		ДополнительныеСвойства.ВыборкаРеквизитовPOLine);
		
	ПроверитьВозможностьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		// { RGS AGorlenko 26.11.2015 19:14:14 - отмена проверки из-за изменения в подсистеме обмена
		//ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest,
		//ДополнительныеСвойства.ВыборкаLeg7Parcels);
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest);
		// } RGS AGorlenko 26.11.2015 19:14:16 - отмена проверки из-за изменения в подсистеме обмена
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПроверитьРеквизитыСДополнительнымиДанными(
		Отказ,
		ДополнительныеСвойства.ВыборкаРеквизитовInvoice,
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest,
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest,
		ДополнительныеСвойства.ВыборкаДублей,
		ДополнительныеСвойства.ВыборкаРеквизитовPOLine,
		ДополнительныеСвойства.ВыборкаItemsСТакимЖеНаименованием);
	
	// ВРЕМЕННО ЗАКОММЕНТИРОВАНО, ПОКА НЕ РАБОТАЕТ ОБМЕН С NEK
	//ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ);
	
	// { RGS VShamin 25.08.2015 12:10:05 - элементы leg6
	ПроверитьДоступностьИзмененияЭлементовLeg6(Отказ);
	// } RGS VShamin 25.08.2015 12:10:05 - элементы leg6
	
	
	// { RGS AArsentev 25.07.2016 16:17:00                        	
	СтрокаИсключаемыхРеквизитов = "CreatedBy, CreationDate, ModifiedBy, ModificationDate, Проведен"; 
	ТекстИзменений = ImportExportСервер.РегистрацияИзмененийРеквизитовОбъекта(ЭтотОбъект, СтрокаИсключаемыхРеквизитов);
	
	Если ТекстИзменений <> Неопределено тогда
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка,
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA,
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.MOT,
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Accepted,
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Received,
		//|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.Requested
		//|ИЗ
		//|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			ParcelsДетали.Ссылка КАК Парсель
		//|		ИЗ
		//|			Справочник.Parcels.Детали КАК ParcelsДетали
		//|		ГДЕ
		//|			ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса) КАК Парсели
		//|		ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = Парсели.Парсель";
		//Запрос.УстановитьПараметр("СтрокаИнвойса", Ссылка);
		//Результат = Запрос.Выполнить().Выгрузить();
		//Если Результат.Количество() > 0 Тогда
		//	ПривилегированныйРежим(Истина);
		//	НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		//	НаборЗаписей.Отбор.DOC.Установить(Результат[0].Ссылка);
		//	НаборЗаписей.Прочитать();
		//	Запись = НаборЗаписей.Добавить();
		//	Запись.Период = ТекущаяДата();
		//	Запись.Version = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(Результат[0].Ссылка) + 1;
		//	Запись.DOC = Результат[0].Ссылка;
		//	Запись.Регистратор = Результат[0].Ссылка;
		//	Запись.CCA = Результат[0].CCA;
		//	Запись.MOT = Результат[0].MOT;
		//	Запись.Received = Результат[0].Received;
		//	Запись.Accepted = Результат[0].Accepted;
		//	Запись.Requested = Результат[0].Requested;
		//	Запись.ИзменилсяСостав = Истина;	
		//	НаборЗаписей.Записать();
		//	ПривилегированныйРежим(Ложь);
		//КонецЕсли;		
		
	КонецЕсли;
	// { RGS AArsentev 25.07.2016 16:17:00
	
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если НЕ Отказ И НЕ ДополнительныеСвойства.Свойство("ЭтоКопирование") Тогда
		ПроверитьВерсию();
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
	
	Если ЗначениеЗаполнено(TransportRequest) Тогда
		Final = Истина;
		LocalOnly = Истина;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Final = Ложь;
	КонецЕсли;
	
	НомерЗаявкиНаЗакупку = ВРег(СокрЛП(НомерЗаявкиНаЗакупку));
	КодПоИнвойсу = СокрЛП(КодПоИнвойсу);
	СерийныйНомер = ВРег(СокрЛП(СерийныйНомер));
	RAN = СокрЛП(RAN);
	НаименованиеТовара = СокрЛП(НаименованиеТовара);
	DescriptionRus = СокрЛП(DescriptionRus);
	ImportReference = ВРег(СокрЛП(ImportReference));
	Активити = СокрЛП(Активити);
	Если ТипЗнч(СтранаПроисхождения) = Тип("Строка") Тогда
		СтранаПроисхождения = СокрЛП(СтранаПроисхождения);
	КонецЕсли;
	Manufacturer = СокрЛП(Manufacturer);
	
	//{S-I-0000838 - убираем все символы, кроме цифр для RU-process levels
	МеждународныйКодТНВЭД = СокрЛП(МеждународныйКодТНВЭД);
	НовыйHTC="";
	Для ъ = 1 по стрДлина(МеждународныйКодТНВЭД) цикл
		НовыйHTC = НовыйHTC+?(найти("1234567890", сред(МеждународныйКодТНВЭД,ъ,1)) > 0, сред(МеждународныйКодТНВЭД,ъ,1), "");
	КонецЦикла;
	МеждународныйКодТНВЭД = НовыйHTC; //S-I-0000838}	
	
	// Экспортные товары по-умолчанию расцениваем как FMT
	Если ЗначениеЗаполнено(ExportRequest) И НЕ ПометкаУдаления И Не ЗначениеЗаполнено(Классификатор) Тогда
		Классификатор = Перечисления.ТипыЗаказа.FMT;
	КонецЕсли;
	
	//Если PermitsRequired = Перечисления.YesNo.No Тогда
	//	GuaranteeLetter = Неопределено;
	//	MOC = Неопределено;
	//КонецЕсли;

	Если GuaranteeLetter = Перечисления.YesNo.No Тогда
		MOC = Неопределено;
		ConfirmationOfCargoLatestDate = Неопределено;
		CustomsBSReceiptDate = Неопределено;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ) Экспорт
	
	Если ПометкаУдаления Тогда		
		Возврат;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Инвойс) Тогда
		
		Если ЗначениеЗаполнено(ExportRequest) Тогда
			ТекстОшибки = "An Item can not refer to Import invoice and Export request at the same time!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ExportRequest", , Отказ);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(TransportRequest) Тогда
			ТекстОшибки = "An Item can not refer to Import invoice and Transport request at the same time!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "TransportRequest", , Отказ);
		КонецЕсли; 

		Если НЕ ЗначениеЗаполнено(НомерСтрокиИнвойса) Тогда
			ТекстОшибки = "'Item no.' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "НомерСтрокиИнвойса", , Отказ);	
		КонецЕсли;
						
	КонецЕсли;
	
	Если ЗначениеЗаполнено(TransportRequest) И ЗначениеЗаполнено(ExportRequest) Тогда
		ТекстОшибки = "An Item can not refer to Export request and Transport request at the same time!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "TransportRequest", , Отказ);
	КонецЕсли; 
	
	Если НЕ Final Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодПоИнвойсу) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Part no. / Артикул'!";
		иначе
			ТекстОшибки = "'Part no.' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "КодПоИнвойсу", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(TransportRequest) Тогда
		
		Если НЕ ЗначениеЗаполнено(DescriptionRus) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Не заполнено поле 'Описание (рус.)'!";
			иначе
				ТекстОшибки = "'Description rus.' is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DescriptionRus", , Отказ);		
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ERPTreatmentNonLawson) Тогда		
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Не заполнено поле 'Классификация товара'!";
			иначе
				ТекстОшибки = "'ERP treatment' is empty!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ERPTreatmentNonLawson", , Отказ);		
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(TransportRequest, "CustomUnionTransaction") Тогда 
			
			Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) Тогда		
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Не заполнено поле 'Страна происхождения'!";
				иначе
					ТекстОшибки = "'Country of origin' is empty!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "СтранаПроисхождения", , Отказ);		
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Цена) Тогда		
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Не заполнено поле 'Цена за единицу'!";
				иначе
					ТекстОшибки = "'Unit price' is empty!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Цена", , Отказ);		
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Currency) Тогда		
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Не заполнено поле 'Валюта'!";
				иначе
					ТекстОшибки = "'Currency' is empty!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Currency", , Отказ);		
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(TNVED) Тогда		
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Не заполнено поле 'ТНВЭД'!";
				иначе
					ТекстОшибки = "'TNVED' is empty!";
				КонецЕсли;
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "TNVED", , Отказ);		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НаименованиеТовара) Тогда		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Description eng. / Описание англ.'!";
		иначе
			ТекстОшибки = "'Description eng.' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "НаименованиеТовара", , Отказ);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Количество) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Qty / Количество'!";
		иначе
			ТекстОшибки = "'Qty' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Количество", , Отказ);
	КонецЕсли;
				
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'UOM / Ед. изм.'!";
		иначе
			ТекстОшибки = "'Qty UOM' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "ЕдиницаИзмерения", , Отказ);
	КонецЕсли;

	Если ЗначениеЗаполнено(Сумма) И ЗначениеЗаполнено(Количество) И ЗначениеЗаполнено(Цена)
			И Сумма <> Окр(Количество * Цена, 2) Тогда
			
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Общая сумма '" + Сумма + "' отличается от (Количество * Цена за единицу) '" + Окр(Количество * Цена, 2) + "'!";
		иначе
			ТекстОшибки = "Total price '" + Сумма + "' differs from (Qty * Price) '" + Окр(Количество * Цена, 2) + "'!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Сумма", , Отказ);
			
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(TransportRequest) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) Тогда
			ТекстОшибки = "'Country of origin' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтранаПроисхождения", , Отказ);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(NetWeight) И НЕ ЗначениеЗаполнено(WeightUOM) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Weight UOM / Ед. изм. веса'!";
		иначе
			ТекстОшибки = "Weight UOM' is empty!";
		КонецЕсли;
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "WeightUOM", , Отказ);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ExportRequest) Тогда 
		
		Если НЕ ЗначениеЗаполнено(ImportReference) Тогда
			ТекстОшибки = "'Import reference' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ImportReference", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			ТекстОшибки = "'Unit price' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Цена", , Отказ);
		КонецЕсли;
							
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не ЭтоНовый() Тогда
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			|	InvoiceLines.ПометкаУдаления,
			|	InvoiceLines.Код,
			|	InvoiceLines.Наименование,
			|	InvoiceLines.Инвойс,
			|	InvoiceLines.ExportRequest,
			|	InvoiceLines.TransportRequest,
			|	InvoiceLines.НомерСтрокиИнвойса,
			|	InvoiceLines.НомерЗаявкиНаЗакупку,
			|	InvoiceLines.СтрокаЗаявкиНаЗакупку,
			|	InvoiceLines.КодПоИнвойсу,
			|	InvoiceLines.СерийныйНомер,
			|	InvoiceLines.RAN,
			|	InvoiceLines.Каталог,
			|	InvoiceLines.ImportReference,
			|	InvoiceLines.НаименованиеТовара,
			|	InvoiceLines.DescriptionRus,
			|	InvoiceLines.Количество,
			|	InvoiceLines.ЕдиницаИзмерения,
			|	InvoiceLines.Цена,
			|	InvoiceLines.Currency,
			|	InvoiceLines.Сумма,
			|	InvoiceLines.SoldTo,
			|	InvoiceLines.КостЦентр,
			|	InvoiceLines.Классификатор,
			|	InvoiceLines.Активити,
			|	InvoiceLines.СтранаПроисхождения,
			|	InvoiceLines.Manufacturer,
			|	InvoiceLines.МеждународныйКодТНВЭД,
			|	InvoiceLines.НомерВходящейДекларации,
			|	InvoiceLines.NetWeight,
			|	InvoiceLines.WeightUOM,
			|	InvoiceLines.PSA,
			|	InvoiceLines.PermanentTemporary,
			|	InvoiceLines.PermitsRequired,
			|	InvoiceLines.Final,
			|	InvoiceLines.LocalOnly,
			|	InvoiceLines.Prefix,
			|	InvoiceLines.Shortage,
			|	InvoiceLines.EUCNotRequired,
			|	InvoiceLines.EUCRequested,
			|	InvoiceLines.EUCReceived,
			|	InvoiceLines.SCNo,
			|	InvoiceLines.TNVED,
			|	InvoiceLines.COORequired,
			|	InvoiceLines.ERPTreatmentNonLawson,
			|	InvoiceLines.ProjectMobilization,
			|	InvoiceLines.HazardClass,
			|	InvoiceLines.GuaranteeLetter,
			|	InvoiceLines.MOC,
			|	InvoiceLines.ClientPO,
			|	InvoiceLines.ConfirmationOfCargoLatestDate,
			|	InvoiceLines.CustomsBSReceiptDate
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК InvoiceLines
			|ГДЕ
			|	InvoiceLines.Ссылка = &Ссылка");
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Инвойс) Тогда
		
		СтруктураПараметров.Вставить("Invoice", Инвойс);
	
		СтруктураТекстов.Вставить("РеквизитыInvoice",
			"ВЫБРАТЬ
			|	Invoice.Номер,
			|	Invoice.Покупатель КАК SoldTo,
			|	Invoice.Валюта КАК Currency
			|ИЗ
			|	Документ.Инвойс КАК Invoice
			|ГДЕ
			|	Invoice.Ссылка = &Invoice");
			
		// { RGS AGorlenko 26.11.2015 19:08:12 - отмена проверки из-за изменения в подсистеме обмена
		//СтруктураТекстов.Вставить("Leg7Parcels",
		//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//	|	ParcelsДетали.Ссылка.Представление КАК ParcelПредставление
		//	|ИЗ
		//	|	Справочник.Parcels.Детали КАК ParcelsДетали
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		//	|		ПО ParcelsДетали.Ссылка = TripParcels.Parcel
		//	|			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
		//	|ГДЕ
		//	|	ParcelsДетали.СтрокаИнвойса = &Ссылка
		//	|	И ParcelsДетали.Ссылка.Проверен
		//	|	И (ParcelsДетали.Ссылка.DeliveredToWH <> ДАТАВРЕМЯ(1, 1, 1)
		//	|			ИЛИ НЕ TripParcels.Ссылка ЕСТЬ NULL )");
		// } RGS AGorlenko 26.11.2015 19:09:28 - отмена проверки из-за изменения в подсистеме обмена
			
	ИначеЕсли ЗначениеЗаполнено(ExportRequest) Тогда
		
		СтруктураПараметров.Вставить("ExportRequest", ExportRequest);	
		
		СтруктураТекстов.Вставить("РеквизитыExportRequest",	
			"ВЫБРАТЬ
			|	ExportRequests.Номер,
			|	ExportRequests.ExportPurpose,
			|	ExportRequests.ExportMode,
			|	ExportRequests.Company,
			|	ExportRequests.AU,
			|	ExportRequests.Activity,
			|	ExportRequests.Submitted,
			|	ExportRequests.AcceptedBySpecialist,
			|	ExportRequests.ProcessLevel,
			|	ExportRequests.InternationalOBSentToTMS
			|ИЗ
			|	Документ.ExportRequest КАК ExportRequests
			|ГДЕ
			|	ExportRequests.Ссылка = &ExportRequest");
							
	ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
		
		СтруктураПараметров.Вставить("TransportRequest", TransportRequest);	
		
		СтруктураТекстов.Вставить("РеквизитыTransportRequest",	
			"ВЫБРАТЬ
			|	TransportRequests.Номер,
			|	TransportRequests.Company,
			|	TransportRequests.Activity,
			|	TransportRequests.Specialist,
			|	TransportRequests.Проведен,
			|	TransportRequests.ProjectMobilization,
			|	TransportRequests.CostCenter
			|ИЗ
			|	Документ.TransportRequest КАК TransportRequests
			|ГДЕ
			|	TransportRequests.Ссылка = &TransportRequest");
			
		СтруктураТекстов.Вставить("TransportRequestParcels",	
			"ВЫБРАТЬ
			|	ParcelsДетали.Ссылка КАК Parcel
			|ИЗ
			|	Справочник.Parcels.Детали КАК ParcelsДетали
			|ГДЕ
			|	НЕ ParcelsДетали.Ссылка.ПометкаУдаления
			|	И ParcelsДетали.Ссылка.TransportRequest = &TransportRequest
			|	И ParcelsДетали.СтрокаИнвойса = &Ссылка");

	КонецЕсли;
	
	Если НЕ ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(СокрЛП(Наименование)) Тогда
			
			// { RGS AGorlenko 07.05.2014 17:00:40 - убираем префиксы
			//Если ЗначениеЗаполнено(Prefix) Тогда 
			//	
			//	СтруктураПараметров.Вставить("Наименование", Наименование);
			//	СтруктураПараметров.Вставить("Prefix", Prefix);
			//	СтруктураТекстов.Вставить("ItemsСТакимЖеНаименованием",
			//		"ВЫБРАТЬ
			//		|	Items.Представление
			//		|ИЗ
			//		|	Справочник.СтрокиИнвойса КАК Items
			//		|ГДЕ
			//		|	Items.Наименование = &Наименование
			//		|	И Items.Prefix = &Prefix
			//		|	И Items.Ссылка <> &Ссылка
			//		|	И НЕ Items.ПометкаУдаления");
			//	
			//иначе
			// } RGS AGorlenko 07.05.2014 17:00:53 - убираем префиксы
				
				СтруктураПараметров.Вставить("Наименование", Наименование);
				СтруктураТекстов.Вставить("ItemsСТакимЖеНаименованием",
					"ВЫБРАТЬ
					|	Items.Представление
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.Наименование = &Наименование
					|	И Items.Ссылка <> &Ссылка
					|	И НЕ Items.ПометкаУдаления");
					
			// { RGS AGorlenko 07.05.2014 17:01:23 - убираем префиксы
			//КонецЕсли;
			// } RGS AGorlenko 07.05.2014 17:01:28 - убираем префиксы
					
		КонецЕсли;
        		
		Если ЗначениеЗаполнено(Инвойс) Тогда
				
			СтруктураПараметров.Вставить("InvoiceLineNo", НомерСтрокиИнвойса);
			СтруктураТекстов.Вставить("Дубли",
				"ВЫБРАТЬ
				|	InvoiceLines.Ссылка
				|ИЗ
				|	Справочник.СтрокиИнвойса КАК InvoiceLines
				|ГДЕ
				|	InvoiceLines.Ссылка <> &Ссылка
				|	И (НЕ InvoiceLines.ПометкаУдаления)
				|	И InvoiceLines.Инвойс = &Invoice
				|	И InvoiceLines.НомерСтрокиИнвойса = &InvoiceLineNo");
			
		ИначеЕсли ЗначениеЗаполнено(ExportRequest) Тогда
			
			Если ЗначениеЗаполнено(НомерСтрокиИнвойса) Тогда
				
				// Если номер товару уже присваивался - проверим на дубли
				СтруктураПараметров.Вставить("InvoiceLineNo", НомерСтрокиИнвойса);
				СтруктураТекстов.Вставить("Дубли",
					"ВЫБРАТЬ
					|	Items.Ссылка
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.Ссылка <> &Ссылка
					|	И (НЕ Items.ПометкаУдаления)
					|	И Items.ExportRequest = &ExportRequest
					|	И Items.НомерСтрокиИнвойса = &InvoiceLineNo");		
				
			Иначе
				
				// Если номер товару еще не присваивался - найдем максимальный в рамках данного реквеста
				СтруктураТекстов.Вставить("MaxItemNo",
					"ВЫБРАТЬ
					|	ЕСТЬNULL(МАКСИМУМ(Items.НомерСтрокиИнвойса), 0) КАК MaxItemNo
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.ExportRequest = &ExportRequest
					|	И (НЕ Items.ПометкаУдаления)");
				
			КонецЕсли;	
			
		ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
			
			Если ЗначениеЗаполнено(НомерСтрокиИнвойса) Тогда
				
				// Если номер товару уже присваивался - проверим на дубли
				СтруктураПараметров.Вставить("InvoiceLineNo", НомерСтрокиИнвойса);
				СтруктураТекстов.Вставить("Дубли",
					"ВЫБРАТЬ
					|	Items.Ссылка
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.Ссылка <> &Ссылка
					|	И НЕ Items.ПометкаУдаления
					|	И Items.TransportRequest = &TransportRequest
					|	И Items.НомерСтрокиИнвойса = &InvoiceLineNo");		
				
			Иначе
				
				// Если номер товару еще не присваивался - найдем максимальный в рамках данного реквеста
				СтруктураТекстов.Вставить("MaxItemNo",
					"ВЫБРАТЬ
					|	ЕСТЬNULL(МАКСИМУМ(Items.НомерСтрокиИнвойса), 0) КАК MaxItemNo
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.TransportRequest = &TransportRequest
					|	И НЕ Items.ПометкаУдаления");
				
			КонецЕсли;	
		КонецЕсли; 
		
		Если Final Тогда
		
			Если ЗначениеЗаполнено(СтрокаЗаявкиНаЗакупку) Тогда
					
				СтруктураПараметров.Вставить("POLine", СтрокаЗаявкиНаЗакупку);
				СтруктураТекстов.Вставить("РеквизитыPOLine",
					"ВЫБРАТЬ
					|	POLine.Владелец КАК PO,
					|	POLine.Владелец.Код КАК PONo,
					|	POLine.ПометкаУдаления КАК POLineПометкаУдаления,
					|	POLine.Владелец.ПометкаУдаления КАК POПометкаУдаления,
					|	POLine.Владелец.БОРГ.Компания КАК SoldTo,
					|	POLine.КодПоставщика КАК PartNo,
					|	POLine.Количество КАК Qty,
					|	POLine.ЕдиницаИзмерения КАК UOM,
					|	POLine.Валюта КАК Currency,
					|	POLine.Классификатор КАК ERPTreatment,
					|	POLine.КостЦентр КАК AU,
					|	POLine.АктивитиКод КАК Activity
					|ИЗ
					|	Справочник.СтрокиЗаявкиНаЗакупку КАК POLine
					|ГДЕ
					|	POLine.Ссылка = &POLine");
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовInvoice", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыInvoice") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовInvoice = СтруктураРезультатов.РеквизитыInvoice.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовInvoice.Следующий();
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовExportRequest", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыExportRequest") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest = СтруктураРезультатов.РеквизитыExportRequest.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовExportRequest.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовTransportRequest", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыTransportRequest") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest = СтруктураРезультатов.РеквизитыTransportRequest.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовTransportRequest.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаTransportRequestParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("TransportRequestParcels") Тогда
		ДополнительныеСвойства.ТаблицаTransportRequestParcels = СтруктураРезультатов.TransportRequestParcels.Выгрузить();
	КонецЕсли;
	
	// { RGS AGorlenko 26.11.2015 19:09:55 - отмена проверки из-за изменения в подсистеме обмена
	//ДополнительныеСвойства.Вставить("ВыборкаLeg7Parcels", Неопределено);
	//Если СтруктураРезультатов.Свойство("Leg7Parcels") Тогда
	//	ДополнительныеСвойства.ВыборкаLeg7Parcels = СтруктураРезультатов.Leg7Parcels.Выбрать();
	//КонецЕсли;
	// } RGS AGorlenko 26.11.2015 19:09:57 - отмена проверки из-за изменения в подсистеме обмена
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовPOLine", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыPOLine") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовPOLine = СтруктураРезультатов.РеквизитыPOLine.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовPOLine.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаДублей", Неопределено);
	Если СтруктураРезультатов.Свойство("Дубли") Тогда
		ДополнительныеСвойства.ВыборкаДублей = СтруктураРезультатов.Дубли.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаItemsСТакимЖеНаименованием", Неопределено);
	Если СтруктураРезультатов.Свойство("ItemsСТакимЖеНаименованием") Тогда
		ДополнительныеСвойства.ВыборкаItemsСТакимЖеНаименованием = СтруктураРезультатов.ItemsСТакимЖеНаименованием.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаMaxItemNo", Неопределено);
	Если СтруктураРезультатов.Свойство("MaxItemNo") Тогда
		ДополнительныеСвойства.ВыборкаMaxItemNo = СтруктураРезультатов.MaxItemNo.Выбрать();
		ДополнительныеСвойства.ВыборкаMaxItemNo.Следующий();
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовInvoice, ВыборкаРеквизитовExportRequest, 
	ВыборкаРеквизитовTransportRequest, ВыборкаMaxItemNo, ВыборкаРеквизитовPOLine)
	
	Если ЗначениеЗаполнено(Инвойс) Тогда
		
		ДозаполнитьImportРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовInvoice);
		
	ИначеЕсли ЗначениеЗаполнено(ExportRequest) Тогда
		
		ДозаполнитьExportРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовExportRequest, ВыборкаMaxItemNo);
		
	ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
		
		ДозаполнитьРеквизитыTransportRequestСДополнительнымиДанными(ВыборкаРеквизитовTransportRequest, ВыборкаMaxItemNo);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Код) Тогда
			УстановитьНовыйКод();
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Наименование) Тогда 
			Наименование = СокрЛП(Код);
		КонецЕсли;
		
	КонецЕсли;
	    
КонецПроцедуры 

Процедура ДозаполнитьРеквизитыPO(Отказ, ВыборкаРеквизитовPOLine)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыборкаРеквизитовPOLine <> Неопределено
		И (EUCNotRequired ИЛИ ЗначениеЗаполнено(EUCRequested) Или ЗначениеЗаполнено(EUCReceived)) Тогда 
		
		POОбъект = ВыборкаРеквизитовPOLine.PO.ПолучитьОбъект();
		РГСофтКлиентСервер.УстановитьЗначение(POОбъект.EUCNotRequired, EUCNotRequired);
		РГСофтКлиентСервер.УстановитьЗначение(POОбъект.EUCRequested, EUCRequested);
		РГСофтКлиентСервер.УстановитьЗначение(POОбъект.EUCReceived, EUCReceived);
		
		Если POОбъект.Модифицированность() Тогда 
			
			Попытка
				POОбъект.ОбменДанными.Загрузка = Истина;
				POОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to save EUC data for PO " + СокрЛП(POОбъект.Код),
					,,, Отказ);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура ДозаполнитьImportРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовInvoice)
	
	Наименование = Справочники.СтрокиИнвойса.ПолучитьНаименованиеImportItem(ВыборкаРеквизитовInvoice.Номер, НомерСтрокиИнвойса);
	
	SoldTo = ВыборкаРеквизитовInvoice.SoldTo;
	
	Currency = ВыборкаРеквизитовInvoice.Currency;
	
КонецПроцедуры

Процедура ДозаполнитьExportРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовExportRequest, ВыборкаMaxItemNo)
	
	Если НЕ ПометкаУдаления
		И НЕ ЗначениеЗаполнено(НомерСтрокиИнвойса) Тогда
		НомерСтрокиИнвойса = ВыборкаMaxItemNo.MaxItemNo + 1;
	КонецЕсли;
	
	Наименование = СокрЛП(ВыборкаРеквизитовExportRequest.Номер) + "-" + НомерСтрокиИнвойса;
	
	SoldTo = ВыборкаРеквизитовExportRequest.Company;
	
	КостЦентр = ВыборкаРеквизитовExportRequest.AU;
	
	Активити = ВыборкаРеквизитовExportRequest.Activity;
	
	PermanentTemporary = ВыборкаРеквизитовExportRequest.ExportMode;
	
	Если НЕ ЗначениеЗаполнено(Currency) Тогда
		Currency = РГСофт.НайтиСсылку("Справочник", "Валюты", "Код", "840");
	КонецЕсли;
    				
КонецПроцедуры

Процедура ДозаполнитьРеквизитыTransportRequestСДополнительнымиДанными(ВыборкаРеквизитовTransportRequest, ВыборкаMaxItemNo)
	
	Если НЕ ПометкаУдаления
		И НЕ ЗначениеЗаполнено(НомерСтрокиИнвойса) Тогда
		НомерСтрокиИнвойса = ВыборкаMaxItemNo.MaxItemNo + 1;
	КонецЕсли;
	
	Наименование = СокрЛП(ВыборкаРеквизитовTransportRequest.Номер) + "-" + НомерСтрокиИнвойса;
	
	SoldTo = ВыборкаРеквизитовTransportRequest.Company;
	
	КостЦентр = ВыборкаРеквизитовTransportRequest.CostCenter;

	Активити = ВыборкаРеквизитовTransportRequest.Activity;
	
	ProjectMobilization = ВыборкаРеквизитовTransportRequest.ProjectMobilization;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////

// { RGS AGorlenko 26.11.2015 19:10:29 - отмена проверки из-за изменения в подсистеме обмена
//Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовExportRequest, 
//	ВыборкаРеквизитовTransportRequest, ВыборкаLeg7Parcels)
Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовExportRequest, 
	ВыборкаРеквизитовTransportRequest)
// } RGS AGorlenko 26.11.2015 19:10:31 - отмена проверки из-за изменения в подсистеме обмена
	
	// По-хорошему, для того чтобы защищать от изменения, нужно смотреть не только текущие реквизиты, но и прошлые.
	// Но в форме они защищены от изменения, поэтому для простоты будем смотреть только текущие.
	// { RGS AGorlenko 26.11.2015 19:12:48 - отмена проверки из-за изменения в подсистеме обмена
	//Если ЗначениеЗаполнено(Инвойс) Тогда
	//	
	//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда 
	//		
	//		Если ВыборкаСтарыхРеквизитовШапки.Наименование <> Наименование Тогда 
	//			
	//			Если ВыборкаLeg7Parcels.Следующий() Тогда
	//				ТекстОшибки = "You can not change No. of Item '" + СокрЛП(ЭтотОбъект) + "' to '" + СокрЛП(Наименование) + "', because it is used in Leg7 exchange!";
	//				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//					ТекстОшибки,
	//					ЭтотОбъект,,, Отказ);
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ЗначениеЗаполнено(ExportRequest) Тогда
	Если ЗначениеЗаполнено(ExportRequest) Тогда
	// } RGS AGorlenko 26.11.2015 19:12:50 - отмена проверки из-за изменения в подсистеме обмена
		
		Если ВыборкаРеквизитовExportRequest.InternationalOBSentToTMS Тогда	
			
			ТекстОшибки = "You can not change ""Item " + СокрЛП(ЭтотОбъект) + """, because Int. OB sent to TMS for """ + ExportRequest + """!
				|For changing need to cancel Int. OB sent to TMS in Export request.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,,, Отказ);	
				
		ИначеЕсли CustomsСервер.ЭтоImportExportTracker() И ЗначениеЗаполнено(ВыборкаРеквизитовExportRequest.AcceptedBySpecialist) Тогда
			
			ТекстОшибки = "You can not change ""Item " + СокрЛП(ЭтотОбъект) + """, because """ + ExportRequest + """ is already accepted by export specialist!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,,, Отказ);
				
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
		
		Если ВыборкаРеквизитовTransportRequest.Проведен Тогда 
									
			МассивParcels = ДополнительныеСвойства.ТаблицаTransportRequestParcels.ВыгрузитьКолонку("Parcel");
			
			Отказ = Не Документы.TransportRequest.РазрешеноРедактироватьAcceptedTransportRequest(Ссылка, МассивParcels);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ПроверитьВозможностьИзмененияБрокером(Отказ);
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияБрокером(Отказ)
	
	Если НЕ CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
			
	Если ЭтоНовый() Тогда
		Сообщить("You are not allowed to create new Item!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты шапки
	
	СтруктураДоступныхДляИзмененияРеквизитов = Новый Структура("PermitsRequired, COORequired, TNVED");
	
	// в случае, если строка меняется в инвойсе, она сначала помечается на удаление, потом пометка удаления снимается
	// при этом final сначала сбрасывается, потом опять устанавливается
	Если ДополнительныеСвойства.Свойство("РазрешитьИзменениеFinalБрокером") Тогда
		СтруктураДоступныхДляИзмененияРеквизитов.Вставить("Final");
	КонецЕсли;
	
	ВыборкаСтарыхЗначенийРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
	МетаданныеДокумента = Метаданные();
	СтандартныеРеквизиты = МетаданныеДокумента.СтандартныеРеквизиты;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита = "Ссылка"
			ИЛИ ИмяРеквизита = "ИмяПредопределенныхДанных"
			ИЛИ ИмяРеквизита = "Предопределенный"
			ИЛИ ИмяРеквизита = "ПометкаУдаления" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхЗначенийРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change '" + Реквизит.Синоним + "'!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = МетаданныеДокумента.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если СтруктураДоступныхДляИзмененияРеквизитов.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
							
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхЗначенийРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change '" + Реквизит.Синоним + "'!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, ВыборкаРеквизитовInvoice, ВыборкаРеквизитовExportRequest, 
		  	ВыборкаРеквизитовTransportRequest, ВыборкаДублей, ВыборкаРеквизитовPOLine, ВыборкаItemsСТакимЖеНаименованием)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет дублей 
	
	Если ЗначениеЗаполнено(Инвойс) Тогда
				
		Если ВыборкаДублей.Следующий() Тогда
			ТекстОшибки = "There is already item no. " + НомерСтрокиИнвойса + " for '" + Инвойс + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "НомерСтрокиИнвойса", , Отказ);		
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ExportRequest) Тогда
		
		Если ВыборкаДублей <> Неопределено И ВыборкаДублей.Следующий() Тогда
			ТекстОшибки = "There is already item no. " + НомерСтрокиИнвойса + " for '" + ExportRequest + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "НомерСтрокиИнвойса", , Отказ);		
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(TransportRequest) Тогда
		
		Если ВыборкаДублей <> Неопределено И ВыборкаДублей.Следующий() Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Товар с таким номером " + НомерСтрокиИнвойса + " уже существует для '" + TransportRequest + "'!";
			иначе
				ТекстОшибки = "There is already item no. " + НомерСтрокиИнвойса + " for '" + TransportRequest + "'!";
			КонецЕсли;
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "НомерСтрокиИнвойса", , Отказ);		
		КонецЕсли;
		
	иначе
		
		Если ВыборкаItemsСТакимЖеНаименованием <> Неопределено Тогда
			
			Пока ВыборкаItemsСТакимЖеНаименованием.Следующий() Цикл
				ТекстОшибки = "Item no. '" + СокрЛП(Наименование) + "' is not unique!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Наименование", , Отказ);	
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ Final Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TransportRequest)
		И НЕ ЗначениеЗаполнено(ClientPO)Тогда

		Если НЕ ЗначениеЗаполнено(КостЦентр) Тогда
			ТекстОшибки = "'AU' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "КостЦентр", , Отказ);
		КонецЕсли;
	      
		Если НЕ ЗначениеЗаполнено(SoldTo) Тогда
			ТекстОшибки = "'Sold-to' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "SoldTo", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Currency) Тогда
			ТекстОшибки = "'Currency' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Currency", , Отказ);		
		КонецЕсли;
	
	КонецЕсли;
	
	// PSA.Segment vs AU.Segment
	// эта проверка есть и в документе Import invoice,
	// однако PSA может изменяться из DOC, Import shipment, а также для Export items,
	// поэтому здесь проверка дублируется
	Если ЗначениеЗаполнено(PSA) И ЗначениеЗаполнено(КостЦентр) Тогда
		
		PSASegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PSA, "Segment");
		Если ЗначениеЗаполнено(PSASegment) Тогда
			
			AUSegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(КостЦентр, "Segment");
			Если PSASegment <> AUSegment Тогда
				
				КлючДанных = ?(ЗначениеЗаполнено(Инвойс), Инвойс, ЭтотОбъект);
				ПутьКДанным = ?(ЗначениеЗаполнено(Инвойс), "ТЗСтрокИнвойса[" + (НомерСтрокиИнвойса-1) + "].PSA", "PSA"); 
				
				ТекстОшибки = "Item '" + СокрЛП(ЭтотОбъект) + "': Segment '" + СокрЛП(PSASegment) + "' of PSA contract differs from Segment '" + СокрЛП(AUSegment) + "' of AU!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					КлючДанных, ПутьКДанным, , Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//для товаров во временном ввозе обязательно должны быть заполнены серийники
	Если PermanentTemporary = Перечисления.PermanentTemporary.Temporary Тогда
		
		SerialNoCorrected = ВРег(СокрЛП(СерийныйНомер));
		Если НЕ ЗначениеЗаполнено(SerialNoCorrected)
			ИЛИ SerialNoCorrected = "N/A"
		   	ИЛИ SerialNoCorrected = "N\A"
			ИЛИ SerialNoCorrected = "NA" Тогда
			ТекстОшибки = "Item '" + СокрЛП(ЭтотОбъект) + "': S/N must be specified for temporary item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СерийныйНомер", , Отказ);
		КонецЕсли;
			
	КонецЕсли;

	Если ЗначениеЗаполнено(Инвойс) Тогда
		        				
		// Заполнение остальных реквизитов проверяется прямо в инвойсе
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаЗаявкиНаЗакупку) 
		И Не ЗначениеЗаполнено(TransportRequest) Тогда
		
		Если ВыборкаРеквизитовPOLine.POПометкаУдаления Тогда
			ТекстОшибки = "PO '" + СокрЛП(ВыборкаРеквизитовPOLine.PONo) + "' is marked for deletion!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку", , Отказ);	
		КонецЕсли; 
			
		Если ВРег(СокрЛП(ВыборкаРеквизитовPOLine.PONo)) <> ВРег(НомерЗаявкиНаЗакупку) Тогда 
			ТекстОшибки = "PO no. '" + СокрЛП(ВыборкаРеквизитовPOLine.PONo) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' differs from the PO no. '" + НомерЗаявкиНаЗакупку + " in the current Item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку", , Отказ);
		КонецЕсли;
			
		Если ВыборкаРеквизитовPOLine.POLineПометкаУдаления Тогда
			ТекстОшибки = "PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' is marked for deletion!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SoldTo)
			И ЗначениеЗаполнено(ВыборкаРеквизитовPOLine.SoldTo)
			И SoldTo <> ВыборкаРеквизитовPOLine.SoldTo Тогда
			
			ТекстОшибки = "Parent company '" + СокрЛП(ВыборкаРеквизитовPOLine.SoldTo) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' differs from Parent company '" + СокрЛП(SoldTo) + "' in the current Item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку",, Отказ);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодПоИнвойсу) И ВРег(СокрЛП(ВыборкаРеквизитовPOLine.PartNo)) <> ВРег(КодПоИнвойсу) Тогда
			ТекстОшибки = "Part no. '" + СокрЛП(ВыборкаРеквизитовPOLine.PartNo) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' differs from Part no. '" + КодПоИнвойсу + "' in the current Item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку",, Отказ);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ВыборкаРеквизитовPOLine.UOM <> ЕдиницаИзмерения Тогда
			ТекстОшибки = "UOM '" + СокрЛП(ВыборкаРеквизитовPOLine.UOM) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' differs from UOM '" + СокрЛП(ЕдиницаИзмерения) + "' in the current Item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "СтрокаЗаявкиНаЗакупку",, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Currency) И ВыборкаРеквизитовPOLine.Currency <> Currency Тогда
			ТекстОшибки = "Currency '" + СокрЛП(ВыборкаРеквизитовPOLine.Currency) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "' differs from Currency '" + СокрЛП(Currency) + "' in the current Item!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, "СтрокаЗаявкиНаЗакупку",, Отказ);	
		КонецЕсли; 
			
		Если ЗначениеЗаполнено(ВыборкаРеквизитовPOLine.ERPTreatment)
			И ЗначениеЗаполнено(Классификатор)
			И Классификатор <> ВыборкаРеквизитовPOLine.ERPTreatment Тогда
			
			ТекстОшибки = "ERP treatment '" + Классификатор + "' differs from ERP treatment '" + ВыборкаРеквизитовPOLine.ERPTreatment + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, "Классификатор",, Отказ);
			
		КонецЕсли; 
	
		Если ЗначениеЗаполнено(ВыборкаРеквизитовPOLine.AU)
			И ЗначениеЗаполнено(КостЦентр)
			И СокрЛП(КостЦентр) <> СокрЛП(ВыборкаРеквизитовPOLine.AU) Тогда
			
			ТекстОшибки = "AU '" + СокрЛП(КостЦентр) + "' differs from AU '" + СокрЛП(ВыборкаРеквизитовPOLine.AU) + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "КостЦентр",, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРеквизитовPOLine.Activity)
			И ЗначениеЗаполнено(Активити)
			И ВРег(СокрЛП(Активити)) <> ВРег(СокрЛП(ВыборкаРеквизитовPOLine.Activity)) Тогда	
			
			ТекстОшибки = "Activity '" + Активити + "' differs from Activity '" + ВыборкаРеквизитовPOLine.Activity + "' in the PO line '" + СокрЛП(СтрокаЗаявкиНаЗакупку) + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Активити",, Отказ);	
				
		КонецЕсли;
		
	КонецЕсли;
					
	Если ЗначениеЗаполнено(ExportRequest) Тогда
		
		Справочники.СтрокиИнвойса.ПроверитьExportItem(Отказ, ЭтотОбъект, ExportRequest, ВыборкаРеквизитовExportRequest, ЭтотОбъект);
				
	Иначе
		
		Если Не ЗначениеЗаполнено(TransportRequest) Тогда 
			
			Если ЗначениеЗаполнено(Классификатор) Тогда
			
				ERPTreatmentsWithoutActivity = ImportExportСервер.ПолучитьМассивERPTreatmentsWithoutActivity();
				Если ERPTreatmentsWithoutActivity.Найти(Классификатор) = Неопределено
					И НЕ ЗначениеЗаполнено(Активити) Тогда
					ТекстОшибки = "For ERP treatment '" + СокрЛП(Классификатор) + "' ""Activity"" can not be empty!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, "Активити", , Отказ);
				КонецЕсли;
			
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(КостЦентр) Тогда
				
				AUКод = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(КостЦентр, "Код");
				Если ВРег(СокрЛП(AUКод)) = "DUMMY" Тогда
					ТекстОшибки = "AU 'DUMMY' is not allowed!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, "КостЦентр", , Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// { RGS MYurkevich 08.05.2015 15:24:01 - ошибка при обмене
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// } RGS MYurkevich 08.05.2015 15:24:07 - ошибка при обмене
	ДозаполнитьРеквизитыPO(Отказ, ДополнительныеСвойства.ВыборкаРеквизитовPOLine);
	
КонецПроцедуры

// { RGS VShamin 25.08.2015 12:11:04 - элементы leg6
Процедура ПроверитьДоступностьИзмененияЭлементовLeg6(Отказ)

	Если РольДоступна("РедактированиеНеДоступныхПолейLeg6") ИЛИ ЭтоНовый()
		ИЛИ ЭтотОбъект.ДополнительныеСвойства.Свойство("Leg7ReportLoading")
		ИЛИ CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.CCA КАК CCA
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel В
	|			(ВЫБРАТЬ
	|				ParcelsДетали.Ссылка
	|			ИЗ
	|				Справочник.Parcels.Детали КАК ParcelsДетали
	|			ГДЕ
	|				ParcelsДетали.СтрокаИнвойса = &СтрокаИнвойса)
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СтрокаИнвойса", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ИспользуетсяLeg6Report = ПланыОбмена.Leg7.ПолучитьИспользованиеLeg6ReportДляCCA(Выборка.CCA);
		
		//Если ИспользуетсяLeg6Report Тогда
		//	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TNVED", "Доступность", Ложь);
		//КонецЕсли;
		
		Если ИспользуетсяLeg6Report И Ссылка.TNVED <> TNVED Тогда
			
			Сообщить("TVNED isn't available to editing for CCA: """ + Выборка.CCA + """");
			Отказ = Истина;
			
		ИначеЕсли ИспользуетсяLeg6Report И Ссылка.PermitsRequired <> PermitsRequired Тогда
			
			Сообщить("Permits required isn't available to editing for CCA: """ + Выборка.CCA + """");
			Отказ = Истина;
			
		ИначеЕсли ИспользуетсяLeg6Report И Ссылка.COORequired <> COORequired Тогда
			
			Сообщить("COO required required isn't available to editing for CCA: """ + Выборка.CCA + """");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // } RGS VShamin 25.08.2015 12:11:04 - элементы leg6

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//	
//	// Если Invoice не заполнен - тогда мы не можем определить DOC, а значит не можем определить и CCA, выходим
//	Если НЕ ЗначениеЗаполнено(Инвойс) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если ни один реквизит не изменился - значит ничего регистрировать не надо - выходим
//	СтруктураСтарыхРеквизитовШапки = СформироватьСтруктуруСтарыхРеквизитовШапки(ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);	
//	Если ПометкаУдаления = СтруктураСтарыхРеквизитовШапки.ПометкаУдаления
//		И Инвойс = СтруктураСтарыхРеквизитовШапки.Invoice
//		И НомерЗаявкиНаЗакупку = СтруктураСтарыхРеквизитовШапки.PONo
//		И НаименованиеТовара = СтруктураСтарыхРеквизитовШапки.Description Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	// Определим CCA из DOC
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Invoice", Инвойс);
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	DOCInvoices.Ссылка.CCA КАК CCA
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
//		|ГДЕ
//		|	DOCInvoices.Инвойс = &Invoice
//		|	И (НЕ DOCInvoices.Ссылка.Отменен)
//		|	И DOCInvoices.Ссылка.Requested <> ДАТАВРЕМЯ(1, 1, 1)";
//		
//	Результат = Запрос.Выполнить();
//	
//	// Если DOC найти не удалось - выходим
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ВыборкаРеквизитовDOC = Результат.Выбрать();
//	ВыборкаРеквизитовDOC.Следующий();
//	
//	// Если в DOC не заполнен CCA - выходим
//	Если НЕ ЗначениеЗаполнено(ВыборкаРеквизитовDOC.CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим ссылку на Agent NEK
//	NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если эта строка не относится к NEK - тогда ничего делать не нужно, выходим
//	Если ВыборкаРеквизитовDOC.CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если мы дошли до этой строки - значит изменились реквизиты и эта строка относится к DOC с CCA = NEK - регистрируем для обмена
//	CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//	
//КонецПроцедуры

//Функция СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки)
//	
//	СтруктураСтарыхРеквизитовШапки = Новый Структура;
//	СтруктураСтарыхРеквизитовШапки.Вставить("ПометкаУдаления", Ложь);
//	СтруктураСтарыхРеквизитовШапки.Вставить("Invoice", Документы.Инвойс.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("PONo", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("Description", "");
//		
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
//		ЗаполнитьЗначенияСвойств(СтруктураСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовШапки);
//	КонецЕсли;
//	
//	Возврат СтруктураСтарыхРеквизитовШапки;
//	
//КонецФункции

Функция rgsПолучитьКоличествоВерсий(DOC)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(DOCVersions.DOC) КАК DOC
	               |ИЗ
	               |	РегистрСведений.DOCVersions КАК DOCVersions
	               |ГДЕ
	               |	DOCVersions.DOC = &DOC";	
	Запрос.УстановитьПараметр("DOC", DOC);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат[0].DOC;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//	
//	// Если Invoice не заполнен - тогда мы не можем определить DOC, а значит не можем определить и CCA, выходим
//	Если НЕ ЗначениеЗаполнено(Инвойс) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если ни один реквизит не изменился - значит ничего регистрировать не надо - выходим
//	СтруктураСтарыхРеквизитовШапки = СформироватьСтруктуруСтарыхРеквизитовШапки(ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);	
//	Если ПометкаУдаления = СтруктураСтарыхРеквизитовШапки.ПометкаУдаления
//		И Инвойс = СтруктураСтарыхРеквизитовШапки.Invoice
//		И НомерЗаявкиНаЗакупку = СтруктураСтарыхРеквизитовШапки.PONo
//		И НаименованиеТовара = СтруктураСтарыхРеквизитовШапки.Description Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	// Определим CCA из DOC
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Invoice", Инвойс);
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	DOCInvoices.Ссылка.CCA КАК CCA
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
//		|ГДЕ
//		|	DOCInvoices.Инвойс = &Invoice
//		|	И (НЕ DOCInvoices.Ссылка.Отменен)
//		|	И DOCInvoices.Ссылка.Requested <> ДАТАВРЕМЯ(1, 1, 1)";
//		
//	Результат = Запрос.Выполнить();
//	
//	// Если DOC найти не удалось - выходим
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ВыборкаРеквизитовDOC = Результат.Выбрать();
//	ВыборкаРеквизитовDOC.Следующий();
//	
//	// Если в DOC не заполнен CCA - выходим
//	Если НЕ ЗначениеЗаполнено(ВыборкаРеквизитовDOC.CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим ссылку на Agent NEK
//	NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если эта строка не относится к NEK - тогда ничего делать не нужно, выходим
//	Если ВыборкаРеквизитовDOC.CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если мы дошли до этой строки - значит изменились реквизиты и эта строка относится к DOC с CCA = NEK - регистрируем для обмена
//	CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//	
//КонецПроцедуры

//Функция СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки)
//	
//	СтруктураСтарыхРеквизитовШапки = Новый Структура;
//	СтруктураСтарыхРеквизитовШапки.Вставить("ПометкаУдаления", Ложь);
//	СтруктураСтарыхРеквизитовШапки.Вставить("Invoice", Документы.Инвойс.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("PONo", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("Description", "");
//		
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
//		ЗаполнитьЗначенияСвойств(СтруктураСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовШапки);
//	КонецЕсли;
//	
//	Возврат СтруктураСтарыхРеквизитовШапки;
//	
//КонецФункции


// { RGS DKazanskiy 03.08.2018 16:10:06 - S-I-0005748
Процедура ПроверитьВерсию()
	
	// имеет смысл только если добавляется новый инвойс
	Если НЕ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ExportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ExportRequest.CCA,
	|	ExportRequest.CCAGLRequested,
	|	ExportRequest.POD,
	|	ExportRequest.InternationalMOT как MOT
	|ИЗ
	|	Документ.ExportRequest КАК ExportRequest
	|ГДЕ
	|	ExportRequest.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ExportRequest);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		НачатьТранзакцию();
		
		Попытка
			РегистрыСведений.ERVersions.СоздатьВерсию(ExportRequest,
													  Результат.MOT, 
													  Результат.CCA, 
													  Результат.POD,
													  Результат.CCAGLRequested, 
													  Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
																										 
		Документы.ExportRequest.УстановитьДатыВерсии(ExportRequest, Дата("01.01.0001 00:00:00"));												  
												  
	КонецЕсли;
		
КонецПроцедуры
// } RGS DKazanskiy 03.08.2018 16:10:08 - S-I-0005748 
