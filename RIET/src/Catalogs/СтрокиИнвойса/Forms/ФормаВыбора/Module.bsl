
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураНастройки") Тогда
		
		СтруктураНастройки = Параметры.СтруктураНастройки;
		Если СтруктураНастройки.Имя = "ВыборИзParcelLine" Тогда
			НастроитьДляВыбораИзParcelLine(СтруктураНастройки);
		ИначеЕсли СтруктураНастройки.Имя = "ВыборИзInvoiceLinesСlassification" Тогда
			НастроитьДляВыбораИзInvoiceLinesСlassification(СтруктураНастройки);
		ИначеЕсли СтруктураНастройки.Имя = "ВыборИзService" Тогда
			НастроитьДляВыбораИзService(Отказ, СтруктураНастройки);
		ИначеЕсли СтруктураНастройки.Имя = "ВыборИзManualItem" Тогда
			НастроитьДляВыбораИзManualItem(СтруктураНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли; 
	
	// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	Если Параметры.Свойство("СписокДляОтбора") Тогда
		НастроитьСписокСОтбором(Параметры.СписокДляОтбора);
	КонецЕсли;	
	// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	
	Элементы.НадписьYouCanSelectMultiple.Видимость = Параметры.Свойство("МножественныйВыбор") И Параметры.МножественныйВыбор = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДляВыбораИзParcelLine(СтруктураНастройки)
	
	СтруктураОтбора = Параметры.Отбор;
	
	Если СтруктураНастройки.LocalOnly Тогда
						
		Если ЗначениеЗаполнено(СтруктураНастройки.TransportRequest) Тогда
			// Настроим видимость колонок
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Наименование", "Видимость", Ложь);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "СтрокаЗаявкиНаЗакупку", "Видимость", Ложь);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "SoldTo", "Видимость", Ложь);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "КостЦентр", "Видимость", Ложь);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Активити", "Видимость", Ложь);
		    РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "НомерВходящейДекларации", "Видимость", Ложь);
			
			СтруктураОтбора.Вставить("TransportRequest", СтруктураНастройки.TransportRequest);
			
		Иначе 
			
			СтруктураОтбора.Вставить("Инвойс", Документы.Инвойс.ПустаяСсылка());
			СтруктураОтбора.Вставить("ExportRequest", Документы.ExportRequest.ПустаяСсылка());
			СтруктураОтбора.Вставить("TransportRequest", Документы.TransportRequest.ПустаяСсылка());
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастройки.ExportRequest) Тогда
		
		// Настроим видимость колонок
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Наименование", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "СтрокаЗаявкиНаЗакупку", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "SoldTo", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "КостЦентр", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Классификатор", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Активити", "Видимость", Ложь);
		
		СтруктураОтбора.Вставить("ExportRequest", СтруктураНастройки.ExportRequest);
		СтруктураОтбора.Вставить("TransportRequest", Документы.TransportRequest.ПустаяСсылка());
		
	Иначе
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Код", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "RAN", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "НомерВходящейДекларации", "Видимость", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "SoldTo", "Видимость", Ложь);
		СтруктураОтбора.Вставить("TransportRequest", Документы.TransportRequest.ПустаяСсылка());
		
		DONo = СтруктураНастройки.DONo;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Инвойс.НомерЗаявкиНаДоставку",
			СокрЛП(DONo),
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Инвойс.Отменен",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
		
	КонецЕсли; 
	
	СтруктураParcelLine = Неопределено;
	Если СтруктураНастройки.Свойство("СтруктураParcelLine") Тогда
		
		СтруктураParcelLine = СтруктураНастройки.СтруктураParcelLine;
		
		Если НЕ ЗначениеЗаполнено(СтруктураНастройки.ExportRequest) 
			И НЕ ЗначениеЗаполнено(СтруктураНастройки.TransportRequest) Тогда
			
			PONo = СокрЛП(СтруктураParcelLine.НомерЗаявкиНаЗакупку);
			Если ЗначениеЗаполнено(PONo) Тогда
				СтруктураОтбора.Вставить("НомерЗаявкиНаЗакупку", PONo);	
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтруктураParcelLine.СтрокаЗаявкиНаЗакупку) Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					Список.Отбор,
					"СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку",
					СтруктураParcelLine.СтрокаЗаявкиНаЗакупку,
					ВидСравненияКомпоновкиДанных.Равно,
					,
					Истина);
					
			КонецЕсли; 
		
			Receiver = СокрЛП(СтруктураParcelLine.Receiver);
			Если ЗначениеЗаполнено(Receiver) Тогда
				СтруктураОтбора.Вставить("ImportReference", Receiver);	
			КонецЕсли; 
			
		КонецЕсли;	
			
		SerialNo = СокрЛП(СтруктураParcelLine.СерийныйНомер);
		Если ЗначениеЗаполнено(SerialNo) Тогда	
			СтруктураОтбора.Вставить("СерийныйНомер", SerialNo);	
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтруктураParcelLine.Qty) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор,
				"Количество",
				СтруктураParcelLine.Qty,
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				,
				Истина);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтруктураParcelLine.QtyUOM) Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтруктураParcelLine.QtyUOM);
		КонецЕсли;
		
	КонецЕсли;                                                                     
	
	ТаблицаДанныхInvoiceLines = Справочники.Parcels.ПолучитьТаблицуInvoiceLinesПодходящихДляParcelLine(СтруктураНастройки.DONo, 
		СтруктураНастройки.LocalOnly, СтруктураНастройки.ExportRequest, СтруктураНастройки.TransportRequest,
		СтруктураНастройки.CurrentParcel, СтруктураНастройки.СоответствиеInvoiceLinesИQty, СтруктураParcelLine);
	МассивInvoiceLines = ТаблицаДанныхInvoiceLines.ВыгрузитьКолонку("InvoiceLine");
	СтруктураОтбора.Вставить("Ссылка", МассивInvoiceLines);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДляВыбораИзInvoiceLinesСlassification(СтруктураНастройки)
	
	СтруктураОтбора = Параметры.Отбор;
	МассивСтрокИнвойсов = Документы.Поставка.ПолучитьМассивСтрокИнвойсовПоставки(СтруктураНастройки.InvoiceLinesMatching.Поставка);
	СтруктураОтбора.Вставить("Ссылка", МассивСтрокИнвойсов);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДляВыбораИзService(Отказ, СтруктураНастройки)
	
	ТипЗнчDocumentBase = ТипЗнч(СтруктураНастройки.DocumentBase);
	Если ТипЗнчDocumentBase = Тип("ДокументСсылка.CustomsFilesLight") Тогда
		
		Shipment = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураНастройки.DocumentBase, "Shipment");
		Если НЕ ЗначениеЗаполнено(Shipment) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"У """ + СтруктураНастройки.DocumentBase + """ не заполнено поле ""Shipment""!",
				, , , Отказ);
			Возврат;
		КонецЕсли;
		
		МассивShipmentGoods = Документы.Поставка.ПолучитьМассивСтрокИнвойсовПоставки(Shipment);
		
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.Поставка") Тогда
		
		МассивShipmentGoods = Документы.Поставка.ПолучитьМассивСтрокИнвойсовПоставки(СтруктураНастройки.DocumentBase);
		
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.ExportShipment") Тогда
		
		МассивShipmentGoods = Документы.ExportShipment.ПолучитьItemsOfExportShipment(СтруктураНастройки.DocumentBase);
		
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		МассивShipmentGoods = Документы.TemporaryImpExpTransactions.ПолучитьItemsOfTemporaryImpExpTransactions(СтруктураНастройки.DocumentBase);
		
	КонецЕсли;
	
	МассивДоступныхGoods = РГСофтКлиентСервер.ВычестьМассивы(МассивShipmentGoods, СтруктураНастройки.МассивТекущихInvoiceLines);
	
	СтруктураОтбора = Параметры.Отбор;
	СтруктураОтбора.Вставить("Ссылка", МассивДоступныхGoods);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	МассивНайденныхОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.Отбор,
		"Ссылка");
		
	Если МассивНайденныхОтборов.Количество() Тогда
		
		ОтборПоСсылке = МассивНайденныхОтборов[0];
		Если ТипЗнч(ОтборПоСсылке.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
			СтароеЗначение = ОтборПоСсылке.ПравоеЗначение;
			ОтборПоСсылке.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборПоСсылке.ПравоеЗначение = Новый СписокЗначений;
			ОтборПоСсылке.ПравоеЗначение.Добавить(СтароеЗначение);
		КонецЕсли; 
		
		ОтборПоСсылке.ПравоеЗначение.Добавить(НовыйОбъект);
		
	КонецЕсли; 	

КонецПроцедуры

&НаСервере
Процедура НастроитьДляВыбораИзManualItem(СтруктураНастройки)
	
	СтруктураОтбора = Параметры.Отбор;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"КодПоИнвойсу",
		СтруктураНастройки.КодПоИнвойсу,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);

	Если ЗначениеЗаполнено(СтруктураНастройки.POLine) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"СтрокаЗаявкиНаЗакупку",
		СтруктураНастройки.POLine,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	КонецЕсли; 
	
	Если СтруктураНастройки.свойство("ProjectMobilization") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"ProjectMobilization",
		СтруктураНастройки.ProjectMobilization,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	Список.Отбор,
	"TransportRequest",
	,
	?(СтруктураНастройки.DomesticInternational = Перечисления.DomesticInternational.Domestic, 
	ВидСравненияКомпоновкиДанных.Заполнено, ВидСравненияКомпоновкиДанных.НеЗаполнено),
	,
	Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастройки.POLine) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"СтрокаЗаявкиНаЗакупку",
		СтруктураНастройки.POLine,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	КонецЕсли; 

	Если СтруктураНастройки.свойство("PickUpWarehouse") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"TransportRequest.PickUpWarehouse",
		СтруктураНастройки.PickUpWarehouse,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	КонецЕсли;

	Если СтруктураНастройки.свойство("DeliverTo") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"TransportRequest.DeliverTo",
		СтруктураНастройки.DeliverTo,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	КонецЕсли;

КонецПроцедуры

// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
&НаСервере
Процедура НастроитьСписокСОтбором(МассивНомеров)
	
	СписокКодовItems = Новый СписокЗначений;
	СписокКодовItems.ЗагрузитьЗначения(МассивНомеров);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Код", СписокКодовItems, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
КонецПроцедуры
// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710

