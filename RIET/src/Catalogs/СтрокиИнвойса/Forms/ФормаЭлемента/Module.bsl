
////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Функция ПолучитьСоответствиеBPN(ВыбранноеЗначение)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	rgsBPNSPNMappingData.BPN
		|ИЗ
		|	РегистрСведений.rgsBPNSPNMappingData КАК rgsBPNSPNMappingData
		|ГДЕ
		|	rgsBPNSPNMappingData.SPN = &SPN";
	
	Запрос.УстановитьПараметр("SPN", ВыбранноеЗначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.BPN;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьКеш();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДозаполнитьРеквизитыНовогоОбъекта();
	КонецЕсли;
		
	ExportToTMS = Документы.ExportRequest.ПолучитьExportToTMSПоExportRequest(Объект.ExportRequest);
	
	НастроитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКеш()
	
	Если ЗначениеЗаполнено(Объект.ExportRequest) Тогда
		Country = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ExportRequest, "FromCountry");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьРеквизитыНовогоОбъекта()
	
	Если Параметры.Свойство("CopyAsLocal") Тогда
		Если Параметры.CopyAsLocal Тогда
			Объект.Инвойс = Документы.Инвойс.ПустаяСсылка();
			Объект.LocalOnly = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Сразу поставим галочку Final, чтобы при записи прошли все проверки
	Объект.Final = Истина;
	
	// Для экспорта суммы указываются в долларах
	Если ЗначениеЗаполнено(Объект.ExportRequest)
		И НЕ ЗначениеЗаполнено(Объект.Currency) Тогда
		Объект.Currency = Справочники.Валюты.НайтиПоКоду("840");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.WeightUOM) Тогда
		Объект.WeightUOM = Справочники.UOMs.KG;
	КонецЕсли;
	
	Параметры.Свойство("Режим", Режим);
	Если Режим = "СозданиеИзTemporaryImportTransaction" Тогда
		
		Объект.PermanentTemporary = Перечисления.PermanentTemporary.Temporary;
		
		// Добавим в параметры выбора Parent company отбор по Country
		ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Параметры.ProcessLevel, "Country");
		
		// Скопируем существующие параметры
		МассивПараметровВыбораParentCompany = Новый Массив;
		Для Каждого СуществующийПараметр Из Элементы.SoldTo.ПараметрыВыбора Цикл
			МассивПараметровВыбораParentCompany.Добавить(СуществующийПараметр);
		КонецЦикла;
		
		// Добавим новый параметр
		ПараметрВыбораCountry = Новый ПараметрВыбора("Отбор.Country", ProcessLevelCountry);
		МассивПараметровВыбораParentCompany.Добавить(ПараметрВыбораCountry);
		
		Элементы.SoldTo.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораParentCompany);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыУправления()
	
	// Настроим видимость
	Если ЗначениеЗаполнено(Объект.Инвойс) Тогда
		
		ТолькоПросмотр = Истина;
				
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ExportRequest", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Final", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "НадписьPOInvoiceDOC", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "RAN", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Shortage", "Видимость", Истина);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ГруппаEUCSanctions", "Видимость", Истина);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "EUCRequested", "Видимость", Не Объект.EUCNotRequired);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "EUCReceived", "Видимость", Не Объект.EUCNotRequired);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GuaranteeLetter", "Видимость", Истина);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "MOC", "Видимость", (Объект.GuaranteeLetter = Перечисления.YesNo.Yes));
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ConfirmationOfCargoLatestDate", "Видимость", (Объект.GuaranteeLetter = Перечисления.YesNo.Yes));
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CustomsBSReceiptDate", "Видимость", (Объект.GuaranteeLetter = Перечисления.YesNo.Yes));
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ImportReference", "Видимость", Ложь);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ExportRequest) Тогда 
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Invoice", "Видимость", Ложь);
				
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "SoldTo", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "КостЦентр", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Активити", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermanentTemporary", "Видимость", Ложь);
		
		// { RGS DKazanskiy 10.10.2018 15:17:34 - S-I-0005759
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequired", "Видимость", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "IPLetterRequired", "Видимость", Истина);
		// } RGS DKazanskiy 10.10.2018 15:17:48 - S-I-0005759		
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GuaranteeLetter", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "MOC", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ConfirmationOfCargoLatestDate", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CustomsBSReceiptDate", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "COORequired", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ГруппаFillFromCatalog", "Видимость", Истина);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "SCNo", "Видимость", Ложь);
		
		// { RGS EParshina EParshina 13.11.2018 16:12:00 - S-I-0005711
		СегментER  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ExportRequest, "Segment");
		Если ЗначениеЗаполнено(СегментER) И (СегментER = Справочники.Сегменты.НайтиПоКоду("WSV") ИЛИ СегментER.ПринадлежитЭлементу(Справочники.Сегменты.НайтиПоКоду("WSV"))) Тогда
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "BPN", "АвтоОтметкаНезаполненного", Истина);
		КонецЕсли;
		// } RGS EParshina EParshina 13.11.2018 16:12:00 - S-I-0005711
				
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Invoice", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "НомерСтрокиИнвойса", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ExportRequest", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "RAN", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PSA", "Видимость", Ложь);
		
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequired", "Видимость", Ложь);
		
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GuaranteeLetter", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "MOC", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ConfirmationOfCargoLatestDate", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CustomsBSReceiptDate", "Видимость", Ложь);

		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "COORequired", "Видимость", Ложь);
		
	КонецЕсли;
	
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Наименование", "Видимость", Объект.LocalOnly);
	
	// { RGS AGorlenko 07.05.2014 17:02:10 - убираем префиксы
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Prefix", "Видимость", Объект.LocalOnly);
	// } RGS AGorlenko 07.05.2014 17:02:16 - убираем префиксы
	            	
	// Настроим параметры выбора
	Если ExportToTMS Тогда
		
		ПараметрВыбораInTMS = Новый ПараметрВыбора("Отбор.InTMS", Истина);
		
		РГСофт.ДобавитьПараметрВыбора(Элементы.ЕдиницаИзмерения, ПараметрВыбораInTMS);
		
		РГСофт.ДобавитьПараметрВыбора(Элементы.WeightUOM, ПараметрВыбораInTMS);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтранаПроисхождения) Тогда
		Объект.СтранаПроисхождения = Справочники.CountriesHUBs.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Fill from catalog

&НаКлиенте
Процедура FillFromCatalog(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Каталог) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Catalog / Каталог'!";
		иначе
			ТекстОшибки = "'Catalog' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "Каталог", "Объект");
		Возврат;
	КонецЕсли;

	СтруктураРеквизитовКаталога = ПолучитьСтруктуруРеквизитовКаталога(Объект.Каталог);
	
	Если ЗначениеЗаполнено(Объект.КодПоИнвойсу) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеТовара)
		ИЛИ ЗначениеЗаполнено(Объект.DescriptionRus) Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеПоКаталогу", ЭтаФорма, СтруктураРеквизитовКаталога);
		ПоказатьВопрос(Оповещение, "Перезаполнить поля по каталогу?", РежимДиалогаВопрос.ДаНет,,, "Заполнение по каталогу");
	иначе
		ЗаполненитьПоКаталогу(СтруктураРеквизитовКаталога);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеПоКаталогу(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    ЗаполненитьПоКаталогу(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненитьПоКаталогу(СтруктураРеквизитовКаталога) Экспорт
	
	Объект.КодПоИнвойсу = СтруктураРеквизитовКаталога.PartNo;
	Объект.DescriptionRus = СтруктураРеквизитовКаталога.DescriptionRus;
	Объект.НаименованиеТовара = СтруктураРеквизитовКаталога.DescriptionEng;
	Объект.TNVED = СтруктураРеквизитовКаталога.TNVED;
	Объект.NetWeight = СтруктураРеквизитовКаталога.NetWeight;
	Объект.WeightUOM = ПредопределенноеЗначение("Справочник.UOMs.KG");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРеквизитовКаталога(Catalog)
	
	Возврат Справочники.СтрокиИнвойса.ПолучитьСтруктуруРеквизитовКаталога(Catalog);
	
КонецФункции   

////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	
	// { RGS EParshina EParshina 13.11.2018 16:12:00 - S-I-0005711
	Если ЗначениеЗаполнено(Объект.ExportRequest) Тогда		
		СегментER  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ExportRequest, "Segment");
		Если ЗначениеЗаполнено(СегментER) И (СегментER = Справочники.Сегменты.НайтиПоКоду("WSV") ИЛИ СегментER.ПринадлежитЭлементу(Справочники.Сегменты.НайтиПоКоду("WSV"))) И Не ЗначениеЗаполнено(Объект.BPN) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Невозможно записать Item в сегменте WSV без BPN'; en = 'Невозможно записать Item в сегменте WSV без BPN'");
			Сообщение.Поле = "Объект.BPN";
			Сообщение.Сообщить();		
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	// } RGS EParshina EParshina 13.11.2018 16:12:00 - S-I-0005711
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.GoodsИнтерактивнаяЗапись, Объект.Ссылка);
	
КонецПроцедуры


// RGS EParshina 10.09.2018 12:03:49
&НаСервере
Функция КодПоИнвойсу(Текст)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	rgsBPNSPNMappingData.SPN,
		|	rgsBPNSPNMappingData.SuppllerPartDescription
		|ИЗ
		|	РегистрСведений.rgsBPNSPNMappingData КАК rgsBPNSPNMappingData
		|ГДЕ
		|	rgsBPNSPNMappingData.SPN ПОДОБНО &SPN";
	
	Запрос.УстановитьПараметр("SPN", Текст+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокВозврата = Новый СписокЗначений;
	НомерСтроки = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НомерСтроки = 15 Тогда
			СписокВозврата.Добавить("", "...");
			Прервать;
		Иначе
			СписокВозврата.Добавить(ВыборкаДетальныеЗаписи.SPN, ВыборкаДетальныеЗаписи.SPN + "("+ВыборкаДетальныеЗаписи.SuppllerPartDescription+")");
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Режим = "СозданиеИзTemporaryImportTransaction" Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
	// { RGS DKazanskiy 08.08.2018 17:18:51 - S-I-0005748
	Если НЕ Объект.ExportRequest.Пустая() Тогда 
		Оповестить("ИзменениеСтрокиИнвойса", Объект.ExportRequest);
	КонецЕсли;
	// } RGS DKazanskiy 08.08.2018 17:19:16 - S-I-0005748
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТЫ УПРАВЛЕНИЯ

&НаКлиенте
Процедура НомерЗаявкиНаЗакупкуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CustomsКлиент.ОткрытьPOПоНомеру(СокрЛП(Объект.НомерЗаявкиНаЗакупку), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	Объект.Сумма = Объект.Количество * Объект.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	Объект.Сумма = Объект.Количество * Объект.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗаявкиНаЗакупкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерЗаявкиНаЗакупку) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'PO no.' is empty!",
			, "НомерЗаявкиНаЗакупку", "Объект", Отказ);
	КонецЕсли;

	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзGood");
		
	PONo = СокрЛП(Объект.НомерЗаявкиНаЗакупку);
	СтруктураНастройки.Вставить("PONo", PONo);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);			
	ОткрытьФорму("Справочник.СтрокиЗаявкиНаЗакупку.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	Объект.НомерЗаявкиНаЗакупку = ВРег(СокрЛП(Объект.НомерЗаявкиНаЗакупку));
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	ImportExportКлиентСервер.ПерезаполнитьInvoiceLineПоPOLineПриНеобходимости(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(объект.СтранаПроисхождения) = Тип("Строка") Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("InTMS", ExportToTMS);
				
		ОткрытьФорму("Справочник.CountriesHUBs.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура LocalOnlyПриИзменении(Элемент)
	
	НастроитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура CopyAsLocal(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", Объект.Ссылка);
	ПараметрыФормы.Вставить("CopyAsLocal", Истина);
	ОткрытьФорму("Справочник.СтрокиИнвойса.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура КостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", ПолучитьДатуИнвойса(Объект.Инвойс));
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", ПолучитьДатуИнвойса(Объект.Инвойс));
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", ПолучитьДатуИнвойса(Объект.Инвойс));
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуИнвойса(Инвойс)
	
	Возврат Инвойс.Дата;	
	
КонецФункции

//<- RG-Soft VIvanov 2015/02/18


&НаКлиенте
Процедура КодПоИнвойсуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = КодПоИнвойсу(Текст);
		Объект.КодПоИнвойсу = Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПоИнвойсуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.КодПоИнвойсу = ВыбранноеЗначение.SPN;
		Объект.BPN = ВыбранноеЗначение.BPN;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВыбранноеЗначение = "" Тогда
		СтандартнаяОбработка = Ложь;
		КодПоИнвойсуНачалоВыбора(Элемент, Неопределено, СтандартнаяОбработка)
	Иначе
		Объект.КодПоИнвойсу = ВыбранноеЗначение;
		Объект.BPN = ПолучитьСоответствиеBPN(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПоИнвойсуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("ТекстОтбора, BPN", Объект.КодПоИнвойсу, Объект.BPN);
	ОткрытьФорму("РегистрСведений.rgsBPNSPNMappingData.Форма.ФормаВыбораBPN",ПараметрыОтбора,Элементы.КодПоИнвойсу);
КонецПроцедуры

&НаКлиенте
Процедура КодПоИнвойсуИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)	
КонецПроцедуры

&НаКлиенте
Процедура КодПоИнвойсуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст ="" Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
КонецПроцедуры

&НаКлиенте
Процедура BPNПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.КодПоИнвойсу) И ЗначениеЗаполнено(Объект.BPN) Тогда
		КодПоИнвойсуНачалоВыбора(Элементы.КодПоИнвойсу, Неопределено, Ложь);
	КонецЕсли;
КонецПроцедуры
