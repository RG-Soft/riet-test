
&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			Заголовок = Объект.Наименование;
		Иначе
			// Добавление элемента.
			Объект.Наименование = "Сканированный документ";
			Заголовок = "Сканированный документ (создание)";
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация)Тогда
				Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
					Объект.Организация = Модуль.ОрганизацияПоУмолчанию();
				КонецЕсли;
				
				// Если организаций больше одной, то используем основную организацию
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.Организация) Тогда
					ДобавитьУчастникаОрганизацию(Объект.Организация);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	Иначе
		Заголовок = Объект.Наименование;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбора();
	
	ЗаполнитьТаблицуУчастников();
	
	ЗаполнитьТаблицуФайлов();
	
	СписокВыбора = КонтекстЭДОСервер.ПолучитьДоступныйПодсистемеСписокВидовДокументов(2);
	Элементы.ВидДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
	УправлениеЭУ();
	
	ОбновитьРазмерыДокумента();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ЗаголовокОргаинзация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Наименование = "Сканированный документ";
	КонецЕсли;
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОтключитьДоступностьЭУ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьОбъектРеквизитыУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись сканированного документа");
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаУчастников

&НаСервере
Процедура ДобавитьУчастникаОрганизацию(Организация)
	
	СтрокаТЧ = Объект.РеквизитыУчастников.Добавить();
	
	СтрокаТЧ.ЯвляетсяЮрЛицом = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Если СтрокаТЧ.ЯвляетсяЮрЛицом Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол";	
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), СтрокаСведений);	
		СтрокаТЧ.ЮрЛицоНаименование = СведенияОбОрганизации.НаимЮЛПол; 
		СтрокаТЧ.ЮрЛицоИНН = СведенияОбОрганизации.ИННЮЛ; 
		СтрокаТЧ.ЮрЛицоКПП = СведенияОбОрганизации.КППЮЛ; 
		
	Иначе
		
		СтрокаСведений = "ИННФЛ, ФИО";	
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), СтрокаСведений);	
		СтрокаТЧ.ФизЛицоИНН  = СведенияОбОрганизации.ИННФЛ;
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		ФИО = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(СведенияОбОрганизации.ФИО);
		СтрокаТЧ.ФизЛицоФамилия  = ФИО.Фамилия;	
		СтрокаТЧ.ФизЛицоИмя      = ФИО.Имя;	
		СтрокаТЧ.ФизЛицоОтчество = ФИО.Отчество;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокРолейУчастников = Элементы.ТаблицаУчастниковРольУчастника.СписокВыбора;
	СписокРолейУчастников.Добавить("Агент");
	СписокРолейУчастников.Добавить("Акционер");
	СписокРолейУчастников.Добавить("Арендатор");
	СписокРолейУчастников.Добавить("Арендодатель");
	СписокРолейУчастников.Добавить("Векселедатель");
	СписокРолейУчастников.Добавить("Векселеполучатель");
	СписокРолейУчастников.Добавить("Генеральный подрядчик");
	СписокРолейУчастников.Добавить("Грузоотправитель");
	СписокРолейУчастников.Добавить("Грузополучатель");
	СписокРолейУчастников.Добавить("Декларант");
	СписокРолейУчастников.Добавить("Займодатель");
	СписокРолейУчастников.Добавить("Займополучатель (заемщик)");
	СписокРолейУчастников.Добавить("Заказчик");
	СписокРолейУчастников.Добавить("Импортер");
	СписокРолейУчастников.Добавить("Инвестор");
	СписокРолейУчастников.Добавить("Исполнитель");
	СписокРолейУчастников.Добавить("Лицо, составившее документ"); 
	СписокРолейУчастников.Добавить("Отправитель");
	СписокРолейУчастников.Добавить("Перевозчик");
	СписокРолейУчастников.Добавить("Плательщик");
	СписокРолейУчастников.Добавить("Поверенный");
	СписокРолейУчастников.Добавить("Подрядчик");
	СписокРолейУчастников.Добавить("Покупатель");
	СписокРолейУчастников.Добавить("Получатель");
	СписокРолейУчастников.Добавить("Пользователь");
	СписокРолейУчастников.Добавить("Посредник");
	СписокРолейУчастников.Добавить("Поставщик");
	СписокРолейУчастников.Добавить("Продавец");
	СписокРолейУчастников.Добавить("Работник");
	СписокРолейУчастников.Добавить("Работодатель");
	СписокРолейУчастников.Добавить("Страхователь");
	СписокРолейУчастников.Добавить("Страховщик");
	СписокРолейУчастников.Добавить("Субподрядчик");
	СписокРолейУчастников.Добавить("Участник");
	СписокРолейУчастников.Добавить("Учредитель");
	СписокРолейУчастников.Добавить("Хранитель");
	СписокРолейУчастников.Добавить("Экспедитор");
	СписокРолейУчастников.Добавить("Экспортер");
	СписокРолейУчастников.Добавить("Эмитент");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУчастников()
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыУчастников Цикл
		НоваяСтрока = ТаблицаУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(НоваяСтрока, Объект.ВидДокумента);	
	КонецЦикла;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.РольУчастника,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоНаименование,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоИНН,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоКПП,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоФамилия,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИмя,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоОтчество,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИНН,
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЯвляетсяЮрЛицом
	//	|ИЗ
	//	|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.РеквизитыУчастников КАК СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников
	//	|ГДЕ
	//	|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.Ссылка = &СканСсылка";

	//Запрос.УстановитьПараметр("СканСсылка", Объект.Ссылка);

	//РезультатЗапроса = Запрос.Выполнить();

	//Выборка = РезультатЗапроса.Выбрать();

	//Пока Выборка.Следующий() Цикл
	//	НоваяСтрока = ТаблицаУчастников.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//	ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(НоваяСтрока, Объект.ВидДокумента);
	//КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(СтрокаТаблицы, ВидДокумента)
	
	Роль = СтрокаТаблицы.РольУчастника;
	СтрокаТаблицы.РольУчастника = ВРег(Лев(Роль, 1)) + Прав(Роль, СтрДлина(Роль) - 1);
	
	СтрокаТаблицы.СоставноеПоле = ПолучитьНаименованиеУчастникаСделки(СтрокаТаблицы);
	
	//установим значение поля НеобходимыеПоляЗаполнены
	НеобходимыеПоляЗаполнены = Истина;	
	Если СтрокаТаблицы.ЯвляетсяЮрЛицом Тогда
		//юридическое лицо
		
		ВидДокумента = ВидДокумента;
		Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.СпецификацияЦены") 
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.Договор") 
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДополнениеКДоговору") Тогда
			ОбязательноЗаполнениеИНН = Истина;
		Иначе
			ОбязательноЗаполнениеИНН = Ложь;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЮрЛицоНаименование) ИЛИ 
		(ОбязательноЗаполнениеИНН И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЮрЛицоИНН)) Тогда
			НеобходимыеПоляЗаполнены = Ложь;
		КонецЕсли;
		
	Иначе
		//физическое лицо
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицоФамилия) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицоИмя) Тогда
			НеобходимыеПоляЗаполнены = Ложь;
		КонецЕсли;

	КонецЕсли;
	СтрокаТаблицы.НеобходимыеПоляЗаполнены = НеобходимыеПоляЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВычисляемыеПоляВсехСтрокТаблицыУчастников()
	
	ВидДокумента = Объект.ВидДокумента;
	
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(СтрокаТаблицы, ВидДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНаименованиеУчастникаСделки(ДанныеСтроки)
	Если ДанныеСтроки.ЯвляетсяЮрЛицом Тогда
		//юридическое лицо
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоНаименование) Тогда
			ТекстНаименование = ДанныеСтроки.ЮрЛицоНаименование;
		Иначе
			ТекстНаименование = "Наименование";
		КонецЕсли;
		
		ТекстНаименование = ТекстНаименование + ", ИНН";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоИНН) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ЮрЛицоИНН;
		КонецЕсли;	
		
		ТекстНаименование = ТекстНаименование + ", КПП";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоКПП) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ЮрЛицоКПП;
		КонецЕсли;	
	Иначе
		//физическое лицо
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоФамилия) И НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИмя) И НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоОтчество) Тогда
			
			ТекстНаименование = "ФИО";
			
		Иначе
			
			ТекстНаименование = ДанныеСтроки.ФизЛицоФамилия;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИмя) Тогда
				ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоИмя;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоОтчество) Тогда
				ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоОтчество;
			КонецЕсли;	

		КонецЕсли;
		
		ТекстНаименование = ТекстНаименование + ", ИНН";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИНН) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоИНН;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекстНаименование;
КонецФункции

&НаКлиенте
Процедура ТаблицаУчастниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	НоваяСтрока = ТаблицаУчастников.Добавить();
	НоваяСтрока.ЯвляетсяЮрЛицом = Истина;
	ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(НоваяСтрока, Объект.ВидДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаУчастниковСоставноеПоле" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ВидДокумента", 		Объект.ВидДокумента); 
		СтруктураРеквизитов.Вставить("ЮрЛицоНаименование", 	ТекущиеДанные.ЮрЛицоНаименование); 
		СтруктураРеквизитов.Вставить("ЮрЛицоИНН", 			ТекущиеДанные.ЮрЛицоИНН); 
		СтруктураРеквизитов.Вставить("ЮрЛицоКПП", 			ТекущиеДанные.ЮрЛицоКПП); 
		СтруктураРеквизитов.Вставить("ФизЛицоФамилия", 		ТекущиеДанные.ФизЛицоФамилия); 
		СтруктураРеквизитов.Вставить("ФизЛицоИмя", 			ТекущиеДанные.ФизЛицоИмя); 
		СтруктураРеквизитов.Вставить("ФизЛицоОтчество", 	ТекущиеДанные.ФизЛицоОтчество); 
		СтруктураРеквизитов.Вставить("ФизЛицоИНН", 			ТекущиеДанные.ФизЛицоИНН); 
		СтруктураРеквизитов.Вставить("ЯвляетсяЮрЛицом", 	ТекущиеДанные.ЯвляетсяЮрЛицом); 
		СтруктураРеквизитов.Вставить("РольУчастника", 		ТекущиеДанные.РольУчастника); 
		
		ПараметрыФормы = Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов);
		
		ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", ВыбраннаяСтрока); 
		
		//Описание оповещения
		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаУчастниковВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаУчастникаСделки", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковВыборЗавершение(СтуктураРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтуктураРезультат) <> Тип("Структура")  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаУчастников.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтуктураРезультат);
	ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(ТекущаяСтрока, Объект.ВидДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбъектРеквизитыУчастников()
	
	Объект.РеквизитыУчастников.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		НоваяСтрока = Объект.РеквизитыУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.РольУчастника = нрег(СтрокаТаблицы.РольУчастника);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаФайлов

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(СтрокаТаблицы)
	
	ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ВернутьСтр("ru = '%1 (%2)'"), СтрокаТаблицы.ИмяФайла, ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер));
	
	СтрокаТаблицы.СоставноеПоле = ПредставлениеФайла;
	
КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьТаблицуФайлов()
	
	ТаблицаФайлов.Очистить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла КАК ИмяФайла,
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер,
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.НомерСтраницы КАК НомерСтраницы
	                      |ИЗ
	                      |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	                      |ГДЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &СсылкаДокумент
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтраницы");
	Запрос.УстановитьПараметр("СсылкаДокумент", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРазмерыДокумента()
	
	НадписьРазмерыСканДокумента = Элементы.НадписьРазмерыСканДокумента;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	//Получим таблицу файлов
	СтруктураРазмеров = КонтекстЭДОСервер.ПолучитьСтруктуруРазмеровСканДокумента(Объект.Ссылка);
	
	СуммаКолвоФайлов = СтруктураРазмеров.КолвоФайлов;
	СуммаРазмерФайлов = СтруктураРазмеров.Размер;
	МаксКолвоФайлов = 29;
	МаксРазмерФайлов = 18*1024*1024; 
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов - СуммаКолвоФайлов;
	ДопустимыйРазмерВБайтах = МаксРазмерФайлов - СуммаРазмерФайлов;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(ДопустимыйРазмерВБайтах);
	
	СодержимоеТекста = "";
	
	Если (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0) Тогда
		
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
	Иначе
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить ещё " + СформироватьСтрокуПредставленияФайлов(ДопустимоеКоличествоФайлов) + " (" + ДопустимоеКоличествоМегабайт + " Мб).";
		
	КонецЕсли;
	
	НадписьРазмерыСканДокумента.ЦветТекста = ЦветТекста;
	НадписьРазмерыСканДокумента.Заголовок = СодержимоеТекста;
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьВниманиеНажатие(Элемент)
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаТребованияКФайлам", , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаСервере
Функция СформироватьСтрокуПредставленияФайлов(КоличествоФайлов)
	
	ТекстФайлов = СтрЗаменить(ЧислоПрописью(КоличествоФайлов, "Л = ru_RU; НП=Истина, НД=Ложь", "файл, файла, файлов, м, , , , ,0"),
								ЧислоПрописью(КоличествоФайлов, "Л = ru_RU; НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
								"");
	
	Возврат Формат(КоличествоФайлов, "ЧН=0; ЧГ=0") + " " + ТекстФайлов;
	
КонецФункции

&НаКлиенте
Функция ПроверкаВыбранныхФайлов(ВыбранныеФайлы, ТекстСообщения)
	
	ЕстьОшибки = Ложь;
	ПревышенРазмерОтдельныхФайлов 	= Ложь;
	ПревышенОбщийРазмерФайлов 		= Ложь;
	ПревышеноОбщееКолВоФайлов 		= Ложь;
	
	КолвоВыбранныхФайлов = ВыбранныеФайлы.Количество();
	
	//проверка на количество выбранных файлов
	Если КолВоВыбранныхФайлов > ДопустимоеКоличествоФайлов Тогда
		ТекстСообщения = "Общее количество файлов изображений превысило допустимое (29 файлов).
		|Рекомендуется использовать многостраничный формат TIFF.
		|";	
		ЕстьОшибки = Истина;
		ПревышеноОбщееКолВоФайлов = Истина;
	КонецЕсли;
	
	//проверка на размеры выбранных файлов
	УменьшаемыйДопустимыйРазмер = ДопустимыйРазмерВБайтах;
	
	Для Каждого ЭлФайл Из ВыбранныеФайлы Цикл
		
		Файл = Новый Файл(ЭлФайл);
		
		Если Файл.Размер() > 15*1024*1024 Тогда
			ЕстьОшибки = Истина;
			ПревышенРазмерОтдельныхФайлов = Истина;
			ТекстСообщения = ТекстСообщения + "Размер файла " + Файл.Имя + " превышает допустимый (15 Мб).
			|";
		КонецЕсли;
		
		УменьшаемыйДопустимыйРазмер = УменьшаемыйДопустимыйРазмер - Файл.Размер();
		
		Если УменьшаемыйДопустимыйРазмер < 0 Тогда
			ЕстьОшибки = Истина;
			ПревышенОбщийРазмерФайлов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = "Добавление файлов отменено.
		|" + ТекстСообщения;
		Если ПревышенОбщийРазмерФайлов Тогда
			ТекстСообщения = ТекстСообщения + "Общий размер файлов изображений превысил допустимый (18 Мб).
			|Убедитесь в том, что добавляемые файлы соответствуют требованиям.";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВложения()
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПродолжение", ЭтотОбъект);
	КонтекстЭДОКлиент.ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	// В начале ветки сохраняем значение в локальной переменной - дальше вместо второго вызова метода используем её
	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;	
	
 	МассивНеподходящихФайлов = Новый Массив;
	
	ФайлыБылиВыбраны = Ложь;
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "Картинка TIFF или JPEG (*.tif;*.jpg)|*.tif;*.jpg";
		Диалог.МножественныйВыбор = Истина;
		Диалог.ПредварительныйПросмотр = Истина;
		ФайлыБылиВыбраны = Диалог.Выбрать();
		ДобавитьВложенияПослеВыбораФайлаПоддерживаетсяРасширениеРаботыСФайлами(ФайлыБылиВыбраны, Диалог, МассивНеподходящихФайлов);
	Иначе
		АдресДанных = "";
		ДополнительныеПараметры = Новый Структура("МассивНеподходящихФайлов", МассивНеподходящихФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресДанных, , Истина, УникальныйИдентификатор);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияВыборФайлаЗавершение(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	
	ДобавитьВложенияПослеВыбораФайлаРасширениеРаботыСФайламиНеПоддерживается(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, МассивНеподходящихФайлов);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьВложенияПослеВыбораФайлаПоддерживаетсяРасширениеРаботыСФайлами(ФайлыБылиВыбраны, Диалог, МассивНеподходящихФайлов)
	
	Если ФайлыБылиВыбраны Тогда
		
		ТекстСообщения = "";
		Если НЕ ПроверкаВыбранныхФайлов(Диалог.ВыбранныеФайлы, ТекстСообщения) Тогда
			Сообщить(ТекстСообщения);
			Возврат;
		КонецЕсли;

		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;

		Для Каждого ЭлФайл Из Диалог.ВыбранныеФайлы Цикл
			
			Файл = Новый Файл(ЭлФайл);
			КороткоеИмяФайла = Файл.Имя;
			
			//Если СтрДлина(КороткоеИмяФайла) > 100 Тогда
			//	МассивНеподходящихФайлов.Добавить(КороткоеИмяФайла);
			//Иначе
				МассивФайлов.Добавить(Новый Структура("Имя, ПолноеИмя, Расширение, Размер, АдресДанных", КороткоеИмяФайла, Файл.ПолноеИмя, Файл.Расширение, Файл.Размер()));
			//КонецЕсли;
			
		КонецЦикла;
		
		// проверяем на пересечение имен с уже имеющимися
		Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
			ТекстВопроса = ВернутьСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
								|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
			ДополнительныеПараметры = Новый Структура;					
			ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
			ДополнительныеПараметры.Вставить("МассивНеподходящихФайлов", МассивНеподходящихФайлов);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВыбораФайлаРасширениеРаботыСФайламиНеПоддерживается(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, МассивНеподходящихФайлов)
	
	Если ФайлыБылиВыбраны Тогда
		
		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;

		Файл = КонтекстЭДОКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		//Если СтрДлина(Файл.Имя) > 100 Тогда
		//	МассивНеподходящихФайлов.Добавить(Файл.Имя);
		//Иначе
			МассивФайлов.Добавить(Новый Структура("Имя, ПолноеИмя, Расширение, Размер, АдресДанных", Файл.Имя, Файл.ПолноеИмя, Файл.Расширение, Файл.Размер, Файл.АдресДанных));
		//КонецЕсли;
		
		// проверяем на пересечение имен с уже имеющимися
		Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
			ТекстВопроса = ВернутьСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
								|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
			ДополнительныеПараметры = Новый Структура;					
			ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
			ДополнительныеПараметры.Вставить("МассивНеподходящихФайлов", МассивНеподходящихФайлов);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов) Экспорт
	
	// проверяем на длину имен, превышающую 100 символов
	//Если МассивНеподходящихФайлов.Количество() > 0 Тогда
	//	
	//	ТекстСообщения = ВернутьСтр("ru = 'Среди выбранных файлов присутствовали такие, имена которых превышали 100 символов.
	//						|Формат не допускает такой длины имени файлов вложений, поэтому следующие файлы не были добавлены:'");
	//	Для каждого ЗначениеМассива Из МассивНеподходящихФайлов Цикл
	//		ТекстСообщения = ТекстСообщения + "
	//		|" + ЗначениеМассива;
	//	КонецЦикла;
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	
	//КонецЕсли;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("МассивФайлов, МассивНеподходящихФайлов", МассивФайлов, МассивНеподходящихФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойПоместитьФайлы(МассивФайлов, МассивНеподходящихФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойПоместитьФайлы(МассивФайлов, МассивНеподходящихФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойПоместитьФайлы(МассивФайлов, МассивНеподходящихФайлов)
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		ПомещаемыеФайлы = Новый Массив;
		Для Каждого ЭлФайл Из МассивФайлов Цикл 
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлФайл.ПолноеИмя); 
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		КонецЦикла;
		ПомещенныеФайлы = Новый Массив;
		
		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
			
			Для каждого ЭлФайл Из МассивФайлов Цикл
				Для каждого ОписаниеПереданногоФайла Из ПомещенныеФайлы Цикл
					Если ОписаниеПереданногоФайла.Имя = ЭлФайл.ПолноеИмя Тогда
						ЭлФайл.АдресДанных = ОписаниеПереданногоФайла.Хранение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
	// последовательно загружаем в ИБ
	Для Каждого ЭлФайл Из МассивФайлов Цикл
		Состояние("Загрузка вложения из файла """ + ЭлФайл.ПолноеИмя + """ ...");
		ЗагрузитьВложение(ЭлФайл);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьВложение(ЭлФайл)
	
	МенеджерЗаписи = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Объект.Ссылка;
	МенеджерЗаписи.ИмяФайла = ЭлФайл.Имя;
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ЭлФайл.АдресДанных));
	МенеджерЗаписи.ТипСодержимого = ОпределитьТипФайлаВложения(ЭлФайл);
	МенеджерЗаписи.Размер = ЭлФайл.Размер;
	МенеджерЗаписи.Записать(Истина);
	
	ЗаполнитьТаблицуФайлов();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьТипФайлаВложения(ОбъектФайл)
	
	нрегРасширениеФайла = нрег(ОбъектФайл.Расширение);
	Если нрегРасширениеФайла = ".tiff" ИЛИ нрегРасширениеФайла = ".tif" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.tiff;
	ИначеЕсли нрегРасширениеФайла = ".jpeg" ИЛИ нрегРасширениеФайла = ".jpg" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.jpeg;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл
		МассивИменФайлов.Добавить(ЭлФайл.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла КАК ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	                      |ГДЕ
	                      |	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &Документ
	                      |	И ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла В(&ИмяФайла)");
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИмяФайла", МассивИменФайлов);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	МассивИменУдаляемыхФайлов = Новый Массив;
	
	Для каждого Идентификатор Из Элемент.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ТаблицаФайлов.НайтиПоИдентификатору(Идентификатор);
		МассивИменУдаляемыхФайлов.Добавить(ВыделеннаяСтрока.ИмяФайла);
	КонецЦикла;
	
	КонтекстЭДОКлиент.УдалитьФайлыДокументовРеализацииПолномочийНалоговыхОргановПоВладельцу(Объект.Ссылка, МассивИменУдаляемыхФайлов);
	
	ЗаполнитьТаблицуФайлов();
	
	Оповестить("Запись сканированного документа");
	ОбновитьРазмерыДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДобавитьВложения();

	Оповестить("Запись сканированного документа");
	ОбновитьРазмерыДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПриИзменении(Элемент)
	//срабатывает после редактирования номера листа
	
	ДанныеТекущейСтроки = ТаблицаФайлов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	ИзменитьНомерСтраницыНаСервере(ДанныеТекущейСтроки.ИмяФайла, ДанныеТекущейСтроки.НомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерСтраницыНаСервере(ИмяФайла, НомерСтраницы)
	
	МенеджерЗаписи = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Объект.Ссылка;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.НомерСтраницы = НомерСтраницы;
	МенеджерЗаписи.Записать(Истина);
	
	ЗаполнитьТаблицуФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя <> "ТаблицаФайловНомерСтраницы" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьВложение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПоказатьПроизвольноеВложение(ТекДанные);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru='При открытии поизвольного вложения %1 возникла ошибка: %2'"), Символ(34) + ТекДанные.ИмяФайла + Символ(34), Символы.ПС + ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВложениеНаСервере(ИмяФайла)
	
	Результат = Новый Структура("ТекстПредупреждения, АдресДанных");
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		//// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			Результат.ТекстПредупреждения = ТекстСообщения;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// получаем вложение
	СтрВложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Результат.ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВернутьСтр("ru='Вложение с именем  %1 не обнаружено.'"), Символ(34) + ИмяФайла + Символ(34));
		Возврат Результат;
	КонецЕсли;
	
	Вложение = СтрВложения[0];
	
	ГУИД = Новый УникальныйИдентификатор;
	Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), ГУИД);
	Результат.АдресДанных = Адрес;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПроизвольноеВложение(ТекДанные)
	
	КороткоеИмяФайла = ТекДанные.ИмяФайла;
	
	Результат = ПолучитьВложениеНаСервере(КороткоеИмяФайла);
	Если ЗначениеЗаполнено(Результат.ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, Результат.ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьПроизвольноеВложение(Результат, КороткоеИмяФайла);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтключитьДоступностьЭУ()
	
	ЭтотОбъект.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУ()
	ВидДокумента = Объект.ВидДокумента;
	
	//ПанельПредмет
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.Договор Тогда
		Элементы.ГруппаПредмет.Видимость = Истина;
	Иначе
		Объект.ПредметДокумента = "";
		Элементы.ГруппаПредмет.Видимость = Ложь;
	КонецЕсли;
	
	//элемент ДатаДокумента
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
		Объект.ДатаДокумента = Дата(1,1,1);
		Элементы.ДатаДокумента.Видимость = Ложь;
		Элементы.ЗаголовокДатаДокумента.Видимость = Ложь;
	Иначе
		Элементы.ДатаДокумента.Видимость = Истина;
		Элементы.ЗаголовокДатаДокумента.Видимость = Истина;
	КонецЕсли;

	
	//ПанельСумма
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
		Объект.СуммаВсего = 0;
		Объект.СуммаНалога = 0;
		Элементы.ГруппаСумма.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСумма.Видимость = Истина;
	КонецЕсли;
	
	//ПанельПериод
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
		Элементы.ГруппаПериод.Видимость = Истина;
	Иначе
		Объект.НачалоПериода = Дата(1,1,1);
		Объект.КонецПериода = Дата(1,1,1);
		Элементы.ГруппаПериод.Видимость = Ложь;
	КонецЕсли;
	
	//ПанельОснование
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура Тогда
		
		Элементы.ГруппаОснование.Видимость = Истина;
		
		Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
			Объект.ДатаОснования = Дата(1,1,1);
			Элементы.ЗаголовокДатаОснования.Видимость 	= Ложь;
			Элементы.ДатаОснования.Видимость 			= Ложь;
		Иначе
			Элементы.ЗаголовокДатаОснования.Видимость 	= Истина;
			Элементы.ДатаОснования.Видимость 			= Истина;
		КонецЕсли
		
	Иначе
		Объект.НомерОснования = "";
		Объект.ДатаОснования = Дата(1,1,1);
		Элементы.ГруппаОснование.Видимость = Ложь;
	КонецЕсли;
	
	//ПанельУчастники
	//Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация
	//ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
	//	ТаблицаУчастников.Очистить();
	//	Элементы.ГруппаРеквизитыУчастниковСделки.Видимость = Ложь;
	//Иначе
	//	Элементы.ГруппаРеквизитыУчастниковСделки.Видимость = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВидДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидДокументаПриИзмененииНаСервере()
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
	ЗаполнитьВычисляемыеПоляВсехСтрокТаблицыУчастников();

	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ФормаОбъект)
	
	Объект = ФормаОбъект.Объект;
	ФормаОбъект.Заголовок = ?(ЗначениеЗаполнено(Объект.ВидДокумента), Строка(Объект.ВидДокумента), "Сканированный документ") + ?(ЗначениеЗаполнено(Объект.НомерДокумента), " " + Объект.НомерДокумента, "") 
	+ ?(ЗначениеЗаполнено(Объект.ДатаДокумента), " от " + Формат(Объект.ДатаДокумента, "ДФ='dd.MM.yyyy ""г.""'"), "");
	
КонецФункции 

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры     
