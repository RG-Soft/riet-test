

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	ОбъектЭлемента = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
		Объект.РесурсВходящихДокументов = "";
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Объект.ИспользуетсяКриптография = Ложь;
		ЭтоНовый = Истина;
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПрограммаБанка = ОпределитьПрограммуБанка(Объект.Контрагент);
			Если ЗначениеЗаполнено(ПрограммаБанка) Тогда
				Объект.ПрограммаБанка = ПрограммаБанка;
				Элементы.ВидБанковскойСистемы.Видимость = Ложь;
			КонецЕсли;
			Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
			ЗаполнитьВидыЭДДоступнымиЗначениями();
			ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
		КонецЕсли;
	ИначеЕсли Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				СертификатБанка = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
			КонецЕсли;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
							+ ВернутьСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = ВернутьСтр("ru = 'открытие формы соглашения'");
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		КонецПопытки;
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПрограммаБанка = ОпределитьПрограммуБанка(Объект.Контрагент);
		Элементы.ВидБанковскойСистемы.Видимость = НЕ ЗначениеЗаполнено(ПрограммаБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НастройкиЗаполнения) Тогда
		ЗаполнитьНастройкиСоглашения(Параметры.НастройкиЗаполнения);
		ЗаполнитьВидыЭДДоступнымиЗначениями();
		ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Банки");
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			
	ВариантАвторизации = Число(Объект.ИспользуетсяКриптография);
	
	ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																			"ИспользоватьДополнительныеОтчетыИОбработки");
	
	Элементы.ДополнительнаяОбработка.Доступность = ВключеныДополнительныеОтчетыИОбработки;
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография);
	Элементы.ВариантАвторизации.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Параметры.НастройкиЗаполнения) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		ТекстОшибкиАктуальности = "";
		ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности);
		Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка");
	
	Если ЗначениеЗаполнено(Объект.АдресСервера) И НЕ ПравильныйФорматАдреса()
		И Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		
		ТекстСообщения = ВернутьСтр("ru = 'Адрес сервера банка должен начинаться с """"https://"""" или """"http://""""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
		
	КонецЕсли;
	
	УдалитьПустыеСтрокиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененоСоглашениеЭД", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		
		Менеджер = РегистрыСведений.СостоянияОбменовЭДСБанками.СоздатьМенеджерЗаписи();
		Менеджер.НастройкаЭДО = Объект.Ссылка;
		Менеджер.ПоследняяДатаПолученияЭД = ТекущаяДатаСеанса();
		Менеджер.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПрограммаБанка = ОпределитьПрограммуБанка(Объект.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрограммаБанка) Тогда
		Объект.ПрограммаБанка = ПрограммаБанка;
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
		ВидБанковскойСистемыПриИзменении(Неопределено)
	Иначе
		Элементы.ВидБанковскойСистемы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБанковскойСистемыПриИзменении(Элемент)
	
	Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография);
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																			"ИспользоватьДополнительныеОтчетыИОбработки");
		Если НЕ ВключеныДополнительныеОтчетыИОбработки Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																					"ДОПОЛНИТЕЛЬНЫЕОТЧЕТЫИОБРАБОТКИ");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СоглашениеЗаписано("ВыполнитьЗагрузкуСертификатаБанка") Тогда
		ВыполнитьЗагрузкуСертификатаБанка(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	ПоместитьВХранилищеСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАвторизацииПриИзменении(Элемент)
	
	Объект.ИспользуетсяКриптография = Булево(ВариантАвторизации);
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография);
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписейОрганизацииОбработка

&НаКлиенте
Процедура СертификатыПодписейОрганизацииОбработкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																											Объект.Ссылка);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
															ВнешнийПодключаемыйМодуль, ВыбранноеЗначение);
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НовыйСертификат(ВыбранноеЗначение, ДанныеСертификата, Объект.Организация, Объект.ПрограммаБанка);
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписейОрганизацииКомпонента

&НаКлиенте
Процедура СертификатыПодписейОрганизацииКомпонентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаiBank2(ВыбранноеЗначение);
		
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НовыйСертификат(ВыбранноеЗначение, ДанныеСертификата, Объект.Организация, Объект.ПрограммаБанка);
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЖурналАудита(Команда)

	ОткрытьФорму("РегистрСведений.ЖурналАудитаСбербанк.ФормаСписка", Новый Структура("СоглашениеЭД", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ВернутьСтр("ru = 'Необходимо выбрать организацию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			И НЕ ЗначениеЗаполнено(Объект.ДополнительнаяОбработка) Тогда
		ТекстСообщения = ВернутьСтр("ru = 'Необходимо выбрать дополнительную обработку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДополнительнаяОбработка", , Отказ);
	КонецЕсли;

	Если Отказ ИЛИ НЕ СоглашениеЗаписано("ВыполнитьЗагрузкуСертификата") Тогда
		Возврат;
	Иначе
		ВыполнитьЗагрузкуСертификата(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = ВернутьСтр("ru = 'Тест не возможен в веб-клиенте'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		#КонецЕсли
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиТестНастройкиЭДО", ЭтотОбъект);
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = ВернутьСтр("ru = 'Необходимо сохранить текущую настройку ЭДО. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(Истина, ВернутьСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить(Ложь, ВернутьСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , Истина, ВернутьСтр("ru = 'Тест настроек'"));
	Иначе
		ПровестиТестНастройкиЭДО();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоглашениеЭД", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовЭДСБанками.Форма.РедактированиеЗаписи", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПровестиТестНастройкиЭДО(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	ИначеЕсли Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыКлиентСервер.ЗаполненыРеквизитыНастройкиЭДОСБанками(Объект, Истина) Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = ВернутьСтр("ru = 'Тест не возможен в WEB-клиенте'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		#КонецЕсли
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ПроверитьНаличиеСвязиСБанком(
		Объект.Ссылка, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификата(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьСоглашение();
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
			ДополнительныеПараметры = Новый Структура("СоглашениеЭД", Объект.Ссылка);
			НачатьЗагрузкуСертификатаiBank2(ДополнительныеПараметры);
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ПолучитьДанныеСертификатаНаТокенеСбербанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаiBank2(Параметры = Неопределено) Экспорт
	
	ОО = Новый ОписаниеОповещения("НачатьЗагрузкуСертификатаiBank2", ЭтотОбъект, Параметры);
	
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешняяКомпонентаiBank2(ОО);
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Устройства = ЭлектронныеДокументыСлужебныйКлиент.ПодключенныеХранилищаiBank2();
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаiBank2(ИдентификаторХранилища);
	Иначе
		ОО = Новый ОписаниеОповещения("ОбработкаВыбораХранилищаiBank2", ЭтотОбъект);
		ЭлектронныеДокументыСлужебныйКлиент.ВыбратьХранилищеiBank2(Объект.Ссылка, ОО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку(ПараметрыОбработки = Неопределено) Экспорт
	
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																										Объект.Ссылка);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		Если ПараметрыПодсистемыОбменСБанками <> Неопределено Тогда
			ПараметрыСоглашения = ПараметрыПодсистемыОбменСБанками.Получить(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПараметрыСоглашения) И ПараметрыСоглашения.Свойство("АдресКомпоненты") Тогда
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("ТекущееСоглашениеЭДЧерезДополнительнуюОбработку", Объект.Ссылка);
				ОО = Новый ОписаниеОповещения(
					"НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыОбработки);
				НачатьУстановкуВнешнейКомпоненты(ОО, ПараметрыСоглашения.АдресКомпоненты);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Устройства = ЭлектронныеДокументыСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(
																			ВнешнийПодключаемыйМодуль);
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыбораТокена = Новый Структура;
	ПараметрыВыбораТокена.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыВыбораТокена);
	Иначе
		ОО = Новый ОписаниеОповещения("ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыбораТокена);
		ЭлектронныеДокументыСлужебныйКлиент.ВыбратьХранилищеЧерезДополнительнуюОбработку(Объект.Ссылка, ОО, ПараметрыВыбораТокена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ВнешнийПодключаемыйМодуль = ПараметрыОбработки.ВнешнийПодключаемыйМодуль;
	
	ТребуетсяУстановкаPINКода = ЭлектронныеДокументыСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ЭлектронныеДокументыСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификатаБанка(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьСоглашение();
		
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораФайлаСертификатаБанка", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.cer", Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайлаСертификатаБанка(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоместитьСертификатВСоглашение(Адрес);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	
	МассивЭД = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭД, АктуальныеВидыЭД);
	
	МассивЭД.Добавить(Перечисления.ВидыЭД.ЗапросНаОтзывЭД);
	МассивЭД.Добавить(Перечисления.ВидыЭД.ЗапросЗонд);
	МассивЭД.Добавить(Перечисления.ВидыЭД.ЗапросОСостоянииЭД);
	
	Для Каждого ЗначениеПеречисления Из МассивЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеПоручение
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросВыписки
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросЗонд
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросНаОтзывЭД
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросОСостоянииЭД Тогда
				МассивСтрок = Объект.ИсходящиеДокументы.НайтиСтроки(Новый Структура("ИсходящийДокумент", ЗначениеПеречисления));
				Если МассивСтрок.Количество() = 0 Тогда 
					НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
					НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
					НоваяСтрока.Формировать = Истина;
					НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
				КонецЕсли;
			ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.ВыпискаБанка
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД Тогда
				МассивСтрок = Объект.ВходящиеДокументы.НайтиСтроки(Новый Структура("ВходящийДокумент", ЗначениеПеречисления));
				Если МассивСтрок.Количество() = 0 Тогда 
					НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
					НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
					НоваяСтрока.Формировать = Истина;
					НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности)
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения",  Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация",       Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	ЗапросПоСоглашениям.Текст = "ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ТипДокумента,
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Соглашение
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	
	ПроверитьУникальностьДокументов(Объект.ИсходящиеДокументы, Результат, ТекстОшибкиАктуальности);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДокументов(ТабличнаяЧастьДокументов, РезультатПроверки, ТекстОшибки)
			
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из РезультатПроверки Цикл
				Если ТекущийДокументСоглашения.ИсходящийДокумент = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстОшибки = ВернутьСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки, 
						ДокументВДругихСоглашениях.ТипДокумента, 
						"Исходящий", 
						Объект.Организация, 
						Объект.Контрагент, 
						ДокументВДругихСоглашениях.Соглашение
						);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПравильныйФорматАдреса()
	
	Если НРег(Лев(Объект.АдресСервера, 7)) = "http://"
			ИЛИ НРег(Лев(Объект.АдресСервера, 8)) = "https://" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(Форма, Знач ПрограммаБанка, Знач ИспользуетсяКриптография)
	
	ЭтоСбербанк = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	ЭтоОбменЧерезДопОбработку = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
	ЭтоАсинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	ЭтоСинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
	ЭтоОбменСiBank2 = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2");
	
	Форма.Элементы.НастройкиОбменаДанными.ОтображатьЗаголовок = Истина;
	Форма.Элементы.НастройкиОбменаДанными.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	
	Если ЭтоСинхронныйОбмен Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСинхронный;
		Форма.Элементы.Логин.Видимость = НЕ Форма.ВариантАвторизации;
		Форма.Элементы.ГруппаСертификаты.Видимость = Форма.ВариантАвторизации;
	ИначеЕсли ЭтоСбербанк Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСбербанк;
	ИначеЕсли ЭтоАсинхронныйОбмен Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаАсинхронный;
	ИначеЕсли ЭтоОбменЧерезДопОбработку Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаОбработка;
		ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																				"ИспользоватьДополнительныеОтчетыИОбработки");
		Форма.Элементы.ДополнительнаяОбработка.Доступность = ВключеныДополнительныеОтчетыИОбработки;
	ИначеЕсли ЭтоОбменСiBank2 Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаКомпонента;
		Форма.Элементы.НастройкиОбменаДанными.ОтображатьЗаголовок = Ложь;
		Форма.Элементы.НастройкиОбменаДанными.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Форма.Элементы.ТестНастроек.Видимость = НЕ ЭтоСинхронныйОбмен;
	Форма.Элементы.ЖурналАудита.Видимость = ЭтоСбербанк;
	Форма.Элементы.НачальнаяДатаЗапросаДанных.Видимость = ЭтоАсинхронныйОбмен;
	Форма.ВариантАвторизации = ИспользуетсяКриптография;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификата(ПараметрыПолучения)
	
	Если Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаКомпонента Тогда
		ЭлементОповещения = Элементы.СертификатыПодписейОрганизацииКомпонента;
	ИначеЕсли Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаОбработка Тогда
		ЭлементОповещения = Элементы.СертификатыПодписейОрганизацииОбработка;
	Иначе
		Возврат;
	КонецЕсли;
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	ПараметрыОткрытия = Новый Структура("СоглашениеЭД, ИдентификаторХранилища", Объект.Ссылка, ИдентификаторХранилища);
	ОткрытьФорму(
		"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеСертификата", ПараметрыОткрытия, ЭлементОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификатаПослеВводаPinКода(PINКод, ПараметрыПолучения) Экспорт
	
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
		PINУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьPINКодХранилищаiBank2(ИдентификаторХранилища, PINКод);
	Иначе
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																												Объект.Ссылка);
		PINУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
														ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, PINКод);
	КонецЕсли;
	
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыПолучения);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиТаблиц()
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата ИЗ Объект.СертификатыПодписейОрганизации Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Сертификат) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись ИЗ СписокСтрокКУдалению Цикл
		Объект.СертификатыПодписейОрганизации.Удалить(Запись.Значение-1);
	КонецЦикла

КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(ДвоичныеДанные = Неопределено, ПредставлениеСертификата=Неопределено)
	
	ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанные);
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	Прочитать();
	
	Если ДвоичныеДанные <> Неопределено Тогда
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ВремФайл = ПолучитьИмяВременногоФайла();
			Попытка
				ДвоичныеДанные.Записать(ВремФайл);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ВремФайл);
				СтрокаBase64 = ТекстовыйДокумент.ПолучитьТекст();
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
				ДвоичныеДанныеСертификата = Base64Значение(СтрокаBase64);
				ХранилищеЗначения  = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
				СправочникОбъект = РеквизитФормыВЗначение("Объект");
				СправочникОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
				СправочникОбъект.Записать();
				ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
				Прочитать();
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			Исключение
				СправочникОбъект = РеквизитФормыВЗначение("Объект");
				СправочникОбъект.СертификатКонтрагентаДляШифрования = Неопределено;
				СправочникОбъект.Записать();
				ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
				Прочитать();
				УдалитьФайлы(ВремФайл);
				ТекстСообщения = ВернутьСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ПредставлениеСертификата = "";
				Возврат;
			КонецПопытки;
			УдалитьФайлы(ВремФайл);
			
		КонецПопытки;
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоглашение()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция СоглашениеЗаписано(Обработчик)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = ВернутьСтр("ru = 'Загружать сертификаты можно только в записанных настройках ЭДО.
								|Записать?'");
	
	ОП = Новый ОписаниеОповещения(Обработчик, ЭтотОбъект);
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПоместитьСертификатВСоглашение(АдресВременногоХранилища)
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ПредставлениеСертификата = Неопределено;
	ПоместитьВХранилищеСертификат(ДанныеФайла, ПредставлениеСертификата);
	СертификатБанка = ПредставлениеСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораХранилищаiBank2(ИдентификаторХранилища, ПараметрыОбработки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
		
	ТребуетсяУстановкаPINКода = ЭлектронныеДокументыСлужебныйКлиент.НеобходимоУстановитьPINКодХранилищаiBank2(ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ЭлектронныеДокументыСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйСертификат(Знач СертификатКлючаXML, Знач ДанныеСертификата, Знач Организация, Знач ПрограммаБанка)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписываемыеВидыЭД");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрограммыБанков");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
	
		НовСерт = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
		НовСерт.Должность = ДанныеСертификата.ВладелецДолжность;
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ДанныеСертификата.ВладелецФИО,
													НовСерт.Фамилия,
													НовСерт.Имя,
													НовСерт.Отчество);
		НовСерт.ДействителенДо  = ДанныеСертификата.ДатаОкончания;
		НовСерт.Наименование    = ДанныеСертификата.ВладелецФИО + " (" + ДанныеСертификата.Псевдоним + ")";
		НовСерт.Организация     = Организация;
		НовСерт.ДанныеСертификата = Новый ХранилищеЗначения(СертификатКлючаXML);
		НовСерт.Отпечаток       = ДанныеСертификата.Отпечаток;
		НовСерт.Добавил         = ПользователиКлиентСервер.ТекущийПользователь();
		НовСерт.Подписание      = Истина;
		НовСерт.КомуВыдан       = ДанныеСертификата.ВладелецФИО;
		НовСерт.КемВыдан        = Неопределено;
		НовСерт.Записать();
		
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(НовСерт.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		НоваяЗапись.Использовать = Истина;
		НоваяЗапись.СертификатЭП = НовСерт.Ссылка;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПрограммыБанков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(НовСерт.Ссылка);
		НаборЗаписей.Прочитать();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.ПрограммаБанка = ПрограммаБанка;
		НоваяЗапись.СертификатЭП = НовСерт.Ссылка;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	Возврат НовСерт.Ссылка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТабличныеЧасти(ИспользуетсяКриптография, ВходящиеДокументы, ИсходящиеДокументы)
	
	Для Каждого Строка Из ВходящиеДокументы Цикл
		Строка.ИспользоватьЭП = ИспользуетсяКриптография;
	КонецЦикла;
	
	Для Каждого Строка Из ИсходящиеДокументы Цикл
		Строка.ИспользоватьЭП = ИспользуетсяКриптография;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаНаТокенеСбербанка()
	
	АвторизацияВыполнена = Ложь;
	ОО = Новый ОписаниеОповещения("ПолучитьИдентификаторСертификатаСбербанка", ЭтотОбъект);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("АвторизацияВыполнена", АвторизацияВыполнена);
	ПараметрыОбработчика.Вставить("ОО", ОО);
	ПараметрыОбработчика.Вставить("ПринудительнаяАутентификация", Истина);
	ЭлектронныеДокументыСлужебныйКлиент.ПровестиАутентификациюНаТокенеСбербанка(Объект.Ссылка, ПараметрыОбработчика);
	Если НЕ ПараметрыОбработчика.АвторизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьИдентификаторСертификатаСбербанка(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(ИдентификаторСертификата, Параметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата);
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ПоказатьПредупреждение( , ВернутьСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'"));
		Возврат;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(НовыйСертификат);
	
	СтруктураСертификата.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	СтруктураСертификата.Вставить("Организация", Объект.Организация);
	
	ОписаниеОшибки = "";
	НовыйСертификат = СоздатьСертификат(СтруктураСертификата, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		ПоказатьПредупреждение( , ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	СтрокаСоглашения.НомерКонтейнера = ЭлектронныеДокументыСлужебныйКлиент.ЗначениеИзКэша("НомерКонтейнера");
	
	Оповестить("ОбновитьСписокСертификатов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСертификат(СтруктураСертификата, ОписаниеОшибки)
	
	НовыйСертификат = ЗагрузитьСертификатНаСервере(СтруктураСертификата, ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(НовыйСертификат) Тогда
		СертификатОбъект = НовыйСертификат.ПолучитьОбъект();
		НовСтрока = СертификатОбъект.ВидыДокументов.Добавить();
		НовСтрока.ВидДокумента = Перечисления.ВидыЭД.ПлатежноеПоручение;
		НовСтрока.ИспользоватьДляПодписи = Истина;
		НовСтрока = СертификатОбъект.ВидыДокументов.Добавить();
		НовСтрока.ВидДокумента = Перечисления.ВидыЭД.ЗапросВыписки;
		НовСтрока.ИспользоватьДляПодписи = Истина;
		СертификатОбъект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		СертификатОбъект.Записать();
	КонецЕсли;
	
	Возврат НовыйСертификат;
	
КонецФункции

&НаСервереБезКонтекста
// Создает новый элемент справочника "СертификатыЭП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификатНаСервере(СтруктураСертификата, ОписаниеОшибки)
	
	НовыйЭлемент = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.Организация;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДействителенДо= СтруктураСертификата.ДействителенДо;
	
	// Проверка сертификата на соответствие 63 ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		НовыйСертификат = Новый СертификатКриптографии(СтруктураСертификата.ДвоичныеДанныеСертификата);
		
		// Корректно работаем только с сертификатами для подписи стандартной структуры.
		Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
			И НовыйСертификат.Субъект.Свойство("T") И НовыйСертификат.Субъект.Свойство("ST") Тогда
			
			Если НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ШаблонФИОВладельца = ВернутьСтр("ru = '%1 %2'");
				ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
					НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
			ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
				
				ФИОВладельца = НовыйСертификат.Субъект.CN;
			КонецЕсли;
			НовыйЭлемент.Должность = НовыйСертификат.Субъект.T;
			
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИОВладельца, НовыйЭлемент.Фамилия, НовыйЭлемент.Имя,
				НовыйЭлемент.Отчество);
			НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ДанныеСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = ВернутьСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата)
	
	СертификатBase64 = "";
	ПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ЗначениеИзКэша("ПодключаемыйМодуль");
	Рез = ПодключаемыйМодуль.ПолучитьСертификатVPNKeyTLS(ИдентификаторСертификата, СертификатBase64);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = ВернутьСтр("ru = 'При получении данных сертификата произошла ошибка.
									|Подробности в журнале регистрации'");
		ТекстОшибки = ВернутьСтр("ru = 'Компонента AddIn.Bicrypt при получении сертификата вернула код ошибки'") + Рез;
		Операция = ВернутьСтр("ru = 'Получение сертификата криптографии.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецЕсли;
	СертификатBase64 = СтрЗаменить(СертификатBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
	СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС + "-----END CERTIFICATE-----","");
	
	ДвоичныеДанныеСертификата = Base64Значение(СертификатBase64);
	Возврат ДвоичныеДанныеСертификата;

КонецФункции

&НаКлиенте
Процедура ПолучитьИдентификаторСертификатаСбербанка(СоглашениеЭД, Параметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСертификатов = "";
	ПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ЗначениеИзКэша("ПодключаемыйМодуль");
	Рез = ПодключаемыйМодуль.ПолучитьСписокИдентСертификатовVPNKeyTLS(0, ИдентификаторыСертификатов);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = ВернутьСтр("ru = 'Ошибка получения списка доступных сертификатов.
									|Подробности в журнале регистрации'");
		ТекстОшибки = ВернутьСтр("ru = 'Компонента AddIn.Bicrypt при получении списка доступных сертификатов вернула код ошибки'")
						+ Рез;
		Операция = ВернутьСтр("ru = 'Подписание электронного документа.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ЭлектронныеДокументыСлужебныйКлиент.ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		ОбработкаВыбораСертификатаСбербанка(ТекстовыйДокумент.ПолучитьСтроку(Индекс - 1));
		Возврат
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата);
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СоответствиеСертификатов.Вставить(
										ИдентификаторСертификата,
										ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат));
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = ВернутьСтр("ru = 'Ошибка чтения сертификата.
										|Подробности см. в журнале регистрации.'");
			ТекстОшибки = ОписаниеОшибки();
			Операция = ВернутьСтр("ru = 'Чтение данных сертификата.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			Возврат;
		КонецПопытки;
	КонецЦикла;

	СписокСертификатов = Новый СписокЗначений;
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	ОО = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Сертификаты", СписокСертификатов);
	ИдентификаторСертификата = ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборСертификата",
													СтруктураПараметров, ЭтотОбъект, УникальныйИдентификатор, , , ОО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиСоглашения(НастройкиЗаполнения)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(НастройкиЗаполнения);
	
	ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла();
	
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ПространствоИменАсинхрОбмена = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
		Settings = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Settings", ПространствоИменАсинхрОбмена);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, Settings);
		
		ЭД.Проверить();
		
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует;
		
		СтруктураПоискаОрганизации = Новый Структура;
		Если ЗначениеЗаполнено(ЭД.Recipient.inn) Тогда
			СтруктураПоискаОрганизации.Вставить("ИНН", ЭД.Recipient.inn);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭД.Recipient.kpp) Тогда
			СтруктураПоискаОрганизации.Вставить("КПП", ЭД.Recipient.kpp);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭД.Recipient.name) Тогда
			СтруктураПоискаОрганизации.Вставить("Наименование", ЭД.Recipient.name);
			Объект.Наименование = ЭД.Recipient.name;
		КонецЕсли;
		
		Если СтруктураПоискаОрганизации.Количество() > 0 Тогда
			СсылкаНаОрганизацию = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
												"Организации", , СтруктураПоискаОрганизации);
			Если ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
				Объект.Организация = СсылкаНаОрганизацию;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоискаБанка = Новый Структура;
		СтруктураПоискаБанка.Вставить("Код", ЭД.Sender.bic);
		Если ЗначениеЗаполнено(ЭД.Sender.name) Тогда
			СтруктураПоискаБанка.Вставить("Наименование", ЭД.Sender.name);
			Объект.Наименование = Объект.Наименование + ?(ЗначениеЗаполнено(Объект.Наименование), " - ", "") + ЭД.Sender.name;
		КонецЕсли;
		
		СсылкаНаБанк = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
													"Банки", , СтруктураПоискаБанка);
		Если ЗначениеЗаполнено(СсылкаНаБанк) Тогда
			Объект.Контрагент = СсылкаНаБанк;
		КонецЕсли;
		
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Объект.ИдентификаторОрганизации = ЭД.Data.CustomerID;
		Объект.АдресСервера = ЭД.Data.BankServerAddress;
		Объект.ИспользуетсяКриптография = Ложь;
		Объект.Пользователь = ЭД.Data.Logon.Login.User;

	Исключение
		ТекстСообщения = ВернутьСтр("ru = 'Возникла ошибка при чтении данных из файла.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = ВернутьСтр("ru = 'Чтение настроек ЭДО из файла.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	УдалитьФайлы(ВремФайл);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПрограммуБанка(Банк)
	
	Макет = Справочники.СоглашенияОбИспользованииЭД.ПолучитьМакет("СписокБанков");
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	СоответствиеНастроек = Новый Соответствие;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИК = Макет.Область(Индекс, 2).Текст;
		ВариантПодключения = Макет.Область(Индекс, 3).Текст;
		Если ВариантПодключения = "СинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
		ИначеЕсли ВариантПодключения = "АсинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		ИначеЕсли ВариантПодключения = "ДополнительнаяОбработка" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
		ИначеЕсли ВариантПодключения = "Сбербанк" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		КонецЕсли;
		СоответствиеНастроек.Вставить(БИК, ПрограммаБанка);
	КонецЦикла;

	Возврат СоответствиеНастроек.Получить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код"));

КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ИспользуетсяКриптография(ПрограммаБанка)
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//Код процедур и функций
#КонецОбласти
