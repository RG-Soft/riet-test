&НаКлиенте
Перем ИнтервалПроверкиРезультата; //ПроверкаКонтрагентов
	 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
        		
	ЮрФизЛица = Новый Структура;
	ЮрФизЛица.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЮрФизЛица.Вставить("ЮридическоеЛицо",  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.ГоловнойКонтрагент = Неопределено;
	КонецЕсли;
	
	ВходитВХолдинг = ЗначениеЗаполнено(Объект.ГоловнойКонтрагент)
		И Объект.ГоловнойКонтрагент <> Объект.Ссылка;

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не РольДоступна("ПолныеПрава") И Не Объект.Ответственный = ТекущийПользователь Тогда
		Элементы.Проверено.Доступность = Ложь;
	КонецЕсли;
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	
	УстановитьОтборыСписков(ЗначениеОтбора);
	
	// { RGS MYurkevich 10.03.2015 17:40:40 - КонтактнаяИнформацияВТЧ
	//НаборЗаписейКонтактов = РеквизитФормыВЗначение("НаборКонтактнойИнформации");
	//КонтактнаяИнформация.ПрочитатьКонтактнуюИнформацию(НаборЗаписейКонтактов, ЗначениеОтбора);
	//ЗначениеВРеквизитФормы(НаборЗаписейКонтактов, "НаборКонтактнойИнформации");
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(); //добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
		РазместитьКонтактнуюИнформацию();
	КонецЕсли;
	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.КлассификаторЗагружен();
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	Элементы.ГруппаЗагрузкаКЛАДР.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;

	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	УправлениеФормой(ЭтаФорма);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	// Получили признак существования из регистра
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	// Если контрагент не проверен, но проверка возможна, то запускаем проверку контрагента
	Если ИспользованиеПроверкиВозможно  Тогда
		
		СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП);
		АдресХранилища 		 = ПроверкаКонтрагентов.АдресХранилищаСВосстановленнымСостояниемКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
		Иначе
			ПроверитьКонтрагента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;

	// } RGS MYurkevich 10.03.2015 17:40:51 - КонтактнаяИнформацияВТЧ
			
	УстановитьТекущуюСтраницуЮрФизЛица(ЭтаФорма);
	//УстановитьТекущуюСтраницуГоловногоКонтрагента(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 14.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 14.01.2015
                        		
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	//ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
	
	ОграничениеВидаКонтрагента = Неопределено;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И Параметры.ЗначенияЗаполнения.Свойство("ЮридическоеФизическоеЛицо", ОграничениеВидаКонтрагента) Тогда
	
		Если ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
			ИначеЕсли ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				//СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ФиксированныйМассив") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				Если ОграничениеВидаКонтрагента.Количество() = 1 Тогда
					ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ЮрЛицоНеРезидент", "Юр. лицо, за пределами РФ");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				//СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
			СписокВыбораВида.Добавить("ИндивидуальныйПредприниматель", "Индивидуальный предприниматель(ПБОЮЛ)");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Вид = "ФизическоеЛицо";
	ИначеЕсли Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮрЛицоНеРезидент Тогда
		Вид = "ЮрЛицоНеРезидент";
	ИначеЕсли Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель Тогда
		Вид = "ИндивидуальныйПредприниматель";
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид = "ОбособленноеПодразделение";                 
	//ИначеЕсли Объект.ГосударственныйОрган Тогда                                    
	//	Вид = "ГосударственныйОрган";
	Иначе
		Вид = "ЮридическоеЛицо";
	КонецЕсли;
	
	//ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
	//	ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	//
	//АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.КлассификаторЗагружен();
	//
	//ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	//Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	//
	//ПроверитьИНН = Истина;
	//ПроверитьКПП = Истина;
	//
	//ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	//
	УстановитьВидимостьЭлементов();
	//
	//УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Элементы.ГруппаОсновнойБанковскийСчет.ТекущаяСтраница = Элементы.ГруппаБанковскиеСчета;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
			
			Объект.ОсновнойДоговорКонтрагента = НовыйОбъект;
			Элементы.ГруппаОсновнойДоговорКонтрагента.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Элементы.ГруппаОсновноеКонтактноеЛицо.ТекущаяСтраница = Элементы.ГруппаКонтактныеЛица;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ВходитВХолдинг И НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Головной контрагент"" не заполнено";
		Сообщение.Поле = "ГоловнойКонтрагент";
		Сообщение.УстановитьДанные(РеквизитФормыВЗначение("Объект"));
		Сообщение.Сообщить();

		Отказ = Истина;

	КонецЕсли;
	// { RGS MYurkevich 12.03.2015 11:01:39 - КонтактнаяИнформацияВТЧ
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	// } RGS MYurkevich 12.03.2015 11:01:45 - КонтактнаяИнформацияВТЧ

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// { RGS MYurkevich 10.03.2015 17:41:21 - КонтактнаяИнформацияВТЧ
	//НаборЗаписейКонтактов = РеквизитФормыВЗначение("НаборКонтактнойИнформации");
	//КонтактнаяИнформация.ЗаписатьКонтактнуюИнформацию(НаборЗаписейКонтактов, ТекущийОбъект.Ссылка, Отказ);
	//ЗначениеВРеквизитФормы(НаборЗаписейКонтактов, "НаборКонтактнойИнформации");
	// } RGS MYurkevich 10.03.2015 17:41:31 - КонтактнаяИнформацияВТЧ	
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборыСписков(Объект.Ссылка);
	
КонецПроцедуры

//Добавлена из ЭДО
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Прочитать();
	// { RGS MYurkevich 3/15/2015 11:54:49 AM - 
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаКЛАДР.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	// } RGS MYurkevich 3/15/2015 11:54:50 AM - 
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 20.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагента();
	// } РГ-Софт Пахоменков А. 20.01.2015
	
КонецПроцедуры  // Добавлена из ЭДО

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// { РГ-Софт Пахоменков А. 20.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 20.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 15.01.2015  ПроверкаКонтрагентов
	 СостояниеКонтрагентаИзменилось = Ложь;
	// } РГ-Софт Пахоменков А. 15.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// { РГ-Софт Пахоменков А. 15.01.2015  ПроверкаКонтрагентов
	Если СостояниеКонтрагентаИзменилось И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохранитьРезультатПроверкиКонтрагентаСервер();
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 15.01.2015

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//добавила Федотова Л., РГ-Софт, 12.12.15, вопрос SLI-0006010
	УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
	
	// { RGS MYurkevich 12.03.2015 10:59:16 - КонтактнаяИнформацияВТЧ
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	// } RGS MYurkevich 12.03.2015 10:59:26 - КонтактнаяИнформацияВТЧ
	// { РГ-Софт Пахоменков А. 15.01.2015 ПроверкаКонтрагентов
	// Сохраняем адрес с результатом проверки в память, чтобы исключить дополнительное обращение на сервер
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресХранилища", АдресХранилища);	
	// } РГ-Софт Пахоменков А. 15.01.2015
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо;
	КонецЕсли;

	Если Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо Тогда
		Объект.ДокументУдостоверяющийЛичность = "";
	Иначе
		Объект.ИНН = "";
		Объект.КПП = "";
	КонецЕсли;

	УстановитьТекущуюСтраницуЮрФизЛица(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 15.01.2015
	ПроверкаКонтрагентовВидПриИзмененииНаСервере();
	// } РГ-Софт Пахоменков А. 15.01.2015

КонецПроцедуры
//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаСервере
Процедура ПриИзмененииВидаКонтрагента()
	
	Если Вид = "ФизическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Объект.ИНН                        = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП                        = "";
		Объект.ОбособленноеПодразделение  = Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Истина;
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Ложь;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	ПриИзмененииВидаКонтрагента();
	
	УстановитьВидимостьЭлементов();
	
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
	ВидПриИзмененииНаСервере();
	
	//Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
	//	Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо;
	//КонецЕсли;

	//Если Объект.ЮридическоеФизическоеЛицо = ЮрФизЛица.ЮридическоеЛицо Тогда
	//	Объект.ДокументУдостоверяющийЛичность = "";
	//Иначе
	//	Объект.ИНН = "";
	//	Объект.КПП = "";
	//КонецЕсли;

	УстановитьТекущуюСтраницуЮрФизЛица(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 15.01.2015
	ПроверкаКонтрагентовВидПриИзмененииНаСервере();
	// } РГ-Софт Пахоменков А. 15.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);

	РезультатВыбора = ВыбратьИзСписка(Список,  Элементы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		Объект.НаименованиеПолное = РезультатВыбора.Значение;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВходитВХолдингПриИзменении(Элемент)

	Если ВходитВХолдинг
		И Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
 		Объект.ГоловнойКонтрагент = Неопределено;
	иначе
		Объект.ГоловнойКонтрагент = Объект.Ссылка;
	КонецЕсли;

	УстановитьТекущуюСтраницуГоловногоКонтрагента(ЭтаФорма);

КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
	ПроверитьКонтрагента(ЭтаФорма);
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	//ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010
&НаСервереБезКонтекста
Процедура УстановитьИННОбособленногоПодразделения(Объект)
	
	Если Объект.ОбособленноеПодразделение 
		И ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		
		ИННГоловногоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
		Если Объект.ИНН <> ИННГоловногоКонтрагента Тогда
			Объект.ИНН = ИННГоловногоКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 11.12.15, вопрос SLI-0006010
&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	//КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = Справочники.КлассификаторСтранМира.Россия;

	КонтрагентФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Элементы.НаименованиеПолное.Заголовок = ?(КонтрагентФизическоеЛицо, НСтр("ru = 'ФИО'"), НСтр("ru = 'Полное наименование'"));
	Элементы.ГруппаГоловнойКонтрагент.Видимость = Объект.ОбособленноеПодразделение;
	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
	//Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаИНН.Видимость = НЕ Объект.ОбособленноеПодразделение;
	
	Элементы.КнопкаЗаполнитьРеквизитыПоИНН.Видимость = КонтрагентЗарегистрированВРФ
														И НЕ Объект.ОбособленноеПодразделение;
														//И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
	Элементы.ГруппаКПП.Видимость = ДоступноКПП(ЭтотОбъект);
	
	//Элементы.НалоговыйНомер.Видимость = НЕ КонтрагентЗарегистрированВРФ;
	Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	
	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
	Если НЕ КонтрагентЗарегистрированВРФ Тогда
		//Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'Рег. номер'");
		//Элементы.РегистрационныйНомер.Подсказка 		= НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
		//Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		//Элементы.РегистрационныйНомер.ПодсказкаВвода 	= НСтр("ru = 'Регистрационный номер в стране регистрации'");
		//Элементы.РегистрационныйНомер.Ширина 			= 31;
		//Элементы.РегистрационныйНомер.Маска 			= "";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
											|при первой постановке на учет в налоговом органе Российской Федерации'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ИначеЕсли КонтрагентФизическоеЛицо Тогда
		//Элементы.РегистрационныйНомер.Заголовок		= НСтр("ru = 'ОГРНИП'");
		//Элементы.РегистрационныйНомер.Подсказка 		= 
		//	НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
		//			   |указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		//Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		//Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		//Элементы.РегистрационныйНомер.Ширина 			= 16;
		//Элементы.РегистрационныйНомер.Маска 			= "999999999999999";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Иначе
		// Юридическое лицо
		//Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'ОГРН'");
		//Элементы.РегистрационныйНомер.Подсказка 		= 
		//	НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		//Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		//Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		//Элементы.РегистрационныйНомер.Маска 			= "9999999999999";
		//Элементы.РегистрационныйНомер.Ширина 			= 16;
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	//Элементы.ДекорацияОтступСлева.Видимость = КонтрагентФизическоеЛицо;
	
	Элементы.КодПоОКПО.Видимость = КонтрагентЗарегистрированВРФ;
	//Элементы.СтранаРегистрации.Видимость = НЕ Объект.ГосударственныйОрган;
	//Элементы.ГруппаРегистрацияКакИП.Видимость = КонтрагентФизическоеЛицо;
	//Элементы.ГруппаГосударственныйОрган.Видимость = Объект.ГосударственныйОрган;
	//Элементы.КнопкаЗаполнитьРеквизитыПоНаименованию.Видимость = КонтрагентЗарегистрированВРФ
		//И НЕ КонтрагентФизическоеЛицо 
		//И НЕ Объект.ОбособленноеПодразделение;
		//И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
КонецПроцедуры
	
//добавила Федотова Л., РГ-Софт, 11.12.15, вопрос SLI-0006010
&НаКлиентеНаСервереБезКонтекста
Функция ДоступноКПП(Форма)
	
	//КонтрагентЗарегистрированВРФ = Форма.Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонтрагентЗарегистрированВРФ = Форма.Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Россия");
	КонтрагентФизическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	Возврат НЕ КонтрагентФизическоеЛицо И КонтрагентЗарегистрированВРФ;
	
КонецФункции

&НаКлиенте
Процедура ПровереноПриИзменении(Элемент)
	
	Если Объект.Проверено Тогда
		Объект.Ответственный = ТекущийПользователь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактныхЛицПриАктивизацииСтроки(Элемент)
	
	//Изменила Федотова Л., РГ-Софт, 16.05.15, вопрос SLI-0005421
	
	//ТекДанные = Элементы.СписокКонтактныхЛиц.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//ОбновитьТелефоныКонтактногоЛица(ТекДанные.Ссылка);
	
	ТекСтрока = Элементы.СписокКонтактныхЛиц.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбновитьТелефоныКонтактногоЛица(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияНекорректногоИННОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияНекорректногоКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	
	ЗаполнитьКППпоИНН(Объект.ИНН, Объект.КПП, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКППпоИНН(Знач ИНН, КПП, БезусловноеЗаполнениеКПП = Истина) 
	
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
	// первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009
	// КПП 771201001
		
	// если не указано ИНН или заполнено КПП то прерываем выполнение операции
	Если (СтрДлина(ИНН) < 4) Тогда
		Возврат;
	КонецЕсли;
	
	ПревыеСимволыИНН = Лев(ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции
	Если (НовоеЗначениеКПП = КПП) Тогда
		Возврат;
	КонецЕсли;
	
	// если безусловно нужно поменять - меняем
	Если БезусловноеЗаполнениеКПП ИЛИ НЕ ЗначениеЗаполнено(КПП) Тогда
		КПП = НовоеЗначениеКПП;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменить КПП  на ""%1""?'"),НовоеЗначениеКПП);
	ОтветНужноМенятьКПП = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	Если ОтветНужноМенятьКПП Тогда
		КПП = НовоеЗначениеКПП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнымКонтактноеЛицо(Команда)
	
	ТекДанные = Элементы.СписокКонтактныхЛиц.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОсновноеКонтактноеЛицо = ТекДанные.Ссылка Тогда
		Объект.ОсновноеКонтактноеЛицо = Неопределено;
	Иначе
		Объект.ОсновноеКонтактноеЛицо = ТекДанные.Ссылка;
	КонецЕсли;
	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать контрагента, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	//УстановитьУсловноеОформлениеОсновногоЭлемента(СписокКонтактныхЛиц,
	//	ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("ОбъектВладелец", "Владелец.ОсновноеКонтактноеЛицо"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнымБанковскийСчет(Команда)
	
	ТекДанные = Элементы.СписокБанковскиеСчета.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	     	
	Если Объект.ОсновнойБанковскийСчет = ТекДанные.Ссылка Тогда
		Объект.ОсновнойБанковскийСчет = Неопределено;
	Иначе
		Объект.ОсновнойБанковскийСчет = ТекДанные.Ссылка;
	КонецЕсли; 
	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать контрагента, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	УстановитьУсловноеОформлениеОсновногоЭлемента(СписокБанковскиеСчета,
		ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("Ссылка", "Владелец.ОсновнойБанковскийСчет"));

КонецПроцедуры
          
&НаКлиенте
Процедура УстановитьОсновнымДоговорКонтрагента(Команда)
	
	ТекДанные = Элементы.СписокДоговоровКонтрагента.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;

	Если Объект.ОсновнойДоговорКонтрагента = ТекДанные.Ссылка Тогда
		Объект.ОсновнойДоговорКонтрагента = Неопределено;
	Иначе
		Объект.ОсновнойДоговорКонтрагента = ТекДанные.Ссылка;
	КонецЕсли; 
	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать контрагента, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	УстановитьУсловноеОформлениеОсновногоЭлемента(СписокДоговоровКонтрагента,
		ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("Ссылка", "Владелец.ОсновнойДоговорКонтрагента"));
	
	КонецПроцедуры
	
&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредставлениеНачалоВыбора(Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНачалоВыбора(Элемент, Модифицированность, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.НаборКонтактнойИнформации.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Тип) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")  Тогда
		ИмяФормыРедактирования =  "ОбщаяФорма.ВводАдреса";
	ИначеЕсли ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")  Тогда
		ИмяФормыРедактирования =  "ОбщаяФорма.ВводТелефона";
	иначе 
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыДляФормы = Новый Структура("Представление", Элемент.ТекстРедактирования);
			
	Результат = ОткрытьФормуМодально(ИмяФормыРедактирования, ПараметрыДляФормы);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ДанныеСтроки.Представление   = Результат.Представление;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда 
		ДанныеСтроки.Представление   = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияВидНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.НаборКонтактнойИнформации.ТекущиеДанные;
	
	СписокВидов = ПолучитьСписокВидовКонтактнойИнформации(ТекДанные.Тип);
	    		
	Результат = ВыбратьИзСписка(СписокВидов, Элемент);
	Если Результат <> Неопределено Тогда 
		ТекДанные.Вид = Результат.Значение;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВидовКонтактнойИнформации(Тип)
	
	СписокВидовКонтактнойИнформации = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Тип = &Тип";
	
	МассивВидовКонтактнойИнформации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокВидовКонтактнойИнформации.ЗагрузитьЗначения(МассивВидовКонтактнойИнформации);
	
	Возврат СписокВидовКонтактнойИнформации;
	
КонецФункции

// { RGS MYurkevich 10.03.2015 17:46:09 - КонтактнаяИнформацияВТЧ
&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
		
		Если ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			ПочтовыйАдресКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()

	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
	
	// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Элементы.ЮрАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Элементы.ФактАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Элементы.ПочтовыйАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Элементы.ТелефонКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, Элементы.ФаксКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, Элементы.EmailКонтрагента.ПутьКДанным);
	
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты, Элементы.ДругаяИнформацияКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
	
	// Добавление непредопределенной контактной информации
	ИсключаемыеВидыКИ	= Новый Массив;
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", , ИсключаемыеВидыКИ);
	
	ЮрФактАдресаСовпадают		= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресКонтрагента)) = СокрЛП(ПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаКонтрагента()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(ФактАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(ПочтовыйАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаКонтрагента()

	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтаФорма[ИмяПриемника]	= ЭтаФорма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Закладка Адреса, телефоны
	Если Форма.ЮрФактАдресаСовпадают Тогда
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагента;
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагента;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФактАдресКонтрагента)
		ИЛИ Форма.ФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.ФактАдресКонтрагента;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ПочтовыйАдресКонтрагента)
		ИЛИ Форма.ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.ПочтовыйАдресКонтрагента;	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
	//	
	//	Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
	//		Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
	//		Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	//	ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
	//		Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
	//		Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
	//	ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
	//		Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
	//		Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	//	Иначе
	//		Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
	//		Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	//	КонецЕсли;
	//КонецЕсли;
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.ЮрАдресКонтрагента) И НЕ Форма.ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.ЮрАдресКонтрагента;
		Если ЗначениеЗаполнено(Форма.ТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', тел: %1'"), Форма.ТелефонКонтрагента);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.ТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=': тел: %1'"), Форма.ТелефонКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.ГруппаКонтактнаяИнформация.СвернутыйЗаголовок = АдресЗаголовок;
	#Иначе
		Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = АдресЗаголовок;
	#КонецЕсли
	
КонецПроцедуры

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтаФорма, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтаФорма, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтаФорма, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформациейБП.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	РазместитьКонтактнуюИнформацию();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	ПодготовитьФормуНаСервере(); //добавила Федотова Л., РГ-Софт, 10.12.15, вопрос SLI-0006010

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "ЮрАдресКонтрагента" Тогда
		
		Если НЕ Результат.ЗначениеПоляДоИзменения = ЮрАдресКонтрагента Тогда
			
			ПриИзмененииЮрАдресаКонтрагента();
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Результат.ИмяРеквизита = "ФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.КлассификаторЗагружен();

КонецФункции

// } RGS MYurkevich 10.03.2015 17:46:20 - КонтактнаяИнформацияВТЧ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
      
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуГоловногоКонтрагента(Форма)

	Если Форма.ВходитВХолдинг Тогда
		Форма.Элементы.ГруппаГоловнойКонтрагент.ТекущаяСтраница = Форма.Элементы.ГруппаЕстьГоловнойКонтрагент;
	Иначе
		Форма.Элементы.ГруппаГоловнойКонтрагент.ТекущаяСтраница = Форма.Элементы.ГруппаНетГоловногоКонтрагента;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущуюСтраницуЮрФизЛица()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуЮрФизЛица(Форма)

	Если Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Форма.Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница = Форма.Элементы.ГруппаФизЛицо;
	Иначе
		Форма.Элементы.ГруппаСтраницыЮрФизЛицо.ТекущаяСтраница = Форма.Элементы.ГруппаЮрЛицо;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущуюСтраницуЮрФизЛица()

&НаСервере
Процедура УстановитьОтборыСписков(ЗначениеОтбора)
    	
	Если Не РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "УчетПоВсемОрганизациям") Тогда
		
		ОсновнаяОрганизация = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоговоровКонтрагента.Отбор,
													"Организация",
													ОсновнаяОрганизация,
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	КонецЕсли;

	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоговоровКонтрагента.Отбор,
													"Владелец",
													ЗначениеОтбора,
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокБанковскиеСчета.Отбор,
													"Владелец",
													ЗначениеОтбора,
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);												
													
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтактныхЛиц.Отбор,
													"ОбъектВладелец",
													ЗначениеОтбора,
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);												
												
													
	УстановитьУсловноеОформлениеОсновногоЭлемента(СписокДоговоровКонтрагента,
		ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("Ссылка", "Владелец.ОсновнойДоговорКонтрагента"));

	УстановитьУсловноеОформлениеОсновногоЭлемента(СписокБанковскиеСчета,
		ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("Ссылка", "Владелец.ОсновнойБанковскийСчет"));

	//УстановитьУсловноеОформлениеОсновногоЭлемента(СписокКонтактныхЛиц,
	//	ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента("ОбъектВладелец", "Владелец.ОсновноеКонтактноеЛицо"));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОсновногоЭлемента(Список, ПараметрыОтбора, 
			ИмяНастройки = "ОсновнойЭлемент", ПредставлениеНастройки = "Выделение основного элемента") 
	
	Если ТипЗнч(ПараметрыОтбора)<>Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ (ПараметрыОтбора.Свойство("ЛевоеЗначение") 
				И ПараметрыОтбора.Свойство("ВидСравнения") 
				И ПараметрыОтбора.Свойство("ПравоеЗначение")) Тогда
		Возврат;
	КонецЕсли;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение  = ПараметрыОтбора.ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения   = ПараметрыОтбора.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ПараметрыОтбора.ПравоеЗначение;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = ПредставлениеНастройки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента(ИмяПоляОтбораЛевое, ИмяПоляОтбораПравое, ВидСравнения = "Равно") 
	
	Возврат(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение",
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораЛевое), ВидСравненияКомпоновкиДанных[ВидСравнения],
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораПравое)));
	
КонецФункции

&НаСервере
Процедура ОбновитьТелефоныКонтактногоЛица(КонтактноеЛицо)

	СтрокаТелефонов = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Объект", КонтактноеЛицо);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	
	Элементы.ТелефоныКонтактногоЛица.Видимость = ЗначениеЗаполнено(СтрокаТелефонов);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ПроверкаКонтрагентовПриСозданииНаСервере()
	
	ИспользоватьРазделениеПоОбластямДанных = Ложь;	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);	
	
	// Получили признак существования из регистра
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	// Если контрагент не проверен, но проверка возможна, то запускаем проверку контрагента
	Если ИспользованиеПроверкиВозможно  Тогда
		
		СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП);
		АдресХранилища 		 = ПроверкаКонтрагентов.АдресХранилищаСВосстановленнымСостояниемКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
		Иначе
			ПроверитьКонтрагента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКонтрагентовПриОткрытии()
	
	//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзменениях",0.1, Истина);
	//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	
	// Если состояние контрагента не известно, то пытаемся его определить
	Если ПроверкаКонтрагентовВозможна(ЭтаФорма) И НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
	КонецЕсли;
	
	//Если Не Объект.Ссылка.Пустая() И НастройкиПредупреждений.ДокументыПоКонтрагенту Тогда
	//	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзмененияхДокументыПоКонтрагенту", 0.2, Истина);
	//КонецЕсли;               
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИННиКПП(СтруктураПараметров, Форма)
	
	ВозвращеннаяСтруктура = ОбщегоНазначенияБПКлиентСервер.ПроверитьКорректностьИННКПП(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВозвращеннаяСтруктура);
	
	ЗаполнитьЗначенияСвойств(Форма, ВозвращеннаяСтруктура);
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, ВозвращеннаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)   	

	ИННПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	//ЗаполнятьРеквизитыПоИНН = Ложь;
	//ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СтранаРегистрацииПриИзмененииНаСервере();
	
	//УправлениеФормой(ЭтаФорма);
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагента()
	
	// Если ИНН или КПП некорректные, или проверка не включена, то не запускаем проверку
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПроверитьКонтрагента(ЭтаФорма);
		
		// Прерываем предыдущую проверку
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	// Запуск фонового задания для проверки контрагента
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент", 	Объект.Ссылка);
	ПараметрыЗапуска.Вставить("ИНН", 			Объект.ИНН);
	ПараметрыЗапуска.Вставить("КПП", 			Объект.КПП);
	ПараметрыЗапуска.Вставить("АдресХранилища", Форма.АдресХранилища);
	
	ПроверкаКонтрагентовВызовСервера.ПроверитьКонтрагентаПриИзменении(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРезультатПроверкиКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовВозможна(Форма) И ЗначениеЗаполнено(Форма.СостояниеКонтрагента) Тогда
		
		Если Объект.ОбособленноеПодразделение Тогда
			
			// { РГ-Софт Пахоменков А. 15.01.2015
			Форма.НадписьПоясненияНекорректногоКПП = "";
			// } РГ-Софт Пахоменков А. 15.01.2015	
			ТекстПредупрежденияКПП = ПроверкаКонтрагентовВызовСервера.ПредставлениеРезультатаПроверкиКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, 
				Форма.АдресХранилища, Форма.НадписьПоясненияНекорректногоКПП);
			
			// Для обособленного подразделения предупреждение пишем рядом с КПП 
			Форма.НадписьПоясненияНекорректногоИНН = Неопределено;
			Форма.НадписьПоясненияНекорректногоКПП = ТекстПредупрежденияКПП;
		Иначе
			
			// { РГ-Софт Пахоменков А. 15.01.2015
			Форма.НадписьПоясненияНекорректногоИНН = "";
			// } РГ-Софт Пахоменков А. 15.01.2015
			ТекстПредупрежденияИНН = ПроверкаКонтрагентовВызовСервера.ПредставлениеРезультатаПроверкиКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, 
				Форма.АдресХранилища, Форма.НадписьПоясненияНекорректногоИНН);
				
			// Для физ лица или юр лица предупреждение пишем рядом с ИНН 
			Форма.НадписьПоясненияНекорректногоИНН = ТекстПредупрежденияИНН;
			Форма.НадписьПоясненияНекорректногоКПП = Неопределено;
		КонецЕсли;
		
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверкаКонтрагентовВозможна(Форма)
	
	Если НЕ Форма.ИспользованиеПроверкиВозможно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 14.01.2015
	Если Форма.Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Россия") Тогда
	// } РГ-Софт Пахоменков А. 14.01.2015
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ИННиКППКорректны(Форма) Тогда
		Возврат Ложь;   
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИННиКППКорректны(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	Если НЕ (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
		И НЕ (Объект.ИННВведенКорректно и ЭтоФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагента()
	
	СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, АдресХранилища);
	Если НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		// Проверяем результат через 1,3 и 9 сек
		Если ИнтервалПроверкиРезультата < 9 Тогда
			ИнтервалПроверкиРезультата = ИнтервалПроверкиРезультата * 3;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
			Возврат;
		КонецЕсли;
	Иначе
		// Результат получен
		СостояниеКонтрагентаИзменилось = Истина;
		ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Найти(НавигационнаяСсылка, "ПодробнееОПроверкеКонтрагентов") > 0 Тогда
		ПроверкаКонтрагентовКлиент.ОткрытьИнструкциюПоИспользованиюСервиса(СтандартнаяОбработка);
	Иначе
		//ОбработатьСитуациюВыбораДубля(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатПроверкиКонтрагентаСервер()
	
	// { РГ-Софт Пахоменков А. 15.01.2015
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагента(Объект, АдресХранилища);	
	// } РГ-Софт Пахоменков А. 15.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ИННПриИзмененииНаСервере()
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	//ПроверитьДубли(ЭтаФорма);
	
	//Не будем принудительно заполнять
	Если НЕ Объект.ОбособленноеПодразделение 
		//И Объект.СтранаРегистрации = Справочники.КлассификаторСтранМира.Россия
		И ЗначениеЗаполнено(Объект.ИНН)
		И Объект.ИННВведенКорректно 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
		И (НЕ ЗначениеЗаполнено(ЮрАдресКонтрагента) 
		ИЛИ ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		
		ОписаниеОшибки = "";
		ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
		
	Иначе
		УстановитьВидимостьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	ПроверитьИНН = Ложь;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	//ПроверитьДубли(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтранаРегистрацииПриИзмененииНаСервере()
	
	Если Объект.СтранаРегистрации <> Справочники.КлассификаторСтранМира.Россия Тогда
		Объект.КПП = "";
	Иначе
		Объект.РегистрационныйНомер = "";
	КонецЕсли;
	
	//добавила Федотова Л., РГ-Софт, 12.12.15, вопрос SLI-0006010
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	//ПроверитьДубли(ЭтаФорма);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры


&НаСервере
Процедура ПроверкаКонтрагентовВидПриИзмененииНаСервере() //ВидПриИзмененииНаСервере()
	
	//...
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	//ПроверитьДубли(ЭтаФорма);
	//
	УстановитьВидимостьЭлементов();
	
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДляПроверкиИННиКПП(Объект, ПроверятьИНН, ПроверятьКПП)
	
	СтруктураДляПроверкиИННиКПП = Новый Структура();
	
	СтруктураДляПроверкиИННиКПП.Вставить("СтранаРегистрации",         			Объект.СтранаРегистрации);
	СтруктураДляПроверкиИННиКПП.Вставить("ИНН",                       			Объект.ИНН);
	СтруктураДляПроверкиИННиКПП.Вставить("КПП",                       			Объект.КПП);
	СтруктураДляПроверкиИННиКПП.Вставить("ЮридическоеФизическоеЛицо", 			Объект.ЮридическоеФизическоеЛицо);
	СтруктураДляПроверкиИННиКПП.Вставить("ОбособленноеПодразделение", 			Объект.ОбособленноеПодразделение);
	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьИНН",              			ПроверятьИНН);
	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьКПП",              			ПроверятьКПП);
	СтруктураДляПроверкиИННиКПП.Вставить("ЦветВыделенияНекорректногоЗначение", 	ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);
	
	Возврат СтруктураДляПроверкиИННиКПП;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	//Сообщить("Заполнение пока не работает");
	//Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если Объект.ОбособленноеПодразделение Тогда
	//	ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
	//	Возврат;
	//ИначеЕсли Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
	Если Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Россия") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	ИначеЕсли НЕ Объект.ИННВведенКорректно Тогда
		ПоказатьПредупреждение(, Строка(НадписьПоясненияНекорректногоИНН));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда 
	//	ИЛИ (ЗначениеЗаполнено(ЮрАдресКонтрагента) 
	//	И ЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);      
	             
	// Проверка юр.лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП)
	// { РГ-Софт Пахоменков А. 16.01.2015
	//Если ВРег(Вид) = ВРег("ЮридическоеЛицо")
	Если ВРег(Объект.ЮридическоеФизическоеЛицо) = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
	// } РГ-Софт Пахоменков А. 16.01.2015   	
		И ПроверкаКонтрагентовВозможна(ЭтаФорма) 
		И НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
	КонецЕсли;
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда   			
			// { РГ-Софт Пахоменков А. 20.01.2015 ПроверкаКонтрагентов
			Сообщить("Не настроена учетная запись интернет поддержки, обратитесь к администратору");
			// } РГ-Софт Пахоменков А. 20.01.2015    		
			//ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
			//	|необходимо подключиться к интернет-поддержке пользователей.
			//	|Подключиться сейчас?'");
			//ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтаФорма);
			//ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);   		
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Если ЭтоЮрЛицо Тогда
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(Объект.ИНН);
	Иначе
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(Объект.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки; 		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
		
	//НаименованияАвтозаполнения.Очистить();
	//НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	//НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если ЭтоЮрЛицо Тогда
		
		 //Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации("ЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации("ФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
		
		ЗаполнитьЭлементКонтактнойИнформации("ПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрПочтовыйАдресаСовпадают = Истина;
		
		 //Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации("ТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
		
		 //Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
			
		КПППриИзмененииНаСервере();	
		
		// Проверка юр.лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП)
		Если ИспользованиеПроверкиВозможно  Тогда
			
			СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(
				Объект.Ссылка, Объект.ИНН, Объект.КПП);
			АдресХранилища 		 = ПроверкаКонтрагентов.АдресХранилищаСВосстановленнымСостояниемКонтрагента(
				Объект.Ссылка, Объект.ИНН, Объект.КПП, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
				ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
			Иначе
				ПроверитьКонтрагента(ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		//СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		//Объект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
		//Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	//УправлениеФормой(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтаФорма[ИмяРеквизита]   = СтруктураДанных.Представление;
	
КонецПроцедуры

Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКПП.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
	КПППриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП") Тогда
		
		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
		
		//ПроверитьКонтрагента();
		ЗапуститьПроверкуКонтрагента();
		
	//ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований") Тогда
	//	
	//	УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  