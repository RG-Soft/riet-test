
&НаКлиенте
Процедура LoadFromExcel(Команда)
	
	ТекстВопроса = "Вы действительно хотите загрузить данные из Excel?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НастройкиДиалога = Новый Структура;
		НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
		НастройкиДиалога.Вставить("Budgets", ЭтотОбъект);
		
		Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
		ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура LoadData(Результат, Параметр) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
	НастройкиДиалога.Вставить("Rental", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура LoadFile(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, AP)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, AP);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, AP)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ТекстОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры = "SourceLocation,DestinationLocation,MileageNonMobilization,SummerMobilization,WinterMobilization,MOT";
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекстЯчейки = "Source Location" Тогда
			СтруктураКолонокИИндексов.SourceLocation = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Destination Location" Тогда
			СтруктураКолонокИИндексов.DestinationLocation = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Mileage Non Mobilization" Тогда
			СтруктураКолонокИИндексов.MileageNonMobilization = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Summer Mobilization" Тогда
			СтруктураКолонокИИндексов.SummerMobilization = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "Winter Mobilization" Тогда
			СтруктураКолонокИИндексов.WinterMobilization = НомерКолонки;
		ИначеЕсли ТекстЯчейки = "MOT" Тогда
			СтруктураКолонокИИндексов.MOT = НомерКолонки;
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции

&НаСервере	
Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP) 
	
	Waherouses = Новый ТаблицаЗначений;
	Waherouses.Колонки.Добавить("Warehouse");
	НомерСтроки = 0;
	н = 0;
	i = 0;
	Для Каждого Элемент Из ТаблицаExcel Цикл
		НомерСтроки = НомерСтроки + 1;
		ЕстьОшибки = Ложь;
		Source = Справочники.Warehouses.НайтиПоНаименованию(Элемент.SourceLocation);
		Destination = Справочники.Warehouses.НайтиПоНаименованию(Элемент.DestinationLocation);
		MOT = Справочники.MOTs.НайтиПоКоду(Элемент.MOT);
		
		Если Не ЗначениеЗаполнено(Source) Тогда
			СтрокаТаблицы = Waherouses.Добавить();
			СтрокаТаблицы.Warehouse = Элемент.SourceLocation;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Destination) Тогда
			СтрокаТаблицы = Waherouses.Добавить();
			СтрокаТаблицы.Warehouse = Элемент.DestinationLocation;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(MOT) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определился 'MOT' для строки - " + НомерСтроки);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Продолжить
		КонецЕсли;
		
		МаршрутСсылка = Справочники.DistancesBetweenWarehouses.ПроверимМаршрут(Source, Destination, MOT);
		
		Попытка
			Если ЗначениеЗаполнено(МаршрутСсылка) Тогда
				i = i + 1;
				Маршрут = МаршрутСсылка.ПолучитьОбъект();
				Маршрут.MileageNonMobilization = ?(ЗначениеЗаполнено(Элемент.MileageNonMobilization), Число(Элемент.MileageNonMobilization), 0);
				Маршрут.MileageSummerMobilization = ?(ЗначениеЗаполнено(Элемент.SummerMobilization), Число(Элемент.SummerMobilization), 0);
				Маршрут.MileageWinterMobilization = ?(ЗначениеЗаполнено(Элемент.WinterMobilization), Число(Элемент.WinterMobilization), 0);
			Иначе
				н = н + 1;
				Маршрут = Справочники.DistancesBetweenWarehouses.СоздатьЭлемент();
				Маршрут.SourceLocation = Source;
				Маршрут.DestinationLocation = Destination;
				Маршрут.MOT = MOT;
				Маршрут.MileageNonMobilization = ?(ЗначениеЗаполнено(Элемент.MileageNonMobilization), Число(Элемент.MileageNonMobilization), 0);
				Маршрут.MileageSummerMobilization = ?(ЗначениеЗаполнено(Элемент.SummerMobilization), Число(Элемент.SummerMobilization), 0);
				Маршрут.MileageWinterMobilization = ?(ЗначениеЗаполнено(Элемент.WinterMobilization), Число(Элемент.WinterMobilization), 0);
			КонецЕсли;
			Маршрут.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Маршрут: " + Source + "-" + Destination + ", MOT - " + MOT + " не удалось записать");
		КонецПопытки;
		
	КонецЦикла;
	
	Waherouses.Свернуть("Warehouse");
	Для Каждого Строка Из Waherouses Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определился 'Warehouse' для - " + Строка.Warehouse);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено новых направлений - " + н);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При подгрузке изменено направлений - " + i);
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблонExcel(Команда)
	
	Адрес = ПолучитьАдрес();
	ИмяФайла = "Mileage loading template.xlsx";
	ПолучитьФайл(Адрес, ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(Справочники.DistancesBetweenWarehouses.ПолучитьМакет("ШаблонФайлаЗагрузки"));
	
КонецФункции

