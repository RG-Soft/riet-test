
Перем мРегламентноеЗадание Экспорт;
Перем мРегламентноеЗаданиеФоновыйОбмен Экспорт;

//Функция определяет есть ли для данной настройки Автоматический обмен данными
Функция ЭтоНастройкаАвтоматическогоОбменаДанными() Экспорт
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ Не ПустаяСтрока(КаталогПроверкиДоступности);
	
КонецФункции
	
//Функция по настройке определяет нужно ли для нее периодически определять необходимость обмена данными
Функция ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() Экспорт
	
	Возврат Не ПустаяСтрока(КаталогПроверкиДоступности);
	
КонецФункции

// при записи
Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	// надо проверить наличие одной записи в регистре сведений
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
		
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(Ссылка);	
			
	НаборЗаписейПараметров.Прочитать();
		
	Если НаборЗаписейПараметров.Количество() = 1 Тогда
		// запись есть, ничего делать не надо
		Возврат;
	КонецЕсли;
	
	// добавляем только одну запись и все
	ЗаписьДатПараметров = НаборЗаписейПараметров.Добавить();
	ЗаписьДатПараметров.НастройкаОбменаДанными = Ссылка;
		
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка при записи изменений в настройку обмена """ + Ссылка + """ : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли
	КонецПопытки;	
				
КонецПроцедуры

Функция НайтиРеглЗаданиеПоПараметру(УникальныйНомерЗадания)
	
	Попытка
		
		Если НЕ ПустаяСтрока(УникальныйНомерЗадания) Тогда
			
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			
		Иначе
			
			ТекущееРегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;
		
    КонецПопытки;
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции

Функция НайтиРегламентноеЗаданиеПоНастройке() Экспорт
	
	ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗадание);
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции

Функция НайтиРегламентноеЗаданиеФоновыйОбменПоНастройке() Экспорт
	
	ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗаданиеФоновыйОбмен);
	
	Возврат ТекущееРегламентноеЗадание;	
		
КонецФункции

Процедура УстановитьПараметрыРегламентногоЗадания(РеквизитЗадания, ПараметрЗадания, КлючРегламентногоЗадания, Постфикс = "")
	
	Если ПараметрЗадания = Неопределено Тогда
		
		РеквизитЗадания = "";
		
	Иначе	
		
		РеквизитЗадания = Строка(ПараметрЗадания.УникальныйИдентификатор);
		
		ПараметрЗадания.Наименование = Наименование + Постфикс;
		// генерируем уникальный ключ, что бы в один момент времени 2 регламентных задания не выполнялись
		Если ПустаяСтрока(ПараметрЗадания.Ключ) Тогда
			ПараметрЗадания.Ключ = КлючРегламентногоЗадания;
		КонецЕсли;
		
		Массив = Новый Массив();
		Массив.Добавить(Код);
		
		ПараметрЗадания.Параметры = Массив;
		
		НадоПисать = Ложь;
		Если ПараметрЗадания.Параметры.Количество()<>Массив.Количество() Тогда
			НадоПисать = Истина;
		Иначе 
			Сч = 0;
			Для Каждого ЭлМассива Из Массив Цикл
				Если ЭлМассива<>ПараметрЗадания.Параметры[Сч] Тогда
					НадоПисать = Истина;
					Прервать;
				КонецЕсли; 
				Сч = Сч + 1;
			КонецЦикла; 
		КонецЕсли;
		
		Если НадоПисать Тогда
			ПараметрЗадания.Записать();
		КонецЕсли;
					
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьОбъектРегламентногоЗадания(ОбычноеРегламентноеЗадание = Истина) Экспорт
	
	Если ОбычноеРегламентноеЗадание Тогда
		Задание = НайтиРегламентноеЗаданиеПоНастройке();
	Иначе
		Задание = НайтиРегламентноеЗаданиеФоновыйОбменПоНастройке();
	КонецЕсли;
	
	Возврат Задание;	
	
КонецФункции

Процедура УстановитьЗначенияПеременныхРегламентныхНастроек() Экспорт
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = ПолучитьОбъектРегламентногоЗадания(Истина);
			
	КонецЕсли;
	
	Если мРегламентноеЗаданиеФоновыйОбмен = Неопределено Тогда
		
		мРегламентноеЗаданиеФоновыйОбмен = ПолучитьОбъектРегламентногоЗадания(Ложь);
			
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьДлинуСтрокиХранилища(Хранилище) Экспорт
	
	ТекстПравилаОбмена = Хранилище.Получить();
	РазмерСтроки = СтрДлина(ТекстПравилаОбмена);
	Возврат РазмерСтроки;
	
КонецФункции

// Перед записью
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияПлатформыИнформационнойБазыДляПодключения) Тогда
		ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ТипНастройки) Тогда
		ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Тип настройки""", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Узел""", Отказ);
	КонецЕсли;
	
	Если OnLineОбмен Тогда
		
		РазмерОсновногоХранилищаПравил = ПолучитьДлинуСтрокиХранилища(ПравилаОбмена);
		
		Если РазмерОсновногоХранилищаПравил = 0 Тогда
			
			ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заданы правила обмена данными для выгрузки в базу обмена", Отказ);		
			
		КонецЕсли;			
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
			
			Если БазоваяПоставка Тогда
				
				ПроцедурыОбменаДанными.СообщитьОбОшибке("В базовой версии недоступен Режим обмена через COM - соединение", Отказ);	
				
			КонецЕсли;
			
			Если НЕ ПроизводитьОтправкуСообщений Тогда
				
				ПроцедурыОбменаДанными.СообщитьОбОшибке("В режиме обмена через COM - соединение должна быть выполнена выгрузка данных", Отказ);	
				
			КонецЕсли;
			
			Если ПроизводитьПриемСообщений Тогда
			
				РазмерХранилищаПравилЗагрузки = ПолучитьДлинуСтрокиХранилища(ПравилаОбменаДляПриемника);
				
				Если РазмерХранилищаПравилЗагрузки = 0 Тогда
					
					ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заданы правила для выгрузки из базы обмена в текущую базу", Отказ);		
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипИнформационнойБазыДляПодключения Тогда
				
				Если НЕ ЗначениеЗаполнено(КаталогИнформационнойБазыДляПодключения) Тогда
					ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Каталог информационной базы для подключения""", Отказ);
				КонецЕсли;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(ИмяСервераИнформационнойБазыДляПодключения) Тогда
					ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Сервер 1С:Предприятия""", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ИмяИнформационнойБазыНаСервереДляПодключения) Тогда
					ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Имя информационной базы""", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
			ПроцедурыОбменаДанными.СообщитьОбОшибке("Режим обмена через COM - соединение возможно только для обмена по правилам обмена", Отказ);		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНастройкаАвтоматическогоОбменаДанными() Тогда
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			ПроцедурыОбменаДанными.СообщитьОбОшибке("Не заполнено поле ""Пользователь"". Автоматический обмен по такой настройке невозможен.", Отказ);	
		КонецЕсли;
				
	КонецЕсли;
	
	
	// работа с регламентными заданиями
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	Если ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания Тогда
		
		Если мРегламентноеЗадание <> Неопределено Тогда
			мРегламентноеЗадание.Использование = Ложь;			
		КонецЕсли;
		
		Если мРегламентноеЗаданиеФоновыйОбмен <> Неопределено Тогда
			мРегламентноеЗаданиеФоновыйОбмен.Использование = Ложь;			
		КонецЕсли;
			
	Иначе
		
		// если оба выключены регл задания - то включаем основное регл задание
		Если мРегламентноеЗадание = Неопределено Тогда
			
			Если НЕ OnLineОбмен 
				ИЛИ (OnLineОбмен И мРегламентноеЗаданиеФоновыйОбмен = Неопределено) Тогда
			
				ПроцедурыОбменаДанными.СообщитьОбОшибке("Не выбрано регламентное задание для настройки обмена.", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если мРегламентноеЗадание <> Неопределено
			И мРегламентноеЗаданиеФоновыйОбмен <> Неопределено Тогда
			
			Если (мРегламентноеЗадание.Использование
				И мРегламентноеЗаданиеФоновыйОбмен.Использование)
				ИЛИ (мРегламентноеЗадание.Использование = Ложь
				И мРегламентноеЗаданиеФоновыйОбмен.Использование = Ложь) Тогда
				
				мРегламентноеЗадание.Использование = Истина;
				мРегламентноеЗаданиеФоновыйОбмен.Использование = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли мРегламентноеЗадание <> Неопределено Тогда
			
			мРегламентноеЗадание.Использование = Истина;
			
		ИначеЕсли мРегламентноеЗаданиеФоновыйОбмен <> Неопределено Тогда
			
			мРегламентноеЗаданиеФоновыйОбмен.Использование = OnLineОбмен;
							
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если мРегламентноеЗадание <> Неопределено 
		И Не ПустаяСтрока(мРегламентноеЗадание.Ключ) Тогда
		
		КлючРегламентногоЗадания = мРегламентноеЗадание.Ключ;
		
	ИначеЕсли мРегламентноеЗаданиеФоновыйОбмен <> Неопределено 
		И Не ПустаяСтрока(мРегламентноеЗаданиеФоновыйОбмен.Ключ) Тогда
		
	    КлючРегламентногоЗадания = мРегламентноеЗаданиеФоновыйОбмен.Ключ;
		
	Иначе
		
		КлючРегламентногоЗадания = Строка(Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, мРегламентноеЗадание, КлючРегламентногоЗадания);
	УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеФоновыйОбмен, мРегламентноеЗаданиеФоновыйОбмен, КлючРегламентногоЗадания, "_Фон");
				
	// в зависимости от типа настройки очищаем настройки остальных типов
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		КаталогОбменаИнформацией = СокрЛП(КаталогОбменаИнформацией);
		
		FTPАдресОбмена = "";
		ПользовательFTPСоединения = "";
		ПарольFTPСоединения = "";		
				
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		Если ПустаяСтрока(ПользовательFTPСоединения) Тогда
			ПарольFTPСоединения = "";	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПортFTPСоединения) Тогда
			ПортFTPСоединения = 21;	
		КонецЕсли;
		
		КаталогОбменаИнформацией = "";
			
	КонецЕсли;
		
	КаталогПроверкиДоступности = СокрЛП(КаталогПроверкиДоступности);
	
	ТипУзлаИнформационнойБазы = Новый(ТипЗнч(УзелИнформационнойБазы));
			
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегламентноеЗадание = "";
	РегламентноеЗаданиеФоновыйОбмен = "";
	
	мРегламентноеЗадание = Неопределено;
	мРегламентноеЗаданиеФоновыйОбмен = Неопределено;
	
КонецПроцедуры

Процедура УстановитьРежимРегламетныхЗадач(НуженРежимФоновогоОбмена) Экспорт
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	Если мРегламентноеЗадание = Неопределено
		ИЛИ мРегламентноеЗаданиеФоновыйОбмен = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (НуженРежимФоновогоОбмена
		И мРегламентноеЗаданиеФоновыйОбмен.Использование = Истина)
		ИЛИ
		(НЕ НуженРежимФоновогоОбмена 
		И мРегламентноеЗадание.Использование = Истина) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НуженРежимФоновогоОбмена Тогда
		
		мРегламентноеЗаданиеФоновыйОбмен.Использование = Истина;
		мРегламентноеЗадание.Использование = Ложь;
		
	Иначе
		
		мРегламентноеЗаданиеФоновыйОбмен.Использование = Ложь;
		мРегламентноеЗадание.Использование = Истина;
		
	КонецЕсли;
	
	мРегламентноеЗадание.Записать();
	мРегламентноеЗаданиеФоновыйОбмен.Записать();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	Если мРегламентноеЗадание <> Неопределено Тогда
		мРегламентноеЗадание.Удалить();
	КонецЕсли;
	
	Если мРегламентноеЗаданиеФоновыйОбмен <> Неопределено Тогда
		мРегламентноеЗаданиеФоновыйОбмен.Удалить();
	КонецЕсли;
	
КонецПроцедуры
