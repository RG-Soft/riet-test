
#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОС-6)
// Утверждена постановлением Госкомстата России от 21.01.2003 № 7
// Возвращаемое значение:
//  Табличный документ - печатная форма инвентарной карточки ОС
Функция ПечатьОС6_2003(ДатаСведений, Организация) 
	
	Макет = ПолучитьМакет("ОС6");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	ТабДок = Новый ТабличныйДокумент();
	
	//Последние сведения об ОС
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеАмортизации.СтоимостьБУ КАК СтоимостьДляВычисленияАмортизации,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОСвОрганизации) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОС_01) КАК СчетНачисленияАмортизации,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный) КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	НачислениеАмортизации.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение.Наименование,
	|	ПервоначальныеСведения.ОсновноеСредство,
	|	ПервоначальныеСведения.ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(
	|				&ДатаСведений,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизации
	|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаСведений,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	
	//"ВЫБРАТЬ
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения,
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации,
	//|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	//|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость,
	//|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	//|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
	//|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	//|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение.Наименование,
	//|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство,
	//|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер
	//|ИЗ
	//|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	//|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	//|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	//|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//|
	//|ГДЕ
	//|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация";
	
	ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
	ТекущиеСведенияОС.Следующий();
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТекущиеСведенияОС.ОсновноеСредство) Тогда
		Сообщить("На момент формирования отчета основное средство не принималось к учету в указанной организации."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат неопределено;
	КонецЕсли; 
	
	СчетУчетаСтоимостиБУ = ТекущиеСведенияОС.СчетУчета;
	СрокИспользования   = ТекущиеСведенияОС.СрокПолезногоИспользования;
	
	Отбор  = Новый Структура( "ОсновноеСредство", Ссылка);
	
	Шапка.Параметры.Организация       = Организация;
	Шапка.Параметры.Подразделение     = ТекущиеСведенияОС.МестонахождениеНаименование;
	Шапка.Параметры.НаименованиОС     = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(НаименованиеПолное),Наименование,НаименованиеПолное);
	Шапка.Параметры.НомерДок          = ЭтотОбъект.Код; //ТекущиеСведенияОС.ИнвентарныйНомер;
	Шапка.Параметры.ДатаДок           = Формат(ДатаСведений,"ДФ=dd.MM.yyyy");
	Шапка.Параметры.МестоНахождениеОС = ТекущиеСведенияОС.МестонахождениеНаименование;
	Шапка.Параметры.ИзготовительОС    = Изготовитель;
	Шапка.Параметры.КодПоОКОФ         = КодПоОКОФ.Код;
	Шапка.Параметры.НомерГруппы       = АмортизационнаяГруппа;
	Шапка.Параметры.НомерПаспорта     = НомерПаспорта;
	Шапка.Параметры.ЗаводскойНомер    = ЗаводскойНомер;
	Шапка.Параметры.ИнвентарныйНомер  = ТекущиеСведенияОС.ИнвентарныйНомер;
	Шапка.Параметры.СубСчет           = Строка(СчетУчетаСтоимостиБУ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.Состояние,
		|	СостоянияОСОрганизаций.ДатаСостояния,
		|	СобытияОСОрганизаций.НазваниеДокумента,
		|	СобытияОСОрганизаций.НомерДокумента,
		|	СобытияОСОрганизаций.Событие,
		|	СостоянияОСОрганизаций.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО СобытияОСОрганизаций.Период = СостоянияОСОрганизаций.ДатаСостояния И СобытияОСОрганизаций.Регистратор = СостоянияОСОрганизаций.Регистратор
		|
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация И
		|	СостоянияОСОрганизаций.Организация = &Организация И
		|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство И
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СобытияОСОрганизацийСрезПоследних.Период,
		|	СобытияОСОрганизацийСрезПоследних.НазваниеДокумента,
		|	СобытияОСОрганизацийСрезПоследних.НомерДокумента,
		|	СобытияОСОрганизацийСрезПоследних.Событие,
		|	СобытияОСОрганизацийСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство И Организация = &Организация И Событие.ВидСобытияОС В (&МедернизацияИКапРемонт)) КАК СобытияОСОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);

	
	Запрос.УстановитьПараметр("МедернизацияИКапРемонт", ВидыСобытий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаПринятия     = '00010101';
	ДокументПринятия = "";
	
	ДатаВвода     = '00010101';
	ДокументВвода = "";
	ДокументВводаНомер = "";
	
	ДатаСписания       = '00010101';
	ДокументСписания   = "";
	РегистраторСписания = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Состояние   = Перечисления.СостоянияОС.ПринятоКУчету Тогда
			 ДатаПринятия        = Выборка.ДатаСостояния;
			 ДокументПринятия    = Выборка.НазваниеДокумента;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.ВведеноВЭксплуатацию Тогда
			 ДатаВвода           = Выборка.ДатаСостояния;
			 ДокументВвода       = Выборка.НазваниеДокумента;
			 ДокументВводаНомер  = Выборка.НомерДокумента;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета Тогда
			 ДатаСписания        = Выборка.ДатаСостояния;
			 ДокументСписания    = Выборка.НазваниеДокумента;
			 РегистраторСписания = Выборка.Регистратор;
		Иначе
			ДатаПоследнейМодернизации     = Выборка.ДатаСостояния;
			ДокументПоследнейМодернизации = Выборка.НазваниеДокумента;
		КонецЕсли; 
	КонецЦикла;

	Шапка.Параметры.ДатаВвода    = ДатаПринятия;
	Шапка.Параметры.ДатаСписания = ДатаСписания;

	ТабДок.Вывести(Шапка);

	// Сведения об объекте ОС на дату передачи	
	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаСписания) Тогда

		ШапкаРазделов1и2.Параметры.ДатаВыпуска        = ДатаВыпуска;
		ШапкаРазделов1и2.Параметры.ДатаКапремонта     = ДатаПоследнейМодернизации;
		ШапкаРазделов1и2.Параметры.ДокументВвода      = ДокументВвода; 
		ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ДокументВводаНомер;
		ШапкаРазделов1и2.Параметры.ДокументВводаДата  = ДатаВвода;
		
		Если ТипЗнч(РегистраторСписания) = Тип("ДокументСсылка.ПередачаОС") Тогда
			ШапкаРазделов1и2.Параметры.СрокЭксплуатации = Цел((ДатаСписания - ДатаВвода) / 2592000);
			
			// Износ и остаточная стоимость ОС  на момент передачи
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
			|	ВЫБОР КОГДА (СтоимостьОС_БУ.Субконто1) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ СтоимостьОС_БУ.СуммаОборотКт КОНЕЦ КАК СтоимостьБУ,
			|	ВЫБОР КОГДА (АмортизацияОС_БУ.Субконто1) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ АмортизацияОС_БУ.СуммаОборотДт КОНЕЦ КАК АмортизацияБУ
			|ИЗ
			|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&МоментВыбытия, Организация = &Организация И ОсновноеСредство = &ОС) КАК ОС_БУ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВыбытия, &МоментВыбытия, Период, , &ВидСубконтоОС, Организация = &Организация И Субконто1 = &ОС) КАК СтоимостьОС_БУ
			|		ПО ОС_БУ.СчетУчета = СтоимостьОС_БУ.Счет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВыбытия, &МоментВыбытия, Период, , &ВидСубконтоОС, Организация = &Организация И Субконто1 = &ОС) КАК АмортизацияОС_БУ
			|		ПО ОС_БУ.СчетНачисленияАмортизации = АмортизацияОС_БУ.Счет";
			
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидСубконтоОС",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
			Запрос.УстановитьПараметр("ОС",   Ссылка);
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(РегистраторСписания.ДокПодготовкаКПередачеОС) Тогда
				Запрос.УстановитьПараметр("МоментВыбытия", Новый МоментВремени(ДатаСписания,РегистраторСписания));
			Иначе
				//Производилась подготовка к передаче.
				//Накопленную амортизацию и остаточную стоимость необходимо определять при проведения документа подготовки к передаче.
				Запрос.УстановитьПараметр("МоментВыбытия", Новый МоментВремени(РегистраторСписания.ДокПодготовкаКПередачеОС.Дата,РегистраторСписания.ДокПодготовкаКПередачеОС));
			КонецЕсли;	
			СостояниеНаМоментПередачи = Запрос.Выполнить().Выгрузить();
			
			Если СостояниеНаМоментПередачи.Количество()>0 Тогда
				ШапкаРазделов1и2.Параметры.СуммаНачисленнойАммортизации = СостояниеНаМоментПередачи[0].АмортизацияБУ;
				ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость          = СостояниеНаМоментПередачи[0].СтоимостьБУ-СостояниеНаМоментПередачи[0].АмортизацияБУ;
			Иначе
				ШапкаРазделов1и2.Параметры.СуммаНачисленнойАммортизации = "";
				ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость          = "";
			КонецЕсли; 
		Иначе
			
			ШапкаРазделов1и2.Параметры.СуммаНачисленнойАммортизации = "";
			ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость          = "";
		КонецЕсли;
		
	Иначе
		ШапкаРазделов1и2.Параметры.ДокументВвода      = "Акт";
		Если ДокументВводаНомер = "" Тогда
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = Выборка.Регистратор.Номер;
		Иначе
			ШапкаРазделов1и2.Параметры.ДокументВводаНомер = ДокументВводаНомер;
		КонецЕсли;
		ШапкаРазделов1и2.Параметры.ДокументВводаДата  = ДатаВвода;
	КонецЕсли;

	ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СрокИспользования;

	// Балансовая стоимость ОС на момент поступления
	ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;

	ТабДок.Вывести(ШапкаРазделов1и2);
	ТабДок.Вывести(ШапкаРаздела3);
	ТабДок.Вывести(СтрокиРаздела3);

	// Сведения о приемке, внутренних перемещениях и выбытии	
	ТабДок.Вывести(ШапкаРаздела4);

	ВыборкаЗаписей = РегистрыСведений.СобытияОСОрганизаций.Выбрать(,ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	Пока ВыборкаЗаписей.Следующий() Цикл

		Если ВыборкаЗаписей.Организация <> Организация Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОперация = ВыборкаЗаписей.Событие;

		Если (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.ПринятиеКУчету)
			И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию)
			И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.ВнутреннееПеремещение)
			И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.Списание) 
			И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.Передача) 
			Тогда
			Продолжить;
		КонецЕсли;

		СтрокаРаздела4.Параметры.ДатаНомерДокумента = ВыборкаЗаписей.НазваниеДокумента + " № "+ВыборкаЗаписей.НомерДокумента+" от "+Формат(ВыборкаЗаписей.Период,"ДФ=dd.MM.yyyy");
		СтрокаРаздела4.Параметры.ВидОперации        = ТекущаяОперация;
		СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = "";
		СтрокаРаздела4.Параметры.Подразделение      = "";

		ВыборкаЗаписейМОЛ = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(ВыборкаЗаписей.Регистратор.Ссылка.Дата,Отбор);

		Если НЕ (ВыборкаЗаписейМОЛ = Неопределено) Тогда

			Если ВыборкаЗаписейМОЛ.Количество() > 0 Тогда;

				ВыборкаЗаписейМОЛ.Сортировать("Период Убыв");

				Для каждого СтрокаМОЛ Из ВыборкаЗаписейМОЛ Цикл

					Если СтрокаМОЛ.Организация <> Организация Тогда
						Продолжить;
					КонецЕсли;

					СтрокаРаздела4.Параметры.ФИОМОЛДвижения = СтрокаМОЛ.МОЛ;
					СтрокаРаздела4.Параметры.Подразделение = СтрокаМОЛ .Местонахождение;
					Прервать;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

		Если ТекущаяОперация.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание или ТекущаяОперация.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача Тогда

			Если ТипЗнч(РегистраторСписания) = Тип("ДокументСсылка.ПередачаОС") Тогда
				//Параметры выбытия уже определены в таблице СостояниеНаМоментПередачи
			Иначе
				// Износ и остаточная стоимость ОС  на момент выбытия
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
				|	ВЫБОР КОГДА (СтоимостьОС_БУ.Субконто1) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ СтоимостьОС_БУ.СуммаОборотКт КОНЕЦ КАК СтоимостьБУ,
				|	ВЫБОР КОГДА (АмортизацияОС_БУ.Субконто1) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ АмортизацияОС_БУ.СуммаОборотДт КОНЕЦ КАК АмортизацияБУ
				|ИЗ
				|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&МоментВыбытия, Организация = &Организация И ОсновноеСредство = &ОС) КАК ОС_БУ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВыбытия, &МоментВыбытия, Период, , &ВидСубконтоОС, Организация = &Организация И Субконто1 = &ОС) КАК СтоимостьОС_БУ
				|		ПО ОС_БУ.СчетУчета = СтоимостьОС_БУ.Счет
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВыбытия, &МоментВыбытия, Период, , &ВидСубконтоОС, Организация = &Организация И Субконто1 = &ОС) КАК АмортизацияОС_БУ
				|		ПО ОС_БУ.СчетНачисленияАмортизации = АмортизацияОС_БУ.Счет";

				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидСубконтоОС",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
				Запрос.УстановитьПараметр("ОС",   Ссылка);

				Запрос.УстановитьПараметр("МоментВыбытия", Новый МоментВремени(ВыборкаЗаписей.Период,ВыборкаЗаписей.Регистратор));

				СостояниеНаМоментПередачи = Запрос.Выполнить().Выгрузить();

			КонецЕсли; 

			ОстаточнаяСтоимость = 0;

			Если СостояниеНаМоментПередачи.количество()>0 тогда
				ОстаточнаяСтоимость = СостояниеНаМоментПередачи[0].СтоимостьБУ - СостояниеНаМоментПередачи[0].АмортизацияБУ;
			КонецЕсли;

			СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ОстаточнаяСтоимость;

		КонецЕсли;

		ТабДок.Вывести(СтрокаРаздела4);

	КонецЦикла;

	ТабДок.Вывести(ПодвалСтраницы1);

	// модернизация ос и ремонт
	ТаблицаМодернизаций = Новый ТаблицаЗначений;
	ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
	ТаблицаМодернизаций.Колонки.Добавить("Название");
	ТаблицаМодернизаций.Колонки.Добавить("Дата");
	ТаблицаМодернизаций.Колонки.Добавить("Номер");
	ТаблицаМодернизаций.Колонки.Добавить("Сумма");

	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
	ТаблицаРемонтов.Колонки.Добавить("Название");
	ТаблицаРемонтов.Колонки.Добавить("Дата");
	ТаблицаРемонтов.Колонки.Добавить("Номер");
	ТаблицаРемонтов.Колонки.Добавить("Сумма");

	//ШапкаРазделов5и6.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов5и6);

	СписокМодернизаций = Новый Массив;
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);

	СписокРемонтов = Новый Массив;
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство",  Ссылка);
	Запрос.УстановитьПараметр("УсловиеМодернизаций",СписокМодернизаций);
	Запрос.УстановитьПараметр("УсловиеРемонтов",СписокРемонтов);
	Запрос.УстановитьПараметр("ВидСобытияОС",Перечисления.ВидыСобытийОС.ПринятиеКУчету);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеМодернизаций) ТОГДА СобытияОСОрганизаций.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ КАК СуммаЗатратБУМодернизаций,
	|	ВЫБОР КОГДА СобытияОСОрганизаций.Событие.ВидСобытияОС В (&УсловиеРемонтов) ТОГДА СобытияОСОрганизаций.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ КАК СуммаЗатратБУРемонтов,
	|	СобытияОСОрганизаций.Регистратор КАК Регистратор,
	|	СобытияОСОрганизаций.Период КАК Период,
	|	СобытияОСОрганизаций.Событие КАК Операция,
	|	СобытияОСОрганизаций.НомерДокумента КАК НомерДокумента,
	|	ВЫРАЗИТЬ(СобытияОСОрганизаций.НазваниеДокумента КАК СТРОКА(200)) КАК НазваниеДокумента
	|ИЗ
	|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|
	|ГДЕ
	|	СобытияОСОрганизаций.Организация = &Организация И
	|	СобытияОСОрганизаций.Событие.ВидСобытияОС <> &ВидСобытияОС И
	|	СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";

	Результат = Запрос.Выполнить();

	СпособВыборки = ОбходРезультатаЗапроса.Прямой;
	ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
	Пока ВыборкаРегистраторов.Следующий() Цикл

		СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратБУМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратБУМодернизаций);
		СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратБУРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратБУРемонтов);

		Если СуммаМодернизаций <> 0 Тогда
			СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
			СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыМодернизаций.Название    = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыМодернизаций.Номер       = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыМодернизаций.Дата        = ВыборкаРегистраторов.Период;
			СтрокаТаблицыМодернизаций.Сумма       = СуммаМодернизаций;
		КонецЕсли;

		Если СуммаРемонтов <> 0 Тогда
			СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
			СтрокаТаблицыРемонтов.ВидОперации      = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыРемонтов.Название    	   = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыРемонтов.Номер            = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыРемонтов.Дата             = ВыборкаРегистраторов.Период;
			СтрокаТаблицыРемонтов.Сумма            = СуммаРемонтов;
		КонецЕсли;

	КонецЦикла;
	
	КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество(),1); 
	Для СчетСтрок = 1 По КоличествоСтрок Цикл
		Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
			СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок - 1);
			СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
		Иначе
			СтрокаРазделов5и6.Параметры.Модернизация          = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
		КонецЕсли;
		
		СтрокаРазделов5и6.Параметры.Ремонт          = "";
		СтрокаРазделов5и6.Параметры.ДокРемонта      = "";
		СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
		СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
		СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = "";
		ТабДок.Вывести(СтрокаРазделов5и6);
	КонецЦикла;
	
	ТабДок.Вывести(ШапкаРаздела7_1);
	ТабДок.Вывести(ШапкаРаздела7_2);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	ОтветственныеПоОССрезПоследних.Пользователь,
	                |	ОтветственныеПоОССрезПоследних.Должность
	                |ИЗ
	                |	РегистрСведений.ОтветственныеПоОС.СрезПоследних(&Дата, ) КАК ОтветственныеПоОССрезПоследних
	                |ГДЕ
	                |	ОтветственныеПоОССрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделенияОрганизации)";
	ПодразделенияОрганизации = Новый СписокЗначений;
	Локация = ТекущиеСведенияОС.Местонахождение;
	ПодразделенияОрганизации.Добавить(Локация);
	Пока Не Локация.Родитель.Пустая() Цикл
		Локация = Локация.Родитель;
		ПодразделенияОрганизации.Добавить(Локация);
	КонецЦикла;
	Запрос.УстановитьПараметр("ПодразделенияОрганизации",ПодразделенияОрганизации);
	Запрос.УстановитьПараметр("Дата",ДатаСведений);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПодвалСтраницы2.Параметры.ДолжностьОтветственного = Выборка.Должность;
		ПодвалСтраницы2.Параметры.ФИООтветственного = Выборка.Пользователь.ФизЛицо.Наименование;
	КонецЕсли;	
	ТабДок.Вывести(ПодвалСтраницы2);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОС6_2003(ДатаСведений) 

Функция ПечатьКарточкиАрендованногоОС(ДатаСведений, Организация) 
	
	Если ЭтотОбъект.ПолучитьФорму("ФормаЭлемента").СчетУчетаБУ <> ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		Сообщить("Данное имущество не является арендованным. Печатная форма недоступна.");	
		Возврат "";
	КонецЕсли;
	Макет = ПолучитьМакет("КарточкаАрендованногоОС");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Сведения  = Макет.ПолучитьОбласть("Сведения");
	Подвал   = Макет.ПолучитьОбласть("Подвал");
	
	ТабДок = Новый ТабличныйДокумент();
	
	//Последние сведения об ОС
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	//Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение.Наименование,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.Код КАК КодАналитическогоУчета,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&ДатаСведений,
	|				Организация = &Организация
	|					И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
	ТекущиеСведенияОС.Следующий();
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ТекущиеСведенияОС.ОсновноеСредство) Тогда
		Сообщить("На момент формирования отчета основное средство не принималось к учету в указанной организации."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат неопределено;
	КонецЕсли; 
	
	//Отбор  = Новый Структура( "ОсновноеСредство", Ссылка);
	
	Шапка.Параметры.Организация       = Организация;
	Шапка.Параметры.Подразделение     = ТекущиеСведенияОС.МестонахождениеНаименование;
	Шапка.Параметры.Местонахождение   = ТекущиеСведенияОС.Местонахождение;
	Шапка.Параметры.НаименованиеОС    = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(НаименованиеПолное),Наименование,НаименованиеПолное);
	Шапка.Параметры.Ссылка     		  = Ссылка;
	Шапка.Параметры.НомерДок          = ЭтотОбъект.Код; //ТекущиеСведенияОС.ИнвентарныйНомер;
	Шапка.Параметры.ДатаДок           = Формат(ДатаСведений,"ДФ=dd.MM.yyyy");
 	ТабДок.Вывести(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.Состояние,
		|	СостоянияОСОрганизаций.ДатаСостояния,
		|	СобытияОСОрганизаций.НазваниеДокумента,
		|	СобытияОСОрганизаций.НомерДокумента,
		|	СобытияОСОрганизаций.Событие,
		|	СостоянияОСОрганизаций.Регистратор,
		|	СобытияОСОрганизаций.Регистратор.Номенклатура КАК Оборудование,
		|	СобытияОСОрганизаций.Регистратор.Декларация КАК Декларация
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО СобытияОСОрганизаций.Период = СостоянияОСОрганизаций.ДатаСостояния
		|			И СобытияОСОрганизаций.Регистратор = СостоянияОСОрганизаций.Регистратор
		|ГДЕ
		|	СобытияОСОрганизаций.Организация = &Организация
		|	И СостоянияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|	И СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	СобытияОСОрганизацийСрезПоследних.Период,
		|	СобытияОСОрганизацийСрезПоследних.НазваниеДокумента,
		|	СобытияОСОрганизацийСрезПоследних.НомерДокумента,
		|	СобытияОСОрганизацийСрезПоследних.Событие,
		|	СобытияОСОрганизацийСрезПоследних.Регистратор,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|		&ДатаСведений,
		|		ОсновноеСредство = &ОсновноеСредство
		|		    И Организация = &Организация
		|		    И Событие.ВидСобытияОС В (&ВидыСобытий)) КАК СобытияОСОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Списание);
	
	Запрос.УстановитьПараметр("ВидыСобытий", ВидыСобытий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаПринятия     = '00010101';
	ДокументПринятия = "";
	
	ДатаСписания       = '00010101';
	ДокументСписания   = "";
	РегистраторСписания = Неопределено;
	ПоставщикРасшифровка = "";
	ПоставщикПредставление = "";
	НомерИнвойса = "";
	ДекларацияПоступления = "";
	НомерГТДПоступления = "";
	ДекларацияВыбытия = "";
	НомерГТДВыбытия = ""; 
	
	Пока Выборка.Следующий() Цикл
		Оборудование        = Выборка.Оборудование;
		Декларация          = Выборка.Декларация;
		Если Выборка.Состояние   = Перечисления.СостоянияОС.ПринятоКУчету Тогда
			 ДатаПринятия        = Выборка.ДатаСостояния;
			 ДокументПринятия    = Выборка.НазваниеДокумента;
			 ДокументПринятия = Выборка.Регистратор;
			 
			 ЗапросПоДекларации = Новый Запрос;
			 ЗапросПоДекларации.Текст = 
			 "ВЫБРАТЬ
			 |	ПРЕДСТАВЛЕНИЕ(ДекларацииСостав.Поставщик) КАК ПоставщикПредставление,
			 |	ДекларацииСостав.Поставщик,
			 |	ДекларацииСостав.НомерИнвойса,
			 |	ДекларацииСостав.Ссылка.ГТД КАК НомерГТД,
			 |	ДекларацииСостав.Ссылка.Ссылка КАК Декларация
			 |ИЗ
			 |	Документ.Декларации.Состав КАК ДекларацииСостав
			 |ГДЕ
			 |	ДекларацииСостав.Описание = &Оборудование
			 |	И ДекларацииСостав.Ссылка = &Декларация";
			 
			 ЗапросПоДекларации.УстановитьПараметр("Оборудование", Оборудование);
			 ЗапросПоДекларации.УстановитьПараметр("Декларация", Декларация);
			 ВыборкаПоДекларации = ЗапросПоДекларации.Выполнить().Выбрать();
			 Пока ВыборкаПоДекларации.Следующий() Цикл
				  ДекларацияПоступления = ВыборкаПоДекларации.Декларация;
				  НомерГТДПоступления = ВыборкаПоДекларации.НомерГТД;
			 	  ПоставщикРасшифровка = ВыборкаПоДекларации.Поставщик;
			 	  ПоставщикПредставление = ВыборкаПоДекларации.ПоставщикПредставление;
			 	  НомерИнвойса = ВыборкаПоДекларации.НомерИнвойса;
			 КонецЦикла;	 
			 
		 ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета Тогда
			 ДатаСписания        = Выборка.ДатаСостояния;
			 ДокументСписания    = Выборка.Регистратор;
			 
			 ЗапросПоДекларации = Новый Запрос;
			 ЗапросПоДекларации.Текст = 
			 "ВЫБРАТЬ
			 |	Декларации.ГТД КАК НомерГТД,
			 |	Декларации.Ссылка КАК Декларация
			 |ИЗ
			 |	Документ.Декларации КАК Декларации
			 |ГДЕ
			 |	Декларации.Ссылка = &Декларация";
			 
			 ЗапросПоДекларации.УстановитьПараметр("Оборудование", Оборудование);
			 ЗапросПоДекларации.УстановитьПараметр("Декларация", Декларация);
			 ВыборкаПоДекларации = ЗапросПоДекларации.Выполнить().Выбрать();
			 Пока ВыборкаПоДекларации.Следующий() Цикл
				  ДекларацияВыбытия = ВыборкаПоДекларации.Декларация;
				  НомерГТДВыбытия = ВыборкаПоДекларации.НомерГТД;
			 КонецЦикла;	 
		КонецЕсли; 
	КонецЦикла;

	Сведения.Параметры.ДатаПринятия = ДатаПринятия;
	Сведения.Параметры.ДокументПринятия = ДокументПринятия;
	Сведения.Параметры.ДатаСписания = ДатаСписания;
	Сведения.Параметры.ДокументСписания = ДокументСписания;

	Сведения.Параметры.Поставщик = ПоставщикРасшифровка;
	Сведения.Параметры.ПоставщикПредставление = ПоставщикПредставление;
	Сведения.Параметры.НомерИнвойса = НомерИнвойса;
	Сведения.Параметры.ДекларацияПоступления = ДекларацияПоступления;
	Сведения.Параметры.НомерГТДПоступления = НомерГТДПоступления;
	Сведения.Параметры.ДекларацияВыбытия = ДекларацияВыбытия;
	Сведения.Параметры.НомерГТДВыбытия = НомерГТДВыбытия;
	
	Сведения.Параметры.КодАналитическогоУчета = ТекущиеСведенияОС.КодАналитическогоУчета;
	
	// Балансовая стоимость ОС на момент поступления
	Сведения.Параметры.Стоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;

 	ТабДок.Вывести(Сведения);

	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	ОтветственныеПоОССрезПоследних.Пользователь,
	                |	ОтветственныеПоОССрезПоследних.Должность
	                |ИЗ
	                |	РегистрСведений.ОтветственныеПоОС.СрезПоследних(&Дата, ) КАК ОтветственныеПоОССрезПоследних
	                |ГДЕ
	                |	ОтветственныеПоОССрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделенияОрганизации)";
	ПодразделенияОрганизации = Новый СписокЗначений;
	Локация = ТекущиеСведенияОС.Местонахождение;
	ПодразделенияОрганизации.Добавить(Локация);
	Пока Не Локация.Родитель.Пустая() Цикл
		Локация = Локация.Родитель;
		ПодразделенияОрганизации.Добавить(Локация);
	КонецЦикла;
	Запрос.УстановитьПараметр("ПодразделенияОрганизации",ПодразделенияОрганизации);
	Запрос.УстановитьПараметр("Дата",ДатаСведений);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Подвал.Параметры.ДолжностьОтветственного = Выборка.Должность;
		Подвал.Параметры.ФИООтветственного = Выборка.Пользователь.ФизЛицо.Наименование;
	КонецЕсли;	
	ТабДок.Вывести(Подвал);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьКарточкиАрендованногоОС 


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, ФормаЭлемента = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Справочник можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 

	Если Не ПроверитьМодифицированностьСправочника(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаЭлемента = Неопределено Тогда
		ДатаСведений  = РабочаяДата;
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	Иначе
		ДатаСведений  = ФормаЭлемента.ДатаСведений;
		Организация   = ФормаЭлемента.Организация;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС6" тогда
		ВвестиДату(ДатаСведений, "Выберите дату сведений:", ЧастиДаты.Дата);
		ТабДокумент = ПечатьОС6_2003(ДатаСведений,Организация);
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка ОС (Форма ОС-6)");
	ИначеЕсли ИмяМакета = "КарточкаАрендованногоОС" тогда
		ВвестиДату(ДатаСведений, "Выберите дату сведений:", ЧастиДаты.Дата);
		ТабДокумент = ПечатьКарточкиАрендованногоОС(ДатаСведений,Организация);
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка арендованного ОС");
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
	//	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	//	ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
	//	Если ОбъектВнешнейФормы = Неопределено Тогда
	//		Сообщить("Ошибка получения дополнительной печатной формы объекта. Возможно форма была удалена", СтатусСообщения.Важное);
	//		Возврат;
	//	КонецЕсли;
	//	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	//	ДвоичныеДанные.Записать(ИмяФайла);
	//	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	//	Обработка.СсылкаНаОбъект = Ссылка;
	//	ТабДокумент = Обработка.Печать();
	Иначе
		Сообщить("Ошибка получения дополнительной печатной формы объекта. Возможно форма была удалена", СтатусСообщения.Важное);
	КонецЕсли;


КонецПроцедуры // Печать()

// Возвращает доступные варианты печати справочника.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ОС6","Форма ОС-6");
	
	СчетУчетаОС = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(, ОсновноеСредство = &ОС) КАК СчетаБухгалтерскогоУчетаОССрезПоследних";
	
	Запрос.УстановитьПараметр("ОС", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СчетУчетаОС = Выборка.СчетУчета;	
	КонецЦикла;
	
	Если СчетУчетаОС = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда                                                   
		СтруктураПечати.Вставить("КарточкаАрендованногоОС","Карточка арендованного ОС");
	КонецЕсли;
	
	Возврат СтруктураПечати;                 

КонецФункции // ПолучитьСписокПечатныхФорм()

// Проверяет модифицированность справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  ЭлементСправочника - (СправочникОбъект.*) - проверяемый элемент справочника
//
Функция ПроверитьМодифицированностьСправочника(ЭлементСправочника)

	Результат = Ложь;

	Если ЭлементСправочника.Модифицированность() Тогда

		Ответ = Вопрос("Элемент справочника изменен. Для печати его необходимо записать.
		               |Записать?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Элемент справочника изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			ЭлементСправочника.Записать();
			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьСправочника()

Процедура ПриИзмененииНомераПаспорта() Экспорт
	Если ПустаяСтрока(НомерПаспорта) Тогда
		Возврат;
	КонецЕсли;
	Если СтрДлина(НомерПаспорта)>17 Тогда
		Сообщить("Количество символов в номере паспорта (VIN) больше 17!"); 
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеСредства.Код
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.НомерПаспорта = &НомерПаспорта
	|	И (НЕ ОсновныеСредства.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("НомерПаспорта", НомерПаспорта);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("С номером паспорта "+ НомерПаспорта+" существует ОС № "+Выборка.Код);
		КонецЦикла;
	КонецЕсли; 
 КонецПроцедуры

#КонецЕсли

Процедура ПередЗаписью(Отказ)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Валюта.Пустая() Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду("643"); //руб
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОсновноеСредствоLawson) И Не ЗначениеЗаполнено(Ссылка.ОсновноеСредствоLawson)
		И ЗначениеЗаполнено(Ссылка) Тогда
		Эл = ОсновноеСредствоLawson.ПолучитьОбъект();
		Строка = Эл.ОСФискал.Добавить();
		Строка.ОсновноеСредство = Ссылка;
		Эл.Записать();
	КонецЕсли;
			
КонецПроцедуры
