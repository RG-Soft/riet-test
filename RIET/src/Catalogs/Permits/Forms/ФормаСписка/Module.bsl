
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отбор = Параметры.Отбор;
	
	Country = ImportExportСервер.ПолучитьCountryПользователя(ПараметрыСеанса.ТекущийПользователь);
	Если ЗначениеЗаполнено(Country) Тогда
		Отбор.Вставить("Country", Country);
	КонецЕсли;
	
	// + В настройках списка установлен отбор по ExpiryDate и ПометкаУдаления
	
КонецПроцедуры

// { RGS AFokin 03.08.2018 23:59:59 - S-I-0005620
&НаКлиенте
Процедура LoadFromExcel(Команда)
	
	ТекстВопроса = "Вы действительно хотите загрузить данные из Excel?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НастройкиДиалога = Новый Структура;
		НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файлы xlsx (*.xlsx)'") + "|*.xlsx" );
		НастройкиДиалога.Вставить("Budgets", ЭтотОбъект);
		
		Оповещение = Новый ОписаниеОповещения("LoadFile", ЭтотОбъект);
		ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура LoadFile(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	АдресФайла = РезультатПомещенияФайлов.Хранение;
	РасширениеФайла = "xlsx";
	ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайла, РасширениеФайла, AP)
	
	ПолноеИмяXLSФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ПолноеИмяXLSФайла);
	
	ЗагрузитьДанныеИзФайла(ПолноеИмяXLSФайла, AP);
	
	УдалитьФайлы(ПолноеИмяXLSФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайла(ПолноеИмяФайла, AP)  
	
	ТекстОшибок = "";
	
	ТаблицаExcel = ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла);
	
	Если ПустаяСтрока(ТекстОшибок) Тогда
		ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ТекстОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуExcel(ТекстОшибок, ПолноеИмяФайла)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 12.0;HDR=No;IMEX=1""";	
	
	Попытка 
		Connection.Open(СтрокаПодключения);	
	Исключение
		Попытка
			СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ПолноеИмяФайла + ";Extended Properties=""Excel 8.0;HDR=No;IMEX=1""";
			Connection.Open(СтрокаПодключения);
		Исключение
			ТекстОшибок = ТекстОшибок + ОписаниеОшибки();
		КонецПопытки;
	КонецПопытки;
	
	rs = Новый COMObject("ADODB.RecordSet");
	rs.ActiveConnection = Connection;
	rs = Connection.OpenSchema(20);
	
	МассивЛистов = Новый Массив;
	Лист = Неопределено;
	
	Пока rs.EOF() = 0 Цикл
		
		Если ЗначениеЗаполнено(Лист) И СтрНайти(rs.Fields("TABLE_NAME").Value, Лист) > 0 Тогда
			rs.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Лист = rs.Fields("TABLE_NAME").Value;
		МассивЛистов.Добавить(Лист);
		
		rs.MoveNext();
		
	КонецЦикла;  
	
	ТаблицаExcel = Новый ТаблицаЗначений();
	ТаблицаExcel.Колонки.Добавить("НомерСтрокиФайла", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)),"НомерСтрокиФайла");
	
	Для Каждого ЛистЭксель из МассивЛистов Цикл 
		
		sqlString = "select * from [" + ЛистЭксель + "]";
		rs.Close();
		rs.Open(sqlString);
		
		rs.MoveFirst();
		
		СвойстваСтруктуры = "Country,PermitType,PermitDescription,GoodsPartNoSerialNo,GoodsDescription,ReceiptDate,ExpiryDate,Код,GoodsDescription1,GoodsDescription2";
		
		НомерСтроки = 0;
		Пока rs.EOF = 0 Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НомерСтроки = 1 Тогда 
				
				СтруктураИменИНомеровКолонок = ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок);
				
				Если Не ПустаяСтрока(ТекстОшибок) Тогда 
					Прервать;
				КонецЕсли;
				
				rs.MoveNext();
				Продолжить;
				
			КонецЕсли;
			
			СтруктураЗначенийСтроки = Новый Структура(СвойстваСтруктуры);
			
			//добавляем значение каждой ячейки файла в структуру значений
			Для Каждого ЭлементСтруктуры из СтруктураИменИНомеровКолонок Цикл 
				
				ЗначениеЯчейки = rs.Fields(ЭлементСтруктуры.Значение-1).Value;
				СтруктураЗначенийСтроки[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеЯчейки);
				
			КонецЦикла;     			        						
			
			//добавляем новую структуру и пытаемся заполнить	
			Попытка
				
				НоваяСтрокаТаблицы = ТаблицаExcel.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураЗначенийСтроки, СвойстваСтруктуры);
				
				НоваяСтрокаТаблицы.НомерСтрокиФайла = НомерСтроки;
				
			Исключение
				ТекстОшибок = ТекстОшибок + "
				|не удалось прочитать данные в строке №" + НомерСтроки + "'!";
			КонецПопытки;
			
			rs.MoveNext();
			
		КонецЦикла;
		
		//Прервать;
		
	КонецЦикла;
	
	rs.Close();
	Connection.Close();
	
	Возврат ТаблицаExcel;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИменИНомеровКолонок(rs, СвойстваСтруктуры, ТаблицаExcel, ТекстОшибок)
	
	СтруктураКолонокИИндексов = Новый Структура(СвойстваСтруктуры);
	
	НомерКолонки = 1;
	Для Каждого Field из rs.Fields Цикл 
		
		ТекстЯчейки = СокрЛП(Field.Value);
		Если НЕ ЗначениеЗаполнено(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;
		
		Если Найти(ТекстЯчейки, "СОО") Тогда
			СтруктураКолонокИИндексов.Country = НомерКолонки;
		//ИначеЕсли Найти(ТекстЯчейки, "Тип") Тогда
			СтруктураКолонокИИндексов.PermitType = НомерКолонки;
		//ИначеЕсли Найти(ТекстЯчейки, "Описание") Тогда
			СтруктураКолонокИИндексов.PermitDescription = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "РУС") Тогда
			СтруктураКолонокИИндексов.GoodsPartNoSerialNo = НомерКолонки;
			СтруктураКолонокИИндексов.GoodsDescription = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "ENG") Тогда
			СтруктураКолонокИИндексов.GoodsDescription1 = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "Производитель") Тогда
			СтруктураКолонокИИндексов.GoodsDescription2 = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "Дата") Тогда
			СтруктураКолонокИИндексов.ReceiptDate = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "Действителен") Тогда
			СтруктураКолонокИИндексов.ExpiryDate = НомерКолонки;
		ИначеЕсли Найти(ТекстЯчейки, "Сертификат") > 0 Тогда
			СтруктураКолонокИИндексов.Код = НомерКолонки;
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла; 
	
	Для Каждого КлючИЗначение Из СтруктураКолонокИИндексов Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ТекстОшибок = ТекстОшибок + "
			|необходимо проверить наличие колонки с данными '" + СтрЗаменить(КлючИЗначение.Ключ, "_", " ") + "'!";
		иначе
			Если ТаблицаExcel.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				ТаблицаExcel.Колонки.Добавить(КлючИЗначение.Ключ,,КлючИЗначение.Ключ);
			КонецЕсли;				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКолонокИИндексов;
	
КонецФункции

&НаСервере	
Процедура ЗагрузитьОбъекты(ТекстОшибок, ТаблицаExcel, AP) 
	
	ТаблицаPermits = ПолучитьДанныеСправочникаPermits();
	
	Для Каждого Элемент Из ТаблицаExcel Цикл
		
		Если ПустаяСтрока(Элемент.Код) И ПустаяСтрока(Элемент.Country) И ПустаяСтрока(Элемент.PermitType) И ПустаяСтрока(Элемент.PermitDescription)
			И ПустаяСтрока(Элемент.GoodsPartNoSerialNo) И ПустаяСтрока(Элемент.GoodsDescription) И ПустаяСтрока(Элемент.ReceiptDate) И ПустаяСтрока(Элемент.ExpiryDate) Тогда
				Продолжить;
		КонецЕсли;	
		
		СтруктураПоиска = Новый Структура("Код,Country,PermitType,PermitDescription,GoodsPartNoSerialNo,GoodsDescription,ReceiptDate,ExpiryDate",
			Элемент.Код,Элемент.Country,Элемент.PermitType,Элемент.PermitDescription,Элемент.GoodsPartNoSerialNo,Элемент.GoodsDescription,Элемент.ReceiptDate,Элемент.ExpiryDate); 
			
		РезультатПоиска = ТаблицаPermits.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			ЭлементСправочника = Справочники.Permits.СоздатьЭлемент();
			ЭлементСправочника.Код					= Элемент.Код;
			СтранаПроизводитель = Справочники.CountriesOfProcessLevels.НайтиПоНаименованию(Элемент.Country);
			Если ЗначениеЗаполнено(СтранаПроизводитель) Тогда 
				ЭлементСправочника.Country = СтранаПроизводитель;
			Иначе
				ЭлементСправочника.Country = Справочники.CountriesOfProcessLevels.ПустаяСсылка();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для ""Permit No"" " + Элемент.Код + " не указана страна происхождения!");
			КонецЕсли;	
			ЭлементСправочника.PermitType			= Элемент.PermitType;
			ЭлементСправочника.PermitDescription	= Элемент.PermitDescription;
			ЭлементСправочника.GoodsPartNoSerialNo	= ПолучитьСписокАртикулов(Элемент.GoodsPartNoSerialNo);
			ЭлементСправочника.GoodsDescription		= Элемент.GoodsDescription + " " + Элемент.GoodsDescription1 + " " + Элемент.GoodsDescription2;
			ЭлементСправочника.ReceiptDate			= СтрокуВДату(Элемент.ReceiptDate);
			ЭлементСправочника.ExpiryDate			= СтрокуВДату(Элемент.ExpiryDate);
			ЭлементСправочника.CreatedBy			= ПараметрыСеанса.ТекущийПользователь;
			ЭлементСправочника.CreationDate			= ТекущаяДата();
			ЭлементСправочника.ModifiedBy			= '00010101000000';
			ЭлементСправочника.ModificationDate		= Справочники.Пользователи.ПустаяСсылка();
			ЭлементСправочника.Closed				= '00010101000000';
			ЭлементСправочника.ExportControl		= Ложь;
			ЭлементСправочника.ОбменДанными.Загрузка = Истина;
			ЭлементСправочника.Записать();
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонExcel(Команда)
	
	Адрес = ПолучитьАдрес();
	ИмяФайла = "Permits loading.xlsx";
	ПолучитьФайл(Адрес, ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдрес()
	
	Возврат ПоместитьВоВременноеХранилище(Справочники.Permits.ПолучитьМакет("ШаблонФайлаЗагрузки"));
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСправочникаPermits()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Permits.Код,
		|	Permits.Country.Наименование КАК Country,
		|	Permits.PermitType,
		|	Permits.PermitDescription,
		|	Permits.GoodsPartNoSerialNo,
		|	Permits.GoodsDescription,
		|	Permits.ReceiptDate,
		|	Permits.ExpiryDate
		|ИЗ
		|	Справочник.Permits КАК Permits";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		 ДанныеPermits = РезультатЗапроса.Выгрузить();
	Иначе
		 ДанныеPermits = Новый ТаблицаЗначений;
	КонецЕсли;	
	
	Возврат ДанныеPermits;
	
КонецФункции

&НаСервере
Функция СтрокуВДату(Знач сДата)
	
	Перем п_мТЕМП; // массив временных переменных
	
	//-----для локализации ------------------------------
	Перем п_мФорматы;
	п_мФорматы = Новый Массив(4);
	п_мФорматы[0] = "г";	// знак года
	п_мФорматы[1] = "ЧЦ=2; ЧН=; ЧВН=";
	п_мФорматы[2] = "ЧГ=0";	
	п_мФорматы[3] = "ДФ=МММ";
	//---------------------------------------------------
	
	Если ПустаяСтрока(сДата) Тогда
		п_мТЕМП[6] =Дата("00010101000000");
		Возврат п_мТЕМП[6];
	КонецЕсли;
	
	сДата = Формат(сДата, п_мФорматы[2]);		//на случай если в формате 1с числом: 20150320220315. (+локализация)
	
	//Если использовать конструкцию "Если Найти(сДата,..." , то перебор букв строки будет происходить 2а раза: Найти и СтрЗаменить //Использование Найти в данном случае бессмысленно
	// можно добавить любой разделитель - @, #, %, и тд, неважно. Главное, заменить их на "."
	сДата = СтрЗаменить(сДата, "«", ""); 			//«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, "»", "");			//«1 Фев 05 г.»
	сДата = СтрЗаменить(сДата, п_мФорматы[0] + ".", "");   //1 Фев 05 г. 17:20:00 //просто "г" нельзя из-за "авГуст", например. Но в далее,после парсинга месяца, любое "г" в строке,  удаляется
	сДата = СтрЗаменить(сДата, "/", ".");			// 1/2/5
	сДата = СтрЗаменить(сДата, "\", ".");			// 1\02\05
	сДата = СтрЗаменить(сДата, "-", ".");			// 1-02-05
	сДата = СтрЗаменить(сДата, Символы.Таб, ".");		// 01.02.2005	17:20:00	
	сДата = СтрЗаменить(сДата, " ", ".");			// 1/02 2005 17:20:00
	сДата = СтрЗаменить(сДата, "..",  ".");			//Возможны, появление двойных точек из за "янв." в "янв" или из-за " г. ".	
	сДата = НРег(СокрЛП(сДата)); 				// строку в нижний регистр, чтоб проще было с Янв Январь янв и тд
	
	п_мТЕМП = Новый массив(7);//массив для временных переменных	
	
	п_мТЕМП[0] = Найти(сДата,".");
	
	Если п_мТЕМП[0] = 0 Тогда
		//если точек нет
		
		Если Найти(сДата,":") Тогда
			//только время (или ошибка)
			сДата = "01.01.0001." + сДата;
			п_мТЕМП[0] = Найти(сДата,".");
		иначе			
			//похоже на формат 1с. Можно добавить "попытку"...
			п_мТЕМП[6] = дата(сДата);
			Возврат п_мТЕМП[6];
			
		КонецЕсли;	
		
		
		//иначеЕсли п_мТЕМП[0] = 1 Тогда
		//		//например, месяц и год
	КонецЕсли;
	
	
	// ----- ДНИ -------------------------------------
	п_мТЕМП[0] = Лев(сДата, п_мТЕМП[0] - 1);//дни 
	п_мТЕМП[4] = Прав(сДата, СтрДлина(сДата) - СтрДлина(п_мТЕМП[0])-1);// месяц и все что справа
	п_мТЕМП[0] = Формат(Число(п_мТЕМП[0]),п_мФорматы[1]);//дни в формат двух чисел
	// ----- Месяц -----------------------------------
	п_мТЕМП[1] = Лев(п_мТЕМП[4], найти(п_мТЕМП[4],".") - 1);// месяц
	п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[1])-1);// год и все что справа
	//Возможны варианты месяца "янв" "янв." "январь" "января" 
	Если СтрДлина(п_мТЕМП[1]) > 2 Тогда // месяц в виде янв или январь
		
		п_мТЕМП[2] = 0;
		Пока п_мТЕМП[2] < 12 Цикл 
			
			п_мТЕМП[2] = п_мТЕМП[2]+1;
			// берем из "янв." только "янв"
			п_мТЕМП[3] = СтрЗаменить(Формат(Дата("2001" + Формат(п_мТЕМП[2],п_мФорматы[1]) + "01"), п_мФорматы[3]),".","");// + локализация
			
			п_мТЕМП[3] = найти(п_мТЕМП[1], п_мТЕМП[3]);
			
			Если п_мТЕМП[3] > 0 тогда
				п_мТЕМП[1] = Формат(п_мТЕМП[2],п_мФорматы[1]);
				прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		п_мТЕМП[1] = Формат(Число(п_мТЕМП[1]),п_мФорматы[1]);
	КонецЕсли;
	// ----- ГОД -----------------------------------
	//Если в строке было "г" без точки("г.")
	п_мТЕМП[4] = СтрЗаменить(п_мТЕМП[4], п_мФорматы[0], "");
	//ищем год. Дата может быть без времени, т.е. год последний в строке
	п_мТЕМП[2] = Найти(п_мТЕМП[4],".");
	
	Если п_мТЕМП[2]>0 Тогда
		п_мТЕМП[2] =  Лев(п_мТЕМП[4], п_мТЕМП[2] - 1);// год
		п_мТЕМП[4] = Прав(п_мТЕМП[4], СтрДлина(п_мТЕМП[4]) - СтрДлина(п_мТЕМП[2])-1);//время и все что справа
	Иначе
		п_мТЕМП[2] = п_мТЕМП[4];
		п_мТЕМП[4] = "";
	КонецЕсли;	
	
	//проверяем год
	п_мТЕМП[3] = СтрДлина(п_мТЕМП[2]);
	//если год из двух цыфр
	Если п_мТЕМП[3] = 2 или п_мТЕМП[3] = 1 Тогда
		п_мТЕМП[3] = Число(п_мТЕМП[2]);// год как число
		
		//что означает 15 в "20.03.15"? это 2015г или 1915г? (Настраиваем под себя или выдаём ошибку)
		// в моем варианте если  < 50 то это 2000г. иначе 1900г.
		Если п_мТЕМП[3] < 50 Тогда 
			п_мТЕМП[2] = "20" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		Иначе
			п_мТЕМП[2] = "19" + Формат(п_мТЕМП[3],п_мФорматы[1]);
		КонецЕсли;	
		
	КонецЕсли;
	
	// =======================  Форматируем время ==============================
	п_мТЕМП[6] = СтрЗаменить(п_мТЕМП[4],":", ".");// если дата была, например: 17-30-10, то сейчас 17.30.10 
	//"попытка" на преобразование даты, по времени, занимает столько же, а по ресурсам больше, чем сам парсинг времени. 
	//поэтому, убиваем двух зайцев перебором часы/мин/сек сразу
	Если СтрДлина(п_мТЕМП[6]) > 0 Тогда
		
		п_мТЕМП[5] = найти(п_мТЕМП[6],".");
		Если п_мТЕМП[5] > 0 Тогда
			// ========= часы	=================
			п_мТЕМП[3] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);//часы 
			п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[3])-1);// минуты и все что справа
			
			Если п_мТЕМП[3] = "" тогда
				п_мТЕМП[3] = "00";		
			Иначе
				//при переводе в дату лидирующий 0 у часов удаляется. Т.е. след. строка бесполезна
				//п_мТЕМП[3] = Формат(Число(п_мТЕМП[3]),п_мФорматы[1]);//часы в формат двух чисел	 
			КонецЕсли;		
			
			п_мТЕМП[5] = найти(п_мТЕМП[6],".");
			Если п_мТЕМП[5] > 0 Тогда
				// ========= минуты	=================
				п_мТЕМП[4] = Лев(п_мТЕМП[6], найти(п_мТЕМП[6],".") - 1);
				п_мТЕМП[6] = Прав(п_мТЕМП[6], СтрДлина(п_мТЕМП[6]) - СтрДлина(п_мТЕМП[4])-1);// секунды и все что справа
				Если п_мТЕМП[4] = "" тогда
					п_мТЕМП[4] = "00";		
				Иначе
					п_мТЕМП[4] = Формат(Число(п_мТЕМП[4]),п_мФорматы[1]);//минуты в формат двух чисел	 
				КонецЕсли;
				
				// ========= секунды	=================
				Если СтрДлина(п_мТЕМП[6]) = 0 Тогда
					п_мТЕМП[5] = "00";		
				Иначе
					п_мТЕМП[5] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);//секунды в формат двух чисел	 
				КонецЕсли;
				
			Иначе
				п_мТЕМП[4] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);	
				п_мТЕМП[5] = "00";			
			КонецЕсли;	 
		Иначе
			п_мТЕМП[3] = Формат(Число(п_мТЕМП[6]),п_мФорматы[1]);		
			п_мТЕМП[4] = "00";
			п_мТЕМП[5] = "00";
		КонецЕсли;
		
	Иначе
		п_мТЕМП[3] = "00";		
		п_мТЕМП[4] = "00";
		п_мТЕМП[5] = "00";			
	КонецЕсли;
	
	п_мТЕМП[6] = п_мТЕМП[0] + "." + п_мТЕМП[1] + "." + п_мТЕМП[2] + " " + п_мТЕМП[3] + ":" + п_мТЕМП[4] + ":" + п_мТЕМП[5];
	п_мТЕМП[6] = дата(п_мТЕМП[6]);
	
	Возврат п_мТЕМП[6];
	
	
КонецФункции

&НаСервере
Функция ПолучитьСписокАртикулов(ОписаниеТовара)
	
	Возврат "123456789"	
	
КонецФункции;	
// } RGS AFokin 03.08.2018 23:59:59 - S-I-0005620

