
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	ДопПараметры = Новый Структура("ПараметрКоманды, ПараметрыВыполненияКоманды",
									ПараметрКоманды, ПараметрыВыполненияКоманды);
	Если ПодключитьРасширениеРаботыСКриптографией() Тогда
		ЗавершитьОбработкуКоманды(Истина, ДопПараметры);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ЗавершитьОбработкуКоманды", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = ВернутьСтр("ru = 'Для работы с ЭП необходимо установить
			|расширение работы с криптографией.'");
		ЭлектроннаяПодписьКлиент.УстановитьРасширение(Обработчик, ТекстВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуКоманды(РасширениеУстановлено, ДополнительныеПараметры) Экспорт
	
	Если НЕ РасширениеУстановлено ИЛИ ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Неопределено;
	ПараметрыВыполненияКоманды = Неопределено;
	ДополнительныеПараметры.Свойство("ПараметрКоманды", ПараметрКоманды);
	ДополнительныеПараметры.Свойство("ПараметрыВыполненияКоманды", ПараметрыВыполненияКоманды);
	
	СертификатДляСохранения = ПараметрКоманды;
	
	ПараметрыСертификата = Новый Структура;
	ПараметрыСертификата.Вставить("Отпечаток");
	ПараметрыСертификата.Вставить("Наименование");
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата");
	ЗаполнитьПараметрыСертификата(ПараметрыСертификата, СертификатДляСохранения);
	
	ИмяФайлаПоУмолчанию = ПараметрыСертификата.Наименование + ".cer";
	ИмяФайлаПоУмолчанию = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПоУмолчанию, "");
	
	// Если были переданы двоичные данные сертификата,
	// то сохраним их, иначе - из хранилища сертификатов компьютера
	Если НЕ ПараметрыСертификата.Свойство("ДвоичныеДанныеСертификата")
		И НЕ ЗначениеЗаполнено(ПараметрыСертификата.ДвоичныеДанныеСертификата) Тогда
		
		Попытка
			МенеджерКриптографии = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМенеджерКриптографии();
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		ДвоичныеДанныеОтпечатка = Base64Значение(ПараметрыСертификата.Отпечаток);
		
		Сертификат = Неопределено;
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
		Если Сертификат = Неопределено Тогда
			ТекстСообщения = ВернутьСтр("ru = 'Сертификат не найден.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ПараметрыСертификата.ДвоичныеДанныеСертификата = Сертификат;
	КонецЕсли;
	
	УникальныйИдентификатор = ПараметрыВыполненияКоманды.Источник.УникальныйИдентификатор;
	АдресХранилища = ПодготовитьФайлСертификата(ПараметрыСертификата.ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Расширение", "cer");
	ДанныеФайла.Вставить("ПолноеНаименование", ПараметрыСертификата.Наименование);
	ДанныеФайла.Вставить("АдресХранилища", АдресХранилища);
	
	ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьФайлСертификата(ДанныеСертификата, УникальныйИдентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПоместитьВоВременноеХранилище(ДанныеСертификата, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСертификата(ПараметрыСертификата, СсылкаНаСертификат)
	
	ПараметрыСертификата.Отпечаток                 = СсылкаНаСертификат.Отпечаток;
	ПараметрыСертификата.Наименование              = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(
													  			СсылкаНаСертификат.Наименование, Истина);
	
	ПараметрыСертификата.ДвоичныеДанныеСертификата = СсылкаНаСертификат.ФайлСертификата.Получить();
	
КонецПроцедуры
