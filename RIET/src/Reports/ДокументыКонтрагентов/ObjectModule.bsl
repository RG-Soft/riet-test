#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить( "ДатаНач", ОбщийОтчет.ДатаНач);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить( "ДатаКон", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке = Истина;
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры // СформироватьОтчет()

// Процедура - заполняет начальные настройки отчета
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке = Истина;
	
	Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СуммаСчета КАК СуммаСчета,
	|	ВложенныйЗапрос.СуммаСчетаРуб КАК СуммаСчетаРуб,
	|	ВложенныйЗапрос.СуммаСФ КАК СуммаСФ,
	|	ВложенныйЗапрос.СуммаСФРуб КАК СуммаСФРуб,
	|	ВложенныйЗапрос.СуммаПрихода КАК СуммаПрихода,
	|	ВложенныйЗапрос.СуммаПриходаРуб КАК СуммаПриходаРуб,
	|	ВложенныйЗапрос.СуммаСчетаРуб - ВложенныйЗапрос.СуммаСФРуб КАК РазницаСФРуб,
	|	ВложенныйЗапрос.СуммаСчета - ВложенныйЗапрос.СуммаСФ КАК РазницаСФ
	|{ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент.*,
	|	ВложенныйЗапрос.НомерСчета,
	|	ВложенныйЗапрос.НомерДокумента,
	|	ВложенныйЗапрос.ДатаДокумента,
	|	ВложенныйЗапрос.ВалютаДокумента.*,
	|	ВложенныйЗапрос.ТипДокумента,
	|	РазницаСФРуб,
	|	РазницаСФ}
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетаКонтрагентовОбороты.Контрагент КАК Контрагент,
	|		СчетаКонтрагентовОбороты.НомерСчета КАК НомерСчета,
	|		СчетаКонтрагентовОбороты.НомерСчета КАК НомерДокумента,
	|		СчетаКонтрагентовОбороты.ДатаСчета КАК ДатаДокумента,
	|		СчетаКонтрагентовОбороты.Валюта КАК ВалютаДокумента,
	|		СчетаКонтрагентовОбороты.СуммаОплатыОборот КАК СуммаСчета,
	|		СчетаКонтрагентовОбороты.СуммаОплатыРубОборот КАК СуммаСчетаРуб,
	|		NULL КАК СуммаСФ,
	|		NULL КАК СуммаСФРуб,
	|		NULL КАК СуммаПрихода,
	|		NULL КАК СуммаПриходаРуб,
	|		""Счет"" КАК ТипДокумента
	|	ИЗ
	|		РегистрНакопления.СчетаКонтрагентов.Обороты(&ДатаНач, &ДатаКон, , ) КАК СчетаКонтрагентовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаФактурыКонтрагентовОбороты.Контрагент,
	|		СчетаФактурыКонтрагентовОбороты.НомерСчета,
	|		СчетаФактурыКонтрагентовОбороты.НомерСФ,
	|		СчетаФактурыКонтрагентовОбороты.ДатаСФ,
	|		СчетаФактурыКонтрагентовОбороты.Валюта,
	|		NULL,
	|		NULL,
	|		СчетаФактурыКонтрагентовОбороты.СуммаОборот,
	|		СчетаФактурыКонтрагентовОбороты.СуммаРубОборот,
	|		NULL,
	|		NULL,
	|		""Счет-фактура""
	|	ИЗ
	|		РегистрНакопления.СчетаФактурыКонтрагентов.Обороты(&ДатаНач, &ДатаКон, , ) КАК СчетаФактурыКонтрагентовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АктыКонтрагентовОбороты.Контрагент,
	|		АктыКонтрагентовОбороты.НомерСчета,
	|		АктыКонтрагентовОбороты.НомерПрихода,
	|		АктыКонтрагентовОбороты.ДатаПрихода,
	|		АктыКонтрагентовОбороты.Валюта,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		АктыКонтрагентовОбороты.СуммаОборот,
	|		АктыКонтрагентовОбороты.СуммаРубОборот,
	|		""Акт/накладная""
	|	ИЗ
	|		РегистрНакопления.АктыКонтрагентов.Обороты(&ДатаНач, &ДатаКон, , ) КАК АктыКонтрагентовОбороты) КАК ВложенныйЗапрос
	|{ГДЕ
	|	ВложенныйЗапрос.Контрагент.*,
	|	ВложенныйЗапрос.СуммаСчета,
	|	ВложенныйЗапрос.СуммаСчетаРуб,
	|	ВложенныйЗапрос.СуммаСФ,
	|	ВложенныйЗапрос.СуммаСФРуб,
	|	ВложенныйЗапрос.СуммаПрихода,
	|	ВложенныйЗапрос.СуммаПриходаРуб,
	|	ВложенныйЗапрос.НомерСчета}
	|{УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Контрагент.*,
	|	ВложенныйЗапрос.НомерСчета}
	|ИТОГИ
	|	СУММА(СуммаСчета),
	|	СУММА(СуммаСчетаРуб),
	|	СУММА(СуммаСФ),
	|	СУММА(СуммаСФРуб),
	|	СУММА(СуммаПрихода),
	|	СУММА(СуммаПриходаРуб)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	ВложенныйЗапрос.Контрагент.*,
	|	ВложенныйЗапрос.НомерСчета}";	
	
	СтруктураПредставлениеПолей = Новый Структура;
	//СтруктураПредставлениеПолей.Вставить( "ГрафикАмортизации", "Годовой график");
	
	
	ПостроительОтчета.Текст = Текст;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаСчета",   "Сумма счета (в валюте)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаСчетаРуб",   "Сумма счета (в рублях)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаСФ",   "Сумма счета-фактуры (в валюте)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаСФРуб",   "Сумма счета-фактуры (в рублях)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаПрихода",   "Сумма прихода (в валюте)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "СуммаПриходаРуб",   "Сумма прихода (в рублях)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "РазницаСФ",   "Незакрытая сумма (в валюте)",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "РазницаСФРуб",   "Незакрытая сумма (в рублях)",    Истина, "ЧЦ=15; ЧДЦ=2");
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Контрагент");
	//МассивОтбора.Добавить("ОССнятоСУчетаНаНачало");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Контрагент");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("НомерСчета");
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("ТипДокумента");
	ПостроительОтчета.ВыбранныеПоля.Добавить("НомерДокумента");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаДокумента");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ВалютаДокумента");
    ОбщийОтчет.ВыводитьПоказателиВСтроку=Истина;
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры // Настроить()

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет  = ЭтотОбъект;
	
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Добавляет в структуру общие для всех отчетов параметры настройки
//
// Параметры:
//	Нет.
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НастройкиПостроителя", ОбщийОтчет.ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели", ОбщийОтчет.Показатели.Выгрузить());
	СтруктураНастроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураНастроек.Вставить("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураНастроек.Вставить("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураНастроек.Вставить("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруДляСохраненияНастроек()()

// Заполняет из структуры настроек общие параметры отчетов
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок) Экспорт
	Перем ТабПоказатели;
	
	Если ТипЗнч(ОбщийОтчет.СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийОтчет.ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("Показатели", ТабПоказатели);
	Если ТипЗнч(ТабПоказатели) = Тип("ТаблицаЗначений") Тогда
		ОбщийОтчет.Показатели.Загрузить(ТабПоказатели);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураСНастройками.Свойство("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураСНастройками.Свойство("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураСНастройками.Свойство("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураСНастройками.Свойство("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки)()

ОбщийОтчет.ИмяРегистра          = "";
ОбщийОтчет.мНазваниеОтчета      = "Отчет по документам контрагентов";
ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
ОбщийОтчет.мРежимВводаПериода   = 0;

#КонецЕсли