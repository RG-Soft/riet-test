
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	
	Если Не ПустаяСтрока(ДанныеРасшифровкиДеталей) Тогда
		    					
		Значение = ПолучитьЗначениеНаСервере(Расшифровка);
		Если ЗначениеЗаполнено(Значение) Тогда
			ПоказатьЗначение(,Значение);
		КонецЕсли;
			   		           		
	иначе
				
		НастройкиСКД = ПолучитьНастройкиСКДНаСервере(Расшифровка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Имя", "РасшифровкаОтчета");
		СтруктураНастройки.Вставить("НастройкиСКД", НастройкиСКД);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.GOLDFreightVSProductCost.Форма", ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеНаСервере(Расшифровка)  
	
	_ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиДеталей);
	ЗначенияПолей = _ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	
	Если ЗначенияПолей.Количество() = 1 Тогда
		Возврат ЗначенияПолей[0].Значение;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСКДНаСервере(ИДРасшифровка)
	
	СКД = Отчеты.GOLDFreightVSProductCost.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(Данные, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД)); 
	
	Возврат ОбработкаРасшифровки.Расшифровать(ИДРасшифровка, Новый ПолеКомпоновкиДанных("InvoiceLine"));   	
	   		            
КонецФункции
           
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураНастройки") Тогда
		
		СтруктураНастройки = Параметры.СтруктураНастройки;
		
		СтандартнаяОбработка = Ложь;
		Результат.Очистить();                            
		
		СКД = Отчеты.GOLDFreightVSProductCost.ПолучитьМакет("ДанныеРасшифровки");
		
		ДанныеРасшифровкиСКД = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		Настройки = СКД.НастройкиПоУмолчанию;
		Параметр = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПолеКомпоновкиДанных("CostsAllocationDate"));
		Параметр.Значение = СтруктураНастройки.НастройкиСКД.ПараметрыДанных.Элементы.Найти("CostsAllocationDate").Значение;
		Параметр.Использование = Истина;
		
		ЭлементыОтбора = СтруктураНастройки.НастройкиСКД.Отбор.Элементы;
		Для Каждого ЭлементОтбора из ЭлементыОтбора Цикл 
			ЭлементОтбораНастроек = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбораНастроек, ЭлементОтбора);
		КонецЦикла;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровкиСКД);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиСКД);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ДанныеРасшифровкиДеталей = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиСКД, ЭтаФорма.УникальныйИдентификатор);
		
		Элементы.ГруппаВарианта.Видимость = Ложь;
		Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
		
	КонецЕсли;
	       	
КонецПроцедуры
        
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	    	
	Если Параметры.Свойство("СтруктураНастройки") Тогда	
		CustomsСервер.ОтменитьИспользованиеПараметровИОтборовВПользовательскихНастройках(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы);		
	КонецЕсли;

КонецПроцедуры
       

