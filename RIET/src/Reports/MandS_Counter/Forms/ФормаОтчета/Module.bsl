
&НаКлиенте
Процедура ShowFilters(Команда)
	
	Элементы.ShowFilters.Пометка = НЕ Элементы.ShowFilters.Пометка;
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Элементы.ShowFilters.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отсчет();
	
	ПодключитьОбработчикОжидания("Отсчет", 60);
	
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Отсчет()
	
	MinutesRemaining = MinutesRemaining - 1;
	Если MinutesRemaining = 0 Тогда
		ЭтаФорма.СкомпоноватьРезультат();
		Попытка
			Результат.Рисунки[0].Ширина = 450;
		Исключение
		КонецПопытки;
		Попытка
		Результат.Рисунки[1].Ширина = 450;
		Исключение
		КонецПопытки;
	КонецЕсли;

	MinutesRemaining = 60;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыСформировать(Команда)
	ОбработатьГрафики();
КонецПроцедуры

&НаСервере
Процедура ОбработатьГрафики()

	ЭтаФорма.СкомпоноватьРезультат();
	Попытка
		Результат.Рисунки[0].Ширина = 450;
	Исключение
	КонецПопытки;
	Попытка
		Результат.Рисунки[1].Ширина = 450;
	Исключение
	КонецПопытки;

КонецПроцедуры

//&НаКлиенте
//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//ДеталиРасшифровки = Новый Структура; 
	//
	//ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки);
	//
	//Если ДеталиРасшифровки.Количество() > 0 Тогда
	//	

	//	ДеталиРасшифровки.Вставить("ИмяСхемы", "Report");
	//	
	//	ОткрытьФорму("Отчет.MandS_Counter_Details.Форма.ФормаОтчета", Новый Структура("Отбор", ДеталиРасшифровки), ЭтаФорма);
	//	
	//КонецЕсли;
	
//КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки) 
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка);
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка)
	
	ЭлементРасшифровкиДанных = Данные.Элементы.Получить(Расшифровка);
	
	// выбираем поля. Если это группа, то обходим ее рекурсивно
	Если ТипЗнч(ЭлементРасшифровкиДанных) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля(); 
		Для каждого ТекПоле из Поля Цикл
			ДеталиРасшифровки.Вставить(ТекПоле.Поле, ТекПоле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// далее просматриваем родителей
	Родители = ЭлементРасшифровкиДанных.ПолучитьРодителей(); 
	
	Для каждого Родитель из Родители Цикл
		
		ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Родитель.Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если КлючТекущегоВарианта = "Report" ИЛИ КлючТекущегоВарианта = "Tables" тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	//ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыФормы.Вставить("КлючВарианта", "Report");
	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Расшифровка");
	
	ФормаРасшифровки = ПолучитьФорму("Отчет.MandS_Counter_Details.Форма.ФормаОтчета", ПараметрыФормы , , Истина);
	
	КомпоновщикНастроекРасшифровки = ФормаРасшифровки.Отчет.КомпоновщикНастроек;
	
	ЗаполнитьНастройкиРасшифровки(КомпоновщикНастроекРасшифровки, Расшифровка);
	//ЗаполнитьРасшифровки(КомпоновщикНастроекРасшифровки, Расшифровка);
	
	ФормаРасшифровки.Открыть();
	
	ФормаРасшифровки.Скомпоноватьрезультат();
	
	ФормаРасшифровки.ВариантМодифицирован = Ложь; 
	
	
КонецПроцедуры


&НаКлиенте
Функция ЗаполнитьНастройкиРасшифровки(КомпоновщикНастроекРасшифровки, Расшифровка)
	
	ПараметрыКомпоновки = КомпоновщикНастроекРасшифровки.Настройки.ПараметрыДанных;
	
	ПараметрОтчета = ПараметрПользовательскихНастроек(Отчет.КомпоновщикНастроек, "Period");
	
	ПараметрОтчетаРасшифровки = ПараметрПользовательскихНастроек(КомпоновщикНастроекРасшифровки, "Period");
	
	ПараметрОтчетаРасшифровки.Значение = ПараметрОтчета.Значение;
	
	ДеталиРасшифровки = Новый Структура; 
	
	ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки);
	
	МассивОтборов = Новый Массив;
	
	НастройкиСКД(Отчет.КомпоновщикНастроек, МассивОтборов);
	
	//Для i= 0 По Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество() - 1 Цикл
	//	ТекущаяНастройка = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[i];
	//	НоваяНастройка  = КомпоновщикНастроекРасшифровки.ПользовательскиеНастройки.Элементы[i];
	//	ЗаполнитьЗначенияСвойств(НоваяНастройка, ТекущаяНастройка);
	//КонецЦикла;
	
	Для Каждого СтрокаОтбора Из МассивОтборов Цикл
		
		НовыйЭлементОтбора = КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроекРасшифровки.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаОтбора.Левое)).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = СтрокаОтбора.Правое;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = СтрокаОтбора.ВидСравнения;
		
	КонецЦикла;
	
	//КомпоновщикНастроекРасшифровки.ЗагрузитьФиксированныеНастройки(Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	//КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	//КомпоновщикНастроекРасшифровки.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Если ДеталиРасшифровки.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			ЗаполнитьЗначенияСвойств(КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);
		КонецЦикла;
				
		Если ДеталиРасшифровки.Свойство("Subgeomarket") Тогда
				
			НовыйЭлементОтбора = КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроекРасшифровки.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("SubGeomarket")).Поле;
			НовыйЭлементОтбора.ПравоеЗначение = ДеталиРасшифровки.SubGeomarket;
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			
		ИначеЕсли ДеталиРасшифровки.Свойство("Segment") Тогда
			
			НовыйЭлементОтбора = КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроекРасшифровки.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Segment")).Поле;
			НовыйЭлементОтбора.ПравоеЗначение = ДеталиРасшифровки.Segment;
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьПользовательскиеНастройки()

&НаКлиенте
Функция ПараметрПользовательскихНастроек(КомпоновщикНастроек, ИмяПараметра)
	
	ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрКомпоновки = ПараметрыКомпоновки.Элементы.Найти(ИмяПараметра);
	
	ИдентификаторНастройки = ПараметрКомпоновки.ИдентификаторПользовательскойНастройки;
	
	Коллекция = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ПараметрПользовательскихНастроек = Коллекция.Найти(ИдентификаторНастройки);
	
	Возврат ПараметрПользовательскихНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастройкиСКД(КомпоновщикНастроек, МассивПараметров)
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Отбор.Элементы Цикл
		Если Элемент.Использование Тогда
			// { RGS ASeryakov, 14.08.2018 12:28:15 S-I-0005797
			Если НЕ ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			// } RGS ASeryakov, 14.08.2018 12:28:15 S-I-0005797
				СтруктураОтборов = Новый Структура;
				СтруктураОтборов.Вставить("Левое", СокрЛП(Элемент.ЛевоеЗначение));
				СтруктураОтборов.Вставить("ВидСравнения", Элемент.ВидСравнения);
				СтруктураОтборов.Вставить("Правое", Элемент.ПравоеЗначение);
				
				МассивПараметров.Добавить(СтруктураОтборов);
				
			// { RGS ASeryakov, 14.08.2018 12:28:15 S-I-0005797
			КонецЕсли;
			// } RGS ASeryakov 14.08.2018 12:28:52 S-I-0005797
		КонецЕсли;
		//ЗаполнитьЗначенияСвойств(КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровки(КомпоновщикНастроекРасшифровки, Расшифровка)
	
	//СхемаКомпоновкиДанных = Отчеты.MandS_Counter_Details.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//КомпоновщикНастроекРасшифровки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПараметрыКомпоновки = КомпоновщикНастроекРасшифровки.Настройки.ПараметрыДанных;
	
	ПараметрОтчета = ПараметрПользовательскихНастроек(Отчет.КомпоновщикНастроек, "Period");
	
	ПараметрОтчетаРасшифровки = ПараметрПользовательскихНастроек(КомпоновщикНастроекРасшифровки, "Period");
	
	ПараметрОтчетаРасшифровки.Значение = ПараметрОтчета.Значение;
	
	ДеталиРасшифровки = Новый Структура; 
	
	ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки);
	
	НастройкиСКД(КомпоновщикНастроекРасшифровки, Отчет.КомпоновщикНастроек);
	
	
	//КомпоновщикНастроекРасшифровки.ЗагрузитьФиксированныеНастройки(Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	//КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
	//КомпоновщикНастроекРасшифровки.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	
	Если ДеталиРасшифровки.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			ЗаполнитьЗначенияСвойств(КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);
		КонецЦикла;
				
		Если ДеталиРасшифровки.Свойство("Subgeomarket") Тогда
				
			НовыйЭлементОтбора = КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроекРасшифровки.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("SubGeomarket")).Поле;
			НовыйЭлементОтбора.ПравоеЗначение = ДеталиРасшифровки.SubGeomarket;
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			
		ИначеЕсли ДеталиРасшифровки.Свойство("Segment") Тогда
			
			НовыйЭлементОтбора = КомпоновщикНастроекРасшифровки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроекРасшифровки.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Segment")).Поле;
			НовыйЭлементОтбора.ПравоеЗначение = ДеталиРасшифровки.Segment;
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
КонецПроцедуры
