
&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецМесяца(ПериодОбработки) + 1);
	
КонецПроцедуры

Процедура ЗаполнитьДиаграммуДанными(Диаграмма, ДанныеДляЗаполнения, Максимальное, Вид = Неопределено, ПроцентОтклонения = 0)
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.АвтоТранспонирование = Ложь;
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
	Диаграмма.ПропускатьБазовоеЗначение = Истина;
	
	Если Вид <> "Недели" И MainVolume Тогда
		Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ИначеЕсли Вид <> "RUL" И Вид <> "Недели" Тогда
		Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемОбъемная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Максимальное) Тогда
		Диаграмма.ОсьЗначений.СпособОпределенияМаксимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
		Диаграмма.ОсьЗначений.СпособОпределенияМинимальногоЗначения = СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
		Диаграмма.ОсьЗначений.МаксимальноеЗначение = Максимальное + Максимальное * 0.1;
		Диаграмма.ОсьЗначений.МинимальноеЗначение = 0;
	КонецЕсли;
	
	Для Каждого Колонка из ДанныеДляЗаполнения.Колонки Цикл
		Если Колонка.Имя = "AdditionalVolume" Тогда
			Продолжить
		КонецЕсли;
		Если ДанныеДляЗаполнения.Колонки.Индекс(Колонка) <> 0 Тогда
			
			Если Колонка.Имя = "План" Тогда
				НазваниеСерии = "Plan";
			ИначеЕсли Колонка.Имя = "Факт" Тогда
				НазваниеСерии = "Fact";
			ИначеЕсли Колонка.Имя = "WeightФакт" Тогда
				НазваниеСерии = "Weight fact";
			ИначеЕсли Колонка.Имя = "WeightПлан" Тогда
				НазваниеСерии = "Weight plan";
			ИначеЕсли Колонка.Имя = "СреднеВзвешенныйTnKmФакт" Тогда
				НазваниеСерии = "Tn/Km fact";
			ИначеЕсли Колонка.Имя = "СреднеВзвешенныйTnKmПлан" Тогда
				НазваниеСерии = "Tn/Km plan";
			ИначеЕсли Колонка.Имя = "Duration" Тогда
				НазваниеСерии = "Duration";
			ИначеЕсли Колонка.Имя = "Week1" Тогда
				НазваниеСерии = "Week1";
			ИначеЕсли Колонка.Имя = "Week2" Тогда
				НазваниеСерии = "Week2";
			ИначеЕсли Колонка.Имя = "Week3" Тогда
				НазваниеСерии = "Week3";
			ИначеЕсли Колонка.Имя = "Week4" Тогда
				НазваниеСерии = "Week4";
			КонецЕсли;
			
			Диаграмма.Серии.Добавить(НазваниеСерии);
		КонецЕсли;
	КонецЦикла;
	
	ТочкаНазвание = "" + ?(ЗначениеЗаполнено(Project), "" + Project + " ", "") + ?(ЗначениеЗаполнено(AU), "" +AU + " ", "") + ?(ЗначениеЗаполнено(ServiceProvider), "" +ServiceProvider + " ", "");
	Точки = 0;
	
	Если Вид <> "Недели" И НЕ MainVolume Тогда 
		
		Если Вид <> "RUL" И Вид <> "AvgWeight" И Вид <> "Duration" Тогда
			
			ДанныеДляЗаполнения = ПодготовитьДанныеДляЗаполненияВДиаграммыСНакоплением(ДанныеДляЗаполнения, Вид);
			
			Диаграмма.Обновление = Ложь;
			Диаграмма.КоличествоСерий = ДанныеДляЗаполнения.Колонки.Количество() - 1;
			Диаграмма.КоличествоТочек = ДанныеДляЗаполнения.Количество();
			
			Для НомерСтроки = 0 По ДанныеДляЗаполнения.Количество() -1 Цикл
				
				Диаграмма.Точки[НомерСтроки].Текст = ДанныеДляЗаполнения[НомерСтроки].ПланФакт;
				
				Для НомерКолонки = 1 по ДанныеДляЗаполнения.Колонки.Количество() -1  Цикл
					
					Если ЗначениеЗаполнено(ДанныеДляЗаполнения[НомерСтроки][НомерКолонки]) Тогда
						Серия = Диаграмма.Серии[НомерКолонки - 1];
						Серия.Текст = ДанныеДляЗаполнения.Колонки[НомерКолонки].Имя;
						Если Диаграмма.Точки[НомерСтроки].Текст = "Plan" Тогда
							Серия.Текст = "Plan";
							Серия.Цвет = Новый Цвет(192, 192, 192);
						ИначеЕсли ПроцентОтклонения = 0 Тогда
							Серия.Цвет = Новый Цвет(28, 85, 174);
						ИначеЕсли ПроцентОтклонения <= 10 Тогда
							Если Серия.Текст = "ОсновнойОбъём" Тогда
								Серия.Текст = "Main volume";
								Серия.Цвет = Новый Цвет(0, 128, 0);
							Иначе
								Серия.Текст = "Additional volume";
								Серия.Цвет = Новый Цвет(51, 153, 102);
							КонецЕсли;
						ИначеЕсли ПроцентОтклонения > 10 И ПроцентОтклонения <= 30 Тогда
							Если Серия.Текст = "ОсновнойОбъём" Тогда
								Серия.Текст = "Main volume";
								Серия.Цвет = Новый Цвет(225, 225, 0);
							Иначе
								Серия.Текст = "Additional volume";
								Серия.Цвет = Новый Цвет(255, 200, 0);
							КонецЕсли;
						ИначеЕсли ПроцентОтклонения > 30 Тогда
							Если Серия.Текст = "ОсновнойОбъём" Тогда
								Серия.Текст = "Main volume";
								Серия.Цвет = Новый Цвет(225, 0, 0);
							Иначе
								Серия.Текст = "Additional volume";
								Серия.Цвет = Новый Цвет(170, 0, 0);
							КонецЕсли;
						КонецЕсли;
						Точки = Диаграмма.Точки[НомерСтроки];
						Диаграмма.УстановитьЗначение(Точки,Серия,ДанныеДляЗаполнения[НомерСтроки][НомерКолонки]);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрТраб из ДанныеДляЗаполнения Цикл
				Точки = Точки + 1;
				Если Вид = "RUL" Тогда
					Точка=Диаграмма.Точки.Добавить("RUL");
				Иначе
					Точка=Диаграмма.Точки.Добавить(ТочкаНазвание);
				КонецЕсли;
				Индекс=0;
				Для Каждого Серия из Диаграмма.Серии Цикл
					Индекс=Индекс+1;
					Диаграмма.УстановитьЗначение(Точка,Серия,СтрТраб.Получить(Индекс));
					Если Серия.Текст = "Plan" ИЛИ Серия.Текст = "Weight plan" ИЛИ Серия.Текст = "Tn/Km plan" Тогда
						Серия.Цвет = Новый Цвет(192, 192, 192);
					ИначеЕсли ПроцентОтклонения = 0 Тогда
						Серия.Цвет = Новый Цвет(28, 85, 174);
					ИначеЕсли ПроцентОтклонения <= 10 Тогда
						Серия.Цвет = Новый Цвет(0, 200, 70);
					ИначеЕсли ПроцентОтклонения > 10 И ПроцентОтклонения <= 30 Тогда
						Серия.Цвет = Новый Цвет(255, 255, 0);
					ИначеЕсли ПроцентОтклонения > 30 Тогда
						Серия.Цвет = Новый Цвет(225, 0, 0);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		
	Иначе
		Для Каждого СтрТраб из ДанныеДляЗаполнения Цикл
			Точки = Точки + 1;
			Если Вид = "Недели" Тогда
				Точка=Диаграмма.Точки.Добавить("Week" + СтрТраб.Неделя);
			ИначеЕсли Вид = "RUL" Тогда
				Точка=Диаграмма.Точки.Добавить("RUL");
			Иначе
				Точка=Диаграмма.Точки.Добавить(ТочкаНазвание);
			КонецЕсли;
			Индекс=0;
			Для Каждого Серия из Диаграмма.Серии Цикл
				Индекс=Индекс+1;
				Диаграмма.УстановитьЗначение(Точка,Серия,СтрТраб.Получить(Индекс));
				Если Серия.Текст = "Plan" ИЛИ Серия.Текст = "Weight plan" ИЛИ Серия.Текст = "Tn/Km plan" Тогда
					Серия.Цвет = Новый Цвет(192, 192, 192);
				ИначеЕсли ПроцентОтклонения = 0 Тогда
					Серия.Цвет = Новый Цвет(28, 85, 174);
				ИначеЕсли ПроцентОтклонения <= 10 Тогда
					Серия.Цвет = Новый Цвет(0, 200, 70);
				ИначеЕсли ПроцентОтклонения > 10 И ПроцентОтклонения <= 30 Тогда
					Серия.Цвет = Новый Цвет(255, 255, 0);
				ИначеЕсли ПроцентОтклонения > 30 Тогда
					Серия.Цвет = Новый Цвет(225, 0, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоМесяца(ПериодОбработки - 1));

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(НовыйПериод)

	ПериодОбработки = НовыйПериод;
	ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"), 
		НачалоМесяца(ПериодОбработки),
		КонецМесяца(ПериодОбработки));
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", 
		ПериодОбработки, КонецМесяца(ПериодОбработки));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы.ПредставлениеПериода);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодОбработки		 = НачалоМесяца(ТекущаяДата());
	ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(ПериодОбработки), КонецМесяца(ПериодОбработки));
	MobillizationType = Перечисления.SummerWinter.WinterMobilization;
	Currency = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB");
	Geomarket = Справочники.GeoMarkets.НайтиПоКоду("RUL");
	
	AccessorialСosts = Истина;
	Накопительный = Ложь;
	MainVolume = Истина;
	
	МассивCurrency = Новый Массив;
	МассивCurrency.Добавить(Справочники.Валюты.НайтиПоКоду("643"));
	МассивCurrency.Добавить(Справочники.Валюты.НайтиПоКоду("840"));
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивCurrency));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Currency.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

Функция ПолучитьДанныеДляФормирования(ДатаНач, ДатаКон, НачалоМобиллизации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	TripNonLawsonCompaniesParcels.Ссылка КАК Trip,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime = &ПустаяДата
	               |				ТОГДА TripNonLawsonCompaniesStops_Source.PlannedArrivalLocalTime
	               |			ИНАЧЕ TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime
	               |		КОНЕЦ) КАК Период,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.ProjectClient КАК Project,
	               |	TripNonLawsonCompaniesParcels.Ссылка.Equipment КАК TypeOfTransport,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter КАК CostCenter,
	               |	TripNonLawsonCompaniesParcels.Ссылка.ServiceProvider КАК ServiceProvider,
	               |	TripNonLawsonCompaniesParcels.Ссылка.NavigationType КАК NavigationType,
	               |	ВЫБОР
	               |		КОГДА TripNonLawsonCompaniesParcels.Ссылка.TotalActualDuration <> 0
	               |			ТОГДА ВЫРАЗИТЬ(TripNonLawsonCompaniesParcels.Ссылка.TotalActualDuration / 3600 КАК ЧИСЛО(10, 1))
	               |		ИНАЧЕ ВЫРАЗИТЬ(TripNonLawsonCompaniesParcels.Ссылка.TotalPlannedDuration / 3600 КАК ЧИСЛО(10, 1))
	               |	КОНЕЦ КАК Duration,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Geomarket КАК Geomarket,
	               |	TripNonLawsonCompaniesParcels.Ссылка.AdditionalVolume,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo,
	               |	StagesOfTripsNonLawsonCompanies.Stage
	               |ПОМЕСТИТЬ Данные
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops_Source
	               |		ПО TripNonLawsonCompaniesParcels.Ссылка = TripNonLawsonCompaniesStops_Source.Ссылка
	               |			И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse = TripNonLawsonCompaniesStops_Source.Location
	               |			И (TripNonLawsonCompaniesStops_Source.Type <> ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTripsNonLawsonCompanies КАК StagesOfTripsNonLawsonCompanies
	               |		ПО TripNonLawsonCompaniesParcels.Ссылка = StagesOfTripsNonLawsonCompanies.Trip
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime = &ПустаяДата
	               |				ТОГДА TripNonLawsonCompaniesStops_Source.PlannedArrivalLocalTime
	               |			ИНАЧЕ TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime
	               |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И TripNonLawsonCompaniesParcels.Ссылка.NavigationType = &NavigationType
	               |	И НЕ TripNonLawsonCompaniesParcels.Ссылка.ПометкаУдаления
				   |	//ДопОтбор1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	TripNonLawsonCompaniesParcels.Ссылка,
	               |	TripNonLawsonCompaniesParcels.Ссылка.Equipment,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter,
	               |	TripNonLawsonCompaniesParcels.Ссылка.ServiceProvider,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.ProjectClient,
	               |	TripNonLawsonCompaniesParcels.Ссылка.NavigationType,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Geomarket,
	               |	TripNonLawsonCompaniesParcels.Ссылка.AdditionalVolume,
	               |	ВЫБОР
	               |		КОГДА TripNonLawsonCompaniesParcels.Ссылка.TotalActualDuration <> 0
	               |			ТОГДА ВЫРАЗИТЬ(TripNonLawsonCompaniesParcels.Ссылка.TotalActualDuration / 3600 КАК ЧИСЛО(10, 1))
	               |		ИНАЧЕ ВЫРАЗИТЬ(TripNonLawsonCompaniesParcels.Ссылка.TotalPlannedDuration / 3600 КАК ЧИСЛО(10, 1))
	               |	КОНЕЦ,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo,
	               |	StagesOfTripsNonLawsonCompanies.Stage
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Данные.Период КАК Период,
	               |	Данные.TypeOfTransport КАК TypeOfTransport,
	               |	Данные.NavigationType КАК MobillizationType,
	               |	Данные.Project КАК Project,
	               |	Данные.Trip КАК Trip,
	               |	Данные.CostCenter КАК CostCenter,
	               |	Данные.ServiceProvider КАК ServiceProvider,
	               |	&CurrencyUSD КАК Currency,
	               |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА Данные.Trip.TypeOfTransport = ЗНАЧЕНИЕ(перечисление.TypesOfTransport.Rental)
	               |					ТОГДА LocalDistributionCostsMilageWeightVolumeОбороты1.SumОборот
	               |				ИНАЧЕ LocalDistributionCostsMilageWeightVolumeОбороты.SumОборот
	               |			КОНЕЦ КАК ЧИСЛО(12, 2))) КАК Факт,
	               |	NULL КАК План,
	               |	СУММА(ВЫБОР
	               |			КОГДА Данные.Trip.TypeOfTransport = ЗНАЧЕНИЕ(перечисление.TypesOfTransport.rental)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ЕСТЬNULL(LocalDistributionCostsMilageWeightVolumeОбороты1.TonneKilometersОборот, 0) = 0
	               |							ТОГДА 0
	               |						ИНАЧЕ LocalDistributionCostsMilageWeightVolumeОбороты1.SumОборот / LocalDistributionCostsMilageWeightVolumeОбороты1.TonneKilometersОборот
	               |					КОНЕЦ
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ЕСТЬNULL(LocalDistributionCostsMilageWeightVolumeОбороты.TonneKilometersОборот, 0) = 0
	               |						ТОГДА 0
	               |					ИНАЧЕ LocalDistributionCostsMilageWeightVolumeОбороты.SumОборот / LocalDistributionCostsMilageWeightVolumeОбороты.TonneKilometersОборот
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК TnKmФакт,
	               |	NULL КАК TnKmПлан,
	               |	СУММА(ВЫРАЗИТЬ(LocalDistributionCostsMilageWeightVolumeОбороты.WeightОборот / 1000 КАК ЧИСЛО(12, 2))) КАК WeightФакт,
	               |	Данные.Duration КАК Duration,
	               |	NULL КАК WeightПлан,
	               |	NULL КАК City,
	               |	RegionsToLocations.Location КАК Region,
	               |	Данные.Geomarket,
	               |	Данные.AdditionalVolume,
	               |	Данные.ParcelTransportRequestDeliverTo
	               |ИЗ
	               |	Данные КАК Данные
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.LocalDistributionCostsMilageWeightVolume.Обороты(, , Регистратор, ) КАК LocalDistributionCostsMilageWeightVolumeОбороты
				   |		ПО Данные.Trip = LocalDistributionCostsMilageWeightVolumeОбороты.Регистратор
				   |			И Данные.ParcelTransportRequestPickUpWarehouse = LocalDistributionCostsMilageWeightVolumeОбороты.SourceLocation
				   |			И Данные.ParcelTransportRequestDeliverTo = LocalDistributionCostsMilageWeightVolumeОбороты.DestinationLocation
				   |			И Данные.CostCenter.Geomarket = LocalDistributionCostsMilageWeightVolumeОбороты.Geomarket
				   |			И Данные.CostCenter.Segment = LocalDistributionCostsMilageWeightVolumeОбороты.Segment
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.RegionsToLocations КАК RegionsToLocations
				   |		ПО Данные.ParcelTransportRequestDeliverTo = RegionsToLocations.Warehouse
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.LocalDistributionCostsMilageWeightVolume.Обороты КАК LocalDistributionCostsMilageWeightVolumeОбороты1
				   |		ПО Данные.Trip = LocalDistributionCostsMilageWeightVolumeОбороты1.Trip
				   |			И Данные.ParcelTransportRequestPickUpWarehouse = LocalDistributionCostsMilageWeightVolumeОбороты1.SourceLocation
				   |			И Данные.ParcelTransportRequestDeliverTo = LocalDistributionCostsMilageWeightVolumeОбороты1.DestinationLocation
				   |			И Данные.CostCenter.Geomarket = LocalDistributionCostsMilageWeightVolumeОбороты1.Geomarket
				   |			И Данные.CostCenter.Segment = LocalDistributionCostsMilageWeightVolumeОбороты1.Segment
				   |ГДЕ
				   |	Данные.Stage <> ЗНАЧЕНИЕ(Перечисление.TripNonLawsonCompaniesStages.Draft)
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	Данные.Trip,
	               |	Данные.Период,
	               |	Данные.Project,
	               |	Данные.TypeOfTransport,
	               |	Данные.CostCenter,
	               |	Данные.ServiceProvider,
	               |	Данные.NavigationType,
	               |	Данные.Duration,
	               |	Данные.Geomarket,
	               |	Данные.AdditionalVolume,
	               |	Данные.ParcelTransportRequestDeliverTo,
	               |	RegionsToLocations.Location
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	MobillizationBudget.Период,
	               |	MobillizationBudget.TypeOfTransport,
	               |	MobillizationBudget.MobillizationType,
	               |	MobillizationBudget.Project,
	               |	NULL,
	               |	MobillizationBudget.AU,
	               |	MobillizationBudget.ServiceProvider,
	               |	&Currency,
	               |	NULL,
	               |	СУММА(ВЫРАЗИТЬ(MobillizationBudget.Sum КАК ЧИСЛО(12, 2))),
	               |	NULL,
	               |	СУММА(ВЫРАЗИТЬ(MobillizationBudget.TnKm КАК ЧИСЛО(12, 2))),
	               |	NULL,
	               |	NULL,
	               |	СУММА(ВЫРАЗИТЬ(MobillizationBudget.Weight КАК ЧИСЛО(12, 2))),
	               |	MobillizationBudget.City,
	               |	MobillizationBudget.Region,
	               |	MobillizationBudget.Geomarket,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	РегистрСведений.MobillizationBudget КАК MobillizationBudget
	               |ГДЕ
	               |	MobillizationBudget.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И MobillizationBudget.MobillizationType = &NavigationType
				   |	//ДопОтбор2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	MobillizationBudget.Период,
	               |	MobillizationBudget.MobillizationType,
	               |	MobillizationBudget.Project,
	               |	MobillizationBudget.TypeOfTransport,
	               |	MobillizationBudget.AU,
	               |	MobillizationBudget.ServiceProvider,
	               |	MobillizationBudget.City,
	               |	MobillizationBudget.Region,
	               |	MobillizationBudget.Geomarket";
	
	
	Запрос.УстановитьПараметр("NavigationType", MobillizationType);
	Запрос.УстановитьПараметр("КонецПериода", ДатаКон);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("Currency", CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB"));
	Запрос.УстановитьПараметр("CurrencyUSD", CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("USD"));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("01.01.0001 00:00:00"));
	
	ДопОтбор1 = "";
	ДопОтбор2 = "";
	
	
	//Если AccessorialСosts Тогда
	//	Costs = " LocalDistributionCostsPerItemОбороты.TotalCostsSumОборот ";
	//Иначе
	//	Costs = " LocalDistributionCostsPerItemОбороты.BaseCostsSumОборот ";
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Project) Тогда
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.ProjectClient = &Project";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.Project = &Project";
		
		Запрос.УстановитьПараметр("Project", Project);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(AU) Тогда
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter = &AU";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.AU = &AU";
		
		Запрос.УстановитьПараметр("AU", AU);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ServiceProvider) Тогда
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Ссылка.ServiceProvider = &ServiceProvider";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.ServiceProvider = &ServiceProvider";
		
		Запрос.УстановитьПараметр("ServiceProvider", ServiceProvider);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(TypeOfTransport) Тогда
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Ссылка.Equipment = &TypeOfTransport";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.TypeOfTransport = &TypeOfTransport";
		
		Запрос.УстановитьПараметр("TypeOfTransport", TypeOfTransport);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(City) И ЗначениеЗаполнено(Region) Тогда
		
		СоответствиеГородовЛокациям = ПолучитьМассивЛокаций(Region, City);
		
			ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo В (&МассивЛокаций)";
			ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.City = &City";
			ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.Region = &Region";
			
			Запрос.УстановитьПараметр("МассивЛокаций", СоответствиеГородовЛокациям);
			Запрос.УстановитьПараметр("City", City);
			Запрос.УстановитьПараметр("Region", Region);
		
	ИначеЕсли ЗначениеЗаполнено(Region) Тогда
		
		МассивЛокаций = ПолучитьМассивЛокаций(Region);
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo В (&МассивЛокаций)";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.Region = &Region";
		
		Запрос.УстановитьПараметр("МассивЛокаций", МассивЛокаций);
		Запрос.УстановитьПараметр("Region", Region);
		
	ИначеЕсли ЗначениеЗаполнено(City) Тогда
		
		СоответствиеГородовЛокациям = ПолучитьМассивЛокациПоГороду(City);
		
		Если СоответствиеГородовЛокациям.Количество() = 0 Тогда
			ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo.City = &City";
			ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.City = &City";
			
			Запрос.УстановитьПараметр("City", City);
		Иначе
			ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo В (&МассивЛокаций)";
			ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.City = &City";
			
			Запрос.УстановитьПараметр("МассивЛокаций", СоответствиеГородовЛокациям);
			Запрос.УстановитьПараметр("City", City);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Geomarket) Тогда
		
		//ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Geomarket = &Geomarket";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.Geomarket = &Geomarket";
		
		Запрос.УстановитьПараметр("Geomarket", Geomarket);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Segment) Тогда
		
		ДопОтбор1 = ДопОтбор1 + " И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Segment В(&Segment)";
		ДопОтбор2 = ДопОтбор2 + " И MobillizationBudget.AU.Segment В(&Segment)";
		
		МассивСегментов = ОпределитьПодчинённыеСегменты(Segment.ВыгрузитьЗначения());
		
		Запрос.УстановитьПараметр("Segment", МассивСегментов);
	КонецЕсли;
	
	Если MainVolume Тогда
		ДопОтбор1 = ДопОтбор1 + " И НЕ TripNonLawsonCompaniesParcels.Ссылка.AdditionalVolume";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор1", ДопОтбор1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор2", ДопОтбор2);
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Costs", Costs);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	CurrencyФорма = Currency;
	Если Не ЗначениеЗаполнено(CurrencyФорма) Тогда
		CurrencyФорма = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB");
	КонецЕсли;
	
	//СписокРегионов = ПолучитьРегионы();
	РезультатЗапроса.Колонки.Добавить("AccessorialCost");
	ТаблицаДопЗатрат = ДопЗатраты.Выгрузить();
	РезультатЗапросаДляОтбора = РезультатЗапроса.Скопировать();
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		
		НайденнаяСтрока = ТаблицаДопЗатрат.Найти(Строка.Trip, "Trip");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Trip", Строка.Trip);
			МассивНайденныхСтрок = РезультатЗапросаДляОтбора.НайтиСтроки(СтруктураПоиска);
			СуммаЗатрат = 0;
			Если МассивНайденныхСтрок.Количество() = 1 Тогда
				СуммаЗатрат = НайденнаяСтрока.Cost;
			Иначе
				Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл
					СуммаЗатрат = СуммаЗатрат + СтрокаМассива.Факт;
				КонецЦикла;
				СуммаЗатрат = НайденнаяСтрока.Cost * (Строка.Факт / СуммаЗатрат);
			КонецЕсли;
			
			Если НЕ AccessorialСosts Тогда
				Строка.Факт = Строка.Факт - СуммаЗатрат;
			КонецЕсли;
			Строка.AccessorialCost = СуммаЗатрат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Currency) И Строка.Currency = CurrencyФорма Тогда
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Currency) И Строка.Currency <> CurrencyФорма Тогда
			
			Если ЗначениеЗаполнено(Строка.Trip) Тогда
				ДатаТрип = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Trip, "Дата");
			Иначе
				ДатаТрип = Строка.Период;
			КонецЕсли;
			
			СтруктураCurrency = ОбщегоНазначения.ПолучитьКурсВалюты(Строка.Currency, ДатаТрип);
			СтруктураCurrencyФорма = ОбщегоНазначения.ПолучитьКурсВалюты(CurrencyФорма, ДатаТрип);
			
			Если ЗначениеЗаполнено(Строка.Факт) Тогда
				Строка.Факт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.Факт, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.AccessorialCost) Тогда
				Строка.AccessorialCost = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.AccessorialCost, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.План) Тогда
				Строка.План = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.План, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.TnKmФакт) Тогда
				Строка.TnKmФакт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.TnKmФакт, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.TnKmПлан) Тогда
				Строка.TnKmПлан = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.TnKmПлан, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			Строка.Currency = CurrencyФорма;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Currency) Тогда
			Строка.Currency = CurrencyФорма;
		КонецЕсли;
		
		Если СуммыВТыс Тогда
			Если ЗначениеЗаполнено(Строка.Факт) Тогда
				Строка.Факт = Окр(Строка.Факт / 1000, 0);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.План) Тогда
				Строка.План = Окр(Строка.План / 1000, 0);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.AccessorialCost) Тогда
				Строка.AccessorialCost = Окр(Строка.AccessorialCost / 1000, 0);
			КонецЕсли;
		КонецЕсли;
		
		//СтруктураОтбора = Новый Структура("Warehouse", Строка.ParcelTransportRequestDeliverTo);
		//Строки = СписокРегионов.НайтиСтроки(СтруктураОтбора);
		//Если Строки.Количество() = 1 Тогда
		//	Строка.Region = Строки[0].Location;
		//КОнецЕсли;
		
	КонецЦикла;
	
	ОпределитьВесСтрок(РезультатЗапроса);
	
	Если НачалоМобиллизации = Неопределено Тогда
		ТаблицаРасшифровки.Очистить();
		ТаблицаРасшифровки.Загрузить(РезультатЗапроса);
	Иначе
		ТаблицаРасшифровкиСНачалаМобиллизации.Очистить();
		ТаблицаРасшифровкиСНачалаМобиллизации.Загрузить(РезультатЗапроса);
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ПоказатьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт

КонецПроцедуры


&НаКлиенте
Процедура VariantПриИзменении(Элемент)
	
	//Элементы.AccessorialСosts.Видимость = Накопительный = "Sum";
	//Элементы.Currency.Видимость = Накопительный = "Sum";
	//Элементы.СуммыВТыс.Видимость = Variant = "Sum";
	AccessorialСosts = Ложь;
	//СуммыВТыс = Ложь;
	
КонецПроцедуры


&НаСервере
Процедура СформироватьДиаграммыНаСервере()
	
	ТабДокументДиаграммы.Очистить();
	ТаблицаРасшифровкиСНачалаМобиллизации.Очистить();
	ТаблицаРасшифровки.Очистить();
	ТаблицаРасшифровкиRUL.Очистить();
	ТаблицаРасшифровки1Неделя.Очистить();
	ТаблицаРасшифровки2Неделя.Очистить();
	ТаблицаРасшифровки3Неделя.Очистить();
	ТаблицаРасшифровки4Неделя.Очистить();
	ТаблицаРасшифровки5Неделя.Очистить();
	ДопЗатраты.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	МакетДиаграмма = ОтчетОбъект.ПолучитьМакет("МакетДиаграммы");
	
	НачДата = НачалоМесяца(ПериодОбработки);
	КонДата = КонецМесяца(ПериодОбработки);
	
	НаименованиеПоОтборам = ПолучитьНаименованиеПоИмеющимсяОтборам();
	НазваниеМесяца = Формат(НачДата, "Л=en; ДФ=MMMM");
	
	//ПолучитьТаблицу по RUL
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммыRUL");
	ОбластьМакета.Параметры.RUL_Sum_Заголовок = "Total RUL Plan / Fact";
	ОбластьМакета.Параметры.ОсьЗначений_RUL_Sum = "Sum, " + ?(СуммыВТыс, "1k "+ Currency, Currency);
	
	ОбластьМакета.Параметры.RUL_Weight_Заголовок = "Total RUL Plan / Fact (tons)";
	ОбластьМакета.Параметры.ОсьЗначений_RUL_Weight = "Weight, tons";
	
	ДатыМобиллизации = ПолучитьДатыМобиллизации();
	
	Если ДатыМобиллизации <> Неопределено Тогда
		ПолучитьДанныеДляФормированияПоRUL(ДатыМобиллизации.НачалоМобиллизации, ДатыМобиллизации.КонецМобиллизации);
	КонецЕсли;
	ТаблицаRUL = ТаблицаРасшифровкиRUL.Выгрузить();
	СуммаМесяцRUL = ТаблицаRUL.Скопировать();
	СуммаМесяцRUL.Свернуть("Currency","Факт, План");
	Для Каждого ЭлементRUL Из СуммаМесяцRUL Цикл
		ЭлементRUL.Факт = Окр(ЭлементRUL.Факт,0);
		ЭлементRUL.План = Окр(ЭлементRUL.План,0);
	КонецЦикла;
	ПроцентОтклоненияRULSum = ОпределитьПроцентОтклонения(СуммаМесяцRUL, "Sum");
	ОбластьМакета.Параметры.ПроцентОтклоненияRULSum = ПроцентОтклоненияRULSum;
	ЗаполнитьДиаграммуДанными(ОбластьМакета.Рисунки.RUL_Sum.Объект, СуммаМесяцRUL, 0, "RUL");
	
	WeightМесяцRUL = ТаблицаRUL.Скопировать();
	WeightМесяцRUL.Свернуть("Currency","WeightФакт, WeightПлан");
	Для Каждого ЭлементRULWeight Из WeightМесяцRUL Цикл
		ЭлементRULWeight.WeightФакт = Окр(ЭлементRULWeight.WeightФакт,0);
		ЭлементRULWeight.WeightПлан = Окр(ЭлементRULWeight.WeightПлан,0);
	КонецЦикла;
	ПроцентОтклоненияRULWeight = ОпределитьПроцентОтклонения(WeightМесяцRUL, "Weight");
	ОбластьМакета.Параметры.ПроцентОтклоненияRULWeight = ПроцентОтклоненияRULWeight;
	ЗаполнитьДиаграммуДанными(ОбластьМакета.Рисунки.RUL_Weight.Объект, WeightМесяцRUL, 0, "RUL");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
	//ПолучитьДанныеСНачалаМобиллизации
	ТаблицаСНачалаМобиллизации = ПолучитьДанныеСНачалаМобиллизации(ДатыМобиллизации);
	
	//Весь массив данных за указанный месяц
	ДанныеДляЗаполнения = ПолучитьДанныеДляФормирования(НачДата, КонДата);
	
	Максимальное = Неопределено;
	Неделя = 0;
	
	ТаблицаПериодов = ПолучитьТаблицуПериодов(НачДата, КонДата);
	
	//ЗаполниНедельныеТаблицы
	Неделя = 1;
	Для Каждого Строка ИЗ ТаблицаПериодов Цикл
		
		ФормированиеНедельныхТаблиц(ДанныеДляЗаполнения, Строка.НачалоПериода, Строка.КонецПериода, Неделя);
		Неделя = Неделя + 1;
		
	КонецЦикла;
	
	//Таблицы
	Месяц = ТаблицаРасшифровки.Выгрузить();
	Неделя1 = ТаблицаРасшифровки1Неделя.Выгрузить();
	Неделя2 = ТаблицаРасшифровки2Неделя.Выгрузить();
	Неделя3 = ТаблицаРасшифровки3Неделя.Выгрузить();
	Неделя4 = ТаблицаРасшифровки4Неделя.Выгрузить();
	Неделя5 = ТаблицаРасшифровки5Неделя.Выгрузить();
	
	СНачалаМобиллизации = ТаблицаРасшифровкиСНачалаМобиллизации.Выгрузить();
	
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммаSum");
	ОбластьМакета.Параметры.ЗаголовокДиаграммыНачало = "Total " + НаименованиеПоОтборам + " " + "Plan / Fact budget";
	ОбластьМакета.Параметры.ЗаголовокДиаграммыМесяц = "" + НазваниеМесяца + " " + НаименованиеПоОтборам + " " + "Plan / Fact";
	
	ОбластьМакета.Параметры.ОсьЗначений = "Sum, " + ?(СуммыВТыс, "1k "+ Currency, Currency);
	
	//Sum
	МаксимальноеSum = 0;
		
	НачалоМобиллизации_Sum = СНачалаМобиллизации.Скопировать();
	НачалоМобиллизации_Sum.Свернуть("AdditionalVolume","Факт, План");
	Для Каждого Элемент_НачалоМобиллизации_Sum Из НачалоМобиллизации_Sum Цикл
		Элемент_НачалоМобиллизации_Sum.Факт = Окр(Элемент_НачалоМобиллизации_Sum.Факт,0);
		Элемент_НачалоМобиллизации_Sum.План = Окр(Элемент_НачалоМобиллизации_Sum.План,0);
	КонецЦикла;
	ДиаграммаНачалоМобиллизации = ОбластьМакета.Рисунки.НачалоМобиллизацииSum.Объект;
	ПроцентОтклоненияSum = ОпределитьПроцентОтклонения(НачалоМобиллизации_Sum, "Sum");
	ОбластьМакета.Параметры.ПроцентОтклоненияНачало = ПроцентОтклоненияSum;
	ЗаполнитьДиаграммуДанными(ДиаграммаНачалоМобиллизации, НачалоМобиллизации_Sum, МаксимальноеSum, "Sum", ПроцентОтклоненияSum);
	
	СуммаМесяц = Месяц.Скопировать();
	СуммаМесяц.Свернуть("AdditionalVolume","Факт, План");
	Для Каждого Элемент_СуммаМесяц Из СуммаМесяц Цикл
		Элемент_СуммаМесяц.Факт = Окр(Элемент_СуммаМесяц.Факт,0);
		Элемент_СуммаМесяц.План = Окр(Элемент_СуммаМесяц.План,0);
	КонецЦикла;
	//Если СуммаМесяц.Количество() > 0 Тогда
	//	Если СуммаМесяц[0].План >= СуммаМесяц[0].Факт Тогда
	//		МаксимальноеSum = СуммаМесяц[0].План;
	//	Иначе
	//		МаксимальноеSum = СуммаМесяц[0].Факт;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДиаграммаМесяц = ОбластьМакета.Рисунки.МесяцSum.Объект;
	ДиаграммаНедели = ОбластьМакета.Рисунки.НеделиSum.Объект;
	
	НомерПервойНедели = НеделяГода(НачалоНедели(НачДата));
	i = 0;
	Пока i <> 6 Цикл
		
		Если i = 0 Тогда
			ПроцентОтклоненияSum = ОпределитьПроцентОтклонения(СуммаМесяц, "Sum");
			ОбластьМакета.Параметры.ПроцентОтклоненияМесяц = ПроцентОтклоненияSum;
			ЗаполнитьДиаграммуДанными(ДиаграммаМесяц, СуммаМесяц, 0, "Sum", ПроцентОтклоненияSum);
		ИначеЕсли i = 1 Тогда
			СуммаНеделя1 = Неделя1.Скопировать();
			СуммаНеделя1.Свернуть("","Факт");
		ИначеЕсли i = 2 Тогда
			СуммаНеделя2 = Неделя2.Скопировать();
			СуммаНеделя2.Свернуть("","Факт");
		ИначеЕсли i = 3 Тогда
			СуммаНеделя3 = Неделя3.Скопировать();
			СуммаНеделя3.Свернуть("","Факт");
		ИначеЕсли i = 4 Тогда
			СуммаНеделя4 = Неделя4.Скопировать();
			СуммаНеделя4.Свернуть("","Факт");
		ИначеЕсли i = 5 Тогда
			СуммаНеделя5 = Неделя5.Скопировать();
			СуммаНеделя5.Свернуть("","Факт");
		КонецЕсли;
		
		//
		i = i + 1;
	КонецЦикла;
	
	Структура_ДанныеДляЗаполнения = ОбъединитьНедельныеДанные(СуммаНеделя1, СуммаНеделя2, СуммаНеделя3, СуммаНеделя4, СуммаНеделя5, НомерПервойНедели);
	
	ЗаполнитьДиаграммуДанными(ДиаграммаНедели, Структура_ДанныеДляЗаполнения.ТаблицаДанных_Недели, Структура_ДанныеДляЗаполнения.Максимальное, "Недели");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
	//Weight
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммаWeight");
	ОбластьМакета.Параметры.ЗаголовокДиаграммыНачало = "Total " + НаименованиеПоОтборам + " " + "Plan / Fact budget (tons)";
	ОбластьМакета.Параметры.ЗаголовокДиаграммыМесяц = "" + НазваниеМесяца + " " + НаименованиеПоОтборам + " " + "Plan / Fact (tons)";
	ОбластьМакета.Параметры.ОсьЗначений = "Weight, tons";
	
	МаксимальноеWeight = 0;
	
	НачалоМобиллизации_Weight = СНачалаМобиллизации.Скопировать();
	НачалоМобиллизации_Weight.Свернуть("AdditionalVolume","WeightПлан, WeightФакт");
	
	Для Каждого Элемент_НачалоМобиллизации_Weight Из НачалоМобиллизации_Weight Цикл
		Элемент_НачалоМобиллизации_Weight.WeightПлан = Окр(Элемент_НачалоМобиллизации_Weight.WeightПлан,0);
		Элемент_НачалоМобиллизации_Weight.WeightФакт = Окр(Элемент_НачалоМобиллизации_Weight.WeightФакт,0);
	КонецЦикла;
	
	ПроцентОтклоненияWeight = ОпределитьПроцентОтклонения(НачалоМобиллизации_Weight, "Weight");
	ОбластьМакета.Параметры.ПроцентОтклоненияНачало = ПроцентОтклоненияWeight;
	ДиаграммаНачалоМобиллизации = ОбластьМакета.Рисунки.НачалоМобиллизацииWeight.Объект;
	ЗаполнитьДиаграммуДанными(ДиаграммаНачалоМобиллизации, НачалоМобиллизации_Weight, МаксимальноеWeight, "Weight", ПроцентОтклоненияWeight);
	
	WeightМесяц = Месяц.Скопировать();
	WeightМесяц.Свернуть("AdditionalVolume","WeightПлан, WeightФакт");
	
	Для Каждого Элемент_WeightМесяц Из WeightМесяц Цикл
		Элемент_WeightМесяц.WeightПлан = Окр(Элемент_WeightМесяц.WeightПлан,0);
		Элемент_WeightМесяц.WeightФакт = Окр(Элемент_WeightМесяц.WeightФакт,0);
	КонецЦикла;
	
	//Если WeightМесяц.Количество() > 0 Тогда
	//	Если WeightМесяц[0].WeightПлан >= WeightМесяц[0].WeightФакт Тогда
	//		МаксимальноеWeight = WeightМесяц[0].WeightПлан;
	//	Иначе
	//		МаксимальноеWeight = WeightМесяц[0].WeightФакт;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДиаграммаМесяц = ОбластьМакета.Рисунки.МесяцWeight.Объект;
	ДиаграммаНедели = ОбластьМакета.Рисунки.НеделиWeight.Объект;
	
	i = 0;
	Пока i <> 6 Цикл
		
		Если i = 0 Тогда
			ПроцентОтклоненияWeight = ОпределитьПроцентОтклонения(WeightМесяц, "Weight");
			ОбластьМакета.Параметры.ПроцентОтклоненияМесяц = ПроцентОтклоненияWeight;
			ЗаполнитьДиаграммуДанными(ДиаграммаМесяц, WeightМесяц, 0, "Weight", ПроцентОтклоненияWeight);
		ИначеЕсли i = 1 Тогда
			WeightНеделя1 = Неделя1.Скопировать();
			WeightНеделя1.Свернуть("","WeightФакт");
		ИначеЕсли i = 2 Тогда
			WeightНеделя2 = Неделя2.Скопировать();
			WeightНеделя2.Свернуть("","WeightФакт");
		ИначеЕсли i = 3 Тогда
			WeightНеделя3 = Неделя3.Скопировать();
			WeightНеделя3.Свернуть("","WeightФакт");
		ИначеЕсли i = 4 Тогда
			WeightНеделя4 = Неделя4.Скопировать();
			WeightНеделя4.Свернуть("","WeightФакт");
		ИначеЕсли i = 5 Тогда
			WeightНеделя5 = Неделя5.Скопировать();
			WeightНеделя5.Свернуть("","WeightФакт");
		КонецЕсли;
		//ЗаполнитьДиаграммуДанными(Диаграмма, ДанныеДляЗаполнения, МаксимальноеWeight);
		
		i = i + 1;
	КонецЦикла;
	
	Структура_ДанныеДляЗаполнения = ОбъединитьНедельныеДанные(WeightНеделя1, WeightНеделя2, WeightНеделя3, WeightНеделя4, WeightНеделя5, НомерПервойНедели);
	
	ЗаполнитьДиаграммуДанными(ДиаграммаНедели, Структура_ДанныеДляЗаполнения.ТаблицаДанных_Недели, Структура_ДанныеДляЗаполнения.Максимальное, "Недели");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
	//Avg Weight
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммаAvgWeight");
	ОбластьМакета.Параметры.ЗаголовокДиаграммыНачало = "Total " + НаименованиеПоОтборам + " (tons)";
	ОбластьМакета.Параметры.ЗаголовокДиаграммыМесяц = "" + НазваниеМесяца + " " + НаименованиеПоОтборам + " (tons)";
	ОбластьМакета.Параметры.ОсьЗначений = "Avg weight, tons";
	
	МаксимальноеAvgWeight = 0;
	
	НачалоМобиллизации_AvgWeight = СНачалаМобиллизации.Скопировать();
	НачалоМобиллизации_AvgWeight.Свернуть("Currency","WeightФакт");
	КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(СНачалаМобиллизации, "Trip").Количество();
	Если НачалоМобиллизации_AvgWeight.Количество() > 0 И КолВоЭлементов <> 0 Тогда
		НачалоМобиллизации_AvgWeight[0].WeightФакт = НачалоМобиллизации_AvgWeight[0].WeightФакт / КолВоЭлементов;
	КонецЕсли;
	ДиаграммаНачалоМобиллизации = ОбластьМакета.Рисунки.НачалоМобиллизацииAvgWeight.Объект;
	ЗаполнитьДиаграммуДанными(ДиаграммаНачалоМобиллизации, НачалоМобиллизации_AvgWeight, МаксимальноеAvgWeight, "AvgWeight");
	
	AvgWeight = Месяц.Скопировать();
	AvgWeight.Свернуть("Currency","WeightФакт");
	КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Месяц, "Trip").Количество();
	Если AvgWeight.Количество() > 0 И КолВоЭлементов <> 0 Тогда
		AvgWeight[0].WeightФакт = AvgWeight[0].WeightФакт / КолВоЭлементов;
	КонецЕсли;
	//Если AvgWeight.Количество() > 0 Тогда
	//	МаксимальноеAvgWeight = AvgWeight[0].WeightФакт;
	//КонецЕсли;
	
	ДиаграммаМесяц = ОбластьМакета.Рисунки.МесяцAvgWeight.Объект;
	ДиаграммаНедели = ОбластьМакета.Рисунки.НеделиAvgWeight.Объект;
	
	i = 0;
	Пока i <> 6 Цикл
		
		Если i = 0 Тогда
			ЗаполнитьДиаграммуДанными(ДиаграммаМесяц, AvgWeight, 0, "AvgWeight");
		ИначеЕсли i = 1 Тогда
			AvgWeightНеделя1 = Неделя1.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(AvgWeightНеделя1, "Trip").Количество();
			AvgWeightНеделя1.Свернуть("","WeightФакт");
			Если AvgWeightНеделя1.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				AvgWeightНеделя1[0].WeightФакт = AvgWeightНеделя1[0].WeightФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 2 Тогда
			AvgWeightНеделя2 = Неделя2.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(AvgWeightНеделя2, "Trip").Количество();
			AvgWeightНеделя2.Свернуть("","WeightФакт");
			Если AvgWeightНеделя2.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				AvgWeightНеделя2[0].WeightФакт = AvgWeightНеделя2[0].WeightФакт / КолВоЭлементов;
			КонецЕсли;
			
		ИначеЕсли i = 3 Тогда
			AvgWeightНеделя3 = Неделя3.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(AvgWeightНеделя3, "Trip").Количество();
			AvgWeightНеделя3.Свернуть("","WeightФакт");
			Если AvgWeightНеделя3.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				AvgWeightНеделя3[0].WeightФакт = AvgWeightНеделя3[0].WeightФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 4 Тогда
			AvgWeightНеделя4 = Неделя4.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(AvgWeightНеделя4, "Trip").Количество();
			AvgWeightНеделя4.Свернуть("","WeightФакт");
			Если AvgWeightНеделя4.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				AvgWeightНеделя4[0].WeightФакт = AvgWeightНеделя4[0].WeightФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 5 Тогда
			AvgWeightНеделя5 = Неделя5.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(AvgWeightНеделя5, "Trip").Количество();
			AvgWeightНеделя5.Свернуть("","WeightФакт");
			Если AvgWeightНеделя5.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				AvgWeightНеделя5[0].WeightФакт = AvgWeightНеделя5[0].WeightФакт / КолВоЭлементов;
			КонецЕсли;
		КонецЕсли;
		//ЗаполнитьДиаграммуДанными(Диаграмма, ДанныеДляЗаполнения, МаксимальноеAvgWeight + МаксимальноеAvgWeight * 0.3);
		
		i = i + 1;
	КонецЦикла;
	
	Структура_ДанныеДляЗаполнения = ОбъединитьНедельныеДанные(AvgWeightНеделя1, AvgWeightНеделя2, AvgWeightНеделя3, AvgWeightНеделя4, AvgWeightНеделя5, НомерПервойНедели);
	
	ЗаполнитьДиаграммуДанными(ДиаграммаНедели, Структура_ДанныеДляЗаполнения.ТаблицаДанных_Недели, Структура_ДанныеДляЗаполнения.Максимальное, "Недели");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
	//TnKm
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммаSumPerTnKm");
	ОбластьМакета.Параметры.ЗаголовокДиаграммыНачало = "Total " + НаименованиеПоОтборам;
	ОбластьМакета.Параметры.ЗаголовокДиаграммыМесяц = "" + НазваниеМесяца + " " + НаименованиеПоОтборам;

	ОбластьМакета.Параметры.ОсьЗначений = "Sum, " + Currency;
	
	МаксимальноеSumTnKm = 0;
	
	НачалоМобиллизации_TnKm = СНачалаМобиллизации.Скопировать();
	НачалоМобиллизации_TnKm.Свернуть("AdditionalVolume","СреднеВзвешенныйTnKmФакт, СреднеВзвешенныйTnKmПлан");
	//КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(СНачалаМобиллизации, "Trip").Количество();
	//КолВоЭлементовПлан = СНачалаМобиллизации.Количество() - КолВоЭлементов;
	//Если НачалоМобиллизации_TnKm.Количество() > 0 И КолВоЭлементов <> 0 Тогда
	//	НачалоМобиллизации_TnKm[0].TnKmФакт = НачалоМобиллизации_TnKm[0].TnKmФакт / КолВоЭлементов;
	//КонецЕсли;
	
	//Для Каждого СтрокаСуммНачало Из НачалоМобиллизации_TnKm Цикл
	//	Отбор = Новый Структура("AdditionalVolume", СтрокаСуммНачало.AdditionalVolume);
	//	ТаблицаСОтбором = СНачалаМобиллизации.Скопировать(Отбор);
	//	КолВоЭлементовСОтбором = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(ТаблицаСОтбором, "Trip").Количество();
	//	Если ТаблицаСОтбором.Количество() > 0 И КолВоЭлементовСОтбором <> 0 Тогда
	//		СтрокаСуммНачало.TnKmФакт = СтрокаСуммНачало.TnKmФакт / КолВоЭлементовСОтбором;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Если НачалоМобиллизации_TnKm.Количество() > 0 И КолВоЭлементовПлан <> 0 Тогда
	//	НачалоМобиллизации_TnKm[0].TnKmПлан = НачалоМобиллизации_TnKm[0].TnKmПлан / КолВоЭлементовПлан;
	//КонецЕсли;
	ДиаграммаНачалоМобиллизации = ОбластьМакета.Рисунки.НачалоМобиллизацииSumPerTnKm.Объект;
	ПроцентОтклоненияTnKm = ОпределитьПроцентОтклонения(НачалоМобиллизации_TnKm, "TnKm");
	ОбластьМакета.Параметры.ПроцентОтклоненияНачало = ПроцентОтклоненияTnKm;
	ЗаполнитьДиаграммуДанными(ДиаграммаНачалоМобиллизации, НачалоМобиллизации_TnKm, МаксимальноеSumTnKm, "TnKm", ПроцентОтклоненияTnKm);
	
	SumTnKm = Месяц.Скопировать();
	SumTnKm.Свернуть("AdditionalVolume","СреднеВзвешенныйTnKmФакт, СреднеВзвешенныйTnKmПлан");
	//КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Месяц, "Trip").Количество();
	//КолВоЭлементовПлан = Месяц.Количество() - КолВоЭлементов;
	//Если SumTnKm.Количество() > 0 И КолВоЭлементов <> 0 Тогда
	//	SumTnKm[0].TnKmФакт = SumTnKm[0].TnKmФакт / КолВоЭлементов;
	//КонецЕсли;
	//Если SumTnKm.Количество() > 0 И КолВоЭлементовПлан <> 0 Тогда
	//	SumTnKm[0].TnKmПлан = SumTnKm[0].TnKmПлан / КолВоЭлементовПлан;
	//КонецЕсли;
	//Для Каждого СтрокаСумм Из SumTnKm Цикл
	//	Отбор = Новый Структура("AdditionalVolume", СтрокаСумм.AdditionalVolume);
	//	ТаблицаСОтбором = Месяц.Скопировать(Отбор);
	//	КолВоЭлементовСОтбором = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(ТаблицаСОтбором, "Trip").Количество();
	//	Если ТаблицаСОтбором.Количество() > 0 И КолВоЭлементовСОтбором <> 0 Тогда
	//		СтрокаСумм.TnKmФакт = СтрокаСумм.TnKmФакт / КолВоЭлементовСОтбором;
	//	КонецЕсли;
	//КонецЦикла;
	
	
	//Если SumTnKm.Количество() > 0 Тогда
	//	Если SumTnKm[0].TnKmПлан >= SumTnKm[0].TnKmФакт Тогда
	//		МаксимальноеSumTnKm = SumTnKm[0].TnKmПлан;
	//	Иначе
	//		МаксимальноеSumTnKm = SumTnKm[0].TnKmФакт;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДиаграммаМесяц = ОбластьМакета.Рисунки.МесяцSumPerTnKm.Объект;
	ДиаграммаНедели = ОбластьМакета.Рисунки.НеделиSumPerTnKm.Объект;
	
	i = 0;
	Пока i <> 6 Цикл
		
		Если i = 0 Тогда
			ПроцентОтклоненияTnKm = ОпределитьПроцентОтклонения(SumTnKm, "TnKm");
			ОбластьМакета.Параметры.ПроцентОтклоненияМесяц = ПроцентОтклоненияTnKm;
			ЗаполнитьДиаграммуДанными(ДиаграммаМесяц, SumTnKm, 0, "TnKm", ПроцентОтклоненияTnKm);
		ИначеЕсли i = 1 Тогда
			SumTnKmНеделя1 = Неделя1.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(SumTnKmНеделя1, "Trip").Количество();
			SumTnKmНеделя1.Свернуть("","TnKmФакт");
			Если SumTnKmНеделя1.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				SumTnKmНеделя1[0].TnKmФакт = SumTnKmНеделя1[0].TnKmФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 2 Тогда
			SumTnKmНеделя2 = Неделя2.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(SumTnKmНеделя2, "Trip").Количество();
			SumTnKmНеделя2.Свернуть("","TnKmФакт");
			Если SumTnKmНеделя2.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				SumTnKmНеделя2[0].TnKmФакт = SumTnKmНеделя2[0].TnKmФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 3 Тогда
			SumTnKmНеделя3 = Неделя3.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(SumTnKmНеделя3, "Trip").Количество();
			SumTnKmНеделя3.Свернуть("","TnKmФакт");
			Если SumTnKmНеделя3.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				SumTnKmНеделя3[0].TnKmФакт = SumTnKmНеделя3[0].TnKmФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 4 Тогда
			SumTnKmНеделя4 = Неделя4.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(SumTnKmНеделя4, "Trip").Количество();
			SumTnKmНеделя4.Свернуть("","TnKmФакт");
			Если SumTnKmНеделя4.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				SumTnKmНеделя4[0].TnKmФакт = SumTnKmНеделя4[0].TnKmФакт / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 5 Тогда
			SumTnKmНеделя5 = Неделя5.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(SumTnKmНеделя5, "Trip").Количество();
			SumTnKmНеделя5.Свернуть("","TnKmФакт");
			Если SumTnKmНеделя5.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				SumTnKmНеделя5[0].TnKmФакт = SumTnKmНеделя5[0].TnKmФакт / КолВоЭлементов;
			КонецЕсли;
		КонецЕсли;
		//ЗаполнитьДиаграммуДанными(Диаграмма, ДанныеДляЗаполнения, МаксимальноеSumTnKm + МаксимальноеSumTnKm * 0.3);
		
		i = i + 1;
	КонецЦикла;
	
	Структура_ДанныеДляЗаполнения = ОбъединитьНедельныеДанные(SumTnKmНеделя1, SumTnKmНеделя2, SumTnKmНеделя3, SumTnKmНеделя4, SumTnKmНеделя5, НомерПервойНедели);
	
	ЗаполнитьДиаграммуДанными(ДиаграммаНедели, Структура_ДанныеДляЗаполнения.ТаблицаДанных_Недели, Структура_ДанныеДляЗаполнения.Максимальное, "Недели");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
	//Avg Duration
	ОбластьМакета = МакетДиаграмма.ПолучитьОбласть("ДиаграммаDuration");
	ОбластьМакета.Параметры.ЗаголовокДиаграммыНачало = "Total " + НаименованиеПоОтборам;
	ОбластьМакета.Параметры.ЗаголовокДиаграммыМесяц = "" + НазваниеМесяца + " " + НаименованиеПоОтборам;
	ОбластьМакета.Параметры.ОсьЗначений = "Hours";
	
	МаксимальноеHours = 0;
	
	НачалоМобиллизации_AvgDuration = СНачалаМобиллизации.Скопировать();
	НачалоМобиллизации_AvgDuration.Свернуть("Currency","Duration");
	
	Для Каждого Элемент_НачалоМобиллизации_AvgDuration Из НачалоМобиллизации_AvgDuration Цикл
		Элемент_НачалоМобиллизации_AvgDuration.Duration = Окр(Элемент_НачалоМобиллизации_AvgDuration.Duration,0);
	КонецЦикла;
	
	КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(СНачалаМобиллизации, "Trip").Количество();
	Если НачалоМобиллизации_AvgDuration.Количество() > 0 И КолВоЭлементов <> 0 Тогда
		НачалоМобиллизации_AvgDuration[0].Duration = НачалоМобиллизации_AvgDuration[0].Duration / КолВоЭлементов;
	КонецЕсли;
	ДиаграммаНачалоМобиллизации = ОбластьМакета.Рисунки.НачалоМобиллизацииDuration.Объект;
	ЗаполнитьДиаграммуДанными(ДиаграммаНачалоМобиллизации, НачалоМобиллизации_AvgDuration, МаксимальноеHours, "Duration");
	
	DurationHours = Месяц.Скопировать();
	DurationHours.Свернуть("Currency","Duration");
	
	Для Каждого Элемент_DurationHours Из DurationHours Цикл
		Элемент_DurationHours.Duration = Окр(Элемент_DurationHours.Duration,0);
	КонецЦикла;
	
	КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Месяц, "Trip").Количество();
	Если DurationHours.Количество() > 0 И КолВоЭлементов <> 0 Тогда
		DurationHours[0].Duration = DurationHours[0].Duration / КолВоЭлементов;
	КонецЕсли;
	//Если DurationHours.Количество() > 0 Тогда
	//	МаксимальноеHours = DurationHours[0].Duration;
	//КонецЕсли;
	
	ДиаграммаМесяц = ОбластьМакета.Рисунки.МесяцDuration.Объект;
	ДиаграммаНедели = ОбластьМакета.Рисунки.НеделиDuration.Объект;
	
	i = 0;
	Пока i <> 6 Цикл
		
		Если i = 0 Тогда
			ЗаполнитьДиаграммуДанными(ДиаграммаМесяц, DurationHours, 0, "Duration");
		ИначеЕсли i = 1 Тогда
			DurationHoursНеделя1 = Неделя1.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(DurationHoursНеделя1, "Trip").Количество();
			DurationHoursНеделя1.Свернуть("","Duration");
			Если DurationHoursНеделя1.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				DurationHoursНеделя1[0].Duration = DurationHoursНеделя1[0].Duration / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 2 Тогда
			DurationHoursНеделя2 = Неделя2.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(DurationHoursНеделя2, "Trip").Количество();
			DurationHoursНеделя2.Свернуть("","Duration");
			Если DurationHoursНеделя2.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				DurationHoursНеделя2[0].Duration = DurationHoursНеделя2[0].Duration / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 3 Тогда
			DurationHoursНеделя3 = Неделя3.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(DurationHoursНеделя3, "Trip").Количество();
			DurationHoursНеделя3.Свернуть("","Duration");
			Если DurationHoursНеделя3.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				DurationHoursНеделя3[0].Duration = DurationHoursНеделя3[0].Duration / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 4 Тогда
			DurationHoursНеделя4 = Неделя4.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(DurationHoursНеделя4, "Trip").Количество();
			DurationHoursНеделя4.Свернуть("","Duration");
			Если DurationHoursНеделя4.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				DurationHoursНеделя4[0].Duration = DurationHoursНеделя4[0].Duration / КолВоЭлементов;
			КонецЕсли;
		ИначеЕсли i = 5 Тогда
			DurationHoursНеделя5 = Неделя5.Скопировать();
			КолВоЭлементов = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(DurationHoursНеделя5, "Trip").Количество();
			DurationHoursНеделя5.Свернуть("","Duration");
			Если DurationHoursНеделя5.Количество() > 0 И КолВоЭлементов <> 0 Тогда
				DurationHoursНеделя5[0].Duration = DurationHoursНеделя5[0].Duration / КолВоЭлементов;
			КонецЕсли;
		КонецЕсли;
		//ЗаполнитьДиаграммуДанными(Диаграмма, ДанныеДляЗаполнения, МаксимальноеHours + МаксимальноеHours * 0.5);
		
		i = i + 1;
	КонецЦикла;
	
	Структура_ДанныеДляЗаполнения = ОбъединитьНедельныеДанные(DurationHoursНеделя1, DurationHoursНеделя2, DurationHoursНеделя3, DurationHoursНеделя4, DurationHoursНеделя5, НомерПервойНедели);
	
	ЗаполнитьДиаграммуДанными(ДиаграммаНедели, Структура_ДанныеДляЗаполнения.ТаблицаДанных_Недели, Структура_ДанныеДляЗаполнения.Максимальное, "Недели");
	
	ТабДокументДиаграммы.Вывести(ОбластьМакета);
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьДиаграммы(Команда)
	
	Если ЗначениеЗаполнено(Project) ИЛИ ЗначениеЗаполнено(AU) ИЛИ ЗначениеЗаполнено(ServiceProvider) ИЛИ ЗначениеЗаполнено(TypeOfTransport) ИЛИ ЗначениеЗаполнено(City) ИЛИ ЗначениеЗаполнено(Geomarket) ИЛИ ЗначениеЗаполнено(Region) ИЛИ ЗначениеЗаполнено(Location) ИЛИ ЗначениеЗаполнено(Segment) Тогда
		СформироватьДиаграммыНаСервере();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать 'AU', 'Project', 'Service provider', 'Type of transport', 'City', 'Geomarket' либо 'Region' либо 'Location'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормированиеНедельныхТаблиц(Данные, Начало, Конец, Неделя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляОтбора.Период,
	|	ДанныеДляОтбора.TypeOfTransport,
	|	ДанныеДляОтбора.MobillizationType,
	|	ДанныеДляОтбора.Project,
	|	ДанныеДляОтбора.Trip,
	|	ДанныеДляОтбора.CostCenter,
	|	ДанныеДляОтбора.ServiceProvider,
	|	ДанныеДляОтбора.Currency,
	|	ДанныеДляОтбора.Факт,
	|	ДанныеДляОтбора.План,
	|	ДанныеДляОтбора.TnKmФакт,
	|	ДанныеДляОтбора.TnKmПлан,
	|	ДанныеДляОтбора.Duration,
	|	ДанныеДляОтбора.WeightФакт,
	|	ДанныеДляОтбора.WeightПлан,
	|	ДанныеДляОтбора.СреднеВзвешенныйTnKmФакт
	|ПОМЕСТИТЬ Выборка
	|ИЗ
	|	&ДанныеЗапросаТаблица КАК ДанныеДляОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выборка.Период,
	|	Выборка.TypeOfTransport,
	|	Выборка.MobillizationType,
	|	Выборка.Project,
	|	Выборка.Trip,
	|	Выборка.CostCenter,
	|	Выборка.ServiceProvider,
	|	Выборка.Currency,
	|	Выборка.Факт,
	|	Выборка.План,
	|	Выборка.TnKmФакт,
	|	Выборка.TnKmПлан,
	|	Выборка.Duration,
	|	Выборка.WeightФакт,
	|	Выборка.WeightПлан,
	|	Выборка.СреднеВзвешенныйTnKmФакт
	|ИЗ
	|	Выборка КАК Выборка
	|ГДЕ
	|	Выборка.Период МЕЖДУ &Начало И &Конец";
	
	Запрос.УстановитьПараметр("ДанныеЗапросаТаблица", Данные);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Конец", Конец);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Неделя = 1 Тогда
		ТаблицаРасшифровки1Неделя.Очистить();
		ТаблицаРасшифровки1Неделя.Загрузить(Результат);
	ИначеЕсли Неделя = 2 Тогда
		ТаблицаРасшифровки2Неделя.Очистить();
		ТаблицаРасшифровки2Неделя.Загрузить(Результат);
	ИначеЕсли Неделя = 3 Тогда
		ТаблицаРасшифровки3Неделя.Очистить();
		ТаблицаРасшифровки3Неделя.Загрузить(Результат);
	ИначеЕсли Неделя = 4 Тогда
		ТаблицаРасшифровки4Неделя.Очистить();
		ТаблицаРасшифровки4Неделя.Загрузить(Результат);
	ИначеЕсли Неделя = 5 Тогда
		ТаблицаРасшифровки5Неделя.Очистить();
		ТаблицаРасшифровки5Неделя.Загрузить(Результат);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТабДокументДиаграммыВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ТекЭлемент = Область.Имя;
	
	Если СтрЧислоВхождений(ТекЭлемент, "Неделя1") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровки1Неделя;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "Неделя2") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровки2Неделя;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "Неделя3") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровки3Неделя;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "Неделя4") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровки4Неделя;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "Месяц") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровки;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "RUL") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровкиRUL;
	ИначеЕсли СтрЧислоВхождений(ТекЭлемент, "НачалоМобиллизации") = 1 Тогда
		ТаблицаДляРасшифровки = ТаблицаРасшифровкиСНачалаМобиллизации;
	КонецЕсли;
	
	ПараметрОформления = 0;
	Если ТекЭлемент = "Неделя1Sum" ИЛИ ТекЭлемент = "Неделя2Sum" ИЛИ ТекЭлемент = "Неделя3Sum" ИЛИ ТекЭлемент = "Неделя4Sum" ИЛИ ТекЭлемент = "МесяцSum" ИЛИ ТекЭлемент = "НачалоМобиллизацииSum" Тогда
		ПараметрОформления = 1;
	ИначеЕсли ТекЭлемент = "Неделя1Weight" ИЛИ ТекЭлемент = "Неделя2Weight" ИЛИ ТекЭлемент = "Неделя3Weight" ИЛИ ТекЭлемент = "Неделя4Weight" ИЛИ ТекЭлемент = "МесяцWeight" ИЛИ ТекЭлемент = "НачалоМобиллизацииWeight" Тогда
		ПараметрОформления = 2;
	ИначеЕсли ТекЭлемент = "Неделя1AvgWeight" ИЛИ ТекЭлемент = "Неделя2AvgWeight" ИЛИ ТекЭлемент = "Неделя3AvgWeight" ИЛИ ТекЭлемент = "Неделя4AvgWeight" ИЛИ ТекЭлемент = "МесяцAvgWeight" ИЛИ ТекЭлемент = "НачалоМобиллизацииAvgWeight" Тогда
		ПараметрОформления = 3;
	ИначеЕсли ТекЭлемент = "Неделя1SumPerTnKm" ИЛИ ТекЭлемент = "Неделя2SumPerTnKm" ИЛИ ТекЭлемент = "Неделя3SumPerTnKm" ИЛИ ТекЭлемент = "Неделя4SumPerTnKm" ИЛИ ТекЭлемент = "МесяцSumPerTnKm" ИЛИ ТекЭлемент = "НачалоМобиллизацииSumPerTnKm" Тогда
		ПараметрОформления = 4;
	ИначеЕсли ТекЭлемент = "Неделя1Duration" ИЛИ ТекЭлемент = "Неделя2Duration" ИЛИ ТекЭлемент = "Неделя3Duration" ИЛИ ТекЭлемент = "Неделя4Duration" ИЛИ ТекЭлемент = "МесяцDuration" ИЛИ ТекЭлемент = "НачалоМобиллизацииDuration" Тогда
		ПараметрОформления = 5;
	ИначеЕсли ТекЭлемент = "RUL_Sum" Тогда
		ПараметрОформления = 6;
	ИначеЕсли ТекЭлемент = "RUL_Weight" Тогда
		ПараметрОформления = 7;
	КонецЕсли;
	
	Если ПараметрОформления <> 0 Тогда
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ДанныеРасшифровки", ТаблицаДляРасшифровки);
		ДопПараметры.Вставить("ПараметрОформления", ПараметрОформления);
		
		Оповещение = Новый ОписаниеОповещения("ПоказатьРасшифровкуЗавершение", ЭтотОбъект, ДопПараметры); 
		ОткрытьФорму("ОбщаяФорма.BudgetMobillizationDetails", ДопПараметры , , Истина , , , Оповещение);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОбъединитьНедельныеДанные(Неделя1, Неделя2, Неделя3, Неделя4, Неделя5, НомерПервойНедели)
	
	НедельнаяТаблица = Новый ТаблицаЗначений;
	НедельнаяТаблица.Колонки.Добавить("Неделя");
	НедельнаяТаблица.Колонки.Добавить("Факт");
	
	МаксимальноеЗначение = 0;
	
	Если Неделя1.Количество() > 0 ИЛИ Неделя2.Количество() > 0 ИЛИ Неделя3.Количество() > 0 ИЛИ Неделя4.Количество() > 0 ИЛИ Неделя5.Количество() > 0 Тогда
		
		СтрокаНедели = НедельнаяТаблица.Добавить();
		СтрокаНедели.Неделя = НомерПервойНедели;
		Если Неделя1.Количество() = 1 Тогда
			Неделя1.Колонки[0].Имя = "Факт";
			СтрокаНедели.Факт = Окр(Неделя1[0].Факт,0);
			Если МаксимальноеЗначение < СтрокаНедели.Факт Тогда
				МаксимальноеЗначение = СтрокаНедели.Факт;
			КонецЕсли;
		Иначе
			СтрокаНедели.Факт = 0;
		КонецЕсли;
		
		СтрокаНедели = НедельнаяТаблица.Добавить();
		СтрокаНедели.Неделя = НомерПервойНедели + 1;
		Если Неделя2.Количество() = 1 Тогда
			Неделя2.Колонки[0].Имя = "Факт";
			СтрокаНедели.Факт = Окр(Неделя2[0].Факт,0);
			Если МаксимальноеЗначение < СтрокаНедели.Факт Тогда
				МаксимальноеЗначение = СтрокаНедели.Факт;
			КонецЕсли;
		Иначе
			СтрокаНедели.Факт = 0;
		КонецЕсли;
		
		СтрокаНедели = НедельнаяТаблица.Добавить();
		СтрокаНедели.Неделя = НомерПервойНедели + 2;
		Если Неделя3.Количество() = 1 Тогда
			Неделя3.Колонки[0].Имя = "Факт";
			СтрокаНедели.Факт = Окр(Неделя3[0].Факт,0);
			Если МаксимальноеЗначение < СтрокаНедели.Факт Тогда
				МаксимальноеЗначение = СтрокаНедели.Факт;
			КонецЕсли;
		Иначе
			СтрокаНедели.Факт = 0;
		КонецЕсли;
		
		СтрокаНедели = НедельнаяТаблица.Добавить();
		СтрокаНедели.Неделя = НомерПервойНедели + 3;
		Если Неделя4.Количество() = 1 Тогда
			Неделя4.Колонки[0].Имя = "Факт";
			СтрокаНедели.Факт = Окр(Неделя4[0].Факт,0);
			Если МаксимальноеЗначение < СтрокаНедели.Факт Тогда
				МаксимальноеЗначение = СтрокаНедели.Факт;
			КонецЕсли;
		Иначе
			СтрокаНедели.Факт = 0;
		КонецЕсли;
		
		СтрокаНедели = НедельнаяТаблица.Добавить();
		СтрокаНедели.Неделя = НомерПервойНедели + 4;
		Если Неделя5.Количество() = 1 Тогда
			Неделя5.Колонки[0].Имя = "Факт";
			СтрокаНедели.Факт = Окр(Неделя5[0].Факт,0);
			Если МаксимальноеЗначение < СтрокаНедели.Факт Тогда
				МаксимальноеЗначение = СтрокаНедели.Факт;
			КонецЕсли;
		Иначе
			СтрокаНедели.Факт = 0;
		КонецЕсли;
		
	КонецЕсли;
		
	//Результат = Запрос.Выполнить().Выгрузить();
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаДанных_Недели", НедельнаяТаблица);
	СтруктураДанных.Вставить("Максимальное", МаксимальноеЗначение);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеДляФормированияПоRUL(ДатаНач, ДатаКон)
	
	Запрос = Новый запрос;
	запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	TripNonLawsonCompaniesParcels.Ссылка КАК Trip,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime = &ПустаяДата
	               |				ТОГДА TripNonLawsonCompaniesStops_Source.PlannedArrivalLocalTime
	               |			ИНАЧЕ TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime
	               |		КОНЕЦ) КАК Период,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter КАК CostCenter,
	               |	TripNonLawsonCompaniesParcels.Ссылка.NavigationType КАК NavigationType,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo,
	               |	StagesOfTripsNonLawsonCompanies.Stage
	               |ПОМЕСТИТЬ Данные
	               |ИЗ
	               |	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops_Source
	               |		ПО TripNonLawsonCompaniesParcels.Ссылка = TripNonLawsonCompaniesStops_Source.Ссылка
	               |			И TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse = TripNonLawsonCompaniesStops_Source.Location
	               |			И (TripNonLawsonCompaniesStops_Source.Type <> ЗНАЧЕНИЕ(Перечисление.StopsTypes.Destination))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTripsNonLawsonCompanies КАК StagesOfTripsNonLawsonCompanies
	               |		ПО TripNonLawsonCompaniesParcels.Ссылка = StagesOfTripsNonLawsonCompanies.Trip
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime = &ПустаяДата
	               |				ТОГДА TripNonLawsonCompaniesStops_Source.PlannedArrivalLocalTime
	               |			ИНАЧЕ TripNonLawsonCompaniesStops_Source.ActualArrivalLocalTime
	               |		КОНЕЦ МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И TripNonLawsonCompaniesParcels.Ссылка.NavigationType = &NavigationType
	               |	И НЕ TripNonLawsonCompaniesParcels.Ссылка.ПометкаУдаления
				   |	//Volume
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	TripNonLawsonCompaniesParcels.Ссылка,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter,
	               |	TripNonLawsonCompaniesParcels.Ссылка.NavigationType,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	               |	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo,
	               |	StagesOfTripsNonLawsonCompanies.Stage
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Данные.Период КАК Период,
	               |	Данные.NavigationType КАК MobillizationType,
	               |	Данные.Trip КАК Trip,
	               |	Данные.CostCenter КАК CostCenter,
	               |	&CurrencyUSD КАК Currency,
	               |	NULL КАК План,
	               |	NULL КАК WeightПлан,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА Данные.Trip.TypeOfTransport = ЗНАЧЕНИЕ(перечисление.TypesOfTransport.Rental)
	               |				ТОГДА LocalDistributionCostsMilageWeightVolumeОбороты1.SumОборот
	               |			ИНАЧЕ LocalDistributionCostsMilageWeightVolumeОбороты.SumОборот
	               |		КОНЕЦ КАК ЧИСЛО(12, 2)) КАК Факт,
				   |	ВЫРАЗИТЬ(LocalDistributionCostsMilageWeightVolumeОбороты.WeightОборот / 1000 КАК ЧИСЛО(12, 2)) КАК WeightФакт
				   |ИЗ
				   |	Данные КАК Данные
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.LocalDistributionCostsMilageWeightVolume.Обороты(, , Регистратор, ) КАК LocalDistributionCostsMilageWeightVolumeОбороты
				   |		ПО Данные.Trip = LocalDistributionCostsMilageWeightVolumeОбороты.Регистратор
				   |			И Данные.ParcelTransportRequestPickUpWarehouse = LocalDistributionCostsMilageWeightVolumeОбороты.SourceLocation
				   |			И Данные.ParcelTransportRequestDeliverTo = LocalDistributionCostsMilageWeightVolumeОбороты.DestinationLocation
				   |			И Данные.CostCenter.Geomarket = LocalDistributionCostsMilageWeightVolumeОбороты.Geomarket
				   |			И Данные.CostCenter.Segment = LocalDistributionCostsMilageWeightVolumeОбороты.Segment
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.LocalDistributionCostsMilageWeightVolume.Обороты КАК LocalDistributionCostsMilageWeightVolumeОбороты1
				   |		ПО Данные.Trip = LocalDistributionCostsMilageWeightVolumeОбороты1.Trip
				   |			И Данные.ParcelTransportRequestPickUpWarehouse = LocalDistributionCostsMilageWeightVolumeОбороты1.SourceLocation
				   |			И Данные.ParcelTransportRequestDeliverTo = LocalDistributionCostsMilageWeightVolumeОбороты1.DestinationLocation
				   |			И Данные.CostCenter.Geomarket = LocalDistributionCostsMilageWeightVolumeОбороты1.Geomarket
				   |			И Данные.CostCenter.Segment = LocalDistributionCostsMilageWeightVolumeОбороты1.Segment 
	               |ГДЕ
	               |	Данные.Stage <> ЗНАЧЕНИЕ(Перечисление.TripNonLawsonCompaniesStages.Draft)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Данные.Trip,
	               |	Данные.Период,
	               |	Данные.CostCenter,
	               |	Данные.NavigationType,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА Данные.Trip.TypeOfTransport = ЗНАЧЕНИЕ(перечисление.TypesOfTransport.Rental)
	               |				ТОГДА LocalDistributionCostsMilageWeightVolumeОбороты1.SumОборот
	               |			ИНАЧЕ LocalDistributionCostsMilageWeightVolumeОбороты.SumОборот
	               |		КОНЕЦ КАК ЧИСЛО(12, 2)),
	               |	ВЫРАЗИТЬ(LocalDistributionCostsMilageWeightVolumeОбороты.WeightОборот / 1000 КАК ЧИСЛО(12, 2))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	MobillizationBudget.Период,
	               |	MobillizationBudget.MobillizationType,
	               |	NULL,
	               |	MobillizationBudget.AU,
	               |	&Currency,
	               |	MobillizationBudget.Sum,
	               |	MobillizationBudget.Weight,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	РегистрСведений.MobillizationBudget КАК MobillizationBudget
	               |ГДЕ
	               |	MobillizationBudget.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И MobillizationBudget.MobillizationType = &NavigationType
	               |	И MobillizationBudget.Geomarket = &Geomarket
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Запрос.УстановитьПараметр("NavigationType", MobillizationType);
	Запрос.УстановитьПараметр("КонецПериода", ДатаКон);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
	Запрос.УстановитьПараметр("Currency", CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB"));
	Запрос.УстановитьПараметр("CurrencyUSD", CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("USD"));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("01.01.0001 00:00:00"));
	Запрос.УстановитьПараметр("Geomarket", Справочники.GeoMarkets.НайтиПоКоду("RUL"));
	
	Если MainVolume Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Volume", " И НЕ TripNonLawsonCompaniesParcels.Ссылка.AdditionalVolume");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Volume", " ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Рубли = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB");
	CurrencyФорма = Currency;
	Если Не ЗначениеЗаполнено(CurrencyФорма) Тогда
		CurrencyФорма = CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("RUB");
	КонецЕсли;
	
	ЗаполнитьДопЗатраты(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(РезультатЗапроса, "Trip"));
	ТаблицаДопЗатрат = ДопЗатраты.Выгрузить();
	РезультатЗапроса.Колонки.Добавить("AccessorialCost");
	РезультатЗапросаДляОтбора = РезультатЗапроса.Скопировать();
	
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		
		НайденнаяСтрока = ТаблицаДопЗатрат.Найти(Строка.Trip, "Trip");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Trip", Строка.Trip);
			МассивНайденныхСтрок = РезультатЗапросаДляОтбора.НайтиСтроки(СтруктураПоиска);
			ОбщаяСуммаЗатрат = 0;
			СуммаЗатрат = 0;
			Если МассивНайденныхСтрок.Количество() = 1 Тогда
				СуммаЗатрат = НайденнаяСтрока.Cost;
			Иначе
				Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл
					ОбщаяСуммаЗатрат = ОбщаяСуммаЗатрат + СтрокаМассива.Факт;
				КонецЦикла;
				
				СуммаЗатрат = НайденнаяСтрока.Cost * (Строка.Факт / ОбщаяСуммаЗатрат);
			КонецЕсли;
			
			Если НЕ AccessorialСosts Тогда
				Строка.Факт = Строка.Факт - СуммаЗатрат;
			КонецЕсли;
			Строка.AccessorialCost = СуммаЗатрат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Currency) И Строка.Currency = CurrencyФорма Тогда
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Currency) И Строка.Currency <> CurrencyФорма Тогда
			
			Если ЗначениеЗаполнено(Строка.Trip) Тогда
				ДатаТрип = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Trip, "Дата");
			Иначе
				ДатаТрип = Строка.Период;
			КонецЕсли;
			
			СтруктураCurrency = ОбщегоНазначения.ПолучитьКурсВалюты(Строка.Currency, ДатаТрип);
			СтруктураCurrencyФорма = ОбщегоНазначения.ПолучитьКурсВалюты(CurrencyФорма, ДатаТрип);
			Если ЗначениеЗаполнено(Строка.Факт) Тогда
				Строка.Факт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.Факт, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.AccessorialCost) Тогда
				Строка.AccessorialCost = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.AccessorialCost, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.План) Тогда
				Строка.План = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.План, Строка.Currency, CurrencyФорма, СтруктураCurrency.Курс, СтруктураCurrencyФорма.Курс, СтруктураCurrency.Кратность, СтруктураCurrencyФорма.Кратность);
			КонецЕсли;
			Строка.Currency = CurrencyФорма;
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Currency)  Тогда
			Строка.Currency = CurrencyФорма;
		КонецЕсли;
		
		Если СуммыВТыс Тогда
			Если ЗначениеЗаполнено(Строка.Факт) Тогда
				Строка.Факт = Окр(Строка.Факт / 1000, 0);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.План) Тогда
				Строка.План = Окр(Строка.План / 1000, 0);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.AccessorialCost) Тогда
				Строка.AccessorialCost = Окр(Строка.AccessorialCost / 1000, 0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРасшифровкиRUL.Очистить();
	ТаблицаРасшифровкиRUL.Загрузить(РезультатЗапроса);
	
	//Возврат РезультатЗапроса;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСНачалаМобиллизации(ДатыМобиллизации)
	
	Если ДатыМобиллизации <> Неопределено Тогда
		ТаблицаДанных = ПолучитьДанныеДляФормирования(ДатыМобиллизации.НачалоМобиллизации, ДатыМобиллизации.КонецМобиллизации, Истина);
		Возврат ТаблицаДанных;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определены даты мобиллизации для указанного периода");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьПроцентОтклонения(ТаблицаСДанными, Вид)
	
	ПроценОтклонения = 0;
	ДанныеДляРасчетаПроцентаОтклонения = ТаблицаСДанными.Скопировать();
	Если ДанныеДляРасчетаПроцентаОтклонения.Количество() > 0 Тогда
		
		Если Вид = "Sum" Тогда
			ДанныеДляРасчетаПроцентаОтклонения.Свернуть("", "План, Факт");
			Если ДанныеДляРасчетаПроцентаОтклонения[0].План = 0 Тогда
				ПроценОтклонения = 0;
			Иначе
				ПроценОтклонения = Окр((ДанныеДляРасчетаПроцентаОтклонения[0].Факт / ДанныеДляРасчетаПроцентаОтклонения[0].План) * 100 - 100 , 2);
			КонецЕсли;
		ИначеЕсли Вид = "Weight" Тогда
			ДанныеДляРасчетаПроцентаОтклонения.Свернуть("", "WeightПлан, WeightФакт");
			Если ДанныеДляРасчетаПроцентаОтклонения[0].WeightПлан = 0 Тогда
				ПроценОтклонения = 0;
			Иначе
				ПроценОтклонения = Окр((ДанныеДляРасчетаПроцентаОтклонения[0].WeightФакт / ДанныеДляРасчетаПроцентаОтклонения[0].WeightПлан) * 100 - 100 ,2);
			КонецЕсли
		ИначеЕсли Вид = "TnKm" Тогда
			ДанныеДляРасчетаПроцентаОтклонения.Свернуть("", "СреднеВзвешенныйTnKmПлан, СреднеВзвешенныйTnKmФакт");
			Если ДанныеДляРасчетаПроцентаОтклонения[0].СреднеВзвешенныйTnKmПлан = 0 Тогда
				ПроценОтклонения = 0;
			Иначе
				ПроценОтклонения = Окр((ДанныеДляРасчетаПроцентаОтклонения[0].СреднеВзвешенныйTnKmФакт / ДанныеДляРасчетаПроцентаОтклонения[0].СреднеВзвешенныйTnKmПлан) * 100 - 100, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроценОтклонения;
	
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеПоИмеющимсяОтборам()
	
	НаименованиеИзОтборов = "";
	
	Если ЗначениеЗаполнено(Project) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(Project), СокрЛП(Project));
	КонецЕсли;
	Если ЗначениеЗаполнено(AU) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(AU), СокрЛП(AU));
	КонецЕсли;
	Если ЗначениеЗаполнено(ServiceProvider) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(ServiceProvider), СокрЛП(ServiceProvider));
	КонецЕсли;
	Если ЗначениеЗаполнено(TypeOfTransport) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(TypeOfTransport), СокрЛП(TypeOfTransport));
	КонецЕсли;
	Если ЗначениеЗаполнено(City) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(City), СокрЛП(City));
	КонецЕсли;
	Если ЗначениеЗаполнено(Region) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(Region), СокрЛП(Region));
	КонецЕсли;
	Если ЗначениеЗаполнено(Geomarket) Тогда
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + СокрЛП(Geomarket), СокрЛП(Geomarket));
	КонецЕсли;
	Если ЗначениеЗаполнено(Segment) Тогда
		Сегменты = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(Segment.ВыгрузитьЗначения());
		НаименованиеИзОтборов = НаименованиеИзОтборов + ?(ЗначениеЗаполнено(НаименованиеИзОтборов), ", " + Сегменты, Сегменты);
	КонецЕсли;
	
	Возврат НаименованиеИзОтборов;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляЗаполненияВДиаграммыСНакоплением(Данные, Вид)
	
	Если Данные.Количество() > 0 Тогда
		
		Если Вид = "Weight" Тогда
			ИзменяемаяКолонкаПлан = Данные.Колонки.Найти("WeightПлан");
			ИзменяемаяКолонкаПлан.Имя = "План";
			
			ИзменяемаяКолонкаФакт = Данные.Колонки.Найти("WeightФакт");
			ИзменяемаяКолонкаФакт.Имя = "Факт";
		ИначеЕсли Вид = "TnKm" Тогда
			ИзменяемаяКолонкаПлан = Данные.Колонки.Найти("СреднеВзвешенныйTnKmПлан");
			ИзменяемаяКолонкаПлан.Имя = "План";
			
			ИзменяемаяКолонкаФакт = Данные.Колонки.Найти("СреднеВзвешенныйTnKmФакт");
			ИзменяемаяКолонкаФакт.Имя = "Факт";
		КонецЕсли;
		
		ТаблицаДляГрафиков = Новый ТаблицаЗначений;
		ТаблицаДляГрафиков.Колонки.Добавить("ПланФакт");
		ТаблицаДляГрафиков.Колонки.Добавить("План");
		ТаблицаДляГрафиков.Колонки.Добавить("ОсновнойОбъём");
		Если Не MainVolume Тогда
			ТаблицаДляГрафиков.Колонки.Добавить("ДопОбъём");
		КонецЕсли;
		
		ПлановыеСуммы = Данные.Скопировать();
		ПлановыеСуммы.Свернуть("", "План");
		План = ПлановыеСуммы[0].План;
		
		СтрокаДанных = ТаблицаДляГрафиков.Добавить();
		СтрокаДанных.ПланФакт = "Plan";
		СтрокаДанных.План = План;
		//СтрокаДанных.Параметр2 = 0;
		
		ОтборОсновнойОбъем = Новый Структура("AdditionalVolume", Ложь);
		ДанныеОсновнойОбъем = Данные.Скопировать(ОтборОсновнойОбъем);
		
		Если ДанныеОсновнойОбъем.Количество() > 0 Тогда
			ФактОсновной = ДанныеОсновнойОбъем[0].Факт;
		Иначе
			ФактОсновной = 0;
		КонецЕсли;
		
		ОтборДопОбъем = Новый Структура("AdditionalVolume", Истина);
		ДанныеДопОбъем = Данные.Скопировать(ОтборДопОбъем);
		
		Если Не MainVolume Тогда
			Если ДанныеДопОбъем.Количество() > 0 Тогда
				ФактДоп = ДанныеДопОбъем[0].Факт;
			Иначе
				ФактДоп = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДляГрафиков.Добавить();
		СтрокаДанных.ПланФакт = "Fact";
		СтрокаДанных.ОсновнойОбъём = ФактОсновной;
		Если Не MainVolume Тогда
			СтрокаДанных.ДопОбъём = ФактДоп;
		КонецЕсли;
		
		Возврат ТаблицаДляГрафиков;
	Иначе
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивЛокаций(Location, City = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	RegionsToLocations.Warehouse
	|ИЗ
	|	РегистрСведений.RegionsToLocations КАК RegionsToLocations
	|ГДЕ
	|	RegionsToLocations.Location = &Location";
	Запрос.УстановитьПараметр("Location", Location);
	
	Если City <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И RegionsToLocations.City = &City";
		Запрос.УстановитьПараметр("City", City);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Warehouse");
	
КонецФункции

&НаСервере
Функция ПолучитьДатыМобиллизации()
	
	ЗапросДатыМобиллизации = Новый Запрос;
	ЗапросДатыМобиллизации.Текст = "ВЫБРАТЬ
	|	MobillizationDates.StartDate КАК StartDate,
	|	MobillizationDates.EndDate КАК EndDate
	|ИЗ
	|	РегистрСведений.MobillizationDates КАК MobillizationDates
	|ГДЕ
	|	MobillizationDates.MobillizationType = &MobillizationType
	|	И &Начало МЕЖДУ MobillizationDates.StartDate И MobillizationDates.EndDate";
	ЗапросДатыМобиллизации.УстановитьПараметр("MobillizationType", MobillizationType);
	ЗапросДатыМобиллизации.УстановитьПараметр("Начало", НачалоМесяца(ПериодОбработки));
	//ЗапросДатыМобиллизации.УстановитьПараметр("Конец", КонецГода(ТекущаяДата()));
	
	ПериодМобиллизацииОпределен = Ложь;
	ДатаНачалаМобиллизации = Неопределено;
	ДатаОкончанияМобиллизации = Неопределено;
	
	ДатыМобиллизации = Неопределено;
	
	Результат = ЗапросДатыМобиллизации.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите пожалуйста даты мобиллизации");
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДатыМобиллизации = Новый Структура;
			ДатыМобиллизации.Вставить("НачалоМобиллизации", Выборка.StartDate);
			ДатыМобиллизации.Вставить("КонецМобиллизации", Выборка.EndDate);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДатыМобиллизации;
	
КонецФункции

&НаКлиенте
Процедура CurrencyНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПериодов(НачДата, КонДата)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодов.Колонки.Добавить("КонецПериода");

	НачальныйПериод = НачДата;
	КонечныйПериод = КонецНедели(НачДата);
	СтрокаПериод = ТаблицаПериодов.Добавить();
	СтрокаПериод.НачалоПериода = НачальныйПериод;
	СтрокаПериод.КонецПериода = КонечныйПериод;
	Пока КонецНедели(КонечныйПериод+1) <= КонДата Цикл
		НачальныйПериод = КонечныйПериод + 1;
		КонечныйПериод = КонецНедели(НачальныйПериод);
		
		СтрокаПериод = ТаблицаПериодов.Добавить();
		СтрокаПериод.НачалоПериода = НачальныйПериод;
		СтрокаПериод.КонецПериода = КонечныйПериод;
	КонецЦикла;
	
	Если КонечныйПериод <> КонДата Тогда
		СтрокаПериод = ТаблицаПериодов.Добавить();
		СтрокаПериод.НачалоПериода = КонечныйПериод + 1;
		СтрокаПериод.КонецПериода = КонДата;
	КонецЕсли;
	
	Возврат ТаблицаПериодов;
	
	
КонецФункции

&НаКлиенте
Процедура AUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", КонецМесяца(ПериодОбработки));
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", AU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура AUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", КонецМесяца(ПериодОбработки));
		ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПодчинённыеСегменты(МассивСегментов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сегменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сегменты КАК Сегменты
	|ГДЕ
	|	Сегменты.Родитель В ИЕРАРХИИ(&МассивСегментов)";
	Запрос.УстановитьПараметр("МассивСегментов",МассивСегментов);
	Результат = Запрос.Выполнить().Выгрузить();
	ИерархияСегментов = РГСофтКлиентСервер.СложитьМассивы(МассивСегментов,Результат);
	
	Возврат ИерархияСегментов;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивЛокациПоГороду(City)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	RegionsToLocations.Warehouse
	|ИЗ
	|	РегистрСведений.RegionsToLocations КАК RegionsToLocations
	|ГДЕ
	|	RegionsToLocations.City = &City
	|
	|СГРУППИРОВАТЬ ПО
	|	RegionsToLocations.Warehouse";
	Запрос.УстановитьПараметр("City", City);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("Warehouse");
	
КонецФункции


&НаКлиенте
Процедура PAS_CementingНажатие(Элемент)
	
	УстановитьПоУмолчаниюPAS();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюPAS()
	
	Project = Справочники.КостЦентры.ПустаяСсылка();
	ServiceProvider = Справочники.ServiceProviders.ПустаяСсылка();
	TypeOfTransport = Справочники.Equipments.ПустаяСсылка();
	Segment.Очистить();
	Region = Перечисления.Locations.ПустаяСсылка();
	City = Справочники.Cities.ПустаяСсылка();
	Geomarket = Справочники.GeoMarkets.НайтиПоКоду("RUL");
	AU = Справочники.КостЦентры.НайтиПоКоду("1269487");
	
	
КонецПроцедуры


&НаСервере
Процедура DrillingFluidsНажатиеНаСервере()
	
	Project = Справочники.КостЦентры.ПустаяСсылка();
	ServiceProvider = Справочники.ServiceProviders.ПустаяСсылка();
	TypeOfTransport = Справочники.Equipments.ПустаяСсылка();
	Segment.Очистить();
	Region = Перечисления.Locations.ПустаяСсылка();
	City = Справочники.Cities.ПустаяСсылка();
	Geomarket = Справочники.GeoMarkets.НайтиПоКоду("RUL");
	AU = Справочники.КостЦентры.ПустаяСсылка();
	Segment.Добавить(Справочники.Сегменты.НайтиПоКоду("SMIS"));
	
КонецПроцедуры


&НаКлиенте
Процедура DrillingFluidsНажатие(Элемент)
	DrillingFluidsНажатиеНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьРегионы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	RegionsToLocations.Location,
	|	RegionsToLocations.Warehouse
	|ИЗ
	|	РегистрСведений.RegionsToLocations КАК RegionsToLocations";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДопЗатраты(МассивTrips);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	LocalDistributionAccessorialCostsPerItemОбороты.Trip,
	|	СУММА(LocalDistributionAccessorialCostsPerItemОбороты.AccessorialCostsSumUSDОборот) КАК Cost,
	|	&Currency
	|ИЗ
	|	РегистрНакопления.LocalDistributionAccessorialCostsPerItem.Обороты(, , , Trip В (&МассивTrips)) КАК LocalDistributionAccessorialCostsPerItemОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	LocalDistributionAccessorialCostsPerItemОбороты.Trip";
	Запрос.УстановитьПараметр("МассивTrips", МассивTrips);
	Запрос.УстановитьПараметр("Currency", CustomsСерверПовтИсп.ПолучитьВалютуПоНаименованию("USD"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДопЗатраты.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВесСтрок(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("ВесСтроки");
	ТаблицаДанных.Колонки.Добавить("СреднеВзвешенныйTnKmПлан");
	ТаблицаДанных.Колонки.Добавить("СреднеВзвешенныйTnKmФакт", Новый ОписаниеТипов("Число"));
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		ОбщаяСумма = ТаблицаДанных.Скопировать();
		//ОбщаяСумма.Свернуть("", "План, Факт, WeightФакт, WeightПлан, Milage");
		ОбщийПлан = 0;
		ОбщийФакт = 0;
		Для Каждого Элемент Из ОбщаяСумма Цикл
			Если ЗначениеЗаполнено(Элемент.План) Тогда
				ОбщийПлан = ОбщийПлан + Элемент.План;
			КонецЕсли;
			Если ЗначениеЗаполнено(Элемент.Факт) Тогда
				ОбщийФакт = ОбщийФакт + Элемент.Факт;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаДанных Цикл
			
			Если ЗначениеЗаполнено(Строка.Trip) Тогда
				Если ОбщийФакт <> 0 И ЗначениеЗаполнено(Строка.Факт) Тогда
					Строка.ВесСтроки = Строка.Факт / ОбщийФакт;
					Строка.СреднеВзвешенныйTnKmФакт = Строка.TnKmФакт * Строка.ВесСтроки
				Иначе
					Строка.ВесСтроки = 0;
					Строка.СреднеВзвешенныйTnKmФакт = 0;
				КонецЕсли;
			Иначе
				Если ОбщийПлан <> 0 И ЗначениеЗаполнено(Строка.План) Тогда
					Строка.ВесСтроки = Строка.План / ОбщийПлан;
					Строка.СреднеВзвешенныйTnKmПлан = Строка.TnKmПлан * Строка.ВесСтроки
				Иначе
					Строка.ВесСтроки = 0;
					Строка.СреднеВзвешенныйTnKmПлан = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	
КонецПроцедуры