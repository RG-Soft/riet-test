Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем сукНачальныеНастройкиЗапроса;			// Структура начальных параметров в запросе для вывода данных

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Процедура ВывестиЗаголовок()
		
	сукНачальныеНастройкиЗапроса.Результат.Очистить();
	Макет = ПолучитьМакет("Отчет");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Подразделение = сукНачальныеНастройкиЗапроса.Подразделение;
	Если сукНачальныеНастройкиЗапроса.Нач = Дата(1,1,1) И сукНачальныеНастройкиЗапроса.Кон = Дата(1,1,1) Тогда
		Область.Параметры.Период = "до " + Формат(ТекущаяДата(), "ДЛФ=DD");
	Иначе
		Область.Параметры.Период = "за " + ПредставлениеПериода(НачалоДня(сукНачальныеНастройкиЗапроса.Нач), КонецДня(сукНачальныеНастройкиЗапроса.Кон), "ФП = Истина");
	КонецЕсли;
	Область.Параметры.ИНН = "9909012867";
	Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Область.Параметры.КПП = Подразделение.КПП;
		Область.Параметры.Адрес = Подразделение.Адрес;
		Область.Параметры.Наименование = Подразделение.Наименование;		
	КонецЕсли;
	сукНачальныеНастройкиЗапроса.Результат.Вывести(Область);
	
КонецПроцедуры
	
Функция ОпределитьКопиюТаблицыЗапросаДляВывода(тзРезультат)	
	
	табВозврата = Новый ТаблицаЗначений;
	
	масТипов = Новый Массив;
	Для Каждого Колонка Из тзРезультат.Колонки Цикл
		Для Каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
			Если НЕ Строка(Тип) = "Null" Тогда масТипов.Добавить(Тип);КонецЕсли;
		КонецЦикла;
		масТипов.Добавить(Тип("Строка"));
		табВозврата.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(масТипов));
		масТипов.Очистить();
	КонецЦикла;
		
    масТипов.Очистить();
	масТипов.Добавить(Тип("Число"));
	масТипов.Добавить(Тип("Строка"));
	табВозврата.Колонки.Вставить(0, "НомерПП", Новый ОписаниеТипов(масТипов));
	масТипов.Очистить();
	НомерПП = 1;
		
	Для Каждого Запись Из тзРезультат Цикл
		Если тзРезультат.Индекс(Запись) Тогда
			СтрокаТЗ = табВозврата.Добавить();
			СтрокаТЗ.НомерПП = НомерПП;
			НомерПП = НомерПП + 1;
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Запись);
		КонецЕсли;
	КонецЦикла;
		
	СтрокаТЗ = табВозврата.Вставить(0);
	НомерКолонки = 1;
	Для Каждого Колонка Из табВозврата.Колонки Цикл
		Если НомерКолонки = 8 Тогда
			СтрокаТЗ[Колонка.Имя] = "8.1";
		ИначеЕсли НомерКолонки = 9 Тогда
			СтрокаТЗ[Колонка.Имя] = "8.2";
		ИначеЕсли НомерКолонки = 10 Тогда
			СтрокаТЗ[Колонка.Имя] = "8.3";
		ИначеЕсли НомерКолонки = 11 Тогда
			СтрокаТЗ[Колонка.Имя] = "8.4";
		ИначеЕсли НомерКолонки > 11 Тогда
			СтрокаТЗ[Колонка.Имя] = Строка(НомерКолонки - 3);
		Иначе
			СтрокаТЗ[Колонка.Имя] = Строка(НомерКолонки);
		КонецЕсли;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Если тзРезультат.Количество() Тогда
		ИтоговаяСтрока = тзРезультат[0];
		СтрокаТЗ = табВозврата.Добавить();
		СтрокаТЗ.СтоимостьНаНачалоПериода 	= ИтоговаяСтрока.СтоимостьНаНачалоПериода;
		СтрокаТЗ.АмортизацияНаНачалоПериода = ИтоговаяСтрока.АмортизацияНаНачалоПериода;
		СтрокаТЗ.ИзменениеСтоимостиЗаПериод = ИтоговаяСтрока.ИзменениеСтоимостиЗаПериод;
		СтрокаТЗ.АмортизацияЗаПериод 		= ИтоговаяСтрока.АмортизацияЗаПериод;
		СтрокаТЗ.СтоимостьНаКонецПериода 	= ИтоговаяСтрока.СтоимостьНаКонецПериода;
		СтрокаТЗ.АмортизацияНаКонецПериода 	= ИтоговаяСтрока.АмортизацияНаКонецПериода;
		СтрокаТЗ.ОстаточнаяСтоимость 		= ИтоговаяСтрока.ОстаточнаяСтоимость;	
		СтрокаТЗ.НомерПП = "ИТОГО";
	КонецЕсли;	
	
	тзРезультат.Очистить();
	
	Возврат табВозврата;
	
КонецФункции

Процедура ПолучитьНачальныеНастройкиЗапроса(сукНачальныеНастройкиЗапроса)
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если Строка(Элемент.Параметр) = "НачалоПериода" И НЕ ТипЗнч(Элемент.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			сукНачальныеНастройкиЗапроса.Нач = Элемент.Значение;
		ИначеЕсли Строка(Элемент.Параметр) = "КонецПериода" И НЕ ТипЗнч(Элемент.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			сукНачальныеНастройкиЗапроса.Кон = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	ИспользованиеПодразделения = Ложь;
	Подразделение = Неопределено;
	ВидСравненияПодразделения = Неопределено;
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = "Подразделение" Тогда
			ИспользованиеПодразделения = Элемент.Использование;
			ВидСравненияПодразделения = Элемент.ВидСравнения;
			Подразделение = Элемент.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ИспользованиеПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.Равно Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение = &Подразделение";
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение = &Подразделение";
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В (&Подразделение)";
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В (&Подразделение)";
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В Иерархии (&Подразделение)";
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		 сукНачальныеНастройкиЗапроса.УсловиеПодразделение = "ГДЕ НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В Иерархии (&Подразделение)";		 
	 КонецЕсли;
	 
	 сукНачальныеНастройкиЗапроса.ВидСравненияПодразделения = ВидСравненияПодразделения;
	 сукНачальныеНастройкиЗапроса.Подразделение = Подразделение;
	 
КонецПроцедуры

Процедура ОпределитьПодразделениеСтроки(СтрокаТЗ, ВидСравненияПодразделения, Подразделение)
	
	Если ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.Равно
		ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		СтрокаТЗ.Подразделение = Подразделение;
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеРавно
		ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВИерархии 
		ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		СтрокаТЗ.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ИначеЕсли ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВСписке
		ИЛИ ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		СтрокаТЗ.Подразделение = Подразделение[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	Для Каждого Элемент Из ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если Строка(Элемент.Параметр) = "НачалоПериода" И ТипЗнч(Элемент.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Элемент.Значение = Дата(1,1,1);
		ИначеЕсли Строка(Элемент.Параметр) = "КонецПериода" И ТипЗнч(Элемент.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Элемент.Значение = Дата(1,1,1);
		КонецЕсли;
	КонецЦикла;
	
	сукНачальныеНастройкиЗапроса.Вставить("Нач", Дата(1,1,1));
	сукНачальныеНастройкиЗапроса.Вставить("Кон", Дата(1,1,1));
	сукНачальныеНастройкиЗапроса.Вставить("УсловиеПодразделение", "");
	сукНачальныеНастройкиЗапроса.Вставить("Подразделение", Неопределено);
	сукНачальныеНастройкиЗапроса.Вставить("ВидСравненияПодразделения", Неопределено);
	
	ПолучитьНачальныеНастройкиЗапроса(сукНачальныеНастройкиЗапроса);
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Нач", сукНачальныеНастройкиЗапроса.Нач);
	Если КонецГода(сукНачальныеНастройкиЗапроса.Кон) = сукНачальныеНастройкиЗапроса.Кон Тогда
		сукНачальныеНастройкиЗапроса.Кон = сукНачальныеНастройкиЗапроса.Кон - 2*60; //у нас 2 минуты в конце года - 13ый месяц.
	КонецЕсли;
	Запрос.УстановитьПараметр("Кон", сукНачальныеНастройкиЗапроса.Кон);
	Запрос.УстановитьПараметр("Подразделение", сукНачальныеНастройкиЗапроса.Подразделение);
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоНаименованию("USD"));
	Запрос.Текст =		"ВЫБРАТЬ
	              		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	              		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение,
	              		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.КостЦентр КАК КостЦентр,
	              		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
	              		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.КостЦентр.Сегмент.Родитель.Родитель КАК Сегмент
	              		|ПОМЕСТИТЬ ОС
	              		|ИЗ
	              		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	              		|			&Кон, ОсновноеСредство.ПометкаУдаления = ЛОЖЬ И Местонахождение В ИЕРАРХИИ (&Подразделение)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних ";
	Запрос.Текст = 	Запрос.Текст + сукНачальныеНастройкиЗапроса.УсловиеПодразделение;
	Запрос.Текст =  Запрос.Текст + "
	              		|
	              		|ИНДЕКСИРОВАТЬ ПО
	              		|	ОсновноеСредство
	              		|;
	              		|
	              		|////////////////////////////////////////////////////////////////////////////////
	              		|ВЫБРАТЬ
	              		|	ОС.ОсновноеСредство.Код КАК ОсновноеСредствоКод,
	              		|	ОС.ОсновноеСредство.ПорядковыйНомерВУправленческойБазе КАК Номер,
	              		|	ОС.ОсновноеСредство.КодОС КАК ОсновноеСредствоКодОС,
	              		|	ОС.ОсновноеСредство.ЗаводскойНомер КАК ОсновноеСредствоЗаводскойНомер,
	              		|	ОС.ОсновноеСредство.НаименованиеENG КАК ОсновноеСредствоНаименованиеENG,
	              		|	ОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
	              		|	НачислениеАмортизации.СрокНУ КАК СрокПолезногоИспользования,
	              		|	ВЫБОР
	              		|		КОГДА НачислениеАмортизации.СрокНУ < РАЗНОСТЬДАТ(ПринятоКУчету.ДатаСостояния, &Кон, МЕСЯЦ)
	              		|			ТОГДА НачислениеАмортизации.СрокНУ
	              		|		ИНАЧЕ РАЗНОСТЬДАТ(ПринятоКУчету.ДатаСостояния, &Кон, МЕСЯЦ)
	              		|	КОНЕЦ КАК СрокФактическогоИспользования,
	              		|	ОС.ОсновноеСредство.КодПоОКОФ КАК КОДОКОФ,
	              		|	ОС.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
		              	|	ОС.ОсновноеСредство.НомерЗаказаНаПриобретение КАК НомерЗаказа,
		              	|	ОС.ОсновноеСредство.НомерКоммерческогоИнвойса КАК НомерИнвойса,
	              		|	ПринятоКУчету.ДатаСостояния КАК ДатаПринятияКУчету,
	              		|	ВЫБОР
	              		|		КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|			ТОГДА СтоимостьАмортизацияОС.СтоимостьБУНачальныйОстаток * КурсыВалютСрезПоследних1.Курс
	              		|		ИНАЧЕ СтоимостьАмортизацияОС.СтоимостьБУНачальныйОстаток
	              		|	КОНЕЦ КАК СтоимостьНаНачалоПериода,
	              		|	ВЫБОР
	              		|		КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|			ТОГДА СтоимостьАмортизацияОС.АмортизацияБУНачальныйОстаток * КурсыВалютСрезПоследних1.Курс
	              		|		ИНАЧЕ СтоимостьАмортизацияОС.АмортизацияБУНачальныйОстаток
	              		|	КОНЕЦ КАК АмортизацияНаНачалоПериода,
	              		|	ВЫБОР
	              		|		КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|			ТОГДА СтоимостьАмортизацияОС.СтоимостьБУОборот * КурсыВалютСрезПоследних.Курс
	              		|		ИНАЧЕ СтоимостьАмортизацияОС.СтоимостьБУОборот
	              		|	КОНЕЦ КАК ИзменениеСтоимостиЗаПериод,
	              		|	ВЫБОР
	              		|		КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|			ТОГДА СтоимостьАмортизацияОС.АмортизацияБУОборот * КурсыВалютСрезПоследних.Курс
	              		|		ИНАЧЕ СтоимостьАмортизацияОС.АмортизацияБУОборот
	              		|	КОНЕЦ КАК АмортизацияЗаПериод,
	              		|	ВЫБОР
	              		|		КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|			ТОГДА СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток * КурсыВалютСрезПоследних.Курс
	              		|		ИНАЧЕ СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток
	              		|	КОНЕЦ КАК СтоимостьНаКонецПериода,
	              		|	ВЫБОР
	              		|		КОГДА СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток = 0
	              		|			ТОГДА 0
	              		|		ИНАЧЕ ВЫБОР
	              		|				КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|					ТОГДА СтоимостьАмортизацияОС.АмортизацияБУКонечныйОстаток * КурсыВалютСрезПоследних.Курс
	              		|				ИНАЧЕ СтоимостьАмортизацияОС.АмортизацияБУКонечныйОстаток
	              		|			КОНЕЦ
	              		|	КОНЕЦ КАК АмортизацияНаКонецПериода,
	              		|	ВЫБОР
	              		|		КОГДА СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток = 0
	              		|			ТОГДА 0
	              		|		ИНАЧЕ ВЫБОР
	              		|				КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|					ТОГДА СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток * КурсыВалютСрезПоследних.Курс
	              		|				ИНАЧЕ СтоимостьАмортизацияОС.СтоимостьБУКонечныйОстаток
	              		|			КОНЕЦ - ВЫБОР
	              		|				КОГДА ОС.ОсновноеСредство.Валюта = &Валюта
	              		|					ТОГДА ЕСТЬNULL(СтоимостьАмортизацияОС.АмортизацияБУКонечныйОстаток, 0) * КурсыВалютСрезПоследних.Курс
	              		|				ИНАЧЕ ЕСТЬNULL(СтоимостьАмортизацияОС.АмортизацияБУКонечныйОстаток, 0)
	              		|			КОНЕЦ
	              		|	КОНЕЦ КАК ОстаточнаяСтоимость,
	              		|	ОС.КостЦентр.ПодразделениеОрганизации КАК Местонахождение,
	              		|	ОС.КостЦентр КАК КостЦентр,
	              		|	ОС.ОсновноеСредство.Счет КАК Счет,
	              		|	ОС.Сегмент,
	              		|	ОС.ОсновноеСредство КАК ОсновноеСредство,
	              		|	ОС.Подразделение
	              		|ИЗ
	              		|	РегистрСведений.КурсыВалют.СрезПоследних(&Кон, Валюта = &Валюта) КАК КурсыВалютСрезПоследних,
	              		|	РегистрСведений.КурсыВалют.СрезПоследних(&Нач, Валюта = &Валюта) КАК КурсыВалютСрезПоследних1,
	              		|	ОС КАК ОС
	              		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	              		|			СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	              		|		ИЗ
	              		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	              		|		ГДЕ
	              		|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК ПринятоКУчету
	              		|		ПО ОС.ОсновноеСредство = ПринятоКУчету.ОсновноеСредство
	              		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(
	              		|				&Кон,
	              		|				ОсновноеСредство В
	              		|					(ВЫБРАТЬ
	              		|						ОС.ОсновноеСредство
	              		|					ИЗ
	              		|						ОС)) КАК НачислениеАмортизации
	              		|		ПО ОС.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	              		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              		|			СтоимостьАмортизацияОСОстаткиИОбороты.ОсновноеСредство КАК ОсновноеСредство,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.СтоимостьБУНачальныйОстаток) КАК СтоимостьБУНачальныйОстаток,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.СтоимостьБУОборот) КАК СтоимостьБУОборот,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.СтоимостьБУКонечныйОстаток) КАК СтоимостьБУКонечныйОстаток,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.АмортизацияБУКонечныйОстаток) КАК АмортизацияБУКонечныйОстаток,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.АмортизацияБУНачальныйОстаток) КАК АмортизацияБУНачальныйОстаток,
	              		|			СУММА(СтоимостьАмортизацияОСОстаткиИОбороты.АмортизацияБУОборот) КАК АмортизацияБУОборот
	              		|		ИЗ
	              		|			РегистрНакопления.СтоимостьАмортизацияОС.ОстаткиИОбороты(
	              		|					&Нач,
	              		|					&Кон,
	              		|					,
	              		|					,
	              		|					ОсновноеСредство В
	              		|						(ВЫБРАТЬ
	              		|							ОС.ОсновноеСредство
	              		|						ИЗ
	              		|							ОС КАК ОС)) КАК СтоимостьАмортизацияОСОстаткиИОбороты
	              		|		
	              		|		СГРУППИРОВАТЬ ПО
	              		|			СтоимостьАмортизацияОСОстаткиИОбороты.ОсновноеСредство) КАК СтоимостьАмортизацияОС
	              		|		ПО ОС.ОсновноеСредство = СтоимостьАмортизацияОС.ОсновноеСредство
	              		|ИТОГИ
	              		|	СУММА(СтоимостьНаНачалоПериода),
	              		|	СУММА(АмортизацияНаНачалоПериода),
	              		|	СУММА(ИзменениеСтоимостиЗаПериод),
	              		|	СУММА(АмортизацияЗаПериод),
	              		|	СУММА(СтоимостьНаКонецПериода),
	              		|	СУММА(АмортизацияНаКонецПериода),
	              		|	СУММА(ОстаточнаяСтоимость)
	              		|ПО
	              		|	ОБЩИЕ";
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзВнешнийНаборДанных = ОпределитьКопиюТаблицыЗапросаДляВывода(тзРезультат);
	Подразделение = сукНачальныеНастройкиЗапроса.Подразделение;
	//для вывода строки с номерами колонок
	ОпределитьПодразделениеСтроки(тзВнешнийНаборДанных[0], сукНачальныеНастройкиЗапроса.ВидСравненияПодразделения, Подразделение);
	ОпределитьПодразделениеСтроки(тзВнешнийНаборДанных[тзВнешнийНаборДанных.Количество()-1], сукНачальныеНастройкиЗапроса.ВидСравненияПодразделения, Подразделение);
	
	//для вывода заголовка
	сукНачальныеНастройкиЗапроса.Вставить("Результат", Результат);
	
	ВнешнийНаборДанных = Новый Структура;
	ВнешнийНаборДанных.Вставить("тзDepreciationReportForProfitTax", тзВнешнийНаборДанных);
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешнийНаборДанных);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считывание структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	#Если Клиент ИЛИ ВнешнееСоединение Тогда //18.09.2012 Пахоменков раз уж описание функции в таких инструкциях то и тут надо
	//вывод заголовка
	ВывестиЗаголовок();
	#КонецЕсли
	
	Для каждого ВыбранноеПоле из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") И ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеОФизЛице.ДеньРождения") тогда 
			ВыбранноеПоле.Заголовок = "Ближайший день рождения";
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметра.Значение = '00010101' Тогда
		ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

Если сукНачальныеНастройкиЗапроса = Неопределено Тогда
	сукНачальныеНастройкиЗапроса = Новый Структура;
КонецЕсли;

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;
