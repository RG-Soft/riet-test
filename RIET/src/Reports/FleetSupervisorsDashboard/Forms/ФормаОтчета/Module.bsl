

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отчет.Периодичность = Перечисления.Периодичность.Месяц;
	Отчет.ДатаОтчета    = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьОтчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаСервере(); 

КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаОтчета) Тогда
		Отчет.ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
	ВнешниеДанные = Новый Структура;
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет"); 
	ОСКД = ОбъектОтчет.ПолучитьМакет("FleetSupervisorsBenchmark"); 
	ТексЗапроса = ОСКД.НаборыДанных[0].Запрос;
	//
	НастройкиОСКД = ОСКД.НастройкиПоУмолчанию; //НастройкиОСКД = КомпоновщикНастроек.ПолучитьНастройкиОСКД(); 
	//
	НастройкаКолонки = НастройкиОСКД.Структура[0].Колонки[0].ПоляГруппировки.Элементы[0];
	Если Отчет.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "МЕСЯЦ");
		НастройкаКолонки.НачалоПериода = НачалоМесяца(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецМесяца(Отчет.ДатаОтчета);
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "КВАРТАЛ");
		НастройкаКолонки.НачалоПериода = НачалоКвартала(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецКвартала(Отчет.ДатаОтчета);
	Иначе
		НастройкаКолонки.НачалоПериода = НачалоГода(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецГода(Отчет.ДатаОтчета);
	КонецЕсли;
	
	ОСКД.НаборыДанных[0].Запрос = ТексЗапроса;	
	ТекущаяДата = НастройкиОСКД.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
	ТекущаяДата.Использование 	= Истина;
	ТекущаяДата.Значение 		= Отчет.ДатаОтчета;
	
	ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы; 
	
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,ДанныеРасшифровкиКомпоновкиДанных); 
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет, ВнешниеДанные,ДанныеРасшифровкиКомпоновкиДанных); 
	РезультатТаб1.Очистить(); 
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВыводаОСКД.УстановитьДокумент(РезультатТаб1); 
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	
	РезультатТаб1.ПоказатьУровеньГруппировокСтрок(0);
	ИдентификаторТаб1 = Новый УникальныйИдентификатор;
	ДанныеРасшифровкиТаб1 = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, ИдентификаторТаб1);
	
	// отчет по Leg7
	Результат.Очистить();
	СкомпоноватьРезультат();	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	//ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	////////
	// Чтобы не писалось "Отчет не сформирован…" 
	Элементы.РезультатТаб1.ОтображениеСостояния.Видимость = Ложь; 
	Элементы.РезультатТаб1.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;

	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь; 
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;

	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	СформироватьОтчетНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	СформироватьОтчетНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура РезультатТаб1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДеталиРасшифровки = Новый Структура; 
	
	ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки, Элемент = Элементы.Результат);
	
	СтрокиБезРасшифровки = Новый Массив;
	СтрокиБезРасшифровки.Добавить("Backlog (pending vs proccessed), %");
	СтрокиБезРасшифровки.Добавить("Benchmark for FS");
	
	Если ДеталиРасшифровки.Количество() > 0
		И ДеталиРасшифровки.Свойство("Month") Тогда
		
		Если ДеталиРасшифровки.Свойство("Title") И НЕ СтрокиБезРасшифровки.Найти(ДеталиРасшифровки.Title) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДеталиРасшифровки.Вставить("ДатаОтчета", Отчет.ДатаОтчета);
		ДеталиРасшифровки.Вставить("Периодичность", Отчет.Периодичность);
		//Если Элемент = Элементы.Результат Тогда
			ДеталиРасшифровки.Вставить("ИмяСхемы", "FleetDashboardGeneral");
		//Иначе 
		//	ДеталиРасшифровки.Вставить("ИмяСхемы", "PlannersDashboardLeg7");
		//КонецЕсли;
		
		// открываем детализирующий отчет
		ОткрытьФорму("Отчет.DashboardsDetalization.Форма.ФормаОтчета", Новый Структура("Отбор", ДеталиРасшифровки), ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки, ЭтоЛег7 = Ложь) 
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиТаб1);    
	
	ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка)
	
	ЭлементРасшифровкиДанных = Данные.Элементы.Получить(Расшифровка);
	
	// выбираем поля. Если это группа, то обходим ее рекурсивно
	Если ТипЗнч(ЭлементРасшифровкиДанных) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля(); 
		Для каждого ТекПоле из Поля Цикл
			ДеталиРасшифровки.Вставить(ТекПоле.Поле, ТекПоле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// далее просматриваем родителей
	Родители = ЭлементРасшифровкиДанных.ПолучитьРодителей(); 
	
	Для каждого Родитель из Родители Цикл
		
		ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Родитель.Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
