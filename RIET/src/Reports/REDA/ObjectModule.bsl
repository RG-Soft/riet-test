#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить( "ДатаНач", ОбщийОтчет.ДатаНач);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить( "ДатаКон", ОбщийОтчет.ДатаКон);
	
	ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке = Истина;
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры // СформироватьОтчет()

// Процедура - заполняет начальные настройки отчета
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке = Истина;
	
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	SiebelOrdersDetails.Номенклатура,
	        |	SiebelOrdersDetails.Количество,
	        |	SiebelOrdersDetails.Цена,
	        |	SiebelOrdersDetails.Сумма,
	        |	SiebelOrdersDetails.PartNumber,
	        |	SiebelOrdersDetails.LineID,
	        |	SiebelOrdersDetails.ParentLineID,
	        |	SiebelOrdersDetails.Description,
	        |	SiebelOrdersDetails.Ссылка.Name,
	        |	SiebelOrdersDetails.Ссылка.LawsonInvoice
	        |{ВЫБРАТЬ
	        |	Номенклатура,
	        |	Количество,
	        |	Цена,
	        |	Сумма,
	        |	PartNumber,
	        |	LineID,
	        |	ParentLineID,
	        |	Description,
	        |	Name,
	        |	LawsonInvoice}
	        |ИЗ
	        |	Документ.SiebelOrders.Details КАК SiebelOrdersDetails
	        |ГДЕ
	        |	SiebelOrdersDetails.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	        |{ГДЕ
	        |	SiebelOrdersDetails.Ссылка.CustomerID}
	        |{УПОРЯДОЧИТЬ ПО
	        |	Номенклатура,
	        |	Количество,
	        |	Цена,
	        |	Сумма,
	        |	PartNumber,
	        |	LineID,
	        |	ParentLineID,
	        |	Description,
	        |	Name,
	        |	LawsonInvoice}
	        |ИТОГИ ПО
	        |	ОБЩИЕ
	        |{ИТОГИ ПО
	        |	Номенклатура,
	        |	Количество,
	        |	Цена,
	        |	Сумма,
	        |	PartNumber,
	        |	LineID,
	        |	ParentLineID,
	        |	Description,
	        |	Name,
	        |	LawsonInvoice}";	
	
	СтруктураПредставлениеПолей = Новый Структура;
	//СтруктураПредставлениеПолей.Вставить( "КостЦентр", "Accounting unit");
	//СтруктураПредставлениеПолей.Вставить( "Сделка", "Документ");
	//СтруктураПредставлениеПолей.Вставить( "ДоговорКонтрагента", "Договор контрагента");
	//СтруктураПредставлениеПолей.Вставить( "СчетФактура", "Счет фактура");
	//СтруктураПредставлениеПолей.Вставить( "СчетНаОплату", "Счет на оплату");


	//
	ПостроительОтчета.Текст = Текст;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	ОбщийОтчет.ЗаполнитьПоказатели( "Количество",   "Количество",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "Цена",   "Цена",    Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели( "Сумма",   "Сумма",    Истина, "ЧЦ=15; ЧДЦ=2");
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("CustomerID");
	
	//ПостроительОтчета.ИзмеренияСтроки.Добавить("Контрагент");
		
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("LawsonInvoice"); 
	ПостроительОтчета.ВыбранныеПоля.Добавить("Name");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Номенклатура");
	ПостроительОтчета.ВыбранныеПоля.Добавить("PartNumber");
    ПостроительОтчета.ВыбранныеПоля.Добавить("LineID");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ParentLineID");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Description");
		
	
	ОбщийОтчет.ВыводитьПоказателиВСтроку=Истина;
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры // Настроить()

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет  = ЭтотОбъект;
	
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Добавляет в структуру общие для всех отчетов параметры настройки
//
// Параметры:
//	Нет.
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НастройкиПостроителя", ОбщийОтчет.ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("Показатели", ОбщийОтчет.Показатели.Выгрузить());
	СтруктураНастроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураНастроек.Вставить("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураНастроек.Вставить("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураНастроек.Вставить("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруДляСохраненияНастроек()()

// Заполняет из структуры настроек общие параметры отчетов
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок) Экспорт
	Перем ТабПоказатели;
	
	Если ТипЗнч(ОбщийОтчет.СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийОтчет.ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("Показатели", ТабПоказатели);
	Если ТипЗнч(ТабПоказатели) = Тип("ТаблицаЗначений") Тогда
		ОбщийОтчет.Показатели.Загрузить(ТабПоказатели);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ВыводитьДополнительныеПоляВОтдельнойКолонке", ОбщийОтчет.ВыводитьДополнительныеПоляВОтдельнойКолонке);
	СтруктураСНастройками.Свойство("ВыводитьИтогиПоВсемУровням", ОбщийОтчет.ВыводитьИтогиПоВсемУровням);
	СтруктураСНастройками.Свойство("ВыводитьПоказателиВСтроку", ОбщийОтчет.ВыводитьПоказателиВСтроку);
	СтруктураСНастройками.Свойство("РаскрашиватьИзмерения", ОбщийОтчет.РаскрашиватьИзмерения);
	СтруктураСНастройками.Свойство("ЗаголовокПомечен", ОбщийОтчет.ПоказыватьЗаголовок);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки)()

ОбщийОтчет.ИмяРегистра          = "-";
ОбщийОтчет.мНазваниеОтчета      = "Отчет ";
ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
ОбщийОтчет.мРежимВводаПериода   = 0;

#КонецЕсли