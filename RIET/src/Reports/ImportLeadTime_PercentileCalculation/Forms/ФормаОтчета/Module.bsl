
&НаКлиенте
Процедура Сформировать(Команда)
	       	
	СформироватьОтчет();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()
	
	ТабличныйДокумент.Очистить();
		
	Макет = Отчеты.ImportLeadTime_PercentileCalculation.ПолучитьМакет("Макет");

	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НастройкиПользователя = Отчет.КомпоновщикНастроек;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = НастройкиПользователя.Настройки;
	
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	Для Каждого ЭлементПользовательскихНастроек Из НастройкиПользователя.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			ЭлементНастройки = Настройки.ПараметрыДанных.Элементы.Найти(ЭлементПользовательскихНастроек.Параметр);
			ЗаполнитьЗначенияСвойств(ЭлементНастройки, ЭлементПользовательскихНастроек);
			
		ИначеЕсли ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Для Каждого ЭлементОтбора из Настройки.Отбор.Элементы Цикл 
				
				Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = ЭлементПользовательскихНастроек.ИдентификаторПользовательскойНастройки Тогда 
					ЗаполнитьЗначенияСвойств(ЭлементОтбора, ЭлементПользовательскихНастроек, "ВидСравнения,ПравоеЗначение,Использование");
				КонецЕсли;
				
			КонецЦикла;
			   			
		ИначеЕсли ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			
			Для Каждого ЭлементОтбора из ЭлементПользовательскихНастроек.Элементы Цикл 
				
				ЭлементНайден = Ложь;
				Для Каждого ЭлементОтбораOther из Настройки.Отбор.Элементы Цикл 
					
					Если ЭлементОтбораOther.ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки Тогда 
						ЗаполнитьЗначенияСвойств(ЭлементОтбораOther, ЭлементОтбора, "ВидСравнения,ПравоеЗначение,Использование");
						ЭлементНайден = Истина; 
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ЭлементНайден Тогда 
					НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	ПараметрShipmentCompleted = ПараметрыДанных.Найти("ShipmentCompleted");
	ShipmentCompleted = ПараметрShipmentCompleted.Значение;
	ПараметрыДанных.Найти("НачалоПериода").Значение = ShipmentCompleted.ДатаНачала;
	ПараметрыДанных.Найти("КонецПериода").Значение = ShipmentCompleted.ДатаОкончания;
	ПараметрShipmentCompleted.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"),);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Для Каждого СтрокаТЗ из ТЗ Цикл
		СтрокаТЗ.CumulativePercent = Окр(СтрокаТЗ.CumulativePercent);
	КонецЦикла;
	
	СтруктураПроцентов = Новый Структура();
	СтруктураПроцентов.Вставить("z10th_percentile", 10);
	СтруктураПроцентов.Вставить("z25th_percentile", 25);
	СтруктураПроцентов.Вставить("z50th_percentile", 50);
	СтруктураПроцентов.Вставить("z70th_percentile", 70);
	СтруктураПроцентов.Вставить("z90th_percentile", 90);
	СтруктураПроцентов.Вставить("z100th_percentile", 100);
	
	СтрокаИтогов = ТЗ.Найти(Неопределено, "TotalAverageLeadTime");
	ИтогTotalItemsCount = СтрокаИтогов.LineItemsCumulated;
	ИтогTotalDays = Окр(ТЗ.Итог("TotalAverageLeadTime") / (ТЗ.Количество()-1));
	ТЗ.Удалить(СтрокаИтогов);
	
	ОбластьИтоги = Макет.ПолучитьОбласть("ОбластьИтоги");
	ПараметрыОбластиИтоги = ОбластьИтоги.Параметры;
	ПараметрыОбластиИтоги.TotalItemsCount = ИтогTotalItemsCount;
	ПараметрыОбластиИтоги.AverageDays = ИтогTotalDays;
	
	ОбластьДетали = Макет.ПолучитьОбласть("ОбластьДетали");
	ПараметрыОбластиДетали = ОбластьДетали.Параметры;

	Для Каждого ЭлементСтруктуры из СтруктураПроцентов Цикл 
		
		ЗначениеСтруктуры = ЭлементСтруктуры.Значение;
		TotalAverageLeadTime = 0;
		TotalItemsCount = 0;
		
		Для ы = 1 По ТЗ.Количество() Цикл 
			
			СтрокаТЗ = ТЗ[ы-1];
			
			Если СтрокаТЗ.CumulativePercent > ЗначениеСтруктуры 
				ИЛИ ы = ТЗ.Количество() Тогда
				
				ПараметрыОбластиДетали.PercentileAverageCriteria = СтрЗаменить(СтрЗаменить(ЭлементСтруктуры.Ключ, "z", ""), "_", " ");
				
				Если ы = ТЗ.Количество() Тогда
					
					ItemsCount = СтрокаТЗ.LineItemsCumulated;
					Days = СтрокаТЗ.TotalAverageLeadTime;
					
				иначе
					
					ItemsCount = TotalItemsCount;
					Days = TotalAverageLeadTime;
					
				КонецЕсли;
				
				ПараметрыОбластиДетали.ItemsCount = ItemsCount;
				ПараметрыОбластиДетали.Days = Days;
				
				ТабличныйДокумент.Вывести(ОбластьДетали);
				
				Если ЭлементСтруктуры.Ключ = "z90th_percentile" Тогда 
					СерияДиаграммы_90th_percentile = Days;
				КонецЕсли;
				   
				Прервать;
				
			КонецЕсли;
			        						
			TotalAverageLeadTime = СтрокаТЗ.TotalAverageLeadTime;
			TotalItemsCount = СтрокаТЗ.LineItemsCumulated;
			
		КонецЦикла;
		
	КонецЦикла;  
	              	
	ТабличныйДокумент.Вывести(ОбластьИтоги);
	
	// Перейдем к диаграмме и добавим в табличный документ
	// рисунок типа диаграмма
	Рис        = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	ИндексРис  = ТабличныйДокумент.Рисунки.Индекс(Рис);
	
	//Прочитаем ширину и высоту наших данных в табличном документе
	//Это нужно для корректного задания исходных данных для диаграммы 
	//и ее расположения в документе
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	//Расположим диаграмму в табличном документе, сразу под таблицей данных
	ТабличныйДокумент.Рисунки[ИндексРис].Расположить(ТабличныйДокумент.Область(ВысотаТаблицы+3,1,ВысотаТаблицы + 25,20));
	
	//Укажим в качестве источника данных для диаграммы
	//область в нашем табличном документе  
	Диаграмма = ТабличныйДокумент.Рисунки[ИндексРис].Объект;  
	
	ТЗAverageLT = ТЗ.Скопировать(, "AverageLT,TotalItemsCount");
	ТЗAverageLT.Свернуть("AverageLT", "TotalItemsCount");
	
	Диаграмма.Серии.Добавить("Number of items");
	Серия = Диаграмма.Серии[0];
	
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	Точка90Установлена = Ложь;
	ТочкаAverageУстановлена = Ложь;
	
	Для Каждого СтрТЗ из ТЗAverageLT Цикл
		
		Если СтрТЗ.AverageLT >= СерияДиаграммы_90th_percentile 
			И Не Точка90Установлена Тогда 
			
			Точка90 = Диаграмма.Точки.Добавить(1);
			Точка90.Текст = "90% - " + СерияДиаграммы_90th_percentile;
			Диаграмма.УстановитьЗначение(Точка90, Серия, ТЗ.Найти(СерияДиаграммы_90th_percentile, "TotalAverageLeadTime").TotalItemsCount);  // 90%
			
			Точка90Установлена = Истина;
			
		КонецЕсли;
		
		Если СтрТЗ.AverageLT >= ИтогTotalDays 
			И Не ТочкаAverageУстановлена Тогда 
			
			СтрокаОбщейТЗ = ТЗ.Найти(ИтогTotalDays, "TotalAverageLeadTime");
			
			Если СтрокаОбщейТЗ = Неопределено Тогда 
				СтрокаОбщейТЗ = ТЗ.Найти(ИтогTotalDays, "AverageLT");
			КонецЕсли;
			
			Если СтрокаОбщейТЗ = Неопределено Тогда 
				СтрокаОбщейТЗ = ТЗ.Найти(СтрТЗ.AverageLT, "AverageLT");
			КонецЕсли;
			
			ТочкаAverage = Диаграмма.Точки.Добавить(1);
			ТочкаAverage.Текст = "Average LT - " + ИтогTotalDays;
			Диаграмма.УстановитьЗначение(ТочкаAverage, Серия, СтрокаОбщейТЗ.TotalItemsCount);  // 90%
			
			ТочкаAverageУстановлена = Истина;
			
		КонецЕсли;
		
		Точка = Диаграмма.Точки.Добавить(СтрТЗ.TotalItemsCount);
		Точка.Текст = СтрТЗ.AverageLT;
		Диаграмма.УстановитьЗначение(Точка, Серия, СтрТЗ.TotalItemsCount);
		
	КонецЦикла; 
	
	//можно указать различные параметры для диаграммы - тип, выводить заголовки и т.д
	// мы выведем несколько для примера
	Диаграмма.ТипДиаграммы         = ТипДиаграммы.График;
	Диаграмма.СерииВСтроках        = Истина;
	Диаграмма.ОтображатьЛегенду    = Истина;
	Диаграмма.РежимСглаживания     = РежимСглаживанияДиаграммы.ГладкаяКривая;
	
	 	
КонецПроцедуры
