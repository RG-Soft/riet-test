
&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанных(Периодичность, ДатаОтчета) 
	
	ТаблицаПериодов = ПолучитьТаблицуПериодов(Периодичность, ДатаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Интервалы.Интервал,
	|	ДОБАВИТЬКДАТЕ(Интервалы.Интервал, МЕСЯЦ, -1) КАК ПредИнтервал
	|ПОМЕСТИТЬ ТаблицаИнтервалов
	|ИЗ
	|	&Интервалы КАК Интервалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Source.Month,
	|	Source.Trip,
	|	Source.Specialist,
	|	Source.sortIndex,
	|	Source.Title
	|ПОМЕСТИТЬ ИсходнаяВыборка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИнтервалов.Интервал КАК Month,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Trip.Ссылка) КАК Trip,
	|		""Trips authorized by specialist"" КАК Title,
	|		Trip.Ссылка.Specialist КАК Specialist,
	|		0 КАК sortIndex
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК Trip
	|			ПО (ТаблицаИнтервалов.Интервал = НАЧАЛОПЕРИОДА(Trip.ETA, МЕСЯЦ))
	|				И (НЕ Trip.Ссылка.ПометкаУдаления)
	|				И (НЕ Trip.Ссылка.CreatedBy.Код = ""НеАвторизован"")
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Trip.Ссылка.Specialist,
	|		ТаблицаИнтервалов.Интервал
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИнтервалов.Интервал,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Trip.Ссылка),
	|		""Trips NOT authorized by specialist"",
	|		Trip.Ссылка.Specialist,
	|		1
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК Trip
	|			ПО (ТаблицаИнтервалов.Интервал = НАЧАЛОПЕРИОДА(Trip.ETA, МЕСЯЦ))
	|				И (НЕ Trip.Ссылка.ПометкаУдаления)
	|				И (Trip.Ссылка.CreatedBy.Код = ""НеАвторизован"")
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Trip.Ссылка.Specialist,
	|		ТаблицаИнтервалов.Интервал
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИнтервалов.Интервал,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Trip.Ссылка),
	|		""Trips pending from previous period"",
	|		Trip.Ссылка.Specialist,
	|		2
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Trip.FinalDestinations КАК Trip
	|			ПО (ТаблицаИнтервалов.Интервал > НАЧАЛОПЕРИОДА(Trip.ETA, МЕСЯЦ))
	|				И (НЕ Trip.Ссылка.ПометкаУдаления)
	|				И (Trip.Ссылка.CreatedBy.Код = ""НеАвторизован"")
	|				И (Trip.Ссылка.Specialist = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Trip.Ссылка.Specialist,
	|		ТаблицаИнтервалов.Интервал) КАК Source
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяВыборка.Month,
	|	ИсходнаяВыборка.Trip,
	|	ИсходнаяВыборка.sortIndex КАК sortIndex,
	|	ИсходнаяВыборка.Specialist,
	|	ИсходнаяВыборка.Title
	|ИЗ
	|	ИсходнаяВыборка КАК ИсходнаяВыборка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходнаяВыборка.Month,
	|	ИсходнаяВыборка.Trip,
	|	3,
	|	NULL,
	|	""Total pending""
	|ИЗ
	|	ИсходнаяВыборка КАК ИсходнаяВыборка
	|ГДЕ
	|	ИсходнаяВыборка.Title В (""Trips NOT authorized by specialist"", ""Trips pending from previous period"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	sortIndex";
	
	Запрос.УстановитьПараметр("Интервалы", ТаблицаПериодов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Показатели = Новый Массив;
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Trips authorized by specialist", 0));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Trips NOT authorized by specialist", 1));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Trips pending from previous period", 2)); 
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Total pending", 3));

	Для каждого ТекПоказатель из Показатели Цикл
		
		Если ТаблицаДанных.Найти(ТекПоказатель.Показатель, "Title") = Неопределено Тогда
			
			Стр = ТаблицаДанных.Добавить();
			Стр.Title 	  = ТекПоказатель.Показатель;
			Стр.sortIndex = ТекПоказатель.Индекс;
			Стр.Month 	  = НачалоМесяца(ТекущаяДата());	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанныхОсновная(Периодичность, ДатаОтчета)
	
	ТаблицаПериодов = ПолучитьТаблицуПериодов(Периодичность, ДатаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Интервалы.Интервал
	|ПОМЕСТИТЬ ТаблицаИнтервалов
	|ИЗ
	|	&Интервалы КАК Интервалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяВыборка.TR,
	|	ИсходнаяВыборка.Specialist,
	|	ИсходнаяВыборка.Title,
	|	ИсходнаяВыборка.Month,
	|	ИсходнаяВыборка.NoTrip,
	|	ИсходнаяВыборка.Stage,
	|	ИсходнаяВыборка.sortIndex
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		TransportRequestDoc.Ссылка КАК TR,
	|		TransportRequestDoc.Ссылка.Specialist КАК Specialist,
	|		""Total TR current month"" КАК Title,
	|		НАЧАЛОПЕРИОДА(TransportRequestDoc.CreationDate, МЕСЯЦ) КАК Month,
	|		НАЧАЛОПЕРИОДА(TransportRequestDoc.CreationDate, МЕСЯЦ) КАК ПредИнтервал,
	|		NULL КАК NoTrip,
	|		NULL КАК Stage,
	|		0 КАК sortIndex
	|	ИЗ
	|		Документ.TransportRequest КАК TransportRequestDoc
	|	ГДЕ
	|		TransportRequestDoc.CreationDate МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|		И НЕ TransportRequestDoc.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		StagesOfTransportRequests.TransportRequest,
	|		StagesOfTransportRequests.TransportRequest.Specialist,
	|		""TR proccessed (current)"",
	|		ТаблицаИнтервалов.Интервал,
	|		NULL,
	|		NULL,
	|		StagesOfTransportRequests.Stage,
	|		1
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|			ПО (ТаблицаИнтервалов.Интервал = НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.RequiredDeliveryLocalTime, МЕСЯЦ))
	|	ГДЕ
	|		StagesOfTransportRequests.Stage В (ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.CompletelyDelivered), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.CompletelyShipped), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyDelivered))
	|		И НЕ StagesOfTransportRequests.TransportRequest.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		StagesOfTransportRequests.TransportRequest,
	|		StagesOfTransportRequests.TransportRequest.Specialist,
	|		""TR proccessed (previous period)"",
	|		ТаблицаИнтервалов.Интервал,
	|		NULL,
	|		NULL,
	|		StagesOfTransportRequests.Stage,
	|		2
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|			ПО (ТаблицаИнтервалов.Интервал = НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.CreationDate, МЕСЯЦ))
	|	ГДЕ
	|		StagesOfTransportRequests.Stage В (ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.Requested), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyShipped), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist))
	|		И НЕ StagesOfTransportRequests.TransportRequest.ПометкаУдаления
	|		И НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.RequiredDeliveryLocalTime, МЕСЯЦ) < НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.CreationDate, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		StagesOfTransportRequests.TransportRequest,
	|		StagesOfTransportRequests.TransportRequest.Specialist,
	|		""TR pending (current)"",
	|		ТаблицаИнтервалов.Интервал,
	|		NULL,
	|		ВЫБОР
	|			КОГДА StagesOfTransportRequests.Stage = ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist)
	|					И TripNonLawsonCompaniesParcels.Ссылка ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		StagesOfTransportRequests.Stage,
	|		4
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|				ПО StagesOfTransportRequests.TransportRequest = TripNonLawsonCompaniesParcels.Parcel.TransportRequest
	|			ПО (ТаблицаИнтервалов.Интервал = НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.RequiredDeliveryLocalTime, МЕСЯЦ))
	|	ГДЕ
	|		StagesOfTransportRequests.Stage В (ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.Requested), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyShipped), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist))
	|		И НЕ StagesOfTransportRequests.TransportRequest.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		StagesOfTransportRequests.TransportRequest,
	|		StagesOfTransportRequests.TransportRequest.Specialist,
	|		""TR pending (previous period)"",
	|		ТаблицаИнтервалов.Интервал,
	|		NULL,
	|		ВЫБОР
	|			КОГДА StagesOfTransportRequests.Stage = ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist)
	|					И TripNonLawsonCompaniesParcels.Ссылка ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		StagesOfTransportRequests.Stage,
	|		5
	|	ИЗ
	|		ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|				ПО StagesOfTransportRequests.TransportRequest = TripNonLawsonCompaniesParcels.Parcel.TransportRequest
	|			ПО (ТаблицаИнтервалов.Интервал > НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.CreationDate, МЕСЯЦ))
	|	ГДЕ
	|		StagesOfTransportRequests.Stage В (ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.Requested), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyShipped), ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.AcceptedBySpecialist))
	|		И НЕ StagesOfTransportRequests.TransportRequest.ПометкаУдаления
	|		И НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.RequiredDeliveryLocalTime, МЕСЯЦ) < НАЧАЛОПЕРИОДА(StagesOfTransportRequests.TransportRequest.CreationDate, МЕСЯЦ)) КАК ИсходнаяВыборка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходныеДанные.TR) КАК TR,
	|	ИсходныеДанные.Specialist,
	|	ИсходныеДанные.Title КАК Title,
	|	ИсходныеДанные.Month,
	|	ИсходныеДанные.sortIndex КАК sortIndex
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|ГДЕ
	|	ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Specialist,
	|	ИсходныеДанные.Month,
	|	ИсходныеДанные.Title,
	|	ИсходныеДанные.sortIndex
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходныеДанные.TR),
	|	ИсходныеДанные.Specialist,
	|	""Total TR proccessed"",
	|	ИсходныеДанные.Month,
	|	3
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|ГДЕ
	|	ИсходныеДанные.Title В (""TR proccessed (current)"", ""TR proccessed (previous period)"")
	|	И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Month,
	|	ИсходныеДанные.Specialist
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходныеДанные.TR),
	|	ИсходныеДанные.Specialist,
	|	""Total TR pending"",
	|	ИсходныеДанные.Month,
	|	7
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|ГДЕ
	|	ИсходныеДанные.Title В (""TR pending (current)"", ""TR pending (previous period)"")
	|	И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Month,
	|	ИсходныеДанные.Specialist
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(Т.TR_Processed, 0) = 0
	|				ТОГДА 100
	|			ИНАЧЕ ЕСТЬNULL(Т.TR_Pending, 0) / (Т.TR_Processed + Т.TR_Pending) * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	NULL,
	|	Т.Title,
	|	Т.Month,
	|	Т.sortIndex
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА ИсходныеДанные.Title В (""TR pending (current)"", ""TR pending (previous period)"")
	|					ТОГДА ИсходныеДанные.TR
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК TR_Pending,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА ИсходныеДанные.Title В (""TR pending (current)"", ""TR pending (previous period)"")
	|					ТОГДА NULL
	|				ИНАЧЕ ИсходныеДанные.TR
	|			КОНЕЦ) КАК TR_Processed,
	|		""Backlog (pending vs proccessed), %"" КАК Title,
	|		ИсходныеДанные.Month КАК Month,
	|		7 КАК sortIndex
	|	ИЗ
	|		ИсходныеДанные КАК ИсходныеДанные
	|	ГДЕ
	|		ИсходныеДанные.Title В (""TR proccessed (current)"", ""TR proccessed (previous period)"", ""TR pending (current)"", ""TR pending (previous period)"")
	|		И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИсходныеДанные.Month) КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(Т.TR_Specialist, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(Т.TR_Processed, 0) / Т.TR_Specialist
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	NULL,
	|	Т.Title,
	|	Т.Month,
	|	Т.sortIndex
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходныеДанные.Specialist) КАК TR_Specialist,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходныеДанные.TR) КАК TR_Processed,
	|		""Benchmark for Planner"" КАК Title,
	|		ИсходныеДанные.Month КАК Month,
	|		8 КАК sortIndex
	|	ИЗ
	|		ИсходныеДанные КАК ИсходныеДанные
	|	ГДЕ
	|		ИсходныеДанные.Title В (""TR proccessed (current)"", ""TR proccessed (previous period)"")
	|		И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИсходныеДанные.Month) КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.NoTripTR = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.PartiallyTRTR / ВложенныйЗапрос.NoTripTR * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	NULL,
	|	""% of TRs with Status Partially shipped"",
	|	ВложенныйЗапрос.Month,
	|	6
	|ИЗ
	|	(ВЫБРАТЬ
	|		Финальная.Month КАК Month,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Финальная.PartiallyTRTR) КАК PartiallyTRTR,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Финальная.NoTripTR) КАК NoTripTR
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ИсходныеДанные.Month КАК Month,
	|			0 КАК PartiallyTRTR,
	|			ИсходныеДанные.TR КАК NoTripTR,
	|			ИсходныеДанные.Specialist КАК Specialist
	|		ИЗ
	|			ИсходныеДанные КАК ИсходныеДанные
	|		ГДЕ
	|			ИсходныеДанные.NoTrip
	|			И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИсходныеДанные.Month,
	|			ИсходныеДанные.TR,
	|			NULL,
	|			NULL
	|		ИЗ
	|			ИсходныеДанные КАК ИсходныеДанные
	|		ГДЕ
	|			ИсходныеДанные.Title В (""TR pending (current)"", ""TR pending (previous period)"")
	|			И ИсходныеДанные.Stage = ЗНАЧЕНИЕ(Перечисление.TransportRequestStages.PartiallyShipped)
	|			И ИсходныеДанные.Month МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|			И НЕ ИсходныеДанные.NoTrip) КАК Финальная
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Финальная.Month) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Интервалы", ТаблицаПериодов);
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаОтчета);
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГОД", "МЕСЯЦ");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГОД", "КВАРТАЛ");
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Показатели = Новый Массив;
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Total TR current month", 0));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "TR proccessed (current)", 1));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "TR proccessed (previous period)", 2));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Total TR proccessed", 3));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "TR pending (current)", 4));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "TR pending (previous period)", 5));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "% of TRs with Status Partially shipped", 6));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Total TR pending", 7));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Backlog (pending vs proccessed), %", 8));
	Показатели.Добавить(Новый Структура("Показатель, Индекс", "Benchmark for Planner", 9)); 

	Для каждого ТекПоказатель из Показатели Цикл
		
		Если ТаблицаДанных.Найти(ТекПоказатель.Показатель, "Title") = Неопределено Тогда
			
			Стр = ТаблицаДанных.Добавить();
			Стр.Title 	  = ТекПоказатель.Показатель;
			Стр.sortIndex = ТекПоказатель.Индекс;
			Стр.Month 	  = НачалоМесяца(ТекущаяДата());	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуПериодов(Периодичность, ДатаОтчета)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Интервал", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	НачалоПериода = НачалоМесяца(ДатаОтчета);
	КонецПериода  = НачалоПериода;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Стр = ТаблицаПериодов.Добавить();
		Стр.Интервал = НачалоПериода;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(НачалоПериода);
		Для Счет = 1 по 3 Цикл
			
			Стр = ТаблицаПериодов.Добавить();
			Стр.Интервал = НачалоПериода;
			
			НачалоПериода = ДобавитьМесяц(НачалоПериода, 1);
			
		КонецЦикла;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(НачалоПериода);
		Для Счет = 1 по 12 Цикл
			
			Стр = ТаблицаПериодов.Добавить();
			Стр.Интервал = НачалоПериода;
			
			НачалоПериода = ДобавитьМесяц(НачалоПериода, 1);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("Данные", ПолучитьТаблицуДанныхОсновная(Отчет.Периодичность, Отчет.ДатаОтчета));
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет"); 
	ОСКД = ОбъектОтчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	//ТексЗапроса = ОСКД.НаборыДанных[0].Запрос;
	//
	НастройкиОСКД = ОСКД.НастройкиПоУмолчанию; //НастройкиОСКД = КомпоновщикНастроек.ПолучитьНастройкиОСКД(); 
	//
	НастройкаКолонки = НастройкиОСКД.Структура[0].Колонки[0].ПоляГруппировки.Элементы[0];
	Если Отчет.Периодичность = Перечисления.Периодичность.Месяц Тогда
	//	ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "МЕСЯЦ");
		НастройкаКолонки.НачалоПериода = НачалоМесяца(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецМесяца(Отчет.ДатаОтчета);
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Квартал Тогда
	//	ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "КВАРТАЛ");
		НастройкаКолонки.НачалоПериода = НачалоКвартала(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецКвартала(Отчет.ДатаОтчета);
	Иначе
		НастройкаКолонки.НачалоПериода = НачалоГода(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецГода(Отчет.ДатаОтчета);
	КонецЕсли;
	//
	//ОСКД.НаборыДанных[0].Запрос = ТексЗапроса;
	
	
	ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы; 
	
	//ЭлементНачалоПериода = ПараметрыДанныхОСКД.Найти("НачалоПериода"); 
	//ЭлементНачалоПериода.Использование = Истина; 
	//ЭлементНачалоПериода.Значение = НачалоМесяца(ТекущаяДата()); 
	//ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти("КонецПериода"); 
	//ЭлементКонецПериода.Использование = Истина; 
	//ЭлементКонецПериода.Значение = КонецМесяца(ТекущаяДата()); 
	//ЭлементСчет = ПараметрыДанныхОСКД.Найти("Счет"); 
	//ЭлементСчет.Использование = Истина; 
	//ЭлементСчет.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах; 
	
	//КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных; 
	//КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОСКД)); 
	//КомпоновщикНастроекДанных.ЗагрузитьНастройкиОСКД(ОСКД.НастройкиОСКДПоУмолчанию); 
	//КомпоновщикНастроекДанных.ЗагрузитьПользовательскиеНастройкиОСКД(Отчет.КомпоновщикНастроек.ПользовательскиеНастройкиОСКД); 
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных; 
	//Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, КомпоновщикНастроекДанных.ПолучитьНастройкиОСКД()); 
	Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,ДанныеРасшифровкиКомпоновкиДанных); 
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет, ВнешниеДанные,ДанныеРасшифровкиКомпоновкиДанных); 
	Результат.Очистить(); 
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВыводаОСКД.УстановитьДокумент(Результат); 
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, УникальныйИдентификатор);
	
	// отчет по Leg7
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("Данные", ПолучитьТаблицуДанных(Отчет.Периодичность, Отчет.ДатаОтчета));
	
	ОСКД = ОбъектОтчет.ПолучитьМакет("Leg7СхемаКомпоновкиДанных"); 
	//ТексЗапроса = ОСКД.НаборыДанных[0].Запрос;
	//
	НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
	//
	НастройкаКолонки = НастройкиОСКД.Структура[0].Колонки[0].ПоляГруппировки.Элементы[0];
	Если Отчет.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "МЕСЯЦ");
		НастройкаКолонки.НачалоПериода = НачалоМесяца(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецМесяца(Отчет.ДатаОтчета);
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТексЗапроса = СтрЗаменить(ТексЗапроса, "ГОД", "КВАРТАЛ");
		НастройкаКолонки.НачалоПериода = НачалоКвартала(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецКвартала(Отчет.ДатаОтчета);
	Иначе
		НастройкаКолонки.НачалоПериода = НачалоГода(Отчет.ДатаОтчета);
		НастройкаКолонки.КонецПериода  = КонецГода(Отчет.ДатаОтчета);
	КонецЕсли;
	//
	//ОСКД.НаборыДанных[0].Запрос = ТексЗапроса;
	
	ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы; 
	
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД,ДанныеРасшифровкиКомпоновкиДанных); 
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет, ВнешниеДанные ,ДанныеРасшифровкиКомпоновкиДанных); 
	РезультатLeg7.Очистить(); 
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВыводаОСКД.УстановитьДокумент(РезультатLeg7); 
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	
	ДанныеРасшифровкиLeg7 = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, УникальныйИдентификатор);
	
	РезультатLeg7.ПоказатьУровеньГруппировокСтрок(0);
	
	//РезультатLeg7.НайтиТекст(""
	
	// Чтобы не писалось "Отчет не сформирован…" 
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь; 
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;

	// Чтобы не писалось "Отчет не сформирован…" 
	Элементы.РезультатLeg7.ОтображениеСостояния.Видимость = Ложь; 
	Элементы.РезультатLeg7.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаОтчета) Тогда
		Отчет.ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
	СформироватьОтчетНаСервере(); 

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДеталиРасшифровки = Новый Структура; 
	//ДеталиРасшифровки.Вставить("Specialist", 	Неопределено); 
	//ДеталиРасшифровки.Вставить("Title", 		Неопределено);
	//ДеталиРасшифровки.Вставить("Month", 		Неопределено);
	
	СтрокиБезРасшифровки = Новый Массив;
	СтрокиБезРасшифровки.Добавить("% of TRs with Status Partially shipped");
	СтрокиБезРасшифровки.Добавить("Backlog (pending vs proccessed), %");
	СтрокиБезРасшифровки.Добавить("Benchmark for Planner");
	
	ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки, Элемент = Элементы.РезультатLeg7);
	
	Если ДеталиРасшифровки.Количество() > 0
		И ДеталиРасшифровки.Свойство("Month") Тогда
		
		Если ДеталиРасшифровки.Свойство("Title") И НЕ СтрокиБезРасшифровки.Найти(ДеталиРасшифровки.Title) = Неопределено Тогда
			Возврат;
		КонецЕсли;			
		
		ДеталиРасшифровки.Вставить("ДатаОтчета", Отчет.ДатаОтчета);
		ДеталиРасшифровки.Вставить("Периодичность", Отчет.Периодичность);
		Если Элемент = Элементы.Результат Тогда
			ДеталиРасшифровки.Вставить("ИмяСхемы", "PlannersDashboardGeneral");
		Иначе 
			ДеталиРасшифровки.Вставить("ИмяСхемы", "PlannersDashboardLeg7");
		КонецЕсли;
		
		// открываем детализирующий отчет
		ОткрытьФорму("Отчет.DashboardsDetalization.Форма.ФормаОтчета", Новый Структура("Отбор", ДеталиРасшифровки), ЭтаФорма,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отчет.Периодичность = Перечисления.Периодичность.Месяц;
	Отчет.ДатаОтчета 	= ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьОтчетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	
	СформироватьОтчет(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	СформироватьОтчет(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, ДеталиРасшифровки, ЭтоЛег7 = Ложь) 
	Данные = ПолучитьИзВременногоХранилища(?(ЭтоЛег7, ДанныеРасшифровкиLeg7, ДанныеРасшифровки));    
	
	ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка);
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Расшифровка)
	
	ЭлементРасшифровкиДанных = Данные.Элементы.Получить(Расшифровка);
	
	// выбираем поля. Если это группа, то обходим ее рекурсивно
	Если ТипЗнч(ЭлементРасшифровкиДанных) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля(); 
		Для каждого ТекПоле из Поля Цикл
			ДеталиРасшифровки.Вставить(ТекПоле.Поле, ТекПоле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// далее просматриваем родителей
	Родители = ЭлементРасшифровкиДанных.ПолучитьРодителей(); 
	
	Для каждого Родитель из Родители Цикл
		
		ПолучитьЗначенияРасшифровки(Данные, ДеталиРасшифровки, Родитель.Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры