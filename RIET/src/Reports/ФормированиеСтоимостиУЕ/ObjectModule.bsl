#Если КЛИЕНТ Тогда
	
// процедура формирует и выводит отчет по движениям документа
Процедура СформироватьИВывестиОтчет() Экспорт
	
	ДокументДляВывода = Новый ТабличныйДокумент;
	ВозможностьПостроения = СформироватьОтчет(ДокументДляВывода);
	Если ВозможностьПостроения Тогда
		ДокументДляВывода.Показать("Расчет-справка «Формирование стоимости при расчете в условные единицах» для документа "+ Строка(Документ));
	КонецЕсли;	
	
КонецПроцедуры
	
	
Функция СформироватьОтчет(РезультирующийДокумент) Экспорт

	Если Документ.Пустая() Тогда
		Предупреждение("Запишите и проведите документ, по которому формируется отчет");
		Возврат Ложь;
	ИначеЕсли не Документ.Проведен тогда
		Предупреждение("Проведите документ, по которому формируется отчет");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);
	
	//Определение необходимых параметров документа
	
	ПараметрыДокумента = Новый структура ("ВидДокумента,ВидОперации,
	|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
	|ВалютаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов,РасчетыВУсловныхЕдиницах,
	|ВалютаДокумента,КурсДокумента,КратностьДокумента, СуммаДокумента");
	
	СтрокаСообщения = "";
	Для каждого Параметр Из ПараметрыДокумента Цикл
	    Значение = Неопределено;
		СтруктураШапкиДокумента.Свойство(Параметр.Ключ,Значение);
		Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Значение) Тогда
			ПараметрыДокумента.Вставить(Параметр.Ключ,Значение);
		ИначеЕсли Параметр.Ключ = "СчетУчетаРасчетовСКонтрагентом" Тогда
			СтрокаСообщения = ?(ПустаяСтрока(СтрокаСообщения),"",Символы.ПС)+ " - не определен счет учета расчетов по документу";
		ИначеЕсли Параметр.Ключ = "СуммаДокумента" Тогда
			СтрокаСообщения = ?(ПустаяСтрока(СтрокаСообщения),"",Символы.ПС)+ " - не определена сумма (расчетов) по документу";
		ИначеЕсли Параметр.Ключ = "РасчетыВУсловныхЕдиницах" Тогда
			СтрокаСообщения = ?(ПустаяСтрока(СтрокаСообщения),"",Символы.ПС)+ " - не используются расчеты в условных единицах";
			ПараметрыДокумента.Вставить(Параметр.Ключ,Ложь);
		ИначеЕсли Параметр.Ключ = "ВалютаДокумента"
			или Параметр.Ключ = "ВалютаВзаиморасчетов" тогда
			ПараметрыДокумента.Вставить(Параметр.Ключ,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
		ИначеЕсли Параметр.Ключ = "КурсДокумента" 
			или Параметр.Ключ = "КратностьДокумента"
			или Параметр.Ключ = "КурсВзаиморасчетов"
			или Параметр.Ключ = "КратностьВзаиморасчетов"
			Тогда
			ПараметрыДокумента.Вставить(Параметр.Ключ,1);
		КонецЕсли; 
	КонецЦикла; 
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		//Ошибки при определении параметров
		Предупреждение("В документе, по которому формируется отчет:"+Символы.ПС+СтрокаСообщения+Символы.ПС+
		"Расчет-справка «Формирование стоимости при расчете в условные единицах» не сформирована.");
		Возврат Ложь;
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ПараметрыДокумента.СчетУчетаРасчетовПоАвансам) Тогда
		ПараметрыДокумента.Вставить("СчетУчетаРасчетовПоАвансам",ПараметрыДокумента.СчетУчетаРасчетовСКонтрагентом);
	КонецЕсли;
	
	Если не ПараметрыДокумента.РасчетыВУсловныхЕдиницах Тогда
		Предупреждение("В документе, по которому формируется отчет, не используются расчеты в условных единицах.");
		Возврат Ложь;
	КонецЕсли; 
	
	ПараметрыДвиженийДокумента = УправлениеВзаиморасчетами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ПараметрыДокумента.ВидДокумента,ПараметрыДокумента.ВидОперации);
	НаправлениеДвижения = ПараметрыДвиженийДокумента.Направление;
	ЭтоВозврат          = (ПараметрыДвиженийДокумента.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	Множитель = ?(НаправлениеДвижения = "Выбытие",-1,1);
	
	Если не (НаправлениеДвижения = "Поступление" или НаправлениеДвижения = "Выбытие") Тогда
		Предупреждение("Документ, по которому формируется отчет, не отражает операции приобретения или реализации.");
		Возврат Ложь;
	ИначеЕсли ЭтоВозврат тогда
		Предупреждение("Документ, по которому формируется отчет, отражает возвраты.
		|При возврате зачет авансов не производится и сумма документа не пересчитывается.");
		Возврат Ложь;
	КонецЕсли; 
	
	

	// Определяем погашенные авансы по оборотам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) * &Знак КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаОборот) * &Знак КАК ВалютнаяСуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, Счет = &СчетРасчетов, &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта";
	
	Запрос.УстановитьПараметр("Регистратор",СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	Запрос.УстановитьПараметр("СчетРасчетов",ПараметрыДокумента.СчетУчетаРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("Знак",Множитель);
	//Запрос.УстановитьПараметр("СчетАвансов", ПараметрыДокумента.СчетАвансов);
	
	Результат = Запрос.Выполнить();
	ДвиженияУЕ = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СуммаДокументаУЕ = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ПараметрыДокумента.СуммаДокумента
		,ПараметрыДокумента.ВалютаДокумента,ПараметрыДокумента.ВалютаВзаиморасчетов
		,ПараметрыДокумента.КурсДокумента, ПараметрыДокумента.КурсВзаиморасчетов
		,ПараметрыДокумента.КратностьДокумента, ПараметрыДокумента.КратностьВзаиморасчетов);
	
	ТаблицаРасчетов = Новый ТаблицаЗначений();
	ТаблицаРасчетов.Колонки.Добавить("Документ");
	ТаблицаРасчетов.Колонки.Добавить("ДатаДокумента",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаРасчетов.Колонки.Добавить("КурсДокумента",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,4));
	ТаблицаРасчетов.Колонки.Добавить("Сумма",		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("СуммаВал",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоАванс",	Новый ОписаниеТипов("Булево"));
	
	СтрокиЗачетаАванса = ДвиженияУЕ.НайтиСтроки(Новый Структура("КорСчет",ПараметрыДокумента.СчетУчетаРасчетовПоАвансам));
	Если Не СтрокиЗачетаАванса.Количество() =0 Тогда
		СубконтоДокументаРасчетов = ПараметрыДокумента.СчетУчетаРасчетовПоАвансам.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если СубконтоДокументаРасчетов = Неопределено Тогда
			// Субконто документов расчетов на корр счете не онаружено.
			// Невозможно определить документ, по которому зачтен аванс и дату, а так же курс документа.
		Иначе
			СубконтоДокументаРасчетов = СубконтоДокументаРасчетов.НомерСтроки;
		КонецЕсли;
				
		МетаданныеДокументовАванса = Новый Соответствие();
		
		//Заполнение таблицы значениями зачитываемых авансов.
		Для каждого СтрокаАванса Из СтрокиЗачетаАванса Цикл
			ДокументАванса = Неопределено;
			Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СубконтоДокументаРасчетов) Тогда
				ДокументАванса = СтрокаАванса["КорСубконто"+СубконтоДокументаРасчетов];
			КонецЕсли;
			
			СтрокаРасчетов = ТаблицаРасчетов.Добавить();
			СтрокаРасчетов.ЭтоАванс	= Истина;
			СтрокаРасчетов.Сумма	= СтрокаАванса.СуммаОборот;
			СтрокаРасчетов.СуммаВал = СтрокаАванса.ВалютнаяСуммаОборот;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокументАванса) тогда
				КурсДокументаАванса = Неопределено;
			Иначе
				СтрокаРасчетов.Документ	= ДокументАванса;
				СтрокаРасчетов.ДатаДокумента = ДокументАванса.Дата;
				
				Если МетаданныеДокументовАванса.Получить(ТипЗнч(ДокументАванса)) = неопределено Тогда
					МетаданныеДокументовАванса.Вставить(ТипЗнч(ДокументАванса),ДокументАванса.Метаданные());
				КонецЕсли; 
				
				КурсДокументаАванса = МетаданныеДокументовАванса.Получить(ТипЗнч(ДокументАванса)).реквизиты.Найти("КурсВзаиморасчетов");
				Если не КурсДокументаАванса = Неопределено тогда
					КурсДокументаАванса = ДокументАванса.КурсВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			Если КурсДокументаАванса = Неопределено Тогда
				КурсДокументаАванса = Окр(?(СтрокаРасчетов.СуммаВал=0,0,СтрокаРасчетов.Сумма/СтрокаРасчетов.СуммаВал),4);
			КонецЕсли;
			
			СтрокаРасчетов.КурсДокумента = КурсДокументаАванса;
		КонецЦикла; 
	КонецЕсли; 
	
	ОбнаруженАванс = (ТаблицаРасчетов.Количество()>0);
	Если ОбнаруженАванс Тогда
		ТаблицаРасчетов.Свернуть("Документ,ДатаДокумента,КурсДокумента, ЭтоАванс","Сумма,СуммаВал");
		ТаблицаРасчетов.Сортировать("ЭтоАванс убыв, ДатаДокумента возр,Документ возр");
	КонецЕсли; 
	
	НеоплаченнаяСуммаУЕ = СуммаДокументаУЕ - ТаблицаРасчетов.итог("СуммаВал");
	
	Если НеоплаченнаяСуммаУЕ<>0 Тогда
	    //Определим рублевый эквивалент неоплаченной суммы
		Если ПараметрыДокумента.ВалютаДокумента = ПараметрыДокумента.ВалютаВзаиморасчетов Тогда
		    //Документ выписан в валюте. Рублевый остаток определяем по курсу расчетов
			НеоплаченнаяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НеоплаченнаяСуммаУЕ
			,ПараметрыДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
			,ПараметрыДокумента.КурсВзаиморасчетов,1
			,ПараметрыДокумента.КратностьВзаиморасчетов,1);
        Иначе
			НеоплаченнаяСумма = Окр(ПараметрыДокумента.СуммаДокумента * НеоплаченнаяСуммаУЕ/СуммаДокументаУЕ);
		КонецЕсли;
	Иначе
		НеоплаченнаяСумма = 0;
	КонецЕсли; 
	
	РезультирующийДокумент.Очистить();
	Макет = ПолучитьМакет("РасчетКурса");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ПредставлениеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка);
	ОбластьЗаголовок.Параметры.Документ 				= СтруктураШапкиДокумента.Ссылка;
	ОбластьЗаголовок.Параметры.СуммаДокументаУЕ			= СуммаДокументаУЕ;
	ОбластьЗаголовок.Параметры.Валюта					= Строка(ПараметрыДокумента.ВалютаВзаиморасчетов);
	ОбластьЗаголовок.Параметры.КурсДокумента			= ПараметрыДокумента.КурсВзаиморасчетов;
	РезультирующийДокумент.Вывести(ОбластьЗаголовок);
	
	Если ОбнаруженАванс тогда
		РезультирующийДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
		НомерСтроки=0;
		Для Каждого Аванс из ТаблицаРасчетов цикл
			НомерСтроки=НомерСтроки+1;
           	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки; 
			ОбластьСтрока.Параметры.ДатаДок = Аванс.ДатаДокумента;
			ОбластьСтрока.Параметры.ДокументАванса = Аванс.Документ;
			ОбластьСтрока.Параметры.ДокументАвансаСтрока = Строка(Аванс.Документ);
			ОбластьСтрока.Параметры.СуммаУЕ = Аванс.СуммаВал;
			ОбластьСтрока.Параметры.Сумма = Аванс.Сумма;
			ОбластьСтрока.Параметры.КурсДокумента = Аванс.КурсДокумента;
			РезультирующийДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	   	ОбластьИтогов = Макет.ПолучитьОбласть("ИтогоАвансов");
		ОбластьИтогов.Параметры.ВсегоУЕ = ТаблицаРасчетов.Итог("СуммаВал");
		ОбластьИтогов.Параметры.Всего = ТаблицаРасчетов.Итог("Сумма");
		РезультирующийДокумент.Вывести(ОбластьИтогов);
	Иначе
		РезультирующийДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаБезАвансов"));
	КонецЕсли;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("ИтоговаяСумма");
	ОбластьСтрока.Параметры.СуммаУЕ =	НеоплаченнаяСуммаУЕ;
	ОбластьСтрока.Параметры.Сумма   = 	НеоплаченнаяСумма;
	ОбластьСтрока.Параметры.ИтогоУЕ =   СуммаДокументаУЕ;
	ОбластьСтрока.Параметры.ИтогоСумма =НеоплаченнаяСумма + ТаблицаРасчетов.Итог("Сумма");
	ОбластьСтрока.Параметры.КурсДокумента =  ПараметрыДокумента.КурсВзаиморасчетов;
	РезультирующийДокумент.Вывести(ОбластьСтрока);
	
	Если ОбнаруженАванс тогда
		КурсРасчетный=?(СуммаДокументаУЕ = 0,0, (ТаблицаРасчетов.Итог("Сумма")+НеоплаченнаяСумма)/(СуммаДокументаУЕ));
		РасчетКурса = "( " + ТаблицаРасчетов.Итог("Сумма")+" + " +НеоплаченнаяСумма+" ) / ( " + ТаблицаРасчетов.Итог("СуммаВал")+" + " +НеоплаченнаяСуммаУЕ+" ) = "+Формат(КурсРасчетный,"ЧЦ=8; ЧДЦ=4; ЧН=Отсутствует");
		ОбластьРасчет = Макет.ПолучитьОбласть("Расчет");
		ОбластьРасчет.Параметры.РасчетКурса  = РасчетКурса;
		РезультирующийДокумент.Вывести(ОбластьРасчет);
	КонецЕсли;
	
	РезультирующийДокумент.Вывести(Макет.ПолучитьОбласть("Подписи"));

	
	РезультирующийДокумент.ОтображатьЗаголовки = ложь;
	РезультирующийДокумент.ОтображатьСетку = ложь;
	РезультирующийДокумент.ТолькоПросмотр = истина;
	РезультирующийДокумент.Автомасштаб = Истина;
	Состояние("");

	Возврат Истина;
	
КонецФункции
#КонецЕсли 
