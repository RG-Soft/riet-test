Перем ТаблицаДополнительнойИнформацииПоСФ, СоотвествиеСтрокиДопИнформацииПоСчетуФактуре;
Перем ПрефиксыРИБиОрганизации;
Перем мСведенияОбОрганизации;
Перем мСтруктураОтбораПроведен, мСтруктураОтбораСчетФактуры;


//////////////////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА
	
// Формирует табличную часть отчета
#Если КЛИЕНТ Тогда
Процедура СформироватьКнигуПокупок(Организация,НачалоПериода, КонецПериода, ЭлементыФормы) Экспорт
	
	мСведенияОбОрганизации = Неопределено;

	// Изменил РГ-Софт - Иванов Антон - 2010-03-03
	// У нас нет этой функции и РИБ не используется
	//ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	ПрефиксыРИБиОрганизации = Новый Массив();
	
	ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
	ОсновнойРаздел = ПанельРазделовКниги.Страницы.ОсновнойРаздел;
	КоличествоОтображаемыхРазделов = ПанельРазделовКниги.Страницы.Количество();
	Для НомерСтраницы = 1 по КоличествоОтображаемыхРазделов Цикл
		Если ПанельРазделовКниги.Страницы[КоличествоОтображаемыхРазделов - НомерСтраницы] = ОсновнойРаздел Тогда
			Продолжить;
		КонецЕсли; 
		ПанельРазделовКниги.Страницы.Удалить(КоличествоОтображаемыхРазделов - НомерСтраницы);
	КонецЦикла; 

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецПериода, Неопределено, Организация);
	
	Если Не (ВыводитьТолькоДопЛисты И ФормироватьДополнительныеЛисты) Тогда
		СформироватьОсновнойРаздел(Организация, НачалоПериода, КонецПериода, ЭлементыФормы, УчетнаяПолитикаНУ);
	КонецЕсли;
	
	СформироватьДополнительныеЛисты(Организация, НачалоПериода, КонецПериода, ЭлементыФормы, УчетнаяПолитикаНУ);
	
КонецПроцедуры
#КонецЕсли

// ФОРМИРОВАНИЕ ОСНОВНОГО РАЗДЕЛА

#Если КЛИЕНТ Тогда
Процедура СформироватьОсновнойРаздел(Организация, НачалоПериода, КонецПериода, ЭлементыФормы, УчетнаяПолитикаНУ);
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;	
	
	СписокСчетовФактур = Неопределено;
	Результат = ПолучитьЗаписиКнигиПокупок(Организация,НачалоПериода, КонецПериода, СписокСчетовФактур);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;

	/////////////////////////////////////////////////////////////////////////
	//// Макет книги покупок выбирается в зависимости от налогового периода
	// Изменил РГ-Софт - Иванов Антон - 2010-03-10
	// У нас нет такого параметра учетной политики
	НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
	//Если ЗначениеЗаполнено(УчетнаяПолитикаНУ) И 
	//	((УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц И КонецПериода < '20060530')
	//	ИЛИ (УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал И КонецПериода < '20060401')) Тогда
	Если НДСНалоговыйПериод = Перечисления.Периодичность.Квартал И КонецПериода < '20060401' Тогда
		Макет = ПолучитьМакет("Макет");
	ИначеЕсли КонецПериода < '20090609' Тогда
		Макет = ПолучитьМакет("Макет283");
	Иначе
		Макет = ПолучитьМакет("Макет451");
	КонецЕсли;
	// Макет книги покупок выбирается в зависимости от налогового периода
	/////////////////////////////////////////////////////////////////////////
	
	ЕстьЗаписиПоКолонке20 = Ложь;	
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод шапки книги покупок
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(КонецПериода, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Если Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент = " + КонтрагентДляОтбора;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);
	// Вывод шапки книги покупок
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод пустой книги покупок, если данных нет
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабличныйДокумент.Вывести(Секция);
		
		/////////////////////////////////////////////////////////////////////////
		// Вывод подвала
		ВывестиПодвал(ТабличныйДокумент, Макет);
		// Вывод подвала
		/////////////////////////////////////////////////////////////////////////
		
		/////////////////////////////////////////////////////////////////////////
		// Удаление колонок 20% и связанного примечания
		Если СкрытьКолонкиПоСтавке20 Тогда
			УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент);
		КонецЕсли; 
		// Удаление колонок 20% и связанного примечания
		/////////////////////////////////////////////////////////////////////////
		
		УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
		Возврат;
	КонецЕсли; 
	// Вывод пустой книги покупок, если данных нет
	/////////////////////////////////////////////////////////////////////////
	
	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	//ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(Организация, КонецПериода, СписокСчетовФактур);
	//RG Soft Михайлов Д.В. 9.12.11
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СписокСчетовФактур);
	//Конец RG Soft Михайлов Д.В. 9.12.11
	
	Секция = Макет.ПолучитьОбласть("Строка");
	Если ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
		СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
	КонецЕсли;
	
	МоментОпределенияНалоговойБазыНДС_31122005 = Неопределено;
	
	Счетчик = 0; // Счетчик строк книги покупок
	
	Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
			СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для Каждого ИтогПоНалоговыйПериод Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ЗаписьКниги Из ИтогПоНалоговыйПериод.Строки Цикл
					
					Счетчик = Счетчик + 1;
					Секция.Параметры.Ном = Счетчик;
					
					ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20);
					
					ТабличныйДокумент.Вывести(Секция);
					
				КонецЦикла; 
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для Каждого ИтогПоНалоговыйПериод Из ИтогПоОрганизации.Строки Цикл
			Для каждого ЗаписьКниги Из ИтогПоНалоговыйПериод.Строки Цикл
				
				Счетчик = Счетчик + 1;
				Секция.Параметры.Ном = Счетчик;
				
				ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20);
				
				ТабличныйДокумент.Вывести(Секция);
				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(ИтогПоОрганизации);
	
	ТабличныйДокумент.Вывести(Секция);
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод подвала
	ВывестиПодвал(ТабличныйДокумент, Макет);
	// Вывод подвала
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Повтор шапки таблицы на каждой строке
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
	// Повтор шапки таблицы на каждой строке
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Удаление колонок 20% и связанного примечания
	Если СкрытьКолонкиПоСтавке20 Тогда
		Если ЕстьЗаписиПоКолонке20 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В книге продаж организации <"+Организация+"> за период "+ПредставлениеПериода(НачалоПериода, ?(КонецПериода='00010101',КонецПериода,КонецДня(КонецПериода)))+" есть записи по ставке НДС 20%!
			|Отображение соотвествующих колонок не может быть отключено.");
		Иначе
			УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли; 
	// Удаление колонок 20% и связанного примечания
	/////////////////////////////////////////////////////////////////////////
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры
#КонецЕсли
//RG Soft Михайлов Д.В. 9.12.11
Функция ПолучитьДополнительнуюИнформациюПоСФ(СписокСчетовФактур);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", СписокСчетовФактур);
//	//Запрос.Текст =
КонецФункции
//Конец RG Soft Михайлов Д.В. 9.12.11

// Получает записи книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организаци,я по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ДеровоЗначений>   – Дерево значений
//   строки: 1 уровень - итог по организации
//   строки: 2 уровень - записи книги упорядлоченые по дате 
//
Функция ПолучитьЗаписиКнигиПокупок(Организация, НачалоПериода, КонецПериода, СписокСчетовФактур)
	
	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);

	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);

	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	 
	ВидыЦенностей_СобственныеСФ = новый массив;
	//ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	НДСЗаписиКнигиПокупокОбороты.Период КАК Период,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ КАК Контрагент,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ КАК ПродавецИНН,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ КАК ПродавецКПП,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ КАК ДатаОплаты,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА ВЫБОР
	 |						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |					КОНЕЦ
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	 |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС20,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС20,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС0,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаСовсемБезНДС,
	 |	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ КАК Продавец,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ КАК ДатаОприходования,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК НаАванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ КАК СтавкаНДС_Аванс,
	 |	НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Ваучер
	 |		ИНАЧЕ """"
	 |	КОНЕЦ КАК Ваучер,
	 |	НДСЗаписиКнигиПокупокОбороты.Поставщик.LawsonID КАК LawsonID,
	 |	НДСЗаписиКнигиПокупокОбороты.ПодразделениеОрганизации КАК НалоговаяРегистрация
	 |ПОМЕСТИТЬ ЗаписиКнигиПокупок
	 |ИЗ
	 |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			Месяц,
	 |			Организация = &Организация
	 |				И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)
	 |				И ВЫБОР
	 |					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	 |						ТОГДА Поставщик = &КонтрагентДляОтбора
	 |					ИНАЧЕ ИСТИНА
	 |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	 |	НДСЗаписиКнигиПокупокОбороты.Период,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА ВЫБОР
	 |						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |					КОНЕЦ
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |		КОНЕЦ, ДЕНЬ),
	 |	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Ваучер
	 |		ИНАЧЕ """"
	 |	КОНЕЦ,
	 |	НДСЗаписиКнигиПокупокОбороты.Поставщик.LawsonID,
	 |	НДСЗаписиКнигиПокупокОбороты.ПодразделениеОрганизации
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	СчетФактура";
	 
	// Изменил РГ-Софт - Иванов Антон - 2010-03-10
	// У нас нет такой функции
	//НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, КонецПериода);
	НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
	Если НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст,"Месяц,", "Квартал,");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	               |ИЗ
	               |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументы(Запрос);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаписиКнигиПокупок.Период КАК НалоговыйПериод,
	               |	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	               |	ЗаписиКнигиПокупок.Организация КАК Организация,
	               |	ЗаписиКнигиПокупок.Продавец КАК Продавец,
	               |	ЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	               |	ЗаписиКнигиПокупок.ПродавецИНН КАК ПродавецИНН,
	               |	ЗаписиКнигиПокупок.ПродавецКПП КАК ПродавецКПП,
	               |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	               |	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	               |	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	               |	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	               |	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
				   // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
				   // У нас нет такой ссылки
	               //|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	               |			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	               |		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	               |	КОНЕЦ КАК НомерСчетаФактуры,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
				   // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
				   // У нас нет такой ссылки
	               //|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	               |			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	               |		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	               |	КОНЕЦ КАК ДатаСчетаФактуры,
	               |	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	               |	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	               |	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	               |	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	               |	ЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	               |	КОНЕЦ КАК СуммаБезНДС20,
	               |	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	               |	КОНЕЦ КАК СуммаБезНДС18,
	               |	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	               |	КОНЕЦ КАК СуммаБезНДС10,
	               |	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	               |	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	               |	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
				   |	ЗаписиКнигиПокупок.Ваучер КАК Ваучер,
				   |	ЗаписиКнигиПокупок.НалоговаяРегистрация КАК НалоговаяРегистрация,
				   |	ЗаписиКнигиПокупок.LawsonID КАК LawsonID
	               |ИЗ
	               |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	               |			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	               |			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	               |			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	               |		ИЗ
	               |			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТаблицаСчетаФактурыДокументы.СчетФактура,
	               |			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	               |			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	               |		ПО ЗаписиКнигиПокупок.СчетФактура = Приоритеты.СчетФактура
	               |			И ЗаписиКнигиПокупок.ДоговорАванса = Приоритеты.ДоговорАванса
	               |			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	               |		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	               |			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	               |			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	               |			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НалоговыйПериод,
	               |	ПорядокОтраженияПоДатам,
	               |	СчетФактураДата,
	               |	ДатаОплаты
	               |ИТОГИ
	               |	МАКСИМУМ(Продавец),
	               |	МИНИМУМ(СчетФактураДата),
	               |	МИНИМУМ(ДатаОприходования),
	               |	МАКСИМУМ(НаАванс),
	               |	СУММА(ВсегоПокупок),
	               |	СУММА(СуммаБезНДС20),
	               |	СУММА(НДС20),
	               |	СУММА(СуммаБезНДС18),
	               |	СУММА(НДС18),
	               |	СУММА(СуммаБезНДС10),
	               |	СУММА(НДС10),
	               |	СУММА(НДС0),
	               |	СУММА(СуммаСовсемБезНДС)
	               |ПО
	               |	Организация,
	               |	ПорядокОтраженияПоДатам,
	               |	СчетФактураДокумент";
				   
	Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	Организация,", "ПО
	               |	Организация, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьЗаписиКнигиПокупок()

#Если КЛИЕНТ Тогда
Процедура ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20)

	Секция.Параметры.Заполнить(ЗаписьКниги.Строки[0]);
	Секция.Параметры.ВсегоПокупок = 	ЗаписьКниги.ВсегоПокупок;
	Секция.Параметры.СуммаБезНДС18 = 	ЗаписьКниги.СуммаБезНДС18;
	Секция.Параметры.НДС18 = 			ЗаписьКниги.НДС18;
	Секция.Параметры.СуммаБезНДС10 = 	ЗаписьКниги.СуммаБезНДС10;
	Секция.Параметры.НДС10 = 			ЗаписьКниги.НДС10;
	Секция.Параметры.НДС0 = 			ЗаписьКниги.НДС0;
	Секция.Параметры.СуммаБезНДС20 = 	ЗаписьКниги.СуммаБезНДС20;
	Секция.Параметры.НДС20 = 			ЗаписьКниги.НДС20;
	Секция.Параметры.СуммаСовсемБезНДС= ЗаписьКниги.СуммаСовсемБезНДС;
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	КонецЕсли;
	
	Если Не ЕстьЗаписиПоКолонке20 И Не (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
	
	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], Секция);
	Секция.Параметры.ДатаНомер = ДатаНомер;

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	СуммаСНДС = 0;
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(Не ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		//flp
		//Если ЗначениеЗаполнено(СтрокаЗаписи.СчетФактура) Тогда
		//	СтрокаДополнительнойИнформации = СоотвествиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаЗаписи.СчетФактура.УникальныйИдентификатор())];
		//	Если Не СтрокаДополнительнойИнформации = Неопределено 
		//		И Не СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
		//		СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		//	Иначе
		//		СтрокаДополнительнойИнформации = Неопределено;
		//	КонецЕсли; 
		//Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		//КонецЕсли;
		
		Если Не СтрокаДополнительнойИнформации = Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительнойИнформации.СуммаСНДС) Тогда
				СуммаСНДС = СуммаСНДС + СтрокаДополнительнойИнформации.СуммаСНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
																   
	/////////////////////////////////////////////////////////////////////////
	// По счетам-фактурам до 01.01.2006 в некоторых случаях устанавливается признак "Частичная оплата" 
	Если не ЗаписьКниги.НаАванс 
		и ЗаписьКниги.СчетФактураДата < '20060101' 
		и не СтрокаДополнительнойИнформации = Неопределено
		и не ПустаяСтрока(ТекстОплаты)
		и ЗаписьКниги.ВсегоПокупок > 0
		и ЗаписьКниги.ВсегоПокупок < СуммаСНДС 
		Тогда
		ТекстОплаты = ТекстОплаты + " частичная оплата";
	КонецЕсли; 
	// По счетам-фактурам до 01.01.2006 в некоторых случаях устанавливается признак "Частичная оплата" 
	/////////////////////////////////////////////////////////////////////////
	
	Секция.Параметры.ДатаОплаты = ТекстОплаты;
	Секция.Параметры.ДатаОприходования = ТекстДатаОприходования;
	Секция.Параметры.НомерГТД = ТекстНомерГТД;
	
	ПроставитьпрочеркиВПустыеПоля(Секция);

КонецПроцедуры
#КонецЕсли

// ФОРМИРОВАНИЕ ДОП. ЛИСТА

#Если КЛИЕНТ Тогда	
Процедура СформироватьДополнительныеЛисты(Организация, НачалоПериода, КонецПериода, ЭлементыФормы, УчетнаяПолитикаНУ = Неопределено)
	Перем Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента;
	Перем ТабличныйДокумент;
	
	// Получение налогового периода формирования отчета
	// Изменил РГ-Софт - Иванов Антон - 2010-03-10
	// У нас нет такого параметра учетной политики
	//НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, КонецПериода);
	НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
	
	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистов(Организация, НачалоПериода, КонецПериода, НДСНалоговыйПериод);
	
	СтрокаСообщения = "";
	Если ДополнительныеЛистыЗаТекущийПериод Или Не ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
					|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
					|Для этого необходимо взвести флаг ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""", СтатусСообщения.Информация);
		КонецЕсли;
		Если ФормироватьДополнительныеЛисты И Не СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
					|Построение дополнительных листов за текущий налоговый период не требуется", СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ДополнительныеЛистыЗаТекущийПериод Или Не ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			Сообщить("В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
					|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
					|Для этого необходимо взвести флаг ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!", СтатусСообщения.Информация);
		КонецЕсли;
		Если ФормироватьДополнительныеЛисты И Не СтруктураПараметров.КорректируемыйПериод Тогда
			Сообщить("В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
					|Построение дополнительных листов за корректируемый налоговый период не требуется", СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Если флаг ФормироватьДополнительныеЛисты не установлен, продолжать не надо
	// При этом, если доп. листы есть, об этом было сообщено пользователю
	Если Не ФормироватьДополнительныеЛисты Тогда
		Возврат;
	КонецЕсли;
	
	СписокСчетовФактур = Неопределено;
	// Получение записей дополнительных листов
	Результат = ПолучитьЗаписиДополнительныхЛистов(Организация, НачалоПериода, КонецПериода, НДСНалоговыйПериод, СписокСчетовФактур);
	
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли; 
	
	НомерОтображаемогоПериода = 0;
	
	Макет = ПолучитьМакет("ДополнительныйЛист");
	Секция = Макет.ПолучитьОбласть("Строка");
	СтрокаИтого = Макет.ПолучитьОбласть("Итого");
	СтрокаВсего = Макет.ПолучитьОбласть("Всего");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	Если ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
		СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
	КонецЕсли;
	
	Если СкрытьКолонкиПоСтавке20 Тогда
	    ТаблицаОбластейДляКорректировки = Новый ТаблицаЗначений();
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("НадписьПриложение");
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("НадписьПриложениеБез20Процентов");
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("Подпись20Процентов");
		ТаблицаОбластейДляКорректировки.Колонки.Добавить("КонецЛистаБезПодписи20Процентов");
	КонецЕсли; 
	
	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(Организация, КонецПериода, СписокСчетовФактур, Истина);
	
	Для Каждого ИтогПоПериодам ИЗ ДеревоЗаписей.Строки Цикл;
		
		НомерЛиста = 0;
		
		/////////////////////////////////////////////////////////////////////////
		// Добавление новой страницы панели разделов для вывода доп. листа
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
				
		ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
		НоваяСтраница = ПанельРазделовКниги.Страницы.Добавить("ДопЛист"+НомерОтображаемогоПериода,"Доп.листы за "+НалоговыйПериод);
		ПанельРазделовКниги.ТекущаяСтраница = НоваяСтраница;
		ТабличныйДокумент = ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"),"ТД_ДопЛист"+НомерОтображаемогоПериода, Истина,ПанельРазделовКниги);
		ТабличныйДокумент.Лево = ЭлементыФормы.ТабличныйДокумент.Лево;
		ТабличныйДокумент.Верх = ЭлементыФормы.ТабличныйДокумент.Верх;
		ТабличныйДокумент.Высота = ЭлементыФормы.ТабличныйДокумент.Высота;
		ТабличныйДокумент.Ширина = ЭлементыФормы.ТабличныйДокумент.Ширина;
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Низ,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.УстановитьПривязку(ГраницаЭлементаУправления.Низ,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Право,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.УстановитьПривязку(ГраницаЭлементаУправления.Право,Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента);
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		Если СкрытьКолонкиПоСтавке20 Тогда
		    ТаблицаОбластейДляКорректировки.Очистить();
		КонецЕсли;
		// Добавление новой страницы панели разделов для вывода доп. листа
		/////////////////////////////////////////////////////////////////////////
		МожноСкрытьКолонкиПоСтавке20 = СкрытьКолонкиПоСтавке20;

		Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодам.Строки Цикл;
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабличныйДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;
				
			ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, ИтогПоПериодамКорректировки, НомерЛиста); //НачалоПериода, КонецПериода, НДСНалоговыйПериод,

			ИтогЗаПериод = ПолучитьИтогиЗаПериод(Организация, ИтогПоПериодамКорректировки.НалоговыйПериод, КонецДня(ИтогПоПериодамКорректировки.КонецНалоговогоПериода),ИтогПоПериодамКорректировки.ДатаОформления);
			Если Не ИтогЗаПериод.Пустой() Тогда
				ИтогЗаПериод = ИтогЗаПериод.Выгрузить()[0];
			Иначе
				ИтогЗаПериод = Новый Структура;
				ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("НДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			КонецЕсли;
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
			
			ЕстьЗаписиПоКолонке20 = не (ИтогЗаПериод.СуммаБезНДС20 = 0 и ИтогЗаПериод.НДС20 = 0);
			ТабличныйДокумент.Вывести(СтрокаИтого);

			Счетчик = 0;

			Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
				Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
					СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
					ТабличныйДокумент.Вывести(СекцияКонтрагент);
					ТабличныйДокумент.НачатьГруппуСтрок();
					Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
						Для Каждого РазделениеПоСтавкамДляАванса Из ЗаписьПоСФ.Строки Цикл
							Для Каждого ЗаписьКниги Из РазделениеПоСтавкамДляАванса.Строки Цикл
								
								Счетчик = Счетчик + 1;
								Секция.Параметры.Ном = Счетчик;
								
								ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20);
								
								ТабличныйДокумент.Вывести(Секция);

								ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
								ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
								ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
								ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
								ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
								ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
								ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
								ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
								ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
								
							КонецЦикла; 
						КонецЦикла; 
					КонецЦикла; 
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
					ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
				КонецЦикла;
			Иначе
				Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
					Для Каждого РазделениеПоСтавкамДляАванса Из ЗаписьПоСФ.Строки Цикл
						Для Каждого ЗаписьКниги Из РазделениеПоСтавкамДляАванса.Строки Цикл
							
							Счетчик = Счетчик + 1;
							Секция.Параметры.Ном = Счетчик;
							
							ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20);
							
							ТабличныйДокумент.Вывести(Секция);

							ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
							ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
							ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
							ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
							ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
							ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
							ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
							ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
							ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЕсли;
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабличныйДокумент.Вывести(СтрокаВсего);
					
			/////////////////////////////////////////////////////////////////////////
			// Вывод подвала
			ВывестиПодвал(ТабличныйДокумент, Макет);
			// Вывод подвала
			/////////////////////////////////////////////////////////////////////////
			
			МожноСкрытьКолонкиПоСтавке20 = МожноСкрытьКолонкиПоСтавке20 и не ЕстьЗаписиПоКолонке20;

			Если МожноСкрытьКолонкиПоСтавке20 тогда
				МакетТекущегоЛиста = ТаблицаОбластейДляКорректировки.Добавить();
				МакетТекущегоЛиста.НадписьПриложение = ТабличныйДокумент.Область("НадписьПриложение");
				МакетТекущегоЛиста.НадписьПриложениеБез20Процентов = ТабличныйДокумент.Область("НадписьПриложениеБез20Процентов");
				МакетТекущегоЛиста.Подпись20Процентов = ТабличныйДокумент.Область("Подпись20Процентов");
				МакетТекущегоЛиста.КонецЛистаБезПодписи20Процентов = ТабличныйДокумент.Область(МакетТекущегоЛиста.Подпись20Процентов.Верх,,МакетТекущегоЛиста.Подпись20Процентов.Верх); 
			КонецЕсли;
			
		КонецЦикла; 
		
		Если СкрытьКолонкиПоСтавке20 Тогда
			Если не МожноСкрытьКолонкиПоСтавке20 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В дополнительном листе книге покупок организации <"+Организация+"> за период "+ПредставлениеПериода(ИтогПоПериодамКорректировки.НалоговыйПериод, КонецДня(ИтогПоПериодамКорректировки.КонецНалоговогоПериода))+" есть записи по ставке НДС 20%!
				|Отображение соотвествующих колонок не может быть отключено.");
			Иначе
				ТекстНадписьПриложение = ТабличныйДокумент.Область("НадписьПриложение").Текст;
				Для каждого ОбластиДляКорректировки Из ТаблицаОбластейДляКорректировки Цикл
					ОбластиДляКорректировки.НадписьПриложение.Очистить();
					ОбластиДляКорректировки.НадписьПриложение.Разъединить();
					ОбластиДляКорректировки.НадписьПриложениеБез20Процентов.Объединить();
					ОбластиДляКорректировки.НадписьПриложениеБез20Процентов.Текст = ТекстНадписьПриложение;
					
					ТабличныйДокумент.УдалитьОбласть(ОбластиДляКорректировки.Подпись20Процентов);
					
					ОбластиДляКорректировки.КонецЛистаБезПодписи20Процентов.КонецСтраницы = Истина;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЦикла; 	
				
				Область20Процентов = ТабличныйДокумент.Область("Заголовок20Процентов");
				ЛеваяКолонка = Область20Процентов.Лево;
				ПраваяКолонка = Область20Процентов.Право;
				ОбластьКУдалению = ТабличныйДокумент.Область(,ЛеваяКолонка,,ПраваяКолонка);
				ТабличныйДокумент.УдалитьОбласть(ОбластьКУдалению,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
		КонецЕсли; 
			
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

#Если КЛИЕНТ Тогда
Процедура ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, ЕстьЗаписиПоКолонке20)
	
	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], Секция);

	Секция.Параметры.Заполнить(ЗаписьКниги);

	Секция.Параметры.Заполнить(ЗаписьКниги.Строки[0]);
	Секция.Параметры.ВсегоПокупок = 	ЗаписьКниги.ВсегоПокупок;
	Секция.Параметры.СуммаБезНДС18 = 	ЗаписьКниги.СуммаБезНДС18;
	Секция.Параметры.НДС18 = 			ЗаписьКниги.НДС18;
	Секция.Параметры.СуммаБезНДС10 = 	ЗаписьКниги.СуммаБезНДС10;
	Секция.Параметры.НДС10 = 			ЗаписьКниги.НДС10;
	Секция.Параметры.НДС0 = 			ЗаписьКниги.НДС0;
	Секция.Параметры.СуммаБезНДС20 = 	ЗаписьКниги.СуммаБезНДС20;
	Секция.Параметры.НДС20 = 			ЗаписьКниги.НДС20;
	Секция.Параметры.СуммаСовсемБезНДС= ЗаписьКниги.СуммаСовсемБезНДС;
	Если ЗначениеЗаполнено(ЗаписьКниги.Строки[0].СчетФактураДокумент) Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.Строки[0].СчетФактураДокумент;
	КонецЕсли;

	Если не ЕстьЗаписиПоКолонке20 и не (ЗаписьКниги.СуммаБезНДС20 = 0 и ЗаписьКниги.НДС20 = 0) Тогда
		ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 

	Секция.Параметры.ДатаНомер = ДатаНомер;
	Секция.Параметры.НомерГТД = ?(СтрокаДополнительнойИнформации = Неопределено, "", СтрокаДополнительнойИнформации.ГТДиСтрана);

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";
	
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(Не ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.СчетФактура) Тогда
			//flp
			//СтрокаДополнительнойИнформации = СоотвествиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаЗаписи.СчетФактура.УникальныйИдентификатор())];
			//Если Не СтрокаДополнительнойИнформации = Неопределено 
			//	И Не СтрокаДополнительнойИнформации.Строки.Количество() = 0 Тогда
			//	СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
			//Иначе
				СтрокаДополнительнойИнформации = Неопределено;
			//КонецЕсли; 
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если Не СтрокаДополнительнойИнформации = Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;

			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Секция.Параметры.ДатаОплаты = ТекстОплаты;
	Секция.Параметры.ДатаОприходования = ТекстДатаОприходования;
	Секция.Параметры.НомерГТД = ТекстНомерГТД;

	ПроставитьпрочеркиВПустыеПоля(Секция);
						
КонецПроцедуры
#КонецЕсли

#Если КЛИЕНТ Тогда
Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, ЗаписьКниги, НомерЛиста)
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	Секция = Макет.ПолучитьОбласть("Шапка");
	Если ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерЛиста;
	КонецЕсли;
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(ЗаписьКниги.НалоговыйПериод, КонецДня(ЗаписьКниги.КонецНалоговогоПериода), "ФП = Истина");
	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(ЗаписьКниги.ДатаОформления, "ДФ=dd.MM.yyyy");
	Если Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент = " + КонтрагентДляОтбора;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры
#КонецЕсли

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистов(Организация, НачалоПериода, КонецПериода, НДСНалоговыйПериод)
	
	СтруктураПараметров = Новый Структура("ТекущийПериод, КорректируемыйПериод");
	СтруктураПараметров.ТекущийПериод = Ложь;
	СтруктураПараметров.КорректируемыйПериод = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДопЛисты,
		|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация = &Организация
		|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПокупокОбороты.Период
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&НачалоПериода
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			,
		|			День,
		|			Организация = &Организация
		|				И ЗаписьДополнительногоЛиста = ИСТИНА
		|				И КорректируемыйПериод >= &НачалоПериода
		|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.Период";
				   
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает записи книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организаци,я по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ДеровоЗначений>   – Дерево значений
//   строки: 1 уровень - итог по организации
//   строки: 2 уровень - записи книги упорядлоченые по дате 
//
Функция ПолучитьЗаписиДополнительныхЛистов(Организация, НачалоПериода, КонецПериода, НДСНалоговыйПериод, СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("НалоговыйПериодМесяц", Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("НалоговыйПериодКвартал", Перечисления.Периодичность.Квартал);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);

	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);

	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	 
	ВидыЦенностей_СобственныеСФ = новый массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ КАК Контрагент,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	  // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ КАК ПродавецИНН,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	  // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ КАК ПродавецКПП,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такой ссылки в регистре
	 //|			ТОГДА ВЫБОР
	 //|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 //|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 //|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 //|				КОНЕЦ
	 |		ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата 
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ КАК ДатаОплаты,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |			ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	 |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС20,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС20,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС0,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаСовсемБезНДС,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата КАК СчетФактураДата,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 //|			ТОГДА ВЫБОР
	 //|					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 //|						КОГДА ЛОЖЬ
	 //|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 //|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 //|				КОНЕЦ
	 |		ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ КАК Продавец,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет таких ссылок
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 //|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 //|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ КАК ДатаОприходования,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК НаАванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ КАК СтавкаНДС_Аванс,
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас договора нет
	 //|	ВЫБОР
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 //|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 //|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 //|	КОНЕЦ КАК ДоговорАванса,
	 |	НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
	 |	ВЫБОР
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такого регистра
	 //|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	 |		КОГДА ЕСТЬNULL(NULL, ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	 |						ТОГДА &НалоговыйПериодМесяц
	 |					ИНАЧЕ &НалоговыйПериодКвартал
	 |				КОНЕЦ) = &НалоговыйПериодКвартал
	 |			ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	 |		ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, МЕСЯЦ)
	 |	КОНЕЦ КАК НалоговыйПериод,
	 |	ВЫБОР
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такого регистра
	 //|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	 |		КОГДА ЕСТЬNULL(NULL, ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	 |						ТОГДА &НалоговыйПериодМесяц
	 |					ИНАЧЕ &НалоговыйПериодКвартал
	 |				КОНЕЦ) = &НалоговыйПериодКвартал
	 |			ТОГДА КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	 |		ИНАЧЕ КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, МЕСЯЦ)
	 |	КОНЕЦ КАК КонецНалоговогоПериода,
	 |	НДСЗаписиКнигиПокупокОбороты.Период КАК ДатаОформления
	 |ПОМЕСТИТЬ ЗаписиКнигиПокупок
	 |ИЗ
	 |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			День,
	 |			Организация = &Организация
	 |				И ЗаписьДополнительногоЛиста = ИСТИНА
	 |				И ВЫБОР
	 |					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	 |						ТОГДА Поставщик = &КонтрагентДляОтбора
	 |					ИНАЧЕ ИСТИНА
	 |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такого регистра
	 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика
	 //|		ПО (УчетнаяПолитика.Организация = НДСЗаписиКнигиПокупокОбороты.Организация)
	 //|			И (УчетнаяПолитика.Период В
	 //|				(ВЫБРАТЬ
	 //|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	 //|				ИЗ
	 //|					РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика
	 //|				ГДЕ
	 //|					НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод >= УчетнаяПолитика.Период
	 //|					И УчетнаяПолитика.Организация = НДСЗаписиКнигиПокупокОбороты.Организация))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	НДСЗаписиКнигиПокупокОбороты.Событие,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата,
	 |	НДСЗаписиКнигиПокупокОбороты.Период,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такой ссылки
	 //|			ТОГДА ВЫБОР
	 //|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 //|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 //|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 //|				КОНЕЦ
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |			ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		КОНЕЦ, ДЕНЬ),
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет таких ссылок
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 //|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 //|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ,
	 |	ВЫБОР
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такого регистра
	 //|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	 |		КОГДА ЕСТЬNULL(NULL, ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	 |						ТОГДА &НалоговыйПериодМесяц
	 |					ИНАЧЕ &НалоговыйПериодКвартал
	 |				КОНЕЦ) = &НалоговыйПериодКвартал
	 |			ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	 |		ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, МЕСЯЦ)
	 |	КОНЕЦ,
	 |	ВЫБОР
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас нет такого регистра
	 //|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	 |		КОГДА ЕСТЬNULL(NULL, ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	 |						ТОГДА &НалоговыйПериодМесяц
	 |					ИНАЧЕ &НалоговыйПериодКвартал
	 |				КОНЕЦ) = &НалоговыйПериодКвартал
	 |			ТОГДА КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	 |		ИНАЧЕ КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, МЕСЯЦ)
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 // У нас такого документа не может быть в регистре
	 //|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 //|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 //|			ТОГДА ВЫБОР
	 //|					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 //|						КОГДА ЛОЖЬ
	 //|						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 //|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 //|				КОНЕЦ
	 |		ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ,
	 // Изменил РГ-Софт - Иванов Антон - 2010-03-10
	 //|	ВЫБОР
	 //|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 //|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 //|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 //|	КОНЕЦ
	 |	НЕОПРЕДЕЛЕНО";
	 
	 
	Если ДополнительныеЛистыЗаТекущийПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И КорректируемыйПериод >= &НачалоПериода 
								|И КорректируемыйПериод <= &КонецПериода");
	КонецЕсли;

	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	               |ИЗ
	               |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументы(Запрос);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаписиКнигиПокупок.НалоговыйПериод КАК НалоговыйПериод,
	               |	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	               |	ЗаписиКнигиПокупок.Организация КАК Организация,
	               |	ЗаписиКнигиПокупок.Продавец КАК Продавец,
	               |	ЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	               |	ЗаписиКнигиПокупок.ПродавецИНН КАК ПродавецИНН,
	               |	ЗаписиКнигиПокупок.ПродавецКПП КАК ПродавецКПП,
	               |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	               |	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	               |	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	               |	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	               |	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
				   // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
				   // У нас нет такой ссылки
	               //|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	               |			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	               |		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	               |	КОНЕЦ КАК НомерСчетаФактуры,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
				   // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
				   // У нас нет такой ссылки
				   //|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	               |			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	               |		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	               |	КОНЕЦ КАК ДатаСчетаФактуры,
	               |	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	               |	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	               |	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	               |	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	               |	ЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	               |	КОНЕЦ КАК СуммаБезНДС20,
	               |	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	               |	КОНЕЦ КАК СуммаБезНДС18,
	               |	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	               |	ВЫБОР
	               |		КОГДА ЗаписиКнигиПокупок.НаАванс
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	               |	КОНЕЦ КАК СуммаБезНДС10,
	               |	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	               |	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	               |	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	               |	ЗаписиКнигиПокупок.ДатаОформления КАК ДатаОформления,
	               |	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода
	               |ИЗ
	               |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	               |			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	               |			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	               |			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	               |		ИЗ
	               |			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТаблицаСчетаФактурыДокументы.СчетФактура,
	               |			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	               |			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	               |			ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули) КАК Приоритеты
	               |		ПО ЗаписиКнигиПокупок.СчетФактура = Приоритеты.СчетФактура
	               |			И ЗаписиКнигиПокупок.ДоговорАванса = Приоритеты.ДоговорАванса
	               |			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	               |		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	               |			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	               |			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	               |			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,
	               |	ПорядокОтраженияПоДатам,
	               |	СчетФактураДата,
	               |	ДатаОплаты
	               |ИТОГИ
	               |	МАКСИМУМ(Продавец),
	               |	МИНИМУМ(СчетФактураДата),
	               |	МИНИМУМ(ДатаОприходования),
	               |	МАКСИМУМ(НаАванс),
	               |	СУММА(ВсегоПокупок),
	               |	СУММА(СуммаБезНДС20),
	               |	СУММА(НДС20),
	               |	СУММА(СуммаБезНДС18),
	               |	СУММА(НДС18),
	               |	СУММА(СуммаБезНДС10),
	               |	СУММА(НДС10),
	               |	СУММА(НДС0),
	               |	СУММА(СуммаСовсемБезНДС),
	               |	МАКСИМУМ(КонецНалоговогоПериода)
	               |ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,
	               |	СчетФактураДокумент,
	               |	СтавкаНДС_Аванс,
	               |	ДоговорАванса";
	
	Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,", "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьЗаписиКнигиПокупок()

// Получает итоги книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организаци,я по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица значений
//
Функция ПолучитьИтогиЗаПериод(Организация, НачалоПериода, КонецПериода, ДатаФормированияДопЛиста)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС20), 0) КАК СуммаБезНДС20,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС20), 0) КАК НДС20,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	 |	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС20,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС20,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС18,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС18,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаБезНДС10,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС10,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК НДС0,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ КАК СуммаСовсемБезНДС
	 |	ИЗ
	 |		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			Период,
	 |			Организация = &Организация
	 |			    И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)) КАК НДСЗаписиКнигиПокупокОбороты
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ,
	 |		ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ
	 |	ИЗ
	 |		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&МоментФормированияДопЛиста,
	 |			Период,
	 |			Организация = &Организация
	 |			    И ЗаписьДополнительногоЛиста = ИСТИНА
	 |			    И КорректируемыйПериод >= &НачалоПериода
	 |			    И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";
	 
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста",Новый Граница(НачалоДня(ДатаФормированияДопЛиста),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"	, Организация);

	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);

	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	 
	ВидыЦенностей_Авансы = новый массив;
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Авансы", ВидыЦенностей_Авансы);
	
	//НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, КонецПериода);
	//Если НДСНалоговыйПериод = Перечисления.Периодичность.Квартал Тогда
	    Запрос.Текст = СтрЗаменить(Запрос.Текст,"Месяц,", "Квартал,");
	//КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// ВЫВОД ПОДВАЛА

#Если КЛИЕНТ Тогда
Процедура ВывестиПодвал(ТабличныйДокумент, Макет)
	
	Если мСведенияОбОрганизации = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("ФИОБух");
		СписокПоказателей.Добавить("ФИО");
		мСведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
		СведенияОЮрФизЛице  = КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, ТекущаяДата());
		мСведенияОбОрганизации.Вставить("Свидетельство", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,"));
		
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяБух = мСведенияОбОрганизации.ФИОБух;
	Секция.Параметры.ИмяОрг = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), мСведенияОбОрганизации.ФИО, "");
	Секция.Параметры.Свидетельство = мСведенияОбОрганизации.Свидетельство;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры //ВывестиПодвал()
#КонецЕсли

#Если КЛИЕНТ Тогда
Процедура УдалитьКолонки20ПроцентовОсновнойРаздел(ТабличныйДокумент)
	
	ТекстНадписьПриложение = ТабличныйДокумент.Область("НадписьПриложение").Текст;
	ТабличныйДокумент.Область("НадписьПриложение").Очистить();
	ТабличныйДокумент.Область("НадписьПриложение").Разъединить();
	ТабличныйДокумент.Область("НадписьПриложениеБез20Процентов").Объединить();
	ТабличныйДокумент.Область("НадписьПриложениеБез20Процентов").Текст = ТекстНадписьПриложение;
			
	Область20Процентов = ТабличныйДокумент.Область("Заголовок20Процентов");
	ЛеваяКолонка = Область20Процентов.Лево;
	ПраваяКолонка = Область20Процентов.Право;
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(,ЛеваяКолонка,,ПраваяКолонка),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("Подпись20Процентов"));
	
КонецПроцедуры // УдалитьКолонки20ПроцентовОсновнойРаздел()
#КонецЕсли 


/////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

// Процедура вызывается из тела процедуры "СформироватьКнигуПокупок". 
// Возвращает дату и номер счета-фактуры
// Определяет строку доп. информации, присваивает значение переменной СтрокаДополнительнойИнформации
#Если КЛИЕНТ Тогда
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, Секция = Неопределено)
		
	Если Не ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;					

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Или Не ЗаписьКниги.УдалятьЛидирующиеНули Тогда
			// Не требуется удаление префиксов в номере документа
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		Иначе
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Новый Структура("Дата, Номер, Организация", ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, Организация));//, ПрефиксыРИБиОрганизации);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" + ЗаписьКниги.СчетФактура.НомерВходящегоДокумента;
	//ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
	//	ДатаНомер = "ГТД №" + СокрЛП(ЗаписьКниги.СчетФактура.НомерГТД);
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации);
	Иначе
		Если ЗаписьКниги.НаАванс Тогда
			мСтруктураОтбораСчетФактуры.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
		Иначе
			мСтруктураОтбораСчетФактуры.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		КонецЕсли; 
		
		Если (ЗаписьКниги.НаАванс)
			И ЗначениеЗаполнено(ЗаписьКниги.СтавкаНДС_Аванс) Тогда
			мСтруктураОтбораСчетФактуры.Вставить("СтавкаНДС",ЗаписьКниги.СтавкаНДС_Аванс);
		ИначеЕсли мСтруктураОтбораСчетФактуры.Свойство("СтавкаНДС") Тогда
			мСтруктураОтбораСчетФактуры.Удалить("СтавкаНДС");
		КонецЕсли; 
		
		Если (ЗаписьКниги.НаАванс
			И ЗначениеЗаполнено(ЗаписьКниги.ДоговорАванса)) Тогда
			мСтруктураОтбораСчетФактуры.Вставить("ДоговорКонтрагента",ЗаписьКниги.ДоговорАванса);
		ИначеЕсли мСтруктураОтбораСчетФактуры.Свойство("ДоговорКонтрагента") Тогда
			мСтруктураОтбораСчетФактуры.Удалить("ДоговорКонтрагента");
		КонецЕсли; 
		
		Документ = УчетНДС.НайтиПодчиненныйСчетФактуру(ЗаписьКниги.СчетФактура, "СчетФактураВыданный", мСтруктураОтбораСчетФактуры);
			
		Если не Документ = Неопределено Тогда
			ДатаНомер = "" + Формат(Документ.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Документ,ПрефиксыРИБиОрганизации);
			
			Если (ЗаписьКниги.НаАванс) и не Секция = Неопределено Тогда
				Секция.Параметры.СчетФактура = Документ;
			КонецЕсли; 
		Иначе
			Документ = УчетНДС.НайтиПодчиненныйСчетФактуру(ЗаписьКниги.СчетФактура, "СчетФактураПолученный", мСтруктураОтбораПроведен);
			Если не Документ = Неопределено Тогда
				ДатаНомер = "" + Формат(Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" + Документ.НомерВходящегоДокумента;
			Иначе
				ДатаНомер = "";
			КонецЕсли
		КонецЕсли;
			
	КонецЕсли;

	Возврат ДатаНомер;
		
КонецФункции
#КонецЕсли

Процедура ПолучитьСчетаФактурыДокументы(Запрос)
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	// У нас нет такой функции
	//МассивДокументовСДаннымиСФ = УчетНДС.ПолучитьИменаДокументовСДаннымиСФ();
	//МассивДокументовСДаннымиСФ = Новый Массив;
	//
	//ТекстЗапросаПоДокументамСДаннымиСФ = "";
	//Если МассивДокументовСДаннымиСФ.Количество() <> 0 Тогда
	//	
	//	Для Каждого ИмяДокумента Из МассивДокументовСДаннымиСФ Цикл
	//		ТекстЗапросаПоДокументамСДаннымиСФ = ТекстЗапросаПоДокументамСДаннымиСФ + " ОБЪЕДИНИТЬ ВСЕ 
	//			   |		ВЫБРАТЬ
	//			   |			ДокументСДаннымиСФ.Ссылка,
	//			   |			ДокументСДаннымиСФ.НомерВходящегоСчетаФактуры,
	//			   |			ДокументСДаннымиСФ.ДатаВходящегоСчетаФактуры,
	//			   |			ДокументСДаннымиСФ.Ссылка,
	//			   |			ЛОЖЬ,
	//			   |			НЕОПРЕДЕЛЕНО,
	//			   |			НЕОПРЕДЕЛЕНО,
	//			   |			1,
	//			   |			ЛОЖЬ
	//			   |		ИЗ
	//			   |			Документ." + ИмяДокумента + " КАК ДокументСДаннымиСФ
	//			   |		ГДЕ
	//			   |			ДокументСДаннымиСФ.ПредъявленСчетФактура 
	//			   |			И ДокументСДаннымиСФ.Проведен
	//			   |			И (НЕ ДокументСДаннымиСФ.ПометкаУдаления)
	//			   |			И ДокументСДаннымиСФ.Организация = &Организация";
	//	КонецЦикла;
	//	
	//КонецЕсли;
				   
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетаФактурыДокументы.СчетФактура,
	               |	СчетаФактурыДокументы.ДатаСчетаФактуры,
	               |	СчетаФактурыДокументы.НомерСчетаФактуры,
	               |	СчетаФактурыДокументы.СчетФактураДокумент,
	               |	СчетаФактурыДокументы.ДоговорАванса,
	               |	СчетаФактурыДокументы.СтавкаНДСАванса,
	               |	СчетаФактурыДокументы.Приоритет,
	               |	СчетаФактурыДокументы.УдалятьЛидирующиеНули
	               |ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	               |ИЗ
	               |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ
				   // Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
				   //|		(ВЫБРАТЬ
				   //|			СчетФактураПолученный.ДокументОснование КАК СчетФактура,
				   //|			СчетФактураПолученный.Ссылка.НомерВходящегоДокумента КАК НомерСчетаФактуры,
				   //|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
				   //|			СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
				   //|			СчетФактураПолученный.Ссылка.НаАванс КАК НаАванс,
				   //|			ВЫБОР
				   //|				КОГДА СчетФактураПолученный.Ссылка.НаАванс = ИСТИНА
				   //|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
				   //|				ИНАЧЕ НЕОПРЕДЕЛЕНО
				   //|			КОНЕЦ КАК СтавкаНДСАванса,
				   //|			ВЫБОР
				   //|				КОГДА СчетФактураПолученный.Ссылка.НаАванс = ИСТИНА
				   //|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
				   //|				ИНАЧЕ НЕОПРЕДЕЛЕНО
				   //|			КОНЕЦ КАК ДоговорАванса,
				   //|			2 КАК Приоритет,
				   //|			ЛОЖЬ КАК УдалятьЛидирующиеНули
				   //|		ИЗ
				   //|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
				   //|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
				   //|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
				   //|		ГДЕ
				   //|			СчетФактураПолученный.Ссылка.Проведен
				   //|			И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
				   //|			И СчетФактураПолученный.Ссылка.Организация = &Организация
				   //|		
				   //|		ОБЪЕДИНИТЬ ВСЕ
				   //|		
				   //|		ВЫБРАТЬ
				   //|			СчетФактураВыданный.ДокументОснование,
				   //|			СчетФактураВыданный.Ссылка.Номер,
				   //|			СчетФактураВыданный.Ссылка.Дата,
				   //|			СчетФактураВыданный.Ссылка,
				   //|			ВЫБОР
				   //|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
				   //|					ТОГДА ИСТИНА
				   //|				ИНАЧЕ ЛОЖЬ
				   //|			КОНЕЦ,
				   //|			ВЫБОР
				   //|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
				   //|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
				   //|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
				   //|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
				   //|				ИНАЧЕ НЕОПРЕДЕЛЕНО
				   //|			КОНЕЦ,
				   //|			ВЫБОР
				   //|				КОГДА ВЫБОР
				   //|						КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
				   //|							ТОГДА ИСТИНА
				   //|						ИНАЧЕ ЛОЖЬ
				   //|					КОНЕЦ
				   //|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
				   //|				ИНАЧЕ НЕОПРЕДЕЛЕНО
				   //|			КОНЕЦ,
				   //|			3,
				   //|			ИСТИНА
				   //|		ИЗ
				   //|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
				   //|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
				   //|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
				   //|		ГДЕ
				   //|			СчетФактураВыданный.Ссылка.Проведен
				   //|			И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
				   //|			И СчетФактураВыданный.Ссылка.Организация = &Организация
				   //|		
				   //|		ОБЪЕДИНИТЬ ВСЕ
				   //|		
				   //|		ВЫБРАТЬ
				   //|			ГТДИмпорт.Ссылка,
				   //|			ГТДИмпорт.НомерГТД,
				   //|			ГТДИмпорт.Дата,
				   //|			ГТДИмпорт.Ссылка,
				   //|			ЛОЖЬ,
				   //|			НЕОПРЕДЕЛЕНО,
				   //|			НЕОПРЕДЕЛЕНО,
				   //|			4,
				   //|			ИСТИНА
				   //|		ИЗ
				   //|			Документ.ГТДИмпорт КАК ГТДИмпорт
				   //|		ГДЕ
				   //|			ГТДИмпорт.Проведен
				   //|			И (НЕ ГТДИмпорт.ПометкаУдаления)
				   //|			И ГТДИмпорт.Организация = &Организация
				   |	(ВЫБРАТЬ
				   |		СчетаКнигиПокупок.Ссылка КАК СчетФактура,
				   |		СчетаКнигиПокупок.НомерВходящегоДокумента КАК НомерСчетаФактуры,
				   |		СчетаКнигиПокупок.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
				   |		СчетаКнигиПокупок.Ссылка КАК СчетФактураДокумент,
				   |		ЛОЖЬ КАК НаАванс,
				   |		НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
				   |		НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
				   |		1 КАК Приоритет,
				   |		ИСТИНА КАК УдалятьЛидирующиеНули
				   |	ИЗ Документ.СчетКнигиПокупок КАК СчетаКнигиПокупок
				   |	) КАК СчетаФактурыДокументы
	               |		ПО ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	               |			И ((НЕ ЗаписиКнигиПокупок.НаАванс)
	               |				ИЛИ СчетаФактурыДокументы.НаАванс
	               |					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	               |					И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса)";
				   
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-10
	//Если ТекстЗапросаПоДокументамСДаннымиСФ <> "" Тогда
	//	
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, ") КАК СчетаФактурыДокументы", ТекстЗапросаПоДокументамСДаннымиСФ + ") КАК СчетаФактурыДокументы");
	//	
	//КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

//// Получает страну происхождения и номер ГТД по списку счетов-фактур в виде, отражаемом в книге покупок
////
//Функция ПолучитьДополнительнуюИнформациюПоСФ(Организация, КонецПериода, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)

//	// Определить частичные оплаты
//	// Определяем полную сумму по СФ
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
//	|	СУММА(НДСПредъявленныйОбороты.СуммаБезНДСПриход + НДСПредъявленныйОбороты.НДСПриход) КАК СуммаСНДС
//	|ИЗ
//	|	РегистрНакопления.НДСПредъявленный.Обороты(
//	|			,
//	|			&КонецПериода,
//	|			Период,
//	|			Организация = &Организация
//	|				И СчетФактура В (&СписокСчетовФактур)
//	|				И (НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
//	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты)))) КАК НДСПредъявленныйОбороты
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	НДСПредъявленныйОбороты.СчетФактура
//	|ИТОГИ ПО
//	|	СчетФактура";
//	
//	Запрос.УстановитьПараметр("Организация",  Организация);
//	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
//	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);

//	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
//	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
//	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
//	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
//	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
//	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
//	//ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
//	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
//	
//	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
//	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
//	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
//	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
//	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
//	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
//	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.Возврат);
//	
//	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
//	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
//	
//	//flp
//	//ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	СоотвествиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
//	
//	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
//	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
//		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
//			СоотвествиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
//		КонецЕсли; 
//	КонецЦикла; 
//	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
//	
//	// Дополнение по ГТД и стране происхождения
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ТаблицаТоваров.Ссылка КАК СчетФактура,
//	|	ТаблицаТоваров.СтранаПроисхождения КАК СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД,
//	|	СУММА(1) КАК КоличествоЭлементов
//	|ИЗ
//	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД,
//	|	СУММА(1)
//	|ИЗ
//	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД,
//	|	СУММА(1)
//	|ИЗ
//	|	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.Ссылка.НомерГТД,
//	|	СУММА(1)
//	|ИЗ
//	|	Документ.ГТДИмпорт.Товары КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.Ссылка,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.Ссылка.НомерГТД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.СчетФактура,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД,
//	|	СУММА(1)
//	|ИЗ
//	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.СчетФактура В(&СписокСФ)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.СчетФактура,
//	|	ТаблицаТоваров.СтранаПроисхождения,
//	|	ТаблицаТоваров.НомерГТД
//	|ИТОГИ
//	|	СУММА(КоличествоЭлементов)
//	|ПО
//	|	СчетФактура,
//	|	СтранаПроисхождения";
//	
//	Запрос.УстановитьПараметр("СписокСФ",СписокСчетовФактур);
//	
//	ГТДпоСФ =  Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Для Каждого СтрокаСФ Из ГТДпоСФ.Строки Цикл
//		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтрокиИнформацииСФ = СоотвествиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
//		Если СтрокиИнформацииСФ = Неопределено Тогда
//			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
//			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
//			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
//			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
//			
//			СоотвествиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
//			
//			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
//		Иначе
//			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
//		КонецЕсли; 
//		
//		СтрокаИнформации = "";
//		Для Каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
//			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения) + " ";
//			ГТДРез = "";
//			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл
//				ГТДРез = ГТДРез+ ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
//			КонецЦикла; 
//			
//			СтрокаИнформации = СтрокаИнформации + ГТДРез;
//		КонецЦикла; 
//		
//		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
//			СтрокаИнформацииСФ.ГТДиСтрана = СтрокаИнформации;
//		КонецЦикла; 
//		
//	КонецЦикла; 
//	
//	// дополняем информацию датами оплаты,
//	// отраженными в регистре записей книг отдельно от сумм
//	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

//	Запрос = Новый Запрос;

//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
//		|	НДСЗаписиКнигиПокупок.ДатаОплаты
//		|ИЗ
//		|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
//		|ГДЕ
//		|	НДСЗаписиКнигиПокупок.Организация = &Организация
//		|	И ВЫБОР
//		|			КОГДА &ЗаписьДополнительногоЛиста
//		|					И &ДополнительныеЛистыЗаТекущийПериод
//		|				ТОГДА НДСЗаписиКнигиПокупок.Период >= &НачалоПериода
//		|						И (НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
//		|			ИНАЧЕ НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
//		|		КОНЕЦ
//		|	И НДСЗаписиКнигиПокупок.СчетФактура В(&СписокСчетовФактур)
//		|	И НДСЗаписиКнигиПокупок.СуммаБезНДС = 0
//		|	И НДСЗаписиКнигиПокупок.НДС = 0
//		|	И (НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
//		|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
//		|ИТОГИ ПО
//		|	СчетФактура";
//	
//	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
//	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
//	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", ДополнительныеЛистыЗаТекущийПериод);
//	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
//	
//	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

//	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
//		
//		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтрокиИнформацииСФ = СоотвествиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
//		Если СтрокиИнформацииСФ = Неопределено Тогда
//			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
//			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
//			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
//			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
//			СоотвествиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
//			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
//		Иначе
//			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
//		КонецЕсли; 
//		
//		Для каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
//			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
//		КонецЦикла; 
//		
//	КонецЦикла; 
//	
//	Возврат ДополнительнаяИнформацияПоСФ;
//	
//КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

#Если КЛИЕНТ Тогда
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерГТД) Тогда
		ОбластьМакета.Параметры.НомерГТД = "---";
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

мСтруктураОтбораПроведен = Новый Структура("Проведен", Истина);
мСтруктураОтбораСчетФактуры = Новый Структура("Проведен, ВидСчетаФактуры", Истина);