
Процедура ПриЗаписи(Отказ, Замещение)
	         		
	Для Каждого Запись из ЭтотОбъект Цикл 
		
		Если Запись.Status <> Перечисления.TDStatuses.Submitted Тогда
			Продолжить;
		КонецЕсли;
		
		ОтправитьПисьмоSubmitted(Отказ, Запись);
		
	КонецЦикла;	
	        	
КонецПроцедуры

Процедура ОтправитьПисьмоSubmitted(Отказ, Запись)
	
	// { RGS ASeryakov 23.01.2018 18:00:00 - S-I-0005138
	Если НЕ РГСофтСерверПовтИспСеанс.ЭтоProductionБаза() Тогда
		Возврат;
	КонецЕсли;
	// } RGS ASeryakov 23.01.2018 18:00:00 - S-I-0005138
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстПисьма = TDСервер.ПодготовитьТекстПисьмаSubmitted(Запись);
	
	// Проведение - это отправка сообщения
	// { RGS DKazanskiy 31.05.2018 15:09:03 - S-I-0005358
	// Отправка через очередь
	//СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();	
	// } RGS DKazanskiy 31.05.2018 15:09:15 - S-I-0005358
	
	UserEMail = ПараметрыСеанса.ТекущийПользователь.EMail;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOC",    Запись.DOC);
	Запрос.УстановитьПараметр("PartNo", Запись.PartNo);
	Запрос.УстановитьПараметр("Query",  Запись.Query);
	Запрос.УстановитьПараметр("Период", Запись.Период);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	TDStatusesСрезПоследних.EMail.ListOfRecipients КАК ListOfRecipients,
	|	TDStatusesСрезПоследних.EMail.Copy КАК Copy,
	|	TDStatusesСрезПоследних.EMail.ReplyTo КАК ReplyTo,
	|	TDStatusesСрезПоследних.EMail.CreatedBy КАК АвторЗапроса
	|ИЗ
	|	РегистрСведений.TDStatuses.СрезПоследних(
	|			,
	|			DOC = &DOC
	|				И PartNo = &PartNo
	|				И Query = &Query
	|				И Период < &Период) КАК TDStatusesСрезПоследних
	|ГДЕ
	|	TDStatusesСрезПоследних.Status = ЗНАЧЕНИЕ(Перечисление.TDStatuses.Requested)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ListOfRecipients) Тогда
		
		// { RGS DKazanskiy 31.05.2018 15:09:03 - S-I-0005358
		// Отправка через очередь
		
		//ПараметрыПисьма = Новый Структура;
		//                   		
		Если ЗначениеЗаполнено(Выборка.Copy) И СокрЛП(UserEMail) <> СокрЛП(Выборка.Copy) Тогда 
			ListOfRecipients = Выборка.ListOfRecipients + ";" + Выборка.Copy;
		КонецЕсли;
	
		// { RGS AArsentev 29.05.2018
		Если ЗначениеЗаполнено(Выборка.ReplyTo) Тогда 
			ListOfRecipients = Выборка.ListOfRecipients + ";" + Выборка.ReplyTo;
		КонецЕсли;
		// } RGS AArsentev 29.05.2018
		
		// { RGS AArsentev 20.06.2018
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "&АвторЗапроса&", Выборка.АвторЗапроса);
		// } RGS AArsentev 20.06.2018
		
		РГСофт.ЗарегистрироватьПочтовоеСообщение(ListOfRecipients, 
												 "Technical description submitted for Part no.: " + СокрЛП(Запись.PartNo),
												 ТекстПисьма, 
												 Неопределено, 
												 Перечисления.ТипыТекстовЭлектронныхПисем.HTML, 
												 UserEMail);
		//
		//ПараметрыПисьма.Вставить("Кому", ListOfRecipients);
		//
		//ПараметрыПисьма.Вставить("Тема", 		"Technical description submitted for Part no.: " + СокрЛП(Запись.PartNo));
		//ПараметрыПисьма.Вставить("Тело", 		ТекстПисьма);
		//ПараметрыПисьма.Вставить("АдресОтвета", UserEMail);
		//ПараметрыПисьма.Вставить("Копии", 		UserEMail);
		//ПараметрыПисьма.Вставить("ТипТекста", 	ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"));
		//
		//// Попробуем отправить сообщение
		//ПисьмоОтправлено = Ложь;
		//КоличествоПопыток = 0;
		//Пока НЕ ПисьмоОтправлено И КоличествоПопыток < 3 Цикл
		//	
		//	КоличествоПопыток = КоличествоПопыток + 1;
		//	Попытка
		//		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
		//		ПисьмоОтправлено = Истина;
		//	Исключение
		//		ЗаписьЖурналаРегистрации(
		//		"Ошибка отправки E-mail",
		//		УровеньЖурналаРегистрации.Ошибка,
		//		Метаданные.Документы.EMails,
		//		Запись,
		//		ОписаниеОшибки());
		//	КонецПопытки;
		//	
		//КонецЦикла;
		//
		//Если НЕ ПисьмоОтправлено Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//	"Failed to send e-mail!
		//	|" + ОписаниеОшибки(),
		//	ЭтотОбъект, , , Отказ);
		//КонецЕсли;
		
		// } RGS DKazanskiy 31.05.2018 15:09:15 - S-I-0005358
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

