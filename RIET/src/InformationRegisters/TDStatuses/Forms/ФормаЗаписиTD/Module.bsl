
&НаКлиенте
Процедура SaveRequest(Команда)
	
	Отказ = Ложь;
	
	Отказ = Не ПроверитьЗаполнение();
	
	Если Не ЗначениеЗаполнено(DOC) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"DOC / Export request / BORG is empty!",
			, "Объект", "DOC");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Item) И ТипЗнч(DOC) <> Тип("СправочникСсылка.BORGs") Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Item is empty!",
			, "Объект", "Item");
	КонецЕсли;

		
	//
	//// { RGS ASeryakov 27.04.2018 16:36:35 - S-I-0005166
	//Если ВыполняласьОтправкаЗапросаПоОбъекту() Тогда
	//	
	//	Отказ = Истина;
	//	
	//	ШаблонСообщения = НСтр("ru = 'Для PartNo: %1 и объекта: %2 уже выполнялась отправка запроса! '; en = 'For PartNo: %1 and object: %2, the request was already submitted!'");
	//	ОписаниеСообщения = СтрШаблон(ШаблонСообщения,Строка(PartNo) ,Строка(DOC));
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеСообщения);
	//КонецЕсли;
	//// } RGS ASeryakov 27.04.2018 16:36:35 - S-I-0005166
	
	//Если Отказ Тогда 
	//	Возврат;
	//КонецЕсли;
	//       			
	//ОткрытьФормуОтправкиПисьма();
	
	// { RGS AArsentev 17.05.2018
	PartNumbers = PartNo.ВыгрузитьЗначения();
	Для Каждого Элемент Из PartNumbers Цикл
		
		Соответствует = ПроверитьСоответствиеPn_Doc(СокрЛП(Элемент));
		Если НЕ Соответствует Тогда
			Продолжить
		КонецЕсли;
		
		Если ВыполняласьОтправкаЗапросаПоОбъекту(Элемент) Тогда	
			ШаблонСообщения = НСтр("ru = 'Для PartNo: %1 и объекта: %2 уже выполнялась отправка запроса! '; en = 'For PartNo: %1 and object: %2, the request was already submitted!'");
			ОписаниеСообщения = СтрШаблон(ШаблонСообщения,Строка(Элемент) ,Строка(DOC));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеСообщения);
			Продолжить;
		КонецЕсли;
		
		ОткрытьФормуОтправкиПисьма(Элемент);
		
	КонецЦикла;
	// } RGS AArsentev 17.05.2018
	
	// { RGS AArsentev 20.07.2018
	Если PartNumbers.Количество() = 0 И ТипЗнч(DOC) = Тип("СправочникСсылка.BORGs") И ЗначениеЗаполнено(PartNumber) Тогда
		PartNoBorg = НайтиСоздатьPartNoДляBorg(PartNumber, PartNumberDescription);
		Если ЗначениеЗаполнено(PartNoBorg) Тогда
			Если ВыполняласьОтправкаЗапросаПоОбъекту(Элемент) Тогда	
				ШаблонСообщения = НСтр("ru = 'Для PartNo: %1 и объекта: %2 уже выполнялась отправка запроса! '; en = 'For PartNo: %1 and object: %2, the request was already submitted!'");
				ОписаниеСообщения = СтрШаблон(ШаблонСообщения,Строка(Элемент) ,Строка(DOC));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеСообщения);
			Иначе
				ОткрытьФормуОтправкиПисьма(PartNoBorg);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Need to fill 'Part Number Description'");
		КонецЕсли;
	КонецЕсли;
	// } RGS AArsentev 20.07.2018
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиПисьма(PartNumber)
	
	массивItems = TDСервер.ПолучитьМассивItems(DOC);
	Coordinator = Неопределено;
			
	Если ТипЗнч(DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		DOCtype = "DOC"; 		
		Номер = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOC, "Номер"));
		Coordinator = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOC, "Coordinator");
		
	ИначеЕсли ТипЗнч(DOC) = Тип("ДокументСсылка.ExportRequest") Тогда
		
		DOCtype = "Export request";
		Номер = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOC, "Номер"));
		Coordinator = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DOC, "ShipperContact");   		
		
	Иначе  //если BORG
		
		DOCType = "BORG";		
		Номер = СокрЛП(DOC);
		
	КонецЕсли;
	
	параметрыПисьма = Новый Структура;
	// { RGS AArsentev 17.05.2018
	//параметрыПисьма.Вставить("PartNo",		СокрЛП(PartNo));
	Если ТипЗнч(PartNumber) = Тип("Строка") Тогда
		параметрыПисьма.Вставить("PartNo",		СокрЛП(PartNumber));
	Иначе
		параметрыПисьма.Вставить("PartNo",		PartNumber);
	КонецЕсли;
	// } RGS AArsentev 17.05.2018
	параметрыПисьма.Вставить("DOCNo",  		Номер);
	параметрыПисьма.Вставить("DOC",  		DOC);
	параметрыПисьма.Вставить("Coordinator", Coordinator);
	параметрыПисьма.Вставить("Query",  		Query + ?(ЗначениеЗаполнено(AdditionalReference), ", " + AdditionalReference, ""));
	параметрыПисьма.Вставить("Items",       массивItems);
	параметрыПисьма.Вставить("DOCType",     DOCType);
	
	параметрыПисьма.Вставить("Item",     Item);
	
	// надо показать форму отправки нового сообщения
	СтруктураПараметров = TDСервер.ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщенияПриИзмененииСтатуса(параметрыПисьма);
	Если СтруктураПараметров <> Неопределено Тогда
		
		Для Каждого Borg из СтруктураПараметров.УдаленныеБорги Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(Borg) + " was marked for deletion!
			|Please send request via RIET-support!",
			, "ФормаОбщаяКомандаrgsМониторСопровождения");
		КонецЦикла;
		
		Если СтруктураПараметров.УдаленныеБорги.Количество() = 0 Тогда 
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML", СтруктураПараметров, ЭтаФорма);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML" Тогда
		
		Ответ = ОбработатьПолучениеСтруктурыПочтовогоСообщения(ВыбранноеЗначение);
		
		Если Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ.записатьИсториюИзменения Тогда
			
			TDСервер.ЗаписатьНовоеЗначениеСтатуса(ПредопределенноеЗначение("Перечисление.TDStatuses.Requested"), ВыбранноеЗначение.PartNo, DOC, Query, Item, Ответ.ЭлПисьмо);
			
			ЭтаФорма.Закрыть();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ExportRequest")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		DOC = ВыбранноеЗначение;
		
	КонецЕсли;
	
	НастроитьВидимостьПоDOC();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолучениеСтруктурыПочтовогоСообщения(СтруктураПараметров)
	
	НачатьТранзакцию();
	
	записатьИсториюИзменения = Ложь;
	
	Если СтруктураПараметров.Свойство("TechDOC") И СтруктураПараметров.TechDOC Тогда
		
		// это означает, что письмо отправлено. 
		// тогда остается, но надо записать в историю изменение с записью ссылки на письмо
		записатьИсториюИзменения = Истина;
		
	КонецЕсли;
	
	// Создадим и отправим EMail	
	УстановитьПривилегированныйРежим(Истина);
	ДокументEMail = Документы.EMails.СоздатьДокумент();
	СтруктураПараметров.Вставить("Object", DOC);
	ДокументEMail.Заполнить(СтруктураПараметров);
	
	Попытка
		ДокументEMail.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ОтменитьТранзакцию();
		Сообщить(
			"Failed to send email.
			|See errors above.
			|" + ОписаниеОшибки());		
		Возврат Неопределено;
		
	КонецПопытки;  	
			
	ЗафиксироватьТранзакцию();		
	
	// ++ КДС RG-Soft 24.11.2016
	Возврат Новый Структура("записатьИсториюИзменения, ЭлПисьмо", записатьИсториюИзменения, ДокументEMail.Ссылка);
	// -- КДС RG-Soft 24.11.2016
	
КонецФункции

&НаКлиенте
Процедура DOCОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастроитьВыборDOC(ВыбранноеЗначение, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура DOCНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.BORGs"));
	Если Не ЗначениеЗаполнено(PartNo) Тогда 
		Элементы.DOC.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ExportRequest"));
		Элементы.DOC.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если DOC <> Неопределено Тогда
		
		НастроитьВыборDOC(ТипЗнч(DOC), СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыборDOC(ТипВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипВыбранноеЗначение = Тип("СправочникСсылка.BORGs")
		ИЛИ ТипЗнч(ТипВыбранноеЗначение) = Тип("СправочникСсылка.BORGs") Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзTDStatuses");	
	//СтруктураНастройки.Вставить("PartNumber", СокрЛП(PartNo));
	// { RGS AArsentev 17.05.2018
	//СтруктураНастройки.Вставить("PartNumber", СокрЛП(PartNo));
	Catalogs = PartNo.ВыгрузитьЗначения();
	PartNumbers = Новый Массив;
	Для Каждого Элемент Из Catalogs Цикл
		PartNumbers.Добавить(СокрЛП(Элемент));
	КонецЦикла;
	СтруктураНастройки.Вставить("PartNumbers", PartNumbers);
	// } RGS AArsentev 17.05.2018
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьDOC_Конец", ЭтаФорма,
	Новый Структура("Параметр1", 10));
		
	Если ТипВыбранноеЗначение = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,ОбработкаВыбора);
		
	ИначеЕсли ТипВыбранноеЗначение = Тип("ДокументСсылка.ExportRequest") Тогда
		            		
		ОткрытьФорму("Документ.ExportRequest.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,ОбработкаВыбора);
		
	КонецЕсли;	   	
	
КонецПроцедуры

// { RGS ASeryakov 27.04.2018 16:36:35 - S-I-0005166
&НаСервере
Функция ВыполняласьОтправкаЗапросаПоОбъекту(PartNumber)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	TDStatusesСрезПоследних.PartNo
		|ИЗ
		|	РегистрСведений.TDStatuses.СрезПоследних КАК TDStatusesСрезПоследних
		|ГДЕ
		|	TDStatusesСрезПоследних.Status = ЗНАЧЕНИЕ(Перечисление.TDStatuses.Requested)
		|	И TDStatusesСрезПоследних.DOC = &DOC
		|	И TDStatusesСрезПоследних.PartNo = &PartNo";
	
	Запрос.УстановитьПараметр("DOC", DOC);
	// { RGS AArsentev 17.05.2018
	//Запрос.УстановитьПараметр("PartNo", PartNo);
	Запрос.УстановитьПараметр("PartNo", PartNumber);
	// } RGS AArsentev 17.05.2018
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ВыполняласьОтправкаЗапросаПоОбъекту()
// } RGS ASeryakov 27.04.2018 16:36:35 - S-I-0005166

&НаСервере
Функция ПроверитьСоответствиеPn_Doc(PartNumber)
	
	Если ТипЗнч(DOC) = Тип("ДокументСсылка.ExportRequest") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтрокиИнвойса.ExportRequest КАК ExportRequest
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
		|		ПО СтрокиИнвойса.ExportRequest = ExportShipmentExportRequests.ExportRequest
		|			И (НЕ ExportShipmentExportRequests.Ссылка.ПометкаУдаления)
		|ГДЕ
		|	СтрокиИнвойса.КодПоИнвойсу = &PartNumber
		|	И ExportShipmentExportRequests.Ссылка ЕСТЬ NULL
		|	И НЕ СтрокиИнвойса.ПометкаУдаления
		|	И СтрокиИнвойса.ExportRequest = &ExportRequest";
		Запрос.УстановитьПараметр("ExportRequest", Doc);
		Запрос.УстановитьПараметр("PartNumber", PartNumber);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|		ПО СтрокиИнвойса.Инвойс = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
		|ГДЕ
		|	СтрокиИнвойса.КодПоИнвойсу = &PartNumber
		|	И НЕ СтрокиИнвойса.ПометкаУдаления
		|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен
		|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Booked = ДАТАВРЕМЯ(1, 1, 1)
		|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &Doc";
		Запрос.УстановитьПараметр("PartNumber", PartNumber);
		Запрос.УстановитьПараметр("Doc", Doc);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ВыбратьЭлементСправочникаКонец(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Выбранное Из Значение Цикл
		
		PartNo.Добавить(Выбранное, СокрЛП(Общегоназначения.ПолучитьЗначениеРеквизита(Выбранное, "Код")));
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура AddPartNo(Команда)
	
	ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Истина, Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьЭлементСправочникаКонец", ЭтаФорма,
	Новый Структура("Параметр1", 10));
	ОткрытьФорму("Справочник.Catalog.ФормаВыбора", ПараметрыФормы,
	ЭтаФорма, , , ,ОбработкаВыбора);

КонецПроцедуры


&НаКлиенте
Процедура ВыбратьDOC_Конец(DOC, ДопПараметры) Экспорт
	
	Если DOC = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьItems(DOC);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьItems(DOC)
	
	МассивPartNo = Новый Массив;
	Для каждого Part Из PartNo.ВыгрузитьЗначения() Цикл
		МассивPartNo.Добавить(СокрЛП(Part.Код))
	КонецЦикла;
	
	Элементы.Item.СписокВыбора.Очистить();
	Item = Неопределено;
	
	Элементы.Item.Доступность = Ложь;
	Запрос = Новый Запрос;
	Если ТипЗнч(DOC) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	СтрокиИнвойса.Ссылка КАК Item
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &DOC
		|	И СтрокиИнвойса.КодПоИнвойсу В(&МассивPartNo)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ExportRequest.Ссылка
		|ПОМЕСТИТЬ ER
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequest
		|ГДЕ
		|	ExportRequest.Ссылка = &DOC
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиИнвойса.Ссылка КАК Item
		|ИЗ
		|	ER КАК ER
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ПО ER.Ссылка = СтрокиИнвойса.ExportRequest
		|ГДЕ
		|	СтрокиИнвойса.КодПоИнвойсу В(&МассивPartNo)";
	КонецЕсли;
	Запрос.УстановитьПараметр("DOC", DOC);
	Запрос.УстановитьПараметр("МассивPartNo", МассивPartNo);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 тогда
		Результат.Следующий();
		Элементы.Item.СписокВыбора.Добавить(Результат.Item, "" + СокрЛП(Результат.Item) + ", " + СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Результат.Item, "НаименованиеТовара")));
		Item = Элементы.Item.СписокВыбора[0].Значение;
	ИначеЕсли Результат.Количество() > 1 тогда
		Пока Результат.Следующий() Цикл
			Элементы.Item.СписокВыбора.Добавить(Результат.Item, "" + СокрЛП(Результат.Item) + ", " + СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Результат.Item, "НаименованиеТовара")));
			Элементы.Item.Доступность = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НастроитьВидимостьПоDOC();
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоDOC()
	
	Если Не ЗначениеЗаполнено(DOC) Тогда
		Элементы.Borgs.Видимость = Ложь;
		Элементы.Items.Видимость = Ложь;
		Item = Неопределено;
		Query = Неопределено;
		PartNumber = Неопределено;
		PartNumberDescription = Неопределено;
		AdditionalReference = Неопределено;
	ИначеЕсли ТипЗнч(DOC) = Тип("СправочникСсылка.BORGs") Тогда
		Элементы.Borgs.Видимость = Истина;
		Элементы.Items.Видимость = Ложь;
		Item = Неопределено;
		Query = Неопределено;
	Иначе
		Элементы.Borgs.Видимость = Ложь;
		Элементы.Items.Видимость = Истина;
		PartNumber = Неопределено;
		PartNumberDescription = Неопределено;
		AdditionalReference = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PartNoПриИзменении(Элемент)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.BORGs"));
	Если Не ЗначениеЗаполнено(PartNo) Тогда 
		Элементы.DOC.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		DOC = Неопределено;
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ExportRequest"));
		Элементы.DOC.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	НастроитьВидимостьПоDOC();
	
КонецПроцедуры

&НаКлиенте
Процедура DOCПриИзменении(Элемент)
	НастроитьВидимостьПоDOC();
КонецПроцедуры

Функция НайтиСоздатьPartNoДляBorg(PartNo, Description)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Catalog.Ссылка
	|ИЗ
	|	Справочник.Catalog КАК Catalog
	|ГДЕ
	|	Catalog.Код = &Код
	|	И НЕ Catalog.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", PartNo);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(Description) Тогда
		спрОбъект = Справочники.Catalog.СоздатьЭлемент();
		спрОбъект.Код = PartNo;
		спрОбъект.DescriptionEng = Description;
		спрОбъект.Записать();
		Возврат спрОбъект.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции




