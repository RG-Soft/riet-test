
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеРеквизитов(Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитов(Отказ)
	
	// убрали проверку уникальности SoldTo и AU,BORG из-за convention/non-convention
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	AUsAndBORGs.BORG,
	//	|	BORGs.Компания КАК SoldTo
	//	|ИЗ
	//	|	Справочник.BORGs КАК BORGs
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndBORGs КАК AUsAndBORGs
	//	|		ПО BORGs.Ссылка <> AUsAndBORGs.BORG
	//	|			И BORGs.Компания = AUsAndBORGs.BORG.Компания
	//	|ГДЕ
	//	|	BORGs.Ссылка = &BORG
	//	|	И AUsAndBORGs.AU = &AU";
		
	КлючЗаписи = Неопределено;
	Для Каждого Запись Из ЭтотОбъект Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.AU) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""AU"" is empty!",
				, "AU", "Запись", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.BORG) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""BORG"" is empty!",
				, "BORG", "Запись", Отказ);
		КонецЕсли; 
		
		//Если ЗначениеЗаполнено(Запись.AU) И ЗначениеЗаполнено(Запись.BORG) Тогда
		//	
		//	Запрос.УстановитьПараметр("BORG", Запись.BORG);
		//	Запрос.УстановитьПараметр("AU", Запись.AU);
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	Если Выборка.Следующий() Тогда
		//		
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//			"There is already ""BORG " + СокрЛП(Выборка.BORG) + """ for ""AU " + СокрЛП(Запись.AU) + """ and ""Sold-to " + СокрЛП(Выборка.SoldTo) + """!",
		//			, "BORG", "Запись", Отказ);
		//		
		//	КонецЕсли; 
		//	
		//КонецЕсли; 	
		
	КонецЦикла; 
	
КонецПроцедуры 

