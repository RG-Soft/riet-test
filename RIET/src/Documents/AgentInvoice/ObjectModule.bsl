
////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ     

// ДОДЕЛАТЬ
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	// ПЕРЕВЕСТИ НА НОВУЮ СИСТЕМУ
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовЗапросовПередЗаписью(РежимЗаписи);
	
	ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи, СтруктураРезультатов);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
		
	РГСофтКлиентСервер.УстановитьЗначение(Номер, СокрЛП(Номер));
	РГСофтКлиентСервер.УстановитьЗначение(FiscalNo, СокрЛП(FiscalNo));
	РГСофтКлиентСервер.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если ЭтоНовый() Тогда
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;
	
	
	Services.Свернуть("Service,Coefficient", "Sum,SumWithCoefficient");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСтруктуруРезультатовЗапросовПередЗаписью(РежимЗаписи)
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если НЕ ПометкаУдаления Тогда
		
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
				Если Services.Количество() Тогда
										
					Если ЗначениеЗаполнено(Agent) Тогда
						
						СтруктураПараметров.Вставить("Ссылка", Ссылка);
						СтруктураПараметров.Вставить("МассивServices", Services.ВыгрузитьКолонку("Service"));	
						СтруктураПараметров.Вставить("Agent", Agent);
						СтруктураТекстов.Вставить("ServicesWithWrongAgent",
							"ВЫБРАТЬ
							|	ДокументService.Ссылка КАК Service,
							|	ДокументService.Представление КАК ServiceПредставление,
							|	ДокументService.Agent.Представление КАК AgentПредставление
							|ИЗ
							|	Документ.Service КАК ДокументService
							|ГДЕ
							|	ДокументService.Ссылка В(&МассивServices)
							|	И ДокументService.Agent <> &Agent");
						
					КонецЕсли; 
																
				КонецЕсли; 
								
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураРезультатов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи, СтруктураРезультатов)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Agent no."" не заполнено!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(FiscalNo) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Fiscal no."" не заполнено!",
			ЭтотОбъект, "FiscalNo", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Date"" не заполнено!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли; 
	
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Received) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Received"" не заполнено!",
			ЭтотОбъект, "Received", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Agent) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Agent"" не заполнено!",
			ЭтотОбъект, "Agent", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(SoldTo) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Sold-to"" не заполнено!",
			ЭтотОбъект, "SoldTo", , Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(SumWithoutVAT) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Sum w/o VAT"" не заполнено!",
			ЭтотОбъект, "SumWithoutVAT", , Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(SumWithVAT) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Sum with VAT"" не заполнено!",
			ЭтотОбъект, "SumWithVAT", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(SumWithoutVAT)
		И ЗначениеЗаполнено(SumWithVAT)
		И SumWithVAT <> SumWithoutVAT + VAT Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Sum with VAT"" не равно ""Sum without VAT"" + ""VAT""!",
			ЭтотОбъект, "VAT", , Отказ);
	КонецЕсли; 
	
	Если Coefficient <> Перечисления.AgentInvoicesCoefficients.WithoutCoefficient Тогда
		
		Если НЕ ЗначениеЗаполнено(CoefficientDate) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле 'Coefficient date' не заполнено!",
				ЭтотОбъект, "CoefficientDate", , Отказ);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(SumWithoutVATWithCoefficient) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле 'Sum w/o VAT (coef.)' не заполнено!",
				ЭтотОбъект, "SumWithoutVATWithCoefficient", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(SumWithVATWithCoefficient) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле 'Sum with VAT (coef.)' не заполнено!",
				ЭтотОбъект, "SumWithVATWithCoefficient", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SumWithoutVATWithCoefficient)
			И ЗначениеЗаполнено(SumWithVATWithCoefficient)
			И SumWithVATWithCoefficient <> SumWithoutVATWithCoefficient + VATWithCoefficient Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Sum with VAT (coef.)' не равно 'Sum w/o VAT (coef.)' + 'VAT (coef.)'!",
				ЭтотОбъект, "VATWithCoefficient", , Отказ);
		КонецЕсли; 
		
	КонецЕсли;	
	
	Если Services.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Список ""Services"" не заполнен!",
			ЭтотОбъект, "Services", , Отказ);
			
	Иначе
		
		Если ЗначениеЗаполнено(SumWithoutVAT) И SumWithoutVAT <> Services.Итог("Sum") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Сумма Services не сходится с Sum w/o VAT!",
				ЭтотОбъект, "SumWithoutVAT", , Отказ);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(SumWithoutVATWithCoefficient) И SumWithoutVATWithCoefficient <> Services.Итог("SumWithCoefficient") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Sum with coef. таблицы Services не сходится с Sum w/o VAT (coef.)!",
				ЭтотОбъект, "SumWithoutVATWithCoefficient", , Отказ);
		КонецЕсли;
			
		Для Каждого СтрокаТЧ Из Services Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Service) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке " + СтрокаТЧ.НомерСтроки + ": поле ""Service"" не заполнено!",
					ЭтотОбъект, "Services[" + (СтрокаТЧ.НомерСтроки - 1) + "].Service", , Отказ);
				
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Sum) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке " + СтрокаТЧ.НомерСтроки + ": поле ""Sum"" не заполнено!",
					ЭтотОбъект, "Services[" + (СтрокаТЧ.НомерСтроки - 1) + "].Sum", , Отказ);
				
			КонецЕсли; 
			
			Если Coefficient <> Перечисления.AgentInvoicesCoefficients.WithoutCoefficient 
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.SumWithCoefficient) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке " + СтрокаТЧ.НомерСтроки + ": поле ""Sum with coef."" не заполнено!",
					ЭтотОбъект, "Services[" + (СтрокаТЧ.НомерСтроки - 1) + "].SumWithCoefficient", , Отказ);
				
			КонецЕсли; 

		КонецЦикла; 
		
		Если ЗначениеЗаполнено(Agent) Тогда
			
			// Убедимся, что все сервисы оказаны агентом, указанным в шапке документа
			Выборка = СтруктураРезультатов.ServicesWithWrongAgent.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НомерСтроки = Services.Найти(Выборка.Service, "Service").НомерСтроки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке " + НомерСтроки + ": в """ + Выборка.ServiceПредставление + """ указан Agent """ + Выборка.AgentПредставление + """, который отличается от Agent в шапке документа!",
					ЭтотОбъект, "Services[" + (НомерСтроки - 1) + "].Service", , Отказ);
					
			КонецЦикла;
	
		КонецЕсли; 
					
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРОВЕДЕНИЯ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДвиженияПоРегиструNotReceivedAgentInvoices(Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДвиженияПоInvoiceLinesCosts(Отказ);
	
	ДвиженияПоСтоимостьТоваровПоТПО(Отказ);
	
	ДвиженияПоDutiesRecharged(Отказ);
	
КонецПроцедуры

Процедура ДвиженияПоРегиструNotReceivedAgentInvoices(Отказ)
	
	ДвиженияПоРегиструNotReceivedAgentInvoices = Движения.NotReceivedAgentInvoices;
	ДвиженияПоРегиструNotReceivedAgentInvoices.Очистить();     
	
	Для Каждого СтрокаТЧ Из Services Цикл
		
		ДвиженияПоРегиструNotReceivedAgentInvoices.ДобавитьЗапись(
			ВидДвиженияНакопления.Расход,
			Дата,
			СтрокаТЧ.Service,
			SoldTo,
			СтрокаТЧ.Sum);
			
	КонецЦикла; 
	
	ДвиженияПоРегиструNotReceivedAgentInvoices.БлокироватьДляИзменения = Истина;
	ДвиженияПоРегиструNotReceivedAgentInvoices.Записать();
	
	// Проверим остатки (должны обнулиться)
	ТаблицаОстатков = РегистрыНакопления.NotReceivedAgentInvoices.ПолучитьОстатки( ,Services.ВыгрузитьКолонку("Service"), SoldTo);	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		НомерСтроки = Services.Найти(СтрокаОстатков.Service, "Service").НомерСтроки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In line " + НомерСтроки + ": указанная сумма отличается от суммы Service по данному Sold-to на " + (-СтрокаОстатков.SumОстаток) + " руб. !",
			ЭтотОбъект, "Services[" + (НомерСтроки - 1) + "].Sum", , Отказ);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДвиженияПоInvoiceLinesCosts(Отказ)
	
	ДвиженияПоРегиструInvoiceLinesCosts = Движения.InvoiceLinesCosts;
	ДвиженияПоРегиструInvoiceLinesCosts.Записывать = Истина;
	ДвиженияПоРегиструInvoiceLinesCosts.Записать();     
	
	Если Coefficient = Перечисления.AgentInvoicesCoefficients.WithoutCoefficient Тогда 
		Возврат;
	КонецЕсли;
	
	//сделаем сторно движений для каждого сервиса с коэффициентом <> 1 
	Для Каждого СтрокаServices Из Services Цикл 
		
		Если СтрокаServices.Coefficient = 1 Тогда 
			Продолжить;
		КонецЕсли;

		ТЗОборотов = РегистрыНакопления.InvoiceLinesCosts.Обороты(, , 
			Новый Структура("ДокументОснование,SoldTo", СтрокаServices.Service, SoldTo));
			
		ТЗОборотов.Колонки.Добавить("СуммаСКоэффициентом", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "СуммаСКоэффициентом");
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗОборотов.ВыгрузитьКолонку("Сумма"), СтрокаServices.SumWithCoefficient, ТЗОборотов, "СуммаСКоэффициентом");
		
		Для Каждого СтрокаТЗОборотов Из ТЗОборотов Цикл
			
			// сторно
			ДвиженияПоРегиструInvoiceLinesCosts.ДобавитьЗапись(
					Дата,
					СтрокаТЗОборотов.СтрокаИнвойса,
					СтрокаТЗОборотов.ЭлементФормированияСтоимости,
					СтрокаТЗОборотов.ДокументОснование,
					СтрокаТЗОборотов.Валюта,
					-СтрокаТЗОборотов.Сумма,
					-СтрокаТЗОборотов.СуммаФискальная);
					
			Если СтрокаТЗОборотов.СуммаСКоэффициентом = 0 Тогда 
				Продолжить;
			КонецЕсли;
					
			// сумма с коэффициентом
			ДвиженияПоРегиструInvoiceLinesCosts.ДобавитьЗапись(
					Дата,
					СтрокаТЗОборотов.СтрокаИнвойса,
					СтрокаТЗОборотов.ЭлементФормированияСтоимости,
					СтрокаТЗОборотов.ДокументОснование,
					СтрокаТЗОборотов.Валюта,
					СтрокаТЗОборотов.СуммаСКоэффициентом,
					СтрокаТЗОборотов.СуммаСКоэффициентом);
			
		КонецЦикла;
		              		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоСтоимостьТоваровПоТПО(Отказ)
	
	ДвиженияПоРегиструСтоимостьТоваровПоТПО = Движения.СтоимостьТоваровПоТПО;
	ДвиженияПоРегиструСтоимостьТоваровПоТПО.Записывать = Истина;
	ДвиженияПоРегиструСтоимостьТоваровПоТПО.Записать();     
	
	Если Coefficient = Перечисления.AgentInvoicesCoefficients.WithoutCoefficient Тогда 
		Возврат;
	КонецЕсли;
	
	//сделаем сторно движений для каждого сервиса с коэффициентом <> 1
	Для Каждого СтрокаServices Из Services Цикл 
		
		Если СтрокаServices.Coefficient = 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТЗОборотов = РегистрыНакопления.СтоимостьТоваровПоТПО.Обороты(, , 
			Новый Структура("DocumentBase", СтрокаServices.Service));
			
		ТЗОборотов.Колонки.Добавить("СуммаСКоэффициентом", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "СуммаСКоэффициентом");
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗОборотов.ВыгрузитьКолонку("FiscalSum"), СтрокаServices.SumWithCoefficient, ТЗОборотов, "СуммаСКоэффициентом");
		
		Для Каждого СтрокаТЗОборотов Из ТЗОборотов Цикл
			
			// сторно
			ДвиженияПоРегиструСтоимостьТоваровПоТПО.ДобавитьЗапись(
					Дата,
					СтрокаТЗОборотов.DocumentBase,
					СтрокаТЗОборотов.ЭлементФормированияСтоимости,
					СтрокаТЗОборотов.AU,
					СтрокаТЗОборотов.Activity,
					-СтрокаТЗОборотов.FiscalSum);
	
			// сумма с коэффициентом
			ДвиженияПоРегиструСтоимостьТоваровПоТПО.ДобавитьЗапись(
					Дата,
					СтрокаТЗОборотов.DocumentBase,
					СтрокаТЗОборотов.ЭлементФормированияСтоимости,
					СтрокаТЗОборотов.AU,
					СтрокаТЗОборотов.Activity,
					СтрокаТЗОборотов.СуммаСКоэффициентом);
			
		КонецЦикла;
		              		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоDutiesRecharged(Отказ)
	
	ДвиженияПоРегиструDutiesRecharged = Движения.DutiesRecharged;
	ДвиженияПоРегиструDutiesRecharged.Записывать = Истина;
	ДвиженияПоРегиструDutiesRecharged.Записать();     
	
	Если Coefficient = Перечисления.AgentInvoicesCoefficients.WithoutCoefficient Тогда 
		Возврат;
	КонецЕсли;
	
	//сделаем сторно движений для каждого сервиса с коэффициентом <> 1
	Для Каждого СтрокаServices Из Services Цикл 
		
		Если СтрокаServices.Coefficient = 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТЗОборотов = РегистрыНакопления.DutiesRecharged.Обороты(, , 
			Новый Структура("ДокументОснование", СтрокаServices.Service));
			
		ТЗОборотов.Колонки.Добавить("СуммаСКоэффициентом", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "СуммаСКоэффициентом");
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗОборотов.ВыгрузитьКолонку("СуммаФискальная"), СтрокаServices.SumWithCoefficient, ТЗОборотов, "СуммаСКоэффициентом");
		
		Для Каждого СтрокаТЗОборотов Из ТЗОборотов Цикл
			
			// сторно
			Движение = ДвиженияПоРегиструDutiesRecharged.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗОборотов);
			Движение.Период = Дата;
			Движение.СуммаФискальная = -СтрокаТЗОборотов.СуммаФискальная;
	
			// сумма с коэффициентом
			Движение = ДвиженияПоРегиструDutiesRecharged.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗОборотов);
			Движение.Период = Дата;
			Движение.СуммаФискальная = СтрокаТЗОборотов.СуммаСКоэффициентом;
			 			
		КонецЦикла;
		              		
	КонецЦикла;
	
КонецПроцедуры

