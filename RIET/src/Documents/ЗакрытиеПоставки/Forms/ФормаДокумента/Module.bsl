
////////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		Объект.ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Поставка) Тогда
		
		ОбновитьТаблицы();
		Если Объект.Сопоставление.Количество() = 0 Тогда
			ЗаполнитьТЧСопоставлениеНаСервере();
		КонецЕсли;
	
	КонецЕсли;
	
	Элементы.InvoiceLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedInvoiceLines);
	Элементы.ItemsOfCustomsFilesLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedItemsOfCustomsFilesLines);
	
	ЗаполнитьInvoiceLinesClassificationИРИЗППриНеобходимости();	
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.ILMОткрытие, Объект.Ссылка);
	
	// { RGS ASeryakov 22/11/2017 10:00:00 AM - S-I-0003927
	Если ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		ТолькоПросмотр = ПроцедурыОбменаДанными.ПроверитьMatchingВРегистреДляЗапрета(Объект.Ссылка);
	КонецЕсли;
	// } RGS ASeryakov 22/11/2017 10:00:00 AM - S-I-0003927
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьInvoiceLinesClassificationИРИЗППриНеобходимости()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура("InvoiceLinesMatching", Объект.Ссылка);
	СтруктураТекстов = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(InvoiceLinesClassification) Тогда
		
		СтруктураТекстов.Вставить("InvoiceLinesClassification",
			"ВЫБРАТЬ
			|	InvoiceLinesClassification.Ссылка КАК InvoiceLinesClassification
			|ИЗ
			|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
			|ГДЕ
			|	InvoiceLinesClassification.InvoiceLinesMatching = &InvoiceLinesMatching");
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РИЗП) Тогда
		
		РИЗП = CustomsСервер.ПолучитьПроведенныйРИЗП(Объект.Ссылка);
		
		//СтруктураТекстов.Вставить("РИЗП",
		//	"ВЫБРАТЬ
		//	|	РаспределениеИмпортаПоЗакрытиюПоставки.Ссылка КАК РИЗП
		//	|ИЗ
		//	|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки КАК РаспределениеИмпортаПоЗакрытиюПоставки
		//	|ГДЕ
		//	|	РаспределениеИмпортаПоЗакрытиюПоставки.ShipmentСlosing = &InvoiceLinesMatching
		//	|	И (НЕ РаспределениеИмпортаПоЗакрытиюПоставки.ПометкаУдаления)");
		
	КонецЕсли;
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	Если СтруктураРезультатов.Свойство("InvoiceLinesClassification") Тогда
		
		ВыборкаInvoiceLinesClassification = СтруктураРезультатов.InvoiceLinesClassification.Выбрать();
		Если ВыборкаInvoiceLinesClassification.Следующий() Тогда
			InvoiceLinesClassification = ВыборкаInvoiceLinesClassification.InvoiceLinesClassification;
			Элементы.InvoiceLinesClassification.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		
	КонецЕсли;
		
	//Если СтруктураРезультатов.Свойство("РИЗП") Тогда
	//	
	//	ВыборкаРИЗП = СтруктураРезультатов.РИЗП.Выбрать();
	//	Если ВыборкаРИЗП.Следующий() Тогда
	//		РИЗП = ВыборкаРИЗП.РИЗП;
	//		Элементы.РИЗП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Сделаем новый документ по-умолчанию модифицированным
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Запомним время начала проведения, чтобы потом сохранить проведения в системе
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	//КонецЕсли;
	
	// Дозаполним реквизиты интерактивного изменения
	РГСофт.ЗаполнитьModification(ТекущийОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// Настроим видимость кнопок Unpost и Save draft
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	// Обновим ILC и РИЗП так как они могли создаться во время записи
	ЗаполнитьInvoiceLinesClassificationИРИЗППриНеобходимости();
	
	// Зафиксируем время проведения
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.ILMИнтерактивноеПроведение, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ШАПКА

&НаКлиенте
Процедура ParentCompanyНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Заполним список выбора возможных Sold-to
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	// Возьмем все различные Sold-to из Invoice lines
	Для Каждого СтрокаТаблицы Из InvoiceLines Цикл
		Если ДанныеВыбора.НайтиПоЗначению(СтрокаТаблицы.ParentCompany) = Неопределено Тогда
			ДанныеВыбора.Добавить(СтрокаТаблицы.ParentCompany);
		КонецЕсли; 			 
	КонецЦикла;
	
	// Возьмем все различные Sold-to из Items of customs files lines
	Для Каждого СтрокаТаблицы Из ItemsOfCustomsFilesLines Цикл
		Если ДанныеВыбора.НайтиПоЗначению(СтрокаТаблицы.ParentCompany) = Неопределено Тогда
			ДанныеВыбора.Добавить(СтрокаТаблицы.ParentCompany);
		КонецЕсли; 			 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ParentCompanyПриИзменении(Элемент)

	Элементы.InvoiceLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedInvoiceLines);
    Элементы.ItemsOfCustomsFilesLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedItemsOfCustomsFilesLines);
	Элементы.InvoiceLines.Обновить();
	Элементы.ItemsOfCustomsFilesLines.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Refresh(Команда)
	
	ОбновитьТаблицы();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// INVOICE LINES

&НаКлиенте
Процедура ShowMatchedInvoiceLinesПриИзменении(Элемент)
	
	Элементы.InvoiceLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedInvoiceLines);
	Элементы.InvoiceLines.Обновить();
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаКлиенте
Процедура InvoiceLinesПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимыВыделенияТабличныхПолей();	
	// ЕСЛИ НЕ УХОДИТЬ НА СЕРВЕР С КОНТЕКСТОМ - ПЛАТФОРМА НЕ ПЕРЕРИСОВЫВАЕТ ФОРМЫ НЕ СМОТРЯ НИ НА ЧТО
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЗаполнитьКолонкиFits(Неопределено, Неопределено, Неопределено);
	Иначе
		ЗаполнитьКолонкиFits(Элемент.ТекущиеДанные.ParentCompany, Элемент.ТекущиеДанные.PartNo, Элемент.ТекущиеДанные.PermanentTemporary);
	КонецЕсли;
	
	ОбновитьSelectedQty(InvoiceLinesSelectedQty, Элемент.ВыделенныеСтроки, InvoiceLines);
	
КонецПроцедуры

&НаКлиенте
Процедура InvoiceLinesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	InvoiceLine = Элемент.ТекущиеДанные.InvoiceLine;
	Если ЗначениеЗаполнено(InvoiceLine) Тогда 
		ПоказатьЗначение(,InvoiceLine);
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ITEMS OF CUSTOMS FILES LINES

&НаКлиенте
Процедура ShowMatchedItemsOfCustomsFilesLinesПриИзменении(Элемент)
	
	Элементы.ItemsOfCustomsFilesLines.ОтборСтрок = ПолучитьОтборСтрок(ParentCompany, ShowMatchedItemsOfCustomsFilesLines);
	Элементы.ItemsOfCustomsFilesLines.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsOfCustomsFilesLinesПриАктивизацииСтроки(Элемент)
	
	УстановитьРежимыВыделенияТабличныхПолей();
	// ЕСЛИ НЕ УХОДИТЬ НА СЕРВЕР С КОНТЕКСТОМ - ПЛАТФОРМА НЕ ПЕРЕРИСОВЫВАЕТ ФОРМЫ НЕ СМОТРЯ НИ НА ЧТО
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЗаполнитьКолонкиFits(Неопределено, Неопределено, Неопределено);
	Иначе
		ЗаполнитьКолонкиFits(Элемент.ТекущиеДанные.ParentCompany, Элемент.ТекущиеДанные.PartNo, Элемент.ТекущиеДанные.PermanentTemporary);
	КонецЕсли;
	ОбновитьSelectedQty(ItemsOfCustomsFilesLinesSelectedQty, Элемент.ВыделенныеСтроки, ItemsOfCustomsFilesLines);
	
КонецПроцедуры 

&НаКлиенте
Процедура ItemsOfCustomsFilesLinesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ItemOfCustomsFileLine = Элемент.ТекущиеДанные.ItemOfCustomsFileLine;
	Если ЗначениеЗаполнено(ItemOfCustomsFileLine) Тогда 
		ПоказатьЗначение(,ItemOfCustomsFileLine);
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ПОКАЗАТЕЛИ КОЛИЧЕСТВА В СТРОКАХ

&НаКлиенте
Процедура ОбновитьSelectedQty(SelectedQty, ВыделенныеСтроки, Данные)
	
	SelectedQty = 0;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		SelectedQty = SelectedQty + Данные.НайтиПоИдентификатору(ВыделеннаяСтрока).Qty;
	КонецЦикла;
		
	ОбновитьQtyDifferences();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьQtyDifferences()
	
	ЧислоМакс = Макс(InvoiceLinesSelectedQty, ItemsOfCustomsFilesLinesSelectedQty);
	ЧислоМин = Мин(InvoiceLinesSelectedQty, ItemsOfCustomsFilesLinesSelectedQty);
	
	QtyDifferences = ЧислоМакс - ЧислоМин;
	
КонецПроцедуры

&НаКлиенте
Процедура Match(Команда)
	
	// Это мегатупость, что приходится вызывать сервер с контекстом, но по-другому таблицы не хотят обновляться
	MatchНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура MatchНаСервере()
	
	ВыделенныеInvoiceLines = Элементы.InvoiceLines.ВыделенныеСтроки;
	ВыделенныеItemsOfCustomsFilesLines = Элементы.ItemsOfCustomsFilesLines.ВыделенныеСтроки;
	КоличествоВыделенныхInvoiceLines = ВыделенныеInvoiceLines.Количество();
	КоличествоВыделенныхItemsOfCustomsFilesLines = ВыделенныеItemsOfCustomsFilesLines.Количество();
	
	Если КоличествоВыделенныхInvoiceLines И КоличествоВыделенныхItemsOfCustomsFilesLines Тогда
		
		КоличествоСоздаваемыхСтрок = Макс(КоличествоВыделенныхInvoiceLines, КоличествоВыделенныхItemsOfCustomsFilesLines);
		ИндексВыделенныхInvoiceLines = 0;
		ИндексВыделенныхItemsOfCustomsFilesLines = 0;
		Для Счетчик = 1 По КоличествоСоздаваемыхСтрок Цикл
			
			СтрокаInvoiceLines = InvoiceLines.НайтиПоИдентификатору(ВыделенныеInvoiceLines[ИндексВыделенныхInvoiceLines]);
			СтрокаItemsOfCustomsFilesLines = ItemsOfCustomsFilesLines.НайтиПоИдентификатору(ВыделенныеItemsOfCustomsFilesLines[ИндексВыделенныхItemsOfCustomsFilesLines]);
			Если СтрокаInvoiceLines.ParentCompany = СтрокаItemsOfCustomsFilesLines.ParentCompany Тогда
				
				СтрокаТЧ = Объект.Сопоставление.Добавить();
				СтрокаТЧ.СтрокаИнвойса = СтрокаInvoiceLines.InvoiceLine;
				СтрокаТЧ.ТоварСтрокиГТД = СтрокаItemsOfCustomsFilesLines.ItemOfCustomsFileLine;
				Модифицированность = Истина;
				
			КонецЕсли; 
			
			Если КоличествоВыделенныхInvoiceLines > 1 Тогда
				ИндексВыделенныхInvoiceLines = ИндексВыделенныхInvoiceLines + 1;
			ИначеЕсли КоличествоВыделенныхItemsOfCustomsFilesLines > 1 Тогда
				ИндексВыделенныхItemsOfCustomsFilesLines = ИндексВыделенныхItemsOfCustomsFilesLines + 1;
			КонецЕсли; 
						
		КонецЦикла; 
		
		ЗаполнитьКолонкуMatched(InvoiceLines, "InvoiceLine", Объект.Сопоставление, "СтрокаИнвойса");
		ЗаполнитьКолонкуMatched(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine", Объект.Сопоставление, "ТоварСтрокиГТД");
	
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// СОПОСТАВЛЕНИЕ

&НаКлиенте
Процедура Fill(Команда)
	
	Если Объект.Сопоставление.Количество() > 0 Тогда 
		
		ТекстВопроса = "Clear matched lines?";
				
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаClearMatchedLines", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Matched");
		
		Возврат;
		
	КонецЕсли;
	        	
	ЗаполнитьТЧСопоставлениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаClearMatchedLines(Результат, Параметры) Экспорт
	
	ЗаполнитьТЧСопоставлениеНаСервере(Результат = КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСопоставлениеНаСервере(Перезаполнить=Ложь)
	
	Если Перезаполнить Тогда 
		Объект.Сопоставление.Очистить();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ParentCompany, PartNo, PermanentTemporary");
	Для Каждого СтрокаInvoiceLines Из InvoiceLines Цикл
		
		Если СтрокаInvoiceLines.Matched И Не Перезаполнить Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаInvoiceLines.ParentCompany)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаInvoiceLines.PartNo)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаInvoiceLines.PermanentTemporary) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.ParentCompany = СтрокаInvoiceLines.ParentCompany;
		СтруктураПоиска.PartNo = СтрокаInvoiceLines.PartNo;
		СтруктураПоиска.PermanentTemporary = СтрокаInvoiceLines.PermanentTemporary;
		
		НайденныеСтроки = ItemsOfCustomsFilesLines.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрока = Объект.Сопоставление.Добавить();
			НоваяСтрока.СтрокаИнвойса = СтрокаInvoiceLines.InvoiceLine;
			НоваяСтрока.ТоварСтрокиГТД = НайденнаяСтрока.ItemOfCustomsFileLine;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьКолонкуMatched(InvoiceLines, "InvoiceLine", Объект.Сопоставление, "СтрокаИнвойса");
	ЗаполнитьКолонкуMatched(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine", Объект.Сопоставление, "ТоварСтрокиГТД");
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставлениеСтрокаИнвойсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("Ссылка", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(InvoiceLines, "InvoiceLine"));
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);				
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставлениеСтрокаИнвойсаПриИзменении(Элемент)
	
	ЗаполнитьКолонкуMatched(InvoiceLines, "InvoiceLine", Объект.Сопоставление, "СтрокаИнвойса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставлениеТоварСтрокиГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("Ссылка", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine"));
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);				
	ОткрытьФорму("Справочник.ТоварыСтрокГТД.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСопоставлениеТоварСтрокиГТДПриИзменении(Элемент)
	
	ЗаполнитьКолонкуMatched(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine", Объект.Сопоставление, "ТоварСтрокиГТД");
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ОбъектСопоставлениеПослеУдаления(Элемент)
	
	// Опять мегатупость, что нужно уходить на сервер с контектом, но иначе таблицы не обновляются
	// МОЖЕТ БЫТЬ СДЕЛАТЬ ПРОЦЕДУРУ ЗАПОЛНИТЬ КОЛОНКУ MATCHED СЕРВЕРНОЙ?
	ПослеУдаленияСопоставленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСопоставленияНаСервере()
	
	ЗаполнитьКолонкуMatched(InvoiceLines, "InvoiceLine", Объект.Сопоставление, "СтрокаИнвойса");
	ЗаполнитьКолонкуMatched(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine", Объект.Сопоставление, "ТоварСтрокиГТД");
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

// ДОДЕЛАТЬ
&НаСервере
Процедура ОбновитьТаблицы()
	
	Запрос = Новый Запрос;	
	
	Запрос.УстановитьПараметр("Shipment", Объект.Поставка);	
	
	// ОБЪЕДИНИТЬ ЗАПРОСЫ В ПАКЕТ
	МассивInvoiceLines = Новый Массив;
	Если ТипЗнч(Объект.Поставка) = Тип("ДокументСсылка.Поставка") Тогда
		МассивInvoiceLines = Документы.Поставка.ПолучитьМассивСтрокИнвойсовПоставки(Объект.Поставка);
	ИначеЕсли ТипЗнч(Объект.Поставка) = Тип("ДокументСсылка.ExportShipment") Тогда   
		МассивInvoiceLines = Документы.ExportShipment.ПолучитьItemsOfExportShipment(Объект.Поставка);
	ИначеЕсли ТипЗнч(Объект.Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда   
		МассивInvoiceLines = Документы.TemporaryImpExpTransactions.ПолучитьItemsOfTemporaryImpExpTransactions(Объект.Поставка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("InvoiceLines", МассивInvoiceLines);
	
	Запрос.Текст =
	    "ВЫБРАТЬ
	    |	InvoiceLines.Ссылка КАК InvoiceLine,
	    |	ВЫБОР
	    |		КОГДА InvoiceLines.Инвойс <> ЗНАЧЕНИЕ(Документ.Инвойс.ПустаяСсылка)
	    |			ТОГДА InvoiceLines.Инвойс.Номер
	    |		КОГДА InvoiceLines.ExportRequest <> ЗНАЧЕНИЕ(Документ.ExportRequest.ПустаяСсылка)
	    |			ТОГДА InvoiceLines.ExportRequest.Номер
	    |		ИНАЧЕ """"
	    |	КОНЕЦ КАК InvoiceNo,
	    |	InvoiceLines.НомерСтрокиИнвойса КАК InvoiceLineNo,
	    |	InvoiceLines.НаименованиеТовара КАК Description,
	    |	InvoiceLines.КодПоИнвойсу КАК PartNo,
	    |	InvoiceLines.Количество КАК Qty,
	    |	InvoiceLines.ЕдиницаИзмерения КАК UOM,
	    |	InvoiceLines.SoldTo КАК ParentCompany,
	    |	InvoiceLines.Сумма КАК Sum,
	    |	InvoiceLines.СтранаПроисхождения КАК CountryOfOrigin,
	    |	InvoiceLines.PermanentTemporary
	    |ИЗ
	    |	Справочник.СтрокиИнвойса КАК InvoiceLines
	    |ГДЕ
	    |	InvoiceLines.Ссылка В(&InvoiceLines)
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	InvoiceNo,
	    |	InvoiceLineNo
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ItemsOfCustomsFilesLines.Ссылка КАК ItemOfCustomsFileLine,
	    |	ItemsOfCustomsFilesLines.Код КАК ItemOfCustomsFileLineNo,
	    |	ItemsOfCustomsFilesLines.Характеристика КАК ItemOfCustomsFileLineDescription,
	    |	ItemsOfCustomsFilesLines.Владелец КАК CustomsFileLine,
	    |	ItemsOfCustomsFilesLines.Владелец.НомерСтрокиГТД КАК CustomsFileLineNo,
	    |	ItemsOfCustomsFilesLines.Владелец.ОписаниеТовара КАК CustomsFileLineDescription,
	    |	ItemsOfCustomsFilesLines.МаркировкаТовара КАК PartNo,
	    |	ItemsOfCustomsFilesLines.Количество КАК Qty,
	    |	ItemsOfCustomsFilesLines.НазваниеЕдиницыИзмерения КАК UOMName,
	    |	ItemsOfCustomsFilesLines.Владелец.ГТД.SoldTo КАК ParentCompany,
	    |	ItemsOfCustomsFilesLines.Владелец.СтатистическаяСтоимость КАК StatisticalCost,
	    |	ItemsOfCustomsFilesLines.Владелец.КодСтраныПроисхождения КАК CountryOfOriginCode,
	    |	ItemsOfCustomsFilesLines.Владелец.ГТД.Regime.PermanentTemporary КАК PermanentTemporary
	    |ИЗ
	    |	Справочник.ТоварыСтрокГТД КАК ItemsOfCustomsFilesLines
	    |ГДЕ
	    |	НЕ ItemsOfCustomsFilesLines.ПометкаУдаления
	    |	И НЕ ItemsOfCustomsFilesLines.Владелец.ПометкаУдаления
	    |	И НЕ ItemsOfCustomsFilesLines.Владелец.ГТД.ПометкаУдаления
	    |	И ItemsOfCustomsFilesLines.Владелец.ГТД.Shipment = &Shipment
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ItemsOfCustomsFilesLines.Владелец.ГТД.Номер,
	    |	CustomsFileLineNo,
	    |	ItemOfCustomsFileLineNo
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	CustomsFileLinePresentedDocuments.Ссылка КАК CustomsFileLine,
	    |	CustomsFileLinePresentedDocuments.Номер
	    |ИЗ
	    |	Справочник.СтрокиГТД.ПредоставленныеДокументы КАК CustomsFileLinePresentedDocuments
	    |ГДЕ
	    |	НЕ CustomsFileLinePresentedDocuments.Ссылка.ПометкаУдаления
	    |	И CustomsFileLinePresentedDocuments.Ссылка.ГТД.Shipment = &Shipment
	    |	И CustomsFileLinePresentedDocuments.КодВидаДокумента = ""04021""";
		
	Результаты = Запрос.ВыполнитьПакет();
		
	ВыборкаInvoiceLines = Результаты[0].Выбрать();
	InvoiceLines.Очистить();
	Пока ВыборкаInvoiceLines.Следующий() Цикл
		
		НоваяСтрокаInvoiceLines = InvoiceLines.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаInvoiceLines, ВыборкаInvoiceLines, "InvoiceLine, InvoiceNo, InvoiceLineNo, Description, Qty, UOM, ParentCompany, Sum, CountryOfOrigin, PermanentTemporary");
		НоваяСтрокаInvoiceLines.PartNo = ВРег(СокрЛП(ВыборкаInvoiceLines.PartNo));
		
		// Если мы закрываем Temp imp. / exp. transaction - значит это транзакция на перевод в постоянный режим - пометим товары как Permanent
		Если ТипЗнч(Объект.Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			НоваяСтрокаInvoiceLines.PermanentTemporary = Перечисления.PermanentTemporary.Permanent;	
		КонецЕсли;
		
	КонецЦикла;
	ЗаполнитьКолонкуMatched(InvoiceLines, "InvoiceLine", Объект.Сопоставление, "СтрокаИнвойса");
	
	ВыборкаItemsOfCustomsFilesLines = Результаты[1].Выбрать();
	ItemsOfCustomsFilesLines.Очистить();
	Пока ВыборкаItemsOfCustomsFilesLines.Следующий() Цикл
		
		НоваяСтрокаItemsOfCustomsFilesLines = ItemsOfCustomsFilesLines.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаItemsOfCustomsFilesLines, ВыборкаItemsOfCustomsFilesLines, "ItemOfCustomsFileLine, ItemOfCustomsFileLineNo, ItemOfCustomsFileLineDescription, CustomsFileLine, CustomsFileLineNo, CustomsFileLineDescription, Qty, UOMName, ParentCompany, StatisticalCost, CountryOfOriginCode, PermanentTemporary");
		НоваяСтрокаItemsOfCustomsFilesLines.PartNo = ВРег(СокрЛП(ВыборкаItemsOfCustomsFilesLines.PartNo));
		
	КонецЦикла;
	
	// Дозаполним номера инвойсов
	ТаблицаСвернутыхИнвойсов = Новый ТаблицаЗначений;
	ТаблицаСвернутыхИнвойсов.Колонки.Добавить("CustomsFileLine", Новый ОписаниеТипов("СправочникСсылка.СтрокиГТД"));
	ТаблицаСвернутыхИнвойсов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	
	ТаблицаНесвернутыхИнвойсов = Результаты[2].Выгрузить();	
	СтруктураПоиска = Новый Структура("CustomsFileLine");
	Пока ТаблицаНесвернутыхИнвойсов.Количество() Цикл
		
		ТекущаяСтрока = ТаблицаНесвернутыхИнвойсов[0];
		СтруктураПоиска.CustomsFileLine = ТекущаяСтрока.CustomsFileLine;
		НайденныеСтроки = ТаблицаНесвернутыхИнвойсов.НайтиСтроки(СтруктураПоиска);
		
		НоваяСтрока = ТаблицаСвернутыхИнвойсов.Добавить();
		НоваяСтрока.CustomsFileLine = ТекущаяСтрока.CustomsFileLine;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока.Номер = "" + НоваяСтрока.Номер + ", " + СокрЛП(НайденнаяСтрока.Номер);
			ТаблицаНесвернутыхИнвойсов.Удалить(НайденнаяСтрока);
		КонецЦикла;
		НоваяСтрока.Номер = Сред(НоваяСтрока.Номер, 3);
		
	КонецЦикла;
	ТаблицаСвернутыхИнвойсов.Индексы.Добавить("CustomsFileLine");
	
	Для Каждого СтрокаТаблицы Из ItemsOfCustomsFilesLines Цикл
		
		СтруктураПоиска.CustomsFileLine = СтрокаТаблицы.CustomsFileLine;
		НайденныеСтроки = ТаблицаСвернутыхИнвойсов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаТаблицы.InvoiceNo = НайденныеСтроки[0].Номер;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьКолонкуMatched(ItemsOfCustomsFilesLines, "ItemOfCustomsFileLine", Объект.Сопоставление, "ТоварСтрокиГТД");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКолонкуMatched(Таблица, ИмяРеквизитаТаблицы, ТЧ, ИмяРеквизитаТЧ)
	
	СтруктураПоиска = Новый Структура(ИмяРеквизитаТЧ);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтруктураПоиска[ИмяРеквизитаТЧ] = СтрокаТаблицы[ИмяРеквизитаТаблицы];
		СтрокаТаблицы.Matched = ТЧ.НайтиСтроки(СтруктураПоиска).Количество() > 0;
		
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОтборСтрок(ParentCompany, Show)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ParentCompany) Тогда
		СтруктураОтбора.Вставить("ParentCompany", ParentCompany);
	КонецЕсли; 
	Если НЕ Show Тогда
		СтруктураОтбора.Вставить("Matched", Ложь);
	КонецЕсли; 
	Возврат Новый ФиксированнаяСтруктура(СтруктураОтбора); 
		
КонецФункции

&НаКлиенте
Процедура УстановитьРежимыВыделенияТабличныхПолей()
	
	Элементы.InvoiceLines.РежимВыделения = ?(Элементы.ItemsOfCustomsFilesLines.ВыделенныеСтроки.Количество() > 1, РежимВыделенияТаблицы.Одиночный, РежимВыделенияТаблицы.Множественный);
	Элементы.ItemsOfCustomsFilesLines.РежимВыделения = ?(Элементы.InvoiceLines.ВыделенныеСтроки.Количество() > 1, РежимВыделенияТаблицы.Одиночный, РежимВыделенияТаблицы.Множественный);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиFits(ТекParentCompany, ТекPartNo, ТекPermanentTemporary)
	
	Если ЗначениеЗаполнено(СокрЛП(ТекPartNo)) Тогда
	
		Для каждого СтрокаТаблицы ИЗ InvoiceLines Цикл
			СтрокаТаблицы.Fits = СтрокаТаблицы.ParentCompany = ТекParentCompany И СтрокаТаблицы.PartNo = ТекPartNo И СтрокаТаблицы.PermanentTemporary = ТекPermanentTemporary;			
		КонецЦикла;

		Для каждого СтрокаТаблицы ИЗ ItemsOfCustomsFilesLines Цикл
			СтрокаТаблицы.Fits = СтрокаТаблицы.ParentCompany = ТекParentCompany И СтрокаТаблицы.PartNo = ТекPartNo И СтрокаТаблицы.PermanentTemporary = ТекPermanentTemporary;			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТаблицы ИЗ InvoiceLines Цикл
			СтрокаТаблицы.Fits = Ложь;			
		КонецЦикла;

		Для каждого СтрокаТаблицы ИЗ ItemsOfCustomsFilesLines Цикл
			СтрокаТаблицы.Fits = Ложь;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// RG-Soft Ставров 17.10.2018  
&НаКлиенте
Процедура ПроверенПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если Объект.Проверен Тогда
		
		СписокРазрешенных = Новый СписокЗначений;
		СписокРазрешенных.Добавить("Проверен");
		
		УстановитьДоступностьРеквизитов(ЭтаФорма, СписокРазрешенных, Ложь);
		
	Иначе
		
		СписокТолькоПросмотр = Новый СписокЗначений;
		СписокТолькоПросмотр.Добавить("Номер");
		СписокТолькоПросмотр.Добавить("Проведен");
		СписокТолькоПросмотр.Добавить("ПометкаУдаления");
		СписокТолькоПросмотр.Добавить("InvoiceLinesDescription1");
		СписокТолькоПросмотр.Добавить("InvoiceLinesSelectedQty");
		СписокТолькоПросмотр.Добавить("QtyDifferences");
		СписокТолькоПросмотр.Добавить("ItemsOfCustomsFilesLinesCustomsFileLineDescription");
		СписокТолькоПросмотр.Добавить("ItemsOfCustomsFilesLinesSelectedQty");
		СписокТолькоПросмотр.Добавить("ItemsOfCustomsFilesLinesItemOfCustomsFileLineDescription1");
		СписокТолькоПросмотр.Добавить("CreatedBy");
		СписокТолькоПросмотр.Добавить("CreationDate");
		СписокТолькоПросмотр.Добавить("ModifiedBy");
		СписокТолькоПросмотр.Добавить("ModificationDate");
		
		УстановитьДоступностьРеквизитов(ЭтаФорма, СписокТолькоПросмотр, Истина);
		
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов(ГруппаЭлементов, СписокЗначений, Доступность)
	
	Для Каждого ЭлементФормы Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ЭлементФормы.ТолькоПросмотр = Ложь;
			УстановитьДоступностьРеквизитов(ЭлементФормы, СписокЗначений, Доступность);
		Иначе 
			ВходитВСписок = (СписокЗначений.НайтиПоЗначению(ЭлементФормы.Имя) <> Неопределено);
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				ЭлементФормы.ТолькоПросмотр = ?(Доступность, ВходитВСписок, Не ВходитВСписок);
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
				ЭлементФормы.Доступность = Не ?(Доступность, ВходитВСписок, Не ВходитВСписок);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры