
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипЗначенияОснования = ТипЗнч(ДанныеЗаполнения);
	Если ТипЗначенияОснования = Тип("ДокументСсылка.Поставка")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ExportShipment")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		Поставка = ДанныеЗаполнения;		                                      
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(
		ДополнительныеСвойства.ВыборкаРеквизитовShipment);
	
	ПроверитьВозможностьИзмененияДокумента(
		Отказ,
		ДополнительныеСвойства.ВыборкаПроведенныхInvoiceLinesClassifications,
		ДополнительныеСвойства.ВыборкаПроведенныхBatchesOfCustomsFiles,
		ДополнительныеСвойства.ВыборкаTemporaryImportTransactionsOfOldItems);
	
	// Если документ нельзя изменять - дальше делать нечего
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПроверитьРеквизитыСДополнительнымиДанными(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаРеквизитовShipment,
		ДополнительныеСвойства.ВыборкаПохожихДокументов,
		ДополнительныеСвойства.НеобходимыеInvoiceLines,
		ДополнительныеСвойства.НеобходимыеItemsOfCustomsFilesLines,
		ДополнительныеСвойства.ТаблицаItems,
		ДополнительныеСвойства.ВыборкаTemporaryImportTransactionsOfCurrentItems,
		ДополнительныеСвойства.ТаблицаItemsOfCustomsFilesLines,
		ДополнительныеСвойства.ТаблицаСуммГТД,
		ДополнительныеСвойства.ТаблицаКоличестваВСопоставлении,
		ДополнительныеСвойства.ТаблицаCustomsFiles);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
	
	РГСофтКлиентСервер.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		РГСофт.ЗаполнитьCreation(ЭтотОбъект);	
	КонецЕсли;
			
	// Очистим таблицу от строк с пустыми реквизитами
	ИндексСтроки = 0;
	Пока ИндексСтроки < Сопоставление.Количество() Цикл
		
		СтрокаТЧ = Сопоставление[ИндексСтроки];
		Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаИнвойса) И ЗначениеЗаполнено(СтрокаТЧ.ТоварСтрокиГТД) Тогда
			ИндексСтроки = ИндексСтроки+1;
		Иначе
			Сопоставление.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Сопоставление.Свернуть("СтрокаИнвойса, ТоварСтрокиГТД", "");
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Поставка) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Shipment' is empty!",
			ЭтотОбъект, "Поставка", , Отказ);		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Date' is empty!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			ЭтотОбъект, "ProcessLevel", , Отказ);
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
			
	Если НЕ Сопоставление.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Table 'Matchings' is empty!",
			ЭтотОбъект, "Сопоставление", , Отказ);
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураПараметров.Вставить("Дата", Дата);	
	СтруктураПараметров.Вставить("Shipment", Поставка);
	
	СтруктураТекстов.Вставить("ПохожиеДокументы",
		"ВЫБРАТЬ
		|	InvoiceLinesMatching.Представление КАК Представление
		|ИЗ
		|	Документ.ЗакрытиеПоставки КАК InvoiceLinesMatching
		|ГДЕ
		|	InvoiceLinesMatching.Поставка = &Shipment
		|	И InvoiceLinesMatching.Ссылка <> &Ссылка");
		
	Если ЭтоНовый() ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтруктураТекстов.Вставить("РеквизитыShipment");
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда 
			
			СтруктураТекстов.РеквизитыShipment =
				"ВЫБРАТЬ
				|	ImportShipment.Номер,
				|	ImportShipment.Cleared,
				|	ImportShipment.Проведен,
				|	ImportShipment.ProcessLevel,
				|	ImportShipment.Coordinator КАК Specialist,
				|	ImportShipment.CCAJobReference
				|ИЗ
				|	Документ.Поставка КАК ImportShipment
				|ГДЕ
				|	ImportShipment.Ссылка = &Shipment";
				
		ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.ExportShipment") Тогда 	
						
			СтруктураТекстов.РеквизитыShipment = 
				"ВЫБРАТЬ
				|	ExportShipment.Номер,
				|	ExportShipment.Проведен,
				|	ExportShipment.ReleasedFromCustoms КАК Cleared,
				|	ExportShipment.ProcessLevel,
				|	ExportShipment.ExportSpecialist КАК Specialist,
				|	"""" КАК CCAJobReference
				|ИЗ
				|	Документ.ExportShipment КАК ExportShipment
				|ГДЕ
				|	ExportShipment.Ссылка = &Shipment";
				
		ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда 	
						
			СтруктураТекстов.РеквизитыShipment = 
				"ВЫБРАТЬ
				|	TemporaryImpExpTransaction.Номер,
				|	TemporaryImpExpTransaction.ProcessLevel,
				|	TemporaryImpExpTransaction.Проведен
				|ИЗ
				|	Документ.TemporaryImpExpTransactions КАК TemporaryImpExpTransaction
				|ГДЕ
				|	TemporaryImpExpTransaction.Ссылка = &Shipment";
				
		КонецЕсли; 
				
	КонецЕсли;
				
	Если Проведен Тогда
		
		СтруктураТекстов.Вставить("ПроведенныеInvoiceLinesClassification",
			"ВЫБРАТЬ
			|	InvoiceLinesClassification.Представление
			|ИЗ
			|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
			|ГДЕ
			|	InvoiceLinesClassification.InvoiceLinesMatching = &Ссылка
			|	И InvoiceLinesClassification.Проведен");
		
		//СтруктураТекстов.Вставить("ПроведенныеРИЗПы",
		//	"ВЫБРАТЬ
		//	|	РаспределениеИмпортаПоЗакрытиюПоставки.Представление
		//	|ИЗ
		//	|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки КАК РаспределениеИмпортаПоЗакрытиюПоставки
		//	|ГДЕ
		//	|	РаспределениеИмпортаПоЗакрытиюПоставки.ShipmentСlosing = &Ссылка
		//	|	И РаспределениеИмпортаПоЗакрытиюПоставки.Проведен");
		
		СтруктураТекстов.Вставить("ПроведенныеBatchesOfCustomsFiles",
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	BatchesOfCustomsFilesCustomsFiles.CCD.Представление КАК CustomsFileПредставление,
			|	BatchesOfCustomsFilesCustomsFiles.Ссылка.Представление КАК BatchOfCustomsFilesПредставление
			|ИЗ
			|	Документ.ЗакрытиеПоставки.Сопоставление КАК InvoiceLinesMatchingMatching
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.BatchesOfCustomsFiles.CCDs КАК BatchesOfCustomsFilesCustomsFiles
			|		ПО InvoiceLinesMatchingMatching.ТоварСтрокиГТД.Владелец.ГТД = BatchesOfCustomsFilesCustomsFiles.CCD
			|			И (BatchesOfCustomsFilesCustomsFiles.Ссылка.Проведен)
			|ГДЕ
			|	InvoiceLinesMatchingMatching.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.CustomsFile.Представление,
			|	BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.Ссылка.Представление
			|ИЗ
			|	Документ.ЗакрытиеПоставки.Сопоставление КАК InvoiceLinesMatchingMatching
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.BatchesOfCustomsFiles.CustomsFilesOfTemporaryImportExport КАК BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport
			|		ПО (BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.Ссылка.Проведен)
			|			И InvoiceLinesMatchingMatching.ТоварСтрокиГТД.Владелец.ГТД = BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.CustomsFile
			|ГДЕ
			|	InvoiceLinesMatchingMatching.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("TemporaryImportTransactionsOfOldItems",
			"ВЫБРАТЬ
			|	TemporaryImpExpTransactionsItems.Item.Представление КАК ItemПредставление,
			|	TemporaryImpExpTransactionsItems.Ссылка.Представление КАК TemporaryImportTransactionПредставление
			|ИЗ
			|	Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.TemporaryImpExpTransactions.Items КАК TemporaryImpExpTransactionsItems
			|		ПО ЗакрытиеПоставкиСопоставление.СтрокаИнвойса = TemporaryImpExpTransactionsItems.Item
			|			И (TemporaryImpExpTransactionsItems.Ссылка.Проведен)
			|			И (TemporaryImpExpTransactionsItems.Ссылка.Дата >= &Дата)
			|ГДЕ
			|	ЗакрытиеПоставкиСопоставление.Ссылка = &Ссылка");
						
	КонецЕсли; 		
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтруктураТекстов.Вставить("РеквизитыCustomsFiles",
			"ВЫБРАТЬ
			|	CustomsFiles.Ссылка КАК CustomsFile,
			|	CustomsFiles.Проведен,
			|	CustomsFiles.SoldTo.UseFiscalClassificationOfItems КАК UseFiscalClassificationOfItems
			|ИЗ
			|	Документ.ГТД КАК CustomsFiles
			|ГДЕ
			|	CustomsFiles.Shipment = &Shipment
			|	И НЕ CustomsFiles.ПометкаУдаления");
						
		СтруктураПараметров.Вставить("ItemsИзСопоставления", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Сопоставление, "СтрокаИнвойса"));
		
		СтруктураТекстов.Вставить("РеквизитыItemsИзСопоставления",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК Item,
			|	Items.SoldTo КАК ParentCompany,
			|	Items.КостЦентр КАК AU,
			|	Items.КостЦентр.Segment КАК Segment,
			|	Items.Классификатор КАК ERPTreatment,
			|	Items.PermanentTemporary,
			|	Items.Количество КАК Qty,
			|	Items.Инвойс КАК ImportInvoice,
			|	Items.Инвойс.Проверен КАК ImportInvoiceFinal,
			|	Items.ExportRequest
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|ГДЕ
			|	Items.Ссылка В(&ItemsИзСопоставления)");
			
		СтруктураТекстов.Вставить("TemporaryImportTransactionsOfCurrentItems",
			"ВЫБРАТЬ
			|	TemporaryImpExpTransactionsItems.Item,
			|	TemporaryImpExpTransactionsItems.Ссылка КАК TemporaryImportTransaction
			|ИЗ
			|	Документ.TemporaryImpExpTransactions.Items КАК TemporaryImpExpTransactionsItems
			|ГДЕ
			|	TemporaryImpExpTransactionsItems.Item В(&ItemsИзСопоставления)
			|	И TemporaryImpExpTransactionsItems.Ссылка.Проведен
			|	И TemporaryImpExpTransactionsItems.Ссылка.Дата >= &Дата");
			
		СтруктураПараметров.Вставить("ItemsOfCustomsFilesLines", Сопоставление.ВыгрузитьКолонку("ТоварСтрокиГТД"));
		СтруктураТекстов.Вставить("РеквизитыItemsOfCustomsFilesLines",
			"ВЫБРАТЬ
			|	ItemsOfCustomsFilesLines.Ссылка КАК ItemOfCustomsFileLine,
			|	ItemsOfCustomsFilesLines.Владелец.НомерСтрокиГТД КАК CustomsFileLineNo,
			|	ItemsOfCustomsFilesLines.Владелец.TemporaryImportDate КАК TemporaryImportDate,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД КАК CustomsFile,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД.Номер КАК CustomsFileNo,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД.SoldTo КАК ParentCompany,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД.Отправитель КАК Отправитель,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД.Regime КАК Regime,
			|	ItemsOfCustomsFilesLines.Владелец.ГТД.Regime.PermanentTemporary КАК PermanentTemporary
			|ИЗ
			|	Справочник.ТоварыСтрокГТД КАК ItemsOfCustomsFilesLines
			|ГДЕ
			|	ItemsOfCustomsFilesLines.Ссылка В(&ItemsOfCustomsFilesLines)");
			
		СтруктураПараметров.Вставить("Сопоставление", Сопоставление);
		СтруктураТекстов.Вставить("СозданиеВременнойТаблицыСопоставления",
			"ВЫБРАТЬ
			|	Сопоставление.СтрокаИнвойса КАК InvoiceLine,
			|	Сопоставление.ТоварСтрокиГТД КАК ItemOfCustomsFileLine
			|ПОМЕСТИТЬ Сопоставление
			|ИЗ
			|	&Сопоставление КАК Сопоставление");
			
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда		
			
			// НУЖНО ДЛЯ TemporaryImpExpTransaction ТОЖЕ СДЕЛАТЬ РЕГИСТР TempToPermItemsWithoutCustomsFiles И ПРОВЕРЯТЬ ОСТАТКИ ПОСЛЕ ДВИЖЕНИЙ ПО НЕМУ
			СтруктураТекстов.Вставить("НеобходимыеInvoiceLines",
				"ВЫБРАТЬ
				|	TemporaryImpExpTransactionItems.Item КАК InvoiceLine
				|ИЗ
				|	Документ.TemporaryImpExpTransactions.Items КАК TemporaryImpExpTransactionItems
				|ГДЕ
				|	TemporaryImpExpTransactionItems.Ссылка = &Shipment");

		КонецЕсли;
			
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда
			
			СтруктураТекстов.Вставить("СуммыГТД",
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВложенныйЗапрос.CustomsFile,
				|	ВложенныйЗапрос.TotalInvoiceAmount,
				|	СУММА(ВложенныйЗапрос.TotalCharges) КАК TotalCharges
				|ИЗ
				|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Сопоставление.InvoiceLine.Инвойс КАК Invoice,
				|		Сопоставление.InvoiceLine.Инвойс.ОбщаяСумма КАК TotalCharges,
				|		Сопоставление.ItemOfCustomsFileLine.Владелец.ГТД КАК CustomsFile,
				|		Сопоставление.ItemOfCustomsFileLine.Владелец.ГТД.TotalInvoiceAmount КАК TotalInvoiceAmount
				|	ИЗ
				|		Сопоставление КАК Сопоставление) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.CustomsFile,
				|	ВложенныйЗапрос.TotalInvoiceAmount");
			
		КонецЕсли;
		
		СтруктураТекстов.Вставить("НеобходимыеItemsOfCustomsFilesLines",
			"ВЫБРАТЬ
			|	ItemsOfCustomsFilesLines.Ссылка КАК ItemOfCustomsFileLine
			|ИЗ
			|	Справочник.ТоварыСтрокГТД КАК ItemsOfCustomsFilesLines
			|ГДЕ
			|	НЕ ItemsOfCustomsFilesLines.ПометкаУдаления
			|	И НЕ ItemsOfCustomsFilesLines.Владелец.ПометкаУдаления
			|	И ItemsOfCustomsFilesLines.Владелец.ГТД.Shipment = &Shipment");
			
		СтруктураТекстов.Вставить("КоличествоВСопоставлении",
			"ВЫБРАТЬ
			|	Сопоставление.InvoiceLine КАК СтрокаИнвойса,
			|	Сопоставление.ItemOfCustomsFileLine КАК ТоварСтрокиГТД,
			|	ПРЕДСТАВЛЕНИЕ(Сопоставление.InvoiceLine) КАК ПредставлениеСтрокиИнвойса,
			|	ПРЕДСТАВЛЕНИЕ(Сопоставление.ItemOfCustomsFileLine) КАК ПредставлениеТовараСтрокиГТД,
			|	Items.Количество КАК КоличествоСтрокиИнвойса,
			|	ItemsOfCustomsFilesLines.Количество КАК КоличествоТовараСтрокиГТД
			|ИЗ
			|	Сопоставление КАК Сопоставление
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
			|		ПО Сопоставление.InvoiceLine = Items.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварыСтрокГТД КАК ItemsOfCustomsFilesLines
			|		ПО Сопоставление.ItemOfCustomsFileLine = ItemsOfCustomsFilesLines.Ссылка");
					
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаПроведенныхInvoiceLinesClassifications", Неопределено);
	Если СтруктураРезультатов.Свойство("ПроведенныеInvoiceLinesClassification") Тогда
		ДополнительныеСвойства.ВыборкаПроведенныхInvoiceLinesClassifications = СтруктураРезультатов.ПроведенныеInvoiceLinesClassification.Выбрать();
	КонецЕсли;
	
	//ДополнительныеСвойства.Вставить("ВыборкаПроведенныхРИЗПов", Неопределено);
	//Если СтруктураРезультатов.Свойство("ПроведенныеРИЗПы") Тогда
	//	ДополнительныеСвойства.ВыборкаПроведенныхРИЗПов = СтруктураРезультатов.ПроведенныеРИЗПы.Выбрать();
	//КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаПроведенныхBatchesOfCustomsFiles", Неопределено);
	Если СтруктураРезультатов.Свойство("ПроведенныеBatchesOfCustomsFiles") Тогда
		ДополнительныеСвойства.ВыборкаПроведенныхBatchesOfCustomsFiles = СтруктураРезультатов.ПроведенныеBatchesOfCustomsFiles.Выбрать()
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаTemporaryImportTransactionsOfOldItems", Неопределено);
	Если СтруктураРезультатов.Свойство("TemporaryImportTransactionsOfOldItems") Тогда
		ДополнительныеСвойства.ВыборкаTemporaryImportTransactionsOfOldItems = СтруктураРезультатов.TemporaryImportTransactionsOfOldItems.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовShipment", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыShipment") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовShipment = СтруктураРезультатов.РеквизитыShipment.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовShipment.Следующий();
	КонецЕсли; 
		
	ДополнительныеСвойства.Вставить("ВыборкаПохожихДокументов", Неопределено);
	Если СтруктураРезультатов.Свойство("ПохожиеДокументы") Тогда
		ДополнительныеСвойства.ВыборкаПохожихДокументов = СтруктураРезультатов.ПохожиеДокументы.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("НеобходимыеInvoiceLines", Неопределено);
	Если СтруктураРезультатов.Свойство("НеобходимыеInvoiceLines") Тогда
		ДополнительныеСвойства.НеобходимыеInvoiceLines = СтруктураРезультатов.НеобходимыеInvoicelines.Выгрузить().ВыгрузитьКолонку("InvoiceLine");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("НеобходимыеItemsOfCustomsFilesLines", Неопределено);
	Если СтруктураРезультатов.Свойство("НеобходимыеItemsOfCustomsFilesLines") Тогда
		ДополнительныеСвойства.НеобходимыеItemsOfCustomsFilesLines = СтруктураРезультатов.НеобходимыеItemsOfCustomsFilesLines.Выгрузить().ВыгрузитьКолонку("ItemOfCustomsFileLine");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItemsИзСопоставления") Тогда
		
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItemsИзСопоставления.Выгрузить();
		ДополнительныеСвойства.ТаблицаItems.Индексы.Добавить("Item");
		
		// Если мы закрываем Temp. imp. / exp. transaction - значит это перевод в постоянный режим - пометим товары как Permanent
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			ДополнительныеСвойства.ТаблицаItems.ЗаполнитьЗначения(Перечисления.PermanentTemporary.Permanent, "PermanentTemporary");
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаTemporaryImportTransactionsOfCurrentItems", Неопределено);
	Если СтруктураРезультатов.Свойство("TemporaryImportTransactionsOfCurrentItems") Тогда
		ДополнительныеСвойства.ВыборкаTemporaryImportTransactionsOfCurrentItems = СтруктураРезультатов.TemporaryImportTransactionsOfCurrentItems.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItemsOfCustomsFilesLines", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItemsOfCustomsFilesLines") Тогда
		ДополнительныеСвойства.ТаблицаItemsOfCustomsFilesLines = СтруктураРезультатов.РеквизитыItemsOfCustomsFilesLines.Выгрузить();
		ДополнительныеСвойства.ТаблицаItemsOfCustomsFilesLines.Индексы.Добавить("ItemOfCustomsFileLine");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаCustomsFiles", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыCustomsFiles") Тогда
		ДополнительныеСвойства.ТаблицаCustomsFiles = СтруктураРезультатов.РеквизитыCustomsFiles.Выгрузить();
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("ТаблицаСуммГТД", Неопределено);
	Если СтруктураРезультатов.Свойство("СуммыГТД") Тогда
		ДополнительныеСвойства.ТаблицаСуммГТД = СтруктураРезультатов.СуммыГТД.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаКоличестваВСопоставлении", Неопределено);
	Если СтруктураРезультатов.Свойство("КоличествоВСопоставлении") Тогда
		ДополнительныеСвойства.ТаблицаКоличестваВСопоставлении = СтруктураРезультатов.КоличествоВСопоставлении.Выгрузить();
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ВыборкаРеквизитовShipment)
	
	Если ЭтоНовый() И ЗначениеЗаполнено(Поставка) Тогда
		
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда  		  
			Номер = СокрЛП(СтрЗаменить(ВыборкаРеквизитовShipment.Номер, "SHIP", "ILM"));
		ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.ExportShipment") Тогда
			Номер = СокрЛП(СтрЗаменить(ВыборкаРеквизитовShipment.Номер, "ESHIP", "EILM"));
		ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			Номер = "TILM" + СокрЛП(Сред(ВыборкаРеквизитовShipment.Номер, 5));
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзмененияДокумента(Отказ, ВыборкаПроведенныхInvoiceLinesClassifications, ВыборкаПроведенныхBatchesOfCustomsFiles, ВыборкаTemporaryImportTransactionsOfOldItems)
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПроведенныхInvoiceLinesClassifications.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change """ + ЭтотОбъект + """ because it is already used in """ + ВыборкаПроведенныхInvoiceLinesClassifications.Представление + """!",
			ЭтотОбъект,,, Отказ);
	КонецЦикла;
	
	//Пока ВыборкаПроведенныхРИЗПов.Следующий() Цикл
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"You can not change """ + ЭтотОбъект + """ bacause it is already used in """ + ВыборкаПроведенныхРИЗПов.Представление + """!",
	//		ЭтотОбъект,,, Отказ);
	//КонецЦикла;
	
	ПредставлениеРИЗПа = CustomsСервер.ПолучитьПроведенныйРИЗП(Ссылка);
	Если Не ПустаяСтрока(ПредставлениеРИЗПа) Тогда 
		Если ПредставлениеРИЗПа <> "Error" Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change """ + ЭтотОбъект + """, because """ + СокрЛП(ПредставлениеРИЗПа) + """ is already posted!",
			ЭтотОбъект,,, Отказ);
		КонецЕсли;	
	КонецЕсли;

	
	Пока ВыборкаПроведенныхBatchesOfCustomsFiles.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change '" + ЭтотОбъект + "' because '" + ВыборкаПроведенныхBatchesOfCustomsFiles.CustomsFileПредставление + "' is already uploaded to lawson by '" + ВыборкаПроведенныхBatchesOfCustomsFiles.BatchOfCustomsFilesПредставление + "'!",
			ЭтотОбъект,,, Отказ);
	КонецЦикла;
	
	Пока ВыборкаTemporaryImportTransactionsOfOldItems.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change '" + ЭтотОбъект + "' because there is already '" + ВыборкаTemporaryImportTransactionsOfOldItems.TemporaryImportTransactionПредставление + "' for '" + ВыборкаTemporaryImportTransactionsOfOldItems.ItemПредставление + "'!",
			ЭтотОбъект,,, Отказ);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи, ВыборкаРеквизитовShipment, ВыборкаПохожихДокументов, НеобходимыеInvoiceLines, НеобходимыеItemsOfCustomsFilesLines, ТаблицаItems, ВыборкаTemporaryImportTransactionsOfCurrentItems, ТаблицаItemsOfCustomsFilesLines, ТаблицаСуммГТД, ТаблицаКоличестваВСопоставлении, ТаблицаCustomsFiles)
	
	Пока ВыборкаПохожихДокументов.Следующий() Цикл	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is already """ + ВыборкаПохожихДокументов.Представление + """ for """ + Поставка + """!",
			ЭтотОбъект, "Поставка", , Отказ);	
	КонецЦикла;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыборкаРеквизитовShipment.Проведен Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'" + Поставка + "' is not posted!",
			ЭтотОбъект, "Поставка", , Отказ);		
	КонецЕсли;
	
	Если ТипЗнч(Поставка) <> Тип("ДокументСсылка.TemporaryImpExpTransactions")
		И НЕ ЗначениеЗаполнено(ВыборкаРеквизитовShipment.Cleared) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In """ + Поставка + """ ""Cleared date"" is empty!",
			ЭтотОбъект, "Поставка", , Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаРеквизитовShipment.ProcessLevel) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In """ + Поставка + """ ""ProcessLevel"" is empty!",
			ЭтотОбъект, "Поставка", , Отказ);	
	КонецЕсли;
	
	Если ТипЗнч(Поставка) <> Тип("ДокументСсылка.TemporaryImpExpTransactions") 
		И НЕ ЗначениеЗаполнено(ВыборкаРеквизитовShipment.Specialist) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In """ + Поставка + """ ""Specialist"" is empty!",
			ЭтотОбъект, "Поставка", , Отказ);	
	КонецЕсли;
	
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка")
		И НЕ ЗначениеЗаполнено(ВыборкаРеквизитовShipment.CCAJobReference)
		И ТаблицаItems.Найти(Перечисления.PermanentTemporary.Temporary, "PermanentTemporary") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In """ + Поставка + """ ""CCA job ref."" is empty!",
			ЭтотОбъект, "Поставка", , Отказ);
	КонецЕсли;
	
	// Проверим Customs files
	Для Каждого СтрокаТаблицы Из ТаблицаCustomsFiles Цикл
		
		// Customs files должны быть проведены
		Если Не СтрокаТаблицы.Проведен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'" + СтрокаТаблицы.CustomsFile + "' is not posted!",
				СтрокаТаблицы.CustomsFile, , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Сопоставление Цикл
				
		РеквизитыItem = ТаблицаItems.Найти(СтрокаТЧ.СтрокаИнвойса, "Item");
				
		Если НЕ ЗначениеЗаполнено(РеквизитыItem.ERPTreatment) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": in Item """ + СокрЛП(СтрокаТЧ.СтрокаИнвойса) + """ ""ERP treatment"" is empty!",
				ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РеквизитыItem.AU) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": in Item """ + СокрЛП(СтрокаТЧ.СтрокаИнвойса) + """ ""AU"" is empty!",
				ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "].InvoiceLine", , Отказ);		
		КонецЕсли;
						
		РеквизитыItemOfCustomsFileLine = ТаблицаItemsOfCustomsFilesLines.Найти(СтрокаТЧ.ТоварСтрокиГТД, "ItemOfCustomsFileLine");
					
		Если НеобходимыеItemsOfCustomsFilesLines.Найти(СтрокаТЧ.ТоварСтрокиГТД) = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": Item in customs file line """ + СокрЛП(СтрокаТЧ.ТоварСтрокиГТД) + """ does not belong to any Customs file of """ + Поставка + """!",
				ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "].ТоварСтрокиГТД", , Отказ);
		КонецЕсли;

			
		Если РеквизитыItem.ParentCompany <> РеквизитыItemOfCustomsFileLine.ParentCompany Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": Parent company """ + СокрЛП(РеквизитыItem.ParentCompany) + """ of Item differs form Parent company """ + СокрЛП(РеквизитыItemOfCustomsFileLine.ParentCompany) + """ of Customs file!",
				ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "]", , Отказ);
		КонецЕсли; 
		
		// Проверим что временность ввоза в товаре совпадает с временностью ввоза в декларации
		Если ЗначениеЗаполнено(РеквизитыItem.PermanentTemporary)
			И ЗначениеЗаполнено(РеквизитыItemOfCustomsFileLine.PermanentTemporary)
			И РеквизитыItem.PermanentTemporary <> РеквизитыItemOfCustomsFileLine.PermanentTemporary Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": Item is for " + РеквизитыItem.PermanentTemporary + " import, but it is matched with Customs file for " + РеквизитыItemOfCustomsFileLine.PermanentTemporary + " import!",
				ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "]", , Отказ);
			
		КонецЕсли;
				
	КонецЦикла; 
		
	Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
		
		// Import invoices must be marked as Final
		Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда
			
			Если НЕ СтрокаТаблицыItems.ImportInvoiceFinal Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"'" + СтрокаТаблицыItems.ImportInvoice + "' is not marked as Final!",
					СтрокаТаблицыItems.ImportInvoice, "Проверен", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим, что для товаров с временным ввозам параметры временного ввоза одинаковые
		Если СтрокаТаблицыItems.PermanentTemporary = Перечисления.PermanentTemporary.Temporary Тогда
			
			СтруктураПоискаItemsOfCustomsFilesLines = Новый Структура("СтрокаИнвойса", СтрокаТаблицыItems.Item);
			СтрокиТЧ = Сопоставление.НайтиСтроки(СтруктураПоискаItemsOfCustomsFilesLines);
			
			ПроверочнаяТаблица = Новый ТаблицаЗначений;
			ПроверочнаяТаблица.Колонки.Добавить("ExpiryDate");
			ПроверочнаяТаблица.Колонки.Добавить("CustomsFile");
			ПроверочнаяТаблица.Колонки.Добавить("Regime");
			ПроверочнаяТаблица.Колонки.Добавить("Отправитель");
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				
				СтрокаItemsOfCustomsFileLines = ТаблицаItemsOfCustomsFilesLines.Найти(СтрокаТЧ.ТоварСтрокиГТД, "ItemOfCustomsFileLine");
				НоваяСтрокаПроверочнойТаблицы = ПроверочнаяТаблица.Добавить();
				НоваяСтрокаПроверочнойТаблицы.ExpiryDate = СтрокаItemsOfCustomsFileLines.TemporaryImportDate;
				НоваяСтрокаПроверочнойТаблицы.CustomsFile = СтрокаItemsOfCustomsFileLines.CustomsFile;
				НоваяСтрокаПроверочнойТаблицы.Regime = СтрокаItemsOfCustomsFileLines.Regime;
				НоваяСтрокаПроверочнойТаблицы.Отправитель = СтрокаItemsOfCustomsFileLines.Отправитель;
				
			КонецЦикла;
			
			ПроверочнаяТаблица.Свернуть("ExpiryDate, CustomsFile, Regime, Отправитель");
			Если ПроверочнаяТаблица.Количество() > 1 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Temporary import expiry date, Customs file, Regime or Отправитель differs for Item " + СтрокаТаблицыItems.Item + "!",
					ЭтотОбъект, , , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим, что нет других операций временного импорта	
	Пока ВыборкаTemporaryImportTransactionsOfCurrentItems.Следующий() Цикл
		
		СтрокаТЧ = Сопоставление.Найти(ВыборкаTemporaryImportTransactionsOfCurrentItems.Item, "СтрокаИнвойса");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is already '" + ВыборкаTemporaryImportTransactionsOfCurrentItems.TemporaryImportTransaction + "' for Item '" + ВыборкаTemporaryImportTransactionsOfCurrentItems.Item + "'!",
			ВыборкаTemporaryImportTransactionsOfCurrentItems.TemporaryImportTransaction,,, Отказ);
		
	КонецЦикла;
	
	// НУЖНО ДЛЯ TemporaryImpExpTransaction ТОЖЕ СДЕЛАТЬ РЕГИСТР TempToPermItemsWithoutCustomsFiles И ПРОВЕРЯТЬ ОСТАТКИ ПОСЛЕ ДВИЖЕНИЙ ПО НЕМУ
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		Для Каждого InvoiceLine Из НеобходимыеInvoiceLines Цикл
			Если ТаблицаItems.Найти(InvoiceLine, "Item") = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Invoice item '" + СокрЛП(InvoiceLine) + "' is not matched!",
					ЭтотОбъект, "Сопоставление", , Отказ);	
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Сопоставление Цикл
		
			Если НеобходимыеInvoiceLines.Найти(СтрокаТЧ.СтрокаИнвойса) = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТЧ.НомерСтроки + ": Item '" + СокрЛП(СтрокаТЧ.СтрокаИнвойса) + "' does not belong to '" + Поставка + "'!",
					ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "].СтрокаИнвойса", , Отказ);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
		
	Для Каждого ItemOfCustomsFileLine Из НеобходимыеItemsOfCustomsFilesLines Цикл
		Если ТаблицаItemsOfCustomsFilesLines.Найти(ItemOfCustomsFileLine, "ItemOfCustomsFileLine") = Неопределено Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Item in customs file line """ + СокрЛП(ItemOfCustomsFileLine) + """ is not mathcned with Invoice item!",
				ЭтотОбъект, "Сопоставление", , Отказ);	
		КонецЕсли; 			 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Поставка) И ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда
				
		Для Каждого СтрокаТаблицы Из ТаблицаСуммГТД Цикл
			
			Если СтрокаТаблицы.TotalInvoiceAmount < СтрокаТаблицы.TotalCharges Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Non-critical err. Total invoice amount of """ + СтрокаТаблицы.CustomsFile + """ (" + СтрокаТаблицы.TotalInvoiceAmount + ") is less than total amount of invoices (" + СтрокаТаблицы.TotalCharges + ")!",
					ЭтотОбъект);
					
			ИначеЕсли СтрокаТаблицы.TotalInvoiceAmount > СтрокаТаблицы.TotalCharges Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Non-critical err. Total invocie amount of """ + СтрокаТаблицы.CustomsFile + """ (" + СтрокаТаблицы.TotalInvoiceAmount + ") is more than total amount of invoices (" + СтрокаТаблицы.TotalCharges + ")!",
					ЭтотОбъект);
					
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ПроверитьРавенствоКоличествВСтрокахИнвойсовССопоставленнымиСтрокамиГТД(ТаблицаКоличестваВСопоставлении);
	
КонецПроцедуры

Процедура ПроверитьРавенствоКоличествВСтрокахИнвойсовССопоставленнымиСтрокамиГТД(Таблица)
	
	СтруктураПоискаИнв = Новый Структура("СтрокаИнвойса");
	СтруктураПоискаГТД = Новый Структура("ТоварСтрокиГТД");
	Таблица.Индексы.Добавить("СтрокаИнвойса");
	Таблица.Индексы.Добавить("ТоварСтрокиГТД");
		
	Пока Таблица.Количество() > 0 Цикл
		
		ПерваяСтрока = Таблица[0];
		
		СтруктураПоискаИнв.СтрокаИнвойса = ПерваяСтрока.СтрокаИнвойса;
		МассивСтрок = Таблица.НайтиСтроки(СтруктураПоискаИнв);
		Если МассивСтрок.Количество() > 1 Тогда // Для строки инвойса найдено несколько строк ГТД
			
			ИмяОдного = СокрЛП(ПерваяСтрока.ПредставлениеСтрокиИнвойса);
			КоличествоОдного = ПерваяСтрока.КоличествоСтрокиИнвойса;
			ИмяМножества = "Invoice lines";	
			КоличествоМножества = 0;
			Для каждого Строка из МассивСтрок Цикл
				КоличествоМножества = КоличествоМножества + Строка.КоличествоТовараСтрокиГТД;
				Таблица.Удалить(Строка);
			КонецЦикла;
			
		Иначе
			
			СтруктураПоискаГТД.ТоварСтрокиГТД = ПерваяСтрока.ТоварСтрокиГТД;
			МассивСтрок = Таблица.НайтиСтроки(СтруктураПоискаГТД);
			Если МассивСтрок.Количество() > 1 Тогда // Для строки ГТД найдено несколько строк инвойсов
				
				ИмяОдного = СокрЛП(ПерваяСтрока.ПредставлениеТовараСтрокиГТД);
				КоличествоОдного = ПерваяСтрока.КоличествоТовараСтрокиГТД;
				ИмяМножества = "Items of customs files lines";
				КоличествоМножества = 0;
				Для каждого Строка из МассивСтрок Цикл
					КоличествоМножества = КоличествоМножества + Строка.КоличествоСтрокиИнвойса;
					Таблица.Удалить(Строка);
				КонецЦикла;
				
			Иначе // Соотношение сопоставленных строк один к одному
			
				ИмяОдного = СокрЛП(ПерваяСтрока.ПредставлениеСтрокиИнвойса);
				КоличествоОдного = ПерваяСтрока.КоличествоСтрокиИнвойса;
				ИмяМножества = СокрЛП(ПерваяСтрока.ПредставлениеТовараСтрокиГТД); 
				КоличествоМножества = ПерваяСтрока.КоличествоТовараСтрокиГТД;
				Таблица.Удалить(ПерваяСтрока);
			
			КонецЕсли;
			
		КонецЕсли;
		
		// Сверяем количество сопоставленных строк
		Если КоличествоОдного <> КоличествоМножества Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical err. Количество """ + ИмяОдного + """ (" + КоличествоОдного + ") не соответствует количеству """ + ИмяМножества + """ (" + КоличествоМножества + ")!",
				ЭтотОбъект, "Сопоставление");
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьInvoiceLinesClassificationПриНеобходимости(Отказ, ДополнительныеСвойства.ТаблицаCustomsFiles);
	
	// { RGS AArsentev 04.08.2016 11:31:37
	Если НЕ Отказ тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		Запрос.Текст = "ВЫБРАТЬ
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.Каталог КАК Каталог,
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.Каталог.NetWeight КАК КаталогNetWeight,
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.NetWeight КАК СтрокаИнвойсаNetWeight,
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.WeightUOM КАК СтрокаИнвойсаWeightUOM,
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ТНВЭД КАК ТоварСтрокиГТДВладелецТНВЭД,
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД,
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.Каталог.КодТНВЭД КАК КаталогКодТНВЭД,
		|	ЗакрытиеПоставкиСопоставление.СтрокаИнвойса.Количество
		|ИЗ
		|	Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|ГДЕ
		|	ЗакрытиеПоставкиСопоставление.Ссылка = &Ссылка";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			    						
			Если ЗначениеЗаполнено(Результат.Каталог) Тогда
				
				Если Результат.ТоварСтрокиГТДВладелецТНВЭД <> Результат.КаталогКодТНВЭД
					ИЛИ (Результат.СтрокаИнвойсаКоличество <> 0 И Результат.КаталогNetWeight <> Результат.СтрокаИнвойсаNetWeight / Результат.СтрокаИнвойсаКоличество) Тогда
					
					Catalog = Результат.Каталог.ПолучитьОбъект();
					Если Результат.ТоварСтрокиГТДВладелецТНВЭД <> Результат.КаталогКодТНВЭД Тогда
						Catalog.КодТНВЭД = Результат.ТоварСтрокиГТДВладелецТНВЭД;
					КонецЕсли;
					
					Если Результат.СтрокаИнвойсаКоличество <> 0 тогда
						
						Если ЗначениеЗаполнено(Результат.СтрокаИнвойсаNetWeight) И Результат.КаталогNetWeight <> Результат.СтрокаИнвойсаNetWeight / Результат.СтрокаИнвойсаКоличество Тогда					
							Если Результат.СтрокаИнвойсаWeightUOM = Справочники.UOMs.KG Тогда
								КоэффициентЕдиницыИзмеренияВеса = 1;
							Иначе
								КоэффициентЕдиницыИзмеренияВеса = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Результат.СтрокаИнвойсаWeightUOM, "ConversionFactor");
							КонецЕсли;
							РГСофтКлиентСервер.УстановитьЗначение(Catalog.NetWeight, Результат.СтрокаИнвойсаNetWeight * КоэффициентЕдиницыИзмеренияВеса / Результат.СтрокаИнвойсаКоличество);					
						КонецЕсли;				
						
					Иначе
						
						Message = New UserMessage();
						Message.Text = "In Item " + СокрЛП(Результат.СтрокаИнвойса) + " qty = 0.";		
						Message.Message();
						
					КонецЕсли;	
					
					Catalog.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// } RGS AArsentev 04.08.2016 11:31:37

	
КонецПроцедуры

Процедура СоздатьInvoiceLinesClassificationПриНеобходимости(Отказ, ТаблицаCustomsFiles)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаCustomsFiles = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыCustomsFiles = ТаблицаCustomsFiles.Найти(Истина, "UseFiscalClassificationOfItems");
	Если СтрокаТаблицыCustomsFiles = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим, может быть ILC уже есть
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	InvoiceLinesClassification.Ссылка
		|ИЗ
		|	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
		|ГДЕ
		|	InvoiceLinesClassification.InvoiceLinesMatching = &Ссылка";
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ДокументОбъект = Документы.InvoiceLinesClassification.СоздатьДокумент();
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.InvoiceLinesMatching = Ссылка;
	ДокументОбъект.Записать();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРОВЕДЕНИЯ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДвиженияInvoiceLinesCosts = Движения.InvoiceLinesCosts;
	ДвиженияInvoiceLinesCosts.Очистить();
	ДвиженияInvoiceLinesCosts.Записывать = Истина;
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураТекстов.Вставить("ВТItemsWithCurrencyRates",
		"ВЫБРАТЬ
		|	Сопоставление.СтрокаИнвойса КАК СтрокаИнвойса,
		|	МАКСИМУМ(ТоварыСтрокГТД.Владелец.ГТД.ContractCurrencyRate) КАК Курс,
		|	МАКСИМУМ(ТоварыСтрокГТД.Владелец.ГТД.ContractCurrency) КАК ContractCurrency,
		|	МАКСИМУМ(ТоварыСтрокГТД.Владелец.ГТД.ДатаВыпуска) КАК ДатаВыпускаГТД
		|ПОМЕСТИТЬ СтрокиИнвойсаСДатамиГТД
		|ИЗ
		|	Документ.ЗакрытиеПоставки.Сопоставление КАК Сопоставление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварыСтрокГТД КАК ТоварыСтрокГТД
		|		ПО Сопоставление.ТоварСтрокиГТД = ТоварыСтрокГТД.Ссылка
		|ГДЕ
		|	Сопоставление.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Сопоставление.СтрокаИнвойса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтрокаИнвойса");
		
	СтруктураПараметров.Вставить("МоментВремени", МоментВремени());
	СтруктураТекстов.Вставить("РеквизитыItems");
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда
		
		СтруктураТекстов.РеквизитыItems =
			"ВЫБРАТЬ
			|	СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса КАК СтрокаИнвойса,
			|	СтрокиИнвойсаСДатамиГТД.Курс КАК Курс,
			|	СтрокиИнвойса.Currency КАК Валюта,
			|	СтрокиИнвойса.Активити КАК InvoiceLineActivity,
			|	СтрокиИнвойса.КостЦентр.DefaultActivity КАК AUActivity,
			|	СтрокиИнвойса.Классификатор КАК ERPTreatment,
			|	СтрокиИнвойса.Инвойс КАК Инвойс,
			|	СтрокиИнвойса.Инвойс.СуммаДокумента КАК СуммаДокументаВал,
			|	СтрокиИнвойса.Инвойс.Страховка КАК СтраховкаВал,
			|	СтрокиИнвойса.Инвойс.Фрахт КАК ФрахтВал,
			|	СтрокиИнвойса.Инвойс.Упаковка КАК УпаковкаВал,
			|	СтрокиИнвойса.Сумма КАК СуммаСтрокиВал,
			|	ERPTreatmentAccountsСрезПоследних.CCDAccount КАК Account,
			|	ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 2) КАК BORGcode
			|ИЗ
			|	СтрокиИнвойсаСДатамиГТД КАК СтрокиИнвойсаСДатамиГТД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
			|		ПО СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса = СтрокиИнвойса.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERPTreatmentAccounts.СрезПоследних(&МоментВремени, ) КАК ERPTreatmentAccountsСрезПоследних
			|		ПО СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса.Классификатор = ERPTreatmentAccountsСрезПоследних.ERPTreatment";
			
	ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.ExportShipment") 
		  ИЛИ ТипЗнч(Поставка) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		СтруктураТекстов.РеквизитыItems =
			"ВЫБРАТЬ
			|	СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса КАК СтрокаИнвойса,
			|	СтрокиИнвойсаСДатамиГТД.Курс КАК Курс,
			|	СтрокиИнвойсаСДатамиГТД.ContractCurrency КАК ВалютаГТД,
			|	СтрокиИнвойсаСДатамиГТД.ДатаВыпускаГТД КАК ДатаВыпускаГТД,
			|	СтрокиИнвойса.Активити КАК InvoiceLineActivity,
			|	СтрокиИнвойса.Currency КАК Валюта,
			|	СтрокиИнвойса.КостЦентр.DefaultActivity КАК AUActivity,
			|	СтрокиИнвойса.Классификатор КАК ERPTreatment,
			|	СтрокиИнвойса.ExportRequest КАК ExportRequest,
			|	СтрокиИнвойса.Сумма КАК СуммаСтрокиВал,
			|	ERPTreatmentAccountsСрезПоследних.CCDAccount КАК Account,
			|	СтрокиИнвойса.ExportRequest.LocalFreightCurrency КАК LocalFreightCurrency,
			|	СтрокиИнвойса.ExportRequest.LocalFreightSum КАК LocalFreightSum,
			|	СтрокиИнвойса.ExportRequest.InternationalFreightCurrency КАК IntFreightCurrency,
			|	СтрокиИнвойса.ExportRequest.InternationalFreightSum КАК IntFreightSum,
			|	ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 2) КАК BORGcode
			|ИЗ
			|	СтрокиИнвойсаСДатамиГТД КАК СтрокиИнвойсаСДатамиГТД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
			|		ПО СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса = СтрокиИнвойса.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERPTreatmentAccounts.СрезПоследних(&МоментВремени, ) КАК ERPTreatmentAccountsСрезПоследних
			|		ПО СтрокиИнвойсаСДатамиГТД.СтрокаИнвойса.Классификатор = ERPTreatmentAccountsСрезПоследних.ERPTreatment";
			
	КонецЕсли;
		
	СтруктураПараметров.Вставить("Shipment", Поставка);
	СтруктураТекстов.Вставить("ВременнаяТаблицаСтрокДТ",
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиГТД.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокСтрокГТД
		|ИЗ
		|	Справочник.СтрокиГТД КАК СтрокиГТД
		|ГДЕ
		|	СтрокиГТД.ГТД.Shipment = &Shipment
		|	И (НЕ СтрокиГТД.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка");
		
	СтруктураТекстов.Вставить("РеквизитыСтрокДТ",
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК СтрокаГТД,
		|	ВложенныйЗапрос.Ссылка.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
		|	ВложенныйЗапрос.Ссылка.ГТД КАК ГТД,
		|	СУММА(ВложенныйЗапрос.Сбор) КАК Сбор,
		|	СУММА(ВложенныйЗапрос.НДС) КАК НДС,
		|	СУММА(ВложенныйЗапрос.Пошлина) КАК Пошлина
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтрокиГТДИсчислениеПлатежей.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА СтрокиГТДИсчислениеПлатежей.ВидПлатежа.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТаможенныхПлатежей.Сбор)
		|				ТОГДА СтрокиГТДИсчислениеПлатежей.СуммаПлатежа
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Сбор,
		|		ВЫБОР
		|			КОГДА СтрокиГТДИсчислениеПлатежей.ВидПлатежа.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТаможенныхПлатежей.НДС)
		|				ТОГДА СтрокиГТДИсчислениеПлатежей.СуммаПлатежа
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НДС,
		|		ВЫБОР
		|			КОГДА СтрокиГТДИсчислениеПлатежей.ВидПлатежа.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТаможенныхПлатежей.Пошлина)
		|				ТОГДА СтрокиГТДИсчислениеПлатежей.СуммаПлатежа
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Пошлина
		|	ИЗ
		|		СписокСтрокГТД КАК СписокСтрокГТД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиГТД.ИсчислениеПлатежей КАК СтрокиГТДИсчислениеПлатежей
		|			ПО СписокСтрокГТД.Ссылка = СтрокиГТДИсчислениеПлатежей.Ссылка
		|				И (СтрокиГТДИсчислениеПлатежей.СП <> ""УН"")
		|				И (СтрокиГТДИсчислениеПлатежей.СП <> ""УР"")
		|				И (СтрокиГТДИсчислениеПлатежей.СуммаПлатежа <> 0)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Ссылка.ТаможеннаяСтоимость,
		|	ВложенныйЗапрос.Ссылка.ГТД");
		
	СтруктураТекстов.Вставить("РеквизитыСопоставления",
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сопоставление.СтрокаИнвойса КАК СтрокаИнвойса,
		|	Сопоставление.ТоварСтрокиГТД.Владелец КАК СтрокаГТД,
		|	Сопоставление.ТоварСтрокиГТД.Владелец.НомерСтрокиГТД КАК CustomsFileLineNo,
		|	Сопоставление.ТоварСтрокиГТД.Владелец.ГТД КАК ГТД,
		|	Сопоставление.ТоварСтрокиГТД.Владелец.ГТД.Номер КАК CustomsFileNo,
		|	Сопоставление.ТоварСтрокиГТД.Владелец.ГТД.ДатаВыпуска КАК ДатаВыпуска,
		|	Сопоставление.СтрокаИнвойса.Сумма КАК СуммаСтрокиИнвойса
		|ИЗ
		|	Документ.ЗакрытиеПоставки.Сопоставление КАК Сопоставление
		|ГДЕ
		|	Сопоставление.Ссылка = &Ссылка");
		
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ТаблицаРеквизитовItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
	
	Если ТипЗнч(Поставка) = Тип("ДокументСсылка.Поставка") Тогда
		
		ТаблицаДляРазнесенияСуммИнвойса = ТаблицаРеквизитовItems.Скопировать(, "СтрокаИнвойса, Курс, Инвойс, Валюта, СуммаДокументаВал, СтраховкаВал, ФрахтВал, УпаковкаВал, СуммаСтрокиВал");
		КолонкиТаблицыДанныхСтрокИнвойсов = ТаблицаРеквизитовItems.Колонки;
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("Курс");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("Инвойс");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("Валюта");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("СуммаДокументаВал");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("СтраховкаВал");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("ФрахтВал");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("УпаковкаВал");
		КолонкиТаблицыДанныхСтрокИнвойсов.Удалить("СуммаСтрокиВал");
		ТаблицаРеквизитовItems.Индексы.Добавить("СтрокаИнвойса");
	
		ОтразитьСтоимостьInvoicesOfShipment(Отказ, ТаблицаДляРазнесенияСуммИнвойса, ТаблицаРеквизитовItems);
		
	ИначеЕсли ТипЗнч(Поставка) = Тип("ДокументСсылка.ExportShipment") Тогда 
		
		ОтразитьСтоимостьItemsOfExportShipment(ТаблицаРеквизитовItems);
		
	КонецЕсли;
	
	ТаблицаДляРазнесенияСуммГТДПоСтрокамГТД = СтруктураРезультатов.РеквизитыСтрокДТ.Выгрузить();
	
	ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса = СтруктураРезультатов.РеквизитыСопоставления.Выгрузить();                     		
	ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса.Колонки.Удалить("ГТД");
	ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса.Колонки.Удалить("CustomsFileNo");
	ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса.Колонки.Удалить("ДатаВыпуска");
	ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса.Колонки.Удалить("CustomsFileLineNo");
	
	ОтразитьСтоимостьГТД(Отказ, ТаблицаДляРазнесенияСуммГТДПоСтрокамГТД, ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса, ТаблицаРеквизитовItems);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Поставка) <> Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		ТаблицаДляCustomsFilesOfGoods = СтруктураРезультатов.РеквизитыСопоставления.Выгрузить();
		ТаблицаДляCustomsFilesOfGoods.Свернуть("СтрокаИнвойса, ГТД, CustomsFileNo, ДатаВыпуска, CustomsFileLineNo");
		ТаблицаДляCustomsFilesOfGoods.Индексы.Добавить("СтрокаИнвойса");
		
		ОтразитьCustomsFilesOfGoods(ДополнительныеСвойства.ТаблицаItems, ТаблицаДляCustomsFilesOfGoods);
				
		ОтразитьTemporaryImport(ДополнительныеСвойства.ТаблицаItems, ДополнительныеСвойства.ТаблицаItemsOfCustomsFilesLines, ДополнительныеСвойства.ВыборкаРеквизитовShipment);
		
		ДвиженияПоImportItemsWithoutCustomsFiles(Отказ, ДополнительныеСвойства.ТаблицаItems);
		
		ДвиженияПоExportItemsWithoutCustomsFiles(Отказ, ДополнительныеСвойства.ТаблицаItems);
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ОтразитьСтоимостьInvoicesOfShipment(Отказ, ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов, ТаблицаДанныхСтрокИнвойсов)
	
	ДвиженияInvoiceLinesCosts = Движения.InvoiceLinesCosts;
	ЭлементФормированияСтоимости = Справочники.ЭлементыФормированияСтоимости;
	
	// Соорудим таблицу, в которой будем хранить разнесенные суммы
	ТаблицаРазнесенныхСумм = Новый ТаблицаЗначений;
	Колонки = ТаблицаРазнесенныхСумм.Колонки;
	Колонки.Добавить("СтрокаИнвойса", Новый ОписаниеТипов("СправочникСсылка.СтрокиИнвойса"));
	Колонки.Добавить("Инвойс", Новый ОписаниеТипов("ДокументСсылка.Инвойс"));
	Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Колонки.Добавить("Курс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11,4)));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));	
	Колонки.Добавить("СуммаВал", ТипЧисло);
	Колонки.Добавить("СтраховкаВал", ТипЧисло);
	Колонки.Добавить("ФрахтВал", ТипЧисло);
	Колонки.Добавить("УпаковкаВал", ТипЧисло);
	
	// Для каждого инвойса выберем порцию его строк, разнесем по ним суммы инвойса и выполним движения	
	СтруктураПоиска = Новый Структура("Инвойс");
	ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов.Индексы.Добавить("Инвойс");
	
	Пока ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов.Количество() Цикл
		
		ПерваяСтрока = ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов[0];
				
		// Найдем порцию строк
		СтруктураПоиска.Инвойс = ПерваяСтрока.Инвойс;
		СтрокиТекущегоИнвойса = ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов.НайтиСтроки(СтруктураПоиска);
		
		// Если стоимость инвойса не определена - сообщим об ошибке и удалим эту порцию строк
		Если ПерваяСтрока.СуммаДокументаВал = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить валютную сумму """ + ПерваяСтрока.Инвойс + """!",
				ЭтотОбъект, , , Отказ);
			
			Для Каждого НайденнаяСтрока Из СтрокиТекущегоИнвойса Цикл
				ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;

		// Переменные для учета ошибки разнесения
		РасхождениеСтраховки = ПерваяСтрока.СтраховкаВал;
		РасхождениеФрахта = ПерваяСтрока.ФрахтВал;
		РасхождениеУпаковки = ПерваяСтрока.УпаковкаВал;
		СамаяБольшаяСтрокаИнвойса = Неопределено;

		// Разнесем суммы инвойса на каждую строку из порции
		Для Каждого НайденнаяСтрока Из СтрокиТекущегоИнвойса Цикл
				
			НоваяСтрока = ТаблицаРазнесенныхСумм.Добавить();
			НоваяСтрока.СтрокаИнвойса = НайденнаяСтрока.СтрокаИнвойса;
			НоваяСтрока.Инвойс = НайденнаяСтрока.Инвойс;
			НоваяСтрока.Курс = НайденнаяСтрока.Курс;
			НоваяСтрока.Валюта = НайденнаяСтрока.Валюта;
			НоваяСтрока.СуммаВал = НайденнаяСтрока.СуммаСтрокиВал;
			
			ВесСтроки = НайденнаяСтрока.СуммаСтрокиВал / НайденнаяСтрока.СуммаДокументаВал;
			
			НоваяСтрока.СтраховкаВал = НайденнаяСтрока.СтраховкаВал * ВесСтроки;
			РасхождениеСтраховки = РасхождениеСтраховки - НоваяСтрока.СтраховкаВал;
			
			НоваяСтрока.ФрахтВал = НайденнаяСтрока.ФрахтВал * ВесСтроки;
			РасхождениеФрахта = РасхождениеФрахта - НоваяСтрока.ФрахтВал;
			
			НоваяСтрока.УпаковкаВал = НайденнаяСтрока.УпаковкаВал * ВесСтроки;
			РасхождениеУпаковки = РасхождениеУпаковки - НоваяСтрока.УпаковкаВал;
			
			Если СамаяБольшаяСтрокаИнвойса = Неопределено
				ИЛИ СамаяБольшаяСтрокаИнвойса.СуммаВал < НоваяСтрока.СуммаВал Тогда
				СамаяБольшаяСтрокаИнвойса = НоваяСтрока;
			КонецЕсли;
				
			ТаблицаДляРазнесенияСуммПоСтрокамИнвойсов.Удалить(НайденнаяСтрока);
			
		КонецЦикла;
		
		// Спишем расхождение на самую большую строку инвойса
		Если РасхождениеСтраховки <> 0  Тогда
			СамаяБольшаяСтрокаИнвойса.СтраховкаВал = СамаяБольшаяСтрокаИнвойса.СтраховкаВал + РасхождениеСтраховки;
		КонецЕсли;
		
		Если РасхождениеФрахта <> 0 Тогда
			СамаяБольшаяСтрокаИнвойса.ФрахтВал = СамаяБольшаяСтрокаИнвойса.ФрахтВал + РасхождениеФрахта;
		КонецЕсли;
		
		Если РасхождениеУпаковки <> 0 Тогда
			СамаяБольшаяСтрокаИнвойса.УпаковкаВал = СамаяБольшаяСтрокаИнвойса.УпаковкаВал + РасхождениеУпаковки;
		КонецЕсли;
		
		// Выполним движения
		Пока ТаблицаРазнесенныхСумм.Количество() Цикл
				
			Если НЕ Отказ Тогда
				
				СтрокаТаблицы = ТаблицаРазнесенныхСумм[0];	
								
				// сумма строки
				Если СтрокаТаблицы.СуммаВал <> 0 Тогда
					
					ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
						Дата,
						СтрокаТаблицы.СтрокаИнвойса,
						ЭлементФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса,
						СтрокаТаблицы.Инвойс,
						СтрокаТаблицы.Валюта,
						СтрокаТаблицы.СуммаВал,
						СтрокаТаблицы.СуммаВал * СтрокаТаблицы.Курс);
											
				КонецЕсли; 
				
				// страховка
				Если СтрокаТаблицы.СтраховкаВал <> 0 Тогда
					
					ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
						Дата,
						СтрокаТаблицы.СтрокаИнвойса,
						ЭлементФормированияСтоимости.ИнвойсСтраховка,
						СтрокаТаблицы.Инвойс,
						СтрокаТаблицы.Валюта,
						СтрокаТаблицы.СтраховкаВал,
						СтрокаТаблицы.СтраховкаВал * СтрокаТаблицы.Курс);
					
				КонецЕсли; 
				
				// перевозка
				Если СтрокаТаблицы.ФрахтВал <> 0 Тогда
					
					ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
						Дата,
						СтрокаТаблицы.СтрокаИнвойса,
						ЭлементФормированияСтоимости.ИнвойсПеревозка,
						СтрокаТаблицы.Инвойс,
						СтрокаТаблицы.Валюта,
						СтрокаТаблицы.ФрахтВал,
						СтрокаТаблицы.ФрахтВал * СтрокаТаблицы.Курс);
										
				КонецЕсли; 
				
				// хранение
				Если СтрокаТаблицы.УпаковкаВал <> 0 Тогда
					
					ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
						Дата,
						СтрокаТаблицы.СтрокаИнвойса,
						ЭлементФормированияСтоимости.ИнвойсХранение,
						СтрокаТаблицы.Инвойс,
						СтрокаТаблицы.Валюта,
						СтрокаТаблицы.УпаковкаВал,
						СтрокаТаблицы.УпаковкаВал * СтрокаТаблицы.Курс);
										
				КонецЕсли;
				
			КонецЕсли; 
			 			
			ТаблицаРазнесенныхСумм.Удалить(0);
			
		КонецЦикла;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтразитьСтоимостьItemsOfExportShipment(ТаблицаРеквизитовItems)
	       
	ДвиженияInvoiceLinesCosts = Движения.InvoiceLinesCosts;
	ЭлементФормированияСтоимости = Справочники.ЭлементыФормированияСтоимости;
	
	МассивExportRequests = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(
		ТаблицаРеквизитовItems, "ExportRequest");
		
	СтруктураОтбора = Новый Структура("ExportRequest");
	
	Для Каждого ExportRequest Из МассивExportRequests Цикл
		
		СтруктураОтбора.ExportRequest = ExportRequest;
		
		ТаблицаРеквизитовItemsER = ТаблицаРеквизитовItems.Скопировать(СтруктураОтбора);
						
		СтрокаТаб = ТаблицаРеквизитовItemsER[0];
		
		// Local Freight
		Если СтрокаТаб.LocalFreightCurrency = СтрокаТаб.ВалютаГТД Тогда
			LocalFreightSumER = СтрокаТаб.LocalFreightSum;
		Иначе 
			СтруктураCurrencyLocalFreight = ОбщегоНазначения.ПолучитьКурсВалюты(
				СтрокаТаб.LocalFreightCurrency, СтрокаТаб.ДатаВыпускаГТД);
			LocalFreightSumER = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.LocalFreightSum, СтрокаТаб.LocalFreightCurrency, СтрокаТаб.ВалютаГТД, 
				СтруктураCurrencyLocalFreight.Курс, СтрокаТаб.Курс, СтруктураCurrencyLocalFreight.Кратность); 
		КонецЕсли;
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаРеквизитовItemsER.ВыгрузитьКолонку("СуммаСтрокиВал"),
			LocalFreightSumER, ТаблицаРеквизитовItemsER, "LocalFreightSum");
			
		// Int Freight
		Если СтрокаТаб.IntFreightCurrency = СтрокаТаб.ВалютаГТД Тогда
			IntFreightSumER = СтрокаТаб.IntFreightSum;
		Иначе 
			СтруктураCurrencyIntFreight = ОбщегоНазначения.ПолучитьКурсВалюты(
				СтрокаТаб.IntFreightCurrency, СтрокаТаб.ДатаВыпускаГТД);
			IntFreightSumER = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.IntFreightSum, СтрокаТаб.IntFreightCurrency, СтрокаТаб.ВалютаГТД, 
				СтруктураCurrencyIntFreight.Курс, СтрокаТаб.Курс, СтруктураCurrencyIntFreight.Кратность); 
		КонецЕсли;
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаРеквизитовItemsER.ВыгрузитьКолонку("СуммаСтрокиВал"),
			IntFreightSumER, ТаблицаРеквизитовItemsER, "IntFreightSum");
							
		Для Каждого СтрокаТаблицы Из ТаблицаРеквизитовItemsER Цикл
			
			TotalFreightSumER = СтрокаТаблицы.LocalFreightSum + СтрокаТаблицы.IntFreightSum;
			
			Если TotalFreightSumER <> 0 Тогда
				
				ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
					Дата,
					СтрокаТаблицы.СтрокаИнвойса,
					ЭлементФормированияСтоимости.ИнвойсПеревозка,
					СтрокаТаблицы.ExportRequest,
					СтрокаТаблицы.Валюта,
					TotalFreightSumER,
					TotalFreightSumER * СтрокаТаблицы.Курс);
				
			КонецЕсли;

			Если СтрокаТаблицы.СуммаСтрокиВал <> 0 Тогда
				
				ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
					Дата,
					СтрокаТаблицы.СтрокаИнвойса,
					ЭлементФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса,
					СтрокаТаблицы.ExportRequest,
					СтрокаТаблицы.Валюта,
					СтрокаТаблицы.СуммаСтрокиВал,
					СтрокаТаблицы.СуммаСтрокиВал * СтрокаТаблицы.Курс);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры
     
Процедура ОтразитьСтоимостьГТД(Отказ, ТаблицаДляРазнесенияСуммГТДПоСтрокамГТД, ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса, ТаблицаДанныхСтрокИнвойсов)
	
	ТаблицаСтрокГТД = РаспределитьСборПоСтрокамГТД(ТаблицаДляРазнесенияСуммГТДПоСтрокамГТД, Отказ);
	ТаблицаСтрокИнвойсов = РаспределитьСборИПошлиныПоСтрокамИнвойсов(ТаблицаДляРазнесенияСуммГТДПоСтрокамИнвойса, ТаблицаСтрокГТД, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияInvoiceLinesCosts = Движения.InvoiceLinesCosts;
	
	ЭлементФормированияСтоимости = Справочники.ЭлементыФормированияСтоимости;
	ВалютаРуб = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаДанныхСтрокИнвойсов.Индексы.Добавить("СтрокаИнвойса");
	
	Для каждого Стр из ТаблицаСтрокИнвойсов Цикл
		
		СтрокаТаблицыДанныхСтрокИнвойсов = ТаблицаДанныхСтрокИнвойсов.Найти(Стр.СтрокаИнвойса, "СтрокаИнвойса");
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДанныхСтрокИнвойсов.Account) Тогда
			          			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхСтрокИнвойсов.InvoiceLineActivity)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхСтрокИнвойсов.AUActivity)
				И Лев(СтрокаТаблицыДанныхСтрокИнвойсов.Account, 1) = "5" 				
				И Лев(СтрокаТаблицыДанныхСтрокИнвойсов.BORGcode, 1) <> "7"   Тогда    //S-I-0002231
					
					СтрокаТЧ = Сопоставление.Найти(СтрокаТаблицыДанныхСтрокИнвойсов.СтрокаИнвойса, "СтрокаИнвойса");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"В строке " + СтрокаТЧ.НомерСтроки + ": failed to determine Activity for Item """ + СокрЛП(СтрокаТаблицыДанныхСтрокИнвойсов.СтрокаИнвойса) + """!",
						ЭтотОбъект, "Сопоставление[" + (СтрокаТЧ.НомерСтроки-1) + "].СтрокаИнвойса", , Отказ);
					
			КонецЕсли;
		
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Для ERP treatment """ + СокрЛП(СтрокаТаблицыДанныхСтрокИнвойсов.ERPTreatment) + """ не указан Account!",
				ЭтотОбъект, , , Отказ);		
		КонецЕсли;
	
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
				
		// Сборы
		Если Стр.Сбор <> 0 Тогда
			
			ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
				Дата,
				Стр.СтрокаИнвойса,
				ЭлементФормированияСтоимости.ТаможняСборы,
				Стр.ГТД,
				ВалютаРуб,
				Стр.Сбор,
				Стр.Сбор);
						
		КонецЕсли; 
		
		// Пошлины
		Если Стр.Пошлина <> 0 Тогда
			
			ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
				Дата,
				Стр.СтрокаИнвойса,
				ЭлементФормированияСтоимости.ТаможняПошлины,
				Стр.ГТД,
				ВалютаРуб,
				Стр.Пошлина,
				Стр.Пошлина);
						
		КонецЕсли; 	
		
		// НДС
		Если Стр.НДС <> 0 Тогда
			
			ДвиженияInvoiceLinesCosts.ДобавитьЗапись(
				Дата,
				Стр.СтрокаИнвойса,
				ЭлементФормированияСтоимости.ТаможняНДС,
				Стр.ГТД,
				ВалютаРуб,
				Стр.НДС,
				Стр.НДС);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СформироватьДвиженияInternationalFactCosts(ТаблицаСтрокИнвойсов);
	
КонецПроцедуры

Функция РаспределитьСборПоСтрокамГТД(ТаблицаНеразнесенная, Отказ)
		
	// Соорудим таблицу строк ГТД
	ТаблицаСтрокГТД = Новый ТаблицаЗначений;
	Колонки = ТаблицаСтрокГТД.Колонки;
	Колонки.Добавить("СтрокаГТД", Новый ОписаниеТипов("СправочникСсылка.СтрокиГТД"));
	Колонки.Добавить("ГТД", Новый ОписаниеТипов("ДокументСсылка.ГТД"));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	Колонки.Добавить("ТаможеннаяСтоимость", ТипЧисло);
	Колонки.Добавить("Сбор", ТипЧисло);
	Колонки.Добавить("НДС", ТипЧисло);
	Колонки.Добавить("Пошлина", ТипЧисло);
	
	// Будем разносить сбор пропорционально таможенной стоимости в разрезе ГТДшек.
	// Одна ГТДшка = одна порция строк.
	СтруктураПоиска = Новый Структура("ГТД");
	ТаблицаНеразнесенная.Индексы.Добавить("ГТД");
	Пока ТаблицаНеразнесенная.Количество() Цикл
		
		СтруктураПоиска.ГТД = ТаблицаНеразнесенная[0].ГТД;
		ПорцияСтрок = ТаблицаНеразнесенная.НайтиСтроки(СтруктураПоиска);
		
		// Определим сбор и стоимость всей ГТД
		ВесьСбор = 0;
		ВсяСтоимость = 0;
		Для Каждого СтрокаТаблицы Из ПорцияСтрок Цикл
			ВесьСбор = ВесьСбор + СтрокаТаблицы.Сбор;
			ВсяСтоимость = ВсяСтоимость + СтрокаТаблицы.ТаможеннаяСтоимость;
		КонецЦикла;
		
		// Если стоимость строк ГТД неопределена - сообщим об ошибке и удалим порцию строк
		Если ВсяСтоимость = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить таможенную стоимость строк """ + ТаблицаНеразнесенная[0].ГТД + """!",
				ЭтотОбъект, , , Отказ);
				
			Для Каждого СтрокаТаблицы Из ПорцияСтрок Цикл
				ТаблицаНеразнесенная.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
				
		// Переменные, необходимые для исправления ошибки округления
		РасхождениеСбора = ВесьСбор;	
		СамаяБольшаяСтрока = Неопределено;
		
		Для Каждого СтрокаТаблицы Из ПорцияСтрок Цикл
			
			НоваяСтрока = ТаблицаСтрокГТД.Добавить();
			НоваяСтрока.СтрокаГТД = СтрокаТаблицы.СтрокаГТД;
			НоваяСтрока.ГТД = СтрокаТаблицы.ГТД;
			НоваяСтрока.ТаможеннаяСтоимость = СтрокаТаблицы.ТаможеннаяСтоимость;
			НоваяСтрока.НДС = СтрокаТаблицы.НДС;
			НоваяСтрока.Пошлина = СтрокаТаблицы.Пошлина;
			
			НоваяСтрока.Сбор = ВесьСбор * СтрокаТаблицы.ТаможеннаяСтоимость / ВсяСтоимость;
			РасхождениеСбора = РасхождениеСбора - НоваяСтрока.Сбор;
			
			// Ищем строку с самой большой таможенной стоимостью, чтобы потом списать на нее ошибку округления
			Если СамаяБольшаяСтрока = Неопределено
				ИЛИ СамаяБольшаяСтрока.ТаможеннаяСтоимость < НоваяСтрока.ТаможеннаяСтоимость Тогда
				СамаяБольшаяСтрока = НоваяСтрока;
			КонецЕсли;
			
			ТаблицаНеразнесенная.Удалить(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Учтем ошибку округления
		Если РасхождениеСбора <> 0 Тогда
			СамаяБольшаяСтрока.Сбор = СамаяБольшаяСтрока.Сбор + РасхождениеСбора;
		КонецЕсли;
				
	КонецЦикла;
	
	Колонки.Удалить("ТаможеннаяСтоимость");
	Возврат ТаблицаСтрокГТД;
	
КонецФункции

Функция РаспределитьСборИПошлиныПоСтрокамИнвойсов(ТаблицаСопоставления, ТаблицаСтрокГТД, Отказ)
	
	ТаблицаСопоставления.Индексы.Добавить("СтрокаГТД");
	
	// Соорудим таблицу строк инвойсов
	ТаблицаСтрокИнвойсов = Новый ТаблицаЗначений;
	Колонки = ТаблицаСтрокИнвойсов.Колонки;
	Колонки.Добавить("СтрокаИнвойса", Новый ОписаниеТипов("СправочникСсылка.СтрокиИнвойса"));
	Колонки.Добавить("ГТД", Новый ОписаниеТипов("ДокументСсылка.ГТД"));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	Колонки.Добавить("СуммаСтрокиИнвойса", ТипЧисло);
	Колонки.Добавить("Сбор", ТипЧисло);
	Колонки.Добавить("НДС", ТипЧисло);
	Колонки.Добавить("Пошлина", ТипЧисло);
	ТаблицаСтрокИнвойсов.Индексы.Добавить("СтрокаИнвойса");
	
	ТаблицаСтрокГТД.Индексы.Добавить("СтрокаГТД");	
	СтруктураПоискаСтрокиГТД = Новый Структура("СтрокаГТД");
	СтруктураПоискаСтрокиИнвойса = Новый Структура("СтрокаИнвойса, ГТД");
	Пока ТаблицаСтрокГТД.Количество() Цикл
		
		// Найдем порцию строк - строк с одинаковым товаром строки ГТД
		СтрокаТаблицыСтрокГТД = ТаблицаСтрокГТД[0];
		СтруктураПоискаСтрокиГТД.СтрокаГТД = СтрокаТаблицыСтрокГТД.СтрокаГТД;
		ПорцияСтрок = ТаблицаСопоставления.НайтиСтроки(СтруктураПоискаСтрокиГТД);
		
		Если НЕ ПорцияСтрок.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to find Invoice items for Customs file line """ + СтрокаТаблицыСтрокГТД.СтрокаГТД + """!",
				ЭтотОбъект, , , Отказ);
			ТаблицаСтрокГТД.Удалить(СтрокаТаблицыСтрокГТД);
			Продолжить;
		КонецЕсли;
		
		// Определим общую стоимость найденной порции строк
		СтоимостьСтрокИнвойсов = 0;
		Для Каждого СтрокаПорцииСтрок Из ПорцияСтрок Цикл
			СтоимостьСтрокИнвойсов = СтоимостьСтрокИнвойсов + СтрокаПорцииСтрок.СуммаСтрокиИнвойса;
		КонецЦикла;
		
		// Если стоимость инвойса не определена - сообщим об ошибке и удалим эту порцию строк
		Если СтоимостьСтрокИнвойсов = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось определить валютную сумму invoice items, сопоставленных с Customs file line """ + СтрокаТаблицыСтрокГТД.СтрокаГТД + """!",
				ЭтотОбъект, , , Отказ);
				
			Для Каждого СтрокаПорцииСтрок Из ПорцияСтрок Цикл
				ТаблицаСопоставления.Удалить(СтрокаПорцииСтрок);
			КонецЦикла;
			
			ТаблицаСтрокГТД.Удалить(СтрокаТаблицыСтрокГТД);
			
			Продолжить;
			
		КонецЕсли;
		
		// Переменные для устранения ошибки округления
		РасхождениеСбора = СтрокаТаблицыСтрокГТД.Сбор;
		РасхождениеПошлины = СтрокаТаблицыСтрокГТД.Пошлина;
		РасхождениеНДС = СтрокаТаблицыСтрокГТД.НДС;
		СамаяБольшаяСтрока = Неопределено;
		
		Для Каждого СтрокаПорцииСтрок Из ПорцияСтрок Цикл
			
			СтруктураПоискаСтрокиИнвойса.СтрокаИнвойса = СтрокаПорцииСтрок.СтрокаИнвойса;
			СтруктураПоискаСтрокиИнвойса.ГТД = СтрокаТаблицыСтрокГТД.ГТД;
			СтрокиТаблицыСтрокИнвойсов = ТаблицаСтрокИнвойсов.НайтиСтроки(СтруктураПоискаСтрокиИнвойса);
			Если НЕ СтрокиТаблицыСтрокИнвойсов.Количество() Тогда
				
				СтрокаТаблицыСтрокИнвойсов = ТаблицаСтрокИнвойсов.Добавить();
				СтрокаТаблицыСтрокИнвойсов.СтрокаИнвойса = СтрокаПорцииСтрок.СтрокаИнвойса;
				СтрокаТаблицыСтрокИнвойсов.ГТД = СтрокаТаблицыСтрокГТД.ГТД;
				СтрокаТаблицыСтрокИнвойсов.СуммаСтрокиИнвойса = СтрокаПорцииСтрок.СуммаСтрокиИнвойса;
				
			Иначе
				
				СтрокаТаблицыСтрокИнвойсов = СтрокиТаблицыСтрокИнвойсов[0];
				
			КонецЕсли;
			
			ВесСтроки = СтрокаПорцииСтрок.СуммаСтрокиИнвойса / СтоимостьСтрокИнвойсов;
			
			Сбор = Окр(СтрокаТаблицыСтрокГТД.Сбор * ВесСтроки, 2);
			РасхождениеСбора = РасхождениеСбора - Сбор;
			СтрокаТаблицыСтрокИнвойсов.Сбор = СтрокаТаблицыСтрокИнвойсов.Сбор + Сбор;
			
			Пошлина = Окр(СтрокаТаблицыСтрокГТД.Пошлина * ВесСтроки, 2);
			РасхождениеПошлины = РасхождениеПошлины - Пошлина;
			СтрокаТаблицыСтрокИнвойсов.Пошлина = СтрокаТаблицыСтрокИнвойсов.Пошлина + Пошлина;
			
			НДС = Окр(СтрокаТаблицыСтрокГТД.НДС * ВесСтроки, 2);
			РасхождениеНДС = РасхождениеНДС - НДС;
			СтрокаТаблицыСтрокИнвойсов.НДС = СтрокаТаблицыСтрокИнвойсов.НДС + НДС;
			
			Если СамаяБольшаяСтрока = Неопределено
				ИЛИ  СамаяБольшаяСтрока.СуммаСтрокиИнвойса < СтрокаТаблицыСтрокИнвойсов.СуммаСтрокиИнвойса Тогда
				СамаяБольшаяСтрока = СтрокаТаблицыСтрокИнвойсов;
			КонецЕсли;
			
			ТаблицаСопоставления.Удалить(СтрокаПорцииСтрок);
			
		КонецЦикла;
		
		Если РасхождениеСбора <> 0 Тогда
			СамаяБольшаяСтрока.Сбор = СамаяБольшаяСтрока.Сбор + РасхождениеСбора;
		КонецЕсли;
		
		Если РасхождениеПошлины <> 0 Тогда
			СамаяБольшаяСтрока.Пошлина = СамаяБольшаяСтрока.Пошлина + РасхождениеПошлины;
		КонецЕсли;
		
		Если РасхождениеНДС <> 0 Тогда
			СамаяБольшаяСтрока.НДС = СамаяБольшаяСтрока.НДС + РасхождениеНДС;
		КонецЕсли;
		
		ТаблицаСтрокГТД.Удалить(СтрокаТаблицыСтрокГТД);
		
	КонецЦикла;
	
	Колонки.Удалить("СуммаСтрокиИнвойса");
	Возврат ТаблицаСтрокИнвойсов;
	
КонецФункции

Процедура СформироватьДвиженияInternationalFactCosts(ТаблицаСтрокИнвойсов)
	
	// регистр International Fact Costs   	

	УстановитьПривилегированныйРежим(Истина);
	
	ДвиженияInternationalFactCosts = Движения.InternationalAndDomesticFactCosts;
	
	ДвиженияInternationalFactCosts.Записывать = Истина;
	ДвиженияInternationalFactCosts.Очистить();
	
	СurrencyUSD = Справочники.Валюты.НайтиПоКоду("840");
	ИсключаемыеИзЗатратERPTreatments = ImportExportСерверПовтИспСеанс.ПолучитьИсключаемыеИзЗатратERPTreatments();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСтрокИнвойсов", ТаблицаСтрокИнвойсов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСтрокИнвойсов.ГТД,
	|	ТаблицаСтрокИнвойсов.СтрокаИнвойса,
	|	ТаблицаСтрокИнвойсов.Сбор,
	|	ТаблицаСтрокИнвойсов.Пошлина
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаСтрокИнвойсов КАК ТаблицаСтрокИнвойсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ГТД.КодВалютыТамСтоимости КАК Валюта,
	|	ВТ.ГТД.ДатаВыпуска КАК Дата,
	|	ВТ.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	ВТ.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	ВТ.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	ВТ.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	ВТ.СтрокаИнвойса.SoldTo КАК ParentCompany,
	|	ВТ.СтрокаИнвойса.Классификатор КАК ERPTreatment,
	|	ВТ.Сбор КАК Сбор,
	|	ВТ.Пошлина КАК Пошлина,
	|	0 КАК Fees,
	|	0 КАК Duties
	|ИЗ
	|	ВТ КАК ВТ";
	
	ТЗLines = Запрос.Выполнить().Выгрузить();			   
	
	ТЗLinesБезИсключаемыхERP = ТЗLines.СкопироватьКолонки();
	Для Каждого Стр из ТЗLines Цикл
		
		Если ИсключаемыеИзЗатратERPTreatments.Найти(Стр.ERPTreatment) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТЗ = ТЗLinesБезИсключаемыхERP.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Стр);
		
		Если СтрокаТЗ.Валюта <> СurrencyUSD тогда
			
			СтруктураСurrency = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаТЗ.Валюта, СтрокаТЗ.Дата);
			СтруктураСurrencyUSD = ОбщегоНазначения.ПолучитьКурсВалюты(СurrencyUSD, СтрокаТЗ.Дата);
			
			СтрокаТЗ.Duties = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЗ.Пошлина, 
			СтрокаТЗ.Валюта, СurrencyUSD, 
			СтруктураСurrency.Курс, СтруктураСurrencyUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencyUSD.Кратность);
			
			СтрокаТЗ.Fees = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЗ.Сбор, 
			СтрокаТЗ.Валюта, СurrencyUSD, 
			СтруктураСurrency.Курс, СтруктураСurrencyUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencyUSD.Кратность);
			
		КонецЕсли;
		   		
	КонецЦикла;
	
	ТЗLinesБезИсключаемыхERP.Колонки.Удалить("ERPTreatment");
	ТЗLinesБезИсключаемыхERP.Колонки.Удалить("Валюта");
	ТЗLinesБезИсключаемыхERP.Колонки.Удалить("Дата");
	ТЗLinesБезИсключаемыхERP.Колонки.Удалить("Сбор");
	ТЗLinesБезИсключаемыхERP.Колонки.Удалить("Пошлина");

	ТЗLinesБезИсключаемыхERP.Свернуть("ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment", "Fees,Duties");
	
	Для Каждого СтрокаТЗ Из ТЗLinesБезИсключаемыхERP Цикл
		
		Если СтрокаТЗ.Duties <> 0 ИЛИ СтрокаТЗ.Fees <> 0 Тогда 
			
			Движение = ДвиженияInternationalFactCosts.Добавить();
			
			Движение.Период = НачалоМесяца(?(День(Дата) > 25, ДобавитьМесяц(Дата, 1), Дата));
			Движение.CostsType = Перечисления.FactCostsTypes.CustomsDuties_Fees;
			Движение.DomesticInternational = Перечисления.DomesticInternational.International;
			
			Движение.ParentCompany = СтрокаТЗ.ParentCompany;
			Движение.Geomarket = СтрокаТЗ.Geomarket;
			Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
			Движение.Segment = СтрокаТЗ.Segment;
			Движение.SubSegment = СтрокаТЗ.SubSegment;
			
			Движение.Sum = СтрокаТЗ.Duties + СтрокаТЗ.Fees;
			
		КонецЕсли;
				
	КонецЦикла;
	
		  		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

Процедура ОтразитьCustomsFilesOfGoods(ТаблицаItems, ТаблицаСопоставления)
	
	ДвиженияПоCustomsFilesOfGoods = Движения.CustomsFilesOfGoods;
	ДвиженияПоCustomsFilesOfGoods.Очистить();
	ДвиженияПоCustomsFilesOfGoods.Записывать = Истина;

	СтруктураПоискаПоItem = Новый Структура("СтрокаИнвойса");
	Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
		
		СтруктураПоискаПоItem.СтрокаИнвойса = СтрокаТаблицыItems.Item;
		СтрокиТаблицыСопоставления = ТаблицаСопоставления.НайтиСтроки(СтруктураПоискаПоItem);
		ВспомогательнаяТаблица = ТаблицаСопоставления.Скопировать(СтрокиТаблицыСопоставления, "ГТД, CustomsFileNo, ДатаВыпуска, CustomsFileLineNo");
		
		// Товар может попасть в разные ГТД.
		// Например, если первая ГТД была косячной и ее переделали.
		// Мы будем брать последнюю по дате выпуска ГТД.
		ВспомогательнаяТаблица.Сортировать("ДатаВыпуска Убыв");
		
		Движение = ДвиженияПоCustomsFilesOfGoods.Добавить();
		Движение.Item = СтрокаТаблицыItems.Item;
		Движение.CustomsFile = ВспомогательнаяТаблица[0].ГТД;
		Движение.DTNo = ВспомогательнаяТаблица[0].CustomsFileNo;
		
		// Отразим номер строки только в том случае - если он один
		ВспомогательнаяТаблица.Свернуть("CustomsFileLineNo");
		Если ВспомогательнаяТаблица.Количество() = 1 Тогда
			Движение.DTLineNo = ВспомогательнаяТаблица[0].CustomsFileLineNo;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ОтразитьTemporaryImport(ТаблицаItems, ТаблицаItemsOfCustomsFilesLines, ВыборкаРеквизитовShipment)
	
	Движения.ExpiryDatesOfItemsInTemporaryImpExp.Очистить();
	Движения.ExpiryDatesOfItemsInTemporaryImpExp.Записывать = Истина;
	
	Движения.QtyOfItemsInTemporaryImpExp.Очистить();
	Движения.QtyOfItemsInTemporaryImpExp.Записывать = Истина;
	
	Движения.ResponsiblesForItemsInTemporaryImpExp.Очистить();
	Движения.ResponsiblesForItemsInTemporaryImpExp.Записывать = Истина;
	
	Движения.AdditionalDataOfItemsInTemporaryImpExp.Очистить();
	Движения.AdditionalDataOfItemsInTemporaryImpExp.Записывать = Истина;
	
	Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
		
		Если СтрокаТаблицыItems.PermanentTemporary = Перечисления.PermanentTemporary.Permanent Тогда
			Продолжить;
		КонецЕсли;
		
		// Раньше мы уже проверили, что во всех строках должна быть одна Temporary import date, так что сейчас возьмем любую
		СтрокаТЧ = Сопоставление.Найти(СтрокаТаблицыItems.Item, "СтрокаИнвойса");
		СтрокаItemsOfCustomsFileLines = ТаблицаItemsOfCustomsFilesLines.Найти(СтрокаТЧ.ТоварСтрокиГТД, "ItemOfCustomsFileLine");
		
		// Отразим в истории
		Движение = Движения.ExpiryDatesOfItemsInTemporaryImpExp.Добавить();
		Движение.Период = ВыборкаРеквизитовShipment.Cleared;
		Движение.Item = СтрокаТаблицыItems.Item;
		Движение.ExpiryDate = СтрокаItemsOfCustomsFileLines.TemporaryImportDate;
		
		// Отразим количество
		Движение = Движения.QtyOfItemsInTemporaryImpExp.ДобавитьПриход();
		Движение.Период = ВыборкаРеквизитовShipment.Cleared;
		Движение.Item = СтрокаТаблицыItems.Item;
		Движение.Qty = СтрокаТаблицыItems.Qty;
		
		// Отразим ответственного
		Движение = Движения.ResponsiblesForItemsInTemporaryImpExp.Добавить();
		Движение.Период = ВыборкаРеквизитовShipment.Cleared;
		Движение.Item = СтрокаТаблицыItems.Item;
		Движение.Responsible = ВыборкаРеквизитовShipment.Specialist;
		
		// Отразим дополнительные данные
		Движение = Движения.AdditionalDataOfItemsInTemporaryImpExp.Добавить();
		Движение.Период = ВыборкаРеквизитовShipment.Cleared;
		Движение.Item = СтрокаТаблицыItems.Item;
		Движение.ProcessLevel = ВыборкаРеквизитовShipment.ProcessLevel;
		Движение.CCAJobReference = ВыборкаРеквизитовShipment.CCAJobReference;
		Движение.CustomsRegime = СтрокаItemsOfCustomsFileLines.Regime;
		Движение.ShipperName = СтрокаItemsOfCustomsFileLines.Отправитель;	
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДвиженияПоImportItemsWithoutCustomsFiles(Отказ, ТаблицаItems)
	
	// Списывает ImportItemsWithoutCustomsFiles и проверяет остатки
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияImportItemsWithoutCustomsFiles = Движения.ImportItemsWithoutCustomsFiles;
	ДвиженияImportItemsWithoutCustomsFiles.Очистить();
	ДвиженияImportItemsWithoutCustomsFiles.Записывать = Истина;

	Если ТипЗнч(Поставка) <> Тип("ДокументСсылка.Поставка") Тогда
		Возврат;
	КонецЕсли;

	// Добавим движения
	Для Каждого Стр из ТаблицаItems Цикл 
		ДвиженияImportItemsWithoutCustomsFiles.ДобавитьЗапись(
			ВидДвиженияНакопления.Расход,
			Дата,
			Стр.Item,
			Поставка);
	КонецЦикла;
	
	// Проверим остатки
	ДвиженияImportItemsWithoutCustomsFiles.Записать();		
	ТаблицаОстатков = РегистрыНакопления.ImportItemsWithoutCustomsFiles.ПолучитьОстаткиПоImportShipment(
						Новый Граница(МоментВремени(), ВидГраницы.Включая),
						Поставка);
	СообщитьОбОстаткахItemsWithoutCustomsFiles(Отказ, ТаблицаОстатков);
	
КонецПроцедуры

Процедура ДвиженияПоExportItemsWithoutCustomsFiles(Отказ, ТаблицаItems)
	
	// Списывает ExportItemsWithoutCustomsFiles и проверяет остатки
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияExportItemsWithoutCustomsFiles = Движения.ExportItemsWithoutCustomsFiles;
	ДвиженияExportItemsWithoutCustomsFiles.Очистить();
	ДвиженияExportItemsWithoutCustomsFiles.Записывать = Истина;
	
	Если ТипЗнч(Поставка) <> Тип("ДокументСсылка.ExportShipment") Тогда
		Возврат;		
	КонецЕсли;
				
	Для Каждого Стр Из ТаблицаItems Цикл
		ДвиженияExportItemsWithoutCustomsFiles.ДобавитьЗапись(
			ВидДвиженияНакопления.Расход,
			Дата,  
			Стр.Item,
			Стр.ExportRequest,
			Поставка);
	КонецЦикла;
	
	// Проверим остатки
	ДвиженияExportItemsWithoutCustomsFiles.Записать();
	
	ТаблицаОстатков = РегистрыНакопления.ExportItemsWithoutCustomsFiles.ПолучитьОстаткиПоExportShipment(
						Новый Граница(МоментВремени(), ВидГраницы.Включая),
						Поставка);
	СообщитьОбОстаткахItemsWithoutCustomsFiles(Отказ, ТаблицаОстатков);
	
КонецПроцедуры

Процедура СообщитьОбОстаткахItemsWithoutCustomsFiles(Отказ, ТаблицаОстатков)
	
	// Проверяет переданные остатки ItemsWithoutCustomsFiles
	// Если остаток положительный - товар не сматчен
	// Если отрицательный - товар не из этой поставки
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		Если СтрокаОстатков.РесурсОстаток > 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Item '" + СокрЛП(СтрокаОстатков.Item) + "' is not matched!",
				ЭтотОбъект, "Items", , Отказ);
				
		ИначеЕсли СтрокаОстатков.РесурсОстаток < 0 Тогда
			
			СтрокаТЧ = Сопоставление.Найти(СтрокаОстатков.Item, "СтрокаИнвойса");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТЧ.НомерСтроки + ": Item '" + СокрЛП(СтрокаОстатков.Item) + "' does not belong to '" + Поставка + "' or Shipment is not submitted to customs!",
				ЭтотОбъект, "Items[" + (СтрокаТЧ.НомерСтроки-1) + "].Item", , Отказ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

