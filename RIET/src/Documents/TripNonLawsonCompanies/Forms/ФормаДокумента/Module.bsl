
////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Equipment.ПараметрыВыбора = ПолучитьПараметрыВыбораEquipment(Объект.MOT);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
	КонецЕсли;
	
	SecondaryTrips.Параметры.УстановитьЗначениеПараметра("Primary", ?(ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Secondary, Объект.Ссылка, Неопределено));
	
	// список выбора Operator
	НастроитьСписокВыбораOperatorНаСервере();
	
	ЗаполнитьBarcodeOfTrip();
	ОбновитьДанныеTMFНаСервере();
	
	// список выбора 
	НастроитьСписокВыбораSpecialistsНаСервере();
	НастроитьСписокВыбораВалютНаСервере();
	НастроитьСписокВыбораMOTНаСервере();
		
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Элементы.Primary.Видимость = Объект.Secondary;
	Элементы.SecondaryPayer.Видимость = Объект.Secondary;
	Если Объект.Secondary Тогда
		Элементы.СтраницаParcels.Видимость = Ложь;
		Элементы.СтраницаStops.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	// { RGS AArsentev 16.01.2017 S-I-0004384
	Элементы.AdditionalVolume.Видимость = ЗначениеЗаполнено(Объект.NavigationType) И Объект.NavigationType <> Перечисления.SummerWinter.NA;
	// } RGS AArsentev 16.01.2017 S-I-0004384
	
	// { RGS AArsentev 29.09.2017 S-I-0003596
	SecondaryTrips.Параметры.УстановитьЗначениеПараметра("Primary", ?(ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Secondary, Объект.Ссылка, Неопределено));
	// } RGS AArsentev 29.09.2017 S-I-0003596
	
	// { RGS DKazanskiy 18.10.2018 12:08:48 - S-I-0005455
	ОбновитьRegister();	
	// } RGS DKazanskiy 18.10.2018 12:08:50 - S-I-0005455
	
	
	TransportationRegistersAPInvoices.Параметры.УстановитьЗначениеПараметра("Trip", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	ОбновитьДинамическиеКолонкиStops();
	
	// { RGS AFokin 19.10.2018 23:59:59 S-I-0006152
	//WellJetty = FacilityTypesDemobilization();
	//ВключаемВидимостьDemobilization = Ложь;
	//Для каждого Stop Из Объект.Stops Цикл
	//	Если Stop.Type = Перечисления.StopsTypes.Source И Stop.Location.FacilityType = WellJetty Тогда
	//		ВключаемВидимостьDemobilization = Истина;
	//	КонецЕсли;	
	//КонецЦикла;	
	УстановитьВидимостьDemobilization();	
	// } RGS AFokin 19.10.2018 23:59:59 S-I-0006152
	
	// { RGS DKazanskiy 07.12.2018 13:30:45 - S-I-0006428 
	УправлениеВидимостью(ЭтаФорма, Объект);
	// } RGS DKazanskiy 07.12.2018 13:30:47 - S-I-0006428 
		
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораOperatorНаСервере()
	      		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", 
		РГСофтСерверПовтИспСеанс.ПолучитьМассивOperators()));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Operator.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораMOTНаСервере()
	      		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", 
		РГСофтСерверПовтИспСеанс.ПолучитьМассивLocalDistributionMOT()));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.MOT.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Объект.Дата = Неопределено;
	КонецЕсли;
	
	НастроитьВидимостьПоTypeOfTransport();
	
	// { RGS ASeryakov 02.07.18 S-I-0005611
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьContractRateПоTypeOfTransport();
	КонецЕсли;
	// } RGS ASeryakov 02.07.18 S-I-0005611

	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Объект.Дата = Неопределено;
	КонецЕсли;

	НастроитьВидимостьПоTypeOfTransport();
	
	// { RGS ASeryakov 02.03.18 S-I-0004756
	СписокРеквизитов = Новый Массив();
	СписокРеквизитов.Добавить("ContractRate");
	СписокРеквизитов.Добавить("UniqueSupplier");
	УстановитьВидимостьРеквизитовГруппыProductLineApprovedBy(СписокРеквизитов);
	// } RGS ASeryakov 02.03.18 S-I-0004756

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	
	Если ЗначениеЗаполнено(Объект.Closed) Тогда 
		ОбновитьПредставлениеDuration();
		Recharge.Параметры.УстановитьЗначениеПараметра("Parcels", МассивParcels);
	Иначе 
		ОбновитьПодвалParcelsИТаблицуStopsНаСервере(МассивParcels);
	КонецЕсли;
	
	ПолучитьApprovalИОбновитьStage();
	
	//AArsentev
	ПолучитьГеолокацию();
	//AArsentev
	
	НастроитьВидимостьЭлементовПоStage();
	
	ОбновитьДанныеTMFНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	   		
	Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(ТекущийОбъект.Ссылка);
	
	TransportationRegistersAPInvoices.Параметры.УстановитьЗначениеПараметра("Trip", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	SecondaryTrips.Параметры.УстановитьЗначениеПараметра("Primary", ?(ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Secondary, Объект.Ссылка, Неопределено));
	
	ЗаполнитьBarcodeOfTrip();
	ОбновитьДанныеTMFНаСервере();
	ОбновитьДинамическиеКолонкиStops();
	
	НастроитьВидимостьЭлементовПоStage();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НастроитьВидимостьПоTypeOfTransport();
	ргМодульОбменаДаннымиПрив.ЗапуститьВыгрузку_WEBDB();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовПоStage()
	
	ClosedApproved = (Stage = Перечисления.TripNonLawsonCompaniesStages.Closed
		ИЛИ Stage = Перечисления.TripNonLawsonCompaniesStages.Approved
		ИЛИ Stage = Перечисления.TripNonLawsonCompaniesStages.AwaitingApproval);
		
	Closed = (Stage = Перечисления.TripNonLawsonCompaniesStages.Closed);
	
	// { RGS AArsentev 11.09.2017 S-I-0003682
	//Элементы.ГруппаMOT.ТолькоПросмотр = ClosedApproved;
	//Элементы.ГруппаEquipmentNo.ТолькоПросмотр = ClosedApproved;
	// } RGS AArsentev 11.09.2017 S-I-0003682
	Элементы.Operator.ТолькоПросмотр = Closed;		
	
	Элементы.СтраницаParcels.ТолькоПросмотр = ClosedApproved;
	Элементы.RoundTrip.ТолькоПросмотр = ClosedApproved;
	
	Элементы.ГруппаCosts.ТолькоПросмотр = ClosedApproved;
	Элементы.ГруппаAccessorialСosts.ТолькоПросмотр = Closed;
	 
	ДоступноДляBillingSpecialist = (Stage = Перечисления.TripNonLawsonCompaniesStages.Closed
		И (РольДоступна("LocalDistributionBillingSpecialist_ForNonLawsonCompanies") 
		ИЛИ РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies")));	
	
	Элементы.ГруппаBilling.ТолькоПросмотр = Не ДоступноДляBillingSpecialist;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// подумать как переписать
	МодифицированностьДоОбновленияStops = Модифицированность;
	
	ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТекущийОбъект.Parcels, "Parcel"), ТекущийОбъект);
	
	Если Модифицированность <> МодифицированностьДоОбновленияStops Тогда 
		ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
	КонецЕсли;
	
	СверитьВремяСЗаявками();
	
	// { RGS AArsentev 15.09.2017
	Если Не Отказ Тогда
		ПроверитьДаты(Отказ);
	КонецЕсли;
	// } RGS AArsentev 15.09.2017
	
	// { RGS AArsentev 31.07.2018 - перенёс логирование в модуль объекта
	//ЗаписатьЛоги(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// } RGS AArsentev 31.07.2018
	 
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЛоги(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// подумать как переписать
	МодифицированностьДоОбновленияStops = Модифицированность;
	
	ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТекущийОбъект.Parcels, "Parcel"), ТекущийОбъект);
	
	Если Модифицированность <> МодифицированностьДоОбновленияStops Тогда 
		ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
	КонецЕсли;
	
	СверитьВремяСЗаявками();
	
	// { RGS AArsentev 09.09.2016 16:56:30 S-I-0001717	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения тогда
		МенеджерЗаписи = РегистрыСведений.TripNonLawsonCompaniesLogs.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.LogTo = Объект.Ссылка;
		МенеджерЗаписи.Date	= ТекущаяДата();	
		МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеСтатуса;
		МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Text	= "Отмена проведения документа";	
		МенеджерЗаписи.Записать();	
	КонецЕсли;	
		
	СтрокаИсключаемыхРеквизитов = "Comments, ModifiedBy, ModificationDate, OnTime, PlannedArrivalVsCurrentDate, Stops.OnTime, Stops.Mileage, Stops.Manually, Costs.CostType, Costs.Description, Costs.Sum"; 
	ТекстИзменений = ImportExportСервер.РегистрацияИзмененийРеквизитовОбъекта(Объект, СтрокаИсключаемыхРеквизитов);
	
	Если ТекстИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.TripNonLawsonCompaniesLogs.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.LogTo = Объект.Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	// } RGS AArsentev 09.09.2016 16:56:30 S-I-0001717
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура СверитьВремяСЗаявками()
	
	Для Каждого Стр из Объект.Stops Цикл 
		
		Если Стр.Type = Перечисления.StopsTypes.Destination 
			ИЛИ Стр.Type = Перечисления.StopsTypes.Transit Тогда 
			
			Если ЗначениеЗаполнено(Стр.PlannedArrivalLocalTime) И ЗначениеЗаполнено(Стр.MinimumRequiredDeliveryLocalTime)
				И Стр.PlannedArrivalLocalTime > Стр.MinimumRequiredDeliveryLocalTime Тогда 
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Не критическая ошибка: Плановое время прибытия позднее требуемой даты доставки для некоторых грузовых мест!";
				Иначе 	
					ТекстОшибки = "Non-critical error: Planned arrival time is later then Required delivery time for some parcels!";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				, "Объект.Stops[" + (Стр.НомерСтроки-1) + "].PlannedArrivalLocalTime");
				
			КонецЕсли;
								
		КонецЕсли;
		
	КонецЦикла;
	 	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораSpecialistsНаСервере()
	      		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", 
		РГСофтСерверПовтИспСеанс.ПолучитьМассивSpecialists()));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Specialist.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры	

&НаСервере
Процедура НастроитьСписокВыбораВалютНаСервере()
	      		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", 
		РГСофтСерверПовтИспСеанс.ПолучитьМассивВалютДляTripNonLawson()));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Currency.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьApprovalИОбновитьStage()
	
	Если Не ЗначениеЗаполнено(Approval) Тогда 
		Approval = Задачи.TripsNonLawsonApproval.ПолучитьСсылкуНаApproval(Объект.Ссылка);
	КонецЕсли;
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если Объект.Secondary Тогда
		Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Объект.Primary);
	Иначе
	// } RGS AArsentev 20.09.2017 S-I-0003596
		Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Объект.Ссылка);
	// { RGS AArsentev 20.09.2017 S-I-0003596
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьГеолокацию()
	
	Геолокация = Задачи.МестоположениеПоставки.ПолучитьГеолокациюТрипа(Объект.Ссылка);
	
	Если Геолокация <> Неопределено Тогда
		Местоположение = Геолокация.Местоположение;
		Время = Геолокация.ВремяМестоположения;
		Комментарий = Геолокация.Описание; 
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанApproval" 
		И Источник = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "НужноЗаполнить_SQ_Fields" И Источник = Объект.Ссылка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы["СтраницаComments"];
		
		Если Не ЗначениеЗаполнено(Объект.OutOfComplianceReason) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS()  Тогда 
				ТекстОшибки = "Нужно заполнить поле - 'Причины несоблюдения требований'";
			Иначе 
				ТекстОшибки = "'Out of compliance reason' is empty!";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "OutOfComplianceReason", "Объект",);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.OOC_Responsible) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS()  Тогда 
				ТекстОшибки = "Нужно заполнить поле - 'Ответственная сторона'";
			Иначе 
				ТекстОшибки = "'OOC responsible' is empty!";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "OOC_Responsible", "Объект",);
		КонецЕсли;
		
	КонецЕсли;
	
	// { RGS ASeryakov 02.03.18 S-I-0005597
	Если ИмяСобытия = "СообщитьЗаполнитьWaybillNo" Тогда
		
		ТекстОшибки = НСтр("ru = 'Поле ""Номер накладной"" не заполнено!'; en = 'The ""Waybill no"" field is not filled!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "WaybillNo", "Объект",);
		
	ИначеЕсли ИмяСобытия = "СообщитьЗаполнитьКоличествоWaybillNo" Тогда
		
		ТекстОшибки = НСтр("ru = 'В поле ""Номер накладной"" номер должен состять из 10 цифр!'; en = 'In the field ""Waybill no"" the number must consist of 10 digits!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "WaybillNo", "Объект",);
		
	КонецЕсли;
	// } RGS ASeryakov 02.03.18 S-I-0005597

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Transport

&НаКлиенте
Процедура EquipmentНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.MOT) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'MOT / Способ перевозки'!";
		Иначе 	
			ТекстОшибки = "Select 'MOT' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "MOT", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура EquipmentПриИзменении(Элемент)
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура MOTПриИзменении(Элемент)
	
	Элементы.Equipment.ПараметрыВыбора = ПолучитьПараметрыВыбораEquipment(Объект.MOT);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВыбораEquipment(MOT)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("MOT", MOT);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	EquipmentsMOTs.Ссылка КАК Equipment
	|ИЗ
	|	Справочник.Equipments.MOTs КАК EquipmentsMOTs
	|ГДЕ
	|	EquipmentsMOTs.MOT = &MOT
	|	И НЕ EquipmentsMOTs.Ссылка.ПометкаУдаления";
	
	МассивEquipments = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Equipment");
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивEquipments));
	
	Возврат Новый ФиксированныйМассив(НовыйМассивПараметров);
		
КонецФункции

&НаКлиенте
Процедура TypeOfTransportПриИзменении(Элемент)
	
	Объект.Transport = Неопределено;
	Объект.ServiceProvider = Неопределено;
	Объект.EquipmentNo = Неопределено;

	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Own") Тогда 
		Объект.ServiceProvider = ПредопределенноеЗначение("Справочник.ServiceProviders.SLB");
	ИначеЕсли Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
	НастроитьВидимостьПоTypeOfTransport();
	// { RGS ASeryakov 02.07.18 S-I-0005611
	ЗаполнитьContractRateПоTypeOfTransport();
	// { RGS ASeryakov 02.07.18 S-I-0005611
	
	// { RGS DKazanskiy 07.12.2018 13:30:45 - S-I-0006428 
	УправлениеВидимостью(ЭтаФорма, Объект);
	// } RGS DKazanskiy 07.12.2018 13:30:47 - S-I-0006428 
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьПоTypeOfTransport()
	           	
	Элементы.Transport.ТолькоПросмотр = Ложь;
	Элементы.ServiceProvider.ТолькоПросмотр = Ложь;
	Элементы.EquipmentNo.ТолькоПросмотр = Истина;
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Элементы.СтраницаCosts.Видимость = Ложь;
	Если Объект.Secondary Тогда
		Элементы.SecondaryTrips.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	// { RGS AArsentev 15.05.2018 Rental automatic
	Элементы.ГруппаTMF.Видимость = Истина;
	Элементы.DateOfBorderCrossing.Видимость = Истина;
	Элементы.ГруппаProductLineApprovedBy.Видимость = Истина;
	// } RGS AArsentev 15.05.2018 Rental automatic
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Own") Тогда 
		Элементы.ServiceProvider.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Элементы.Transport.ТолькоПросмотр = Истина;
		Элементы.СтраницаCosts.Видимость = Истина;
		Элементы.EquipmentNo.ТолькоПросмотр = Ложь;
		НастроитьВидимостьCostsPlanning();
		
	// { RGS LKhristyuk 5/14/2018 4:33:27 PM - вопрос S-I-0005053
	ИначеЕсли Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.RentalAutomatic") Тогда 
		Элементы.Transport.ТолькоПросмотр = Истина;
		Элементы.СтраницаCosts.Видимость = Истина;
		Элементы.EquipmentNo.ТолькоПросмотр = Ложь;
		НастроитьВидимостьCostsPlanning();
		// { RGS AArsentev 15.05.2018 Rental automatic
		Элементы.ГруппаTMF.Видимость = Ложь;
		Элементы.DateOfBorderCrossing.Видимость = Ложь;
		Элементы.ГруппаProductLineApprovedBy.Видимость = Ложь;
		// } RGS AArsentev 15.05.2018 Rental automatic
	// } RGS LKhristyuk 5/14/2018 4:34:00 PM - вопрос S-I-0005053 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура TransportПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Transport) И Объект.Transport <> ПредопределенноеЗначение("Справочник.Transport.CallOut") Тогда
		СтруктураTransport = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Transport, "Код,ServiceProvider,Equipment");
		Объект.EquipmentNo = СтруктураTransport.Код;
		Объект.ServiceProvider = СтруктураTransport.ServiceProvider;
		Объект.Equipment = СтруктураTransport.Equipment;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура TransportНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.MOT) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'MOT / Способ перевозки'!";
		Иначе 	
			ТекстОшибки = "Select 'MOT' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "MOT", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Equipment) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Equipment / Тип транспортного средства'!";
		Иначе 	
			ТекстОшибки = "Select 'Equipment' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "Equipment", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.TypeOfTransport) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Сначала выберите 'Type of transport / Тип транспорта'!";
		Иначе 	
			ТекстОшибки = "Select 'Type of transport' first!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "TypeOfTransport", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	   		
КонецПроцедуры

&НаКлиенте
Процедура ServiceProviderПриИзменении(Элемент)
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда 
		Объект.Transport = ПредопределенноеЗначение("Справочник.Transport.CallOut");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// TMF

&НаКлиенте
Процедура СоздатьПользователяWebDB(Команда)
	
	ОтказПользователя = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОтказПользователя = Истина;
		
		ТекстПредупрждения = НСтр("ru = 'Необходимо записать документ поставки.'; en = 'You need to save trip.'");
		ПоказатьПредупреждение(, ТекстПредупрждения);
		
	КонецЕсли;
	
	Если Не ОтказПользователя Тогда
		СоздатьПользователяWebDBНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеTMF(Команда)
	
	ОбновитьДанныеTMFНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеTMFНаСервере()
	
	MobileDevice = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Trip", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ConnectionOfTripСрезПоследних.Период,
	|	ConnectionOfTripСрезПоследних.Trip,
	|	ConnectionOfTripСрезПоследних.MobileDevice,
	|	ConnectionOfTripСрезПоследних.Activity
	|ИЗ
	|	РегистрСведений.ConnectionOfTrip.СрезПоследних(, Trip = &Trip) КАК ConnectionOfTripСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	StatusOfTripСрезПоследних.Status,
	|	StatusOfTripСрезПоследних.Location,
	|	StatusOfTripСрезПоследних.Type,
	|	StatusOfTripСрезПоследних.Body,
	|	StatusOfTripСрезПоследних.Период,
	|	StatusOfTripСрезПоследних.MobileDevice
	|ИЗ
	|	РегистрСведений.StatusOfTrip.СрезПоследних(, Trip = &Trip) КАК StatusOfTripСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	RouteOfTripСрезПоследних.Address,
	|	RouteOfTripСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.RouteOfTrip.СрезПоследних(, Trip = &Trip) КАК RouteOfTripСрезПоследних";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаConnectionOfTrip = РезультатЗапроса[0].Выбрать();
	Если ВыборкаConnectionOfTrip.Следующий() Тогда
		MobileDevice = ВыборкаConnectionOfTrip.MobileDevice;
	КонецЕсли;
	
	ВыборкаStatusOfTrip = РезультатЗапроса[1].Выбрать();
	Если ВыборкаStatusOfTrip.Следующий() Тогда
		WorkStatusTime = ВыборкаStatusOfTrip.Период;
		WorkStatus = ВыборкаStatusOfTrip.Status;
		LocationType = ВыборкаStatusOfTrip.Type;
		Location = ВыборкаStatusOfTrip.Location;
		CarbodyStatus = ВыборкаStatusOfTrip.Body;
	КонецЕсли;
	
	ВыборкаRouteOfTrip = РезультатЗапроса[2].Выбрать();
	Если ВыборкаRouteOfTrip.Следующий() Тогда
		GeolocationTime = ВыборкаRouteOfTrip.Период;
		Geolocation = ВыборкаRouteOfTrip.Address;
	КонецЕсли;
	
	Элементы.НадписьМобильноеУстройствоНеПодключено.Видимость = Не ЗначениеЗаполнено(MobileDevice);
	Элементы.ГруппаДанныеTMF.Видимость = ЗначениеЗаполнено(MobileDevice);
	
	// Пользователь web DB
	ПользовательWebDB = LocalDistributionForNonLawsonСервер.НайтиПользователяWebDBПоПоставке(Объект.Ссылка);
	
	Элементы.НадписьПользовательНеСоздан.Видимость	= Не ЗначениеЗаполнено(ПользовательWebDB);
	Элементы.ПользовательWebDBТекстом.Видимость		= ЗначениеЗаполнено(ПользовательWebDB);
	
	ПользовательWebDBТекстом = "";
	Если ЗначениеЗаполнено(ПользовательWebDB) Тогда
		ПользовательWebDBТекстом = НСтр("ru = 'Имя:'; en = 'Name:'") + " " + ПользовательWebDB + " / " +
								   НСтр("ru = 'Пароль:'; en = 'Password:'") + " " + ПользовательWebDB.Пароль + " / " +
								   ?(ПользовательWebDB.Недействителен, "not active", "active");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьBarcodeOfTrip()
	
	Barcode = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Trip", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	BarcodeOfTrip.Barcode КАК Barcode
	               |ИЗ
	               |	РегистрСведений.BarcodeOfTrip КАК BarcodeOfTrip
	               |ГДЕ
	               |	BarcodeOfTrip.Trip = &Trip";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Barcode = Выборка.Barcode;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательWebDBТекстомНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПользовательWebDB) Тогда
		ПоказатьЗначение(, ПользовательWebDB);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПользователяWebDBНаСервере()
	
	LocalDistributionForNonLawsonСервер.СоздатьПользователяWebDB(Объект.Ссылка);
	
	ргМодульОбменаДаннымиПрив.ЗапуститьВыгрузку_WEBDB();
	
	ОбновитьДанныеTMFНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФотоГруза(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",	Объект.Ссылка);
	ПараметрыФормы.Вставить("ЭтоФотоГруза",		Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ЭтаФорма.ТолькоПросмотр);
	
	//ПараметрыФормы.Вставить("ДополнительныеРеквизиты", "ВидДокумента,ДокументНаименование,ДатаДокумента");
	ПараметрыФормы.Вставить("ДополнительныеРеквизиты", "Location,Type");
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// PARCELS

&НаКлиенте
Процедура ParcelsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
			
	Отказ = Истина;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзTripNonLawson");
	
	СтруктураНастройки.Вставить("МассивParcels", 
		РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.Parcels.Форма.ФормаВыбораДляTripNonLawson", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0 
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.Parcels") Тогда
		
		МассивParcels = РГСофтКлиентСервер.СложитьМассивы(ВыбранноеЗначение, 
			РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels,"Parcel"));
			
		Если ОбновитьПодвалParcelsИТаблицуStops(МассивParcels) Тогда 
			
			МассивСтруктурОстатковParcels = ПолучитьМассивСтруктурОстатковParcels(ВыбранноеЗначение);
			
			Для Каждого СтруктураОстатковParcels Из МассивСтруктурОстатковParcels Цикл
				НоваяСтрокаParcels = Объект.Parcels.Добавить();
				НоваяСтрокаParcels.Parcel = СтруктураОстатковParcels.Parcel;
				НоваяСтрокаParcels.NumOfParcels = СтруктураОстатковParcels.NumOfParcels;
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	         				
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСтруктурОстатковParcels(МассивParcels)
	
	МассивСтруктурОстатковParcels = Новый Массив;
	            		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ParcelsOfTransportRequestsWithoutShipmentОстатки.NumOfParcelsОстаток КАК NumOfParcels,
	               |	ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel КАК Parcel
	               |ИЗ
	               |	РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment.Остатки(, Parcel В (&МассивParcels)) КАК ParcelsOfTransportRequestsWithoutShipmentОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОстатковParcels = Новый Структура("Parcel,NumOfParcels", Выборка.Parcel, Выборка.NumOfParcels);
		МассивСтруктурОстатковParcels.Добавить(СтруктураОстатковParcels);
	
	КонецЦикла;
	
	Возврат МассивСтруктурОстатковParcels;
	
КонецФункции

&НаКлиенте
Процедура ParcelsПослеУдаления(Элемент)
	
	ОбновитьПодвалParcelsИТаблицуStops(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ParcelsNumOfParcels" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Parcels.ТекущиеДанные;	
	
	Если ТекДанные <> Неопределено Тогда 
		ПоказатьЗначение(,ТекДанные.Parcel);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// STOPS

&НаКлиенте
Процедура StopsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура StopsПриИзменении(Элемент)
	
	ТекДанные = Элементы.Stops.ТекущиеДанные;
	ОбновитьTotalDuration();	
	
	// { RGS AArsentev 22.05.2018 S-I-0005192
	ЗаполнитьКиллометражВСтопы();
	// } RGS AArsentev 22.05.2018 S-I-0005192
	
	ОбновитьДинамическиеКолонкиStops();
	
	ЗаполнитьДатыВнесенияДат(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура StopsPlannedArrivalLocalTimeПриИзменении(Элемент)
	
	ТекДанные = Элементы.Stops.ТекущиеДанные;
	
	ТекДанные.PlannedArrivalUniversalTime = ПолучитьUniversalTime(
		ТекДанные.PlannedArrivalLocalTime, ТекДанные.Location);	
		
КонецПроцедуры

&НаКлиенте
Процедура StopsActualArrivalLocalDateПриИзменении(Элемент)
	
	ТекДанные = Элементы.Stops.ТекущиеДанные;
	
	ТекДанные.ActualArrivalUniversalTime = ПолучитьUniversalTime(
		ТекДанные.ActualArrivalLocalTime, ТекДанные.Location);
		
КонецПроцедуры

&НаКлиенте
Процедура StopsPlannedDepartureLocalTimeПриИзменении(Элемент)
	
	ТекДанные = Элементы.Stops.ТекущиеДанные;
	
	ТекДанные.PlannedDepartureUniversalTime = ПолучитьUniversalTime(
		ТекДанные.PlannedDepartureLocalTime, ТекДанные.Location);	
	
КонецПроцедуры

&НаКлиенте
Процедура StopsActualDepartureLocalTimeПриИзменении(Элемент)
	
	ТекДанные = Элементы.Stops.ТекущиеДанные;
	
	ТекДанные.ActualDepartureUniversalTime = ПолучитьUniversalTime(
		ТекДанные.ActualDepartureLocalTime, ТекДанные.Location);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьUniversalTime(LocalTime, Warehouse=Неопределено)
	
	Возврат LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(LocalTime, Warehouse);	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьTotalDuration()
	
	// проверим наличие Source
	СтруктураОтбораSource = Новый Структура("Type", ПредопределенноеЗначение("Перечисление.StopsTypes.Source"));
	МассивСтрокSource = Объект.Stops.НайтиСтроки(СтруктураОтбораSource);

	// проверим наличие Destination
	СтруктураОтбораDestination = Новый Структура("Type", ПредопределенноеЗначение("Перечисление.StopsTypes.Destination"));
	МассивСтрокDestination = Объект.Stops.НайтиСтроки(СтруктураОтбораDestination);
	
	TotalPlannedDurationПредставление = "";
	TotalActualDurationПредставление = "";
	
	Если МассивСтрокDestination.Количество() = 1 
		И МассивСтрокSource.Количество() = 1 Тогда
		
		СтрSource = МассивСтрокSource[0];
		СтрDestination = МассивСтрокDestination[0];
		
		Если ЗначениеЗаполнено(СтрDestination.PlannedArrivalUniversalTime) 
			И ЗначениеЗаполнено(СтрSource.PlannedDepartureUniversalTime) Тогда 
			
			Объект.TotalPlannedDuration = СтрDestination.PlannedArrivalUniversalTime - СтрSource.PlannedDepartureUniversalTime;
			
			TotalPlannedDurationПредставление = ПолучитьПредставлениеDuration(Объект.TotalPlannedDuration);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрDestination.ActualArrivalUniversalTime) 
			И ЗначениеЗаполнено(СтрSource.ActualDepartureUniversalTime) Тогда 
			
			Объект.TotalActualDuration = СтрDestination.ActualArrivalUniversalTime - СтрSource.ActualDepartureUniversalTime;
			
			TotalActualDurationПредставление = ПолучитьПредставлениеDuration(Объект.TotalActualDuration);
			
		КонецЕсли;
		    		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеDuration(Знач Duration)
	
	Дней = Цел(Duration/86400);
	Duration = Duration - Дней*86400;
	
	Часов = Цел(Duration/3600);
	Duration = Duration - Часов*3600;
	
	Минут = Цел(Duration/60);
			
	Возврат СокрЛП(Дней) + " days/дней " + СокрЛП(Часов) + " hours/часов " + СокрЛП(Минут) + " min/мин";
	
КонецФункции

&НаКлиенте
Процедура StopsПриАктивизацииЯчейки(Элемент)
	
	НадписьUTM = "";
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяТекущегоЭлемента = "StopsMaximumReadyToShipLocalTime" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.MaximumReadyToShipUniversalTime;
	ИначеЕсли ИмяТекущегоЭлемента = "StopsMinimumRequiredDeliveryLocalTime" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.MinimumRequiredDeliveryUniversalTime;
	ИначеЕсли ИмяТекущегоЭлемента = "StopsPlannedArrivalLocalTime" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.PlannedArrivalUniversalTime;
	ИначеЕсли ИмяТекущегоЭлемента = "StopsActualArrivalLocalDate" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.ActualArrivalUniversalTime;
	ИначеЕсли ИмяТекущегоЭлемента = "StopsPlannedDepartureLocalTime" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.PlannedDepartureUniversalTime;
	ИначеЕсли ИмяТекущегоЭлемента = "StopsActualDepartureLocalTime" Тогда 
		НадписьUTM = Элемент.ТекущиеДанные.ActualDepartureUniversalTime;
	Иначе
		//AArsentev
		Если ИмяТекущегоЭлемента = "StopsLocation" 
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Location)  Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.Location);	
		КонецЕсли;
		
		//Если ИмяТекущегоЭлемента = "StopsLocation" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Location) 
		//	И Объект.SecondaryShipment 
		//	И Элемент.ТекущиеДанные.Type = ПредопределенноеЗначение("Перечисление.StopsTypes.Destination") Тогда
		//	Элемент.ТолькоПросмотр = Ложь;
		//ИначеЕсли ИмяТекущегоЭлемента = "StopsLocation" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Location) Тогда
		//	Элемент.ТолькоПросмотр = Истина;
		//	ПоказатьЗначение(,Элемент.ТекущиеДанные.Location);
		//КонецЕсли;		
		//AArsentev
		
		НадписьUTM = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура StopsMileageПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Stops.ТекущиеДанные;
	
	ТекСтрока.Manually = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеКолонкиStops()
	
	ТаблицаParcel = Объект.Parcels.Выгрузить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаParcel.Parcel КАК Справочник.Parcels) КАК Parcel,
	|	ТаблицаParcel.NumOfParcels КАК NumOfParcels
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	&ТаблицаParcel КАК ТаблицаParcel
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаParcel.Parcel.TransportRequest.PickUpWarehouse КАК SourceLocation,
	|	ТаблицаParcel.Parcel.TransportRequest.DeliverTo КАК DestinationLocation,
	|	СУММА(ТаблицаParcel.Parcel.GrossWeight * ТаблицаParcel.NumOfParcels / ТаблицаParcel.Parcel.NumOfParcels) КАК Weight
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаParcel.Parcel.TransportRequest.PickUpWarehouse,
	|	ТаблицаParcel.Parcel.TransportRequest.DeliverTo";
	
	Запрос.УстановитьПараметр("ТаблицаParcel", ТаблицаParcel);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	TotalMilage	= 0;
	TotalWeight	= 0;
	
	Для Каждого СтрStops Из Объект.Stops Цикл
		
		WeightLoading	= 0;
		WeightUnloading	= 0;
		
		Если СтрStops.Type = Перечисления.StopsTypes.Source Тогда
			
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура("SourceLocation", СтрStops.Location));
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				WeightLoading = WeightLoading + СтрокаМассива.Weight;
			КонецЦикла;
			
		ИначеЕсли СтрStops.Type = Перечисления.StopsTypes.Destination Тогда

			МассивСтрок = Таблица.НайтиСтроки(Новый Структура("DestinationLocation", СтрStops.Location));
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				WeightUnloading = WeightUnloading + СтрокаМассива.Weight;
			КонецЦикла;
			
		Иначе

			МассивСтрок = Таблица.НайтиСтроки(Новый Структура("SourceLocation", СтрStops.Location));
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				WeightLoading = WeightLoading + СтрокаМассива.Weight;
			КонецЦикла;
			
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура("DestinationLocation", СтрStops.Location));
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				WeightUnloading = WeightUnloading + СтрокаМассива.Weight;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрStops.TotalMilage		= TotalMilage + СтрStops.Mileage;
		СтрStops.WeightLoading		= WeightLoading;
		СтрStops.WeightUnloading	= WeightUnloading;
		//СтрStops.TotalWeight		= TotalWeight + WeightLoading - WeightUnloading;
		
		TotalMilage	= СтрStops.TotalMilage;
		//TotalWeight	= СтрStops.TotalWeight;
		
	КонецЦикла;	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// COSTS

&НаКлиенте
Процедура CostsPlanningПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ServiceProvider)
		ИЛИ ЗначениеЗаполнено(Объект.BaseCostsSum)
		ИЛИ ЗначениеЗаполнено(Объект.Currency)
		ИЛИ Объект.ZeroBaseCostsSum Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстВопроса = "Поставщик услуг, сумма основных затрат и валюта будут очищены! Продолжить?";
		Иначе 	
			ТекстВопроса = "Service provider, base costs sum and currency will be cleared! Continue?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииCostsPlanning", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Costs / Затраты");
		
	КонецЕсли;
	
	НастроитьВидимостьCostsPlanning();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииCostsPlanning(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.CostsPlanning = ?(Объект.CostsPlanning = ПредопределенноеЗначение("Перечисление.TypesOfCostsPlanning.Automatic"),
		ПредопределенноеЗначение("Перечисление.TypesOfCostsPlanning.Manual"),
		ПредопределенноеЗначение("Перечисление.TypesOfCostsPlanning.Automatic"));
		Возврат;
    КонецЕсли;
	
	Объект.ZeroBaseCostsSum = Ложь;
	Объект.BaseCostsSum = Неопределено;
	Объект.ServiceProvider = Неопределено;
	Объект.Currency = Неопределено;
	Объект.BaseCostsSumSLBUSD = Неопределено;
		
	ПриИзмененииCostsSum();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьCostsPlanning()
	
	Элементы.CostsPlanning.ТолькоПросмотр = Не Объект.Проведен;
	
	РучноеПланирование = (Объект.CostsPlanning = ПредопределенноеЗначение("Перечисление.TypesOfCostsPlanning.Manual"));	
	
	Элементы.ГруппаBaseCosts.ТолькоПросмотр = Не РучноеПланирование;
	Элементы.Currency.ТолькоПросмотр = Не РучноеПланирование;
	Элементы.ServiceProvider.ТолькоПросмотр = Не РучноеПланирование;
	
	Элементы.AutomaticallyPlannedServiceProviderCosts.Видимость = РучноеПланирование;

	НастроитьВилимостьBaseCostSum();

КонецПроцедуры

&НаКлиенте
Процедура CurrencyПриИзменении(Элемент)
	
	Объект.BaseCostsSumSLBUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(Объект.BaseCostsSum, Объект.Currency, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура BaseCostSumПриИзменении(Элемент)
	
	ПриИзмененииCostsSum();
	
	Объект.BaseCostsSumSLBUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(Объект.BaseCostsSum, Объект.Currency, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ZeroBaseCostSumПриИзменении(Элемент)
	
	Объект.BaseCostsSum = 0;
	Объект.BaseCostsSumSLBUSD = 0;
	
	ПриИзмененииCostsSum();
	
	НастроитьВилимостьBaseCostSum();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВилимостьBaseCostSum()
	
	Элементы.BaseCostSum.ТолькоПросмотр = Объект.ZeroBaseCostsSum;
	Элементы.BaseCostSum.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.BaseCostsSum) И Не Объект.ZeroBaseCostsSum;
		
КонецПроцедуры

&НаКлиенте
Процедура CostsПриИзменении(Элемент)
	
	ПриИзмененииCostsSum();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииCostsSum()
	
	Объект.TotalCostsSum = Объект.BaseCostsSum + Объект.Costs.Итог("Sum");
	Объект.TotalCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(Объект.TotalCostsSum, Объект.Currency, Объект.Дата);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОБЩИЕ

&НаСервере
Функция ОбновитьПодвалParcelsИТаблицуStops(МассивParcels)
	
	Возврат ОбновитьПодвалParcelsИТаблицуStopsНаСервере(МассивParcels);
	
КонецФункции

&НаСервере
Функция ОбновитьПодвалParcelsИТаблицуStopsНаСервере(МассивParcels, ТекОбъект=Неопределено)
	
	Если ТекОбъект = Неопределено Тогда 
		Stops = Объект.Stops;
		ТекОбъект = Объект;
	иначе
		Stops = ТекОбъект.Stops;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Parcels.Ссылка КАК Parcel,
	               |	Parcels.TransportRequest КАК TR
	               |ПОМЕСТИТЬ TRs
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |ГДЕ
	               |	Parcels.Ссылка В(&МассивParcels)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.TR,
	               |	TRs.TR.PickUpWarehouse КАК Location
	               |ИЗ
	               |	TRs КАК TRs
	               |ГДЕ
	               |	TRs.TR.PickUpWarehouse = TRs.TR.DeliverTo
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.TR
	               |ИЗ
	               |	TRs КАК TRs
	               |ГДЕ
	               |	НЕ TRs.TR.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TransportRequest.PickUpWarehouse КАК Location,
	               |	TransportRequest.ReadyToShipLocalTime КАК ReadyToShipLocalTime,
	               |	TransportRequest.ReadyToShipUniversalTime КАК ReadyToShipUniversalTime,
	               |	NULL КАК RequiredDeliveryLocalTime,
	               |	NULL КАК RequiredDeliveryUniversalTime
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Документ.TransportRequest КАК TransportRequest
	               |ГДЕ
	               |	TransportRequest.Ссылка В
	               |			(ВЫБРАТЬ
	               |				TRs.TR КАК TR
	               |			ИЗ
	               |				TRs)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	TransportRequest.DeliverTo,
	               |	NULL,
	               |	NULL,
	               |	TransportRequest.RequiredDeliveryLocalTime,
	               |	TransportRequest.RequiredDeliveryUniversalTime
	               |ИЗ
	               |	Документ.TransportRequest КАК TransportRequest
	               |ГДЕ
	               |	TransportRequest.Ссылка В
	               |			(ВЫБРАТЬ
	               |				TRs.TR КАК TR
	               |			ИЗ
	               |				TRs)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Location,
	               |	МАКСИМУМ(ВТ.ReadyToShipLocalTime) КАК MaximumReadyToShipLocalTime,
	               |	МАКСИМУМ(ВТ.ReadyToShipUniversalTime) КАК MaximumReadyToShipUniversalTime,
	               |	МИНИМУМ(ВТ.RequiredDeliveryLocalTime) КАК MinimumRequiredDeliveryLocalTime,
	               |	МИНИМУМ(ВТ.RequiredDeliveryUniversalTime) КАК MinimumRequiredDeliveryUniversalTime
	               |ИЗ
	               |	ВТ КАК ВТ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ.Location
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TRs.Parcel.GrossWeightKG КАК GrossWeightKG,
	               |	TRs.Parcel.CubicMeters КАК CubicMeters,
	               |	TRs.Parcel.NumOfParcels КАК NumOfParcels,
	               |	TRs.Parcel
	               |ИЗ
	               |	TRs КАК TRs
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	TRs.TR.Loading КАК Loading,
	               |	TRs.TR.PickUpWarehouse КАК Location
	               |ИЗ
	               |	TRs КАК TRs";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// проверим, что все заявки приняты
	
	ТекстОшибкиNotAcceptedTRs = "";
	ВыборкаNotAcceptedTRs = Результат[2].Выбрать(); 
	Пока ВыборкаNotAcceptedTRs.Следующий() Цикл
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибкиNotAcceptedTRs = ТекстОшибкиNotAcceptedTRs + "
			|""" + СокрЛП(ВыборкаNotAcceptedTRs.TR) +""" не принята специалистом в работу: ";
		Иначе 	
			ТекстОшибкиNotAcceptedTRs = ТекстОшибкиNotAcceptedTRs + "
			|""" + СокрЛП(ВыборкаNotAcceptedTRs.TR) +""" is not accepted by specialist: ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибкиNotAcceptedTRs) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(ТекстОшибкиNotAcceptedTRs));
		Возврат Ложь;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// обновим STOPS
	
	// для Secondary charge (вторичные расходы, например для переупаковки на одной локации)
	// может быть одна локация и Source (PickUp) = Destination (DeliverTo)
	
	ТаблицаSourceРавноDestination = Результат[1].Выгрузить();
	ТаблицаNewLocations = Результат[4].Выгрузить();

	Если ТаблицаSourceРавноDestination.Количество() > 0 
		И ТаблицаNewLocations.Количество() > 1 Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не допустимо включать в поставку несколько Заявок с разными локациями, 
			|если хотя бы в одной заявке пункт отправления равен пункту назначения: ";
		Иначе 	
			ТекстОшибки = "It is not allowed to include several requests with differnet locations, 
			|in case at least in one request pick-up is equal to deliver-to: ";
		КонецЕсли;

		Для Каждого СтрTR из ТаблицаSourceРавноDestination Цикл 
			ТекстОшибки = ТекстОшибки + "
			|" + СокрЛП(СтрTR.TR) + ": " + СокрЛП(СтрTR.Location);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////
	
	ТаблицаOldLocations = Stops.Выгрузить();
	
	СтруктураПоиска = Новый Структура("Location");
	
	// добавим новые строки
	Для Каждого СтрокаТЗNew из ТаблицаNewLocations Цикл 
		
		СтруктураПоиска.Location = СтрокаТЗNew.Location;
		
		// ищем в старых локациях
		МассивСтрокТЗ = ТаблицаOldLocations.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокТЗ.Количество() = 0 Тогда 
			
			// если не нашли - добавляем строку
			СтрокаStop = Stops.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаStop, СтрокаТЗNew);
			Модифицированность = Истина;
			
		Иначе 
			
			// если нашли - обновляем все строки 
			//(может быть Source (PickUp) = Destination (DeliverTo)) и две строки с одной локацией
			МассивСтрок = Stops.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрStop Из МассивСтрок Цикл 
				ЗаполнитьЗначенияСвойств(СтрStop, СтрокаТЗNew);
			КонецЦикла;
			
			//удалим строки как обработанные, чтобы оставить только строки со старыми локациями для удаления
			Для Каждого Стр Из МассивСтрокТЗ Цикл
				ТаблицаOldLocations.Удалить(Стр);
			КонецЦикла;
			
		КонецЕсли;
		 	
	КонецЦикла;
	
	// удалим старые строки
	Для Каждого СтрокаТЗ из ТаблицаOldLocations Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		МассивСтрок = Stops.НайтиСтроки(СтруктураПоиска);
		
		Stops.Удалить(МассивСтрок[0]);
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	// если одна локация, то ставим type source и копируем как destination
	Если Stops.Количество() = 1 Тогда 
		
		Строка1 = Stops[0];		
		Строка2 = Stops.Добавить();
		ЗаполнитьЗначенияСвойств(Строка2, Строка1);
		
		Строка1.Type = Перечисления.StopsTypes.Source;
		Строка2.Type = Перечисления.StopsTypes.Destination;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////	 	
	// Loading
	
	ТЗLoading = Результат[6].Выгрузить();
	СтруктураОтбораLocation = Новый Структура("Location");
	Для Каждого Стр из Stops Цикл 
		
		СтруктураОтбораLocation.Location = Стр.Location;
		ТЗLocationLoading = ТЗLoading.Скопировать(СтруктураОтбораLocation);
		МассивLocationLoading = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗLocationLoading, "Loading");
		// { RGS AFokin 12.09.2018 23:59:59 - S-I-0005985
		//Стр.Loading = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивLocationLoading);
		Если МассивLocationLoading.Количество() > 0 Тогда
			Стр.Loading = ТЗLocationLoading[0].Loading;
		КонецЕсли;	
		// } RGS AFokin 12.09.2018 23:59:59 - S-I-0005985
	КонецЦикла;

	/////////////////////////////////////////////////////////////	 	
	// обновим подвал parcels
	
	ТЗParcels = Результат[5].Выгрузить();
	
	ТЗОбъектParcels = ТекОбъект.Parcels.Выгрузить();
	
	ИтогGrossWeightKG = 0;
	ИтогCubicMeters = 0;
	Для Каждого Стр из ТЗParcels Цикл 
		СтрParcel = ТЗОбъектParcels.Найти(Стр.Parcel, "Parcel");
		ИтогGrossWeightKG = ИтогGrossWeightKG + (Стр.GrossWeightKG / Стр.NumOfParcels) * ?(СтрParcel=Неопределено,Стр.NumOfParcels,СтрParcel.NumOfParcels);
		ИтогCubicMeters = ИтогCubicMeters + (Стр.CubicMeters / Стр.NumOfParcels) * ?(СтрParcel=Неопределено,Стр.NumOfParcels,СтрParcel.NumOfParcels);
	КонецЦикла;
	
	ИтогGrossWeightKG = Окр(ИтогGrossWeightKG, 3);
	Если ТекОбъект.GrossWeightKG <> ИтогGrossWeightKG Тогда
		ТекОбъект.GrossWeightKG = ИтогGrossWeightKG;
		Модифицированность = Истина;
	КонецЕсли;
	
	ИтогCubicMeters = Окр(ИтогCubicMeters, 4);
	Если ТекОбъект.CubicMeters <> ИтогCubicMeters Тогда
		ТекОбъект.CubicMeters = ИтогCubicMeters;
		Модифицированность = Истина;
	КонецЕсли;

	ИтогTotalNumOfParcels = ТЗParcels.Количество();
	Если ТекОбъект.TotalNumOfParcels <> ИтогTotalNumOfParcels Тогда
		ТекОбъект.TotalNumOfParcels = ИтогTotalNumOfParcels;
		Модифицированность = Истина;
	КонецЕсли;

	ОбновитьПредставлениеDuration();
	
	ОбновитьДинамическиеКолонкиStops();
	
	Recharge.Параметры.УстановитьЗначениеПараметра("Parcels", МассивParcels);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеDuration()
	
	TotalPlannedDurationПредставление = ПолучитьПредставлениеDuration(Объект.TotalPlannedDuration);
			
	TotalActualDurationПредставление = ПолучитьПредставлениеDuration(Объект.TotalActualDuration);
	
КонецПроцедуры

&НаКлиенте
Процедура RoundJourneyПриИзменении(Элемент)
	
	Если Не Объект.RoundTrip Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстВопроса = "Список остановок маршрута будет перезаполнен! Продолжить?";
		Иначе 	
			ТекстВопроса = "List of stops will be refilled! Continue?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПослеСнятияОтметкиRoundTrip", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Stops / Остановки маршрута");
		
		Возврат;
		
	КонецЕсли;
	
	// проверим, что определен Source
	МассивSourceStop = Объект.Stops.НайтиСтроки(Новый Структура("Type", ПредопределенноеЗначение("Перечисление.StopsTypes.Source")));
	Если МассивSourceStop.Количество() <> 1 Тогда 
		
		Объект.RoundTrip = Ложь;

	 	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Определите Source (начальный) пункт отправления поставки!";
		Иначе 	
			ТекстОшибки = "Specify source location!";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			, "Объект.Stops");
			
		Возврат;
		
	КонецЕсли;	
	
	СтрокаSourceStop = МассивSourceStop[0];
	
	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
		ТекстВопроса = "В список остановок маршрута будет добавлен новый пункт! Продолжить?";
	Иначе 	
		ТекстВопроса = "New stop will be added! Continue?";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУстановкиОтметкиRoundTrip", ЭтаФорма, СтрокаSourceStop);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Stops / Остановки маршрута");
	 		
КонецПроцедуры

&НаКлиенте
Процедура ПослеСнятияОтметкиRoundTrip(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.RoundTrip = Истина;
		Возврат;
    КонецЕсли;

	Объект.Stops.Очистить();
	
    ОбновитьПодвалParcelsИТаблицуStopsНаСервере(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиОтметкиRoundTrip(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.RoundTrip = Ложь;
        Возврат;
    КонецЕсли;

	// скомпируем Source как Destination
	НоваяСтрока = Объект.Stops.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	НоваяСтрока.Type = ПредопределенноеЗначение("Перечисление.StopsTypes.Destination");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоложение(Команда)
	ПолучитьГеолокацию();
КонецПроцедуры

// { RGS AArsentev 15.09.2017
Процедура ПроверитьДаты(Отказ)
	
	Для Каждого Элемент Из Объект.Stops Цикл
		
		Если ЗначениеЗаполнено(Элемент.MaximumReadyToShipLocalTime) Тогда
			Если Элемент.MaximumReadyToShipLocalTime <= Дата("01.01.2014 00:00:00") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте дату - 'Maximum ready to ship local time'",, "Объект.Stops["+(Элемент.НомерСтроки-1)+"].MaximumReadyToShipLocalTime",,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.MinimumRequiredDeliveryLocalTime) Тогда
			Если Элемент.MinimumRequiredDeliveryLocalTime <= Дата("01.01.2014 00:00:00") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте дату - 'Minimum required delivery local time'",, "Объект.Stops["+(Элемент.НомерСтроки-1)+"].MinimumRequiredDeliveryLocalTime",,Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры // } RGS AArsentev 15.09.2017

// { RGS AArsentev 20.09.2017 S-I-0003596
&НаКлиенте
Процедура CreateSecondary(Команда)
	
	Если Объект.Secondary Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На основании Secondary не возможно создать еще один");
		Возврат;
	КонецЕсли;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Trip",Объект.Ссылка);
	ДопПараметры.Вставить("Действие", "CreateSecondary");
	Оповещение = Новый ОписаниеОповещения("CreateSecondaryФормуЗавершение", ЭтотОбъект, ДопПараметры); 
	ОткрытьФорму("ОбщаяФорма.CreateSecondaryTripTR", ДопПараметры , , , , , Оповещение);
	
КонецПроцедуры // } RGS AArsentev 20.09.2017 S-I-0003596

// { RGS AArsentev 20.09.2017 S-I-0003596
&НаКлиенте 
Процедура CreateSecondaryФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Результат.Сообщение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
		ЭтаФорма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 20.09.2017 S-I-0003596

&НаКлиенте
Процедура ЗаполнитьДатыВнесенияДат(ТекДанные)
	
	Если ТекДанные.Type = ПредопределенноеЗначение("Перечисление.StopsTypes.Source") Тогда
		Если Не ЗначениеЗаполнено(Объект.SourceInIncertDate) И ЗначениеЗаполнено(ТекДанные.ActualArrivalLocalTime) Тогда
			Объект.SourceInIncertDate = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.SourceOutInsertDate) И ЗначениеЗаполнено(ТекДанные.ActualDepartureLocalTime) Тогда
			Объект.SourceOutInsertDate = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекДанные.Type = ПредопределенноеЗначение("Перечисление.StopsTypes.Destination") Тогда
		Если Не ЗначениеЗаполнено(Объект.DestInInsertDate) И ЗначениеЗаполнено(ТекДанные.ActualArrivalLocalTime) Тогда
			Объект.DestInInsertDate = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.DestOutInsertDate) И ЗначениеЗаполнено(ТекДанные.ActualDepartureLocalTime) Тогда
			Объект.DestOutInsertDate = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SummerNavigationПриИзменении(Элемент)
	// { RGS AArsentev 16.01.2017 S-I-0004384
	Элементы.AdditionalVolume.Видимость = ЗначениеЗаполнено(Объект.NavigationType) И Объект.NavigationType <> ПредопределенноеЗначение("Перечисление.SummerWinter.NA");
	// } RGS AArsentev 16.01.2017 S-I-0004384
КонецПроцедуры

// { RGS ASeryakov 02.03.18 S-I-0004756 
&НаКлиенте
Процедура ContractRateПриИзменении(Элемент)
	
	 СписокРеквизитов = Новый Массив;
	 СписокРеквизитов.Добавить("ContractRate");
	 УстановитьВидимостьРеквизитовГруппыProductLineApprovedBy(СписокРеквизитов);	 
	
КонецПроцедуры

&НаКлиенте
Процедура UniqueSupplierПриИзменении(Элемент)
	
	 СписокРеквизитов = Новый Массив;
	 СписокРеквизитов.Добавить("UniqueSupplier");
	 УстановитьВидимостьРеквизитовГруппыProductLineApprovedBy(СписокРеквизитов);
	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовГруппыProductLineApprovedBy(СписокРеквизитов)
	
	Для каждого РеквизитОбъект Из СписокРеквизитов Цикл
		
		Если РеквизитОбъект = "ContractRate" Тогда
			
			Элементы.UniqueSupplier.Видимость = НЕ Объект.ContractRate;
			
			Если  НЕ Объект.ContractRate И НЕ Объект.UniqueSupplier Тогда
				Элементы.TessBidNo.Видимость = Истина;
			Иначе
				Элементы.TessBidNo.Видимость = Ложь;
			КонецЕсли;
			
			
		ИначеЕсли РеквизитОбъект = "UniqueSupplier" Тогда 
			
			Элементы.TessBidNo.Видимость = НЕ Объект.UniqueSupplier;
			
			Если Объект.UniqueSupplier И НЕ ПустаяСтрока(Объект.TessBidNo) Тогда
				
				Объект.TessBidNo = "";
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()
// } RGS ASeryakov 02.03.18 S-I-0004756

// { RGS AArsentev 22.05.2018 S-I-0005192
&НаСервере
Процедура ЗаполнитьКиллометражВСтопы();
	
	//Объект.Stops.Сортировать("PlannedArrivalUniversalTime");
	ТекLocation = Неопределено;
	
	Для Каждого СтрStops из Объект.Stops Цикл 
		
		Если СтрStops.Type = Перечисления.StopsTypes.Source Тогда
			ТекLocation	= СтрStops.Location;
			Продолжить;
		КонецЕсли;
		
		Если Не СтрStops.Manually Тогда
			СтрStops.Mileage = ВычислитьРасстояние(ТекLocation, СтрStops.Location, Объект.NavigationType, Объект.MOT);
		КонецЕсли;
			
		ТекLocation = СтрStops.Location;
		
	КонецЦикла;
	
КонецПроцедуры // } RGS AArsentev 22.05.2018 S-I-0005192

Функция ВычислитьРасстояние(SourceLocation, DestinationLocation, MobilizationType, MOT)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &MobilizationType = ЗНАЧЕНИЕ(Перечисление.SummerWinter.WinterMobilization)
	|			ТОГДА DistancesBetweenWarehouses.MileageWinterMobilization
	|		КОГДА &MobilizationType = ЗНАЧЕНИЕ(Перечисление.SummerWinter.SummerNavigation)
	|			ТОГДА DistancesBetweenWarehouses.MileageSummerMobilization
	|		ИНАЧЕ DistancesBetweenWarehouses.MileageNonMobilization
	|	КОНЕЦ КАК Mileage
	|ИЗ
	|	Справочник.DistancesBetweenWarehouses КАК DistancesBetweenWarehouses
	|ГДЕ
	|	DistancesBetweenWarehouses.SourceLocation = &SourceLocation
	|	И DistancesBetweenWarehouses.DestinationLocation = &DestinationLocation
	|	И DistancesBetweenWarehouses.MOT = &MOT";
	Запрос.УстановитьПараметр("SourceLocation", SourceLocation);
	Запрос.УстановитьПараметр("DestinationLocation", DestinationLocation);
	Запрос.УстановитьПараметр("MobilizationType", MobilizationType);
	Запрос.УстановитьПараметр("MOT", MOT);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Mileage;
	КонецЕсли;
	
КонецФункции

// { RGS ASeryakov 02.07.18 S-I-0005611
&НаКлиенте
Процедура ЗаполнитьContractRateПоTypeOfTransport()
	
	Если Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") Тогда
		Объект.ContractRate = Ложь;
	КонецЕсли;
	
КонецПроцедуры // } RGS ASeryakov 02.07.18 S-I-0005611

// { RGS DKazanskiy 07.12.2018 13:12:52 - S-I-0006428
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма, Объект)
	
	Элементы = Форма.Элементы;
	
	Элементы.LowestFareKnown.Видимость = ЗначениеЗаполнено(Объект.ReasonForRateSelection) И (не (Объект.ReasonForRateSelection = ПредопределенноеЗначение("Перечисление.ReasonsForRateSelection.LowestPrice")) И Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut"));	
	Элементы.ReasonForRateSelection.Видимость = Объект.TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut");
	
КонецПроцедуры

&НаКлиенте
Процедура ReasonForRateSelectionПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма, Объект);
	
	Если Объект.ReasonForRateSelection = ПредопределенноеЗначение("Перечисление.ReasonsForRateSelection.LowestPrice")
		или НЕ ЗначениеЗаполнено(Объект.ReasonForRateSelection) Тогда
		Объект.LowestFareKnown = 0;
	КонецЕсли;
КонецПроцедуры
// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428

#Область Вопрос_0005997
// } RGS ASeryakov 17.09.2018 16:44:37 S-I-0005997

&НаСервере
Процедура VerifiedByBillingSpecialistНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	TripОбъект = РеквизитФормыВЗначение("Объект");
	// { RGS ASeryakov, 17.09.2018 16:44:34 S-I-0005948
	TripОбъект.ДополнительныеСвойства.Вставить("VerifiedBy");
	// } RGS ASeryakov 17.09.2018 16:44:37 S-I-0005948
	TripОбъект.VerifiedByBillingSpecialist = ТекущаяДата();
	TripОбъект.BillingSpecialist = ПараметрыСеанса.ТекущийПользователь;
	TripОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура VerifiedByBillingSpecialist(Команда)
	
	Stage = ОпределитьStage(Объект.Ссылка);
	
	Если Stage = ПредопределенноеЗначение("Перечисление.TripNonLawsonCompaniesStages.Closed") Тогда
		
		VerifiedByBillingSpecialistНаСервере();
	
		Оповестить("ЗаписанApproval", , Объект.Ссылка);
		ОповеститьОбИзменении(Объект.Ссылка);
		
	иначе
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS()  Тогда 
			Сообщить("Текущий статус поставки: '"+ СокрЛП(Stage) +"'. 
			|Поставка может быть проверена только после закрытия!");
		Иначе 
			Сообщить("Current trip stage: '"+ СокрЛП(Stage) +"'. 
			|Trip can be verified only after it was closed!");
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьStage(Trip)
	
	Возврат РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Trip);
	
КонецФункции

// { RGS DKazanskiy 18.10.2018 11:36:34 - S-I-0005455
&НаКлиенте
Процедура RegisterНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Register);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаРегистр(СсылкаНаТрип)
	
	Возврат Справочники.Реестры.ПолучитьРеестрДляТрипа(СсылкаНаТрип);	
	
КонецФункции

&НаСервере
Процедура ОбновитьRegister()
	Register = ПолучитьСсылкуНаРегистр(Объект.Ссылка);
КонецПроцедуры
// } RGS DKazanskiy 18.10.2018 11:36:46 - S-I-0005455

// { RGS AFokin 19.10.2018 23:59:59 S-I-0006152
&НаСервереБезКонтекста
Функция FacilityTypesDemobilization()
	
	Возврат Справочники.FacilityTypes.НайтиПоКоду("00001");	
	
КонецФункции	

&НаКлиенте
Процедура StopsLocationПриИзменении(Элемент)
	
	УстановитьВидимостьDemobilization();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьDemobilization()
	
	WellJetty = FacilityTypesDemobilization();
	ВключаемВидимостьDemobilization = Ложь;
	Для каждого Stop Из Объект.Stops Цикл
		Если Stop.Type = Перечисления.StopsTypes.Source И Stop.Location.FacilityType = WellJetty Тогда
			ВключаемВидимостьDemobilization = Истина;
		КонецЕсли;	
	КонецЦикла;	
	Элементы.Demobilization.Видимость = ВключаемВидимостьDemobilization;
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьDemobilization();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПеречислениеТипОстановки()
	
	Возврат Перечисления.StopsTypes.Source;
	
КонецФункции

&НаКлиенте
Процедура StopsLocationНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Stops.ТекущиеДанные;
	StopsTypesSource = ПолучитьПеречислениеТипОстановки();
	Если ТекущаяСтрока.Type = StopsTypesSource  Тогда
		Если Объект.Demobilization Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрДляОтбора = Новый Структура("УсловиеДляОтбора", FacilityTypesDemobilization());
			ОткрытьФорму("Справочник.Warehouses.Форма.ФормаВыбора", ПараметрДляОтбора, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// } RGS AFokin 19.10.2018 23:59:59 S-I-0006152

#КонецОбласти

