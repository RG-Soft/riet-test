
Перем СамаяРанняяДата; // Раньше этой даты заводить ничего нельзя

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("TransportRequests") тогда
			
			МассивTransportRequests = ДанныеЗаполнения.TransportRequests;
			Если МассивTransportRequests.Количество() = 1 тогда
				
				ОбработкаЗаполненияПоTransportRequest(МассивTransportRequests[0]);

			иначе
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("TransportRequests", ДанныеЗаполнения.TransportRequests);
				Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel,
				|	ParcelsOfTransportRequestsWithoutShipmentОстатки.NumOfParcelsОстаток КАК NumOfParcels
				|ИЗ
				|	РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment.Остатки(&МоментВремени, TransportRequest В (&TransportRequests)) КАК ParcelsOfTransportRequestsWithoutShipmentОстатки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
				|		ПО (НЕ TripNonLawsonCompaniesParcels.Ссылка.ПометкаУдаления)
				|			И ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel = TripNonLawsonCompaniesParcels.Parcel
				|			И (TripNonLawsonCompaniesParcels.Ссылка <> &Ссылка)
				|ГДЕ
				|	TripNonLawsonCompaniesParcels.Ссылка ЕСТЬ NULL ";
				
				Parcels.Загрузить(Запрос.Выполнить().Выгрузить());
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Transport") тогда
			
			Transport = ДанныеЗаполнения.Transport;

			Если Transport = Справочники.Transport.CallOut 
				И ДанныеЗаполнения.Свойство("Equipment") Тогда 
				
				Equipment = ДанныеЗаполнения.Equipment;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Equipment", Equipment);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	EquipmentsMOTs.MOT
				|ИЗ
				|	Справочник.Equipments.MOTs КАК EquipmentsMOTs
				|ГДЕ
				|	EquipmentsMOTs.Ссылка = &Equipment";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				MOT = Выборка.MOT;
				
			иначе
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Transport", Transport);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Transport.Код,
				|	Transport.ServiceProvider,
				|	Transport.Equipment,
				|	Transport.TypeOfTransport,
				|	EquipmentsMOTs.MOT
				|ИЗ
				|	Справочник.Transport КАК Transport
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Equipments.MOTs КАК EquipmentsMOTs
				|		ПО Transport.Equipment = EquipmentsMOTs.Ссылка
				|ГДЕ
				|	Transport.Ссылка = &Transport";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				
				TypeOfTransport = Выборка.TypeOfTransport;
				Equipment = Выборка.Equipment;
				EquipmentNo = Выборка.Код;
				ServiceProvider = Выборка.ServiceProvider;
				MOT = Выборка.MOT;
				
			КонецЕсли;
			
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("TripDate") тогда
			Дата = ДанныеЗаполнения.TripDate;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.TransportRequest") Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.RequestedLocalTime) 
			ИЛИ РегистрыСведений.StagesOfTransportRequests.ПолучитьTransportRequestStage(ДанныеЗаполнения) = Перечисления.TransportRequestStages.Draft Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда
				ВызватьИсключение("Поставка может быть создана только на  Транспортные Заявки в статусе 'Запрошено'");
			Иначе
				ВызватьИсключение("A Trip can be created for TRs in “Requested” status only");
			КонецЕсли;
				Возврат;
		Иначе
			ОбработкаЗаполненияПоTransportRequest(ДанныеЗаполнения);
		КонецЕсли;
			
	КонецЕсли;
	
	Stage = Перечисления.TripNonLawsonCompaniesStages.Draft;
	
	Specialist = ПараметрыСеанса.ТекущийПользователь;
	
	Если Не ЗначениеЗаполнено(TypeOfTransport) Тогда
		TypeOfTransport = Перечисления.TypesOfTransport.CallOut;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Transport) Тогда
		Transport = Справочники.Transport.CallOut;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияПоTransportRequest(TransportRequest)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("TransportRequest", TransportRequest);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	TransportRequest.PickUpWarehouse,
	               |	TransportRequest.DeliverTo,
	               |	TransportRequest.ReadyToShipLocalTime,
	               |	TransportRequest.ReadyToShipUniversalTime
	               |ИЗ
	               |	Документ.TransportRequest КАК TransportRequest
	               |ГДЕ
	               |	TransportRequest.Ссылка = &TransportRequest
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel,
	               |	ParcelsOfTransportRequestsWithoutShipmentОстатки.NumOfParcelsОстаток КАК NumOfParcels
	               |ИЗ
	               |	РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment.Остатки(&МоментВремени, TransportRequest = &TransportRequest) КАК ParcelsOfTransportRequestsWithoutShipmentОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	               |		ПО (НЕ TripNonLawsonCompaniesParcels.Ссылка.ПометкаУдаления)   И (TripNonLawsonCompaniesParcels.Ссылка <> &Ссылка)
	               |			И ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel = TripNonLawsonCompaniesParcels.Parcel
	               |ГДЕ
	               |	TripNonLawsonCompaniesParcels.Ссылка ЕСТЬ NULL ";
				   
	РезультатЗапроса = Запрос.ВыполнитьПакет();			   
	
	ВыборкаРеквизитовTR = РезультатЗапроса[0].Выбрать();
	ВыборкаРеквизитовTR.Следующий();
	
	Stops.Очистить();
	// заполним stops (locations)
	
	// pick-up
	СтрокаPickUp = Stops.Добавить();
	СтрокаPickUp.Location = ВыборкаРеквизитовTR.PickUpWarehouse;
	СтрокаPickUp.Type = Перечисления.StopsTypes.Source;
	
	СтрокаPickUp.PlannedArrivalLocalTime	 = ВыборкаРеквизитовTR.ReadyToShipLocalTime;
	СтрокаPickUp.PlannedArrivalUniversalTime = ВыборкаРеквизитовTR.ReadyToShipUniversalTime;
			
	СтрокаPickUp.PlannedDepartureLocalTime 		= ВыборкаРеквизитовTR.ReadyToShipLocalTime;
	СтрокаPickUp.PlannedDepartureUniversalTime 	= ВыборкаРеквизитовTR.ReadyToShipUniversalTime;
	
	// deliver-to
	СтрокаPickUp = Stops.Добавить();
	СтрокаPickUp.Location = ВыборкаРеквизитовTR.DeliverTo;
	СтрокаPickUp.Type = Перечисления.StopsTypes.Destination;
	 	
	// заполним parcels
	Parcels.Загрузить(РезультатЗапроса[1].Выгрузить()); 		 			
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	// Очистим некоторые реквизиты
	
	Comments = Неопределено;
	Closed = Неопределено;
	
	VerifiedByBillingSpecialist = Неопределено;
	BillingSpecialist = Неопределено;
	AutomaticallyPlannedServiceProviderCosts = Неопределено;
	CostsPlanning = Неопределено;
	PlannedArrivalVsCurrentDate = Неопределено;
	OnTime = Неопределено;
	RoundTrip = Ложь;
	CompaniesList = Неопределено;
	BaseCostsSum = Неопределено;
	ZeroBaseCostsSum = Ложь;
	SourceInIncertDate = Неопределено;
	SourceOutInsertDate = Неопределено;
	DestInInsertDate = Неопределено;
	DestOutInsertDate = Неопределено;
	
	// { RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
	LowestFareKnown = 0;
	ReasonForRateSelection = Неопределено;
	// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
	
	РГСофт.ОчиститьCreationModification(ЭтотОбъект);
	
	Stage = Перечисления.TripNonLawsonCompaniesStages.Draft;
	
	// { RGS ASeryakov, 17.07.18 S-I-0005641
	 ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбъектКопирования, "ContractRate,UniqueSupplier,ApprovedBy,TessBidNo");
	// } RGS ASeryakov 17.07.18 S-I-0005641

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПРИ УСТАНОВКЕ НОВОГО НОМЕРА

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// пример TRIP150709-0001
	
	Префикс = "TRIP" + Формат(Дата, "ДФ=yyMMdd") + "-";
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДозаполнитьРеквизитыБезПроверок(РежимЗаписи);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	     		
	ПроверитьВозможностьИзменения(Отказ);

	ДозаполнитьРеквизиты(РежимЗаписи);
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	// RG-Soft Ставров 04.07.2017 чтобы не падала загрузка из WEB DB
	Если ДополнительныеСвойства.Свойство("БезРегистрацииИзменений") Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьРеквизиты(Отказ, РежимЗаписи);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ Проведен Тогда
		// { RGS AArsentev 16.03.2018 - для изменения mileage
		Если (ДополнительныеСвойства.Свойство("ИзменениеMileage") ИЛИ ДополнительныеСвойства.Свойство("ВнестиИзмененияПарселя")) И Проведен Тогда
			ПересчитатьВес();
			Возврат;
		Иначе
		// } RGS AArsentev 16.03.2018 - для изменения mileage
			ПроверитьРеквизитыПриПроведении(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// { RGS AArsentev 28.09.2017 - S-I-0003686
	Получатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ServiceProvider, "ContactEMail");
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(Получатели) Тогда
		SentToServiceProviderDate = ТекущаяДата();
	КонецЕсли;
	// } RGS AArsentev 28.09.2017 - S-I-0003686
	
	// { RGS AArsentev 31.01.2018 S-I-0004374
	ПроверитьEquipment(Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	// } RGS AArsentev 31.01.2018 S-I-0004374
	
	// { RGS ASeryakov 02.03.18 S-I-0004756
	Если ЗначениеЗаполнено(TessBidNo) Тогда	
		ПроверитьМаскуКодаTESS(Отказ, TessBidNo);		
	КонецЕсли;	
	// } RGS ASeryakov 02.03.18 S-I-0004756
	
	// { RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	//ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	СформироватьЗаписьПоРегиструГрафикиУведомленийTransportRequest(РежимЗаписи, ДополнительныеСвойства.ТаблицаСтарыxДанныхParcels);
	// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ТаблицаСтарыxДанныхParcels, ДополнительныеСвойства.ТаблицаСтарыxДанныхStops,
		ДополнительныеСвойства.ТаблицаСтарыxДанныхCosts, ДополнительныеСвойства.ТаблицаСтарыxДанныхBills);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменениеMileage") ИЛИ ДополнительныеСвойства.Свойство("ВнестиИзмененияПарселя") Тогда
	Иначе
		
		Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Ссылка);
		
		Если Stage = Перечисления.TripNonLawsonCompaniesStages.Closed Тогда 
			
			Если (РольДоступна("LocalDistributionBillingSpecialist_ForNonLawsonCompanies") 
				ИЛИ РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies")) Тогда
				Возврат;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Trip was closed! / Поставка закрыта!",
			ЭтотОбъект, "Closed", , Отказ);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Stage = Перечисления.TripNonLawsonCompaniesStages.AwaitingApproval 
		ИЛИ Stage = Перечисления.TripNonLawsonCompaniesStages.Approved Тогда 
		
		Если ИзменилисьТолькоНесущественныеРеквизиты() 
			И (TotalAccessorialCostsSum <= (BaseCostsSum / 2)
			ИЛИ TotalAccessorialCostsSum = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "TotalAccessorialCostsSum")) Тогда 
			Возврат;
		КонецЕсли;
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Текущий статус поставки: '" + СокрЛП(Stage) + "'
			|Можно заполнить только фактические даты, комментарий и доп.затраты (<50% основных затрат)!";
		Иначе 	
			ТекстОшибки = "Current trip stage: '" + СокрЛП(Stage) + "'
			|You can change only actual stops dates, comment and accessorial costs (<50% base costs)!";
		КонецЕсли;
		
		// { RGS vchaplygin 24.04.2018 15:14:13 - Добавим описание измененных реквизитов
		ОписаниеИзменений = Неопределено;
		Если ДополнительныеСвойства.Свойство("ОписаниеИзменений", ОписаниеИзменений) Тогда
			ТекстОшибки = ТекстОшибки + "
				|Changed attributes:
				|" + ОписаниеИзменений;
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "Changed attributes:", "Измененные реквизиты:");
			Конецесли;
		КонецЕсли;	
		// } RGS vchaplygin 24.04.2018 15:14:25 - Добавим описание измененных реквизитов
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, , , Отказ);
			
	КонецЕсли;	
	
КонецПроцедуры

Функция ИзменилисьТолькоНесущественныеРеквизиты()
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ЭтотОбъект);
	
	Результат = Истина;
	ОписаниеИзменений = "";
	
	НесущественныеДанныеТЧ = Новый Соответствие;
	НесущественныеДанныеТЧ.Вставить("Stops", Новый Массив);
	НесущественныеДанныеТЧ["Stops"].Добавить("ActualArrivalLocalTime");
	НесущественныеДанныеТЧ["Stops"].Добавить("ActualArrivalUniversalTime");
	НесущественныеДанныеТЧ["Stops"].Добавить("ActualDepartureLocalTime");
	НесущественныеДанныеТЧ["Stops"].Добавить("ActualDepartureUniversalTime");
	НесущественныеДанныеТЧ["Stops"].Добавить("OnTime");
	
	// Газиалиев. Начало изменения
	НесущественныеДанныеТЧ["Stops"].Добавить("Mileage");
	НесущественныеДанныеТЧ["Stops"].Добавить("Manually");
	// Газиалиев. Конец изменения

	НесущественныеДанныеТЧ.Вставить("Costs", Новый Массив);
	НесущественныеДанныеТЧ["Costs"].Добавить("CostType");
	НесущественныеДанныеТЧ["Costs"].Добавить("Description");
	НесущественныеДанныеТЧ["Costs"].Добавить("Sum");
	    		
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеДанныеТЧ") Тогда
		Для каждого ТекНесущественныеДанныеТЧ Из ДополнительныеСвойства["ДополнительныеНесущественныеДанныеТЧ"] Цикл
			Если НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ] = Неопределено Тогда
				НесущественныеДанныеТЧ.Вставить(ТекНесущественныеДанныеТЧ.Ключ, ТекНесущественныеДанныеТЧ.Значение);
			Иначе
				Для каждого ТекКолонка Из ТекНесущественныеДанныеТЧ.Значение Цикл
					НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ].Добавить(ТекКолонка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//проверяем неизменность всех ТЧ
	СписокТЧ = Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			НесущественныеКолонки = НесущественныеДанныеТЧ[ТекТЧ.Имя];
			ИзмененныеКолонки = ИзмененныеДанные[ТекТЧ.Имя];
			ИзмененияНесущественны = Истина;
			Если НесущественныеКолонки = Неопределено Тогда
				ИзмененияНесущественны = Ложь;
			Иначе
				Для каждого ИзмененнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) = Неопределено Тогда
						ИзмененияНесущественны = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ИзмененияНесущественны Тогда
				Продолжить;
			Иначе
				ОписаниеИзменений = ОписаниеИзменений + "Tabular section '" + ТекТЧ.Имя + "':" + Символы.ПС;
				Для каждого ИзменнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки <> Неопределено Тогда
						Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "column '" + ИзменнаяКолонка + "'" + Символы.ПС;
				КонецЦикла;
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//проверяем изменились ли только несущественные реквизиты
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	МассивНесущественныхРеквизитов = Новый Массив;
	МассивНесущественныхРеквизитов.Добавить("Operator");
	МассивНесущественныхРеквизитов.Добавить("Comment");
	МассивНесущественныхРеквизитов.Добавить("ModifiedBy");
	МассивНесущественныхРеквизитов.Добавить("ModificationDate");
	МассивНесущественныхРеквизитов.Добавить("TotalActualDuration");
	МассивНесущественныхРеквизитов.Добавить("Closed");
	МассивНесущественныхРеквизитов.Добавить("ClosedBy");
	МассивНесущественныхРеквизитов.Добавить("OnTime");
	МассивНесущественныхРеквизитов.Добавить("PlannedArrivalVsCurrentDate");
	МассивНесущественныхРеквизитов.Добавить("TotalAccessorialCostsSum");
	МассивНесущественныхРеквизитов.Добавить("TotalCostsSum");
	МассивНесущественныхРеквизитов.Добавить("TotalCostsSumUSD");
	МассивНесущественныхРеквизитов.Добавить("TotalAccessorialCostsSumUSD");
	
	// { RGS AArsentev 04.05.2018
	МассивНесущественныхРеквизитов.Добавить("SourceInIncertDate");
	МассивНесущественныхРеквизитов.Добавить("SourceOutInsertDate");
	МассивНесущественныхРеквизитов.Добавить("DestInInsertDate");
	МассивНесущественныхРеквизитов.Добавить("DestOutInsertDate");
	// } RGS AArsentev 04.05.2018
	
	// { RGS AArsentev 27.06.2018
	МассивНесущественныхРеквизитов.Добавить("OutOfComplianceReason");
	МассивНесущественныхРеквизитов.Добавить("OOC_Responsible");
	// { RGS AArsentev 27.06.2018
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеРеквизиты") Тогда
		Для каждого ТекНесущественныйРеквизит Из ДополнительныеСвойства["ДополнительныеНесущественныеРеквизиты"] Цикл
			Если МассивНесущественныхРеквизитов.Найти(ТекНесущественныйРеквизит) = Неопределено Тогда
				МассивНесущественныхРеквизитов.Добавить(ТекНесущественныйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НесущественныйРеквизит Из МассивНесущественныхРеквизитов Цикл
		Индекс = ИзмененныеРеквизиты.Найти(НесущественныйРеквизит);
		Если Индекс <> Неопределено Тогда
			ИзмененныеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		Результат = Ложь;
		ОписаниеИзменений = ОписаниеИзменений + "Attributes:" + Символы.ПС;
		Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
			ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "'" + ИзмененныйРеквизит + "'" + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеИзменений) Тогда
		ДополнительныеСвойства.Вставить("ОписаниеИзменений", ОписаниеИзменений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезПроверок(РежимЗаписи)
	             		
	// lists
	Запрос = Новый Запрос;
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
		Запрос.УстановитьПараметр("МассивParcels", Parcels.ВыгрузитьКолонку("Parcel"));
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Иначе
		Запрос.УстановитьПараметр("МассивParcels", Документы.TripNonLawsonCompanies.ПолучитьPrimaryParcels(Primary));
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Parcels.TransportRequest.Company.Код КАК CompanyCode,
	               |	Parcels.TransportRequest.Номер КАК TransportRequestNumber,
	               |	Parcels.TransportRequest.TMSOBNumber КАК TMSOBNumber,
	               |	Parcels.TransportRequest.SegmentLawson КАК SegmentLawson,
	               |	Parcels.TransportRequest.CostCenter.Geomarket КАК Geomarket
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |ГДЕ
	               |	Parcels.Ссылка В(&МассивParcels)";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивCompanyCode = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Результат, "CompanyCode");
	CompaniesList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивCompanyCode);
	
	МассивTransportRequestNumber = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Результат, "TransportRequestNumber");
	TRList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивTransportRequestNumber);

	МассивTMSOBNumber = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Результат, "TMSOBNumber");
	OBList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивTMSOBNumber);
	
	МассивSegmentLawson = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Результат, "SegmentLawson");
	SegmentsLawson = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивSegmentLawson);
	
	// { RGS AArsentev 10.01.2018 S-I-0004349
	МассивGeomarket = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Результат, "Geomarket");
	GeomarketList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивGeomarket);
	// } RGS AArsentev 10.01.2018 S-I-0004349

	
КонецПроцедуры

Процедура ДозаполнитьРеквизиты(РежимЗаписи)
	
	РГСофт.ЗаполнитьModification(ЭтотОбъект);
		
	Если ЭтоНовый() Тогда	
		РГСофт.ЗаполнитьCreation(ЭтотОбъект);									
	КонецЕсли;
	      			
	Если НЕ ЗначениеЗаполнено(Specialist) Тогда
		Specialist = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если Secondary Тогда
		ДополнительныеСвойства.Вставить("СтрSource", Primary.Stops.Найти(Перечисления.StopsTypes.Source, "Type"));
		ДополнительныеСвойства.Вставить("СтрDestination", Primary.Stops.Найти(Перечисления.StopsTypes.Destination, "Type"));
		Возврат;
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Stops.Сортировать("PlannedArrivalUniversalTime");
	
	ДополнительныеСвойства.Вставить("СтрSource", Stops.Найти(Перечисления.StopsTypes.Source, "Type"));
	ДополнительныеСвойства.Вставить("СтрDestination", Stops.Найти(Перечисления.StopsTypes.Destination, "Type"));
	
	Если TypeOfTransport = Перечисления.TypesOfTransport.Own Тогда
		РГСофтКлиентСервер.УстановитьЗначение(ServiceProvider, Справочники.ServiceProviders.SLB);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(CostsPlanning)
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		РГСофтКлиентСервер.УстановитьЗначение(CostsPlanning, Перечисления.TypesOfCostsPlanning.Automatic);
		ZeroBaseCostsSum = Ложь;
		BaseCostsSum = Неопределено;
		Currency = Неопределено;
		BaseCostsSumSLBUSD = Неопределено;
		TotalCostsSum = Неопределено;
		TotalCostsSumUSD = Неопределено;
		TotalAccessorialCostsSum = Неопределено;
		TotalAccessorialCostsSumUSD = Неопределено;
		
		Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда 
			ServiceProvider = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда
		
		РГСофтКлиентСервер.УстановитьЗначение(Transport, Справочники.Transport.CallOut);
		
		Если CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			|	TripNonLawsonCompanies.ServiceProvider,
			|	TripNonLawsonCompanies.BaseCostsSum,
			|	TripNonLawsonCompanies.Currency
			|ИЗ
			|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
			|ГДЕ
			|	TripNonLawsonCompanies.Ссылка = &Ссылка
			|	И TripNonLawsonCompanies.BaseCostsSum <> 0
			|	И TripNonLawsonCompanies.ServiceProvider <> ЗНАЧЕНИЕ(Справочник.ServiceProviders.ПустаяСсылка)
			|	И TripNonLawsonCompanies.CostsPlanning = ЗНАЧЕНИЕ(Перечисление.TypesOfCostsPlanning.Automatic)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				AutomaticallyPlannedServiceProviderCosts = "'" + СокрЛП(Выборка.ServiceProvider) + "': " + 
				СокрЛП(Выборка.BaseCostsSum) + " " + СокрЛП(Выборка.Currency);
			КонецЕсли;
			
		Иначе 
			AutomaticallyPlannedServiceProviderCosts = "";
		КонецЕсли;
		
		TotalAccessorialCostsSum = Costs.Итог("Sum");
		
	КонецЕсли;

	PlannedArrivalVsCurrentDate = 0;
	Если Не ПометкаУдаления И Не ЗначениеЗаполнено(Closed) Тогда
		СтрDestination = ДополнительныеСвойства.СтрDestination;
		Если СтрDestination <> Неопределено И ЗначениеЗаполнено(СтрDestination.PlannedArrivalUniversalTime) Тогда 
			PlannedArrivalVsCurrentDate = (НачалоДня(УниверсальноеВремя(ТекущаяДата())) - НачалоДня(СтрDestination.PlannedArrivalUniversalTime)) / 86400;
		КонецЕсли;
	КонецЕсли;		
	
	// Газиалиев. Начало изменения
	ТекLocation	= Неопределено;
	// Газиалиев. Конец изменения
	
	// On time - not on time     	
	OnTime = Перечисления.YesNo.Yes;
	Для Каждого СтрStops из Stops Цикл 
		
		Если СтрStops.Type = Перечисления.StopsTypes.Source Тогда
			СтрStops.OnTime = Неопределено;
			// Газиалиев. Начало изменения
			ТекLocation	= СтрStops.Location;
			// Газиалиев. Конец изменения
			Продолжить;
		КонецЕсли;
	              			
		Если ЗначениеЗаполнено(СтрStops.ActualArrivalLocalTime) И ЗначениеЗаполнено(СтрStops.MinimumRequiredDeliveryLocalTime) Тогда 
			
			// { RGS AArsentyev 23.07.2018 S-I-0005677
			//СтрStops.OnTime = ?(СтрStops.ActualArrivalLocalTime > СтрStops.MinimumRequiredDeliveryLocalTime,
			//	Перечисления.YesNo.No, Перечисления.YesNo.Yes);
			СтрStops.OnTime = ?(СтрStops.ActualArrivalLocalTime <= СтрStops.MinimumRequiredDeliveryLocalTime,
				Перечисления.YesNo.Yes, Перечисления.YesNo.No);
			// } RGS AArsentyev 23.07.2018 S-I-0005677
				
		Иначе 
			
			СтрStops.OnTime = Неопределено;
			
		КонецЕсли;
		
		// { RGS AArsentev 16.03.2018 - для изменения mileage
		Если НЕ ДополнительныеСвойства.Свойство("ИзменениеMileage") И НЕ ДополнительныеСвойства.Свойство("FS") Тогда
		// } RGS AArsentev 16.03.2018 - для изменения mileage
			// Газиалиев. Начало изменения
			// Если сортировка строк таблицы Stops будет не верной в этой момент, то расчет пробега тоже будет не верным
			// { RGS AArsentev 22.05.2018 S-I-0005192 
			//Если Не СтрStops.Manually Тогда
			//	СтрStops.Mileage = ргМодульКартографии.ВычислитьРасстояние(ТекLocation, СтрStops.Location);
			//КонецЕсли;
			// } RGS AArsentev 22.05.2018 S-I-0005192
		
		КонецЕсли;
		
		ТекLocation	= СтрStops.Location;
		// Газиалиев. Конец изменения
		
	КонецЦикла;
	
	Если Stops.Найти(Перечисления.YesNo.No, "OnTime") <> Неопределено Тогда 
		OnTime = Перечисления.YesNo.No;
	КонецЕсли;		
	
	СОКРЛПТекстовыхРеквизитов();
	
	Если ЗначениеЗаполнено(TotalCostsSum) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
		TotalCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(TotalCostsSum, Currency, Дата);
	КонецЕсли;

	Если ЗначениеЗаполнено(TotalAccessorialCostsSum) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
		TotalAccessorialCostsSumUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(TotalAccessorialCostsSum, Currency, Дата);
	КонецЕсли;

КонецПроцедуры

Процедура СОКРЛПТекстовыхРеквизитов()
	    		
	РГСофтКлиентСервер.УстановитьЗначение(Comments, СокрЛП(Comments));
	РГСофтКлиентСервер.УстановитьЗначение(CompaniesList, СокрЛП(CompaniesList));
	
	Для Каждого Стр из Costs Цикл 
		РГСофтКлиентСервер.УстановитьЗначение(Стр.Description, СокрЛП(Стр.Description));
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизиты(Отказ, РежимЗаписи)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Дата поставки'!";
		Иначе 	
			ТекстОшибки = "'Date' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Дата", , Отказ);	
		
	Иначе
		
		Если Дата < СамаяРанняяДата Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Дата поставки не может быть раньше """ + Формат(СамаяРанняяДата, "ДЛФ=D") + """";
			Иначе 	
				ТекстОшибки = "Date can not be earlier than """ + Формат(СамаяРанняяДата, "ДЛФ=D") + """";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Дата", , Отказ);
		КонецЕсли;
		
		// { RGS AArsentev 31.05.2018 - прошлым можно, будущим нельзя
		Если Дата > КонецДня(ТекущаяДата()) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Нельзя создавать трипы будущим числом";
			Иначе 	
				ТекстОшибки = "Сannot create trip in the future";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Дата", , Отказ);
		КонецЕсли;
		// } RGS AArsentev 31.05.2018
		
	КонецЕсли;
	
	// Specialist
	Если НЕ ЗначениеЗаполнено(Specialist) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Logistics specialist / Специалист отдела логистики'!";
		Иначе 	
			ТекстОшибки = "'Specialist' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Specialist", , Отказ);
	КонецЕсли;
	
	// { RGS AArsentev 20.09.2017 S-I-0003596 - Не проверяем Парсели и стопы для вторичных
	Если Secondary Тогда
		Возврат
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	// PARCELS
	Если Parcels.Количество() = 0 Тогда 
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Необходимо добавить грузовое место!";
		Иначе 	
			ТекстОшибки = "Add at least one parcel!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Parcels", , Отказ);
	иначе
		
		Parcels.Свернуть("Parcel", "NumOfParcels");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));

		Запрос.Текст = "ВЫБРАТЬ
		               |	Parcels.Ссылка КАК Parcel
		               |ИЗ
		               |	Справочник.Parcels КАК Parcels
		               |ГДЕ
		               |	Parcels.Ссылка В(&Parcels)
		               |	И Parcels.ПометкаУдаления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ParcelsДетали.Ссылка КАК Parcel,
		               |	ParcelsДетали.СтрокаИнвойса КАК Item
		               |ИЗ
		               |	Справочник.Parcels.Детали КАК ParcelsДетали
		               |ГДЕ
		               |	ParcelsДетали.Ссылка В(&Parcels)
		               |	И ParcelsДетали.СтрокаИнвойса.ПометкаУдаления
		               |	И НЕ ParcelsДетали.Ссылка.ПометкаУдаления";
		
		Результат = Запрос.ВыполнитьПакет();
		ТЗParcelsНаУдаление = Результат[0].Выгрузить();
		ТЗItemsНаУдаление = Результат[1].Выгрузить();
		
		Для Каждого СтрParcel из ТЗParcelsНаУдаление Цикл
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Грузовое место "+СокрЛП(СтрParcel.Parcel)+" помечено на удаление!";
			Иначе 	
				ТекстОшибки = "Parcel "+СокрЛП(СтрParcel.Parcel)+" is marked for deletion!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels", , Отказ);
							
		КонецЦикла;
		
		Для Каждого СтрItem из ТЗItemsНаУдаление Цикл
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Товар "+СокрЛП(СтрItem.Item)+" грузового места "+СокрЛП(СтрItem.Parcel)+" помечен на удаление!";
			Иначе 	
				ТекстОшибки = "Item "+СокрЛП(СтрItem.Item)+" of parcel "+СокрЛП(СтрItem.Parcel)+" is marked for deletion!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels", , Отказ);
							
		КонецЦикла;

	КонецЕсли;
	
	// STOPS
	
	Если Stops.Количество() = 0 Тогда 
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не указаны пункты поставки (Stops)!";
		Иначе 	
			ТекстОшибки = "No stops in trip!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops", , Отказ);
			
	Иначе 
		
		// проверим наличие Source
		СтруктураОтбораSource = Новый Структура("Type", Перечисления.StopsTypes.Source);
		МассивСтрокSource = Stops.НайтиСтроки(СтруктураОтбораSource);
		Если МассивСтрокSource.Количество() <> 1 Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Определите Source (начальный) пункт отправления поставки!";
			Иначе 	
				ТекстОшибки = "Specify source location!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Stops", , Отказ);
			
		КонецЕсли;
		
		// проверим наличие Destination
		СтруктураОтбораDestination = Новый Структура("Type", Перечисления.StopsTypes.Destination);
		МассивСтрокDestination = Stops.НайтиСтроки(СтруктураОтбораDestination);
		Если МассивСтрокDestination.Количество() <> 1 Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Определите Destination (конечный) пункт прибытия поставки!";
			Иначе 	
				ТекстОшибки = "Specify destination location!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Stops", , Отказ);
			
		КонецЕсли;
			
		// Проверим, что заполнен пробег при установленном фактическом времени прибытия
		// проверим наличие Destination
		Для каждого ТекСтрокаStops из Stops Цикл
			
			Если ТекСтрокаStops.Type <> Перечисления.StopsTypes.Source 
				И ЗначениеЗаполнено(ТекСтрокаStops.ActualArrivalLocalTime) И НЕ ЗначениеЗаполнено(ТекСтрокаStops.Mileage) Тогда
			
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "В строке " + Формат(ТекСтрокаStops.НомерСтроки, "ЧГ=0") + " не заполнен пробег!";
				Иначе 	
					ТекстОшибки = "In line " + Формат(ТекСтрокаStops.НомерСтроки, "ЧГ=0") + " mileage is empty!";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				, "Объект.Stops[" + (ТекСтрокаStops.НомерСтроки-1) + "].Mileage", , Отказ);

			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	// { RGS ASeryakov, 17.07.18 S-I-0005597
	//// { RGS LKhristyuk 5/14/2018 4:53:15 PM - вопрос S-I-0005053
	//Если TypeOfTransport = Перечисления.TypesOfTransport.RentalAutomatic И НЕ ЗначениеЗаполнено(WaybillNo) Тогда
	//	
	//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
	//		ТекстОшибки = " не заполнено поле номер ТТН!";
	//	Иначе 	
	//		ТекстОшибки = " Waybill number is empty!";
	//	КонецЕсли;
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
	//	ЭтотОбъект, WaybillNo, , Отказ);	
	//КонецЕсли; // } RGS LKhristyuk 5/14/2018 4:53:36 PM - вопрос S-I-0005053 
	// } RGS ASeryakov 17.07.18 S-I-0005597
	
	// { RGS ASeryakov 02.03.18 S-I-0005597
	// сохранение накладной
	
	Если MOT = ПредопределенноеЗначение("Справочник.MOTs.COURIER") И Документы.TripNonLawsonCompanies.ЭтоServiceProvidersDHL(ServiceProvider) Тогда
	
		Если НЕ ЗначениеЗаполнено(WaybillNo) Тогда
			
			ТекстОшибки = НСтр("ru = 'При необходимости вы можете заполнить поле ""Номер накладной"".'; en = 'If necessary, you can fill in the ""Waybill no""'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	// } RGS ASeryakov 02.03.18 S-I-0005597

	// { RGS ASeryakov 02.04.18 S-I-0005611
	Если ЗначениеЗаполнено(SQReportNumber) И СтрДлина(СокрЛП(SQReportNumber)) < 14 Тогда
		
		ТекстОшибки = НСтр("ru = 'В поле ""Номер репорта в QUEST"" номер должен состять из 14 цифр!'; en = 'In the field ""SQ Report Number"" the number must consist of 14 digits!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		ЭтотОбъект, SQReportNumber, , Отказ);
		
	КонецЕсли;
	
	Если OOC_Responsible = "Service Provider" Тогда
		
		Если НЕ ЗначениеЗаполнено(SQReportNumber) Тогда
			
			ТекстОшибки = НСтр("ru = 'Поле ""Номер репорта в QUEST"" не заполнено!'; en = 'The ""SQ Report Number"" field is not filled!'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, SQReportNumber, , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	// { RGS ASeryakov, 17.09.2018 16:44:34 S-I-0005948
	// { RGS ASeryakov, 19.09.2018  S-I-0005997
	Если НЕ ДополнительныеСвойства.Свойство("VerifiedBy") Тогда
	// { RGS ASeryakov, 19.09.2018  S-I-0005997
		Если НЕ (TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.Rental") ИЛИ
			CostsPlanning = ПредопределенноеЗначение("Перечисление.TypesOfCostsPlanning.Automatic") ИЛИ
			TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.RentalAutomatic")) Тогда
			
			Если НЕ ЗначениеЗаполнено(ApprovedBy) Тогда
				
				ТекстОшибки = НСтр("ru = 'Поле ""Товар одобрен"" не заполнено!'; en = 'The ""Product Line Approved By"" field is not filled!'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, WaybillNo, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// } RGS ASeryakov 17.09.2018 16:44:37 S-I-0005948
	
	// } RGS ASeryakov 02.04.18 S-I-0005611

КонецПроцедуры

Процедура ПроверитьРеквизитыПриПроведении(Отказ)
	
	// MOT
	Если НЕ ЗначениеЗаполнено(MOT) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'MOT / Способ перевозки'!";
		Иначе 	
			ТекстОшибки = "'MOT' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "MOT", , Отказ);
	КонецЕсли;
	
	// Equipment
	Если Не ЗначениеЗаполнено(Equipment) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Equipment / Тип транспортного средства'!";
		Иначе 	
			ТекстОшибки = "'Equipment' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Equipment", , Отказ);
			
	иначе
			
		Если Equipment = Справочники.Equipments.НайтиПоКоду("UNKNOWN_EQUIPMENT") Тогда 
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Необходимо определить тип транспортного средства для проведенной поставки!";
			Иначе 	
				ТекстОшибки = "Equipment can not be 'UNKNOWN_EQUIPMENT' in posted Trip!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Equipment", , Отказ);
		КонецЕсли;
		
		Если Не RoundTrip Тогда 
			
			Если ЗначениеЗаполнено(Equipment)
				И GrossWeightKG > РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(Equipment, "EffectiveWeight") Тогда
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Общий вес брутто превышает допустимый вес для транспортного средства!";
				Иначе 	
					ТекстОшибки = "Total Gross weight of pracels exceeds Effective weight of Equipment!";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Equipment", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Type of transport
	Если НЕ ЗначениеЗаполнено(TypeOfTransport) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Type of transport / Тип транспорта'!";
		Иначе 	
			ТекстОшибки = "'Type of transport' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "TypeOfTransport", , Отказ);
			
	иначе
			
		Если TypeOfTransport <> Перечисления.TypesOfTransport.Own 
			И ServiceProvider = Справочники.ServiceProviders.SLB Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Поставщиком услуг не может быть 'Шлюмберже' для типа транспортного средства'" + СокрЛП(TypeOfTransport) + "'!";
			Иначе 	
				ТекстОшибки = "Service provider can not be 'SLB' for type of transport'" + СокрЛП(TypeOfTransport) + "'!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "ServiceProvider", , Отказ);
			
		КонецЕсли;
		
		Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut 
			И Transport <> Справочники.Transport.CallOut Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Транспортным средством для типа '" + СокрЛП(TypeOfTransport) + "' может быть только 'Транспортное средство по заявке'!";
			Иначе 	
				ТекстОшибки = "Transport for type '" + СокрЛП(TypeOfTransport) + "' can be only 'Call-out'!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "TypesOfTransport", , Отказ);
			
		КонецЕсли;	
		
		
		// { RGS DKazanskiy 07.12.2018 13:12:52 - S-I-0006428
		Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut
			И ЗначениеЗаполнено(ReasonForRateSelection) 
			И не (ReasonForRateSelection = ПредопределенноеЗначение("Перечисление.ReasonsForRateSelection.LowestPrice")) Тогда
			Если НЕ ЗначениеЗаполнено(LowestFareKnown) Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "Поле 'Минимальная известная стоимость' должно быть заполнено!";
				Иначе 	
					ТекстОшибки = "'Lowest fare known' field can not be empty!";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "LowestFareKnown", , Отказ);
			Иначе
				Если BaseCostsSum/LowestFareKnown >= 10 Или BaseCostsSum/LowestFareKnown <= 0.1 Тогда
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Минимальная известная стоимость отличается от суммы основных затрат более чем в 10 раз!";
					Иначе 	
						ТекстОшибки = "Lowest fare known is different from the Base costs sum by more than 10 times!";
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
						ЭтотОбъект, "LowestFareKnown", , Отказ);	
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
		
	КонецЕсли;

	// Transport
	Если Не ЗначениеЗаполнено(Transport) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Transport / Транспортное средство'!";
		Иначе 	
			ТекстОшибки = "'Transport' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Transport", , Отказ);
			
	иначе
		
		Если Transport <> Справочники.Transport.CallOut Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	TS.ServiceProvider,
			               |	TS.Equipment,
			               |	TS.TypeOfTransport,
			               |	TransportAvailabilityStatusСрезПоследних.Status
			               |ИЗ
			               |	Справочник.Transport КАК TS
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TransportAvailabilityStatus.СрезПоследних(
			               |				&Дата,
			               |				Transport = &Transport
			               |					И Trip <> &Trip) КАК TransportAvailabilityStatusСрезПоследних
			               |		ПО (TransportAvailabilityStatusСрезПоследних.Transport = TransportAvailabilityStatusСрезПоследних.Transport.Ссылка)
			               |ГДЕ
			               |	TS.Ссылка = &Transport";
			
			Запрос.УстановитьПараметр("Transport", Transport);
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Trip", Ссылка);
			
			Результат = Запрос.Выполнить();
			ВыборкаTransport = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаTransport.Следующий() Тогда 
				
				ДополнительныеСвойства.Вставить("CurrentStatus", ВыборкаTransport.Status);
				
				//временно закомментировано по согласованию с Татьяной Маковской
				//Если ЗначениеЗаполнено(ВыборкаTransport.Status) 
				//	И ВыборкаTransport.Status <> Перечисления.TransportAvailabilityStatuses.Available Тогда 
				//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				//		ТекстОшибки = "Транспортное средство недоступно!";
				//	Иначе 	
				//		ТекстОшибки = "Transport is not available!";
				//	КонецЕсли;
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				//	ЭтотОбъект, "Transport", , Отказ);	
				//КонецЕсли;

				Если ЗначениеЗаполнено(ServiceProvider) 
					И ВыборкаTransport.ServiceProvider <> ServiceProvider Тогда 
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Поставщик услуг для транспортного средства отличается от поставщика услуг в поставке!";
					Иначе 	
						ТекстОшибки = "Service provider in transport differs from Service provider in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "ServiceProvider", , Отказ);	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Equipment) 
					И ВыборкаTransport.Equipment <> Equipment Тогда 
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Тип транспортного средства отличается от типа в поставке!";
					Иначе 	
						ТекстОшибки = "Equipment in transport differs from Equipment in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "Equipment", , Отказ);	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(TypeOfTransport) 
					И ВыборкаTransport.TypeOfTransport <> TypeOfTransport
					// { RGS AArsentev 15.05.2018 rental automatic
					И TypeOfTransport <> Перечисления.TypesOfTransport.RentalAutomatic Тогда
					// } RGS AArsentev 15.05.2018 rental automatic
					Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
						ТекстОшибки = "Тип транспорта отличается от типа в поставке!";
					Иначе 	
						ТекстОшибки = "Type of transport in transport differs from type of transport in Trip!";
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					ЭтотОбъект, "TypeOfTransport", , Отказ);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
		
	// Service provider                        
	Если НЕ ЗначениеЗаполнено(ServiceProvider) Тогда
		
		Если (CostsPlanning = Перечисления.TypesOfCostsPlanning.Automatic И TypeOfTransport <> Перечисления.TypesOfTransport.CallOut)
			ИЛИ (CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual И TypeOfTransport = Перечисления.TypesOfTransport.CallOut) Тогда  
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Не заполнено поле 'Service provider / Поставщик услуг (грузоперевозчик)'!";
			Иначе 	
				ТекстОшибки = "'Service provider' is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "ServiceProvider", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ServiceProvider = Справочники.ServiceProviders.RFQ Тогда 
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Необходимо определить сервис-провайдера для проведенной поставки!";
		Иначе 	
			ТекстОшибки = "Service provider can not be 'RFQ' in posted Trip!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		ЭтотОбъект, "ServiceProvider", , Отказ);		
	КонецЕсли;

	// Fleet supervisor
	Если НЕ ЗначениеЗаполнено(Operator) И Дата > Дата(2016,08,20) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Не заполнено поле 'Fleet supervisor / Координатор'!";
		Иначе 	
			ТекстОшибки = "'Fleet supervisor' is empty!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Operator", , Отказ);
	КонецЕсли;
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596	
		// PARCELS
		Для Каждого СтрокаТЧ Из Parcels Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.NumOfParcels) Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " грузовых мест: не заполнено поле ""Qty in trip / Количество в поставке""!";
				иначе
					ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of parcels: ""Qty in trip"" is empty!";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (СтрокаТЧ.НомерСтроки - 1) + "].NumOfParcels", , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// STOPS
		Если TotalPlannedDuration < 0 Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "'Total planned duration / Плановая длительность маршрута' не может быть отрицательной!";
			Иначе 	
				ТекстОшибки = "Total planned duration can not be the negative value!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops", , Отказ);
		КонецЕсли;
		
		Если TotalActualDuration < 0 Тогда 
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "'Total actual duration / Фактическая длительность маршрута' не может быть отрицательной!";
			Иначе 	
				ТекстОшибки = "Total actual duration can not be the negative value!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops", , Отказ);
		КонецЕсли;
		
		ПроверитьStopsПриПроведении(Отказ);
	// { RGS AArsentev 20.09.2017 S-I-0003596
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	// COSTS
	Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда
		
		Если CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual
			И Не ZeroBaseCostsSum И Не ЗначениеЗаполнено(BaseCostsSum) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Не заполнено поле 'Base costs sum / Сумма основных затрат'!";
			Иначе 	
				ТекстОшибки = "'Base costs sum' is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "BaseCostsSum", , Отказ);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Costs Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.CostType) Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " доп. затрат: не заполнено поле ""Cost type / Вид затрат""!";
				иначе
					ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of costs: ""Cost type"" is empty!";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Costs[" + (СтрокаТЧ.НомерСтроки - 1) + "].CostType", , Отказ);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Sum) Тогда
				
				Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
					ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " доп. затрат: не заполнено поле ""Sum / Сумма""!";
				иначе
					ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of costs: ""Sum"" is empty!";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Costs[" + (СтрокаТЧ.НомерСтроки - 1) + "].Sum", , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual
			И Не ЗначениеЗаполнено(Currency) Тогда
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Не заполнено поле 'Currency / Валюта'!";
			Иначе 	
				ТекстОшибки = "'Currency' is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Currency", , Отказ);
		КонецЕсли;
		
		//S-I-0002385 - закомментировано
		//Если CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual
		//	И Не ЗначениеЗаполнено(TotalCostsSum) 
		//	И НЕ ZeroBaseCostsSum Тогда
		//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
		//		ТекстОшибки = "'Total costs sum / Общая сумма затрат' (основные + доп.затраты) не заполнены!";
		//	Иначе 	
		//		ТекстОшибки = "'Total costs sum' (base + accessorial costs) is empty!";
		//	КонецЕсли;
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		//	ЭтотОбъект, "TotalCostsSum", , Отказ);
		//КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(VerifiedByBillingSpecialist) И Bills.Количество() = 0 Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Необходимо добавить номера документов!";
		Иначе 	
			ТекстОшибки = "Add at least one document number!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Bills", , Отказ);
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьStopsПриПроведении(Отказ)
	
	Для Каждого СтрокаТЧ Из Stops Цикл
		
		// Type
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Type) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Type / тип""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Type"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].Type", , Отказ);
			
		КонецЕсли;
		
		// Planned arrival local time / плановое время отправления (местное)
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.PlannedArrivalLocalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Planned arrival local time / плановое время отправления (местное)""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Planned arrival local time"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].PlannedArrivalLocalTime", , Отказ);
			
		КонецЕсли;
		
		// Planned arrival UTM / плановое время прибытия UTM
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.PlannedArrivalUniversalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Planned arrival UTM / плановое время прибытия UTM""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Planned arrival UTM"" is empty!
				|Please contact riet-support-ld@slb.com";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].PlannedArrivalUniversalTime", , Отказ);
			
		КонецЕсли;
		
		// Actual arrival local time / фактическое время отправления (местное)
		Если ЗначениеЗаполнено(Closed) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ActualArrivalLocalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Actual arrival local time / фактическое время отправления (местное)""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Actual arrival local time"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].ActualArrivalLocalTime", , Отказ);
			
		КонецЕсли;
		
		// Actual arrival UTM / фактическое время отправления UTM
		Если ЗначениеЗаполнено(Closed) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ActualArrivalUniversalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Actual arrival UTM / фактическое время отправления UTM""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Actual arrival UTM"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].ActualArrivalUniversalTime", , Отказ);
			
		КонецЕсли;
		
		// Planned departure local time / плановое время прибытия (местное)
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.PlannedDepartureLocalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Planned departure local time / плановое время прибытия (местное)""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Planned departure local time"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].PlannedDepartureLocalTime", , Отказ);
			
		КонецЕсли;
		
		// Planned departure UTM / плановое время прибытия UTM
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.PlannedDepartureUniversalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Planned departure UTM / плановое время прибытия UTM""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Planned departure UTM"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].PlannedDepartureUniversalTime", , Отказ);
			
		КонецЕсли;
		
		// Actual departure local time / фактическое время прибытия (местное)
		Если ЗначениеЗаполнено(Closed) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ActualDepartureLocalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Actual departure local time / фактическое время прибытия (местное)""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Actual departure local time"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].ActualDepartureLocalTime", , Отказ);
			
		КонецЕсли;
		
		// Actual departure UTM / фактическое время прибытия UTM
		Если ЗначениеЗаполнено(Closed) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ActualDepartureUniversalTime) Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: не заполнено поле ""Actual departure UTM / фактическое время прибытия UTM""!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: ""Actual departure UTM"" is empty!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].ActualDepartureUniversalTime", , Отказ);
			
		КонецЕсли;
		
		//сравнение времени прибытия-отправления в одной локации
		
		Если ЗначениеЗаполнено(СтрокаТЧ.PlannedArrivalUniversalTime)
			И ЗначениеЗаполнено(СтрокаТЧ.PlannedDepartureUniversalTime)
			И СтрокаТЧ.PlannedArrivalUniversalTime >= СтрокаТЧ.PlannedDepartureUniversalTime Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: плановое время отправления раньше (или равно) плановому времени прибытия!";
		иначе
			ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: planned departure time is earlier (or equal) planned arrival time!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].PlannedDepartureLocalTime", , Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ActualArrivalUniversalTime)
			И ЗначениеЗаполнено(СтрокаТЧ.ActualDepartureUniversalTime)
			И СтрокаТЧ.ActualArrivalUniversalTime >= СтрокаТЧ.ActualDepartureUniversalTime Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + " Stops / Остановок маршрута: фактическое время отправления раньше (или равно) фактическому времени прибытия!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + " of stops: actual departure time is earlier (or equal) actual arrival time!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрокаТЧ.НомерСтроки - 1) + "].ActualDepartureLocalTime", , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// проверим наличие Transit
	СтруктураОтбораTransit = Новый Структура("Type", Перечисления.StopsTypes.Transit);
	МассивСтрокTransit = Stops.НайтиСтроки(СтруктураОтбораTransit);
	
	// сравнение времени прибытия-отправления между локациями
	    	
	СтрSource = ДополнительныеСвойства.СтрSource;
	СтрDestination = ДополнительныеСвойства.СтрDestination;
	
	// Source-Destination
	Если ЗначениеЗаполнено(СтрSource.PlannedDepartureUniversalTime)
		И ЗначениеЗаполнено(СтрDestination.PlannedArrivalUniversalTime)
		И СтрSource.PlannedDepartureUniversalTime > СтрDestination.PlannedArrivalUniversalTime Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Плановое время отправления из начального пункта не может быть позднее (или равно) плановому времени прибытия в конечный пункт!";
		Иначе 	
			ТекстОшибки = "Source location planned departure time can not be later (or equal) Destination location planned arrival time!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		ЭтотОбъект, "Stops", , Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрSource.ActualDepartureUniversalTime)
		И ЗначениеЗаполнено(СтрDestination.ActualArrivalUniversalTime)
		И СтрSource.ActualDepartureUniversalTime > СтрDestination.ActualArrivalUniversalTime Тогда 
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ТекстОшибки = "Фактическое время отправления из начального пункта не может быть позднее (или равно) фактическому времени прибытия в конечный пункт!";
		Иначе 	
			ТекстОшибки = "Source location actual departure time can not be later (or equal) Destination location actual arrival time!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
		ЭтотОбъект, "Stops", , Отказ);
		
	КонецЕсли;
	     	
	Для Каждого СтрTransit из МассивСтрокTransit Цикл
		
		// Source-Transit
		Если ЗначениеЗаполнено(СтрSource.PlannedDepartureUniversalTime)
			И ЗначениеЗаполнено(СтрTransit.PlannedArrivalUniversalTime)
			И СтрSource.PlannedDepartureUniversalTime >= СтрTransit.PlannedArrivalUniversalTime Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Плановое время отправления из начального пункта не может быть позднее (или равно) плановому времени прибытия в транзитный пункт """+СокрЛП(СтрTransit.Location)+"""!";
			Иначе 	
				ТекстОшибки = "Source location planned departure time can not be later (or equal) Transit location """+СокрЛП(СтрTransit.Location)+""" planned arrival time!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрTransit.НомерСтроки - 1) + "].PlannedArrivalLocalTime", , Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрSource.ActualDepartureUniversalTime)
			И ЗначениеЗаполнено(СтрTransit.ActualArrivalUniversalTime)
			И СтрSource.ActualDepartureUniversalTime >= СтрTransit.ActualArrivalUniversalTime Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Фактическое время отправления из начального пункта не может быть позднее (или равно) фактическому времени прибытия в транзитный пункт """+СокрЛП(СтрTransit.Location)+"""!";
			Иначе 	
				ТекстОшибки = "Source location actual departure time can not be later (or equal) Transit location """+СокрЛП(СтрTransit.Location)+""" actual arrival time!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрTransit.НомерСтроки - 1) + "].ActualDepartureLocalTime", , Отказ);
			
		КонецЕсли;     
		
		// Destination-Transit
		Если ЗначениеЗаполнено(СтрDestination.PlannedArrivalUniversalTime)
			И ЗначениеЗаполнено(СтрTransit.PlannedDepartureUniversalTime)
			И СтрTransit.PlannedDepartureUniversalTime >= СтрDestination.PlannedArrivalUniversalTime Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Плановое время отправления из транзитного пункта """+СокрЛП(СтрTransit.Location)+""" не может быть позднее (или равно) плановому времени прибытия в конечный пункт!";
			Иначе 	
				ТекстОшибки = "Transit location """+СокрЛП(СтрTransit.Location)+""" planned departure time can not be later (or equal) Destination location planned arrival time!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрTransit.НомерСтроки - 1) + "].PlannedArrivalLocalTime", , Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрDestination.ActualArrivalUniversalTime)
			И ЗначениеЗаполнено(СтрTransit.ActualDepartureUniversalTime)
			И СтрTransit.ActualDepartureUniversalTime >= СтрDestination.ActualArrivalUniversalTime Тогда 
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "Фактическое время отправления из транзитного пункта """+СокрЛП(СтрTransit.Location)+""" не может быть позднее (или равно) фактическому времени прибытия в конечный пункт!";
			Иначе 	
				ТекстОшибки = "Transit location """+СокрЛП(СтрTransit.Location)+""" actual departure time can not be later (or equal) Destination location actual arrival time!";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
			ЭтотОбъект, "Stops[" + (СтрTransit.НомерСтроки - 1) + "].ActualDepartureLocalTime", , Отказ);
			
		КонецЕсли;  
		
	КонецЦикла;
		       	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Функция ОбновитьStage()
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	УстановитьПривилегированныйРежим(Истина);
	Если Secondary Тогда
		СсылкаНаTrip = Primary;
		StageSecondary = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Ссылка);
	Иначе
		СсылкаНаTrip = Ссылка;
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(СсылкаНаTrip);
	NewStage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ПолучитьTripStage(СсылкаНаTrip);
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если Secondary И StageSecondary <> NewStage Тогда
		МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompanies.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Trip = Ссылка;
		МенеджерЗаписи.Stage = NewStage;
		МенеджерЗаписи.ModificationDate = ТекущаяДата();
		МенеджерЗаписи.Записать(Истина);
		// { RGS DKazanskiy 14.05.2018 14:56:41 - S-I-0004903
		// Формируем аналогичное движение по периодическому регистру статусов
		МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompaniesPeriodic.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= ТекущаяДата();
		МенеджерЗаписи.Trip 			= Ссылка;
		МенеджерЗаписи.Stage 			= NewStage;
		МенеджерЗаписи.ModificationDate = ТекущаяДата();
		МенеджерЗаписи.Записать(Истина);
		// } RGS DKazanskiy 14.05.2018 14:56:59 - S-I-0004903
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Если Stage = NewStage Тогда
		Возврат NewStage;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompanies.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Trip = Ссылка;
	МенеджерЗаписи.Stage = NewStage;
	МенеджерЗаписи.ModificationDate = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	
	// { RGS DKazanskiy 14.05.2018 14:56:41 - S-I-0004903
	// Формируем аналогичное движение по периодическому регистру статусов
	МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompaniesPeriodic.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 			= ТекущаяДата();
	МенеджерЗаписи.Trip 			= Ссылка;
	МенеджерЗаписи.Stage 			= NewStage;
	МенеджерЗаписи.ModificationDate = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	// } RGS DKazanskiy 14.05.2018 14:56:59 - S-I-0004903

	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если Не Secondary Тогда
		ВыборкаSecondary = Документы.TripNonLawsonCompanies.ПолучитьSecondaryTrips(Ссылка);
		Пока ВыборкаSecondary.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompanies.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Trip = ВыборкаSecondary.Ссылка;
			МенеджерЗаписи.Stage = NewStage;
			МенеджерЗаписи.ModificationDate = ТекущаяДата();
			МенеджерЗаписи.Записать(Истина);
			
			// { RGS DKazanskiy 14.05.2018 14:56:41 - S-I-0004903
			// Формируем аналогичное движение по периодическому регистру статусов
			МенеджерЗаписи = РегистрыСведений.StagesOfTripsNonLawsonCompaniesPeriodic.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 			= ТекущаяДата();
			МенеджерЗаписи.Trip 			= ВыборкаSecondary.Ссылка;
			МенеджерЗаписи.Stage 			= NewStage;
			МенеджерЗаписи.ModificationDate = ТекущаяДата();
			МенеджерЗаписи.Записать(Истина);
			// } RGS DKazanskiy 14.05.2018 14:56:59 - S-I-0004903
			
		КонецЦикла;
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Возврат NewStage;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////

Процедура ОбновитьTransportAvailabilityStatus(Stage)
	
	Если TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда 
		Возврат;
	КонецЕсли;
	
	CurrentStatus = РегистрыСведений.TransportAvailabilityStatus.ПолучитьПоследнее(
		?(ЗначениеЗаполнено(Closed), Closed, Дата), Новый Структура("Transport", Transport)).Status;
		
	Если ПометкаУдаления 
		ИЛИ Stage = ПредопределенноеЗначение("Перечисление.TripNonLawsonCompaniesStages.Closed")
		ИЛИ ЗначениеЗаполнено(Closed) Тогда
		Status = Перечисления.TransportAvailabilityStatuses.Available;
	иначе
		Status = Перечисления.TransportAvailabilityStatuses.NotAvailable;
	КонецЕсли;
	
	Если CurrentStatus = Status Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.TransportAvailabilityStatus.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ?(Status = Перечисления.TransportAvailabilityStatuses.Available И ЗначениеЗаполнено(Closed), Closed, Дата);
	МенеджерЗаписи.Transport = Transport;
	МенеджерЗаписи.Status = Status;
	МенеджерЗаписи.Trip = Ссылка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Процедура ОбновитьStageTRs()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	StagesOfTransportRequests.Stage,
	               |	Parcels.TransportRequest,
	               |	Parcels.TransportRequest.Номер КАК Номер,
	               |	Parcels.TransportRequest.PickUpWarehouse КАК PickUpWarehouse,
	               |	Parcels.TransportRequest.Company КАК Company
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
	               |		ПО Parcels.TransportRequest = StagesOfTransportRequests.TransportRequest
	               |ГДЕ
	               |	Parcels.Ссылка В(&Parcels)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		NewStage = РегистрыСведений.StagesOfTransportRequests.ПолучитьTransportRequestStage(Выборка.TransportRequest);
		
		Если NewStage <> Выборка.Stage Тогда 
			
			МенеджерЗаписи = РегистрыСведений.StagesOfTransportRequests.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.TransportRequest = Выборка.TransportRequest;
			МенеджерЗаписи.Stage = NewStage;                          
			МенеджерЗаписи.ModificationDate = ТекущаяДата();
			МенеджерЗаписи.Записать(Истина);
			
			Если NewStage = Перечисления.TransportRequestStages.CompletelyDelivered Тогда
				
				Адрес = СокрЛП(Константы.TransaсtionTeamRecipients.Получить());
				
				Тема = СокрЛП(Номер) + ": company '" + СокрЛП(Выборка.Company) + "', pick-up from '" + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.PickUpWarehouse, "Наименование")) + "' was completely delivered";
				Тело = "Transport request " + СокрЛП(Выборка.Номер) + ": company '" + СокрЛП(Выборка.Company) + "', pick-up from '" + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.PickUpWarehouse, "Наименование")) + "' was completely delivered";
				
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Выборка.TransportRequest);
				НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
				ПолнаяСсылка = "http://ru0149app35.dir.slb.com/RIET/#" + НавигационнаяСсылка;
				HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ПолнаяСсылка + "</a>";
				Тело = Тело + "<br>
				|
				|Link to the transport request / ссылка на заявку: " + HTMLСсылка;
				
				ПолнаяСсылка = "http://ru0149app35.dir.slb.com/RIET";
				HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ПолнаяСсылка + "</a>";
				Тело = Тело + "<br>
				|
				|
				|Link to the Local distribution tracking / Ссылка для контроля процесса доставки: " + HTMLСсылка;
				 				
				Если ЗначениеЗаполнено(Адрес) Тогда 
					РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, Тема, Тело);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;			
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// ПРОВЕДЕНИЕ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр ParcelsOfTransportRequestsWithoutShipment
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
		СформироватьДвиженияParcelsOfTransportRequestsWithoutShipment(Отказ);
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		ЗаполнитьCostsPlanning(Отказ);
	// { RGS AArsentev 20.09.2017 S-I-0003596
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияLocalDistributionCostsPerItem(Отказ);
	
	// { RGS AArsentev 5/22/2017 11:30:01 AM - S-I-0002788
	СформироватьДвиженияLocalDistributionAccessorialCostsPerItem(Отказ);
	// } RGS AArsentev 5/22/2017 11:30:20 AM - S-I-0002788
	
	СформироватьДвиженияLocalDistributionCostsPerKG(Отказ);
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
	// Газиалиев. Начало изменения
	СформироватьДвиженияRouteOfLocation(Отказ);
	СформироватьДвиженияLocalDistributionCostsMilageWeightVolume(Отказ);
	// Газиалиев. Конец изменения
	
	ОбновитьStageTRs();
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Ссылка);
	ФоновыеЗадания.Выполнить("LocalDistributionForNonLawsonСервер.ОбновитьCatalogИзItems", ПараметрыЗадания);
	// { RGS AArsentev 20.09.2017 S-I-0003596
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	// { RGS AArsentev 13.09.2017 S-I-0003686
	Если НЕ Отказ Тогда
		
		Получатели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ServiceProvider, "ContactEMail");
		
		Если Не ЗначениеЗаполнено(Получатели) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Not filled 'Service provider' contact e-mail for sending WO");
		Иначе
			ОтправитьWorkOrder(Получатели);
		КонецЕсли;
		
	КонецЕсли;
	// } RGS AArsentev 13.09.2017 S-I-0003686
	
КонецПроцедуры

Процедура ЗаполнитьCostsPlanning(Отказ)
	
	Если CostsPlanning = Перечисления.TypesOfCostsPlanning.Manual 
		ИЛИ TypeOfTransport <> Перечисления.TypesOfTransport.CallOut Тогда
		Возврат;
	КонецЕсли;
	
	Если Stops.Найти(Перечисления.StopsTypes.Transit, "Type") <> Неопределено Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Сообщить("Поставки с транзитными пунктами и кругорейсы необходимо переключить на ручной способ планирования. 
			|Выбрать поставщика услуг, заполнить валюту и сумму основных затрат.");
		Иначе 	
			Сообщить("For multistop/roundtrips please select manual costs planning.
			|Select service provider, fill in currency and base costs sum.");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтрSource = ДополнительныеСвойства.СтрSource;
	СтрDestination = ДополнительныеСвойства.СтрDestination;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("SourceLocation", СтрSource.Location);
	Запрос.УстановитьПараметр("DestinationLocation", СтрDestination.Location);
	Запрос.УстановитьПараметр("Equipment", Equipment);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ServiceProvidersCosts.BaseCostsSum КАК BaseCostsSum,
	               |	ServiceProvidersCosts.Currency,
	               |	ServiceProvidersCosts.ServiceProvider
	               |ИЗ
	               |	РегистрСведений.ServiceProvidersCosts КАК ServiceProvidersCosts
	               |ГДЕ
	               |	ServiceProvidersCosts.SourceLocation = &SourceLocation
	               |	И ServiceProvidersCosts.DestinationLocation = &DestinationLocation
	               |	И ServiceProvidersCosts.Equipment = &Equipment
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	BaseCostsSum";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		Currency = Выборка.Currency;
		BaseCostsSum = Выборка.BaseCostsSum;  
		BaseCostsSumSLBUSD = LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(BaseCostsSum, Currency, Дата);
		TotalCostsSum = BaseCostsSum + Costs.Итог("Sum");
		ZeroBaseCostsSum = Ложь;
		
		ServiceProvider = Выборка.ServiceProvider;
				
	иначе
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Сообщить("Не удалось найти ставки поставщиков услуг для локаций и типа транспортного средства.  
			|Необходимо выбрать ручной способ планирования, выбрать сервис-провайдера, заполнить валюту и сумму основных затрат.");
		Иначе 	
			Сообщить("Failed to find service providers costs for current source, destination and equipment.
			|Please select manual costs planning, select service provider, fill in currency and base cost sum.");
		КонецЕсли;
		
	КонецЕсли;	 
	 	
КонецПроцедуры

Процедура СформироватьДвиженияParcelsOfTransportRequestsWithoutShipment(Отказ)
	
	// регистр ParcelsOfTransportRequestsWithoutShipment 
	
	ДвиженияParcelsOfTransportRequestsWithoutShipment = Движения.ParcelsOfTransportRequestsWithoutShipment;
	
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Записывать = Истина;
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Очистить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Parcels;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Parcel", "Parcel");
	Блокировка.Заблокировать();
	
	МассивParcels = Parcels.ВыгрузитьКолонку("Parcel");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	Запрос.Текст = "ВЫБРАТЬ
	|	Parcels.Ссылка КАК Parcel,
	|	Parcels.TransportRequest
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В(&МассивParcels)";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	   		
	Для Каждого ТекСтрокаParcels Из Parcels Цикл
		
		СтрокаТЗ = ТЗ.Найти(ТекСтрокаParcels.Parcel, "Parcel");
		
		Движение = ДвиженияParcelsOfTransportRequestsWithoutShipment.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Parcel = ТекСтрокаParcels.Parcel; 
		Движение.TransportRequest = СтрокаТЗ.TransportRequest;
		Движение.NumOfParcels = ТекСтрокаParcels.NumOfParcels;
		
	КонецЦикла;
		
	
	ДвиженияParcelsOfTransportRequestsWithoutShipment.Записать();
	
	// Проверим остатки
	ТаблицаОстатков = ПолучитьТаблицуОстатковNumOfParcels(МассивParcels);	
	Для Каждого СтрокаТаблицыОстатков Из ТаблицаОстатков Цикл
		
		СтрокаТЧ = Parcels.Найти(СтрокаТаблицыОстатков.Parcel, "Parcel");
		Если СтрокаТаблицыОстатков.NumOfParcels < 0 Тогда
			
			Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
				ТекстОшибки = "В строке " + СтрокаТЧ.НомерСтроки + ": количество упаковок на " +
					(-СтрокаТаблицыОстатков.NumOfParcels) + " больше, чем было указано для грузового места!";
			иначе
				ТекстОшибки = "In line " + СтрокаТЧ.НомерСтроки + ": there are " +
					(-СтрокаТаблицыОстатков.NumOfParcels) + " parcels less in Transport request than you specified!";
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки, ЭтотОбъект, 
				"Parcels[" + (СтрокаТЧ.НомерСтроки-1) + "].NumOfParcels", , Отказ);	
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияLocalDistributionCostsPerItem(Отказ)
	               	
	// регистр LocalDistributionCostsPerItem 
	
	// сначала распределяем суммы по парселям пропорционально весу
	// затем по товарам поровну

	ATA_FD = ДополнительныеСвойства.СтрDestination.ActualArrivalLocalTime;
	Если Не ЗначениеЗаполнено(ATA_FD) Тогда 
		ATA_FD = ДополнительныеСвойства.СтрDestination.PlannedArrivalLocalTime;
	КонецЕсли;
	
	ДвиженияLocalDistributionCostsPerItem = Движения.LocalDistributionCostsPerItem;
	
	ДвиженияLocalDistributionCostsPerItem.Записывать = Истина;
	ДвиженияLocalDistributionCostsPerItem.Очистить();
	
	ДвиженияDomesticFactCosts = Движения.InternationalAndDomesticFactCosts;
	
	ДвиженияDomesticFactCosts.Записывать = Истина;
	ДвиженияDomesticFactCosts.Очистить();
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
		Если TypeOfTransport <> Перечисления.TypesOfTransport.CallOut Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Parcels.Выгрузить());
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Документы.TripNonLawsonCompanies.ПолучитьPrimaryParcels(Primary));
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Parcels.Parcel КАК Parcel,
				   |	Parcels.NumOfParcels КАК NumOfParcels
				   |ПОМЕСТИТЬ Parcels
	               |ИЗ
	               |	&Parcels КАК Parcels
	               |;
				   |ВЫБРАТЬ
				   |	TripParcels.Parcel.GrossWeightKG / TripParcels.Parcel.NumOfParcels * TripParcels.NumOfParcels КАК GrossWeightKG,
	               |	0 КАК TotalCostsSumPerParcel,
	               |	0 КАК TotalAccessorialCostsSumPerParcel,
	               |	0 КАК BaseCostsSumPerParcel,
				   |	0 КАК TotalCostsSumPerParcelUSD,
	               |	0 КАК TotalAccessorialCostsSumPerParcelUSD,
	               |	0 КАК BaseCostsSumPerParcelUSD,
				   |	0 КАК LowestFareKnown,
				   |	TripParcels.Parcel
	               |ИЗ
	               |	Parcels КАК TripParcels
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ParcelsДетали.Ссылка КАК Parcel,
	               |	ParcelsДетали.СтрокаИнвойса КАК Item,
				   |	1 КАК Количество,
				   |	0 КАК BaseCostsSumPerItem,
				   |	0 КАК TotalAccessorialCostsSumPerItem,
				   |	0 КАК TotalCostsSumPerItem,
				   |	0 КАК BaseCostsSumPerItemUSD,
				   |	0 КАК TotalAccessorialCostsSumPerItemUSD,
				   |	0 КАК TotalCostsSumPerItemUSD,
				   |	0 КАК LowestFareKnown,
				   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
				   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
				   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
				   |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
				   |	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany
				   |ИЗ
				   |	Справочник.Parcels.Детали КАК ParcelsДетали
				   |ГДЕ
				   |	ParcelsДетали.Ссылка В
				   |			(ВЫБРАТЬ
				   |				Parcels.Parcel
				   |			ИЗ
	               |				Parcels КАК Parcels)";
				   
	Результат = Запрос.ВыполнитьПакет();			   
	
	ТЗParcels = Результат[1].Выгрузить();
	
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), BaseCostsSum, ТЗParcels, "BaseCostsSumPerParcel");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), TotalAccessorialCostsSum, ТЗParcels, "TotalAccessorialCostsSumPerParcel");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), TotalCostsSum, ТЗParcels, "TotalCostsSumPerParcel");

	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), BaseCostsSumSLBUSD, ТЗParcels, "BaseCostsSumPerParcelUSD");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), TotalAccessorialCostsSumUSD, ТЗParcels, "TotalAccessorialCostsSumPerParcelUSD");
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), TotalCostsSumUSD, ТЗParcels, "TotalCostsSumPerParcelUSD");
	// { RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), LowestFareKnown, ТЗParcels, "LowestFareKnown");
	// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428

	ТЗItems = Результат[2].Выгрузить();
	СтруктураОтбораПоParcel = Новый Структура("Parcel");
	Для Каждого СтрParcel Из ТЗParcels Цикл
		
		СтруктураОтбораПоParcel.Parcel = СтрParcel.Parcel;
		ТЗParcelItems = ТЗItems.Скопировать(СтруктураОтбораПоParcel);
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.BaseCostsSumPerParcel, ТЗParcelItems, "BaseCostsSumPerItem");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalAccessorialCostsSumPerParcel, ТЗParcelItems, "TotalAccessorialCostsSumPerItem");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalCostsSumPerParcel, ТЗParcelItems, "TotalCostsSumPerItem");

		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.BaseCostsSumPerParcelUSD, ТЗParcelItems, "BaseCostsSumPerItemUSD");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalAccessorialCostsSumPerParcelUSD, ТЗParcelItems, "TotalAccessorialCostsSumPerItemUSD");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.TotalCostsSumPerParcelUSD, ТЗParcelItems, "TotalCostsSumPerItemUSD");
		// { RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.LowestFareKnown, ТЗParcelItems, "LowestFareKnown");
		// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428

		Для Каждого СтрокаТЗ Из ТЗParcelItems Цикл
			
			Движение = ДвиженияLocalDistributionCostsPerItem.Добавить();
			Движение.Период = Дата;
			Движение.Trip = Ссылка;
			Движение.Parcel = СтрокаТЗ.Parcel;
			Движение.Item = СтрокаТЗ.Item;
			
			Движение.BaseCostsSum = СтрокаТЗ.BaseCostsSumPerItem;
			Движение.TotalAccessorialCostsSum = СтрокаТЗ.TotalAccessorialCostsSumPerItem;
			Движение.TotalCostsSum = СтрокаТЗ.TotalCostsSumPerItem;
			
			Движение.BaseCostsSumUSD = СтрокаТЗ.BaseCostsSumPerItemUSD;
			Движение.TotalAccessorialCostsSumUSD = СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD;
			Движение.TotalCostsSumUSD = СтрокаТЗ.TotalCostsSumPerItemUSD;
			// { RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
			Движение.LowestFareKnown  = СтрокаТЗ.LowestFareKnown;
			// } RGS DKazanskiy 07.12.2018 13:13:07 - S-I-0006428
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ATA_FD) Тогда 
			СформироватьДвиженияDomesticFactCosts(ТЗParcelItems, ДвиженияDomesticFactCosts, ATA_FD);
		КонецЕсли;
	
	КонецЦикла;
	     
КонецПроцедуры

// { RGS AArsentev 5/22/2017 11:30:01 AM - S-I-0002788
Процедура СформироватьДвиженияLocalDistributionAccessorialCostsPerItem(Отказ)
	
	ATA_FD = ДополнительныеСвойства.СтрDestination.ActualArrivalLocalTime;
	Если Не ЗначениеЗаполнено(ATA_FD) Тогда 
		ATA_FD = ДополнительныеСвойства.СтрDestination.PlannedArrivalLocalTime;
	КонецЕсли;
	
	ДвиженияLocalDistributionAccessorialCostsPerItem = Движения.LocalDistributionAccessorialCostsPerItem;
	
	ДвиженияLocalDistributionAccessorialCostsPerItem.Записывать = Истина;
	ДвиженияLocalDistributionAccessorialCostsPerItem.Очистить();
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
		Если TypeOfTransport <> Перечисления.TypesOfTransport.CallOut Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Parcels.Выгрузить());
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Документы.TripNonLawsonCompanies.ПолучитьPrimaryParcels(Primary));
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Parcels.Parcel КАК Parcel,
	|	Parcels.NumOfParcels КАК NumOfParcels
	|ПОМЕСТИТЬ Parcels
	|ИЗ
	|	&Parcels КАК Parcels
	|;
	|ВЫБРАТЬ
	|	TripParcels.Parcel.GrossWeightKG / TripParcels.Parcel.NumOfParcels * TripParcels.NumOfParcels КАК GrossWeightKG,
	|	0 КАК AccessorialCostsSumPerParcel,
	|	TripParcels.Parcel
	|ИЗ
	|	Parcels КАК TripParcels
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ParcelsДетали.Ссылка КАК Parcel,
	|	ParcelsДетали.СтрокаИнвойса КАК Item,
	|	1 КАК Количество,
	|	0 КАК AccessorialCostsSumPerItem,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	|	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo КАК ParentCompany
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsДетали
	|ГДЕ
	|	ParcelsДетали.Ссылка В
	|			(ВЫБРАТЬ
	|				Parcels.Parcel
	|			ИЗ
	|				Parcels КАК Parcels)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТЗParcels = Результат[1].Выгрузить();
	
	Для Каждого Строка Из Costs Цикл
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), Строка.Sum, ТЗParcels, "AccessorialCostsSumPerParcel");
		
		ТЗItems = Результат[2].Выгрузить();
		СтруктураОтбораПоParcel = Новый Структура("Parcel");
		
		Для Каждого СтрParcel Из ТЗParcels Цикл
			
			СтруктураОтбораПоParcel.Parcel = СтрParcel.Parcel;
			ТЗParcelItems = ТЗItems.Скопировать(СтруктураОтбораПоParcel);
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcelItems.ВыгрузитьКолонку("Количество"), СтрParcel.AccessorialCostsSumPerParcel, ТЗParcelItems, "AccessorialCostsSumPerItem");
			
			Для Каждого СтрокаТЗ Из ТЗParcelItems Цикл
				
				Движение = ДвиженияLocalDistributionAccessorialCostsPerItem.Добавить();
				Движение.Период = Дата;
				Движение.Trip = Ссылка;
				Движение.Parcel = СтрокаТЗ.Parcel;
				Движение.Item = СтрокаТЗ.Item;
				Движение.CostType = Строка.CostType;
				
				Движение.AccessorialCostsSum = СтрокаТЗ.AccessorialCostsSumPerItem;
				
				Если ЗначениеЗаполнено(СтрокаТЗ.AccessorialCostsSumPerItem) И ЗначениеЗаполнено(Currency) И ЗначениеЗаполнено(Дата) Тогда 
					Движение.AccessorialCostsSumUSD 		= LocalDistributionForNonLawsonСервер.ПолучитьCostsSumSLBUSD(СтрокаТЗ.AccessorialCostsSumPerItem, Currency, Дата);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
КонецПроцедуры // } RGS AArsentev 5/22/2017 11:30:01 AM - S-I-0002788

Процедура СформироватьДвиженияDomesticFactCosts(ТЗParcelItems, ДвиженияDomesticFactCosts, ATA_FD)
	
	// регистр International Domestic Fact Costs   	
		
	ТЗLines = ТЗParcelItems.Скопировать(, "ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment,BaseCostsSumPerItemUSD,TotalAccessorialCostsSumPerItemUSD");
	                
	ТЗLines.Свернуть("ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment", "BaseCostsSumPerItemUSD,TotalAccessorialCostsSumPerItemUSD");
	
	Для Каждого СтрокаТЗ Из ТЗLines Цикл
		
		Если СтрокаТЗ.BaseCostsSumPerItemUSD <> 0 Тогда 
			
			Движение = ДвиженияDomesticFactCosts.Добавить();
			
			Движение.Период = НачалоМесяца(?(День(ATA_FD) > 25, ДобавитьМесяц(ATA_FD, 1), ATA_FD));
			Движение.CostsType = Перечисления.FactCostsTypes.Freight;
			Движение.DomesticInternational = Перечисления.DomesticInternational.Domestic;
			
			// { RGS AArsentev 20.09.2017 S-I-0003596
			Если НЕ Secondary Тогда
			// } RGS AArsentev 20.09.2017 S-I-0003596
				Движение.ParentCompany = СтрокаТЗ.ParentCompany;
				Движение.Geomarket = СтрокаТЗ.Geomarket;
				Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
				Движение.Segment = СтрокаТЗ.Segment;
				Движение.SubSegment = СтрокаТЗ.SubSegment;
			// { RGS AArsentev 20.09.2017 S-I-0003596
			Иначе
				Движение.ParentCompany = SecondaryCompany;
				Движение.Geomarket = SecondaryCostCenter.Geomarket;
				Движение.SubGeomarket = SecondaryCostCenter.SubGeomarket;
				Движение.Segment = SecondaryCostCenter.Segment;
				Движение.SubSegment = SecondaryCostCenter.SubSegment;
			КонецЕсли;
			// } RGS AArsentev 20.09.2017 S-I-0003596
			
			Движение.Sum = СтрокаТЗ.BaseCostsSumPerItemUSD;
			
		КонецЕсли;
		
		Если СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD <> 0 Тогда 
			
			Движение = ДвиженияDomesticFactCosts.Добавить();
			
			Движение.Период = НачалоМесяца(?(День(ATA_FD) > 25, ДобавитьМесяц(ATA_FD, 1), ATA_FD));
			Движение.CostsType = Перечисления.FactCostsTypes.AccessorialCosts;
			Движение.DomesticInternational = Перечисления.DomesticInternational.Domestic;
			
			// { RGS AArsentev 20.09.2017 S-I-0003596
			Если НЕ Secondary Тогда
			// } RGS AArsentev 20.09.2017 S-I-0003596
				Движение.ParentCompany = СтрокаТЗ.ParentCompany;
				Движение.Geomarket = СтрокаТЗ.Geomarket;
				Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
				Движение.Segment = СтрокаТЗ.Segment;
				Движение.SubSegment = СтрокаТЗ.SubSegment;
			// { RGS AArsentev 20.09.2017 S-I-0003596
			Иначе
				Движение.ParentCompany = SecondaryCompany;
				Движение.Geomarket = SecondaryCostCenter.Geomarket;
				Движение.SubGeomarket = SecondaryCostCenter.SubGeomarket;
				Движение.Segment = SecondaryCostCenter.Segment;
				Движение.SubSegment = SecondaryCostCenter.SubSegment;
			КонецЕсли;
			// } RGS AArsentev 20.09.2017 S-I-0003596
			
			Движение.Sum = СтрокаТЗ.TotalAccessorialCostsSumPerItemUSD;
			
		КонецЕсли;

	КонецЦикла;
	        		  		
КонецПроцедуры

Процедура СформироватьДвиженияLocalDistributionCostsPerKG(Отказ)
	               	
	// регистр LocalDistributionCostsPerKG 
			
	ДвиженияLocalDistributionCostsPerKG = Движения.LocalDistributionCostsPerKG;
	
	ДвиженияLocalDistributionCostsPerKG.Записывать = Истина;
	ДвиженияLocalDistributionCostsPerKG.Очистить();
	
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Если НЕ Secondary Тогда
	// } RGS AArsentev 20.09.2017 S-I-0003596
		Если TypeOfTransport <> Перечисления.TypesOfTransport.CallOut Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Parcels.Выгрузить().ВыгрузитьКолонку("Parcel"));
	// { RGS AArsentev 20.09.2017 S-I-0003596
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Parcels", Документы.TripNonLawsonCompanies.ПолучитьPrimaryParcels(Primary).ВыгрузитьКолонку("Parcel"));
	КонецЕсли;
	// } RGS AArsentev 20.09.2017 S-I-0003596
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment КАК Segment,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment КАК SubSegment,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket КАК Geomarket,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	               |	СУММА(ParcelsДетали.GrossWeightKG) КАК GrossWeightKG,
	               |	0 КАК TotalCostsSumUSDPerParcel,
	               |	ParcelsДетали.Ссылка.TransportRequest.PickUpWarehouse КАК PickUpWarehouse,
	               |	ParcelsДетали.Ссылка.TransportRequest.DeliverTo КАК DeliverTo
	               |ИЗ
	               |	Справочник.Parcels.Детали КАК ParcelsДетали
	               |ГДЕ
	               |	ParcelsДетали.Ссылка В(&Parcels)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Segment,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubSegment,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.Geomarket,
	               |	ParcelsДетали.СтрокаИнвойса.КостЦентр.SubGeomarket,
	               |	ParcelsДетали.Ссылка.TransportRequest.PickUpWarehouse,
	               |	ParcelsДетали.Ссылка.TransportRequest.DeliverTo";
				   
	ТЗParcels = Запрос.Выполнить().Выгрузить();			   
	
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗParcels.ВыгрузитьКолонку("GrossWeightKG"), TotalCostsSumUSD, ТЗParcels, "TotalCostsSumUSDPerParcel");
	
	Для Каждого Стр из ТЗParcels Цикл 
		
		Движение = ДвиженияLocalDistributionCostsPerKG.Добавить();
		Движение.Период = Дата;
		Движение.Trip = Ссылка;
		Движение.MOT = MOT;
		Движение.Segment = Стр.Segment;
		Движение.SubSegment = Стр.SubSegment;
		Движение.Geomarket = Стр.Geomarket;
		Движение.SubGeomarket = Стр.SubGeomarket;
		Движение.Equipment = Equipment;
		Движение.SourceLocation = Стр.PickUpWarehouse;
		Движение.DestinationLocation = Стр.DeliverTo;
		Движение.CostsSumPerKGUSD = Стр.TotalCostsSumUSDPerParcel / ?(Стр.GrossWeightKG = 0, 1, Стр.GrossWeightKG);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуДвиженийRouteOfLocation()
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	
	ТаблицаДвижений.Колонки.Добавить("Период",			ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("LocationStart",	Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаДвижений.Колонки.Добавить("LocationEnd",		Новый ОписаниеТипов("СправочникСсылка.Warehouses"));
	ТаблицаДвижений.Колонки.Добавить("Mileage",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	
	ТекLocation = Неопределено;
	Для Каждого СтрStops Из Stops Цикл
		
		Если СтрStops.Type = Перечисления.StopsTypes.Source Тогда
			ТекLocation = СтрStops.Location;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		
		НоваяСтрока.Период			= Дата;
		НоваяСтрока.LocationStart	= ТекLocation;
		НоваяСтрока.LocationEnd		= СтрStops.Location;
		НоваяСтрока.Mileage			= СтрStops.Mileage;
			
		ТекLocation = СтрStops.Location;
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура СформироватьДвиженияRouteOfLocation(Отказ)
	               	
	// регистр RouteOfLocation 
			
	ДвиженияRouteOfLocation = Движения.RouteOfLocation;
	
	ДвиженияRouteOfLocation.Записывать = Истина;
	ДвиженияRouteOfLocation.Очистить();
	
	ТаблицаДвижений = ПолучитьТаблицуДвиженийRouteOfLocation();
	
	// Нулевые значения в реистре не нужны
	МассивСтрокДляУдаления = ТаблицаДвижений.НайтиСтроки(Новый Структура("Mileage", 0));
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаДвижений.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	ДвиженияRouteOfLocation.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

Функция ПолучитьТаблицуДвиженийLocalDistributionCostsMilageWeightVolume()

	ТаблицаРасстояний = ПолучитьТаблицуДвиженийRouteOfLocation();
	ТаблицаРасстоянийМеждуСкладами = ргМодульКартографии.ПолучитьВсеКомбинацииРасстояний(ТаблицаРасстояний);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасстояний.LocationStart КАК SourceLocation,
	|	ТаблицаРасстояний.LocationEnd КАК DestinationLocation,
	|	ТаблицаРасстояний.Mileage КАК Milage
	|ПОМЕСТИТЬ ТаблицаРасстояний
	|ИЗ
	|	&ТаблицаРасстояний КАК ТаблицаРасстояний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripNonLawsonCompaniesParcels.Ссылка.Дата КАК Период,
	|	TripNonLawsonCompaniesParcels.Ссылка.Equipment,
	|	TripNonLawsonCompaniesParcels.Ссылка.MOT,
	|	TripNonLawsonCompaniesParcels.Parcel.HazardClass КАК HazardClass,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.Company КАК ParentCompany,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Geomarket КАК Geomarket,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.SubGeomarket КАК SubGeomarket,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Segment КАК Segment,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.SubSegment КАК SubSegment,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse КАК SourceLocation,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo КАК DestinationLocation,
	|	СУММА(TripNonLawsonCompaniesParcels.Parcel.CubicMeters * TripNonLawsonCompaniesParcels.NumOfParcels / TripNonLawsonCompaniesParcels.Parcel.NumOfParcels) КАК Volume,
	|	СУММА(TripNonLawsonCompaniesParcels.Parcel.GrossWeight * TripNonLawsonCompaniesParcels.NumOfParcels / TripNonLawsonCompaniesParcels.Parcel.NumOfParcels) КАК Weight
	|ПОМЕСТИТЬ ТаблицаParcel
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|ГДЕ
	|	TripNonLawsonCompaniesParcels.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	TripNonLawsonCompaniesParcels.Ссылка.Дата,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.Company,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Geomarket,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.SubGeomarket,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.Segment,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.CostCenter.SubSegment,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.PickUpWarehouse,
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest.DeliverTo,
	|	TripNonLawsonCompaniesParcels.Parcel.HazardClass,
	|	TripNonLawsonCompaniesParcels.Ссылка.Equipment,
	|	TripNonLawsonCompaniesParcels.Ссылка.MOT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаParcel.Период,
	|	ТаблицаParcel.Equipment,
	|	ТаблицаParcel.MOT,
	|	ТаблицаParcel.HazardClass,
	|	ТаблицаParcel.ParentCompany,
	|	ТаблицаParcel.Geomarket,
	|	ТаблицаParcel.SubGeomarket,
	|	ТаблицаParcel.Segment,
	|	ТаблицаParcel.SubSegment,
	|	ТаблицаParcel.SourceLocation,
	|	ТаблицаParcel.DestinationLocation,
	|	ТаблицаParcel.Volume,
	|	ТаблицаParcel.Weight,
	|	ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) КАК MilageOfParcel,
	|	ТаблицаParcel.Weight * ЕСТЬNULL(ТаблицаРасстояний.Milage, 0) / 1000 КАК TonneKilometers
	|ИЗ
	|	ТаблицаParcel КАК ТаблицаParcel
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасстояний КАК ТаблицаРасстояний
	|		ПО ТаблицаParcel.SourceLocation = ТаблицаРасстояний.SourceLocation
	|			И ТаблицаParcel.DestinationLocation = ТаблицаРасстояний.DestinationLocation";
	
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ТаблицаРасстояний",	ТаблицаРасстоянийМеждуСкладами);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДвижений.Колонки.Добавить("Milage",		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаДвижений.Колонки.Добавить("Sum",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДвижений.Колонки.Добавить("SumOfMilage",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Распределяем общий пробег "Milage" И "SumOfMilage" по "Weight"
	MilageТек			= 0;
	MilageВсего			= ТаблицаРасстояний.Итог("Mileage");
	SumOfMilageТек		= 0;
	SumOfMilageВсего	= TotalCostsSumUSD;
	MilageOfParcelВсего	= ТаблицаДвижений.Итог("MilageOfParcel");
	
	ТекСчетчик	= 1;
	ВсегоСтрок	= ТаблицаДвижений.Количество();
	
	// Если базы распределения нет, то ничего делать не надо
	Если MilageOfParcelВсего <> 0 Тогда
	
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			Если ТекСчетчик = ВсегоСтрок Тогда
				СтрокаДвижений.Milage		= MilageВсего - MilageТек;
				СтрокаДвижений.SumOfMilage	= SumOfMilageВсего - SumOfMilageТек;
			Иначе
				СтрокаДвижений.Milage		= MilageВсего * СтрокаДвижений.MilageOfParcel / MilageOfParcelВсего;
				СтрокаДвижений.SumOfMilage	= SumOfMilageВсего * СтрокаДвижений.MilageOfParcel / MilageOfParcelВсего;
			КонецЕсли;
			
			MilageТек		= MilageТек + СтрокаДвижений.Milage;
			SumOfMilageТек	= SumOfMilageТек + СтрокаДвижений.SumOfMilage;
			ТекСчетчик		= ТекСчетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// Распределение суммы по тонно километрам
	SumТек					= 0;
	SumВсего				= TotalCostsSumUSD;
	TonneKilometersВсего	= ТаблицаДвижений.Итог("TonneKilometers");
	
	ТекСчетчик	= 1;
	ВсегоСтрок	= ТаблицаДвижений.Количество();
	
	// Если базы распределения нет, то ничего делать не надо
	Если TonneKilometersВсего <> 0 Тогда
	
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			Если ТекСчетчик = ВсегоСтрок Тогда
				СтрокаДвижений.Sum = SumВсего - SumТек;
			Иначе
				СтрокаДвижений.Sum = SumВсего * СтрокаДвижений.TonneKilometers / TonneKilometersВсего;
			КонецЕсли;
			
			SumТек		= SumТек + СтрокаДвижений.Sum;
			ТекСчетчик	= ТекСчетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;	
		
	Возврат ТаблицаДвижений;
	
КонецФункции	
	
Процедура СформироватьДвиженияLocalDistributionCostsMilageWeightVolume(Отказ)
	
	// регистр LocalDistributionCostsMilageWeightVolume 
			
	ДвиженияLocalDistributionCostsMilageWeightVolume = Движения.LocalDistributionCostsMilageWeightVolume;
	
	ДвиженияLocalDistributionCostsMilageWeightVolume.Записывать = Истина;
	ДвиженияLocalDistributionCostsMilageWeightVolume.Очистить();
	
	ТаблицаДвижений = ПолучитьТаблицуДвиженийLocalDistributionCostsMilageWeightVolume();
	
	ДвиженияLocalDistributionCostsMilageWeightVolume.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

Функция ПолучитьТаблицуОстатковNumOfParcels(МассивParcels)
		
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	Отбор = Новый Структура("Parcel", МассивParcels); 
	Возврат РегистрыНакопления.ParcelsOfTransportRequestsWithoutShipment.Остатки(Граница, Отбор, "Parcel", "NumOfParcels");
		  			
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Движения.ParcelsOfTransportRequestsWithoutShipment.Очистить();
	Движения.ParcelsOfTransportRequestsWithoutShipment.Записать();

	// Газиалиев. Начало изменения
	Движения.RouteOfLocation.Очистить();
	Движения.RouteOfLocation.Записать();
	
	Движения.LocalDistributionCostsMilageWeightVolume.Очистить();
	Движения.LocalDistributionCostsMilageWeightVolume.Записать();
	// Газиалиев. Конец изменения
	
	ОбновитьStageTRs();	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AArsentev 16.03.2018 - для изменения mileage
	Если (ДополнительныеСвойства.Свойство("ИзменениеMileage") ИЛИ ДополнительныеСвойства.Свойство("ВнестиИзмененияПарселя")) И Проведен Тогда
		Возврат;
	КонецЕсли;
	// } RGS AArsentev 16.03.2018 - для изменения mileage
	
	Stage = ОбновитьStage();
	
	//// { RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	//Если ДополнительныеСвойства.Свойство("РежимЗаписи") Тогда
	//	СформироватьЗаписьПоРегиструГрафикиУведомленийTransportRequest(ДополнительныеСвойства.РежимЗаписи);
	//КонецЕсли;
	//// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
	
	// { RGS ASeryakov 19.03.18 S-I-0004822
	// проверим реквизиты группы ProductLineApprovedBy
	Если Stage = Перечисления.TripNonLawsonCompaniesStages.Saved_ApprovalIsNotRequired ИЛИ
		Stage = Перечисления.TripNonLawsonCompaniesStages.Saved_ApprovalIsRequired    ИЛИ 
		Stage = Перечисления.TripNonLawsonCompaniesStages.Saved_AwaitingServiceProvidersCosts Тогда
		
		Если ПустаяСтрока(ApprovedBy) Тогда
			
			Отказ = Истина; 
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Product Line Approved By""!'; en = 'Field is not filled ""Product Line Approved By""!'"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		// { RGS ASeryakov 17.07.18 S-I-0005641
		Если TypeOfTransport = ПредопределенноеЗначение("Перечисление.TypesOfTransport.CallOut") И НЕ ContractRate И НЕ UniqueSupplier И ПустаяСтрока(TessBidNo) Тогда
			
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""TESS""!'; en = 'Field is not filled ""TESS""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		// } RGS ASeryakov 17.07.18 S-I-0005641
		
	КонецЕсли;

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	// } RGS ASeryakov 19.03.18 S-I-0004822
	
	
	Если Stage = ПредопределенноеЗначение("Перечисление.TripNonLawsonCompaniesStages.Draft")
		ИЛИ Stage = ПредопределенноеЗначение("Перечисление.TripNonLawsonCompaniesStages.Saved_ApprovalIsNotRequired") Тогда
		
		Approval = Задачи.TripsNonLawsonApproval.ПолучитьСсылкуНаApproval(Ссылка);
		
		Если ЗначениеЗаполнено(Approval) 
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Approval, "ПометкаУдаления") Тогда 
			LocalDistributionForNonLawsonСервер.CancelApproval(Approval);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьTransportAvailabilityStatus(Stage);  	
	
	Если Не Отказ Тогда
		LocalDistributionForNonLawsonСервер.СформироватьШтрихКод(Ссылка);
	КонецЕсли;
	
	// { RGS AArsentev 30.08.2016 15:30:45 - S-I-0001827
	// { RGS AArsentev 27.01.2017 13:20:55 - S-I-0002442
	Если НЕ ПометкаУдаления Тогда
		// } RGS AArsentev 27.01.2017 13:20:55 - S-I-0002442
		Если Не Отказ  Тогда
			Попытка
				СформируемЗадачуДляОператора(Stage);
			Исключение
			КонецПопытки
		КонецЕсли;
	КонецЕсли;
	// } RGS AArsentev 30.08.2016 15:30:45 - S-I-0001827

	
КонецПроцедуры

Процедура СформируемУведомления(Выборка) // { RGS AArsentev 30.08.2016 15:30:45 - S-I-0001827
	
	УстановитьПривилегированныйРежим(Истина);
	
	//очистим график при записи документа
	НаборЗаписей = РегистрыСведений.ГрафикУведомленийДляTrip.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Trip.Установить(Ссылка); 
	НаборЗаписей.Записать();
	
	Stage = РегистрыСведений.StagesOfTripsNonLawsonCompanies.ОпределитьStage(Ссылка);
	
	Стопы = Stops.Выгрузить();
	Отбор = Новый Структура;
	Отбор.Вставить("Type", Перечисления.StopsTypes.Destination);
	Конечный = Стопы.Скопировать(Отбор);
	
	Если Конечный.Количество() = 1 И Конечный[0].ActualArrivalLocalTime = Дата(1,1,1) Тогда //Если не проставлена конечная дата формируем график
	//Если Stage <> Перечисления.TripNonLawsonCompaniesStages.Closed Тогда //Если не закрыта формируем график   
		
		Если TotalPlannedDuration / 86400 >= 1 Тогда //Если планируемое время больше чем 1 день
			
			Отбор = Новый Структура;
			Отбор.Вставить("Type", Перечисления.StopsTypes.Source);
			
			Начальный = Стопы.Скопировать(Отбор);
			Если Начальный.Количество() > 0 Тогда
				НачальныйСтоп = Начальный[0];
				Если ЗначениеЗаполнено(НачальныйСтоп.ActualDepartureLocalTime) Тогда
					ДатаОтправки = НачальныйСтоп.ActualDepartureLocalTime;
				Иначе
					ДатаОтправки = НачальныйСтоп.PlannedDepartureLocalTime;
				КонецЕсли;
				НачальнаяДата = УниверсальноеВремя(ДатаОтправки, Выборка.ЧасовойПояс); //Преобразуем во время координатора поставки
				
				ПервоеУведомлениеВСекундах = Выборка.ПервоеУведомление - Дата(1,1,1);
				ВтороеУведомлениеВСекундах = Выборка.ВтороеУведомление - Дата(1,1,1);
				
				СледДень = КонецДня(НачальнаяДата) + 1;
				Разница = СледДень - НачальнаяДата; //Промежуток от начального стопа до "0" часов следующего дня  
				Дни = Цел((TotalPlannedDuration - Разница) / 86400); //Целых дней
				Остаток = (TotalPlannedDuration - Разница) - Дни * 86400; //Нераспределенный остаток
				ПоясСервера = Справочники.TimeZones.НайтиПоКоду(ЧасовойПояс()).StandardTimeOffset;
				Пока Дни <> 0 Цикл
					
					Время = СледДень + ПервоеУведомлениеВСекундах; //первое уведомление
					Запись = НаборЗаписей.Добавить();
					Запись.Trip = Ссылка;
					Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
					
					Время = СледДень + ВтороеУведомлениеВСекундах; //второе уведомление
					Запись = НаборЗаписей.Добавить();
					Запись.Trip = Ссылка;
					Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
					
					СледДень = СледДень + 86400; //Следующий день
					Дни = Дни - 1;
					
				КонецЦикла;
				
				//Дораспределим остаток времени
				Если Остаток >= ПервоеУведомлениеВСекундах Тогда 
					
					Время = СледДень + ПервоеУведомлениеВСекундах;
					Запись = НаборЗаписей.Добавить();
					Запись.Trip = Ссылка;
					Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
					
					Если Остаток >= ВтороеУведомлениеВСекундах Тогда
						Время = СледДень + ВтороеУведомлениеВСекундах;
						Запись = НаборЗаписей.Добавить();
						Запись.Trip = Ссылка;
						Запись.Период = УниверсальноеВремя(Время, Выборка.ЧасовойПояс) + ПоясСервера * 3600;
					КонецЕсли;
					
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 30.08.2016 15:30:45 - S-I-0001827

// { RGS AArsentev 13.09.2017
Процедура ОтправитьWorkOrder(Получатели);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивПарселей = Parcels.ВыгрузитьКолонку("Parcel");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Parcels.TransportRequest.NotificationRecipients КАК NotificationRecipients,
	|	Parcels.TransportRequest.Requestor.EMail КАК EMail,
	|	Parcels.TransportRequest,
	|	Parcels.TransportRequest.Номер КАК TransportRequestNo,
	|	Parcels.TransportRequest.PickUpWarehouse КАК PickUpWarehouse,
	|	Parcels.TransportRequest.RequiredDeliveryLocalTime КАК RequiredDeliveryTime,
	|	Parcels.TransportRequest.DeliverTo КАК DeliverTo,
	|	Parcels.TransportRequest.PickUpWarehouse.City КАК PickUpWarehouseCity,
	|	Parcels.TransportRequest.PickUpWarehouse.RegionProvince КАК PickUpWarehouseRegion,
	|	Parcels.TransportRequest.DeliverTo.City КАК DeliverToCity,
	|	Parcels.TransportRequest.DeliverTo.RegionProvince КАК DeliverToRegion,
	|	Parcels.TransportRequest.ReadyToShipLocalTime КАК ReadyToShipLocalTime,
	|	Parcels.NumOfParcels,
	|	Parcels.GrossWeightKG,
	|	Parcels.Код,
	|	TripNonLawsonCompaniesParcels.NumOfParcels КАК NumOfParcelsTrip,
	|	ВЫБОР
	|		КОГДА TripNonLawsonCompaniesParcels.NumOfParcels = 0
	|			ТОГДА 0
	|		ИНАЧЕ Parcels.GrossWeightKG / Parcels.NumOfParcels * TripNonLawsonCompaniesParcels.NumOfParcels
	|	КОНЕЦ КАК ВесПоставки,
	|	Parcels.LengthCM,
	|	Parcels.WidthCM,
	|	Parcels.HeightCM,
	|	Parcels.CubicMeters,
	|	Parcels.PackingType
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels КАК Parcels
	|		ПО TripNonLawsonCompaniesParcels.Parcel = Parcels.Ссылка
	|ГДЕ
	|	НЕ Parcels.ПометкаУдаления
	|	И TripNonLawsonCompaniesParcels.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	ТаблицаПарсели = Запрос.Выполнить().Выгрузить();
	
	СпискокПарселей = Новый Массив;
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПарселей);
	NumOfParcels = 0;

	Для Каждого Парсель Из ТаблицаПарсели Цикл
		
		ОписаниеПарселя = "" + Парсель.Код + ", " + Парсель.NumOfParcelsTrip + " " + Парсель.PackingType + ": " + нрег(СокрЛП(Парсель.ВесПоставки)) + " кг, " + Парсель.LengthCM + "x" + Парсель.WidthCM + "x" + Парсель.HeightCM + " см, " + Формат(Парсель.CubicMeters, "ЧДЦ=2") + " м3";
		СпискокПарселей.Добавить(ОписаниеПарселя);
		NumOfParcels = NumOfParcels + Парсель.NumOfParcelsTrip;
		
	КонецЦикла;
	Парсели = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(СпискокПарселей, "; ");
	
	ЗапросКлассОпасности = Новый Запрос;
	ЗапросКлассОпасности.Текст = "ВЫБРАТЬ
	|	Parcels.HazardClass.Наименование КАК HazardClassNameEng,
	|	Parcels.HazardClass.NameRus
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В(&МассивПарселей)
	|
	|СГРУППИРОВАТЬ ПО
	|	Parcels.HazardClass.Наименование,
	|	Parcels.HazardClass.NameRus";
	ЗапросКлассОпасности.УстановитьПараметр("МассивПарселей", МассивПарселей);
	HazardEng = ЗапросКлассОпасности.Выполнить().Выгрузить().ВыгрузитьКолонку("HazardClassNameEng");
	HazardRus = ЗапросКлассОпасности.Выполнить().Выгрузить().ВыгрузитьКолонку("HazardClassNameRus");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(HazardEng);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(HazardRus);
	
	ЗапросСтопы = Новый Запрос;
	ЗапросСтопы.Текст = "ВЫБРАТЬ
	|	TripNonLawsonCompaniesStops.PlannedArrivalLocalTime
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
	|ГДЕ
	|	TripNonLawsonCompaniesStops.Ссылка = &Ссылка
	|	И TripNonLawsonCompaniesStops.Type = ЗНАЧЕНИЕ(Перечисление.StopsTypes.Source)";
	ЗапросСтопы.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = ЗапросСтопы.Выполнить().Выбрать();
	Выборка.Следующий();
	ПлановаяДата = Выборка.PlannedArrivalLocalTime;
	
	
	Пока Результат.Следующий() Цикл
		
		МестоОтправленияEng = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.PickUpWarehouse, "Наименование")) + ", " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.PickUpWarehouseRegion, "Код")) + ", " + СокрЛП(Результат.PickUpWarehouseCity);
		МестоОтправленияRus = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.PickUpWarehouse, "NameRus")) + ", " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.PickUpWarehouseRegion, "Наименование")) + ", " + СокрЛП(Результат.PickUpWarehouseCity);
		
		ПунктНазначенияEng = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.DeliverTo, "Наименование")) + ", " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.DeliverToRegion, "Код")) + ", " + СокрЛП(Результат.DeliverToCity);
		ПунктНазначенияRus = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.DeliverTo, "NameRus")) + ", " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.DeliverToRegion, "Наименование")) + ", " + СокрЛП(Результат.DeliverToCity);
		
		Тема = "Work order " + СокрЛП(Номер);
		Тело =  "<HTML><HEAD>
		|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type></META><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""></LINK>
		|<META name=GENERATOR content=""MSHTML 11.00.9600.18538""></META><BASE href=""v8config://e0666db2-45d6-49b4-a200-061c6ba7d569/mdobject/ide9a5ee80-dd3a-418b-afb0-38339f76957d/038b5c85-fb1c-4082-9c4c-e69f8928bf3a""></BASE></HEAD>
		|<BODY>
		|<TABLE border=1>
		|<TBODY>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Trip:</TD>
		|<TD>" + СокрЛП(Номер) + "</TD>
		|<TD background-color:="" center="">Трип:</TD>
		|<TD>" + СокрЛП(Номер) + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Departure place:</TD>
		|<TD>" + МестоОтправленияEng + "</TD>
		|<TD background-color:="" center="">Место отправления:</TD>
		|<TD>" + МестоОтправленияRus + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Delivery place:</TD>
		|<TD>" + ПунктНазначенияEng + "</TD>
		|<TD background-color:="" center="">Пункт назначения:</TD>
		|<TD>" + ПунктНазначенияRus + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Planned arrival local time:</TD>
		|<TD>" + СокрЛП(ПлановаяДата) + "</TD>
		|<TD background-color:="" center="">Плановая дата прибытия машины на погрузку:</TD>
		|<TD>" + СокрЛП(ПлановаяДата) + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Required delivery date:</TD>
		|<TD>" + СокрЛП(Результат.RequiredDeliveryTime) + "</TD>
		|<TD background-color:="" center="">Требуемое время доставки</TD>
		|<TD>" + СокрЛП(Результат.RequiredDeliveryTime) + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Total num of parcels:</TD>
		|<TD>" + NumOfParcels + "</TD>
		|<TD background-color:="" center="">Всего грузовых мест:</TD>
		|<TD>" + NumOfParcels + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Parcels / Грузовые места:</TD>
		|<TD colspan=""3"">" + Парсели + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Hazard class:</TD>
		|<TD>" + РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(HazardEng, ", ") + "</TD>
		|<TD background-color:="" center="">Класс опасности:</TD>
		|<TD>" + РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(HazardRus, ", ") + "</TD></TR>
		|<TR style = ""padding:1.5pt 1.5pt 1.5pt 1.5pt;font-size:10pt;font-family:Tahoma,sans-serif;"">
		|<TD background-color:="" center="">Comment:</TD>
		|<TD>" + СокрЛП(Comments) + "</TD>
		|<TD background-color:="" center="">Комментарий:</TD>
		|<TD>" + СокрЛП(Comments) + "</TD></TR>
		|</TBODY></TABLE></BODY></HTML>";
		
		МассивTrips = Новый Массив;
		МассивTrips.Добавить(Ссылка);
		
		ОбъектыПечати = Новый СписокЗначений;
		
		ТабличныйДок = Документы.TripNonLawsonCompanies.ПечатьWorkOrder(МассивTrips, ОбъектыПечати);
		
		Вложение = Новый ХранилищеЗначения(ТабличныйДок);
		
		Если ЗначениеЗаполнено(Получатели) Тогда 
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Получатели, Тема, Тело,Вложение,ТипТекстаПочтовогоСообщения.HTML);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // } RGS AArsentev 13.09.2017

// { RGS AArsentev 31.01.2018 S-I-0004374
Процедура ПроверитьEquipment(Отказ)
	
	Если СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Equipment, "Код")) = "FLATBED_TRAILER_OVERSIZE" Тогда
		
		Если GrossWeightKG < 22000 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	TripNonLawsonCompaniesParcels.Parcel.LengthCM КАК LengthCM,
			|	TripNonLawsonCompaniesParcels.Parcel.WidthCM КАК WidthCM,
			|	TripNonLawsonCompaniesParcels.Parcel.HeightCM КАК HeightCM,
			|	TripNonLawsonCompaniesParcels.Parcel.Ссылка КАК Parcel,
			|	TripNonLawsonCompaniesParcels.Parcel.Код
			|ИЗ
			|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
			|ГДЕ
			|	TripNonLawsonCompaniesParcels.Parcel В(&Parcels)
			|
			|СГРУППИРОВАТЬ ПО
			|	TripNonLawsonCompaniesParcels.Parcel.Ссылка,
			|	TripNonLawsonCompaniesParcels.Parcel.LengthCM,
			|	TripNonLawsonCompaniesParcels.Parcel.WidthCM,
			|	TripNonLawsonCompaniesParcels.Parcel.HeightCM,
			|	TripNonLawsonCompaniesParcels.Parcel.Код";
			Запрос.УстановитьПараметр("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));
			// { RGS EParshina 02.11.2018 12:17:58 - S-I-0006177
			ЕстьНегабарит = Ложь;
			// } RGS EParshina 02.11.2018 12:17:58 - S-I-0006177
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				
				ТекстОшибки = "";
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ТекСтрока = "";
					Если Выборка.LengthCM > 1360 ИЛИ Выборка.WidthCM > 255 ИЛИ Выборка.HeightCM > 240 Тогда
						// { RGS EParshina 02.11.2018 12:17:58 - S-I-0006177
						ЕстьНегабарит = Истина;
						Прервать;
						// } RGS EParshina 02.11.2018 12:17:58 - S-I-0006177
					Иначе
						Если ЗначениеЗаполнено(ТекстОшибки) Тогда
							ТекстОшибки = ТекстОшибки + "
							|";
						КонецЕсли;
						
						ТекстОшибки = ТекстОшибки + СокрЛП(Выборка.ParcelКод);
						Если Выборка.LengthCM <= 1360 Тогда
							ТекСтрока = ТекСтрока + ?(ЗначениеЗаполнено(ТекСтрока), ", Length less 13.6 m", " Length less 13.6 m");
						КонецЕсли;
						Если Выборка.WidthCM <= 255 Тогда
							ТекСтрока = ТекСтрока + ?(ЗначениеЗаполнено(ТекСтрока), ", Width less 2.55 m", " Width less 2.55 m");
						КонецЕсли;
						Если Выборка.HeightCM <= 240 Тогда
							ТекСтрока = ТекСтрока + ?(ЗначениеЗаполнено(ТекСтрока), ", Height less 2.4 m", " Height less 2.4 m");
						КонецЕсли;
						ТекстОшибки = ТекстОшибки + ТекСтрока;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ЕстьНегабарит Тогда // RGS EParshina 02.11.2018 12:17:58 - S-I-0006177
				Отказ = Истина;
				Ошибка = "Can't use 'FLATBED_TRAILER_OVERSIZE', because GrossWeightKG less 22 tons and
				|" + ТекстОшибки;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 31.01.2018 S-I-0004374

// { RGS ASeryakov 02.03.18 S-I-0004756
Процедура ПроверитьМаскуКодаTESS(Отказ, ТекущееЗначение)
	
	ОписаниеОшибки = "";
		
	Если НЕ СоответствуетМаскеКодаTESS(ТекущееЗначение, ОписаниеОшибки) Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'No не соответствует формату номера TESS!'; en = 'No does not match the number format of the TESS!'") +" "+ ОписаниеОшибки;;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьМаскуКодаTESS()

Функция СоответствуетМаскеКодаTESS(ТекущееЗначение, ОписаниеОшибки)
	
	
	Префикс = Лев(ТекущееЗначение, 2);
	ЧисловойКод = Сред(ТекущееЗначение,3,13);
	
	Если Врег(Префикс) <> "SP" Тогда
		
		
		Параметр1 = НСтр("ru = 'Установлен недопустимый префикс'; en = 'is invalid prefix'");
		Параметр2 = Префикс;
		
		ШаблонОшибки = НСтр("ru = '%1  ""%2"" в буквенно-числовом коде: '; en = 'Code %1 ""%2"" in an alphanumeric code '") + ТекущееЗначение + "!";
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, Параметр1, Параметр2);
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧисловойКод) = Неопределено Тогда
		
		ШаблонОшибки = НСтр("ru = 'Для кода %1 установлен недопустимый символ в числовом коде: '; en = 'Code %1 is invalid character in an numeric code '") + ЧисловойКод + "!";
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ЧисловойКод);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
	Если СтрДлина(Строка(ЧисловойКод)) < 12 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Для числового кода %1 установлено меньшее количество символов: '; en = 'The numeric code %1 has fewer characters!'");
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ЧисловойКод);
		
		Возврат Ложь;
		
	КонецЕсли;

		
	Возврат Истина;
	
КонецФункции // СоответствуетМаскеКодаTESS()
// } RGS ASeryakov 02.03.18 S-I-0005597

Процедура СформируемУведомленияПоMOT(Выборка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//очистим график при записи документа
	НаборЗаписей = РегистрыСведений.ГрафикУведомленийДляTrip.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Trip.Установить(Ссылка); 
	НаборЗаписей.Записать();
	
	Стопы = Stops.Выгрузить();
	Отбор = Новый Структура;
	Отбор.Вставить("Type", Перечисления.StopsTypes.Destination);
	Конечный = Стопы.Скопировать(Отбор);
	
	ПовторятьКаждые = Выборка.HoursAfter_ATD;
	
	Если Конечный.Количество() = 1 И Конечный[0].ActualArrivalLocalTime = Дата(1,1,1) Тогда //Если не проставлена конечная дата формируем график
		
		Если TotalPlannedDuration / 60*60*Выборка.HoursAfter_ATD >= 1 Тогда 
			
			Отбор = Новый Структура;
			Отбор.Вставить("Type", Перечисления.StopsTypes.Source);
			
			Начальный = Стопы.Скопировать(Отбор);
			Если Начальный.Количество() > 0 Тогда
				НачальныйСтоп = Начальный[0];
				Если ЗначениеЗаполнено(НачальныйСтоп.ActualDepartureLocalTime) Тогда
					ДатаОтправки = НачальныйСтоп.ActualDepartureLocalTime;
				Иначе
					ДатаОтправки = НачальныйСтоп.PlannedDepartureLocalTime;
				КонецЕсли;
				
				ПериодыРассылки = Цел(TotalPlannedDuration / (60*60*Выборка.HoursAfter_ATD)); //Периоды рассылки
				
				Обход = 1;
				Пока ПериодыРассылки <> 0 Цикл
					
					Время = ДатаОтправки + 60*60*Выборка.HoursAfter_ATD * Обход; //первое уведомление
					Запись = НаборЗаписей.Добавить();
					Запись.Trip = Ссылка;
					Запись.Период = Время;
					
					Обход = Обход + 1;
					ПериодыРассылки = ПериодыРассылки - 1;
					
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПересчитатьВес()
	
	ВесКГ = 0;
	Для Каждого Элемент Из Parcels Цикл
		
		Если Элемент.Parcel.NumOfParcels = 0 Тогда
			Продолжить;
		Иначе
			ВесКГ = ВесКГ + (Элемент.Parcel.GrossWeightKG / Элемент.Parcel.NumOfParcels) * Элемент.NumOfParcels;
		КонецЕсли;
		
	КонецЦикла;
	GrossWeightKG = ВесКГ;
	
КонецПроцедуры

Процедура СформируемЗадачуДляОператора(Stage)
	
	Если Stage <> Перечисления.TripNonLawsonCompaniesStages.Draft Тогда
		
		Стопы = Stops.Выгрузить();
		Отбор = Новый Структура;
		Отбор.Вставить("Type", Перечисления.StopsTypes.Destination);
		Конечный = Стопы.Скопировать(Отбор);
		
		// Если проставлена конечная дата, в уведомлении нет необходимости
		Если Конечный.Количество() = 1 И Конечный[0].ActualArrivalLocalTime = Дата(1,1,1) Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	МестоположениеПоставки.Ссылка
			|ИЗ
			|	Задача.МестоположениеПоставки КАК МестоположениеПоставки
			|ГДЕ
			|	МестоположениеПоставки.Trip = &Trip
			|			И НЕ МестоположениеПоставки.ПометкаУдаления
			|			И НЕ МестоположениеПоставки.Выполнена
			|
			|УПОРЯДОЧИТЬ ПО
			|	МестоположениеПоставки.Дата УБЫВ";
			//Запрос.УстановитьПараметр("Специалист", Operator);
			Запрос.УстановитьПараметр("Trip", Ссылка);
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				
				ПериодРассылки = ПолучитьДатыДляЗадачи();
				
				Если ПериодРассылки <> Неопределено Тогда
					УстановитьПривилегированныйРежим(Истина);
					Задача = Задачи.МестоположениеПоставки.СоздатьЗадачу();
					Задача.Trip = Ссылка;
					Задача.Дата = ТекущаяДата();
					Задача.Critical = Ложь;
					Задача.Наименование = "Местоположение " + Ссылка;
					Задача.Координатор = Operator;
					Задача.НачалоПериодаНотификации = ПериодРассылки.НачалоПериодаНотификации;
					Задача.КонецПериодаНотификации = ПериодРассылки.КонецПериодаНотификации;
					
					Попытка
						Задача.Записать();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать 'FS tracking'");
					КонецПопытки;
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатыДляЗадачи()
	
	ПериодНотификации = Неопределено;
	
	Стопы = Stops.Выгрузить();
	Отбор = Новый Структура;
	Отбор.Вставить("Type", Перечисления.StopsTypes.Destination);
	Конечный = Стопы.Скопировать(Отбор);
	
	ЗапросMotNotification = Новый Запрос;
	ЗапросMotNotification.Текст = "ВЫБРАТЬ
	|	MOT_Trip_Notification.MOT,
	|	MOT_Trip_Notification.HoursAfter_ATD
	|ИЗ
	|	РегистрСведений.MOT_Trip_Notification КАК MOT_Trip_Notification
	|ГДЕ
	|	MOT_Trip_Notification.MOT = &MOT";
	ЗапросMotNotification.УстановитьПараметр("MOT", MOT);
	РезультатMOT = ЗапросMotNotification.Выполнить();
	Если НЕ РезультатMOT.Пустой() Тогда
		
		ВыборкаMOTNotification = РезультатMOT.Выбрать();
		ВыборкаMOTNotification.Следующий();
		
		Если TotalPlannedDuration / 60 * 60 * ВыборкаMOTNotification.HoursAfter_ATD >= 1 Тогда 
			
			Отбор = Новый Структура;
			Отбор.Вставить("Type", Перечисления.StopsTypes.Source);
			
			Начальный = Стопы.Скопировать(Отбор);
			
			Если Начальный.Количество() > 0 Тогда
				
				НачальныйСтоп = Начальный[0];
				Если ЗначениеЗаполнено(НачальныйСтоп.ActualDepartureLocalTime) Тогда
					ДатаОтправки = НачальныйСтоп.ActualDepartureLocalTime;
				Иначе
					ДатаОтправки = НачальныйСтоп.PlannedDepartureLocalTime;
				КонецЕсли;
				
				ПериодНотификации = Новый Структура;
				Обход = 0;
				Время = ДатаОтправки;
				Пока НЕ Время >= ТекущаяДата() Цикл
					
					Обход = Обход + 1;
					Время = ДатаОтправки + 60 * 60 * ВыборкаMOTNotification.HoursAfter_ATD * Обход; //первое уведомление
					
				КонецЦикла;
				
				Обход = Обход + 1;
				ПериодНотификации.Вставить("НачалоПериодаНотификации", Время);
				ПериодНотификации.Вставить("КонецПериодаНотификации", ДатаОтправки + 60 * 60 * ВыборкаMOTNotification.HoursAfter_ATD * Обход);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Not found the notification settings for MOTs!",
		ЭтотОбъект, "MOT", ,);
	КонецЕсли;
	
	Возврат ПериодНотификации;
	
КонецФункции

Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ТаблицаСтарыxДанныхParcels, ТаблицаСтарыxДанныхStops, ТаблицаСтарыxДанныхCosts, ТаблицаСтарыxДанныхBills)

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();
	СтрокаИсключаемыхРеквизитов = "ModifiedBy, ModificationDate, CreatedBy, CreationDate"; 
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		Новый Массив,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	Если ТаблицаСтарыxДанныхParcels <> Неопределено Тогда
	ТекстИзмененийParcels = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		ЭтотОбъект.Parcels,
		ТаблицаСтарыxДанныхParcels,
		МетаданныеОбъекта.ТабличныеЧасти.Parcels);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийParcels);
	КонецЕсли;
	
	Если ТаблицаСтарыxДанныхStops <> Неопределено Тогда
		ТекстИзмененийStops = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
			ЭтотОбъект.Stops,
			ТаблицаСтарыxДанныхStops,
			МетаданныеОбъекта.ТабличныеЧасти.Stops);
		ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийStops);
	КонецЕсли;
	
	Если ТаблицаСтарыxДанныхCosts <> Неопределено Тогда
		ТекстИзмененийCosts = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
			ЭтотОбъект.Costs,
			ТаблицаСтарыxДанныхCosts,
			МетаданныеОбъекта.ТабличныеЧасти.Costs);
		ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийCosts);
	КонецЕсли;
	
	Если ТаблицаСтарыxДанныхBills <> Неопределено Тогда
		ТекстИзмененийBills = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
			ЭтотОбъект.Bills,
			ТаблицаСтарыxДанныхBills,
			МетаданныеОбъекта.ТабличныеЧасти.Bills);
		ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийBills);
	КонецЕсли;
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.TripNonLawsonCompaniesLogs.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не ЭтоНовый() Тогда 
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
		"ВЫБРАТЬ
		|	TripNonLawsonCompanies.ПометкаУдаления,
		|	TripNonLawsonCompanies.Номер,
		|	TripNonLawsonCompanies.Дата,
		|	TripNonLawsonCompanies.Проведен,
		|	TripNonLawsonCompanies.ServiceProvider,
		|	TripNonLawsonCompanies.Equipment,
		|	TripNonLawsonCompanies.EquipmentNo,
		|	TripNonLawsonCompanies.TotalNumOfParcels,
		|	TripNonLawsonCompanies.GrossWeightKG,
		|	TripNonLawsonCompanies.CubicMeters,
		|	TripNonLawsonCompanies.Specialist,
		|	TripNonLawsonCompanies.Comments,
		|	TripNonLawsonCompanies.CreatedBy,
		|	TripNonLawsonCompanies.CreationDate,
		|	TripNonLawsonCompanies.ModifiedBy,
		|	TripNonLawsonCompanies.ModificationDate,
		|	TripNonLawsonCompanies.TotalPlannedDuration,
		|	TripNonLawsonCompanies.TotalActualDuration,
		|	TripNonLawsonCompanies.TotalCostsSum,
		|	TripNonLawsonCompanies.BaseCostsSum,
		|	TripNonLawsonCompanies.ZeroBaseCostsSum,
		|	TripNonLawsonCompanies.MOT,
		|	TripNonLawsonCompanies.Currency,
		|	TripNonLawsonCompanies.BaseCostsSumSLBUSD,
		|	TripNonLawsonCompanies.TotalAccessorialCostsSum,
		|	TripNonLawsonCompanies.Closed,
		|	TripNonLawsonCompanies.CompaniesList,
		|	TripNonLawsonCompanies.RoundTrip,
		|	TripNonLawsonCompanies.OnTime,
		|	TripNonLawsonCompanies.PlannedArrivalVsCurrentDate,
		|	TripNonLawsonCompanies.CostsPlanning,
		|	TripNonLawsonCompanies.AutomaticallyPlannedServiceProviderCosts,
		|	TripNonLawsonCompanies.Transport,
		|	TripNonLawsonCompanies.TypeOfTransport,
		|	TripNonLawsonCompanies.Operator,
		|	TripNonLawsonCompanies.VerifiedByBillingSpecialist,
		|	TripNonLawsonCompanies.BillingSpecialist,
		|	TripNonLawsonCompanies.TotalCostsSumUSD,
		|	TripNonLawsonCompanies.TRList,
		|	TripNonLawsonCompanies.OBList,
		|	TripNonLawsonCompanies.SegmentsLawson,
		|	TripNonLawsonCompanies.TotalAccessorialCostsSumUSD,
		|	TripNonLawsonCompanies.WaybillNo,
		|	TripNonLawsonCompanies.SentToServiceProviderDate,
		|	TripNonLawsonCompanies.WaybillDate,
		|	TripNonLawsonCompanies.DateOfBorderCrossing,
		|	TripNonLawsonCompanies.NavigationType,
		|	TripNonLawsonCompanies.Secondary,
		|	TripNonLawsonCompanies.Primary,
		|	TripNonLawsonCompanies.SecondaryCompany,
		|	TripNonLawsonCompanies.SecondaryLegalEntity,
		|	TripNonLawsonCompanies.SecondarySegment,
		|	TripNonLawsonCompanies.SecondarySegmentLawson,
		|	TripNonLawsonCompanies.SecondaryCostCenter,
		|	TripNonLawsonCompanies.SecondaryProductLine,
		|	TripNonLawsonCompanies.ClosedBy,
		|	TripNonLawsonCompanies.Driver,
		|	TripNonLawsonCompanies.ContactPhoneNumberOfTheDriver,
		|	TripNonLawsonCompanies.SourceInIncertDate,
		|	TripNonLawsonCompanies.SourceOutInsertDate,
		|	TripNonLawsonCompanies.DestInInsertDate,
		|	TripNonLawsonCompanies.DestOutInsertDate,
		|	TripNonLawsonCompanies.GeomarketList,
		|	TripNonLawsonCompanies.AdditionalVolume,
		|	TripNonLawsonCompanies.ApprovedBy,
		|	TripNonLawsonCompanies.ContractRate,
		|	TripNonLawsonCompanies.UniqueSupplier,
		|	TripNonLawsonCompanies.TessBidNo,
		|	TripNonLawsonCompanies.OutOfComplianceReason,
		|	TripNonLawsonCompanies.OOC_Responsible,
		|	TripNonLawsonCompanies.SQReportNumber,
		// { RGS AFokin 19.10.2018 23:59:59 S-I-0006152
		|	TripNonLawsonCompanies.Demobilization,
		// } RGS AFokin 19.10.2018 23:59:59 S-I-0006152
		// { RGS DKazanskiy 07.12.2018 13:30:45 - S-I-0006428 
		|	TripNonLawsonCompanies.LowestFareKnown,
		|	TripNonLawsonCompanies.ReasonForRateSelection,
		// } RGS DKazanskiy 07.12.2018 13:30:47 - S-I-0006428
		|	TripNonLawsonCompanies.Представление
		|ИЗ
		|	Документ.TripNonLawsonCompanies КАК TripNonLawsonCompanies
		|ГДЕ
		|	TripNonLawsonCompanies.Ссылка = &Ссылка");
		
		
		СтруктураТекстов.Вставить("СтарыеДанныеParcels",
		"ВЫБРАТЬ
		|	TripNonLawsonCompaniesParcels.НомерСтроки,
		|	TripNonLawsonCompaniesParcels.Parcel,
		|	TripNonLawsonCompaniesParcels.NumOfParcels
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
		|ГДЕ
		|	TripNonLawsonCompaniesParcels.Ссылка = &Ссылка");
		
		
		СтруктураТекстов.Вставить("СтарыеДанныеStops",
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	TripNonLawsonCompaniesStops.НомерСтроки,
		|	TripNonLawsonCompaniesStops.Location,
		|	TripNonLawsonCompaniesStops.Type,
		|	TripNonLawsonCompaniesStops.PlannedArrivalLocalTime,
		|	TripNonLawsonCompaniesStops.PlannedArrivalUniversalTime,
		|	TripNonLawsonCompaniesStops.ActualArrivalLocalTime,
		|	TripNonLawsonCompaniesStops.ActualArrivalUniversalTime,
		|	TripNonLawsonCompaniesStops.PlannedDepartureLocalTime,
		|	TripNonLawsonCompaniesStops.PlannedDepartureUniversalTime,
		|	TripNonLawsonCompaniesStops.ActualDepartureLocalTime,
		|	TripNonLawsonCompaniesStops.ActualDepartureUniversalTime,
		|	TripNonLawsonCompaniesStops.MinimumRequiredDeliveryLocalTime,
		|	TripNonLawsonCompaniesStops.MinimumRequiredDeliveryUniversalTime,
		|	TripNonLawsonCompaniesStops.MaximumReadyToShipLocalTime,
		|	TripNonLawsonCompaniesStops.MaximumReadyToShipUniversalTime,
		|	TripNonLawsonCompaniesStops.OnTime,
		|	TripNonLawsonCompaniesStops.Loading,
		|	TripNonLawsonCompaniesStops.DeliteLoading,
		|	TripNonLawsonCompaniesStops.Mileage,
		|	TripNonLawsonCompaniesStops.Manually
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Stops КАК TripNonLawsonCompaniesStops
		|ГДЕ
		|	TripNonLawsonCompaniesStops.Ссылка = &Ссылка");
		
		
		СтруктураТекстов.Вставить("СтарыеДанныеCosts",
		"ВЫБРАТЬ
		|	TripNonLawsonCompaniesCosts.НомерСтроки,
		|	TripNonLawsonCompaniesCosts.CostType,
		|	TripNonLawsonCompaniesCosts.Description,
		|	TripNonLawsonCompaniesCosts.Sum
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Costs КАК TripNonLawsonCompaniesCosts
		|ГДЕ
		|	TripNonLawsonCompaniesCosts.Ссылка = &Ссылка");
		
		СтруктураТекстов.Вставить("СтарыеДанныеBills",
		"ВЫБРАТЬ
		|	TripNonLawsonCompaniesBills.НомерСтроки,
		|	TripNonLawsonCompaniesBills.Bill
		|ИЗ
		|	Документ.TripNonLawsonCompanies.Bills КАК TripNonLawsonCompaniesBills
		|ГДЕ
		|	TripNonLawsonCompaniesBills.Ссылка = &Ссылка");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеParcels") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхParcels = СтруктураРезультатов.СтарыеДанныеParcels.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхStops", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеStops") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхStops = СтруктураРезультатов.СтарыеДанныеStops.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхCosts", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеCosts") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхCosts = СтруктураРезультатов.СтарыеДанныеCosts.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыxДанныхBills", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеBills") Тогда
		ДополнительныеСвойства.ТаблицаСтарыxДанныхBills = СтруктураРезультатов.СтарыеДанныеBills.Выгрузить();
	КонецЕсли;
	
КонецПроцедуры
// } RGS ASeryakov 02.03.18 S-I-0004756

// { RGS ASeryakov 02.03.18 S-I-0005597
Функция ПолучитьServiceProvidersDHL()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ServiceProviders.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ServiceProviders КАК ServiceProviders
		|ГДЕ
		|	ServiceProviders.Код В (""RSGD052"", ""GLOD033-KZ1"")";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		ServiceProviders = Новый Массив;
	Иначе
		ServiceProviders = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ServiceProviders;
	
КонецФункции // ПолучитьServiceProviders()

// { RGS AFokin 10.10.2018 23:59:59 - S-I-0006147
Процедура СформироватьЗаписьПоРегиструГрафикиУведомленийTransportRequest(РежимЗаписи, ТаблицаПарселей)
	
	Если ЭтоНовый() И Parcels.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Parcels.TransportRequest TR
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Ссылка В (&МассивПарселей)";
		
		Запрос.УстановитьПараметр("МассивПарселей", Parcels.ВыгрузитьКолонку("Parcel"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ГрафикиУведомленийTransportRequest.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.TransportRequest.Установить(Выборка.TR);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() Тогда
					Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
						ЗаписьНабора.ТрипСоздан = Истина;
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	ТаблицаПарселей = Новый ТаблицаЗначений;
	ТаблицаПарселей.Колонки.Добавить("Parcel", Новый ОписаниеТипов("СправочникСсылка.Parcels")); 
	ТаблицаПарселей = Parcels.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПарселей.Parcel КАК Parcel
	|ПОМЕСТИТЬ Parcels 
	|ИЗ
	|	&ТаблицаПарселей КАК ТаблицаПарселей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Parcels.Parcel.TransportRequest НоваяTR
	|ПОМЕСТИТЬ TransportRequestsИзДокумента 
	|ИЗ
	|	Parcels КАК Parcels
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TripNonLawsonCompaniesParcels.Parcel.TransportRequest СтараяTR
	|ПОМЕСТИТЬ TransportRequestsИзБазы 
	|ИЗ
	|	Документ.TripNonLawsonCompanies.Parcels КАК TripNonLawsonCompaniesParcels
	|ГДЕ
	|	TripNonLawsonCompaniesParcels.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////

	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	TransportRequestsИзДокумента.НоваяTR КАК НоваяTR,
	|	TransportRequestsИзБазы.СтараяTR КАК СтараяTR
	|ИЗ
	|	TransportRequestsИзДокумента КАК TransportRequestsИзДокумента
	|		ПОЛНОЕ СОЕДИНЕНИЕ TransportRequestsИзБазы КАК TransportRequestsИзБазы
	|		ПО TransportRequestsИзДокумента.НоваяTR = TransportRequestsИзБазы.СтараяTR
	|ГДЕ
	|	(TransportRequestsИзДокумента.НоваяTR ЕСТЬ NULL
	|			ИЛИ TransportRequestsИзБазы.СтараяTR ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаПарселей", ТаблицаПарселей);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СтараяTR) Тогда
				НаборЗаписей = РегистрыСведений.ГрафикиУведомленийTransportRequest.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.TransportRequest.Установить(Выборка.СтараяTR);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() Тогда
					Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
						ЗаписьНабора.ТрипСоздан = Ложь;
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЕсли;		
			ИначеЕсли ЗначениеЗаполнено(Выборка.НоваяTR) Тогда
				НаборЗаписей = РегистрыСведений.ГрафикиУведомленийTransportRequest.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.TransportRequest.Установить(Выборка.НоваяTR);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() Тогда
					Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
						ЗаписьНабора.ТрипСоздан = Истина;
					КонецЦикла;
					НаборЗаписей.Записать();
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры		

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ TypeOfTransport = Перечисления.TypesOfTransport.CallOut Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ReasonForRateSelection"));
	КонецЕсли;
	
КонецПроцедуры
// } RGS AFokin 10.10.2018 23:59:59 - S-I-0006147


СамаяРанняяДата = '20150101';
