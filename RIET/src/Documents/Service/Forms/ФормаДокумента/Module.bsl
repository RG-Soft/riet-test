
////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьИНастроитьAgentInvoices();
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	НастроитьИЗаполнитьРеквизитыDocumentBase(Объект.DocumentBase);
	
	УстановитьВидимостьПоУслуге();
	
	ЗаполнитьИНастроитьServicesCostsAllocation();	
	
	УстановитьТекущийЭлемент();
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.ServiceОткрытие, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийЭлемент()
	
	Если НЕ ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		ТекущийЭлемент = Элементы.DocumentBase;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Agent) Тогда
		ТекущийЭлемент = Элементы.Agent;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.AgentNo) Тогда
		ТекущийЭлемент = Элементы.AgentNo;
	Иначе
		ТекущийЭлемент = Элементы.Service;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИНастроитьServicesCostsAllocation()
	
	ServicesCostsAllocation = Документы.ServicesCostsAllocation.НайтиПоService(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ServicesCostsAllocation) Тогда
		Элементы.ServicesCostsAllocation.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИНастроитьAgentInvoices()
	
	СписокAgentInvoices.Параметры.УстановитьЗначениеПараметра("Service", 
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	   		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	//КонецЕсли;
	
	РГСофт.ЗаполнитьModification(ТекущийОбъект);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.ServiceИнтерактивноеПроведение, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененДокументService", Объект.DocumentBase);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// DOCUMENT BASE

&НаКлиенте
Процедура DocumentBaseПриИзменении(Элемент)
	
	DocumentBaseПриИзмененииНаСервере();
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Процедура DocumentBaseПриИзмененииНаСервере()
	
	НастроитьИЗаполнитьРеквизитыDocumentBase(Объект.DocumentBase);
	
	ServiceAllocationArea = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "AllocationArea");
	
	// Попробуем автоматически заполнить Customs file
	Если ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		
		Если ЗначениеЗаполнено(ServiceAllocationArea) Тогда
			
			// ВОТ ЭТИ СТРОЧКИ ЯВНО ДУБЛИРУЮТСЯ
			СтарыйCustomsFile = Объект.CCD;
			Объект.CCD = ПолучитьCustomsFile(Объект.DocumentBase, ServiceAllocationArea, Объект.CCD);	
			Если СтарыйCustomsFile <> Объект.CCD 
				И ЗначениеЗаполнено(Объект.CCD) Тогда
				Объект.DaysInCustoms = ПолучитьDaysInCustoms(Объект.DocumentBase, Объект.CCD);
			КонецЕсли; 
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.AgentNo) 
			И ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.Поставка") Тогда
			Объект.AgentNo = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.DocumentBase, "CCAJobReference"); 
		КонецЕсли; 
		
	КонецЕсли; 	
	 	
	ПерезаполнитьЦенуИОписаниеУслуги();
	
	Элементы.ГруппаCustomsFile.Видимость =
		ServiceAllocationArea = Перечисления.AllocationAreas.CCD
		И (ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.Поставка") 
		   ИЛИ ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.ExportShipment")
		   ИЛИ ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.TemporaryImpExpTransactions"));
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Процедура НастроитьИЗаполнитьРеквизитыDocumentBase(DocumentBase)
	
	Элементы.ShipmentOOC.Видимость = Ложь;
	Элементы.DocumentBaseCCA.Видимость = Ложь;
	Элементы.Port.Видимость = Ложь;
	Элементы.ShipmentATA.Видимость = Ложь;
	// МОЖЕТ БЫТЬ СКРЫВАТЬ DaysInCustoms
	
	Если НЕ ЗначениеЗаполнено(DocumentBase) Тогда
		Возврат;	
	КонецЕсли;
	
	ТипЗнчDocumentBase = ТипЗнч(DocumentBase);
	Если ТипЗнчDocumentBase = Тип("ДокументСсылка.Поставка") Тогда
		
		РеквизитыImportShipment = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(DocumentBase, "CCA, OOC, ATA, ActualPOA, InCustoms");
		
		DocumentBaseCCA = РеквизитыImportShipment.CCA;
		Элементы.DocumentBaseCCA.Видимость = Истина;
		
		ShipmentOOC = РеквизитыImportShipment.OOC;
		Элементы.ShipmentOOC.Видимость = Истина;	
		
		Port = РеквизитыImportShipment.ActualPOA;
		Элементы.Port.Видимость = Истина;
		
		ShipmentATA = РеквизитыImportShipment.ATA;
		Элементы.ShipmentATA.Видимость = Истина;
		
		ДатаПолученияЦены = РеквизитыImportShipment.InCustoms;
	
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.ExportShipment") Тогда
		
		РеквизитыExportShipment = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(DocumentBase, "CCA, POD, SubmittedToCustoms");
		
		DocumentBaseCCA = РеквизитыExportShipment.CCA;
		Элементы.DocumentBaseCCA.Видимость = Истина;
		
		Port = РеквизитыExportShipment.POD;		
		Элементы.Port.Видимость = Истина;
		
		ДатаПолученияЦены = РеквизитыExportShipment.SubmittedToCustoms;
	
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.CustomsFilesLight") Тогда
		
		РеквизитыCustomsFileLight = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(DocumentBase, "CCA, Дата, Shipment");
		
		Если ЗначениеЗаполнено(РеквизитыCustomsFileLight.Shipment) Тогда
			НастроитьИЗаполнитьРеквизитыDocumentBase(РеквизитыCustomsFileLight.Shipment);
			Возврат;
		КонецЕсли;
		
		DocumentBaseCCACCA = РеквизитыCustomsFileLight.CCA;
		Элементы.DocumentBaseCCA.Видимость = Истина;
		
		ДатаПолученияЦены = РеквизитыCustomsFileLight.Дата;
		
	ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		ДатаПолученияЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(DocumentBase, "Дата");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// SERVICE

&НаКлиенте
Процедура ServiceНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ МожноВыбратьService() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзService");
	СтруктураНастройки.Вставить("DocumentBase", Объект.DocumentBase);
	СтруктураНастройки.Вставить("Port", Port);
	СтруктураНастройки.Вставить("Agent", Объект.Agent);
	СтруктураНастройки.Вставить("ДатаПолученияЦены", ДатаПолученияЦены);
	
	СтруктураПараметров = Новый Структура("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Справочник.Services.ФормаВыбора", СтруктураПараметров, Элемент, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция МожноВыбратьService()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Document base"" is empty!",
			, "DocumentBase", "Объект", Отказ);
			
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Port) Тогда
			
			Если ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.Поставка") Тогда
	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"""Actual POA"" in """ + Объект.DocumentBase + """ is empty!",
					Объект.DocumentBase, "ActualPOA", "Объект", Отказ);
					
			ИначеЕсли ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.ExportShipment") Тогда
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"""POD"" in """ + Объект.DocumentBase + """ is empty!",
					Объект.DocumentBase, "POD", "Объект", Отказ);
					
			КонецЕсли;
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаПолученияЦены) Тогда
			
			Если ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.Поставка") Тогда
				
				ТекстОшибки = """In customs"" in """ + Объект.DocumentBase + """ is empty!";
				
			ИначеЕсли ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.ExportShipment") Тогда
				
				ТекстОшибки = """Submitted to customs"" in """ + Объект.DocumentBase + """ is empty!";
				
			ИначеЕсли ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.CustomsFilesLight")
				  ИЛИ ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
				
				ТекстОшибки = """Date"" in """ + Объект.DocumentBase + """ is empty!";
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, "DocumentBase", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Agent) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Agent"" is empty!",
			, "Agent", "Объект", Отказ);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ServiceАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	ДанныеВыбора = ПолучитьСписокПодходящихServices(Текст);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ServiceОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьСписокПодходящихServices(Текст);	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПодходящихServices(Текст)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если НЕ МожноВыбратьService() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если СокрЛП(Текст) <> ПредыдущийТекстService Тогда
			
		МассивПодходящихServices = CustomsСервер.ПолучитьМассивServicesДляВыбораИзДокументаService(Port, Объект.Agent, ДатаПолученияЦены, Текст);
		Элементы.Service.СписокВыбора.ЗагрузитьЗначения(МассивПодходящихServices);
		ПредыдущийТекстService = СокрЛП(Текст);
	
	КонецЕсли;
	
	Возврат Элементы.Service.СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ServiceПриИзменении(Элемент)
	
	ПриИзмененииServiceНаСервере();
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Процедура ПриИзмененииServiceНаСервере()
	
	УстановитьВидимостьПоУслуге();
	
	ServiceAllocationArea = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "AllocationArea");
	
	// ВОТ ЭТИ СТРОЧКИ ЯВНО ДУБЛИРУЮТСЯ
	СтарыйCustomsFile = Объект.CCD;
	Объект.CCD = ПолучитьCustomsFile(Объект.DocumentBase, ServiceAllocationArea, Объект.CCD);
	Если СтарыйCustomsFile <> Объект.CCD
		И ЗначениеЗаполнено(Объект.CCD) Тогда
		Объект.DaysInCustoms = ПолучитьDaysInCustoms(Объект.DocumentBase, Объект.CCD);
	КонецЕсли;
	
	ПерезаполнитьЦенуИОписаниеУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦенуИОписаниеУслуги()
	
	СтруктураЦеныИОписанияУслуги = ПолучитьСтруктуруЦеныИОписанияУслуги();
		
	Объект.Description = СтруктураЦеныИОписанияУслуги.Description;
	
	ServiceSumCalculationMethod = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "SumCalculationMethod");
	Если ServiceSumCalculationMethod = Перечисления.SumCalculationMethods.StandardTariff Тогда
		
		Объект.Price = СтруктураЦеныИОписанияУслуги.Price;
		Объект.Sum = Объект.Qty * Объект.Price;
		
	ИначеЕсли ServiceSumCalculationMethod = Перечисления.SumCalculationMethods.CostPlus Тогда
		
		Объект.Percent = СтруктураЦеныИОписанияУслуги.Percent;
		Объект.Markup = Объект.Base * Объект.Percent / 100;
		Объект.Sum = Объект.Base + Объект.Markup;
		
	КонецЕсли;
	
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЦеныИОписанияУслуги()
	
	СтруктураЦеныИОписанияУслуги = Новый Структура;
	СтруктураЦеныИОписанияУслуги.Вставить("Description", "");
	СтруктураЦеныИОписанияУслуги.Вставить("Price", 0);
	СтруктураЦеныИОписанияУслуги.Вставить("Percent", 0);
	
	SumCalculationMethods = Перечисления.SumCalculationMethods;
	
	Если НЕ ЗначениеЗаполнено(Объект.Service) Тогда
		Возврат СтруктураЦеныИОписанияУслуги;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to get price of """ + Объект.Service + """,
			|because ""Document base"" is empty!",
			, "DocumentBase", "Объект");
		Возврат СтруктураЦеныИОписанияУслуги;
		
	Иначе
		
		ТипЗнчDocumentBase = ТипЗнч(Объект.DocumentBase);
		Если ТипЗнчDocumentBase = Тип("ДокументСсылка.Поставка") Тогда
			
			ДатаПолученияЦены = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.DocumentBase, "InCustoms");
			Если НЕ ЗначениеЗаполнено(ДатаПолученияЦены) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to get pice of """ + Объект.Service + """,
					|because ""In customs"" in """ + Объект.DocumentBase + """ is empty!",
					, "DocumentBase", "Объект");
				Возврат СтруктураЦеныИОписанияУслуги;
			КонецЕсли;
			
		ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.ExportShipment") Тогда
			
			ДатаПолученияЦены = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.DocumentBase, "SubmittedToCustoms");
			Если НЕ ЗначениеЗаполнено(ДатаПолученияЦены) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to get price of """ + СокрЛП(Объект.Service) + """,
					|because ""SubmittedToCustoms"" in """ + Объект.DocumentBase + """ is empty!",
					, "DocumentBase", "Объект");
				Возврат СтруктураЦеныИОписанияУслуги;
			КонецЕсли;	
			
		ИначеЕсли ТипЗнчDocumentBase = Тип("ДокументСсылка.CustomsFilesLight")
			  ИЛИ ТипЗнчDocumentBase = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			
			ДатаПолученияЦены = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.DocumentBase, "Дата");
			Если НЕ ЗначениеЗаполнено(ДатаПолученияЦены) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to get price of """ + Объект.Service + """,
					|because ""Date"" in """ + Объект.DocumentBase + """ is empty!",
					, "DocumentBase", "Объект");
				Возврат СтруктураЦеныИОписанияУслуги;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Service", Объект.Service);
	Запрос.УстановитьПараметр("ДатаПолученияЦены", ДатаПолученияЦены);
	Запрос.УстановитьПараметр("Agent", Объект.Agent);
	ServiceSumCalculationMethod = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "SumCalculationMethod");
	Если ServiceSumCalculationMethod = SumCalculationMethods.StandardTariff Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Price,
			|	Таблица.Description,
			|	ВЫБОР
			|		КОГДА Таблица.StartDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Таблица.Ссылка.Дата
			|		ИНАЧЕ Таблица.StartDate
			|	КОНЕЦ КАК StartDate
			|ИЗ
			|	Документ.PriceListOfServices.StandardTariffs КАК Таблица
			|ГДЕ
			|	Таблица.Service = &Service
			|	И Таблица.StartDate <= &ДатаПолученияЦены
			|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
			|	И Таблица.Ссылка.Проведен
			|	И Таблица.Ссылка.Agent = &Agent
			|	И Таблица.Ссылка.Дата <= &ДатаПолученияЦены
			|	И (Таблица.Ссылка.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.Ссылка.ExpireDate >= &ДатаПолученияЦены)
			|
			|УПОРЯДОЧИТЬ ПО
			|	StartDate УБЫВ";
			
	ИначеЕсли ServiceSumCalculationMethod = SumCalculationMethods.CostPlus Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Percent,
			|	Таблица.Description,
			|	ВЫБОР
			|		КОГДА Таблица.StartDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Таблица.Ссылка.Дата
			|		ИНАЧЕ Таблица.StartDate
			|	КОНЕЦ КАК StartDate
			|ИЗ
			|	Документ.PriceListOfServices.CostPlus КАК Таблица
			|ГДЕ
			|	Таблица.Service = &Service
			|	И Таблица.StartDate <= &ДатаПолученияЦены
			|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
			|	И Таблица.Ссылка.Проведен
			|	И Таблица.Ссылка.Agent = &Agent
			|	И Таблица.Ссылка.Дата <= &ДатаПолученияЦены
			|	И (Таблица.Ссылка.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.Ссылка.ExpireDate >= &ДатаПолученияЦены)
			|
			|УПОРЯДОЧИТЬ ПО
			|	StartDate УБЫВ";
			
	ИначеЕсли ServiceSumCalculationMethod = SumCalculationMethods.Quoted Тогда 
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Description,
			|	ВЫБОР
			|		КОГДА Таблица.StartDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Таблица.Ссылка.Дата
			|		ИНАЧЕ Таблица.StartDate
			|	КОНЕЦ КАК StartDate
			|ИЗ
			|	Документ.PriceListOfServices.Quoted КАК Таблица
			|ГДЕ
			|	Таблица.Service = &Service
			|	И Таблица.StartDate <= &ДатаПолученияЦены
			|	И (Таблица.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.ExpireDate >= &ДатаПолученияЦены)
			|	И Таблица.Ссылка.Проведен
			|	И Таблица.Ссылка.Agent = &Agent
			|	И Таблица.Ссылка.Дата <= &ДатаПолученияЦены
			|	И (Таблица.Ссылка.ExpireDate = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ Таблица.Ссылка.ExpireDate >= &ДатаПолученияЦены)
			|
			|УПОРЯДОЧИТЬ ПО
			|	StartDate УБЫВ";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to determine the price and description of the ""Service " + СокрЛП(Объект.Service) + """, because there is no actual price list for " + Формат(ДатаПолученияЦены, "ДЛФ=D") + ")!");
		Возврат СтруктураЦеныИОписанияУслуги;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураЦеныИОписанияУслуги.Description = Выборка.Description;
	Если ServiceSumCalculationMethod = SumCalculationMethods.StandardTariff Тогда
		СтруктураЦеныИОписанияУслуги.Price = Выборка.Price;
	ИначеЕсли ServiceSumCalculationMethod = SumCalculationMethods.CostPlus Тогда
		СтруктураЦеныИОписанияУслуги.Percent = Выборка.Percent;
	КонецЕсли;
	
	Возврат СтруктураЦеныИОписанияУслуги;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоУслуге()
	
	Элементы.ГруппаCustomsFile.Видимость = Ложь;
	Элементы.ГруппаInvoiceLines.Видимость = Ложь;
	Элементы.Qty.Видимость = Ложь;
	Элементы.Price.Видимость = Ложь;
	Элементы.Base.Видимость = Ложь;
	Элементы.Percent.Видимость = Ложь;
	Элементы.Markup.Видимость = Ложь;
	Элементы.Sum.Видимость = Ложь;
	Элементы.Discount.Видимость = Ложь;
	Элементы.GrandTotal.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Service) Тогда
		
		Элементы.Sum.Видимость = Истина;
		Элементы.Discount.Видимость = Истина;
		Элементы.GrandTotal.Видимость = Истина;
		
		ServiceAllocationArea = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "AllocationArea");
		Если ServiceAllocationArea = Перечисления.AllocationAreas.CCD Тогда
			
			ТипЗнчDocumentBase = ТипЗнч(Объект.DocumentBase);
			Элементы.ГруппаCustomsFile.Видимость = ТипЗнчDocumentBase = Тип("ДокументСсылка.Поставка") 
											ИЛИ ТипЗнчDocumentBase = Тип("ДокументСсылка.ExportShipment")
											ИЛИ ТипЗнчDocumentBase = Тип("ДокументСсылка.TemporaryImpExpTransactions");
		ИначеЕсли ServiceAllocationArea = Перечисления.AllocationAreas.InvoiceLines Тогда
			Элементы.ГруппаInvoiceLines.Видимость = Истина;
		КонецЕсли; 
		
		ServiceSumCalculationMethod = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Service, "SumCalculationMethod");
		Если ServiceSumCalculationMethod = Перечисления.SumCalculationMethods.StandardTariff Тогда
			Элементы.Qty.Видимость = Истина;
			Элементы.Price.Видимость = Истина;
		ИначеЕсли ServiceSumCalculationMethod = Перечисления.SumCalculationMethods.CostPlus Тогда
			Элементы.Base.Видимость = Истина;
			Элементы.Percent.Видимость = Истина;
			Элементы.Markup.Видимость = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////
// CUSTOMS FILE

&НаКлиенте
Процедура CustomsFileНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Document base' is empty!",
			, "DocumentBase", "Объект", Отказ);
			
	Иначе
		
		Если ТипЗнч(Объект.DocumentBase) = Тип("ДокументСсылка.CustomsFilesLight") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Customs file can not be used with Customs file (light)!",
				, "CCD", "Объект", Отказ);
			
		КонецЕсли;
			
	КонецЕсли; 
	
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура CustomsFileПриИзменении(Элемент)
	
	ПриИзмененииCustomsFile();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииCustomsFile()
	
	// Перезаполним Days in customs
	Если ЗначениеЗаполнено(Объект.CCD)
		И ЗначениеЗаполнено(Объект.DocumentBase) Тогда
		
		ТипЗнчDocumentBase = ТипЗнч(Объект.DocumentBase);
		Если ТипЗнчDocumentBase = Тип("ДокументСсылка.Поставка")
			ИЛИ ТипЗнчDocumentBase = Тип("ДокументСсылка.ExportShipment") Тогда
			Объект.DaysInCustoms = ПолучитьDaysInCustoms(Объект.DocumentBase, Объект.CCD);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьCustomsFile(DocumentBase, AllocationArea, Знач CustomsFile)
	
	Если НЕ ЗначениеЗаполнено(DocumentBase) Тогда
		Возврат CustomsFile;
	КонецЕсли;
	
	Если ТипЗнч(DocumentBase) = Тип("ДокументСсылка.CustomsFilesLight") Тогда
		Возврат CustomsFile;
	КонецЕсли;
	
	Если AllocationArea <> Перечисления.AllocationAreas.CCD Тогда
		Возврат CustomsFile;
	КонецЕсли;
				
	МассивПодоходящихCustomsFiles = CustomsСервер.ПолучитьShipmentCCDs(DocumentBase);
	Если ЗначениеЗаполнено(CustomsFile) Тогда
		Если МассивПодоходящихCustomsFiles.Найти(CustomsFile) = Неопределено Тогда
			CustomsFile = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(CustomsFile)
		И МассивПодоходящихCustomsFiles.Количество() = 1 Тогда
		Возврат МассивПодоходящихCustomsFiles[0];
	КонецЕсли; 
	
	Возврат CustomsFile;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьDaysInCustoms(Shipment, CustomsFile)

	Если Не ЗначениеЗаполнено(Shipment) ИЛИ НЕ ЗначениеЗаполнено(CustomsFile) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЗнчShipment = ТипЗнч(Shipment);
	Если ТипЗнчShipment <> Тип("ДокументСсылка.Поставка") И ТипЗнчShipment <> Тип("ДокументСсылка.ExportShipment") Тогда
		Возврат 0;
	КонецЕсли;
	
	// { RGS ASeryakov 30.05.18 S-I-0005241
	//CustomsFileReleaseDate = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(CustomsFile, "ДатаВыпуска");
	Если ТипЗнч(CustomsFile) = Тип("ДокументСсылка.CustomsFilesLight") Тогда
		
		CustomsFileReleaseDate = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(CustomsFile, "ReleaseDate");
	Иначе
		CustomsFileReleaseDate = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(CustomsFile, "ДатаВыпуска");
	КонецЕсли;
	// } RGS ASeryakov  30.05.18 S-I-0005241
	
	Если ТипЗнчShipment = Тип("ДокументСсылка.Поставка") Тогда
		
		ShipmentStartDate = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Shipment, "ATA");
		
	ИначеЕсли ТипЗнчShipment = Тип("ДокументСсылка.ExportShipment") Тогда
		
		ShipmentStartDate = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Shipment, "SubmittedToCustoms");
		
	КонецЕсли;
		
	Возврат (CustomsFileReleaseDate - ShipmentStartDate) / (60 * 60 * 24);
	
КонецФункции


////////////////////////////////////////////////////////////////////////
// NUMBERS

&НаКлиенте
Процедура QtyПриИзменении(Элемент)

	Объект.Sum = Объект.Qty * Объект.Price;
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура PriceПриИзменении(Элемент)
	
	Объект.Sum = Объект.Qty * Объект.Price;
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура BaseПриИзменении(Элемент)
	
	Объект.Markup = Объект.Base * Объект.Percent / 100;
	Объект.Sum = Объект.Base + Объект.Markup;
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура PercentПриИзменении(Элемент)
	
	Объект.Markup = Объект.Base * Объект.Percent / 100;
	Объект.Sum = Объект.Base + Объект.Markup;
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура MarkupПриИзменении(Элемент)
	
	Объект.Sum = Объект.Base + Объект.Markup;
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура SumПриИзменении(Элемент)
		
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры

&НаКлиенте
Процедура DiscountПриИзменении(Элемент)
		
	Объект.GrandTotal = Объект.Sum - Объект.Discount;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// INVOICE LINES

&НаКлиенте
Процедура InvoiceLinesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.InvoiceLine) Тогда
		ПоказатьЗначение(,ТекущиеДанные.InvoiceLine);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура InvoiceLinesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзService");
	СтруктураНастройки.Вставить("DocumentBase", Объект.DocumentBase);
	СтруктураНастройки.Вставить("МассивТекущихInvoiceLines", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.InvoiceLines, "InvoiceLine"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура InvoiceLinesОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() 
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.СтрокиИнвойса") Тогда
		
		Для Каждого InvoiceLine Из ВыбранноеЗначение Цикл
			НоваяСтрокаИнвойса = Объект.InvoiceLines.Добавить();
			НоваяСтрокаИнвойса.InvoiceLine = InvoiceLine;
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DocumentBaseОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Поставка") ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ExportShipment") Тогда
		ЕстьCCD = ПроверимНаНаличиеCCD(ВыбранноеЗначение);
		Если Не ЕстьCCD Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Can't choose "+ ВыбранноеЗначение +" because there are no 'Customs Files'");
			ВыбранноеЗначение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверимНаНаличиеCCD(Shipment) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГТД.Ссылка КАК CCD
	|ИЗ
	|	Документ.ГТД КАК ГТД
	|ГДЕ
	|	ГТД.Shipment = &Shipment
	|	И НЕ ГТД.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CustomsFilesLight.Ссылка
	|ИЗ
	|	Документ.CustomsFilesLight КАК CustomsFilesLight
	|ГДЕ
	|	CustomsFilesLight.Shipment = &Shipment
	|	И НЕ CustomsFilesLight.ПометкаУдаления";
	Запрос.УстановитьПараметр("Shipment", Shipment);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции





