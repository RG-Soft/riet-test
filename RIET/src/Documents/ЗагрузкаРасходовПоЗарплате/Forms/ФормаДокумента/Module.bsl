
&НаКлиенте
Процедура ЗагрузитьВидыНачислений(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xls (*.xls)|*.xls|Файлы xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xlsx";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ПроизвестиЗагрузкуВидовНачисленийИзФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхИзФайла(ПолноеИмяФайла)
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microsoft Excel.");
		Возврат;
	КонецПопытки;

	Попытка
		Excel.WorkBooks.Open(ПолноеИмяФайла);
	Исключение
		Предупреждение("Excel не удалось открыть файл " + ПолноеИмяФайла);
		Возврат;
	КонецПопытки;
	
	Лист = Excel.Workbooks(1).WorkSheets(1);;
	КолВоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;
	КолВоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	
	индС = 4;	
	ЗаполнитьТаблицуНачислений();
	ЗаполнитьТаблицуAU();
	СтруктураКолонок = Новый Соответствие;
	Для индК = 1 По КолВоКолонок Цикл
		Ячейка = Лист.Cells(индС, индК);
		ЗначениеЯчейки = Ячейка.Value;
		Если ЗначениеЯчейки = "ПФР страховая (Insurance Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ПФР Социальный (Insurance Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ПФР Тяжелые и прочие работы (Insurance Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ПФР накопительная (Accumulating Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ФСС (Social Insurance Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ФФОМС (Federal Medical Insurance Fund)" Тогда
			СтруктураКолонок.Вставить(индК, "СтраховыеВзносы");
		ИначеЕсли ЗначениеЯчейки = "ФСС НС (Social Insurance Fund Tr.)" Тогда
			СтруктураКолонок.Вставить(индК, "ВзносыФСС");
		Иначе			
			ВидНачислений = ВидыНачислений.НайтиСтроки(Новый Структура("ВидНачисления",ЗначениеЯчейки));
			Если ЗначениеЗаполнено(ВидНачислений) Тогда 
				Если ВидНачислений[0].ТипНачисления = "Принимаемые" Тогда
					СтруктураКолонок.Вставить(индК, "Расходы");
				ИначеЕсли ВидНачислений[0].ТипНачисления = "Прочие расходы" Тогда
					СтруктураКолонок.Вставить(индК, "ПрочиеРасходы");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	индС = 5;	
	Для индК = 1 По КолВоКолонок Цикл
		Ячейка = Лист.Cells(индС, индК);
		ЗначениеЯчейки = Ячейка.Value;
		Если ЗначениеЯчейки = "Организация" Тогда
			СтруктураКолонок.Вставить(индК, "Организация");
		ИначеЕсли ЗначениеЯчейки = "Код персонала (Personal code)" Тогда
			СтруктураКолонок.Вставить(индК, "КодПерсонала");
		ИначеЕсли ЗначениеЯчейки = "Accoutning unit" Тогда
			СтруктураКолонок.Вставить(индК, "AU");
		ИначеЕсли ЗначениеЯчейки = "Lawson account" Тогда
			СтруктураКолонок.Вставить(индК, "AccountLawson");
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("КодПерсонала");
	ТаблицаДанных.Колонки.Добавить("AU");
	ТаблицаДанных.Колонки.Добавить("AccountLawson");
	ТаблицаДанных.Колонки.Добавить("Расходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДанных.Колонки.Добавить("ПрочиеРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДанных.Колонки.Добавить("СтраховыеВзносы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДанных.Колонки.Добавить("ВзносыФСС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для i = 6 По КолВоСтрок Цикл
		Если  Лист.Cells(i, 3) <> "" Тогда
			СтрокаТД = ТаблицаДанных.Добавить();
			Для Каждого Элемент Из СтруктураКолонок Цикл
				Если Элемент.Значение = "Расходы" ИЛИ Элемент.Значение = "ПрочиеРасходы" ИЛИ Элемент.Значение = "СтраховыеВзносы" ИЛИ Элемент.Значение = "ВзносыФСС" Тогда
					ЗначениеЯчейки = Лист.Cells(i, Элемент.Ключ).Value;
					Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
						СтрокаТД[Элемент.Значение] = СтрокаТД[Элемент.Значение] + ЗначениеЯчейки;
					КонецЕсли;
				ИначеЕсли Элемент.Значение = "AU" Тогда
					ЗначениеЯчейки = Лист.Cells(i, Элемент.Ключ).Value;
					СтрокаТД[Элемент.Значение] = ЗначениеЯчейки;	
					АУ = СписокAU.НайтиСтроки(Новый Структура("Код",РегламентированнаяОтчетность.ДополнитьСтроку(СтрЗаменить(ЗначениеЯчейки,Символы.НПП,""),7,"0")));
					Если АУ.Количество() = 0 Тогда
						Сообщить("В строке " + i + " некорректный AU");
					КонецЕсли;
				Иначе
					СтрокаТД[Элемент.Значение] = Лист.Cells(i, Элемент.Ключ).Value;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Состояние("Строка " + i + " из " + КолВоСтрок);
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("Организация,КодПерсонала,AU,AccountLawson","Расходы,ПрочиеРасходы,СтраховыеВзносы,ВзносыФСС");
	// { RGS MYurkevich 19.02.2015 14:11:03 - удаление колонки месяц
	//ТаблицаДанных.Колонки.Добавить("Месяц");
	// } RGS MYurkevich 19.02.2015 14:12:11 - удаление колонки месяц
		
	ЗаполнитьДокументДаннымиИзТаблицы(ТаблицаДанных);
	
	Excel.DisplayAlerts = 0; // отключаем сообщения, чтобы процесс не повис, если вдруг эксель решит спросить про сохранение
	Excel.Workbooks.Close();
	Excel.Application.Quit();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗагрузкуВидовНачисленийИзФайла(ПолноеИмяФайла)
	
	ТЗ = ПолучитьТЗВидовНачисленийИзФайла(ПолноеИмяФайла);
			
	ТабСНовымиВидамиНачислений = ПолучитьТаблицуДляЗаполненияТиповНачислений(ТЗ);
	
	Если ТабСНовымиВидамиНачислений.Количество() Тогда
		ПараметрыФормы = Новый Структура("ТабЗнач", ТабСНовымиВидамиНачислений);
		ОткрытьФорму("Документ.ЗагрузкаРасходовПоЗарплате.Форма.ФормаЗаполнения",ПараметрыФормы);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений()
	
	ЗначениеВРеквизитФормы(ПолучитьТаблицуВидовНачислений(),"ВидыНачислений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуAU()
	
	//-> RG-Soft VIvanov 2015/02/18
	//ЗначениеВРеквизитФормы(ПолучитьТаблицуAU(),"СписокAU");
	ЗначениеВРеквизитФормы(ПолучитьТаблицуAU(Объект.Дата),"СписокAU");
	//<- RG-Soft VIvanov
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуВидовНачислений()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	// { RGS MYurkevich 14.04.2015 15:24:29 - 
	                    //|	ВидыНачислений.Ссылка КАК ВидНачисления,
						 //|	ВидыНачислений.Наименование КАК Наименование,
						 |	ВидыНачислений.Наименование КАК ВидНачисления,
	// } RGS MYurkevich 14.04.2015 15:24:32 - 
		                  |	ВидыНачислений.ТипНачисления
	                      |ИЗ
	                      |	Справочник.ВидыНачислений КАК ВидыНачислений");
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуAU(Дата)
	
	//-> RG-Soft VIvanov 2015/02/18
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	КостЦентры.Код
	//                      |ИЗ
	//                      |	Справочник.КостЦентры КАК КостЦентры");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СегментыКостЦентровСрезПоследних.Код
	                      |ИЗ
	                      |	РегистрСведений.СегментыКостЦентров.СрезПоследних(&Дата, ) КАК СегментыКостЦентровСрезПоследних");
	Запрос.УстановитьПараметр("Дата", Дата);
	//<- RG-Soft VIvanov
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
 Функция ПолучитьТЗВидовНачисленийИзФайла(ПолноеИмяФайла)
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microsoft Excel.");
		Возврат Неопределено;
	КонецПопытки;

	Попытка
		Excel.WorkBooks.Open(ПолноеИмяФайла);
	Исключение
		Предупреждение("Excel не удалось открыть файл " + ПолноеИмяФайла);
		Возврат Неопределено;
	КонецПопытки;
	
	Лист = Excel.Workbooks(1).WorkSheets(1);;
	КолВоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;
	
	тзДанные = Новый ТаблицаЗначений;
	Для индС = 1 По КолВоКолонок Цикл
		тзДанные.Колонки.Добавить();		
	КонецЦикла;         
	
	индС = 4;	
	Состояние("Читаю файл Excel... строка " + индС);
	текСтрокаТЗ = тзДанные.Добавить();
	Для индК = 1 По КолВоКолонок Цикл
		Ячейка = Лист.Cells(индС, индК);
		ЗначениеЯчейки = Ячейка.Value;
		текСтрокаТЗ[индК - 1] = ЗначениеЯчейки;
	КонецЦикла;
	
	Excel.Workbooks.Close();
	Excel.Application.Quit();
	
	Состояние("Обрабатываю...");
	//Получим заголовки таблицы и составим массив индексов колонок к удалению
	Если тзДанные.Количество() > 0 Тогда
		МассивИменКолонок = Новый Массив;
		СтрокаЗаголовков = тзДанные[0];
		ПроизвестиДобавление = Ложь;
		Для индК = 1 По КолВоКолонок Цикл
			ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]); 
			Если ЗаголовокКолонки = "Доходы в натуральной форме (Natural form incomes)" Тогда
				ПроизвестиДобавление = Ложь;
				Прервать;
			КонецЕсли;
			Если ПроизвестиДобавление Тогда
				МассивИменКолонок.Добавить(ЗаголовокКолонки);
			КонецЕсли; 
			Если ЗаголовокКолонки = "Всего начислено (Total Gross)" Тогда
				ПроизвестиДобавление = Истина;
			КонецЕсли;
		КонецЦикла; 
		//Пока ИндК < КолВоКолонок Цикл
		//	ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]); 
		//	Если ЗаголовокКолонки = "Конечное сальдо (Closing Balance)" Тогда
		//		ПроизвестиДобавление = Ложь;
		//	КонецЕсли;
		//	Если ПроизвестиДобавление Тогда
		//		МассивИменКолонок.Добавить(ЗаголовокКолонки);
		//	КонецЕсли; 
		//	Если ЗаголовокКолонки = "Налоги (Tax)" Тогда
		//		ПроизвестиДобавление = Истина;
		//	КонецЕсли;
		//	ИндК = ИндК + 1;
		//КонецЦикла; 
		МассивИндексовКолонокКУдалению = Новый Массив;

		 Для индК = 1 По КолВоКолонок Цикл
			 ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]);
			 Если МассивИменКолонок.Найти(ЗаголовокКолонки) = Неопределено Тогда
				 МассивИндексовКолонокКУдалению.Добавить(индК-1);
			 КонецЕсли; 
		 КонецЦикла;
		 КоличествоЭлементовВМассивеКУдалению = МассивИндексовКолонокКУдалению.Количество();
		 Для i = 1 По КоличествоЭлементовВМассивеКУдалению Цикл
		     тзДанные.Колонки.Удалить(МассивИндексовКолонокКУдалению[КоличествоЭлементовВМассивеКУдалению-i]);
		 КонецЦикла; 
	 Иначе
		 Сообщить("Файл не содержит записей.");
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат тзДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДляЗаполненияТиповНачислений(ТЗ)
	
	Документ = РеквизитФормыВЗначение("Объект");
	ТабСНовымиВидамиНачислений = Документ.ВернутьВидыНачислений(ТЗ);
	
	Возврат ТабСНовымиВидамиНачислений;
	
	
	//ЗначениеВРеквизитФормы(Документ, "Объект");
	                                        
	//СтрокаЗаголовков = ТЗ[0];
	//КолВоКолонок = ТЗ.Колонки.Количество();
	//ТабЗаголовков = Новый ТаблицаЗначений;
	//ТабЗаголовков.Колонки.Добавить("Заголовок", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	//Для индК = 1 По КолВоКолонок Цикл
	//	ЗаголовокКолонки = СтрокаЗаголовков[индК-1]; 
	//	НоваяСтрока = ТабЗаголовков.Добавить();
	//	НоваяСтрока.Заголовок = ЗаголовокКолонки;
	//	Сообщить(НоваяСтрока.Заголовок);
	//КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ                                           
	//	|	ТабЗаголовков.Заголовок 
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	&ТабЗаголовков КАК ТабЗаголовков
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.Заголовок КАК ВидРасчета
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНачислений КАК ВидыНачислений
	//	|		ПО ВТ.Заголовок = ВидыНачислений.Наименование
	//	|ГДЕ
	//	|	ВидыНачислений.Ссылка ЕСТЬ NULL ";
	//	
	//Запрос.УстановитьПараметр("ТабЗаголовков", ТабЗаголовков);	

	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Сообщить(Выборка.ВидРасчета);
	//КонецЦикла; 
	////Объект.ВидыНачислений.Загрузить(Результат.Выгрузить());
	
КонецФункции
                                                           
&НаКлиенте
Процедура ЗагрузитьРасходы(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xls (*.xls)|*.xls|Файлы xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xlsx";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ВыполнитьЗагрузкуДанныхИзФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗагрузкуИзФайла(ПолноеИмяФайла)
	
	ТЗ = ПолучитьТЗИзФайла(ПолноеИмяФайла);
			
	ЗаполнитьДокументДаннымиИзТаблицы(ТЗ);

КонецПроцедуры

&НаКлиенте
 Функция ПолучитьТЗИзФайла(ПолноеИмяФайла)
	
		ТЗ_Эксель = SalesBook.ЗагрузитьТаблицуИзExcel(ПолноеИмяФайла, 	"SELECT 	
		|		Company AS Организация,
		|		Code AS КодПерсонала, 
		|		SUM(Costs) AS Расходы,
		|		SUM(OtherCosts) AS ПрочиеРасходы,
		|		SUM(ESN) AS СтраховыеВзносы,
		|		SUM(FSS) AS ВзносыФСС,
		|		AU,
		// { RGS MYurkevich 19.02.2015 14:11:03 - удаление колонки месяц
		//|		Month AS  Месяц,
		// } RGS MYurkevich 19.02.2015 14:12:11 - удаление колонки месяц
		|		Account AS AccountLawson		
		|
		|FROM [list$]
		|
		|GROUP BY
		|		Company, 
		|		Code,
		|		Account,
		|		AU,
		|		Month");
		
		Возврат ТЗ_Эксель;

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументДаннымиИзТаблицы(ТЗ)

	ТЗ.Колонки.Добавить("ФактическоеПодразделение");
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		//-> RG-Soft VIvanov 2015/02/18
		//СтрокаТЗ.AU = Справочники.КостЦентры.НайтиПоКоду(РегламентированнаяОтчетность.ДополнитьСтроку(СтрЗаменить(СтрокаТЗ.AU,Символы.НПП,""),7,"0"));
		СтрокаТЗ.AU = РГСофт.НайтиAU(Объект.Дата, РегламентированнаяОтчетность.ДополнитьСтроку(СтрЗаменить(СтрокаТЗ.AU,Символы.НПП,""),7,"0"));
		//<- RG-Soft VIvanov
		СтрокаТЗ.AccountLawson = ПланыСчетов.Lawson.НайтиПоКоду(СтрЗаменить(СтрокаТЗ.AccountLawson,Символы.НПП,""));
		// { RGS MYurkevich 19.02.2015 14:11:03 - удаление колонки месяц
		//месяц = Месяц(Объект.Дата);
		//Если СтрокаТЗ.месяц = "январь" Тогда
		//	месяц = 1;
		//ИначеЕсли СтрокаТЗ.месяц = "февраль" Тогда
		//	месяц = 2;
		//ИначеЕсли СтрокаТЗ.месяц = "март" Тогда
		//	месяц = 3;
		//ИначеЕсли СтрокаТЗ.месяц = "апрель" Тогда
		//	месяц = 4;
		//ИначеЕсли СтрокаТЗ.месяц = "май" Тогда
		//	месяц = 5;
		//ИначеЕсли СтрокаТЗ.месяц = "июнь" Тогда
		//	месяц = 6;
		//ИначеЕсли СтрокаТЗ.месяц = "июль" Тогда
		//	месяц = 7;
		//ИначеЕсли СтрокаТЗ.месяц = "август" Тогда
		//	месяц = 8;
		//ИначеЕсли СтрокаТЗ.месяц = "сентябрь" Тогда
		//	месяц = 9;
		//ИначеЕсли СтрокаТЗ.месяц = "октябрь" Тогда
		//	месяц = 10;
		//ИначеЕсли СтрокаТЗ.месяц = "ноябрь" Тогда
		//	месяц = 11;
		//ИначеЕсли СтрокаТЗ.месяц = "декабрь" Тогда
		//	месяц = 12;
		//КонецЕсли;
		//СтрокаТЗ.месяц = ДобавитьМесяц(НачалоГода(Объект.Дата),Месяц-1);
		// } RGS MYurkevich 19.02.2015 14:12:11 - удаление колонки месяц

				
		Если СтрокаТЗ.Организация = "SLI Astrakhan" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Астр_нов");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Moscow" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Москва");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Muravlenko" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Муравленко");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Nefteyugansk" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Нефтеюганс");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Nizhnevartovsk" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Нижневарт.");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Novy Urengoy" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Н. Уренгой");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Noyabrsk" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Ноябрьск");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Turukhansky" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Туруханск");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Tyumen" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Тюмень");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Usinsk" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Усинск");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Volgo-Ural" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Бузулук");
		ИначеЕсли СтрокаТЗ.Организация = "SLI Yuzhno-Sakhalinsk" Тогда
			СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Сахалин");
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из Тз Цикл
		СтрокаТЧ = Объект.Загрузка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура РаспределениеПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.Распределение.ТекущиеДанные = Неопределено Тогда 
		ВывестиМакет(Элементы.Распределение.ТекущиеДанные.Способ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакет(Способ)
	
	Результат.Очистить();
	
	РезультатРаспределения = ПолучитьРезультатРаспределения(Способ);
	
	СхемаКомпоновкиДанных = Документы.ЗагрузкаРасходовПоЗарплате.ПолучитьМакет("СхемаДляРаспределения");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РезультатРаспределения", РезультатРаспределения);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИсточникНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатРаспределения(Способ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AU,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Расходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ПрочиеРасходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.СтраховыеВзносы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ВзносыФСС
	                      |ПОМЕСТИТЬ РасходыР
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.РаспределяемыеЗатраты КАК СпособыРаспределенияРасходовРаспределяемыеAU
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.НалоговаяРегистрация,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.База,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Доля
	                      |ПОМЕСТИТЬ БазаР
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.БазаРаспределения КАК СпособыРаспределенияРасходовБазаРаспределения
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БазаР.НалоговаяРегистрация,
	                      |	СУММА(РасходыР.Расходы * БазаР.Доля) КАК Расходы,
	                      |	СУММА(РасходыР.ПрочиеРасходы * БазаР.Доля) КАК ПрочиеРасходы,
	                      |	СУММА(РасходыР.СтраховыеВзносы * БазаР.Доля) КАК СтраховыеВзносы,
	                      |	СУММА(РасходыР.ВзносыФСС * БазаР.Доля) КАК ВзносыФСС
	                      |ИЗ
	                      |	БазаР КАК БазаР,
	                      |	РасходыР КАК РасходыР
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	БазаР.НалоговаяРегистрация");
	Запрос.УстановитьПараметр("Ссылка",Способ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ПроизвестиРасчет(Команда)
	
	ПроизвестиРасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиРасчетНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗагрузкаРасходовПоЗарплатеРаспределение.Способ
	                      |ПОМЕСТИТЬ Способы
	                      |ИЗ
	                      |	Документ.ЗагрузкаРасходовПоЗарплате.Распределение КАК ЗагрузкаРасходовПоЗарплатеРаспределение
	                      |ГДЕ
	                      |	ЗагрузкаРасходовПоЗарплатеРаспределение.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AU,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Расходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ПрочиеРасходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.СтраховыеВзносы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ВзносыФСС,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ФактическоеПодразделение
	                      |ПОМЕСТИТЬ РасходыРаспределяемые
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.РаспределяемыеЗатраты КАК СпособыРаспределенияРасходовРаспределяемыеAU
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				способы.Способ
	                      |			ИЗ
	                      |				способы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РасходыРаспределяемые.AU,
	                      |	СУММА(РасходыРаспределяемые.Расходы) КАК Расходы,
	                      |	СУММА(РасходыРаспределяемые.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	СУММА(РасходыРаспределяемые.СтраховыеВзносы) КАК СтраховыеВзносы,
	                      |	СУММА(РасходыРаспределяемые.ВзносыФСС) КАК ВзносыФСС,
	                      |	РасходыРаспределяемые.Ссылка
	                      |ПОМЕСТИТЬ РасходыРаспределяемыеТолькоAU
	                      |ИЗ
	                      |	РасходыРаспределяемые КАК РасходыРаспределяемые
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РасходыРаспределяемые.AU,
	                      |	РасходыРаспределяемые.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.НалоговаяРегистрация,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Доля
	                      |ПОМЕСТИТЬ БазаРаспределения
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.БазаРаспределения КАК СпособыРаспределенияРасходовБазаРаспределения
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				способы.Способ
	                      |			ИЗ
	                      |				способы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БазаРаспределения.НалоговаяРегистрация,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.Расходы * БазаРаспределения.Доля) КАК Расходы,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.ПрочиеРасходы * БазаРаспределения.Доля) КАК ПрочиеРасходы,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.СтраховыеВзносы * БазаРаспределения.Доля) КАК СтраховыеВзносы,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.ВзносыФСС * БазаРаспределения.Доля) КАК ВзносыФСС,
	                      |	БазаРаспределения.Ссылка.Наименование КАК ВидРасходов
	                      |ПОМЕСТИТЬ Distribution
	                      |ИЗ
	                      |	РасходыРаспределяемыеТолькоAU КАК РасходыРаспределяемыеТолькоAU
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БазаРаспределения КАК БазаРаспределения
	                      |		ПО РасходыРаспределяемыеТолькоAU.Ссылка = БазаРаспределения.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	БазаРаспределения.НалоговаяРегистрация,
	                      |	БазаРаспределения.Ссылка.Наименование
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗагрузкаРасходовПоЗарплатеЗагрузка.ФактическоеПодразделение,
	                      |	ЗагрузкаРасходовПоЗарплатеЗагрузка.AU,
	                      |	СУММА(ЗагрузкаРасходовПоЗарплатеЗагрузка.Расходы) КАК Расходы,
	                      |	СУММА(ЗагрузкаРасходовПоЗарплатеЗагрузка.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	СУММА(ЗагрузкаРасходовПоЗарплатеЗагрузка.СтраховыеВзносы) КАК СтраховыеВзносы,
	                      |	СУММА(ЗагрузкаРасходовПоЗарплатеЗагрузка.ВзносыФСС) КАК ВзносыФСС
	                      |ПОМЕСТИТЬ ИсходныеДанные
	                      |ИЗ
	                      |	Документ.ЗагрузкаРасходовПоЗарплате.Загрузка КАК ЗагрузкаРасходовПоЗарплатеЗагрузка
	                      |ГДЕ
	                      |	ЗагрузкаРасходовПоЗарплатеЗагрузка.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЗагрузкаРасходовПоЗарплатеЗагрузка.ФактическоеПодразделение,
	                      |	ЗагрузкаРасходовПоЗарплатеЗагрузка.AU
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ИсходныеДанные.ФактическоеПодразделение,
	                      |	ИсходныеДанные.AU,
	                      |	ИсходныеДанные.Расходы,
	                      |	ИсходныеДанные.ПрочиеРасходы,
	                      |	ИсходныеДанные.СтраховыеВзносы,
	                      |	ИсходныеДанные.ВзносыФСС
	                      |ПОМЕСТИТЬ Остаток
	                      |ИЗ
	                      |	ИсходныеДанные КАК ИсходныеДанные
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Распределенное.ФактическоеПодразделение,
	                      |	Распределенное.AU,
	                      |	-Распределенное.Расходы,
	                      |	-Распределенное.ПрочиеРасходы,
	                      |	-Распределенное.СтраховыеВзносы,
	                      |	-Распределенное.ВзносыФСС
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		РасходыРаспределяемые.AU КАК AU,
	                      |		СУММА(РасходыРаспределяемые.Расходы) КАК Расходы,
	                      |		СУММА(РасходыРаспределяемые.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |		СУММА(РасходыРаспределяемые.СтраховыеВзносы) КАК СтраховыеВзносы,
	                      |		СУММА(РасходыРаспределяемые.ВзносыФСС) КАК ВзносыФСС,
	                      |		РасходыРаспределяемые.ФактическоеПодразделение КАК ФактическоеПодразделение
	                      |	ИЗ
	                      |		РасходыРаспределяемые КАК РасходыРаспределяемые
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		РасходыРаспределяемые.AU,
	                      |		РасходыРаспределяемые.ФактическоеПодразделение) КАК Распределенное
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Остаток.Расходы,
	                      |	Остаток.ПрочиеРасходы,
	                      |	Остаток.СтраховыеВзносы,
	                      |	Остаток.ВзносыФСС,
	                      |	Остаток.AU.TaxRegistration КАК НалоговаяРегистрация,
	                      |	ВЫБОР
	                      |		КОГДА Остаток.AU.TaxRegistration = Остаток.ФактическоеПодразделение
	                      |			ТОГДА ""прямые расходы""
	                      |		ИНАЧЕ ""авизо "" + Остаток.ФактическоеПодразделение.Наименование
	                      |	КОНЕЦ КАК ВидРасходов
	                      |ПОМЕСТИТЬ ОстатокРазнесенный
	                      |ИЗ
	                      |	Остаток КАК Остаток
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ВложенныйЗапрос.Расходы) КАК Расходы,
	                      |	СУММА(ВложенныйЗапрос.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	СУММА(ВложенныйЗапрос.СтраховыеВзносы) КАК СтраховыеВзносы,
	                      |	СУММА(ВложенныйЗапрос.ВзносыФСС) КАК ВзносыФСС,
	                      |	ВложенныйЗапрос.НалоговаяРегистрация КАК НалоговаяРегистрация,
	                      |	ВложенныйЗапрос.ВидРасходов КАК ВидРасходов
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ОстатокРазнесенный.Расходы КАК Расходы,
	                      |		ОстатокРазнесенный.ПрочиеРасходы КАК ПрочиеРасходы,
	                      |		ОстатокРазнесенный.СтраховыеВзносы КАК СтраховыеВзносы,
	                      |		ОстатокРазнесенный.ВзносыФСС КАК ВзносыФСС,
	                      |		ОстатокРазнесенный.НалоговаяРегистрация КАК НалоговаяРегистрация,
	                      |		ОстатокРазнесенный.ВидРасходов КАК ВидРасходов
	                      |	ИЗ
	                      |		ОстатокРазнесенный КАК ОстатокРазнесенный
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		Distribution.Расходы,
	                      |		Distribution.ПрочиеРасходы,
	                      |		Distribution.СтраховыеВзносы,
	                      |		Distribution.ВзносыФСС,
	                      |		Distribution.НалоговаяРегистрация,
	                      |		Distribution.ВидРасходов
	                      |	ИЗ
	                      |		Distribution КАК Distribution) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВложенныйЗапрос.НалоговаяРегистрация,
	                      |	ВложенныйЗапрос.ВидРасходов
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НалоговаяРегистрация,
	                      |	ВидРасходов УБЫВ");	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);							  
	РезультатРаспределения = Запрос.Выполнить().Выгрузить();
	Объект.Затраты.Загрузить(РезультатРаспределения);

	ОбновитьОтчетИтог();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетИтог()
	
	РезультатИтог.Очистить();
	
	СхемаКомпоновкиДанных = Документы.ЗагрузкаРасходовПоЗарплате.ПолучитьМакет("СхемаРезультат");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РезультатРаспределения", Объект.Затраты.Выгрузить());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(РезультатИтог);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИсточникНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьОтчетИтог();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокумента(Команда)
	
	Если ВвестиЗначение(ДокументОснование) Тогда
		ДобавитьЗаписиВТЧ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписиВТЧ()
	
	Документ = ДокументОснование.ПолучитьОбъект();
	Для каждого СтрокаТЧ Из Документ.Загрузка Цикл
	
		Строка = Объект.Загрузка.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТЧ);
	
	КонецЦикла; 
	
КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 22.07.13, вопрос SLI-0003758
&НаКлиенте
Процедура AUСПустымиНалоговымиРегистрациями(Команда)
	
	МассивAU = ВыгрузитьСписокAU();	
	ТЗ = ПолучитьAUcПустымиНалоговымиРегистрациями(МассивAU);
	Если ТЗ.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("ТабЗнач", ТЗ);
		ОткрытьФорму("Документ.ЗагрузкаРасходовПоЗарплате.Форма.ФормаAU",ПараметрыФормы);
	Иначе
		Сообщить("Не найдено AU с пустыми налоговыми регистрациями.");
	КонецЕсли; 
	
КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 22.07.13, вопрос SLI-0003758
&НаСервере                                              
Функция ВыгрузитьСписокAU()

	Возврат Объект.Загрузка.Выгрузить(,"AU").ВыгрузитьКолонку("AU");

КонецФункции //ВыгрузитьСписокAU() 

//Добавила Федотова Л., РГ-Софт, 22.07.13, вопрос SLI-0003758
&НаСервере                                              
Функция ПолучитьAUcПустымиНалоговымиРегистрациями(МассивAU)

	Документ = РеквизитФормыВЗначение("Объект");
	ТЗ = Документ.ВернутьAUcПустымиНалоговымиРегистрациями(МассивAU);
	Возврат ТЗ;

КонецФункции // ПолучитьСписокAUcПустымиНалоговымиРегистрациями()



