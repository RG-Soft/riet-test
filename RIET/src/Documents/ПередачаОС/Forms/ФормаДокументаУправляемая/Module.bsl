&НаКлиенте
Перем ПараметрыОбработчикаОжидания; //ПроверкаКонтрагентов
			 
////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	// { RGS AFokin 04.06.2017 23:59:59
	// проведенный ДокументIco доступен только на просмотр
	КонтрольПроведенияСервер.УстановитьТолькоПросмотрДляФормы(ЭтаФорма, ТекущийОбъект);
	// } RGS AFokin 04.06.2017 23:59:59

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015

	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));	
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	//Добавила Федотова Л., РГ-Софт, 19.10.15, вопрос SLI-0005899
	ПроверкаБюджетаКонтракта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

//ОБРАБОТКА ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененФлагРучнаяКорректировка" Тогда 
		ЭтаФорма.Прочитать();
		ЗаполнитьДополнительныеРеквизитыОС(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.ОС,"ОсновноеСредство"));
	ИначеЕсли (ИмяСобытия = "ЗапускПроцессаУтверждения" или ИмяСобытия = "ОстановленПроцессУтверждения")
		И Параметр = Объект.Ссылка Тогда 
		ОбработкаПроцессаУтверждения();
	//Добавила Федотова Л., РГ-Софт, 27.11.13, вопрос SLI-0004009	
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный"
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	// } РГ-Софт Пахоменков А. 16.01.2015
	      		
КонецПроцедуры

//ОБРАБОТКА ВЫБОРА

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ДокументРасчетовСКонтрагентом.Форма.ФормаВыбораУправляемая" Тогда
		Объект.Сделка = ВыбранноеЗначение;
		Модифицированность = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ
////////////////////////////////////////////////////////////////////////

// { RGS LFedotova 25.07.2017 23:38:19 - вопрос SLI-0007316
&НаКлиенте
Процедура ЗаполнитьСуммыРуб(Команда)
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры
// } RGS LFedotova 25.07.2017 23:38:27 - вопрос SLI-0007316

&НаКлиенте
Процедура Архив(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если Вопрос("Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
      	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать текущий документ, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	Объект.Архив = Не Объект.Архив;
	КоманднаяПанель.ПодчиненныеЭлементы.ФормаАрхив.Пометка = Объект.Архив;
	ЭтаФорма.ТолькоПросмотр = Объект.Архив;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменитьКурсВзаиморасчетов = Ложь;
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		Если Вопрос("Изменилась дата документа. Изменить курс взаиморасчетов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ИзменитьКурсВзаиморасчетов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаПроведенияПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОрганизацияОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаОбработатьИзменение();
		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров  = Новый Структура("Организация,Контрагент,ДоговорКонтрагента,КонецПериода,СчетДляОпределенияОстатков,СторонаСчета", 
							Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата-1, Объект.СчетУчетаРасчетовПоАвансам, 1);

	SalesBookКлиент.ВыборРасчетногоДокумента(СтруктураПараметров, ЭтаФорма, SalesBookСервер.ПолучитьТипыДокументовРасчетов("ПередачаОС","Сделка"));
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокПодготовкаКПередачеОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОС.Количество() > 0 Тогда
		Если Вопрос("При заполнении существующие данные в табличной части будут удалены! Продолжить?", 
			РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДокПодготовкаКПередачеОС = ВыбранноеЗначение;
	
	ДокПодготовкаКПередачеОСОбработатьИзменение();

	Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
    ЗаполнениеУполномоченныхЛиц();
	
КонецПроцедуры
        
////////////////////////////////////////////////////////////////////////
// ЦЕНЫ И ВАЛЮТА
////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура РассчитатьСуммыРуб() 

	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Для каждого Строка Из Объект.ОС Цикл
			Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
			Строка.СуммаНДСРуб = Строка.СуммаНДС;
		КонецЦикла; 
	Иначе
		СуммаПредоплатыВал = Объект.Предоплата.Итог("СуммаВзаиморасчетов");
		СуммаПредоплатыРуб = Объект.Предоплата.Итог("Сумма");
		ОССумма = Объект.ОС.Итог("Сумма");
		
		//Распределим предоплату по строкам товаров и услуг
		СуммаВалВсего = ?(Объект.СуммаВключаетНДС, ОССумма, 
						 ОССумма + Объект.ОС.Итог("СуммаНДС"));
		Если СуммаВалВсего = 0 Тогда
			Возврат;
		КонецЕсли; 
		//Проверим правильность задания суммы предоплаты
		Если Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			Если СуммаПредоплатыВал > 0 И СуммаПредоплатыВал > СуммаВалВсего Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильное соотношение суммы документа и суммы взаиморасчетов предоплаты.
				|Сумма взаиморасчетов предоплаты не может превышать сумму документа!");
			КонецЕсли; 
		КонецЕсли; 

		КурсВзаиморасчетов = Объект.КурсВзаиморасчетов;
		Коэф = СуммаПредоплатыВал/СуммаВалВсего;
		Если Объект.Предоплата.Количество() > 0 Тогда
			ДокументПредоплаты = Объект.Предоплата[0].ДокументАванса;
			Если НЕ ДокументПредоплаты.Пустая() Тогда
				КурсПредоплаты = ДокументПредоплаты.РасшифровкаПлатежа[0].КурсВзаиморасчетов;
				Если КурсВзаиморасчетов = КурсПредоплаты Тогда
					Коэф = 1;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		Для каждого Строка Из Объект.ОС Цикл
			Если Коэф = 0 Тогда
				Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Окр((Строка.Сумма - Строка.СуммаНДС) * КурсВзаиморасчетов,2),Окр(Строка.Сумма * КурсВзаиморасчетов,2)); 
				Строка.СуммаНДСРуб = Окр(Строка.СуммаНДС * КурсВзаиморасчетов,2); 
			Иначе
				СтрокаСуммаВсего = ?(Объект.СуммаВключаетНДС,Строка.Сумма,Строка.Сумма + Строка.СуммаНДС); 
				СтрокаСуммаВсегоРуб = Окр(СтрокаСуммаВсего * (1-Коэф) * КурсВзаиморасчетов
				+ СуммаПредоплатыРуб * Строка.Сумма/ОССумма,2);
				Строка.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаВсегоРуб, Объект.УчитыватьНДС,Истина, 
									 УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				Строка.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - Строка.СуммаНДСРуб; 
			КонецЕсли; 
		КонецЦикла; 
		
		Если СуммаПредоплатыРуб = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		СуммаРаспределения = СуммаПредоплатыВал;
		СуммаРубИтого = Объект.ОС.Итог("СуммаБезНДСРуб") + Объект.ОС.Итог("СуммаНДСРуб");
		
		Если СуммаВалВсего = СуммаРаспределения Тогда
			//Проверим, сходятся ли суммы
			Если СуммаРубИтого <> СуммаПредоплатыРуб Тогда
				Превышение = СуммаРубИтого - СуммаПредоплатыРуб; 
				//отнимем его из последней строчки товаров или услуг
				КоличествоСтрокОС = Объект.ОС.Количество();
				Если КоличествоСтрокОС > 0 Тогда
					ПоследняяСтрокаОС = Объект.ОС[КоличествоСтрокОС - 1];
					СтрокаСуммаРубВсего = ПоследняяСтрокаОС.СуммаБезНДСРуб + ПоследняяСтрокаОС.СуммаНДСРуб - Превышение; 
					//заново рассчитаем НДС
					ПоследняяСтрокаОС.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаРубВсего, Объект.УчитыватьНДС,Истина, 
										 УчетНДС.ПолучитьСтавкуНДС(ПоследняяСтрокаОС.СтавкаНДС));
					
					ПоследняяСтрокаОС.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - ПоследняяСтрокаОС.СуммаНДСРуб; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры
       
&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	СтруктураЦеныИВалюта = ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДоИзменения);

	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, СтруктураЦеныИВалюта.ПересчитатьЦены, ПересчитатьНДС);
		
		ОбновитьИтоги(ЭтаФорма);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС);
	Форма.ЦеныИВалюта = SalesBookКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
            	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДоИзменения, ПересчитатьЦены = Ложь)

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);

	СтруктураЦеныИВалюта = ОткрытьФормуМодально("ОбщаяФорма.ФормаЦеныИВалютаТонкая", СтруктураПараметров);

	Возврат СтруктураЦеныИВалюта;

КонецФункции

 &НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если НЕ ПересчитатьЦены И НЕ ПересчитатьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Объект.ОС Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы,ВалютаДоИзменения,
			СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
		
КонецПроцедуры
         
&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ВалютаПередИзменением, СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	Если ПересчитатьЦены Тогда
		Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ВалютаПередИзменением, Объект.ВалютаДокумента, 
			СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Если ЕстьНДС Тогда
		СтрокаТаблицы.Сумма = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма, Неопределено, ЦенаВключаетНДС, ЕстьНДС, Объект.СуммаВключаетНДС,      
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		СтрокаТаблицы.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, ЕстьНДС, Объект.СуммаВключаетНДС, 
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Иначе
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
	КонецЕсли;
	
	// { RGS LFedotova 25.07.2017 23:44:33 - вопрос SLI-0007316
	РассчитатьСуммыРуб();
	// } RGS LFedotova 25.07.2017 23:44:49 - вопрос SLI-0007316

КонецПроцедуры
                 
////////////////////////////////////////////////////////////////////////
// ---------------------  СТРАНИЦЫ ------------------------
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ОСНОВНЫЕ СРЕДСТВА
////////////////////////////////////////////////////////////////////////

//КОМАНДЫ

//ПОДБОР ОС

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// Обслуживание подбора:

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ДобавленныеСтроки = ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
            	
	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодборОсновныхСредств(Знач КоллекцияОС, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОСВХранилище);
	
	ИсходныеДанные = КоллекцияОС.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("ОсновноеСредство");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияОС.Очистить();
	Для каждого СтрокаТаблицыОС Из ТаблицаОС Цикл
		ЭлементКоллекции = КоллекцияОС.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицыОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицыОС);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

//СОЗДАТЬ РБП

&НаКлиенте
Процедура СоздатьРБП(Команда)
	
	ЗаполнитьРБПНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРБПНаСервере() 
	
	ТаблицаОСиРБП = Объект.ОС.Выгрузить(,"ОсновноеСредство, РБП, Сумма, СуммаНДС, СтоимостьНУ, АмортизацияНУ, АмортизацияЗаМесяцНУ, СуммаКапитальныхВложенийВключаемыхВРасходыНУ");

	ТЗ = Документы.ПередачаОС.ПолучитьДанныеРБП(ТаблицаОСиРБП, Объект.Ссылка, ВалютаРегламентированногоУчета);
	Для каждого Стр Из ТЗ Цикл
		Если Стр.СуммаУбытка>0 И  стр.рбп.Пустая() Тогда
			НовыйРБП=Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
			НовыйРБП.Родитель=Справочники.РасходыБудущихПериодов.УбытокОтРеализации;
			НовыйРБП.Наименование= "Убыток от реализации ОС №" + Стр.ОС.Код;
			НовыйРБП.Сумма = Стр.СуммаУбытка;
			НовыйРБП.AU=Стр.КостЦентр;
			НовыйРБП.TaxRegistration=Стр.Местонахождение;
			НовыйРБП.ДатаНачалаСписания = Стр.ДатаНачалаСписания;
			НовыйРБП.ДатаОкончанияСписания=ДобавитьМесяц(Стр.ДатаНачалаСписания, Стр.ОстаточныйСрок)-1;
			НовыйРБП.Записать();
			СтруктураПоиска = Новый Структура("ОсновноеСредство", Стр.ОС);
			МассивСтрок = Объект.ОС.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЧ из МассивСтрок Цикл 
				СтрокаТЧ.РБП = НовыйРБП.Ссылка;
			КонецЦикла;
		ИначеЕсли Стр.СуммаУбытка>0 И НЕ Стр.РБП.Пустая() Тогда
			РБП=Стр.РБП.ПолучитьОбъект();
			Если РБП.Сумма<>Стр.СуммаУбытка Тогда
				РБП.Сумма = Стр.СуммаУбытка;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "убыток в документе не совпадает с убытком РБП. В документе сумма составляет " + Стр.СуммаУбытка + ", а в РБП - " + Стр.РБП.Сумма);
			КонецЕсли;
			Если Рбп.AU<>Стр.КостЦентр Тогда
				РБП.AU=Стр.КостЦентр;
			КонецЕсли;
			Если РБП.TaxRegistration<>Стр.Местонахождение Тогда
				РБП.TaxRegistration=Стр.Местонахождение;
			КонецЕсли;
			Если РБП.ДатаНачалаСписания<>Стр.ДатаНачалаСписания Тогда
				РБП.ДатаНачалаСписания=Стр.ДатаНачалаСписания;
			КонецЕсли;
			ДатаОкончанияСписания=НачалоДня(ДобавитьМесяц(Стр.ДатаНачалаСписания, Стр.ОстаточныйСрок)-1);
			Если РБП.ДатаОкончанияСписания<>ДатаОкончанияСписания Тогда
				РБП.ДатаОкончанияСписания= ДатаОкончанияСписания ;
			КонецЕсли;
			РБП.Записать();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//ЗАПОЛНИТЬ

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)
	
	Если Вопрос("При заполнении существующие данные будут пересчитаны! 
				|Продолжить?", 
		        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОСЗаполнитьДляСпискаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОСЗаполнитьДляСпискаНаСервере() 
	           		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	//Если ЗначениеЗаполнено(Объект.ДокПодготовкаКПередачеОС) Тогда
	//	
	//	ТЧ_ОС = Объект.ОС.Выгрузить();
	//	Объект.ОС.Очистить();
	//	ТЧПодготовкаКПередаче = Объект.ДокПодготовкаКПередачеОС.ОС.Выгрузить();
	//	Если ТЧПодготовкаКПередаче.Количество()>0 Тогда
	//		Объект.ОС.Загрузить(ТЧПодготовкаКПередаче);
	//		Для каждого СтрокаТЧ Из Объект.ОС Цикл
	//			Строка = ТЧ_ОС.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
	//			Если НЕ Строка = Неопределено Тогда
	//				СтрокаТЧ.Сумма = Строка.Сумма;
	//				СтрокаТЧ.СтавкаНДС = Строка.СтавкаНДС;
	//				СтрокаТЧ.СуммаНДС = Строка.СуммаНДС;
	//				СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//				СтрокаТЧ.КостЦентр = Строка.КостЦентр;
	//				СтрокаТЧ.РБП = Строка.РБП;
	//			КонецЕсли;                               
	//		КонецЦикла; 
	//	КонецЕсли;
	//	
	//	Для каждого Строка из Объект.ОС Цикл
	//		
	//		Строка.АмортизацияБУ = Строка.АмортизацияБУ + Строка.АмортизацияЗаМесяцБУ;
	//		Строка.АмортизацияНУ = Строка.АмортизацияНУ + Строка.АмортизацияЗаМесяцНУ;
	//		Строка.СтоимостьНУ   = Строка.СтоимостьНУ - Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//		
	//		Строка.АмортизацияЗаМесяцБУ                         = 0;
	//		Строка.АмортизацияЗаМесяцНУ                         = 0;
	//		Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
	//		
	//	КонецЦикла;
	//Иначе
	//	СписокОС        = Объект.ОС.Выгрузить(,"ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	СтоимостьАмортизацияОСОстатки.ОсновноеСредство,
	//	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	//	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	//	|	АмортизацияЗаПериод.СуммаБУ КАК АмортизацияБУ,
	//	|	АмортизацияЗаПериод.СуммаНУ КАК АмортизацияНУ,
	//	|	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	//	|	ОС_ИнвенНомер.ИнвентарныйНомер,
	//	|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	//	|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	//	|		ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер
	//	|	ИЗ
	//	|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения) КАК ОС_ИнвенНомер
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	//	|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	//	|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	//	|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	//	|		ИЗ
	//	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	//	|		ГДЕ
	//	|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	//	|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	//	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	//	|			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	//	|			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	//	|		ИЗ
	//	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	//	|		ГДЕ
	//	|			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	//	|			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	//	|		
	//	|		СГРУППИРОВАТЬ ПО
	//	|			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
	//	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
	//	
	//	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//	Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(Объект.Дата), ВидГраницы.Включая));
	//	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(Объект.Дата));
	//	
	//	табСведенияОС = Запрос.Выполнить().Выгрузить();
	//	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	//	
	//	Для Каждого Строка Из Объект.ОС Цикл	
	//		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
	//		Если НЕ НайденноеОС = Неопределено Тогда
	//			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	      
	ИзменитьЗаголовки(ЭтаФорма);
	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	Если Элементы.ОС.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные для заполнения отсутствуют.");
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = Элементы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные для заполнения отсутствуют.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоНаименованиюНаСервере(СокрЛП(ОсновноеСредство));
    	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНаименованиюНаСервере(ОсновноеСредствоНаименование)
	
	МассивОС = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.ОС, "ОсновноеСредство");

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("МассивОС",     МассивОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&МассивОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.");
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
	ИзменитьЗаголовки(ЭтаФорма);
	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	
КонецПроцедуры

//ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		МассивОС = Новый Массив;
		МассивОС.Добавить(ТекущиеДанные.ОсновноеСредство);
		ЗаполнитьДополнительныеРеквизитыОС(МассивОС);
	КонецЕсли;
	
	ИзменитьЗаголовки(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		МассивОС = Новый Массив;
		МассивОС.Добавить(ТекущиеДанные.ОсновноеСредство);
		ЗаполнитьДополнительныеРеквизитыОС(МассивОС);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда 
		ТекущиеДанные.СтавкаНДС = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
	
	// { RGS LFedotova 25.07.2017 23:44:33 - вопрос SLI-0007316
	РассчитатьСуммыРуб();
	// } RGS LFedotova 25.07.2017 23:44:49 - вопрос SLI-0007316
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;

	// { RGS LFedotova 25.07.2017 23:44:33 - вопрос SLI-0007316
	РассчитатьСуммыРуб();
	// } RGS LFedotova 25.07.2017 23:44:49 - вопрос SLI-0007316
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;

	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
	
	// { RGS LFedotova 25.07.2017 23:44:33 - вопрос SLI-0007316
	РассчитатьСуммыРуб();
	// } RGS LFedotova 25.07.2017 23:44:49 - вопрос SLI-0007316
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА СЧЕТА УЧЕТА РАСЧЕТОВ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не SalesBookСервер.СчетМожноИспользоватьВПроводках(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Предупреждение(ВернутьСтр("ru = 'Счет " + Строка(Объект.СчетУчетаРасчетовСКонтрагентом)+
												" нельзя использовать в проводках.'"));
		СтандартнаяОбработка = Ложь;
		Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не SalesBookСервер.СчетМожноИспользоватьВПроводках(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Предупреждение(ВернутьСтр("ru = 'Счет " + (Объект.СчетУчетаРасчетовПоАвансам)+
												" нельзя использовать в проводках.'"));
		СтандартнаяОбработка = Ложь;
		Объект.СчетУчетаРасчетовПоАвансам = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ПРЕДОПЛАТА
////////////////////////////////////////////////////////////////////////
    
//КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьПоСчетам(Команда)
	
	СчетаНаПредоплату = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Предоплата, "СчетНаОплату");
	Если ЗначениеЗаполнено(Объект.СчетНаОплату) Тогда 
		СчетаНаПредоплату.Добавить(Объект.СчетНаОплату);
	КонецЕсли;
	
	Объект.Предоплата.Очистить();
	
	ЗаполнитьПоСчетамНаСервере(СчетаНаПредоплату);
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСчетамНаСервере(СчетаНаПредоплату)
	
	КПодбору = Объект.СуммаДокумента;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВзаиморасчетыСПокупателямиОстатки.Сделка КАК ДокументАванса,
	                      |	-ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток КАК Сумма,
	                      |	-ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	                      |	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату КАК СчетНаПредоплату
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&МоментВремени, СчетНаПредоплату В (&СчетаНаПредоплату)) КАК ВзаиморасчетыСПокупателямиОстатки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВзаиморасчетыСПокупателямиОстатки.Сделка.Дата");
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Запрос.УстановитьПараметр("СчетаНаПредоплату", СчетаНаПредоплату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() и КПодбору > 0 Цикл 
		
		СтрокаТЧ = Объект.Предоплата.Добавить();
		СуммаВал = ?(Выборка.СуммаВзаиморасчетов > КПодбору, КПодбору, Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.ДокументАванса = Выборка.ДокументАванса;
		СтрокаТЧ.КурсАванса = ?(Выборка.СуммаВзаиморасчетов=0,0, 
								Выборка.Сумма/Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.Сумма = ?(Выборка.СуммаВзаиморасчетов=0,0,
						   СуммаВал*Выборка.Сумма/Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.СуммаВзаиморасчетов = СуммаВал;
		СтрокаТЧ.СчетНаОплату = Выборка.СчетНаПредоплату;
		
		КПодбору = КПодбору - СуммаВал;
					
	КонецЦикла;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА
////////////////////////////////////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетФактуру(Форма)

	Объект = Форма.Объект;
	ЗаполнитьЗначенияСвойств(Форма, SalesBookКлиентСервер.ДанныеНадписиОСчетеФактуреВыданном(
		Объект.Ссылка,
		Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	SalesBookКлиент.ОткрытьВыданныйСчетФактуру(ЭтаФорма, СчетФактура);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элемент);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////

// ПОДГОТОВКА ФОРМЫ И УПРАВЛЕНИЕ ЭЛЕМЕНТАМИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьДаннымиПоУмолчанию(ТекущийПользователь);
	КонецЕсли;

	// { RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	//РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, Объект); 
	текОБ = РеквизитФормыВЗначение("Объект");	
	РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, текОБ); 
	// } RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	
	ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	
	// Проверка ведения однофирменности 
	Элементы.Организация.ТолькоПросмотр = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "УчетПоВсемОрганизациям");	
	
	ЭтаФорма.ТолькоПросмотр = Объект.Архив;
	
	УправлениеФормой(ЭтаФорма);
	      		                	
КонецПроцедуры
   
&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию(ТекущийПользователь)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекущийПользователь, ВалютаРегламентированногоУчета, "Продажа");
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
		
	Если Не ЗначениеЗаполнено(Объект.СобытиеОС) Тогда
		Объект.СобытиеОС = УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	   		
	Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Объект.Руководитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ДиректорПоУмолчанию");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Объект.ГлавныйБухгалтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ГлавныйБухгалтерПоУмолчанию");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыОС(МассивОС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ПервоначальныеСведения.ОсновноеСредство,
	 |	ПервоначальныеСведения.ИнвентарныйНомер
	 |ИЗ
	 |	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата,ОсновноеСредство В (&МассивОС)) КАК ПервоначальныеСведения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("ОсновноеСредство");
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска.ОсновноеСредство = Выборка.ОсновноеСредство;
		МассивСтрок = Объект.ОС.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0 Тогда 
			
			СтрокаОС = МассивСтрок[0];
			
			СтрокаОС.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
			СтрокаОС.Всего            = СтрокаОС.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаОС.СуммаНДС);
			СтрокаОС.ОстСтоимостьБУ   = СтрокаОС.СтоимостьБУ - СтрокаОС.АмортизацияБУ - СтрокаОС.АмортизацияЗаМесяцБУ;
			СтрокаОС.ОстСтоимостьНУ   = СтрокаОС.СтоимостьНУ - СтрокаОС.АмортизацияНУ - СтрокаОС.АмортизацияЗаМесяцНУ - СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДокПодготовкаКПередачеОС.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ИзменитьЗаголовки(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗаголовки(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	//Добавила Федотова Л., РГ-Софт, 26.11.13, вопрос SLI-0004006
    ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	//
                       		
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ГруппаОС.Заголовок       = "ОС (" + Объект.ОС.Количество() + " поз.)";
    Элементы.ГруппаПредоплата.Заголовок   = "Предоплата (" + Объект.Предоплата.Количество() + " поз.)";
	
	Элементы.ОССумма.Заголовок = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Сумма с НДС'"), ВернутьСтр("ru='Сумма без НДС'"));
	
	Элементы.ИтогиВсегоНДС.Заголовок = ?(Объект.СуммаВключаетНДС, "НДС (в т. ч.):", "НДС (сверху):");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма)

	Объект = Форма.Объект;
	
	Для Каждого СтрокаТаблицы Из Объект.ОС Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
                             
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего    = Форма.Объект.ОС.Итог("Всего");
	Форма.ИтогиВсегоНДС = Форма.Объект.ОС.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроцессаУтверждения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	ЗаполнитьДополнительныеРеквизитыОС(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.ОС,"ОсновноеСредство"));
	
КонецПроцедуры

//ОБРАБОТКА СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	SalesBookСервер.ПроверитьНомерДокумента(ДокОбъект, Объект.Дата);
	
	НастройкаПравДоступа.УстановитьДатуПроведенияДокумента(ДокОбъект);
	НастройкаПравДоступа.УстановитьНалоговыйПериодДокумента(ДокОбъект);
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
 	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
	Если ИзменитьКурсВзаиморасчетов Тогда 
		СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента,,,Истина);
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыОС(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.ОС,"ОсновноеСредство"));
	ОбновитьИтоги(ЭтаФорма);
	                    	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	ОбщегоНазначения.УстановитьНомерДокумента(Объект);

	ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделениеОрганизации");
	
	// Если ПодразделениеОрганизации не заполнено.
	Если Не ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		
		// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
		Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
			Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		КонецЕсли;
		
	Иначе // Если ПодразделениеОрганизации заполнено.
		
		// Если ПодразделениеОрганизации не соответствует выбранной организации.
		Если Объект.ПодразделениеОрганизации.Владелец = Объект.Организация Тогда
			
			// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
				Объект.ПодразделениеОрганизации = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентОбработатьИзменение();
			
КонецПроцедуры
  
&НаСервере
Процедура КонтрагентОбработатьИзменение()
	   	
	ДоговорКонтрагентаОбработатьИзменение();
	КонтрагентПриИзмененииНаСервере(Объект.Контрагент, Объект.Дата);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(Контрагент, Дата)
	ДатаЗапретаИспользования = Контрагент.ДатаЗапретаИспользования;
	Если НЕ ДатаЗапретаИспользования = Дата(1,1,1) И ДатаЗапретаИспользования <= Дата Тогда
		Сообщить("Запрещено использование контрагента " + Контрагент + " с " + Формат(ДатаЗапретаИспользования, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	Сделка = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,Владелец,ВидДоговора");

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(
						Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		
	Если Объект.ОС.Количество() > 0 Тогда
	
		ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
			ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
		ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеУполномоченныхЛиц()
	
	Объект.ГлавныйБухгалтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ГлавныйБухгалтерПоУмолчанию");
	Объект.Руководитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ДиректорПоУмолчанию");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалоговогоПериодаИЛИДатыПроведения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	РГСофт.УстановитьИнформационнуюНадписьНалоговыйПериод(Элементы.инфНадписьНалоговыйПериод, Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ДокПодготовкаКПередачеОСОбработатьИзменение()
	
	Объект.ОС.Очистить();
	
	ТЧПодготовкаКПередаче = Объект.ДокПодготовкаКПередачеОС.ОС.Выгрузить();
	
	Если ТЧПодготовкаКПередаче.Количество() > 0 Тогда
		Объект.ОС.Загрузить(ТЧПодготовкаКПередаче);
	КонецЕсли;
	
	Для каждого СтрокаТЧ из Объект.ОС Цикл
		
		СтрокаТЧ.АмортизацияБУ = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
		СтрокаТЧ.АмортизацияНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
		СтрокаТЧ.СтоимостьНУ   = СтрокаТЧ.СтоимостьНУ   - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
		
		СтрокаТЧ.АмортизацияЗаМесяцБУ                         = 0;
		СтрокаТЧ.АмортизацияЗаМесяцНУ                         = 0;
		СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		
	КонецЦикла;	
	
	ЗаполнитьДополнительныеРеквизитыОС(Объект.ОС.Выгрузить(,"ОсновноеСредство"));
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтаФорма);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтаФорма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	                    
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтаФорма, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
		Сообщить("Проверка контрагентов невозможна");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	                              
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры
           
Процедура ОпределитьНаличиеНовыхОшибокВДокументе(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) 
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	ИначеЕсли ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументСОшибкой(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтаФорма, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтаФорма, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// { RGS MYurkevich 02.02.2015 15:03:04 - TP-00000673
&НаКлиенте
Процедура РедактироватьСебестоимость(Команда)
	ПараметрыФормы = Новый Структура;
	Отбор  = Новый Структура;      
	Отбор.Вставить("Регистратор",Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ОткрытьФорму("РегистрНакопления.РегистрСебестоимости.Форма.ФормаНабораЗаписей", ПараметрыФормы);
КонецПроцедуры

// } RGS MYurkevich 02.02.2015 15:03:17 - TP-00000673
#КонецОбласти

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура ОСКостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.ОС.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСКостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСКостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 19.10.15, вопрос SLI-0005899
Процедура ПроверкаБюджетаКонтракта()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ИсполнениеБюджетаКонтрактаОбороты.СуммаОборот) КАК СуммаОборот,
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта КАК СуммаКонтракта
		|ИЗ
		|	РегистрНакопления.ИсполнениеБюджетаКонтракта.Обороты(, , Регистратор, ) КАК ИсполнениеБюджетаКонтрактаОбороты
		|ГДЕ
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И НЕ ИсполнениеБюджетаКонтрактаОбороты.Регистратор = &Ссылка
		|	И ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаПревышения = -(ВыборкаДетальныеЗаписи.СуммаКонтракта - ВыборкаДетальныеЗаписи.СуммаОборот - Объект.СуммаДокумента);
		Если СуммаПревышения > 0 Тогда
			Сообщить("Превышен бюджет контракта (" + ВыборкаДетальныеЗаписи.СуммаКонтракта + " " + Объект.ВалютаДокумента + ") на сумму " + СуммаПревышения + " " + Объект.ВалютаДокумента);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры
//<- RG-Soft VIvanov
