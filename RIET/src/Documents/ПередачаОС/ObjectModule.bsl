Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЗатрат;
Перем ПроводкиНУ;
Перем ПоддержкаПБУ18;
Перем ЭтоУтверждение Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	//Процедура заполняет параметры организации-получателя формы ОС1 
	Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
		
		СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Получатель, ПараметрыДокумента.ДатаДок);
		СведенияОГрузополучателе = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Грузополучатель, ПараметрыДокумента.ДатаДок);
		
		ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,КодПоОКПОПолучателя,ПодрПолучателя");	
		
		ПараметрыОрганизации.ОрганизацияПолучатель = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СведенияОбОрганизации.ПолноеНаименование),СведенияОбОрганизации.Представление,СведенияОбОрганизации.ПолноеНаименование);
		Если ПараметрыДокумента.Грузополучатель.Код = "консалтинг12410" Тогда
			ПараметрыОрганизации.АдресПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ЮридическийАдрес,Телефоны,");
		Иначе
			ПараметрыОрганизации.АдресПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
		КонецЕсли;
		ПараметрыОрганизации.РеквПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
		ПараметрыОрганизации.КодПоОКПОПолучателя = СведенияОбОрганизации.КодПоОКПО;
		
		ПараметрыОрганизации.ПодрПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,КПП");
		
		ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Получатель, ПараметрыДокумента.ДатаДок);
		ПараметрыОрганизации.РукПолучателя = ОтветственныеЛицаОрганизации.РуководительПредставление;
		ПараметрыОрганизации.ДолжРукПолуч = ОтветственныеЛицаОрганизации.РуководительДолжность;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
	КонецПроцедуры
	
	//Процедура заполняет параметры организации-сдатчика формы ОС1 
	Процедура ЗаполнитьДанныеОрганизацииСдатчика(ПараметрыДокумента, ОбластьМакета)
		
		СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Сдатчик, ПараметрыДокумента.ДатаДок);
		ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Сдатчик, ПараметрыДокумента.ДатаДок);
		
		ПараметрыОрганизации = Новый структура("АдресСдатчика,РеквСдатчика,ДолжРукСдатчика,РукСдатчика,ГлавБухСдатчика,КодПоОКПОСдатчика");	
		
		//ПараметрыОрганизации.НаимСдатчика = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СведенияОбОрганизации.ПолноеНаименование),СведенияОбОрганизации.Представление,СведенияОбОрганизации.ПолноеНаименование);
		СведенияОбОрганизации2 = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
		
		
		ПараметрыОрганизации.АдресСдатчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации2, "ЮридическийАдрес,Телефоны,");
		ПараметрыОрганизации.РеквСдатчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
		ПараметрыОрганизации.КодПоОКПОСдатчика = СведенияОбОрганизации.КодПоОКПО;
		
		Если ЗначениеЗаполнено(ПараметрыДокумента.Руководитель) Тогда
			ПараметрыОрганизации.РукСдатчика = ПараметрыДокумента.Руководитель;
		Иначе
			ПараметрыОрганизации.РукСдатчика = ОтветственныеЛицаОрганизации.Руководитель;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПараметрыДокумента.ДолжностьРуководителя) Тогда
			ПараметрыОрганизации.ДолжРукСдатчика = ПараметрыДокумента.ДолжностьРуководителя;
		Иначе
			ПараметрыОрганизации.ДолжРукСдатчика = ОтветственныеЛицаОрганизации.РуководительДолжность;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПараметрыДокумента.ГлавныйБухгалтер) Тогда
			ПараметрыОрганизации.ГлавБухСдатчика = ПараметрыДокумента.ГлавныйБухгалтер;
		Иначе
			ПараметрыОрганизации.ГлавБухСдатчика = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
	КонецПроцедуры
	
	// Функция формирует табличный документ с печатной формой ОС-15,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьОС1(ДвеВалюты = Неопределено)
		
		Если ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Сообщить("Необходимо заполнить подразделение на закладке ""Дополнительно""");
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаОС.Дата КАК ДатаДок,
		|	ПередачаОС.Номер КАК НомерАкта,
		|	ПередачаОС.Ответственный,
		|	ПередачаОС.ПодразделениеОрганизации.НаименованиеПолное КАК ПодрСдатчика,
		|	ПередачаОС.Контрагент.Наименование КАК ОрганизацияПолучатель,
		|	ПередачаОС.Контрагент КАК Получатель,
		|	ПередачаОС.Организация.НаименованиеПолное КАК НаимСдатчика,
		|	ПередачаОС.ПодразделениеОрганизации.Адрес КАК АдресСдатчика,
		//|	ПередачаОС.Контрагент.КонтрагентLawson.Код КАК КодПодрПол,
		|	ПередачаОС.ДоговорКонтрагента КАК ДоговорПередачи,
		|	ПередачаОС.Контрагент.КодПоОКПО КАК КодПоОКПОПол,
		|	ПередачаОС.ПодразделениеОрганизации.КодПоОКПО КАК КодПоОКПО,
		|	ПередачаОС.ПодразделениеОрганизации КАК Сдатчик,
		|	ПередачаОС.Организация,
		|	ПередачаОС.КурсВзаиморасчетов КАК Курс,
		|	ПередачаОС.Грузополучатель,
		|	ПередачаОС.Руководитель,
		|	ПередачаОС.ГлавныйБухгалтер,
		|	ПередачаОС.ДолжностьРуководителя
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Ссылка = &Ссылка";
		ВыборкаОС = Запрос.Выполнить().Выбрать();
		ВыборкаОС.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",            Ссылка);
		Запрос.УстановитьПараметр("Организация",       Организация);
		Запрос.УстановитьПараметр("КонДата",           Дата);
		Если ДвеВалюты Тогда
			Запрос.УстановитьПараметр("Курс",      ВыборкаОС.Курс);
		Иначе
			//Изменил Трефиленков Дмитрий, РГ-Софт
			Запрос.УстановитьПараметр("Курс",      1);
		КонецЕсли; 
		Запрос.УстановитьПараметр("Кратность", 1);
		//конец изменения
		Запрос.УстановитьПараметр("Капитальныйремонт", Перечисления.ВидыСобытийОС.КапитальныйРемонт);
		
		СписокВидовМодернизации = Новый Массив;
		СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
		СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Достройка);
		СписокВидовМодернизации.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
		
		Запрос.УстановитьПараметр("СписокВидовМодернизации", СписокВидовМодернизации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаОСОС.НомерСтроки,
		|	ПередачаОСОС.ОсновноеСредство,
		|	ПередачаОСОС.СтоимостьБУ - ПередачаОСОС.АмортизацияБУ - ПередачаОСОС.АмортизацияЗаМесяцБУ КАК ОстСтоимость,
		|	ПередачаОСОС.АмортизацияБУ КАК НачАмортизация,
		|	ПередачаОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
		|	ВЫБОР
		|		КОГДА ПередачаОСОС.Ссылка.СуммаВключаетНДС
		|			ТОГДА (ПередачаОСОС.Сумма - ПередачаОСОС.СуммаНДС) * &Курс / &Кратность
		|		ИНАЧЕ ПередачаОСОС.Сумма * &Курс / &Кратность
		|	КОНЕЦ КАК ЦенаПродажи,
		|	ВЫБОР
		|		КОГДА ПередачаОСОС.Ссылка.СуммаВключаетНДС
		|			ТОГДА ПередачаОСОС.Сумма - ПередачаОСОС.СуммаНДС
		|		ИНАЧЕ ПередачаОСОС.Сумма
		|	КОНЕЦ КАК ЦенаПродажиUSD,
		|	ПередачаОСОС.СтавкаНДС,
		|	ПередачаОСОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ПередачаОСОС.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
		|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОс,
		|	ПередачаОСОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
		|	ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПередачаОСОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
		|	ПередачаОСОС.ОсновноеСредство.КодПоОКОФ КАК КодОКОФ,
		|	НачислениеАмортизацииСрезПоследних.СрокПолезногоИспользованияБУ КАК СрокПолезнИспПриПеред,
		|	ПоследнийКапитальныйРемонт.Период КАК ДатаПоследнегоКапитальногоРемонта,
		|	ПоследняяМодернизация.Период КАК ДатаПоследнейМодернизации,
		|	ПередачаОСОС.ОсновноеСредство.Код КАК ИнвНомер,
		|	МестонахождениеОС.Местонахождение.Наименование КАК Местонахождение,
		|	ПередачаОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта1,
		|	ПередачаОСОС.ОсновноеСредство.РегистрационныйНомер КАК РегистрационныйНомер1
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&КонДата, Организация = &Организация) КАК МестонахождениеОС
		|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)) КАК НачислениеАмортизацииСрезПоследних
		|		ПО ПередачаОСОС.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)
		|					И Событие.ВидСобытияОС = &КапитальныйРемонт) КАК ПоследнийКапитальныйРемонт
		|		ПО ПередачаОСОС.ОсновноеСредство = ПоследнийКапитальныйРемонт.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
		|				&КонДата,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПередачаОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПередачаОС.ОС
		|						ГДЕ
		|							Документ.ПередачаОС.ОС.Ссылка = &Ссылка)
		|					И Событие.ВидСобытияОС В (&СписокВидовМодернизации)) КАК ПоследняяМодернизация
		|		ПО ПередачаОСОС.ОсновноеСредство = ПоследняяМодернизация.ОсновноеСредство
		|ГДЕ
		|	ПередачаОСОС.Ссылка = &Ссылка";
		ВыборкаПоОС = Запрос.Выполнить().Выбрать();
		
		ДокВвода  = Неопределено;
		ДатаВвода = Дата('00000000');
		
		Если ВыборкаПоОС.Количество() = 1 Тогда
			
			ВыборкаПоОС.Следующий();
			
			ТабДокумент   = Новый ТабличныйДокумент();
			Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
				ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				
				ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
				
				Если ДвеВалюты Тогда
					Макет         = ПолучитьОбщийМакет("ОС1ДвеВалюты");
				Иначе
					Макет         = ПолучитьОбщийМакет("ОС1");
				КонецЕсли; 
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода,        ДатаВвода);
				
				ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
				//ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
				ОбластьМакета.Параметры.ДатаВводаПриПередаче  = ДатаВвода;
				//ОбластьМакета.Параметры.СрокЭкспл  = Цел((Дата - ДатаВвода) / 2592000); //это в месяцах - по 30 дней
				ОбластьМакета.Параметры.СрокЭкспл  = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода,Дата);
				Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
				КонецЕсли; 
				
				//Запрос = Новый Запрос;
				//Запрос.Текст = "ВЫБРАТЬ
				//				|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПервых.СрокПолезногоИспользования КАК СрокПолезнИспПриПост,
				//				|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.ПервоначальнаяСтоимость КАК НачСтоимость,
				//				|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.СпособНачисленияАмортизации КАК СпособАмортизации
				//				|ИЗ
				//				|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПервых КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПервых,
				//				|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПервых КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых
				//				|ГДЕ
				//				|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПервых.ОсновноеСредство = &ОсновноеСредство
				//				|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПервых.ОсновноеСредство = &ОсновноеСредство";
				//Запрос.УстановитьПараметр("ОсновноеСредство", ВыборкаПоОС.ОсновноеСредство);
				//ДанныеПоОС = запрос.Выполнить().Выбрать();
				//ДанныеПоОС.Следующий();
				//ОбластьМакета.Параметры.Заполнить(ДанныеПоОС);
				
				ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
				ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
				//ОбластьМакета.Параметры.НормаАморт = Формат(100/ДанныеПоОС.СрокПолезнИспПриПост,"ЧЦ=5; ЧДЦ=2")+"%";
				ф = СтрНайти(Формат(Дата,"ДЛФ=DD")," ");
				ОбластьМакета.Параметры.День1 = """" + Лев(Формат(Дата,"ДЛФ=DD"),ф-1) + """" + Сред(Формат(Дата,"ДЛФ=DD"),ф);;
				ОбластьМакета.Параметры.День = """     "" ______________ 200  г.";
				
				Если НЕ ДвеВалюты Тогда
					Если ВалютаДокумента.Код = "643" Тогда
						ОбластьМакета.Параметры.Валюта = "руб.";
					Иначе
						ОбластьМакета.Параметры.Валюта = "у.е.";
					КонецЕсли;				
				КонецЕсли; 
				//Если ОбластьМакета.Параметры.ИнвНомер = "" Тогда
				//	ОбластьМакета.Параметры.ИнвНомер = ВыборкаПоОС.ОсновноеСредство.Код;
				//КонецЕсли;
				
				ОбластьМакета.Параметры.БезНДС = "имость" +Символы.ПС+"без НДС),";
				
				ОбластьМакета.Параметры.Сдал = ФизЛицоСдал;
				//ОбластьМакета.Параметры.Должность = Должность;
				//ОбластьМакета.Параметры.РукСдатчика = ФизЛицоСдал;
				//ОбластьМакета.Параметры.ДолжРукСдатчика = Должность;
				ОбластьМакета.Параметры.Местонахождение = Местонахождение;
				ОбластьМакета.Параметры.ПодрСдатчика = ОбластьМакета.Параметры.ПодрСдатчика + " "+ ПодразделениеОрганизации.ИНН +"/"+ПодразделениеОрганизации.КПП;
				ОбластьМакета.Параметры.КодПодрСд = ВыборкаПоОС.ОсновноеСредство.Подразделение.Код;
				Ячейка = ОбластьМакета.Области.Найти("НеСоотв");
				Ячейка.Шрифт = Новый Шрифт(Ячейка.Шрифт,,,,,,Ложь);
				Ячейка = ОбластьМакета.Области.Найти("Требуется");
				Ячейка.Шрифт = Новый Шрифт(Ячейка.Шрифт,,,,,,Ложь);
				
				Если ДвеВалюты Тогда
					ОбластьМакета.Параметры.РукСдатчика = "";
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			Иначе // Здание (сооружение)
				
				ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1а";
				
				ОС1а_Страница1 = Новый ТабличныйДокумент();
				Если ДвеВалюты Тогда
					МакетОС1а         = ПолучитьОбщийМакет("ОС1аДвеВалюты");
				Иначе
					МакетОС1а         = ПолучитьОбщийМакет("ОС1а");
				КонецЕсли; 
				ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
				
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС( ВыборкаПоОС.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода, ДатаВвода);
				
				ОбластьМакета.Параметры.ГодВыпуска = ВыборкаПоОС.ГодВыпуска;
				ОбластьМакета.Параметры.ДатаВвода  = ДатаВвода;
				//ОбластьМакета.Параметры.СрокЭкспл  = Цел((Дата - ДатаВвода) / 2592000); //это в месяцах - по 30 дней
				ОбластьМакета.Параметры.СрокЭкспл  = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода,Дата);
				Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
				КонецЕсли; 
				
				ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
				ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, ОбластьМакета);
				
				Если ДвеВалюты Тогда
					ОбластьМакета.Параметры.РукСдатчика = "";
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			Возврат ТабДокумент;
			
		Иначе // Объектов много - групповая печать.
			
			ОС1б_Страница1 = Новый ТабличныйДокумент();
			ОС1б_Страница2 = Новый ТабличныйДокумент();
			ОС1б_Страница3 = Новый ТабличныйДокумент();
			ОС1б_Страница4 = Новый ТабличныйДокумент();
			
			Если ДвеВалюты Тогда
				МакетОС1б      = ПолучитьОбщийМакет("ОС1бДвеВалюты");
			Иначе
				МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
			КонецЕсли; 
			
			Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
			Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
			Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
			Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
			Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
			Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
			Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
			Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
			Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
			Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");
			
			Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
			ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, Шапка1ОС1б);
			
			Если ДвеВалюты Тогда
				Шапка1ОС1б.Параметры.РукСдатчика = "";
			КонецЕсли;
				
			ОС1б_Страница1.Вывести(Шапка1ОС1б);
			
			Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница2.Вывести(Шапка2ОС1б);
			
			Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Шапка3ОС1б);
			
			Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
			Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница4.Вывести(Шапка4ОС1б);
			
			Пока ВыборкаПоОС.Следующий() Цикл
				
				Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
				Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
				УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВвода, ДатаВвода);
				Строка2ОС1б.Параметры.ДатаВвода  = ДатаВвода;
				Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
					Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
				КонецЕсли; 
				ОС1б_Страница2.Вывести(Строка2ОС1б);
				
				Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
				Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
				Строка3ОС1б.Параметры.СрокЭкспл = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаВвода,Дата);
				ОС1б_Страница3.Вывести(Строка3ОС1б);
				
			КонецЦикла;
			
			Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница2.Вывести(Строка2ПОС1б);
			
			Подвал2.Параметры.Заполнить(ВыборкаОС);
			Подвал2.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница2.Вывести(Подвал2);
			
			Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ПОС1б);
			
			Подвал3.Параметры.Заполнить(ВыборкаОС);
			Подвал3.Параметры.Заполнить(ВыборкаПоОС);
			Подвал3.Параметры.Сдал = ФизЛицоСдал;
			//Подвал3.Параметры.ДолжностьСдал = Должность;
			ЗаполнитьДанныеОрганизацииСдатчика(ВыборкаОС, Подвал3);
			ОС1б_Страница3.Вывести(Подвал3);
			
			ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
			ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
			ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
			ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецФункции // ПечатьОС1()
	
	// Функция формирует табличный документ унифицированной формы М-15
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Табличный документ по форме М-15.
	//
	Функция ПечатьМ15()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаОС.Номер КАК Номер,
		|	ПередачаОС.Дата КАК ДатаСоставления,
		|	ПередачаОС.Дата КАК ДатаДокумента,
		|	ПередачаОС.Организация КАК Организация,
		|	ПередачаОС.Организация КАК ЮрФизЛицо,
		|	ПередачаОС.Организация КАК Руководители,
		|	ПередачаОС.ПодразделениеОрганизации КАК Склад,
		|	ПередачаОС.ПодразделениеОрганизации.Наименование КАК СкладНаименование,
		|	ПередачаОС.Контрагент.Код КАК КонтрагентКод,
		|	ПередачаОС.Контрагент КАК Контрагент,
		|	ПередачаОС.КурсВзаиморасчетов КАК Курс,
		|	ПередачаОС.КратностьВзаиморасчетов КАК Кратность,
		|	ПередачаОС.ВалютаДокумента КАК ВалютаДокумента,
		|	ПередачаОС.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ПередачаОС.Сделка КАК Сделка,
		|	ПередачаОС.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
		|	ПередачаОС.ДоговорКонтрагента.ВидДоговора КАК ДоговорВид
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Ссылка = &ТекущийДокумент";
		
		ВыборкаШапки = Запрос.Выполнить().Выбрать();
		ВыборкаШапки.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПередачаОСОС.ОсновноеСредство КАК Товар,
		|	ВЫРАЗИТЬ(ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ПередачаОСОС.ОсновноеСредство.Код КАК ПорядковыйНомер,
		//|	ПередачаОСОС.СчетДоходовБУ.Код КАК СчетУчетаБУКод,
		//|	ПередачаОСОС.СчетДоходовБУ.Код КАК ПереданныеСчетУчетаБУКод,
		//|	ПередачаОСОС.СчетРасходовБУ.Код,
		|	""91.01"" КАК СчетУчетаБУКод,
		|	""91.01"" КАК ПереданныеСчетУчетаБУКод,
		|	""91.02"" КАК СчетРасходовБУКод,
		|	1 КАК Количество,
		|	ПередачаОСОС.Сумма * &Курс / &Кратность КАК Цена,
		|	ПередачаОСОС.Сумма * &Курс / &Кратность КАК Сумма,
		|	ПередачаОСОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ПередачаОСОС.СтавкаНДС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|ГДЕ
		|	ПередачаОСОС.Ссылка.Ссылка = &ТекущийДокумент";
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		
		Макет = ПолучитьОбщийМакет("М15");
		
		// Получаем области макета для вывода в табличный документ
		Шапка            = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("Строка");
		Подвал           = Макет.ПолучитьОбласть("Подвал");	
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета по умолчанию
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Загрузим настройки пользователя
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_М15";
		
		// Выведем шапку документа
		Шапка.Параметры.Заполнить(ВыборкаШапки);
		
		СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.ЮрФизЛицо, ВыборкаШапки.ДатаСоставления);
		
		Шапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаШапки);
		Шапка.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.Контрагент, ВыборкаШапки.ДатаСоставления), "ПолноеНаименование,");
		Шапка.Параметры.Основание                = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаШапки.Сделка), РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаШапки.Сделка, СокрЛП(ВыборкаШапки.Сделка.Метаданные().Представление())), "Договор " + СокрЛП(ВыборкаШапки.ДоговорНаименование));
		
		ТабДокумент.Вывести(Шапка);
		
		// Подготовим к выводу выборку строк
		ВыборкаСтрок.Колонки.Добавить("КоррСчет");
		ВыборкаСтрок.Колонки.Добавить("КоррКод");
		ВыборкаСтрок.Колонки.Добавить("СуммаСНДС");
		ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС");
		ВыборкаСтрок.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		
		Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл
			
			
			
			
			
			
			
			СуммаНДС    = СтрокаВыборки.СуммаНДС;
			Количество  = СтрокаВыборки.Количество;
			СуммаСНДС   = (СтрокаВыборки.Сумма + ?(ВыборкаШапки.СуммаВключаетНДС, 0, СтрокаВыборки.СуммаНДС));
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			//СтрокаВыборки.КоррСчет          = СтрокаВыборки.СчетРасходовБУКод;
			//СтрокаВыборки.КоррКод           = СтрокаВыборки.ТоварКод;
			СтрокаВыборки.ТоварНаименование = СокрЛП(СтрокаВыборки.ТоварНаименование);
			СтрокаВыборки.СуммаСНДС         = СуммаСНДС;
			СтрокаВыборки.СуммаБезНДС       = СуммаБезНДС;
			СтрокаВыборки.Цена              = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			СтрокаВыборки.ЕдиницаИзмеренияНаименование = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("Шт");
		КонецЦикла;
		
		// Заполним подвал документа
		
		Подвал.Параметры.Заполнить(ВыборкаШапки);
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапки.Руководители, ВыборкаШапки.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ИтогНДС      = ВыборкаСтрок.Итог("СуммаНДС");
		
		Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрок.Количество(), ,",,,с,,,,,0");
		Подвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаСНДС"), мВалютаРегламентированногоУчета);
		Подвал.Параметры.ИтогНДС                                    = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " руб. " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " коп. ", "______ руб. ______ коп.");
		Подвал.Параметры.ФИОРуководителя                            = Руководитель;
		Подвал.Параметры.ФИОГлавБухгалтера                          = Бухгалтер;
		
		// Инициализируем счетчик страниц
		НомерСтраницы = 1;
		
		// Выведем заголовок табличной части
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// Выведем выборку строк
		Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			//СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			
			// Если обрабатываемая строка - последняя, будем проверять, помещается ли подвал документа
			Если ВыборкаСтрок.Индекс(СтрокаВыборки) = ВыборкаСтрок.Количество() - 1 Тогда 
				СтрокаСПодвалом.Добавить(Подвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				//ТабДокумент.Вывести(ПодвалТаблицы);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы = НомерСтраницы + 1;
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем все подвалы
		//ТабДокумент.Вывести(ПодвалТаблицы);
		
		ТабДокумент.Вывести(Подвал);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьМ15()
	
	// Функция формирует табличный документ с печатной формой накладной,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьТОРГ12()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата КАК ДатаДокумента,
		|	Организация,
		|	Организация КАК ЮрФизЛицо,
		|	Организация КАК Поставщик,
		|	Организация КАК Контрагент,
		|	Организация КАК Руководители,
		|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
		|	      ТОГДА Контрагент
		|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
		|	      ТОГДА Организация
		|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
		|	Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
		|	Контрагент КАК Покупатель,
		|	Контрагент КАК Плательщик,
		|	ДоговорКонтрагента.Представление  КАК Основание,
		|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ВалютаДокумента,
		|	КурсВзаиморасчетов      КАК Курс,
		|	КратностьВзаиморасчетов КАК Кратность,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ                                                                
		|	Документ.ПередачаОС КАК ПередачаОС
		|
		|ГДЕ
		|	ПередачаОС.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПередачаОС.НомерСтроки КАК Номер,
		|	ПередачаОС.ОсновноеСредство,
		|	ВЫРАЗИТЬ(ПередачаОС.ОсновноеСредство.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ПередачаОС.ОсновноеСредство.Код КАК ТоварКод,
		|	1 КАК Количество,
		|	1 КАК КоличествоМест,
		|	""шт"" КАК БазоваяЕдиницаНаименование,
		|	""796"" КАК БазоваяЕдиницаКодПоОКЕИ,
		|	""шт"" КАК ВидУпаковки,
		|	1 КАК Коэффициент,
		|	1 КАК КоличествоВОдномМесте,
		|	ПередачаОС.Сумма * &Курс / &Кратность КАК Цена,
		|	ПередачаОС.Сумма * &Курс / &Кратность КАК Сумма,
		|	ПередачаОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ПередачаОС.СтавкаНДС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОС
		|
		|ГДЕ
		|	ПередачаОС.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО                                        
		|	Номер";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		
		Макет = ПолучитьОбщийМакет("ТОРГ12");
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
		СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		//Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		//	ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
		//	ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		//	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		//Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		//КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выведем заголовок таблицы
		НомерСтраницы = 1;
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСумма      = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Выводим многострочную часть докмента
		
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварКод = СокрЛП(ВыборкаСтрок.ТоварКод);
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
			
			СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		//Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
		//
		//ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		//ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОРуководителя = Руководитель;
		КонецЕсли;
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ГлавныйБухгалтер) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = ГлавныйБухгалтер;
		КонецЕсли;
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДолжностьРуководителя) Тогда
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		
		ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ12()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС1" тогда
			
			ТабДокумент = ПечатьОС1(Ложь);
		ИначеЕсли ИмяМакета = "ОС1ДвеВалюты" тогда
			
			ТабДокумент = ПечатьОС1(Истина);
		ИначеЕсли ИмяМакета = "М15" тогда
			
			ТабДокумент = ПечатьМ15();
			
		ИначеЕсли ИмяМакета = "ТОРГ12" тогда
			
			ТабДокумент = ПечатьТОРГ12();
			
		ИначеЕсли ИмяМакета = "ТОРГ12_ДвеВалюты" тогда
			
			ТабДокумент = ПечатьТОРГ12_ДвеВалюты();
			
		КонецЕсли;
		Если НЕ ТабДокумент = Неопределено Тогда
			ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
		КонецЕсли; 	
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС1,ОС1ДвеВалюты,М15,ТОРГ12,ТОРГ12_ДвеВалюты","Форма ОС-1","Форма ОС-1 в двух валютах","М-15","ТОРГ-12 (Товарная накладная)","ТОРГ-12 в двух валютах (Товарная накладная)");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента) Экспорт
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПок(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаОбщ = РезультатЗапросаПоТоварам.Выгрузить();
	//ТаблицаОбщ.Свернуть("КостЦентр","Сумма");  //изменила Федотова Л. РГ-Софт
	ТаблицаОбщ.Свернуть("КостЦентр","Сумма, НДС");
	
	ТаблицаОбщ.Колонки.Добавить("СчетНаПредоплату");
	ТаблицаОбщ.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаОбщ.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаОбщ.Колонки.Добавить("Регистратор");
	ТаблицаОбщ.Колонки.Добавить("Сделка");
	ТаблицаОбщ.Колонки.Добавить("СуммаРегл");
	ТаблицаОбщ.Колонки.Добавить("СуммаУпр");
	ТаблицаОбщ.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаОбщ.Колонки.Добавить("ИнвойсинговыйЦентр");
	
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	
	Для Каждого СтрокаТаб Из ТаблицаОбщ Цикл
		
		//СтрокаТаб.СуммаВзаиморасчетов = СтрокаТаб.Сумма;  изменила Федотова Л. РГ-Софт
		СтрокаТаб.СуммаВзаиморасчетов = ?(СуммаВключаетНДС,СтрокаТаб.Сумма,СтрокаТаб.Сумма+СтрокаТаб.НДС);
		СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, КурсВзаиморасчетов);
		// { RGS MYurkevich 13.02.2015 17:38:00 - RCA-0000032
		//СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов*КурсВзаиморасчетов;
		СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов*ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс;
		// } RGS MYurkevich 13.02.2015 17:38:35 - RCA-0000032
		СтрокаТаб.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
		
	КонецЦикла;
	
	ТаблицаОбщ.Колонки.Удалить("НДС");
	
	ТаблицаОбщ.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаОбщ.ЗаполнитьЗначения(ПодразделениеОрганизации,   "ПодразделениеОрганизации");
	ТаблицаОбщ.ЗаполнитьЗначения(Ссылка,     "Сделка");
	ТаблицаОбщ.ЗаполнитьЗначения(ЭтотОбъект,  "Регистратор");
	ТаблицаОбщ.ЗаполнитьЗначения(ИнвойсинговыйЦентр, "ИнвойсинговыйЦентр");
	
	//добавила по аналогии с реализацией Федотова Л., РГ-Софт, 20.08.09
	//делаем зачет аванса по ТЧ Предоплата
	ТаблАвансов = ТаблицаОбщ.Скопировать();
	ТаблАвансов.Очистить();
	Для Каждого Аванс Из Предоплата Цикл
		СтрокаАванса = ТаблАвансов.Добавить();
		Попытка
			СтрокаАванса.ИнвойсинговыйЦентр = Аванс.ДокументАванса.ИнвойсинговыйЦентр;
		Исключение
			СтрокаАванса.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		КонецПопытки;	
		СтрокаАванса.Сделка = Аванс.ДокументАванса;
		СтрокаАванса.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаАванса.СчетНаПредоплату = Аванс.СчетНаОплату;
		
		СтрокаАванса.СуммаВзаиморасчетов = Аванс.СуммаВзаиморасчетов;
		СтрокаАванса.СуммаРегл = Аванс.Сумма;
		СтрокаАванса.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаАванса.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыСПокупателямиОбороты.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты(, , , Сделка = &Сделка) КАК ВзаиморасчетыСПокупателямиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСПокупателямиОбороты.ПодразделениеОрганизации");
		Запрос.УстановитьПараметр("Сделка", Аванс.ДокументАванса);
		СтрокиРегистра = Запрос.Выполнить().Выгрузить();
		Если СтрокиРегистра.Количество() > 0 Тогда
			СтрокаАванса.ПодразделениеОрганизации = СтрокиРегистра[0].ПодразделениеОрганизации;
		КонецЕсли;
	КонецЦикла;  
	
	ИтогоЗачет = ТаблАвансов.Итог("СуммаВзаиморасчетов");
	
	ТаблицаИтог = ТаблицаОбщ.Скопировать();
	ТаблицаИтог.Очистить();
	//копируем зачеты авансов
	Для Каждого СтрокаТЧ Из ТаблАвансов Цикл
		СтрокаИтог = ТаблицаИтог.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтог,СтрокаТЧ);
	КонецЦикла;
	Если ИтогоЗачет =0 Тогда
		ТаблицаИтог = ТаблицаОбщ.Скопировать();
	Иначе
		Для Каждого СтрокаТЧ Из ТаблицаОбщ Цикл
			Если СтрокаТЧ.СуммаВзаиморасчетов > ИтогоЗачет Тогда
				СтрокаИтог = ТаблицаИтог.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтог,СтрокаТЧ);
				СтрокаИтог.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов - ИтогоЗачет;
				СтрокаИтог.СуммаРегл = СтрокаИтог.СуммаВзаиморасчетов*КурсВзаиморасчетов;
				СтрокаИтог.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаИтог.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
				ИтогоЗачет = 0;
			Иначе
				ИтогоЗачет = ИтогоЗачет - СтрокаТЧ.СуммаВзаиморасчетов;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаИтог;
	//конец изменения
	
	//Возврат ТаблицаОбщ;
	
КонецФункции // ПодготовитьТаблицуТоваров()
         
// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		//СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	//ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
		тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ОС";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""ОС"": ";
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		//Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокПогашенияСтоимостиБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок погашения стоимости (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
				//Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
				//	ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
				//	Отказ = Истина;
				//	Возврат;
				//КонецЕсли;
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок включения стоимости в состав расходов (НУ).",,, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()
         
Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт

	Если ЗначениеЗаполнено(ДокОбъект.ДокПодготовкаКПередачеОС) Тогда
		
		ТЧ_ОС = ДокОбъект.ОС.Выгрузить();
		ДокОбъект.ОС.Очистить();
		ТЧПодготовкаКПередаче = ДокОбъект.ДокПодготовкаКПередачеОС.ОС.Выгрузить();
		Если ТЧПодготовкаКПередаче.Количество()>0 Тогда
			ДокОбъект.ОС.Загрузить(ТЧПодготовкаКПередаче);
			Для каждого СтрокаТЧ Из ДокОбъект.ОС Цикл
				Строка = ТЧ_ОС.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
				Если НЕ Строка = Неопределено Тогда
					СтрокаТЧ.Сумма = Строка.Сумма;
					СтрокаТЧ.СтавкаНДС = Строка.СтавкаНДС;
					СтрокаТЧ.СуммаНДС = Строка.СуммаНДС;
					СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
					СтрокаТЧ.КостЦентр = Строка.КостЦентр;
					СтрокаТЧ.РБП = Строка.РБП;
					// { RGS LFedotova 26.07.2017 11:30:09 - вопрос SLI-0007316
					СтрокаТЧ.СуммаБезНДСРуб = Строка.СуммаБезНДСРуб;
					СтрокаТЧ.СуммаНДСРуб = Строка.СуммаНДСРуб;
					// } RGS LFedotova 26.07.2017 11:30:26 - вопрос SLI-0007316
				КонецЕсли;                               
			КонецЦикла; 
		КонецЕсли;
		
		//Для каждого Строка из ДокОбъект.ОС Цикл
		//	
		//	Строка.АмортизацияБУ = Строка.АмортизацияБУ + Строка.АмортизацияЗаМесяцБУ;
		//	Строка.АмортизацияНУ = Строка.АмортизацияНУ + Строка.АмортизацияЗаМесяцНУ;
		//	Строка.СтоимостьНУ   = Строка.СтоимостьНУ - Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
		//	
		//	Строка.АмортизацияЗаМесяцБУ                         = 0;
		//	Строка.АмортизацияЗаМесяцНУ                         = 0;
		//	Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		//	
		//КонецЦикла;
	Иначе
		СписокОС        = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтоимостьАмортизацияОСОстатки.ОсновноеСредство,
		|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
		|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
		|	АмортизацияЗаПериод.СуммаБУ КАК АмортизацияБУ,
		|	АмортизацияЗаПериод.СуммаНУ КАК АмортизацияНУ,
		|	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
		|	ОС_ИнвенНомер.ИнвентарныйНомер,
		|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
		|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
		|		ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер
		|	ИЗ
		|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения) КАК ОС_ИнвенНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
		|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
		|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
		|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
		|		ИЗ
		|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
		|		ГДЕ
		|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
		|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
		|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
		|			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
		|			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
		|		ИЗ
		|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
		|		ГДЕ
		|			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
		|			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
		|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
		
		Запрос.УстановитьПараметр("СписокОС", СписокОС);
		Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.Дата));
		
		табСведенияОС = Запрос.Выполнить().Выгрузить();
		табСведенияОС.Индексы.Добавить("ОсновноеСредство");
		
		Для Каждого Строка Из ОС Цикл	
			НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
			Если НЕ НайденноеОС = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	Если ЗначениеЗаполнено(Документ.ДокПодготовкаКПередачеОС) Тогда 
		Возврат; //Движения по регистру произвел документ "Подготовка к передаче ОС"
	КонецЕсли;
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ОсновноеСредство
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ОсновноеСредство В(&СписокОС)";
	
	Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ,
	|	ИсходнаяТаблица.АмортизацияБУ,
	|	ИсходнаяТаблица.АмортизацияНУ
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СтоимостьБУОстаток,
	|	ВложенныйЗапрос.СуммаКВОстаток,
	|	ВложенныйЗапрос.СтоимостьНУОстаток,
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.АмортизацияБУ,
	|	ВложенныйЗапрос.АмортизацияНУ
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУОстаток,
	|		СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКВОстаток,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаБУ, 0) КАК АмортизацияБУ,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) КАК АмортизацияНУ
	|	ИЗ
	|		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение КАК Подразделение,
	|				СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|				СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|			ИЗ
	|				РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|			ГДЕ
	|				РасчетАмортизацииОС.ПериодАмортизации <= &ПериодАмортизации
	|				И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетАмортизацииОС.ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение) КАК РасчетАмортизацииОССвернутый
	|			ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = РасчетАмортизацииОССвернутый.ОсновноеСредство
	|				И СтоимостьАмортизацияОСОстатки.Подразделение = РасчетАмортизацииОССвернутый.Подразделение) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ИсходнаяТаблица.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУОстаток, ИсходнаяТаблица.СтоимостьБУ) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ИсходнаяТаблица.СтоимостьНУ) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ИсходнаяТаблица.СуммаКВ) КАК СуммаКВ,
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияБУ, ИсходнаяТаблица.АмортизацияБУ) КАК АмортизацияБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ТаблицаПоОС.АмортизацияНУ) КАК АмортизацияНУ
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|		ПО ИсходнаяТаблица.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("МоментВремени", НалоговыйПериод);
	Запрос.УстановитьПараметр("ПериодАмортизации", НалоговыйПериод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока					 = НоваяТаблица.Добавить();
		НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Активность		 = Истина;
		НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
		НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.Подразделение    = Документ.ПодразделениеОрганизации;
		НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
		НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;      
		НоваяСтрока.СуммаКВ			 = Выборка.СуммаКВ;
		НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
		НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
	КонецЦикла;
	НоваяТаблица.ЗаполнитьЗначения(Документ, "Регистратор");
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();
	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ОСЗаполнитьДляСписка(ЭтотОбъект);
		//Хорошо бы здесь сравнить таблицы документа до заполнения и после, и если они совпадают, 
		//то ничего не записывать и не сообщать о перезаполнении
		Сообщить("Перезаполнена табличная часть документа " + Документ);
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван - 2010-01-24
Процедура ДвиженияПоРегиструВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ВыручкаДвижения = Движения.Выручка_SB;
	
	Для Каждого Запись Из ТаблицаПоТоварам Цикл
		Движение = ВыручкаДвижения.Добавить();
		Движение.Период 			= ДатаПроведения;
		Движение.Организация 		= Организация;
		Движение.Подразделение 		= ПодразделениеОрганизации;
		Движение.Контрагент 		= Контрагент;
		Движение.Договор 			= ДоговорКонтрагента;
		Движение.ВалютаДокумента 	= ВалютаДокумента;
		Движение.ВалютаДоговора 	= СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		//Движение.AU 				= Запись.AU;  //исправила Федотова Л., РГ-Софт, 02.02.2010
		Движение.AU 				= Запись.КостЦентр;
		Движение.ОсновноеСредство	= Запись.ОсновноеСредство;
		Движение.НалоговыйПериод 	= НалоговыйПериод;
		
		//Если УчитыватьНДС Тогда
		//	Движение.СуммаБезНДСРуб = ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.СуммаБезНДС);
		//	Движение.СуммаБезНДС 	= Запись.СуммаБезНДС;
		//	Движение.СуммаНДСРуб	= ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.НДС);
		//	Движение.СуммаНДС 		= Запись.НДС;				
		//Иначе
		//	Движение.СуммаБезНДСРуб = ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.Сумма);
		//	Движение.СуммаБезНДС 	= Запись.Сумма;
		//КонецЕсли;
		
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСРуб = Запись.СуммаБезНДС;
			Движение.СуммаБезНДС 	= Запись.СуммаБезНДСВал;
			Движение.СуммаНДСРуб	= Запись.НДС;
			Движение.СуммаНДС 		= Запись.НДСВал;				
		Иначе
			Движение.СуммаБезНДСРуб = Запись.Сумма;
			Движение.СуммаБезНДС 	= Запись.СуммаВал;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

//Добавила РГ-Софт - Бакшеева Анна - 2014-02-25
Процедура СформироватьДвиженияПоРегиструПродажиВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
	
	ПродажиВыручка_SB = Движения.ПродажиВыручка_SB;
	ТаблицаПродаж = ПродажиВыручка_SB.Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаПродаж.Добавить();
		
		Движение.Период	= СтруктураШапкиДокумента.ДатаПроведения;
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		// измерения
		Движение.НалоговыйПериод			= НалоговыйПериод;
		Движение.ИнвойсинговыйЦентр			= ИнвойсинговыйЦентр;
		Движение.ДоговорКонтрагента 		= ДоговорКонтрагента;
		Движение.ПодразделениеОрганизации 	= ПодразделениеОрганизации;
		Движение.ВалютаДокумента 			= ВалютаДокумента;
		Движение.ДокументРеализации 		= Ссылка;
		Движение.Тип 						= ПолучитьТип("FA");
		Движение.AU 						= СтрокаТЧ.КостЦентр;
		
		// ресурсы
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСRUR = СтрокаТЧ.СуммаБезНДС;
			Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаБезНДСВал;
			Движение.СуммаНДСRUR	= СтрокаТЧ.НДС;
			Движение.СуммаНДС 		= СтрокаТЧ.НДСВал;				
		Иначе
			Движение.СуммаБезНДСRUR = СтрокаТЧ.Сумма;
			Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаВал;
		КонецЕсли;
		
		СуммаОбщ = Движение.СуммаБезНДС + Движение.СуммаНДС;

		Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт 
			_СуммаUSD = Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2), 0);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, _СуммаUSD - Движение.СуммаНДСUSD, _СуммаUSD);
			Движение.Курс = ВнутреннийКурсUSD.Курс;
		Иначе
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.СуммаБезНДСВал, СтрокаТЧ.СуммаВал);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.НДСВал, 0);
			Движение.Курс = КурсВзаиморасчетов;
		КонецЕсли;
		
		// реквизиты
		Движение.ОсновноеСредство				= СтрокаТЧ.ОсновноеСредство;
		Движение.НоменклатураНаименование		= СтрокаТЧ.ОсновноеСредство.НаименованиеПолное;
		Движение.НоменклатураНаименованиеENG	= СтрокаТЧ.ОсновноеСредствоНаименованиеENG;
		
	КонецЦикла;
	
	ТаблицаПродаж.Свернуть("Период,Регистратор,НалоговыйПериод,ИнвойсинговыйЦентр,ДоговорКонтрагента,ПодразделениеОрганизации,
							|ВалютаДокумента,ДокументРеализации,Тип,AU,Номенклатура,ОсновноеСредство,НоменклатураНаименование,
							|НоменклатураНаименованиеENG,СтавкаНДС,Курс,WO,ПричинаКН",
							"СуммаБезНДСRUR,СуммаНДСRUR,СуммаБезНДСUSD,СуммаНДСUSD,СуммаБезНДС,СуммаНДС");  		
	
	ПродажиВыручка_SB.Загрузить(ТаблицаПродаж);
	ПродажиВыручка_SB.Записать();
	
КонецПроцедуры

Функция ПолучитьРубСумму(СтруктураШапкиДокумента, Сумма);
	
	СуммаРуб = 0;
	Если ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда //если валюта не рубли
		СуммаРуб = Сумма*СтруктураШапкиДокумента.КурсДокумента/?(СтруктураШапкиДокумента.КратностьДокумента = 0, 1, СтруктураШапкиДокумента.КратностьДокумента);
	Иначе
		СуммаРуб = Сумма;
	КонецЕсли;
	
	Возврат СуммаРуб;
	
КонецФункции

//Добавила РГ-Софт - Федотова Людмила - 2010-04-04
// Процедура выполняет движения по регистру НДС предъявленному,
// если происходит закрытие аванса
Процедура СформироватьДвиженияПоНДСПредъявленному(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	Если Предоплата.Количество() > 0 Тогда
		
		ВидВычета		= Перечисления.ВидыНДСкВычету.НДСсАвансов;
		ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
		
		НДСПредъявленный = Движения.НДСПредъявленный;
		ТаблицаНДСПредъявленный = НДСПредъявленный.Выгрузить();
		
		ТаблицаРеализации = ТаблицаПоТоварам.Скопировать();
		ТаблицаРеализации.Свернуть("СтавкаНДС", "СуммаВал,СуммаБезНДС,НДС,СуммаБезНДСВал,НДСВал");
		ТаблицаПредоплаты = Предоплата.Выгрузить(,"ДокументАванса,Сумма,СуммаВзаиморасчетов");
        ДоляОплаты = ТаблицаПредоплаты.Итог("СуммаВзаиморасчетов")/ТаблицаРеализации.Итог("СуммаВал");
		
		//Распределим предоплату по строкам реализации
		ТаблицаРеализации.Колонки.Добавить("ДокументАванса",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		ТаблицаРеализации.Колонки.Добавить("СуммаВзаиморасчетов",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КопияТаблицаРеализации = ТаблицаРеализации.Скопировать();
		ТаблицаРеализации.Очистить();
		Для каждого Строка Из КопияТаблицаРеализации Цикл
			Для  каждого СтрокаАвансов Из ТаблицаПредоплаты  Цикл
				НоваяСтрока = ТаблицаРеализации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.ДокументАванса = СтрокаАвансов.ДокументАванса;
				НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВал;
			КонецЦикла;
		КонецЦикла;
		
		Распределение = Новый Структура("СуммаВзаиморасчетов");
		ТаблицаРеализации = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПредоплаты,ТаблицаРеализации,Распределение);			
		
		//Распределим сумму оплаты в рублях по ставкам НДС
		ТаблицаРеализацииКопия = ТаблицаРеализации.СкопироватьКолонки();
		ТаблицаРеализацииКопия.Колонки.Добавить("Сумма",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаРеализации.СтавкаНДС,
		|	ТаблицаРеализации.ДокументАванса,
		|	ТаблицаРеализации.СуммаБезНДСВал,
		|	ТаблицаРеализации.НДСВал,
		|	ТаблицаРеализации.СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТабРеализации
		|ИЗ
		|	&ТаблицаРеализации КАК ТаблицаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПредоплаты.ДокументАванса,
		|	ТаблицаПредоплаты.Сумма,
		|	ТаблицаПредоплаты.СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТабПредоплаты
		|ИЗ
		|	&ТаблицаПредоплаты КАК ТаблицаПредоплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРеализации.СтавкаНДС,
		|	ТабРеализации.ДокументАванса КАК ДокументАванса,
		|	ТабПредоплаты.Сумма КАК ТабПредоплатыСумма,
		|	ТабПредоплаты.СуммаВзаиморасчетов КАК ТабПредоплатыСуммаВзаиморасчетов,
		|	ТабРеализации.СуммаБезНДСВал КАК ТабРеализацииСуммаБезНДСВал,
		|	ТабРеализации.НДСВал КАК ТабРеализацииНДСВал,
		|	ТабРеализации.СуммаВзаиморасчетов КАК ТабРеализацииСуммаВзаиморасчетов
		|ИЗ
		|	ТабПредоплаты КАК ТабПредоплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРеализации КАК ТабРеализации
		|		ПО ТабПредоплаты.ДокументАванса = ТабРеализации.ДокументАванса
		|ИТОГИ
		|	СУММА(ТабПредоплатыСумма),
		|	СУММА(ТабПредоплатыСуммаВзаиморасчетов),
		|	СУММА(ТабРеализацииСуммаБезНДСВал),
		|	СУММА(ТабРеализацииНДСВал),
		|	СУММА(ТабРеализацииСуммаВзаиморасчетов)
		|ПО
		|	ОБЩИЕ,
		|	ДокументАванса";
		
		Запрос.УстановитьПараметр("ТаблицаРеализации", ТаблицаРеализации);
		Запрос.УстановитьПараметр("ТаблицаПредоплаты", ТаблицаПредоплаты);
		
		Результат = Запрос.Выполнить();
		ВыборкаОбщиеИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        ВыборкаОбщиеИтоги.Следующий();
		ВыборкаДокументАванса = ВыборкаОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаДокументАванса.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаДокументАванса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяСтрока = ТаблицаРеализацииКопия.Добавить();
				НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
				НоваяСтрока.ДокументАванса = ВыборкаДетальныеЗаписи.ДокументАванса;
				НоваяСтрока.СуммаВзаиморасчетов = ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииСуммаВзаиморасчетов;
				НоваяСтрока.Сумма =ВыборкаДетальныеЗаписи.ТабРеализацииСуммаВзаиморасчетов/ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов
					*ВыборкаДетальныеЗаписи.ТабПредоплатыСумма;
				НоваяСтрока.СуммаБезНДСВал =  ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииСуммаБезНДСВал
					*ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов/ВыборкаОбщиеИтоги.ТабРеализацииСуммаВзаиморасчетов;
				НоваяСтрока.НДСВал =  ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииНДСВал
					*ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов/ВыборкаОбщиеИтоги.ТабРеализацииСуммаВзаиморасчетов;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ТаблицаРеализацииКопия Цикл
			СтрокаНДСПредъявленный = ТаблицаНДСПредъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДСПредъявленный,СтрокаТЧ);
			СтрокаНДСПредъявленный.Период = СтруктураШапкиДокумента.ДатаПроведения;
			СтрокаНДСПредъявленный.НалоговыйПериод 	= СтруктураШапкиДокумента.НалоговыйПериод;
			СтрокаНДСПредъявленный.Валюта 			= СтруктураШапкиДокумента.ВалютаДокумента;
			Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаНДСПредъявленный.СтавкаНДС 	= Перечисления.СтавкиНДС.НДС18_118;
			КонецЕсли; 
			СтрокаНДСПредъявленный.ПодразделениеОрганизации = ПодразделениеОрганизации;
			СтрокаНДСПредъявленный.Поставщик		= СтруктураШапкиДокумента.Контрагент;
			СтрокаНДСПредъявленный.ВидВычета 		= ВидВычета;
			СтрокаНДСПредъявленный.ВидЦенности		= ВидЦенности;
			СтрокаНДСПредъявленный.СчетФактура 		= СтрокаТЧ.ДокументАванса;
			СтрокаНДСПредъявленный.СуммаБезНДС		= СтрокаТЧ.Сумма/(1+УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС)/100);
			СтрокаНДСПредъявленный.НДС				= СтрокаТЧ.Сумма - СтрокаНДСПредъявленный.СуммаБезНДС;
			СтрокаНДСПредъявленный.СуммаБезНДСВВалюте	= СтрокаТЧ.СуммаБезНДСВал;
			СтрокаНДСПредъявленный.НДСВВалюте		= СтрокаТЧ.НДСВал;
			СтрокаНДСПредъявленный.Регистратор 		= Ссылка;
			СтрокаНДСПредъявленный.Активность 		= Истина;
			// { РГ-Софт Пахоменков А. 12.12.2014
			СтрокаНДСПредъявленный.ДоговорКонтрагента = ДоговорКонтрагента;
			// } РГ-Софт Пахоменков А. 12.12.2014
		КонецЦикла;
		
		НДСПредъявленный.Загрузить(ТаблицаНДСПредъявленный);
		НДСПредъявленный.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам,ТаблицаПок, Отказ, Заголовок)
	
	//Добавила РГ-Софт - Федотова Людмила - 2010-04-04 
	СформироватьДвиженияПоНДСПредъявленному(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Изменила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	//добавлен регистр, объединяющий регистры: "Продажи", "Выручка_SB" 
	////Добавил РГ-Софт - Пронин Иван - 2010-01-24
	//ДвиженияПоРегиструВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//<-
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;
	НомерЖурнала   = "ОС";
	
	////Фиксация выручки и НДС по БУ (проводки)
	//
	//ПроводкиБУ = Движения.Хозрасчетный;
	//
	
	//Определение параметров учетной политики по отражению НДС с продажи
	ТекУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация, "Нал").МоментОпределенияНалоговойБазыНДС;
	//Возможны корректировки таблиц при расчетах в у.е.
	
	//изменила по аналогии с реализацией Федотова Л, РГ-Софт, 20.08.09 ->
	//ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам), Отказ, Заголовок, НомерЖурнала);
	//Если Предоплата.Количество() = 0 Тогда
	ТаблицаАвансов = Новый ТаблицаЗначений();
	ТаблицаАвансов.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаАвансов.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
	ТаблицаАвансов.Колонки.Добавить("Сумма",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАвансов.Колонки.Добавить("СуммаВал",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаАвансов.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАвансов.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАвансов.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаАвансов, Отказ);
	
	// Создание движений документа по БУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		// Если ранее подготовка к передаче не была проведена
		Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
			
			Сообщить("Не найден соответствующий документ Подготовка к передаче ОС!", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		
	КонецЕсли; // Учет курсовых разниц
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
		//ПроводкиНУ.Записать(Ложь);
	КонецЕсли; 
	
	//Прокошева
	ТаблицаДвижений= Движения.ВзаиморасчетыСПокупателями.Выгрузить();
	
	Движения.ВзаиморасчетыСПокупателями.мПериод          = Дата;
	ТаблицаДвижений.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПок, ТаблицаДвижений);
	
	Движения.ВзаиморасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ВзаиморасчетыСПокупателями.ВыполнитьПриход();
	
	//Изменила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	//добавлен регистр, объединяющий регистры: "Продажи", "Выручка_SB" 
	
	//Продажи = Движения.Продажи;
	//ТаблицаПродаж = Продажи.Выгрузить();
	//ТаблицаПродаж.Очистить();
	////Движение по регистру Продажи,
	//Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	//	СтрокаПродаж = ТаблицаПродаж.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаПродаж,СтрокаТЧ);
	//	СтрокаПродаж.Регистратор = Ссылка;
	//	СтрокаПродаж.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
	//	СтрокаПродаж.ПодразделениеОрганизации = ПодразделениеОрганизации;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	СтрокаПродаж.Валюта = ВалютаДокумента;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	СтрокаПродаж.Период = СтруктураШапкиДокумента.Дата;
	//	//<-
	//	//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//	//СтрокаПродаж.Тип = "FA";
	//	СтрокаПродаж.Тип = ПолучитьТип("FA");
	//	//<-  
	//	СтрокаПродаж.ДокументРеализации = Ссылка;
	//	СтрокаПродаж.Номенклатура = СтрокаТЧ.ОсновноеСредство.НаименованиеПолное;
	//	СтрокаПродаж.AU = СтрокаТЧ.КостЦентр;
	//	//ресурсы
	//	СтрокаПродаж.СуммаRUR = СтрокаТЧ.Сумма;
	//	СтрокаПродаж.СуммаНДСRUR = СтрокаТЧ.НДС;
	//	//реквизиты
	//	СтрокаПродаж.НоменклатураНаименованиеENG = СтрокаТЧ.ОсновноеСредствоНаименованиеENG;
	//	//Добавила Федотова Л., РГ-Софт, 03.11.09 ->
	//	СтрокаПродаж.НалоговыйПериод = НалоговыйПериод;
	//	//<-
	//	ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
	//	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	//	ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
	//	Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт 
	//		СтрокаПродаж.СуммаUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		СтрокаПродаж.СуммаНДСUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		СтрокаПродаж.Курс = ВнутреннийКурсUSD.Курс;
	//	Иначе
	//		СтрокаПродаж.СуммаUSD = СтрокаТЧ.СуммаВал;
	//		СтрокаПродаж.СуммаНДСUSD = СтрокаТЧ.НДСВал;
	//		СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//ТаблицаПродаж.Свернуть("Период,НалоговыйПериод,Регистратор,ИнвойсинговыйЦентр,ПодразделениеОрганизации,ДоговорКонтрагента,Валюта,ДоговорКонтрагента,
	//|Тип,ДокументРеализации,Курс,ПричинаКН,УтвердилКН,AU,WO,СтавкаНДС,Номенклатура,НоменклатураНаименованиеENG,ДокументАванса,НомерСтрокиТабЧасти",
	//"СуммаRUR,СуммаНДСRUR,СуммаUSD,СуммаНДСUSD");
	//
	//Продажи.Загрузить(ТаблицаПродаж);
	//Продажи.Записать();
	//<-
	
	//Добавила Федотова Людмила, РГ-Софт, 07.10.09 ->
	//Движение по регистру КурсовыеРазницыSB 
	ПровестиПоРегиструКурсовыхРазниц(ЭтотОбъект, ТаблицаПоТоварам);
	//<-
	
	РБП = Движения.РасходыБудущихПериодов;
	Для Каждого Запись Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(Запись.РБП) ТОгда
			Движение = РБП.ДобавитьПриход();
			Движение.Период 			= ДатаПроведения;
			Движение.РасходБудущегоПериода = Запись.РБП;
			Движение.Сумма=Запись.РБП.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	//Добавила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	СформироватьДвиженияПоРегиструПродажиВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//<-
	
	//добавила Федотова Л., РГ-Софт, 14.10.15, вопрос SLI-0005864 ->
	//движения по регистру ИсполнениеБюджетаКонтракта
	Если СтруктураШапкиДокумента.СуммаКонтракта > 0 Тогда
		ИсполнениеБюджетаКонтракта = Движения.ИсполнениеБюджетаКонтракта;
		ТаблицаИсполнениеБюджетаКонтракта = ИсполнениеБюджетаКонтракта.Выгрузить();
		
		Строка = ТаблицаИсполнениеБюджетаКонтракта.Добавить();
		Строка.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Строка.Период = СтруктураШапкиДокумента.ДатаПроведения;
		Строка.Регистратор = Ссылка;
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаДокумента Тогда 
			Строка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		Иначе 	                                                     
			Строка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ДатаПроведения).Курс);
		КонецЕсли;
		Строка.Активность = Истина;
		
		ИсполнениеБюджетаКонтракта.Загрузить(ТаблицаИсполнениеБюджетаКонтракта);
		ИсполнениеБюджетаКонтракта.Записать();
	КонецЕсли; 
	//<-
	
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

//Добавил Пахоменков РГ-СОФТ 26.02.2012 
Функция ПолучитьТип(СтарыйТип)

	НужноПроставитьТипOther = ПрочиеПродажи;
	
	Если НужноПроставитьТипOther Тогда
		Возврат "OTH";		
	Иначе
		Возврат СтарыйТип;
	КонецЕсли;
	
КонецФункции


//Добавила Федотова Людмила, РГ-Софт, 02.10.09 ->
Процедура ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект, ТаблицаПоТоварам) Экспорт

	Если НЕ ДокументОбъект.Предоплата.Количество() = 0 Тогда
		Если НЕ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			КурсовыеРазницыSB = ДокументОбъект.Движения.КурсовыеРазницыSB;
			ТаблицаКурсовыхРазниц = КурсовыеРазницыSB.Выгрузить();
			
			ТаблицаРеализации = ТаблицаПоТоварам.Скопировать();
			ТаблицаРеализации.Свернуть("КостЦентр,СтавкаНДС", "СуммаВал,СуммаБезНДС,НДС,СуммаБезНДСВал,НДСВал");
			ТаблицаПредоплаты = ДокументОбъект.Предоплата.Выгрузить(,"ДокументАванса,Сумма,СуммаВзаиморасчетов");
			
			//Распределим предоплату по строкам реализации
			ТаблицаРеализации.Колонки.Добавить("ДокументАванса",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
			ТаблицаРеализации.Колонки.Добавить("СуммаВзаиморасчетов",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			КопияТаблицаРеализации = ТаблицаРеализации.Скопировать();
			ТаблицаРеализации.Очистить();
			Для каждого Строка Из КопияТаблицаРеализации Цикл
				Для  каждого СтрокаАвансов Из ТаблицаПредоплаты  Цикл
					НоваяСтрока = ТаблицаРеализации.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.ДокументАванса = СтрокаАвансов.ДокументАванса;
					НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВал;
				КонецЦикла;
			КонецЦикла;

			Распределение = Новый Структура("СуммаВзаиморасчетов");
			ТаблицаРеализации = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПредоплаты,ТаблицаРеализации,Распределение);			
			
			Для каждого СтрокаТаблицы Из ТаблицаРеализации Цикл
				Коэффициент = СтрокаТаблицы.СуммаВзаиморасчетов / СтрокаТаблицы.СуммаВал;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС * Коэффициент;
				СтрокаТаблицы.НДС = СтрокаТаблицы.НДС * Коэффициент;
				СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаБезНДСВал * Коэффициент;
				СтрокаТаблицы.НДСВал = СтрокаТаблицы.НДСВал * Коэффициент;
			КонецЦикла; 
			
			ВалютаSLB = Справочники.Валюты.НайтиПоНаименованию("SLB");
			ДанныеОВалютеSLB = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаSLB,ДокументОбъект.Дата);
			ДанныеОВалютеОтгрузки = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
			СоответствиеКурсыОплат = Новый Соответствие;
			Для каждого СтрокаТаблицы Из ТаблицаПредоплаты Цикл
				ДанныеОВалютеОплаты = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов,СтрокаТаблицы.ДокументАванса.Дата);
			    СоответствиеКурсыОплат.Вставить(СтрокаТаблицы.ДокументАванса, ДанныеОВалютеОплаты.Курс);
			КонецЦикла; 
			
			Для Каждого СтрокаТЧ Из ТаблицаРеализации Цикл
				СтрокаКурсовыхРазниц = ТаблицаКурсовыхРазниц.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКурсовыхРазниц,СтрокаТЧ);
				СтрокаКурсовыхРазниц.ИнвойсинговыйЦентр = ДокументОбъект.ИнвойсинговыйЦентр;
				СтрокаКурсовыхРазниц.ПодразделениеОрганизации = ДокументОбъект.ПодразделениеОрганизации;
				СтрокаКурсовыхРазниц.AU = СтрокаТЧ.КостЦентр;
				СтрокаКурсовыхРазниц.Сумма = СтрокаТЧ.СуммаБезНДС;
				СтрокаКурсовыхРазниц.СуммаUSD = СтрокаТЧ.СуммаБезНДСВал;
				СтрокаКурсовыхРазниц.СуммаНДС = СтрокаТЧ.НДС;
				СтрокаКурсовыхРазниц.СуммаНДСUSD = СтрокаТЧ.НДСВал;
				СтрокаКурсовыхРазниц.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
				СтрокаКурсовыхРазниц.ДокументРеализации = ДокументОбъект.Ссылка;
				СтрокаКурсовыхРазниц.ДокументОплаты = СтрокаТЧ.ДокументАванса;
				СтрокаКурсовыхРазниц.КурсSLB = ДанныеОВалютеSLB.Курс;
				СтрокаКурсовыхРазниц.КурсОплаты = СоответствиеКурсыОплат.Получить(СтрокаТЧ.ДокументАванса);
				СтрокаКурсовыхРазниц.КурсОтгрузки = ДанныеОВалютеОтгрузки.Курс;
				СтрокаКурсовыхРазниц.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
				
				СтрокаКурсовыхРазниц.Регистратор = ДокументОбъект.Ссылка;
				СтрокаКурсовыхРазниц.Период = ДокументОбъект.Дата;
				СтрокаКурсовыхРазниц.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
				СтрокаКурсовыхРазниц.Активность = Истина;
			КонецЦикла;
			
			КурсовыеРазницыSB.Загрузить(ТаблицаКурсовыхРазниц);
			КурсовыеРазницыSB.Записать();
		КонецЕсли;
	КонецЕсли;                                                                                           
КонецПроцедуры //ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект, ТаблицаПоТоварам)

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов, Отказ)
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	//Добавила Федотова Л., РГ-Софт, 03.11.09 ->
	//УчетНДС.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	//<-
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		//УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		//СчетОтнесенияНДС = ?(УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате,
		//ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет,
		//ПланыСчетов.Хозрасчетный.НДС);
		
		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	КонецЕсли;
	
	//УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, ТаблицаАвансов);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1 Как Субконто1,
		|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
		|	0 КАК Сумма02ВР,
		|	0 КАК Сумма01ПР,
		|	0 КАК Сумма01ВР,
		|	0 КАК Сумма01
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1,
		|	0,
		|	НалоговыйОстатки.СуммаОстатокКт,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1,
		|	0,
		|	0,
		|	НалоговыйОстатки.СуммаОстатокДт,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1,
		|	0,
		|	0,
		|	0,
		|	НалоговыйОстатки.СуммаОстатокДт,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1,
		|	0,
		|	0,
		|	0,
		|	0,
		|	НалоговыйОстатки.СуммаОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
		|
		|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
		|Субконто1 ";
		
		Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
		Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
		Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
		Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
		Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
		Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
		Запрос.УстановитьПараметр("СписокОС",       СписокОС);
		Список = ОС.Выгрузить();
		
		ПроводкиНУ              = Движения.Налоговый;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
			Если СтрокаТаблицы = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОсновноеСредство");
			
			Если Выборка.Сумма01Вр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
				ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
			Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
			Если Выборка.Сумма02Вр <> 0  Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
				
			КонецЕсли;
			
			Если Выборка.Сумма01Пр <> 0  Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
				ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
				
			КонецЕсли;
			Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			КонецЕсли;
			Если Выборка.Сумма02Пр <> 0  Тогда		
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе   // была подготовка к передаче
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НалоговыйОстатки.Субконто1 КАК Субконто1,
		|	ВЫБОР
		|		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаПР
		|			ТОГДА НалоговыйОстатки.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма01ПР,
		|	ВЫБОР
		|		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаВР
		|			ТОГДА НалоговыйОстатки.СуммаОстатокДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма01ВР
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|		&КонДата,
		|		Счет В ИЕРАРХИИ (&НалоговыйВыбытиеОС),
		|		,
		|		Организация = &Организация
		|		    И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
		|ИТОГИ
		|	СУММА(Сумма01ПР),
		|	СУММА(Сумма01ВР)
		|ПО
		|	Субконто1";
		
		Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
		Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
		Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
		Запрос.УстановитьПараметр("НалоговыйВыбытиеОС", ПланыСчетов.Налоговый.ВыбытиеОС);
		Запрос.УстановитьПараметр("СписокОС",       СписокОС);
		Список = ОС.Выгрузить();
		
		ПроводкиНУ              = Движения.Налоговый;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
			Если СтрокаТаблицы = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Сумма01Вр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
				ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
			
			Если Выборка.Сумма01Пр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
				ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//добавила Петроченко Н.Н. 16.01.13
 	ЭтоУтверждение = ?(ДополнительныеСвойства.Свойство("ЭтоУтверждение"), ДополнительныеСвойства.ЭтоУтверждение, Ложь);
	//Добавила Федотова Л., РГ-Софт, 26.01.16, вопрос 
 	ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения = ?(ДополнительныеСвойства.Свойство("ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения"), ДополнительныеСвойства.ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения, Ложь);
	
	Если ОбменДанными.Загрузка ИЛИ ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения Тогда 		
		Возврат;
	КонецЕсли;
	
	// ++ КДС 20.07.2015 Контроль проведения
	// контроль проведения должен быть включен как для организации, так и для контрагента
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	КонтрольПроведенияСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	// -- КДС 20.07.2015 Контроль проведения
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОСЗаполнитьДляСписка(ЭтотОбъект);
		Если НЕ ДокПодготовкаКПередачеОС.Пустая() Тогда
			// { RGS LFedotova 19.12.2017 23:26:05 - вопрос PA_-0000455
			//Если Дата < ДокПодготовкаКПередачеОС.Дата Тогда
			//	Если НЕ НачалоДня(Дата) = НачалоДня(ДокПодготовкаКПередачеОС.Дата) Тогда
			//		Сообщить("Измените дату документа, она не может быть меньше даты документа подготовки к передаче ОС");
			//		Отказ = Истина;
			//	Иначе	
			//	    Дата = ДокПодготовкаКПередачеОС.Дата + 1;
			//	КонецЕсли; 
			//КонецЕсли; 
			Если ДатаПроведения < ДокПодготовкаКПередачеОС.ДатаПроведения Тогда
				Сообщить("Измените дату проведения документа, она не может быть меньше даты проведения документа подготовки к передаче ОС");
				Отказ = Истина;
			КонецЕсли; 
			// } RGS LFedotova 19.12.2017 23:26:35 - вопрос PA_-0000455
		КонецЕсли;
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда		
		ИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнойИнвойсинговыйЦентр");		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	ТЗ = Документы.ПередачаОС.ПолучитьДанныеРБП(
			ОС.Выгрузить(,"ОсновноеСредство, РБП, Сумма, СуммаНДС, СтоимостьНУ, АмортизацияНУ, АмортизацияЗаМесяцНУ, СуммаКапитальныхВложенийВключаемыхВРасходыНУ"),
			Ссылка, мВалютаРегламентированногоУчета);
	Для каждого Стр Из ТЗ Цикл
		
		Если Стр.СуммаУбытка>0 И  стр.рбп.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + " отсутствует РБП");
		ИначеЕсли
			Стр.СуммаУбытка>0 И НЕ Стр.РБП.Пустая() Тогда
			Если Стр.РБП.Сумма<>Стр.СуммаУбытка Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "убыток в документе не совпадает с убытком РБП. В документе сумма составляет " + Стр.СуммаУбытка + ", а в РБП - " + Стр.РБП.Сумма);
			ИначеЕсли Стр.РБП.AU<>Стр.КостЦентр Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "AU не совпадает с AU в РБП. В документе AU " + Стр.КостЦентр + ", а в РБП - " + Стр.РБП.AU);
			ИначеЕсли Стр.РБП.TaxRegistration<>Стр.Местонахождение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "местонахождение не совпадает с местонахождением в РБП. В документе местонахождение " + Стр.Местонахождение + ", а в РБП - " + Стр.РБП.TaxRegistration);
			ИначеЕсли Стр.РБП.ДатаНачалаСписания<>Стр.ДатаНачалаСписания Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "дата начала списания не совпадает с датой начала списания в РБП. В документе дата начала списания " + Стр.ДатаНачалаСписания + ", а в РБП - " + Стр.РБП.ДатаНачалаСписания);
			Иначе
				ДатаОкончанияСписания=НачалоДня(ДобавитьМесяц(Стр.ДатаНачалаСписания, Стр.ОстаточныйСрок)-1);
				Если Стр.РБП.ДатаОкончанияСписания<>ДатаОкончанияСписания Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для Основного средства с кодом №" + Стр.ОС.Код + "дата окончания списания не совпадает с датой окончания списания в РБП. В документе дата окончания списания " + (ДобавитьМесяц(Стр.ДатаНачалаСписания, Стр.ОстаточныйСрок)-1) + ", а в РБП - " + Стр.РБП.ДатаОкончанияСписания);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	//Добавила Федотова Л, РГ-Софт, 03.11.09 по просьбе Зоткиной Е. ->
	Если НЕ ДокПодготовкаКПередачеОС.Пустая() Тогда
		Если НЕ ДокПодготовкаКПередачеОС.ПодразделениеОрганизации = ПодразделениеОрганизации Тогда
			Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
			ОбщегоНазначения.ОшибкаПриПроведении("Налоговая регистрация """ + СокрЛП(ПодразделениеОрганизации.Наименование) 
			+ """ текущего документа отличается от налоговой регистрации """ + СокрЛП(ДокПодготовкаКПередачеОС.ПодразделениеОрганизации.Наименование) + """ 
            |документа " + СокрЛП(ДокПодготовкаКПередачеОС),Отказ,Заголовок);
		КонецЕсли; 
	КонецЕсли;  
	//<-
	
	// { RGS MYurkevich 04.02.2015 16:08:25 - TP-00000694
	НаборЗаписейРегСеб = РегистрыНакопления.РегистрСебестоимости.СоздатьНаборЗаписей();
	НаборЗаписейРегСеб.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписейРегСеб.Прочитать();
	ТабЗаписейРегСеб = НаборЗаписейРегСеб.Выгрузить();
	// } RGS MYurkevich 04.02.2015 16:08:59 - TP-00000694

	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",Истина);
	//добавила Федотова Л., РГ-Софт, 14.10.15, вопрос SLI-0005864 ->
	СтруктураШапкиДокумента.Вставить("СуммаКонтракта", ДоговорКонтрагента.СуммаКонтракта);
	//
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации", "СделкаВидОперации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПередачаОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство,
	|	ПередачаОСОС.Сумма,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС КАК НДС,
	// { RGS LFedotova 26.07.2017 0:02:48 - вопрос SLI-0007316
	|	ПередачаОСОС.СуммаБезНДСРуб,
	|	ПередачаОСОС.СуммаНДСРуб,
	// } RGS LFedotova 26.07.2017 0:02:52 - вопрос SLI-0007316
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.СтоимостьБУ,
	|	ПередачаОСОС.АмортизацияБУ,
	|	ПередачаОСОС.АмортизацияЗаМесяцБУ,
	|	ПередачаОСОС.СтоимостьНУ,
	|	ПередачаОСОС.АмортизацияНУ,
	|	ПередачаОСОС.АмортизацияЗаМесяцНУ,
	|	ПередачаОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ПередачаОСОС.КостЦентр,
	|	ПередачаОСОС.РБП,
	|	ПередачаОСОС.ОсновноеСредство.НаименованиеENG,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&ДатаДокумента,
	|		    ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияСрезПоследних
	|		ПО ПередачаОСОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В( " + СписокОС + " ) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО ПередачаОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаДокумента, ОсновноеСредство В ( " + СписокОС + " ))  КАК СтоимостьАмортизацияОСОстатки
	|		ПО ПередачаОСОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	// Подготовим таблицу товаров для проведения
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	ТаблицаПок = ПодготовитьТаблицуПок(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	//ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);  //flp временно
	
	// Проверка заполнения ТЧ
	//ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок); //flp временно
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата);	
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПок, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// { RGS MYurkevich 02.02.2015 17:55:21 - TP-00000694
			ПровестиПоРегиструСебестоимости(ТаблицаПоТоварам, ТабЗаписейРегСеб);
			// } RGS MYurkevich 02.02.2015 17:55:23 - TP-00000694
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//Добавил РГ-Софт - Пронин Иван
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	//Конец добавления
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ОС
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрацияВГАИ.Период КАК Период,
	|			РегистрацияВГАИ.ОС КАК ОС,
	|			РегистрацияВГАИ.Локация КАК Локация,
	|			РегистрацияВГАИ.РегистрационныйЗнак КАК РегистрационныйЗнак
	|		ИЗ
	|			РегистрСведений.РегистрацияВГАИ КАК РегистрацияВГАИ
	|		ГДЕ
	|			РегистрацияВГАИ.Период = &Дата) КАК ВложенныйЗапрос
	|		ПО ПередачаОСОС.ОсновноеСредство = ВложенныйЗапрос.ОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
	|	И ВложенныйЗапрос.Локация = &ПустаяСсылка
	|	И ВложенныйЗапрос.РегистрационныйЗнак = """"";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	МассивОС = Результат.Выгрузить().ВыгрузитьКолонку("ОС");
	
	Для каждого ЭлементМассива Из МассивОС Цикл
		НаборЗаписей = РегистрыСведений.РегистрацияВГАИ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(Дата));
		НаборЗаписей.Отбор.ОС.Установить(ЭлементМассива);
		НаборЗаписей.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ЗаполнитьДляСпискаОС(Док, ОС, Период) Экспорт
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Док.ДокПодготовкаКПередачеОС) Тогда
		
		СписокОС        = ОС.ВыгрузитьКолонку("ОсновноеСредство");
		МоментДокумента = Период;
		
		ТЗ = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Док.Организация, СписокОС, МоментДокумента);
		
		ТаблицаАмортизацииБУ = Новый ТаблицаЗначений();
		ТаблицаИзносаБУ      = Новый ТаблицаЗначений();
		ТаблицаАмортизацииНУ = Новый ТаблицаЗначений();
		
	Иначе
		
		ТЗ = Док.ДокПодготовкаКПередачеОС.ОС.Выгрузить();
		
		ТЗ.Колонки.ОсновноеСредство.Имя = "ОС_БУ";
		ТЗ.Колонки.Добавить("ОС_НУ");
		ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("ОС_БУ"), "ОС_НУ");
		ТЗ.Колонки.Добавить("ПервоначальнаяСтоимость");
		ТЗ.Колонки.Добавить("ПорядокПогашенияСтоимостиБУ");
		ТЗ.Колонки.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		
		// Дополнение таблицы ТаблицаПоОС информацией о погашении стоимости объектов ОС для БУ и НУ
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекОрганизация", Док.ДокПодготовкаКПередачеОС.Организация);
		Запрос.УстановитьПараметр("ТекДата",        Док.ДокПодготовкаКПередачеОС.Дата);
		Запрос.УстановитьПараметр("СписокОС",       ТЗ.ВыгрузитьКолонку("ОС_БУ"));
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПервоначальныеСведения.ОсновноеСредство,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведения.ПорядокПогашенияСтоимости,
		|	ПервоначальныеСведения.ПорядокВключенияСтоимостиВСоставРасходов
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&ТекДата,  ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения";
		ТаблицаПогашенияСтоимости = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаОС Из ТЗ Цикл
			
			СтрокаПогашенияСтоимости = ТаблицаПогашенияСтоимости.Найти(СтрокаОС.ОС_БУ, "ОсновноеСредство");
			
			Если НЕ СтрокаПогашенияСтоимости = Неопределено Тогда
				СтрокаОС.ПорядокПогашенияСтоимостиБУ                  = СтрокаПогашенияСтоимости.ПорядокПогашенияСтоимости;
				СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ   = СтрокаПогашенияСтоимости.ПорядокВключенияСтоимостиВСоставРасходов;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из ТЗ Цикл
			
			Строка.АмортизацияБУ = Строка.АмортизацияБУ + Строка.АмортизацияЗаМесяцБУ;
			Строка.АмортизацияНУ = Строка.АмортизацияНУ + Строка.АмортизацияЗаМесяцНУ;
			Строка.СтоимостьНУ   = Строка.СтоимостьНУ - Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
			
			Строка.АмортизацияЗаМесяцБУ                         = 0;
			Строка.АмортизацияЗаМесяцНУ                         = 0;
			Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТЗ.Количество() > 0 Тогда
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
			
			// Построение списка ОС, по которым начисляется амортизация, и расчет амортизации по ним для БУ
			СписокОС_НачислениеАмортизацииБУ = Новый Массив();
			МассивОС_НачислениеАмортизацииБУ = ТЗ.НайтиСтроки(Новый Структура("ПорядокПогашенияСтоимостиБУ", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации));
			
			Для Каждого СтрокаОС Из МассивОС_НачислениеАмортизацииБУ Цикл
				СписокОС_НачислениеАмортизацииБУ.Добавить(СтрокаОС.ОС_БУ);
			КонецЦикла;	
			
			Если СписокОС_НачислениеАмортизацииБУ.Количество() > 0 Тогда
				ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, Организация, СписокОС_НачислениеАмортизацииБУ);
			КонецЕсли;
			
			// Построение списка ОС, по которым начисляется износ, и расчет износа по ним для БУ
			СписокОС_НачислениеИзносаБУ = Новый Массив();
			МассивОС_НачислениеИзносаБУ = ТЗ.НайтиСтроки(Новый Структура("ПорядокПогашенияСтоимостиБУ", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса));
			
			Для Каждого СтрокаОС Из МассивОС_НачислениеИзносаБУ Цикл
				СписокОС_НачислениеИзносаБУ.Добавить(СтрокаОС.ОС_БУ);
			КонецЦикла;	
			
			Если СписокОС_НачислениеИзносаБУ.Количество() > 0 Тогда
				ТаблицаИзносаБУ = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Дата, Организация, СписокОС_НачислениеИзносаБУ);
			КонецЕсли;
			
			// Построение списка ОС, по которым начисляется амортизация, и расчет амортизации по ним для НУ
			СписокОС_НачислениеАмортизацииНУ = Новый Массив();
			МассивОС_НачислениеАмортизацииНУ = ТЗ.НайтиСтроки(Новый Структура("ПорядокВключенияСтоимостиВСоставРасходовНУ", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации));
			
			Для Каждого СтрокаОС Из МассивОС_НачислениеАмортизацииНУ Цикл
				СписокОС_НачислениеАмортизацииНУ.Добавить(СтрокаОС.ОС_БУ);
			КонецЦикла;	
			
			Если ОтражатьВНалоговомУчете И СписокОС_НачислениеАмортизацииНУ.Количество() > 0 Тогда
				ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, Организация, СписокОС_НачислениеАмортизацииНУ);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Строка Из ОС Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство, "ОС_БУ, ОС_НУ"); 
			
			//определение AU
			ОтборОС = Новый Структура("ОсновноеСредство,Организация",Строка.ОсновноеСредство, Организация );
			МестоНахожд = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(Дата,ОтборОС);
			Строка.КостЦентр = МестоНахожд[0].КостЦентр;
			
			
			//Проверка наличия исходных данных
			ЕстьИсходныеДанные = Ложь;
			
			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Док.ДокПодготовкаКПередачеОС) Тогда
				
				Если СтрокаТЗ = Неопределено Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+Строка.ОсновноеСредство+"> отсутствует в указанном документе подготовки к передаче.",,, СтатусСообщения.Важное);
				Иначе
					ЕстьИсходныеДанные = Истина;
				КонецЕсли;
				
			Иначе
				
				Если СтрокаТЗ = Неопределено Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+Строка.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
				ИначеЕсли СтрокаТЗ.СнятоСУчета Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+Строка.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
				ИначеЕсли СтрокаТЗ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+Строка.ОсновноеСредство+"> списано при принятии к учету в указанной организации.",,, СтатусСообщения.Важное);
				Иначе
					ЕстьИсходныеДанные = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЕстьИсходныеДанные Тогда
				
				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;
				
				Если ОтражатьВНалоговомУчете Тогда
					
					Строка.СтоимостьНУ          = 0;
					Строка.АмортизацияНУ        = 0;
					Строка.АмортизацияЗаМесяцНУ = 0;
					
				КонецЕсли;
				
			Иначе
				
				Если СтрокаТЗ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
					
					Строка.СтоимостьБУ          = СтрокаТЗ.ПервоначальнаяСтоимость;
					Строка.АмортизацияБУ        = 0;
					Строка.АмортизацияЗаМесяцБУ = 0;
					
				ИначеЕсли СтрокаТЗ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
					
					Строка.СтоимостьБУ          = 0;
					Строка.АмортизацияБУ        = 0;
					Строка.АмортизацияЗаМесяцБУ = 0;
					
				ИначеЕсли СтрокаТЗ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
					
					Строка.СтоимостьБУ              = СтрокаТЗ.СтоимостьБУ;
					Строка.АмортизацияБУ            = СтрокаТЗ.АмортизацияБУ;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
						СтрокаТаблицаАмортизацииБУ = ТаблицаАмортизацииБУ.Найти(Строка.ОсновноеСредство, "ОС");
						Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБУ = Неопределено, 0, СтрокаТаблицаАмортизацииБУ.Бух);
					Иначе
						Строка.АмортизацияЗаМесяцБУ = СтрокаТЗ.АмортизацияЗаМесяцБУ;
					КонецЕсли;
					
				ИначеЕсли СтрокаТЗ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
					
					Строка.СтоимостьБУ              = СтрокаТЗ.СтоимостьБУ;
					Строка.АмортизацияБУ            = СтрокаТЗ.АмортизацияБУ;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
						СтрокаТаблицаИзносаБУ = ТаблицаИзносаБУ.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
						Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаИзносаБУ = Неопределено, 0, СтрокаТаблицаИзносаБУ.Износ);
					Иначе
						Строка.АмортизацияЗаМесяцБУ = СтрокаТЗ.АмортизацияЗаМесяцБУ;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОтражатьВНалоговомУчете Тогда
					
					Если СтрокаТЗ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
						
						Строка.СтоимостьНУ                                      = СтрокаТЗ.СтоимостьНУ;
						Строка.АмортизацияНУ                                    = СтрокаТЗ.АмортизацияНУ;
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
							СтрокаТаблицаАмортизацииНУ                          = ТаблицаАмортизацииНУ.Найти(Строка.ОсновноеСредство, "ОС");
							Строка.АмортизацияЗаМесяцНУ                         = ?(СтрокаТаблицаАмортизацииНУ = Неопределено, 0, СтрокаТаблицаАмортизацииНУ.Налог);
							Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = ?(СтрокаТаблицаАмортизацииНУ = Неопределено, 0, СтрокаТаблицаАмортизацииНУ.СуммаКапитальныхВложенийВключаемыхВРасходы);
						Иначе
							Строка.АмортизацияЗаМесяцНУ                         = СтрокаТЗ.АмортизацияЗаМесяцНУ;
							Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = СтрокаТЗ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						КонецЕсли;
						
					Иначе
						
						Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
						Строка.АмортизацияНУ        = 0;
						Строка.АмортизацияЗаМесяцНУ = 0;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Сообщить("Данные для заполнения отсутствуют.");
		
	КонецЕсли;
	
КонецПроцедуры
	
	// Функция формирует табличный документ с печатной формой накладной,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьТОРГ12_ДвеВалюты()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПередачаОС.Номер,
		|	ПередачаОС.Дата КАК ДатаДокумента,
		|	ПередачаОС.Организация,
		|	ПередачаОС.Организация КАК ЮрФизЛицо,
		|	ПередачаОС.Организация КАК Поставщик,
		|	ПередачаОС.Организация КАК Контрагент,
		|	ПередачаОС.Организация КАК Руководители,
		|	ВЫБОР
		|		КОГДА ПередачаОС.Грузополучатель = &ПустойКонтрагент
		|			ТОГДА ПередачаОС.Контрагент
		|		ИНАЧЕ ПередачаОС.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА ПередачаОС.Грузоотправитель = &ПустойКонтрагент
		|			ТОГДА ПередачаОС.ПодразделениеОрганизации
		|		ИНАЧЕ ПередачаОС.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	ПередачаОС.Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
		|	ПередачаОС.Контрагент КАК Покупатель,
		|	ПередачаОС.Контрагент КАК Плательщик,
		|	ПередачаОС.ДоговорКонтрагента.Представление КАК Основание,
		|	ПередачаОС.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ПередачаОС.ВалютаДокумента,
		|	ПередачаОС.КурсВзаиморасчетов КАК Курс,
		|	ПередачаОС.КратностьВзаиморасчетов КАК Кратность,
		|	ПередачаОС.УчитыватьНДС,
		|	ПередачаОС.СуммаВключаетНДС
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПередачаОС.НомерСтроки КАК Номер,
		|	ПередачаОС.ОсновноеСредство,
		|	ВЫРАЗИТЬ(ПередачаОС.ОсновноеСредство.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ПередачаОС.ОсновноеСредство.Код КАК ТоварКод,
		|	1 КАК Количество,
		|	1 КАК КоличествоМест,
		|	""шт"" КАК БазоваяЕдиницаНаименование,
		|	""796"" КАК БазоваяЕдиницаКодПоОКЕИ,
		|	""шт"" КАК ВидУпаковки,
		|	1 КАК Коэффициент,
		|	1 КАК КоличествоВОдномМесте,
		|	ПередачаОС.Сумма * &Курс / &Кратность КАК Цена,
		|	ПередачаОС.Сумма КАК ЦенаUSD,
		|	ПередачаОС.Сумма * &Курс / &Кратность КАК Сумма,
		|	ПередачаОС.Сумма КАК СуммаUSD,
		|	ПередачаОС.СуммаНДС КАК СуммаНДСUSD,
		|	ПередачаОС.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ПередачаОС.СтавкаНДС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОС
		|
		|ГДЕ
		|	ПередачаОС.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО                                        
		|	Номер";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		
		Макет = ПолучитьОбщийМакет("ТОРГ12ДвеВалюты");
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
		СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		//Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		//	ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
		//	ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		//	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		//Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		//КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выведем заголовок таблицы
		НомерСтраницы = 1;
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоСуммаНаСтраницеUSD   = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		ИтогоСуммаСНДСНаСтраницеUSD = 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСуммаСНДСUSD  = 0;
		ИтогоСумма      = 0;
		ИтогоСуммаUSD   = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Выводим многострочную часть докмента
		
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
			
			СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			СуммаСНДСUSD = СуммаСНДС/Шапка.Курс;
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			//изменила Федотова Л., РГ-Софт, 06.11.12, вопрос №SLI-0002974
			//СуммаБезНДСUSD = ВыборкаСтрок.СуммаUSD;
			СуммаБезНДСUSD = ?(СуммаВключаетНДС,ВыборкаСтрок.СуммаUSD-ВыборкаСтрок.СуммаНДСUSD,ВыборкаСтрок.СуммаUSD);
			
			ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДСUSD   = СуммаСНДСUSD;
			ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДСUSD = СуммаБезНДСUSD;
			ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			ОбластьМакетаСтрока.Параметры.ЦенаUSD        = СуммаБезНДСUSD / ?(Количество = 0, 1, Количество);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD = ИтогоСуммаСНДСНаСтраницеUSD;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоСуммаНаСтраницеUSD      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				ИтогоСуммаСНДСНаСтраницеUSD  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоСуммаНаСтраницеUSD   = ИтогоСуммаНаСтраницеUSD   + СуммаБезНДСUSD;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			ИтогоСуммаСНДСНаСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD  + СуммаСНДСUSD;
			
			// Увеличим итоги по документу
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоСуммаUSD   = ИтогоСуммаUSD   + СуммаБезНДСUSD;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			ИтогоСуммаСНДСUSD  = ИтогоСуммаСНДСUSD  + СуммаСНДСUSD;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD;
		
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогСуммыUSD   = ИтогоСуммаUSD;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДСUSD  = ИтогоСуммаСНДСUSD;
		
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		//Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
		//
		//ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		//ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		//Если ЗначениеЗаполнено(Руководитель) Тогда
		//	ОбластьМакетаПодвал.Параметры.ФИОРуководителя = Руководитель;
		//КонецЕсли;
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ГлавныйБухгалтер) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = ГлавныйБухгалтер;
		КонецЕсли;
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДолжностьРуководителя) Тогда
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
		КонецЕсли;
		                     
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.СуммаПрописьюUSD                           = РаботаСДиалогами.СформироватьСуммуПрописью(ИтогоСуммаСНДСUSD, Шапка.ВалютаДокумента);
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = РаботаСДиалогами.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		
		ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ12()

// { RGS MYurkevich 02.02.2015 17:53:26 - TP-00000694
Процедура ПровестиПоРегиструСебестоимости(ТаблицаПоТоварам, НаборЗаписей)
	РегСебест = Движения.РегистрСебестоимости;
	Для Каждого Строка Из ТаблицаПоТоварам Цикл 
		ПараметрыОтбора = Новый Структура("Объект", Строка.ОсновноеСредство);
		ПараметрыОтбора.Вставить("AU", Строка.КостЦентр);
		ПараметрыОтбора.Вставить("РучнаяКорректировка", Истина);
		НайденныеСтроки = НаборЗаписей.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Движение = РегСебест.Добавить();
            ЗаполнитьЗначенияСвойств(Движение, НайденныеСтроки[0]);
			НаборЗаписей.Удалить(НайденныеСтроки[0]);
			Продолжить;
		КонецЕсли;
		Движение = РегСебест.Добавить();
		Движение.Период             = ДатаПроведения;
		Движение.Покупатель         = Контрагент;
		Движение.Объект             = Строка.ОсновноеСредство;
		Движение.AU                 = Строка.КостЦентр;
		Движение.СтоимостьПродажи   = Строка.СуммаБезНдс;
		Движение.ДокументРеализации = Ссылка;
		Движение.Себестоимость      = Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ;
		Движение.Поставщик          = Строка.ОсновноеСредство.Поставщик;
		Движение.Комментарий        = "Основные средства";
		Если ЗначениеЗаполнено(Строка.ОсновноеСредство.НомерЗаказаНаПриобретение) И НЕ ЗначениеЗаполнено(Движение.Поставщик) Тогда
			PO = CustomsСервер.НайтиPOПоНомеру(Строка.ОсновноеСредство.НомерЗаказаНаПриобретение);
			Если PO <> Неопределено Тогда
				Движение.Поставщик = PO.Поставщик;
				Движение.PO        = PO;
			КонецЕсли;
		КонецЕсли;
		КонецЦикла;
	
КонецПроцедуры	
// } RGS MYurkevich 02.02.2015 17:53:46 - TP-00000694

Процедура ПриЗаписи(Отказ)
	
	// { RGS AFokin 19.06.2018 23:59:59  SLI-0007594
	// при отмене проведения из модуля ICO администратором
	// { RGS LFedotova 17.07.2018 15:31:35 - вопрос SLI-0007621
	//Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	Если ДополнительныеСвойства.Свойство("РежимЗаписи") И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	// } RGS LFedotova 17.07.2018 15:32:00 - вопрос SLI-0007621 
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ЭтоДокументИнтеркомпани", ЭтотОбъект.Метаданные()) Тогда
			Если ЭтоДокументИнтеркомпани И ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения")  
					И ДополнительныеСвойства.ПропуститьПроверкуЗапретаИзменения Тогда
					ОбменДанными.Загрузка = Истина;
					Возврат;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	// } RGS AFokin 19.06.2018 23:59:59 SLI-0007594			

	//Добавила Федотова Л., РГ-Софт, 10.08.15, вопрос PA_-0000374
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ЭтоУтверждение = Ложь; 
