
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем TaxRegistration
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда
		МассивAU = Goods.ВыгрузитьКолонку("AU");
		ЭтотОбъект.TaxRegistration = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	КонецЕсли;
	
	// Дозаполним реквизиты
	ОбщегоНазначения.УстановитьЗначение(PoNumber, СокрЛП(PoNumber));
	
	//Reference
	Если Не ЗначениеЗаполнено(Reference) Тогда
		Reference = PONumber;	
	КонецЕсли;
	
	// Дозаполним реквизиты
	Если НЕ ЗначениеЗаполнено(Responsible) Тогда
		Responsible = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	ОбщегоНазначения.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(CreationDate) Тогда
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(LastModified) Тогда
		LastModified = ТекущаяДата();
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(HasFinishedGoods, Goods.Найти(Истина, "FinishedGood") <> Неопределено);
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи);
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьУникальность(СтруктураРезультатов.КорректировкиСТакимЖеНомером, Отказ);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
		ПроверитьЗаполнениеШапки(Отказ);
		
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураРезультатов.GoodsProps, СтруктураРезультатов.UOMsProps, Отказ);
		
		Если НЕ Отказ И Проведен Тогда
			Движения.InventoryBatches.Записать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	Если НЕ ОбменДанными.Загрузка
		И НЕ ПометкаУдаления Тогда
		
		// Проверка уникальности номера
		СтруктураПараметров.Вставить("Номер", Номер);
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураПараметров.Вставить("Дата", Дата);
		СтруктураТекстов.Вставить("КорректировкиСТакимЖеНомером", 
			"ВЫБРАТЬ
			|	Таблица.Представление
			|ИЗ
			|	Документ.InventoryКорректировка КАК Таблица
			|ГДЕ
			|	Таблица.Номер = &Номер
			|	И Таблица.Дата = &Дата
			|	И Таблица.Ссылка <> &Ссылка
			|	И (НЕ Таблица.ПометкаУдаления)");
				
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
							
			// Реквизиты Goods
			СтруктураПараметров.Вставить("Goods", Goods.ВыгрузитьКолонку("Good"));
			СтруктураТекстов.Вставить("GoodsProps",
				"ВЫБРАТЬ
				|	InventoryGoods.Ссылка,
				|	InventoryGoods.StandardUOM,
				|	InventoryGoods.ПометкаУдаления
				|ИЗ
				|	Справочник.InventoryGoods КАК InventoryGoods
				|ГДЕ
				|	InventoryGoods.Ссылка В(&Goods)");
				
			// Реквизиты UOMs
			СтруктураПараметров.Вставить("UOMs", Goods.ВыгрузитьКолонку("UOM"));
			СтруктураТекстов.Вставить("UOMsProps",
				"ВЫБРАТЬ
				|	UOMs.Ссылка,
				|	UOMs.StandardUOM,
				|	UOMs.ПометкаУдаления
				|ИЗ
				|	Справочник.UOMs КАК UOMs
				|ГДЕ
				|	UOMs.Ссылка В(&UOMs)");
			
		КонецЕсли;
		
		Возврат РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
	КонецЕсли;
 		
	
		
КонецФункции

Процедура ПроверитьУникальность(Результат, Отказ)
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не уникальная комбинация номера и дата! Такая комбинация используется в """ + Выборка.Представление + """",
			ЭтотОбъект, "Номер", , Отказ);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""No."" не заполнено!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Date"" не заполнено!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(InventoryLocation) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Inventory location"" не заполнено!",
			ЭтотОбъект, "InventoryLocation", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда    //SLI-0004537
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""TaxRegistration"" не заполнено!",
			ЭтотОбъект, "TaxRegistration", , Отказ);
	КонецЕсли;

	//Для Каждого СтрокаТЧ Из Goods Цикл
	//	
	//	Если (СтрокаТЧ.Quantity < 0
	//		ИЛИ СтрокаТЧ.FiscalSum < 0)
	//		И НЕ ЗначениеЗаполнено(TaxRegistration) Тогда
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			"Поле ""TaxRegistration"" не заполнено!",
	//			ЭтотОбъект, "TaxRegistration", , Отказ);
	//			
	//		Прервать;
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	//
	//Если HasFinishedGoods И НЕ ЗначениеЗаполнено(PoNumber) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Поле ""PO number"" не заполнено!",
	//		ЭтотОбъект, "PONumber", , Отказ);
	//КонецЕсли; 	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(РезультатGoodsProps, РезультатUOMsProps, Отказ)
	
	GoodsProps = РезультатGoodsProps.Выгрузить();
	GoodsProps.Индексы.Добавить("Ссылка");
	
	UOMsProps = РезультатUOMsProps.Выгрузить();
	UOMsProps.Индексы.Добавить("Ссылка");
	
	Для каждого Стр ИЗ Goods Цикл
		
		GoodProps = Неопределено;
		UOMProps = Неопределено;
		
		Если ЗначениеЗаполнено(Стр.Good) Тогда
			
			GoodProps = GoodsProps.Найти(Стр.Good, "Ссылка");
			Если GoodProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченный на удаление Good!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(GoodProps.StandardUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": у Good не заполнена Standard UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Good"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
				
				
		КонецЕсли;
						
		Если ЗначениеЗаполнено(Стр.UOM) Тогда
			
			UOMProps = UOMsProps.Найти(Стр.UOM, "Ссылка");
			Если UOMProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченная на удаление UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
			КонецЕсли;
			
			Если GoodProps <> Неопределено
				И GoodProps.StandardUOM.StandardUOM <> UOMProps.StandardUOM Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": Good standard UOM (" + GoodProps.StandardUOM + ") не соответствует UOM standard UOM (" + UOMProps.StandardUOM + ")!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""UOM"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
		КонецЕсли;	
		
		//Если НЕ ЗначениеЗаполнено(Стр.Quantity) Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Qty"" не заполнено!",
		//		ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Quantity", , Отказ);
		//КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры

// ОБРАБОТКА ПРОВЕДЕНИЯ

// ДОДЕЛАТЬ
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	НаборДвижений = Движения.InventoryBatches;
	НаборДвижений.Записывать = Истина;
	
	//добавил Трефиленков Дмитрий, РГ-Софт, 17.11.2011
	Если ЗначениеЗаполнено(InventoryСписание) Тогда //отдельный алгоритм - партии берутся из документа Списания
		
		//Проверим, проведен ли документ списания  //Добавила проверку Федотова Л., РГ-Софт, 02.04.13, вопрос SLI-0003453
		Если НЕ InventoryСписание.Проведен Тогда
			ТекстОшибки = "Документ " + InventoryСписание + " должен быть проведенным.";
			Отказ = Истина;
			РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
            Возврат;
		КонецЕсли; 
		
		//-> RG-Soft VIvanov 2015/02/05
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	InventoryКорректировкаGoods.Good,
		|	СУММА(InventoryКорректировкаGoods.Quantity * InventoryКорректировкаGoods.UOM.ConversionFactor / InventoryКорректировкаGoods.Good.StandardUOM.ConversionFactor) КАК Quantity,
		|	InventoryКорректировкаGoods.AU,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание ССЫЛКА Документ.InventoryСписание
		|			ТОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание.НалоговыйПериод
		|		ИНАЧЕ InventoryКорректировкаGoods.Ссылка.Дата
		|	КОНЕЦ КАК FiscalPeriod,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToSales)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairClientOwned)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairSLBOwned)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToService)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Fiscal,
		|	InventoryКорректировкаGoods.Ссылка.InventoryСписание.TaxRegistration КАК TaxRegistration
		|ПОМЕСТИТЬ ДанныеТЧ
		|ИЗ
		|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
		|ГДЕ
		|	InventoryКорректировкаGoods.Ссылка = &Корректировка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryКорректировкаGoods.Good,
		|	InventoryКорректировкаGoods.AU,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToSales)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairClientOwned)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToRepairSLBOwned)
		|				ИЛИ InventoryКорректировкаGoods.Ссылка.InventoryСписание.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.IssueToService)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	InventoryКорректировкаGoods.Ссылка.InventoryСписание.TaxRegistration,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание ССЫЛКА Документ.InventoryСписание
		|			ТОГДА InventoryКорректировкаGoods.Ссылка.InventoryСписание.НалоговыйПериод
		|		ИНАЧЕ InventoryКорректировкаGoods.Ссылка.Дата
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЧ.Good,
		|	ДанныеТЧ.Quantity,
		|	ДанныеТЧ.AU,
		|	ДанныеТЧ.FiscalPeriod,
		|	ДанныеТЧ.Fiscal,
		|	ДанныеТЧ.TaxRegistration
		|ИЗ
		|	ДанныеТЧ КАК ДанныеТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatches.Good,
		|	InventoryBatches.InventoryLocation,
		|	InventoryBatches.AU,
		|	СУММА(InventoryBatches.Company) КАК Company,
		|	InventoryBatches.Batch,
		|	InventoryBatches.FinishedGood,
		|	СУММА(InventoryBatches.Quantity) КАК Quantity,
		|	СУММА(InventoryBatches.Sum) КАК Sum,
		|	InventoryBatches.TaxRegistration
		|ПОМЕСТИТЬ БолееРанниеОтмены
		|ИЗ
		|	РегистрНакопления.InventoryBatches КАК InventoryBatches
		|ГДЕ
		|	InventoryBatches.Регистратор ССЫЛКА Документ.InventoryКорректировка
		|	И InventoryBatches.Регистратор.InventoryСписание = &Списание
		|	И InventoryBatches.Регистратор.Дата < &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryBatches.Good,
		|	InventoryBatches.InventoryLocation,
		|	InventoryBatches.AU,
		|	InventoryBatches.Batch,
		|	InventoryBatches.FinishedGood,
		|	InventoryBatches.TaxRegistration
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatches.Good,
		|	InventoryBatches.InventoryLocation,
		|	InventoryBatches.AU,
		|	InventoryBatches.Company,
		|	InventoryBatches.Batch КАК Batch,
		|	InventoryBatches.FinishedGood,
		|	СУММА(InventoryBatches.Quantity - ЕСТЬNULL(БолееРанниеОтмены.Quantity, 0)) КАК Quantity,
		|	СУММА(InventoryBatches.Sum - ЕСТЬNULL(БолееРанниеОтмены.Sum, 0)) КАК Sum,
		|	InventoryBatches.TaxRegistration
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	РегистрНакопления.InventoryBatches КАК InventoryBatches
		|		ЛЕВОЕ СОЕДИНЕНИЕ БолееРанниеОтмены КАК БолееРанниеОтмены
		|		ПО InventoryBatches.Good = БолееРанниеОтмены.Good
		|			И InventoryBatches.Batch = БолееРанниеОтмены.Batch
		|ГДЕ
		|	InventoryBatches.Регистратор = &Списание
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryBatches.FinishedGood,
		|	InventoryBatches.AU,
		|	InventoryBatches.InventoryLocation,
		|	InventoryBatches.Good,
		|	InventoryBatches.Company,
		|	InventoryBatches.TaxRegistration,
		|	InventoryBatches.Batch
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.Good,
		|	ИтоговаяТаблица.InventoryLocation,
		|	ИтоговаяТаблица.AU,
		|	ИтоговаяТаблица.Company,
		|	ИтоговаяТаблица.Batch,
		|	ИтоговаяТаблица.FinishedGood,
		|	ИтоговаяТаблица.Quantity,
		|	ИтоговаяТаблица.Sum,
		|	ИтоговаяТаблица.TaxRegistration
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|ГДЕ
		|	ИтоговаяТаблица.Quantity > 0");
		Запрос.УстановитьПараметр("Списание", InventoryСписание);
		Запрос.УстановитьПараметр("Корректировка", Ссылка);
		Запрос.УстановитьПараметр("Дата", Дата);
		Результаты = Запрос.ВыполнитьПакет();
		ВыборкаТоваров = Результаты[1].Выбрать();
		ВыборкаПартий = Результаты[4].Выбрать();
			
		Пока ВыборкаТоваров.Следующий() Цикл
		   	ВыполнитьВосстановлениеТовара(ВыборкаТоваров.Good, ВыборкаТоваров.AU, ВыборкаТоваров.Quantity, ВыборкаТоваров.Fiscal, ВыборкаТоваров.FiscalPeriod, ВыборкаТоваров.TaxRegistration, ВыборкаПартий, НаборДвижений, Отказ);
		КонецЦикла;
		//<- Rg-Soft VIvanov
	Иначе	
		//проведем Finished Good
		//ВыполнитьДвиженияFinishedGood(НаборДвижений,Отказ);
	
		//проведем не Finished Good
		ЕстьКорректировкиВМинус = Ложь;
		ЕстьКорректировкиВПлюс = Ложь;
		Для Каждого СтрокаТЧ Из Goods Цикл
			Если СтрокаТЧ.Quantity < 0 Тогда
				ЕстьКорректировкиВМинус = Истина;
			ИначеЕсли СтрокаТЧ.Quantity > 0 Тогда
				ЕстьКорректировкиВПлюс = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ЕстьКорректировкиВМинус Или ЕстьКорректировкиВПлюс Тогда
		
			
		СтруктураТекстов = Новый Структура;
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураПараметров.Вставить("PONumber", PoNumber);
		// { RGS LFedotova 24.10.2016 17:50:55 - вопрос SLI-0006879
			//СтруктураПараметров.Вставить("Дата", Дата);  flp
			СтруктураПараметров.Вставить("Дата", МоментВремени());
		// } RGS LFedotova 24.10.2016 17:50:58 - вопрос SLI-0006879
		СтруктураПараметров.Вставить("InventoryLocation", InventoryLocation);
		СтруктураПараметров.Вставить("Company", Company);
		СтруктураПараметров.Вставить("TaxRegistration", TaxRegistration);
		
		СтруктураТекстов.Вставить("InventoryКорректировкаGoods",
		"ВЫБРАТЬ
		|	InventoryКорректировкаGoods.Good,
		|	InventoryКорректировкаGoods.FinishedGood КАК FinishedGood,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryКорректировкаGoods.UOM = InventoryКорректировкаGoods.Good.StandardUOM
		|				ТОГДА InventoryКорректировкаGoods.Quantity
		|			ИНАЧЕ InventoryКорректировкаGoods.Quantity * InventoryКорректировкаGoods.UOM.ConversionFactor / InventoryКорректировкаGoods.Good.StandardUOM.ConversionFactor
		|		КОНЕЦ) КАК Quantity,
		|	СУММА(InventoryКорректировкаGoods.FiscalSum) КАК FiscalSum,
		|	InventoryКорректировкаGoods.AU,
		|	InventoryКорректировкаGoods.Batch,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""Correction LAP""
		|			ТОГДА ЛОЖЬ
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""disposal of junk""
		|			ТОГДА ИСТИНА
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""Reclassification to M&S""
		|			ТОГДА ИСТИНА
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""write-off in production through adjustment""
		|			ТОГДА ИСТИНА
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""intercompany sale""
		|				И InventoryКорректировкаGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.CycleCount)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Fiscal,
		|	InventoryКорректировкаGoods.FiscalPrice,
		|	InventoryКорректировкаGoods.Batch.PONumber КАК PoNumber
		|ПОМЕСТИТЬ InventoryКорректировкаGoods
		|ИЗ
		|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
		|ГДЕ
		|	InventoryКорректировкаGoods.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryКорректировкаGoods.Good,
		|	InventoryКорректировкаGoods.FinishedGood,
		|	InventoryКорректировкаGoods.AU,
		|	InventoryКорректировкаGoods.Batch,
		|	InventoryКорректировкаGoods.FiscalPrice,
		|	InventoryКорректировкаGoods.Batch.PONumber,
		|	ВЫБОР
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""Correction LAP""
		|			ТОГДА ЛОЖЬ
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""disposal of junk""
		|			ТОГДА ИСТИНА
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""Reclassification to M&S""
		|			ТОГДА ИСТИНА
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""write-off in production through adjustment""
		|			ТОГДА ИСТИНА
		// { RGS LFedotova 07.03.2018 15:49:08 - вопрос SLI-0007504
		|		КОГДА InventoryКорректировкаGoods.Reference.Наименование = ""intercompany sale""
		|				И InventoryКорректировкаGoods.Ссылка.TransactionType = ЗНАЧЕНИЕ(Перечисление.InventoryTransactionsTypes.CycleCount)
		|			ТОГДА ИСТИНА
		// } RGS LFedotova 07.03.2018 15:49:35 - вопрос SLI-0007504 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
		
		Если ЕстьКорректировкиВПлюс Тогда
			СтруктураТекстов.Вставить("КорректировкиВПлюс",
				"ВЫБРАТЬ
				|*
				|ИЗ
				|	InventoryКорректировкаGoods
				|ГДЕ
				|	InventoryКорректировкаGoods.Quantity > 0");	
		КонецЕсли; 
		
		Если ЕстьКорректировкиВМинус Тогда
			
			// НО ЭТО ВЕДЬ НИ ФИГА НЕ БЛОКИРОВКА ИЗМЕРЕНИЙ!
			НаборДвижений.БлокироватьДляИзменения = Истина;
			
			СтруктураТекстов.Вставить("ВременнаяТаблицаКорректировокВМинус",
				"ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КорректировкиВМинус
				|ИЗ
				|	InventoryКорректировкаGoods
				|ГДЕ
				|	InventoryКорректировкаGoods.Quantity < 0");
				
			СтруктураТекстов.Вставить("КорректировкиВМинус",
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|	КорректировкиВМинус");
				
			СтруктураТекстов.Вставить("Batches",
				"ВЫБРАТЬ
				|	InventoryBatchesОстатки.Good,
				|	InventoryBatchesОстатки.FinishedGood,
				|	InventoryBatchesОстатки.Batch,
				|	InventoryBatchesОстатки.QuantityОстаток,
				|	InventoryBatchesОстатки.SumОстаток,
				|	InventoryBatchesОстатки.AU
				|ИЗ
				|	РегистрНакопления.InventoryBatches.Остатки(
				|			&Дата,
				|			InventoryLocation = &InventoryLocation
				|				И Company = &Company
				|				И TaxRegistration = &TaxRegistration
				|				И (Good, FinishedGood) В
				|					(ВЫБРАТЬ
				|						КорректировкиВМинус.Good,
				|						КорректировкиВМинус.FinishedGood
				|					ИЗ
				|						КорректировкиВМинус КАК КорректировкиВМинус)) КАК InventoryBatchesОстатки
				|ГДЕ
				|	InventoryBatchesОстатки.QuantityОстаток > 0
				|
				|УПОРЯДОЧИТЬ ПО
				|	InventoryBatchesОстатки.Batch.МоментВремени");
			
		КонецЕсли; 
		
		СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
		Если ЕстьКорректировкиВПлюс Тогда
			
			ВыборкаКорректировокВПлюс = СтруктураРезультатов.КорректировкиВПлюс.Выбрать();
			Пока ВыборкаКорректировокВПлюс.Следующий() Цикл
				
				СуммаФискальная = 0;
				Если ЗначениеЗаполнено(ВыборкаКорректировокВПлюс.FiscalSum) Тогда
					СуммаФискальная = ВыборкаКорректировокВПлюс.FiscalSum;
				Иначе
					
					// Конечно запрос в цикле, но
					// 1) без цикла - гораздо сложнее
					// 2) корректировок в плюс мало
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Good", ВыборкаКорректировокВПлюс.Good);
					Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
					Запрос.УстановитьПараметр("FinishedGood", ЗначениеЗаполнено(ВыборкаКорректировокВПлюс.FinishedGood));
					Запрос.УстановитьПараметр("PONumber", ВыборкаКорректировокВПлюс.PONumber);
					Запрос.УстановитьПараметр("AU", ВыборкаКорректировокВПлюс.AU);
					Запрос.УстановитьПараметр("TaxRegistration", TaxRegistration);
					Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	СтрокиInventoryПоступлений.FiscalPrice
						|ИЗ
						|	Документ.InventoryПоступление.Goods КАК СтрокиInventoryПоступлений
						|ГДЕ
						|	СтрокиInventoryПоступлений.Good = &Good
						|	И СтрокиInventoryПоступлений.FinishedGood = &FinishedGood
						|	И СтрокиInventoryПоступлений.AU = &AU
						|	И СтрокиInventoryПоступлений.Ссылка.TaxRegistration = &TaxRegistration
						|	И ВЫБОР
						|			КОГДА &FinishedGood
						|				ТОГДА СтрокиInventoryПоступлений.Ссылка.PONumber = &PONumber
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ
						|	И СтрокиInventoryПоступлений.Ссылка.Проведен
						|	И СтрокиInventoryПоступлений.Ссылка.МоментВремени < &МоментВремени
						|
						|УПОРЯДОЧИТЬ ПО
						|	СтрокиInventoryПоступлений.Ссылка.МоментВремени УБЫВ";	
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СуммаФискальная = ВыборкаКорректировокВПлюс.Quantity * Выборка.FiscalPrice;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СуммаФискальная) Тогда   
						ТекстОшибки = "Не удалось определить fiscal sum для good """ + ВыборкаКорректировокВПлюс.Good + """, заполните сумму вручную.";
						РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					
					Движение = НаборДвижений.ДобавитьПриход();
					Движение.Период = Дата;
					Движение.Company = Company;
					Движение.InventoryLocation = InventoryLocation;
					Движение.Good = ВыборкаКорректировокВПлюс.Good;
					Движение.FinishedGood = ВыборкаКорректировокВПлюс.FinishedGood; 
					Движение.Batch = ?(ЗначениеЗаполнено(ВыборкаКорректировокВПлюс.Batch),ВыборкаКорректировокВПлюс.Batch, Ссылка);
					Движение.AU = ВыборкаКорректировокВПлюс.AU;
					Движение.TaxRegistration = TaxRegistration;    //SLI-0004537
					Движение.Quantity = ВыборкаКорректировокВПлюс.Quantity;
					Движение.Sum = СуммаФискальная;
					Движение.Fiscal = ВыборкаКорректировокВПлюс.Fiscal;
					Движение.FiscalPeriod = Дата;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли; 
				
		// Отразим корректировки - списания
		Если ЕстьКорректировкиВМинус Тогда
			
			ВыборкаКорректировокВМинус = СтруктураРезультатов.КорректировкиВМинус.Выбрать();
			ВыборкаПартий = СтруктураРезультатов.Batches.Выбрать();	
			
			Пока ВыборкаКорректировокВМинус.Следующий() Цикл 
				
				// Изменим знак количества и суммы, чтобы удобнее было работать
				QuantityОсталось = -ВыборкаКорректировокВМинус.Quantity;
				FiscalSum = -ВыборкаКорректировокВМинус.FiscalSum;
						
				// Подбираем очередную партию до тех пор пока не спишем все необходимое количество
				СтруктураПоиска = Новый Структура("Good, AU");
				СтруктураПоиска.Good = ВыборкаКорректировокВМинус.Good;
				СтруктураПоиска.AU = ВыборкаКорректировокВМинус.AU;
				Если ВыборкаКорректировокВМинус.FinishedGood Тогда
					СтруктураПоиска.Вставить("FinishedGood", ВыборкаКорректировокВМинус.FinishedGood);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаКорректировокВМинус.Batch) Тогда
					СтруктураПоиска.Вставить("Batch", ВыборкаКорректировокВМинус.Batch);
				КонецЕсли;
				
				Пока QuantityОсталось > 0 Цикл
					
					Если НЕ ВыборкаПартий.НайтиСледующий(СтруктураПоиска) Тогда
						
						Если ВыборкаКорректировокВМинус.FinishedGood Тогда
							Движение = НаборДвижений.ДобавитьРасход();
							Движение.Период = Дата;
							Движение.Company = Company;
							Движение.InventoryLocation = InventoryLocation;
							Движение.Good = ВыборкаКорректировокВМинус.Good;
							Движение.FinishedGood = ВыборкаКорректировокВМинус.FinishedGood;
							Движение.Batch = Неопределено;
							Движение.Quantity = QuantityОсталось;
							Движение.AU = ВыборкаКорректировокВМинус.AU;
							Движение.TaxRegistration = TaxRegistration; //SLI-0004537
							Движение.Sum = QuantityОсталось * ВыборкаКорректировокВМинус.FiscalPrice;
							Движение.Fiscal = ВыборкаКорректировокВМинус.Fiscal;
							Движение.FiscalPeriod = Дата;
						Иначе
							ТекстОшибки = "Не хватает " + QuantityОсталось + " " + ВыборкаКорректировокВМинус.Good.StandardUOM + " номенклатуры """ + ВыборкаКорректировокВМинус.Good.Код + """ на локации """ + InventoryLocation + """ по AU """ + ВыборкаКорректировокВМинус.AU + """!";
							РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
						КонецЕсли;
						Прервать;
						
					КонецЕсли;
					
					СписываемоеКоличество = ?(ВыборкаПартий.QuantityОстаток > QuantityОсталось,
												QuantityОсталось, ВыборкаПартий.QuantityОстаток);
												
					Если НЕ Отказ Тогда
						
						Движение = НаборДвижений.ДобавитьРасход();
						Движение.Период = Дата;
						Движение.Company = Company;
						Движение.InventoryLocation = InventoryLocation;
						Движение.Good = ВыборкаКорректировокВМинус.Good;
						Движение.FinishedGood = ВыборкаКорректировокВМинус.FinishedGood;
						Движение.Batch = ВыборкаПартий.Batch;
						Движение.Quantity = СписываемоеКоличество;
						Движение.AU = ВыборкаКорректировокВМинус.AU;
						Движение.TaxRegistration = TaxRegistration; //SLI-0004537
						Если ЗначениеЗаполнено(ВыборкаКорректировокВМинус.FiscalSum) Тогда
							Движение.Sum = СписываемоеКоличество * ВыборкаКорректировокВМинус.FiscalPrice;
						Иначе
							Цена = ВыборкаПартий.SumОстаток / ВыборкаПартий.QuantityОстаток;
							Движение.Sum = СписываемоеКоличество * Цена;
						КонецЕсли;
						Движение.Fiscal = ВыборкаКорректировокВМинус.Fiscal;
						Движение.FiscalPeriod = Дата;
						
					КонецЕсли;
					
					QuantityОсталось = QuantityОсталось - СписываемоеКоличество;
					
				КонецЦикла;
				
				ВыборкаПартий.Сбросить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	НаборДвижений.Записать();
	    			
	// Inventory tangible assets costs
	ДвиженияInventory = Движения.InventoryTangibleAssetsCosts;
	ДвиженияInventory.Записывать = Истина;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("AccountLawsonRNI", ПланыСчетов.Lawson.НайтиПоКоду("201900"));
	Запрос.УстановитьПараметр("AccountLawsonINR", ПланыСчетов.Lawson.НайтиПоКоду("130508"));
	Запрос.УстановитьПараметр("AccountLawsonICO", ПланыСчетов.Lawson.НайтиПоКоду("130004"));
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДок", Дата);
	Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
	Запрос.УстановитьПараметр("ВалютаРуб", Справочники.Валюты.НайтиПоКоду("643"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалютСрезПоследних.Курс
	               |ПОМЕСТИТЬ КурсSLB
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, Валюта = &ВалютаSLB) КАК КурсыВалютСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК ПроводкаДеталейСКП,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.BaseAmount КАК ManagementSum,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.DateLawson КАК Период,
	               |	ВЫРАЗИТЬ(ПроводкиDSSДеталейСчетовКнигиПокупок.Description КАК СТРОКА(30)) КАК Описание
	               |ПОМЕСТИТЬ ПроводкиДеталей
	               |ИЗ
	               |	Документ.ПроводкаDSS КАК ПроводкиDSSДеталейСчетовКнигиПокупок
	               |ГДЕ
	               |	(ПроводкиDSSДеталейСчетовКнигиПокупок.AccountLawson = &AccountLawsonRNI
	               |			ИЛИ ПроводкиDSSДеталейСчетовКнигиПокупок.AccountLawson = &AccountLawsonINR
	               |			ИЛИ ПроводкиDSSДеталейСчетовКнигиПокупок.AccountLawson = &AccountLawsonICO)
	               |	И ПроводкиDSSДеталейСчетовКнигиПокупок.System = ""IC""
	               |	И ПроводкиDSSДеталейСчетовКнигиПокупок.Документ = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкиДеталей.Описание КАК ItemCode,
	               |	СУММА(ПроводкиДеталей.ManagementSum) КАК ManagementSum
	               |ИЗ
	               |	ПроводкиДеталей КАК ПроводкиДеталей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПроводкиДеталей.Описание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryBatches.Good,
	               |	ВЫРАЗИТЬ(InventoryBatches.Good.Код КАК СТРОКА(30)) КАК GoodКод,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Приход)
	               |					И InventoryBatches.Sum > 0
	               |				ТОГДА -InventoryBatches.Sum
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Расход)
	               |							И InventoryBatches.Sum < 0
	               |						ТОГДА -InventoryBatches.Sum
	               |					ИНАЧЕ InventoryBatches.Sum
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК FiscalSum,
	               |	InventoryBatches.Регистратор,
	               |	ВЫБОР
	               |		КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Приход)
	               |			ТОГДА InventoryBatches.Quantity
	               |		ИНАЧЕ -InventoryBatches.Quantity
	               |	КОНЕЦ КАК Количество,
	               |	InventoryBatches.ВидДвижения
	               |ПОМЕСТИТЬ СтрокиInventory
	               |ИЗ
	               |	РегистрНакопления.InventoryBatches КАК InventoryBatches
	               |ГДЕ
	               |	InventoryBatches.Регистратор = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	InventoryBatches.Регистратор,
	               |	InventoryBatches.Good,
	               |	ВЫРАЗИТЬ(InventoryBatches.Good.Код КАК СТРОКА(30)),
	               |	InventoryBatches.ВидДвижения,
	               |	ВЫБОР
	               |		КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Приход)
	               |			ТОГДА InventoryBatches.Quantity
	               |		ИНАЧЕ -InventoryBatches.Quantity
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкиДеталей.ПроводкаДеталейСКП КАК ПроводкаДеталейСКП,
	               |	ПроводкиДеталей.Период,
	               |	ВЫБОР
	               |		КОГДА СтрокиInventory.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Приход)
	               |				И ПроводкиДеталей.ManagementSum > 0
	               |			ТОГДА -ПроводкиДеталей.ManagementSum
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтрокиInventory.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.Расход)
	               |						И ПроводкиДеталей.ManagementSum < 0
	               |					ТОГДА -ПроводкиДеталей.ManagementSum
	               |				ИНАЧЕ ПроводкиДеталей.ManagementSum
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ManagementSum,
	               |	ВЫБОР
	               |		КОГДА СтрокиInventory.Good ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтрокиInventory.FiscalSum = 0
	               |					ТОГДА ВЫБОР
	               |							КОГДА ПроводкиДеталей.ПроводкаДеталейСКП.Currency = &ВалютаРуб
	               |								ТОГДА ПроводкиДеталей.ПроводкаДеталейСКП.TranAmount
	               |							ИНАЧЕ ПроводкиДеталей.ПроводкаДеталейСКП.BaseAmount * КурсSLB.Курс
	               |						КОНЕЦ
	               |				ИНАЧЕ СтрокиInventory.FiscalSum
	               |			КОНЕЦ
	               |	КОНЕЦ КАК FiscalSum,
	               |	ПроводкиДеталей.Описание КАК ItemCode,
	               |	СтрокиInventory.Количество
	               |ИЗ
	               |	ПроводкиДеталей КАК ПроводкиДеталей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиInventory КАК СтрокиInventory
	               |		ПО (СтрокиInventory.GoodКод ПОДОБНО ""%"" + ПроводкиДеталей.Описание + ""%""),
	               |	КурсSLB КАК КурсSLB";
				  
				   
	Результат = Запрос.ВыполнитьПакет();			   
	Выборка = Результат[4].Выбрать();
	ТЗManagementSumВСуммеПоItemCode = Результат[2].Выгрузить();
	
	СтруктураОтбора = Новый Структура;
	Пока Выборка.Следующий() Цикл 
		Движение = ДвиженияInventory.ДобавитьПриход();
		Движение.Период = Выборка.Период;                           
		Движение.ПроводкаДеталейСКП = Выборка.ПроводкаДеталейСКП;
		Движение.Количество = Выборка.Количество;
		Движение.ManagementSum = Выборка.ManagementSum;
		
		СтруктураОтбора.Вставить("ItemCode", Выборка.ItemCode);
		СтрокиТЗ = ТЗManagementSumВСуммеПоItemCode.НайтиСтроки(СтруктураОтбора);
		Движение.FiscalSum = ?(СтрокиТЗ[0].ManagementSum = 0, Выборка.FiscalSum, 
		                        Выборка.FiscalSum * Выборка.ManagementSum/СтрокиТЗ[0].ManagementSum);
	КонецЦикла;
	
	ДвиженияInventory.Записать();
	
	////проверяем количество строк
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	КОЛИЧЕСТВО(ЕСТЬNULL(InventoryКорректировкаGoods.Good, 0)) КАК КоличествоСтрок,
	//			   |	InventoryКорректировкаGoods.Ссылка.Представление
	//			   |ИЗ
	//			   |	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
	//			   |ГДЕ
	//			   |	InventoryКорректировкаGoods.Ссылка = &Ссылка
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	InventoryКорректировкаGoods.Ссылка.Представление";
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Выборка.Следующий();
	//
	//Если Выборка.КоличествоСтрок <> Результат.Количество() Тогда 
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество строк в документе "+ Выборка.Представление +"("+Выборка.КоличествоСтрок+
	//	") не совпадает с количеством проводок DSS ("+Результат.Количество()+")!");
	//	
	//КонецЕсли;
	
	//Добавил Карпов Стас РГ-Софт
	Движения.MaterialsAndSupplies.Записывать = Истина;
	Для Каждого ТекСтрокаGoods Из Goods Цикл
		Если ЗначениеЗаполнено(ТекСтрокаGoods.DSS) Тогда 
			Если ТекСтрокаGoods.Quantity < 0 Тогда 
				ДвижениеMAS = Движения.MaterialsAndSupplies.Добавить();
				ДвижениеMAS.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеMAS.Период = Дата;
				ДвижениеMAS.ПроводкаДеталейСКП = ТекСтрокаGoods.DSS;
				ДвижениеMAS.FiscalSum = ТекСтрокаGoods.FiscalSum;
				ДвижениеMAS.ManagementSum = ТекСтрокаGoods.ManagementSum;
				ДвижениеMAS.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеMAS.Период = ЭтотОбъект.Дата;
				
			Иначе
				ДвижениеMAS = Движения.MaterialsAndSupplies.Добавить();
				ДвижениеMAS.ВидДвижения = ВидДвиженияНакопления.Расход;
				ДвижениеMAS.Период = Дата;
				ДвижениеMAS.ПроводкаДеталейСКП = ТекСтрокаGoods.DSS;
				ДвижениеMAS.FiscalSum = ТекСтрокаGoods.FiscalSum;
				ДвижениеMAS.ManagementSum = ТекСтрокаGoods.ManagementSum;
				ДвижениеMAS.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеMAS.Период = ЭтотОбъект.Дата;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Конец
	
	//{ RGS AArsentev SLI-0006883 20.10.2016
	Если НЕ Отказ Тогда
		Отказ = ПроверитьТабличнуюЧастьGoods();	
	КонецЕсли;	
	//} RGS AArsentev SLI-0006883 20.10.2016
	   		
КонецПроцедуры

Процедура ВыполнитьДвиженияFinishedGood(НаборДвижений,Отказ)
	//Good InventoryLocation AU Batch FinishedGood Company Quantity  Sum Fiscal FiscalPeriod
	
	//Выполним движения в плюс
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	InventoryКорректировкаGoods.Good,
		|	СУММА(InventoryКорректировкаGoods.Quantity) КАК Quantity,
		|	СУММА(InventoryКорректировкаGoods.FiscalSum) КАК Sum,
		|	InventoryКорректировкаGoods.AU,
		|	InventoryКорректировкаGoods.Ссылка.Company,
		|	InventoryКорректировкаGoods.Ссылка.InventoryLocation,
		|	InventoryКорректировкаGoods.FinishedGood,
		|	InventoryКорректировкаGoods.Ссылка.Дата КАК Период,
		|	InventoryКорректировкаGoods.Ссылка КАК Batch,
		|	InventoryКорректировкаGoods.Ссылка.Дата КАК FiscalPeriod
		|ИЗ
		|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
		|ГДЕ
		|	InventoryКорректировкаGoods.FinishedGood
		|	И InventoryКорректировкаGoods.Quantity > 0
		|	И InventoryКорректировкаGoods.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryКорректировкаGoods.AU,
		|	InventoryКорректировкаGoods.Good,
		|	InventoryКорректировкаGoods.FinishedGood,
		|	InventoryКорректировкаGoods.Ссылка,
		|	InventoryКорректировкаGoods.Ссылка.Company,
		|	InventoryКорректировкаGoods.Ссылка.InventoryLocation,
		|	InventoryКорректировкаGoods.Ссылка.Дата,
		|	InventoryКорректировкаGoods.Ссылка.Дата";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
    ТЗ = Результат.Выгрузить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = НаборДвижений.ДобавитьПриход();	
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//Проверим, требуется ли записать этот приход в качестве партий в более ранний расход
	ЗапросПоОтрОстаткамБезПартий = 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабЧасть.Good,
		|	ТабЧасть.InventoryLocation,
		|	ТабЧасть.AU,
		|	ТабЧасть.Batch,
		|	ТабЧасть.FinishedGood,
		|	ТабЧасть.Company,
		|	ТабЧасть.Quantity,
		|	ТабЧасть.Sum
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatches.Период,
		|	InventoryBatches.Регистратор,
		|	InventoryBatches.НомерСтроки,
		|	InventoryBatches.Активность,
		|	InventoryBatches.ВидДвижения,
		|	InventoryBatches.Good КАК Good,
		|	InventoryBatches.InventoryLocation,
		|	InventoryBatches.AU КАК AU,
		|	InventoryBatches.Batch,
		|	InventoryBatches.FinishedGood,
		|	InventoryBatches.Company,
		|	InventoryBatches.Quantity КАК Quantity,
		|	InventoryBatches.Fiscal,
		|	InventoryBatches.FiscalPeriod,
		|	ВТ.Quantity КАК QuantityКорректировка,
		|	ВТ.Sum КАК SumКорректировка
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.InventoryBatches КАК InventoryBatches
		|		ПО ВТ.Good = InventoryBatches.Good
		|			И ВТ.AU = InventoryBatches.AU
		|			И ВТ.Company = InventoryBatches.Company
		|ГДЕ
		|	InventoryBatches.Batch = &Неопределено
		|	И InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И InventoryBatches.Quantity > 0
		|ИТОГИ
		|	СУММА(Quantity),
		|	МАКСИМУМ(QuantityКорректировка),
		|	МАКСИМУМ(SumКорректировка)
		|ПО
		|	Good,
		|	AU";
    Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Запрос.УстановитьПараметр("Неопределено",Неопределено);
	Результат = Запрос.Выполнить();

	ВыборкаGood = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаGood.Следующий() Цикл
		ВыборкаAU = ВыборкаGood.Выбрать();
		Пока ВыборкаGood.Следующий() Цикл
			ОсталосьЗаполнить = ВыборкаGood.QuantityКорректировка;
			ВыборкаДетальныеЗаписи = ВыборкаGood.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() И ОсталосьЗаполнить > 0 Цикл
				НаборЗаписей = РегистрыНакопления.InventoryBatches.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
				НаборЗаписей.Отбор.Good.Установить(ВыборкаДетальныеЗаписи.Good);
				НаборЗаписей.Отбор.AU.Установить(ВыборкаДетальныеЗаписи.AU);
				НаборЗаписей.Прочитать();
				Для каждого Запись Из НаборЗаписей Цикл
					Цена = ВыборкаДетальныеЗаписи.SumКорректировка / ВыборкаДетальныеЗаписи.QuantityКорректировка;
					Если ОсталосьЗаполнить - Запись.Quantity >= 0 Тогда
						Запись.Batch = ВыборкаДетальныеЗаписи.Регистратор;
						Запись.Sum = Цена * Запись.Quantity;
						ОсталосьЗаполнить = ОсталосьЗаполнить - Запись.Quantity;
					Иначе
						Запись.Batch = ВыборкаДетальныеЗаписи.Регистратор;
						ОсталосьНезаполненным = Запись.Quantity - ОсталосьЗаполнить;
						Запись.Quantity = ОсталосьЗаполнить;
						Запись.Sum = Цена * Запись.Quantity;
						НоваяЗапись = НаборЗаписей.ДобавитьРасход();
						ЗаполнитьЗначенияСвойств(НоваяЗапись,Запись);
						НоваяЗапись.Quantity = ОсталосьНезаполненным;
						НоваяЗапись.Sum = 0;
						ОсталосьЗаполнить = 0;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
	//Выполним движения в минус
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	InventoryКорректировкаGoods.Good,
	|	СУММА(-1 * InventoryКорректировкаGoods.Quantity) КАК Quantity,
	|	СУММА(InventoryКорректировкаGoods.FiscalSum) КАК Sum,
	|	InventoryКорректировкаGoods.AU,
	|	InventoryКорректировкаGoods.Ссылка.Company,
	|	InventoryКорректировкаGoods.Ссылка.InventoryLocation,
	|	InventoryКорректировкаGoods.FinishedGood,
	|	InventoryКорректировкаGoods.Ссылка.Дата КАК Период,
	|	InventoryКорректировкаGoods.Ссылка КАК Batch,
	|	InventoryКорректировкаGoods.Ссылка.Дата КАК FiscalPeriod
	|ПОМЕСТИТЬ ТабЧасть
	|ИЗ
	|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
	|ГДЕ
	|	InventoryКорректировкаGoods.FinishedGood
	|	И InventoryКорректировкаGoods.Quantity < 0
	|	И InventoryКорректировкаGoods.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	InventoryКорректировкаGoods.AU,
	|	InventoryКорректировкаGoods.Good,
	|	InventoryКорректировкаGoods.FinishedGood,
	|	InventoryКорректировкаGoods.Ссылка,
	|	InventoryКорректировкаGoods.Ссылка.Company,
	|	InventoryКорректировкаGoods.Ссылка.InventoryLocation,
	|	InventoryКорректировкаGoods.Ссылка.Дата,
	|	InventoryКорректировкаGoods.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.Good КАК Good,
	|	ТабЧасть.Quantity КАК Quantity,
	|	ТабЧасть.Sum КАК Sum,
	|	ТабЧасть.AU КАК AU,
	|	ТабЧасть.Company,
	|	ТабЧасть.InventoryLocation,
	|	ТабЧасть.FinishedGood,
	|	ТабЧасть.Период,
	|	ТабЧасть.FiscalPeriod,
	|	ЕСТЬNULL(InventoryBatchesОстатки.QuantityОстаток, 0) КАК QuantityОстаток,
	|	ЕСТЬNULL(InventoryBatchesОстатки.SumОстаток, 0) КАК SumОстаток,
	|	InventoryBatchesОстатки.Batch КАК Batch
	|ИЗ
	|	ТабЧасть КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.InventoryBatches.Остатки(
	|				&МоментВремени,
	|				(Good, AU, Company) В
	|					(ВЫБРАТЬ
	|						ТабЧасть.Good,
	|						ТабЧасть.AU,
	|						ТабЧасть.Company
	|					ИЗ
	|						ТабЧасть КАК ТабЧасть)) КАК InventoryBatchesОстатки
	|		ПО ТабЧасть.Good = InventoryBatchesОстатки.Good
	|			И ТабЧасть.AU = InventoryBatchesОстатки.AU
	|			И ТабЧасть.Company = InventoryBatchesОстатки.Company
	|ИТОГИ
	|	МАКСИМУМ(Quantity),
	|	МАКСИМУМ(Sum),
	|	СУММА(QuantityОстаток),
	|	СУММА(SumОстаток)
	|ПО
	|	Good,
	|	AU";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени());
	Результат = Запрос.Выполнить();
	ВыборкаGood = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаGood.Следующий() Цикл
		ВыборкаAU = ВыборкаGood.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаAU.Следующий() Цикл
			ОсталосьСписать = ВыборкаAU.Quantity;
			ВыборкаДетальныеЗаписи = ВыборкаAU.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() И ОсталосьСписать > 0 Цикл
				Если ОсталосьСписать >= ВыборкаДетальныеЗаписи.QuantityОстаток Тогда 
					Если ВыборкаДетальныеЗаписи.QuantityОстаток > 0 Тогда
						Движение = НаборДвижений.ДобавитьРасход();	
						ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
					    Движение.Quantity = ВыборкаДетальныеЗаписи.QuantityОстаток;
					    Движение.Sum = ВыборкаДетальныеЗаписи.SumОстаток;
						ОсталосьСписать = ОсталосьСписать - Движение.Quantity;
					Иначе
						Движение = НаборДвижений.ДобавитьРасход();	
						ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
					    Движение.Batch = Неопределено;
					    Движение.Quantity = ВыборкаДетальныеЗаписи.Quantity;
					    Движение.Sum = ВыборкаДетальныеЗаписи.Sum;
						ОсталосьСписать = 0;
					КонецЕсли; 
				Иначе                                
					ПеренестиКоличество = ВыборкаДетальныеЗаписи.QuantityОстаток - ОсталосьСписать;
					Цена = ?(ВыборкаДетальныеЗаписи.QuantityОстаток > 0,ВыборкаДетальныеЗаписи.SumОстаток / ВыборкаДетальныеЗаписи.QuantityОстаток,0);
					Если ОсталосьСписать > 0 Тогда
						Движение = НаборДвижений.ДобавитьРасход();	
						ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
						Движение.Quantity = ОсталосьСписать;
						Движение.Sum = Цена * Движение.Quantity;
					КонецЕсли; 
					НоваяЗапись = НаборДвижений.ДобавитьРасход();
					ЗаполнитьЗначенияСвойств(НоваяЗапись,Движение);
					НоваяЗапись.Quantity = ОсталосьНезаполненным;
                    НоваяЗапись.Sum = Цена * НоваяЗапись.Quantity;
					ОсталосьСписать = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/05
Процедура ВыполнитьВосстановлениеТовара(Good, AU, Quantity, Fiscal, FiscalPeriod, TaxRegistration, ВыборкаПартий, НаборДвижений, Отказ)
	
	НаборЗаписей = Движения.InventoryBatches;
	
	// Подбираем очередную партию до тех пор пока не спишем все необходимое количество
	СтруктураПоиска = Новый Структура("Good, AU, TaxRegistration");
	СтруктураПоиска.Good = Good;
	СтруктураПоиска.AU = AU;
	СтруктураПоиска.TaxRegistration = TaxRegistration;
	QuantityОсталось = Quantity;
	ВыборкаПартий.Сбросить();
	
	Пока QuantityОсталось > 0 Цикл
		
		Если НЕ ВыборкаПартий.НайтиСледующий(СтруктураПоиска) Тогда
			
			ТекстОшибки = "Не хватает " + QuantityОсталось + " " + Good.StandardUOM + " номенклатуры """ + Good.Код + """ по AU """ + AU + """ по Tax registration """ + TaxRegistration + """ в расходе по документу Inventory списание!";
			РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
			Прервать;
			
		КонецЕсли;
		
		СписываемоеКоличество = ?(ВыборкаПартий.Quantity > QuantityОсталось,
									QuantityОсталось, ВыборкаПартий.Quantity);								
									
		Если Не Отказ Тогда
		
			Движение = НаборЗаписей.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПартий);
			Движение.Период = Дата;
			Движение.Good = Good;
			Движение.AU = AU;
			Движение.Quantity = СписываемоеКоличество;
			Цена = ВыборкаПартий.Sum / ВыборкаПартий.Quantity;
			Движение.Sum = СписываемоеКоличество * Цена;
			Движение.Fiscal = Fiscal;
			Движение.FiscalPeriod = FiscalPeriod;
		
		КонецЕсли;
		
		QuantityОсталось = QuantityОсталось - СписываемоеКоличество;
				
	КонецЦикла;	
	
КонецПроцедуры
//<- RG-Soft VIvanov

//{ RGS AArsentev SLI-0006883 20.10.2016
Функция ПроверитьТабличнуюЧастьGoods()
	
	НетЗначения = 0;
	
	Reception = Справочники.КомментарииКорректировок.НайтиПоНаименованию("Reception");	
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - Reception, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;
	КонецЕсли;
	
	Reclassification = Справочники.КомментарииКорректировок.НайтиПоНаименованию("reclassification to Inventory");	
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - reclassification to Inventory, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;	
	КонецЕсли;
	
	IntercompanySale = Справочники.КомментарииКорректировок.НайтиПоНаименованию("intercompany sale");
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - intercompany sale, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;	
	КонецЕсли;
	
	WriteOff = Справочники.КомментарииКорректировок.НайтиПоНаименованию("write-off in production through adjustment");
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - write-off in production through adjustment, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;	
	КонецЕсли;
	
	ReclassificationFA = Справочники.КомментарииКорректировок.НайтиПоНаименованию("Reclassification to FA");
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - Reclassification to FA, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;	
	КонецЕсли;
	
	ReclassificationMS = Справочники.КомментарииКорректировок.НайтиПоНаименованию("Reclassification to M&S");
	Если НЕ ЗначениеЗаполнено(Reception) Тогда
		Сообщить("Нет значения - Reclassification to M&S, для реквизита - Reference");
		НетЗначения = НетЗначения + 1;	
	КонецЕсли;
	
	Если НетЗначения <> 0 Тогда
		Возврат Ложь 
	КонецЕсли;
	i = 0;
	ЕстьОшибки = 0;
	Для Каждого Элемент из Goods Цикл
		i = i + 1;		
		Если Элемент.Quantity > 0 Тогда
			Если Элемент.Reference = IntercompanySale ИЛИ Элемент.Reference = WriteOff ИЛИ Элемент.Reference = ReclassificationFA ИЛИ Элемент.Reference = ReclassificationMS  Тогда
				Сообщить("В строке - " + i + ", значение колонки Reference равно - " + Элемент.Reference);
				ЕстьОшибки = ЕстьОшибки + 1;
			КонецЕсли
		ИначеЕсли Элемент.Quantity < 0 тогда
			Если Элемент.Reference = Reception ИЛИ Элемент.Reference = Reclassification Тогда			
				Сообщить("В строке - " + i + ", значение колонки Reference равно - " + Элемент.Reference);
				ЕстьОшибки = ЕстьОшибки + 1;
			КонецЕсли
		КонецЕсли;			
	КонецЦикла;
	Если ЕстьОшибки > 0 Тогда
		Сообщить("Количество ошибок - " +ЕстьОшибки);
		Возврат Истина;
	Иначе
		Возврат ложь
	КонецЕсли;
	
	
КонецФункции
//} RGS AArsentev SLI-0006883 20.10.2016