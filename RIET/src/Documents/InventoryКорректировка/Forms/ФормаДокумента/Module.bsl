
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначения.УстановитьЗначение(ТекущийОбъект.Responsible, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.LastModified = ТекущаяДата();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ТАБЛИЧНАЯ ЧАСТЬ GOODs

&НаКлиенте
Процедура GoodsQuantityПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	ТекущиеДанные.FiscalSum = ТекущиеДанные.Quantity * ТекущиеДанные.FiscalPrice;
	ТекущиеДанные.ManagementSum = ТекущиеДанные.Quantity * ТекущиеДанные.ManagementPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsFiscalPriceПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	ТекущиеДанные.FiscalSum = ТекущиеДанные.Quantity * ТекущиеДанные.FiscalPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsFiscalSumПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Quantity) Тогда
		ТекущиеДанные.FiscalPrice = ТекущиеДанные.FiscalSum / ТекущиеДанные.Quantity;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsManagementPriceПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	ТекущиеДанные.ManagementSum = ТекущиеДанные.Quantity * ТекущиеДанные.ManagementPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsManagementSumПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Quantity) Тогда
		ТекущиеДанные.ManagementPrice = ТекущиеДанные.ManagementSum / ТекущиеДанные.Quantity;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьFP(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Сначала необходимо записать документ.");
		Возврат;
	КонецЕсли; 
	ЕстьЗаполненные = Ложь;
	Для каждого СтрокаТЧ Из Объект.Goods Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.FiscalPrice) Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЕстьЗаполненные И Вопрос("При перезаполнении текущие данные в колонке Fiscal price будут очищены! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли; 
	
	Для каждого СтрокаТЧ Из Объект.Goods Цикл
		
		Если СтрокаТЧ.Quantity > 0 Тогда
		СтрокаТЧ.FiscalPrice = НайтиЦенуПоПоступлению(СтрокаТЧ.Good, СтрокаТЧ.AU.ПодразделениеОрганизации, СтрокаТЧ.UOM);
		Если СтрокаТЧ.FiscalPrice <> 0 Тогда
			СтрокаТЧ.FiscalSum = СтрокаТЧ.FiscalPrice * СтрокаТЧ.Quantity;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

// { RGS LFedotova 11.01.2019 10:13:26 - вопрос SLI-0007800
&НаКлиенте
Процедура Defer(Команда)
	Для каждого Строка Из Объект.Goods Цикл
		Строка.FiscalPrice = 0.01;
		Строка.FiscalSum = Строка.Quantity * Строка.FiscalPrice;
	КонецЦикла; 
	Объект.Defer = Истина;
КонецПроцедуры
// } RGS LFedotova 11.01.2019 10:13:28 - вопрос SLI-0007800 

//////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Поиск посленего поступления и возврат цены по айтему
&НаСервере
Функция НайтиЦенуПоПоступлению(Товар, Локация, UOM)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.FiscalSum,
	|	ВложенныйЗапрос.Quantity,
	|	ВложенныйЗапрос.ПоступлениеМоментВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.FiscalSum) КАК FiscalSum,
	|		СУММА(ВложенныйЗапрос.Quantity) КАК Quantity,
	|		ВложенныйЗапрос.ПоступлениеМоментВремени КАК ПоступлениеМоментВремени
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СУММА(InventoryПоступлениеGoods.FiscalSum) КАК FiscalSum,
	|			СУММА(ВЫБОР
	|					КОГДА InventoryПоступлениеGoods.UOM = InventoryПоступлениеGoods.Good.StandardUOM
	|						ТОГДА InventoryПоступлениеGoods.Quantity
	|					ИНАЧЕ InventoryПоступлениеGoods.Quantity * InventoryПоступлениеGoods.UOM.ConversionFactor / InventoryПоступлениеGoods.Good.StandardUOM.ConversionFactor
	|				КОНЕЦ) КАК Quantity,
	|			InventoryПоступлениеGoods.Ссылка.МоментВремени КАК ПоступлениеМоментВремени
	|		ИЗ
	|			Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
	|		ГДЕ
	|			InventoryПоступлениеGoods.Good = &Good
	|			И (НЕ InventoryПоступлениеGoods.Ссылка.ПометкаУдаления)
	|			И InventoryПоступлениеGoods.Ссылка.МоментВремени < &МоментВремени
	|			И InventoryПоступлениеGoods.AU.ПодразделениеОрганизации = &Location
	|			И InventoryПоступлениеGoods.Ссылка.Company = &Company
	|		
	|		СГРУППИРОВАТЬ ПО
	|			InventoryПоступлениеGoods.Ссылка.МоментВремени
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СУММА(InventoryКорректировкаGoods.FiscalSum),
	|			СУММА(ВЫБОР
	|					КОГДА InventoryКорректировкаGoods.UOM = InventoryКорректировкаGoods.Good.StandardUOM
	|						ТОГДА InventoryКорректировкаGoods.Quantity
	|					ИНАЧЕ InventoryКорректировкаGoods.Quantity * InventoryКорректировкаGoods.UOM.ConversionFactor / InventoryКорректировкаGoods.Good.StandardUOM.ConversionFactor
	|				КОНЕЦ),
	|			InventoryКорректировкаGoods.Ссылка.МоментВремени
	|		ИЗ
	|			Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
	|		ГДЕ
	|			(НЕ InventoryКорректировкаGoods.Ссылка.ПометкаУдаления)
	|			И InventoryКорректировкаGoods.Ссылка.IctDocType = ""Remains""
	|			И InventoryКорректировкаGoods.Good = &Good
	|			И InventoryКорректировкаGoods.AU.ПодразделениеОрганизации = &Location
	|			И InventoryКорректировкаGoods.Ссылка.МоментВремени < &МоментВремени
	|		
	|		СГРУППИРОВАТЬ ПО
	|			InventoryКорректировкаGoods.Ссылка.МоментВремени) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ПоступлениеМоментВремени) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ПоступлениеМоментВремени УБЫВ";
	Запрос.УстановитьПараметр("Good", Товар);
	Запрос.УстановитьПараметр("МоментВремени", Объект.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Company", Объект.Company);
	Запрос.УстановитьПараметр("Location", Локация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЦенаИскомая = ?(Выборка.Quantity = 0, Выборка.FiscalSum, Выборка.FiscalSum/Выборка.Quantity);
	Иначе
		ЦенаИскомая = 0;
	КонецЕсли; 
	
	Возврат ЦенаИскомая * Товар.StandardUOM.ConversionFactor  / UOM.ConversionFactor;
КонецФункции // ()


&НаКлиенте
Процедура BatchНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Период", Объект.Дата);
	ПараметрыФормы.Вставить("Location", Объект.InventoryLocation);
	ПараметрыФормы.Вставить("AU", ТекущиеДанные.AU);
	ПараметрыФормы.Вставить("UOM", ТекущиеДанные.UOM);
	ПараметрыФормы.Вставить("Good", ТекущиеДанные.Good);
	
	ОткрытьФормуМодально("ОбщаяФорма.ФормаПодбораПартииМатериалов", ПараметрыФормы, Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура BatchОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Goods.ТекущиеДанные;
	
	ТекущиеДанные.Batch = ВыбранноеЗначение.Batch;
	//Добавила проверку на равенство знаменателя нулю Федотова Л., РГ-Софт, 10.12.12, вопрос №SLI-0003074
	Если ВыбранноеЗначение.Qty = 0 Тогда
		Сообщить("Суммовые значения не могут быть рассчитаны, так как выбрано нулевое количество.");
	Иначе
		ТекущиеДанные.FiscalPrice = ВыбранноеЗначение.Sum/ВыбранноеЗначение.Qty;	
		ТекущиеДанные.FiscalSum = ВыбранноеЗначение.Sum * ТекущиеДанные.Quantity/ВыбранноеЗначение.Qty;	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//RG Soft Михайлов Д.В. 15.11.11
	Если СтрНайти(Элементы.TransactionType.ТекстРедактирования, "Returns; From Sales") <> 0 Или СтрНайти(Элементы.TransactionType.ТекстРедактирования, "Returns; From Service") <> 0 Тогда
		Элементы.GoodsПодборДокументаСписания.Видимость = Истина;
		Элементы.GoodsПодборДокументаСписания.Доступность = Истина;
	Иначе
		Элементы.GoodsПодборДокументаСписания.Видимость = Ложь;
		Элементы.GoodsПодборДокументаСписания.Доступность = Ложь;
	КонецЕсли;
	//Конец RG Soft Михайлов Д.В. 15.11.11
КонецПроцедуры


&НаКлиенте
Процедура TransactionTypeПриИзменении(Элемент)
	//RG Soft Михайлов Д.В. 15.11.11
	Если СтрНайти(Элементы.TransactionType.ТекстРедактирования, "Returns; From Sales") <> 0 Или СтрНайти(Элементы.TransactionType.ТекстРедактирования, "Returns; From Service") <> 0 Тогда
		Элементы.GoodsПодборДокументаСписания.Видимость = Истина;
		Элементы.GoodsПодборДокументаСписания.Доступность = Истина;
	Иначе
		Элементы.GoodsПодборДокументаСписания.Видимость = Ложь;
		Элементы.GoodsПодборДокументаСписания.Доступность = Ложь;
	КонецЕсли;
	//Конец RG Soft Михайлов Д.В. 15.11.11
КонецПроцедуры

//RG Soft Михайлов Д.В. 16.11.11
&НаКлиенте
Процедура ПодборДокументаСписания(Команда)
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДокументКорректировки", Объект.Ссылка);
	
	ВыбрСсылка = ОткрытьФормуМодально("Документ.InventoryКорректировка.Форма.ФормаВыбораДокументовСписания", ПараметрыФормы , );
	
	Объект.InventoryСписание = ВыбрСсылка;
	//Конец RG Soft Михайлов Д.В. 16.11.11
	
КонецПроцедуры 

//Добавил Карпов Стас РГ-Софт
&НаКлиенте
Процедура ЗаполнитьDSS(Команда)
	DSSНаСервере();
КонецПроцедуры
&НаСервере
Процедура DSSНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкаDSS.Ссылка,
	|	ПроводкаDSS.Item
	|ИЗ
	|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкаDSS
	|		ПО InventoryКорректировкаGoods.Good.Код = ПроводкаDSS.Item
	|ГДЕ
	|	(ПроводкаDSS.System = ""ic""
	|			ИЛИ ПроводкаDSS.System = ""IC"")
	|	И ПроводкаDSS.AccountLawson.Родитель В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				Lawson.Ссылка
	|			ИЗ
	|				ПланСчетов.Lawson КАК Lawson
	|			ГДЕ
	|				Lawson.Наименование = ""Inventories"")
	|	И ПроводкаDSS.Item = InventoryКорректировкаGoods.Good.Код
	|	И ПроводкаDSS.DocumentNbr = InventoryКорректировкаGoods.Ссылка.Номер
	|	И ВЫБОР
	|			КОГДА InventoryКорректировкаGoods.Quantity > 0
	|				ТОГДА ПроводкаDSS.BaseAmount > 0
	|			ИНАЧЕ ПроводкаDSS.BaseAmount < 0
	|		КОНЕЦ
	|	И InventoryКорректировкаGoods.Ссылка = &СсылкаКорр";
	
	Запрос.УстановитьПараметр("СсылкаКорр",Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 0 Тогда
		Для каждого стрРез Из Результат Цикл
			Для каждого стр Из Объект.Goods Цикл
				КодБезПробелов = СтрЗаменить(стр.Good.Код," ","");
				Если КодБезПробелов = стрРез.Item Тогда
					стр.DSS = стрРез.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//Конец		

//добавила Федотова Л., РГ-Софт, 21.02.13, вопрос SLI-0003358
&НаСервере
Процедура ОбновитьСчетаФактуры()
	для каждого Стр из Объект.Goods цикл
		стр.СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(Стр.Реализация, "СчетФактураВыданный");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура GoodsРеализацияПриИзменении(Элемент)
	ОбновитьСчетаФактуры();
КонецПроцедуры
//Конец

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура GoodsAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Goods.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.AU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsAUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsAUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры
//<- RG-Soft VIvanov

// { RGS AArsentev 10.10.2016 18:14:05 - SLI-0006848
&НаКлиенте
Процедура ВключитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Goods Цикл
		СтрокаТЧ.Флаг = Истина;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Goods Цикл
		СтрокаТЧ.Флаг = Ложь;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьPref_Реализацию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИнвентори", ЭтотОбъект); 
	ОткрытьФорму("ОбщаяФорма.ИнвенториЗаполнениеКорректировка", , , , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьИнвентори(Результат, ДополнительныеПараметры) Экспорт  
	
	Если Результат <> Неопределено Тогда
		Если Вопрос("Текущие данные в колонках Reference и Реализация будут перезаполнены! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;	
		КонецЕсли; 
		Для Каждого Элемент из Объект.Goods Цикл
			
			Если Не Элемент.Флаг тогда
				Продолжить
			Иначе
				Если ЗначениеЗаполнено(Результат.Reference) Тогда
					Элемент.Reference = Результат.Reference;
				КонецЕсли;
				Если ЗначениеЗаполнено(Результат.Реализация) Тогда
					Элемент.Реализация = Результат.Реализация;
				КонецЕсли;
			КонецЕсли;								
		КонецЦикла;
		ОбновитьСчетаФактуры()
	Иначе
		Возврат
	КонецЕсли;	

КонецПроцедуры 
// } RGS AArsentev 10.10.2016 18:14:05 - SLI-0006848
