
Перем мОбработкаВажностиРегламентнымЗаданием Экспорт; // Определяет, кто инициатор записи объекта


////////////////////////////////////////////////////////////////////////////
// ПРИ УСТАНОВКЕ НОВОГО НОМЕРА

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "SHIP";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если мОбработкаВажностиРегламентнымЗаданием
		ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи);
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(
		ДополнительныеСвойства.ТаблицаDOCs,
		ДополнительныеСвойства.ТаблицаItems);
	
	ПроверитьВозможностьИзменения(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
			
	ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// НАДО РАСФОРМИРОВАТЬ ЭТО ГОВНОКОДИЩЕ
	// ДОЛЖЕН БЫТЬ ОТДЕЛЬНЫЕ РЕГИСТР СВЕДЕНИЙ С ИЗМЕРЕНИЕМ DOC И РЕСУРСАМИ BOOKED И WITHOUT GREEN LIGHT 
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбновитьBookedWithoutGreenLightИFormalGreenLightВDOCs(Отказ, НачалоДня(Дата), WithoutGreenLight, FormalGreenLight, ДополнительныеСвойства.ТаблицаDOCs);
	КонецЕсли;
		
	//ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьWarehouseFromВParcels(Отказ, ДополнительныеСвойства.ВыборкаРеквизитовActualPOA, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.МассивOldDOCs);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	Для каждого СтрокаOutOfComplianceReasons Из OutOfComplianceReasons Цикл
		Если СтрокаOutOfComplianceReasons.OutOfComplianceReason = Справочники.OutOfComplianceReasons.CustomsValueCorrection Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаOutOfComplianceReasons.InvoiceLines) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = НСтр("ru = 'Не заполнен реквизит ""Invoice Line""';|en = 'Props are not filled in ""Invoice Line""'");
				Сообщение.Текст = "Не заполнен реквизит ""Invoice Line""!!!";
				Сообщение.Сообщить();
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.МассивOldDOCs,
		ДополнительныеСвойства.OldOOCR);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи)
	
	ImportExportСервер.ПодменитьРежимЗаписиОтмененногоДокумента(Отменен, Проведен, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Отменен = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Coordinator) Тогда
		Coordinator = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Coordinator, "ProcessLevel");
	КонецЕсли;
	
	HouseWB = СокрЛП(HouseWB);
	WB2 = СокрЛП(WB2);
	WB3 = СокрЛП(WB3);
	WB4 = СокрЛП(WB4);	
	WBList = HouseWB + ", " + WB2 + ", " + WB3 + ", " + WB4;	
	
	Если ЗначениеЗаполнено(PreAlertETA)
		И НЕ ЗначениеЗаполнено(ETA) Тогда
		ETA = PreAlertETA;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ETA)
		И НЕ ЗначениеЗаполнено(PreAlertETA) Тогда
		PreAlertETA = ETA;
	КонецЕсли;
	
	Если НЕ SWIFTRequired Тогда
		SWIFTRequested = Неопределено;
		SWIFTReceived = Неопределено;
	КонецЕсли;
	
	Если НЕ Inspection Тогда
		InspectionStart = Неопределено;
		InspectionEnd = Неопределено;
	КонецЕсли;
	
	// { RGS AGorlenko 21.12.2015 18:28:58 - S-I-0001434
	Если НЕ PreInspection Тогда
		PreInspectionStart = Неопределено;
		PreInspectionEnd = Неопределено;
	КонецЕсли;
	// } RGS AGorlenko 21.12.2015 18:29:02 - S-I-0001434
	
	// Определим current cargo stage
	CargoStages = Перечисления.ShipmentCargoStages;
	Если ЗначениеЗаполнено(CollectedFromPort) Тогда
		CurrentCargoStage = CargoStages.CollectedFromPort;			
	ИначеЕсли ЗначениеЗаполнено(ATA) Тогда	
		CurrentCargoStage = CargoStages.ATA;		
	ИначеЕсли ЗначениеЗаполнено(ETA) Тогда
		CurrentCargoStage = CargoStages.ETA;
	ИначеЕсли ЗначениеЗаполнено(ATD) Тогда
		CurrentCargoStage = CargoStages.ATD;
	ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
		CurrentCargoStage = CargoStages.ETD;
	Иначе
		CurrentCargoStage = CargoStages.Opened;
	КонецЕсли;	
	
	// Определим current document stage
	DocumentStages = Перечисления.ShipmentDocumentStages;
	Если ЗначениеЗаполнено(Cleared) Тогда
		CurrentDocumentStage = DocumentStages.Cleared;			
	ИначеЕсли ЗначениеЗаполнено(InCustoms) Тогда	
		CurrentDocumentStage = DocumentStages.InCustoms;		
	ИначеЕсли ЗначениеЗаполнено(DoxRcvd) Тогда
		CurrentDocumentStage = DocumentStages.DoxRcvd;
	ИначеЕсли ЗначениеЗаполнено(PreAlert) Тогда
		CurrentDocumentStage = DocumentStages.PreAlert;
	Иначе
		CurrentDocumentStage = DocumentStages.Opened;
	КонецЕсли;	
	
	// Определим дату окончания процесса
	Completed = Неопределено;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//Если ProcessLevel = Справочники.ProcessLevels.AZ ИЛИ ProcessLevel = Справочники.ProcessLevels.TM Тогда	
		//	Completed = Cleared;	
		//Иначе		
		//	Completed = CollectedFromPort;	
		//КонецЕсли;
		
		// S-I-0002464
		Если ЗначениеЗаполнено(Cleared) И ЗначениеЗаполнено(CollectedFromPort) Тогда
			Completed = Макс(Cleared, CollectedFromPort);  			
		КонецЕсли;
		
	КонецЕсли;
	
	// Автоматически снимем галочку Pending SLB и проставим дату окончания процесса
	Если ЗначениеЗаполнено(Completed) Тогда
		PendingSLB = Ложь;
	КонецЕсли;	
	
	// ТЧ DOCs
	ИндексСтроки = 0;
	Пока ИндексСтроки < УпаковочныеЛисты.Количество() Цикл
		Если ЗначениеЗаполнено(УпаковочныеЛисты[ИндексСтроки].УпаковочныйЛист) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			УпаковочныеЛисты.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
	УпаковочныеЛисты.Свернуть("УпаковочныйЛист", "");
	
	// ТЧ OOC
	ИндексСтроки = 0;
	Пока ИндексСтроки < OutOfComplianceReasons.Количество() Цикл
		Если ЗначениеЗаполнено(OutOfComplianceReasons[ИндексСтроки].OutOfComplianceReason) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			OutOfComplianceReasons.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
	OOC = OutOfComplianceReasons.Количество() <> 0;
	
	СтруктураПоискаПоOOC = Новый Структура("OutOfComplianceReason");
	
	СтруктураПоискаПоOOC.OutOfComplianceReason = Справочники.OutOfComplianceReasons.WithoutPreAlert;
	WithoutPreAlert = OutOfComplianceReasons.НайтиСтроки(СтруктураПоискаПоOOC).Количество() <> 0;
	
	СтруктураПоискаПоOOC.OutOfComplianceReason = Справочники.OutOfComplianceReasons.WithoutGreenLigtht;
	WithoutGreenLight = OutOfComplianceReasons.НайтиСтроки(СтруктураПоискаПоOOC).Количество() <> 0;
	
	СтруктураПоискаПоOOC.OutOfComplianceReason = Справочники.OutOfComplianceReasons.FormalGL;
	FormalGreenLight = OutOfComplianceReasons.НайтиСтроки(СтруктураПоискаПоOOC).Количество() <> 0;
	
	Если НЕ ЗначениеЗаполнено(LastModified) Тогда
		LastModified = ТекущаяДата();
	КонецЕсли;
	
	TMSShipmentID = СокрЛП(TMSShipmentID);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи)
	
	// Снимем статус Отменен, если снимается пометка на удаление
	Если НЕ ПометкаУдаления И ЗначениеЗаполнено(Ссылка) Тогда
			
		ПометкаУдаленияДоЗаписи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
		Если ПометкаУдаленияДоЗаписи = Истина Тогда
			Отменен = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение экспортных поставок с помощью Import shipment - это древняя затычка
	// Она уже неактуальна, но сохранена для того, чтобы проводить старые документы
	Если ИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Export Тогда
		Возврат;
	КонецЕсли;
	
	Если Shipper = Справочники.Shippers.Other Тогда
		ТекстОшибок = "You can not use ""Other"" shipper!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Shipper", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ATA)
		ИЛИ ЗначениеЗаполнено(DoxRcvd)
		ИЛИ ЗначениеЗаполнено(InCustoms) Тогда
					
		Если НЕ ЗначениеЗаполнено(PiecesQty) Тогда
			ТекстОшибок = """Pieces qty"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "PiecesQty", , Отказ);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(TotalWBWeight) Тогда
			ТекстОшибок = """Total WB weight"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "TotalWBWeight", , Отказ);
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ActualPOA) Тогда
			ТекстОшибок = """Actual POA"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ActualPOA", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим Cargo stages	
	Если ЗначениеЗаполнено(PreAlertETA) Тогда
		
		Если PreAlertETA < ETD Тогда
			
			ТекстОшибок = """Pre-alert ETA"" can not be earlier than ""ETD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "PreAlertETA", , Отказ);
				
		КонецЕсли;
					
	КонецЕсли;
	
	// { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
		Если ЗначениеЗаполнено(TranzitZoneETA) Тогда
		
		Если TranzitZoneETA < ETD Тогда
			
			ТекстОшибок = """Tranzit zone ETA"" can not be earlier than ""ETD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "TranzitZoneETA", , Отказ);
				
		КонецЕсли;
					
	КонецЕсли;
	// } RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
	
	Если ЗначениеЗаполнено(ETA) Тогда
		
		Если ETA < ETD Тогда
			
			ТекстОшибок = """ETA"" can not be earlier than ""ETD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ETA", , Отказ);
				
		КонецЕсли;
					
	КонецЕсли;

	Если ЗначениеЗаполнено(ATA) Тогда
		
		Если ATA < ATD Тогда
			
			ТекстОшибок = """ATA"" can not be earlier than ""ATD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ATA", , Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ETA) И НЕ WithoutPreAlert Тогда
			
			ТекстОшибок = """ETA"" is empty!
				|For W/o pre-alert shipment add the reason to the OOC table.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ETA", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CollectedFromPort) Тогда
		
		Если НЕ ЗначениеЗаполнено(ATA) Тогда
			
			ТекстОшибок = """ATA"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ATA", , Отказ);
			
		ИначеЕсли CollectedFromPort < ATA Тогда
			
			ТекстОшибок = """Collected from port"" can not be earlier than ""ATA""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "CollectedFromPort", , Отказ);
			
		КонецЕсли;
					
	КонецЕсли;
	
	// Проверим document stages
		
	Если ЗначениеЗаполнено(DoxForCCA) Тогда
		
		Если НЕ WithoutPreAlert Тогда
			
			Если НЕ ЗначениеЗаполнено(PreAlert) Тогда
				
				ТекстОшибок = """Pre alert"" is empty!
					|Для without pre-alert поставок необходимо указать соответствующую причину в Out of compliance reasons.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "PreAlert", , Отказ);
					
			ИначеЕсли DoxForCCA < PreAlert Тогда
				
				ТекстОшибок = """Dox for CCA"" can not be earlier than ""Pre alert""!
					|Для without pre-alert поставок необходимо указать соответствующую причину в Out of compliance reasons.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "DoxForCCA", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(DoxRcvd) Тогда
				
		Если НЕ WithoutPreAlert Тогда
			
			Если НЕ ЗначениеЗаполнено(PreAlert) Тогда
				
				ТекстОшибок = """Pre alert"" is empty!
					|Для without pre-alert поставок необходимо указать соответствующую причину в Out of compliance reasons.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "PreAlert", , Отказ);
					
			ИначеЕсли DoxRcvd < PreAlert Тогда
				
				ТекстОшибок = """Dox rcvd"" can not be earlier than ""Pre alert""!
					|Для without pre-alert поставок необходимо указать соответствующую причину в Out of compliance reasons.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "DoxRcvd", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
						
	КонецЕсли;
	
	Если ЗначениеЗаполнено(SWIFTReceived) Тогда
		
		Если НЕ ЗначениеЗаполнено(SWIFTRequested) Тогда
			
			ТекстОшибок = """SWIFT requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "SWIFTRequested", , Отказ);
				
		ИначеЕсли SWIFTReceived < SWIFTRequested Тогда
			
			ТекстОшибок = """SWIFT received"" can not be earlier than ""SWIFT requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "SWIFTReceived", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(InspectionEnd) Тогда
		
		Если НЕ ЗначениеЗаполнено(InspectionStart) Тогда
			
			ТекстОшибок = """Inspection start"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InspectionStart", , Отказ);
				
		ИначеЕсли InspectionEnd < InspectionStart Тогда
			
			ТекстОшибок = """Inspection end"" can not be earlier than ""Inspection start""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InspectionEnd", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// { RGS AGorlenko 21.12.2015 18:29:43 - S-I-0001434
	Если ЗначениеЗаполнено(PreInspectionEnd) Тогда
		
		Если НЕ ЗначениеЗаполнено(PreInspectionStart) Тогда
			
			ТекстОшибок = """Pre-inspection start"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "PreInspectionStart", , Отказ);
				
		ИначеЕсли PreInspectionEnd < PreInspectionStart Тогда
			
			ТекстОшибок = """Pre-inspection end"" can not be earlier than ""Pre-inspection start""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "PreInspectionEnd", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	// } RGS AGorlenko 21.12.2015 18:29:45 - S-I-0001434
	
	Если ЗначениеЗаполнено(InCustoms) Тогда
		
		Если НЕ WithoutPreAlert Тогда
			
			Если НЕ ЗначениеЗаполнено(PreAlert) Тогда
				
				ТекстОшибок = """Pre alert"" is empty!
					|Для without pre-alert поставок необходимо указать соответствующую причину в Out of compliance reasons.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "Pre alert", , Отказ);
					
			ИначеЕсли InCustoms < PreAlert Тогда
				
				ТекстОшибок = """In customs"" can not be earlier than ""Pre alert""!
					|For shipment without pre-alert add reason to Out of compliance.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InCustoms", , Отказ);	
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SWIFTReceived) Тогда
			
			Если InCustoms < SWIFTReceived Тогда	
				ТекстОшибок = """In customs"" can not be earlier than ""SWIFT received""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InCustoms", , Отказ);	
			КонецЕсли;
			
		Иначе
			
			Если SWIFTRequired Тогда
				
				ТекстОшибок = """SWIFT received"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "SWIFTReceived", , Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Cleared) Тогда
		
		Если НЕ ЗначениеЗаполнено(ATD) Тогда
			
			ТекстОшибок = """ATD"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ATD", , Отказ);
			
		ИначеЕсли Cleared < ATD Тогда
			
			ТекстОшибок = """Cleared"" can not be earlier than ""ATD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Cleared", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ATA) Тогда
			
			ТекстОшибок = """ATA"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ATA", , Отказ);
			
		ИначеЕсли Cleared < ATA Тогда
			
			ТекстОшибок = """Cleared"" can not be earlier than ""ATA""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Cleared", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(InCustoms) Тогда
			
			ТекстОшибок = """In customs"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InCustoms", , Отказ);
			
		ИначеЕсли Cleared < InCustoms Тогда
			
			ТекстОшибок = """Cleared"" can not be earlier than ""In customs""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Cleared", , Отказ);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(InspectionEnd) Тогда
			
			Если Cleared < InspectionEnd Тогда
				ТекстОшибок = """Cleared"" can not be earlier than ""Inspection end""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InCustoms", , Отказ);	
			КонецЕсли;
			
		Иначе
		
			Если Inspection Тогда
				ТекстОшибок = """Inspection end"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InspectionEnd", , Отказ);
			КонецЕсли;
				
		КонецЕсли;
		
		// { RGS AGorlenko 21.12.2015 18:31:37 - S-I-0001434
		Если ЗначениеЗаполнено(PreInspectionEnd) Тогда
			
			Если Cleared < PreInspectionEnd Тогда
				ТекстОшибок = """Cleared"" can not be earlier than ""Pre-inspection end""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InCustoms", , Отказ);	
			КонецЕсли;
			
		Иначе
		
			Если PreInspection Тогда
				ТекстОшибок = """Pre-inspection end"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "PreInspectionEnd", , Отказ);
			КонецЕсли;
				
		КонецЕсли;
		// } RGS AGorlenko 21.12.2015 18:31:38 - S-I-0001434
		
	КонецЕсли;	
	
	Если УпаковочныеЛисты.Количество() = 0 Тогда
		ТекстОшибок = "Table ""DOCs"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибок,
		ЭтотОбъект, "УпаковочныеЛисты", , Отказ);
	КонецЕсли;
	
	// { RGS AArsentev 27.07.2018 S-I-0005470
	//Если ProcessLevel <> Справочники.ProcessLevels.KZ И НЕ ЗначениеЗаполнено(Freight) Тогда
	//	
	//	ТекстОшибок = """Freight"" is empty!";
	//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	ТекстОшибок,
	//	ЭтотОбъект, "Freight", , Отказ);
	//	
	//КонецЕсли;
	
	//// { RGS ASeryakov, 02.11.2018 22:44:45 S-I-0006263
	//Если НЕ MOT = Справочники.MOTs.COURIER Тогда
	//// } RGS ASeryakov 02.11.2018 22:44:49 S-I-0006263
	
	НужнаПроверкаTessNo = Документы.Поставка.НужнаПроверкаTessNo(Ссылка, CCA);
	Если НужнаПроверкаTessNo И НЕ ЗначениеЗаполнено(TessNo) Тогда
		ТекстОшибок = """Tess No."" is empty!";
		// { RGS ASeryakov, 06.08.2018 19:09:37 S-I-0005782
		//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		// } RGS ASeryakov 06.08.2018 19:09:39 S-I-0005782
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибок,
		ЭтотОбъект, "TessNo", , Отказ);
	КонецЕсли;
	// } RGS AArsentev 27.07.2018 S-I-0005470
	
	//// { RGS ASeryakov, 02.11.2018 22:44:45 S-I-0006263
	//КонецЕсли;
	//// } RGS ASeryakov 02.11.2018 22:44:49 S-I-0006263
	
	ПроверитьФорматWB(Отказ);
		
КонецПроцедуры

Процедура ПроверитьФорматWB(Отказ)
	
	Если Не ЗначениеЗаполнено(MOT) Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата < Дата("20131010") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("MOT", MOT);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	MOTsImportWB.WBField,
	|	MOTsImportWB.Waybill
	|ИЗ
	|	Справочник.MOTs.ImportWB КАК MOTsImportWB
	|ГДЕ
	|	MOTsImportWB.Ссылка = &MOT";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		WBField = ЭтотОбъект[СокрЛП(Выборка.WBField)];
		
		Если Выборка.Waybill = Справочники.Waybills.MasterAWBNumber Тогда
			
			Если Не MasterAWBСоответствуетФормату(WBField) Тогда
				ТекстОшибки = "Master AWB number should be in format 'XXX-XXXXXXX(X)', each of the next number in this format comma-separated!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, СокрЛП(Выборка.WBField), , Отказ);
			КонецЕсли;
			
		ИначеЕсли Выборка.Waybill = Справочники.Waybills.ContainerNumber Тогда
			
			Если Не ContainerNumberСоответствуетФормату(WBField) Тогда
				ТекстОшибки = "Container number should be in format 'SSSS1111111' (four letters + seven numbers), each of the next number in this format comma-separated!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, СокрЛП(Выборка.WBField), , Отказ);
			КонецЕсли;

		ИначеЕсли Выборка.Waybill = Справочники.Waybills.TIRNumber Тогда
			
			Если Не TIRNumberСоответствуетФормату(WBField) Тогда
				ТекстОшибки = "TIR number should be in format 'SS-11111111' (two letters + '-' + eight numbers), each of the next number in this format comma-separated!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, СокрЛП(Выборка.WBField), , Отказ);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	     	  		
КонецПроцедуры

Функция MasterAWBСоответствуетФормату(MasterAWB)
	
	// Ограничить запись Master AWB in format XXX-XXXXXXXX, 
	// каждый последующий номер записывать в подобном формате через запятую
	
	Если ПустаяСтрока(MasterAWB) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(MasterAWB) > 12 Тогда 
		МассивMasterAWB	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(MasterAWB, ",");
	Иначе 
		МассивMasterAWB = Новый Массив;
		МассивMasterAWB.Добавить(MasterAWB);
	КонецЕсли;
	
	Для каждого MasterAWB Из МассивMasterAWB Цикл
		
		MasterAWB = СокрЛП(MasterAWB);
		
		Если СтрДлина(MasterAWB) < 11 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрНайти(MasterAWB, "-") <> 4 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		КолВоСимволовПослеДефиса = СтрДлина(Сред(MasterAWB, 5));
		Если КолВоСимволовПослеДефиса < 7 
			ИЛИ КолВоСимволовПослеДефиса > 8 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ContainerNumberСоответствуетФормату(ContainerNumber)
	
	// Ограничить запись Container number in format SSSS (four letters) + 1111111 (seven numbers), 
	// каждый последующий номер записывать в подобном формате через запятую
	
	Если ПустаяСтрока(ContainerNumber) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(ContainerNumber) > 11 Тогда 
		МассивContainerNumber = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ContainerNumber, ",");
	Иначе 
		МассивContainerNumber = Новый Массив;
		МассивContainerNumber.Добавить(ContainerNumber);
	КонецЕсли;
	
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Для каждого ContainerNumber Из МассивContainerNumber Цикл
		
		ContainerNumber = СокрЛП(ContainerNumber);
		
		Если СтрДлина(ContainerNumber) <> 11 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Для Сч = 1 по 11 Цикл 
			
			СимволНомера = Сред(ContainerNumber, Сч, 1);
			
			Если Сч <= 4 Тогда
				Если СтрНайти(Буквы, НРег(СимволНомера)) = 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			иначе
				Попытка
					СимволНомера = Число(СимволНомера);
				Исключение
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

Функция TIRNumberСоответствуетФормату(TIRNumber)
	
	// Ограничить запись TIR number in format SS-11111111, 
	// каждый последующий номер записывать в подобном формате через запятую
	
	Если ПустаяСтрока(TIRNumber) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(TIRNumber) > 11 Тогда 
		МассивTIRNumber = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(TIRNumber, ",");
	Иначе 
		МассивTIRNumber = Новый Массив;
		МассивTIRNumber.Добавить(TIRNumber);
	КонецЕсли;
	
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Для каждого TIRNumber Из МассивTIRNumber Цикл
		
		TIRNumber = СокрЛП(TIRNumber);
		
		Если СтрДлина(TIRNumber) <> 11 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрНайти(TIRNumber, "-") <> 3 Тогда 
			Возврат Ложь;
		КонецЕсли;

		Для Сч = 1 по 11 Цикл 
			
			СимволНомера = Сред(TIRNumber, Сч, 1);
			
			Если Сч < 3 Тогда
				Если СтрНайти(Буквы, НРег(СимволНомера)) = 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли Сч > 3 Тогда
				Попытка
					СимволНомера = Число(СимволНомера);
				Исключение
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(ActualPOA) Тогда
			
		СтруктураПараметров.Вставить("ActualPOA", ActualPOA);
		СтруктураТекстов.Вставить("РеквизитыActualPOA",
			"ВЫБРАТЬ
			|	SeaAndAirPorts.DefaultWarehouse КАК DefaultWarehouse
			|ИЗ
			|	Справочник.SeaAndAirPorts КАК SeaAndAirPorts
			|ГДЕ
			|	SeaAndAirPorts.Ссылка = &ActualPOA");
			
	КонецЕсли;		
		
	СтруктураПараметров.Вставить("DOCs", УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"));
	СтруктураТекстов.Вставить("РеквизитыDOCs",
		"ВЫБРАТЬ
		|	DOCs.Ссылка КАК DOC,
		|	DOCs.Представление КАК DOCПредставление,
		|	НАЧАЛОПЕРИОДА(DOCs.Дата, ДЕНЬ) КАК Дата,
		|	DOCs.Номер,
		|	DOCs.ПометкаУдаления,
		|	DOCs.POD,
		|	DOCs.MOT,
		|	DOCs.RequestedPOA,
		|	DOCs.CCA,
		|	DOCs.ИмпортЭкспорт,
		|	DOCs.Urgency.Порядок КАК ПриоритетПорядок,
		|	DOCs.GOLD,
		|	DOCs.TMS,
		|	DOCs.ConsignTo.Представление КАК ConsignToПредставление,
		|	DOCs.Requested,
		|	DOCs.Received,
		|	DOCs.Granted,
		|	DOCs.Booked,
		|	DOCs.WithoutGreenLight,
		|	DOCs.Проведен,
		|	DOCs.Отменен,
		|	DOCs.InvoiceList,
		|	DOCs.POList,
		|	ЕСТЬNULL(СУММА(DOCsParcels.Parcel.NumOfParcels), 0) КАК PiecesQty,
		|	ЕСТЬNULL(СУММА(DOCsParcels.Parcel.CubicMeters), 0) КАК CubicMeters,
		|	ЕСТЬNULL(СУММА(DOCsParcels.Parcel.GrossWeightKG), 0) КАК GrossWeightKg,
		|	DOCs.FormalGreenLight
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК DOCs
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		|		ПО DOCs.Ссылка = DOCsParcels.Ссылка
		|ГДЕ
		|	DOCs.Ссылка В(&DOCs)
		|
		|СГРУППИРОВАТЬ ПО
		|	DOCs.Ссылка,
		|	DOCs.Представление,
		|	DOCs.Номер,
		|	DOCs.ПометкаУдаления,
		|	DOCs.POD,
		|	DOCs.MOT,
		|	DOCs.RequestedPOA,
		|	DOCs.CCA,
		|	DOCs.ИмпортЭкспорт,
		|	DOCs.Urgency.Порядок,
		|	DOCs.GOLD,
		|	DOCs.ConsignTo.Представление,
		|	DOCs.Requested,
		|	DOCs.Received,
		|	DOCs.Granted,
		|	DOCs.Booked,
		|	DOCs.WithoutGreenLight,
		|	DOCs.Проведен,
		|	DOCs.Отменен,
		|	DOCs.InvoiceList,
		|	DOCs.POList,
		|	НАЧАЛОПЕРИОДА(DOCs.Дата, ДЕНЬ),
		|	DOCs.TMS");
		
	СтруктураТекстов.Вставить("HazardClasses",
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	DOCsParcels.Parcel.HazardClass.Представление КАК Представление,
		|	DOCsParcels.Parcel.HazardClass.Код КАК Код
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		|ГДЕ
		|	DOCsParcels.Ссылка В(&DOCs)
		|	И DOCsParcels.Parcel.HazardClass <> ЗНАЧЕНИЕ(Справочник.HazardClasses.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	DOCsParcels.Parcel.HazardClass.Код");
		
	СтруктураТекстов.Вставить("РеквизитыItems",
		"ВЫБРАТЬ
		|	Items.Ссылка КАК Item,
		|	Items.Инвойс КАК Invoice,
		|	Items.НомерСтрокиИнвойса КАК InvoiceLineNo,
		|	Items.PermanentTemporary,
		|	Items.PermitsRequired,
		|	Items.PSA КАК PSAContract,
		|	Items.КостЦентр.Segment.Код КАК SegmentCode,
		|	Items.COORequired,
		|	Items.КодПоИнвойсу КАК PartNo,
		|	Items.ConfirmationOfCargoLatestDate,
		|	Items.GuaranteeLetter
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&DOCs)");	
		
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если НЕ ЭтоНовый() Тогда
									
		СтруктураТекстов.Вставить("СтарыеЗначенияРеквизитовШапки",
			"ВЫБРАТЬ
			|	Shipment.ПометкаУдаления,
			|	Shipment.Номер,
			|	Shipment.Дата,
			|	Shipment.Проведен,
			|	Shipment.ИмпортЭкспорт,
			|	Shipment.GOLD,
			|	Shipment.Shipper,
			|	Shipment.FreightForwarder,
			|	Shipment.HouseWB,
			|	Shipment.WB2,
			|	Shipment.WB3,
			|	Shipment.WB4,
			|	Shipment.WBList,
			|	Shipment.PiecesQty,
			|	Shipment.TotalWBWeight,
			|	Shipment.Freight,
			|	Shipment.Urgency,
			|	Shipment.POD,
			|	Shipment.MOT,
			|	Shipment.ActualPOA,
			|	ЕСТЬNULL(Shipment.ActualPOA.DefaultWarehouse, ЗНАЧЕНИЕ(Справочник.Warehouses.ПустаяСсылка)) КАК WarehouseFrom,
			|	Shipment.CCA,
			|	Shipment.Coordinator,
			|	Shipment.СтатусВажности,
			|	Shipment.OOC,
			|	Shipment.ETD,
			|	Shipment.ATD,
			|	Shipment.PreAlertETA,
			|	Shipment.ETA,
			|	Shipment.ATA,
			|	Shipment.CollectedFromPort,
			|	Shipment.CurrentCargoStage,
			|	Shipment.PreAlert,
			|	Shipment.DoxForCCA,
			|	Shipment.DoxRcvd,
			|	Shipment.PermitsRequested,
			|	Shipment.PermitsObtained,
			|	Shipment.InCustoms,
			|	Shipment.Cleared,
			|	Shipment.CurrentDocumentStage,
			|	Shipment.WithoutPreAlert,
			|	Shipment.WithoutGreenLight,
			|	Shipment.PendingSLB,
			|	Shipment.LastModified,
			|	Shipment.Responsible,
			|	Shipment.Отменен,
			|	Shipment.CurrentComment,
			|	Shipment.ConsignToList,
			|	Shipment.DOCList,
			|	Shipment.POList,
			|	Shipment.InfoOnHazardClasses,
			// { RGS AArsentev 03.07.2018 S-I-0005470
			|	Shipment.TessNo,
			// } RGS AArsentev 03.07.2018 S-I-0005470
			|	Shipment.ActualPOA.DefaultWarehouse КАК DefaultWarehouse,
			|	Shipment.Inspection,
			|	Shipment.InspectionStart,
			|	Shipment.InspectionEnd,
			// { RGS AGorlenko 21.12.2015 18:33:51 - S-I-0001434
			|	Shipment.PreInspection,
			|	Shipment.PreInspectionStart,
			|	Shipment.PreInspectionEnd,
			// } RGS AGorlenko 21.12.2015 18:34:00 - S-I-0001434
			|	Shipment.CCAJobReference,
			|	Shipment.SWIFTRequired,
			|	Shipment.SWIFTRequested,
			|	Shipment.SWIFTReceived,
			|	Shipment.ProcessLevel,
			|	Shipment.PSARequested,
			|	Shipment.PSAReceived,
			|	Shipment.CCDNumber,
			|	Shipment.COOReceived,
			|	Shipment.COORequested,
			// { RGS AGorlenko 03.06.2016 11:02:13 - для контроля редактирования полей шипментов, участвующих в обмене
			|	Shipment.ConditionalRelease,
			// } RGS AGorlenko 03.06.2016 11:02:54 - для контроля редактирования полей шипментов, участвующих в обмене
			// { RGS AGorlenko 30.05.2017 11:49:18 - 
			|	Shipment.CCACurrentComment,
			|	Shipment.FormalGreenLight,
			// } RGS AGorlenko 30.05.2017 11:49:19 - 
			|	Shipment.COORequired,
			|	Shipment.TMSShipmentID,
			// { RGS ASeryakov 01.11.2017 12:00:00 - S-I-0003893
			|	Shipment.TranzitZoneETA,
			// { RGS ASeryakov 01.11.2017 12:00:00 - S-I-0003893
			|	Shipment.GuaranteeLetterRequired
			|ИЗ
			|	Документ.Поставка КАК Shipment
			|ГДЕ
			|	Shipment.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("OldDOCs",
			"ВЫБРАТЬ
			|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист КАК DOC
			|ИЗ
			|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
			|ГДЕ
			|	ПоставкаУпаковочныеЛисты.Ссылка = &Ссылка");		
			
		СтруктураТекстов.Вставить("OldOOCR",
			"ВЫБРАТЬ
			|	ShipmentOutOfComplianceReasons.OutOfComplianceReason,
			// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
			|	ShipmentOutOfComplianceReasons.InvoiceLines,
			|	ShipmentOutOfComplianceReasons.AcceptedBySLB,
			|	ShipmentOutOfComplianceReasons.NotAcceptedBySLB,
			|	ShipmentOutOfComplianceReasons.ConditionalRelease,
			// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
			|	ShipmentOutOfComplianceReasons.Комментарий
			|ИЗ
			|	Документ.Поставка.OutOfComplianceReasons КАК ShipmentOutOfComplianceReasons
			|ГДЕ
			|	ShipmentOutOfComplianceReasons.Ссылка = &Ссылка");
			
	КонецЕсли;
	
	Если НЕ Отменен ИЛИ ПометкаУдаления Тогда
		
		СтруктураТекстов.Вставить("DOCsInOtherShipments",
			"ВЫБРАТЬ
			|	ShipmentsDOCs.УпаковочныйЛист КАК DOC,
			|	ShipmentsDOCs.УпаковочныйЛист.Представление КАК DOCПредставление,
			|	ShipmentsDOCs.Ссылка.Представление КАК ShipmentПредставление
			|ИЗ
			|	Документ.Поставка.УпаковочныеЛисты КАК ShipmentsDOCs
			|ГДЕ
			|	ShipmentsDOCs.Ссылка <> &Ссылка
			|	И (НЕ ShipmentsDOCs.Ссылка.Отменен)
			|	И ShipmentsDOCs.УпаковочныйЛист В(&DOCs)");
		
	КонецЕсли; 
		
	Если Проведен ИЛИ Отменен Тогда
		
		СтруктураТекстов.Вставить("РеквизитыInvoiceLinesMatching",
			"ВЫБРАТЬ
			|	InvoiceLinesMatching.Ссылка,
			|	InvoiceLinesMatching.Проведен,
			|	InvoiceLinesMatching.Представление
			|ИЗ
			|	Документ.ЗакрытиеПоставки КАК InvoiceLinesMatching
			|ГДЕ
			|	InvoiceLinesMatching.Поставка = &Ссылка
			|	И (НЕ InvoiceLinesMatching.ПометкаУдаления)");
							
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеЗначенияРеквизитовШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеЗначенияРеквизитовШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаDOCs", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыDOCs") Тогда
		ДополнительныеСвойства.ТаблицаDOCs = СтруктураРезультатов.РеквизитыDOCs.Выгрузить();
		ДополнительныеСвойства.ТаблицаDOCs.Индексы.Добавить("DOC");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивOldDOCs", Новый Массив);
	Если СтруктураРезультатов.Свойство("OldDOCs") Тогда
		ДополнительныеСвойства.МассивOldDOCs = СтруктураРезультатов.OldDOCs.Выгрузить().ВыгрузитьКолонку("DOC");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовInvoiceLinesMatching", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыInvoiceLinesMatching") Тогда	
		ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching = СтруктураРезультатов.РеквизитыInvoiceLinesMatching.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching.Следующий();	
	КонецЕсли;
           
	ДополнительныеСвойства.Вставить("OldOOCR", Неопределено);
	Если СтруктураРезультатов.Свойство("OldOOCR") Тогда
		ДополнительныеСвойства.OldOOCR = СтруктураРезультатов.OldOOCR.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItems") Тогда
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаDOCsInOtherShipments", Неопределено);
	Если СтруктураРезультатов.Свойство("DOCsInOtherShipments") Тогда
		ДополнительныеСвойства.ТаблицаDOCsInOtherShipments = СтруктураРезультатов.DOCsInOtherShipments.Выгрузить();
		ДополнительныеСвойства.ТаблицаDOCsInOtherShipments.Индексы.Добавить("DOC");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовActualPOA", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыActualPOA") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовActualPOA = СтруктураРезультатов.РеквизитыActualPOA.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовActualPOA.Следующий();
	КонецЕсли;	

	ДополнительныеСвойства.Вставить("ТаблицаHazardClasses", Неопределено);
	Если СтруктураРезультатов.Свойство("HazardClasses") Тогда
		ДополнительныеСвойства.ТаблицаHazardClasses = СтруктураРезультатов.HazardClasses.Выгрузить();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ТаблицаDOCs, ТаблицаItems)
		
	ОбновитьРеквизитыЗависящиеОтDOC(ТаблицаDOCs);
	
	ОбновитьSegmentsList(ТаблицаItems);
	ОбновитьPermitsRequired(ТаблицаItems);
	ОбновитьCOORequired(ТаблицаItems);
	ОбновитьPSA(ТаблицаItems);
	ОбновитьGuaranteeLetter(ТаблицаItems);
	
	СтатусВажности = ОпределитьАктуальныйСтатусВажности();
	
КонецПроцедуры

Процедура ОбновитьРеквизитыЗависящиеОтDOC(ТаблицаDOCs)
		
	// Заполним реквизиты шапки, которы должны быть уникальными
	POD = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("POD", ТаблицаDOCs);
	MOT = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("MOT", ТаблицаDOCs);
	CCA = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("CCA", ТаблицаDOCs);
	ИмпортЭкспорт = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("ИмпортЭкспорт", ТаблицаDOCs);
	GOLD = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("GOLD", ТаблицаDOCs);
	
	ДополнительныеСвойства.Вставить("RequestedPOA", РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("RequestedPOA", ТаблицаDOCs));
	
	// Consign to list
	ТаблицаДекларантов = ТаблицаDOCs.Скопировать(, "ConsignToПредставление");
	ТаблицаДекларантов.Свернуть("ConsignToПредставление");
	ТаблицаДекларантов.Сортировать("ConsignToПредставление");
	МассивConsignTo = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДекларантов Цикл
		МассивConsignTo.Добавить(СокрЛП(СтрокаТаблицы.ConsignToПредставление));
	КонецЦикла;
	NewConsignToList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивConsignTo, ", ");
	ОбщегоНазначения.УстановитьЗначение(ConsignToList, NewConsignToList);
		
	// Заполним приоритет максимальным значением
	НовыйПриоритет = Перечисления.Urgencies.ПустаяСсылка();
	ТаблицаПриоритеты = ТаблицаDOCs.Скопировать(,"ПриоритетПорядок");
	ТаблицаПриоритеты.Сортировать("ПриоритетПорядок УБЫВ");
	Если ТаблицаПриоритеты.Количество() Тогда
		
		Если ТипЗнч(ТаблицаПриоритеты[0].ПриоритетПорядок) = Тип("Число") Тогда
			НовыйПриоритет = Перечисления.Urgencies[ТаблицаПриоритеты[0].ПриоритетПорядок];
		КонецЕсли;
		
	КонецЕсли;
	ОбщегоНазначения.УстановитьЗначение(Urgency, НовыйПриоритет);	
	
	// DOC list, Invoice list и PO list
	МассивDOCNo = Новый Массив;
	МассивShipmentInvoiceList = Новый Массив;
	МассивShipmentPOList = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаDOCs Цикл
		
		МассивDOCNo.Добавить(СокрЛП(СтрокаТаблицы.Номер));
		
		МассивDOCInvoiceList = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.InvoiceList, ", ");	
		МассивShipmentInvoiceList = РГСофтКлиентСервер.СложитьМассивы(МассивShipmentInvoiceList, МассивDOCInvoiceList);
		
		МассивDOCPOList = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.POList, ", ");	
		МассивShipmentPOList = РГСофтКлиентСервер.СложитьМассивы(МассивShipmentPOList, МассивDOCPOList);
			
	КонецЦикла;
	
	NewDOCList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивDOCNo, ", ");
	ОбщегоНазначения.УстановитьЗначение(DOCList, NewDOCList);
	
	МассивShipmentInvoiceList = РГСофтКлиентСервер.СортироватьМассив(МассивShipmentInvoiceList);
	NewInvoiceList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивShipmentInvoiceList, ", ");
    РГСофтКлиентСервер.УстановитьЗначение(InvoiceList, NewInvoiceList);
	
	МассивShipmentPOList = РГСофтКлиентСервер.СортироватьМассив(МассивShipmentPOList);
	NewPOList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивShipmentPOList, ", ");
    РГСофтКлиентСервер.УстановитьЗначение(POList, NewPOList);
	
	// Hazard classes
	ТаблицаHazardClasses = ДополнительныеСвойства.ТаблицаHazardClasses;
	СтрокаHazardClass = "";
	Для Каждого СтрТаблицыHazardClasses из ТаблицаHazardClasses Цикл 
		СтрокаHazardClass = СтрокаHazardClass + ?(СтрокаHazardClass = "", "", ", ") + СокрЛП(СтрТаблицыHazardClasses.Представление);
	КонецЦикла;
	
	InfoOnHazardClasses = ?(Найти(InfoOnHazardClasses, СтрокаHazardClass) = 0, 
		InfoOnHazardClasses + ?(InfoOnHazardClasses = "", "", ", ") + СтрокаHazardClass,
		InfoOnHazardClasses);	
	
КонецПроцедуры

Процедура ОбновитьSegmentsList(ТаблицаItems)
	
	Если УпаковочныеЛисты.Количество() = 0 Тогда
		SegmentsList = "";
		Возврат;
	КонецЕсли;
	
	ТаблицаSegmentsCodes = ТаблицаItems.Скопировать(,"SegmentCode");
	ТаблицаSegmentsCodes.Свернуть("SegmentCode");
	ТаблицаSegmentsCodes.Сортировать("SegmentCode");
	МассивSegmentsCodes = ТаблицаSegmentsCodes.ВыгрузитьКолонку("SegmentCode");
	SegmentsList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивSegmentsCodes);
	
КонецПроцедуры

Процедура ОбновитьPermitsRequired(ТаблицаItems)
	
	PermitsRequired = Перечисления.YesNo.No;
	
	Если УпаковочныеЛисты.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
			Если СтрокаТаблицы.PermitsRequired = Перечисления.YesNo.Yes Тогда
				PermitsRequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если PermitsRequired = Перечисления.YesNo.No Тогда
		PermitsRequested = Неопределено;
		PermitsObtained = Неопределено;
		//ConditionalRelease = Неопределено;    //S-I-0001570
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьGuaranteeLetter(ТаблицаItems)
	
	GuaranteeLetterRequired = Перечисления.YesNo.No;
	
	Если УпаковочныеЛисты.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
			Если СтрокаТаблицы.GuaranteeLetter = Перечисления.YesNo.Yes Тогда
				GuaranteeLetterRequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьCOORequired(ТаблицаItems)
	
	COORequired = Перечисления.YesNo.No;
	
	Если УпаковочныеЛисты.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
			Если СтрокаТаблицы.COORequired = Перечисления.YesNo.Yes Тогда
				COORequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если COORequired = Перечисления.YesNo.No Тогда
		COORequested = Неопределено;
		COOReceived = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьPSA(ТаблицаItems)
	
	PSA = Перечисления.YesNo.No;
	
	Если УпаковочныеЛисты.Количество() > 0 Тогда
		
		NonPSAAZ = Справочники.PSAContracts.NonPSAAZ;
		NonPSATM = Справочники.PSAContracts.NonPSATM;
	
		Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.PSAContract)
				И СтрокаТаблицы.PSAContract <> NonPSAAZ 
				И СтрокаТаблицы.PSAContract <> NonPSATM Тогда
				PSA = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если PSA = Перечисления.YesNo.No Тогда
		PSARequested = Неопределено;
		PSAReceived = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьАктуальныйСтатусВажности() Экспорт
	
	СтатусыВажности = Перечисления.СтатусыВажности;
	
	// Отмененные поставки всегда зеленые
	Если Отменен Тогда
		Возврат СтатусыВажности.Зеленый;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Completed) Тогда
		Возврат СтатусыВажности.Зеленый;
	КонецЕсли;
	
	// { RGS AArsentev 28.08.2017 S-I-0003552
	Если CurrentDocumentStage = Перечисления.ShipmentDocumentStages.Opened Тогда
		Возврат СтатусыВажности.Красный;
	КонецЕсли;
	// } RGS AArsentev 28.08.2017 S-I-0003552
		
	Если ЗначениеЗаполнено(ATA) Тогда
		
		// Поведение светофора на этапе ATA различается для (AZ, KZ, UZ и TM) и для всех остальных процесс левелов
		Если ProcessLevel = Справочники.ProcessLevels.AZ
			ИЛИ ProcessLevel = Справочники.ProcessLevels.KZ
			ИЛИ ProcessLevel = Справочники.ProcessLevels.UZ
			ИЛИ ProcessLevel = Справочники.ProcessLevels.TM Тогда
			
			// Если груз уже подан в таможню
			Если ЗначениеЗаполнено(InCustoms) Тогда
				
				ВремяНахожденияНаInCustoms = ТекущаяДата() - InCustoms;
				
				// На этапе In customs цвета зависят от MOT
				MOTs = Справочники.MOTs;
				Если MOT = MOTs.AIR
					ИЛИ MOT = MOTs.COURIER Тогда
					
					Если ВремяНахожденияНаInCustoms < 5*24*60*60 Тогда
						Возврат СтатусыВажности.Зеленый;
					ИначеЕсли ВремяНахожденияНаInCustoms < 7*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				Иначе
					
					Если ВремяНахожденияНаInCustoms < 15*24*60*60 Тогда
						Возврат СтатусыВажности.Зеленый;
					ИначеЕсли ВремяНахожденияНаInCustoms < 21*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				КонецЕсли;
				
			// Если товар еще не подан в таможню
			Иначе
				
				// На этом этапе все зависит от необходимости пермитов и PSA и их комбинаций
				
				// Если пермиты запрошены, но не получены и PSA запрошен но не получен
				Если ЗначениеЗаполнено(PermitsRequested) И НЕ ЗначениеЗаполнено(PermitsObtained)
					И ЗначениеЗаполнено(PSARequested) И НЕ ЗначениеЗаполнено(PSAReceived) Тогда
					
					// Далее сложная логика: надо брать наиболее красный статус
					ВремяНахожденияНаPermitsRequested = ТекущаяДата() - PermitsRequested;
					ВремяНахожденияНаPSARequested = ТекущаяДата() - PSARequested;
					
					Если ВремяНахожденияНаPermitsRequested < 15*24*60*60 И ВремяНахожденияНаPSARequested < 8*24*60*60 Тогда
						Возврат СтатусыВажности.Зеленый;
					ИначеЕсли ВремяНахожденияНаPermitsRequested < 21*24*60*60 И ВремяНахожденияНаPSARequested < 11*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				// Если пермиты запрошены, но не получены
				ИначеЕсли ЗначениеЗаполнено(PermitsRequested) И НЕ ЗначениеЗаполнено(PermitsObtained) Тогда
					
					ВремяНахожденияНаPermitsRequested = ТекущаяДата() - PermitsRequested;
					Если ВремяНахожденияНаPermitsRequested < 15*24*60*60 Тогда
						Возврат СтатусыВажности.Зеленый;
					ИначеЕсли ВремяНахожденияНаPermitsRequested < 21*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				// Если PSA запрошен, но не получен
				ИначеЕсли ЗначениеЗаполнено(PSARequested) И НЕ ЗначениеЗаполнено(PSAReceived) Тогда
					
					ВремяНахожденияНаPSARequested = ТекущаяДата() - PSARequested;
					Если ВремяНахожденияНаPSARequested < 8*24*60*60 Тогда
						Возврат СтатусыВажности.Зеленый;
					ИначеЕсли ВремяНахожденияНаPSARequested < 11*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				// Во всех остальных случаях (Permits и PSA не требуются, или еще не запрошены, или уже получены)
				Иначе	
					
					ВремяНахожденияНаATA = ТекущаяДата() - ATA;
					Если ВремяНахожденияНаATA < 3*24*60*60 Тогда
						Возврат СтатусыВажности.Желтый;
					Иначе
						Возврат СтатусыВажности.Красный;
					КонецЕсли;
					
				КонецЕсли;
	
			КонецЕсли;
			
		// Все остальные процесс левелы на этапе ATA
		Иначе
			
			Если ЗначениеЗаполнено(Cleared) Тогда
				
				ВремяНахожденияНаCleared = ТекущаяДата() - Cleared;
				Если ВремяНахожденияНаCleared >= 5*24*60*60 Тогда
					Возврат СтатусыВажности.Красный;
				КонецЕсли;
				
			КонецЕсли;
			
			ВремяНахожденияНаATA = ТекущаяДата() - ATA;				
			MOTs = Справочники.MOTs;
			Если MOT = MOTs.AIR 
				ИЛИ MOT = MOTs.COURIER Тогда
				
				Если ВремяНахожденияНаATA < 3*24*60*60 Тогда
					Возврат СтатусыВажности.Зеленый;
				ИначеЕсли ВремяНахожденияНаATA < 5*24*60*60 Тогда
					Возврат СтатусыВажности.Желтый;
				Иначе
					Возврат СтатусыВажности.Красный;
				КонецЕсли;
			
			Иначе
				
				Если ВремяНахожденияНаATA < 7*24*60*60 Тогда
					Возврат СтатусыВажности.Зеленый;
				ИначеЕсли ВремяНахожденияНаATA < 14*24*60*60 Тогда
					Возврат СтатусыВажности.Желтый;
				Иначе
					Возврат СтатусыВажности.Красный;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ETA) Тогда
		
		Если ЗначениеЗаполнено(DoxRcvd)
			ИЛИ ЗначениеЗаполнено(InCustoms)
			ИЛИ ЗначениеЗаполнено(Cleared) Тогда
			Возврат СтатусыВажности.Красный;
		КонецЕсли;
				
		ОсталосьДоETA = ETA - ТекущаяДата();
		Если ОсталосьДоETA <= 0 Тогда
			Возврат СтатусыВажности.Красный;
		ИначеЕсли ОсталосьДоETA <= 2*24*60*60 Тогда
			Возврат СтатусыВажности.Желтый;
		Иначе
			Возврат СтатусыВажности.Зеленый;
		КонецЕсли;
		
	Иначе
		
		// Определим дату изменения статуса
		Если ЗначениеЗаполнено(ATD) Тогда
			StageDate = ATD;
		ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
			StageDate = ETD;
		Иначе
			StageDate = Дата;
		КонецЕсли;
				
		ВремяНахожденияНаStage = StageDate - ТекущаяДата();
					
		MOTs = Справочники.MOTs;
		Если MOT = MOTs.AIR 
			ИЛИ MOT = MOTs.COURIER Тогда
			
			Если ВремяНахожденияНаStage <= 0 Тогда
				Возврат СтатусыВажности.Зеленый;
			ИначеЕсли ВремяНахожденияНаStage < 5*24*60*60 Тогда
				Возврат СтатусыВажности.Желтый;
			Иначе
				Возврат СтатусыВажности.Красный;
			КонецЕсли;
		
		Иначе
			
			Если ВремяНахожденияНаStage <= 0 Тогда
				Возврат СтатусыВажности.Зеленый;
			ИначеЕсли ВремяНахожденияНаStage < 15*24*60*60 Тогда
				Возврат СтатусыВажности.Желтый;
			Иначе
				Возврат СтатусыВажности.Красный;
			КонецЕсли;
			
		КонецЕсли;
															
	КонецЕсли;
	
	Возврат СтатусыВажности.Красный;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ)
	
	ПроверитьВозможностьИзмененияПоInvoiceLinesMatching(Отказ, ДополнительныеСвойства.ВыборкаРеквизитовInvoiceLinesMatching, ДополнительныеСвойства.МассивOldDOCs);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьИзмененияБрокером(Отказ, ДополнительныеСвойства.МассивOldDOCs, ДополнительныеСвойства.OldOOCR);
	
	ПроверитьВозможностьИзмененияОбменLeg6(Отказ);
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияПоInvoiceLinesMatching(Отказ, ВыборкаРеквизитовInvoiceLinesMatching, МассивOldDOCs)
	
	Если ВыборкаРеквизитовInvoiceLinesMatching <> Неопределено И ВыборкаРеквизитовInvoiceLinesMatching.Количество() Тогда
		
		Если Проведен И ВыборкаРеквизитовInvoiceLinesMatching.Проведен Тогда
		
			МассивDOCs = УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");
			Если НЕ РГСофтКлиентСервер.МассивыИдентичны(МассивDOCs, МассивOldDOCs) Тогда
				ТекстОшибки = "Нельзя изменить состав DOCs, так как текущий """ + ЭтотОбъект + """ указан в проведенном """ + ВыборкаРеквизитовInvoiceLinesMatching.Представление + """!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "УпаковочныеЛисты", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отменен Тогда
			ТекстОшибки = "Нельзя отменить текущий """ + ЭтотОбъект + """, так как он указан в """ + ВыборкаРеквизитовInvoiceLinesMatching.Представление + """!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Отменен", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ПроверитьВозможностьИзмененияБрокером(Отказ, МассивOldDOCs, OldOOCR)
	
	Если НЕ CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
			
	Если ЭтоНовый() Тогда
		Сообщить("You are not allowed to create new Shipments!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты шапки
	
	// { RGS AGorlenko 30.05.2017 11:50:32 - изменен состав полей, доступных брокеру
	//СтруктураДоступныхДляИзмененияРеквизитов = Новый Структура(
	//	"Shipper, FreightForwarder, HouseWB, WB2, WB3, WB4, PiecesQty, TotalWBWeight, Freight, ActualPOA,
	//	|ETD, ATD, PreAlertETA, ETA, ATA, CollectedFromPort, CurrentCargoStage,
	//	|PreAlert, DoxForCCA, DoxRcvd, PermitsRequested, PermitsObtained, InCustoms, Cleared, CurrentDocumentStage,
	//	|CurrentComment, InfoOnHazardClasses, Inspection, InspectionStart, InspectionEnd, CCAJobReference,
	//	|SWIFTRequired, SWIFTRequested, SWIFTReceived, PSARequested, PSAReceived,
	//	|Completed, СтатусВажности, WBList, ConsignToList, InvoiceList, SegmentsList, POList, PermitsRequired, 
	//	|ConditionalRelease, PSA, LastModified, Responsible, COORequired, COORequested, COOReceived, PreInspection, 
	//	|PreInspectionStart, PreInspectionEnd");
	СтруктураДоступныхДляИзмененияРеквизитов = Новый Структура(
		"Shipper, FreightForwarder, HouseWB, WB2, WB3, WB4, PiecesQty, TotalWBWeight, Freight, ActualPOA,
		|ETD, ATD, PreAlertETA, ETA, ATA, CollectedFromPort, CurrentCargoStage,
		|PreAlert, DoxForCCA, DoxRcvd, PermitsRequested, PermitsObtained, InCustoms, Cleared, CurrentDocumentStage,
		|CurrentComment, InfoOnHazardClasses, Inspection, InspectionStart, InspectionEnd, CCAJobReference,
		|SWIFTRequired, SWIFTRequested, SWIFTReceived, PSARequested, PSAReceived,
		|Completed, СтатусВажности, WBList, ConsignToList, InvoiceList, SegmentsList, POList, PermitsRequired, 
		|ConditionalRelease, PSA, LastModified, Responsible, COORequired, COORequested, COOReceived, PreInspection, 
		// { RGS ASeryakov 10/4/2017 18:40:08 PM S-I-0003858
		//|PreInspectionStart, PreInspectionEnd, CCDNumber, CCACurrentComment, GuaranteeLetterRequired");
		|PreInspectionStart, PreInspectionEnd, CCDNumber, CCACurrentComment, GuaranteeLetterRequired, Urgency, TessNo");
		// } RGS ASeryakov 10/4/2017 18:40:08 PM S-I-0003858
	// } RGS AGorlenko 30.05.2017 11:53:13 - изменен состав полей, доступных брокеру
	
	ВыборкаСтарыхЗначенийРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;		
	МетаданныеДокумента = Метаданные();		                                                                
	СтандартныеРеквизиты = МетаданныеДокумента.СтандартныеРеквизиты;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхЗначенийРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change '" + Реквизит.Синоним + "'!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = МетаданныеДокумента.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если СтруктураДоступныхДляИзмененияРеквизитов.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
							
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхЗначенийРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change '" + Реквизит.Синоним + "'!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
						
	КонецЦикла;
	
	// Проверим табличные части
	
	МассивDOCs = УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");
	Если НЕ РГСофтКлиентСервер.МассивыИдентичны(МассивDOCs, МассивOldDOCs) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You are not allowed to change DOCs!",
			ЭтотОбъект, "УпаковочныеЛисты", , Отказ);
	КонецЕсли;
		
	ТаблицаПроверкиOOCR = OldOOCR.Скопировать();
	ТаблицаПроверкиOOCR.Колонки.Добавить("ПроверочнаяКолонка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	ТаблицаПроверкиOOCR.ЗаполнитьЗначения(-1, "ПроверочнаяКолонка");
	Для Каждого СтрокаТЧ Из OutOfComplianceReasons Цикл
		НоваяСтрокаТаблицы = ТаблицаПроверкиOOCR.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТЧ);
		НоваяСтрокаТаблицы.ПроверочнаяКолонка = 1;
	КонецЦикла;
	ТаблицаПроверкиOOCR.Свернуть("OutOfComplianceReason, Комментарий", "ПроверочнаяКолонка");
	Для Каждого СтрокаТаблицы Из ТаблицаПроверкиOOCR Цикл
		
		Если СтрокаТаблицы.ПроверочнаяКолонка <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change Out of compliance reasons!",
				ЭтотОбъект, "OutOfComplianceReasons", , Отказ);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияОбменLeg6(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("Leg7ReportLoading") Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна("РедактированиеНеДоступныхПолейLeg6") ИЛИ CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна("ImportExportAccountant") И Документы.Поставка.ПолучитьКоличествоCustomsFiles(Ссылка) > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяLeg6Report = ПланыОбмена.Leg7.ПолучитьИспользованиеLeg6ReportДляCCA(CCA);
	Если ИспользуетсяLeg6Report Тогда
		ProcessLevelЕстьВУзле = ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(CCA, ProcessLevel);
	КонецЕсли;
	
	Если НЕ (ИспользуетсяLeg6Report И ProcessLevelЕстьВУзле) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКонтролируемыхРеквизитов = Новый Массив;
	МассивКонтролируемыхРеквизитов.Добавить("HouseWB");
	МассивКонтролируемыхРеквизитов.Добавить("WB2");
	МассивКонтролируемыхРеквизитов.Добавить("WB3");
	МассивКонтролируемыхРеквизитов.Добавить("WB4");
	МассивКонтролируемыхРеквизитов.Добавить("TotalWBWeight");
	МассивКонтролируемыхРеквизитов.Добавить("ActualPOA");
	МассивКонтролируемыхРеквизитов.Добавить("ETD");
	МассивКонтролируемыхРеквизитов.Добавить("ATD");
	МассивКонтролируемыхРеквизитов.Добавить("PreAlertETA");
	МассивКонтролируемыхРеквизитов.Добавить("ETA");
	МассивКонтролируемыхРеквизитов.Добавить("ATA");
	МассивКонтролируемыхРеквизитов.Добавить("CollectedFromPort");
	МассивКонтролируемыхРеквизитов.Добавить("PreAlert");
	МассивКонтролируемыхРеквизитов.Добавить("DoxRcvd");
	МассивКонтролируемыхРеквизитов.Добавить("InCustoms");
	МассивКонтролируемыхРеквизитов.Добавить("Cleared");
	МассивКонтролируемыхРеквизитов.Добавить("Inspection");
	МассивКонтролируемыхРеквизитов.Добавить("InspectionStart");
	МассивКонтролируемыхРеквизитов.Добавить("InspectionEnd");
	МассивКонтролируемыхРеквизитов.Добавить("PreInspection");
	МассивКонтролируемыхРеквизитов.Добавить("PreInspectionStart");
	МассивКонтролируемыхРеквизитов.Добавить("PreInspectionEnd");
	МассивКонтролируемыхРеквизитов.Добавить("CCAJobReference");
	МассивКонтролируемыхРеквизитов.Добавить("ConditionalRelease");
	МассивКонтролируемыхРеквизитов.Добавить("CCDNumber");
	
	ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
	
	Если ЭтоНовый() Тогда
		Для каждого КонтролируемыйРеквизит Из МассивКонтролируемыхРеквизитов Цикл
			Если ТипЗнч(ЭтотОбъект[КонтролируемыйРеквизит]) <> Тип("Булево") Тогда
				Если ЗначениеЗаполнено(ЭтотОбъект[КонтролируемыйРеквизит]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"You are not allowed to change '" + КонтролируемыйРеквизит + "'!",
						ЭтотОбъект, КонтролируемыйРеквизит, , Отказ);
				КонецЕсли;
			Иначе
				Если ЭтотОбъект[КонтролируемыйРеквизит] Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"You are not allowed to change '" + КонтролируемыйРеквизит + "'!",
						ЭтотОбъект, КонтролируемыйРеквизит, , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого КонтролируемыйРеквизит Из МассивКонтролируемыхРеквизитов Цикл
			Если ЭтотОбъект[КонтролируемыйРеквизит] <> ВыборкаСтарыхРеквизитовШапки[КонтролируемыйРеквизит] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"You are not allowed to change '" + КонтролируемыйРеквизит + "'!",
					ЭтотОбъект, КонтролируемыйРеквизит, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи)
	
	ПроверитьЗаполнениеРеквизитовШапки(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ТаблицаItems,
		ДополнительныеСвойства.ТаблицаDOCs);
	
	ПроверитьЗаполнениеТабличнойЧастиDOCs(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ТаблицаDOCsInOtherShipments,
		ДополнительныеСвойства.ТаблицаDOCs,
		ДополнительныеСвойства.ТаблицаItems);	
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, РежимЗаписи, ТаблицаItems, ТаблицаDOCs)
	
	Если Отменен Тогда		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Coordinator) И НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		
		ТекстОшибки = """Process level"" is empty!
			|Ask support team to specify process level for " + Coordinator + "
			|or fill in process level in the document manually.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "ProcessLevel");
			
		Если НЕ ЭтоНовый() ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.RequestedPOA)
		И ЗначениеЗаполнено(ActualPOA)
		И ДополнительныеСвойства.RequestedPOA <> ActualPOA Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Non-critical err.
			|Requested POA (" + СокрЛП(ДополнительныеСвойства.RequestedPOA) + ") не соответствует Actual POA (" + СокрЛП(ActualPOA) + ")!",
			ЭтотОбъект, "ActualPOA");
		
	КонецЕсли;
	    	
	// Отражение экспортных поставок с помощью Import shipment - это древняя затычка
	// Она уже неактуальна, но сохранена для того, чтобы проводить старые документы
	Если ИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Export Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураМаксимальнойДатыЭтаповDOC = ПолучитьСтруктуруМаксимальнойДатыDOCStages(ТаблицаDOCs);
	ПредставлениеМаксимальнойДатыЭтаповDOC = """" + СтруктураМаксимальнойДатыЭтаповDOC.НазваниеДаты + """"
				+ " (" + Формат(СтруктураМаксимальнойДатыЭтаповDOC.Дата, "ДЛФ=D") + ")"
				+ " in """ + СтруктураМаксимальнойДатыЭтаповDOC.DOCПредставление + """";
									
	// Проверим последовательность Cargo stages	
	
	Если ЗначениеЗаполнено(ETD) Тогда
		
		Если НЕ WithoutGreenLight И НЕ FormalGreenLight
			И ETD < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			ТекстОшибки = """ETD"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ETD", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ATD) Тогда
		
		Если НЕ WithoutGreenLight И НЕ FormalGreenLight
			И ATD < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			ТекстОшибки = """ATD"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ATD", , Отказ);
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(PreAlertETA) Тогда
		
		Если НЕ WithoutPreAlert И НЕ FormalGreenLight
			И PreAlertETA < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """Pre-alert ETA"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PreAlertETA", , Отказ);
			
		КонецЕсли;
					
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ETA) Тогда
		
		Если НЕ WithoutGreenLight И НЕ FormalGreenLight
			И ETA < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """ETA"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ETA", , Отказ);
			
		КонецЕсли;
					
	КонецЕсли;

	Если ЗначениеЗаполнено(ATA) Тогда
		
		Если НЕ WithoutGreenLight И НЕ FormalGreenLight
			И ATA < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """ATA"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ATA", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим последовательность document stages
	
	Если ЗначениеЗаполнено(PreAlert) Тогда
		
		// { RGS AGorlenko 14.02.2017 1:49:19 - исправлено на W/o PreAlert
		//Если НЕ WithoutGreenLight И НЕ FormalGreenLight
		//	И PreAlert < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
		Если НЕ WithoutPreAlert И НЕ FormalGreenLight
			И PreAlert < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
		// } RGS AGorlenko 14.02.2017 1:49:51 - исправлено на W/o PreAlert
			
			ТекстОшибки = """Pre alert"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PreAlert", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(DoxForCCA) Тогда
				
		Если DoxForCCA < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """Dox for CCA"" не может быть раньше " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DoxForCCA", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(DoxRcvd) И НЕ WithoutGreenLight И НЕ WithoutPreAlert Тогда
				
		Если DoxRcvd < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """Dox rcvd"" не может быть раньше " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "DoxRcvd", , Отказ);
			
		КонецЕсли;
						
	КонецЕсли;
	
	Если ЗначениеЗаполнено(PermitsObtained) Тогда
		
		Если НЕ ЗначениеЗаполнено(PermitsRequested) Тогда
			
			ТекстОшибки = """Permits requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PermitsRequested", , Отказ);
				
		ИначеЕсли PermitsObtained < PermitsRequested Тогда
			
			ТекстОшибки = """Permits obtained"" can not be earlier than ""Permits requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PermitsObtained", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(PSAReceived) Тогда
		
		Если НЕ ЗначениеЗаполнено(PSARequested) Тогда
			
			ТекстОшибки = """PSA requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PSARequested", , Отказ);
			
		ИначеЕсли PSAReceived < PSARequested Тогда
			
			ТекстОшибки = """PSA received"" can not be earlier than ""PSA requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "PSAReceived", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(COOReceived) Тогда
		
		Если НЕ ЗначениеЗаполнено(COORequested) Тогда
			
			ТекстОшибки = """COO requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "COORequested", , Отказ);
			
		ИначеЕсли COOReceived < COORequested Тогда
			
			ТекстОшибки = """COO received"" can not be earlier than ""COO requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "COOReceived", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(InCustoms) Тогда
		
		Если InCustoms < СтруктураМаксимальнойДатыЭтаповDOC.Дата Тогда
			
			ТекстОшибки = """In customs"" can not be earlier than " + ПредставлениеМаксимальнойДатыЭтаповDOC + "!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "InCustoms", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//S-I-0001570
	//только для KZ и RU-process levels может быть условный выпуск декларации (Conditional Release) перед получением Permits
	//Если ConditionalRelease Тогда  
		
		//Если НЕ ЗначениеЗаполнено(PermitsRequested) Тогда    			
		//	ТекстОшибки = """Permits requested"" is empty!";
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстОшибки,
		//		ЭтотОбъект, "PermitsRequested", , Отказ);
		//		
		//ИначеЕсли Cleared < PermitsRequested Тогда
		
		//ТекстОшибки = "In case Conditional release 'Cleared' can not be earlier than 'Permits requested'!";
		//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		////ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//	ТекстОшибки,
		//	ЭтотОбъект, "PermitsRequested", , Отказ);
		//	
		//КонецЕсли;
		         		
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Cleared) Тогда
		
		Если Не ConditionalRelease Тогда
		
			Если НЕ ЗначениеЗаполнено(PermitsObtained) Тогда
				
				Если PermitsRequired = Перечисления.YesNo.Yes Тогда  
					ТекстОшибки = """Permits obtained"" is empty!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, "PermitsObtained", , Отказ);
				КонецЕсли;
			
			ИначеЕсли Cleared < PermitsObtained Тогда
				
				ТекстОшибки = """Cleared"" can not be earlier than Permits obtained!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "PermitsObtained", , Отказ);
				
			КонецЕсли;
			
			// { RGS AGorlenko 08.07.2016 12:12:07 - проверка была ниже. Перенесено, чтобы обрабатывалось аналогично пермитам
			Если НЕ ЗначениеЗаполнено(COOReceived) Тогда
				
				Если COORequired = Перечисления.YesNo.Yes 
					И (ProcessLevel = Справочники.ProcessLevels.RUWE
					ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA) Тогда
					ТекстОшибки = """COO received"" is empty!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, "COOReceived", , Отказ);
				КонецЕсли;
				
			ИначеЕсли Cleared < COOReceived Тогда
				
				ТекстОшибки = """Cleared"" can not be earlier than COO received!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Cleared", , Отказ);
			
			КонецЕсли;
			// } RGS AGorlenko 08.07.2016 12:12:54 - проверка была ниже. Перенесено, чтобы обрабатывалось аналогично пермитам
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(PSAReceived) Тогда
			
			Если PSA = Перечисления.YesNo.Yes Тогда
				ТекстОшибки = """PSA received"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "PSAReceived", , Отказ);
			КонецЕсли;
			
		ИначеЕсли Cleared < PSAReceived Тогда
			
			ТекстОшибки = """Cleared"" can not be earlier than PSA received!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Cleared", , Отказ);
		
		КонецЕсли;
		
		// { RGS AGorlenko 08.07.2016 12:11:17 - перенесено выше
		//Если НЕ ЗначениеЗаполнено(COOReceived) Тогда
		//	
		//	Если COORequired = Перечисления.YesNo.Yes 
		//		И (ProcessLevel = Справочники.ProcessLevels.RUWE
		//		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA) Тогда
		//		ТекстОшибки = """COO received"" is empty!";
		//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//			ТекстОшибки,
		//			ЭтотОбъект, "COOReceived", , Отказ);
		//	КонецЕсли;
		//	
		//ИначеЕсли Cleared < COOReceived Тогда
		//	
		//	ТекстОшибки = """Cleared"" can not be earlier than COO received!";
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		//	//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстОшибки,
		//		ЭтотОбъект, "Cleared", , Отказ);
		//
		//КонецЕсли;
		// } RGS AGorlenko 08.07.2016 12:11:24 - перенесено выше

	КонецЕсли;
	
	// В Азербайджане и Туркменистане товар вначале отвозится на базу, а потом растамаживается
	Если ProcessLevel = Справочники.ProcessLevels.AZ
		ИЛИ ProcessLevel = Справочники.ProcessLevels.TM Тогда
		
		//S-I-0002464  - может быть растаможка перед перемещением на базу
		
		//Если ЗначениеЗаполнено(InCustoms) Тогда
		//	
			//Если НЕ ЗначениеЗаполнено(CollectedFromPort) Тогда
			//	
			//	ТекстОшибки = """Collected from port"" is empty!";
			//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//		ТекстОшибки,
			//		ЭтотОбъект, "CollectedFromPort", , Отказ);
		//		
		//	ИначеЕсли InCustoms < CollectedFromPort Тогда
		//		
		//		ТекстОшибки = """In customs"" can not be earlier than ""Collected from port""!";
		//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//			ТекстОшибки,
		//			ЭтотОбъект, "InCustoms", , Отказ);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	// в остальных локациях - наоборот: вначале растаможка - потом вывоз из порта
	Иначе
		
		Если ЗначениеЗаполнено(CollectedFromPort) Тогда
			
			Если НЕ ЗначениеЗаполнено(Cleared) Тогда
				
				ТекстОшибки = """Cleared"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Cleared", , Отказ);
				
			ИначеЕсли CollectedFromPort < Cleared Тогда
				
				ТекстОшибки = """Collected from port"" can not be earlier than ""Cleared""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Cleared", , Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Если Поставка еще не прошла стадию Opened - выходим
	Если CurrentCargoStage = Перечисления.ShipmentCargoStages.Opened
		И CurrentDocumentStage = Перечисления.ShipmentDocumentStages.Opened
		И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим заполнение автозаполняемых реквизитов
	СтруктураАвтоЗаполняемыхРеквизитов = Новый Структура;
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("ИмпортЭкспорт");
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("POD");
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("MOT");
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("CCA");			
	РГСофт.ПроверитьЗаполнениеАвтоЗаполняемыхРеквизитов(ЭтотОбъект, СтруктураАвтоЗаполняемыхРеквизитов, "DOC", Отказ);
	
	Если НЕ ЗначениеЗаполнено(ДополнительныеСвойства.RequestedPOA) Тогда
		ТекстОшибки = "В указанных DOC различается или не заполнено поле ""Requested POA""!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	Если УпаковочныеЛисты.Количество() Тогда
		
		// Общее количество мест поставки должно совпадать с суммой количества мест Упаковочных листов
		Если ЗначениеЗаполнено(PiecesQty) И PiecesQty <> ТаблицаDOCs.Итог("PiecesQty") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical err.
				|Pieces qty не соответствует данным по DOC!",
				ЭтотОбъект, "PiecesQty");
		КонецЕсли;
		
		// Общий вес поставки должен совпадать с суммой весов Упаковочных листов
		Если ЗначениеЗаполнено(TotalWBWeight) Тогда
			
			РазницаВВесе = TotalWBWeight - ТаблицаDOCs.Итог("GrossWeightKg");
			Если НЕ (РазницаВВесе > -1 И РазницаВВесе < 1) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Non-critical err.
					|Total waybill weight расходится с данными DOC более чем на 1!",
					ЭтотОбъект, "TotalWBWeight");	
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСтруктуруМаксимальнойДатыDOCStages(ТаблицаDOCs)
		
	СтруктураВозврата = Новый Структура("Дата, НазваниеДаты, DOC, DOCПредставление",
		'00010101', "",Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПустаяСсылка(), "");
	
	Для Каждого СтрокаТаблицы Из ТаблицаDOCs Цикл
					 		
		ОбновитьСтруктуруМаксимальнойДаты(СтруктураВозврата, СтрокаТаблицы.Дата, "Date", СтрокаТаблицы.DOC, СтрокаТаблицы.DOCПредставление);
		ОбновитьСтруктуруМаксимальнойДаты(СтруктураВозврата, СтрокаТаблицы.Requested, "Requested", СтрокаТаблицы.DOC, СтрокаТаблицы.DOCПредставление);
		Если НЕ WithoutGreenLight Тогда
			ОбновитьСтруктуруМаксимальнойДаты(СтруктураВозврата, СтрокаТаблицы.Received, "Received", СтрокаТаблицы.DOC, СтрокаТаблицы.DOCПредставление);
			ОбновитьСтруктуруМаксимальнойДаты(СтруктураВозврата, СтрокаТаблицы.Granted, "Granted", СтрокаТаблицы.DOC, СтрокаТаблицы.DOCПредставление);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбновитьСтруктуруМаксимальнойДаты(Структура, ПроверяемаяДата, НазваниеДаты, DOC, DOCПредставление)
	
	Если ПроверяемаяДата > Структура.Дата Тогда
		Структура.Дата = ПроверяемаяДата;
		Структура.НазваниеДаты = НазваниеДаты;
		Структура.DOC = DOC;
		Структура.DOCПредставление = DOCПредставление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиDOCs(Отказ, РежимЗаписи, ТаблицаDOCsInOtherShipments, ТаблицаDOCs, ТаблицаItems)
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из УпаковочныеЛисты Цикл
		
		// Проверим, что DOC не указан в другой поставке
		СтрокаТаблицыDOCsInOtherShipments = ТаблицаDOCsInOtherShipments.Найти(СтрокаТЧ.УпаковочныйЛист, "DOC");
		Если СтрокаТаблицыDOCsInOtherShipments <> Неопределено Тогда
			
			ТекстОшибки = "'" + СтрокаТаблицыDOCsInOtherShipments.DOCПредставление + "' is already in '" + СтрокаТаблицыDOCsInOtherShipments.ShipmentПредставление + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "УпаковочныеЛисты[" + (СтрокаТЧ.НомерСтроки-1) + "].УпаковочныйЛист", , Отказ);
							
		КонецЕсли; 
			
	КонецЦикла; 
	
	// { RGS AGorlenko 08.07.2016 12:54:10 - проверка с формальным GL
	Если НЕ FormalGreenLight И НЕ WithoutGreenLight Тогда
		Для каждого СтрокаТаблицы Из ТаблицаDOCs Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Granted) ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.Received) Тогда
				ТекстОшибки = "'" + СтрокаТаблицы.DOCПредставление + "': Received and Granted are not filled!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// } RGS AGorlenko 08.07.2016 12:54:29 - проверка с формальным GL
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из УпаковочныеЛисты Цикл
				
		// Проверим, что DOC проведен.	
		РеквизитыDOC = ТаблицаDOCs.Найти(СтрокаТЧ.УпаковочныйЛист, "DOC");
		Если НЕ РеквизитыDOC.Проведен Тогда
			
			ТекстОшибки = "'" + РеквизитыDOC.DOCПредставление + "' is not posted!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "УпаковочныеЛисты[" + (СтрокаТЧ.НомерСтроки-1) + "].УпаковочныйЛист", , Отказ);
								
		КонецЕсли; 
			
	КонецЦикла;
	
	// Проверим что перед подачей в таможню для всех товаров указали временность ввоза
	Если ЗначениеЗаполнено(InCustoms) Тогда
		
		СтруктураПоиска = Новый Структура("PermanentTemporary", Перечисления.PermanentTemporary.ПустаяСсылка());
		НайденныеСтроки = ТаблицаItems.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекстОшибки = "In Item '" + СокрЛП(НайденнаяСтрока.Item) + "' Permanent / temporary is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				НайденнаяСтрока.Invoice, "ТЗСтрокИнвойса[" + (НайденнаяСтрока.InvoiceLineNo-1) + "].PermanentTemporary", , Отказ);
		КонецЦикла;
		
	КонецЕсли;
	       	
	Если ЗначениеЗаполнено(Cleared) И ProcessLevel <> Справочники.ProcessLevels.RUEA Тогда
		
		ИспользуетсяLeg6Report = ПланыОбмена.Leg7.ПолучитьИспользованиеLeg6ReportДляCCA(CCA);
		Если ИспользуетсяLeg6Report Тогда
			ProcessLevelЕстьВУзле = ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(CCA, ProcessLevel);
		КонецЕсли;
		
		Если ИспользуетсяLeg6Report И ProcessLevelЕстьВУзле Тогда
			Возврат;
		КонецЕсли;
	
		СтруктураПоиска = Новый Структура("GuaranteeLetter,ConfirmationOfCargoLatestDate", Перечисления.YesNo.Yes, Дата(1,1,1));
		НайденныеСтроки = ТаблицаItems.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТекстОшибки = "In Item '" + СокрЛП(НайденнаяСтрока.Item) + "' Confirmation of cargo latest date is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				НайденнаяСтрока.Invoice, "ТЗСтрокИнвойса[" + (НайденнаяСтрока.InvoiceLineNo-1) + "].ConfirmationOfCargoLatestDate", , Отказ);
		КонецЦикла;
		
	КонецЕсли;  
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьWarehouseFromВParcels(Отказ, ВыборкаРеквизитовActualPOA, ВыборкаСтарыхРеквизитовШапки, МассивСтарыхDOCs)
	
	NewWarehouseFrom = ?(ЗначениеЗаполнено(ActualPOA), ВыборкаРеквизитовActualPOA.DefaultWarehouse, Справочники.Warehouses.ПустаяСсылка());	
	
	Если Не ЗначениеЗаполнено(NewWarehouseFrom) Тогда 
		Возврат;
	КонецЕсли;
	
	МассивDOCs = УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивDOCs", МассивDOCs); 
	Запрос.Текст = 
		// { RGS AGorlenko 25.12.2014 19:16:25 - S-I-0000983 - если парсель уже в трипе, то не перезаполняем Wh-from
		//"ВЫБРАТЬ
		//|	DOCsParcels.Parcel КАК Parcel
		//|ИЗ
		//|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		//|ГДЕ
		//|	DOCsParcels.Ссылка В (&МассивDOCs)";
		"ВЫБРАТЬ
		|	DOCsParcels.Parcel КАК Parcel
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		|ГДЕ
		|	DOCsParcels.Ссылка В(&МассивDOCs)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Parcel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Парсели.Parcel
		|ИЗ
		|	ВТ_Парсели КАК ВТ_Парсели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		|		ПО ВТ_Парсели.Parcel = TripParcels.Parcel
		|			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
		|ГДЕ
		|	TripParcels.Parcel ЕСТЬ NULL ";
		// } RGS AGorlenko 25.12.2014 19:17:02 - S-I-0000983 - если парсель уже в трипе, то не перезаполняем Wh-from
		 	
	Выборка = Запрос.Выполнить().Выбрать();        
	
	Пока Выборка.Следующий() Цикл
		
		ParcelОбъект = Выборка.Parcel.ПолучитьОбъект();
		РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.WarehouseFrom, NewWarehouseFrom);
		
		Если ParcelОбъект.Модифицированность() Тогда 
			
			Попытка 
				ParcelОбъект.Записать();
			Исключение
				ТекстСообщения = "Не удалось изменить Warehouse from в ""Parcel " + ParcelОбъект + ". См. ошибки выше. " + ОписаниеОшибки();
				ТекстСообщенияДляДопСвойств = "Не удалось изменить Warehouse from в ""Parcel " + ParcelОбъект + ". См. ошибки выше.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(?(ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок"), ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибок + Символы.ПС, "") + ТекстСообщенияДляДопСвойств);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ParcelОбъект,,, Отказ);
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	   		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, МассивСтарыхDOCs, ТаблицаСтарыхOutOfComplianceReasons)

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();	
	СтрокаИсключаемыхРеквизитов = "ИмпортЭкспорт, GOLD, WBList, POD, MOT, CCA, СтатусВажности, OOC, CurrentCargoStage, CurrentDocumentStage, WithoutPreAlert, WithoutGreenLight, LastModified, Responsible, ConsignToList, DOCList, InvoiceList, POList, SegmentsList, PermitsRequired, ConditionalRelease, PSA, Completed, CCACurrentComment, FormalGreenLight"; 
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		МетаданныеОбъекта.СтандартныеРеквизиты,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	ТекстИзмененийDOCs = ImportExportСервер.ПолучитьТекстИзмененияМассива(
		УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"),
		МассивСтарыхDOCs,
		"DOCs:");	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийDOCs);
	
	ТекстИзмененийOutOfComplianceReasons = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		ЭтотОбъект.OutOfComplianceReasons,
		ТаблицаСтарыхOutOfComplianceReasons,
		МетаданныеОбъекта.ТабличныеЧасти.OutOfComplianceReasons);	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийOutOfComplianceReasons);
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ShipmentLogs.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
	
	Если мОбработкаВажностиРегламентнымЗаданием ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// НАДО РАСФОРМИРОВАТЬ ЭТО ГОВНОКОДИЩЕ
	// ДОЛЖЕН БЫТЬ ОТДЕЛЬНЫЕ РЕГИСТР СВЕДЕНИЙ С ИЗМЕРЕНИЕМ DOC И РЕСУРСАМИ BOOKED И WITHOUT GREEN LIGHT
	ОчиститьBookedИWithoutGreenLightВDOCs(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ТаблицаDOCs,
		ДополнительныеСвойства.МассивOldDOCs);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьДляSubscriptions(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьTMSClearanceEvents(ДополнительныеСвойства.ТаблицаDOCs);
	   	
	ПроверитьНаличиеCVCRisks();
	
	ЗаполнитьClearedPartNumbers(ДополнительныеСвойства.ТаблицаItems);
	
	//// { RGS DKazanskiy 24.07.2018 14:43:03 - S-I-0005657
	//// нужно проверить версию DOCs 
	//Если НЕ Отказ Тогда
	//	ПроверитьВерсииДОКов();
	//КонецЕсли;
	//// } RGS DKazanskiy 24.07.2018 14:44:34 - S-I-0005657
	
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура ОчиститьBookedИWithoutGreenLightВDOCs(Отказ, ВыборкаСтарыхРеквизитовШапки, ТаблицаDOCs, МассивOldDOCs)
	
	// НАДО РАСФОРМИРОВАТЬ ЭТО ГОВНОКОДИЩЕ
	// ДОЛЖЕН БЫТЬ ОТДЕЛЬНЫЕ РЕГИСТР СВЕДЕНИЙ С ИЗМЕРЕНИЕМ DOC И РЕСУРСАМИ BOOKED И WITHOUT GREEN LIGHT 
	
	// Если поставка не проведена - значит нужно очистить Booked и WithoutGreenLight в текущих DOCs
	Если НЕ Проведен Тогда
		ОбновитьBookedWithoutGreenLightИFormalGreenLightВDOCs(Отказ, '00010101', Ложь, Ложь, ТаблицаDOCs);
	КонецЕсли;
	
	ОбновитьУдаленныеDOCs(Отказ, ВыборкаСтарыхРеквизитовШапки, МассивOldDOCs);
	
КонецПроцедуры

Процедура ОбновитьBookedWithoutGreenLightИFormalGreenLightВDOCs(Отказ, NewBooked, NewWithoutGreenLight, NewFormalGreenLight, ТаблицаDOCs)
	
	Для Каждого РеквизитыDOC Из ТаблицаDOCs Цикл
					
		// Если DOC не нуждается в обновлении - переходим к следующему
		Если РеквизитыDOC.Booked = NewBooked
			И РеквизитыDOC.FormalGreenLight = NewFormalGreenLight
			И РеквизитыDOC.WithoutGreenLight = NewWithoutGreenLight Тогда
			Продолжить;
		КонецЕсли;
			
		DOCОбъект = РеквизитыDOC.DOC.ПолучитьОбъект();
		
		DOCОбъект.Booked = NewBooked;
	 	DOCОбъект.WithoutGreenLight = NewWithoutGreenLight;
	 	DOCОбъект.FormalGreenLight = NewFormalGreenLight;
		
		РежимЗаписиDOC = ?(РеквизитыDOC.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);					
		Попытка
			DOCОбъект.Записать(РежимЗаписиDOC);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to update '" + DOCОбъект + "'!
				|See errors above.
				|" + ОписаниеОшибки(),
				DOCОбъект,,, Отказ);
			Возврат;
		КонецПопытки;
						
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУдаленныеDOCs(Отказ, ВыборкаСтарыхРеквизитовШапки, МассивOldDOCs)
	
	// Обнуляет Booked и WithoutGreenLight в удаляемых DOCs
	
	// Если старых DOCs не было - выходим
	Если МассивOldDOCs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если поставка не была проведена - значит и доки были не booked - выходим
	Если НЕ ВыборкаСтарыхРеквизитовШапки.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	МассивУдаленныхDOCs = РГСофтКлиентСервер.ВычестьМассивы(МассивOldDOCs, УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"));
	Для Каждого DOC Из МассивУдаленныхDOCs Цикл
		
		DOCОбъект = DOC.ПолучитьОбъект();
		
		РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.Booked, '00010101');
		РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.WithoutGreenLight, Ложь);
		// { RGS AGorlenko 19.07.2016 17:41:36 - поддержка формального гринлайта
		РГСофтКлиентСервер.УстановитьЗначение(DOCОбъект.FormalGreenLight, Ложь);
		// } RGS AGorlenko 19.07.2016 17:41:47 - поддержка формального гринлайта
		
		// Если в DOC и так уже стоят правильные реквизиты - перейдем к следующему
		Если НЕ DOCОбъект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		РежимЗаписиDOC = ?(DOCОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		Попытка
			DOCОбъект.Записать(РежимЗаписиDOC);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to update '" + DOCОбъект + "'!
				|See errors above.
				|" + ОписаниеОшибки(),
				DOCОбъект,,, Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
			
КонецПроцедуры

Процедура ЗарегистрироватьДляSubscriptions(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Определим значения старых реквизитов	
	СтарыйETD = '00010101';
	СтарыйATD = '00010101';
	СтарыйETA = '00010101';
	СтарыйATA = '00010101';
	СтарыйInCustoms = '00010101';
	СтарыйCleared = '00010101';
	СтарыйCollectedFromPort = '00010101';
	
	Если ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		СтарыйETD = ВыборкаСтарыхРеквизитовШапки.ETD;
		СтарыйATD = ВыборкаСтарыхРеквизитовШапки.ATD;
		СтарыйETA = ВыборкаСтарыхРеквизитовШапки.ETA;
		СтарыйATA = ВыборкаСтарыхРеквизитовШапки.ATA;
		СтарыйInCustoms = ВыборкаСтарыхРеквизитовШапки.InCustoms;
		СтарыйCleared = ВыборкаСтарыхРеквизитовШапки.Cleared;
		СтарыйCollectedFromPort = ВыборкаСтарыхРеквизитовШапки.CollectedFromPort;
		
	КонецЕсли;
	
	// Примем решение о регистрации документа в регистре
	Stage = Неопределено;
	StageDate = '00010101';
	Если ЗначениеЗаполнено(CollectedFromPort) Тогда
		
		Если CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentCargoStages.CollectedFromPort;
			StageDate = CollectedFromPort;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Cleared) Тогда
		
		Если Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentDocumentStages.Cleared;
			StageDate = Cleared;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(InCustoms) Тогда
		
		Если InCustoms <> СтарыйInCustoms
			ИЛИ Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentDocumentStages.InCustoms;
			StageDate = InCustoms;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ATA) Тогда
		
		Если ATA <> СтарыйATA
			ИЛИ InCustoms <> СтарыйInCustoms
			ИЛИ Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentCargoStages.ATA;
			StageDate = ATA;
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(ETA) Тогда
		
		Если ETA <> СтарыйETA
			ИЛИ ATA <> СтарыйATA
			ИЛИ InCustoms <> СтарыйInCustoms
			ИЛИ Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentCargoStages.ETA;
			StageDate = ETA;
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(ATD) Тогда
		
		Если ATD <> СтарыйATD
			ИЛИ ETA <> СтарыйETA
			ИЛИ ATA <> СтарыйATA
			ИЛИ InCustoms <> СтарыйInCustoms
			ИЛИ Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentCargoStages.ATD;
			StageDate = ATD;
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(ETD) Тогда
		
		Если ETD <> СтарыйETD
			ИЛИ ATD <> СтарыйATD
			ИЛИ ETA <> СтарыйETA
			ИЛИ ATA <> СтарыйATA
			ИЛИ InCustoms <> СтарыйInCustoms
			ИЛИ Cleared <> СтарыйCleared
			ИЛИ CollectedFromPort <> СтарыйCollectedFromPort Тогда
			Stage = Перечисления.ShipmentCargoStages.ETD;
			StageDate = ETD;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Stage) Тогда 	
		
		МенеджерЗаписи = РегистрыСведений.ShipmentsForSubscriptions.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Shipment = Ссылка;
		МенеджерЗаписи.Stage = Stage;
		МенеджерЗаписи.StageDate = StageDate;
		МенеджерЗаписи.LastModified = ТекущаяДата();
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось зарегистрировать """ + ЭтотОбъект + """ для подписчиков PO tracking: " + ОписаниеОшибки(),
				ЭтотОбъект,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеCVCRisks()
	
	Если Отменен ИЛИ ЗначениеЗаполнено(Cleared) ИЛИ НЕ УпаковочныеЛисты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	POA = ActualPOA;
	Если Не ЗначениеЗаполнено(POA) Тогда
		POA = ДополнительныеСвойства.RequestedPOA;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOCs", УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"));
	Запрос.УстановитьПараметр("POA", POA);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	DOCInvoices.Ссылка КАК DOC
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК InvoiceLines
		|		ПО DOCInvoices.Инвойс = InvoiceLines.Инвойс
		|			И ((НЕ InvoiceLines.ПометкаУдаления))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.RulesOfCVCRisks КАК RulesOfCVCRisks
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.RulesOfCVCRisks.POAs КАК RulesOfCVCRisksPOAs
		|			ПО RulesOfCVCRisks.Ссылка = RulesOfCVCRisksPOAs.Ссылка
		|		ПО (ВЫБОР
		|				КОГДА RulesOfCVCRisksPOAs.POA ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ RulesOfCVCRisksPOAs.POA = &POA
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА RulesOfCVCRisks.Field = ЗНАЧЕНИЕ(Перечисление.FieldsForRulesOfCVCRisks.PartNumber)
		|					ТОГДА InvoiceLines.КодПоИнвойсу = RulesOfCVCRisks.Value
		|				КОГДА RulesOfCVCRisks.Field = ЗНАЧЕНИЕ(Перечисление.FieldsForRulesOfCVCRisks.Description)
		|					ТОГДА InvoiceLines.НаименованиеТовара ПОДОБНО ""%"" + RulesOfCVCRisks.Value + ""%""
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ГДЕ
		|	DOCInvoices.Ссылка В(&DOCs)
		|	И (НЕ RulesOfCVCRisks.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда 
		
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Возможны КТС, смотрите отчет ""Shipment CVC risks"".");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьTMSClearanceEvents(ТаблицаDOCs)
		
	// Если нет ни одного TMS DOC - ничего регистрировать не надо
	Если ТаблицаDOCs.Найти(Истина, "TMS") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определим значения старых реквизитов	
	СтарыйATA = '00010101';
	СтарыйCleared = '00010101';
		
	Если НЕ Отменен И ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		СтарыйATA = ВыборкаСтарыхРеквизитовШапки.ATA;
		СтарыйCleared = ВыборкаСтарыхРеквизитовШапки.Cleared;
				
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ImportClearanceEventsQueue = РегистрыСведений.ImportClearanceEventsQueue;
	ClearanceEventsTypes = Перечисления.ClearanceEventsTypes;
		
	ImportClearanceEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		ClearanceEventsTypes.InCustoms,
		СтарыйATA, // Действительно вместо InCustoms используется дата ATA
		ATA,
		ПараметрыСеанса.ТекущийПользователь);
	
	ImportClearanceEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		ClearanceEventsTypes.Cleared,
		СтарыйCleared,
		Cleared,
		ПараметрыСеанса.ТекущийПользователь);
	       	
КонецПроцедуры

Процедура ЗаполнитьClearedPartNumbers(ТаблицаItems)

	// только Cleared для RU и KZ process levels 
	Если Не ЗначениеЗаполнено(Cleared) Тогда
		Возврат;
	КонецЕсли;
	
	Если ProcessLevel <> Справочники.ProcessLevels.RUWE
		И ProcessLevel <> Справочники.ProcessLevels.RUEA
		И ProcessLevel <> Справочники.ProcessLevels.RUSM
		И ProcessLevel <> Справочники.ProcessLevels.KZ Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаItem из ТаблицаItems Цикл 
		
		Если ЗначениеЗаполнено(СтрокаItem.PartNo) 
			И СтрокаItem.PartNo <> "N/A" И СтрокаItem.PartNo <> "N\A"
			И СтрокаItem.PartNo <> "NA" Тогда 
			
			ЗаписьPartNo = РегистрыСведений.ClearedPartNumbers.СоздатьМенеджерЗаписи();
			ЗаписьPartNo.PartNo = СтрокаItem.PartNo;
			ЗаписьPartNo.ProcessLevel = ProcessLevel;
			ЗаписьPartNo.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРОВЕДЕНИЯ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	 	
	// регистр ImportItemsWithoutCustomsFiles Приход
	ДвиженияImportItemsWithoutCustomsFiles = Движения.ImportItemsWithoutCustomsFiles;
	ДвиженияImportItemsWithoutCustomsFiles.Записывать = Истина;
	ДвиженияImportItemsWithoutCustomsFiles.Очистить();
	
	Если Не ЗначениеЗаполнено(InCustoms) Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаItems = ДополнительныеСвойства.ТаблицаItems;
	Для Каждого СтрокаТаблицы из ТаблицаItems Цикл 
		ДвиженияImportItemsWithoutCustomsFiles.ДобавитьЗапись(
			ВидДвиженияНакопления.Приход,
			InCustoms,
			СтрокаТаблицы.Item,
			Ссылка);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//			
//	NEK = Неопределено;
//	ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
//	
//	// Примем решение о регистрации DOC для удаления
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено 
//		И НЕ ВыборкаСтарыхРеквизитовШапки.Отменен Тогда
//		
//		// Получим агента NEK
//		NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//			
//		Если ВыборкаСтарыхРеквизитовШапки.CCA = NEK
//			И (CCA <> NEK ИЛИ Отменен) Тогда
//			
//			CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//			// ДЕРЕГИСТРИРОВАТЬ ВСЕ ОСТАЛЬНЫЕ ЗАВИСИМЫЕ ОБЪЕКТЫ. А МОЖЕТ БЫТЬ ОНИ САМИ СПРАВЯТСЯ?
//			Возврат;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Примем решение о регистрации Shipment
//	
//	// Если CCA не заполнен - значит ничего регистрировать не придется - выходим.
//	Если НЕ ЗначениеЗаполнено(CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим Agent NEK
//	Если НЕ ЗначениеЗаполнено(NEK) Тогда
//		
//		NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	// Если это не NEK - то и в NFS он не нужен
//	Если CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//		
//	СтруктураСтарыхРеквизитовШапки = СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки);
//	
//	// Определим изменились ли табличные части
//	МассивDOCs = УпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");
//	Если ЭтоНовый() Тогда
//		МассивНовыхDOCs = МассивDOCs;
//		МассивУдаленныхDOCs = Новый Массив;
//	Иначе
//		МассивНовыхDOCs = РГСофтКлиентСервер.ВычестьМассивы(МассивDOCs, ДополнительныеСвойства.МассивOldDOCs);
//		МассивУдаленныхDOCs = РГСофтКлиентСервер.ВычестьМассивы(ДополнительныеСвойства.МассивOldDOCs, МассивDOCs);
//	КонецЕсли;
//	
//	// Примем решение о регистрации Shipment
//	Если CCA <> СтруктураСтарыхРеквизитовШапки.CCA
//		ИЛИ СокрЛП(Номер) <> СокрЛП(СтруктураСтарыхРеквизитовШапки.Номер)
//		ИЛИ ActualPOA <> СтруктураСтарыхРеквизитовШапки.ActualPOA
//		ИЛИ HouseWB <> СтруктураСтарыхРеквизитовШапки.HouseWB
//		ИЛИ WB2 <> СтруктураСтарыхРеквизитовШапки.WB2
//		ИЛИ WB3 <> СтруктураСтарыхРеквизитовШапки.WB3
//		ИЛИ WB4 <> СтруктураСтарыхРеквизитовШапки.WB4
//		ИЛИ ETD <> СтруктураСтарыхРеквизитовШапки.ETD
//		ИЛИ ATD <> СтруктураСтарыхРеквизитовШапки.ATD
//		ИЛИ PreAlert <> СтруктураСтарыхРеквизитовШапки.PreAlert
//		ИЛИ ETA <> СтруктураСтарыхРеквизитовШапки.ETA
//		ИЛИ ATA <> СтруктураСтарыхРеквизитовШапки.ATA
//		ИЛИ DoxRcvd <> СтруктураСтарыхРеквизитовШапки.DoxRcvd
//		ИЛИ InCustoms <> СтруктураСтарыхРеквизитовШапки.InCustoms
//		ИЛИ Cleared <> СтруктураСтарыхРеквизитовШапки.Cleared
//		ИЛИ WithoutGreenLight <> СтруктураСтарыхРеквизитовШапки.WithoutGreenLight
//		ИЛИ WithoutPreAlert <> СтруктураСтарыхРеквизитовШапки.WithoutPreAlert
//		ИЛИ МассивНовыхDOCs.Количество()
//		ИЛИ МассивУдаленныхDOCs.Количество() Тогда
//		
//		CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки)
//	
//	СтруктураСтарыхРеквизитовШапки = Новый Структура;
//	СтруктураСтарыхРеквизитовШапки.Вставить("Номер", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("CCA", Справочники.Agents.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("ActualPOA", Справочники.SeaAndAirPorts.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("HouseWB", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("WB2", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("WB3", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("WB4", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("ETD", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("ATD", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("PreAlert", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("ETA", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("ATA", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("DoxRcvd", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("InCustoms", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("Cleared", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("WithoutGreenLight", Ложь);
//	СтруктураСтарыхРеквизитовШапки.Вставить("WithoutPreAlert", Ложь);
//		
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
//		ЗаполнитьЗначенияСвойств(СтруктураСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовШапки);
//	КонецЕсли;
//	
//	Возврат СтруктураСтарыхРеквизитовШапки;
//	
//КонецФункции

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

// { RGS DKazanskiy 24.07.2018 14:43:03 - S-I-0005657

Функция ПроверитьВерсииДОКов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист КАК DOC,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.RequestedPOA КАК POA,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.CCA КАК CCA,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.MOT КАК MOT,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.Requested КАК Requested
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|ГДЕ
	|	ПоставкаУпаковочныеЛисты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Ответ = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПроверитьВерсию(Результат.DOC, 
																		  Результат.MOT, 
																		  Результат.CCA,
																		  Результат.Requested,
																		  Результат.POA);
																		  
		Если Ответ.ТекущаяВерсия = Неопределено Тогда
			РегистрыСведений.DOCVersions.СоздатьВерсию(Результат.DOC, 
														Результат.MOT, 
														Результат.CCA,
														Результат.Requested,
														Результат.POA, 
														Ложь);		
		// откат на найденную версию
		Иначе
			РегистрыСведений.DOCVersions.УстановитьВерсию(Ответ.ТекущаяВерсия, 
														Результат.DOC, 
														Результат.MOT, 
														Результат.CCA,
														Результат.Requested,
														Результат.POA,
														Ответ.Received, 
														Ответ.Accepted,
														Ложь);				
														
		КонецЕсли;
													
		// установим даты в соответствии с версией.
		Документы.КонсолидированныйПакетЗаявокНаПеревозку.УстановитьДатыВерсии(Результат.DOC, 
																				Ответ.Received, 
																				Ответ.Accepted);
		
																			 
		
	КонецЦикла;
	
КонецФункции

// } RGS DKazanskiy 24.07.2018 14:44:34 - S-I-0005657

мОбработкаВажностиРегламентнымЗаданием = Ложь;