
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	Yes = Перечисления.YesNo.Yes;
	No = Перечисления.YesNo.No;
	
	инфКартинкаСтатусВажности = ImportExportСервер.ПолучитьКартинкуСтатусаВажности(Объект.СтатусВажности);
	
	OldPreAlertETA = Объект.PreAlertETA;
	
	ПерезаполнитьИнформационныеПоляDOCs(, Объект.УпаковочныеЛисты, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, 
		DOCsFreight, DOCsRequestedPOACode, Объект.PermitsRequired, Объект.COORequired, Yes, No);
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ЗначениеОтбора = Объект.Ссылка;
		
	Иначе 
		
		Если НЕ ЗначениеЗаполнено(Объект.Coordinator) Тогда
			
			Объект.Coordinator = ПараметрыСеанса.ТекущийПользователь;
			Объект.ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Coordinator, "ProcessLevel");
			Если Объект.ProcessLevel = Справочники.ProcessLevels.KZ Тогда
				Объект.SWIFTRequired = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеОтбора = Неопределено;
		
	КонецЕсли;
					
	УстановитьВидимостьSWIFT();
	УстановитьВидимостьInspection();
	// { RGS AGorlenko 21.12.2015 18:21:24 - S-I-0001434
	УстановитьВидимостьPreInspection();
	// } RGS AGorlenko 21.12.2015 18:23:31 - S-I-0001434
	УстановитьВидимостьConditionalRelease();
	УстановитьВидимостьCOORequired();
	
	// Скроем некоторые элементы, которые не нужны на некоторых Process levels
	Если Объект.ProcessLevel = Справочники.ProcessLevels.KZ Тогда
		
		Элементы.Freight.Видимость = Ложь;
		Элементы.ДекорацияFreight.Видимость = Ложь;
		Элементы.DOCFreight.Видимость = Ложь;
		Элементы.DoxForCCA.Видимость = Ложь;
		Элементы.PageCustomsFilesLight.Видимость = Ложь;
		// { RGS AGorlenko 05.09.2014 18:46:58 - S-I-0000861
		//Элементы.СтраницаServices.Видимость = Ложь;
		// } RGS AGorlenko 05.09.2014 18:47:00 - S-I-0000861
		
	ИначеЕсли Объект.ProcessLevel = Справочники.ProcessLevels.AZ 
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.TM
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.UZ
		// { RGS AArsentev 22.03.2018 S-I-0004815
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.GE
		// } RGS AArsentev 22.03.2018 S-I-0004815
		Тогда
		
		Элементы.DoxForCCA.Видимость = Ложь;
		Элементы.PageCustomsFiles.Видимость = Ложь;
		НужноПерезаполнитьCustomsFilesLight = Истина;
		
	ИначеЕсли Объект.ProcessLevel = Справочники.ProcessLevels.RUWE Тогда
		
		Элементы.DoxForCCA.Видимость = Ложь;
		Элементы.PageCustomsFilesLight.Видимость = Ложь;
		
	ИначеЕсли Объект.ProcessLevel = Справочники.ProcessLevels.RUEA 
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM Тогда
		
		Элементы.PageCustomsFilesLight.Видимость = Ложь;
		
	КонецЕсли;
	
	// По-умолчанию скроем некоторые динамические списки, чтобы не читать лишние данные
	НужноПерезаполнитьItems = Объект.УпаковочныеЛисты.Количество() > 0;
	Элементы.CustomsFiles.Видимость = Ложь;
	Элементы.Services.Видимость = Ложь;
	
	// Заполним вспомогательные реквизиты формы, которые могут понадобится на клиенте
	Permanent = Перечисления.PermanentTemporary.Permanent;
	Temporary = Перечисления.PermanentTemporary.Temporary;
	
	// Closing document
	ClosingDocument = CustomsСервер.ПолучитьClosingDocument(Объект.Ссылка);
	НастроитьClosingDocument();
	
	// WB
	СоответствиеЗаголовковWB = ПолучитьСоответствиеЗаголовковWB(Объект.MOT, Объект.Дата);
	Для Каждого КлючИЗначение из СоответствиеЗаголовковWB Цикл 
		Элементы[КлючИЗначение.Ключ].Заголовок = КлючИЗначение.Значение;
	КонецЦикла;
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.ShipmentОткрытие, Объект.Ссылка);
	
	// { RGS VShamin 25.08.2015 12:10:05 - 
	УстановитьДоступностьЭлементовLeg6();
	// } RGS VShamin 25.08.2015 12:10:05 -
	
	// { RGS AArsentev 20.06.2018
	Элементы.CCACurrentComment.ТолькоПросмотр = НЕ CustomsСервер.ЭтоБрокер();
	Элементы.CurrentComment.ТолькоПросмотр = CustomsСервер.ЭтоБрокер();
	// } RGS AArsentev 20.06.2018
	
	// { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
	УстановитьВидимостьTranzitZoneETA();
	// { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
	
	// { RGS AArsentev 05.06.2018 
	Если CustomsСервер.ЭтоБрокер() И (СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "CCA")) = "GLB"
		ИЛИ СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "CCA")) = "CTCS") Тогда
		Элементы.ГруппаШапка.Доступность = Ложь;
		Элементы.Страницы.Доступность = Ложь;
		Элементы.ГруппаClosingDocument.Доступность = Ложь;
		Элементы.ГруппаComent.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаrgsМониторСопровождения.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаПровестиИЗакрыть.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаПровести.Доступность = Ложь;
		//ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОтменаПроведения.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаРегистрСведенийShipmentLogsDocumentLogs.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаСтруктураПодчиненности.Доступность = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаПрисоединенныеФайлыКОбъекту.Доступность = Истина;
	КонецЕсли;
	// { RGS AArsentev 05.06.2018 
	
	// { RGS AArsentev 25.06.2018 S-I-0005470
	Trips_Leg.Параметры.УстановитьЗначениеПараметра("SH", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	Trips_Local.Параметры.УстановитьЗначениеПараметра("SH", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	TransportRequests.Параметры.УстановитьЗначениеПараметра("SH", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	// } RGS AArsentev 25.06.2018 S-I-0005470
	
	// { RGS AArsentev 03.07.2018 S-I-0005470
	ОбновитьОтображениеЭлементовФормы();
	НастроитьTransportRequest();
	// } RGS AArsentev 03.07.2018 S-I-0005470
	
	// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("OutOfComplianceReason", Справочники.OutOfComplianceReasons.CustomsValueCorrection);
	НайденныеСтроки = Объект.OutOfComplianceReasons.НайтиСтроки(ПараметрПоиска);
	Если НайденныеСтроки.Количество() Тогда
		Элементы.OutOfComplianceReasonsInvoiceLines.Видимость = Истина;
		Элементы.OutOfComplianceReasonsAcceptedBySLB.Видимость = Истина;
		Элементы.OutOfComplianceReasonsNotAcceptedBySLB.Видимость = Истина;
		Элементы.OutOfComplianceReasonsConditionalRelease.Видимость = НайденныеСтроки[0].NotAcceptedBySLB;
	КонецЕсли;	
	// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	
КонецПроцедуры

// { RGS VShamin 25.08.2015 12:11:04 - 
Процедура УстановитьДоступностьЭлементовLeg6()

	Если CustomsСервер.ЭтоБрокер() ИЛИ РольДоступна("РедактированиеНеДоступныхПолейLeg6") Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна("ImportExportAccountant") И Документы.Поставка.ПолучитьКоличествоCustomsFiles(Объект.Ссылка) > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяLeg6Report = ПланыОбмена.Leg7.ПолучитьИспользованиеLeg6ReportДляCCA(Объект.CCA);
	Если ИспользуетсяLeg6Report Тогда
		ProcessLevelЕстьВУзле = ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(Объект.CCA, Объект.ProcessLevel);
		РасширенныйСоставРедактируемыхПолейLeg6 = ПланыОбмена.Leg7.РасширенныйСоставРедактируемыхПолейLeg6(Объект.CCA);
	КонецЕсли;
	
	Если ИспользуетсяLeg6Report И ProcessLevelЕстьВУзле Тогда
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "HouseWB", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WB2", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WB3", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "WB4", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "TotalWBWeight", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ActualPOA", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ETD", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ATD", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PreAlertETA", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ETA", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ATA", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CollectedFromPort", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PreAlert", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "DoxRcvd", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "InCustoms", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Cleared", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Inspection", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "InspectionStart", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "InspectionEnd", "ТолькоПросмотр", Истина);
		// { RGS AGorlenko 21.12.2015 18:24:57 - S-I-0001434
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PreInspection", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PreInspectionStart", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PreInspectionEnd", "ТолькоПросмотр", Истина);
		// } RGS AGorlenko 21.12.2015 18:25:00 - S-I-0001434
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAReference", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCDNumber", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PiecesQty", "ТолькоПросмотр", Истина);
		Если Не РасширенныйСоставРедактируемыхПолейLeg6 Тогда
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ConditionalRelease", "ТолькоПросмотр", Истина);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequested", "ТолькоПросмотр", Истина);
			РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsObtained", "ТолькоПросмотр", Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // } RGS VShamin 25.08.2015 12:11:04 - 

// { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
&НаСервере
Процедура УстановитьВидимостьTranzitZoneETA()
	
	Если Объект.ProcessLevel = Справочники.ProcessLevels.AZ Тогда
		
		Элементы.TranzitZoneETA.Видимость = Истина;
	Иначе
		Элементы.TranzitZoneETA.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьTranzitZoneETA()  // { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893


&НаСервере
Процедура НастроитьClosingDocument()
	
	Элементы.ClosingDocument.Видимость = ЗначениеЗаполнено(ClosingDocument);
	Элементы.КоманднаяПанельClosingDocument.Видимость = НЕ ЗначениеЗаполнено(ClosingDocument) И ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеЗаголовковWB(MOT, Дата)
	
	Если Не ЗначениеЗаполнено(MOT) Тогда 
		Возврат Новый Соответствие;	
	КонецЕсли;
	
	Если Дата < Дата("20131010") Тогда
		Возврат Новый Соответствие;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("MOT", MOT);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	MOTsImportWB.WBField,
	|	MOTsImportWB.Waybill
	|ИЗ
	|	Справочник.MOTs.ImportWB КАК MOTsImportWB
	|ГДЕ
	|	MOTsImportWB.Ссылка = &MOT";
	
	СоответствиеЗаголовковWB = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЗаголовковWB.Вставить(СокрЛП(Выборка.WBField), СокрЛП(Выборка.Waybill));
	КонецЦикла;
	
	Возврат СоответствиеЗаголовковWB;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененДокументService" Тогда
		
		Если Параметр = Объект.Ссылка Тогда
			CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененCustomsFileLight" Тогда
		
		Если Объект.Ссылка = Параметр Тогда
			
			НужноПерезаполнитьCustomsFilesLight = Истина;
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.PageCustomsFilesLight Тогда
				// МОЖЕТ БЫТЬ ЭФФЕКТИВНЕЕ ПЕРЕЗАПОЛНЯТЬ ТОЛЬКО ОДНУ СТРОКУ?
				ImportExportКлиент.ПерезаполнитьCustomsFilesВShipmentПриНеобходимости(CustomsFilesLight, Объект.Ссылка, НужноПерезаполнитьCustomsFilesLight);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры  


//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	
	ТекущийОбъект.Responsible = ПараметрыСеанса.ТекущийПользователь;
	ТекущийОбъект.LastModified = ТекущаяДата();
	
	Для Каждого СтрокаItems из ТаблицаItems Цикл 
		
		Если СтрокаItems.Shortage > СтрокаItems.Qty Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"For item " + СтрокаItems.Item + " Shortage qty exceed qty of Item!",
				, "ТаблицаItems", "Объект", Отказ);
			Продолжить;	
		КонецЕсли;
		
		МассивItems = Новый Массив;
		Если СтрокаItems.Shortage <> СтрокаItems.OLDShortage Тогда 
			МассивItems.Добавить(СтрокаItems.Item);	
		КонецЕсли;
		МассивItems = РГСофт.ИзменитьРеквизитВСсылках(МассивItems, "Shortage", СтрокаItems.Shortage);
		
		СтрокаItems.OLDShortage = СтрокаItems.Shortage;
		
	КонецЦикла;
	
	ДозаполнимItemsConfirmationOfCargoLatestDate(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнимItemsConfirmationOfCargoLatestDate(Отказ)
	
	Для Каждого СтрItems из ТаблицаItems Цикл
		
		Если СтрItems.GuaranteeLetter = Перечисления.YesNo.Yes Тогда
			
			ОбъектItem = СтрItems.Item.ПолучитьОбъект();
			
			РГСофтКлиентСервер.УстановитьЗначение(ОбъектItem.ConfirmationOfCargoLatestDate, СтрItems.ConfirmationOfCargoLatestDate);
			РГСофтКлиентСервер.УстановитьЗначение(ОбъектItem.CustomsBSReceiptDate, СтрItems.CustomsBSReceiptDate);
			
			Если ОбъектItem.Модифицированность() Тогда
				
				Попытка
					ОбъектItem.Записать();
				Исключение
					ОтменитьТранзакцию();
					Сообщить(
					"Failed to save " + СокрЛП(ОбъектItem) + "!
					|See errors above.
					|" + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	инфКартинкаСтатусВажности = ImportExportСервер.ПолучитьКартинкуСтатусаВажности(Объект.СтатусВажности);
	
	НастроитьClosingDocument();
	
	ПерезаполнитьИнформационныеПоляDOCs(, Объект.УпаковочныеЛисты, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, 
		DOCsFreight, DOCsRequestedPOACode, Объект.PermitsRequired, Объект.COORequired, Yes, No);
		
	// { RGS AArsentev 03.07.2018 S-I-0005470
	ОбновитьОтображениеЭлементовФормы();
	НастроитьTransportRequest();
	// } RGS AArsentev 03.07.2018 S-I-0005470
	
	Если Элементы.CustomsFiles.Видимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			CustomsFiles.Отбор,
			"Shipment",
			Объект.Ссылка,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
		
	КонецЕсли;
	
	Если Элементы.Services.Видимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Services.Отбор,
			"DocumentBase",
			Объект.Ссылка,
			ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;

	//Элементы.ConditionalRelease.Доступность = Объект.PermitsRequired = Перечисления.YesNo.Yes; //S-I-0001570

	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.ShipmentИнтерактивнаяЗапись, Объект.Ссылка);
		
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ВЕРХНЯЯ КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ

// ПЕЧАТЬ NON PO

&НаКлиенте
Процедура NonPO(Команда)
	
	Если Объект.ProcessLevel <> ПредопределенноеЗначение("Справочник.ProcessLevels.AZ")
		И Объект.ProcessLevel <> ПредопределенноеЗначение("Справочник.ProcessLevels.KZ") 
		И Объект.ProcessLevel <> ПредопределенноеЗначение("Справочник.ProcessLevels.TM") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"NON-PO is used only for process levels: AZ, KZ, TM!",
			, "ProcessLevel", "Объект");
		Возврат;
	КонецЕсли;
			
	Если Объект.УпаковочныеЛисты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"DOCs table is empty!",
			, "УпаковочныеЛисты", "Объект");
		Возврат;
	КонецЕсли;
	
	МассивТабДок = ПолучитьМассивТабДокNonPO();
	Для НПП = 1 по МассивТабДок.Количество() Цикл 
		ТабДок = МассивТабДок[(НПП - 1)];
		ТабДок.Показать("Non_PO_" + СокрЛП(Объект.Номер) + "-" + СокрЛП(НПП));
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивТабДокNonPO()
	
	Если Модифицированность Тогда
		Записать(Новый Структура);
	КонецЕсли;
	
	МассивТабДок = Новый Массив;
	
	// Получим данные из СУБД
	Запрос = Новый Запрос;
	
	DOCs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист");
	Запрос.УстановитьПараметр("DOCs", DOCs);
	Запрос.УстановитьПараметр("CreationDate", Объект.Дата);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Items.КостЦентр.Код КАК AUCode,
		|	Items.Активити КАК AC,
		|	Items.КостЦентр.DefaultActivity КАК AUAC,
		|	ERPTreatmentAccountsСрезПоследних.CCDAccount КАК CustomsDutiesAccount,
		|	ERPTreatmentAccountsСрезПоследних.CCDSubAccount КАК CustomsDutiesSubAccount,
		|	ERPTreatmentAccountsСрезПоследних.AgentAccount КАК CCAServicesAccount,
		|	ERPTreatmentAccountsСрезПоследних.AgentSubAccount КАК CCAServicesSubAccount,
		|	СУММА(1) КАК ItemsCount,
		|	100 КАК Percent,
		|	Items.КостЦентр.Segment.Код КАК SegmentCode,
		|	Items.PSA.Код КАК PSACode,
		|	Items.КостЦентр.Segment КАК Segment,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК InvoiceList,
		|	Items.КостЦентр КАК AU,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК Regime
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERPTreatmentAccounts.СрезПоследних(&CreationDate, ) КАК ERPTreatmentAccountsСрезПоследних
		|			ПО Items.Классификатор = ERPTreatmentAccountsСрезПоследних.ERPTreatment
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&DOCs)
		|
		|СГРУППИРОВАТЬ ПО
		|	ERPTreatmentAccountsСрезПоследних.AgentSubAccount,
		|	ERPTreatmentAccountsСрезПоследних.AgentAccount,
		|	ERPTreatmentAccountsСрезПоследних.CCDSubAccount,
		|	ERPTreatmentAccountsСрезПоследних.CCDAccount,
		|	Items.Активити,
		|	Items.КостЦентр.Код,
		|	Items.КостЦентр.DefaultActivity,
		|	Items.КостЦентр.Segment.Код,
		|	Items.PSA.Код,
		|	Items.КостЦентр,
		|	Items.КостЦентр.Segment
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Items.КостЦентр.Segment КАК Segment,
		|	ВЫРАЗИТЬ(DOCsInvoices.Инвойс.Номер КАК СТРОКА(25)) КАК InvoiceNo
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&DOCs)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Items.КостЦентр КАК AU,
		|	Items.PermanentTemporary КАК Regime
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&DOCs)
		|	И Items.PermanentTemporary <> ЗНАЧЕНИЕ(Перечисление.PermanentTemporary.ПустаяСсылка)";
		
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Результат = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	// Подготовим данные
	ТаблицаДанных = Результат[0].Выгрузить();
	
	ТаблицаInvoiceSegment = Результат[1].Выгрузить();
	ТаблицаInvoiceSegment.свернуть("Segment,InvoiceNo");
	
	ТаблицаRegime = Результат[2].Выгрузить();
	ТаблицаRegime.свернуть("AU,Regime");
	
	WBList = ?(ЗначениеЗаполнено(Объект.HouseWB), ", " + СокрЛП(Объект.HouseWB), "")
		+ ?(ЗначениеЗаполнено(Объект.WB2), ", " + СокрЛП(Объект.WB2), "")
		+ ?(ЗначениеЗаполнено(Объект.WB3), ", " + СокрЛП(Объект.WB3), "")
		+ ?(ЗначениеЗаполнено(Объект.WB4), ", " + СокрЛП(Объект.WB4), "");
	
	// Invoice List
	СтруктураПоискаSegment = Новый Структура("Segment");
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		InvoiceList = "";
		СтруктураПоискаSegment.Segment = СтрокаТаблицыДанных.Segment;
		МассивСтрок = ТаблицаInvoiceSegment.НайтиСтроки(СтруктураПоискаSegment); 
		Для Каждого ЭлементМассива из МассивСтрок Цикл 
			InvoiceList = InvoiceList + ?(InvoiceList = "", "", ", ") + СокрЛП(ЭлементМассива.InvoiceNo);
		КонецЦикла;
		СтрокаТаблицыДанных.InvoiceList = СокрЛП(МассивСтрок.Количество()) + " (" + InvoiceList + ")";
		
	КонецЦикла;
	
	// Regime
	СтруктураПоискаAU = Новый Структура("AU");
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		Regime = "";
		СтруктураПоискаAU.AU = СтрокаТаблицыДанных.AU;
		МассивСтрок = ТаблицаRegime.НайтиСтроки(СтруктураПоискаAU); 
		Для Каждого ЭлементМассива из МассивСтрок Цикл 
			Regime = Regime + ?(Regime = "", "", ", ") + СокрЛП(ЭлементМассива.Regime);
		КонецЦикла;
		СтрокаТаблицыДанных.Regime = Regime;
		
	КонецЦикла;
	
	//для AZ на каждый AU отдельный NON-PO
	Если Объект.ProcessLevel = Справочники.ProcessLevels.AZ Тогда 
		
		Для Каждого Стр из ТаблицаДанных Цикл 
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Стр);
			ТабДанных = ТаблицаДанных.Скопировать(МассивСтрок);
			   						
			МассивТабДок.Добавить(ImportExportСервер.ПолучитьТабДокNONPO(Объект, ТабДанных, WBList));
			
		КонецЦикла;
		
		Возврат МассивТабДок;
		
	КонецЕсли;
	
	TotalItemsCount = ТаблицаДанных.Итог("ItemsCount");
	TotalRows = ТаблицаДанных.Количество();
	
	// Заполним колонку с процентами
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		СтрокаТаблицыДанных.Percent = 100 * СтрокаТаблицыДанных.ItemsCount / TotalItemsCount;
		СтрокаТаблицыДанных.Percent = Окр(СтрокаТаблицыДанных.Percent, 2);
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("Percent УБЫВ");
	
	// Избавимся от ошибки округления
	CalculatedPercents = ТаблицаДанных.Итог("Percent");
	Если CalculatedPercents <> 100 Тогда
		ТаблицаДанных[0].Percent = ТаблицаДанных[0].Percent + 100 - CalculatedPercents;
	КонецЕсли;
	
	МассивТабДок.Добавить(ImportExportСервер.ПолучитьТабДокNONPO(Объект, ТаблицаДанных, WBList));
	
	Возврат МассивТабДок;
	
КонецФункции


// ПЕЧАТЬ CUSTOMS RELEASE

&НаКлиенте
Процедура CustomsRelease(Команда)
	
	ТабДок = ПолучитьТабДокCustomsRelease();
	ТабДок.Показать("Customs release");	
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Функция ПолучитьТабДокCustomsRelease()
	
	// ЗАПИСЫВАТЬ ПРИ МОДИФИЦИРОВАННОСТИ
	
	Макет = Документы.Поставка.ПолучитьМакет("CustomsRelease"); 
	ТабДок = Новый ТабличныйДокумент;
	
	// Получение данных
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Goods.Классификатор КАК InvoicelineКлассификатор,
		|	Goods.СтрокаЗаявкиНаЗакупку.ОписаниеНоменклатуры КАК POlineDescription,
		|	Goods.Количество КАК Qty,
		|	Goods.ЕдиницаИзмерения КАК UOM,
		|	DOCsInvoices.Инвойс.Валюта КАК Currency,
		|	Goods.Цена КАК UnitCost,
		|	Goods.Сумма КАК TotaPrice,
		|	Goods.PSA КАК PSA,
		|	Goods.НаименованиеТовара КАК InvoicelineDescription,
		|	Goods.СерийныйНомер КАК InvoicelineСерийныйНомер,
		|	Goods.КостЦентр.Segment КАК InvoicelineAUСегментРодительРодитель,
		|	Goods.КодПоИнвойсу КАК InvoicelineКодПоИнвойсу,
		|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.Код КАК PONo,
		|	Goods.СтранаПроисхождения КАК InvoicelineCountryOfOrigin,
		|	Goods.НомерВходящейДекларации КАК InvoicelineНомерВходящейДекларации,
		|	DOCsInvoices.Инвойс.Номер КАК InvoiceNo,
		|	DOCsInvoices.Ссылка.Номер КАК DOCNo,
		|	DOCsInvoices.Ссылка.Requested КАК DOCRequested,
		|	DOCsInvoices.Ссылка.Received КАК DOCReceived,
		|	Goods.СтрокаЗаявкиНаЗакупку.Владелец.ИмяЗаказчика КАК POИменаЗаказчиков
		|ИЗ
		|	Документ.Поставка.УпаковочныеЛисты КАК ShipmentDOCs
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Goods
		|			ПО DOCsInvoices.Инвойс = Goods.Инвойс
		|				И ((НЕ Goods.ПометкаУдаления))
		|		ПО ShipmentDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
		|ГДЕ
		|	ShipmentDOCs.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	DOCNo,
		|	InvoiceNo,
		|	PONo,
		|	Goods.СтрокаЗаявкиНаЗакупку.НомерСтрокиЗаявкиНаЗакупку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГТД.Номер КАК DTNo
		|ИЗ
		|	Документ.ГТД КАК ГТД
		|ГДЕ
		|	(НЕ ГТД.ПометкаУдаления)
		|	И ГТД.Shipment = &Ссылка";
		
	Результаты = Запрос.ВыполнитьПакет();
	
	ТЗ = Результаты[0].Выгрузить();
			   	
	// Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыШапки = ОбластьШапка.Параметры;
	ПараметрыШапки.ПоставкаНомер = Объект.Номер; 
	ПараметрыШапки.ПоставкаPOD = Объект.POD;	
	ПараметрыШапки.ПоставкаДата = Объект.Дата;
	ПараметрыШапки.ПоставкаWBList = Объект.WBList;
	
	МассивDTNo = Результаты[1].Выгрузить().ВыгрузитьКолонку("DTNo");
	ПараметрыШапки.DTs = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивDTNo, ", ");
	
	ТЗInvoiceNo = ТЗ.Скопировать(,"InvoiceNo");
	ТЗInvoiceNo.Свернуть("InvoiceNo");
	МассивInvoiceNo = ТЗInvoiceNo.ВыгрузитьКолонку("InvoiceNo");
	InvoiceNoList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивInvoiceNo, ", ");
	ПараметрыШапки.ПоставкаInvoiceNoList = InvoiceNoList;
	
	ТЗPOИменаЗаказчиков = ТЗ.Скопировать(,"POИменаЗаказчиков");
	ТЗPOИменаЗаказчиков.Свернуть("POИменаЗаказчиков");
	МассивPOИменаЗаказчиков = ТЗPOИменаЗаказчиков.ВыгрузитьКолонку("POИменаЗаказчиков");
	POИменаЗаказчиков = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивPOИменаЗаказчиков, ", ");
	ПараметрыШапки.POИменаЗаказчиков = POИменаЗаказчиков;
	
	ПараметрыШапки.ПоставкаИмпортЭкспорт = Объект.ИмпортЭкспорт; 
	ПараметрыШапки.ПоставкаОбщийВес = Объект.TotalWBWeight;
	ПараметрыШапки.ПоставкаMOT = Объект.MOT;
	ПараметрыШапки.ПоставкаCollectedFromPort = Формат(Объект.CollectedFromPort, "ДФ = dd.MM.гггг");
	ПараметрыШапки.ПоставкаETD = Объект.ETD;
	ПараметрыШапки.ПоставкаATD = Объект.ATD;
	ПараметрыШапки.ПоставкаETA = Объект.ETA;
	ПараметрыШапки.ПоставкаATA = Объект.ATA;
	ПараметрыШапки.ПоставкаКоличествоМест = Объект.PiecesQty;
	ПараметрыШапки.ПоставкаCCA = Объект.CCA;
	
	ТабДок.Вывести(ОбластьШапка);
	
	// Шапка таблицы
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	// Строки таблицы
	
	ОбластьСтрокТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ПараметрыСтрокТаблицы = ОбластьСтрокТаблицы.Параметры;
    НомерСтроки = 0;
	Для Каждого СтрТЗ из ТЗ цикл
		
		 НомерСтроки = НомерСтроки + 1;
		 ПараметрыСтрокТаблицы.НомерСтроки = НомерСтроки;
		 ПараметрыСтрокТаблицы.POlineDescription = СтрТЗ.POlineDescription;
	     ПараметрыСтрокТаблицы.QTY = СтрТЗ.QTY;
	     ПараметрыСтрокТаблицы.UOM = СтрТЗ.UOM;
	     ПараметрыСтрокТаблицы.Currency = СтрТЗ.Currency;
	     ПараметрыСтрокТаблицы.Unitcost = СтрТЗ.UnitCost;
		 ПараметрыСтрокТаблицы.Totaprice = СтрТЗ.TotaPrice;
		 ПараметрыСтрокТаблицы.InvoicelineКлассификатор = СтрТЗ.InvoicelineКлассификатор;
		 ПараметрыСтрокТаблицы.PSA = СтрТЗ.PSA;
		 ПараметрыСтрокТаблицы.InvoicelineDescription = СтрТЗ.InvoicelineDescription;
		 ПараметрыСтрокТаблицы.InvoicelineСерийныйНомер = СтрТЗ.InvoicelineСерийныйНомер;
		 ПараметрыСтрокТаблицы.InvoicelineAUСегментРодительРодитель = СтрТЗ.InvoicelineAUСегментРодительРодитель;
		 ПараметрыСтрокТаблицы.InvoicelineКодПоИнвойсу = СтрТЗ.InvoicelineКодПоИнвойсу;
		 ПараметрыСтрокТаблицы.PONo = СтрТЗ.PONo;
		 ПараметрыСтрокТаблицы.InvoicelineCountryoforigin = СтрТЗ.InvoicelineCountryoforigin;
		 ПараметрыСтрокТаблицы.InvoicelineНомерВходящейДекларации = СтрТЗ.InvoicelineНомерВходящейДекларации;
		 ПараметрыСтрокТаблицы.InvoiceNo = СтрТЗ.InvoiceNo;
		 ПараметрыСтрокТаблицы.DOCNo = СтрТЗ.DOCNo;
		 ПараметрыСтрокТаблицы.DOCRequested = СтрТЗ.DOCRequested;
		 ПараметрыСтрокТаблицы.DOCReceived = СтрТЗ.DOCReceived; 
		 ПараметрыСтрокТаблицы.Поставкаincustoms = Объект.InCustoms;
		 
		 ТабДок.Вывести(ОбластьСтрокТаблицы);
		 
	 КонецЦикла;
	 
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
		 
	Возврат ТабДок;  
		
КонецФункции


//////////////////////////////////////////////////////////////////////////
// ШАПКА ДОКУМЕНТА

&НаКлиенте
Процедура PreAlertETAПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(OldPreAlertETA)
		И OldPreAlertETA <> Объект.PreAlertETA Тогда
		
		Ответ = Вопрос("Вы действительно хотите изменить Pre-alert ETA?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Объект.PreAlertETA = OldPreAlertETA;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.PreAlertETA)
		И НЕ ЗначениеЗаполнено(Объект.ETA) Тогда
		Объект.ETA = Объект.PreAlertETA;
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура ETAПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ETA)
		И НЕ ЗначениеЗаполнено(Объект.PreAlertETA) Тогда
		Объект.PreAlertETA = Объект.ETA;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SWIFTRequiredПриИзменении(Элемент)
	
	УстановитьВидимостьSWIFT();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьSWIFT()
	// { RGS ASeryakov, 21.08.2018 16:12:23 S-I-0005819
	//Если ЗначениеЗаполнено(Объект.ProcessLevel) И Объект.ProcessLevel = Справочники.ProcessLevels.KZ Тогда
	Если ЗначениеЗаполнено(Объект.ProcessLevel) И (Объект.ProcessLevel = Справочники.ProcessLevels.KZ ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.UZ) Тогда
	// } RGS ASeryakov 21.08.2018 16:12:25 S-I-0005819
		Элементы.SWIFTRequired.Видимость = Истина;
		Элементы.SWIFTRequested.Видимость = Объект.SWIFTRequired;
		Элементы.SWIFTReceived.Видимость = Объект.SWIFTRequired;
	Иначе
		Элементы.SWIFTRequired.Видимость = Ложь;
		Элементы.SWIFTRequested.Видимость = Ложь;
		Элементы.SWIFTReceived.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура InspectionПриИзменении(Элемент)
	
	УстановитьВидимостьInspection();
	
КонецПроцедуры

// { RGS AGorlenko 21.12.2015 18:26:52 - S-I-0001434
&НаКлиенте
Процедура PreInspectionПриИзменении(Элемент)
	
	УстановитьВидимостьPreInspection();
	
КонецПроцедуры // } RGS AGorlenko 21.12.2015 18:27:14 - S-I-0001434

&НаСервере
Процедура УстановитьВидимостьInspection()
	
	Элементы.InspectionStart.Видимость = Объект.Inspection;
	Элементы.InspectionEnd.Видимость = Объект.Inspection;
	
КонецПроцедуры

// { RGS AGorlenko 21.12.2015 18:24:00 - S-I-0001434
&НаСервере
Процедура УстановитьВидимостьPreInspection()
	
	Элементы.PreInspectionStart.Видимость = Объект.PreInspection;
	Элементы.PreInspectionEnd.Видимость = Объект.PreInspection;
	
КонецПроцедуры // } RGS AGorlenko 21.12.2015 18:24:01 - S-I-0001434

&НаСервере
Процедура УстановитьВидимостьCOORequired()
	
	ЭтоRUProcessLevel = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM);
	
	Элементы.COORequired.Видимость = ЭтоRUProcessLevel;
	// { RGS AArsentev 03.07.2018 S-I-0005470
	//Элементы.COORequested.Видимость = ЭтоRUProcessLevel;
	//Элементы.COOReceived.Видимость = ЭтоRUProcessLevel;
	// } RGS AArsentev 03.07.2018 S-I-0005470
	Элементы.ItemsПодменюChangeCOO.Видимость = ЭтоRUProcessLevel;
	Элементы.ItemsCOORequired.Видимость = ЭтоRUProcessLevel;
	Элементы.DOCsCOORequired.Видимость = ЭтоRUProcessLevel;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьConditionalRelease()
	
	Элементы.ConditionalRelease.Видимость = (Объект.ProcessLevel = Справочники.ProcessLevels.KZ
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM);
	Элементы.ДекорацияConditionalRelease.Видимость = Не Элементы.ConditionalRelease.Видимость;
	//Элементы.ConditionalRelease.Доступность = Объект.PermitsRequired = Перечисления.YesNo.Yes; //S-I-0001570
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// СТРАНИЦЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаItems Тогда
		
		ПерезаполнитьItemsПриНеобходимости();
		
	ИначеЕсли ТекущаяСтраница = Элементы.PageCustomsFiles Тогда
		
		Если НЕ Элементы.CustomsFiles.Видимость Тогда
			НастроитьСтраницуCustomsFiles();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.PageCustomsFilesLight Тогда
		
		ImportExportКлиент.ПерезаполнитьCustomsFilesВShipmentПриНеобходимости(CustomsFilesLight, Объект.Ссылка, НужноПерезаполнитьCustomsFilesLight);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаServices Тогда
		
		Если НЕ Элементы.Services.Видимость Тогда
			НастроитьСтраницуServices();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСтраницуCustomsFiles()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		CustomsFiles.Отбор,
		"Shipment",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора);
	
	Элементы.CustomsFiles.Видимость = Истина;
	Элементы.ФиктивнаяНадписьCustomsFiles.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСтраницуServices()

	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Services.Отбор,
		"DocumentBase",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора);
			
	CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);	

	Элементы.Services.Видимость = Истина;
	Элементы.ФиктивнаяНадписьServices.Видимость = Ложь;
	
КонецПроцедуры
		
//////////////////////////////////////////////////////////////////////////
// DOCs

&НаКлиенте
Процедура FindDOCs(Команда)
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзShipment");
	СтруктураНастройки.Вставить("CurrentShipment", Объект.Ссылка);
	СтруктураНастройки.Вставить("CurrentDOCs", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.ФормаВыбора", ПараметрыФормы, Элементы.DOCs);
		
КонецПроцедуры

&НаКлиенте
Процедура DOCsУпаковочныйЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзShipment");
	СтруктураНастройки.Вставить("CurrentShipment", Объект.Ссылка);
	СтруктураНастройки.Вставить("CurrentDOCs", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист"));
	     	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("ДокументСсылка.КонсолидированныйПакетЗаявокНаПеревозку") Тогда
		
		МассивСтрокТЧ = Новый Массив;
		Для Каждого DOC ИЗ ВыбранноеЗначение Цикл
			
			НоваяСтрока = Объект.УпаковочныеЛисты.Добавить();
			НоваяСтрока.УпаковочныйЛист = DOC;
			МассивСтрокТЧ.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		Модифицированность = Истина;
		ПерезаполнитьИнформационныеПоляDOCsСКлиента(МассивСтрокТЧ);
		
		НужноПерезаполнитьItems = Истина;
		
		ОбновитьMOTиWB();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УпаковочныйЛист = Элемент.ТекущиеДанные.УпаковочныйЛист;
	Если ЗначениеЗаполнено(УпаковочныйЛист) Тогда
		
		ПоказатьЗначение(,УпаковочныйЛист);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DOCsПослеУдаления(Элемент)
	
	ПерезаполнитьИтогиDOCs(Объект.УпаковочныеЛисты, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, DOCsFreight, 
		DOCsRequestedPOACode, Объект.PermitsRequired, Объект.COORequired, Yes, No);
	
	НужноПерезаполнитьItems = Истина;
	
	ОбновитьMOTиWB();
		
КонецПроцедуры

&НаКлиенте
Процедура DOCsDOCПриИзменении(Элемент)
	
	МассивСтрокТЧ = Новый Массив;
	МассивСтрокТЧ.Добавить(Элементы.DOCs.ТекущиеДанные);
	ПерезаполнитьИнформационныеПоляDOCsСКлиента(МассивСтрокТЧ);
	
	НужноПерезаполнитьItems = Истина;
	
	ОбновитьMOTиWB();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьMOTиWB()
	
	// MOT
	МассивMOTs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(объект.УпаковочныеЛисты, "MOT");
	Объект.MOT = ?(МассивMOTs.Количество() = 1, МассивMOTs[0], Неопределено);
	
	Если Объект.УпаковочныеЛисты.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.MOT) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"MOT is empty or differs in DOCs!",
			, "MOT", "Объект");
		Элементы.HouseWB.Заголовок = Неопределено;
		Элементы.WB2.Заголовок = Неопределено;
		Элементы.WB3.Заголовок = Неопределено;
		Элементы.WB4.Заголовок = Неопределено;
		Возврат;
	КонецЕсли;
	
	// WB
	СоответствиеЗаголовковWB = ПолучитьСоответствиеЗаголовковWB(Объект.MOT, Объект.Дата);
	Для Каждого КлючИЗначение из СоответствиеЗаголовковWB Цикл 
		Элементы[КлючИЗначение.Ключ].Заголовок = КлючИЗначение.Значение;		
	КонецЦикла;
	
КонецПроцедуры

// ЗАПОЛНЕНИЕ ДОП. КОЛОНОК

&НаКлиенте
Процедура ПерезаполнитьИнформационныеПоляDOCsСКлиента(МассивСтрокТЧ = Неопределено)
	
	ПерезаполнитьИнформационныеПоляDOCs(МассивСтрокТЧ, Объект.УпаковочныеЛисты, DOCsPiecesQty, DOCsGrossWeightKG, 
		DOCsCubicMeters, DOCsFreight, DOCsRequestedPOACode, Объект.PermitsRequired, Объект.COORequired, Yes, No);
		
	// { RGS AArsentev 03.07.2018 S-I-0005470
	ОбновитьОтображениеЭлементовФормы();
	// } RGS AArsentev 03.07.2018 S-I-0005470
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерезаполнитьИнформационныеПоляDOCs(МассивСтрокТЧ = Неопределено, ТаблицаDOCs, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, DOCsFreight, DOCsRequestedPOACode, PermitsRequired, COORequired, Yes, No)
	
	// Если массив DOC не передан - начит нужно обновлять данные всех DOC из таблицы
	Если МассивСтрокТЧ = Неопределено Тогда
		
		МассивСтрокТЧ = Новый Массив;
		Для Каждого СтрокаТЧ Из ТаблицаDOCs Цикл
			МассивСтрокТЧ.Добавить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;	
	
	// Сформируем массив DOCs данные которых нужно получить
	МассивDOCs = Новый Массив;
	Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
			МассивDOCs.Добавить(СтрокаТЧ.УпаковочныйЛист);
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим данные DOCs из базы
	Если МассивDOCs.Количество() = 0 Тогда
		ДанныеDOCs = Новый Соответствие;
	Иначе
		ДанныеDOCs = ПолучитьДанныеDOCs(МассивDOCs);
	КонецЕсли;
	
	// Заполним дополнительные колонки в таблице DOCs из данных базы
	СтрокаСвойствDOC = ПолучитьСтрокуСвойствDOC();	
	Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
			СтруктураДанныхDOC = ДанныеDOCs[СтрокаТЧ.УпаковочныйЛист];
		Иначе
			СтруктураДанныхDOC = Новый Структура(СтрокаСвойствDOC);
		КонецЕсли;
		
		//Добавила условие Федотова Л., РГ-Софт, 30.07.15, вопрос SLI-0005645
		Если НЕ СтруктураДанныхDOC = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанныхDOC, СтрокаСвойствDOC);	
		КонецЕсли;
		
	КонецЦикла;
	  		
	// Пересчитаем итоги по таблице DOCs
	ПерезаполнитьИтогиDOCs(ТаблицаDOCs, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, DOCsFreight, DOCsRequestedPOACode, PermitsRequired, COORequired, Yes, No);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеDOCs(DOCs)
	
	Соответствие = Новый Соответствие;
	
	// Если DOCs нет - значит запрос ничего не вернет - значит его можно не выполнять
	Если DOCs.Количество() = 0 Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOCs", DOCs);
	Запрос.Текст = ПолучитьТекстЗапросаДанныхDOCs();
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаСвойствDOC = ПолучитьСтрокуСвойствDOC();
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствDOC);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствDOC);
		Соответствие.Вставить(Выборка.DOC, Структура);
					
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДанныхDOCs()
	
	Возврат
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.DOC,
		|	ВложенныйЗапрос.DOC.Coordinator.Представление КАК SpecialistName,
		|	ВложенныйЗапрос.DOC.Urgency КАК Urgency,
		|	ВложенныйЗапрос.DOC.Seller.Наименование КАК SellerCode,
		|	ВложенныйЗапрос.DOC.ConsignTo.Код КАК ConsignToCode,
		|	ВложенныйЗапрос.DOC.RequestedPOA.Код КАК RequestedPOACode,
		|	ВложенныйЗапрос.PiecesQty,
		|	ВложенныйЗапрос.GrossWeightKG,
		|	ВложенныйЗапрос.CubicMeters,
		|	ВложенныйЗапрос.Freight,
		|	ВложенныйЗапрос.PermitsRequired,
		|	ВложенныйЗапрос.DOC.MOT КАК MOT,
		|	ВложенныйЗапрос.COORequired
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.DOC КАК DOC,
		|		СУММА(ВложенныйЗапрос.PiecesQty) КАК PiecesQty,
		|		СУММА(ВложенныйЗапрос.GrossWeightKG) КАК GrossWeightKG,
		|		СУММА(ВложенныйЗапрос.CubicMeters) КАК CubicMeters,
		|		СУММА(ВложенныйЗапрос.Freight) КАК Freight,
		|		МИНИМУМ(ВложенныйЗапрос.PermitsRequired) КАК PermitsRequired,
		|		МИНИМУМ(ВложенныйЗапрос.COORequired) КАК COORequired
		|	ИЗ
		|		(ВЫБРАТЬ
		|			DOCsParcels.Ссылка КАК DOC,
		|			DOCsParcels.Parcel.NumOfParcels КАК PiecesQty,
		|			DOCsParcels.Parcel.GrossWeightKG КАК GrossWeightKG,
		|			DOCsParcels.Parcel.CubicMeters КАК CubicMeters,
		|			0 КАК Freight,
		|			ЗНАЧЕНИЕ(Перечисление.YesNo.No) КАК PermitsRequired,
		|			ЗНАЧЕНИЕ(Перечисление.YesNo.No) КАК COORequired
		|		ИЗ
		|			Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
		|		ГДЕ
		|			DOCsParcels.Ссылка В(&DOCs)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			DOCsItems.DOC,
		|			0,
		|			0,
		|			0,
		|			DOCsItems.Invoice.Фрахт,
		|			МИНИМУМ(DOCsItems.PermitsRequired),
		|			МИНИМУМ(DOCsItems.COORequired)
		|		ИЗ
		|			(ВЫБРАТЬ
		|				DOCsInvoices.Ссылка КАК DOC,
		|				DOCsInvoices.Инвойс КАК Invoice,
		|				ВЫБОР
		|					КОГДА Items.PermitsRequired = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.YesNo.No)
		|				КОНЕЦ КАК PermitsRequired,
		|				ВЫБОР
		|					КОГДА Items.COORequired = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.YesNo.No)
		|				КОНЕЦ КАК COORequired
		|			ИЗ
		|				Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|					ПО DOCsInvoices.Инвойс = Items.Инвойс
		|						И (НЕ Items.ПометкаУдаления)
		|			ГДЕ
		|				DOCsInvoices.Ссылка В(&DOCs)) КАК DOCsItems
		|		
		|		СГРУППИРОВАТЬ ПО
		|			DOCsItems.DOC,
		|			DOCsItems.Invoice,
		|			DOCsItems.Invoice.Фрахт) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.DOC) КАК ВложенныйЗапрос";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойствDOC()
	
	Возврат "SpecialistName, Urgency, SellerCode, ConsignToCode, RequestedPOACode, PiecesQty, GrossWeightKG, CubicMeters, Freight, PermitsRequired, COORequired, MOT";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПерезаполнитьИтогиDOCs(ТаблицаDOCs, DOCsPiecesQty, DOCsGrossWeightKG, DOCsCubicMeters, DOCsFreight, DOCsRequestedPOACode, PermitsRequired, COORequired, Yes, No)
	
	DOCsPiecesQty = ТаблицаDOCs.Итог("PiecesQty");
	DOCsGrossWeightKG = ТаблицаDOCs.Итог("GrossWeightKG");
	DOCsCubicMeters = ТаблицаDOCs.Итог("CubicMeters");
	DOCsFreight = ТаблицаDOCs.Итог("Freight");
	
	// Найдем Requested POA из всех DOCs.
	НовыйRequestedPOACode = "";	
	PermitsRequired = No;
	COORequired = No;
	Для Каждого СтрокаТЧ Из ТаблицаDOCs Цикл
		
		Если НЕ ЗначениеЗаполнено(НовыйRequestedPOACode) Тогда
			НовыйRequestedPOACode = СтрокаТЧ.RequestedPOACode;
		ИначеЕсли НовыйRequestedPOACode <> СтрокаТЧ.RequestedPOACode Тогда
			НовыйRequestedPOACode = "Differ";
		КонецЕсли;
		
		Если СтрокаТЧ.PermitsRequired = Yes Тогда
			PermitsRequired = Yes;
		КонецЕсли;
		
		Если СтрокаТЧ.COORequired = Yes Тогда
			COORequired = Yes;
		КонецЕсли;

	КонецЦикла;
	Если НовыйRequestedPOACode = "Differ" Тогда
		НовыйRequestedPOACode = "";
	КонецЕсли;	
	
	// Установим новый Requested POA
	Если DOCsRequestedPOACode <> НовыйRequestedPOACode Тогда
		DOCsRequestedPOACode = НовыйRequestedPOACode;	
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ITEMs

&НаКлиенте
Процедура ПерезаполнитьItemsПриНеобходимости()
	
	Если НЕ НужноПерезаполнитьItems Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаItems.Очистить();
	
	МассивDOCs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист");
	Если МассивDOCs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтруктур = ПолучитьДанныеItems(МассивDOCs);
	СтрокаРеквизитовItem = ПолучитьСтрокуРеквизитовItem();
	Для Каждого СтруктураItem Из МассивСтруктур Цикл
		НоваяСтрокаТаблицы = ТаблицаItems.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтруктураItem, СтрокаРеквизитовItem);
	КонецЦикла;
	
	НужноПерезаполнитьItems = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеItems(МассивDOCs)
	
	МассивСтруктур = Новый Массив;
	Если МассивDOCs.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивDOCs", МассивDOCs);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DOCsInvoices.Ссылка КАК DOC,
		|	DOCsInvoices.Ссылка.Номер КАК DOCNo,
		|	DOCsInvoices.Инвойс КАК Invoice,
		|	DOCsInvoices.Инвойс.Номер КАК InvoiceNo,
		|	Items.Ссылка КАК Item,
		|	Items.НомерСтрокиИнвойса КАК LineNo,
		|	Items.НомерЗаявкиНаЗакупку КАК PONo,
		|	Items.КодПоИнвойсу КАК PartNo,
		|	Items.СерийныйНомер КАК SerialNo,
		|	Items.НаименованиеТовара КАК ItemDescription,
		|	Items.Количество КАК Qty,
		|	Items.ЕдиницаИзмерения.Код КАК QtyUOMCode,
		|	Items.Цена КАК Price,
		|	Items.Currency.Представление КАК CurrencyCode,
		|	Items.Сумма КАК Sum,
		|	Items.SoldTo.Код КАК SoldToCode,
		|	Items.СтранаПроисхождения КАК CountryOfOrigin,
		|	Items.Manufacturer,
		|	Items.МеждународныйКодТНВЭД КАК HTC,
		|	Items.NetWeight,
		|	Items.WeightUOM.Код КАК WeightUOMCode,
		|	Items.PSA КАК PSAContract,
		|	Items.PSA.Код КАК PSAContractCode,
		|	Items.PermanentTemporary,
		|	Items.PermitsRequired,
		|	Items.COORequired,
		|	Items.КостЦентр.Segment.Код КАК SegmentCode,
		|	Items.Активити КАК Activity,
		|	Items.КостЦентр.Код КАК AUCode,
		|	Items.Shortage КАК Shortage,
		|	Items.Shortage КАК OLDShortage,
		|	Items.GuaranteeLetter,
		|	Items.MOC,
		|	Items.ConfirmationOfCargoLatestDate,
		|	Items.CustomsBSReceiptDate
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|		ПО DOCsInvoices.Инвойс = Items.Инвойс
		|			И (НЕ Items.ПометкаУдаления)
		|ГДЕ
		|	DOCsInvoices.Ссылка В(&МассивDOCs)
		|
		|УПОРЯДОЧИТЬ ПО
		|	DOCNo,
		|	InvoiceNo,
		|	LineNo";
		
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокаРеквизитовItem = ПолучитьСтрокуРеквизитовItem();
	Пока Выборка.Следующий() Цикл
		
		СтруктураItem = Новый Структура(СтрокаРеквизитовItem);
		ЗаполнитьЗначенияСвойств(СтруктураItem, Выборка, СтрокаРеквизитовItem);
		МассивСтруктур.Добавить(СтруктураItem);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуРеквизитовItem()
	
	Возврат "Item, DOC, DOCNo, Invoice, InvoiceNo, LineNo, PONo, SegmentCode, PartNo, SerialNo, ItemDescription, Qty, QtyUOMCode, Price, CurrencyCode, Sum, SoldToCode, CountryOfOrigin, Manufacturer, HTC, NetWeight, WeightUOMCode, PSAContract, PSAContractCode, PermanentTemporary, PermitsRequired, COORequired, AUCode, Activity, Shortage, OLDShortage, GuaranteeLetter, MOC, ConfirmationOfCargoLatestDate, CustomsBSReceiptDate";
	
КонецФункции

&НаКлиенте
Процедура ItemsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.ItemsDOCNo Тогда
		
		ПоказатьЗначение(,ТекущиеДанные.DOC);
		
	ИначеЕсли Поле = Элементы.ItemsInvoiceNo Тогда
		
		ПоказатьЗначение(,ТекущиеДанные.Invoice);
		
	ИначеЕсли Поле = Элементы.ItemsShortage 
		ИЛИ Поле = Элементы.ItemsConfirmationOfCargoLatestDate 
		ИЛИ Поле = Элементы.ItemsCustomsBSReceiptDate Тогда
		
	Иначе
		
		ПоказатьЗначение(,ТекущиеДанные.Item);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура MakePermanent(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
		
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхItems, "PermanentTemporary", Permanent);

	ОбновитьКолонкуВItems(МассивИзмененныхItems, "PermanentTemporary", Permanent);
	
КонецПроцедуры

&НаКлиенте
Процедура MakeTemporary(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
		
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхItems, "PermanentTemporary", Temporary);

	ОбновитьКолонкуВItems(МассивВыделенныхItems, "PermanentTemporary", Temporary);
	
КонецПроцедуры

// PSA

&НаКлиенте
Процедура SpecifyPSA(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
	
	PSAContract = ОткрытьФормуМодально("Справочник.PSAContracts.ФормаВыбора", , ЭтаФорма);
	Если Не ЗначениеЗаполнено(PSAContract) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхItems, "PSA", PSAContract);

	Если МассивИзмененныхItems.Количество() Тогда
		
		ОбновитьКолонкуВItems(МассивИзмененныхItems, "PSAContract", PSAContract);
		PSAContractCode = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PSAContract, "Код");
		ОбновитьКолонкуВItems(МассивИзмененныхItems, "PSAContractCode", PSAContractCode);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ClearPSA(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
		
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхItems, "PSA", Неопределено);
	
	ОбновитьКолонкуВItems(МассивИзмененныхItems, "PSAContract", Неопределено);
	ОбновитьКолонкуВItems(МассивИзмененныхItems, "PSAContractCode", "");
	
КонецПроцедуры

// Permits

&НаКлиенте
Процедура PermitsRequired(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
		
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхItems, "PermitsRequired", Yes);

	ОбновитьКолонкуВItems(МассивИзмененныхItems, "PermitsRequired", Yes);
		
КонецПроцедуры

&НаКлиенте
Процедура PermitsNotRequired(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
		
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхItems, "PermitsRequired", No);

	ОбновитьКолонкуВItems(МассивИзмененныхItems, "PermitsRequired", No);
	
КонецПроцедуры

// COO

&НаКлиенте
Процедура COORequired(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхItems, "COORequired", Yes);
	
	ОбновитьКолонкуВItems(МассивИзмененныхItems, "COORequired", Yes);
	
КонецПроцедуры

&НаКлиенте
Процедура COONotRequired(Команда)
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхItems.Количество() = 0 Тогда
		Предупреждение(
			"Please, select at least one item!",
			30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхItems, "COORequired", No);
	
	ОбновитьКолонкуВItems(МассивИзмененныхItems, "COORequired", No);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхItems()
	
	МассивItems = Новый Массив;
	ВыделенныеСтроки = Элементы.Items.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаItems.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивItems.Добавить(СтрокаТаблицы.Item);
		
	КонецЦикла;
	
	Возврат МассивItems;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкуВItems(МассивItems, ИмяКолонки, Значение)
	
	Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
		Если МассивItems.Найти(СтрокаТаблицы.Item) <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонки] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsConfirmationOfCargoLatestDateПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ItemsCustomsBSReceiptDateПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// ПЕЧАТЬ NON PO WITH SELECTED ITEMS

&НаКлиенте
Процедура NonPOWithSelectedItems(Команда)
	
	Отказ = Ложь;
	ВыделенныеСтроки = Элементы.Items.ВыделенныеСтроки;
                                     
	ВыполнитьПроверкуВыделенныхСтрок(Отказ, ВыделенныеСтроки);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	      		
	ТабДок = ПолучитьТабДокNonPOWithSelectedItems(ВыделенныеСтроки);
	ТабДок.Показать("Non_PO_" + СокрЛП(Объект.Номер));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуВыделенныхСтрок(Отказ, ВыделенныеСтроки)
	        		
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не выделено ни одной строки!",
				,,, Отказ);
		
	Иначе 
		
		МассивSoldTo       = Новый Массив;
		МассивRegime       = Новый Массив;
		МассивPSAContract  = Новый Массив;
		
		Для Каждого Стр из ВыделенныеСтроки Цикл 
			СтрокаКоллекции = Элементы.Items.ДанныеСтроки(Стр);
			
			Если МассивSoldTo.Найти(СтрокаКоллекции.SoldToCode) = Неопределено Тогда 
				МассивSoldTo.Добавить(СтрокаКоллекции.SoldToCode);
			КонецЕсли;

			Если МассивRegime.Найти(СтрокаКоллекции.PermanentTemporary) = Неопределено Тогда 
				МассивRegime.Добавить(СтрокаКоллекции.PermanentTemporary);
			КонецЕсли;
			
			Если МассивPSAContract.Найти(СтрокаКоллекции.PSAContractCode) = Неопределено Тогда 
				МассивPSAContract.Добавить(СтрокаКоллекции.PSAContractCode);
			КонецЕсли;
		    												
		КонецЦикла;										
									
												
		Если МассивSoldTo.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Выделены строки с разными Sold-to!",
				,,, Отказ);
		КонецЕсли;										
												
		Если МассивPSAContract.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Выделены строки с разными PSA contract!",
				,,, Отказ);
		КонецЕсли;
		
		Если МассивRegime.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Выделены строки с разными режимами!",
				,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокNonPOWithSelectedItems(ВыделенныеСтроки)
	
	Если Модифицированность Тогда
		Записать(Новый Структура);
	КонецЕсли;
	
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ЭлементМассива из ВыделенныеСтроки Цикл 
		МассивВыделенныхСтрок.Добавить(ТаблицаItems.НайтиПоИдентификатору(ЭлементМассива)); 
	КонецЦикла;
	
	Макет = ПолучитьОбщийМакет("NonPO_AZ");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Header
	ОбластьHeader = Макет.ПолучитьОбласть("Header");
	ПараметрыОбластиHeader = ОбластьHeader.Параметры;
	ПараметрыОбластиHeader.CurrentDate = ТекущаяДатаСеанса();
	ПараметрыОбластиHeader.CCA = СокрЛП(Объект.CCA.Наименование);
	ТабличныйДокумент.Вывести(ОбластьHeader);
	
	//Table Header
	ОбластьTableHeader = Макет.ПолучитьОбласть("TableHeader");
	
	ПараметрыTableHeader = ОбластьTableHeader.Параметры;
	ПараметрыTableHeader.HouseWB = СокрЛП(Объект.HouseWB);
	ПараметрыTableHeader.Regime = СокрЛП(МассивВыделенныхСтрок[0].PermanentTemporary);
	ПараметрыTableHeader.PSAContract = СокрЛП(МассивВыделенныхСтрок[0].PSAContractCode);
	
	МассивInvoiceNo = Новый Массив;
	МассивSegments  = Новый Массив;
		
	Для Каждого СтрокаКоллекции из МассивВыделенныхСтрок Цикл 
				
		Если МассивSegments.Найти(СтрокаКоллекции.SegmentCode) = Неопределено Тогда 
			МассивSegments.Добавить(СтрокаКоллекции.SegmentCode);
		КонецЕсли;
		
		Если МассивInvoiceNo.Найти(СтрокаКоллекции.InvoiceNo) = Неопределено Тогда 
			МассивInvoiceNo.Добавить(СтрокаКоллекции.InvoiceNo);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокInvoiceNo = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивInvoiceNo, ", ");
	ПараметрыTableHeader.InvoiceNo = СокрЛП(СписокInvoiceNo);
	            		
	СписокСегментов = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивSegments, ", ");
	ПараметрыTableHeader.Segments = СокрЛП(СписокСегментов);
	
	ТЗTotalPrice = ТаблицаItems.Выгрузить(МассивВыделенныхСтрок, "CurrencyCode,Sum");
	ТЗTotalPrice.Свернуть("CurrencyCode","Sum");
	TotalPrice = "";
	Для Каждого стрТЗTotalPrice из ТЗTotalPrice Цикл 
		TotalPrice = TotalPrice + ?(TotalPrice = "","",", ") 
		+ СокрЛП(Справочники.Валюты.НайтиПоКоду(стрТЗTotalPrice.CurrencyCode)) 
		+ " " + Формат(стрТЗTotalPrice.Sum, "ЧДЦ=2");
	КонецЦикла;
	ПараметрыTableHeader.TotalPrice = TotalPrice;

	ТабличныйДокумент.Вывести(ОбластьTableHeader);
	
	//строки AU и AC
	ОбластьTableLine = Макет.ПолучитьОбласть("TableLine");
	ПараметрыОбластиTableLine = ОбластьTableLine.Параметры;
	       	         	
	ТЗдляTableLines = ТаблицаItems.Выгрузить(МассивВыделенныхСтрок, "AUCode,Activity");
	ТЗдляTableLines.Свернуть("AUCode,Activity");
	ТЗдляTableLines.Сортировать("AUCode,Activity");
	
	НомерСтроки = 14;
	Для Каждого Стр из ТЗдляTableLines Цикл 
		  				
		ПараметрыОбластиTableLine.AU = СокрЛП(Стр.AUCode);
		ПараметрыОбластиTableLine.AC = СокрЛП(Стр.Activity);
		
		ТабличныйДокумент.ВставитьОбласть(ОбластьTableLine.Области.TableLine,
										  ТабличныйДокумент.Область("R"+НомерСтроки+"C1:R"+НомерСтроки+"C3"),
										  ТипСмещенияТабличногоДокумента.БезСмещения, Истина); 
										  
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Footer
	ОбластьFooter = Макет.ПолучитьОбласть("Footer");	
	ТабличныйДокумент.Вывести(ОбластьFooter);
	
	// Завершим оформление табличного документа
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
		 
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ItemsShortageПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// CUSTOMS FILES

&НаКлиенте
Процедура CustomsFilesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЗаписатьПриНеобходимости(Отказ);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// CUSTOMS FILES (LIGHT)

&НаКлиенте
Процедура CustomsFilesLightПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Переопределим добавление новое строки
	// Вместо этого создадим новый документ
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			Записать();
		Исключение
			Сообщить("Failed to save Shipment!
				|See errors above.
				|" + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
		
	Иначе
		СтруктураПараметров.Вставить("Основание", Объект.Ссылка);
	КонецЕсли;
		
	ОткрытьФорму("Документ.CustomsFilesLight.ФормаОбъекта", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура CustomsFilesLightПередНачаломИзменения(Элемент, Отказ)
	
	// Переопределим изменение строки
	// Вместо этого откроем документ
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура CustomsFilesLightПередУдалением(Элемент, Отказ)
	
	// Переопределим удаление строки
	// Вместо этого совсем откажемся от удаление, потому что с пометкой удаления будет геморрой (помечать на удаление, обновлять таблицу и т. д)
	
	Отказ = Истина;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
// SERVICES

&НаКлиенте
Процедура ОбновитьServices(Команда)
	
	ОбновитьServicesНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьServicesНаСервере()
	
	Элементы.Services.Обновить();
	CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);	
	
КонецПроцедуры 

&НаКлиенте
Процедура ServicesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
	ЗаписатьПриНеобходимости(Отказ);
	
	ПроверитьCCD(Отказ);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// OUT OF COMPLIANCE REASONS

&НаКлиенте
Процедура OutOfComplianceReasonsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ОткрытьФорму("Справочник.OutOfComplianceReasons.ФормаВыбора", Новый Структура("Import"), Элемент);
	КонецЕсли;
	
КонецПроцедуры
      
&НаКлиенте
Процедура OutOfComplianceReasonsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) и ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.OutOfComplianceReasons") Тогда
		НоваяСтрока = Объект.OutOfComplianceReasons.Добавить();
		НоваяСтрока.OutOfComplianceReason = ВыбранноеЗначение;
		Модифицированность = Истина;
		// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
		OutOfComplianceReason = ПолучитьЗначениеOutOfComplianceReasons();
		Если ВыбранноеЗначение = OutOfComplianceReason Тогда
			Элементы.OutOfComplianceReasonsInvoiceLines.Видимость = Истина;
			Элементы.OutOfComplianceReasonsAcceptedBySLB.Видимость = Истина;
			Элементы.OutOfComplianceReasonsNotAcceptedBySLB.Видимость = Истина;
			//Элементы.OutOfComplianceReasonsConditionalRelease.Видимость = Истина;
		КонецЕсли;	
		// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
	КонецЕсли;	
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
// OTHER

// { RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893
&НаКлиенте
Процедура ProcessLevel1ПриИзменении(Элемент)
	УстановитьВидимостьTranzitZoneETA();
КонецПроцедуры // } RGS ASeryakov 17/10/2017 2:30:00 PM -  S-I-0003893

//////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

&НаКлиенте
Процедура ЗаписатьПриНеобходимости(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось записать текущую поставку: " + ОписаниеОшибки(),
				,,, Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CCANotification(Команда)
	
	// { RGS AArsentev 27.06.2018 S-I-0005470
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураПараметров = ПолучитьСтруктуруУведомления();
		Если СтруктураПараметров <> Неопределено Тогда
			СтруктураПараметров.Вставить("CCANotification", Истина);
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения", СтруктураПараметров, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	// } RGS AArsentev 27.06.2018 S-I-0005470
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// { RGS AArsentev 27.06.2018 S-I-0005470
	Если ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения" Тогда
		
		СформироватьПочтовоеСообщение(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.Поставка.Форма.ФормаДляВыбораParcels_в_TR" Тогда
		
		МассивПарселейДляФормированияTR = ВыбранноеЗначение;
		Если МассивПарселейДляФормированияTR.МассивВыбранныхПарселей.Количество() > 0 Тогда
			
			НовыйTR = СоздатьНовыйTR(МассивПарселейДляФормированияTR.МассивВыбранныхПарселей);
			
			// { RG-Soft LGoncharova 19.11.2018 S-I-0006342
			Если НЕ значениеЗаполнено(НовыйTR) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Ошибка создания документа'; 
		    				   |en = 'Error creating document'"),,"Error");
				Возврат;
			КонецЕсли;
			// } RG-Soft LGoncharova 19.11.2018 S-I-0006342
			
			ОткрытьЗначение(НовыйTR);
			НастроитьTransportRequest();
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Parcels not selected!");
		КонецЕсли;
		
	КонецЕсли;
	// } RGS AArsentev 27.06.2018 S-I-0005470
	
КонецПроцедуры

// { RGS AArsentev 27.06.2018 S-I-0005470
&НаСервере
Процедура СформироватьПочтовоеСообщение(ВыбранноеЗначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоставкаПрисоединенныеФайлы.Ссылка,
	|	ПоставкаПрисоединенныеФайлы.Наименование,
	|	ПоставкаПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.ПоставкаПрисоединенныеФайлы КАК ПоставкаПрисоединенныеФайлы
	|ГДЕ
	|	ПоставкаПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ ПоставкаПрисоединенныеФайлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Ссылка,
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Наименование,
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы КАК КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ВладелецФайла В(&МассивDOC)
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ПометкаУдаления";
	
	
	мDOCs = Новый Массив;
	Для каждого Док Из Объект.УпаковочныеЛисты Цикл
		мDOCs.Добавить(Док.УпаковочныйЛист);
	КонецЦикла; 
	Запрос.УстановитьПараметр("МассивDOC", мDOCs);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		МассивДляОчистки = Новый Массив;
		
		ТаблицаВложений = Новый ТаблицаЗначений;
		ТаблицаВложений.Колонки.Добавить("Имя");
		ТаблицаВложений.Колонки.Добавить("ДвоичноеПредставление");
		ТаблицаВложений.Колонки.Добавить("Расширение");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяФайла = КаталогВременныхФайлов + ВыборкаДетальныеЗаписи.Наименование + "." + ВыборкаДетальныеЗаписи.Расширение;
			Попытка
				ПрисоединенныеФайлыСлужебный.ВыгрузитьФайл(ВыборкаДетальныеЗаписи.Ссылка, ИмяФайла);
			Исключение
			КонецПопытки;
			
			Вложения = ТаблицаВложений.Добавить();
			Вложения.Имя = ВыборкаДетальныеЗаписи.Наименование;
			Вложения.Расширение = ВыборкаДетальныеЗаписи.Расширение;
			Вложения.ДвоичноеПредставление = Новый ДвоичныеДанные(ИмяФайла);
			
			МассивДляОчистки.Добавить(ИмяФайла);
		КонецЦикла;
			
		Вложение = Новый ХранилищеЗначения(ТаблицаВложений);
		
		Для Каждого Файл ИЗ МассивДляОчистки Цикл
			Попытка
				УдалитьФайлы(Файл);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		Вложение = Неопределено;
	КонецЕсли;
	
	ДополнитьТелоПисьмаСсылкамиНаSH(ВыбранноеЗначение.Body);
	
	Адрес = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(ВыбранноеЗначение.Recipients, ";");
	Если НЕ ЗначениеЗаполнено(Вложение) Тогда
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, ВыбранноеЗначение.Subject, ВыбранноеЗначение.Body, ,ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),ВыбранноеЗначение.Copy);
	Иначе
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, ВыбранноеЗначение.Subject, ВыбранноеЗначение.Body, Вложение, ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),ВыбранноеЗначение.Copy);
	КонецЕсли; 
		
КонецПроцедуры // } RGS AArsentev 27.06.2018 S-I-0005470

// { RGS AArsentev 27.06.2018 S-I-0005470
&НаСервере
Функция ПолучитьСтруктуруУведомления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	rgsCCANotification.EMail,
	|	rgsCCANotification.Subject,
	|	rgsCCANotification.Body
	|ИЗ
	|	РегистрСведений.rgsCCANotification КАК rgsCCANotification
	|ГДЕ
	|	rgsCCANotification.CCA = &CCA
	|	И rgsCCANotification.MOT = &MOT
	|	И rgsCCANotification.Type = &Type";
	
	Запрос.УстановитьПараметр("CCA", Объект.CCA);
	Запрос.УстановитьПараметр("MOT", Объект.MOT);
	Запрос.УстановитьПараметр("Type", Перечисления.NotificationType.SH);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СтруктураВозврата = Новый Структура;
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.ЗагрузитьЗначения(СтрРазделить(ВыборкаДетальныеЗаписи.EMail,";"));
		СтруктураВозврата.Вставить("Recipients", 	СписокПолучателей);
		СтруктураВозврата.Вставить("ReplyTo", 		СокрЛП(ВыборкаДетальныеЗаписи.EMail));
		Если ЗначениеЗаполнено(Объект.Coordinator) Тогда 
			СтруктураВозврата.Вставить("Copy", 	СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Coordinator, "EMail")));
		КонецЕсли;
		
		// { RGS AFokin 08.08.2018 23:59:59 S-I-0005470
		//ТелоПисьмаНачало = "Please pick up the cargo from " + Объект.ActualPOA + Символы.ПС;
		//
		//СтруктураВозврата.Вставить("Subject", 		СокрЛП(ВыборкаДетальныеЗаписи.Subject) +  ", SH - " + СокрЛП(Объект.Номер) + ", AWB - " + СокрЛП(Объект.HouseWB));
		//СтруктураВозврата.Вставить("Body", 			ТелоПисьмаНачало + ВыборкаДетальныеЗаписи.Body);
		//СтруктураВозврата.Вставить("CCANotification", 			Истина);
		//СтруктураВозврата.Вставить("DOC", 			Объект.Ссылка);
		ОбозначениеВидаТранспорта = "";
		Если Объект.MOT = Справочники.MOTs.НайтиПоКоду("SEA") Тогда
			ОбозначениеВидаТранспорта = "BL";
		Иначе
			ОбозначениеВидаТранспорта = "AWB";
		КонецЕсли;	
		СтруктураВозврата.Вставить("Subject", СокрЛП(ВыборкаДетальныеЗаписи.Subject) + " " + Объект.ActualPOA + ", SH - " + СокрЛП(Объект.Номер) + ", " + ОбозначениеВидаТранспорта + " - " + СокрЛП(Объект.HouseWB));
		СтруктураВозврата.Вставить("Body", ВыборкаДетальныеЗаписи.Body);
		СтруктураВозврата.Вставить("CCANotification", Истина);
		СтруктураВозврата.Вставить("DOC", Объект.Ссылка);
		// } RGS AFokin 08.08.2018 23:59:59 S-I-0005470
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции // } RGS AArsentev 27.06.2018 S-I-0005470

// { RGS AArsentev 02.07.2018 S-I-0005470
&НаСервере
Процедура ДополнитьТелоПисьмаСсылкамиНаSH(Тело)
	
	СсылкаНаДок = ПолучитьПолнуюСсылкуНаОбъект(" SH no " + СокрЛП(Объект.Номер));
	
	СсылкаНаДокВнеш = СтрЗаменить(СсылкаНаДок,"<br>","") + " (для внешних пользователей)" + "<br>";
	СсылкаНаДокВнеш = СтрЗаменить(СсылкаНаДокВнеш,"http://ru0149app35.dir.slb.com/RIET/","https://riet.rca.slb.com/RIET/en_US/");
	текстДок = СсылкаНаДок + СсылкаНаДокВнеш;
	Тело = Тело + "
	|<br>
	|SH:
	|" + текстДок;
	
КонецПроцедуры // } RGS AArsentev 02.07.2018 S-I-0005470

// { RGS AArsentev 02.07.2018 S-I-0005470
&НаСервере
Функция ПолучитьПолнуюСсылкуНаОбъект(ОписаниеСсылки)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
	НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
	
	ПолнаяСсылка = РГСофтСерверПовтИспСеанс.ПолучитьАдресБазы() + НавигационнаяСсылка;
	
	HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ОписаниеСсылки + "</a>";
	Текст = "<br>
	|" + HTMLСсылка + "<br>";
	
	Возврат Текст;
	
КонецФункции // } RGS AArsentev 02.07.2018 S-I-0005470

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаСервере
Процедура ОбновитьОтображениеЭлементовФормы()
	
	Если Объект.PermitsRequired = Перечисления.YesNo.Yes Тогда
		Элементы.PermitsRequested.Видимость = Истина;
		Элементы.PermitsObtained.Видимость = Истина;
	Иначе
		Элементы.PermitsRequested.Видимость = Ложь;
		Элементы.PermitsObtained.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.PSA = Перечисления.YesNo.Yes Тогда
		Элементы.PSARequested.Видимость = Истина;
		Элементы.PSAReceived.Видимость = Истина;
	Иначе
		Элементы.PSARequested.Видимость = Ложь;
		Элементы.PSAReceived.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоRUProcessLevel = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM);
	
	Если ЭтоRUProcessLevel И Объект.COORequired = Перечисления.YesNo.Yes Тогда
		Элементы.COORequested.Видимость = Истина;
		Элементы.COOReceived.Видимость = Истина;
	Иначе
		Элементы.COORequested.Видимость = Ложь;
		Элементы.COOReceived.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ProcessLevel = Справочники.ProcessLevels.RUWE ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA Тогда
		Элементы.PendingSLB.Видимость = Ложь;
	Иначе
		Элементы.PendingSLB.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьВидимостьTessNo();
	
	// { RGS AFokin 08.08.2018 23:59:59 S-I-0005470
	// { RGS ASeryakov, 21.08.2018 16:51:00 S-I-0005882
	//Если Объект.ProcessLevel = Справочники.ProcessLevels.AZ ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.TM Тогда
		Если Объект.ProcessLevel = Справочники.ProcessLevels.AZ ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ
		ИЛИ  Объект.ProcessLevel = Справочники.ProcessLevels.TM ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.GE Тогда
	// } RGS ASeryakov 21.08.2018 16:51:02 S-I-0005882
		Объект.PSA = Перечисления.YesNo.Yes;
		Элементы.PSA.Видимость = Истина;
		Элементы.PSARequested.Видимость = Истина;
		Элементы.PSAReceived.Видимость = Истина;
	КонецЕсли;
	// } RGS AFokin 08.08.2018 23:59:59 S-I-0005470
	
КонецПроцедуры // } RGS AArsentev 03.07.2018 S-I-0005470

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаСервере
Процедура ОбновитьВидимостьTessNo()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НужнаПроверкаTessNo = Документы.Поставка.НужнаПроверкаTessNo(Объект.Ссылка, Объект.CCA);
		Элементы.TessNo.Видимость = НужнаПроверкаTessNo;
		// { RGS AFokin 07.08.2018 23:59:59 S-I-0005470
		Если Объект.MOT = Справочники.MOTs.COURIER Тогда
			Элементы.TessNo.Видимость = Ложь;
		КонецЕсли;
		// } RGS AFokin 07.08.2018 23:59:59 S-I-0005470
	Иначе
		Элементы.TessNo.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияTessNo.Видимость = Не Элементы.TessNo.Видимость;
	
	Если Объект.ProcessLevel = Справочники.ProcessLevels.KZ Тогда
		Элементы.ДекорацияWO.Видимость = Истина;
	Иначе
		Элементы.ДекорацияWO.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 03.07.2018 S-I-0005470

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаСервере
Процедура НастроитьTransportRequest()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	TransportRequest.Ссылка
		|ИЗ
		|	Документ.TransportRequest КАК TransportRequest
		|ГДЕ
		|	TransportRequest.SH = &SH
		|	И НЕ TransportRequest.ПометкаУдаления";
		Запрос.УстановитьПараметр("SH",Объект.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			TransportRequest = Выборка.Ссылка;
			Элементы.CreateTransportRequests.Видимость = Ложь;
		Иначе
			Элементы.CreateTransportRequests.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 03.07.2018 S-I-0005470

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаСервере
Функция CreateTransportRequestНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапросПарсели = Новый Запрос;
		ЗапросПарсели.Текст = "ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка В(&МассивDOC)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel";
		ЗапросПарсели.УстановитьПараметр("МассивDOC", Объект.УпаковочныеЛисты.Выгрузить().ВыгрузитьКолонку("УпаковочныйЛист"));
		Результат = ЗапросПарсели.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда
			
			Возврат Результат.ВыгрузитьКолонку("Parcel")
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет парселей для формирования Transport request");
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Need to save document");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 03.07.2018 S-I-0005470

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаКлиенте
Процедура CreateTransportRequest(Команда)
	
	МассивПарселей = CreateTransportRequestНаСервере();
	Если МассивПарселей <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивПарселей", МассивПарселей);
		
		ОткрытьФорму("Документ.Поставка.Форма.ФормаДляВыбораParcels_в_TR", СтруктураПараметров, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 03.07.2018 S-I-0005470

&НаСервере
Функция СоздатьНовыйTR(МассивПарселей)
	
	НачатьТранзакцию();
	
	TR = Документы.TransportRequest.СоздатьДокумент();
	TR.ОбменДанными.Загрузка = Истина;
	TR.Дата = ТекущаяДата();
	Prefix = "TR" + Формат(TR.Дата, "ДФ=yyMMdd");
	TR.УстановитьНовыйНомер(Prefix);
	TR.SH = Объект.Ссылка;
	
	// { RG-Soft LGoncharova 19.11.2018 S-I-0006342
	// TR.Записать();	
	
	CustomsСервер.ЗаполнитьCreationModification(TR);
	TR.Requestor = ПараметрыСеанса.ТекущийПользователь;
	//TR.Stage 	 = Перечисления.TransportRequestStages.Draft;
	
	Ошибка = Ложь;	
	Попытка
		TR.Записать();
	Исключение
		ош = ОписаниеОшибки();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'При создании документа произошла ошибка'; 
		    				   |en = 'An error occurred while creating the document'"),
			Объект.Ссылка, "TR");	
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	
	УстановитьПривилегированныйРежим(Истина);		
	МенеджерЗаписи = РегистрыСведений.StagesOfTransportRequests.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.TransportRequest = TR.Ссылка;
	МенеджерЗаписи.Stage 			= Перечисления.TransportRequestStages.Draft; 
	МенеджерЗаписи.ModificationDate = ТекущаяДата();
	Попытка
		МенеджерЗаписи.Записать(Истина);
	Исключение
		ош = ОписаниеОшибки();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка назначения Stage Draft'; 
		    				   |en = 'Stage assignment error'"),
			Объект.Ссылка, "TR");	
		
		ОтменитьТранзакцию();
		Возврат Неопределено;		
	КонецПопытки;
	// } RG-Soft LGoncharova 19.11.2018 S-I-0006342
	
	Для Каждого Парсель Из МассивПарселей Цикл;
		
		НовыйПарсель = Парсель.Скопировать();
		НовыйПарсель.TransportRequest = TR.Ссылка;
		НовыйПарсель.ExportRequest = Неопределено;
		НовыйПарсель.Код = Неопределено;
		
		Для Каждого Item Из НовыйПарсель.Детали Цикл
			
			НовыйItem = Item.СтрокаИнвойса.Скопировать();
			НовыйItem.ОбменДанными.Загрузка = Истина;
			НовыйItem.TransportRequest = TR.Ссылка;
			НовыйItem.ExportRequest = Неопределено;
			НовыйItem.ERPTreatmentNonLawson = Справочники.ERPTreatments.Expense;
			НовыйItem.Final = Истина;
			НовыйItem.Инвойс = Неопределено;
			Если Не ЗначениеЗаполнено(НовыйItem.DescriptionRus) Тогда
				НовыйItem.DescriptionRus = НовыйItem.НаименованиеТовара;
			КонецЕсли;
			
			// { RG-Soft LGoncharova 19.11.2018 S-I-0006342
			Попытка
				НовыйItem.Записать();
			Исключение
				ош = ОписаниеОшибки();
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'При создании нового Item произошла ошибка'; 
			    				   |en = 'An error occurred while creating new Item'"),
					Объект.Ссылка, "Item");	
				
				Ошибка = Истина;
				Прервать;				
			КонецПопытки;
			// } RG-Soft LGoncharova 19.11.2018 S-I-0006342
			
			Item.СтрокаИнвойса = НовыйItem.Ссылка;
			
		КонецЦикла;
		
		// { RG-Soft LGoncharova 19.11.2018 S-I-0006342
		//НовыйПарсель.Записать();
		
		Если Ошибка Тогда Прервать КонецЕсли;
		
		Попытка
			НовыйПарсель.Записать();
		Исключение
			ош = ОписаниеОшибки();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'При создании нового Парселя произошла ошибка';
								|en = 'An error occurred while creating new Parcel'"),
				Объект.Ссылка, "Parcel");	
			
			Ошибка = Истина;
			Прервать;
		КонецПопытки;
		// } RG-Soft LGoncharova 19.11.2018 S-I-0006342
		
	КонецЦикла;
	
	// { RG-Soft LGoncharova 19.11.2018 S-I-0006342
	//ЗафиксироватьТранзакцию();
	
	//Возврат TR.Ссылка;
	
	Если НЕ Ошибка Тогда
		ЗафиксироватьТранзакцию();
		Возврат TR.Ссылка;
	Иначе
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	// } RG-Soft LGoncharova 19.11.2018 S-I-0006342
	
КонецФункции

&НаСервере
Процедура ПроверитьCCD(Отказ)
	
	ЕстьCCD = Документы.Service.ПроверимНаНаличиеCCD(Объект.Ссылка);
	Если Не ЕстьCCD Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Can't create 'Service' because there are no 'Customs Files'");
		Отказ = Не ЕстьCCD;
	КонецЕсли;
	
КонецПроцедуры

// { RGS AFokin 13.09.2018 23:59:59 - S-I-0005710
Функция ПолучитьЗначениеOutOfComplianceReasons()
	
	Возврат Справочники.OutOfComplianceReasons.CustomsValueCorrection;
	
КонецФункции	

&НаКлиенте
Процедура OutOfComplianceReasonsInvoiceLinesНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	МассивDOCs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист");
	Если МассивDOCs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Список = Новый СписокЗначений;
	МассивСтруктур = ПолучитьДанныеItems(МассивDOCs);
	СтрокаРеквизитовItem = ПолучитьСтрокуРеквизитовItem();
	Для Каждого СтруктураItem Из МассивСтруктур Цикл
		Список.Добавить(СтруктураItem.Invoice);
	КонецЦикла;

	Элемент.СписокВыбора = Список;	
	
КонецПроцедуры

&НаКлиенте
Процедура OutOfComplianceReasonsInvoiceLinesНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивDOCs = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.УпаковочныеЛисты, "УпаковочныйЛист");
	Если МассивDOCs.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Список = Новый Массив;
	МассивСтруктур = ПолучениеКодовItems(МассивDOCs);
	
	Для Каждого СтруктураItem Из МассивСтруктур Цикл
		Список.Добавить(СтруктураItem.Код);
	КонецЦикла;
	П = Новый Структура("СписокДляОтбора", Список);
	//ОткрытьФорму("Справочник.СтрокиЗаявкиНаЗакупку.ФормаВыбора", П, Элемент);
	ОткрытьФорму("Справочник.СтрокиИнвойса.Форма.ФормаВыбора", П, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучениеКодовItems(МассивDOCs)
	
	МассивСтруктур = Новый Массив;
	Если МассивDOCs.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивDOCs", МассивDOCs);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DOCsInvoices.Инвойс КАК Invoice,
	|	DOCsInvoices.Инвойс.Номер КАК InvoiceNo,
	|	Items.Ссылка КАК Item,
	|	Items.Ссылка.Код КАК Код
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
	|		ПО DOCsInvoices.Инвойс = Items.Инвойс
	|			И (НЕ Items.ПометкаУдаления)
	|ГДЕ
	|	DOCsInvoices.Ссылка В(&МассивDOCs)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокаРеквизитовItem = "Invoice, InvoiceNo, Item, Код";
	Пока Выборка.Следующий() Цикл
		
		СтруктураItem = Новый Структура(СтрокаРеквизитовItem);
		ЗаполнитьЗначенияСвойств(СтруктураItem, Выборка, СтрокаРеквизитовItem);
		МассивСтруктур.Добавить(СтруктураItem);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции	

&НаКлиенте
Процедура OutOfComplianceReasonsNotAcceptedBySLBПриИзменении(Элемент)
	
	//Объект.OutOfComplianceReasons[0].NotAcceptedBySLB
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("NotAcceptedBySLB", Истина);
	НайденныеСтроки = Объект.OutOfComplianceReasons.НайтиСтроки(ПараметрПоиска);
	Если НайденныеСтроки.Количество() Тогда
		Элементы.OutOfComplianceReasonsConditionalRelease.Видимость = Истина;
	Иначе
		Элементы.OutOfComplianceReasonsConditionalRelease.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// } RGS AFokin 13.09.2018 23:59:59 - S-I-0005710

// { RGS EParshina 14.12.2018 15:23:48 - S-I-0006166
&НаКлиенте
Процедура Trips_LegВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		ОткрытьЗначение(Элемент.ТекущиеДанные.Trip);
	КонецЕсли;
КонецПроцедуры
// } RGS EParshina 14.12.2018 15:23:48 - S-I-0006166