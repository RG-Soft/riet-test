
Функция ПолучитьМассивСтрокИнвойсовПоставки(ImportShipment) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ImportShipment) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ImportShipment", ImportShipment);	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Items.Ссылка
		|ИЗ
		|	Документ.Поставка.УпаковочныеЛисты КАК ImportShipmentDOCs
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК Items
		|			ПО DOCsInvoices.Инвойс = Items.Инвойс
		|				И (НЕ Items.ПометкаУдаления)
		|		ПО ImportShipmentDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
		|ГДЕ
		|	ImportShipmentDOCs.Ссылка = &ImportShipment";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьInvoicesToTMSNo(ImportShipment) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ImportShipment) Тогда
		ВызватьИсключение "Import shipment is empty!";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ImportShipment", ImportShipment);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ImportInvoices.Номер
		|ИЗ
		|	Документ.Поставка.УпаковочныеЛисты КАК ImportShipmentDOCs
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Инвойс КАК ImportInvoices
		|			ПО DOCsInvoices.Инвойс = ImportInvoices.Ссылка
		|				И (ImportInvoices.TMS)
		|		ПО ImportShipmentDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
		|ГДЕ
		|	ImportShipmentDOCs.Ссылка = &ImportShipment";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	
КонецФункции

Функция ПолучитьКоличествоCustomsFiles(ImportShipment) Экспорт
	
	Если ImportShipment.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГТД.Ссылка), 0) КАК КоличествоГТД
		|ИЗ
		|	Документ.ГТД КАК ГТД
		|ГДЕ
		|	ГТД.Shipment = &Shipment
		|	И НЕ ГТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Shipment", ImportShipment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.КоличествоГТД;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//{ RGS AArsentev S-I-0003188 26.06.2017
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "APPLICATIONTOTHEFORWARDER") тогда
		
		ТабДокумент = ПечатьПорученийЭкспедитору(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "APPLICATIONTOTHEFORWARDER",
				"APPLICATION TO THE FORWARDER", ТабДокумент);
				
	КонецЕсли;
	//} RGS AArsentev S-I-0003188 26.06.2017
	
КонецПроцедуры

//{ RGS AArsentev S-I-0003188 26.06.2017
Функция ПечатьПорученийЭкспедитору(МассивОбъектов, ОбъектыПечати) 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ParcelsДетали.Ссылка.NumOfParcels КАК NumOfParcels,
	|	ParcelsДетали.Ссылка.GrossWeightKG КАК ParcelsGrossWeight,
	|	ParcelsДетали.Ссылка.CubicMeters КАК ParcelsCubicMeters,
	|	ParcelsДетали.Ссылка.PackingType КАК PackingType,
	|	ПоставкаУпаковочныеЛисты.Ссылка.FreightForwarder КАК InternationalFreightProvider,
	|	ПоставкаУпаковочныеЛисты.Ссылка.FreightForwarder.NameRus КАК InternationalForwarder,
	// { RGS AFokin 17.08.2018 23:59:59 S-I-0005871
	|	ПоставкаУпаковочныеЛисты.Ссылка.TessNo,
	// } RGS AFokin 17.08.2018 23:59:59 S-I-0005871
	|	ParcelsДетали.СтрокаИнвойса.СтранаПроисхождения КАК CountyOfOrigin,
	|	ParcelsДетали.Ссылка.LengthCM КАК LengthCM,
	|	ParcelsДетали.Ссылка.WidthCM КАК WidthCM,
	|	ParcelsДетали.Ссылка.HeightCM КАК HeightCM,
	|	ParcelsДетали.СтрокаИнвойса.Сумма КАК TotalPrice,
	|	ParcelsДетали.СтрокаИнвойса.МеждународныйКодТНВЭД КАК HTCCode,
	|	ПоставкаУпаковочныеЛисты.Ссылка.ATA КАК LocalATA,
	|	ПоставкаУпаковочныеЛисты.Ссылка.MOT.Код КАК LocalMOT,
	|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка.RequestedPOA.Наименование КАК POAName,
	|	ParcelsДетали.Ссылка КАК Parcel,
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист.Seller.Наименование КАК Consignor,
	|	ParcelsДетали.СтрокаИнвойса.SoldTo.Наименование КАК Client,
	|	ПоставкаУпаковочныеЛисты.Ссылка КАК Поставка,
	|	ПоставкаУпаковочныеЛисты.Ссылка.FreightForwarder КАК Forwarder,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант КАК Consignee,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.Наименование КАК ConsigneeName,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.Address1 КАК ConsigneeAddress1,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.Address2 КАК ConsigneeAddress2,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.Address3 КАК ConsigneeAddress3,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.Country КАК ConsigneeCountry,
	|	ParcelsДетали.СтрокаИнвойса.Инвойс.Декларант.CityLocation КАК ConsigneeCity
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsДетали
	|			ПО КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel = ParcelsДетали.Ссылка
	|		ПО ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка
	|ГДЕ
	|	НЕ ParcelsДетали.Ссылка.Отменен
	|	И ПоставкаУпаковочныеЛисты.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	СтрокаЗначений = ТЗ[0];
	
	Макет = ПолучитьОбщийМакет("APPLICATIONTOTHEFORWARDER");
	
	//ПроверкаПустыхНаименований(ТЗ);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "APPLICATIONTOTHEFORWARDER";
	
	Макет = ПолучитьОбщийМакет("APPLICATIONTOTHEFORWARDER");
	
	ЗначенияДляIntИLocal = "Consignor,Client";
	
	Consignee = СокрЛП(СтрокаЗначений.ConsigneeName) 
		+ ?(ПустаяСтрока(СтрокаЗначений.ConsigneeCountry), "", ", " + СокрЛП(СтрокаЗначений.ConsigneeCountry))
		+ ?(ПустаяСтрока(СтрокаЗначений.ConsigneeCity), "", ", " + СокрЛП(СтрокаЗначений.ConsigneeCity))
		+ ", " + СокрЛП(СтрокаЗначений.ConsigneeAddress1)
		+ ?(ПустаяСтрока(СтрокаЗначений.ConsigneeAddress2), "", ", " + СокрЛП(СтрокаЗначений.ConsigneeAddress2))
		+ ?(ПустаяСтрока(СтрокаЗначений.ConsigneeAddress3), "", ", " + СокрЛП(СтрокаЗначений.ConsigneeAddress3));
	
	CountyOfOrigin = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(
		РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗ, "CountyOfOrigin"));
		
	LocalATA = Формат(СтрокаЗначений.LocalATA, "ДФ = ""dd.MM.yyyy""");
	
	//HTCCodes = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(
	//	РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗ, "HTCCode"));
		
	ТЗParcels = ТЗ.Скопировать(, 
		"Parcel,PackingType,NumOfParcels,ParcelsGrossWeight,ParcelsCubicMeters,LengthCM,WidthCM,HeightCM");
	ТЗParcels.Свернуть("Parcel,PackingType,NumOfParcels,ParcelsGrossWeight,ParcelsCubicMeters,LengthCM,WidthCM,HeightCM");

	ParcelsGrossWeight = ТЗParcels.Итог("ParcelsGrossWeight");
	ParcelsCubicMeters = ТЗParcels.Итог("ParcelsCubicMeters");
	
	ItemsTotalPrice = ТЗ.Итог("TotalPrice");
	
	NumOfParcels_PackingType = "";
	ТЗPackingType = ТЗParcels.Скопировать(, "PackingType,NumOfParcels");
	ТЗPackingType.Свернуть("PackingType","NumOfParcels");
	Для Каждого Стр из ТЗPackingType Цикл 
		NumOfParcels_PackingType = NumOfParcels_PackingType + ?(NumOfParcels_PackingType = "", "", "; ")
			+ Стр.NumOfParcels + " " + СокрЛП(Стр.PackingType);	
	КонецЦикла;
	
	DimsPerParcel = "";
	ТЗDIMs = ТЗParcels.Скопировать(, "LengthCM,WidthCM,HeightCM,NumOfParcels");
	ТЗDIMs.Свернуть("LengthCM,WidthCM,HeightCM","NumOfParcels");
	Для Каждого Стр из ТЗDIMs Цикл 
		DimsPerParcel = DimsPerParcel + ?(DimsPerParcel = "", "", "; ") + Стр.NumOfParcels + " " 
		+ СокрЛП(Стр.LengthCM) + "x" + СокрЛП(Стр.WidthCM) + "x" + СокрЛП(Стр.HeightCM) + " CM";	
	КонецЦикла;
	
	// заполним DOMESTIC part
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтрокаЗначений, ЗначенияДляIntИLocal);
	
	ОбластьМакета.Параметры.Forwarder = СокрЛП(СтрокаЗначений.InternationalForwarder);
	ОбластьМакета.Параметры.CountyOfOrigin = CountyOfOrigin;
	ОбластьМакета.Параметры.TransporationType = СокрЛП(СтрокаЗначений.LocalMOT);
	ОбластьМакета.Параметры.Insurance = "Not Applicable";
	ОбластьМакета.Параметры.Consignee = Consignee;
	ОбластьМакета.Параметры.ParcelsGrossWeight = ParcelsGrossWeight;
	ОбластьМакета.Параметры.ParcelsCubicMeters = ParcelsCubicMeters;
	ОбластьМакета.Параметры.ItemsTotalPrice = ItemsTotalPrice;
	ОбластьМакета.Параметры.NumOfParcels_PackingType = NumOfParcels_PackingType;
	ОбластьМакета.Параметры.DimsPerParcel = DimsPerParcel;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаЗначений.Поставка);	
	
	Возврат ТабличныйДокумент;
	
КонецФункции //} RGS AArsentev S-I-0003188 26.06.2017

// { RGS AArsentev 03.07.2018 S-I-0005470
&НаСервере
Функция НужнаПроверкаTessNo(SH, CCA) Экспорт
	
	Если ЗначениеЗаполнено(CCA) И СокрЛП(CCA.Код) <> "DHL" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.УсловияПоставки КАК ИнвойсУсловияПоставки
		|ИЗ
		|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|		ПО ПоставкаУпаковочныеЛисты.УпаковочныйЛист = КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка
		|ГДЕ
		|	ПоставкаУпаковочныеЛисты.Ссылка = &Ссылка
		|	И (КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.УсловияПоставки.Код = ""EXW""
		|			ИЛИ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.УсловияПоставки.Код = ""FCA""
		|			ИЛИ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.УсловияПоставки.Код = ""FOB"")
		|
		|СГРУППИРОВАТЬ ПО
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс.УсловияПоставки";
		Запрос.УстановитьПараметр("Ссылка", SH);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 03.07.2018 S-I-0005470

