
////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ордер") 
		И ТипЗнч(Параметры.Ордер) = Тип("ДокументСсылка.SiebelOrders") Тогда 
		Объект.SiebelOrder = Параметры.Ордер;
		ЗаполнитьПоОрдеру(Объект.SiebelOrder);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Объект.Ответственный = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
		Объект.ИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойИнвойсинговыйЦентр");
		Объект.GeoMarket = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойГеомаркет");  		
	КонецЕсли; 
           	
	Реализация = SalesBook.ПолучитьДокументРеализацииПоТикету(Объект.Ссылка);
	Элементы.ГиперссылкаРеализация.Заголовок = SalesBook.ПолучитьТекстРеализации(Реализация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПривязкиКРеализациям.Отбор,
													"Номер",
													ПолучитьЗначениеОтбораПоLawsonInvoice(Объект.SiebelOrder),
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);	
													
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Реализация" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Ticket = Объект.Ссылка Тогда 
		Реализация = Параметр.Реализация;
		Элементы.ГиперссылкаРеализация.Заголовок = SalesBook.ПолучитьТекстРеализации(Реализация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура SiebelOrderПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПривязкиКРеализациям.Отбор,
													"Номер",
													ПолучитьЗначениеОтбораПоLawsonInvoice(Объект.SiebelOrder),
													ВидСравненияКомпоновкиДанных.Равно,
													,Истина,
													РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
													
	Если ЗначениеЗаполнено(Объект.SiebelOrder) Тогда
		Ответ = Вопрос("Заполнить Ticket по Siebel Order'у?", РежимДиалогаВопрос.ДаНет, 0);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			
			ЗаполнитьПоОрдеру(Объект.SiebelOrder);
			
			Если ЗначениеЗаполнено(Объект.Agreement) Тогда
				
				Клиент = ПолучитьКлиентаИзAgreement(Объект.Agreement);
				
				Если Не Клиент = Объект.Контрагент Тогда
					
					Ответ = Вопрос("Контрагент соглашения не соответствует ID контрагента: 
					| Контрагент определенный по ID: " + Объект.Контрагент+ "
					| Контрагент соглашения: " + Клиент + " 
					| Выбрать контрагента из соглашения?",
					РежимДиалогаВопрос.ДаНет);
					
					Если Ответ = КодВозвратаДиалога.Да Тогда
						Объект.Контрагент = Клиент;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
                    			
		КонецЕсли;
		
	КонецЕсли;
        	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеализацияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Реализация) Тогда
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", 
						Новый Структура("Ключ", Реализация), ЭтаФорма);
		
	иначе	 
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) или Модифицированность Тогда 
			Если Вопрос("Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
				Возврат;
			КонецЕсли;
			
			Если Не Записать(Новый Структура) Тогда 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Не удалось записать текущий документ, "
					+ ОписаниеОшибки());
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
		СтруктураЗначенийЗаполнения = ОткрытьФормуМодально("Документ.Tickets.Форма.ФормаНастройкиРеализации",
																Новый Структура("Ticket", Объект.Ссылка), ЭтаФорма);
																
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", 
										Новый Структура("ЗначенияЗаполнения", СтруктураЗначенийЗаполнения), ЭтаФорма);  				     				
										
	КонецЕсли;
	
КонецПроцедуры
         
&НаКлиенте
Процедура ТипНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТикетов.КредитНота"));
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыТикетов.Инвойс"));

	ЭлементСписка = ВыбратьИзСписка(СписокТипов, Элементы.Тип);

	Если ЭлементСписка <> Неопределено Тогда 
		Объект.Тип = ЭлементСписка.Значение;
		Модифицированность = Истина;
	КонецЕсли;
               			
КонецПроцедуры

&НаКлиенте
Процедура LawsonПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Сумма = Объект.Lawson.Итог("СуммаPM") + Объект.Lawson.Итог("СуммаRech") + Объект.Lawson.Итог("СуммаWS");
	
КонецПроцедуры

&НаКлиенте
Процедура TicketNumberПриИзменении(Элемент)
	
	Если SalesBook.НеУникальныйSIR(Объект.TicketNumber, Объект.Ссылка) Тогда
		Предупреждение("Номер тикета """ + Объект.TicketNumber + """ не уникален!");
	КонецЕсли;
	
КонецПроцедуры
             
&НаКлиенте
Процедура TicketNumberНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//Если Не ЗначениеЗаполнено(Объект.SiebelOrder) Тогда
	//	Сообщить("Сначала выберите Siebel Order!");
	//	СтандартнаяОбработка = Ложь;
	//Иначе
		//изменила Федотова Л., РГ-Софт, 04.02.15, вопрос SLI-0005169
		//Элементы.TicketNumber.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивTicketNumber(Объект.SiebelOrder));	
		МассивНомеров = ПолучитьМассивTicketNumber(Объект.SiebelOrder);	
		Элементы.TicketNumber.СписокВыбора.ЗагрузитьЗначения(МассивНомеров);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура AccountingUnitПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.AccountingUnit) Тогда
		Объект.ProductLine = ПолучитьProductLine(Объект.AccountingUnit);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Валюта = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(
							Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязкиКРеализациямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПривязкиКРеализациям.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Документ) Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	объект.Тип = Текст;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// КОМАНДЫ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВвестиOilfield(Команда)
	
	ПоУмолчанию = "";
	Если ЗначениеЗаполнено(Объект.SiebelOrder) Тогда
		ПоУмолчанию = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.SiebelOrder, "Oilfield");	
	КонецЕсли;
	
	Значение = "";
	Если ВвестиЗначение(Значение, "Enter the Russian oilfield name ("+ПоУмолчанию+"):") Тогда
		Объект.Oilfield = ПолучитьOilfield(Значение, ПоУмолчанию); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьOilfield(Значение, ПоУмолчанию)
	
	Если НЕ ПустаяСтрока(ПоУмолчанию) Тогда 
		Элем = Справочники.Oilfields.НайтиПоРеквизиту("НаименованиеENG", ПоУмолчанию);
	иначе
		Элем = Справочники.Oilfields.ПустаяСсылка();
	КонецЕсли;
	
	Если Элем.Пустая() Тогда
		Элем = Справочники.Oilfields.СоздатьЭлемент();
		Элем.Наименование = Значение;
		Элем.НаименованиеENG = ПоУмолчанию;
		Элем.Записать();
	КонецЕсли;
	
	Возврат Элем.Ссылка;
		
КонецФункции

&НаКлиенте
Процедура ВвестиWell(Команда)
	
	ПоУмолчанию = "";
	Если ЗначениеЗаполнено(Объект.SiebelOrder) Тогда
		ПоУмолчанию = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.SiebelOrder, "Well");	
	КонецЕсли;
	
	Значение = СтрЗаменить(ПоУмолчанию, "pad", "куст");
	Если ВвестиЗначение(Значение, "Enter the Russian well name ("+ПоУмолчанию+"):") Тогда
		Объект.Well = ПолучитьWell(Значение, ПоУмолчанию); 
	КонецЕсли;
         			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьWell(Значение, ПоУмолчанию)
	
	Если НЕ ПустаяСтрока(ПоУмолчанию) Тогда 
		Элем = Справочники.Wells.НайтиПоРеквизиту("НаименованиеENG", ПоУмолчанию);
	иначе
		Элем = Справочники.Wells.ПустаяСсылка();
	КонецЕсли;
	
	Элем = Справочники.Wells.НайтиПоРеквизиту("НаименованиеENG", ПоУмолчанию);
	Если Элем.Пустая() Тогда
		Элем = Справочники.Wells.СоздатьЭлемент();
		Элем.Наименование = Значение;
		Элем.НаименованиеENG = ПоУмолчанию;
		Элем.Записать();
	КонецЕсли;
		
	Возврат Элем.Ссылка;
		
КонецФункции

////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОтбораПоLawsonInvoice(SiebelOrder)

	LawsonInvoice = SiebelOrder.LawsonInvoice;
	Если ПустаяСтрока(LawsonInvoice) Тогда 
		Возврат Неопределено;
	КонецЕсли; 
		
	Возврат LawsonInvoice;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоОрдеру(Ордер) 
	              	
	Если Не ЗначениеЗаполнено(Ордер) Тогда
		Возврат;
	КонецЕсли;
		
	//-> RG-Soft VIvanov 2015/02/18
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	КостЦентры.Ссылка
	//|ИЗ
	//|	Справочник.КостЦентры КАК КостЦентры
	//|ГДЕ
	//|	КостЦентры.Сегмент = &Сегмент
	//|	И КостЦентры.ПодразделениеОрганизации = &ПодразделениеОрганизации");
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СегментыКостЦентровСрезПоследних.КостЦентр КАК Ссылка
	|ИЗ
	|	РегистрСведений.СегментыКостЦентров.СрезПоследних(&Дата, ) КАК СегментыКостЦентровСрезПоследних
	|ГДЕ
	|	СегментыКостЦентровСрезПоследних.КостЦентр.Сегмент = &Сегмент
	|	И СегментыКостЦентровСрезПоследних.КостЦентр.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	СегментыКостЦентровСрезПоследних.КостЦентр.Код УБЫВ");
	Запрос.УстановитьПараметр("Дата", Ордер.Дата);
	//<- RG-Soft VIvanov
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Ордер.Location));
	ИмяСегмента = ?(Найти(Ордер.Segment,"-")=0,Ордер.Segment,Лев(Ордер.Segment,Найти(Ордер.Segment,"-")-1));
	Запрос.УстановитьПараметр("Сегмент", Справочники.Сегменты.НайтиПоКоду(ИмяСегмента));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.AccountingUnit = Выборка.Ссылка;
	КонецЕсли;
	
	Таблица = Ордер.Details.Выгрузить();
	Таблица.Свернуть("AU");
	Если Таблица.Количество() > 1 Тогда
		Сообщить("В Sales order'е введены разные AU!");
	Иначе
		//-> RG-Soft VIvanov 2015/02/18
		//AU = Справочники.КостЦентры.НайтиПоНаименованию(Таблица[0].AU);
		AU = РГСофт.НайтиAU(Ордер.Дата, Таблица[0].AU);
		//<- RG-Soft VIvanov
	КонецЕсли;
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗаполнятьДатуТикетаПоSO") Тогда
		Объект.Дата = Ордер.Дата;
	Иначе
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Попытка
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		СтрокаОрдерCustomerID = СокрЛП(Ордер.CustomerID);
		Пока СтрДлина(СтрокаОрдерCustomerID) < 9 Цикл
			СтрокаОрдерCustomerID = СтрокаОрдерCustomerID + " ";
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.НаименованиеEnglish
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.КонтрагентLawson.Код = &Код
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Код", СтрокаОрдерCustomerID);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		//Изменила Федотова Л., РГ-Софт, 10.06.14, вопрос SLI-0004584
		//Если Выборка.Следующий() Тогда
		//	Объект.Контрагент = Выборка.Ссылка;
		//КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Объект.Контрагент = Выборка.Ссылка;
			Если Ордер.Client  = Выборка.НаименованиеEnglish Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
	Исключение
		Сообщить("Вы не имеете доступа к контрагенту " + Ордер.Client);
	КонецПопытки;
	
	Объект.Agreement = Справочники.Agreements.НайтиПоРеквизиту("SiebelName", Ордер.Agreement);
	Если ЗначениеЗаполнено(Объект.Agreement) Тогда
		Объект.ДоговорКонтрагента = Объект.Agreement.Владелец;
		Объект.Валюта = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ФормированиеНомераТикетаПоSIR") Тогда
		Объект.TicketNumber = Ордер.Name;
	Иначе
		Объект.TicketNumber = SalesBook.ПарсингНомераИнвойсаLawson(Ордер.LawsonInvoice);
	КонецЕсли;
	
	Объект.GeoMarket = Справочники.GeoMarkets.НайтиПоНаименованию(Ордер.GeoMarket);
	Если ЗначениеЗаполнено(Ордер.Oilfield) Тогда
		Объект.Oilfield = Справочники.Oilfields.НайтиПоРеквизиту("НаименованиеEng",Ордер.Oilfield);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ордер.Well) Тогда
		Объект.Well = Справочники.Wells.НайтиПоРеквизиту("НаименованиеEng",Ордер.Well);
	КонецЕсли;
	
	Объект.Сумма = Ордер.NetTotal;
	Lawson = Объект.Lawson.Выгрузить();
	Lawson.Очистить();
	Для Каждого СтрокаТЧ Из Ордер.Details Цикл
		СтрокаМен = Lawson.Добавить();
		СтрокаМен.Account = СтрокаТЧ.Account;
		Если Прав(СтрокаТЧ.Account,3) = "999" Тогда //Recharge
			СтрокаМен.СуммаRech = СтрокаТЧ.Сумма;
		ИначеЕсли Лев(СтрокаТЧ.Account,2) = "45" Или Лев(СтрокаТЧ.Account,2) = "46" Тогда //материалы
			СтрокаМен.СуммаPM = СтрокаТЧ.Сумма;
		Иначе     //услуги
			СтрокаМен.СуммаWS = СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	Lawson.Свернуть("Account", "СуммаPM, СуммаRech, СуммаWS");
	Если Lawson.Итог("СуммаPM") + Lawson.Итог("СуммаRech") + Lawson.Итог("СуммаWS") <> Объект.Сумма Тогда
		Сообщить("Не совпадают сумма документа и разбиение по менеджменту!");
	КонецЕсли;
	
	Объект.Lawson.Загрузить(Lawson);
	
	НомерПробела = СтрНайти(Ордер.ShipTo, " ");
	    	
	Если НЕ Объект.AccountingUnit.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.AccountingUnit.TaxRegistration) Тогда
			Сообщить("Не заполнена налоговая регистрация для кост-центра " + AU.Код + " в справочнике ""Accounting units"".");
		Иначе
			Объект.ПодразделениеОрганизации = Объект.AccountingUnit.TaxRegistration;
		КонецЕсли;  
	КонецЕсли;  
	
	Если СтрНайти(Ордер.ShipTo, "tandar") <> 0 Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли СтрНайти(Ордер.ShipTo, "mpt") <> 0 Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Попытка
		Объект.ProductLine = Объект.AccountingUnit.Сегмент.Родитель;
	Исключение
	КонецПопытки;
	
	Если СтрНайти(Ордер.Type, "redit") > 0 Тогда
		Объект.Тип = "Credit note";
		Объект.Сумма = -Объект.Сумма;
	ИначеЕсли СтрНайти(Ордер.Type, "order") > 0 Тогда
		Объект.Тип = "Invoice";
	ИначеЕсли ВРег(Лев(Ордер.LawsonInvoice, 1)) = "C" Тогда
		Объект.Тип = "Credit note";
		Объект.Сумма = -Объект.Сумма;
	Иначе
		Объект.Тип = "Invoice";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.TicketsStatuses.Lawson;
	КонецЕсли;
		     		
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьКлиентаИзAgreement(Agreement)

	Возврат Agreement.Владелец.Владелец;;

КонецФункции

&НаСервере
Функция ПолучитьМассивTicketNumber(SiebelOrder)
	
	МассивЗначений = Новый Массив;
	Если ЗначениеЗаполнено(SiebelOrder) Тогда
		Если ЗначениеЗаполнено(SiebelOrder.Name) Тогда
			МассивЗначений.Добавить(SiebelOrder.Name);
		КонецЕсли;
		МассивЗначений.Добавить(SalesBook.ПарсингНомераИнвойсаLawson(SiebelOrder.LawsonInvoice));
	КонецЕсли;
	МассивЗначений = ДополнитьМассивНомеров(МассивЗначений);
	
	Возврат МассивЗначений;
	
КонецФункции

&НаСервере
Функция ДополнитьМассивНомеров(СписокНомеров)
	
	//Добавила для "РА" Федотова Л., РГ-Софт, 24.12.14
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ПОДСТРОКА(Tickets.TicketNumber, 8, 3)) КАК ЧисловаяЧастьНомера
		|ИЗ
		|	Документ.Tickets КАК Tickets
		|ГДЕ
		|	НЕ Tickets.Ссылка = &Ссылка
		|	И ПОДСТРОКА(Tickets.TicketNumber, 1, 7) = ""PAS-IC-""";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЧисловаяЧастьНомера = Строка(?(ВыборкаДетальныеЗаписи.ЧисловаяЧастьНомера = Null,1,Число(ВыборкаДетальныеЗаписи.ЧисловаяЧастьНомера) + 1));
			Пока СтрДлина(ЧисловаяЧастьНомера) < 3 Цикл
			    ЧисловаяЧастьНомера = "0" + ЧисловаяЧастьНомера;
			КонецЦикла; 
			СписокНомеров.Добавить("PAS-IC-" + ЧисловаяЧастьНомера);
		Иначе
			СписокНомеров.Добавить("PAS-IC-001");
		КонецЕсли;
	КонецЕсли;	
	Возврат СписокНомеров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьProductLine(AccountingUnit)

	Возврат AccountingUnit.Сегмент.Родитель;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 TicketNumberНачалоВыбораИзСписка(,);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	 TicketNumberНачалоВыбораИзСписка(,);
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/25
&НаКлиенте
Процедура AccountingUnitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.AccountingUnit);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура AccountingUnitАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура AccountingUnitОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры
//<-

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере(Объект.Контрагент, Объект.Дата);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(Контрагент, Дата)
	ДатаЗапретаИспользования = Контрагент.ДатаЗапретаИспользования;
	Если НЕ ДатаЗапретаИспользования = Дата(1,1,1) И ДатаЗапретаИспользования <= Дата Тогда
		Сообщить("Запрещено использование контрагента " + Контрагент + " с " + Формат(ДатаЗапретаИспользования, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 	
КонецПроцедуры
