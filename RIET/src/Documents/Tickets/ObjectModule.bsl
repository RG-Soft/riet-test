
#Если Клиент Тогда
Процедура ЗаполнитьПоОрдеру(Ордер) Экспорт 
	
	Если ЗначениеЗаполнено(Ордер) Тогда
		
		//-> RG-Soft VIvanov 2015/02/18
		//Запрос = Новый Запрос("ВЫБРАТЬ
		//                      |	КостЦентры.Ссылка
		//                      |ИЗ
		//                      |	Справочник.КостЦентры КАК КостЦентры
		//                      |ГДЕ
		//                      |	КостЦентры.Сегмент = &Сегмент
		//                      |	И КостЦентры.ПодразделениеОрганизации = &ПодразделениеОрганизации");
		
		//Добавила проверку СокрЛП(Ордер.AU) = "" и содержимое Иначе Федотова Л., РГ-Софт, 21.10.15, вопрос SLI-0005889 ->
		Если СокрЛП(Ордер.AU) = "" Тогда
		
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СегментыКостЦентровСрезПоследних.КостЦентр КАК Ссылка
			|ИЗ
			|	РегистрСведений.СегментыКостЦентров.СрезПоследних(&Дата, ) КАК СегментыКостЦентровСрезПоследних
			|ГДЕ
			|	СегментыКостЦентровСрезПоследних.КостЦентр.Сегмент = &Сегмент
			|			И СегментыКостЦентровСрезПоследних.КостЦентр.ПодразделениеОрганизации = &ПодразделениеОрганизации");
			
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СегментыКостЦентровСрезПоследних.КостЦентр КАК Ссылка
			|ИЗ
			|	РегистрСведений.СегментыКостЦентров.СрезПоследних(&Дата, ) КАК СегментыКостЦентровСрезПоследних
			|ГДЕ
			|	СегментыКостЦентровСрезПоследних.КостЦентр.Сегмент = &Сегмент
			|			И СегментыКостЦентровСрезПоследних.КостЦентр.ПодразделениеОрганизации = &ПодразделениеОрганизации
			|			И СегментыКостЦентровСрезПоследних.КостЦентр = &AU");
			Запрос.УстановитьПараметр("AU", Справочники.КостЦентры.НайтиПоКоду(Ордер.AU));
		КонецЕсли; 
		//<-
		Запрос.УстановитьПараметр("Дата", Ордер.Дата);
		//<- RG-Soft VIvanov 2015/02/18
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Ордер.Location));
		ИмяСегмента = ?(Найти(Ордер.Segment,"-")=0,Ордер.Segment,Лев(Ордер.Segment,Найти(Ордер.Segment,"-")-1));
		Запрос.УстановитьПараметр("Сегмент", Справочники.Сегменты.НайтиПоКоду(ИмяСегмента));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			AccountingUnit = Выборка.Ссылка;
		КонецЕсли;
		Таблица = Ордер.Details.Выгрузить();
		Таблица.Свернуть("AU");
		Если Таблица.Количество() > 1 Тогда
			 Предупреждение("В Sales order'е введены разные AU!");
		 Иначе
			//-> RG-Soft VIvanov 2015/02/18
			//AU = Справочники.КостЦентры.НайтиПоНаименованию(Таблица[0].AU);
			AU = РГСофт.НайтиAU(Ордер.Дата, Таблица[0].AU);
			//<- Rg-Soft VIvanov
		КонецЕсли;
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗаполнятьДатуТикетаПоSO") Тогда
			Дата = Ордер.Дата;
		Иначе
			Дата = ТекущаяДата();
		КонецЕсли;
		
		Попытка
			//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("LawsonID", Ордер.CustomerID);
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			СтрокаОрдерCustomerID = СокрЛП(Ордер.CustomerID);
			Пока СтрДлина(СтрокаОрдерCustomerID) < 9 Цикл
				СтрокаОрдерCustomerID = СтрокаОрдерCustomerID + " ";
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Ссылка
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.КонтрагентLawson.Код = &Код
			               |	И (НЕ Контрагенты.ПометкаУдаления)";
			
			Запрос.УстановитьПараметр("Код", СтрокаОрдерCustomerID);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
			
		Исключение
			Сообщить("Вы не имеете доступа к контрагенту " + Ордер.Client);
		КонецПопытки;
		
		Agreement = Справочники.Agreements.НайтиПоРеквизиту("SiebelName", Ордер.Agreement);
		Если ЗначениеЗаполнено(Agreement) Тогда
			ДоговорКонтрагента = Agreement.Владелец;
			//добавила Федотова Л, РГ-Софт, 31.07.09 ->
			Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			//<-
			Клиент = Agreement.Владелец.Владелец;
			Если Не Клиент = Контрагент Тогда
				Ответ = Вопрос("Контрагент соглашения не соответствует ID контрагента: 
				| Контрагент определенный по ID: " + Контрагент+ "
				| Контрагент соглашения: " + Клиент + " 
				| Выбрать контрагента из соглашения?",
				РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Контрагент = Клиент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ФормированиеНомераТикетаПоSIR") Тогда
			TicketNumber = Ордер.Name;
		Иначе
			TicketNumber = SalesBook.ПарсингНомераИнвойсаLawson(Ордер.LawsonInvoice);
		КонецЕсли;
				
		GeoMarket = Справочники.GeoMarkets.НайтиПоНаименованию(Ордер.GeoMarket);
		Если ЗначениеЗаполнено(Ордер.Oilfield) Тогда
			Oilfield = Справочники.Oilfields.НайтиПоРеквизиту("НаименованиеEng",Ордер.Oilfield);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ордер.Well) Тогда
			Well = Справочники.Wells.НайтиПоРеквизиту("НаименованиеEng",Ордер.Well);
		КонецЕсли;
	
		Сумма = Ордер.NetTotal;
		Lawson.Очистить();
		Для Каждого СтрокаТЧ Из Ордер.Details Цикл
			СтрокаМен = Lawson.Добавить();
			СтрокаМен.Account = СтрокаТЧ.Account;
			Если Прав(СтрокаТЧ.Account,3) = "999" Тогда //Recharge
				СтрокаМен.СуммаRech = СтрокаТЧ.Сумма;
			ИначеЕсли Лев(СтрокаТЧ.Account,2) = "45" Или Лев(СтрокаТЧ.Account,2) = "46" Тогда //материалы
				СтрокаМен.СуммаPM = СтрокаТЧ.Сумма;
			Иначе     //услуги
				СтрокаМен.СуммаWS = СтрокаТЧ.Сумма;
			КонецЕсли;
		КонецЦикла;
		Lawson.Свернуть("Account", "СуммаPM, СуммаRech, СуммаWS");
		Если Lawson.Итог("СуммаPM") + Lawson.Итог("СуммаRech") + Lawson.Итог("СуммаWS") <> Сумма Тогда
			Сообщить("Не совпадают сумма документа и разбиение по менеджменту!");
		КонецЕсли;
		
		НомерПробела = СтрНайти(Ордер.ShipTo, " ");
		
		//НаименованиеЛокации = Лев(Ордер.ShipTo, Мин(4,НомерПробела));
		//ЛокацияФискальная = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(НаименованиеЛокации);
		//Если Не ЛокацияФискальная.Пустая() Тогда
		//	ПодразделениеОрганизации = ЛокацияФискальная.Родитель;
		//КонецЕсли;
		Если НЕ AccountingUnit.Пустая() Тогда
		    Если НЕ ЗначениеЗаполнено(AccountingUnit.TaxRegistration) Тогда
			    Сообщить("Не заполнена налоговая регистрация для кост-центра " + AU.Код + " в справочнике ""Accounting units"".");
			Иначе
				ПодразделениеОрганизации = AccountingUnit.TaxRegistration;
			КонецЕсли;  
		КонецЕсли;  
		
		Если СтрНайти(Ордер.ShipTo, "tandar") <> 0 Тогда
			// { RGS LFedotova 29.12.2018 16:08:07 - вопрос SLI-0007797
			Если Дата >= '20190101' Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Иначе
			// } RGS LFedotova 29.12.2018 16:08:23 - вопрос SLI-0007797 
				
				СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			
			// { RGS LFedotova 29.12.2018 16:08:07 - вопрос SLI-0007797
			КонецЕсли; 
			// } RGS LFedotova 29.12.2018 16:08:23 - вопрос SLI-0007797 
		ИначеЕсли СтрНайти(Ордер.ShipTo, "mpt") <> 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Попытка
			ProductLine = AccountingUnit.Сегмент.Родитель;
		Исключение
		КонецПопытки;
		
		Если СтрНайти(Ордер.Type, "redit") > 0 Тогда
			Тип = "Credit note";
			Сумма = -Сумма;
		ИначеЕсли СтрНайти(Ордер.Type, "order") > 0 Тогда
			Тип = "Invoice";
		ИначеЕсли ВРег(Лев(Ордер.LawsonInvoice, 1)) = "C" Тогда
			Тип = "Credit note";
			Сумма = -Сумма;
		Иначе
			Тип = "Invoice";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Статус) Тогда
			Статус = Перечисления.TicketsStatuses.Lawson;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецЕсли

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры
                   
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан статус тикета!", Отказ);	
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(SiebelOrder) Тогда	
		Если СокрЛП(SiebelOrder.CustomerID) <> СокрЛП(Контрагент.КонтрагентLawson.Код) Тогда			
			ОбщегоНазначения.СообщитьОбОшибке("Выбран контрагент с неправильным Lawson ID (должен быть ID " + SiebelOrder.CustomerID + ")", Отказ);
			Возврат;
		КонецЕсли; 	
	Иначе
		Если Статус = Перечисления.TicketsStatuses.InterCompany Тогда
			//Если СтрНайти(Контрагент.LawsonID,"OC") = 0 Тогда
			//Если Лев(СокрЛП(Контрагент.КонтрагентLawson.Код),2) = "OC" Тогда
			//Исправила Федотова Л., РГ-Софт, 26.01.10
			Если НЕ Лев(СокрЛП(Контрагент.КонтрагентLawson.Код),2) = "OC" 
				И НЕ Лев(СокрЛП(Контрагент.КонтрагентLawson.Код),2) = "OС" Тогда   //добавила Федотова Л., РГ-Софт, 11.06.15, вопрос SLI-0005486
				ОбщегоНазначения.СообщитьОбОшибке("Выбран контрагент с неправильным Lawson ID (должен быть ID, начинающийся на 'OC')", Отказ);
				Возврат;
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
	
	// { RGS LFedotova 14.09.2017 17:12:25 - вопрос SLI-0007356
	Если НЕ ЗначениеЗаполнено(ДатаПроведения) Тогда
		ДатаПроведения = Дата;	
	КонецЕсли; 
	// } RGS LFedotova 14.09.2017 17:12:59 - вопрос SLI-0007356

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движение = Движения.Тикеты.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Сумма = Сумма;
	Движение.Тикет = Ссылка;
	Движения.Тикеты.Записать();
	
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/25
Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования <> Неопределено Тогда
		Если ЗначениеЗаполнено(ОбъектКопирования.AccountingUnit) Тогда
			AccountingUnit = РГСофт.НайтиAU(ТекущаяДата(), ОбъектКопирования.AccountingUnit.Код);
		КонецЕсли;
	КонецЕсли;
	
	// { RGS LFedotova 16.11.2017 11:56:14 - вопрос S-B-0000189
	Попытка 
		НаименованиеИЦ = ОбъектКопирования.ИнвойсинговыйЦентр.Наименование; //если вместо инвойсингового центра битая ссылка или пустое значение, то наименование прочитать не сможем
	Исключение
		ЭтотОбъект.Ответственный =  Пользователи.ТекущийПользователь();
		ЭтотОбъект.ИнвойсинговыйЦентр = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойИнвойсинговыйЦентр");
	КонецПопытки;
	// } RGS LFedotova 16.11.2017 11:56:35 - вопрос S-B-0000189
	
КонецПроцедуры
//<-

