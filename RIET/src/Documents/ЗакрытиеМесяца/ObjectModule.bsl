Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мУчетнаяПолитикаБУ;
Перем мУчетнаяПолитикаНУ;

Перем мОперация;
Перем мПроводкиБУ;
Перем мПроводкиНУ;

Перем мКУДиР;
Перем мКУДиР_ОС;
Перем мКУДиР_НМА;
Перем мПоддержкаПБУ18;

Перем мСтавкаНалогаНаПрибыль;

Перем ПроводкаНУ;

Перем ПорядокПодразделенийСообщался;
Перем ПорядокПеределовСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем ПорядокПеределов;

Перем КоэффициентЕНВД;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации основных средств
//
Процедура НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Начисление амортизации ОС в бухгалтерском учете.
	Если СтруктураШапкиДокумента.АмортизацияОСБУ Тогда
		
		//Изменил Трефиленков Дмитрий, РГ-Софт
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, СтруктураШапкиДокумента.Организация,Неопределено, Истина);
		//КонецИзменения

		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "ОС");
		
		мПроводкиБУ.Записать(Ложь);
		
	КонецЕсли;

	// Начисление амортизации ОС в налоговом учете (по налогу на прибыль).
	Если СтруктураШапкиДокумента.АмортизацияОСНУ тогда

		//Изменил Трефиленков Дмитрий, РГ-Софт
		ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация, Неопределено, Истина);
		//КонецИзменения
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";		
		
		// Включение капитальных вложений в состав расходов.
		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
		ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
		ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
		
		// Формирование проводок по возникающим временным разницам.
		Если мПоддержкаПБУ18 Тогда
			ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
			Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
				СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
			КонецЦикла;
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
		КонецЕсли;
		
		// Начисление амортизации.
		ТабАмортизации.Колонки.Налог.Имя = "Сумма";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
		
		// Расчет разниц по амортизации.
		Если мПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", "",  мПроводкиНУ);
		КонецЕсли;

		// Списание сумм капитальных вложений, включенных в состав расходов.
		Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
			
			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
		
				Проводка = мПроводкиНУ.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
				Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
				
				Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТабКапитальныхВложений.Подразделение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		мПроводкиНУ.Записать(Ложь);
		
	КонецЕсли;

КонецПроцедуры // НачислениеАмортизацииОС()

// Выполняет начисление износа основных средств
//
Процедура НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИзносОСБУ Тогда
		
		ТабИзноса  = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Дата, СтруктураШапкиДокумента.Организация);

		Проводки = Движения.Хозрасчетный;

		Для Каждого СтрокаИзноса Из ТабИзноса Цикл

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаИзноса.Износ) тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Проводки.Добавить();

			Проводка.Период       = Дата;
			Проводка.Содержание   = "Начислен износ";
			Проводка.НомерЖурнала = "ОС";
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаИзноса.Износ;

			Проводка.СчетДт = СтрокаИзноса.СчетНачисленияИзноса;
			ОбщегоНазначения.УстановитьСубконто(СтрокаИзноса.СчетНачисленияИзноса, Проводка.СубконтоДт, 1, СтрокаИзноса.ОсновноеСредство);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		КонецЦикла;
		
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // НачислениеИзносаОС()

// Выполняет начисление амортизации НМА и списание расходов по НИОКР
//
Процедура НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок)

	//Если СтруктураШапкиДокумента.АмортизацияНМАБУ Тогда
	//	ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_БухРегл(Дата,СтруктураШапкиДокумента.Организация);

	//	ТабАмортизации.Колонки.Бух.Имя = "Сумма";
	//	ТабАмортизации.Колонки.НМА.Имя  = "ОбъектУчета";
	//	ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","НА");	
	//	
	//	мПроводкиБУ.Записать(Ложь);
	//КонецЕсли;

	//Если СтруктураШапкиДокумента.АмортизацияНМАНУ тогда

	//	ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРегл(ЭтотОбъект,Дата,СтруктураШапкиДокумента.Организация);

	//	ТабАмортизации.Колонки.Налог.Имя = "Сумма";
	//	ТабАмортизации.Колонки.НМА.Имя = "ОбъектУчета";
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","НА");

	//	Если мПоддержкаПБУ18 Тогда
	//		НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "НМА", "", мПроводкиНУ);
	//	КонецЕсли;
	//	мПроводкиНУ.Записать(Ложь);
	//КонецЕсли;

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПереоценкаВалютныхСредствБУ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ПереоценкаВалютныхСредствНУ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетПереоценки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	|		ПО СчетаСОсобымПорядкомПереоценкиБУ.Счет = Хозрасчетный.Ссылка
	|
	|ГДЕ
	|	(Хозрасчетный.Валютный = ИСТИНА) И
	|	((СчетаСОсобымПорядкомПереоценкиБУ.Счет) ЕСТЬ NULL )";
	Выборка   = Запрос.Выполнить().Выбрать();

	ПроводкиНУ = Неопределено;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		ПроводкиНУ = мПроводкиНУ;
		
	Иначе
		ПроводкиНУ = Неопределено;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		
        СчетДляПереоценки = новый структура("Счет",Выборка.СчетПереоценки);
		БухгалтерскийУчет.ПереоценкаСчетаРегл(СтруктураШапкиДокумента, мПроводкиБУ, ПроводкиНУ, СчетДляПереоценки, , Ложь, Истина);

		СуммаПереоценкиРегл = 0;
		СчетДляПереоценки.Свойство("СуммаПереоценкиРегл", СуммаПереоценкиРегл);
		
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		мПроводкиНУ.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
		
	Если СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатурыБУ Тогда
		СтруктураДопПараметров.Вставить("Учет", "Бух");
		СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.НУ);
		СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураДопПараметров.Вставить("Период", Дата);
		СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
		
		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
		
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.КорректировкаСтоимостиНоменклатурыНУ Тогда
		СтруктураДопПараметров.Вставить("Учет", "Нал");
		СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.НУ);
		СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураДопПараметров.Вставить("Период", Дата);
		СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаВЭксплуатации);
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
		
		КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
		
		Если мПоддержкаПБУ18 Тогда
			СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ПР);
			КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
			
			СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ВР);
			КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
		КонецЕсли;
	
		мПроводкиНУ.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Функция РазностьДатВДнях(Дата1, Дата2)

	мДлинаСуток = 86400; // в секундах

	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);

КонецФункции

Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Сумма, Остаток)

	Если Сумма = 0 Тогда
		Возврат 0;
	КонецЕсли;

	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;

	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;

	КонецЕсли;

	Если ДатаНачалаСписания < НачалоМесяца(ДатаОкончанияСписания) Тогда

		Если ДатаНачалаСписания > НачалоМесяца(ДатаНачалаСписания) Тогда
			ДатаНачалаПолногоМесяцаСписания = НачалоМесяца(ДобавитьМесяц(ДатаНачалаСписания, 1));
		Иначе
			ДатаНачалаПолногоМесяцаСписания = ДатаНачалаСписания;
		КонецЕсли;

		Если ДатаОкончанияСписания < КонецМесяца(ДатаОкончанияСписания) Тогда
			ДатаОкончанияПолногоМесяцаСписания = КонецМесяца(ДобавитьМесяц(ДатаОкончанияСписания, -1));
		Иначе
			ДатаОкончанияПолногоМесяцаСписания = ДатаОкончанияСписания;
		КонецЕсли;

		Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Возврат 0;
			
		ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Сумма / КоличествоДней;
		Если НачалоМесяца(ДатаНачалаСписания) = НачалоМесяца(Дата) Тогда 
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		ИначеЕсли КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(Дата) Тогда 
			КоличествоДнейПервогоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписанияЗаПрошедшиеМесяца = Окр(КоличествоДнейПервогоМесяца * ЦенаДня, 2); 
			ДатаТекущая = КонецМесяца(ДобавитьМесяц(ДатаНачалаСписания, 1));
			Пока Месяц(ДатаОкончанияСписания) > Месяц(ДатаТекущая) Цикл 
				СуммаСписанияЗаПрошедшиеМесяца = СуммаСписанияЗаПрошедшиеМесяца + Окр((День(ДатаТекущая)) * ЦенаДня, 2);
			    ДатаТекущая = КонецМесяца(ДобавитьМесяц(ДатаТекущая, 1));    
			КонецЦикла;
			СуммаСписания = Сумма - СуммаСписанияЗаПрошедшиеМесяца;
		Иначе
			КоличествоДнейТекущегоМесяца = День(КонецМесяца(Дата));
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
	Иначе 
			Если ДатаОкончанияПолногоМесяцаСписания >= ДатаНачалаПолногоМесяцаСписания Тогда
			КоличествоПолныхМесяцев = (Год(ДатаОкончанияПолногоМесяцаСписания) - Год(ДатаНачалаПолногоМесяцаСписания)) * 12 
			                        + Месяц(ДатаОкончанияПолногоМесяцаСписания) - Месяц(ДатаНачалаПолногоМесяцаСписания) + 1;
		Иначе
			КоличествоПолныхМесяцев = 0;
		КонецЕсли;

		ПериодСписанияВ_Днях          = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания)+ 1;
		СуммаСписанияПервогоМесяца    = Окр(Сумма * РазностьДатВДнях(ДатаНачалаПолногоМесяцаСписания, ДатаНачалаСписания) / ПериодСписанияВ_Днях, 2);
		СуммаСписанияПоследнегоМесяца = Окр(Сумма * РазностьДатВДнях(ДатаОкончанияСписания, ДатаОкончанияПолногоМесяцаСписания) / ПериодСписанияВ_Днях, 2);

		Если КоличествоПолныхМесяцев > 0 Тогда
			СуммаСписанияПолногоМесяца = Окр((Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПоследнегоМесяца) / КоличествоПолныхМесяцев, 2);
		Иначе
			СуммаСписанияПолногоМесяца = 0;
		КонецЕсли;

		СуммаСписанияПоследнегоМесяца = Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПолногоМесяца * КоличествоПолныхМесяцев;

		Если ДатаНачалаПолногоМесяцаСписания > мКонДата Тогда
			СуммаСписания = СуммаСписанияПервогоМесяца;
			
		ИначеЕсли мКонДата = КонецМесяца(ДатаОкончанияСписания) Тогда
			СуммаСписания = Остаток;
			
		Иначе
			СуммаСписания = СуммаСписанияПолногоМесяца;
		КонецЕсли;

	КонецЕсли;
	
	Иначе
		СуммаСписания = Сумма;
	КонецЕсли;

	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;

КонецФункции // СуммаСписанияЗаМесяц()

Процедура СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, Выборка, СписатьНУ, ВидУчета, ИсточникДанных = "НУ")
	
	Если СписатьНУ > 0.05 Или СписатьНУ < -0.05 Тогда
		
		Если (ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Или ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР)
	       И Не ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		   Возврат;
	   КонецЕсли;
	   
	ПроводкаНУ = мПроводкиНУ.Добавить();

	СписокСубконтоРБП = Новый Массив;
	СписокСубконтоРБП.Добавить(Выборка.Субконто1);
	СписокСубконтоРБП.Добавить(Выборка.Субконто2);
	СписокСубконтоРБП.Добавить(Выборка.Субконто3);
	
	
		
	ПроводкаНУ.Период       = Дата;
	ПроводкаНУ.Активность   = Истина;
	ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	
	Если ИсточникДанных = "НУ" Тогда
		ВидыСубконтоНУ = Выборка.СчетНУ.ВидыСубконто;
		ВидыСубконтоРБП = Выборка.Счет.ВидыСубконто;
		ПроводкаНУ.СчетДт       = Выборка.СчетНУ;
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Выборка.СубконтоНУ1);
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Выборка.СубконтоНУ2);
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Выборка.СубконтоНУ3);
	    ПроводкаНУ.СчетКт       = Выборка.Счет;
	Иначе
		ВидыСубконтоНУ = Выборка.СчетБУ.ВидыСубконто;
		СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",Выборка.СчетБУ), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			ТекстСообщения = "Для РБП " + Выборка.Субконто1 + "не найдено соответствие для счета БУ " +  Выборка.СчетБУ + ", разницы между БУ и НУ не рассчитаны";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			Возврат;
		КонецЕсли;
		ПроводкаНУ.СчетДт       = СчетНУСоответствующийСчетуБУ;
		СчетСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Выборка.СчетРБП), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетСоответствующийСчетуБУ) Тогда
			ТекстСообщения = "Для РБП " + Выборка.Субконто1 + "не найдено соответствие для счета БУ " +  ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов + ", разницы между БУ и НУ не рассчитаны";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			Возврат;
		КонецЕсли;
		ВидыСубконтоРБП = СчетСоответствующийСчетуБУ.ВидыСубконто;
	    ПроводкаНУ.СчетКт       = СчетСоответствующийСчетуБУ;
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Выборка.СубконтоБУ1);
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Выборка.СубконтоБУ2);
		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Выборка.СубконтоБУ3);
	КонецЕсли;

	НомерСубконто = 0;

	Для Каждого ВидСубконто Из ВидыСубконтоРБП Цикл
		ПроводкаНУ.СубконтоКт[ВидСубконто.ВидСубконто] = СписокСубконтоРБП[НомерСубконто];
		НомерСубконто = НомерСубконто + 1;
	КонецЦикла;

	ПроводкаНУ.Сумма        = СписатьНУ;
	ПроводкаНУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
	ПроводкаНУ.НомерЖурнала = "НУ";
	ПроводкаНУ.ВидУчетаКТ     = ВидУчета;
	
		Если ТипЗнч(Выборка.СубконтоБУ1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ПроводкаНУ.ВидУчетаДТ = ?(Выборка.СубконтоБУ1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		ИначеЕсли ТипЗнч(Выборка.СубконтоБУ2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ПроводкаНУ.ВидУчетаДТ = ?(Выборка.СубконтоБУ2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		ИначеЕсли ТипЗнч(Выборка.СубконтоБУ3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ПроводкаНУ.ВидУчетаДТ = ?(Выборка.СубконтоБУ3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		ИначеЕсли ТипЗнч(Выборка.СубконтоБУ1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ПроводкаНУ.ВидУчетаДТ  = ?(НЕ Выборка.СубконтоБУ1.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		ИначеЕсли ТипЗнч(Выборка.СубконтоБУ2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ПроводкаНУ.ВидУчетаДТ  = ?(НЕ Выборка.СубконтоБУ2.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		ИначеЕсли ТипЗнч(Выборка.СубконтоБУ3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ПроводкаНУ.ВидУчетаДТ  = ?(НЕ Выборка.СубконтоБУ3.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ПР, ВидУчета);
		Иначе
           	ПроводкаНУ.ВидУчетаДТ     = ВидУчета;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

Процедура СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("СчетБУРБП",   ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СчетБУнеРБП", ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",    Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",    Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР",    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("СчетНУРБП",   ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.РасходыНаОплатуТрудаБудущихПериодов);
	Массив.Добавить(ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	Массив.Добавить(ПланыСчетов.Налоговый.УбыткиПрошлыхЛетОбслуживающихПроизводств);
	Запрос.УстановитьПараметр("СчетНУнеРБП", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.Сумма КАК Сумма,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ КАК СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1 КАК СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2 КАК СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3 КАК СубконтоБУ3,
	|	ХозрасчетныйОстатки.Субконто1.СчетНУ КАК СчетНУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ1 КАК СубконтоНУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ2 КАК СубконтоНУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ3 КАК СубконтоНУ3,
	|	ХозрасчетныйОстатки.Счет КАК СчетРБП,
	|	МАКСИМУМ(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК СуммаОстатокДтБУ,
	|	МАКСИМУМ(0) КАК СуммаОстатокДтНУ,
	|	МАКСИМУМ(0) КАК СуммаОстатокДтПР,
	|	МАКСИМУМ(0) КАК СуммаОстатокДтВР,
	|	СчетНУпоСчетуБУ.СчетНУ КАК Счет,
	|	NULL КАК Субконто2,
	|	NULL КАК Субконто3
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СоответствиеСчетовБУиНУСрезПоследних.СчетБУ КАК СчетБУ,
	|		СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ
	|	ИЗ
	|		РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&КонецМесяца, Учитывается) КАК СоответствиеСчетовБУиНУСрезПоследних) КАК СчетНУпоСчетуБУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&КонецМесяца,
	|		Счет В ИЕРАРХИИ (&СчетБУРБП)
	|		    И (НЕ Счет В ИЕРАРХИИ (&СчетБУнеРБП)),
	|		,
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ПО ХозрасчетныйОстатки.Счет = СчетНУпоСчетуБУ.СчетБУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.Сумма,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3,
	|	ХозрасчетныйОстатки.Субконто1.СчетНУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоНУ3,
	|	ХозрасчетныйОстатки.Счет,
	|	СчетНУпоСчетуБУ.СчетНУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	НалоговыйОстатки.Субконто1.ДатаНачалаСписания,
	|	НалоговыйОстатки.Субконто1.ДатаОкончанияСписания,
	|	НалоговыйОстатки.Субконто1.Сумма,
	|	НалоговыйОстатки.Субконто1.СчетБУ,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ1,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ2,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ3,
	|	НалоговыйОстатки.Субконто1.СчетНУ,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ1,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ2,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ3,
	|	СчетБУпоСчетуНУ.СчетБУ,
	|	МАКСИМУМ(0),
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаНУ
	|				ТОГДА ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаПР
	|				ТОГДА ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаВР
	|				ТОГДА ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто2,
	|	НалоговыйОстатки.Субконто3
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СоответствиеСчетовБУиНУСрезПоследних.СчетБУ КАК СчетБУ,
	|		СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ
	|	ИЗ
	|		РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&КонецМесяца, Учитывается) КАК СоответствиеСчетовБУиНУСрезПоследних) КАК СчетБУпоСчетуНУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
	|		&КонецМесяца,
	|		Счет В ИЕРАРХИИ (&СчетНУРБП)
	|		    И (НЕ Счет В ИЕРАРХИИ (&СчетНУнеРБП)),
	|		,
	|		Организация = &Организация) КАК НалоговыйОстатки
	|		ПО НалоговыйОстатки.Счет = СчетБУпоСчетуНУ.СчетНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Субконто1,
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Субконто2,
	|	НалоговыйОстатки.Субконто3,
	|	НалоговыйОстатки.Субконто1.ДатаНачалаСписания,
	|	НалоговыйОстатки.Субконто1.ДатаОкончанияСписания,
	|	НалоговыйОстатки.Субконто1.Сумма,
	|	НалоговыйОстатки.Субконто1.СчетБУ,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ1,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ2,
	|	НалоговыйОстатки.Субконто1.СубконтоБУ3,
	|	НалоговыйОстатки.Субконто1.СчетНУ,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ1,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ2,
	|	НалоговыйОстатки.Субконто1.СубконтоНУ3,
	|	СчетБУпоСчетуНУ.СчетБУ
	|ИТОГИ ПО
	|	СчетРБП,
	|	Субконто1,
	|	Счет,
	|	Субконто2,
	|	Субконто3";
	Результат = Запрос.Выполнить();

	Таблица = Новый ТаблицаЗначений;
	Таблица = Результат.Выгрузить();
    СуммаСписанияБУ = 0;
	ВыборкаСчетРБП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетРБП");
	Пока ВыборкаСчетРБП.Следующий() Цикл

	ВыборкаРБП = ВыборкаСчетРБП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");

	Пока ВыборкаРБП.Следующий() Цикл
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаРБП.Субконто1) ИЛИ
			ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаРБП.ДатаНачалаСписания) ИЛИ
			ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаРБП.ДатаОкончанияСписания) ИЛИ
			ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаРБП.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписанияБУ = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.Сумма, ВыборкаРБП.СуммаОстатокДтБУ);
		
		Если СтруктураШапкиДокумента.СписаниеРБПБУ Тогда
			
			
			РБП    = ВыборкаРБП.Субконто1;
			СчетБУ = ВыборкаРБП.СчетБУ;
			СчетНУ = ВыборкаРБП.СчетНУ;
			Сумма  = ВыборкаРБП.Сумма;
			
			//Сформировать проводку БУ
			
			Если (ВыборкаРБП.СуммаОстатокДтБУ <> 0) И (СуммаСписанияБУ <> 0) Тогда
				
				
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(РБП) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СписаниеРБПБУ И ОбщегоНазначения.ЗначениеНеЗаполнено(СчетБУ) Тогда
					
					ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет"" !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					Продолжить;
				КонецЕсли;
				
				Если СписаниеРБПНУ И ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУ) Тогда
					
					ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет"" !";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
					Продолжить;
				КонецЕсли;
				
				ПроводкаБУ = мПроводкиБУ.Добавить();
				ПроводкаБУ.Период       = Дата;
				ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаБУ.СчетДт       = ВыборкаРБП.СчетБУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, ВыборкаРБП.СубконтоБУ1);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, ВыборкаРБП.СубконтоБУ2);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ВыборкаРБП.СубконтоБУ3);
				
				ПроводкаБУ.СчетКт       = ВыборкаСчетРБП.СчетРБП;
				ПроводкаБУ.СубконтоКт.РасходыБудущихПериодов = РБП;
				ПроводкаБУ.Сумма        = СуммаСписанияБУ;
				ПроводкаБУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
				ПроводкаБУ.НомерЖурнала = "ФР";
			КонецЕсли;
		КонецЕсли;
	
		Если СтруктураШапкиДокумента.СписаниеРБПНУ Тогда
			
			СуммаПроверки = ВыборкаРБП.СуммаОстатокДтБУ - ВыборкаРБП.СуммаОстатокДтНУ - ВыборкаРБП.СуммаОстатокДтПр - ВыборкаРБП.СуммаОстатокДтВР;
			
			// Счету 97.02 соответствует 76.01.2 и 97.21, но только одно может быть актуальным
			Если  ВыборкаРБП.СуммаОстатокДтБУ = 0 И Не ВыборкаРБП.СуммаОстатокДтНУ = 0 И ВыборкаРБП.СуммаОстатокДтПр = 0 И ВыборкаРБП.СуммаОстатокДтВР = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ (СуммаПроверки <= 0.05 И СуммаПроверки >= -0.05) И мПоддержкаПБУ18 Тогда
				
				
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не выполнен принцип БУ = НУ + ПР + ВР !
				| Остаток в БУ: " + ВыборкаРБП.СуммаОстатокДтБУ + "
				| Остаток в НУ: " + ВыборкаРБП.СуммаОстатокДтНУ + "
				| Остаток   ПР: " + ВыборкаРБП.СуммаОстатокДтПР + "
				| Остаток   ВР: " + ВыборкаРБП.СуммаОстатокДтВР;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				Продолжить;
			КонецЕсли;
			
			СуммаРБПвНУ = ВыборкаРБП.Сумма;
			СуммаПР = ВыборкаРБП.СуммаОстатокДтПР;
			СуммаВР = ВыборкаРБП.СуммаОстатокДтВР;
			СуммаСписанияНУ        = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.Сумма, ВыборкаРБП.СуммаОстатокДтНУ);
			СуммаСписанияПР        = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ?(ВыборкаРБП.СуммаОстатокДтПР > 0, ВыборкаРБП.Сумма, - ВыборкаРБП.Сумма), ВыборкаРБП.СуммаОстатокДтПР);
			СуммаСписанияВР        = СуммаСписанияЗаМесяц(ВыборкаРБП.Субконто1, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ?(ВыборкаРБП.СуммаОстатокДтВР > 0, ВыборкаРБП.Сумма, - ВыборкаРБП.Сумма), ВыборкаРБП.СуммаОстатокДтВР);
			ОстатокСуммыСписанияНУ = СуммаСписанияНУ;
			ОстатокСуммыСписанияПР = СуммаСписанияПР;
			ОстатокСуммыСписанияВР = СуммаСписанияВР;
			СписатьБУ = СуммаСписанияБУ;
			СписатьНУ = СуммаСписанияНУ;
			
			ВыборкаСчетовНУ = ВыборкаРБП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
			Пока ВыборкаСчетовНУ.Следующий() Цикл
				//Выборка суб счетов в НУ
				СчетЗатратНУ = ВыборкаСчетовНУ.Счет;
				Если ВыборкаСчетовНУ.Счет.ВидыСубконто.Количество() > 1 Тогда
					
					СуммаРБПвНУСчетовНУ = ВыборкаСчетовНУ.СуммаОстатокДтНУ;
					СуммаРБПвНУСчетовПР = ВыборкаСчетовНУ.СуммаОстатокДтПР;
					СуммаРБПвНУСчетовВР = ВыборкаСчетовНУ.СуммаОстатокДтВР;
					ВыборкаРаботников = ВыборкаСчетовНУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто2");
					
					Пока ВыборкаРаботников.Следующий() Цикл
						//Выборка по работникам
						ВсегоНУ = СуммаРБПвНУСчетовНУ + ВыборкаРаботников.СуммаОстатокДтПР + ВыборкаРаботников.СуммаОстатокДтВР;
						Всего = СуммаСписанияНУ + СуммаСписанияПР + СуммаСписанияВР;
						Если Всего = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СписатьБУРаботников = СписатьБУ * ВсегоНУ / Всего;
						Если ВыборкаРаботников.Счет.ВидыСубконто.Количество() > 2 Тогда
							
							СуммаРБПвНУРаботников = ВыборкаРаботников.СуммаОстатокДтНУ;
							СуммаРБПвПРРаботников = ВыборкаРаботников.СуммаОстатокДтПР;
							СуммаРБПвВРРаботников = ВыборкаРаботников.СуммаОстатокДтВР;
							ВыборкаНачислений = ВыборкаРаботников.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто3");
							
							Пока ВыборкаНачислений.Следующий() Цикл
								
								//Выборка по видам начислений
								СписатьНУ = Мин(?(ВыборкаРБП.СуммаОстатокДтНУ = 0, 0, Окр(СуммаСписанияНУ * ВыборкаНачислений.СуммаОстатокДтНУ / ВыборкаРБП.СуммаОстатокДтНУ, 2, 1)), ОстатокСуммыСписанияНУ);
								ОстатокСуммыСписанияНУ = ОстатокСуммыСписанияНУ - СписатьНУ;
								СписатьПР = Мин(?(ВыборкаРБП.СуммаОстатокДтПР = 0, 0, Окр(СуммаСписанияПР * ВыборкаНачислений.СуммаОстатокДтПР / ВыборкаРБП.СуммаОстатокДтПР, 2, 1)), ОстатокСуммыСписанияПР);
								ОстатокСуммыСписанияПР = ОстатокСуммыСписанияПР - СписатьПР;
								СписатьВР = Мин(?(ВыборкаРБП.СуммаОстатокДтВР = 0, 0, Окр(СуммаСписанияВР * ВыборкаНачислений.СуммаОстатокДтВР / ВыборкаРБП.СуммаОстатокДтВР, 2, 1)), ОстатокСуммыСписанияВР);
								ОстатокСуммыСписанияВР = ОстатокСуммыСписанияВР - СписатьВР;
	                			СписатьБУНачислений = ?((СуммаРБПвНУРаботников + СуммаРБПвПРРаботников + СуммаРБПвВРРаботников) = 0, 0, СписатьБУРаботников  * (ВыборкаНачислений.СуммаОстатокДтНУ + ВыборкаНачислений.СуммаОстатокДтПР + ВыборкаНачислений.СуммаОстатокДтВР) / (СуммаРБПвНУРаботников + СуммаРБПвПРРаботников + СуммаРБПвВРРаботников));
								
								
									СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаНачислений, СписатьНУ, Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка());
									СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаНачислений, СписатьПР, Перечисления.ВидыУчетаПоПБУ18.ПР);
									СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаНачислений, СписатьВР, Перечисления.ВидыУчетаПоПБУ18.ВР);
								СписатьБУНачислений = СписатьБУНачислений - СписатьНУ - СписатьПР - СписатьВР;
							КонецЦикла;
							
						Иначе
							
							СписатьНУ = Мин(?(ВыборкаРБП.СуммаОстатокДтНУ = 0, 0, Окр(СуммаСписанияНУ * ВыборкаРаботников.СуммаОстатокДтНУ / ВыборкаРБП.СуммаОстатокДтНУ, 2, 1)), ОстатокСуммыСписанияНУ);
							ОстатокСуммыСписанияНУ = ОстатокСуммыСписанияНУ - СписатьНУ;
							СписатьПР = Мин(?(ВыборкаРБП.СуммаОстатокДтПР = 0, 0, Окр(СуммаСписанияПР * ВыборкаРаботников.СуммаОстатокДтПР / ВыборкаРБП.СуммаОстатокДтПР, 2, 1)), ОстатокСуммыСписанияПР);
							ОстатокСуммыСписанияПР = ОстатокСуммыСписанияПР - СписатьПР;
							СписатьВР = Мин(?(ВыборкаРБП.СуммаОстатокДтВР = 0, 0, Окр(СуммаСписанияВР * ВыборкаРаботников.СуммаОстатокДтВР / ВыборкаРБП.СуммаОстатокДтВР, 2, 1)), ОстатокСуммыСписанияВР);
							ОстатокСуммыСписаниявР = ОстатокСуммыСписанияВР - СписатьВР;
								СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаРаботников, СписатьНУ, Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка());
								СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаРаботников, СписатьПР, Перечисления.ВидыУчетаПоПБУ18.ПР);
								СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаРаботников, СписатьВР, Перечисления.ВидыУчетаПоПБУ18.ВР);						
							КонецЕсли;
							СписатьБУРаботников = СписатьБУРаботников - СписатьНУ- СписатьПР- СписатьВР;
						
					КонецЦикла;
					
				Иначе
					
					СписатьНУ = Мин(?(ВыборкаРБП.СуммаОстатокДтНУ = 0, 0, Окр(СуммаСписанияНУ * ВыборкаСчетовНУ.СуммаОстатокДтНУ / ВыборкаРБП.СуммаОстатокДтНУ, 2, 1)), ОстатокСуммыСписанияНУ);
					СписатьПР = Мин(?(ВыборкаРБП.СуммаОстатокДтПР = 0, 0, Окр(СуммаСписанияПР * ВыборкаСчетовНУ.СуммаОстатокДтПР / ВыборкаРБП.СуммаОстатокДтПР, 2, 1)), ОстатокСуммыСписанияПР);
					СписатьВР = Мин(?(ВыборкаРБП.СуммаОстатокДтВР = 0, 0, Окр(СуммаСписанияВР * ВыборкаСчетовНУ.СуммаОстатокДтВР / ВыборкаРБП.СуммаОстатокДтВР, 2, 1)), ОстатокСуммыСписанияВР);
					ОстатокСуммыСписанияНУ = ОстатокСуммыСписанияНУ - СписатьНУ;
					ОстатокСуммыСписанияПР = ОстатокСуммыСписанияПР - СписатьПР;
					ОстатокСуммыСписанияВР = ОстатокСуммыСписанияВР - СписатьВР;
					
					СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаСчетовНУ, СписатьНУ, Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка());
					СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаСчетовНУ, СписатьПР, Перечисления.ВидыУчетаПоПБУ18.ПР);
					СформироватьПроводкуНУ(РБП, СтруктураШапкиДокумента, ВыборкаСчетовНУ, СписатьВР, Перечисления.ВидыУчетаПоПБУ18.ВР);
					
				КонецЕсли;
				
			КонецЦикла;
						
			Если ОстатокСуммыСписанияНУ <> 0 И ПроводкаНУ = Неопределено Тогда
				
				Сообщить("Не указан счет НУ, соответствующий счету БУ, для РБП:" + ВыборкаРБП.Субконто1 + ". Сумма списания по НУ рассчитана не будет");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецЦикла;

	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);

КонецПроцедуры

Процедура РасчетРасходовПоСтрахованию(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет = &Счет, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|ИТОГИ
	|	СУММА(СуммаОстатокДт)
	|ПО
	|	Субконто1,
	|	Субконто2,
	|	Субконто3";
	
	Результат = Запрос.Выполнить();
	
	
	
	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
		СуммаСписанияБУ = 0;
		
		ВыборкаРБП = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто2");
		Пока ВыборкаРБП.Следующий() Цикл
			
			РБП    = ВыборкаРБП.Субконто2;
			СчетБУ = РБП.СчетБУ;
			СчетНУ = РБП.СчетНУ;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(РБП) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(РБП.ДатаНачалаСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				Продолжить;
			КонецЕсли;
			
			Если СписаниеРБПБУ И ОбщегоНазначения.ЗначениеНеЗаполнено(СчетБУ) Тогда
				
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет БУ"" !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				Продолжить;
			КонецЕсли;
			
			Если СписаниеРБПНУ И ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУ) Тогда
				
				ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен реквизит ""Счет НУ "" !";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
				Продолжить;
			КонецЕсли;
			
			ВсегоСуммаСписания = 0;
			Выборка = ВыборкаРБП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто3");
			Пока Выборка.Следующий() Цикл
				
				СуммаСписания = СуммаСписанияЗаМесяц(РБП, Макс(РБП.ДатаНачалаСписания, мНачДата), РБП.ДатаОкончанияСписания, Выборка.СуммаОстатокДт, Выборка.СуммаОстатокДт);
				СуммаСписания = СуммаСписания * (Выборка.СуммаОстатокДт / ВыборкаРБП.СуммаОстатокДт);
				
				Если НЕ (СуммаСписания > 0.05 Или СуммаСписания < -0.05) Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если СтруктураШапкиДокумента.СтрахованиеБУ и СуммаСписания <> 0 Тогда
					ПроводкаБУ = мПроводкиБУ.Добавить();
					ПроводкаБУ.Период       = Дата;
					ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаБУ.СчетДт       = СчетБУ;
					ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, РБП.СубконтоБУ1);
					ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, РБП.СубконтоБУ2);
					ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, РБП.СубконтоБУ3);
					
					ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников;
					ПроводкаБУ.СубконтоКт.РасходыБудущихПериодов = РБП;
					ПроводкаБУ.СубконтоКт.Контрагенты            = ВыборкаКонтрагент.Субконто1;
					ПроводкаБУ.СубконтоКт.РаботникиОрганизаций   = Выборка.Субконто3;
					ПроводкаБУ.Сумма        = СуммаСписания;
					ПроводкаБУ.Содержание   = "Списание доб.стахования за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаБУ.НомерЖурнала = "";
					
					ВсегоСуммаСписания = ВсегоСуммаСписания + СуммаСписания;
				КонецЕсли;
				
				
				Если СтруктураШапкиДокумента.СтрахованиеНУ Тогда
					ПроводкаНУ = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт       = СчетНУ;
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, РБП.СубконтоНУ1);
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, РБП.СубконтоНУ2);
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, РБП.СубконтоНУ3);
					
					ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников;
					ПроводкаНУ.СубконтоКт.РасходыБудущихПериодов = РБП;
					ПроводкаНУ.СубконтоКт.РаботникиОрганизаций   = Выборка.Субконто3;
					
					ПроводкаНУ.Сумма        = СуммаСписания;
					ПроводкаНУ.Содержание   = "Списание доб.стахования за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
					ПроводкаНУ.НомерЖурнала = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
мПроводкиБУ.записать(Ложь);
мПроводкиНУ.записать(Ложь);	

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Функция СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы = Истина, ОтражатьВБухгалтерскомУчете)

	Счет = Неопределено;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если ОбщепроизводственныеРасходы Тогда
			Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы; // счет 25
			
		Иначе
			Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы; // счет 26
		КонецЕсли;
		
	Иначе // необходимо определить счет по налоговому учету
			Если ОбщепроизводственныеРасходы Тогда
		Счет = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы; // счет Н25.01
		Иначе
		Счет = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы; // счет Н26.01
	КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат Счет;

КонецФункции // СчетУчетаПоХарактеруЗатрат()

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы = Истина, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",             мНачДата);
	Запрос.УстановитьПараметр("КонДата",             мКонДата);
	Запрос.УстановитьПараметр("СчетЗатрат",          СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете));
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТаблицаСпособовРаспределения.СчетЗатрат,
		               |	ТаблицаСпособовРаспределения.Подразделение,
		               |	ТаблицаСпособовРаспределения.СтатьяЗатрат,
		               |	ТаблицаСпособовРаспределения.СуммаОборот КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА ТаблицаСпособовРаспределения.БазаРаспределения ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.БазаРаспределения
		               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению
		               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат
		               |		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету ЕСТЬ НЕ NULL 
		               |			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету
		               |		ИНАЧЕ ТаблицаСпособовРаспределения.РаспределениеПоОрганизации
		               |	КОНЕЦ КАК Метод
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
		               |		ХозрасчетныйОбороты.Субконто1 КАК Подразделение,
		               |		ХозрасчетныйОбороты.Субконто2 КАК СтатьяЗатрат,
		               |		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
		               |		СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
		               |		СпособыРаспределенияПоПодразделению.БазаРаспределения КАК РаспределениеПоПодразделению,
		               |		СпособыРаспределенияПоСтатьеЗатрат.БазаРаспределения КАК РаспределениеПоСтатьеЗатрат,
		               |		СпособыРаспределенияПоСчету.БазаРаспределения КАК РаспределениеПоСчету,
		               |		СпособыРаспределенияПоОрганизации.БазаРаспределения КАК РаспределениеПоОрганизации
		               |	ИЗ
		               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК ХозрасчетныйОбороты
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК СпособыРаспределения
		               |			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределения.СчетЗатратБУ
		               |				И ХозрасчетныйОбороты.Субконто1 = СпособыРаспределения.Подразделение
		               |				И ХозрасчетныйОбороты.Субконто2 = СпособыРаспределения.СтатьяЗатрат
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
		               |			&КонДата,
		               |			Организация = &Организация
		               |			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтатьеЗатрат
		               |			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоСтатьеЗатрат.СчетЗатратБУ
		               |				И ХозрасчетныйОбороты.Субконто2 = СпособыРаспределенияПоСтатьеЗатрат.СтатьяЗатрат
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
		               |			&КонДата,
		               |			Организация = &Организация
		               |			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК СпособыРаспределенияПоПодразделению
		               |			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоПодразделению.СчетЗатратБУ
		               |				И ХозрасчетныйОбороты.Субконто1 = СпособыРаспределенияПоПодразделению.Подразделение
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
		               |			&КонДата,
		               |			Организация = &Организация
		               |			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчету
		               |			ПО ХозрасчетныйОбороты.Счет = СпособыРаспределенияПоСчету.СчетЗатратБУ
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
		               |			&КонДата,
		               |			Организация = &Организация
		               |			    И СчетЗатратБУ = &ПустойСчет
		               |			    И СтатьяЗатрат = &ПустаяСтатьяЗатрат
		               |			    И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоОрганизации
		               |			ПО ХозрасчетныйОбороты.Организация = СпособыРаспределенияПоОрганизации.Организация) КАК ТаблицаСпособовРаспределения
		               |ИТОГИ ПО
		               |	Метод";	
					   
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
		
		// Если запрос формируется для целей налогового учета, то
		// преобразуем текст запроса в текст запроса по данным налогового учета.
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗатратБУ", "СчетЗатратНУ");
			Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Налоговый.ПустаяСсылка());
			Запрос.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаПБУ18);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗатратБУ", "СчетЗатрат");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидУчета = &ВидУчета", "");
			Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		КонецЕсли;
		   
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

// Функция распределения ОХР и ОПР затрат.
//
//	Параметры:
//		ОбщепроизводственныеРасходы - Булево;
//		БазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, мБазаКоэффициентов, СтруктураДопПараметров)
	
	РаспределениеВыполнено = Ложь;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = НЕОПРЕДЕЛЕНО;
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, РезультатЗапроса, СтруктураДопПараметров);
	
	ОбходПоМетодамРаспределения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктПоиска = Новый Структура;

	Пока ОбходПоМетодамРаспределения.Следующий() Цикл
		
		Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			ИмяРеквБазы = "Мат";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
			ИмяРеквБазы = "ЗП";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			ИмяРеквБазы = "План";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
			ИмяРеквБазы = "Выпуск";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
			ИмяРеквБазы = "Выручка";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если ОбщепроизводственныеРасходы Тогда
					ТекстСообщения = "Установлен метод ""Не распределять"" общепроизводственные расходы для:
					|Подразделение: " + Обход.Подразделение + "
					|Статья затрат: " + Обход.СтатьяЗатрат;
					
				Иначе
					ТекстСообщения = "Установлен метод ""Не распределять"" общехозяйственные расходы для:
					|Статья затрат: " + Обход.СтатьяЗатрат;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
				
			КонецЦикла;
				
			Продолжить;
		Иначе
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				Если ОбщепроизводственныеРасходы Тогда
					ТекстСообщения = "Не указан способ распределения общепроизводственных расходов для:
						|Подразделение: " + Обход.Подразделение + "
						|Статья затрат: " + Обход.СтатьяЗатрат;
				Иначе
					ТекстСообщения = "Не указан способ распределения общехозяйственных расходов для:
						|Статья затрат: " + Обход.СтатьяЗатрат;
				КонецЕсли; 
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);

			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Обход = ОбходПоМетодамРаспределения.Выбрать();
		Пока Обход.Следующий() Цикл
			
			Если Обход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктПоиска.Очистить();
			ФлагПоВсейБазе = НЕ ОбщепроизводственныеРасходы;
			
			ВсегоБазаРаспределения = 0;
			
			Если ФлагПоВсейБазе Тогда
				ВсегоБазаРаспределения = мБазаКоэффициентов.Итог("База"+ИмяРеквБазы);
				НаборСтрок = мБазаКоэффициентов;
				
			Иначе
				
				СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
				НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
				Для Каждого СтрКоэф Из НаборСтрок Цикл
					ВсегоБазаРаспределения = ВсегоБазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
				КонецЦикла;
			КонецЕсли;
			
			СуммаКРаспр = 0;
			СуммаСписанияНаСебестоимость = 0;
			УчтеноБазаРаспределения = 0;
			Для Каждого СтрКоэф Из НаборСтрок Цикл
				
				БазаРаспределения = СтрКоэф["База"+ИмяРеквБазы];
				БазаРаспределенияНаВыпуск = БазаРаспределения;
				
				Если БазаРаспределения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
				ДолжноБытьСписано = Окр(Обход.Сумма * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1);
				СуммаСписания = ДолжноБытьСписано - СуммаКРаспр;
				СуммаКРаспр = СуммаКРаспр + СуммаСписания;

				
				Если СуммаСписания <> 0 Тогда
				   
					НоваяПроводка = мОперация.Добавить();
					НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
					НоваяПроводка.Активность  = Истина;
					НоваяПроводка.Период      = Дата;
					НоваяПроводка.Содержание  = "Распределение ОПР и ОХР";
					
					НоваяПроводка.Сумма = СуммаСписания;
					
					НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
					Если СтруктураДопПараметров.Учет = "Нал" Тогда
						НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
					КонецЕсли;
					НоваяПроводка.СчетКт = Обход.СчетЗатрат;
	
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
					Если СтруктураДопПараметров.Учет = "Нал" Тогда
						НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;
					КонецЕсли;
					РаспределениеВыполнено = Истина;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если РаспределениеВыполнено Тогда
		мОперация.Записать(Ложь);
	КонецЕсли; 
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПРиОХР()

// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента)
	
	 Запрос = Новый Запрос;
	 Запрос.Текст =  "ВЫБРАТЬ
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан,
	                 |	СУММА(ПолнаяБазаРаспределения.БазаВыручка) КАК БазаВыручка
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	                 |		ХозрасчетныйОбороты.Субконто1 КАК Подразделение,
	                 |		ХозрасчетныйОбороты.Субконто2 КАК НоменклатурнаяГруппа,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ХозрасчетныйОбороты.Субконто3.ВидРасходовНУ = &МатЗатраты
	                 |					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК БазаМат,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ХозрасчетныйОбороты.Субконто3.ВидРасходовНУ = &ОплатаТруда
	                 |					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК БазаЗП,
	                 |		0 КАК БазаВыпуск,
	                 |		0 КАК БазаПлан,
	                 |		0 КАК БазаВыручка
	                 |	ИЗ
	                 |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ХозрасчетныйОбороты.Счет,
	                 |		ХозрасчетныйОбороты.Субконто1,
	                 |		ХозрасчетныйОбороты.Субконто2
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ВыпускПродукцииУслуг.СчетЗатрат,
	                 |		ВыпускПродукцииУслуг.Подразделение,
	                 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	                 |		0,
	                 |		0,
	                 |		СУММА(ВыпускПродукцииУслуг.Количество),
	                 |		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость),
	                 |		0
	                 |	ИЗ
	                 |		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслуг
	                 |	ГДЕ
	                 |		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	                 |		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ВыпускПродукцииУслуг.СчетЗатрат,
	                 |		ВыпускПродукцииУслуг.Подразделение,
	                 |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ЗатратыПроизводства.Счет,
	                 |		ЗатратыПроизводства.Субконто1,
	                 |		Выручка.Субконто1,
	                 |		0,
	                 |		0,
	                 |		0,
	                 |		0,
	                 |		ЕСТЬNULL(Выручка.СуммаОборотКт, 0)
	                 |	ИЗ
	                 |		(ВЫБРАТЬ
	                 |			ХозрасчетныйОбороты.Счет КАК Счет,
	                 |			ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	                 |			ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	                 |			ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт
	                 |		ИЗ
	                 |			РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	                 |		
	                 |		СГРУППИРОВАТЬ ПО
	                 |			ХозрасчетныйОбороты.Счет,
	                 |			ХозрасчетныйОбороты.Субконто1,
	                 |			ХозрасчетныйОбороты.Субконто2,
	                 |			ХозрасчетныйОбороты.СуммаОборотДт) КАК ЗатратыПроизводства
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДАта, , Счет В ИЕРАРХИИ (&Счет90), , Организация = &Организация, , ) КАК Выручка
	                 |			ПО Выручка.Субконто1 = ЗатратыПроизводства.Субконто2) КАК ПолнаяБазаРаспределения
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ПолнаяБазаРаспределения.СчетЗатрат,
	                 |	ПолнаяБазаРаспределения.Подразделение,
	                 |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа";
	 
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	 
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("Счет90",  ПланыСчетов.Хозрасчетный.Выручка);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
    	Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Хозрасчетный.Выручка);
		
		
	Иначе // отражать в налоговом учете
		
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
		Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
		Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
    	Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Налоговый.Выручка);
		
		// Преобразуем текст запроса в текст запроса по данным налогового учета.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчета = &ВидУчета");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // РасчетБазыКоэффициентов()

// Общепроизводственные и общехозяйственные расходы (не
// используется директ-костинг) списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента);
	
	РаспределениеВыполнено = Ложь;
	
	// Списание общехозяйственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	Если Не мУчетнаяПолитикаБУ["ДиректКостинг"] Тогда
		ОбщепроизводственныеРасходы = Ложь;
		РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, мБазаКоэффициентов, СтруктураДопПараметров);
	КонецЕсли;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	ОбщепроизводственныеРасходы = Истина;
	РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, мБазаКоэффициентов, СтруктураДопПараметров);
	// Распределение общехозяйственных и общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров);

КонецПроцедуры // РаспределениеКосвенныхРасходов()

// Процедура формирует проводки по разницам, возникающим в результате того, что
// косвенные затраты в бухгалтерском учете относятся на стоимость продукции, а в налоговом - на текущие расходы
//
Процедура ПроводкиПоРазницамОтКосвенныхРасходов(мПроводкиНУ, Выборка, ВидУчета, СтруктураШапкиДокумента)
	
	Проводка = мПроводкиНУ.Добавить();
	
	Проводка.Период       = Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			
	Проводка.ВидУчетаДт   = ВидУчета;

	Проводка.СчетКт = НалоговыйУчет.ПереводСоСчетаКосвенныхЗатратНаСчетПрямыхЗатрат(Выборка.Счет, мУчетнаяПолитикаБУ["ДиректКостинг"]);
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",         Выборка.СтатьяЗатрат);
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения",        Выборка.Подразделение);
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	Проводка.ВидУчетаКт   = ВидУчета;
	
	Проводка.Содержание   = "Разницы по косвенным расходам";
	Проводка.Сумма        = - Выборка.Сумма;

КонецПроцедуры // ПроводкиПоРазницамОтКосвенныхРасходов()

// Процедура рассчитывает разницы, возникающим в результате того, что
// косвенные затраты в бухгалтерском учете относятся на стоимость продукции, а в налоговом - на текущие расходы
//
Процедура РасчетРазницКосвенныхЗатрат(СтруктураШапкиДокумента)
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	Если Не мУчетнаяПолитикаБУ["ДиректКостинг"] Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	КонецЕсли;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",      мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаЗатрат",  СчетаЗатрат);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|	НалоговыйОбороты.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаЗатрат), , Организация = &Организация, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|					ТОГДА НалоговыйОбороты.Субконто2
	|				ИНАЧЕ НалоговыйОбороты.Субконто3
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидУчета,
	|	Счет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка ИЗ Результат Цикл

		Сумма = Выборка.Сумма;

		Если Сумма <> 0 Тогда
			ПроводкиПоРазницамОтКосвенныхРасходов(мПроводкиНУ, Выборка, ?(Выборка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР), СтруктураШапкиДокумента);
		КонецЕсли;
				
КонецЦикла;
	
	мПроводкиНУ.Записать(Ложь);

КонецПроцедуры	// РасчетРазницКосвенныхЗатрат() 		

// Процедура рассчитывает разницы, возникающим в результате того, что
// косвенные затраты в бухгалтерском учете и в налоговом учете по-разному включаются в состав расходов,
// уменьшающих базу налога на прибыль
Процедура РасчетРазницОтРазныхПорядковПринятияКРасходам(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",      мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("КорСчетаБУ",   ОбщегоНазначения.МассивСчетовРасходовЕНВД());
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
	Массив.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("КорСчетаНУ",   Массив);
	
	Если мУчетнаяПолитикаБУ["ДиректКостинг"] Тогда
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);	
		Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);	
		Запрос.УстановитьПараметр("СчетаБУ",      Массив);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);	
		Массив.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);	
		Запрос.УстановитьПараметр("СчетаНУ",      Массив);
	Иначе
    	Запрос.УстановитьПараметр("СчетаБУ",      ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
		Запрос.УстановитьПараметр("СчетаНУ",      ПланыСчетов.Налоговый.РасходыНаПродажу);
	КонецЕсли;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Сопоставление.Счет,
	|	СУММА(Сопоставление.Разница) КАК Разница
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК Счет,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК Разница
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаБУ), &ВидСубконто, Организация = &Организация, (НЕ КорСчет В ИЕРАРХИИ (&КорСчетаБУ)), ) КАК ХозрасчетныйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СоответствиеСчетовБУиНУСрезПоследних.СчетБУ КАК СчетБУ,
	|				СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ
	|			ИЗ
	|				РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(
	|					&ДатаКон,
	|					Активность
	|					    И СчетБУ В ИЕРАРХИИ (&СчетаБУ)) КАК СоответствиеСчетовБУиНУСрезПоследних) КАК СоответствиеСчетовБУиНУСрезПоследних
	|			ПО ХозрасчетныйОбороты.Счет = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НалоговыйОбороты.Счет,
	|		-НалоговыйОбороты.СуммаОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаНУ), &ВидСубконто, Организация = &Организация, КорСчет В ИЕРАРХИИ (&КорСчетаНУ), ) КАК НалоговыйОбороты) КАК Сопоставление
	|
	|СГРУППИРОВАТЬ ПО
	|	Сопоставление.Счет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка ИЗ Результат Цикл
		
		Сумма = Выборка.Разница;
		
		Если Сумма <> 0 Тогда
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "Разницы от разных порядков принятия в состав расходов";
			Проводка.Сумма        = Сумма;
			
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.СчетКт = Выборка.Счет;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "Разницы от разных порядков принятия в состав расходов";
			Проводка.Сумма        = - Сумма;
		КонецЕсли;
		
КонецЦикла;
КонецПроцедуры

// Процедура списыват затраты по услугам, реализация которых отражена 
// без отражения выпуска в плановых ценах
Процедура ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР, Отказ = Ложь)
   
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	
	Запрос.Текст = 
  "ВЫБРАТЬ
   |	ХозрасчетныйОстатки.Счет КАК Счет,
   |	ХозрасчетныйОстатки.Субконто1 КАК Подразделение,
   |	ХозрасчетныйОстатки.Субконто2 КАК НоменклатурнаяГруппа,
   |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК ОстатокПрямыхРасходов,
   |	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
   |	РеализацияУслуг.СчетРасходов КАК СчетРасходов,
   |	РеализацияУслуг.СуммаОборот КАК Выручка
   |ИЗ
   |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &ТекстУсловия) КАК ХозрасчетныйОстатки
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |			РеализацияУслугОбороты.СчетРасходов КАК СчетРасходов,
   |			СУММА(ЕСТЬNULL(РеализацияУслугОбороты.СуммаОборот, 0)) КАК СуммаОборот
   |		ИЗ
   |			РегистрНакопления.РеализацияУслуг.Обороты(&НачГраница, &КонГраница, , Организация = &Организация) КАК РеализацияУслугОбороты
   |		
   |		СГРУППИРОВАТЬ ПО
   |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
   |			РеализацияУслугОбороты.СчетРасходов) КАК РеализацияУслуг
   |		ПО ХозрасчетныйОстатки.Субконто2 = РеализацияУслуг.НоменклатурнаяГруппа
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
   |			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
   |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |			СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ
   |		ИЗ
   |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
   |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
   |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
   |		ГДЕ
   |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
   |			И ИнвентаризацияНЗП.Организация = &Организация
   |			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
   |		
   |		СГРУППИРОВАТЬ ПО
   |			ИнвентаризацияНЗП.СчетЗатрат,
   |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
   |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа) КАК ОстаткиНЗП
   |		ПО ХозрасчетныйОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа
   |			И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
   |			И ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.ПодразделениеОрганизации
   |
   |СГРУППИРОВАТЬ ПО
   |	ХозрасчетныйОстатки.Счет,
   |	ХозрасчетныйОстатки.Субконто1,
   |	РеализацияУслуг.СчетРасходов,
   |	РеализацияУслуг.СуммаОборот,
   |	ХозрасчетныйОстатки.Субконто2
   |ИТОГИ
   |	МАКСИМУМ(ОстатокПрямыхРасходов),
   |	МАКСИМУМ(СуммаНЗП),
   |	СУММА(Выручка)
   |ПО
   |	Счет,
   |	Подразделение,
   |	НоменклатурнаяГруппа,
   |	СчетРасходов";
   
	Массив = Новый Массив;	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &ТекстУсловия", "Организация = &Организация");
		
	Иначе // отражать в налоговом учете
		Массив.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		Массив.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
		Запрос.УстановитьПараметр("ВидУчета",    СтруктураДопПараметров.ВидУчетаПБУ18);

		// Преобразуем текст запроса в текст запроса по данным налогового учета.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнвентаризацияНЗП.СчетЗатрат", "ИнвентаризацияНЗП.СчетЗатратНУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &ТекстУсловия", ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, "Организация = &Организация И ВидУчета = &ВидУчета", "Организация = &Организация"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияУслугОбороты.СчетРасходов", "РеализацияУслугОбороты.СчетРасходовНУ");
		
		Если СтруктураДопПараметров.ВидУчетаПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнвентаризацияНЗПСостав.СуммаБУ","ИнвентаризацияНЗПСостав.СуммаНУ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(ИнвентаризацияНЗПСостав.СуммаБУ)","СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) - СУММА(ИнвентаризацияНЗПСостав.СуммаНУ)");
		КОнецЕсли;
		
	КонецЕсли; 
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счета", Массив);
   
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбходПоСчетамЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатрат.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				Если ОбходПоНомГруппам.Выручка = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				ВсегоБазаРаспределения = ОбходПоНомГруппам.Выручка;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
								
					ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов;
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не СтруктураДопПараметров.ВидУчетаПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда 					
						СуммаНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, Обход.Подразделение, Обход.НоменклатурнаяГруппа);
					Иначе
						СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					КонецЕсли;
					СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
					
					Если ВсегоБазаРаспределения = 0 Тогда
						СуммаСписания = 0;
					Иначе
						СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск*Обход.Выручка/ВсегоБазаРаспределения, 2);
					КонецЕсли;
					
					СуммаКорретировкиСписания = СуммаСписания;
										
						Если СуммаКорретировкиСписания <> 0 Тогда
						
						
						Если СтруктураДопПараметров.Счет40 Тогда
							// Проводки Дт40 Кт20 на сумму фактической стоимости,
							//          Дт43 Кт40 на сумму отклонений
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							
							НоваяПроводка.СчетДт =  ?(мОперация = мПроводкиНУ, ПланыСчетов.Налоговый.ВыпускПродукции,  ПланыСчетов.Хозрасчетный.ВыпускПродукции);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт =  ?(мОперация = мПроводкиНУ, ПланыСчетов.Налоговый.ВыпускПродукции,  ПланыСчетов.Хозрасчетный.ВыпускПродукции);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
							
					Иначе
						// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							
							НоваяПроводка.СчетДт = Обход.СчетРасходов;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							НоваяПроводка.СчетКт = Обход.Счет;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
							
					КонецЕсли;
					
					КонецЕсли;
									
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
			
	мОперация.Записать(Ложь);
КонецПроцедуры

Функция НайтиРазницуВНЗП(СтруктураДопПараметров, ПеределПодразделение, ПеределНоменклатурнаяГруппа)
	
	ВидУчета =  СтруктураДопПараметров.ВидУчетаПБУ18;

	НЗП = 0;
	
	Если Не СтруктураДопПараметров.НЗП = Неопределено Тогда
		
		ПеределНЗП = СтруктураДопПараметров.НЗП.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		
		Если ПеределНЗП = Неопределено Или ПеределНЗП.Количество() = 0 Тогда
			НЗП = 0;
		Иначе
			НЗП = ?(ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР, ПеределНЗП[0].КонОстПР, ПеределНЗП[0].КонОстВР);
		КонецЕсли;
	КонецЕсли;
	Возврат НЗП;
КонецФункции

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР)
	УсловияВстречногоВыпуска1 = "";
    УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	Если Лев(РасчетПрямыхЗатратНомер, 1) = "3" Тогда
		ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() = 0  Тогда
			РасчетПрямыхЗатратНомер = "" 
		КонецЕсли;
		
	ИначеЕсли РасчетПрямыхЗатратНомер <> "" Тогда
		ТаблицаВстречногоВыпускаДляОтбора = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Скопировать();
		ТаблицаВстречногоВыпускаДляОтбора.Свернуть("Продукция, Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета, НоменклатурнаяГруппаПересчета", );		
		ВстречныйВыпуск = ТаблицаВстречногоВыпускаДляОтбора.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() > 0  Тогда
			ПродукцияВстречногоВыпуска    = Новый Массив;
			ПодразделениеПересчета        = Новый Массив;
			НоменклатурнаяГруппаПересчета = Новый Массив;
			Для Каждого СтрокаВстречногоВыпуска Из ВстречныйВыпуск Цикл
				ПродукцияВстречногоВыпуска.Добавить(СтрокаВстречногоВыпуска.Продукция);
				ПодразделениеПересчета.Добавить(СтрокаВстречногоВыпуска.ПодразделениеПересчета);
				НоменклатурнаяГруппаПересчета.Добавить(СтрокаВстречногоВыпуска.НоменклатурнаяГруппаПересчета);
			КонецЦикла;
			Если РасчетПрямыхЗатратНомер = "1" Тогда
				УсловияВстречногоВыпуска1 = " И Не (КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета))";
				УсловияВстречногоВыпуска2 = " И Не (Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета))";
			Иначе
				УсловияВстречногоВыпуска1 = " И КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета)";
				УсловияВстречногоВыпуска2 = " И Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ
		|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимость,
		|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходов,
        |	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОборотДт, 0)) КАК ВсегоПрямыхРасходов,
		|	" + ?(СтруктураДопПараметров.Учет = "Нал" И СтруктураДопПараметров.ВидУчетаПБУ18 <> Перечисления.ВидыУчетаПоПБУ18.НУ, "СУММА(0)", "СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0))") + " КАК СписаноРасходов,
		|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.Сумма"+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"БУ", "НУ")+",0)) КАК СуммаНЗП
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачГраница, &КонГраница, Месяц, 
		| Организация = &Организация И 
		| Подразделение = &Подразделение
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  НоменклатурнаяГруппа = &НоменклатурнаяГруппа") + УсловияВстречногоВыпуска2 + "
		|) КАК ВыпускПродукцииУслуг
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачГраница,&КонГраница,,, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация
		|" + ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, " И ВидУчета = &ВидУчета", "") + "
		|И Субконто1 = &Подразделение
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  Субконто2 = &НоменклатурнаяГруппа") + "
		|) КАК ХозрасчетныйОстатки
		|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки.Счет И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОстатки.Субконто1 И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки.Субконто2 
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК Подразделение,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,";
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ";
		ИначеЕсли СтруктураДопПараметров.ВидУчетаПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ";
		Иначе 
			ТекстЗапроса = ТекстЗапроса + "&НЗП КАК СуммаНУ";
		КОнецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
		|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
		|		
		|		ГДЕ
		|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата И
		|			ИнвентаризацияНЗП.Организация = &Организация И
		|			(НЕ(ИнвентаризацияНЗП.ПометкаУдаления))
		|		СГРУППИРОВАТЬ ПО
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
		|			ИнвентаризацияНЗП.СчетЗатрат) КАК ОстаткиНЗП
		|		ПО ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.Подразделение И ХозрасчетныйОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыпускПродукцииУслуг.СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	ОстаткиНЗП.Сумма"+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"БУ", "НУ")+",
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)
		|
		|ИТОГИ СУММА(ПлановаяСтоимость), МАКСИМУМ(ОстатокПрямыхРасходов), СУММА(ВсегоПрямыхРасходов), СУММА(СписаноРасходов), МАКСИМУМ(СуммаНЗП) ПО
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	Запрос.УстановитьПараметр("Организация",           СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение",         ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппаПересчета",  НоменклатурнаяГруппаПересчета);
	Запрос.УстановитьПараметр("ПодразделениеПересчета",      ПодразделениеПересчета);
	Запрос.УстановитьПараметр("ПродукцияВстречногоВыпуска",  ПродукцияВстречногоВыпуска);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
		
	Иначе // отражать в налоговом учете
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
		Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
		Запрос.УстановитьПараметр("ВидУчета",    СтруктураДопПараметров.ВидУчетаПБУ18);
		
	 
    	Запрос.УстановитьПараметр("НЗП",     НайтиРазницуВНЗП(СтруктураДопПараметров, ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		
		// Преобразуем текст запроса в текст запроса по данным налогового учета.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнвентаризацияНЗП.СчетЗатрат", "ИнвентаризацияНЗП.СчетЗатратНУ");
		
	КонецЕсли; 
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 20 и 23,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОХРилиОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных и общехозяйственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "", ВыполненоРаспределениеОХРилиОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Истина, СтруктураШапкиДокумента.Организация, "Нал");
	ВестиПартионныйУчетНУ = ?(УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней, Ложь, Истина);
	НУ = ПланыСчетов.Налоговый.Товары.ПолучитьОбъект();
	ВестиСкладскойУчетНУ  = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Если ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Истина, СтруктураШапкиДокумента.Организация, "Бух").РазрешитьУчетУслугБезПлановыхЦен Тогда
		ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР);
	КонецЕсли;
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРилиОПР);
	
	// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
	ОбходПоСчетамЗатарт = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатарт.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатарт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
			
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;
				ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов + ?(ВыполненоРаспределениеОХРилиОПР, 0, СписаноРасходов);
				СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
				СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
				
				// В качестве базы распределения прямых расходов на выпущенную продукцию
				// используется плановая себестоимость.
				ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
				РаспределеноБазыРаспределения = 0;
				СписаноПрямыхРасходов = 0;
				
				// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
				// производим распределение по ним прямых расходов.
				ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорретировкиСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
				СуммаНеКорректируемыхНаправлений = 0;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл

					РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
					
					Если ВсегоБазаРаспределения = 0 Тогда
						СуммаСписания = 0;
					Иначе
						СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов;
					КонецЕсли;
					СписаноПрямыхРасходов = СписаноПрямыхРасходов + СуммаСписания;
					
					Если ВыполненоРаспределениеОХРилиОПР Тогда
						СуммаКорретировкиСписания = СуммаСписания;
						
					Иначе
						СуммаКорретировкиСписания = СуммаСписания - Обход.СписаноРасходов;
					КонецЕсли; 
					
					Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" И СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
						
						ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
						Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорретировкиСписания;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
				НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
				НоваяСтрока.Продукция            = Обход.Продукция;
				НоваяСтрока.Подразделение        = Обход.Подразделение;
				НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
				НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
				НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
				НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
				НоваяСтрока.СчетСписания         = Обход.СчетСписания;
				НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
				НоваяСтрока.СуммаКорретировкиСписания = СуммаКорретировкиСписания;
				НоваяСтрока.СписаноРасходов=?(ВыполненоРаспределениеОХРилиОПР, 0, Обход.СписаноРасходов);
			КонецЦикла;
			
			ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорретировкиСписания");
			
	                КоэффициентРаспределенияНекорректируемойСуммы = ?(ВсегоКорректировок = 0, 0, СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				
					Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорретировкиСписания = Обход.СуммаКорретировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СписаноРасходов = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					// Формирование проводок по списанию
					Если СтруктураДопПараметров.Счет40 Тогда
						// Проводки Дт40 Кт20 на сумму фактической стоимости,
						//          Дт43 Кт40 на сумму отклонений
						Если СуммаКорретировкиСписания <> 0 Тогда
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							
							НоваяПроводка.СчетДт =  ?(мОперация = мПроводкиНУ, ПланыСчетов.Налоговый.ВыпускПродукции,  ПланыСчетов.Хозрасчетный.ВыпускПродукции);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.КорректируемыйДокумент =  Обход.СубконтоСписания2;
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
							
						КонецЕсли;
						Если СуммаКорретировкиСписания - СписаноРасходов <> 0 Тогда
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания - СписаноРасходов;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт =  ?(мОперация = мПроводкиНУ, ПланыСчетов.Налоговый.ВыпускПродукции,  ПланыСчетов.Хозрасчетный.ВыпускПродукции);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.КорректируемыйДокумент =  Обход.СубконтоСписания2;
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если СуммаКорретировкиСписания <> 0 Тогда
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорретировкиСписания;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если мОперация = мПроводкиНУ Тогда
								НоваяПроводка.КорректируемыйДокумент =  Обход.СубконтоСписания2;
								НоваяПроводка.ВидУчетаДт = СтруктураДопПараметров.ВидУчетаПБУ18;
								НоваяПроводка.ВидУчетаКт = СтруктураДопПараметров.ВидУчетаПБУ18;							
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
					
						// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
						// стоимость и, следовательно, необходимо выполнить корректировку списаний.
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;
									
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
			
	мОперация.Записать(Ложь);
	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

// Процедура производит коррекировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРилиОПР, СтруктураДопПараметров)

	// Формирование корректировки стомисти списаний, исходя из среденвзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Учет",           ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "Бух", "Нал"));
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось спиание номенклатуры в дебет
	// счетов 25 (26, если этот счет закрывается на счет 20).
	Если ВыполненоРаспределениеОХРилиОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			Если Не мУчетнаяПолитикаБУ["ДиректКостинг"] Тогда
				МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
			КонецЕсли; 
			
		Иначе // отражение в налоговом учете
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
		КонецЕсли; 
		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);
		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачДата, мКонДата, СтруктураДопПараметров);
	
	мОперация.Записать(Ложь);
	
КонецПроцедуры

// Процедура проводит корректировку стоимости списания на счет 94
Процедура  КорректировкаСтоимостиСписание94(СтруктураДопПараметров, СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", мНачГраница);
	Запрос.УстановитьПараметр("КонДата", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаПР", Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР", Перечисления.ВидыУчетаПоПБУ18.ВР);
	
	Если СтруктураДопПараметров.Учет = "Нал" Тогда
		Учет = "Нал";
		Счет94 = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей;
		ПланСчетов = "Налоговый";
	Иначе
		Учет = "Бух";
		Счет94 = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
		ПланСчетов = "Хозрасчетный";
	КонецЕсли;
	Запрос.УстановитьПараметр("Счет", КорректировкаСтоимости.СписокСчетовУчетаНоменклатуры(Учет));
	Запрос.УстановитьПараметр("Счет94", Счет94);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	NULL КАК Регистратор,
	|	0 КАК СуммаОборот,
	|	0 КАК Оборот94,
	|	ХозрасчетныйОстатки.СуммаНачальныйОстаток КАК СуммаОстаток,
	|	0 КАК СуммаПроводки94,
	|	0 КАК СуммаОборотПР,
	|	0 КАК Оборот94ПР,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА ВидУчета = &ВидУчетаПР Тогда ХозрасчетныйОстатки.СуммаНачальныйОстаток ИНАЧЕ 0 КОНЕЦ", "0") +" КАК СуммаОстатокПР,
	|	0 КАК СуммаПроводки94ПР,
	|	0 КАК СуммаОборотВР,
	|	0 КАК Оборот94ВР,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА ВидУчета = &ВидУчетаВР Тогда ХозрасчетныйОстатки.СуммаНачальныйОстаток ИНАЧЕ 0 КОНЕЦ", "0") +" КАК СуммаОстатокВР,
	|	0 КАК СуммаПроводки94ВР,
 	|	0 КАК КоличествоОборот,
	|	ХозрасчетныйОстатки.КоличествоНачальныйОстаток КАК КоличествоОстаток,
	|	0 КАК КоличествоПроводки94
	|ИЗ
	|	РегистрБухгалтерии." + ПланСчетов + ".ОстаткиИОбороты(&НачДата, &КонДата, , , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	NULL,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет <> &Счет94 ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет = &Счет94 ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ,
	|	0,
	|	0,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчета = &ВидУчетаПР И ХозрасчетныйОбороты.КорСчет <> &Счет94) ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ", "0") +",
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчета = &ВидУчетаПР И ХозрасчетныйОбороты.КорСчет = &Счет94) ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ", "0") +",
	|	0,
	|	0,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчета = &ВидУчетаВР И ХозрасчетныйОбороты.КорСчет <> &Счет94) ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ", "0") +",
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчета = &ВидУчетаВР И ХозрасчетныйОбороты.КорСчет = &Счет94) ТОГДА ХозрасчетныйОбороты.СуммаОборот ИНАЧЕ 0 КОНЕЦ", "0") +",
	|	0,
	|	0,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет <> &Счет94 ТОГДА ХозрасчетныйОбороты.КоличествоОборот ИНАЧЕ 0 КОНЕЦ,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии." + ПланСчетов + ".Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца ТОГДА 0 ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчетаКт = &ВидУчетаПР И ХозрасчетныйДвиженияССубконто.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ТОГДА 0 ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма КОНЕЦ", "0") +",
	|	0,
	|	0,
	|	0,
	|	" + ?( Учет = "Нал", "ВЫБОР КОГДА (ВидУчетаКт = &ВидУчетаВР И ХозрасчетныйДвиженияССубконто.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ТОГДА 0 ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма КОНЕЦ", "0") +",
	|	0,
	|	0,
	|	ВЫБОР КОГДА ХозрасчетныйДвиженияССубконто.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца ТОГДА 0 ИНАЧЕ ХозрасчетныйДвиженияССубконто.КоличествоКт КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии." + ПланСчетов + ".ДвиженияССубконто(&НачДата, &КонДата, Организация = &Организация И СчетКт В ИЕРАРХИИ (&Счет) И СчетДт = &Счет94) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИТОГИ СУММА(СуммаОборот), СУММА(КоличествоОборот), СУММА(Оборот94), СУММА(КоличествоОстаток), СУММА(СуммаОстаток), СУММА(СуммаПроводки94), СУММА(КоличествоПроводки94) ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Регистратор";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
	Пока ВыборкаСчет.Следующий() Цикл
		
		ВыборкаСубконто1 = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока ВыборкаСубконто1.Следующий() Цикл
			
			ВыборкаСубконто2 = ВыборкаСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто2");
			Пока ВыборкаСубконто2.Следующий() Цикл
				
				Выборка = ВыборкаСубконто2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто3");
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.Оборот94 = NULL Тогда
						Продолжить;
					КонецЕсли;
					Если Выборка.Оборот94 = 0 Тогда
						Продолжить;
					КонецЕсли;
					СуммаОстаток = ?(Выборка.СуммаОстаток = NULL, 0, Выборка.СуммаОстаток);
					СуммаОстатокПР = ?(Выборка.СуммаОстатокПР = NULL, 0, Выборка.СуммаОстатокПР);
					СуммаОстатокВР = ?(Выборка.СуммаОстатокВР = NULL, 0, Выборка.СуммаОстатокВР);
					КоличествоОстаток = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);
					СуммаОборот = ?(Выборка.СуммаОборот = NULL, 0, Выборка.СуммаОборот);
					СуммаОборотПР = ?(Выборка.СуммаОборотПР = NULL, 0, Выборка.СуммаОборотПР);
					СуммаОборотВР = ?(Выборка.СуммаОборотВР = NULL, 0, Выборка.СуммаОборотВР);
					Оборот94 = ?(Выборка.Оборот94 = NULL, 0, Выборка.Оборот94);
					Оборот94ПР = ?(Выборка.Оборот94ПР = NULL, 0, Выборка.Оборот94ПР);
					Оборот94ВР = ?(Выборка.Оборот94ВР = NULL, 0, Выборка.Оборот94ВР);
					КоличествоОборот = ?(Выборка.КоличествоОборот = NULL, 0, Выборка.КоличествоОборот);
					СредняяЦена = ?((КоличествоОборот + КоличествоОСтаток) = 0, 0, (СуммаОборот + СуммаОСтаток)/(КоличествоОборот + КоличествоОСтаток));
					СредняяЦенаПР = ?((КоличествоОборот + КоличествоОСтаток) = 0, 0, (СуммаОборотПР + СуммаОСтатокПР)/(КоличествоОборот + КоличествоОСтаток));
					СредняяЦенаВР = ?((КоличествоОборот + КоличествоОСтаток) = 0, 0, (СуммаОборотВР + СуммаОСтатокВР)/(КоличествоОборот + КоличествоОСтаток));
					КорректировкаОборот94 =  - Оборот94 - СредняяЦена * Выборка.КоличествоПроводки94;
					КорректировкаОборот94ПР =  - Оборот94ПР - СредняяЦенаПР * Выборка.КоличествоПроводки94;
		        	КорректировкаОборот94ВР =  - Оборот94ВР - СредняяЦенаВР * Выборка.КоличествоПроводки94;
					ТаблицаПроводок = Новый ТаблицаЗначений;
					ТаблицаПроводок.Колонки.Добавить("Регистратор");
					ТаблицаПроводок.Колонки.Добавить("Сумма");
					ТаблицаПроводок.Колонки.Добавить("СуммаПР");
					ТаблицаПроводок.Колонки.Добавить("СуммаВР");
					
					ВыборкаПроводка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
					Пока ВыборкаПроводка.Следующий() Цикл
						СтрокаТаблицыПроводок = ТаблицаПроводок.Добавить();
					        СтрокаТаблицыПроводок.Регистратор =  ВыборкаПроводка.Регистратор;
							СтрокаТаблицыПроводок.Сумма   = ?(ВыборкаПроводка.СуммаПроводки94 = NULL, 0, ВыборкаПроводка.СуммаПроводки94);
							СтрокаТаблицыПроводок.СуммаПР = ?(ВыборкаПроводка.СуммаПроводки94ПР = NULL, 0, ВыборкаПроводка.СуммаПроводки94ПР);
							СтрокаТаблицыПроводок.СуммаВР = ?(ВыборкаПроводка.СуммаПроводки94ВР = NULL, 0, ВыборкаПроводка.СуммаПроводки94ВР);
						КонецЦикла;
						Если ТаблицаПроводок.ИТОГ("Сумма") = 0 И ТаблицаПроводок.ИТОГ("СуммаПР") = 0 И ТаблицаПроводок.ИТОГ("СуммаВР") = 0 Тогда
							Продолжить;
						КонецЕсли;
						
					Коэффициент   =   ?( ТаблицаПроводок.ИТОГ("Сумма") <> 0, КорректировкаОборот94 / ТаблицаПроводок.ИТОГ("Сумма"), 0);
					КоэффициентПР = ?( ТаблицаПроводок.ИТОГ("СуммаПР") <> 0, КорректировкаОборот94ПР / ТаблицаПроводок.ИТОГ("СуммаПР"), 0);
					КоэффициентВР = ?( ТаблицаПроводок.ИТОГ("СуммаВР") <> 0, КорректировкаОборот94ВР / ТаблицаПроводок.ИТОГ("СуммаВР"), 0);
					Если Коэффициент <>  0 Тогда
					
						Для Каждого СтрокаТаблицыПроводок Из ТаблицаПроводок Цикл
							СуммаПроводки = СтрокаТаблицыПроводок.Сумма - СтрокаТаблицыПроводок.СуммаПР - СтрокаТаблицыПроводок.СуммаВР;
							Если  Коэффициент * СуммаПроводки <> 0 Тогда
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка продукции";
							
							НоваяПроводка.Сумма       = - Коэффициент * СуммаПроводки;
							
							НоваяПроводка.СчетКт = Выборка.Счет;
								
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, Выборка.Субконто1);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, Выборка.Субконто2);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, Выборка.Субконто3);
							
							НоваяПроводка.СчетДт = Счет94;
													
							Если Учет = "Нал" Тогда
								НоваяПроводка.КорректируемыйДокумент =  СтрокаТаблицыПроводок.Регистратор;
								НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
								НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
							КонецЕсли;	
						КонецЕсли;
						
							Если Учет = "Нал" Тогда
							СуммаПроводки = СтрокаТаблицыПроводок.СуммаПР;
							Если  Коэффициент * СуммаПроводки <> 0 Тогда
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка продукции";
							
							НоваяПроводка.Сумма       = - Коэффициент * СуммаПроводки;
							
							НоваяПроводка.СчетКт = Выборка.Счет;
							
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, Выборка.Субконто1);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, Выборка.Субконто2);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, Выборка.Субконто3);
							
							НоваяПроводка.СчетДт = Счет94;
							
							НоваяПроводка.КорректируемыйДокумент =  СтрокаТаблицыПроводок.Регистратор;
							НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
							НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;							
							КонецЕсли;
							СуммаПроводки = СтрокаТаблицыПроводок.СуммаВР;
							Если Коэффициент * СуммаПроводки <> 0 Тогда
							
							НоваяПроводка = мОперация.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка продукции";
							
							НоваяПроводка.Сумма       = - Коэффициент * СуммаПроводки;
							
							НоваяПроводка.СчетКт = Выборка.Счет;
							
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, Выборка.Субконто1);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, Выборка.Субконто2);
							ОбщегоНазначения.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, Выборка.Субконто3);
							
							НоваяПроводка.СчетДт = Счет94;
							
							НоваяПроводка.КорректируемыйДокумент =  СтрокаТаблицыПроводок.Регистратор;
							НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
							НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;							
							КонецЕсли;
						КонецЕсли;	
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СпособРасчетаСебестоимостиПроизводства = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Бух").СпособРасчетаСебестоимостиПроизводства;
	
	Если СпособРасчетаСебестоимостиПроизводства  = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам";
		ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПодразделениям";
		Если СтруктураДопПараметров.Учет = "Бух" Тогда
			
			ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, "Хозрасчетный");
		Иначе
			ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, "Налоговый");
		КонецЕсли;

		ПорядокПеределов = ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров);
		АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
	
КонецФункции 

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	
	// Модель поизводства ввиде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства
	
	СчетаЗатрат = Новый Массив;
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	РазрешитьУчетУслугБезПлановыхЦен = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Ложь, СтруктураШапкиДокумента.Организация, "Бух").РазрешитьУчетУслугБезПлановыхЦен;
	
	
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗатрат.Источник КАК Источник,
	               |	ТаблицаЗатрат.Подразделение КАК Подразделение,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	               |	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	               |	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	               |	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК Источник,
	               |		ХозрасчетныйОбороты.СубконтоДт1 КАК Подразделение,
	               |		ХозрасчетныйОбороты.СубконтоДт2 КАК НоменклатурнаяГруппа,
	               |		ХозрасчетныйОбороты.СчетДт КАК СчетЗатрат,
	               |		ХозрасчетныйОбороты.СубконтоКт1 КАК НоменклатураЗатрат
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		1,
	               |		ВложенныйЗапрос.Субконто1,
	               |		ВложенныйЗапрос.Субконто2,
	               |		ВложенныйЗапрос.Счет,
	               |		ХозрасчетныйОбороты.СубконтоКт1
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	               |			ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	               |			ХозрасчетныйОстатки.Счет КАК Счет
	               |		ИЗ
	               |			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |			ПО ХозрасчетныйОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто1
	               |				И ХозрасчетныйОбороты.СубконтоДт2 = ВложенныйЗапрос.Субконто2
	               |				И ХозрасчетныйОбороты.СчетДт = ВложенныйЗапрос.Счет
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		2,
	               |		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |		NULL,
	               |		ХозрасчетныйОборотыДтКт.СчетДт,
	               |		&ПустаяСтатьяЗатрат
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ТаблицаЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение КАК Подразделение,
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |			ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат КАК СчетЗатрат,
	               |			ВЫБОР
	               |				КОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция.Услуга
	               |					ТОГДА ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение
	               |				ИНАЧЕ ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция
	               |			КОНЕЦ КАК ГП
	               |		ИЗ
	               |			РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				,
	               |				СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |				    И Организация = &Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВложенныйЗапрос.СубконтоДт1,
	               |			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	               |			ВложенныйЗапрос.СчетДт,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			РегистрНакопления.РеализацияУслуг.Обороты КАК РеализацияУслугОбороты
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	               |					ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	               |					ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2
	               |				ИЗ
	               |					РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	               |				ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВложенныйЗапрос.СубконтоДт2
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ИнвентаризацияНЗП.ПодразделениеОрганизации,
	               |			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	               |			ИнвентаризацияНЗП.СчетЗатрат,
	               |			&ПустаяНоменклатура
	               |		ИЗ
	               |			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	               |				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	               |		ГДЕ
	               |			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	               |			И ИнвентаризацияНЗП.СчетЗатрат В ИЕРАРХИИ (&Счета)
	               |			И ИнвентаризацияНЗП.Организация = &Организация
	               |			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ТаблицаГП
	               |		ПО ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение
	               |			И (ВЫБОР
	               |				КОГДА ТаблицаЗатрат.Источник = 1
	               |					ТОГДА ВЫБОР
	               |								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	               |									ТОГДА ИСТИНА
	               |								ИНАЧЕ ЛОЖЬ
	               |							КОНЕЦ
	               |							И ВЫБОР
	               |								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	               |									ТОГДА ВЫБОР
	               |											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	               |												ТОГДА ИСТИНА
	               |											ИНАЧЕ ЛОЖЬ
	               |										КОНЕЦ
	               |								ИНАЧЕ ИСТИНА
	               |							КОНЕЦ
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ = ИСТИНА)";
				   
				   
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	СчетаЗатрат = Новый Массив;
	ПС = ПланыСчетов.Хозрасчетный;
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);			   
	Запрос.УстановитьПараметр("Счета",       СчетаЗатрат);
	
    Запрос.УстановитьПараметр("НачГраница",       Новый Граница(мНачДата, ВидГраницы.Исключая));
	
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПС.ОбщепроизводственныеРасходы);
	Если НЕ ПрименяетсяДиректКостинг(СтруктураШапкиДокумента.Организация) Тогда
		СчетаОбщихРасх.Добавить(ПС.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	СчетЗатрат26 = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	ПрименяетсяДиректКостинг = ПрименяетсяДиректКостинг(СтруктураШапкиДокумента.Организация);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			ТекстСообщения = "Нет базы распределения на себестоимость продукции (услуг) прямых расходов, учитываемых следующим образом:
			|Счет учета: " + Выборка.СчетЗатрат+ ".
			|Подразделение: " + Выборка.Подразделение + ".
			|Номенклатурная группа: " + Выборка.НоменклатурнаяГруппа + ".
			|База распределения: плановая себестоимость продукции.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;

		
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			Если Выборка.СчетЗатрат = СчетЗатрат26 Тогда
				Если ПрименяетсяДиректКостинг Тогда
					Продолжить;
				КонецЕсли;
				Если ТаблицаПроизводства.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;		 
			Если ТаблицаНеЗакрытыхПодразделений.Найти(Выборка.Подразделение, "Подразделение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ТекстСообщения = "Нет базы распределения на себестоимость продукции (услуг) прямых расходов, учитываемых следующим образом:
			|Счет учета: " + Выборка.СчетЗатрат+ ".
			|Подразделение: " + Выборка.Подразделение + ".
			|База распределения: плановая себестоимость продукции";
			
			Если РазрешитьУчетУслугБезПлановыхЦен Тогда
				ТекстСообщения = ТекстСообщения + " или выручка";
			КонецЕсли;
		
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Важное);			
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроизводства;
	
КонецФункции  // АнализДанныхПроизводства

Функция ПолучитьПорядокПодразделений(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
	               |ИЗ
	               |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	 Результат = Запрос.Выполнить().Выгрузить();
	 Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	 Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");

	Возврат Результат;
	
	Конецфункции
	
Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат)), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1";
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		СчетаОбщихРасх = Новый Массив;
		СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Если НЕ ПрименяетсяДиректКостинг(СтруктураШапкиДокумента.Организация) Тогда
			СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		КонецЕсли;
		Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
 КонецФункции
	
Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
 	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
								
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
	
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
  ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	
	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", ТаблицаВстречногоВыпуска);
	
	Если Не ПорядокПодразделенийСообщался Тогда
		Сообщить("Порядок переделов");
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
			НомерПередела = НомерПередела + 1;
		КонецЦикла;
		
		ПорядокПодразделенийСообщался = Истина;
	
	КонецЕсли;
	
	Возврат ТабПродукция;
		
КонецФункции

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОХРилиОПР = Ложь, СтруктураДопПараметров)
	
		
	Для Каждого Передел Из ПорядокПеределов Цикл
		
		ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Передел.Подразделение, Передел.НоменклатурнаяГруппа);

		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась среденевзвешенная стомиость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, Передел.Подразделение, Передел.НоменклатурнаяГруппа, ВыполненоРаспределениеОХРилиОПР, МассивНоменклатуры, СтруктураДопПараметров);
		
		Если МассивНоменклатуры.Количество() > 0 Тогда
			КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРилиОПР, СтруктураДопПараметров);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

// Проверка все ли подразделения, учавствующие в обороте, указаны в порядке закрытия подразделений
Процедура ПроверкаПорядкаЗакрытияПодразделений(СтруктураШапкиДокумента, ПланСчетов)
	
		ТекстЗапроса = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела) КАК КонечныйПередел,
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
	               |	NULL КАК СуммаОборот
	               |ИЗ
	               |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	ХозрасчетныйОбороты.СубконтоДт1,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборот)
	               |ИЗ
	               |	РегистрБухгалтерии."+ ПланСчетов +".ОборотыДтКт(&НачДата, &КонДата, , , , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	               |
	               |ГДЕ
	               |	(ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.СубконтоДт1
	               |
	               |ИТОГИ СУММА(КонечныйПередел), СУММА(СуммаОборот) ПО
	               |	Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Подразделение","КонечныйПередел, СуммаОборот");
	Для Каждого Результат Из РезультатЗапроса Цикл
		Если Результат.КонечныйПередел = 0 И Результат.СуммаОборот <> 0  И Не ПорядокПодразделенийСообщался Тогда
			ТекстСообщения = "Не установлен порядок подразделения " + Результат.Подразделение +"
			|для закрытия счетов, используемый
			|при расчете стоимости продукции.
			|Порядок устанавливается документом ""Установка порядка
			|подразделений для закрытия счетов""";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.ОченьВажное);

			ПорядокПодразделенийСообщался = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расет прямых затрат проводится для всех передлов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СпособОценкиМПЗ)
	
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		// Списание общепроизводственных и общехозяйственных расходов
		// на себестоимость продукции (услуг).
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
	Иначе
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
КонецПроцедуры


Процедура РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, Порядок)
	
		Счет40 = ?(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Бух").ВариантУчетаВыпускаГотовойПродукции = Перечисления.ВариантыУчетаВыпускаГотовойПродуции.СИспользованиемСчета40, Истина, Ложь);
		СтруктураДопПараметров.Вставить("Счет40", Счет40);
		
		Если СтруктураШапкиДокумента.РасчетСтоимостиПродукцииБУ И Порядок = "БУ"  Тогда
			
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Истина;
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете     = Ложь;
		мОперация = мПроводкиБУ;
		СтруктураДопПараметров.Вставить("Учет", "Бух");
		//Распределение расходов основного и вспомогательного
		// производства на сбестомиости выпущенной продукции (услуг).
		
		РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		
		РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, мУчетнаяПолитикаБУ.СпособОценкиМПЗ);
		
		мПроводкиБУ.Записать(Ложь);
		
		КорректировкаСтоимостиСписание94(СтруктураДопПараметров, СтруктураШапкиДокумента);
	
	    мПроводкиБУ.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РасчетСтоимостиПродукцииНУ И Порядок = "НУ"  Тогда
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Ложь;
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете     = Истина;
		мОперация = мПроводкиНУ;
		СтруктураДопПараметров.Вставить("Учет", "Нал");
		//Распределение расходов основного и вспомогательного
		// производства на сбестомиости выпущенной продукции (услуг).
		СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.НУ);
		СтруктураДопПараметров.Вставить("НЗП", Неопределено);
		Если Не ПорядокПеределовСообщался Тогда
			РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
		КонецЕсли;
		
        РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, мУчетнаяПолитикаНУ.СпособОценкиМПЗ);
		мПроводкиНУ.Записать(Ложь);

		Если мПоддержкаПБУ18 Тогда
			
			// Выявление временных разниц в косвенных расходах путем соспоставления оборотов счетов по каждому субконто
			НалоговыйУчет.РасчетРазницВОборотахСчета(СтруктураШапкиДокумента, мПроводкиНУ, "Прочие временные разницы", мУчетнаяПолитикаБУ["ДиректКостинг"]);
			мПроводкиНУ.Записать(Ложь);
			
			СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ПР);
			РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, мУчетнаяПолитикаНУ.СпособОценкиМПЗ);
			
			СтруктураДопПараметров.Вставить("ВидУчетаПБУ18", Перечисления.ВидыУчетаПоПБУ18.ВР);
			РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, мУчетнаяПолитикаНУ.СпособОценкиМПЗ);
		КонецЕсли;
		
		
		мПроводкиНУ.Записать(Ложь);
		
		КорректировкаСтоимостиСписание94(СтруктураДопПараметров, СтруктураШапкиДокумента);
	
	    мПроводкиНУ.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры

// вспомогательная процедура для расчета ПР и ВР НЗП
// т.к. пользователь указывает сумму НЗП по БУ и по НУ,
// то долю ПР и ВР в НЗП высчитываем по пропорции с начальными остатками НЗП
Процедура ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Подразделение, НоменклатурнаяГруппа)
	
	Если СтруктураДопПараметров.Учет = "Бух" Тогда
		СтруктураДопПараметров.Вставить("НЗП", Неопределено);
		Возврат;

	ИначеЕсли СтруктураДопПараметров.ВидУчетаПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ Тогда
		НЗП = Новый ТаблицаЗначений;
		НЗП.Колонки.Добавить("Подразделение");
		НЗП.Колонки.Добавить("НоменклатурнаяГруппа");
		НЗП.Колонки.Добавить("КонОстПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		НЗП.Колонки.Добавить("КонОстВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		СтруктураДопПараметров.Вставить("НЗП", НЗП);
		Возврат;
		
	 ИначеЕсли  СтруктураДопПараметров.ВидУчетаПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
		 // Временные разницы в остатках НЗП уже рассчитаны
		 Возврат;
		 
	 КонецЕсли;
	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.ВидУчета = &ВидУчетаПР
	               |				ТОГДА НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НЗППР,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.ВидУчета = &ВидУчетаВР
	               |				ТОГДА НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НЗПВР,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.ВидУчета = &ВидУчетаНУ
	               |				ТОГДА НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК НЗПНУ,
	               |	СУММА(0) КАК НЗПБУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |		&НачПериода,
	               |		&КонПериода,
	               |		,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет),
	               |		,
	               |		Организация = &Организация
	               |		    И Субконто1 = &Подразделение
	               |		    И Субконто2 = &НоменклатурнаяГруппа) КАК НалоговыйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	               |		&НачПериода,
	               |		&КонПериода,
	               |		,
	               |		,
	               |		Счет В ИЕРАРХИИ (&СчетБУ),
	               |		,
	               |		Организация = &Организация
	               |		    И Субконто1 = &Подразделение
	               |		    И Субконто2 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстаткиИОбороты";
				   
	Запрос.УстановитьПараметр("НачПериода",           мНачГраница);
	Запрос.УстановитьПараметр("КонПериода",           мКонГраница);
	Запрос.УстановитьПараметр("Организация",          СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаПР",           Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР",           Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаНУ",           Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Подразделение",        Подразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	Запрос.УстановитьПараметр("Счет", СписокСчетов);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Запрос.УстановитьПараметр("СчетБУ", СписокСчетов);
	
	СуммаНУ = 0; СуммаПР = 0;
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
	
	
		СуммаБУ = Результат.Итог("НЗПБУ");
		СуммаНУ = Результат.Итог("НЗПНУ");
		СуммаПР = Результат.Итог("НЗППР");
		СуммаВР = Результат.Итог("НЗПВР");
		
		Если  СуммаВР + СуммаПР <> 0 Тогда
			КонОстПР = СуммаПР * (СуммаБУ - СуммаНУ) / (СуммаВР + СуммаПР);
			КонОстВР = СуммаВР * (СуммаБУ - СуммаНУ) / (СуммаВР + СуммаПР);
		Иначе
			КонОстПР = СуммаПР + (СуммаБУ - СуммаНУ) / 2;
			КонОстВР = СуммаВР + (СуммаБУ - СуммаНУ) / 2;
		КонецЕсли;
		НЗП                            = СтруктураДопПараметров.НЗП;
		СтрокиНЗП                      = НЗП.Добавить();
		СтрокиНЗП.Подразделение        = Подразделение;
		СтрокиНЗП.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		СтрокиНЗП.КонОстПР             = КонОстПР;
		СтрокиНЗП.КонОстВР             = КонОстВР;
		
		СтруктураДопПараметров.Вставить("НЗП", НЗП);

КонецПроцедуры
//ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	РазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	
	Если мУчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
		Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
	Иначе
		Счет90 = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Счет90", 			Счет90);
	Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2","")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт = &Счет90, , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиТН.Субконто2","")+"
	|
	|ИТОГИ ПО
	|	Склады"+?(РазделятьПоСтавкамНДС,",
	|	СтавкиНДС","");
	
	ВыборкаПоСкладам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		Если РазделятьПоСтавкамНДС Тогда
			ВыборкаПоСтавкамНДС = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
			Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
				
				//Расчет торговой наценки
				ТН = ВыборкаПоСтавкамНДС.ТорговаяНаценкаОстаток;
				ПС = ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьОстаток;
				ОБ = ВыборкаПоСтавкамНДС.ПродажнаяСтоимостьРеализация;
				
				Если ПС + ОБ = 0 Тогда
					Продолжить;
				Иначе
					СуммаНаценки = ТН * ОБ / (ПС + ОБ);
				КонецЕсли;
				
				Если СуммаНаценки > 0 Тогда
					
					//Формируем проводку по списанию торговой наценки
					Проводка = мПроводкиБУ.Добавить();
					Проводка.Период                    = Дата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт                    = Счет90;
					Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  ВыборкаПоСтавкамНДС.СтавкиНДС);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСтавкамНДС.Склады);
					Проводка.Сумма                     = - СуммаНаценки;
					Проводка.Содержание                = "Торговая наценка";
					Проводка.НомерЖурнала              = "ТВ";
					
				КонецЕсли;
			КонецЦикла;
		Иначе
			//Расчет торговой наценки
			ТН = ВыборкаПоСкладам.ТорговаяНаценкаОстаток;
			ПС = ВыборкаПоСкладам.ПродажнаяСтоимостьОстаток;
			ОБ = ВыборкаПоСкладам.ПродажнаяСтоимостьРеализация;
			
			Если ПС + ОБ = 0 Тогда
				Продолжить;
			Иначе
				СуммаНаценки = ТН * ОБ / (ПС + ОБ);
			КонецЕсли;
			
			Если СуммаНаценки > 0 Тогда
				
				//Формируем проводку по списанию торговой наценки
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Счет90;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоСкладам.Склады);
				Проводка.Сумма                     = - СуммаНаценки;
				Проводка.Содержание                = "Торговая наценка";
				Проводка.НомерЖурнала              = "ТВ";
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//АТТ
	РазделятьПоПартиям = УправлениеЗапасамиПартионныйУчет.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Счет90_02 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			мНачГраница);
	Запрос.УстановитьПараметр("ДатаКон", 			мКонГраница);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Счет90_02", 			Счет90_02);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	//Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СубСчет90_02,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТорговаяНаценкаОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПродажнаяСтоимостьОстаток,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ПродажнаяСтоимостьРеализация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "")+"
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90_02), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыДтКт.СубконтоКт3", "")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиТН.Субконто3", "")+",
	|	ХозрасчетныйОборотыДтКт.СчетДт
	|
	|ИТОГИ ПО
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СубСчет90_02";
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
		Пока ВыборкаПоСкладам.Следующий() Цикл
			ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
			Пока ВыборкаПоПартиям.Следующий() Цикл
				
				ТН = ВыборкаПоПартиям.ТорговаяНаценкаОстаток;
				ПС = ВыборкаПоПартиям.ПродажнаяСтоимостьОстаток;
				ОБ_Всего = ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
				
				ВыборкаПоСчетам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СубСчет90_02");
				Пока ВыборкаПоСчетам.Следующий() Цикл
					//Расчет торговой наценки
					
					ОБ = ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
					
					Если ПС + ОБ_Всего = 0 Тогда
						Продолжить;
					Иначе
						СуммаНаценки = ТН * ОБ / (ПС + ОБ_Всего);
					КонецЕсли;
					
					Если СуммаНаценки > 0 Тогда
						
						//Формируем проводку по списанию торговой наценки
						Проводка = мПроводкиБУ.Добавить();
						Проводка.Период                    = Дата;
						Проводка.Организация               = СтруктураШапкиДокумента.Организация;
						Проводка.СчетДт                    = ВыборкаПоСчетам.СубСчет90_02;
						Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  ВыборкаПоПартиям.Номенклатура);
						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  ВыборкаПоПартиям.Склады);
						Если РазделятьПоПартиям Тогда
							ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  ВыборкаПоПартиям.Партия);
						КонецЕсли;
						Проводка.Сумма                     = - СуммаНаценки;
						Проводка.Содержание                = "Торговая наценка";
						Проводка.НомерЖурнала              = "ТВ";
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Функция БазаРаспределенияПоВыручке(СтруктураШапкиДокумента)

	// Расчет базы распределения
	ТекстЗапроса = "ВЫБРАТЬ
		|	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕНВД,
		|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
		|	СУММА(-(ХозрасчетныйОбороты.СуммаОборот)) КАК База
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Период, Счет В ИЕРАРХИИ (&СчетаБазы), , Организация = &Организация) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|	ХозрасчетныйОбороты.Субконто1";
		
	//Массив счетов, по которым формируется база распределения расходов
	СчетаБазы = Новый Массив;
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачГраница",      мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД", ОбщегоНазначения.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("СчетаБазы",       СчетаБазы);
	
	//Убрать отрицательные значения
	Результат = Запрос.Выполнить().Выгрузить();
	
	КолвоЭлементов = Результат.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		Строка = Результат[КолвоЭлементов - ОбратныйИндекс];
		Если Строка.База < 0 Тогда
			Результат.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // БазаРаспределенияПоВыручке()

Функция БазаРаспределенияПоВыручкеПокупныхТоваров(СтруктураШапкиДокумента)  
	
	ИмяПланаСчетов = "Хозрасчетный";

	// Расчет Ном.групп., которые использовались для реализации покупных товаров
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕНВД,
	               |	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	               |	СУММА(-(ХозрасчетныйОбороты.СуммаОборот)) КАК База
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Период, Счет В ИЕРАРХИИ (&СчетаБазы), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&КорСчетаБазы), ) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
		
	//Массив счетов, по которым формируется база распределения расходов
	СчетаБазы = Новый Массив;
	СчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].СебестоимостьПродаж);
	
	КорСчетаБазы = Новый Массив;
	КорСчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
	КорСчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].ПокупныеТоварыОтгруженные);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачГраница",      мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД", ОбщегоНазначения.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("СчетаБазы",       СчетаБазы);
	Запрос.УстановитьПараметр("КорСчетаБазы",    КорСчетаБазы);
	
	ТаблицаНомГрупп = Запрос.Выполнить().Выгрузить();
	
	// Расчет базы распределения
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕНВД,
	               |	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	               |	СУММА(-(ХозрасчетныйОбороты.СуммаОборот)) КАК База
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Период, Счет В ИЕРАРХИИ (&СчетаБазы), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Субконто1 В (&Субконто1)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
		
	//Массив счетов, по которым формируется база распределения расходов
	СчетаБазы = Новый Массив;
	СчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].Выручка);
	СчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].Продажи_НДС);
	СчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].Продажи_Акцизы);
	СчетаБазы.Добавить(ПланыСчетов[ИмяПланаСчетов].Продажи_ЭкспортныеПошлины);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачГраница",      мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД", ОбщегоНазначения.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("СчетаБазы",       СчетаБазы);
	Запрос.УстановитьПараметр("Субконто1",       ТаблицаНомГрупп.ВыгрузитьКолонку("НоменклатурнаяГруппа"));
	
    Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции // БазаРаспределенияПоВыручке()

Функция ПрименяетсяДиректКостинг(УказаннаяОрганизация) Экспорт
	
	Применяется = Ложь;
	
	Отказ = Ложь;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(УказаннаяОрганизация) Тогда
	Иначе
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, УказаннаяОрганизация);
		Если Не Отказ Тогда
			Применяется = УчетнаяПолитика.ДиректКостинг;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Применяется;

КонецФункции // ПрименяетсяДиректКостинг()


Процедура ЗакрытиеСчета26(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Процедура выполняется только для целей бухгалтерского учета.
	Если Не СтруктураШапкиДокумента.ЗакрытиеСчета26 Или Не ПрименяетсяДиректКостинг(Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	// Расчет суммы общехозяйственных расходов
	СчетОХР = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	   |	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД КАК ВидРаспределенияПоВидамДеятельности,
	   |	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК Сумма
	   |ИЗ
	   |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Месяц, Счет = &СчетЗатрат, &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД";
	
	Запрос.УстановитьПараметр("НачГраница",  мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",  СчетОХР);
	Запрос.УстановитьПараметр("ВидыСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Если общехозяйственных расходов, подлежащих
	// распределению нет, то выходим из процедуры.
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой()  Тогда
		Возврат;
	КонецЕсли; 
	
	СчетСписанияЕНВД = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД;
	СчетСписанияНеЕНВД = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД;
	
	// Формирование таблицы-базы распределения общехозяйственных расходов.
	ТаблицаБазыРаспределения = БазаРаспределенияПоВыручке(СтруктураШапкиДокумента);
	
	МассивКоэф = Новый Массив;
	СтруктПоиска = Новый Структура;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		МассивКоэф.Очистить(); // подготовка массива коэффициентов распределения
		ВсегоБазаРаспределения = 0;
		
		//  В зависимости от способа распределения расходов формируем базу распределения
		Если Обход.ВидРаспределенияПоВидамДеятельности = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
			СтруктПоиска.Вставить("ЕНВД", Истина);
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения.НайтиСтроки(СтруктПоиска);
			
			Для Каждого Строка Из НаборСтрокБазыРаспределения Цикл
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.База;
				МассивКоэф.Добавить(Строка.База);
			КонецЦикла;
			
		ИначеЕсли Обход.ВидРаспределенияПоВидамДеятельности = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Тогда
			СтруктПоиска.Вставить("ЕНВД", Ложь);
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения.НайтиСтроки(СтруктПоиска);
			
			Для Каждого Строка Из НаборСтрокБазыРаспределения Цикл
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.База;
				МассивКоэф.Добавить(Строка.База);
			КонецЦикла;
			
		Иначе
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения;
			ВсегоБазаРаспределения = НаборСтрокБазыРаспределения.Итог("База");
			МассивКоэф = ТаблицаБазыРаспределения.ВыгрузитьКолонку("База");
		КонецЕсли; 
		
		// Если нет базы распределения расходов, то сообщаем об этом.
		Если ВсегоБазаРаспределения = 0 Тогда
			
			ТекстСообщения = "Отсутствует база распределения общехозяйственных расходов
					|для которых в статье затрат указана следующая принадлежность
					|к виду деятельности:" +  Обход.ВидРаспределенияПоВидамДеятельности + ".";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
		Иначе
			
			МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(Обход.Сумма, МассивКоэф, 2);
			Если МассивСумм <> Неопределено Тогда
				Для К = 0 По МассивСумм.ВГраница() Цикл
				
					НоваяПроводка = мПроводкиБУ.Добавить();
					НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
					НоваяПроводка.Активность  = Истина;
					НоваяПроводка.Период      = Дата;
					НоваяПроводка.Содержание  = "Списание общехозяйственных расходов";
						
					НоваяПроводка.Сумма  = МассивСумм[К];
						
					НоваяПроводка.СчетКт = СчетОХР;
					
					НоваяПроводка.СчетДт = ?(НаборСтрокБазыРаспределения[К].ЕНВД, СчетСписанияЕНВД, СчетСписанияНеЕНВД);
					ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы",  НаборСтрокБазыРаспределения[К].НоменклатурнаяГруппа);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

// Процедура списывает коммерческие и расходы и издержки обращения.
//
Процедура СписаниеКоммерческихРасходовИИздережекОбращения(СтруктураШапкиДокумента, КоммерческиеРасходы = Истина)
	
	Если КоммерческиеРасходы Тогда
		СчетЗатрат   = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы;
		
	Иначе // издержки обращения
		СчетЗатрат   = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	КонецЕсли;
	
	// Расчет суммы расходов.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	   |	ХозрасчетныйОстатки.Счет КАК СчетЗатрат,
	   |	ХозрасчетныйОстатки.Субконто1 КАК СтатьяЗатрат,
	   |	ХозрасчетныйОстатки.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД КАК ВидРаспределенияПоВидамДеятельности,
	   |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	   |ИЗ
	   |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	ХозрасчетныйОстатки.Счет,
	   |	ХозрасчетныйОстатки.Субконто1
	   |
	   |ИТОГИ ПО
	   |	ВидРаспределенияПоВидамДеятельности";
	
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",  СчетЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	ВсегоРасходов = 0;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	Если ТаблицаРезультат.Количество() > 0 Тогда
		ВсегоРасходов = ТаблицаРезультат.Итог("Сумма");
	КонецЕсли; 
	
	// Если расходов, подлежащих распределению нет, то выходим из процедуры.
	Если ВсегоРасходов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаБазыРаспределения = БазаРаспределенияПоВыручке(СтруктураШапкиДокумента);
	ТаблицаБазыРаспределенияТР     = БазаРаспределенияПоВыручкеПокупныхТоваров(СтруктураШапкиДокумента);
	ТаблицаБазыРаспределенияНеЕНВД =ТаблицаБазыРаспределенияТР.Скопировать();
	ТаблицаБазыРаспределенияЕНВД   =ТаблицаБазыРаспределенияТР.Скопировать();
	Для К = 0 По  ТаблицаБазыРаспределенияТР.Количество() - 1 Цикл
		СтрокаНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.Получить(К);
		СтрокаНеЕНВД.База = ?(СтрокаНеЕНВД.ЕНВД, 0, СтрокаНеЕНВД.База);
		СтрокаЕНВД = ТаблицаБазыРаспределенияЕНВД.Получить(К);
		СтрокаЕНВД.База = ?(СтрокаЕНВД.ЕНВД, СтрокаЕНВД.База, 0);
	КонецЦикла;
	
	МассивКоэфРаспр  = ТаблицаБазыРаспределенияТР.ВыгрузитьКолонку("База");
	МассивКоэфНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.ВыгрузитьКолонку("База");
	МассивКоэфЕНВД   = ТаблицаБазыРаспределенияЕНВД.ВыгрузитьКолонку("База");
	
	СчетСписанияЕНВД   = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД;
	СчетСписанияНеЕНВД = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД;
	
	МассивКоэф = Новый Массив;
	МассивКоэфТР = Новый Массив;
	СтруктПоиска = Новый Структура;
	ТаблицаТР = Новый ТаблицаЗначений;   // для транспортных расходов
	ТаблицаТР.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаТР.Колонки.Добавить("Сумма");
	
	ОбходПоВидамРаспределения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоВидамРаспределения.Следующий() Цикл

		МассивКоэф.Очистить(); // подготовка массива коэффициентов распределения
		ВсегоБазаРаспределения = 0;
		МассивКоэфТР.Очистить();
		
		//  В зависимости от способа распределения расходов формируем базу распределения
		Если ОбходПоВидамРаспределения.ВидРаспределенияПоВидамДеятельности = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
			СтруктПоиска.Вставить("ЕНВД", Истина);
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения.НайтиСтроки(СтруктПоиска);
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределения;
			Для Каждого Строка Из НаборСтрокБазыРаспределения Цикл
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.База;
				МассивКоэф.Добавить(Строка.База);
				МассивКоэфТР.Добавить(Строка.База);
			КонецЦикла;
			
		ИначеЕсли ОбходПоВидамРаспределения.ВидРаспределенияПоВидамДеятельности = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Тогда
			СтруктПоиска.Вставить("ЕНВД", Ложь);
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения.НайтиСтроки(СтруктПоиска);
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределения;
			Для Каждого Строка Из НаборСтрокБазыРаспределения Цикл
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.База;
				МассивКоэф.Добавить(Строка.База);
				МассивКоэфТР.Добавить(Строка.База);
			КонецЦикла;
		Иначе
			НаборСтрокБазыРаспределения = ТаблицаБазыРаспределения;
			ВсегоБазаРаспределения  = НаборСтрокБазыРаспределения.Итог("База");
			МассивКоэф = ТаблицаБазыРаспределения.ВыгрузитьКолонку("База");
			
		КонецЕсли; 
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияТР;
			МассивКоэфТР=ТаблицаБазыРаспределенияТР.ВыгрузитьКолонку("База");
		
		// Если нет базы распределения расходов, то сообщаем об этом.
		Если ВсегоБазаРаспределения = 0 Тогда
			
			Если КоммерческиеРасходы Тогда
				ТекстСообщения = "Отсутствует база распределения коммерческих расходов
					|для которых в статье затрат указана следующая принадлежность
					|к виду деятельности:" +  ОбходПоВидамРаспределения.ВидРаспределенияПоВидамДеятельности + ".";
					
			Иначе // издержки обращения
				ТекстСообщения = "Отсутствует база распределения издержек обращения
				    |для которых в статье затрат указана следующая принадлежность
					|к виду деятельности:" +  ОбходПоВидамРаспределения.ВидРаспределенияПоВидамДеятельности + ".";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
			
		Иначе
		
			Обход = ОбходПоВидамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				 // Транспортные расходы выделим в отдельную ТЗ и рассчитаем позже
				Если (Обход.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы) и Не(КоммерческиеРасходы) Тогда
					СтрокаТР              = ТаблицаТР.Добавить();
					СтрокаТР.СтатьяЗатрат = Обход.СтатьяЗатрат;
					СтрокаТР.Сумма        = Обход.Сумма;
					
				Иначе
					 // Остальные расходы, распеределим
					МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(Обход.Сумма, МассивКоэф, 2);
					Если МассивСумм <> Неопределено Тогда
						Для К = 0 По МассивСумм.ВГраница() Цикл
							
							НоваяПроводка = мПроводкиБУ.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							
							Если КоммерческиеРасходы Тогда
								НоваяПроводка.Содержание  = "Списание коммерческих расходов";
								
							Иначе // издержки обращения
								НоваяПроводка.Содержание  = "Списание издержек обращения";
							КонецЕсли;
							
							НоваяПроводка.Сумма  = МассивСумм[К];
							
							НоваяПроводка.СчетКт = СчетЗатрат;
							ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", Обход.СтатьяЗатрат);
							
							НоваяПроводка.СчетДт = ?(НаборСтрокБазыРаспределения[К].ЕНВД, СчетСписанияЕНВД, СчетСписанияНеЕНВД);
							ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы",  НаборСтрокБазыРаспределения[К].НоменклатурнаяГруппа);
							
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	 // Расчет транспортных расходов
	ПараметрыТР = Новый Структура("СуммаРасходовКсписанию,НачОстатокТоваров,ПриходТовара,СуммаРеализованныхТоваров,СуммаРеализованныхТоваровЕНДВ,Списано,КонОстатокТоваров,СреднийПроцент,СуммаРасходов",
								  0,0,0,0,0,0,0,0,ТаблицаТР.Итог("Сумма"));
	НалоговыйУчет.РасчетТранспортныхРасходов(мНачДата,Дата,Организация,"Хозрасчетный",ПараметрыТР);
	
				   ТаблицаБазыРаспределенияТР     = БазаРаспределенияПоВыручкеПокупныхТоваров(СтруктураШапкиДокумента);
				   ТаблицаБазыРаспределенияНеЕНВД =ТаблицаБазыРаспределенияТР.Скопировать();
				   ТаблицаБазыРаспределенияЕНВД   =ТаблицаБазыРаспределенияТР.Скопировать();
				   Для К = 0 По  ТаблицаБазыРаспределенияТР.Количество() - 1 Цикл
					     СтрокаНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.Получить(К);
						 СтрокаНеЕНВД.База = ?(СтрокаНеЕНВД.ЕНВД, 0, СтрокаНеЕНВД.База);
						 СтрокаЕНВД = ТаблицаБазыРаспределенияЕНВД.Получить(К);
						 СтрокаЕНВД.База = ?(СтрокаЕНВД.ЕНВД, СтрокаЕНВД.База, 0);
					 КонецЦикла;
						 
				   МассивКоэфРаспр  = ТаблицаБазыРаспределенияТР.ВыгрузитьКолонку("База");
				   МассивКоэфНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.ВыгрузитьКолонку("База");
				   МассивКоэфЕНВД   = ТаблицаБазыРаспределенияЕНВД.ВыгрузитьКолонку("База");
				   
				   Если ТаблицаТР.Итог("Сумма") = 0 Тогда
					   Возврат;
				   КонецЕсли;
				   	
	СуммаВсего = ПараметрыТР.СуммаРасходовКсписанию;
    КоэффициентСписания = ПараметрыТР.СуммаРасходовКсписанию / ТаблицаТР.Итог("Сумма");

	Для Каждого СтрокаТаблицаТР Из ТаблицаТР Цикл
		СуммаКСписанию = Окр (КоэффициентСписания * СтрокаТаблицаТР.Сумма, 2);
		
		Если СуммаКСписанию = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицаТР.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
			МассивКоэфТР = МассивКоэфРаспр;
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияТР;
		ИначеЕсли СтрокаТаблицаТР.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Тогда
			МассивКоэфТР = МассивКоэфНеЕНВД;
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияНеЕНВД;
		Иначе
			МассивКоэфТР = МассивКоэфЕНВД;
			НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияЕНВД;
		КонецЕсли;
		
		МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(СуммаКСписанию, МассивКоэфТР, 2);
		Если МассивСумм <> Неопределено Тогда
			Для К = 0 По МассивСумм.ВГраница() Цикл
				
				Если  МассивСумм[К] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяПроводка = мПроводкиБУ.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Активность  = Истина;
				НоваяПроводка.Период      = Дата;
				НоваяПроводка.Содержание  = "Списание транспортных расходов";
				
				НоваяПроводка.Сумма  = МассивСумм[К];
				НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
				ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицаТР.СтатьяЗатрат);
				
				НоваяПроводка.СчетДт = ?(НаборСтрокБазыРаспределенияТР[К].ЕНВД, СчетСписанияЕНВД, СчетСписанияНеЕНВД);
				ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы",  НаборСтрокБазыРаспределенияТР[К].НоменклатурнаяГруппа);
				
			КонецЦикла;
		КонецЕсли;	
	 КонецЦикла;
	 
КонецПроцедуры // СписаниеКоммерческихРасходов()

Процедура ЗакрытиеСчета44_1(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета44_1 Тогда
		Возврат;
	КонецЕсли; 
	
	СписаниеКоммерческихРасходовИИздережекОбращения(СтруктураШапкиДокумента, Ложь);
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

Процедура ЗакрытиеСчета44_2(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета44_2 Тогда
		Возврат;
	КонецЕсли; 
	
	СписаниеКоммерческихРасходовИИздережекОбращения(СтруктураШапкиДокумента, Истина);
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

Процедура ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета90 Тогда
		Возврат;
	КонецЕсли;

	Сч_90_01 = ПланыСчетов.Хозрасчетный.Выручка;
	Сч_90_02 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	Сч_90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	Сч_90_04 = ПланыСчетов.Хозрасчетный.Продажи_Акцизы;
	Сч_90_05 = ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины;
	Сч_90_07 = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	Сч_90_08 = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	Сч_90_09 = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
	Сч_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	Сч_99_01_2 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;

	// По деятельности, не облагаемой ЕНВД
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(Сч_90_01);
	СписокСчетов.Добавить(Сч_90_02);
	СписокСчетов.Добавить(Сч_90_03);
	СписокСчетов.Добавить(Сч_90_04);
	СписокСчетов.Добавить(Сч_90_05);
	СписокСчетов.Добавить(Сч_90_07);
	СписокСчетов.Добавить(Сч_90_08);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|
	|ГДЕ
	|	((СчетаДоходовИРасходовЕНВД.Счет.Ссылка) ЕСТЬ NULL )";
	Выборка = Запрос.Выполнить().Выбрать();

	ФинансовыйРезультат = 0;

	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат = ФинансовыйРезультат + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_90_09;
		Проводка.СчетКт                    = Сч_99_01_1;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_1;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = Сч_90_09;
		Проводка.Сумма                     = - ФинансовыйРезультат;
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли; 
	
	// По деятельности, облагаемой ЕНВД

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ХозрасчетныйОбороты.Счет = СчетаДоходовИРасходовЕНВД.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ФинансовыйРезультат = 0;

	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат = ФинансовыйРезультат + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_90_09;
		Проводка.СчетКт                    = Сч_99_01_2;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_2;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = Сч_90_09;
		Проводка.Сумма                     = - ФинансовыйРезультат;
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

Процедура ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчета91 Тогда
		Возврат;
	КонецЕсли;
	
	Сч_91_09 = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
	Сч_91_01 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Сч_91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Сч_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	Сч_99_01_2 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(Сч_91_01);
	СписокСчетов.Добавить(Сч_91_02);
	
	// Распределение расходов на счете 91.02
	Коэффициент = ОбщегоНазначения.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", Сч_91_02);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидСубконто91",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ОтнесениеРасходовКДеятельностиЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), &ВидСубконто91, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтнесениеРасходовКДеятельностиЕНВД";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СальдоПрочихДоходовИРасходов = 0;
	СальдоПрочихДоходовИРасходовЕНВД = 0;
	СальдоПрочихДоходовИРасходовНеЕНВД = 0;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
		СальдоПрочихДоходовИРасходовЕНВД = СальдоПрочихДоходовИРасходовЕНВД + Окр(Коэффициент*(Выборка.СуммаОборотКт - Выборка.СуммаОборотДт), 2, 1);
	КонецЦикла;
	СальдоПрочихДоходовИРасходовНеЕНВД = СальдоПрочихДоходовИРасходов - СальдоПрочихДоходовИРасходовЕНВД;
	
	// По деятельности, не облагаемой ЕНВД
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидСубконто91",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ОтнесениеРасходовКДеятельностиЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), &ВидСубконто91, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтнесениеРасходовКДеятельностиЕНВД";
	
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходовНеЕНВД;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если СальдоПрочихДоходовИРасходов > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_91_09;
		Проводка.СчетКт                    = Сч_99_01_1;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.Сумма                     = СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если СальдоПрочихДоходовИРасходов < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_1;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.СчетКт                    = Сч_91_09;
		Проводка.Сумма                     = - СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	// По деятельности, облагаемой ЕНВД
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидСубконто91",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ОтнесениеРасходовКДеятельностиЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), &ВидСубконто91, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтнесениеРасходовКДеятельностиЕНВД";
	
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходовЕНВД;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
	КонецЦикла;

	Если СальдоПрочихДоходовИРасходов > 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_91_09; 
		Проводка.СчетКт                    = Сч_99_01_2;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.Сумма                     = СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;

	Если СальдоПрочихДоходовИРасходов < 0 Тогда

		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = Сч_99_01_2;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.СчетКт                    = Сч_91_09;
		Проводка.Сумма                     = - СальдоПрочихДоходовИРасходов;
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";

	КонецЕсли;
	
	// Статьи прочих доходов и расходов с не установленным видом отнесения расходов к деятельности ЕНВД
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидСубконто91",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ОтнесениеРасходовКДеятельностиЕНВД", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СписокСчетов), &ВидСубконто91, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтнесениеРасходовКДеятельностиЕНВД";
	
	Выборка = Запрос.Выполнить().Выбрать();

	СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходовНеЕНВД;

	Пока Выборка.Следующий() Цикл
		СальдоПрочихДоходовИРасходов = СальдоПрочихДоходовИРасходов + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
		Если  СальдоПрочихДоходовИРасходов <> 0 Тогда  
			ТекстСообщения = "У статьи прочих доходов и расходов " + Выборка.Субконто1 + " не установлен вид отнесения расходов к деятельности ЕНВД";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
			
			ТекстСообщения = "Счет " + Выборка.Счет + " по статье " + Выборка.Субконто1 + " закрыт не будет";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект), СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ НУ

// Возвращает значение нормы, соответствующее проценту от выручки
//
Функция ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, Процент)

	// Формируем массив счетов учета выручки
	СписокСчетовПоВыручке = Новый Массив;
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.Выручка);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПокупныхТоваров);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОсновныхСредств);
	//СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииНематериальныхАктивов);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииИмущественныхПрав);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииЦенныхБумаг);

	// Формируем запрос по счетам учета выручки
	ЗапросПоВыручке = Новый Запрос;
	ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", мНачГода);
	ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  мКонДата);
	ЗапросПоВыручке.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	ЗапросПоВыручке.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	ЗапросПоВыручке.УстановитьПараметр("СписокСчетовПоВыручке", СписокСчетовПоВыручке);
	ЗапросПоВыручке.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОбороты.СуммаОборотКт КАК ОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет в (&СписокСчетовПоВыручке), , (Организация = &Организация) и (ВидУчета = &ВидУчета), , ) КАК НалоговыйОбороты";
	ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();

	// Собирам выручку
	ВыручкаНУ = 0;
	Пока ВыборкаВыручки.Следующий() Цикл
		ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
	КонецЦикла;

	// Определяем норму
	Возврат Окр((ВыручкаНУ * Процент / 100), 2, 1);

КонецФункции // ОпределитьНормуРасходовПоВыручке()

// Возвращает значение нормы, соответствующее проценту от расходов на оплату труда
// с учетом или без учета расходов на добровольное страхование работников
Функция ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, Процент, ВключатьДобровольноеСтрахование = Ложь)

	// Определяем сумму расходов по виду затрат "Оплата труда"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЕНВД",     ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("Счет70",        ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет97",        ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ОплатаТрудаРБП",Справочники.РасходыБудущихПериодов.РБПНаОплатуТруда);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ) КАК СуммаРасходовНаОплатуТруда,
	               |	СУММА(ВЫБОР
	               |			КОГДА СписаноНаЕНВД.СуммаОборотКт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ СписаноНаЕНВД.СуммаОборотКт
	               |		КОНЕЦ) КАК СписаноНаЕНВД,
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета,
	               |		КорСчет В ИЕРАРХИИ (&Счет70),
	               |		) КАК НалоговыйОбороты
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета,
	               |		КорСчет = &СчетЕНВД,
	               |		) КАК СписаноНаЕНВД
	               |		ПО НалоговыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ),
	               |	СУММА(ВЫБОР
	               |			КОГДА СписаноНаЕНВД.СуммаОборотКт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ СписаноНаЕНВД.СуммаОборотКт
	               |		КОНЕЦ),
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета
	               |		    И КорСубконто1 = &ОплатаТрудаРБП,
	               |		КорСчет В ИЕРАРХИИ (&Счет97),
	               |		) КАК НалоговыйОбороты
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета,
	               |		КорСчет = &СчетЕНВД,
	               |		) КАК СписаноНаЕНВД
	               |		ПО НалоговыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ";
				   
				   
	ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();

	НаОплатуТруда = 0;
	Пока ВыборкаНаОплатуТруда.Следующий() Цикл
		НаОплатуТруда = НаОплатуТруда + ВыборкаНаОплатуТруда.СуммаРасходовНаОплатуТруда - ВыборкаНаОплатуТруда.СписаноНаЕНВД;
	КонецЦикла;

	Если ВключатьДобровольноеСтрахование Тогда

		// Определяем сумму расходов по виду затрат добровольное страхование работников
		СписокКоррСчетов = Новый Массив;
		СписокКоррСчетов.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
		СписокКоррСчетов.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);

		СписокВидовЗатрат = Новый Массив;
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",     мНачГода);
		Запрос.УстановитьПараметр("КонецМесяца",      мКонДата);
		Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидЗатрат",        СписокВидовЗатрат);
		Запрос.УстановитьПараметр("СписокКоррСчетов", СписокКоррСчетов);
		Запрос.УстановитьПараметр("Организация",      СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ВидУчета",         Перечисления.ВидыУчетаПоПБУ18.НУ);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НалоговыйОбороты.СуммаОборотДт КАК ОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, (Организация = &Организация) и (ВидУчета = &ВидУчета) ,КорСчет в (&СписокКоррСчетов) , ) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.Субконто1.ВидРасходовНУ В (&ВидЗатрат)";
		ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();

		Пока ВыборкаНаОплатуТруда.Следующий() Цикл
			НаОплатуТруда = НаОплатуТруда + ?(ВыборкаНаОплатуТруда.ОборотКт = Null, 0, ВыборкаНаОплатуТруда.ОборотКт);
		КонецЦикла;

	КонецЕсли;

	// Определяем норму
	Возврат Окр((НаОплатуТруда * Процент / 100), 2, 1);

КонецФункции //ОпределитьНормуПоРасходамНаОплатуТруда()

// Производит нормирование расходов, для которых норма задана фиксированной суммой на работника
//
Процедура НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, ВидЗатрат)

	// найдем период для анализа ранее нормированных расходов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("СчетРБП",        ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников);
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчета",       Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	МИНИМУМ(ЕСТЬNULL(НалоговыйОбороты.СубконтоКт1.ДатаНачалаСписания, &НачалоМесяца)) КАК Субконто1ДатаНачалаСписания
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		&ВидКорСубконто,
	               |		СчетКт В ИЕРАРХИИ (&СчетРБП),
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |		    И ВидУчетаКт = &ВидУчета
	               |		    И СубконтоДт1.ВидРасходовНУ = &ВидЗатрат) КАК НалоговыйОбороты";
				   
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НачалоПериодаСтрахования = Результат.Выбрать();
	Пока НачалоПериодаСтрахования.Следующий() Цикл
	ДатаНачалаПериодаСтрахования = НачалоПериодаСтрахования.Субконто1ДатаНачалаСписания;
	КонецЦикла;
	
	ДатаНачалаПериодаСтрахования = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДатаНачалаПериодаСтрахования), мНачДата, ДатаНачалаПериодаСтрахования);
	// Формируем запрос по затратам в разрезе работников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   ДатаНачалаПериодаСтрахования);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  НалоговыйУчет.ПолучитьМассивСчетовУчетаКосвенныхРасходов());
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчета",       Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.Текст = "ВЫБРАТЬ
	   |	НалоговыйОбороты.Счет КАК Счет,
	   |	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	   |	НалоговыйОбороты.КорСубконто1 КАК Работник,
	   |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ОборотДт,
	   |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК ОборотКт
	   |ИЗ
	   |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов), &ВидСубконто, Организация = &Организация И ВидУчета = &ВидУчета И Субконто1.ВидРасходовНУ = &ВидЗатрат, , &ВидКорСубконто) КАК НалоговыйОбороты
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	НалоговыйОбороты.КорСубконто1,
	   |	НалоговыйОбороты.Субконто1,
	   |	НалоговыйОбороты.Счет";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НеСписано");
	ТаблицаРасходов.Колонки.Добавить("МожноСписать");

	Для каждого Расход из ТаблицаРасходов Цикл
		Расход.НеСписано = Расход.ОборотДт - Расход.ОборотКт;
	КонецЦикла;

	// Определяем сумму расхода по нормам (с начала года)
	ТаблицаРасходов.Сортировать("Работник  Возр, НеСписано Возр");
	ТекущийРаботник = Неопределено;

	Для Каждого Расход из ТаблицаРасходов Цикл

		Если ТекущийРаботник = Неопределено Тогда
			Норма = 10000;
			ТекущийРаботник = Расход.Работник;

		ИначеЕсли ТекущийРаботник <> Расход.Работник Тогда
			Норма = 10000;
			ТекущийРаботник = Расход.Работник;

		КонецЕсли;

		Если Норма > Расход.НеСписано Тогда
			Расход.МожноСписать = Расход.НеСписано;
			Норма = Норма - Расход.МожноСписать;

		Иначе
			Расход.МожноСписать = Норма;
			Норма = 0;

		КонецЕсли;

	КонецЦикла;

	ТаблицаРасходов.Свернуть("СтатьяЗатрат, Счет ", "НеСписано, МожноСписать");

	// Формируем запрос по признанным расходам
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", ДатаНачалаПериодаСтрахования);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ЗнСубконто",   ТаблицаРасходов.ВыгрузитьКолонку("СтатьяЗатрат"));
	Запрос.УстановитьПараметр("Счета",        ТаблицаРасходов.ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ПР",           Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОбороты.Счет КАК Счет,
	|	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК ОборотКт,
	|	СУММА(НалоговыйОборотыПР.СуммаОборотКт) КАК ОборотКтПР
	|
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, ,Счет В (&Счета) , &ВидСубконто, (Организация = &Организация) и (ВидУчета = &ВидУчета) И Субконто1 В (&ЗнСубконто), , ) КАК НалоговыйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, ,Счет В (&Счета) , &ВидСубконто, Организация = &Организация И ВидУчета = &ПР, , ) КАК НалоговыйОборотыПР
	|		ПО НалоговыйОбороты.Счет = НалоговыйОборотыПР.Счет И НалоговыйОбороты.Субконто1 = НалоговыйОборотыПР.Субконто1
	|
	|СГРУППИРОВАТЬ ПО 
	|	НалоговыйОбороты.Субконто1,
	|	НалоговыйОбороты.Счет";
	Выборка = Запрос.Выполнить().Выбрать();

	// Корректируем расходы по нормам с учетом ранее принятых
	Для Каждого Расход из ТаблицаРасходов Цикл

		СтруктураПоиска = Новый Структура("СтатьяЗатрат, Счет", Расход.СтатьяЗатрат, Расход.Счет);
		ОборотКтПР      = 0;

		Выборка.Сбросить();

		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			Расход.МожноСписать = Расход.МожноСписать - Выборка.ОборотКт;
			Расход.НеСписано    = Расход.НеСписано    - Выборка.ОборотКт;
			ОборотКтПР          = ОборотКтПР + ?(Выборка.ОборотКтПР = Null, 0, Выборка.ОборотКтПР);
		КонецЦикла;

		СписатьПостоянныеРазницы = Расход.НеСписано - Расход.МожноСписать - ОборотКтПР;

		Если Расход.МожноСписать > 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
				
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;

			Проводка.СчетКт       = Расход.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.Содержание   = "Нормирование расходов";
			Проводка.Сумма        = Расход.МожноСписать;
			
		КонецЕсли;
		Если СписатьПостоянныеРазницы <> 0 Тогда

			Проводка = мПроводкиНУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;

			Проводка.СчетКт       = Расход.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.Содержание   = "Постоянная разница";
			Проводка.Сумма        = СписатьПостоянныеРазницы;
			
		КонецЕсли;
	КонецЦикла

КонецПроцедуры // НормированиеРасходовПоРаботникуОрганизации()

// Производит нормирование расходов, для которых норма задается процентом от суммового показателя
//
Процедура НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, ВидЗатрат, Норма)

	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  НалоговыйУчет.ПолучитьМассивСчетовУчетаКосвенныхРасходов());
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ПР",           Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("СчетЕНВД",     ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	
	Запрос.Текст = "ВЫБРАТЬ
	   |	НалоговыйОбороты.Счет КАК Счет,
	   |	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	   |	СУММА(ВЫБОР КОГДА (НалоговыйОбороты.СуммаОборотДт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НалоговыйОбороты.СуммаОборотДт КОНЕЦ) КАК ОборотДт,
	   |	СУММА(ВЫБОР КОГДА (НалоговыйОбороты.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НалоговыйОбороты.СуммаОборотКт КОНЕЦ) КАК ОборотКт,
	   |	СУММА(ВЫБОР КОГДА (НалоговыйОборотыПР.СуммаОборот) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НалоговыйОборотыПР.СуммаОборот КОНЕЦ) КАК ОборотПР,
	   |	СУММА(ВЫБОР КОГДА (НалоговыйОборотыЕНВД.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ НалоговыйОборотыЕНВД.СуммаОборотКт КОНЕЦ) КАК СписаниеЕНВД
	   |ИЗ
	   |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов), &ВидСубконто, Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов), &ВидСубконто, Организация = &Организация И ВидУчета = &ПР, , ) КАК НалоговыйОборотыПР
	   |		ПО НалоговыйОбороты.Счет = НалоговыйОборотыПР.Счет И НалоговыйОбороты.Субконто1 = НалоговыйОборотыПР.Субконто1
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов), &ВидСубконто, Организация = &Организация И ВидУчета = &ВидУчета, КорСчет = &СчетЕНВД, ) КАК НалоговыйОборотыЕНВД
	   |		ПО НалоговыйОбороты.Счет = НалоговыйОборотыЕНВД.Счет И НалоговыйОбороты.Субконто1 = НалоговыйОборотыЕНВД.Субконто1
	   |
	   |ГДЕ
	   |	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	НалоговыйОбороты.Субконто1,
	   |	НалоговыйОбороты.Счет";
	Результат = Запрос.Выполнить();

	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НеСписано");
	ТаблицаРасходов.Колонки.Добавить("МожноСписать");

	// Определяем не принятые расходы и учитываем ранее принятые
	Для каждого Расход из ТаблицаРасходов Цикл
		Расход.НеСписано = Расход.ОборотДт - Расход.ОборотКт;
		Норма            = Норма - (Расход.ОборотКт - Расход.СписаниеЕНВД);
	КонецЦикла;

	Норма = Макс(Норма, 0);

	// Определяем сумму расхода по нормам
	ТаблицаРасходов.Сортировать("НеСписано Возр");

	Для каждого Расход из ТаблицаРасходов Цикл
       
		Если Норма > Расход.НеСписано Тогда
			Расход.МожноСписать = Расход.НеСписано;
			Норма = Норма - Расход.МожноСписать;

		Иначе
			Расход.МожноСписать = Норма;
			Норма = 0;

		КонецЕсли;

		СписатьПостоянныеРазницы = Расход.ОборотПР + (Расход.НеСписано - Расход.МожноСписать);

		Если Расход.МожноСписать > 0 Тогда

			Проводка = мПроводкиНУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;

			Проводка.СчетКт       = Расход.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.Содержание   = "Нормирование расходов";
			Проводка.Сумма        = Расход.МожноСписать;

		КонецЕсли;

		Если СписатьПостоянныеРазницы <> 0 Тогда

			Проводка = мПроводкиНУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;

			Проводка.СчетКт       = Расход.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.Содержание   = "Постоянная разница";
			Проводка.Сумма        =  СписатьПостоянныеРазницы;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // НормированиеРасходовПоПроценту()

Процедура РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РаспределениеРасходовПоВидамДеятельности Тогда
		Возврат;
	КонецЕсли;
	
	// Процедура выполняется в том случае, если организация является плательщиком ЕНВД.
	Если НЕ мУчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомЕНВД Тогда 
		Возврат;
	КонецЕсли;
	
	Счет91 = ПланыСчетов.Налоговый.ПрочиеРасходы;
	
	ПериодГод          = ?(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация, "Нал").МетодРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.НарастающимИтогомСНачалаГода, Истина, Ложь);
	Если ПериодГод Тогда
		ТаблицаКоэффициентов = ОбщегоНазначения.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ", Ложь);
	Иначе
		Коэффициент = ОбщегоНазначения.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ");
	КонецЕсли;
	
	Если Коэффициент = 0 Или ТипЗнч(ТаблицаКоэффициентов) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	// Расходы на счетах учета прямых расходов распределять не надо,т.к.
	// они распределяются при расчете себестоимости продукции.
	НеРаспределяемыеСчета = Новый Массив;
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
	
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",      мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",       мКонГраница);
	Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Распределяемые",    Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	Запрос.УстановитьПараметр("ОтносятсяКЕНВД",    Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетПрочихРасходов",           	 Счет91);
	Запрос.УстановитьПараметр("СчетИздержкиОбращения",           ПланыСчетов.Налоговый.ИздержкиОбращения);
	Запрос.УстановитьПараметр("СтатьяЗатратТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("НеРаспределяемыеСчета",           НеРаспределяемыеСчета);
	Запрос.Текст = "ВЫБРАТЬ
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,	
	|	НалоговыйОбороты.Счет КАК Счет,
	|	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	|	НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД КАК ОтнесениеКЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	|		КОНЕЦ) КАК СуммаЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , НЕ Счет В (&НеРаспределяемыеСчета), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
	|ГДЕ
	|	(НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые
	|			ИЛИ НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтносятсяКЕНВД)
	|	И (НалоговыйОбороты.Счет <> &СчетИздержкиОбращения
	|			ИЛИ НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &СтатьяЗатратТранспортныеРасходы)
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Субконто1,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОбороты.ВидУчета,				   
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.Субконто1,
	|	НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетПрочихРасходов), &ВидСубконто91, Организация = &Организация, , ) КАК НалоговыйОбороты
	|ГДЕ
	|	(НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые
	|			ИЛИ НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ОтносятсяКЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Субконто1,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.Субконто1.ОтнесениеРасходовКДеятельностиЕНВД";
	
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	
	
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		СуммаКорректировки = 0;
		Если ПериодГод Тогда
			СтрокаТаблицыКоэффииентов = ТаблицаКоэффициентов.Найти(ВыборкаРезультатовЗапроса.Счет, "Счет");
			Если СтрокаТаблицыКоэффииентов = Неопределено Тогда
				Коэффициент = 0;
			Иначе
				Коэффициент = СтрокаТаблицыКоэффииентов.Коэффициент;
				СуммаКорректировки = СтрокаТаблицыКоэффииентов.СуммаКорректировки;
			КонецЕсли;
		КонецЕсли;
		
		// Расходы, которые целиком отностся к деятельности облагаемой ЕНВД - списываем.
		Если ВыборкаРезультатовЗапроса.ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД Тогда
			СуммаЕНВД = ВыборкаРезультатовЗапроса.СуммаЗатрат;
			
			// Расходы, которые подлежат распреджелению распределяем по видам дейтельности (ЕНВД / не ЕНВД)
		ИначеЕсли ВыборкаРезультатовЗапроса.ОтнесениеКЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
			СуммаЕНВД = Окр(ВыборкаРезультатовЗапроса.СуммаЗатрат*Коэффициент, 2);
		КонецЕсли; 
		
		Если СуммаЕНВД <> 0 Тогда
			
			// Заполним таблицу движений по регистру бухгалтерии "Налоговый".
			Проводка = мПроводкиНУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
			
			Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
			Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
			Иначе
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
			КонецЕсли; 
			
			Проводка.ВидУчетаКт   = ВыборкаРезультатовЗапроса.ВидУчета;
			Проводка.Содержание   = "Списание расходов, относящихся к ЕНВД";
			Проводка.Сумма        = СуммаЕНВД;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаКоэффициентов) = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодГод  И ТаблицаКоэффициентов.Итог("СуммаКорректировки") <> 0 Тогда // текущих расходов нет, но надо внести корректировки прошлых периодов
		
		// Расходы на счетах учета прямых расходов распределять не надо,т.к.
		// они распределяются при расчете себестоимости продукции.
		НеРаспределяемыеСчета = Новый Массив;
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
		
		// Формируем запрос по виду затрат
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",      НачалоГода(мНачДата));
		Запрос.УстановитьПараметр("КонецМесяца",       мКонГраница);
		Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("Распределяемые",    Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
		Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетПрочихРасходов",           	 Счет91);
		Запрос.УстановитьПараметр("СчетИздержкиОбращения",           ПланыСчетов.Налоговый.ИздержкиОбращения);
		Запрос.УстановитьПараметр("СтатьяЗатратТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		Запрос.УстановитьПараметр("НеРаспределяемыеСчета",           НеРаспределяемыеСчета);
		Запрос.Текст = "ВЫБРАТЬ
		|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
		|	НалоговыйОбороты.Счет КАК Счет,
		|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаЗатрат,
		|	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачалоМесяца,
		|		&КонецМесяца,
		|		,
		|		(НЕ Счет В (&НеРаспределяемыеСчета)),
		|		&ВидСубконто,
		|		Организация = &Организация
		|		    И Субконто1.ВидРасходовНУ <> &СтатьяЗатратТранспортныеРасходы
		|		    И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые,
		|		,
		|		) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	СУММА(НалоговыйОбороты.СуммаОборотДт),
		|	НалоговыйОбороты.Субконто1
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачалоМесяца,
		|		&КонецМесяца,
		|		,
		|		Счет В ИЕРАРХИИ (&СчетПрочихРасходов),
		|		&ВидСубконто91,
		|		Организация = &Организация
		|		    И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые,
		|		,
		|		) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		
		Для Каждого ВыборкаРезультатовЗапроса Из РезультатЗапроса Цикл
			
			СтрокаТаблицыКоэффииентов = ТаблицаКоэффициентов.Найти(ВыборкаРезультатовЗапроса.Счет, "Счет");
			СуммаКорректировки = ?(СтрокаТаблицыКоэффииентов = Неопределено, 0, СтрокаТаблицыКоэффииентов.СуммаКорректировки);
			ВсегоЗатрат = ВыборкаРезультатовЗапроса.СуммаЗатрат;
			Коэффициент = ?(ВсегоЗатрат = 0, 0 , СуммаКорректировки / ВсегоЗатрат);
			СуммаЕНВД = Окр(ВыборкаРезультатовЗапроса.СуммаЗатрат*Коэффициент, 2);
			
			Если СуммаЕНВД <> 0 Тогда
				
				// Заполним таблицу движений по регистру бухгалтерии "Налоговый".
				Проводка = мПроводкиНУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
				
				Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
				Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Тогда
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);	
				Иначе
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				КонецЕсли; 
				Проводка.ВидУчетаКт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.Содержание   = "Списание расходов, относящихся к ЕНВД";
				Проводка.Сумма        = СуммаЕНВД;
				
				Проводка = мПроводкиНУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Если ВыборкаРезультатовЗапроса.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ ВыборкаРезультатовЗапроса.Счет = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
					Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
				ИначеЕсли ВыборкаРезультатовЗапроса.Счет.ПринадлежитЭлементу(Счет91) Тогда
					Проводка.СчетДт = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
				КонецЕсли;
				Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
				Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Тогда
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				Иначе
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				КонецЕсли; 
				Проводка.ВидУчетаКт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.Содержание   = "Закрытие счетов косвенных расходов";
				Проводка.Сумма        = - СуммаЕНВД;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

Процедура НормированиеРасходовНаРекламу(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.НормированиеРасходовНаРекламу Тогда
		Возврат;
	КонецЕсли;
	
	НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые, ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, 1));
	
КонецПроцедуры

Процедура НормированиеРасходовНаДобровольноеСтрахование(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.НормированиеРасходовНаДобровольноеСтрахование Тогда
		Возврат;
	КонецЕсли;
	
	НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 12, Ложь));
	НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 3, Ложь));
	НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	
	мПроводкиНУ.Записать(Ложь);

КонецПроцедуры

Процедура НормированиеПредставительскихРасходов(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.НормированиеПредставительскихРасходов Тогда
		Возврат;
	КонецЕсли;
	
	НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 4, Истина));
	
	мПроводкиНУ.Записать(Ложь);

КонецПроцедуры

Процедура СписаниеТранспортныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.СписаниеТранспортныхРасходов Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("Счет",         ПланыСчетов.Налоговый.ИздержкиОбращения);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстаткиИОбороты.ВидУчета КАК ВидУчета,
	               |	НалоговыйОстаткиИОбороты.Субконто1 КАК СтатьяЗатрат,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотДт) КАК ОборотДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СальдоДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК Сумма,
	               |	0 КАК МожноСписать
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&НачалоМесяца, &КонецМесяца, , , Счет = &Счет, &ВидСубконто, Организация = &Организация) КАК НалоговыйОстаткиИОбороты
	               |ГДЕ
	               |	НалоговыйОстаткиИОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстаткиИОбороты.ВидУчета,
	               |	НалоговыйОстаткиИОбороты.Субконто1
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидУчета,
	               |	СтатьяЗатрат,
	               |	Сумма
	               |ИТОГИ ПО
	               |	ВидУчета";
				   Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
				   
				   ТаблицаБазыРаспределенияТР     = БазаРаспределенияПоВыручкеПокупныхТоваров(СтруктураШапкиДокумента);
				   ТаблицаБазыРаспределенияНеЕНВД =ТаблицаБазыРаспределенияТР.Скопировать();
				   ТаблицаБазыРаспределенияЕНВД   =ТаблицаБазыРаспределенияТР.Скопировать();
				   Для К = 0 По  ТаблицаБазыРаспределенияТР.Количество() - 1 Цикл
					     СтрокаНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.Получить(К);
						 СтрокаНеЕНВД.База = ?(СтрокаНеЕНВД.ЕНВД, 0, СтрокаНеЕНВД.База);
						 СтрокаЕНВД = ТаблицаБазыРаспределенияЕНВД.Получить(К);
						 СтрокаЕНВД.База = ?(СтрокаЕНВД.ЕНВД, СтрокаЕНВД.База, 0);
					 КонецЦикла;
						 
				   МассивКоэфРаспр  = ТаблицаБазыРаспределенияТР.ВыгрузитьКолонку("База");
				   МассивКоэфНеЕНВД = ТаблицаБазыРаспределенияНеЕНВД.ВыгрузитьКолонку("База");
				   МассивКоэфЕНВД   = ТаблицаБазыРаспределенияЕНВД.ВыгрузитьКолонку("База");
				   
				   Для Каждого ТаблицаТР ИЗ Результат.Строки Цикл
					   
					   ТранспортныеРасходы = ТаблицаТР.СальдоДт + ТаблицаТР.ОборотДт;
					   
					   ПараметрыТР = Новый Структура("СуммаРасходовКсписанию, НачОстатокТоваров, ПриходТовара, СуммаРеализованныхТоваров, СуммаРеализованныхТоваровЕНДВ, Списано, КонОстатокТоваров, СреднийПроцент, СуммаРасходов",
					   0, 0, 0, 0, 0, 0, 0, 0, ТранспортныеРасходы);
	                   НалоговыйУчет.РасчетТранспортныхРасходов(мНачДата, Дата, СтруктураШапкиДокумента.Организация, "Налоговый", ПараметрыТР);
					   СуммаСписанияТранспортныхРасходов = ПараметрыТР.СуммаРасходовКсписанию;
					   
					   СуммаВсего = ПараметрыТР.СуммаРасходовКсписанию;
					   КоэффициентСписания = ПараметрыТР.СуммаРасходовКсписанию / ТаблицаТР.Строки.Итог("Сумма");
					   
					   СчетСписанияНеЕНВД = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
					   СчетСписанияЕНВД   = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
					   
					   Для Каждого СтрокаТаблицаТР Из ТаблицаТР.Строки Цикл
						   СуммаКСписанию = Окр(КоэффициентСписания * СтрокаТаблицаТР.Сумма, 2);
						   Если СуммаКСписанию = 0 Тогда
							   Продолжить;
						   КонецЕсли;
						   Если СтрокаТаблицаТР.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются Тогда
							   МассивКоэфТР = МассивКоэфРаспр;
							   НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияТР;
						   ИначеЕсли СтрокаТаблицаТР.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД Тогда
							   МассивКоэфТР = МассивКоэфНеЕНВД;
							   НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияНеЕНВД;
						   Иначе
							   МассивКоэфТР = МассивКоэфЕНВД;
							   НаборСтрокБазыРаспределенияТР = ТаблицаБазыРаспределенияЕНВД;
						   КонецЕсли;
						   
						   
						   МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(СуммаКСписанию, МассивКоэфТР, 2);
						   Если МассивСумм <> Неопределено Тогда
							   Для К = 0 По МассивСумм.ВГраница() Цикл
								   
								   Если МассивСумм[К] = 0 Тогда
									   Продолжить;
								   КонецЕсли;
								   
								   НоваяПроводка = мПроводкиНУ.Добавить();
								   НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
								   НоваяПроводка.Активность  = Истина;
								   НоваяПроводка.Период      = Дата;
								   НоваяПроводка.Содержание  = "Списание транспортных расходов";
								   
								   НоваяПроводка.Сумма  = МассивСумм[К];
								   НоваяПроводка.СчетКт = ПланыСчетов.Налоговый.ИздержкиОбращения;
								   ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицаТР.СтатьяЗатрат);
								   
								   НоваяПроводка.СчетДт = ?(НаборСтрокБазыРаспределенияТР[К].ЕНВД, СчетСписанияЕНВД, СчетСписанияНеЕНВД);
								   ОбщегоНазначения.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы",  НаборСтрокБазыРаспределенияТР[К].НоменклатурнаяГруппа);
								   
								   НоваяПроводка.ВидУчетаДт = ТаблицаТР.ВидУчета;
								   НоваяПроводка.ВидУчетаКт = ТаблицаТР.ВидУчета;
								   
							   КонецЦикла;
						   КонецЕсли;
					   КонецЦикла;   
			   КонецЦикла;
			   
			   
			   мПроводкиНУ.Записать(Ложь);
			   
КонецПроцедуры
 
Процедура ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок)
	 
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеCчетовКосвенныхРасходов Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		// Отнесение косвенных затрат по НУ на временные разницы
		РасчетРазницКосвенныхЗатрат(СтруктураШапкиДокумента);
	КонецЕсли;
	
	Нормируемые = Новый Массив;
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые);
	Нормируемые.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нормируемые",  Нормируемые);
	Запрос.УстановитьПараметр("ДатаНач",      мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",      мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",  Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("СчетаЗатрат",  СчетаЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОбороты.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто2
	|		ИНАЧЕ НалоговыйОбороты.Субконто3
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СчетаЗатрат), , Организация = &Организация) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НЕ НалоговыйОбороты.Субконто1.ВидРасходовНУ В (&Нормируемые)
	|			КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НЕ НалоговыйОбороты.Субконто2.ВидРасходовНУ В (&Нормируемые)
	|			ИНАЧЕ НЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ В (&Нормируемые)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто2
	|		ИНАЧЕ НалоговыйОбороты.Субконто3
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОбороты.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто2
	|		ИНАЧЕ НалоговыйОбороты.Субконто3
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СчетаЗатрат), , Организация = &Организация) КАК НалоговыйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НалоговыйОбороты.Субконто1.ВидРасходовНУ В (&Нормируемые)
	|			КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА НалоговыйОбороты.Субконто2.ВидРасходовНУ В (&Нормируемые)
	|			ИНАЧЕ НалоговыйОбороты.Субконто3.ВидРасходовНУ В (&Нормируемые)
	|		КОНЕЦ  И
	|ВидУчета = &ВидУчетаВР
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета,
	|	НалоговыйОбороты.Счет,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто1
	|		КОГДА НалоговыйОбороты.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА НалоговыйОбороты.Субконто2
	|		ИНАЧЕ НалоговыйОбороты.Субконто3
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка ИЗ Результат Цикл

		Сумма = Выборка.СуммаДт - Выборка.СуммаКт;

		Если Сумма <> 0 Тогда
			
			Проводка = мПроводкиНУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Выборка.Счет = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;

			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Выборка.ВидУчета;

			Проводка.СчетКт       = Выборка.Счет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатрат);
			Проводка.ВидУчетаКт   = Выборка.ВидУчета;
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Сумма;
		
			
		КонецЕсли;

	КонецЦикла;
	
	мПроводкиНУ.Записать(Ложь);
	
	Если ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		
		РасчетРазницОтРазныхПорядковПринятияКРасходам(СтруктураШапкиДокумента);
	КонецЕсли;
	
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры
 
Процедура ЗакрытиеСчетаН90(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчетаН90 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет90",      ПланыСчетов.Налоговый.Продажи);
	Запрос.УстановитьПараметр("Счет909",     ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт,
	|	НалоговыйОбороты.ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90) И Счет <> &Счет909, , Организация = &Организация, , ) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	| НалоговыйОбороты.ВидУчета";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();

	ФинансовыйРезультат = 0;

	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат = ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиНУ.Добавить();

		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";
        Проводка.ВидУчетаДт                =  Выборка.ВидУчета;
        Проводка.ВидУчетаКт                =  Выборка.ВидУчета;

	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда
		Проводка = мПроводкиНУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
		Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
		Проводка.Сумма                     = - ФинансовыйРезультат;
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";
        Проводка.ВидУчетаДт                =  Выборка.ВидУчета;
        Проводка.ВидУчетаКт                =  Выборка.ВидУчета;
КонецЕсли;
	
КонецЦикла;
	мПроводкиНУ.Записать(Ложь);

КонецПроцедуры

Процедура ЗакрытиеСчетаН91(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчетаН91 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет91",      ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Сумма(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	|	Сумма(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт,
	|	НалоговыйОбороты.ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет91), , Организация = &Организация) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	| НалоговыйОбороты.ВидУчета";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();

	ФинансовыйРезультат = 0;
	Пока Выборка.Следующий() Цикл
		ФинансовыйРезультат =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

	Если ФинансовыйРезультат > 0 Тогда

		Проводка = мПроводкиНУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт                    = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
		Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
		Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
		Проводка.Сумма                     = ФинансовыйРезультат;
		Проводка.Содержание                = "Прибыль";
		Проводка.НомерЖурнала              = "ФР";
        Проводка.ВидУчетаДт                =  Выборка.ВидУчета;
        Проводка.ВидУчетаКт                =  Выборка.ВидУчета;
	КонецЕсли;

	Если ФинансовыйРезультат < 0 Тогда
		
		Проводка = мПроводкиНУ.Добавить();
		Проводка.Период                    = Дата;
		Проводка.Организация               = СтруктураШапкиДокумента.Организация;
		
			Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
			Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			Проводка.СчетКт                    = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
			Проводка.Сумма                     = - ФинансовыйРезультат;
		
		Проводка.Содержание                = "Убыток";
		Проводка.НомерЖурнала              = "ФР";
		Проводка.ВидУчетаДт                =  Выборка.ВидУчета;
		Проводка.ВидУчетаКт                =  Выборка.ВидУчета;
	КонецЕсли;
	КонецЦикла;
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.СписаниеУбытковПрошлыхЛет Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет99",      ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет9711",    ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаДт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаКт,
	               |	НалоговыйОбороты.ВидУчета
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&ДатаНач,
	               |		&ДатаКон,
	               |		,
	               |		Счет В ИЕРАРХИИ (&Счет99),
	               |		,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета,
	               |		КорСчет <> &Счет9711,
	               |		) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.ВидУчета";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("СуммаКт") - Результат.Итог("СуммаДт");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Налоговый.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаНУ,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания Как ГОД,
	               |	НалоговыйОбороты.СуммаКонечныйОстаток КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |		&ДатаНач,
	               |		&ДатаКон,
	               |		,
	               |		,
	               |		Счет = &Счет97,
	               |		,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета) КАК НалоговыйОбороты
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания <= &ДатаНач
	               |	И НалоговыйОбороты.Субконто1.ДатаОкончанияСписания >= &ДатаКон
	               |	И НалоговыйОбороты.Субконто1.Сумма > 0
	               |	И НалоговыйОбороты.СуммаНачальныйОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.СуммаКонечныйОстаток
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ДатаНачалаСписания";
	
	ТаблицаУбытков = Запрос.Выполнить().Выгрузить();
	
	Если ПрибыльНУ <= 0 И ТаблицаУбытков.Итог("СуммаНУ") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
		Норма = 0.3;
	ИначеЕсли СтруктураШапкиДокумента.Дата < '20070101' Тогда
		Норма = 0.5;
	Иначе
		Норма = 1;	
	КонецЕсли;
	
	Если ПрибыльНУ <= 0  Тогда
		СуммаСписания =  - ТаблицаУбытков.Итог("СуммаНУ");
	Иначе
		СуммаСписания = ПрибыльНУ * Норма - ТаблицаУбытков.Итог("СуммаНУ");
	КонецЕсли;	
	
	Если СуммаСписания < 0 Тогда
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
	
		 СуммаУбыткаВсего          = УбытокПрошлогоПериода.Субконто1.Сумма;
		 
		 Если СуммаСписания > 0 Тогда 
			 СуммаУбыткаМожноСписать = ?(СуммаСписания < УбытокПрошлогоПериода.Остаток, СуммаСписания, УбытокПрошлогоПериода.Остаток);
		 Иначе
			 СуммаУбыткаМожноСписать = ?( -СуммаСписания < УбытокПрошлогоПериода.СуммаНУ, СуммаСписания, -УбытокПрошлогоПериода.СуммаНУ);
		 КонецЕсли;
		 
		 Если СуммаСписания <> 0 Тогда 
		     СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
	 
			 Если СуммаУбыткаМожноСписать <> 0 Тогда
				 Проводка = мПроводкиНУ.Добавить();
				 Проводка.Период                            = Дата;
				 Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
				 Проводка.СчетДт                            = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
				 Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				 Проводка.СчетКт                            = ПланыСчетов.Налоговый.УбыткиПрошлыхЛет;
				 Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
				 Проводка.Сумма                             = СуммаУбыткаМожноСписать;
				 Проводка.Содержание                        = "Перенос убытков на будущее";
				 Проводка.НомерЖурнала                      = "ФР";
				 
				 Проводка = мПроводкиНУ.Добавить();
				 Проводка.Период                            = Дата;
				 Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
				 Проводка.СчетДт                            = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
				 Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;		 
				 Проводка.СчетКт                            = ПланыСчетов.Налоговый.УбыткиПрошлыхЛет;     
				 Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.Субконто1;
				 Проводка.Сумма                             = - СуммаУбыткаМожноСписать;
				 Проводка.Содержание                        = "Перенос убытков на будущее";
				 Проводка.НомерЖурнала                      = "ФР";
				 Проводка.ВидУчетаДт                        =  Перечисления.ВидыУчетаПоПБУ18.ВР;
				 Проводка.ВидУчетаКт                        =  Перечисления.ВидыУчетаПоПБУ18.ВР;
			 КонецЕсли;
		 КонецЕсли;
		 
	 
	 КонецЦикла;
	
	мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры

// ПБУ 18
Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога, КоррСчет, Субконто = Неопределено, ПоДебету, СодержаниеПроводки, СуммаЕНВД = 0, Субконто68_4 = Неопределено)

	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Если Субконто68_4 <> Неопределено Тогда
		
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Иначе
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КонецЕсли;

	Если СуммаНалога - СуммаЕНВД <> 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога - СуммаЕНВД;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = "";
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет68_04;
			Если Субконто68_4 <> Неопределено Тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто68_4);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = Счет68_04;
			Если Субконто68_4 <> Неопределено Тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				ОбщегоНазначения.УстановитьСубконто(Проводка.Счетдт, Проводка.СубконтоДт, 2, Субконто68_4);
			КонецЕсли;
			Проводка.СчетКт = КоррСчет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
		КонецЕсли
	КонецЕсли;

Если СуммаЕНВД <> 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаЕНВД;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = "";
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет99;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Иначе
			Проводка.СчетДт = Счет99;
			Проводка.СчетКт = КоррСчет;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Рассчитываются постоянные налоговые обязательства (активы) и отражаются на
// счетах бухгалтерского учета.
//
Процедура 	РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.РасчетПостоянныхРазницПоПБУ Тогда
		Возврат;
	КонецЕсли;
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете Н99.01, и
	// умножается на ставку налога на прибыль.
	

	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.Продажи);
	Массив.Добавить(ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет",         Массив);
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.ПР);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты";
				   
				   ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	СуммаПостоянныхРазниц = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");

	СуммаПНА = Окр(ТаблицаРезультат.Итог("СуммаОборотКт") * мСтавкаНалогаНаПрибыль, 2);
	СуммаПНО = Окр(ТаблицаРезультат.Итог("СуммаОборотДт") * мСтавкаНалогаНаПрибыль, 2);
	Счет99_02_3  = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;

	Если СуммаПНО <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНО, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаПНА <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНА, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
	

	мПроводкиБУ.Записать(Ложь);
	
КонецПроцедуры  // РасчетПостоянныхРазниц

// Создается таблица значений в которой будет хранится соответствие видов
// активов (обязательств) счетам, на которых учитываются разницы по этим
// видам активов (обязательств).
//
Функция ИнициализацияТаблицыВидовАктивовИОбязательств()

	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств");
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ОстатокОНА", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ОстатокОНО", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	Возврат ТаблицаВидовАктивовИОбязательств;

КонецФункции

// Формирование таблицы остатков отложенных налоговых активов
// и обязательств, отраженных на счетах 77 и 09 на конец месяца.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица остаток постоянных налоговх активов и обязательств.
// 
Функция ПолучитьОстаткиОНАиОНО()

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("Субконто",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);
	Запрос.УстановитьПараметр("Пассивный",    ВидСчета.Пассивный);
	
	Запрос.Текст = "

	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидАктиваОбязательства,
	|	(ВЫБОР Когда ХозрасчетныйОстатки.Счет.Вид = &Пассивный Тогда 1 Иначе (-1) Конец) * СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В (&МассивСчетов), &Субконто , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1";

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции // ПолучитьОстаткиОНАиОНО()

// Берутся отложенные налоговые активы и обязательства отраженные
// на счетах 09 и 77 на конец месяца по видам активов, указанным
// в таблице соответствия, и записываются в таблицу соответствия.
//
Процедура ЗаписьВТаблицуОстатковОНАиОНО(ТаблицаВидовАктивовИОбязательств)

	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;

	СтруктураДляПоиска = Новый Структура;

	// Формирование таблицы остатков отложенных налоговых активов
	// и обязательств, отраженных на счетах 77 и 09 на конец месяца.
	ОстаткиОНАиОНО = ПолучитьОстаткиОНАиОНО();

	// Запись в таблицу соответствия видов активов (обязательств) и налоговых
	// счетов записываются остатки по видам активов (обязательств) отраженные
	// на конец месяца
	Для каждого СтрокаВидАктивовОбязательств Из ТаблицаВидовАктивовИОбязательств Цикл

		// Отражение в таблице отложенного налогового актива
		СтруктураДляПоиска.Вставить("ВидАктиваОбязательства", СтрокаВидАктивовОбязательств.ВидАктивовОбязательств);
		СтруктураДляПоиска.Вставить("Счет", Счет09);
		МассивНайденныхСтрок = ОстаткиОНАиОНО.НайтиСтроки(СтруктураДляПоиска);
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			СтрокаВидАктивовОбязательств.ОстатокОНА = МассивНайденныхСтрок[0].СуммаОстаток;
		КонецЕсли;

		// Отражение в таблице отложенного налогового обязательства
		СтруктураДляПоиска.Вставить("Счет", Счет77);
		МассивНайденныхСтрок = ОстаткиОНАиОНО.НайтиСтроки(СтруктураДляПоиска);
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			СтрокаВидАктивовОбязательств.ОстатокОНО = -МассивНайденныхСтрок[0].СуммаОстаток;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств()

	ТаблицаВидовАктивовИОбязательств = ИнициализацияТаблицыВидовАктивовИОбязательств();

	//Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_01);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	//Нематериальные активы
	//НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	//НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	//НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивыОрганизации);
	//НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	//НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОборудованиеКУстановке);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Внеоборотные активы   08.01
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеЗемельныхУчастков);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Внеоборотные активы 08.05
	//НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	//НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	//НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов);
	//НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	//// Внеоборотные активы 08.08
	//НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	//НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	//НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ВыполнениеНИОКР);
	//НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);

	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	СчетаУчетаМатериалов = ПланыСчетов.Налоговый.ВыбратьИерархически(ПланыСчетов.Налоговый.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		Если СчетУчетаМатериалов = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);

	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Полуфабрикаты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);

	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Товары);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);

	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ДоходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоходыБудущихПериодов);

	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	
	ЗаписьВТаблицуОстатковОНАиОНО(ТаблицаВидовАктивовИОбязательств);

	Возврат ТаблицаВидовАктивовИОбязательств;

КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагемые разницы.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОБоротыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства)

	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
    ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
	//ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
    ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
	ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);
	Массив.Добавить(ПланыСчетов.Налоговый.ОСвСоставеМПЗвБУ);
	Запрос.УстановитьПараметр("СчетМЦ",       Массив);
	Запрос.УстановитьПараметр("СчетЕН",       ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	
Запрос.Текст = "ВЫБРАТЬ"+ ?(ФлагОС_НМА = 1, "", "
	               |	НалоговыйОстаткиИОбороты.Счет КАК Счет,") + "
	               |	НалоговыйОстаткиИОбороты.Субконто1 КАК Субконто1,
	               |	НалоговыйОстаткиИОбороты.Субконто2 КАК Субконто2,
	               |	НалоговыйОстаткиИОбороты.Субконто3 КАК Субконто3,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК НачОстатокДт,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.Счет В (&СчетМЦ)
	               |				ТОГДА НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт - НалоговыйОстаткиИОбороты.СуммаОборотДт
	               |			ИНАЧЕ НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокДт
	               |		КОНЕЦ) КАК КонОстатокДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК НачОстатокКт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК КонОстатокКт,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОстаткиИОбороты.Счет В (&СчетМЦ)
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОстаткиИОбороты.СуммаОборотДт
	               |		КОНЕЦ) КАК ОборотДт,
	               |	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт) КАК ОборотКт,
	               |	СУММА(0) КАК ОборотЕН
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		,
	               |		Счет В ИЕРАРХИИ (&МассивСчетов),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета) КАК НалоговыйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО"+ ?(ФлагОС_НМА = 1, "", "
	               |	НалоговыйОстаткиИОбороты.Счет,") + "
	               |	НалоговыйОстаткиИОбороты.Субконто1,
	               |	НалоговыйОстаткиИОбороты.Субконто2,
	               |	НалоговыйОстаткиИОбороты.Субконто3
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ"+ ?(ФлагОС_НМА = 1, "", "
	               |	НалоговыйОбороты.Счет,") + "
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3,
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		Счет В ИЕРАРХИИ (&МассивСчетов),
	               |		,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета,
	               |		КорСчет = &СчетЕН,
	               |		) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО"+ ?(ФлагОС_НМА = 1, "", "
	               |	НалоговыйОбороты.Счет,") + "
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.Субконто3";
	
	
	Результат = Запрос.Выполнить();
   	 ТаблицаРезультатов = Результат.Выгрузить();
	 ТаблицаРезультатов.Свернуть("" + ?(ФлагОС_НМА = 1, "", "Счет,") + "Субконто1," + ?(ФлагОбъектовСтроительства = 1, "", "Субконто2,") + ?(ФлагНЗП = 1, "", "Субконто3,"),"НачОстатокКт,КонОстатокКт,НачОстатокДт,КонОстатокДт,ОборотДт,ОборотКт,ОборотЕН");
	 ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
	 ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
	 ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
	 ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
	 ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");

	 
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	НеРаспределяемыеСчета = Новый Массив;
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств);
	НеРаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("НеРаспределяемыеСчета",           НеРаспределяемыеСчета);
	
	Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Распределяемые",    Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	Запрос.УстановитьПараметр("ЕНВД",              Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	Запрос.УстановитьПараметр("Счет91",      ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СчетПрочихРасходов", ПланыСчетов.Налоговый.ПрочиеРасходы);
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	//МассивСчетов.Добавить(ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	МассивСчетов.Добавить(ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("КорСчет", МассивСчетов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.ОсновныеСредства И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаЗатрат,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.РасходыБудущихПериодов И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаРБП,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.ОсновныеСредства И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ЕНВД)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаЗатратЕНВД,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.РасходыБудущихПериодов И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ЕНВД)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаРБПЕНВД,
	               |	НалоговыйОбороты.КорСубконто1 КАК КорСубконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		(НЕ Счет В (&НеРаспределяемыеСчета)),
	               |		&ВидСубконто,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета,
	               |		КорСчет В ИЕРАРХИИ (&КорСчет),
	               |		) КАК НалоговыйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.ОсновныеСредства И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.РасходыБудущихПериодов И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &Распределяемые)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.ОсновныеСредства И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ЕНВД)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА (НалоговыйОбороты.КорСубконто1 ССЫЛКА Справочник.РасходыБудущихПериодов И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД = &ЕНВД)
	               |			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	НалоговыйОбороты.КорСубконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоМесяца,
	               |		&КонецМесяца,
	               |		,
	               |		Счет В ИЕРАРХИИ (&СчетПрочихРасходов),
	               |		&ВидСубконто91,
	               |		Организация = &Организация
	               |			И ВидУчета = &ВидУчета,
	               |		КорСчет В ИЕРАРХИИ (&КорСчет),
	               |		) КАК НалоговыйОбороты
	               |ИТОГИ
	               |	СУММА(СуммаЗатрат),
	               |	СУММА(СуммаРБП),
	               |	СУММА(СуммаЗатратЕНВД),
	               |	СУММА(СуммаРБПЕНВД)
	               |ПО
	               |	КорСубконто1";
	
	Результат = Запрос.Выполнить();
   	ТаблицаРаспределяемыхРасхдов = Результат.Выгрузить();
	 
	 Если ТаблицаРезультатов.Количество() > 0 Тогда
 
	 Для Каждого Строка Из ТаблицаРезультатов Цикл
		 СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
		 СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
 
		 Разница = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
		 
		 // Определим сумму временных разниц, приходящуюся на деятельность, облагамую ЕНВД,
		 // для распределяемых затрат, связанных с амортизацией и списанием РБП.
		 СуммаРаспределяемогоРасхода = 0;
		 СуммаЕНВДРасхода     = 0;
		 Если ФлагОС_НМА = 1 Тогда
			 СтрокаРаспределяемогоРасхода = ТаблицаРаспределяемыхРасхдов.Найти(Строка.Субконто1, "КорСубконто1");
			 СуммаРаспределяемогоРасхода = ?(СтрокаРаспределяемогоРасхода = Неопределено, 0, СтрокаРаспределяемогоРасхода.СуммаЗатрат);
			 СуммаЕНВДРасхода = ?(СтрокаРаспределяемогоРасхода = Неопределено, 0, СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД);
			 Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * КоэффициентЕНВД + СуммаЕНВДРасхода;
			 
		 ИначеЕсли Строка.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыБудущихПериодов) Тогда
			 СтрокаРаспределяемогоРасхода = ТаблицаРаспределяемыхРасхдов.Найти(Строка.Субконто1, "КорСубконто1");
			 СуммаРаспределяемогоРасхода = ?(СтрокаРаспределяемогоРасхода = Неопределено, 0, СтрокаРаспределяемогоРасхода.СуммаРБП);
			 СуммаЕНВДРасхода = ?(СтрокаРаспределяемогоРасхода = Неопределено, 0, СтрокаРаспределяемогоРасхода.СуммаРБПЕНВД);
			 Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * КоэффициентЕНВД + СуммаЕНВДРасхода;
		 Иначе
			 Строка.СуммаЕНВД = Строка.ОборотЕН;
		 КонецЕсли;
		 
		
		// Специальная обработка для специального счета 10.ТЦ
		Если  СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства И ТипЗнч(Строка.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка.СуммаКт77 = 0;
			Строка.СуммаДт77 = 0;
			Строка.СуммаКт09 = 0;
			Строка.СуммаДт09 = - Разница;
			Продолжить;
		КонецЕсли;		 
				 
		 Если СводноеСальдоНач > 0 Тогда
			 Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
				 Строка.СуммаКт77 = Разница;
				 Строка.СуммаДт77 = 0;
				 Строка.СуммаКт09 = 0;
				 Строка.СуммаДт09 = 0;
				 ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				 Строка.СуммаКт77 = 0;
				 Строка.СуммаДт77 = 0;
				 Строка.СуммаКт09 = 0;
				 Строка.СуммаДт09 = 0;
				 Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
					 Строка.СуммаДт09 = - СводноеСальдоКон;
					 Строка.СуммаДт77 = СводноеСальдоНач;
					 Строка.СуммаКт09 = 0;
					 Строка.СуммаКт77 = 0;
				 Иначе
					 Строка.СуммаКт77 = 0;
					 Строка.СуммаДт77 = - Разница;
					 Строка.СуммаКт09 = 0;
					 Строка.СуммаДт09 = 0;
					 
					 
				 КонецЕсли;
			 КонецЕсли;
		 Иначе
			 Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
				 Строка.СуммаКт77 = 0;
				 Строка.СуммаДт77 = 0;
				 Строка.СуммаКт09 = 0;
				 Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
				 ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
				 Строка.СуммаКт77 = 0;
				 Строка.СуммаДт77 = 0;
				 Строка.СуммаКт09 = 0;
				 Строка.СуммаДт09 =  0;
				 Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
					 Строка.СуммаКт77 = СводноеСальдоКон;
					 Строка.СуммаДт77 = 0;
					 Строка.СуммаКт09 = - СводноеСальдоНач;
					 Строка.СуммаДт09 = 0;
				 Иначе
					 Строка.СуммаКт77 = 0;
					 Строка.СуммаДт77 = 0;
					 Строка.СуммаКт09 = Разница;
					 Строка.СуммаДт09 = 0;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;
	
		 КонецЦикла;
	КонецЕсли;	 	 
	
    Возврат  ТаблицаРезультатов;
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательств()

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ВидАктивовОбязательств,  ВременныеРазницы)

	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
    СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	СуммаЕНВД = ?(СуммаЕНВД < 0, - СуммаЕНВД, СуммаЕНВД);
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт09, Счет09, ВидАктивовОбязательств, "Д", "Признание отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;

	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль( СуммаКт09, Счет09, ВидАктивовОбязательств, "К", "Погашение отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;

	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт77, Счет77, ВидАктивовОбязательств, "К", "Признание отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;

	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль( СуммаДт77, Счет77, ВидАктивовОбязательств, "Д", "Погашение отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;

КонецПроцедуры

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетН99_01",  ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Субконто1",   Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);

	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаОстаток,
	               |	0 КАК СуммаОстаток09
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонецМесяца,
	               |		Счет В ИЕРАРХИИ (&СчетН99_01),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ХозрасчетныйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет09), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.Субконто1 = &Субконто1";
	Результат = Запрос.Выполнить();

	ТаблицаРезультат     = Результат.Выгрузить();
	Сумма   = ТаблицаРезультат.Итог("СуммаОстаток") * мСтавкаНалогаНаПрибыль - ТаблицаРезультат.Итог("СуммаОстаток09");
    СуммаДт77 = 0;
	СуммаКт77 = 0;
	СуммаДт09 = 0;
	СуммаКт09 = 0;
	
	Если Сумма > 0 Тогда
		СуммаДт09 = Сумма;
	Иначе
		СуммаКт09 = - Сумма;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, 0));
	КонецЕсли;

КонецПроцедуры // ВременныеРазницыПоУбыткамТекущегоПериода()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНА_ОНА(СтрокаВидАктиваОбязательства)

	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагемые разницы.
	ОборотыВременныхРазниц = ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства);


	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * мСтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));

КонецПроцедуры


// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы.
// 

Процедура 	РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.РасчетВременныхРазницПоПБУ Тогда
		Возврат;
	КонецЕсли;	
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	ТаблицаВидовАктивовИОбязательств = ПолучитьТаблицуВидовАктивовИОбязательств();
	КоэффициентЕНВД = ОбщегоНазначения.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ");

	// Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл

		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства);
		Иначе
			РассчитатьОНА_ОНА(СтрокаВидАктиваОбязательства);
		КонецЕсли;

	КонецЦикла;

	мПроводкиБУ.Записать(Ложь);


КонецПроцедуры  // РасчетПостоянныхРазниц

Процедура 	РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
    мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.

	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонДата);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ?(мПоддержкаПБУ18, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД, ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль));
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 В(&ПрибылиИУбытки)";
	
	
	// Если ПБУ18 не ведется, то условный доход считается по данным налогового учета
	Если НЕ мПоддержкаПБУ18 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	СуммаУсловногоНалога = Окр(СуммаДоходаРасхода * НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента), 2);

	Если СуммаУсловногоНалога > 0 Тогда
		Сч99_02_1 = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаУсловногоНалога, Сч99_02_1,, "Д", "Условный расход по налогу на прибыль");

	Иначе
		Сч99_02_2 = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаУсловногоНалога, Сч99_02_2,, "К", "Условный доход по налогу на прибыль");
	КонецЕсли;

	мПроводкиБУ.Записать(Ложь);

	
КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура 	РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РасчетНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
    мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",     мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонДата);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(НачалоМесяца(мКонДата) - 1));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	- НалоговыйОбороты.СуммаОборот КАК Прибыль,
	               |	0 КАК НалогНаПрибыль
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |		&НачалоГода,
	               |		&КонецМесяца,
	               |		,
	               |		Счет = &Счет,
	               |		,
	               |		Организация = &Организация
	               |		    И Субконто1 В (&ПрибылиИУбытки),
	               |		,
	               |		) КАК НалоговыйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецПредыдущегоМесяца, , Счет = &Счет68, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
		
	Результат = Запрос.Выполнить();

	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("Прибыль");
	СуммаНалогаНаПрибыльРанееНачисленного   = ТаблицаРезультат.Итог("НалогНаПрибыль");
	СтавкаФБ = 0;
	СтавкаРФ = 0;
	СтавкаМестный = 0;
	СуммаНалога = Окр(СуммаДоходаРасхода * НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,  СтавкаФБ, СтавкаРФ, СтавкаМестный), 2) - СуммаНалогаНаПрибыльРанееНачисленного;
	СуммаНалога = ?(СуммаНалога > 0, СуммаНалога, ?(- СуммаНалога > СуммаНалогаНаПрибыльРанееНачисленного, - СуммаНалогаНаПрибыльРанееНачисленного, СуммаНалога));
	
	Сч99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	Если СтавкаФБ <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаФБ / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.ФедеральныйБюджет);
	КонецЕсли;
	Если СтавкаРФ <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаРФ / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.РегиональныйБюджет);
	КонецЕсли;
	Если СтавкаМестный <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаМестный / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.МестныйБюджет);
	КонецЕсли;
	мПроводкиБУ.Записать(Ложь);	
КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок)  
	
 Если СтруктураШапкиДокумента.РеформацияБалансаБУ Тогда
	 
 // Закрытие 99 счетов в БУ и реформация баланса
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Прибыль = 0;
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
			Прибыль = Прибыль + СуммаСписания;

			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
				СуммаСписания = 0;
			КонецЕсли;
			
			Если СуммаСписания > 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Списание 99";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Списание 99";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
		КонецЦикла;
			
			Если Прибыль > 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
				Проводка.Сумма                     = Прибыль;
				Проводка.Содержание                = "Прибыль";
				Проводка.НомерЖурнала              = "ФР";
			КонецЕсли;
			
			Если Прибыль < 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.Сумма                     = - Прибыль;
				Проводка.Содержание                = "Убыток";
				Проводка.НомерЖурнала              = "ФР";
			КонецЕсли;
			
			// закрытие 90 счетов в БУ
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.Продажи);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания > 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие 90";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Закрытие 90";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
		КонецЦикла;

			// закрытие 91 счетов в БУ
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);

			Если Выборка.Счет = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаСписания > 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Проводка.СчетКт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие 91";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводкиБУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Закрытие 91";
				Проводка.НомерЖурнала              = "ФР";
				
			КонецЕсли;
		КонецЦикла;
		
		
		мПроводкиБУ.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ЗакрытиеСчетовНУ Тогда
		Возврат;
	КонецЕсли;
			
		// Закрытие 99 счетов 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
		Запрос.УстановитьПараметр("ДатаКон",     мКонДата);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",      ПланыСчетов.Налоговый.ПрибылиИУбытки);
		Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговыйОбороты.Счет КАК Счет,
		|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
		|	НалоговыйОбороты.Субконто1 КАК Субконто1,
		|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1
		|ИТОГИ
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотКт)
		|ПО
		|	Счет,
		|	ВидУчета,
		|	Субконто1";
		
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		
		ВыборкаВидУчета = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидУчета");
			Пока ВыборкаВидУчета.Следующий() Цикл
			ВыборкаСчет = ВыборкаВидУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Счет");
			Прибыль = 0;

			Пока ВыборкаСчет.Следующий() Цикл
						Выборка = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Субконто1");
                     Пока Выборка.Следующий() Цикл

				СуммаСписания =  ?(Выборка.СуммаОборотКт = Null, 0, Выборка.СуммаОборотКт) - ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				Прибыль = Прибыль + СуммаСписания;
				
				Если Выборка.Субконто1 = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж Тогда
					СуммаСписания = 0;
				КонецЕсли;
				
				Если СуммаСписания > 0 Тогда
					
					Проводка = мПроводкиНУ.Добавить();
					Проводка.Период                    = Дата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетДт                    = Выборка.Счет;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
					Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.Сумма                     = СуммаСписания;
					Проводка.Содержание                = "Списание 99";
					Проводка.НомерЖурнала              = "ФР";
					Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
					Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
				КонецЕсли;
				
				Если СуммаСписания < 0 Тогда
					
					Проводка = мПроводкиНУ.Добавить();
					Проводка.Период                    = Дата;
					Проводка.Организация               = СтруктураШапкиДокумента.Организация;
					Проводка.СчетКт                    = Выборка.Счет;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
					Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.Сумма                     = - СуммаСписания;
					Проводка.Содержание                = "Списание 99";
					Проводка.НомерЖурнала              = "ФР";
					Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
					Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
				
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
			Если Прибыль > 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
		        ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
				Проводка.Сумма                     = Прибыль;
				Проводка.Содержание                = "Прибыль";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаДт                = ВыборкаВидУчета.ВидУчета;
			КонецЕсли;
			
			Если Прибыль < 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
		        ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
				Проводка.Сумма                     = - Прибыль;
				Проводка.Содержание                = "Убыток";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаКт                = ВыборкаВидУчета.ВидУчета;
			КонецЕсли;
		КонецЦикла;
		
		
		
			// закрытие счетов в НУ
		СписокСчетовДляЗакрытия = Новый Массив;
		
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФСС);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПФР_нак);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПФР_страх);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФФОМС);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ТФОМС);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ЕСН_ФБ);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ФСС_НСиПЗ);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПокупныхТоваров);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.СебестоимостьПродаж);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОсновныхСредств);
		//СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииНематериальныхАктивов);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОбъектовСтроительства);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииИмущественныхПрав);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииЦенныхБумаг);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВнереализационныеДоходы);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейОсновныхСредств);
		//СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейНематериальныхАктивов);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейОбъектовСтроительства);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейПрочегоИмущества);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейИмущественныхПрав);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейЦенныхБумаг);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходы);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_1_48);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ДругиеВыплатыПоП_1_48);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ВыплатыВпользуФизЛицПоП_49);
		СписокСчетовДляЗакрытия.Добавить(ПланыСчетов.Налоговый.ДругиеВыплатыПоП_49);
		
		
        Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",        СписокСчетовДляЗакрытия);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговыйОстатки.Счет КАК Счет,
		|	НалоговыйОстатки.ВидУчета,
		|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК СуммаДт,
		|	СУММА(НалоговыйОстатки.СуммаОстатокКт) КАК СуммаКт,
		|	СУММА(НалоговыйОстатки.КоличествоОстатокДт) КАК КоличествоДт,
		|	СУММА(НалоговыйОстатки.КоличествоОстатокКт) КАК КоличествоКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК НалоговыйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОстатки.Счет,
		|	НалоговыйОстатки.ВидУчета";
		
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для Каждого Выборка Из Результат Цикл
			СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
			КоличествоСписания =  ?(Выборка.КоличествоКт = Null, 0, Выборка.КоличествоКт) - ?(Выборка.КоличествоДт = Null, 0, Выборка.КоличествоДт);
			Если СуммаСписания > 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				Если КоличествоСписания <> 0 Тогда
					Проводка.КоличествоДт          = КоличествоСписания;
				КонецЕсли;
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие счетов";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаДт                 = Выборка.ВидУчета;
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = Выборка.Счет;
				Проводка.Сумма                     = - СуммаСписания;
				Если КоличествоСписания <> 0 Тогда
					Проводка.КоличествоКт          = - КоличествоСписания;
				КонецЕсли;
				Проводка.Содержание                = "Закрытие счетов";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаКт                 = Выборка.ВидУчета;
				
				
			КонецЕсли;
		КонецЦикла;
		
		
        Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКон",             мКонГраница);
		Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Счет",                НалоговыйУчет.ПолучитьСчетаУчетаКосвенныхРасходов());
		Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговыйОстатки.Счет КАК Счет,
		|	НалоговыйОстатки.ВидУчета КАК ВидУчета,
		|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
		|	НалоговыйОстатки.Субконто1 КАК Субконто1,
		|	НалоговыйОстатки.Субконто2 КАК Субконто2,
		|	НалоговыйОстатки.Субконто3 КАК Субконто3
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|		&ДатаКон,
		|		Счет В ИЕРАРХИИ (&Счет),
		|		,
		|		Организация = &Организация
		|		    И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы
		|		    И Субконто2.ВидРасходовНУ = &ТранспортныеРасходы
		|		    И Субконто3.ВидРасходовНУ = &ТранспортныеРасходы) КАК НалоговыйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОстатки.Счет,
		|	НалоговыйОстатки.ВидУчета,
		|	НалоговыйОстатки.Субконто1,
		|	НалоговыйОстатки.Субконто2,
		|	НалоговыйОстатки.Субконто3";
		
		
		Результат = Запрос.Выполнить().Выгрузить();
		Для Каждого Выборка Из Результат Цикл
			Счет = Выборка.Счет;
			ВидУчета = Выборка.ВидУчета;
			СуммаСписания = Выборка.СуммаСписания;
			Если СуммаСписания > 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Счет;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие счетов";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаДт                 = ВидУчета;
			КонецЕсли;
			
			Если СуммаСписания < 0 Тогда
				
				Проводка = мПроводкиНУ.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетКт                    = Счет;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Закрытие счетов";
				Проводка.НомерЖурнала              = "ФР";
				Проводка.ВидУчетаКт                 = ВидУчета;
			КонецЕсли;
			ПроводкиСделаны = Истина;
		КонецЦикла;

		
		
		мПроводкиНУ.Записать(Ложь);
	
КонецПроцедуры
	

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства", "");
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	// АМОРТИЗАЦИЯ
	// Начисление амортизации ОС
	НачислениеАмортизацииОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Начисление износа ОС
	НачислениеИзносаОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Начисление амортизации НМА и списание расходов по НИОКР
	НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ПЕРЕОЦЕНКА
	ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
	КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок);
	
	// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
	СписаниеРБП(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Расчет расходов по страхованию
	РасчетРасходовПоСтрахованию(СтруктураШапкиДокумента, Отказ, Заголовок);

	// ПРОИЗВОДСТВО БУ
	РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, "БУ");
	
	// ТОРГОВЛЯ
	
	РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//ЗАКРЫТИЕ СЧЕТОВ БУ
	
	//  Закрытие счета 26
	ЗакрытиеСчета26(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Закрытие счета 44.1
	ЗакрытиеСчета44_1(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Закрытие счета 44.2
	ЗакрытиеСчета44_2(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Закрытие счета 90
	ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Закрытие счета 91
	ЗакрытиеСчета91(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//ЗАКРЫТИЕ СЧЕТОВ НУ

	// Распределение косвенных расходов на те, что относятся к
	// деятельности облагаемой ЕНВД и те, что относятся к не облагаемой ЕНВД.
	РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	НормированиеРасходовНаРекламу(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	НормированиеРасходовНаДобровольноеСтрахование(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	НормированиеПредставительскихРасходов(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СписаниеТранспортныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// ПРОИЗВОДСТВО НУ
	РасчетСебестоимостиПродукции(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, "НУ");
	
	ЗакрытиеСчетаН90(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗакрытиеСчетаН91(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПБУ 18
	
	Если мПоддержкаПБУ18 Тогда
		РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗакрытиеСчетовНУ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
 	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",        Ложь);

	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца (Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);

	СообщенияОповторахВидовОпераций = ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента);
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СообщенияОповторахВидовОпераций) Тогда
		ТекстСообщения = СообщенияОповторахВидовОпераций;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	мПроводкиБУ = Движения.Хозрасчетный;
	мПроводкиНУ = Движения.Налоговый;
	
	ПорядокПодразделенийСообщался = Ложь;
	ПорядокПеределовСообщался = Ложь;
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	мПоддержкаПБУ18 = ОбщегоНазначения.ПоддержкаПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Функция ПроверкаПовторовВидовОпераций(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.АмортизацияОСБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК АмортизацияОСБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.АмортизацияОСНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК АмортизацияОСНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ИзносОСБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ИзносОСБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.АмортизацияНМАБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК АмортизацияНМАБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.АмортизацияНМАНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК АмортизацияНМАНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ПогашениеСтоимостиСпецодеждыИСпецоснасткиБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПогашениеСтоимостиСпецодеждыИСпецоснасткиБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ПогашениеСтоимостиСпецодеждыИСпецоснасткиНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПогашениеСтоимостиСпецодеждыИСпецоснасткиНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ПереоценкаВалютныхСредствБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПереоценкаВалютныхСредствБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ПереоценкаВалютныхСредствНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПереоценкаВалютныхСредствНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.КорректировкаСтоимостиНоменклатурыБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КорректировкаСтоимостиНоменклатурыБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.КорректировкаСтоимостиНоменклатурыНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КорректировкаСтоимостиНоменклатурыНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.СписаниеРБПБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК СписаниеРБПБУ,
				   |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.СписаниеРБПНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК СписаниеРБПНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РасчетСтоимостиПродукцииБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РасчетСтоимостиПродукцииБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РасчетСтоимостиПродукцииНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РасчетСтоимостиПродукцииНУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчета26 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчета26,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчета44_1 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчета44_1,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчета44_2 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчета44_2,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчета90 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчета90,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчета91 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчета91,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РаспределениеРасходовПоВидамДеятельности = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РаспределениеРасходовПоВидамДеятельности,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.НормированиеРасходовНаРекламу = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормированиеРасходовНаРекламу,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.НормированиеРасходовНаДобровольноеСтрахование = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормированиеРасходовНаДобровольноеСтрахование,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.НормированиеПредставительскихРасходов = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормированиеПредставительскихРасходов,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.СписаниеТранспортныхРасходов = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК СписаниеТранспортныхРасходов,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеCчетовКосвенныхРасходов = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеCчетовКосвенныхРасходов,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчетаН90 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчетаН90,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчетаН91 = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчетаН91,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РасчетПостоянныхРазницПоПБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РасчетПостоянныхРазницПоПБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РасчетВременныхРазницПоПБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РасчетВременныхРазницПоПБУ,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РасчетНалогаНаПрибыль = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РасчетНалогаНаПрибыль,
	               |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.РеформацияБалансаБУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК РеформацияБалансаБУ,   
				   |	СУММА(ВЫБОР КОГДА ЗакрытиеМесяца.ЗакрытиеСчетовНУ = ИСТИНА ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ЗакрытиеСчетовНУ   
				   |ИЗ
	               |	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	               |
	               |ГДЕ
	               |	ЗакрытиеМесяца.Организация = &Организация И
	               |	ЗакрытиеМесяца.Дата >= &НачалоМесяца И
	               |	ЗакрытиеМесяца.Дата <= &КонецМесяца И
	               |	ЗакрытиеМесяца.Проведен И
	               |	НЕ ЗакрытиеМесяца.ПометкаУдаления";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	Для Каждого Выборка Из Результат Цикл

		Если Выборка.АмортизацияОСБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация ОС БУ
			|";
		КонецЕсли;
		  
		Если Выборка.АмортизацияОСНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация ОС НУ
			|";
		КонецЕсли;
		
		Если Выборка.ИзносОСБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Износ ОС БУ
			|";
		КонецЕсли;
		
	    Если Выборка.АмортизацияНМАБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация НМА БУ
			|";
		КонецЕсли;
		
		Если Выборка.АмортизацияНМАНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Амортизация НМА НУ
			|";
		КонецЕсли;
		
	    Если Выборка.ПогашениеСтоимостиСпецодеждыИСпецоснасткиБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Погашение стоимости спецодежды и спецоснастки в эксплуатации БУ
			|";
		КонецЕсли;
		
		Если Выборка.ПогашениеСтоимостиСпецодеждыИСпецоснасткиНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Погашение стоимости спецодежды и спецоснастки в эксплуатации НУ
			|";
		КонецЕсли;
		
		Если Выборка.ПереоценкаВалютныхСредствБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Переоценка Валютных Средств БУ
			|";
		КонецЕсли;
		
		Если Выборка.ПереоценкаВалютныхСредствНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Переоценка Валютных Средств НУ
			|";
		КонецЕсли;
				
		Если Выборка.КорректировкаСтоимостиНоменклатурыБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Корректировка Стоимости Номенклатуры БУ
			|";
		КонецЕсли;
		
		Если Выборка.КорректировкаСтоимостиНоменклатурыНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Корректировка Стоимости Номенклатуры НУ
			|";
		КонецЕсли;
		
		Если Выборка.СписаниеРБПБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Списание РБП БУ
			|";
		КонецЕсли;
		
		Если Выборка.СписаниеРБПНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Списание РБП НУ
			|";
		КонецЕсли;
		
		Если Выборка.РасчетСтоимостиПродукцииБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет Стоимости Продукции БУ
			|";
		КонецЕсли;
		
		Если Выборка.РасчетСтоимостиПродукцииНУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет Стоимости Продукции НУ
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета26 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции ЗакрытиеСчета 26
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета44_1 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции ЗакрытиеСчета 44_1
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета44_2 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции ЗакрытиеСчета 44_2
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета90 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции ЗакрытиеСчета90
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчета91 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции ЗакрытиеСчета91
			|";
		КонецЕсли;
		
		Если Выборка.РаспределениеРасходовПоВидамДеятельности > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Распределение Расходов По Видам Деятельности
			|";
		КонецЕсли;
		
		Если Выборка.НормированиеРасходовНаРекламу > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Нормирование Расходов На Рекламу
			|";
		КонецЕсли;
	    
		Если Выборка.НормированиеРасходовНаДобровольноеСтрахование > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Нормирование Расходов На Добровольное Страхование
			|";
		КонецЕсли;
		
		Если Выборка.НормированиеПредставительскихРасходов > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Нормирование Представительских Расходов
			|";
		КонецЕсли;
		
		Если Выборка.СписаниеТранспортныхРасходов > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Списание Транспортных Расходов
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеCчетовКосвенныхРасходов > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие Cчетов Косвенных Расходов
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчетаН90 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие Счета 90 в НУ
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчетаН91 > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Закрытие Счета 91 в НУ
			|";
		КонецЕсли;
		
		Если Выборка.РасчетПостоянныхРазницПоПБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет постоянных налоговых активов и обязательств
			|";
		КонецЕсли;
		
		Если Выборка.РасчетВременныхРазницПоПБУ > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет временных налоговых активов и обязательств
			|";
		КонецЕсли;
		
		Если Выборка.РасчетНалогаНаПрибыль > 1 Тогда
			ТекстСообщения = ТекстСообщения + "Повторение операции Расчет Налога На Прибыль
			|";
		КонецЕсли;
		
		Если Выборка.РеформацияБалансаБУ > 1 Тогда   
			ТекстСообщения = ТекстСообщения + "Повторение операции Реформация баланса в БУ
			|";
		КонецЕсли;
		
		Если Выборка.ЗакрытиеСчетовНУ > 1 Тогда    
			ТекстСообщения = ТекстСообщения + "Повторение операции Реформация баланса в НУ
			|";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
Конецфункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры
