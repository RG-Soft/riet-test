////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет регистр сведений СоответствиеСчетовБУиНУ значениями по умолчанию
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	СоответствиеСчетовБУиНУ.Очистить();
	
	#Если Клиент Тогда
	Состояние("Установка соответствий между счетами бухгалтерского и налогового учета...");
	#КонецЕсли
	Макет = ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 3 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаКоррБУ = Макет.Область(Индекс, 5, Индекс, 5).Текст;
		КодСчетаКоррБУ = Макет.Область(Индекс, 6, Индекс, 6).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
		ИмяВидЗатратНУ = Макет.Область(Индекс, 7, Индекс, 7).Текст;
		

		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;
			
			СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаБУ);
			#Если Клиент Тогда
				Состояние("Установка соответствий для счета: " + Строка(СчетБУ));
			#КонецЕсли
			
			Если СчетБУ = Неопределено Тогда
				Продолжить; // Нет счета с таким именем
			КонецЕсли;
			
			Если СчетБУ.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить; // Счета - группы пропускаются
			КонецЕсли;

			СчетКоррБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
			СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
			Если СчетНУ = Неопределено Тогда
				Продолжить; // Нет счета с таким именем
			КонецЕсли;
			
			Если СчетНУ.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить; // Счета - группы пропускаются
			КонецЕсли;
			
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетБУ) Или ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
		

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ИмяВидЗатратНУ) Тогда
			Если Лев(КодСчетаБУ, 2) = "91" Тогда
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидЗатратНУ];
			Иначе
				ВидЗатратНУ = Перечисления.ВидыРасходовНУ[ИмяВидЗатратНУ];
			КонецЕсли;
		Иначе
			Если Лев(КодСчетаБУ, 2) = "91" Тогда
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
			Иначе
				ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

		Запись = СоответствиеСчетовБУиНУ.Добавить();

		Запись.СчетБУ = СчетБУ;
		КолвоСубконто = СчетБУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоБУ1 = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоБУ2 = Новый(СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоБУ3 = Новый(СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СчетКоррБУ) Тогда
			Запись.СчетКоррБУ = СчетКоррБУ;
		КонецЕсли;


		Запись.СчетНУ = СчетНУ;
		КолвоСубконто = СчетНУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоНУ1 = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоНУ2 = Новый(СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоНУ3 = Новый(СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВидЗатратНУ) Тогда
			Запись.ВидЗатратНУ = ВидЗатратНУ;
		КонецЕсли;
		Запись.Учитывается = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию()

// Удаляет из регистра сведений СоответствиеСчетовБУиНУ соответствия со счетами группами
//
Процедура УдалитьГруппыИзСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	ТаблицаСтрая = СоответствиеСчетовБУиНУ.Выгрузить();
	ТаблицаНовая = Новый ТаблицаЗначений;
	ТаблицаНовая.Колонки.Добавить("СчетБУ");
	ТаблицаНовая.Колонки.Добавить("СчетКоррБУ");
	ТаблицаНовая.Колонки.Добавить("СубконтоБУ1");
	ТаблицаНовая.Колонки.Добавить("СубконтоБУ2");
	ТаблицаНовая.Колонки.Добавить("СубконтоБУ3");
	ТаблицаНовая.Колонки.Добавить("ВидЗатратНУ");
	ТаблицаНовая.Колонки.Добавить("СчетНУ");
	ТаблицаНовая.Колонки.Добавить("СубконтоНУ1");
	ТаблицаНовая.Колонки.Добавить("СубконтоНУ2");
	ТаблицаНовая.Колонки.Добавить("СубконтоНУ3");
	ТаблицаНовая.Колонки.Добавить("Учитывается");
	ТаблицаНовая.Колонки.Добавить("Комментарий");
	
	СоответствиеСчетовБУиНУ.Очистить();
	
	#Если Клиент Тогда
	Состояние("Удаление групп из соответствий между счетами бухгалтерского и налогового учета...");
	#КонецЕсли

Для Каждого Строка Из ТаблицаСтрая Цикл
	
	Если Строка.СчетБУ.ЗапретитьИспользоватьВПроводках Или Строка.СчетНУ.ЗапретитьИспользоватьВПроводках Тогда
		Продолжить;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.СчетБУ      = Строка.СчетБУ;
	НоваяСтрока.СчетКоррБУ  = Строка.СчетКоррБУ;
	НоваяСтрока.СубконтоБУ1 = Строка.СубконтоБУ1;
	НоваяСтрока.СубконтоБУ2 = Строка.СубконтоБУ2;
	НоваяСтрока.СубконтоБУ3 = Строка.СубконтоБУ3;
	НоваяСтрока.ВидЗатратНУ = Строка.ВидЗатратНУ;
	НоваяСтрока.СчетНУ      = Строка.СчетНУ;
	НоваяСтрока.СубконтоНУ1 = Строка.СубконтоНУ1;
	НоваяСтрока.СубконтоНУ2 = Строка.СубконтоНУ2;
	НоваяСтрока.СубконтоНУ3 = Строка.СубконтоНУ3;
	НоваяСтрока.Учитывается  = Строка.Учитывается;
	НоваяСтрока.Комментарий  = Строка.Комментарий;
КонецЦикла;

СоответствиеСчетовБУиНУ.Загрузить(ТаблицаНовая);	

КонецПроцедуры

// Дополняет регистр сведений СоответствиеСчетовБУиНУ недостающими значениями по умолчанию 
//
Процедура ДополнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	Макет = ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 3 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаКоррБУ = Макет.Область(Индекс, 5, Индекс, 5).Текст;
		КодСчетаКоррБУ = Макет.Область(Индекс, 6, Индекс, 6).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
		ИмяВидЗатратНУ = Макет.Область(Индекс, 7, Индекс, 7).Текст;
		
		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;	
			СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаБУ);
			#Если Клиент Тогда
				Состояние("Установка соответствий для счета: " + Строка(СчетБУ));
			#КонецЕсли
			
			Если СчетБУ = Неопределено Тогда
				Продолжить; // Нет счета с таким именем
			КонецЕсли;

			СчетКоррБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
			СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
			Если СчетНУ = Неопределено Тогда
				Продолжить; // Нет счета с таким именем
			КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетБУ) Или ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
		
			СчетКоррБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаКоррБУ);
		Если СчетКоррБУ= Неопределено Тогда
			СчетКоррБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ИмяВидЗатратНУ) Тогда
			Если Лев(КодСчетаБУ, 2) = "91" Тогда
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидЗатратНУ];
			Иначе
				ВидЗатратНУ = Перечисления.ВидыРасходовНУ[ИмяВидЗатратНУ];
			КонецЕсли;
		Иначе
			Если Лев(КодСчетаБУ, 2) = "91" Тогда
				ВидЗатратНУ = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
			Иначе
				ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Запись = СоответствиеСчетовБУиНУ.Добавить();

		Запись.СчетБУ = СчетБУ;
		КолвоСубконто = СчетБУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоБУ1 = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоБУ2 = Новый(СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоБУ3 = Новый(СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		КонецЕсли;

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СчетКоррБУ) Тогда
			Запись.СчетКоррБУ = СчетКоррБУ;
		КонецЕсли;


		Запись.СчетНУ = СчетНУ;
		КолвоСубконто = СчетНУ.ВидыСубконто.Количество();
		Если КолвоСубконто > 0 Тогда
			Запись.СубконтоНУ1 = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 1 Тогда
			Запись.СубконтоНУ2 = Новый(СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		Если КолвоСубконто > 2 Тогда
			Запись.СубконтоНУ3 = Новый(СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВидЗатратНУ) Тогда
			Запись.ВидЗатратНУ = ВидЗатратНУ;
		КонецЕсли;
		Запись.Учитывается = Истина;
		
	КонецЦикла;
	
	ТекущийНабор = СоответствиеСчетовБУиНУ.Выгрузить();
	ТекущийНабор.Колонки.Добавить("Флаг", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	ТекущийНабор.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ, СчетНУ, Учитывается, Комментарий", "Флаг");
	
	НаборПроверки = СоответствиеСчетовБУиНУ.Выгрузить();
	НаборПроверки.Колонки.Добавить("Флаг", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	НаборПроверки.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ, СчетНУ, Учитывается, Комментарий", "Флаг");
	НаборПроверки.ЗаполнитьЗначения(1, "Флаг");
	НаборПроверки.Свернуть("СчетБУ, СчетКоррБУ, ВидЗатратНУ", "Флаг");
	Для Каждого СтрокаПроверки Из НаборПроверки Цикл
		КоличествоПовторений = СтрокаПроверки.Флаг;
		Если КоличествоПовторений > 1 Тогда
			Для Каждого СтрокаНабора Из ТекущийНабор Цикл
				Если СтрокаНабора.СчетБУ = СтрокаПроверки.СчетБУ И СтрокаНабора.СчетКоррБУ = СтрокаПроверки.СчетКоррБУ И СтрокаНабора.ВидЗатратНУ = СтрокаПроверки.ВидЗатратНУ Тогда
					ТекущийНабор.Удалить(СтрокаНабора);
					КоличествоПовторений = КоличествоПовторений - 1;
					Если КоличествоПовторений = 1 Тогда
					Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСчетовБУиНУ.Загрузить(ТекущийНабор);
	
КонецПроцедуры // ДОполнитьСоответствиеСчетовБУиНУпоУмолчанию()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	Для Каждого ТекСтрокаСоответствиеСчетовБУиНУ Из СоответствиеСчетовБУиНУ Цикл
		Движение = Движения.СоответствиеСчетовБУиНУ.Добавить();
		Движение.Период = Дата;
		Движение.СчетБУ = ТекСтрокаСоответствиеСчетовБУиНУ.СчетБУ;
		Движение.СчетКоррБУ = ТекСтрокаСоответствиеСчетовБУиНУ.СчетКоррБУ;
		Движение.СубконтоБУ1 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ1;
		Движение.СубконтоБУ2 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ2;
		Движение.СубконтоБУ3 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоБУ3;
		Движение.ВидЗатратНУ = ТекСтрокаСоответствиеСчетовБУиНУ.ВидЗатратНУ;
		Движение.СчетНУ = ТекСтрокаСоответствиеСчетовБУиНУ.СчетНУ;
		Движение.СубконтоНУ1 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ1;
		Движение.СубконтоНУ2 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ2;
		Движение.СубконтоНУ3 = ТекСтрокаСоответствиеСчетовБУиНУ.СубконтоНУ3;
		Движение.Учитывается = ТекСтрокаСоответствиеСчетовБУиНУ.Учитывается;
		Движение.Комментарий = ТекСтрокаСоответствиеСчетовБУиНУ.Комментарий;
		Движение.РеквизитПредставление = "";
	КонецЦикла;
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры