
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУдалятьДвижения;

Перем мНачалоОткрытогоУправленческогоПериода Экспорт; // Используется в обработке Формирование оплат для установки кеша
Перем мНачалоОткрытогоНалоговогоПериода Экспорт; // Используется в обработке Формирование оплат для установки кеша


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТА

// ДОДЕЛАТЬ!!!
Процедура ОбновитьСоставПроводокИЗаполнитьДокумент(Отказ = Ложь, Заголовок = Неопределено, МассивПроводок = Неопределено) Экспорт
		
	Если Заголовок = Неопределено Тогда
		Заголовок = "Заполнение документа """ + ЭтотОбъект + """ с Reference = " + Reference;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
			
	НачатьТранзакцию();
	НачалоДняДаты = НачалоДня(Дата);
	Если НЕ ЭтоНовый() Тогда
		
		// Отвяжем проводки, которые не должны быть привязаны к документу
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		// МОЖНО СРАЗУ ВЫБИРАТЬ ТЕ ПРОВОДКИ, КОТОРЫЕ НАДО ОТВЯЗАТЬ
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроводкаDSS.Company,
		|	ПроводкаDSS.DateLawson,
		|	ПроводкаDSS.Reference,
		|	ПроводкаDSS.ПометкаУдаления,
		|	ПроводкаDSS.Ссылка,
		|	ПроводкаDSS.Currency
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			ПустаяСсылка = Документы.ОплатаКнигиПокупок.ПустаяСсылка();
			Пока Выборка.Следующий() Цикл
				
				ОтвязатьПроводку = Выборка.ПометкаУдаления
				ИЛИ СокрЛП(Выборка.Reference) <> СокрЛП(Reference)
				ИЛИ Выборка.Company <> Company 
				ИЛИ Выборка.DateLawson <> НачалоДняДаты
				ИЛИ Выборка.Currency <> ВалютаДокумента;
				
				Если ОтвязатьПроводку Тогда
					
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Документ = ПустаяСсылка;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ТекстОшибки = "Не удалось записать элемент справочника ""Проводки DSS оплат книги покупок"" """ + ДокументОбъект + """: " + ОписаниеОшибки();
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
						ОтменитьТранзакцию();
						Возврат;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.Следующий()
			
		КонецЕсли; // Если НЕ Результат.Пустой()		
		
		// Если документ еще не записан - запишем его
	Иначе 
		
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстОшибки = "Не удалось записать документ """ + ЭтотОбъект + """ с Reference = " + Reference + ": " + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	КонецЕсли; // Если НЕ ЭтоНовый()
	
	Если МассивПроводок = Неопределено Тогда		
		// Найдем проводки, которые можно привязать к документу
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Reference", Reference);
		Запрос.УстановитьПараметр("DateLawson", НачалоДняДаты);
		Запрос.УстановитьПараметр("Currency", ВалютаДокумента);
		Запрос.УстановитьПараметр("Company", Company);	
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроводкаDSS.Ссылка
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|   ПроводкаDSS.System = ""AP""
		|	И ПроводкаDSS.Reference = &Reference
		|	И ПроводкаDSS.DateLawson = &DateLawson
		|	И ПроводкаDSS.Currency = &Currency
		|	И ПроводкаDSS.Company = &Company
		|	И ПроводкаDSS.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.PurchaseBook)
		|	И (ПроводкаDSS.SourceCode = ""AP""
		|			ИЛИ ПроводкаDSS.SourceCode = ""VP"")
		|	И НЕ ПроводкаDSS.Документ ССЫЛКА Документ.ОплатаКнигиПокупок
		|	И (ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.CashDisbursement)
		|			ИЛИ ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.PaymentAccrual))
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			// Привяжем проводки к документу, при этом перезаполнится ТЧ
			МассивПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
			МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, ЭтотОбъект, Отказ, Заголовок);
			
		Иначе     		
			ЗаполнитьТЧСуммыПоПривязаннымПроводкам(Отказ, Заголовок);
			
		КонецЕсли;
		
	Иначе
		МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, ЭтотОбъект, Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьШапкуДокументаПоПривязаннымПроводкам(, Заголовок);
	
КонецПроцедуры

//ДОДЕЛАТЬ!!!
Процедура ЗаполнитьШапкуДокументаПоПривязаннымПроводкам(Отказ = Ложь, Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		Заголовок = "Заполнение шапки документа """ + ЭтотОбъект + """ с Reference = " + Reference;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроводкаDSS.Company,
		|	ПроводкаDSS.DateLawson,
		|	ПроводкаDSS.Reference,
		|	ПроводкаDSS.Currency
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|	И (ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.CashDisbursement)
		|			ИЛИ ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.PaymentAccrual))";
		
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("К документу не привязано ни одной проводки, по которой можно заполнить шапку!
			|Шапка документа заполнена не будет!", Отказ, Заголовок);
		Возврат;
			
	Иначе
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("К документу привязаны проводки с различной комбинацией Company, DateLawson, Reference и Currency.
				|Шапка документа заполнена не будет!", Отказ, Заголовок);
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
		
	Выборка.Следующий();
				
	Если мНачалоОткрытогоУправленческогоПериода = Неопределено Тогда
		мНачалоОткрытогоУправленческогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
	КонецЕсли;
	
	Если мНачалоОткрытогоНалоговогоПериода = Неопределено Тогда
		мНачалоОткрытогоНалоговогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
	КонецЕсли;
			
	// Дата документа
	Дата = Выборка.DateLawson;
	
	// Налоговый период
	НалоговыйПериод = Дата;
	Если ЗначениеЗаполнено(мНачалоОткрытогоНалоговогоПериода)
		И НалоговыйПериод < мНачалоОткрытогоНалоговогоПериода Тогда
		НалоговыйПериод = мНачалоОткрытогоНалоговогоПериода;
	КонецЕсли;
	
	// Дата проведения
	ДатаПроведения = Дата;
	Если ЗначениеЗаполнено(мНачалоОткрытогоУправленческогоПериода)
		И ДатаПроведения < мНачалоОткрытогоУправленческогоПериода Тогда
		ДатаПроведения = мНачалоОткрытогоУправленческогоПериода;
	КонецЕсли;		
	
	// Company
	Company = Выборка.Company;
	
	// Организация
	// СДЕЛАТЬ КЕШ ОРГАНИЗАЦИЙ!!!
	Организация = ПолучениеСсылок.ПолучитьОрганизациюПоCompany(Выборка.Company);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось определить организацию по Company " + Выборка.Company + "
			|Документ сформирован не будет!", , Заголовок);
	КонецЕсли;
		
	// Reference
	Reference = Выборка.Reference;
					
	// Валюта документа
	ВалютаДокумента = Выборка.Currency;
	ПересчитатьКурсДокумента();
			
КонецПроцедуры

Процедура ЗаполнитьТЧСуммыПоПривязаннымПроводкам(Отказ = Ложь, Заголовок=Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ новый - то к нему не может быть привязано проводок
	//	поэтому можно сразу выйти
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Заголовок=Неопределено Тогда
		Заголовок = "Заполнение табличной документа """ + ЭтотОбъект + """ с Reference = " + Reference + " по привязанным проводкам";
	КонецЕсли;
	
	Суммы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.Company,
		|	ПроводкаDSS.DateLawson,
		|	ПроводкаDSS.Reference,
		|	ПроводкаDSS.Currency,
		|	ПроводкаDSS.TranAmount,
		|	ПроводкаDSS.ПометкаУдаления,
		|	ПроводкаDSS.ТипПроводки,
		|	ПроводкаDSS.Ваучер
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|	И ПроводкаDSS.ТипПроводки = ЗНАЧЕНИЕ(Перечисление.ТипыПроводокAPAP.CashDisbursement)";
		

		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("К документу не привязано ни одной проводки типа Cash Disbursement!
			|Табличная часть заполнена не будет!", Отказ, Заголовок);
		Возврат;
			
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		НоваяСтрокаТЧ = Суммы.Добавить();
		НоваяСтрокаТЧ.Ваучер = Выборка.Ваучер;
		НоваяСтрокаТЧ.Сумма = -Выборка.TranAmount;
				
	КонецЦикла;
	
	Суммы.Свернуть("Ваучер", "Сумма, СуммаРуб");	
	ПерезаполнитьСуммыРуб();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ ДОКУМЕНТА

Процедура ПересчитатьКурсДокумента() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НовыйКурсДокумента = 1;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НовыйКурсДокумента = СтруктураКурса.Курс / СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Если НовыйКурсДокумента <> КурсДокумента Тогда
		
		КурсДокумента = НовыйКурсДокумента;
		ПриИзмененииКурсаДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКурсаДокумента() Экспорт
	
	ПерезаполнитьСуммыРуб();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ "СУММЫ"

Процедура ПерезаполнитьСуммыРуб() Экспорт
	
	Для Каждого Строка Из Суммы Цикл
		
		ПерезаполнитьСуммуРубВСтрокеТЧСуммы(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьСуммуРубВСтрокеТЧСуммы(Строка) Экспорт
	
	Строка.СуммаРуб = Строка.Сумма * КурсДокумента;
	
КонецПроцедуры

Процедура ПерезаполнитьСуммуВСтрокеТЧСуммы(Строка) Экспорт
	
	Если КурсДокумента Тогда
		Строка.Сумма = Строка.СуммаРуб / КурсДокумента;
	Иначе
		Строка.Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ОБЕСПЕЧИВАЮЩИЕ ЗАПИСЬ И ПРОВЕДЕНИЕ ДОКУМЕНТА

Функция ПолучитьСуммуРасхождения()
	
	Если ЭтоНовый() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПроводкаDSS.TranAmount),0) КАК TranAmount
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
			
	Возврат Выборка.TranAmount;
	
КонецФункции

Процедура ОтвязатьПроводки(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ новый - к нему не может быть привязано проводок, выходим
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = "Отвязывание проводок от документа """ + ЭтотОбъект + """";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроводкаDSS.Ссылка
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS";
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, Документы.ОплатаКнигиПокупок.ПустаяСсылка(), Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
		
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ДатаПроведения");
	СтруктураОбязательныхПолей.Вставить("НалоговыйПериод");
	СтруктураОбязательныхПолей.Вставить("Организация");
	СтруктураОбязательныхПолей.Вставить("Reference");
	СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
	СтруктураОбязательныхПолей.Вставить("КурсДокумента");
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок, Истина, Истина);
		
	// Выполним более сложные проверки
	Если СуммаРасхождения <> 0 Тогда	
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаЗаполненНеправильно(ЭтотОбъект, "Проводки DSS", 0, "Соотношение проводок", "Сумма проводок не равна нулю", "", Отказ, Истина, Заголовок);	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеТабличнойЧастиСуммы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ Суммы.Количество() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Ваучер");
	СтруктураОбязательныхПолей.Вставить("Сумма");
	СтруктураОбязательныхПолей.Вставить("СуммаРуб");
		
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Суммы", СтруктураОбязательныхПолей, Отказ, Заголовок, , Истина, Истина);
		
КонецПроцедуры

Функция СформироватьТаблицуСуммы()
	
	ТаблицаСуммы = Суммы.Выгрузить();
	ТаблицаСуммы.Свернуть("Ваучер", "Сумма, СуммаРуб"); 
	
	Возврат ТаблицаСуммы;
	
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСостав, Отказ, Заголовок);
	
	ДвиженияПоНеоплаченнымВаучерам = Движения.НеоплаченныеОстаткиПоВаучерам;
	Для Каждого Строка Из ТаблицаСостав Цикл
		
		Движение = ДвиженияПоНеоплаченнымВаучерам.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = СтруктураШапкиДокумента.ДатаПроведения;
		Движение.Ваучер = Строка.Ваучер;
		Движение.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
		Движение.Сумма = Строка.Сумма;
		Движение.СуммаРуб = Строка.СуммаРуб;
		
	КонецЦикла;
	
	// Если валюта оплаты рубли, а валюта счета не рубли, то рассчитываем курсовую разницу и плюсуем их в НДСПредъявленный
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	Если ВалютаДокумента = ВалютаРуб И ДатаПроведения < Дата("20111001000000") Тогда // Изменил Булавский 27_11_2011 РГ-Софт
		ДвиженияПоНДСПредъявленный = Движения.НДСПредъявленный;
		Для каждого СтрокаТЧ Из ТаблицаСостав Цикл
			СчетКП = Документы.СчетКнигиПокупок.НайтиПоРеквизиту("Ваучер", СтрокаТЧ.Ваучер);
			Если НЕ СчетКП.Пустая() И ЗначениеЗаполнено(СчетКП.ВалютаДокумента) И СчетКП.ВалютаДокумента<>ВалютаРуб И СчетКП.СуммаНДСДокументаРуб<>0 Тогда
				КурсСКП = СчетКП.КурсДокумента;
				ОтборПоИзмерениям = Новый Структура;
				ОтборПоИзмерениям.Вставить("Валюта", СчетКП.ВалютаДокумента);
				КурсОКП = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПроведения, ОтборПоИзмерениям).Курс;
				СуммаВалОКП = СтрокаТЧ.СуммаРуб/КурсОКП;
				СуммаВалОКП = ?(СуммаВалОКП<СчетКП.СуммаДокументаСНДС, СуммаВалОКП, СчетКП.СуммаДокументаСНДС);
				СуммаРазницы = (КурсСКП - КурсОКП)*СуммаВалОКП;
				
				Движение = ДвиженияПоНДСПредъявленный.Добавить();
				Движение.Период = ДатаПроведения;
				Движение.ПодразделениеОрганизации = СчетКП.ПодразделениеОрганизации;
				Движение.СчетФактура = СчетКП.Ссылка;
				Движение.ВидВычета = Перечисления.ВидыНДСкВычету.КурсовыеРазницы;
				Движение.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
				Движение.СтавкаНДС = ?(ЗначениеЗаполнено(СчетКП.Суммы[0].СтавкаНДС), СчетКП.Суммы[0].СтавкаНДС, Перечисления.СтавкиНДС.НДС18);
				Движение.Поставщик = СчетКП.Контрагент;
				Движение.Валюта = СчетКП.ВалютаДокумента;
				
				СуммаРазницы = -СуммаРазницы;
				Движение.НДС = УчетНДС.ОпределитьСуммуНДС(СуммаРазницы, Движение.СтавкаНДС);
				Движение.СуммаБезНДС = СуммаРазницы - Движение.НДС;
				//Движение.СуммаБезНДСВВалюте = СуммаРазницы;
				//Движение.НДСВВалюте = СуммаРазницы;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
		
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Рассчитаем сумму расхождения
	ОбщегоНазначения.УстановитьЗначение(СуммаРасхождения, ПолучитьСуммуРасхождения());
	
	// Заполним реквизит Company
	ОбщегоНазначения.УстановитьЗначение(Company, ПолучениеСсылок.ПолучитьCompanyПоОрганизации(Организация));
	
	// Подкорректируем ваучеры
	Для Каждого Строка Из Суммы Цикл
		ОбщегоНазначения.УстановитьЗначение(Строка.Ваучер, СокрЛП(Строка.Ваучер));
	КонецЦикла;
	
	// Получим итоговые суммы документа
	ОбщегоНазначения.УстановитьЗначение(СуммаДокумента, Суммы.Итог("Сумма"));
	ОбщегоНазначения.УстановитьЗначение(СуммаДокументаРуб, Суммы.Итог("СуммаРуб"));
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ОтвязатьПроводки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// ПЕРЕНЕСТИ ЧАСТЬ ПРОВЕРОК В ПЕРЕД ЗАПИСЬЮ!!!
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения табличной части "Суммы"
	ПроверитьЗаполнениеТабличнойЧастиСуммы(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Сформируем таблицу состав
	ТаблицаСуммы = СформироватьТаблицуСуммы();
			
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСуммы, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
УчетОшибокЗаполнения.ИнициализироватьСтруктуруДанныхОшибокЗаполнения(ЭтотОбъект);
