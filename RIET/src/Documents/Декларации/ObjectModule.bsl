
Перем мУдалятьДвижения;


////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТамДекларации") Тогда
		ВалютаПлатежаПошлин = Основание.ВалютаПлатежаПошлин;
		ГТД = Основание.ГТД;
		ДатаГТД = Основание.ДатаГТД;
		Пошлина10 = Основание.Пошлина10;
		Пошлина11 = Основание.Пошлина11;
		Пошлина20 = Основание.Пошлина20;
		ПрочиеПошлины = Основание.ПрочиеПошлины;
		СуммаНДС = Основание.СуммаНДС;
		ТипДокумента = Основание.ТипДокумента;
		ДокументОснование = Основание;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ТекДатыСлипов = "";	
	Для каждого стр из Слипы цикл
		ТекДатыСлипов = ТекДатыСлипов + Лев(стр.ДатаСлипа,10) + ", ";	
	КонецЦикла;
	ДлинаТекДатыСлипов = СтрДлина(ТекДатыСлипов);
	Если ДлинаТекДатыСлипов > 2 тогда
		ТекДатыСлипов = Лев(ТекДатыСлипов, ДлинаТекДатыСлипов - 2);
	КонецЕсли;
    ОбщегоНазначения.УстановитьЗначение(ДатыСлипов, ТекДатыСлипов);
	
	//Добавил РГ-Софт - Иванов Антон 2009-04-10
    //Удалим лишние пробелы в МАТО
	Для Каждого Строка Из Состав Цикл
		ОбщегоНазначения.УстановитьЗначение(Строка.МАТО, СокрЛП(Строка.МАТО));
	КонецЦикла;
	
	// Сформируем структуру шапки документа и поместим в доп. свойства, чтобы использовать в других обработчиках
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	
	// Сформируем заголовок для вывода сообщений и поместим в доп. свойства, чтобы использовать в других обработчиках
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	ДополнительныеСвойства.Вставить("Заголовок", Заголовок);

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Проверим правильность заполнения шапки документа
	// Можем делать это перед записью, потому что все процедуры формирования и проверки шапки работают с объектом, а не со ссылкой
	// Таблицы будем проверять при записи, так как соответсвующие процедуры работают со ссылкой, а не с объектом.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	Иначе
		
		Если ДополнительныеСвойства.Свойство("НеВыводитьОшибкиПриЗаписи") = Неопределено Тогда
			ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Неопределено, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ТаблицаСостав = ПолучитьТаблицуСостав();
	ДополнительныеСвойства.Вставить("ТаблицаСостав", ТаблицаСостав);
	
	ТаблицаСлипы = ПолучитьТаблицуСлипов();
	ДополнительныеСвойства.Вставить("ТаблицаСлипы", ТаблицаСлипы);
	
	Заголовок = ДополнительныеСвойства.Заголовок;
	СтруктураШапкиДокумента = ДополнительныеСвойства.СтруктураШапкиДокумента;
	РежимЗаписи = ДополнительныеСвойства.РежимЗаписи;
	
	// Табличные части, в отличие от шапки, проверяем после записи, так как процедуры получения таблиц ТЧ и проверки заполнения работают со ссылкой, а не с объектм
	// Шапку можем проверить перед записью
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьЗаполнениеТабличнойЧастиСостав(СтруктураШапкиДокумента, ТаблицаСостав, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиСлипы(СтруктураШапкиДокумента, ТаблицаСлипы, Отказ, Заголовок);
		
	Иначе
		
		Если ДополнительныеСвойства.Свойство("НеВыводитьОшибкиПриЗаписи") = Неопределено Тогда
			ПроверитьЗаполнениеТабличнойЧастиСостав(СтруктураШапкиДокумента, ТаблицаСостав, Неопределено, Заголовок);
			ПроверитьЗаполнениеТабличнойЧастиСлипы(СтруктураШапкиДокумента, ТаблицаСлипы, Неопределено, Заголовок);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	// Получим переменные из дополнительных свойств
	Заголовок = ДополнительныеСвойства.Заголовок;
	СтруктураШапкиДокумента = ДополнительныеСвойства.СтруктураШапкиДокумента;
	ТаблицаСостав	= ДополнительныеСвойства.ТаблицаСостав;
	ТаблицаСлипы	= ДополнительныеСвойства.ТаблицаСлипы;
				
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСостав, ТаблицаСлипы, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// ПОДДЕРЖКА ПРОВЕДЕНИЯ

Функция ПолучитьТаблицуСостав()
	
	СтруктураПолей = Новый Структура;
	
	// ПРОВЕРИТЬ, НАВЕРНЯКА ПРИ ПРОВЕДЕНИИ ИСПОЛЬЗУЮТСЯ НЕ ВСЕ ПОЛЯ!!!
	СтруктураПолей.Вставить("Поставщик"						, "Поставщик");
	
	СтруктураПолей.Вставить("НомерИнвойса"					, "НомерИнвойса");
	СтруктураПолей.Вставить("ДатаСчета"						, "ДатаСчета");
		
	СтруктураПолей.Вставить("МАТО"							, "МАТО");
	СтруктураПолей.Вставить("НомерСтрокиПО"					, "НомерСтрокиПО");
	СтруктураПолей.Вставить("КодПродукта"					, "КодПродукта");
	СтруктураПолей.Вставить("Описание"						, "Описание");
	СтруктураПолей.Вставить("НомерТовараПоГТД"				, "НомерТовараПоГТД");
	
	СтруктураПолей.Вставить("Перевод"						, "Перевод");
	СтруктураПолей.Вставить("Тип"							, "Тип");	
	СтруктураПолей.Вставить("КодОС"							, "КодОС");
	СтруктураПолей.Вставить("ВИН"							, "ВИН");
	СтруктураПолей.Вставить("ДатаВводаОС"					, "ДатаВводаОС");
	
	СтруктураПолей.Вставить("Количество"					, "Количество");	
	СтруктураПолей.Вставить("ЕдИзм"							, "ЕдИзм");
	СтруктураПолей.Вставить("ЦенаВал"						, "ЦенаВал");
	СтруктураПолей.Вставить("ВсегоВал"						, "ВсегоВал");
	СтруктураПолей.Вставить("ВсегоИнвойсВал"				, "ВсегоИнвойсВал");	
	СтруктураПолей.Вставить("ПроцентОтИнвойса"				, "ПроцентОтИнвойса");
	СтруктураПолей.Вставить("СтоимостьПеревозки"			, "СтоимостьПеревозки");
	СтруктураПолей.Вставить("ДоставаЗаЕд"					, "ДоставаЗаЕд");	
	СтруктураПолей.Вставить("СтоимостьСтраховкиВсего"		, "СтоимостьСтраховкиВсего");
	СтруктураПолей.Вставить("СтоимостьСтраховки"			, "СтоимостьСтраховки");	
	СтруктураПолей.Вставить("ТранспортнаяОбработкаВсего"	, "ТранспортнаяОбработкаВсего");
	СтруктураПолей.Вставить("ТранспортнаяОбработкаПоСтроке"	, "ТранспортнаяОбработкаПоСтроке");
	СтруктураПолей.Вставить("ИтогоПоСтрокеИнвойса"			, "ИтогоПоСтрокеИнвойса");
	
	СтруктураПолей.Вставить("ВалютаИнвойса"					, "ВалютаИнвойса");
	СтруктураПолей.Вставить("Курс"							, "Курс");
	СтруктураПолей.Вставить("ВсегоИнвойсРуб"				, "ВсегоИнвойсРуб");	
	СтруктураПолей.Вставить("ПроцентПошлин"					, "ПроцентПошлин");
	СтруктураПолей.Вставить("СуммаПошлинПоГТДРуб"			, "СуммаПошлинПоГТДРуб");
	СтруктураПолей.Вставить("СуммаПошлинПоИнвойсуРуб"		, "СуммаПошлинПоИнвойсуРуб");	
	СтруктураПолей.Вставить("ФактурнаяСтоимостьРуб"			, "ФактурнаяСтоимостьРуб");
	СтруктураПолей.Вставить("Пошлина10Строки"				, "Пошлина10Строки");
	СтруктураПолей.Вставить("Пошлина11Строки"				, "Пошлина11Строки");	
	СтруктураПолей.Вставить("Пошлина20Строки"				, "Пошлина20Строки");
	СтруктураПолей.Вставить("СуммаНДССтроки"				, "СуммаНДССтроки");	
	СтруктураПолей.Вставить("ПрочиеПошлиныСтроки"			, "ПрочиеПошлиныСтроки");
	СтруктураПолей.Вставить("ШрафПоГТД"						, "ШрафПоГТД");
	
	СтруктураПолей.Вставить("НалРегистрация"				, "НалРегистрация");
	СтруктураПолей.Вставить("Комментарий"					, "Комментарий");
	СтруктураПолей.Вставить("ПредшИмпДеклар"				, "ПредшИмпДеклар");
	СтруктураПолей.Вставить("AU"							, "AU");
	СтруктураПолей.Вставить("Трансфер"						, "Трансфер");
	СтруктураПолей.Вставить("Причина"						, "Причина");
	СтруктураПолей.Вставить("Пользователь"					, "Пользователь");
	
	СтруктураПолей.Вставить("ДатаПоследнегоИзменения"		, "ДатаПоследнегоИзменения");
	СтруктураПолей.Вставить("ТипТМЦМДЖ"						, "ТипТМЦМДЖ");	
	СтруктураПолей.Вставить("СчетГААП"						, "СчетГААП");
	СтруктураПолей.Вставить("ActivityCode"					, "ActivityCode");	
	СтруктураПолей.Вставить("Страна"						, "Страна");
	СтруктураПолей.Вставить("СерийныйНомер"					, "СерийныйНомер");
		
	РезультатЗапросаПоСоставу = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	Возврат РезультатЗапросаПоСоставу.Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуСлипов()
	
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДатаСлипа"		, "ДатаСлипа");	
	СтруктураПолей.Вставить("СуммаСлипа"	, "СуммаСлипа");
			
	РезультатЗапросаПоСлипам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Слипы", СтруктураПолей);
	Возврат РезультатЗапросаПоСлипам.Выгрузить();
	
КонецФункции

// ДУМАТЬ!!!
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ДатаПроведения");
	СтруктураОбязательныхПолей.Вставить("НалоговыйПериод");
	СтруктураОбязательныхПолей.Вставить("Организация");
	СтруктураОбязательныхПолей.Вставить("Пошлина10");
	//СтруктураОбязательныхПолей.Вставить("Пошлина20");
	Если ТипДокумента.Пустая() Тогда   //добавила проверки Федотова Л, РГ-Софт, 13.10.09, так как для экспортных деклараций полее СуммаНДС - пустое
		СтруктураОбязательныхПолей.Вставить("СуммаНДС");
	Иначе
		Если НЕ ТипДокумента.Родитель = Справочники.CustomsRegimes.НайтиПоНаименованию("Export")  Тогда
	 		СтруктураОбязательныхПолей.Вставить("СуммаНДС");
        КонецЕсли;
    КонецЕсли;
	СтруктураОбязательныхПолей.Вставить("Получатель");
	СтруктураОбязательныхПолей.Вставить("Таможня");
	СтруктураОбязательныхПолей.Вставить("ТаможБрокер");
	СтруктураОбязательныхПолей.Вставить("МесяцВLawson");
	// ЧТО ЕЩЕ ОБЯЗАТЕЛЬНО ДЛЯ ЗАПОЛНЕНИЯ???
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	док = Документы.Декларации.НайтиПоНомеру(СтруктураШапкиДокумента.Номер);
	Если Не док.Пустая() И док.ссылка <> ссылка Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ с таким номером уже существует!", Отказ, Заголовок);
	КонецЕсли;
	
	// ОТКАЗ НЕ ПЕРЕДАЕТСЯ!!!
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ВалютаСчетов");
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Неопределено, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// ДУМАТЬ!!!
Процедура ПроверитьЗаполнениеТабличнойЧастиСостав(СтруктураШапкиДокумента, ТаблицаСостав, Отказ, Заголовок)
	
	СтруктураОбязательныхПолей = Новый Структура;
	
	СтруктураОбязательныхПолей.Вставить("НалРегистрация");
	СтруктураОбязательныхПолей.Вставить("AU");
	СтруктураОбязательныхПолей.Вставить("Тип"					, "Тип ТМЦ (нал. учет)");
	СтруктураОбязательныхПолей.Вставить("ТипТМЦМДЖ"				, "Тип ТМЦ (упр. учет)");
	СтруктураОбязательныхПолей.Вставить("Страна");
	СтруктураОбязательныхПолей.Вставить("ФактурнаяСтоимостьРуб"	, "Покупная стоимость");
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если НЕ ТаблицаСостав.Количество() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В декларацию не введено ни одной строки!", Отказ, Заголовок);
	КонецЕсли;
	
	// ОТКАЗ НЕ ПЕРЕДАЕТСЯ
	СтруктураОбязательныхПолей = Новый Структура;
	
	СтруктураОбязательныхПолей.Вставить("НомерИнвойса");
	СтруктураОбязательныхПолей.Вставить("Поставщик");
	СтруктураОбязательныхПолей.Вставить("ДатаСчета");
	СтруктураОбязательныхПолей.Вставить("Описание");
	СтруктураОбязательныхПолей.Вставить("Количество");
	СтруктураОбязательныхПолей.Вставить("ЕдИзм");
	СтруктураОбязательныхПолей.Вставить("ТипТМЦМДЖ");
	СтруктураОбязательныхПолей.Вставить("СчетГААП");
	СтруктураОбязательныхПолей.Вставить("ActivityCode");
	//Добавил комментарий - РГ-Софт - Иванов Антон - 2009-04-10
	//МАТО не проверяем, так как по словам Елены Зоткиной это поле может быть не всегда заполненым

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Неопределено, Заголовок, СтатусСообщения.Внимание);
	
	// Выполним более сложные проверки
	Для каждого стр из ТаблицаСостав цикл
					
		//Добавил РГ-Софт - Иванов Антон - 2009-03-27
		//Проверяем заполнение реквизитов МАТО и номерстроки ПО.
		МАТО = СокрЛП(стр.МАТО);
		Если Не ЗначениеЗаполнено(МАТО) Тогда
			
			ТекстПредупреждения = "В строке " + стр.НомерСтроки + " не указан Номер заказа! Это приведет к тому, что этот заказ ""повиснет"".";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждения, , Заголовок);
			
		Иначе
			
			//Предупреждаем о том, что номер должен иметь длину 10 символов
			//На самом деле он может иметь длину и 4 символа - тогда это Борг. Однако пользователи в большинстве случаев должны указывать 10 символов.
			ДлинаМАТО = СтрДлина(МАТО);
			Если ДлинаМАТО <> 10
				И ДлинаМАТО <> 4 Тогда
				
				ТекстПредупреждения = "В строке " + стр.НомерСтроки + " указан неверный Номер заказа. Длина Номера заказа должна составлять 10 символов!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждения, , Заголовок);								
								
			КонецЕсли;
			
			//Предупреждаем о том, что не заполнен номер строки
			Если НЕ ЗначениеЗаполнено(стр.НомерСтрокиПО) Тогда
				
				ТекстПредупреждения = "В строке " + стр.НомерСтроки + " не указан Номер строки заказа. В дальнейшем это приведет к неправильному списанию остатка по заказу!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждения, , Заголовок);
								
			КонецЕсли;
			
		КонецЕсли;
		//<- Конец добавления

		
		ПроверятьПеревод = Ложь;
		Если ТипЗнч(стр.Описание) = тип("СправочникСсылка.НоменклатураИмпорт") тогда
			
			ИмяРеквизитаРусскогоНаименования = "НаименованиеРусское";
			ПроверятьПеревод = Истина;
						
		ИначеЕсли ТипЗнч(стр.Описание) = тип("СправочникСсылка.Номенклатура") тогда
			
			ИмяРеквизитаРусскогоНаименования = "НаименованиеПолное";
			ПроверятьПеревод = Истина;
						
		КонецЕсли;
		
		Если ПроверятьПеревод
			И СокрЛП(стр.Описание[ИмяРеквизитаРусскогоНаименования]) = "" тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке " + стр.НомерСтроки + " не указан перевод.", , Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	//Добавил РГ-Софт - Иванов Антон - 2009-04-21
	ПроверитьОстаткиЗаказов(Заголовок);
	
	ПроверитьСуммы(Заголовок);
	
КонецПроцедуры

//Добавил РГ-Софт - Иванов Антон - 2009-04-21
Процедура ПроверитьОстаткиЗаказов(Заголовок)
	
	//Проверим, что каждая строчка списывает открытый остаток
	//Если это не так - ругаемся, но проводить даем, так как Заказ может быть еще не подгружен
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДекларацииСостав.МАТО,
		|	ДекларацииСостав.НомерСтрокиПО,
		|	ДекларацииСостав.Количество,
		|	ДекларацииСостав.НомерСтроки
		|ПОМЕСТИТЬ ТЧДокумента
		|ИЗ
		|	Документ.Декларации.Состав КАК ДекларацииСостав
		|ГДЕ
		|	ДекларацииСостав.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДокумента.НомерСтроки,
		|	ТЧДокумента.МАТО,
		|	ТЧДокумента.НомерСтрокиПО,
		|	ТЧДокумента.Количество,
		|	ЕСТЬNULL(ОборотыПоЗаказамСвернутые.КоличествоОборот, 0) КАК ОткрытоеКоличество
		|ИЗ
		|	ТЧДокумента КАК ТЧДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОборотыПоЗаказамНесвернутые.НомерПО КАК НомерПО,
		|			ОборотыПоЗаказамНесвернутые.НомерСтрокиДок КАК НомерСтрокиДок,
		|			СУММА(ОборотыПоЗаказамНесвернутые.КоличествоОборот) КАК КоличествоОборот
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ЗаказыШвепсаОбороты.НомерПО КАК НомерПО,
		|				ЗаказыШвепсаОбороты.НомерСтрокиДок КАК НомерСтрокиДок,
		|				ЗаказыШвепсаОбороты.КоличествоОборот КАК КоличествоОборот
		|			ИЗ
		|				РегистрНакопления.ЗаказыШвепса.Обороты(
		|						,
		|						,
		|						,
		|						НомерПО В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТЧДокумента.МАТО
		|								ИЗ
		|									ТЧДокумента КАК ТЧДокумента)
		|							И НомерСтрокиДок В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТЧДокумента.НомерСтрокиПО
		|								ИЗ
		|									ТЧДокумента КАК ТЧДокумента)) КАК ЗаказыШвепсаОбороты
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ЗакрытияЗаказовШвепсаОбороты.НомерПО,
		|				ЗакрытияЗаказовШвепсаОбороты.НомерСтрокиДок,
		|				-ЗакрытияЗаказовШвепсаОбороты.КоличествоОборот
		|			ИЗ
		|				РегистрНакопления.ЗакрытияЗаказовШвепса.Обороты(
		|						,
		|						&МоментВремени,
		|						,
		|						НомерПО В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТЧДокумента.МАТО
		|								ИЗ
		|									ТЧДокумента КАК ТЧДокумента)
		|							И НомерСтрокиДок В
		|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|									ТЧДокумента.НомерСтрокиПО
		|								ИЗ
		|									ТЧДокумента КАК ТЧДокумента)) КАК ЗакрытияЗаказовШвепсаОбороты) КАК ОборотыПоЗаказамНесвернутые
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОборотыПоЗаказамНесвернутые.НомерПО,
		|			ОборотыПоЗаказамНесвернутые.НомерСтрокиДок) КАК ОборотыПоЗаказамСвернутые
		|		ПО ТЧДокумента.МАТО = ОборотыПоЗаказамСвернутые.НомерПО
		|			И ТЧДокумента.НомерСтрокиПО = ОборотыПоЗаказамСвернутые.НомерСтрокиДок";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество > Выборка.ОткрытоеКоличество Тогда
			
			ТекстСообщения = "В строке " + Выборка.НомерСтроки + " количество (" + Выборка.Количество + ") превышает остаток по заказу (" + Выборка.ОткрытоеКоличество + ")! Остаток по заказу станет отрицательным! Возможно вы ошиблись в номере заказа или номере строки заказа. Возможно остатки по заказу еще не были подгружены.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьСуммы(Заголовок)

	запрос = новый запрос("ВЫБРАТЬ
	                      |	СУММА(ДекларацииСостав.ИтогоПоСтрокеИнвойса) КАК ИтогоПоСтрокеИнвойса,
	                      |	ДекларацииСостав.Ссылка.ГТД,
	                      |	ДекларацииСостав.Ссылка.ИтогоИнвойсыПоГТД
	                      |ИЗ
	                      |	Документ.Декларации.Состав КАК ДекларацииСостав
	                      |ГДЕ
	                      |	ДекларацииСостав.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДекларацииСостав.Ссылка.ГТД,
	                      |	ДекларацииСостав.Ссылка.ИтогоИнвойсыПоГТД");
	
	запрос.УстановитьПараметр("Ссылка", Ссылка);
	тз = запрос.Выполнить().Выгрузить();
	
	Для каждого стр Из тз Цикл
	
		Если ((стр.ИтогоПоСтрокеИнвойса - стр.ИтогоИнвойсыПоГТД) > 0.01) или ((стр.ИтогоПоСтрокеИнвойса - стр.ИтогоИнвойсыПоГТД) < -0.01) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Итоговая сумма не совпадает с суммой ГТД на " + (стр.ИтогоИнвойсыПоГТД - стр.ИтогоПоСтрокеИнвойса), , Заголовок);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиСлипы(СтруктураШапкиДокумента, ТаблицаСлипы, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.НетСлипов Тогда
		
		Если НЕ ТаблицаСлипы.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан ни один слип!", Отказ, Заголовок);
		КонецЕсли;
		
		//По просьбе МДЖ 030506
		Если (СтруктураШапкиДокумента.Пошлина10 + СтруктураШапкиДокумента.КТСПошлина10)
			+ (СтруктураШапкиДокумента.Пошлина11 + СтруктураШапкиДокумента.КТСПошлина11)
			+ (СтруктураШапкиДокумента.Пошлина20 + СтруктураШапкиДокумента.КТСПошлина20)
			+ (СтруктураШапкиДокумента.СуммаНДС + СтруктураШапкиДокумента.КТССуммаНДС)
			+ (СтруктураШапкиДокумента.ПрочиеПошлины + СтруктураШапкиДокумента.КТСПрочиеПошлины)
			<> ТаблицаСлипы.Итог("СуммаСлипа") Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Сумма слипов не совпадает с суммой пошлин и КТС.", , Заголовок);
			
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

// ДУМАТЬ!!!
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСостав, ТаблицаСлипы, Отказ, Заголовок)
	
	Для Каждого ТекСтрокаСостав Из ТаблицаСостав Цикл
		
		// По регистру накопления ДекларацииИмпорт 
		Движение = Движения.ДекларацииИмпорт.Добавить();
		//ПРОВЕРИТЬ ВСЕ ЛИ ИЗМЕРЕНИЯ, РЕКВИЗИТЫ, РЕСУРСЫ ЗАПОЛНЯЮТСЯ???
		Движение.Период							= СтруктураШапкиДокумента.ДатаПроведения; //Была дата
		Движение.НалоговыйПериод				= СтруктураШапкиДокумента.НалоговыйПериод;
		Движение.НомерГТД						= СтруктураШапкиДокумента.ГТД;
		Движение.ТипДокумента					= СтруктураШапкиДокумента.ТипДокумента;		
		Движение.Тип							= ТекСтрокаСостав.Тип;
		
		Движение.Количество						= ТекСтрокаСостав.Количество;
		Движение.ВсегоВал						= ТекСтрокаСостав.ВсегоВал;
		Движение.СтоимостьПеревозки				= ТекСтрокаСостав.СтоимостьПеревозки;
		Движение.СтоимостьСтраховки				= ТекСтрокаСостав.СтоимостьСтраховки;
		Движение.СтоимостьСтраховкиВсего		= ТекСтрокаСостав.СтоимостьСтраховкиВсего;
		Движение.ТранспортнаяОбработкаПоСтроке	= ТекСтрокаСостав.ТранспортнаяОбработкаПоСтроке;
		Движение.ДоставаЗаЕд					= ТекСтрокаСостав.ДоставаЗаЕд;
		Движение.Номер							= СтруктураШапкиДокумента.Номер;
		Движение.НомерИнвойса					= ТекСтрокаСостав.НомерИнвойса;
		Движение.Поставщик						= ТекСтрокаСостав.Поставщик;
		Движение.ДатаСчета						= ТекСтрокаСостав.ДатаСчета;
		
		Движение.МАТО							= ТекСтрокаСостав.МАТО;
		Движение.КодОС							= ТекСтрокаСостав.КодОС;
		Движение.Описание						= ТекСтрокаСостав.Описание;
		Движение.ВИН							= ТекСтрокаСостав.ВИН;
		Движение.ЕдИзм							= ТекСтрокаСостав.ЕдИзм;
		Движение.Цена							= ТекСтрокаСостав.ЦенаВал;
		Движение.ВсегоИнвойсВал					= ТекСтрокаСостав.ВсегоИнвойсВал;
		Движение.ПроцентОтИнвойса				= ТекСтрокаСостав.ПроцентОтИнвойса;
		Движение.ИтогоПоСтрокеИнвойса			= ТекСтрокаСостав.ИтогоПоСтрокеИнвойса;
		Движение.ВалютаИнвойса					= ТекСтрокаСостав.ВалютаИнвойса;
		Движение.Курс							= ТекСтрокаСостав.Курс;
		Движение.ВсегоПоИнвойсуРуб				= ТекСтрокаСостав.ВсегоИнвойсРуб;
		
		//Движение.ИтогоПоГТД = ТекСтрокаСостав.ИтогоПоГТД; // ПОЧЕМУ НЕ ЗАПОЛНЯЕТСЯ???
		Движение.ИтогоИнвойсыПоГТД				= СтруктураШапкиДокумента.ИтогоИнвойсыПоГТД;
		Движение.ПроцентПошлин					= ТекСтрокаСостав.ПроцентПошлин;
		Движение.СуммаПошлинПоГТДРуб			= ТекСтрокаСостав.СуммаПошлинПоГТДРуб;
		Движение.СуммаПошлинПоИнвойсуРуб		= ТекСтрокаСостав.СуммаПошлинПоИнвойсуРуб;
		Движение.ПокупнаяСтоимостьРуб			= ТекСтрокаСостав.ФактурнаяСтоимостьРуб;
		Движение.ШрафПоГТД						= ТекСтрокаСостав.ШрафПоГТД;
		Движение.НалРегистрация					= ТекСтрокаСостав.НалРегистрация;
		Движение.Пользователь					= СтруктураШапкиДокумента.Пользователь;
		Движение.Получатель						= СтруктураШапкиДокумента.Получатель;
		Движение.ПредшИмпДеклар					= ТекСтрокаСостав.ПредшИмпДеклар;
		Движение.AU								= ТекСтрокаСостав.AU;
		Движение.Трансфер						= ТекСтрокаСостав.Трансфер;
		Движение.ДатаВВодаВЭксплуатацию			= ТекСтрокаСостав.ДатаВводаОС;
		Движение.Комментарий					= ТекСтрокаСостав.Комментарий;
		
		Движение.Пошлина10Строки				= ТекСтрокаСостав.Пошлина10Строки;
		Движение.Пошлина11Строки				= ТекСтрокаСостав.Пошлина11Строки;
		Движение.Пошлина20Строки				= ТекСтрокаСостав.Пошлина20Строки;
		Движение.СуммаНДССтроки					= ТекСтрокаСостав.СуммаНДССтроки;
		Движение.ДатаПоследнегоИзменения		= ТекСтрокаСостав.ДатаПоследнегоИзменения;
				
	КонецЦикла;
	
	// Если не заполнен Месяц в Lawson
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(МесяцВLawson) Тогда
		
		// Формируем таблицы
		СверткаСBORG = ТаблицаСостав.Скопировать();
		СверткаСBORG.Колонки.Добавить("BORG");
		Для Каждого СтрокаТЗ ИЗ СверткаСBORG Цикл
			СтрокаТЗ.BORG = ?(СтрДлина(СтрокаТЗ.МАТО)>4, Лев(СтрокаТЗ.МАТО,4), СтрокаТЗ.МАТО);
		КонецЦикла;
		Свертка = СверткаСBORG.Скопировать();
		Свертка.Свернуть("AU, СчетГААП, BORG, ActivityCode, Поставщик", "СуммаПошлинПоИнвойсуРуб, ПроцентПошлин");
		СверткаСBORG.Свернуть("AU, СчетГААП, BORG, МАТО, НомерИнвойса, Поставщик");
		
		// По регистру накопления ИмпортМенеджмент
		Для Каждого ТекСтрокаСостав Из Свертка Цикл
			
			Движение = Движения.ИмпортМенеджмент.Добавить();
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			Движение.Период							= СтруктураШапкиДокумента.Дата; //Точно просто дата
			
			Движение.ГТД							= СтруктураШапкиДокумента.ГТД;
			Движение.AU								= ТекСтрокаСостав.AU;
			Движение.СчетГААП						= ТекСтрокаСостав.СчетГААП;
			Движение.Основание						= Ссылка;
			Движение.ПериодLawson					= СтруктураШапкиДокумента.МесяцВLawson;
			Движение.BORG							= ТекСтрокаСостав.BORG;
			Движение.ActivityCode					= ТекСтрокаСостав.ActivityCode;
			Движение.Поставщик						= ТекСтрокаСостав.Поставщик;
			
			Движение.СуммаПошлин					= ТекСтрокаСостав.СуммаПошлинПоИнвойсуРуб;
			Движение.ПроцентПошлин					= ТекСтрокаСостав.ПроцентПошлин;
			
			Движение.СуммаНДС						= СтруктураШапкиДокумента.СуммаНДС
														+ СтруктураШапкиДокумента.КТССуммаНДС;
			Движение.ОбщаяСуммаТаможенныхПлатежей	= Движение.СуммаНДС
														+ СтруктураШапкиДокумента.Пошлина10
														+ СтруктураШапкиДокумента.Пошлина11
														+ СтруктураШапкиДокумента.Пошлина20
														+ СтруктураШапкиДокумента.ПрочиеПошлины
														+ СтруктураШапкиДокумента.КТСПошлина10
														+ СтруктураШапкиДокумента.КТСПошлина11
														+ СтруктураШапкиДокумента.КТСПошлина20
														+ СтруктураШапкиДокумента.КТСПрочиеПошлины;
				
			Движение.Валюта							= СтруктураШапкиДокумента.ВалютаПлатежаПошлин;
			
			//invoices & POS
			Инвойсы = "";
			Пиошки = "";
			Отбор = Новый Структура("AU, СчетГААП, BORG, Поставщик", Движение.AU, Движение.СчетГААП, Движение.BORG, Движение.Поставщик);
			Строки = СверткаСBORG.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из Строки Цикл 
				Инвойсы = Инвойсы + ?(Инвойсы = "", "",", ") + НайденнаяСтрока.НомерИнвойса;
				Пиошки = Пиошки + ?(Пиошки = "", "",", ") + НайденнаяСтрока.МАТО;
			КонецЦикла;
			Движение.Invoices = Инвойсы;
			Движение.POs = Пиошки;
			
		КонецЦикла;
		
	КонецЕсли; // Если не заполнен Месяц в Lawson
	
	
	НаименованиеРодителяТипаДокумента = СтруктураШапкиДокумента.ТипДокумента.Родитель.Наименование;
	Если НаименованиеРодителяТипаДокумента = "Import" Тогда //только для импорта
		
		//СкладВПути = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСкладВПути");
		
		Для Каждого СтрокаТЧ ИЗ ТаблицаСостав Цикл
			
			Если СтрокаТЧ.Тип = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA") Тогда
				
				// По регистру накопления Оборудование
				Движение = Движения.Оборудование.Добавить();
				Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
				Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; //Была ДатаГТД
				Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
				Движение.AU					= СтрокаТЧ.AU;               
				Движение.Декларация			= Ссылка;
				Движение.Номенклатура		= СтрокаТЧ.Описание;
				Движение.Количество			= СтрокаТЧ.Количество;
				Движение.Сумма				= СтрокаТЧ.ФактурнаяСтоимостьРуб;
				Движение.НомерСтрокиГТД		= СтрокаТЧ.НомерСтроки;
				
			ИначеЕсли СтрокаТЧ.Тип = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Rental FA") Тогда
				
				// По регистру накопления ОборудованиеАрендованное
				Движение = Движения.ОборудованиеАрендованное.Добавить();
				Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
				Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; //Была ДатаГТД
				Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
				Движение.AU					= СтрокаТЧ.AU;               
				Движение.Декларация			= Ссылка;
				Движение.Номенклатура		= СтрокаТЧ.Описание;
				Движение.Количество			= СтрокаТЧ.Количество;
				Движение.Сумма				= СтрокаТЧ.ФактурнаяСтоимостьРуб;
				Движение.НомерСтрокиГТД		= СтрокаТЧ.НомерСтроки;
				Движение.Контрагент			= СтрокаТЧ.Поставщик;
				
			КонецЕсли;	
			
			//Закомментировал РГ-Софт - Иванов Антон - 2009-03-20
			//Решили с Розовым, что пока по этому регистру движений делать не будем
			//Кроме того, убрал Декларацию из регистраторов этого регистра
			// А теперь еще и товар в путь отправим
			//Движение = Движения.ТоварВПути.Добавить();
			//Движение.Период = Дата;
			//Движение.Номенклатура = СтрокаТЧ.Описание;
			////Движение.Тип = СтрокаТЧ.Тип;
			//Движение.Документ = Ссылка;
			//Движение.Поставщик = СтрокаТЧ.Поставщик;
			////Движение.КостЦентр = СтрокаТЧ.AU;
			//Движение.ПО = СтрокаТЧ.МАТО;
			//Движение.НомерСтрокиДок = СтрокаТЧ.НомерСтроки;
			//Движение.Количество = СтрокаТЧ.Количество;
			//Движение.Сумма = СтрокаТЧ.ФактурнаяСтоимостьРуб;
			////Движение.СчетУчета = ; // !!!!! НАДО ПОСТАВИТЬ!!!!
			//Движение.НомерПрихода = ГТД.Код;
			//Движение.ДатаПрихода = ГТД.ДатаГТД;
			//Движение.Подразделение = СтрокаТЧ.НалРегистрация;
			//Движение.НомерСтрокиДок = СтрокаТЧ.НомерСтроки;
			//Движение.Организация = Организация;
			//Движение.Склад = СкладВПути;
			
		КонецЦикла; // Для Каждого СтрокаТЧ ИЗ ТаблицаСостав
		
		
		// По регистру накопления НДСПокупкиУпр - Предъявлен НДС к вычету
		// Закомментировал РГ-Софт - Иванов Антон - 2010-10-05
		// Этот регистр уже не используется
		//Движение = Движения.НДСПокупкиУпр.Добавить();
		//Движение.Событие			= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		//Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; //Была Дата
		//Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
		//
		//Движение.Организация		= СтруктураШапкиДокумента.Организация;
		//Движение.Поставщик			= СтруктураШапкиДокумента.Таможня;
		//Движение.ДатаСФ				= СтруктураШапкиДокумента.ДатаГТД;
		//Движение.НомерСФ			= СтруктураШапкиДокумента.ГТД;
		//СчетНДСуплачиваемыйТаможеннымОрганам = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		//Движение.БухСчет			= СчетНДСуплачиваемыйТаможеннымОрганам;
		//Движение.БухСчет1С			= СчетНДСуплачиваемыйТаможеннымОрганам;
		//
		//Движение.CashCode			= Справочники.CashCode.НайтиПоКоду("IMP");
		//Движение.СуммаБезНДС		= Состав.Итог("ВсегоИнвойсРуб");
		//Движение.НДС				= СтруктураШапкиДокумента.СуммаНДС + СтруктураШапкиДокумента.КТССуммаНДС;
		////Движение.СтавкаНДС = Перечисления.СтавкиНДС.НДС18; //Там нет ставки НДС, там только сумма
		
		
	ИначеЕсли НаименованиеРодителяТипаДокумента = "Export" Тогда //только для экспорта
		
		// По регистру ОборудованиеЭкспорт
		ТипНоменклатурыFA = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA");
		Для Каждого СтрокаТЧ ИЗ ТаблицаСостав Цикл
			
			Если СтрокаТЧ.Тип <> ТипНоменклатурыFA Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.ОборудованиеЭкспорт.Добавить();
			Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
			Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; //Была Дата
			Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
			Движение.AU					= СтрокаТЧ.AU;
			Движение.Декларация			= Ссылка;
			Движение.Номенклатура		= СтрокаТЧ.Описание;
			Движение.Количество			= СтрокаТЧ.Количество;
			//Движение.Сумма			= СтрокаТЧ.ФактурнаяСтоимостьРуб; //ПОЧЕМУ НЕ ЗАПОЛНЯЕМ???
			Движение.НомерСтрокиГТД		= СтрокаТЧ.НомерСтроки;
		
		КонецЦикла;
		
	КонецЕсли; // Если ТипДокумента.Родитель.Наименование
	
	
	//Добавил - РГ-Софт - Иванов Антон - 2009-03-27
	//Закрытие заказов из Швепса
	ТаблицаДляШвепса = ТаблицаСостав.Скопировать(,"МАТО, НомерСтрокиПО, Количество");
	ТаблицаДляШвепса.Свернуть("МАТО, НомерСтрокиПО", "Количество");
	Для каждого Строка Из ТаблицаДляШвепса Цикл
		
		Движение = Движения.ЗакрытияЗаказовШвепса.Добавить();
		Движение.Период			= СтруктураШапкиДокумента.Дата; //МОЖЕТ БЫТЬ ДАТА ПРОВЕДЕНИЯ???
		Движение.НомерПО		= СокрЛП(Строка.МАТО);
		Движение.НомерСтрокиДок	= Строка.НомерСтрокиПО;
		Движение.Количество		= Строка.Количество;
	
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ, ФУНКЦИИ

Функция ПолучитьДокументПринятияКУчету(КодПродукта) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КодПродукта", КодПродукта);
	Запрос.УстановитьПараметр("Декларация", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Оборудование.Регистратор
		|ИЗ
		|	РегистрНакопления.Оборудование КАК Оборудование
		|ГДЕ
		|	Оборудование.Декларация = &Декларация
		|	И Оборудование.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС
		|	И (ВЫРАЗИТЬ(Оборудование.Номенклатура КАК Справочник.Номенклатура).Артикул = &КодПродукта
		|			ИЛИ ВЫРАЗИТЬ(Оборудование.Номенклатура КАК Справочник.Номенклатура).Код = &КодПродукта)";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Регистратор;

КонецФункции // ()

Процедура ПересчетПроцентовПошлин() экспорт

	Для каждого стр из Состав цикл
		Если ПересчетИзТЧ тогда
			ИтогоИнвойсыПоГТДИзТаб = состав.Итог("ИтогоПоСтрокеИнвойса");
		иначе
			ИтогоИнвойсыПоГТДИзТаб = ИтогоИнвойсыПоГТД;
		КонецЕсли;
		
		Если ИтогоИнвойсыПоГТДИзТаб <> 0 тогда
			стр.ПроцентПошлин = стр.ИтогоПоСтрокеИнвойса / ИтогоИнвойсыПоГТДИзТаб * 100;
		иначе
			сообщить("Не указана итоговая сумма по ГТД. Проценты не будут расчитаны.");
		КонецЕсли;
		
	конецЦикла;
	 
    Различие = 100 - состав.Итог("ПроцентПошлин");
	Если Различие < 1 и Различие > -1 тогда
		состав[состав.Количество()-1].ПроцентПошлин = состав[состав.Количество()-1].ПроцентПошлин + различие;
	КонецЕсли;
	
КонецПроцедуры

Процедура мПересчетПошлин(ТекСтрока) экспорт

	ТекСтрока.Пошлина10Строки = (Пошлина10 + КТСПошлина10) * ТекСтрока.ПроцентПошлин / 100;
	ТекСтрока.Пошлина11Строки = (Пошлина11 + КТСПошлина11) * ТекСтрока.ПроцентПошлин / 100;
	ТекСтрока.Пошлина20Строки = (Пошлина20 + КТСПошлина20) * ТекСтрока.ПроцентПошлин / 100;
	ТекСтрока.СуммаНДССтроки = (СуммаНДС + КТССуммаНДС) * ТекСтрока.ПроцентПошлин / 100;
	ТекСтрока.ПрочиеПошлиныСтроки = (ПрочиеПошлины + КТСПрочиеПошлины) * ТекСтрока.ПроцентПошлин / 100;
	ТекСтрока.СуммаПошлинПоИнвойсуРуб  = ТекСтрока.Пошлина10Строки +
									ТекСтрока.Пошлина11Строки +
									ТекСтрока.Пошлина20Строки +
									ТекСтрока.ПрочиеПошлиныСтроки;
									//ТекСтрока.СуммаНДССтроки;
	ТекСтрока.ФактурнаяСтоимостьРуб = ТекСтрока.ВсегоИнвойсРуб +
									ТекСтрока.Пошлина10Строки +
									ТекСтрока.Пошлина11Строки +
									ТекСтрока.Пошлина20Строки +
									ТекСтрока.ПрочиеПошлиныСтроки;
									//ТекСтрока.СуммаНДССтроки;
КонецПроцедуры

Процедура ПересчетПошлинВДокументе() экспорт

	Для каждого стр из Состав цикл
		 мПересчетПошлин(стр);
	конецЦикла;

КонецПроцедуры

Процедура мОбновитьИтоги() Экспорт
	
	ПересчетПроцентовПошлин();
	ПересчетПошлинВДокументе();
	
КонецПроцедуры

// Добавил РГ-Софт - Иванов Антон - 2009-07-06
Функция ПолучитьСписокНомеровСтрокЗаказа(НомерЗаказа, Артикул) Экспорт
	
	СписокНомеровСтрокЗаказа = Новый СписокЗначений;
	СписокНомеровСтрокЗаказа.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0, ДопустимыйЗнак.Неотрицательный));
	
	НомерЗаказа	= СокрЛП(НомерЗаказа);
	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда
		Возврат СписокНомеровСтрокЗаказа;
	КонецЕсли;
	
	Артикул	= СокрЛП(Артикул);
	Если НЕ ЗначениеЗаполнено(Артикул) Тогда
		Возврат СписокНомеровСтрокЗаказа;
	КонецЕсли;
	
	ЗаказШвепса = Документы.ЗаказыИзШвепса.НайтиПоНомеру(НомерЗаказа);
	Если ЗаказШвепса = Неопределено
		ИЛИ НЕ ЗаказШвепса.Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось найти проведенный заказ с номером """ + НомерЗаказа + """. Номер строки заказа заполнен не будет!");
		Возврат СписокНомеровСтрокЗаказа;
		
	КонецЕсли;
	
	ТабличнаяЧастьЗаказа = ЗаказШвепса.Состав;
	СтруктураПоиска = Новый Структура("Артикул", Артикул);
	НайденныеСтроки = ТабличнаяЧастьЗаказа.НайтиСтроки(СтруктураПоиска);
	Если НЕ НайденныеСтроки.Количество() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось найти строки в заказе """ + НомерЗаказа + """ с артикулом """ + Артикул + """. Номер строки заказа заполнен не будет!");
		Возврат СписокНомеровСтрокЗаказа;
		
	КонецЕсли;
		
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокНомеровСтрокЗаказа.Добавить(НайденнаяСтрока.НомерСтроки);
	КонецЦикла;
	
	Возврат СписокНомеровСтрокЗаказа;
	
КонецФункции
