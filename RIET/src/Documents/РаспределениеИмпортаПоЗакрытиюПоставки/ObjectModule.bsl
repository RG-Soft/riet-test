  
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗакрытиеПоставки") Тогда
		ShipmentСlosing = ДанныеЗаполнения.Ссылка;
    КонецЕсли;
	
КонецПроцедуры
 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ShipmentСlosing) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнен реквизит ""ShipmentСlosing""!",
			ЭтотОбъект, "ShipmentСlosing", , Отказ);
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(CreationDate) Тогда 
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Creator) Тогда 
		Creator = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
	    Дата = ТекущаяДата();
	КонецЕсли;
	         	
	//проверим, есть ли уже созданный документ ризп с таким же ShipmentСlosing
	Отказ = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЕстьДокументСТакимShipmentClosing(Ссылка, ShipmentСlosing);
	  		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		
		//проверим, что существует InvoiceLinesClassification и он проведен
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("InvoiceLinesMatching", ShipmentСlosing);
		Запрос.Текст = "ВЫБРАТЬ
		               |	InvoiceLinesClassification.Ссылка КАК InvoiceLinesClassification
		               |ИЗ
		               |	Документ.InvoiceLinesClassification КАК InvoiceLinesClassification
		               |ГДЕ
		               |	InvoiceLinesClassification.InvoiceLinesMatching = &InvoiceLinesMatching
		               |	И (НЕ InvoiceLinesClassification.ПометкаУдаления)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			
			Если Не Выборка.InvoiceLinesClassification.Проведен Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+ Выборка.InvoiceLinesClassification +" должен быть проведен!", , , , Отказ);
			КонецЕсли;	
			
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден документ ""Invoice Lines Classification"" по документу "+ ShipmentСlosing +"!", , , , Отказ);
		КонецЕсли;
		
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ТабЧасть", СопоставлениеInvoiceLinesИDSS);
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine,
	//	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП
	//	|ПОМЕСТИТЬ ВТТабЧасть
	//	|ИЗ
	//	|	&ТабЧасть КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТТабЧасть.InvoiceLine
	//	|ИЗ
	//	|	ВТТабЧасть КАК ВТТабЧасть
	//	|ГДЕ
	//	|	ВТТабЧасть.ПроводкаDSSСКП = ЗНАЧЕНИЕ(Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок.ПустаяСсылка)";
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не сопоставлена проводка DSS с Invoice line: " + Выборка.InvoiceLine + "" ,
	//														  ЭтотОбъект, "СопоставлениеInvoiceLinesИDSS",,Отказ);
	//	КонецЦикла;
		
			
	
		//Если Delta <> 0 тогда
		//	
		//	Если ЭтотОбъект.Проведен Тогда 
		//		Текст = " будет распроведен!";
		//		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		//	иначе
		//		Текст = " не будет проведен!";
		//		РежимЗаписи = РежимЗаписиДокумента.Запись;
		//	КонецЕсли;
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма Проводок DSS не равна сумме Invoice lines. 
		//													 |Документ " + ЭтотОбъект + Текст ,,"Delta");
		//	
		//КонецЕсли;
														 
	КонецЕсли;											  
		
КонецПроцедуры
                
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
		
	////отбираем все проводки, у которых, если RentLoan, Fiscal Type  = "AP import Loan costs"
	////если Не RentLoan, Fiscal Type  <> "AP import Loan costs"
	//МассивКодовПроводок = ПолучитьМассивКодовПроводокДляИзмененияFiscalType(МассивПроводок);
	
	//Если RentLoan Тогда 
	//	
	//	//меняем Fiscal Type проводок DSS на "AP import Loan costs"
	//	ОбработкаDSSСервер.ИзменениеFiscalTypeПроводокDSSнаУказанныйВПараметре(МассивКодовПроводок, 
	//						Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("AP##ILoan"), Отказ);
	//	
	//Иначе 
	//	            
	//	//возвращаем Fiscal Type проводок DSS
	//	ОбработкаDSSСервер.ВернутьАвтоFiscalTypeПроводокDSS(МассивКодовПроводок, RentLoan, Отказ);
	
	//Если Не Отказ Тогда 
	
	//проверка, если по одному инвойсу есть строки как с типами RentRANReplace, так и с другими типами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("InvoiceLinesMatching", ShipmentСlosing);
	Запрос.Текст = "ВЫБРАТЬ
	               |	InvoiceLinesClassificationClassification.InvoiceLine.Инвойс.Представление,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	               |			КОГДА InvoiceLinesClassificationClassification.Type.Наименование = ""Rent/Loan""
	               |					ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""Return from Loan"" //добавила Федотова Л, РГ-Софт, 12.12.12, вопрос №SLI-0003055
	               |					ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""Re-import"" //добавила Федотова Л, РГ-Софт, 28.05.13, вопрос №SLI-0003601
	               |					ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""RAN""
	               |					ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""Replace""
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК КолВоRentRanReplace
	               |ПОМЕСТИТЬ ВТИнвойсы
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &InvoiceLinesMatching
	               |	И InvoiceLinesClassificationClassification.InvoiceLine.SoldTo.Код = ""SLI RU""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	InvoiceLinesClassificationClassification.InvoiceLine.Инвойс.Представление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТИнвойсы.InvoiceLineИнвойсПредставление как Инвойс
	               |ИЗ
	               |	ВТИнвойсы КАК ВТИнвойсы
	               |ГДЕ
	               |	ВТИнвойсы.КолВоRentRanReplace > 1";
	
    Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В Invoice lines по " + Выборка.Инвойс + " необходимо проверить Type!");
	КонецЦикла;
	
	
	МассивПроводок = РГСофтКлиентСервер.СложитьМассивы(DSS.ВыгрузитьКолонку("ПроводкаDSSСКП"),СопоставлениеInvoiceLinesИDSS.ВыгрузитьКолонку("ПроводкаDSSСКП"));
		
	// регистр МатериальныеАктивы Расход
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок);
	Запрос.УстановитьПараметр("ВалютаРуб", Справочники.Валюты.НайтиПоКоду("643"));
	Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("840"));
	// пахоменков изменил на дсс, постингдейт - это периодлоусон
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Период КАК Период
	               |ПОМЕСТИТЬ КурсUSD
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроводкаDSS.BaseAmount КАК BaseAmount,
	               |	ПроводкаDSS.TranAmount КАК TranAmount,
	               |	ПроводкаDSS.Ссылка КАК ПроводкаДеталейСКП,
	               |	ПроводкаDSS.Дата,
	               |	ПроводкаDSS.Currency,
	               |	ПроводкаDSS.PeriodLawson
	               |ПОМЕСТИТЬ ВТПроводки
	               |ИЗ
	               |	Документ.ПроводкаDSS КАК ПроводкаDSS
	               |ГДЕ
	               |	ПроводкаDSS.Ссылка В(&МассивПроводок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПроводки.ПроводкаДеталейСКП КАК ПроводкаDSSСКП,
	               |	ВТПроводки.PeriodLawson КАК Период,
	               |	ВТПроводки.BaseAmount КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ВТПроводки.Currency = &ВалютаРуб
	               |			ТОГДА ВТПроводки.TranAmount
	               |		ИНАЧЕ ВТПроводки.BaseAmount * КурсUSD.Курс
	               |	КОНЕЦ КАК СуммаРуб
	               |ИЗ
	               |	ВТПроводки КАК ВТПроводки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсUSD КАК КурсUSD
	               |		ПО ВТПроводки.PeriodLawson = КурсUSD.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Движения.МатериальныеАктивы.Записывать = Истина;
	Пока Выборка.Следующий() Цикл
		Движение = Движения.МатериальныеАктивы.ДобавитьРасход();
		Движение.Период = Выборка.Период;
		Движение.ПроводкаДеталейСКП = Выборка.ПроводкаDSSСКП;
		Движение.Сумма = Выборка.Сумма;
		Движение.СуммаРуб = Выборка.СуммаРуб;
	КонецЦикла;
	Движения.МатериальныеАктивы.Записать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МатериальныеАктивыОстатки.ПроводкаДеталейСКП.Представление КАК ПроводкаПредставление
	|ИЗ
	|	РегистрНакопления.МатериальныеАктивы.Остатки(, ПроводкаДеталейСКП В (&МассивПроводок)) КАК МатериальныеАктивыОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Пока Выборка.Следующий() Цикл
	//	
	//	Сообщить("Проводка DSS " + Выборка.ПроводкаПредставление + " уже была распределена!");
	//	Отказ = Истина;
	//	
	//КонецЦикла;
	
	
	Если Не Отказ Тогда
		
		//покаждой проводке RentRANReplace делаем запись в проводки DSS общие
		//для проводок по таможенным платежам - в пропорции
		ЗаписатьПроводкиRentRANReplaceВПроводкиDSSОбщие(МассивПроводок);
		
		ДвиженияОборудованиеDSS = Движения.ОборудованиеDSS;
		ДвиженияОборудованиеDSS.Очистить();
		ДвиженияОборудованиеDSS.Записывать = Истина;
		
		ДвиженияInventoryTangibleAssetsCosts = Движения.InventoryTangibleAssetsCosts;
		ДвиженияInventoryTangibleAssetsCosts.Очистить();
		ДвиженияInventoryTangibleAssetsCosts.Записывать = Истина;
		
		ДвиженияMaterialsAndSupplies = Движения.MaterialsAndSupplies;
		ДвиженияMaterialsAndSupplies.Очистить();
		ДвиженияMaterialsAndSupplies.Записывать = Истина;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("InvoiceLinesMatching", ShipmentСlosing);
		Запрос.УстановитьПараметр("ДатаРИЗП", Дата);
		Запрос.УстановитьПараметр("CreationDate", ?(CreationDate=Дата(1,1,1), ТекущаяДата(), CreationDate));
		Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
		Запрос.УстановитьПараметр("ВалютаДолл", Справочники.Валюты.НайтиПоКоду("840"));
		//Пахоменков изменил условие,  сравнивается  с док. дсс теперь
		//{RGS - AKozhevnikova - RCA-0000352
		Запрос.Текст = "ВЫБРАТЬ
		               |	КурсыВалютСрезПоследних.Курс
		               |ПОМЕСТИТЬ КурсSLB
		               |ИЗ
		               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРИЗП, Валюта = &ВалютаSLB) КАК КурсыВалютСрезПоследних
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП,
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine,
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Номенклатура,
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.Количество КАК Количество,
		               |	InvoiceLinesClassificationClassification.Type,
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.TotalPrice
		               |ПОМЕСТИТЬ ВТСопоставление
		               |ИЗ
		               |	Документ.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставлениеInvoiceLinesИDSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
		               |		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine = InvoiceLinesClassificationClassification.InvoiceLine
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
		               |		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine = CustomsFilesOfGoods.Item
		               |ГДЕ
		               |	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Ссылка = &Ссылка
		               |	И (НЕ РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП = ЗНАЧЕНИЕ(Документ.ПроводкаDSS.ПустаяСсылка)
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""M&S""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""FA unconv""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""INVENTORY unconv"")
		               |	И (InvoiceLinesClassificationClassification.Type.Наименование = ""FA""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""INVENTORY""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""M&S""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""INVENTORY unconv""
		               |			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""FA unconv"")
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine,
		               |	СУММА(ВЫБОР
		               |			КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
		               |				ТОГДА ВЫБОР
		               |						КОГДА ВТСопоставление.TotalPrice = 0
		               |							ТОГДА InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
		               |						ИНАЧЕ ВТСопоставление.TotalPrice
		               |					КОНЕЦ
		               |		КОНЕЦ) КАК TotalPrice,
		               |	СУММА(ВЫБОР
		               |			КОГДА InvoiceLinesCostsОбороты.Валюта = &ВалютаДолл
		               |				ТОГДА InvoiceLinesCostsОбороты.СуммаОборот
		               |			ИНАЧЕ InvoiceLinesCostsОбороты.СуммаОборот / КурсSLB.Курс
		               |		КОНЕЦ) КАК ManagementSum,
		               |	СУММА(ВЫБОР
		               |			КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости <> ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
		               |				ТОГДА InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК Fiscal
		               |ПОМЕСТИТЬ ВТSum
		               |ИЗ
		               |	КурсSLB КАК КурсSLB,
		               |	ВТСопоставление КАК ВТСопоставление
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.InvoiceLinesCosts.Обороты(
		               |				,
		               |				&CreationDate,
		               |				Регистратор,
		               |				SoldTo.Код = ""SLI RU""
		               |					И (ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
		               |						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
		               |						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
		               |						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
		               |						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
		               |						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса))) КАК InvoiceLinesCostsОбороты
		               |		ПО ВТСопоставление.InvoiceLine = InvoiceLinesCostsОбороты.СтрокаИнвойса
		               |ГДЕ
		               |	InvoiceLinesCostsОбороты.Регистратор = &InvoiceLinesMatching
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	InvoiceLinesCostsОбороты.СтрокаИнвойса
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТSum.ManagementSum,
		               |	ВТСопоставление.ПроводкаDSSСКП,
		               |	ВТСопоставление.Номенклатура,
		               |	ВТСопоставление.Количество,
		               |	ВТСопоставление.Type,
		               |	ВТСопоставление.InvoiceLine,
		               |	ВТСопоставление.InvoiceLine.КостЦентр КАК InvoiceLineAU,
		               |	ВТСопоставление.ПроводкаDSSСКП.AU КАК ПроводкаDSSAU,
		               |	ВТSum.TotalPrice + ВТSum.Fiscal КАК FiscalSum,
		               |	ВТСопоставление.ПроводкаDSSСКП.POLine КАК ПроводкаDSSPOLine,
		               |	ВТСопоставление.InvoiceLine.СтрокаЗаявкиНаЗакупку КАК InvoiceLinePOLine,
		               |	ВТСопоставление.ПроводкаDSSСКП.FiscalDate КАК ПроводкаDSSFiscalDate
		               |ИЗ
		               |	ВТSum КАК ВТSum
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСопоставление КАК ВТСопоставление
		               |		ПО ВТSum.InvoiceLine = ВТСопоставление.InvoiceLine";
		//}RGS - AKozhevnikova - RCA-0000352
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПроводкаDSSСКП) и (Дата <> Выборка.ПроводкаDSSFiscalDate
				или Выборка.InvoiceLineAU <> Выборка.ПроводкаDSSAU 
				или Выборка.InvoiceLinePOLine <> Выборка.ПроводкаDSSPOLine)  Тогда 
				ЗаполнитьFiscalDateиAUиPOLineвПроводкеDSS(Выборка.ПроводкаDSSСКП, Выборка.InvoiceLineAU, Выборка.InvoiceLinePOLine, Дата);
			КонецЕсли;
			
			Если Выборка.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA") ИЛИ Выборка.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA unconv") Тогда  //RGS - AKozhevnikova - RCA-0000352
				// регистр ОборудованиеDSS Приход
				Движение = ДвиженияОборудованиеDSS.ДобавитьПриход();
				Движение.Период             = Дата;
				
				Движение.ПроводкаДеталейСКП = Выборка.ПроводкаDSSСКП;
				Движение.Номенклатура       = Выборка.Номенклатура;
				Движение.СуммаРуб           = Выборка.FiscalSum;
				Движение.Сумма              = Выборка.ManagementSum;
				Движение.Количество         = Выборка.Количество;
								
			ИначеЕсли Выборка.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("INVENTORY") Тогда 	 
				// регистр InventoryTangibleAssetsCosts Приход
				Движение = ДвиженияInventoryTangibleAssetsCosts.ДобавитьПриход();
				Движение.Период             = Дата;
				
				Движение.ПроводкаДеталейСКП = Выборка.ПроводкаDSSСКП;
				Движение.Количество         = Выборка.Количество;
				Движение.FiscalSum          = Выборка.FiscalSum;
				Движение.ManagementSum      = Выборка.ManagementSum;
				   								
			ИначеЕсли Выборка.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("M&S") Тогда 	 
				// регистр M&S Приход
				Движение = ДвиженияMaterialsAndSupplies.ДобавитьПриход();
				Движение.Период             = Дата;
				
				//Если ЗначениеЗаполнено(Выборка.ПроводкаDSSСКП) Тогда
				Движение.ПроводкаДеталейСКП = Выборка.InvoiceLine;
				//Иначе
				//	Движение.ПроводкаДеталейСКП = СоздатьПолучитьФиктивнуюПроводку(Выборка.InvoiceLine, НачалоМесяца(Дата), 
				//																   Выборка.InvoiceLineAU, Выборка.InvoiceLinePOLine);
				//КонецЕсли;
				Движение.ДокументПоступления = Ссылка;
				Движение.FiscalSum              = Выборка.FiscalSum;
				Движение.ManagementSum          = Выборка.ManagementSum;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДвиженияОборудованиеDSS.Записать();
		ДвиженияInventoryTangibleAssetsCosts.Записать();
		ДвиженияMaterialsAndSupplies.Записать();
		
	КонецЕсли;
		
	//КонецЕсли;
	//КонецЕсли;
		      	
КонецПроцедуры

Процедура ЗаполнитьFiscalDateиAUиPOLineвПроводкеDSS(ПроводкаDSS, InvoiceLineAU, InvoiceLinePOLine, FiscalDate)
	
	  ПроводкаDSSОбъект = ПроводкаDSS.ПолучитьОбъект();
	  ПроводкаDSSОбъект.FiscalDate = FiscalDate;
	  ПроводкаDSSОбъект.AU = InvoiceLineAU;
	  ПроводкаDSSОбъект.POLine = InvoiceLinePOLine;
	  
	  ПроводкаDSSОбъект.Записать();
	
КонецПроцедуры

Функция СоздатьПолучитьФиктивнуюПроводку(InvoiceLine, FiscalDate, InvoiceLineAU, InvoiceLinePOLine) 
	
	Код = "" + Месяц(FiscalDate) + Прав(Год(FiscalDate),1) + Формат(InvoiceLine.КостЦентр.Код,"ЧРГ=""");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", Число(Код));
	//Пахоменков изменил на дсс
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкаDSS.Ссылка КАК Проводка
	               |ИЗ
	               |	Документ.ПроводкаDSS КАК ПроводкаDSS
	               |ГДЕ
	               |	ПроводкаDSS.Номер = &Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		Возврат Выборка.Проводка;
		
	иначе
		//Пахоменков изменил на документ дсс
		Проводка = Документы.ПроводкаDSS.СоздатьДокумент();
		Проводка.Дата		= ТекущаяДата();  //Пахоменков
		Проводка.Номер      = Код;
		Проводка.Модуль     = Перечисления.МодулиРазработки.Importation;
		Проводка.AU         = InvoiceLineAU;
		Проводка.POLine     = InvoiceLinePOLine;
		Проводка.FiscalDate = FiscalDate;
		Проводка.Записать();
		
		Возврат Проводка.Ссылка;
		
	КонецЕсли;
	 	
КонецФункции

Процедура ЗаписатьПроводкиRentRANReplaceВПроводкиDSSОбщие(МассивПроводок)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПроводок",           МассивПроводок);
	Запрос.УстановитьПараметр("InvoiceLinesMatching",     ShipmentСlosing);
	Запрос.УстановитьПараметр("ВалютаSLB",                Справочники.Валюты.НайтиПоКоду("999"));
	Запрос.УстановитьПараметр("ДатаДок",                  Дата);
	Запрос.УстановитьПараметр("CreationDate",             ?(CreationDate=Дата(1,1,1), ТекущаяДата(), CreationDate));
	Запрос.УстановитьПараметр("МассивНомеровГТДБезНулей", Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьМассивНомеровГТДБезНулей(
																	Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗагрузитьСписокГТД(ShipmentСlosing)));
	Запрос.Текст =																
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс КАК КурсSLB
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, Валюта = &ВалютаSLB) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvoiceLinesClassificationClassification.InvoiceLine,
	|	InvoiceLinesClassificationClassification.InvoiceLine.Инвойс.Номер КАК InvoiceNo
	|ПОМЕСТИТЬ ВТТипы
	|ИЗ
	|	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	|ГДЕ
	|	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &InvoiceLinesMatching
	|	И InvoiceLinesClassificationClassification.InvoiceLine.SoldTo.Код = ""SLI RU""
	|	И (InvoiceLinesClassificationClassification.Type.Наименование = ""Rent/Loan""
	|			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""Re-import"" //добавила Федотова Л, РГ-Софт, 28.05.13, вопрос SLI-0003601
	|			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""RAN""
	|			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""Replace"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvoiceLinesCostsОбороты.СуммаФискальнаяОборот КАК TotalPrice,
	|	InvoiceLinesCostsОбороты.СтрокаИнвойса.КостЦентр КАК AU,
	|	ВЫБОР
	|		КОГДА InvoiceLinesCostsОбороты.СтрокаИнвойса В
	|				(ВЫБРАТЬ
	|					ВТТипы.InvoiceLine
	|				ИЗ
	|					ВТТипы)
	|			ТОГДА InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Rent
	|ПОМЕСТИТЬ ВТСуммы
	|ИЗ
	|	РегистрНакопления.InvoiceLinesCosts.Обороты(
	|			,
	|			&CreationDate,
	|			Регистратор,
	|			SoldTo.Код = ""SLI RU""
	|				И ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)) КАК InvoiceLinesCostsОбороты
	|ГДЕ
	|	InvoiceLinesCostsОбороты.Регистратор = &InvoiceLinesMatching
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТСуммы.TotalPrice) КАК TotalPrice,
	|	ВТСуммы.AU,
	|	СУММА(ВТСуммы.Rent) КАК Rent
	|ИЗ
	|	ВТСуммы КАК ВТСуммы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСуммы.AU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкаDSS.AU,
	|	ПроводкаDSS.FiscalType,
	|	ПроводкаDSS.TranAmount,
	|	ПроводкаDSS.AU.TaxRegistration КАК LegalEntity,
	|	ПроводкаDSS.Description КАК Description,
	|	ПроводкаDSS.AccountLawson
	|ИЗ
	|	Документ.ПроводкаDSS КАК ПроводкаDSS
	|ГДЕ
	|	ПроводкаDSS.Ссылка В(&МассивПроводок)
	|	И (ПроводкаDSS.ApInvoice В (&МассивНомеровГТДБезНулей)
	|			ИЛИ ПроводкаDSS.ApInvoice В
	|				(ВЫБРАТЬ
	|					ВТТипы.InvoiceNo
	|				ИЗ
	|					ВТТипы))";
	
	Результат = Запрос.ВыполнитьПакет();
	
	КурсSLB = 1;
	ВыборкаКурсSLB = Результат[0].Выбрать();
	Если ВыборкаКурсSLB.Следующий() Тогда 
		КурсSLB = ВыборкаКурсSLB.КурсSLB;
	КонецЕсли;
	
	ТЗAUTotalPrice = Результат[3].Выгрузить();
	СтруктураОтбора = Новый Структура("AU");
	       	
	ВыборкаПроводок = Результат[4].Выбрать();
	Пока ВыборкаПроводок.Следующий() цикл
		
		//найдем суммы в ТЗAUTotalPrice
		СтруктураОтбора.AU = ВыборкаПроводок.AU;
		СтрокиТЗAUTotalPrice = ТЗAUTotalPrice.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТЗAUTotalPrice.Количество() > 0 Тогда 
			СуммаRentAU = СтрокиТЗAUTotalPrice[0].Rent;
			TotalPriceAU = СтрокиТЗAUTotalPrice[0].TotalPrice;
		иначе 
			Продолжить;
		КонецЕсли;
		
		//расчет суммы для тек. проводки
		СуммаRent = (ВыборкаПроводок.TranAmount * СуммаRentAU) / TotalPriceAU;
				
		// ПроводкиDSSОбщие
		Движения.ПроводкиDSSОбщие.Записывать = Истина;
		
		Если СуммаRent <> 0 Тогда 
			
		    //FiscalType AP##ILoan
			Движение = Движения.ПроводкиDSSОбщие.Добавить();
			Движение.Период = Дата;
			Движение.AccountLawson = ПланыСчетов.Lawson.НайтиПоКоду("531006");
			Движение.AU = ВыборкаПроводок.AU;
			Движение.LegalEntity = ВыборкаПроводок.LegalEntity;
			Движение.FiscalType = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("AP##ILoan");    		
			Движение.Currency = Справочники.Валюты.НайтиПоКоду("840");  // USD
			Движение.Description = ВыборкаПроводок.Description;
			Движение.GltObjId = 1000000000;
			Движение.GUID = Новый УникальныйИдентификатор;
			Движение.Модуль = Перечисления.МодулиРазработки.PurchaseBook;
			
			Движение.BaseAmount = 0;
			Движение.FiscAmount = СуммаRent / КурсSLB;          
			Движение.PermDiff   = - СуммаRent;
			Движение.RubAmount  = СуммаRent;         
													
			
		    //FiscalType Проводки
			Движение = Движения.ПроводкиDSSОбщие.Добавить();
			Движение.Период = Дата;
			Движение.AccountLawson = ПланыСчетов.Lawson.НайтиПоКоду("531006");
			Движение.AU = ВыборкаПроводок.AU;
			Движение.LegalEntity = ВыборкаПроводок.LegalEntity;
			Движение.FiscalType = ВыборкаПроводок.FiscalType;
			Движение.Currency = Справочники.Валюты.НайтиПоКоду("840");  // USD
			Движение.Description = ВыборкаПроводок.Description; 	
			Движение.GltObjId = 1000000000;
			Движение.GUID = Новый УникальныйИдентификатор;
			Движение.Модуль = Перечисления.МодулиРазработки.PurchaseBook;
			
			Движение.BaseAmount = 0;
			Движение.FiscAmount = - СуммаRent;     
			Движение.PermDiff   =   СуммаRent;
			Движение.RubAmount  = - СуммаRent;     
					
		КонецЕсли;
		
		Движения.ПроводкиDSSОбщие.Записать();
		
	КонецЦикла;
	       
КонецПроцедуры