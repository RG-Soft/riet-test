//////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ShipmentСlosing) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда  
			Отказ = ЭтоЭкспорт();
		КонецЕсли;
	
		Если Не Отказ Тогда 
			
			ТЗСтрокиИнвойсаSLI = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьСтрокиИнвойсаCurrentShipmentClosing(Объект.ShipmentСlosing, Объект.CreationDate);
			ПроверитьПокупательSLIиЗагрузитьДанные(ТЗСтрокиИнвойсаSLI, Отказ, ЗначениеЗаполнено(Объект.Ссылка));
			
			//Invoices
			ЗагрузитьТЧInvoices();
			
			//ТЗ DSS
			ЗаполнитьТЗDSS();
			
			// общие суммы
			InvoiceTotalSum = ТЗСтрокиИнвойсаSLI.Итог("InvoiceTotalSum");
			Объект.Delta = InvoiceTotalSum - DSSTotalTranAmount;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПроводкаDSS") и ЗначениеЗаполнено(Параметры.ПроводкаDSS) Тогда
		МассивСтрок = Объект.СопоставлениеInvoiceLinesИDSS.НайтиСтроки(Новый Структура("ПроводкаDSSСКП", Параметры.ПроводкаDSS));
		Если МассивСтрок.Количество() > 0 Тогда 
			
			DSSInvoiceNo = МассивСтрок[0].DSSInvoiceNo;
            Для Каждого Стр из Invoices.ПолучитьЭлементы() Цикл
				Если Стр.DSSInvoiceNo = DSSInvoiceNo Тогда 
					ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
					Элементы.Invoices.ТекущаяСтрока = ИдентификаторСтроки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Элементы.СопоставлениеInvoiceLinesИDSS.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ЭтоЭкспорт()
	
	ЭтоЭкспорт = Ложь;
	
    Если Объект.ShipmentСlosing.Поставка.ИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Export Тогда 
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В Invoice Lines Matching указан Shipment, где I/E: Export.");
		 ЭтоЭкспорт = Истина;
	КонецЕсли;
	
	Возврат ЭтоЭкспорт;
	
КонецФункции
	
&НаСервере
Процедура ПроверитьПокупательSLIиЗагрузитьДанные(ТЗСтрокиИнвойсаSLI, Отказ, Обновить = Ложь)
			
	Если ТЗСтрокиИнвойсаSLI.Количество() > 0 Тогда
		
		СписокГТД.Загрузить(Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗагрузитьСписокГТД(Объект.ShipmentСlosing));
		
		Если Обновить Тогда 
			ОбновитьСтрокиСопоставленияInvoiceLinesИDSS(ТЗСтрокиИнвойсаSLI);
		Иначе 
							
			ЗагрузитьПроводкиDSSПОApInvoiceНаСервере(Новый Массив, ТЗСтрокиИнвойсаSLI);
											       
			Документы.РаспределениеИмпортаПоЗакрытиюПоставки.MatchDSSИInvoiceLines(ТЗСтрокиИнвойсаSLI, 
																						Объект.DSS.Выгрузить(), Объект.ShipmentСlosing);
			Объект.СопоставлениеInvoiceLinesИDSS.Загрузить(ТЗСтрокиИнвойсаSLI);
						
		КонецЕсли; 
	
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе "+ Объект.ShipmentСlosing + " нет покупателя SLI!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиСопоставленияInvoiceLinesИDSS(ТЗСтрокиИнвойсаSLI)
	
	СтруктураОтбора = Новый Структура;
	Для Каждого Стр Из Объект.СопоставлениеInvoiceLinesИDSS цикл
		СтруктураОтбора.Вставить("Invoiceline", Стр.Invoiceline);
		МассивСтрок = ТЗСтрокиИнвойсаSLI.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда  
			Стр.InvoicelineSum = МассивСтрок[0].InvoicelineSum;
			Стр.DSSInvoiceNo = МассивСтрок[0].DSSInvoiceNo;
			Стр.PONo = МассивСтрок[0].PONo;
			Стр.Translation = МассивСтрок[0].Translation;
			Стр.InvoiceLineCost = МассивСтрок[0].InvoiceLineCost;
			Стр.Type = МассивСтрок[0].Type;
		КонецЕсли;
		Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗаполнитьНоменклатуруFA(Стр, Стр.ПроводкаDSSСКП, Объект.ShipmentСlosing);
	КонецЦикла;
	
КонецПроцедуры
  
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РГСофтКлиент.ПроверитьНеобходимостьЗаписиДокумента(ПараметрыЗаписи.РежимЗаписи, Объект.Проведен, Модифицированность, Отказ);
	 	  		
КонецПроцедуры
            
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтрокиСопоставленияInvoiceLinesИDSS(Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьСтрокиИнвойсаCurrentShipmentClosing(
												Объект.ShipmentСlosing, Объект.CreationDate));
	//ТЗ DSS
	ЗаполнитьТЗDSS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекInvoice = Элементы.Invoices.ТекущиеДанные.Invoice;   
	
	Если ИмяСобытия = "ПриЗакрытииInvoicelinesClassification" Тогда 
		
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.InvoicelinesClassification") И 
			 ТипЗнч(Параметр) = Тип(Новый Соответствие) Тогда 
			
			ЗаполнитьТЧСопоставлениеПриИзмененииInvoicelinesClassification(Параметр);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Стр из Invoices.ПолучитьЭлементы() Цикл
		Если Стр.Invoice = ТекInvoice Тогда 
			ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
			Элементы.Invoices.ТекущаяСтрока = ИдентификаторСтроки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	          	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСопоставлениеПриИзмененииInvoicelinesClassification(СоответствиеТипов)
	
	МассивRentRANReplace = Новый Массив;
	МассивRentRANReplace.Добавить(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Rent/Loan"));
	МассивRentRANReplace.Добавить(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Re-import")); //добавила Федотова Л, РГ-Софт, 28.05.13, вопрос SLI-0003601
	МассивRentRANReplace.Добавить(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("RAN"));
	МассивRentRANReplace.Добавить(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Replace"));
	
	ИзменилисьТипыRentRANReplace = Ложь;
	
	Для каждого СтрокаСопоставления из Объект.СопоставлениеInvoiceLinesИDSS Цикл 
		ЗначениеСоответствия = СоответствиеТипов.Получить(СтрокаСопоставления.InvoiceLine);
		
		Если СтрокаСопоставления.Type <> ЗначениеСоответствия Тогда
			
			Если МассивRentRANReplace.Найти(ЗначениеСоответствия) <> Неопределено 
				или СтрокаСопоставления.Type <> Неопределено Тогда 
				ИзменилисьТипыRentRANReplace = Истина;
			КонецЕсли;
			
			СтрокаСопоставления.Type = ЗначениеСоответствия;
								
		КонецЕсли;	 
		
	КонецЦикла;
	
	Если ИзменилисьТипыRentRANReplace Тогда 
		ЗагрузитьТЧInvoices();
		ТЗСтрокиИнвойсаSLI = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьСтрокиИнвойсаCurrentShipmentClosing(Объект.ShipmentСlosing, Объект.CreationDate);
		InvoiceTotalSum = ТЗСтрокиИнвойсаSLI.Итог("InvoiceTotalSum");
	    Объект.Delta = InvoiceTotalSum - DSSTotalTranAmount;
		ОбновитьСтрокиСопоставленияInvoiceLinesИDSS(ТЗСтрокиИнвойсаSLI);
		Модифицированность=Истина;
	КонецЕсли;
	  		
КонецПроцедуры

// ШАПКА

&НаКлиенте
Процедура ShipmentСlosingПриИзменении(Элемент)
	
	Объект.DSS.Очистить();
	Объект.СопоставлениеInvoiceLinesИDSS.Очистить();
	
	Если Не ЭтоЭкспорт() Тогда 
	ПриИзмененииShipmentСlosing();
	РасчитатьДельту();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииShipmentСlosing()
			 
	Отказ = Ложь;
	
	ТЗСтрокиИнвойсаSLI = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьСтрокиИнвойсаCurrentShipmentClosing(Объект.ShipmentСlosing, Объект.CreationDate);
	ПроверитьПокупательSLIиЗагрузитьДанные(ТЗСтрокиИнвойсаSLI, Отказ);
		
	Если Не Отказ Тогда 
		//Invoices
		ЗагрузитьТЧInvoices();
		InvoiceTotalSum = ТЗСтрокиИнвойсаSLI.Итог("InvoiceTotalSum");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ShipmentСlosingНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзРИЗП");
	СтруктураНастройки.Вставить("CurrentРИЗП", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Документ.ЗакрытиеПоставки.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры


////////////Общие суммы
   
&НаКлиенте
Процедура РасчитатьДельту()
	
	Объект.Delta = InvoiceTotalSum - DSSTotalTranAmount;
	
КонецПроцедуры

/////ГТД 

&НаКлиенте
Процедура СписокГТДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.CCD);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////
//// Табличные части

&НаСервере
Функция ПолучитьСтруктуруТиповВыделяемыхЦветом(DSSInvoiceNo)
	
	СтруктураТиповИнвойса = Новый Структура("RentRANReplace,FA,MandS");
	СтруктураОтбора = Новый Структура("DSSInvoiceNo");
	СтруктураОтбора.DSSInvoiceNo = DSSInvoiceNo;
	ТЗТипов = Объект.СопоставлениеInvoiceLinesИDSS.Выгрузить(СтруктураОтбора,"Type");
	
	СтруктураТиповИнвойса.RentRANReplace = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЕстьInvoiceLineTypeRentRANReplace(ТЗТипов);
			   
	СтрокаFA = ТЗТипов.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA"),"Type"); 
	СтруктураТиповИнвойса.FA = ?(СтрокаFA = Неопределено, Ложь, Истина);
	
	СтрокаMandS = ТЗТипов.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("M&S"),"Type"); 
	СтруктураТиповИнвойса.MandS = ?(СтрокаMandS = Неопределено, Ложь, Истина);
	
	Возврат СтруктураТиповИнвойса;
	
КонецФункции
		 
            
//////////////////////////////////////
// Invoices

&НаКлиенте
Процедура InvoicesПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборUnmatchedInvoiceLines();
	УстановитьОтборDSSПоApInvoice();
	
КонецПроцедуры

&НаКлиенте
Процедура InvoicesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекInvoice = Элемент.ТекущиеДанные.Invoice;
	Если ЗначениеЗаполнено(ТекInvoice) Тогда 
		ОткрытьЗначение(ТекInvoice);
	КонецЕсли;
	
КонецПроцедуры
     
&НаСервере
Процедура ЗагрузитьТЧInvoices()
	
	МассивСопоставленныхПроводок = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Объект.СопоставлениеInvoiceLinesИDSS,"ПроводкаDSSСКП");
	МассивТЧDSS = CustomsКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.DSS,"ПроводкаDSSСКП"); 	
	МассивПроводок = РГСофтКлиентСервер.СложитьМассивы(МассивСопоставленныхПроводок,МассивТЧDSS);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок);
	Запрос.УстановитьПараметр("InvoiceLinesMatching", Объект.ShipmentСlosing);
	Запрос.УстановитьПараметр("CreationDate", ?(ЗначениеЗаполнено(Объект.CreationDate), Объект.CreationDate, ТекущаяДата()));
	//Пахоменков изменен запрос на дсс
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.TranAmount) КАК Sum,
	               |	ВложенныйЗапрос.ApInvoice КАК DSSInvoiceNo,
	               |	ВложенныйЗапрос.Описание КАК Description
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		-ПроводкаDSS.TranAmount КАК TranAmount,
	               |		ПроводкаDSS.ApInvoice КАК ApInvoice,
	               |		ВЫБОР
	               |			КОГДА ПроводкаDSS.Description = ""FREIGHT""
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ПроводкаDSS.Description = ""HANDLING""
	               |						ТОГДА ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ПроводкаDSS.Description = ""INSURANCE""
	               |								ТОГДА ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |							ИНАЧЕ ПроводкаDSS.Description
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |		КОНЕЦ КАК Описание
	               |	ИЗ
	               |		Документ.ПроводкаDSS КАК ПроводкаDSS
	               |	ГДЕ
	               |		ПроводкаDSS.Ссылка В(&МассивПроводок)) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ApInvoice,
	               |	ВложенныйЗапрос.Описание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InvoiceLinesClassificationClassification.InvoiceLine,
	               |	InvoiceLinesClassificationClassification.Type
	               |ПОМЕСТИТЬ ВТТипы
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &InvoiceLinesMatching
	               |	И InvoiceLinesClassificationClassification.InvoiceLine.SoldTo.Код = ""SLI RU""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(InvoiceLinesCostsОбороты.СуммаОборот) КАК Sum,
	               |	ВЫБОР
	               |		КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |				ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |			ТОГДА InvoiceLinesCostsОбороты.ДокументОснование.Номер
	               |		ИНАЧЕ InvoiceLinesCostsОбороты.СтрокаИнвойса.Инвойс.DSSNumber
	               |	КОНЕЦ КАК DSSInvoiceNo,
	               |	InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости КАК Description
	               |ИЗ
	               |	РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |			,
	               |			&CreationDate,
	               |			Регистратор,
	               |			SoldTo.Код = ""SLI RU""
	               |				И (ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса))) КАК InvoiceLinesCostsОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТипы КАК ВТТипы
	               |		ПО InvoiceLinesCostsОбороты.СтрокаИнвойса = ВТТипы.InvoiceLine
	               |ГДЕ
	               |	InvoiceLinesCostsОбороты.Регистратор = &InvoiceLinesMatching
	               |	И ВЫБОР
	               |			КОГДА ВТТипы.Type.Наименование = ""Rent/Loan""
	               |					ИЛИ ВТТипы.Type.Наименование = ""Re-import"" //добавила Федотова Л, РГ-Софт, 28.05.13, вопрос SLI-0003601
	               |					ИЛИ ВТТипы.Type.Наименование = ""RAN""
	               |					ИЛИ ВТТипы.Type.Наименование = ""Replace""
	               |				ТОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |			ИНАЧЕ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости,
	               |	ВЫБОР
	               |		КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |				ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |			ТОГДА InvoiceLinesCostsОбороты.ДокументОснование.Номер
	               |		ИНАЧЕ InvoiceLinesCostsОбороты.СтрокаИнвойса.Инвойс.DSSNumber
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	DSSInvoiceNo";
				   
	Результат = Запрос.ВыполнитьПакет();
	ТЗдляДерева = Результат[0].Выгрузить();
	Для Каждого СтрокаНомера Из ТЗдляДерева Цикл
		Если СтрНайти(СтрокаНомера.DSSInvoiceNo, "-") и СтрДлина(СтрокаНомера.DSSInvoiceNo) < 23 Тогда
			СтрокаНомера.DSSInvoiceNo = Лев(СтрокаНомера.DSSInvoiceNo, 16) + ДополнитьСтроку(Сред(СтрокаНомера.DSSInvoiceNo, 17),7,"0");	
		КонецЕсли;
	КонецЦикла;
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() цикл
		НоваяСтрокаТЗ = ТЗдляДерева.Добавить();
		НоваяСтрокаТЗ.DSSInvoiceNo = СокрЛП(Выборка.DSSInvoiceNo);
		НоваяСтрокаТЗ.Description = Выборка.Description;
		НоваяСтрокаТЗ.Sum = Выборка.Sum;
	КонецЦикла;
		       	
	ТЗдляДерева.Свернуть("DSSInvoiceNo, Description", "Sum");
	ТЗдляДерева.Индексы.Добавить("DSSInvoiceNo");
	
	//получим массив различных инвойсов 
	ТаблицаИнвойсов = ТЗдляДерева.Скопировать(,"DSSInvoiceNo");
	ТаблицаИнвойсов.Свернуть("DSSInvoiceNo");
	ТаблицаИнвойсов.Сортировать("DSSInvoiceNo Убыв");
	МассивИнвойсов = ТаблицаИнвойсов.ВыгрузитьКолонку("DSSInvoiceNo");
	
	Дерево = Invoices.ПолучитьЭлементы();
	Дерево.Очистить();
	                 	
	СтруктураПоискаUnmatched = Новый Структура("DSSInvoiceNo,ПроводкаDSSСКП");
	СтруктураПоискаUnmatched.ПроводкаDSSСКП = Документы.ПроводкаDSS.ПустаяСсылка();//Пахоменков
	СтруктураПоискаСтрокПоИнвойсу = Новый Структура("DSSInvoiceNo");
	                                                         
	Для Каждого ЭлементМассива из МассивИнвойсов цикл
		НоваяСтрока = Дерево.Добавить();
		НоваяСтрока.DSSInvoiceNo = ЭлементМассива;
		НоваяСтрока.Invoice = Документы.Инвойс.НайтиПоРеквизиту("DSSNumber",ЭлементМассива);
		
		СтруктураТиповИнвойса = ПолучитьСтруктуруТиповВыделяемыхЦветом(ЭлементМассива);
		НоваяСтрока.RentRANReplace = СтруктураТиповИнвойса.RentRANReplace;
		НоваяСтрока.СодержитFA = СтруктураТиповИнвойса.FA;
		НоваяСтрока.СодержитMandS = СтруктураТиповИнвойса.MandS;
		
		TotalSum = 0;
		
		//количество Unmatched
		СтруктураПоискаUnmatched.DSSInvoiceNo = НоваяСтрока.DSSInvoiceNo;
		СтрокиБезDSS = Объект.СопоставлениеInvoiceLinesИDSS.НайтиСтроки(СтруктураПоискаUnmatched);
		НоваяСтрока.Unmatched = СтрокиБезDSS.Количество();
		
		СтруктураПоискаСтрокПоИнвойсу.DSSInvoiceNo = НоваяСтрока.DSSInvoiceNo;
		СтрокиПоИнвойсу = ТЗдляДерева.НайтиСтроки(СтруктураПоискаСтрокПоИнвойсу);
		Для Каждого Стр из СтрокиПоИнвойсу цикл
			
			 Дерево2 = НоваяСтрока.ПолучитьЭлементы();
			 НоваяПодСтрока = Дерево2.Добавить();
			 НоваяПодСтрока.DSSInvoiceNo = Стр.Description;
			 НоваяПодСтрока.Delta = Стр.Sum;
			 TotalSum = TotalSum + Стр.Sum;

		 КонецЦикла;
		 
		 НоваяСтрока.Delta = TotalSum;
		 		 		 
	 КонецЦикла;
	                              				   	
КонецПроцедуры

//Перенесена из модуля Регламентированная отчетность 
//Дополняет строку указанным символом до указанной длины
//
// Параметры: 
//  Стр            - Дополняемая строка
//  Длина          - Требуемая длина результирующей строки
//  Чем            - Символ, которым дополняется строка
//
// Возвращаемое значение:
//  Строка дополненная указанным символом до указанной длины
//
&НаСервере
Функция ДополнитьСтроку(Знач Стр, Длина, Чем=" ", Режим = 0) 
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКоличествоUnmatched()
	  		
	Дерево = Invoices.ПолучитьЭлементы();
		                 	
	СтруктураПоискаUnmatched = Новый Структура("DSSInvoiceNo,ПроводкаDSSСКП");
	СтруктураПоискаUnmatched.ПроводкаDSSСКП = Документы.ПроводкаDSS.ПустаяСсылка();//Пахоменков
	
	Для Каждого СтрокаДерева из Дерево цикл
		СтруктураПоискаUnmatched.DSSInvoiceNo = СтрокаДерева.DSSInvoiceNo;
		СтрокиБезDSS = Объект.СопоставлениеInvoiceLinesИDSS.НайтиСтроки(СтруктураПоискаUnmatched);
		СтрокаДерева.Unmatched = СтрокиБезDSS.Количество();
	КонецЦикла;
		     			                              				   	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьInvoiceNo(Команда)
	
	ТекДанные = Элементы.Invoices.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено и ЗначениеЗаполнено(ТекДанные.Invoice) Тогда 
		ВернутьInvoiceNoНаСервере(ТекДанные.Invoice);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьInvoiceNoНаСервере(Invoice)
	
	Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗаполнитьDSSnumberВInvoice(Invoice, Invoice.Номер);
		
КонецПроцедуры


/////////////////////////////////////////////// 
//СОПОСТАВЛЕНИЕ


//Командная панель

&НаКлиенте
Процедура UnmatchedПриИзменении(Элемент)
	
   	УстановитьОтборUnmatchedInvoiceLines();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборUnmatchedInvoiceLines()
	
	ТекДанные =  Элементы.Invoices.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
		
		Отбор = Новый Структура;
		Отбор.Вставить("DSSInvoiceNo", ТекДанные.DSSInvoiceNo);
		
		Если Unmatched Тогда 
			Отбор.Вставить("ПроводкаDSSСКП", ДокументDSSПустаяСсылка);
		ИначеЕсли отбор.Свойство("ПроводкаDSSСКП") Тогда  
			Отбор.Удалить("ПроводкаDSSСКП");
		КонецЕсли;
		
		Элементы.СопоставлениеInvoiceLinesИDSS.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		   		
	КонецЕсли;
	    			
КонецПроцедуры

&НаКлиенте
Процедура MatchDSSИInvoiceLines(Команда)
	
	MatchDSSИInvoiceLinesНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура MatchDSSИInvoiceLinesНаСервере()
	
	СтруктураТЧ = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.MatchDSSИInvoiceLines(
	                        Объект.СопоставлениеInvoiceLinesИDSS.Выгрузить(), Объект.DSS.Выгрузить(), Объект.ShipmentСlosing);
							
	Объект.DSS.Загрузить(СтруктураТЧ.ТЧDSS);
	Объект.СопоставлениеInvoiceLinesИDSS.Загрузить(СтруктураТЧ.ТЧСопоставление);
			
	ЗагрузитьКоличествоUnmatched();
	ЗаполнитьТЗDSS();
	Объект.Delta = InvoiceTotalSum - DSSTotalTranAmount;
					
КонецПроцедуры
            
&НаКлиенте
Процедура OpenPO(Команда)
	
    OpenPOНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура OpenPOНаКлиенте()
	
	PO = ПолучитьPOНаСервере();
	Если ЗначениеЗаполнено(PO) Тогда 
	    ОткрытьЗначение(PO);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьPOНаСервере()
	
	ТекСтрока = Элементы.СопоставлениеInvoiceLinesИDSS.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно выделить строку в табличной части """"Tangible assets""""!",,
			"Объект.СопоставлениеInvoiceLinesИDSS");
		Возврат ТекСтрока;
	КонецЕсли;
	
	ТекInvoiceLine = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(ТекСтрока);
	
	Возврат Справочники.ЗаявкиНаЗакупку.НайтиПоКоду(ТекInvoiceLine.PONo);
	 	
КонецФункции

// Процедуры табличной части

&НаКлиенте
Процедура СопоставлениеInvoiceLinesИDSSПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ЗаполнитьНоменклатуруFAиУдалитьПроводкуИзТЧDSSпослеСопоставления(
				ТекДанные.ПолучитьИдентификатор(),ТекДанные.ПроводкаDSSСКП);
	
	РасчитатьДельту();
	
КонецПроцедуры
  
&НаКлиенте
Процедура СопоставлениеInvoiceLinesИDSSВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекInvoiceLine = Элемент.ТекущиеДанные.InvoiceLine;
	
	Если Не Поле.Имя = "СопоставлениеInvoiceLinesИDSSПроводкаDSSСКП" и 
		 Не Поле.Имя = "СопоставлениеInvoiceLinesИDSSНоменклатура" и 
		 Не Поле.Имя = "СопоставлениеInvoiceLinesИDSSType" и 
		 Не Поле.Имя = "СопоставлениеInvoiceLinesИDSSPONo" и 
		 Не Поле.Имя = "СопоставлениеInvoiceLinesИDSSTotalPrice" Тогда 
		 
		 ОткрытьЗначение(ТекInvoiceLine);
		
	ИначеЕсли Поле.Имя = "СопоставлениеInvoiceLinesИDSSType" Тогда	
		 				
		 OpenClassificationПоInvoiceLine(Элемент, ВыбраннаяСтрока, ТекInvoiceLine);
		 
	ИначеЕсли Поле.Имя = "СопоставлениеInvoiceLinesИDSSPONo" Тогда	
		 				
		 OpenPOНаКлиенте();
			
	КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Функция ПолучитьInvoiceLinesClassification(ТекInvoiceLine)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("InvoiceLine", ТекInvoiceLine);
	Запрос.УстановитьПараметр("CurrentShipmentClosing", Объект.ShipmentСlosing);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	InvoiceLinesClassificationClassification.Ссылка КАК ДокClassification
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.InvoiceLine = &InvoiceLine
	               |	И InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &CurrentShipmentClosing
	               |	И (НЕ InvoiceLinesClassificationClassification.Ссылка.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ДокClassification;
	иначе			
		Возврат Неопределено;
	КонецЕсли;
	     	         	
КонецФункции

&НаКлиенте
Процедура СопоставлениеInvoiceLinesИDSSПроводкаDSSСКПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборДляДобавленияDSS(,,Элементы.СопоставлениеInvoiceLinesИDSS); 
	
КонецПроцедуры


////////////////////////////////////
//DSS


//Командная панель
//FILL  

//по AP INVOICE

&НаКлиенте
Процедура ОтбиратьDSSПоApInvoiceПриИзменении(Элемент)
	
	УстановитьОтборDSSПоApInvoice();
			
КонецПроцедуры
     
&НаКлиенте
Процедура ЗагрузитьПроводкиDSSПОApInvoice(Команда)
	
	Если Объект.DSS.Количество() > 0 Тогда  
		Ответ = Вопрос("Табличная часть Expenses будет очищена. Продолжить?", 
		                РежимДиалогаВопрос.ДаНет); 
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.DSS.Очистить();
		
	МассивПроводок = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Объект.СопоставлениеInvoiceLinesИDSS,"ПроводкаDSSСКП");
	ЗагрузитьПроводкиDSSПОApInvoiceНаСервере(МассивПроводок);
	
	РасчитатьДельту();
	
КонецПроцедуры
 
 &НаКлиенте
Процедура ДобавитьПроводкиDSSПОApInvoice(Команда)
	
	МассивСопоставленныхПроводок = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Объект.СопоставлениеInvoiceLinesИDSS,"ПроводкаDSSСКП");
	МассивТЧDSS = CustomsКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.DSS,"ПроводкаDSSСКП"); 	
	МассивПроводок = РГСофтКлиентСервер.СложитьМассивы(МассивСопоставленныхПроводок,МассивТЧDSS);
	 	
	ЗагрузитьПроводкиDSSПОApInvoiceНаСервере(МассивПроводок);
	
	Элементы.СопоставлениеInvoiceLinesИDSS.Обновить();
	РасчитатьДельту();
	
КонецПроцедуры
        
&НаСервере
Процедура ЗагрузитьПроводкиDSSПОApInvoiceНаСервере(МассивПроводок, ТабСопоставления=Неопределено)
	
	Документы.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставитьПроводкиDSSиInvoiceПОPOnumber(Объект.ShipmentСlosing);
	
	ТабСопоставления = ?(ТабСопоставления=Неопределено, Объект.СопоставлениеInvoiceLinesИDSS, ТабСопоставления);
	Для Каждого Стр из ТабСопоставления Цикл 
		Стр.DSSInvoiceNo = Стр.InvoiceLine.Инвойс.DssNumber;
	КонецЦикла;
	
	ТЗПроводки = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗагрузитьПроводкиDSSПОApInvoice(Объект.ShipmentСlosing, СписокГТД, МассивПроводок);
		
	Для Каждого Стр из ТЗПроводки Цикл 
		НоваяСтрока = Объект.DSS.Добавить();
		НоваяСтрока.ПроводкаDSSСКП = Стр.ПроводкаDSSСКП;
	КонецЦикла;
	
	ЗаполнитьТЗDSS();
	ЗагрузитьТЧInvoices();
		  			   
КонецПроцедуры
                 
&НаСервере
Процедура ЗаполнитьТЗDSS()
	
	МассивDescription = Новый Массив;
	МассивDescription.Добавить("INSURANCE");
	МассивDescription.Добавить("HANDLING");
	МассивDescription.Добавить("FREIGHT");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПроводок", Объект.DSS.Выгрузить(,"ПроводкаDSSСКП"));
	Запрос.УстановитьПараметр("МассивDescription", МассивDescription);
	//Пахоменков                                
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкаDSS.Ссылка КАК ПроводкаDSSСКП,
	               |	ПроводкаDSS.ApInvoice,
	               |	ПроводкаDSS.Description КАК Description,
	               |	ПроводкаDSS.AccountLawson,
	               |	ПроводкаDSS.ItemDescription,
	               |	ПроводкаDSS.TranAmount,
	               |	ПроводкаDSS.PoNumber КАК PONo     
	               |ИЗ
	               |	Документ.ПроводкаDSS КАК ПроводкаDSS
	               |ГДЕ
	               |	ПроводкаDSS.Ссылка В(&МассивПроводок)
	               |	И (НЕ ПроводкаDSS.Description В (&МассивDescription))";
	//<<	
	ТЗDSS.Загрузить(Запрос.Выполнить().Выгрузить());
	
	DSSTotalTranAmount = Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьDSSTotalTranAmount(
	                               CustomsКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.DSS,"ПроводкаDSSСКП"), 
	                               РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Объект.СопоставлениеInvoiceLinesИDSS,"ПроводкаDSSСКП"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПроводкиDSSПОДатеГТДИКонтрагенту(Команда)
		
	ОтборПоГТД = Истина;
	УстановитьОтборДляДобавленияDSS(ОтборПоГТД, ,Элементы.ТЗDSS);
				 
КонецПроцедуры

 &НаКлиенте
Процедура ПодобратьПроводкиDSSПОPO(Команда)
	
	ОтборПоPO = Истина;
	УстановитьОтборДляДобавленияDSS(, ОтборПоPO, Элементы.ТЗDSS);
	
КонецПроцедуры


// Процедуры табличной части

&НаКлиенте
Процедура УстановитьОтборDSSПоApInvoice()
	
	Если ОтбиратьDSSПоApInvoice Тогда	
		Отбор = Новый Структура;
		Отбор.Вставить("ApInvoice", СокрЛП(Элементы.Invoices.ТекущиеДанные.DSSInvoiceNo));
		Элементы.ТЗDSS.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе 
		Элементы.ТЗDSS.ОтборСтрок = Неопределено;
		ТЗDSS.Сортировать("ItemDescription Убыв");	 //надо будет убрать после обновления платформы
	КонецЕсли;
	    			
КонецПроцедуры

&НаКлиенте
Процедура DSSПриИзменении(Элемент)
	
	 ЗаполнитьТЗDSS();
	 РасчитатьДельту();
	
КонецПроцедуры
      
&НаКлиенте
Процедура DSSОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("ДокументСсылка.ПроводкаDSS") Тогда
		
		Для Каждого Проводка ИЗ ВыбранноеЗначение Цикл
			
			НоваяСтрока = Объект.DSS.Добавить();
			НоваяСтрока.ПроводкаDSSСКП = Проводка;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		ЗаполнитьТЗDSS();
		РасчитатьДельту();
	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура DSSВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПроводкаDSSСКП);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗDSSПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УстановитьОтборДляДобавленияDSS(,,Элементы.ТЗDSS);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДляДобавленияDSS(ОтборПоГТД = Ложь, ОтборПоPO = Ложь, ТабЧасть)
	
	СписокЗначений = Новый СписокЗначений;
	МассивСопоставленныхПроводок = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначений(Объект.СопоставлениеInvoiceLinesИDSS,"ПроводкаDSSСКП");
	МассивТЧDSS = CustomsКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.DSS,"ПроводкаDSSСКП"); 	
	СписокЗначений.ЗагрузитьЗначения(РГСофтКлиентСервер.СложитьМассивы(МассивСопоставленныхПроводок,МассивТЧDSS));
	  	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзРаспределениеИмпортаПоЗакрытиюПоставки");
	СтруктураНастройки.Вставить("МассивПроводок", СписокЗначений);
	СтруктураНастройки.Вставить("FiscalTypeVAT", "APDVATSTD");
	
	Если ОтборПоГТД Тогда 
		ТекГТД = Элементы.СписокГТД.ТекущиеДанные;
		Если ТекГТД = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно выделить CCD для подбора проводок DSS!",,"СписокГТД");
			Возврат;
		КонецЕсли;
		СтруктураНастройки.Вставить("ТекГТД", Элементы.СписокГТД.ТекущиеДанные.CCD);
	КонецЕсли;
	
	Если ОтборПоPO Тогда 
		СтруктураНастройки.Вставить("МассивPoNumber", ПолучитьМассивPoNumber(Элементы.Invoices.ТекущиеДанные.DSSInvoiceNo));
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Документ.ПроводкаDSS.ФормаВыбора", СтруктураПараметров, ТабЧасть);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивPoNumber(DSSInvoiceNo)
	
	Если ОтбиратьDSSПоApInvoice Тогда 
		СтруктураОтбора = Новый Структура("DSSInvoiceNo");
		СтруктураОтбора.DSSInvoiceNo = DSSInvoiceNo;
		ТабЧастьСопоставление = Объект.СопоставлениеInvoiceLinesИDSS.НайтиСтроки(СтруктураОтбора);
	Иначе 
		ТабЧастьСопоставление = Объект.СопоставлениеInvoiceLinesИDSS;
	КонецЕсли;
	
	МассивInvoiceLines = Новый Массив;
	Для Каждого Стр из ТабЧастьСопоставление цикл
		МассивInvoiceLines.Добавить(Стр.InvoiceLine);
	КонецЦикла;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьМассивPoNumber(МассивInvoiceLines));
	Возврат СписокЗначений;
		
КонецФункции

&НаКлиенте
Процедура ТЗDSSПередУдалением(Элемент, Отказ)
	
	//удаляем проводку из ТЧ DSS
	УдалитьСтрокуDSS(Элемент.ТекущиеДанные.ПроводкаDSSСКП);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуDSS(ПроводкаDSSСКП)
	
	//удаляем проводку из ТЧ DSS
	СтруктураОтбораDSS = Новый Структура("ПроводкаDSSСКП", ПроводкаDSSСКП);
	СтрокиDSS = Объект.DSS.НайтиСтроки(СтруктураОтбораDSS);
	Для Каждого Стр из СтрокиDSS цикл 
		Объект.DSS.Удалить(Объект.DSS.Индекс(Стр));
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////
//////////Перетаскивание строк

&НаКлиенте
Процедура СопоставлениеInvoiceLinesИDSSПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеInvoiceLinesИDSSПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.ДопустимыеДействия <> ДопустимыеДействияПеретаскивания.КопированиеИПеремещение Тогда 
		Возврат;
	КонецЕсли;
	ДобавитьВыделеннуюСтрокуВТЧСопоставление(Строка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделеннуюСтрокуВТЧСопоставление(Строка)
	
	ВыделеннаяСтрока = Элементы.ТЗDSS.ВыделенныеСтроки;
	
	Если ВыделеннаяСтрока.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана проводка DSS для добавления в табличную часть """"Tangible assets""""!",,
		"ТЗDSS");
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда 
		
		СтрокаСопоставления = Элементы.СопоставлениеInvoiceLinesИDSS.ВыделенныеСтроки;
		Если СтрокаСопоставления.Количество() = 0 Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана Invoice line для сопоставления с проводкой!",,
			"Объект.СопоставлениеInvoiceLinesИDSS");
			Возврат;											  
			
		КонецЕсли;
		ТекСтрокаСопоставления = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(СтрокаСопоставления[0]);
	Иначе 	
		ТекСтрокаСопоставления = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	         	
	Если ЗначениеЗаполнено(ТекСтрокаСопоставления.ПроводкаDSSСКП) Тогда 
		
		Ответ = Вопрос("Заменить проводку DSS в строке """"Tangible assets""""?", 
		РежимДиалогаВопрос.ДаНет); 
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроводкаDSS = ТЗDSS.НайтиПоИдентификатору(ВыделеннаяСтрока[0]).ПроводкаDSSСКП;
	//СтруктураОтбораInvoiceLine = Новый Структура("ПроводкаDSSСКП", ПроводкаDSS);
	//СтрокаInvoice = Объект.СопоставлениеInvoiceLinesИDSS.НайтиСтроки(СтруктураОтбораInvoiceLine);
	//Если СтрокаInvoice.Количество() > 0 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""+ ПроводкаDSS + " уже сопоставлена с Invoice line " + СтрокаInvoice[0].InvoiceLine +"!",,
	//	"Объект.СопоставлениеInvoiceLinesИDSS");
	//	Возврат;												   
	//КонецЕсли;
	
	ТекСтрокаСопоставления.ПроводкаDSSСКП = ПроводкаDSS;
	
	ЗаполнитьНоменклатуруFAиУдалитьПроводкуИзТЧDSSпослеСопоставления(ТекСтрокаСопоставления.ПолучитьИдентификатор(), ПроводкаDSS);
	
	РасчитатьДельту();
	Модифицированность = Истина;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруFAиУдалитьПроводкуИзТЧDSSпослеСопоставления(Идентификатор, ПроводкаDSSСКП)
	
	ТекСтрокаСопоставления = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(Идентификатор);
	Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ЗаполнитьНоменклатуруFA(ТекСтрокаСопоставления, ПроводкаDSSСКП, Объект.ShipmentСlosing); 
		 		 		
	//удаляем проводку из ТЧ DSS
	УдалитьСтрокуDSS(ПроводкаDSSСКП);
	
	ЗагрузитьКоличествоUnmatched();
	ЗаполнитьТЗDSS();
		
КонецПроцедуры

&НаКлиенте
Процедура Repeat(Команда)
	
	Строки = Элементы.СопоставлениеInvoiceLinesИDSS.ВыделенныеСтроки;	
	Для Каждого Стр Из Строки Цикл
		СтрокаТЗ = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(Стр);
		Если Не СтрокаТЗ.ПроводкаDSSСКП.Пустая() Тогда
			Проводка = СтрокаТЗ.ПроводкаDSSСКП;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из Строки Цикл
		СтрокаТЗ = Объект.СопоставлениеInvoiceLinesИDSS.НайтиПоИдентификатору(Стр);
		СтрокаТЗ.ПроводкаDSSСКП = Проводка;
	КонецЦикла;
	
	ЗагрузитьКоличествоUnmatched();
	
КонецПроцедуры

&НаКлиенте
Процедура OpenClassification(Команда)
	
	ТекСтрока = Элементы.СопоставлениеInvoiceLinesИDSS.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно выделить строку в табличной части """"Tangible assets""""!",,
			"Объект.СопоставлениеInvoiceLinesИDSS");
		Возврат;
	КонецЕсли;
	
	ТекInvoiceLine = Элементы.СопоставлениеInvoiceLinesИDSS.ТекущиеДанные.InvoiceLine;

	OpenClassificationПоInvoiceLine(Элементы.СопоставлениеInvoiceLinesИDSS, ТекСтрока, ТекInvoiceLine);
	
КонецПроцедуры

&НаКлиенте
Процедура OpenClassificationПоInvoiceLine(ВладелецФормы, ТекСтрока, ТекInvoiceLine)
	
	ПараметрыФормы = Новый Структура;
	
	ДокClassification = ПолучитьInvoiceLinesClassification(ТекInvoiceLine);
	Если ДокClassification = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Для Invoice line: " + СокрЛП(ТекInvoiceLine) + " не найден документ Invoice lines classification.",,
		"СопоставлениеInvoiceLinesИDSS[" + (ТекСтрока) + "].InvoiceLine");
		Возврат;
	иначе
		ПараметрыФормы.Вставить("Ключ", ДокClassification);
	КонецЕсли;
	ПараметрыФормы.Вставить("InvoiceLine", ТекInvoiceLine);
	
	ОткрытьФорму("Документ.InvoiceLinesClassification.Форма.ФормаДокумента", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

//{RGS - AKozhevnikova - RCA-0000352
&НаСервере
Функция ПолучитьДанныеОстатковОборудования(Номенклатура)
	
	СтруктураДанных = Новый Структура; 
	ОбъектДок = РеквизитФормыВЗначение("Объект");
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОборудованиеDSSОстатки.КоличествоОстаток,
		|	ОборудованиеDSSОстатки.СуммаРубОстаток
		|ИЗ
		|	РегистрНакопления.ОборудованиеDSS.Остатки(
		|			&Период,
		|			Номенклатура = &Номенклатура
		|				И ПроводкаДеталейСКП = ЗНАЧЕНИЕ(Документ.ПроводкаDSS.ПустаяСсылка)) КАК ОборудованиеDSSОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Период", Новый Граница(ОбъектДок.МоментВремени(),ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой()  Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураДанных.Вставить("Сумма",Выборка.СуммаРубОстаток);
		СтруктураДанных.Вставить("Количество",Выборка.КоличествоОстаток);
		
	Иначе
		СтруктураДанных.Вставить("Сумма",0);
		СтруктураДанных.Вставить("Количество",0);
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПринятиеОС(Команда)
	
	ТекСтрока = Элементы.СопоставлениеInvoiceLinesИDSS.ТекущиеДанные;
	
	Если ТекСтрока.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA unconv") Тогда
		Форма = ПолучитьОбщуюФорму("ФормаДобавленияОС");
		
		ДанныеОстаков = ПолучитьДанныеОстатковОборудования(ТекСтрока.Номенклатура);
		
		Форма.Наименование              = ТекСтрока.Translation;
		Форма.НаименованиеПолное        = ТекСтрока.Translation;
		Форма.НаименованиеENG           = ТекСтрока.InvoiceLine.НаименованиеТовара;
		Форма.ТипДляСверки              = "Unconv";
		Форма.НомерЗаказаНаПриобретение = ТекСтрока.PONo;
		Форма.НомерКоммерческогоИнвойса = ТекСтрока.InvoiceLine.Инвойс.Номер;
		Форма.AU                        = ТекСтрока.InvoiceLine.КостЦентр;
		Форма.Количество                = ДанныеОстаков.Количество;
		Форма.Стоимость                 = ДанныеОстаков.Сумма;
		Форма.НомерНакладной            = СписокГТД[0].CCD.Номер;
		Форма.Оборудование              = ТекСтрока.Номенклатура;
		Форма.СписатьВсё                = Истина;
		Форма.Подразделение             = ТекСтрока.InvoiceLine.КостЦентр.ПодразделениеОрганизации;
		Форма.ДатаПринятияКУчету        = Объект.Дата;
	
		Форма.Открыть();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного типа создание принятия не предусмотрено.";
		Сообщение.Сообщить();
		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция СоздатьПоступлениеInventoryНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс
	|ПОМЕСТИТЬ КурсSLB
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРИЗП, Валюта = &ВалютаSLB) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Номенклатура,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.Количество КАК Количество,
	|	InvoiceLinesClassificationClassification.Type,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.TotalPrice,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.SoldTo.CompanyNo КАК CompanyNo,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.КостЦентр.Segment КАК Segment,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.КостЦентр.TaxRegistration КАК TaxRegistration,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.КостЦентр.ПодразделениеОрганизации.Код КАК Location,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.НомерЗаявкиНаЗакупку КАК POnum,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.СтрокаЗаявкиНаЗакупку КАК POLine,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.КостЦентр КАК AU,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.Инвойс.Номер КАК ИнвойсНомер,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.СтрокаЗаявкиНаЗакупку.Владелец КАК PO,
	|	ВЫБОР
	|		КОГДА РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.Каталог <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
	|			ТОГДА РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.Каталог
	|		ИНАЧЕ РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.СтрокаЗаявкиНаЗакупку.Каталог
	|	КОНЕЦ КАК Catalog,
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.КодПоИнвойсу КАК КодПоИнвойсу,
	|	ПОДСТРОКА(РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine.НаименованиеТовара, 1, 999) КАК НаименованиеТовара,
	|	InvoiceLinesClassificationClassification.Translation КАК DescriptionRus
	|ПОМЕСТИТЬ ВТСопоставление
	|ИЗ
	|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставлениеInvoiceLinesИDSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	|		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine = InvoiceLinesClassificationClassification.InvoiceLine
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
	|		ПО РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.InvoiceLine = CustomsFilesOfGoods.Item
	|ГДЕ
	|	РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.Ссылка = &Ссылка
	|	И (НЕ РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП = ЗНАЧЕНИЕ(Документ.ПроводкаDSS.ПустаяСсылка)
	|			ИЛИ InvoiceLinesClassificationClassification.Type.Наименование = ""INVENTORY unconv"")
	|	И InvoiceLinesClassificationClassification.Type.Наименование = ""INVENTORY unconv""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine,
	|	СУММА(ВЫБОР
	|			КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТСопоставление.TotalPrice = 0
	|							ТОГДА InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
	|						ИНАЧЕ ВТСопоставление.TotalPrice
	|					КОНЕЦ
	|		КОНЕЦ) КАК TotalPrice,
	|	СУММА(ВЫБОР
	|			КОГДА InvoiceLinesCostsОбороты.Валюта = &ВалютаДолл
	|				ТОГДА InvoiceLinesCostsОбороты.СуммаОборот
	|			ИНАЧЕ InvoiceLinesCostsОбороты.СуммаОборот / КурсSLB.Курс
	|		КОНЕЦ) КАК ManagementSum,
	|	СУММА(ВЫБОР
	|			КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости <> ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	|				ТОГДА InvoiceLinesCostsОбороты.СуммаФискальнаяОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Fiscal
	|ПОМЕСТИТЬ ВТSum
	|ИЗ
	|	КурсSLB КАК КурсSLB,
	|	ВТСопоставление КАК ВТСопоставление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.InvoiceLinesCosts.Обороты(
	|				,
	|				&CreationDate,
	|				Регистратор,
	|				SoldTo.Код = ""SLI RU""
	|					И (ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	|						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	|						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	|						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	|						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	|						ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса))) КАК InvoiceLinesCostsОбороты
	|		ПО ВТСопоставление.InvoiceLine = InvoiceLinesCostsОбороты.СтрокаИнвойса
	|ГДЕ
	|	InvoiceLinesCostsОбороты.Регистратор = &InvoiceLinesMatching
	|
	|СГРУППИРОВАТЬ ПО
	|	InvoiceLinesCostsОбороты.СтрокаИнвойса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(InventoryGoods.Ссылка) КАК GoodКаталогПартНомер,
	|	МАКСИМУМ(InventoryGoods1.Ссылка) КАК GoodПартНомер,
	|	ВТСопоставление.InvoiceLine,
	|	ВТСопоставление.InvoiceLine КАК InvoiceLine1
	|ПОМЕСТИТЬ ВТ_Goods
	|ИЗ
	|	ВТСопоставление КАК ВТСопоставление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.InventoryGoods КАК InventoryGoods1
	|		ПО (InventoryGoods1.Код = ВТСопоставление.InvoiceLine.КодПоИнвойсу)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.InventoryGoods КАК InventoryGoods
	|		ПО (InventoryGoods.Код = ВТСопоставление.InvoiceLine.КодПоИнвойсу)
	|			И ВТСопоставление.Catalog = InventoryGoods.Catalog
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСопоставление.InvoiceLine,
	|	ВТСопоставление.InvoiceLine
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТSum.ManagementSum,
	|	ВТСопоставление.Номенклатура,
	|	ВТСопоставление.Количество,
	|	ВТСопоставление.Type,
	|	ВТСопоставление.InvoiceLine,
	|	ВТSum.TotalPrice + ВТSum.Fiscal КАК FiscalSum,
	|	4 КАК CompanyNo,
	|	ВТСопоставление.Segment,
	|	ВТСопоставление.TaxRegistration,
	|	ВТСопоставление.POnum,
	|	ВТСопоставление.POLine,
	|	ВТСопоставление.InvoiceLine.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(InventoryLocations.Ссылка, ЗНАЧЕНИЕ(Справочник.InventoryLocations.ПустаяСсылка)) КАК InventoryLocation,
	|	ВТСопоставление.AU,
	|	ВТСопоставление.ИнвойсНомер,
	|	ЕСТЬNULL(ВТ_Goods.GoodКаталогПартНомер, ЕСТЬNULL(ВТ_Goods.GoodПартНомер, ЗНАЧЕНИЕ(Справочник.InventoryGoods.ПустаяСсылка))) КАК Good,
	|	ВТСопоставление.PO,
	|	ВТСопоставление.Catalog,
	|	ВТСопоставление.КодПоИнвойсу,
	|	ВТСопоставление.НаименованиеТовара,
	|	ВТСопоставление.DescriptionRus
	|ИЗ
	|	ВТSum КАК ВТSum
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСопоставление КАК ВТСопоставление
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Goods КАК ВТ_Goods
	|			ПО ВТСопоставление.InvoiceLine = ВТ_Goods.InvoiceLine
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.InventoryLocations КАК InventoryLocations
	|			ПО ВТСопоставление.Location = InventoryLocations.Наименование
	|		ПО ВТSum.InvoiceLine = ВТСопоставление.InvoiceLine";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("InvoiceLinesMatching", Объект.ShipmentСlosing);
	Запрос.УстановитьПараметр("ДатаРИЗП", Объект.Дата);
	Запрос.УстановитьПараметр("CreationDate", ?(Объект.CreationDate=Дата(1,1,1), ТекущаяДата(), Объект.CreationDate));
	Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
	Запрос.УстановитьПараметр("ВалютаДолл", Справочники.Валюты.НайтиПоКоду("840"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	ТЗШапки = ТЗ.Скопировать();
	
	ТЗШапки.Свернуть("CompanyNo,Segment,TaxRegistration,InventoryLocation,POnum,PO");
	
	НачатьТранзакцию();
	
	Попытка	
		
		МассивСозданныхДокументов = Новый Массив;
		
		Для каждого СтрокаШапки Из ТЗШапки Цикл
			
			СтруктураОтбора = Новый Структура;
			Для каждого Колонка Из ТЗШапки.Колонки Цикл
				СтруктураОтбора.Вставить(Колонка.Имя,СтрокаШапки[Колонка.Имя]);
			КонецЦикла;
			
			СтрокиТЗ = ТЗ.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиТЗ.Количество()>0 Тогда
				
				
				ПоступлениеInventory = Документы.InventoryПоступление.СоздатьДокумент();
				ПоступлениеInventory.ДокументОснование = Объект.Ссылка;
				ПоступлениеInventory.Company           = СтрокаШапки.CompanyNo;
				ПоступлениеInventory.TaxRegistration   = СтрокаШапки.TaxRegistration;
				ПоступлениеInventory.InventoryLocation = СтрокаШапки.InventoryLocation;
				ПоступлениеInventory.Segment           = СтрокаШапки.Segment;
				ПоступлениеInventory.PONumber          = СтрокаШапки.POnum;
				ПоступлениеInventory.PO                = СтрокаШапки.PO;
				
				Для каждого Строка Из СтрокиТЗ Цикл
					СтрокаGood = ПоступлениеInventory.Goods.Добавить();
					СтрокаGood.Good            = Строка.Good;
					
					Если СтрокаGood.Good.Пустая() Тогда
						Good = Справочники.InventoryGoods.СоздатьЭлемент();
						Good.DescriptionRus = Строка.DescriptionRus;
						Good.Наименование   = Строка.НаименованиеТовара;
						Good.Код            = Строка.КодПоИнвойсу;
						Good.Catalog        = Строка.Catalog;
						Good.StandardUOM    = Строка.ЕдиницаИзмерения;
						Good.Записать();
						
						СтрокаGood.Good = Good;
					КонецЕсли;
					
					СтрокаGood.AU              = Строка.AU;
					СтрокаGood.POLine          = Строка.POLine;
					СтрокаGood.Quantity        = Строка.Количество;
					СтрокаGood.UOM             = Строка.ЕдиницаИзмерения;
					СтрокаGood.FiscalSum       = Строка.FiscalSum;
					СтрокаGood.FiscalPrice     = Строка.FiscalSum/Строка.Количество;
					СтрокаGood.ManagementSum   = Строка.ManagementSum;  
					СтрокаGood.ManagementPrice = Строка.ManagementSum/Строка.Количество;
					СтрокаGood.PONumber        = Строка.POnum;  
					СтрокаGood.НомерИнвойса    = Строка.ИнвойсНомер;
				КонецЦикла;
				
				ПоступлениеInventory.Дата = Объект.Дата;
				ПоступлениеInventory.УстановитьНовыйНомер();
				ПоступлениеInventory.Записать(РежимЗаписиДокумента.Запись);
				
				МассивСозданныхДокументов.Добавить(ПоступлениеInventory.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат  МассивСозданныхДокументов;
		
	Исключение
		
		ОтменитьТранзакцию();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Создание документов не выполнено, возникла ошибка: "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат  Неопределено;
	КонецПопытки;
	
	
КонецФункции

&НаКлиенте
Процедура СоздатьПоступлениеInventory(Команда)
	МассивДокументов = СоздатьПоступлениеInventoryНаСервере();
	
	Если МассивДокументов<>Неопределено Тогда
		Для каждого Элемент Из МассивДокументов Цикл
			
			Форма = ПолучитьФорму("Документ.InventoryПоступление.ФормаОбъекта", Новый Структура("Ключ",Элемент),ЭтаФорма);
			Форма.Открыть();
			
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
//}RGS - AKozhevnikova - RCA-0000352          