
Функция ЗагрузитьСписокГТД(CurrentShipmentClosing) Экспорт 
	
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("ShipmentClosing", CurrentShipmentClosing);
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ГТД.Ссылка КАК CCD
	                |ИЗ
	                |	Документ.ГТД КАК ГТД
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки КАК ЗакрытиеПоставки
	                |		ПО ГТД.Shipment = ЗакрытиеПоставки.Поставка
	                |			И (НЕ ГТД.ПометкаУдаления)
	                |			И (ГТД.SoldTo.Код = ""SLI RU"")
	                |ГДЕ
	                |	ЗакрытиеПоставки.Ссылка = &ShipmentClosing
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	CustomsFilesLight.Ссылка
	                |ИЗ
	                |	Документ.CustomsFilesLight КАК CustomsFilesLight
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки КАК ЗакрытиеПоставки
	                |		ПО CustomsFilesLight.Shipment = ЗакрытиеПоставки.Поставка
	                |			И (CustomsFilesLight.SoldTo.Код = ""SLI RU"")
	                |			И (НЕ CustomsFilesLight.ПометкаУдаления)
	                |ГДЕ
	                |	ЗакрытиеПоставки.Ссылка = &ShipmentClosing";	 
	 Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
 
Функция ЗагрузитьПроводкиDSSПОApInvoice(CurrentShipmentClosing, СписокГТД, МассивПроводок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CurrentShipmentClosing", CurrentShipmentClosing);
	Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок); 
	Запрос.УстановитьПараметр("APDVATSTD", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APDVATSTD")); 
	Запрос.УстановитьПараметр("FiscalParentCompany", Константы.FiscalParentCompany.Получить()); 
	Запрос.УстановитьПараметр("МассивНомеровГТДБезНулей", Документы.РаспределениеИмпортаПоЗакрытиюПоставки.ПолучитьМассивНомеровГТДБезНулей(СписокГТД));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	InvoiceLinesClassificationClassification.InvoiceLine.Инвойс.DSSNumber КАК DSSNumber
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &CurrentShipmentClosing
	               |	И InvoiceLinesClassificationClassification.InvoiceLine.SoldTo = &FiscalParentCompany";
				   
	НомераДСС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("DSSNumber");
	
	Запрос.УстановитьПараметр("НомераДСС", НомераДСС);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НомераДокументовВПроводкахDSSИГТД.Объект КАК Ссылка,
	               |	НомераДокументовВПроводкахDSSИГТД.Объект.System КАК System,
	               |	НомераДокументовВПроводкахDSSИГТД.Объект.SourceCode КАК SourceCode,
	               |	НомераДокументовВПроводкахDSSИГТД.Объект.FiscalType КАК FiscalType
	               |ПОМЕСТИТЬ ПроводкаDSS
	               |ИЗ
	               |	РегистрСведений.НомераДокументовВПроводкахDSSИГТД КАК НомераДокументовВПроводкахDSSИГТД
	               |ГДЕ
	               |	(НомераДокументовВПроводкахDSSИГТД.Номер В
	               |				(&НомераДСС)
	               |				
	               |			ИЛИ НомераДокументовВПроводкахDSSИГТД.Номер В (&МассивНомеровГТДБезНулей))
	               |	И НомераДокументовВПроводкахDSSИГТД.ТипДокумента = ""ApInv""
	               |	И НомераДокументовВПроводкахDSSИГТД.Объект ССЫЛКА Документ.ПроводкаDSS
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПроводкаDSS.Ссылка КАК ПроводкаDSSСКП
	               |ИЗ
	               |	ПроводкаDSS КАК ПроводкаDSS
	               |ГДЕ
	               |	ПроводкаDSS.System = ""AP""
				   |	И (ПроводкаDSS.SourceCode = ""AD"" ИЛИ ПроводкаDSS.SourceCode = ""XC"")
	               |	И НЕ ПроводкаDSS.Ссылка В (&МассивПроводок)
	               |	И НЕ ПроводкаDSS.FiscalType = &APDVATSTD";

	                                         
	Возврат Запрос.Выполнить().Выгрузить();
    		      			   
КонецФункции

Функция ПолучитьМассивНомеровГТДБезНулей(СписокГТД) Экспорт
	
	МассивНомеровГТДБезНулей = Новый Массив;
	Для каждого СсылкаГТД из СписокГТД цикл
		// { RGS MYurkevich 9/21/2015 2:09:08 PM - RCA-0000103
		SequenceNo = ?(ТипЗнч(СсылкаГТД.CCD) = Тип("ДокументСсылка.CustomsFilesLight"), СокрЛП(СсылкаГТД.CCD.SeqNo), СокрЛП(СсылкаГТД.CCD.SequenceNo));
		// } RGS MYurkevich 9/21/2015 2:09:09 PM - RCA-0000103
		CustomsPost = СокрЛП(СсылкаГТД.CCD.CustomsPost);
		Дата = Формат(СсылкаГТД.CCD.Дата, "ДФ=ddMMyy");
		МассивНомеровГТДБезНулей.Добавить(CustomsPost + "-" + Дата + "-" + SequenceNo);
		Пока Лев(SequenceNo, 1) = "0" цикл
			SequenceNo = Прав(SequenceNo,СтрДлина(SequenceNo)- 1);
			МассивНомеровГТДБезНулей.Добавить(CustomsPost + "-" + Дата + "-" + SequenceNo);
		КонецЦикла;
	КонецЦикла;
	 		                                         
	Возврат МассивНомеровГТДБезНулей;
    		      			   
КонецФункции
          
Функция ПолучитьСтрокиИнвойсаCurrentShipmentClosing(InvoiceLinesMatching, CreationDate)  Экспорт 
	 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("InvoiceLinesMatching", InvoiceLinesMatching);
	Запрос.УстановитьПараметр("CreationDate", ?(CreationDate=Дата(1,1,1), ТекущаяДата(), CreationDate));
	
	//Пахоменков сменил значение на дсс
	Запрос.Текст = "ВЫБРАТЬ
	               |	InvoiceLinesClassificationClassification.Type,
	               |	InvoiceLinesClassificationClassification.InvoiceLine,
	               |	InvoiceLinesClassificationClassification.Translation,
	               |	InvoiceLinesClassificationClassification.InvoiceLine.НомерЗаявкиНаЗакупку КАК PONo
	               |ПОМЕСТИТЬ ВТТипы
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &InvoiceLinesMatching
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	               |				ТОГДА InvoiceLinesCostsОбороты.СуммаОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК InvoiceLineSum,
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine,
	               |	СУММА(InvoiceLinesCostsОбороты.СуммаФискальнаяОборот) КАК InvoiceLineCost,
	               |	СУММА(InvoiceLinesCostsОбороты.СуммаОборот) КАК InvoiceTotalSum,
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса.Инвойс.DSSNumber КАК DSSInvoiceNo,
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТСумма
	               |ИЗ
	               |	РегистрНакопления.InvoiceLinesCosts.Обороты(
	               |			,
	               |			&CreationDate,
	               |			Регистратор,
	               |			SoldTo.Код = ""SLI RU""
	               |				И (ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |					ИЛИ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса))) КАК InvoiceLinesCostsОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипы КАК ВТТипы
	               |		ПО InvoiceLinesCostsОбороты.СтрокаИнвойса = ВТТипы.InvoiceLine
	               |ГДЕ
	               |	InvoiceLinesCostsОбороты.Регистратор = &InvoiceLinesMatching
	               |	И ВЫБОР
	               |			КОГДА ВТТипы.Type.Наименование = ""Rent/Loan""
	               |					ИЛИ ВТТипы.Type.Наименование = ""Return from Loan""  //добавила Федотова Л, РГ-Софт, 12.12.12, вопрос №SLI-0003055 
	               |					ИЛИ ВТТипы.Type.Наименование = ""RAN""
	               |					ИЛИ ВТТипы.Type.Наименование = ""Replace""
	               |				ТОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |						ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |			ИНАЧЕ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняПошлины)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняСборы)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсХранение)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСтраховка)
	               |					ИЛИ InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса,
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса.Инвойс.DSSNumber,
	               |	InvoiceLinesCostsОбороты.СтрокаИнвойса.Количество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Документ.ПроводкаDSS.ПустаяСсылка) КАК ПроводкаDSSСКП,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	               |	ВТСумма.InvoiceLineSum,
	               |	ВТСумма.InvoiceLine,
	               |	ВЫРАЗИТЬ(ВТСумма.DSSInvoiceNo КАК СТРОКА(26)) КАК DSSInvoiceNo,
	               |	ВЫБОР
	               |		КОГДА ВТТипы.Type.Наименование = ""Rent/Loan""
	               |				ИЛИ ВТТипы.Type.Наименование = ""Return from Loan"" //добавила Федотова Л, РГ-Софт, 12.12.12, вопрос №SLI-0003055
	               |				ИЛИ ВТТипы.Type.Наименование = ""RAN""
	               |				ИЛИ ВТТипы.Type.Наименование = ""Replace""
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВТСумма.Количество = 0
	               |					ТОГДА ВТСумма.InvoiceLineCost
	               |				ИНАЧЕ ВТСумма.InvoiceLineCost / ВТСумма.Количество
	               |			КОНЕЦ
	               |	КОНЕЦ КАК InvoiceLineCost,
	               |	ВТСумма.InvoiceTotalSum,
	               |	ВТТипы.Type,
	               |	ВТТипы.Translation,
	               |	ВТТипы.PONo
	               |ИЗ
	               |	ВТСумма КАК ВТСумма
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипы КАК ВТТипы
	               |		ПО ВТСумма.InvoiceLine = ВТТипы.InvoiceLine";
			   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	 		
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(РезультатЗапроса, "DSSInvoiceNo");
					   
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьDSSTotalTranAmount(МассивПроводокDSS, МассивПроводокСопоставления) Экспорт
	
	 МассивПроводок = РГСофтКлиентСервер.СложитьМассивы(МассивПроводокСопоставления, МассивПроводокDSS);
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок);
	 //Пахоменков сменил на дсс
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	СУММА(ПроводкаDSS.TranAmount) КАК TranAmount
	                |ИЗ
	                |	Документ.ПроводкаDSS КАК ПроводкаDSS
	                |ГДЕ
	                |	ПроводкаDSS.Ссылка В(&МассивПроводок)";
	 
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Если Выборка.Следующий() Тогда 
		 Возврат ?(Выборка.TranAmount = Null, 0, Выборка.TranAmount);
	 иначе
		 Возврат 0;
	 КонецЕсли;
	 
 КонецФункции
 
Функция ЗагрузитьПроводкиDSSПОPOnumber(МассивПроводок, МассивInvoiceLines) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("МассивПроводок", МассивПроводок);
	//Запрос.УстановитьПараметр("МассивPoNumber", ПолучитьМассивPoNumber(МассивInvoiceLines));
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			   |	ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК ПроводкаDSSСКП
	//			   |ИЗ
	//			   |	Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок КАК ПроводкиDSSДеталейСчетовКнигиПокупок
	//			   |ГДЕ
	//			   |	(НЕ ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка В (&МассивПроводок))
	//			   |	И (НЕ ПроводкиDSSДеталейСчетовКнигиПокупок.FiscalType.Код = ""APDVATSTD"")
	//			   |	И ПроводкиDSSДеталейСчетовКнигиПокупок.System <> ""IC""
	//			   |	И ПроводкиDSSДеталейСчетовКнигиПокупок.PoNumber В(&МассивPoNumber)";
	//										 
	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СопоставитьПроводкиDSSиInvoiceПОPOnumber(InvoiceLinesMatching) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("InvoiceLinesMatching", InvoiceLinesMatching);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	InvoiceLinesClassificationClassification.InvoiceLine.НомерЗаявкиНаЗакупку КАК InvoicePONumber,
	               |	InvoiceLinesClassificationClassification.InvoiceLine.Инвойс КАК Invoice
	               |ПОМЕСТИТЬ ВТИнвойсы
	               |ИЗ
	               |	Документ.InvoiceLinesClassification.Classification КАК InvoiceLinesClassificationClassification
	               |ГДЕ
	               |	InvoiceLinesClassificationClassification.Ссылка.InvoiceLinesMatching = &InvoiceLinesMatching
	               |	И (НЕ InvoiceLinesClassificationClassification.InvoiceLine.Инвойс.Голд)
	               |	И InvoiceLinesClassificationClassification.InvoiceLine.НомерЗаявкиНаЗакупку <> """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТИнвойсы.Invoice.Номер КАК InvoiceNo,
	               |	ВТИнвойсы.InvoicePONumber КАК InvoicePONumber
	               |ИЗ
	               |	ВТИнвойсы КАК ВТИнвойсы
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ InvoicePONumber)
	               |ПО
	               |	InvoiceNo";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	МассивИнвойсов = Новый Массив;
	
	// INVOICE
	ВыборкаИнвойсов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СоответствиеPOИнвойсов = Новый Соответствие();
	Пока ВыборкаИнвойсов.Следующий() цикл
		
		 МассивInvoicePONumber = Новый Массив;
		 
		 ВыборкаInvoicePONumber = ВыборкаИнвойсов.Выбрать();
		 Пока ВыборкаInvoicePONumber.Следующий() Цикл 
			 МассивInvoicePONumber.Добавить(СокрЛП(ВыборкаInvoicePONumber.InvoicePONumber));
			 Если МассивИнвойсов.Найти(ВыборкаInvoicePONumber.InvoicePONumber) = Неопределено Тогда
				 МассивИнвойсов.Добавить(ВыборкаInvoicePONumber.InvoicePONumber);
			 КонецЕсли;

		 КонецЦикла;
		 
		 СоответствиеPOИнвойсов.Вставить(СокрЛП(ВыборкаИнвойсов.InvoiceNo), МассивInvoicePONumber);
		 		
	 КонецЦикла;
	 
	 Запрос.Текст = "ВЫБРАТЬ
	                |	НомераДокументовВПроводкахDSSИГТД.Объект КАК Ссылка,
	                |	НомераДокументовВПроводкахDSSИГТД.Объект.System КАК System,
	                |	НомераДокументовВПроводкахDSSИГТД.Объект.SourceCode КАК SourceCode,
	                |	НомераДокументовВПроводкахDSSИГТД.Объект.ApInvoice КАК ApInvoice,
	                |	НомераДокументовВПроводкахDSSИГТД.Объект.PoNumber КАК PoNumber,
	                |	НомераДокументовВПроводкахDSSИГТД.Объект.FiscalType КАК FiscalType
	                |ПОМЕСТИТЬ ПроводкаDSS
	                |ИЗ
	                |	РегистрСведений.НомераДокументовВПроводкахDSSИГТД КАК НомераДокументовВПроводкахDSSИГТД
	                |ГДЕ
	                |	НомераДокументовВПроводкахDSSИГТД.ТипДокумента = ""PO""
	                |	И НЕ НомераДокументовВПроводкахDSSИГТД.Номер = """"
	                |	И НомераДокументовВПроводкахDSSИГТД.Номер В(&Инвойсы)
	                |	И НомераДокументовВПроводкахDSSИГТД.Объект ССЫЛКА Документ.ПроводкаDSS
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ПроводкаDSS.ApInvoice КАК ApInvoice,
	                |	ПроводкаDSS.PoNumber КАК PoNumber
	                |ИЗ
	                |	ПроводкаDSS КАК ПроводкаDSS
	                |ГДЕ
	                |	НЕ ПроводкаDSS.FiscalType.Код = ""APDVATSTD""
	                |	И ПроводкаDSS.System <> ""IC""
	                |	И НЕ ПроводкаDSS.Ссылка.ПометкаУдаления
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ PoNumber)
	                |ПО
	                |	ApInvoice";
				   
	Запрос.УстановитьПараметр("Инвойсы", МассивИнвойсов);
	
	///DSS
	ВыборкаПроводокDSS = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СоответствиеPOПроводокDSS = Новый Соответствие();
	Пока ВыборкаПроводокDSS.Следующий() цикл
		
		 МассивDSSPONumber = Новый Массив;
		 
		 ВыборкаDSSPONumber = ВыборкаПроводокDSS.Выбрать();
		 Пока ВыборкаDSSPONumber.Следующий() Цикл 
			 МассивDSSPONumber.Добавить(СокрЛП(ВыборкаDSSPONumber.PONumber));
		 КонецЦикла;
		 
		 СоответствиеPOПроводокDSS.Вставить(СокрЛП(ВыборкаПроводокDSS.ApInvoice), МассивDSSPONumber);
		
	КонецЦикла;
	
	//сравниваем INVOICE и DSS по количеству и составу PO number
	Для Каждого СоответствиеPOИнвойса из СоответствиеPOИнвойсов Цикл 
		
		ТекInvoiceNo = СоответствиеPOИнвойса.Ключ;
		МассивPOИнвойса = СоответствиеPOИнвойса.Значение;
		
		Для Каждого СоответствиеPOAPInvoice из СоответствиеPOПроводокDSS Цикл 
			
			МассивPODSS = СоответствиеPOAPInvoice.Значение;
			
			Если МассивPOИнвойса.Количество() = МассивPODSS.Количество() Тогда 
				
				РезультатСравненияМассивов = РГСофтКлиентСервер.ВычестьМассивы(МассивPOИнвойса, МассивPODSS);
				Если РезультатСравненияМассивов.Количество() = 0  Тогда
					
					Инвойс = Документы.Инвойс.НайтиПоНомеру(ТекInvoiceNo);
					ЗаполнитьDSSnumberВInvoice(Инвойс, СоответствиеPOAPInvoice.Ключ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецФункции

Процедура ЗаполнитьDSSnumberВInvoice(Инвойс, DSSNumber) Экспорт 
	
	ОбъектИнвойс = Инвойс.ПолучитьОбъект();
	ОбъектИнвойс.DSSNumber = СокрЛП(DSSNumber);
	ОбъектИнвойс.ОбменДанными.Загрузка = Истина;
	
	Попытка
		ОбъектИнвойс.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать значение ""DSS number"" для " + ОбъектИнвойс +"
		| "+ ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьМассивPoNumber(МассивInvoiceLines) Экспорт
	 		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивInvoiceLines", МассивInvoiceLines);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку как PONumber
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Ссылка В(&МассивInvoiceLines)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("PONumber");
	 		
КонецФункции

 //// Сопоставление
 
Функция MatchDSSИInvoiceLines(ТЗСопоставление, ТЗDSS, CurrentShipmentClosing) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧСопоставление", ТЗСопоставление);
	Запрос.УстановитьПараметр("ТЗDSS", ТЗDSS);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТСопоставление.InvoiceLine,
	|	ВТСопоставление.DSSInvoiceNo
	|ПОМЕСТИТЬ ВТСопоставление
	|ИЗ
	|	&ТЧСопоставление КАК ВТСопоставление
	|;
	| ВЫБРАТЬ
	|	ВТСопоставление.InvoiceLine,
	|	ВТСопоставление.DSSInvoiceNo,
	|	ВТСопоставление.InvoiceLine.Инвойс как Инвойс,
	|	ВТСопоставление.InvoiceLine.Инвойс.DSSNumber как DSSNumber,
	|   ВТСопоставление.InvoiceLine.НомерЗаявкиНаЗакупку КАК PONumber,
	|   ВТСопоставление.InvoiceLine.НаименованиеТовара КАК НаименованиеТовара
	|ИЗ
	|	ВТСопоставление КАК ВТСопоставление
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗDSS.ПроводкаDSSСКП
	|ПОМЕСТИТЬ ВТDSS
	|ИЗ
	|	&ТЗDSS КАК ТЗDSS
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТDSS.ПроводкаDSSСКП,
	|   ВТDSS.ПроводкаDSSСКП.ItemDescription КАК ItemDescription,
	|   ВТDSS.ПроводкаDSSСКП.ApInvoice КАК ApInvoice,
	|   ВТDSS.ПроводкаDSSСКП.PONumber КАК PONumber
	|ИЗ
	|	ВТDSS КАК ВТDSS ";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТЗПроводки = РезультатЗапроса[3].выгрузить();
	ВыборкаСтрокИнвойса = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаСтрокИнвойса.Следующий() Цикл 
		
		ПараметрыОтбораDSS = Новый Структура("ApInvoice", СокрЛП(ВыборкаСтрокИнвойса.DSSInvoiceNo));
		ПараметрыОтбораПоPONumber = Новый Структура("PONumber", СокрЛП(ВыборкаСтрокИнвойса.PONumber));
		
		ОписаниеТовара = ВыборкаСтрокИнвойса.НаименованиеТовара;
        		
		ОтобранныеDSS = ТЗПроводки.Скопировать(ПараметрыОтбораDSS);                                             
		ОтобранныеПоPODSS = ОтобранныеDSS.Скопировать(ПараметрыОтбораПоPONumber);
        ДекларацияКандидат = Неопределено;
		
		//сначала ищем в проводках, отобранных по значению PO number
        //Ищем вхождение 5 слов, потом 4 и т.д
		Для КолСлов = 1 По 4 Цикл
			                   								
			МассивСловСопоставления = РазбитьСтрокуНаСлова(ОписаниеТовара, 2, 6-КолСлов, Истина);   	
			ДекларацияКандидат = НайтиДекларацию(МассивСловСопоставления, ОтобранныеПоPODSS); 		
			
			Если ДекларацияКандидат <> Неопределено Тогда 
				Прервать;
			КонецЕсли;
									       									
		КонецЦикла;
		
		//если не удалось найти в проводках, отобранных по значению PO number, ищем в остальных
		Если ДекларацияКандидат = Неопределено Тогда 
			
			//Ищем вхождение 5 слов, потом 4 и т.д
			Для КолСлов = 1 По 4 Цикл
				
				МассивСловСопоставления = РазбитьСтрокуНаСлова(ОписаниеТовара, 2, 6-КолСлов, Истина);   	
				ДекларацияКандидат = НайтиДекларацию(МассивСловСопоставления, ОтобранныеDSS); 		
				
				Если ДекларацияКандидат <> Неопределено Тогда 
					Прервать;
				КонецЕсли;
				 								
			КонецЦикла; 
			
		КонецЕсли;
		
		
		Если ДекларацияКандидат <> Неопределено Тогда     	
			//Подставляем проводку к InvoiceLine
			СтруктураОтбораInvoiceLine = Новый Структура("InvoiceLine", ВыборкаСтрокИнвойса.InvoiceLine);
			СтрокиInvoice = ТЗСопоставление.НайтиСтроки(СтруктураОтбораInvoiceLine);
			СтрокаInvoice = СтрокиInvoice[0];
			
			Если ЗначениеЗаполнено(СтрокаInvoice.ПроводкаDSSСКП) 
				и СтрокаInvoice.ПроводкаDSSСКП <> ДекларацияКандидат.ПроводкаDSSСКП Тогда 
				
				СтрокаТЗDSS = ТЗDSS.Добавить();
				СтрокаТЗDSS.ПроводкаDSSСКП = СтрокаInvoice.ПроводкаDSSСКП;
			КонецЕсли;
			
			СтрокаInvoice.ПроводкаDSSСКП = ДекларацияКандидат.ПроводкаDSSСКП;
			
			ЗаполнитьНоменклатуруFA(СтрокаInvoice, ДекларацияКандидат.ПроводкаDSSСКП, CurrentShipmentClosing);
			//удаляем проводку из ТЧ DSS
			СтруктураОтбораDSS = Новый Структура("ПроводкаDSSСКП", ДекларацияКандидат.ПроводкаDSSСКП);
			СтрокиDSS = ТЗDSS.НайтиСтроки(СтруктураОтбораDSS);
			Для Каждого Стр из СтрокиDSS цикл 
				ТЗDSS.Удалить(Стр);
			КонецЦикла;
			
		КонецЕсли;
								
	КонецЦикла;
		
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("ТЧDSS", ТЗDSS);
	СтруктураТЧ.Вставить("ТЧСопоставление", ТЗСопоставление);
	 	
	Возврат СтруктураТЧ;
	        						
КонецФункции

Функция РазбитьСтрокуНаСлова(Строка, МинДлина, КоличествоСлов=0, ВРег = Ложь)
	
	Слово = "";
	ДобавлятьСлово = Истина;
	МассивСлов = Новый Массив;
	
	
	Если ВРег = Истина Тогда
		
		Строка = ВРег(Строка);	
	
	КонецЕсли; 	
	
	Для Символ = 0 По СтрДлина(СокрЛП(Строка)) Цикл
		
		Буква = Сред(Строка, Символ, 1);
		
		Если ЭтоБуква(Буква) Тогда
			
			Слово = Слово + Буква;
			ДобавлятьСлово = Истина;
			
		Иначе
			
			Если СтрДлина(Слово) > МинДлина И ДобавлятьСлово = Истина Тогда  
				
				МассивСлов.Добавить(Слово);
				
				Если МассивСлов.Количество() = КоличествоСлов И КоличествоСлов <> 0 Тогда
				
					Возврат МассивСлов;	
				
				КонецЕсли; 
				
				Слово = "";
				
			КонецЕсли; 
			
			ДобавлятьСлово=Ложь;   
			
		КонецЕсли; 						
		
	КонецЦикла; 
	
	Если СтрДлина(Слово) > МинДлина И ДобавлятьСлово Тогда  
		МассивСлов.Добавить(Слово);
	КонецЕсли;
	
	Возврат МассивСлов;
	
КонецФункции
 
Функция НайтиДекларацию(МассивСловСопоставления, ОтобранныеDSS)
	
	ДекларацияКандидат = Неопределено;
	
	Для каждого СтрокаDSS Из ОтобранныеDSS Цикл
		
		СловоСопоставленияНеПодходит = Ложь;  
		
		МассивСловDSS = РазбитьСтрокуНаСлова(СтрокаDSS.ItemDescription,2,,Истина);
		
		Для каждого СловоСопоставления Из МассивСловСопоставления Цикл
			
			Если МассивСловDSS.Найти(СловоСопоставления) = Неопределено Тогда
			
				СловоСопоставленияНеПодходит = Истина;	

			КонецЕсли; 
			
		КонецЦикла; 
		
		Если СловоСопоставленияНеПодходит = Ложь Тогда
			          
			Если ДекларацияКандидат <> Неопределено Тогда
				
				Если СтрокаDSS.ПроводкаDSSСКП.TranAmount > ДекларацияКандидат.ПроводкаDSSСКП.TranAmount Тогда
				
					ДекларацияКандидат = СтрокаDSS; 	
				
				КонецЕсли; 
				
			Иначе
				
				ДекларацияКандидат = СтрокаDSS;	
				
			КонецЕсли;     					
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат ДекларацияКандидат;
	
КонецФункции

Функция ПолучитьСтроковоеЗначениеБезПробеловИЗнаковПрепинания(Значение, Колво = 3) 
	
	НовоеЗначение = "";
	Слово = "";
	СчСлов = 0;
	Для индекс = 1 по СтрДлина(Значение)+1 Цикл
		Символ = Сред(Значение, индекс, 1);
		Если ЭтоБуква(Символ) Тогда
			Слово = Слово + Символ;
		Иначе
			// Если это слово, и оно имеет длину более 1-го символа, тогда добавим его в список
			Если ЗначениеЗаполнено(Слово) И СтрДлина(Слово) > 1 и СчСлов < Колво Тогда
				НовоеЗначение = НовоеЗначение + (ВРЕГ(Слово));
				Слово = "";
				СчСлов = СчСлов+1;
			ИначеЕсли СчСлов >= Колво Тогда 
				Возврат НовоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	   	
	Возврат НовоеЗначение;
	
КонецФункции

Функция ЭтоБуква(Символ)
	
	Код = КодСимвола(Символ);
	
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруFA(ТекСтрокаСопоставления, ПроводкаDSSСКП, CurrentShipmentClosing) Экспорт
	
	//номенклатура FA
	Если ТекСтрокаСопоставления.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA") ИЛИ ТекСтрокаСопоставления.Type = Справочники.ТипыНоменклатуры.НайтиПоНаименованию("FA unconv")  Тогда  //RGS - AKozhevnikova - RCA-0000352
		
		Если  Не ЗначениеЗаполнено(ТекСтрокаСопоставления.Номенклатура)  Тогда
			//Проверим, есть ли номенклатура с наименованием из поля ItemDescription справочника ПроводкаДеталейСКП
			//и при необходимости заведем ее.
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			
			ТекInvoiceLine = ТекСтрокаСопоставления.InvoiceLine;
			НаименованиеТовара = СокрЛП(ТекInvoiceLine.НаименованиеТовара);
			Catalog = ТекInvoiceLine.Каталог;		
			ЕдиницаИзмерения = ТекInvoiceLine.ЕдиницаИзмерения;
			
			//поиск номенклатуры по Каталогу
			Если Не ТекInvoiceLine.Каталог.Пустая() Тогда
				Catalog = ТекInvoiceLine.Каталог;
				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Catalog", Catalog);
			КонецЕсли; 
			
			//поиск номенклатуры по наименованию и единице измерения
			Если Номенклатура.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Наименование", НаименованиеТовара);
				Запрос.УстановитьПараметр("БазоваяЕдиницаИзмерения", ЕдиницаИзмерения.BasicUOM);
				Запрос.Текст = "ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Наименование ПОДОБНО &Наименование
				|	И Номенклатура.БазоваяЕдиницаИзмерения = &БазоваяЕдиницаИзмерения
				|	И (НЕ Номенклатура.ПометкаУдаления)";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Номенклатура = Выборка.Ссылка;
				КонецЦикла;
				
			КонецЕсли;     
			
			// создаем новую номенклатуру
			Если Номенклатура.Пустая() Тогда
				
				//создадим новую номенклатуру
				НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				НоваяНоменклатура.УстановитьНовыйКод();
				НоваяНоменклатура.Наименование			 = НаименованиеТовара;
				НоваяНоменклатура.НаименованиеENG		 = НаименованиеТовара;
				НоваяНоменклатура.НаименованиеПолное	 = ТекСтрокаСопоставления.Translation;
				НоваяНоменклатура.Тип					 = ТекСтрокаСопоставления.Type;
				НоваяНоменклатура.ТипУпр				 = ТекСтрокаСопоставления.Type;
				НоваяНоменклатура.СтавкаНДС              = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяСтавкаНДС");
				НоваяНоменклатура.Артикул    	         = ТекInvoiceLine.КодПоИнвойсу;
				НоваяНоменклатура.Catalog                = Catalog;
				Если НЕ ЕдиницаИзмерения = Неопределено Тогда
					НоваяНоменклатура.БазоваяЕдиницаИзмерения = ЕдиницаИзмерения.BasicUOM;
				КонецЕсли; 
				НоваяНоменклатура.Записать();
				Номенклатура = НоваяНоменклатура.Ссылка;
				
			КонецЕсли;
			ТекСтрокаСопоставления.Номенклатура = Номенклатура;
						
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекСтрокаСопоставления.Номенклатура) Тогда 
			ТекСтрокаСопоставления.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	 		     	
КонецПроцедуры

// проверки

Функция ЕстьДокументСТакимShipmentClosing(Ссылка, ShipmentСlosing) Экспорт 
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ShipmentСlosing", ShipmentСlosing);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаспределениеИмпортаПоЗакрытиюПоставки.Представление
	|ИЗ
	|	Документ.РаспределениеИмпортаПоЗакрытиюПоставки КАК РаспределениеИмпортаПоЗакрытиюПоставки
	|ГДЕ
	|	РаспределениеИмпортаПоЗакрытиюПоставки.ShipmentСlosing = &ShipmentСlosing
	|	И (НЕ РаспределениеИмпортаПоЗакрытиюПоставки.ПометкаУдаления)
	|	И (НЕ РаспределениеИмпортаПоЗакрытиюПоставки.Ссылка = &Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для документа " + ShipmentСlosing + " уже создан документ: 
		|" + Выборка.Представление + "." ,
		, ,,Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции
        
Функция ЕстьInvoiceLineTypeRentRANReplace(ТЗСтрокиИнвойса) Экспорт 
	
	//проверим на RentRANReplace
	СтрокаRentLoan = ТЗСтрокиИнвойса.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Rent/Loan"),"Type");
	//Добавила Федотова Л, РГ-Софт, 12.12.12, вопрос №SLI-0003055 ->
	СтрокаReturnFromLoan = ТЗСтрокиИнвойса.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Return from Loan"),"Type");
	//<-
	Если СтрокаRentLoan = Неопределено И СтрокаReturnFromLoan = Неопределено Тогда //добавила "И" Федотова Л, РГ-Софт, 12.12.12, вопрос №SLI-0003055
		
		СтрокаRAN = ТЗСтрокиИнвойса.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("RAN"),"Type");
		Если СтрокаRAN = Неопределено Тогда
			
			СтрокаReplace = ТЗСтрокиИнвойса.Найти(Справочники.ТипыНоменклатуры.НайтиПоНаименованию("Replace"),"Type");
			Возврат ?(СтрокаReplace = Неопределено, Ложь, Истина);
					
		Иначе 
			Возврат Истина;
		КонецЕсли;
		
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 