// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Получение представления для документа, удостоверяющего личность
//
// Параметры
//  ДокФизЛица  – Паспортные данные физ. лица
//
// Возвращаемое значение:
//   Строка   – Представление документа, удостоверяющего личность
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДокФизЛица) Экспорт

	Возврат Строка(ДокФизЛица.Вид) + " серия " +
			ДокФизЛица.Серия       + ", номер " +
			ДокФизЛица.Номер       + ", выданный " +
			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДокФизЛица.Выдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 

	КодыСчетов = Новый Структура("Дебет,Кредит");

	// Определяем код счета кредита
	КассаВВалюте = Ложь;
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;

	СчетКт = СчетКасса.Код;

	КодыСчетов.Кредит = СчетКт;

	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		Если КассаВВалюте Тогда
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентом.Код;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентом.Код;

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		ТабСчет = РасшифровкаПлатежа.Выгрузить();

		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");

		СтрокаДебет = "";

		Для Каждого Строка Из ТабСчет Цикл

			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И СтрНайти(СтрокаДебет,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;

			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И СтрНайти(СтрокаДебет,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;

		КонецЦикла;

		СтрокаДебет = Сред(СтрокаДебет,2);

	КонецЕсли;

	КодыСчетов.Дебет = СтрокаДебет;

	Возврат КодыСчетов;

КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Организация                   КАК ЮрФизЛицо,
	|	Организация                   КАК Руководители,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	СведенияОбОрганизации     = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
	Валютный                  = (НЕ Шапка.Валюта = мВалютаРегламентированногоУчета);

	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.Сумма				= Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2; ЧРД=-")+?(Валютный," "+СокрЛП(Шапка.Валюта),"");
	
	СуммаПрописью     = РаботаСДиалогами.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
	СуммаПрописьюПродолжение = "";
	Если СтрДлина(СуммаПрописью) > 92 Тогда
		н=92;
		Пока н > 0
			И Сред(СуммаПрописью,н,1) <> " " Цикл
			
			н = н-1;
		КонецЦикла;
		СуммаПрописьюПродолжение = Сред(СуммаПрописью, н+1);
		СуммаПрописью = Лев(СуммаПрописью, н);
	КонецЕсли;
	ОбластьМакета.Параметры.СуммаПрописью		= СуммаПрописью;
	ОбластьМакета.Параметры.СуммаПрописьюПродолжение = СуммаПрописьюПродолжение;
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО	= СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.НомерДокумента		= ОбщегоНазначения.ПолучитьНомерНаПечатьБезПрефикса(Шапка);
	Если Организация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация") Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = Организация.НаименованиеПлательщикаПриПеречисленииНалогов;
	КонецЕсли;

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.ДебетСубСчет		= КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.КредитСубСчет		= КодыСчетСубсчет.Кредит;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	Руководитель = Руководители.Руководитель;
	РуководительДолжность = Руководители.РуководительДолжность;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;

	ОбластьМакета.Параметры.Основание             = Шапка.Основание;
	ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;

	ТекстВыдать      = Шапка.Выдать;
	ТекстПоДокументу = Шапка.ПоДокументу;

	Если ТекстВыдать = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ТекстВыдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия  КАК Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя      КАК Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо=&ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда
				ТекстВыдать = ""+Результат.Фамилия+" "+Результат.Имя+" "+Результат.Отчество;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТекстПоДокументу = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) И ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	

		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокФизЛица) Тогда

			ТекстПоДокументу = ПолучитьПредставлениеДокументаФизЛица(ДокФизЛица);

		КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.ФИОПолучателя = ТекстВыдать;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РКО" Тогда
		
		ТабДокумент = ПечатьРКО();
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РКО","Расходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет по данным переданного физлица поля Выдать и По документу
//
// Параметры
//   СсылкаРаботник - СправочникСсылка.ФизическиеЛица, работник которому выдают з/пл
//                 или кассир-раздатчик
//
Процедура ЗаполнитьПоляВыдатьПоДокументу(СсылкаРаботник) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаРаботник);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ФИОФизическихЛицСрезПоследних.Имя + "" "" + ФИОФизическихЛицСрезПоследних.Отчество, ФизическиеЛица.Наименование) КАК ФИО,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &Ссылка) КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Ссылка) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ссылка";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Выдать = Выборка.ФИО;
		
		Если Выборка.ДокументВид <> NULL Тогда
		
			ПоДокументу = "" + Выборка.ДокументВид 
			+ ", серия: " + Выборка.ДокументСерия + ", № " + Выборка.ДокументНомер 
			+ ", выдан: " + Формат(Выборка.ДокументДатаВыдачи,"ДФ='дд ММММ гггг';ДП='Не указано'") + " года, " 
			+ Выборка.ДокументКемВыдан; 
			
		Иначе
			ПоДокументу = ""
		КонецЕсли; 
		
	Иначе
		Выдать = "";
		ПоДокументу = "";
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьПоляВыдатьПоДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

//// Пересчитывает сумму НДС
////
//// Параметры:
////  Нет.
////
//Процедура SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

//КонецПроцедуры // SalesBook.ПересчитатьСуммуНДС()

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКО()

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;

			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;

			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;

		КонецЦикла;

		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли

		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			   И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;

			SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж);

		КонецЦикла;

		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе

		ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;

	КассаВВалюте = Ложь;
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;

	Если КассаВВалюте Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;

	СчетКт = СтруктураШапкиДокумента.СчетКасса;

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетКт);
		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,"Расчеты по кредитам и займам",""))=Ложь тогда
			Возврат;
		КонецЕсли;

	Иначе
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Проводка.Содержание = "Выдача средств подотчетнику";
			
			Если КассаВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			
			Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.Контрагент;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			Проводка.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств,"Инкассация денежных средств","Прочие расходы");
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.БанковскиеСчета               = СтруктураШапкиДокумента.СчетОрганизации;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		Если КассаВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			ВалютаРег       = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			КурсДокумента, ДанныеОВалюте.Курс, 
			КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			
		Иначе
			Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			//Проводка по налоговому учету для прочего расхода
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУ) тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период     = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Содержание = "Прочее списание денежных средств";
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетУчетаНУ;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1НУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2НУ);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3НУ);
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Контрагент);
				ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ДоговорКонтрагента);	
				
				ПроводкаНУ.Сумма = Проводка.Сумма;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок,СтруктураШапкиДокумента)

	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("СчетКасса","Не указан счет учета денежных средств.");
	 
	Если СчетКасса.Валютный Тогда
		СтруктураОбязательныхПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
	 
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
		СтруктураОбязательныхПолей.Вставить("СчетОрганизации","Не указан банковский счет организации");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверяем заполнение табличной части 
	Если (ЕстьРасчетыСКонтрагентами) ИЛИ (ЕстьРасчетыПоКредитам) Тогда

		СтруктураПолей = Новый Структура();

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДоговорКонтрагента");

		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			БухгалтерскийУчет.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
		                                                           Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);

		КонецЦикла;

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан подотчетник.",Отказ,Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	/// Заполним реквизиты из стандартного набора по документу основанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	//в базе нет документа ЗарплатаКВыплатеОрганизаций  РГ-Софт - Петроченко
	
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
	//	Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
	//		Сообщить("Платежная ведомость оформлена на перечисление в банк.");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	#Если Клиент Тогда
	Дата = РабочаяДата;
	#КонецЕсли
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	//добавлено для 8.2  РГ-Софт - Петроченко
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") или //12.09.2012 Пахоменков закомментированные доки отсутствуют в конфе 
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеАвансовогоОтчета") 
		 Тогда
	//добавлено для 8.2  РГ-Софт - Петроченко	
	      	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетКасса) Тогда
		СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеАвансовогоОтчета") Тогда
		ВидОперации  = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		ТабЧасть = Основание.Проводки;
		Для Каждого СтрокаТаблица Из ТабЧасть Цикл
			 Контрагент = СтрокаТаблица.Сотрудник; 
			 СуммаДокумента = СтрокаТаблица.Сумма;
			 //НоваяСтрока = РасшифровкаПлатежа.Добавить();
			 //НоваяСтрока.СуммаПлатежа = СтрокаТаблица.Сумма;
		КонецЦикла;
	ИначеЕсли ВидДокументаОснования = "ПоступлениеТоваровУслуг"
	 или ВидДокументаОснования = "ПоступлениеДопРасходов" 
	 или ВидДокументаОснования = "ПоступлениеНМА"
	 или ВидДокументаОснования = "ОтчетКомиссионераОПродажах"
	 или ВидДокументаОснования = "ОтчетКомитентуОПродажах"                               
	 или ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
	 
	 	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Иначе
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 

		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах"тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаВознаграждения;
			СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
			Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли; 
			
		Иначе
			СуммаДокументаОснования = Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				Если ПараметрыДокументаОснования.УдержатьВознаграждение Тогда 
					СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - ПараметрыДокументаОснования.СуммаВознаграждения;
					НоваяКолонкаСумм = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаСумм = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли; 
					
					Если Не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если не НоваяКолонкаНДС = Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокументаОснования.ДоговорКонтрагента.УчетАгентскогоНДС И Основание.Дата >= '20060101000000' Тогда
					СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаНДС = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
					КонецЕсли; 
				КонецЕсли;
			ИначеЕсли ВидДокументаОснования = "ПоступлениеДопРасходов" тогда
				Если Не(ПараметрыДокументаОснования.Сумма=0 и ПараметрыДокументаОснования.СуммаНДС=0)  тогда
					Если СуммаДокументаОснования.Количество()=0 тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
					Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+ПараметрыДокументаОснования.СуммаНДС;
					КонецЕсли; 
				КонецЕсли;
				СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС = 0;
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 

		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
			Если ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовСКонтрагентом") ;
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовСКомитентом, "СчетУчетаРасчетовСКонтрагентом") ;
			КонецЕсли;
			ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"),"СчетУчетаРасчетовПоАвансам");
				
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКО();

	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли; 

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");

	Если Выдать = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо=&ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);

			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Если ПоДокументу = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) 
	   И ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);

		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДокФизЛица) Тогда

			ПоДокументу = ПолучитьПредставлениеДокументаФизЛица(ДокФизЛица);

		КонецЕсли;

	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	КурсДокумента        = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента   = СтруктураШапкиДокумента.КратностьДокумента;

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда

		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры


//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
