
Перем ТаблицаСтрокInventoryПоступления Экспорт;
Перем ТаблицаСтрокБазы;


////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// { RGS LFedotova 24.04.2018 18:21:46 - вопрос SLI-0007547
	СуммаДокумента = Goods.Итог("FiscalSum");
	// } RGS LFedotova 24.04.2018 18:22:17 - вопрос SLI-0007547
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	// Заполняем TaxRegistration
	МассивAU = Goods.ВыгрузитьКолонку("AU");
	//Изменила Федотова Л., РГ-Софт, 18.07.14, вопрос SLI-0004755
	//ЭтотОбъект.TaxRegistration = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда
		ЭтотОбъект.TaxRegistration = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	КонецЕсли;

	// Дозаполним реквизиты
	ОбщегоНазначения.УстановитьЗначение(PONumber, СокрЛП(PONumber));
	
	//Reference
	Если Не ЗначениеЗаполнено(Reference) Тогда
		Reference = PONumber;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Responsible) Тогда
		Responsible = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	ОбщегоНазначения.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(CreationDate) Тогда
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(LastModified) Тогда
		LastModified = ТекущаяДата();
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(HasFinishedGoods, Goods.Найти(Истина, "FinishedGood") <> Неопределено);
	
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи);
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьУникальностьНомера(СтруктураРезультатов.ПоступленияСТакимЖеНомером, Отказ);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьЗаполнениеШапки(Отказ);
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураРезультатов.GoodsProps, СтруктураРезультатов.UOMsProps, Отказ);
							
	КонецЕсли;
	                                                                                                                         
КонецПроцедуры

Функция ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	Если НЕ ОбменДанными.Загрузка
		И НЕ ПометкаУдаления Тогда
		
		// Проверка уникальности номера
		СтруктураПараметров.Вставить("Номер", Номер);
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураТекстов.Вставить("ПоступленияСТакимЖеНомером", 
			"ВЫБРАТЬ
			|	Таблица.Представление
			|ИЗ
			|	Документ.InventoryПоступление КАК Таблица
			|ГДЕ
			|	Таблица.Номер = &Номер
			|	И Таблица.Ссылка <> &Ссылка
			|	И (НЕ Таблица.ПометкаУдаления)");
				
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// Реквизиты Goods
			СтруктураПараметров.Вставить("Goods", Goods.ВыгрузитьКолонку("Good"));
			СтруктураТекстов.Вставить("GoodsProps",
				"ВЫБРАТЬ
				|	InventoryGoods.Ссылка,
				|	InventoryGoods.StandardUOM,
				|	InventoryGoods.ПометкаУдаления
				|ИЗ
				|	Справочник.InventoryGoods КАК InventoryGoods
				|ГДЕ
				|	InventoryGoods.Ссылка В(&Goods)");
				
			// Реквизиты UOMs
			СтруктураПараметров.Вставить("UOMs", Goods.ВыгрузитьКолонку("UOM"));
			СтруктураТекстов.Вставить("UOMsProps",
				"ВЫБРАТЬ
				|	UOMs.Ссылка,
				|	UOMs.StandardUOM,
				|	UOMs.ПометкаУдаления
				|ИЗ
				|	Справочник.UOMs КАК UOMs
				|ГДЕ
				|	UOMs.Ссылка В(&UOMs)");
			
		КонецЕсли;
			
	КонецЕсли;
 		
	Возврат РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
КонецФункции

Процедура ПроверитьУникальностьНомера(РезультатПоступленийСТакимЖеНомером, Отказ)
			
	Выборка = РезультатПоступленийСТакимЖеНомером.Выбрать();
	Пока Выборка.Следующий() Цикл		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не уникальный номер! Номер используется в """ + Выборка.Представление + """",
			ЭтотОбъект, "Номер", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""No."" не заполнено!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Date"" не заполнено!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(InventoryLocation) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Inventory location"" не заполнено!",
			ЭтотОбъект, "InventoryLocation", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(PONumber) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""PO number"" не заполнено!",
			ЭтотОбъект, "PONumber", , Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(TaxRegistration) Тогда   //SLI-0004537
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Tax registration"" не заполнено!",
			ЭтотОбъект, "TaxRegistration", , Отказ);
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(PO) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Поле ""PO"" не заполнено!",
	//		ЭтотОбъект, "PO");
	//КонецЕсли;	
	
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(РезультатGoodsProps, РезультатUOMsProps, Отказ)
	
	GoodsProps = РезультатGoodsProps.Выгрузить();
	GoodsProps.Индексы.Добавить("Ссылка");
	
	UOMsProps = РезультатUOMsProps.Выгрузить();
	UOMsProps.Индексы.Добавить("Ссылка");
	
	// А КАК ПРИВЯЗАТЬ К ЭЛЕМЕНТАМ УПРАВЛЕНИЯ?
	Для каждого Стр ИЗ Goods Цикл
		
		GoodProps = Неопределено;
		UOMProps = Неопределено;
		
		Если ЗначениеЗаполнено(Стр.Good) Тогда
			
			GoodProps = GoodsProps.Найти(Стр.Good, "Ссылка");
			Если GoodProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.Код + """ табличной части ""Goods"": указан помеченный на удаление Good!",
					ЭтотОбъект, , , Отказ);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(GoodProps.StandardUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": у Good не заполнена Standard UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Good"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.UOM) Тогда
			
			UOMProps = UOMsProps.Найти(Стр.UOM, "Ссылка");
			Если UOMProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченная на удаление UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
			КонецЕсли;
			
			Если GoodProps <> Неопределено
				И GoodProps.StandardUOM.StandardUOM <> UOMProps.StandardUOM Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": Good standard UOM (" + GoodProps.StandardUOM + ") не соответствует UOM standard UOM (" + UOMProps.StandardUOM + ")!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""UOM"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Стр.Quantity) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Qty"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Quantity", , Отказ);
		КонецЕсли;
		
		Если Стр.FinishedGood И НЕ ЗначениеЗаполнено(Стр.FinishedGoodPONumber) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Finished good PO num."" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].FinishedGood", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТКА ПРОВЕДЕНИЯ

Процедура ОбработкаПроведения(Отказ, Режим)
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поступление", Ссылка);	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	InventoryПоступлениеGoods.Good КАК Good,
		|	InventoryПоступлениеGoods.FinishedGood КАК FinishedGood,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryПоступлениеGoods.UOM = InventoryПоступлениеGoods.Good.StandardUOM
		|				ТОГДА InventoryПоступлениеGoods.Quantity
		|			ИНАЧЕ InventoryПоступлениеGoods.Quantity * InventoryПоступлениеGoods.UOM.ConversionFactor / InventoryПоступлениеGoods.UOM.ConversionFactor
		|		КОНЕЦ) КАК Quantity,
		|	СУММА(InventoryПоступлениеGoods.FiscalSum) КАК FiscalSum,
		|	InventoryПоступлениеGoods.AU КАК AU
		|ИЗ
		|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|ГДЕ
		|	(НЕ InventoryПоступлениеGoods.Ссылка.ПометкаУдаления)
		|	И InventoryПоступлениеGoods.Ссылка = &Поступление
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryПоступлениеGoods.Good,
		|	InventoryПоступлениеGoods.FinishedGood,
		|	InventoryПоступлениеGoods.AU";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = Движения.InventoryBatches;
	НаборДвижений.Записывать = Истина;
	Пока Выборка.Следующий() Цикл
		
		Движение = НаборДвижений.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Company = Company;
		Движение.InventoryLocation = InventoryLocation;
		Движение.Good = Выборка.Good;
		Движение.AU = Выборка.AU;
		Движение.TaxRegistration = TaxRegistration;    //SLI-0004537
		Движение.FinishedGood = Выборка.FinishedGood;
		Движение.Batch = Ссылка;
		Движение.Quantity = Выборка.Quantity;
		Движение.Sum = Выборка.FiscalSum;
		
	КонецЦикла;
	
	// Inventory tangible assets costs
	
	Документы.InventoryПоступление.СформироватьПриходInventoryTangibleAssetsCosts(Ссылка, Дата);
			
КонецПроцедуры


