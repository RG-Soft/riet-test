
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначения.УстановитьЗначение(ТекущийОбъект.Responsible, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.LastModified = ТекущаяДата();
	ТекущийОбъект.ТаблицаСтрокInventoryПоступления = Строки;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ

&НаКлиенте
Процедура PONumberПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.PONumber)
		И НЕ ЗначениеЗаполнено(Объект.PO) Тогда
		
		Объект.PO = CustomsСервер.НайтиPOПоНомеру(Объект.PONumber);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура POНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.PONumber) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОтбора = Новый Структура;
		
		PONumberДляОтбора = CustomsКлиентСервер.ПолучитьНомерPOДляПоиска(Объект.PONumber);
		ПараметрыОтбора.Вставить("Код", PONumberДляОтбора);	
		
		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);			              	              	
		ОткрытьФорму("Справочник.ЗаявкиНаЗакупку.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА СТРОК INVENTORY ПОСТУПЛЕНИЙ

&НаКлиенте
Процедура GoodsQuantityПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	ТекущиеДанные.FiscalSum = ТекущиеДанные.Quantity * ТекущиеДанные.FiscalPrice;
	ТекущиеДанные.ManagementSum = ТекущиеДанные.Quantity * ТекущиеДанные.ManagementPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsFiscalPriceПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	ТекущиеДанные.FiscalSum = ТекущиеДанные.Quantity * ТекущиеДанные.FiscalPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsFiscalSumПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Quantity) Тогда
		ТекущиеДанные.FiscalPrice = ТекущиеДанные.FiscalSum / ТекущиеДанные.Quantity;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsManagementPriceПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	ТекущиеДанные.ManagementSum = ТекущиеДанные.Quantity * ТекущиеДанные.ManagementPrice;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsManagementSumПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Quantity) Тогда
		ТекущиеДанные.ManagementPrice = ТекущиеДанные.ManagementSum / ТекущиеДанные.Quantity;
	КонецЕсли;
 
КонецПроцедуры

// PO line

&НаКлиенте
Процедура ЗаполнитьПустыеPOLines(Команда)
	
	Если ЗначениеЗаполнено(Объект.PO) Тогда
		ЗаполнитьПустыеPOLinesНаСервере();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""PO"" не заполнено!",
			Объект.Ссылка, "PO");
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеPOLinesНаСервере()
	
	Для Каждого Стр Из Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.POLine) Тогда
			
			POLine = Документы.InventoryПоступление.ЗаполнитьПустуюPOLine(Объект.PO, Стр.Good);
			Если ТипЗнч(POLine) = Тип("Строка") Тогда
				
				ИндексСтр = Строки.Индекс(Стр);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке №" + (ИндексСтр+1) + ": " + POLine, 
					,,"Строки[" + ИндексСтр + "].POLine");
				
			Иначе
				
				Стр.POLine = POLine;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
        	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиPOLineНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.PO) Тогда
		ПараметрыОтбора.Вставить("Владелец", Объект.PO);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Good) Тогда
		ПараметрыОтбора.Вставить("КодПоставщика", ПолучитьGoodКод(ТекущиеДанные.Good));
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);			              	              	
	ОткрытьФорму("Справочник.СтрокиЗаявкиНаЗакупку.ФормаВыбора", ПараметрыФормы, Элемент);
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьGoodКод(Good)
			
	Возврат СокрЛП(Good.Код);
	
КонецФункции

&НаКлиенте
Процедура СтрокиPOLineПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	
	ТекущиеДанные.FiscalPrice = 0;
	ТекущиеДанные.FiscalSum = 0;

КонецПроцедуры

/////////////////////////////////////////
&НаКлиенте
Процедура ЗаполнитьСуммыПоПокупнойСтоимости(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.PO) Тогда
	    Сообщить("Сначала нужно указать PO!");
		Возврат;	
	КонецЕсли;  
	
	ЕстьЗаполненные = Ложь;
	Для каждого СтрокаТЧ из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.FiscalPrice) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.FiscalSum) Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаполненные И Вопрос("При заполнении колонки fiscal price и fiscal sum будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТЧ Из Строки Цикл
		//добавила Федотова Л. по заданию Трефиленкова Д., РГ-Софт, 15.04.11
		Если СтрокаТЧ.Quantity < 0 Тогда
			Продолжить;	
		КонецЕсли; 

		ТаблицаИнвойсов = ОпределитьСуммуПоПокупнойСтоимости(СтрокаТЧ.Good.Код, Объект.PO, СтрокаТЧ.UOM);
		Если ТаблицаИнвойсов.Количество() = 0 Тогда
			Сообщить("Не удалось определить сумму по товару "+СтрокаТЧ.Good.Код+", РО "+Объект.PO+"!");
		ИначеЕсли ТаблицаИнвойсов.Количество() = 1 Тогда
			СтрокаТЧ.FiscalPrice = ТаблицаИнвойсов[0].Сумма;
			СтрокаТЧ.FiscalSum = ТаблицаИнвойсов[0].Сумма * СтрокаТЧ.Quantity;
		Иначе
			//ТаблицаИнвойсов.
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСуммуПоПокупнойСтоимости(КодТовара, ЗаявкаНаЗакупку, UOM)
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос1.СтрокаИнвойсаЕдиницаИзмерения = &UOM
	               |			ТОГДА ВложенныйЗапрос1.Сумма
	               |		ИНАЧЕ ВложенныйЗапрос1.Сумма * ВложенныйЗапрос1.СтрокаИнвойсаЕдиницаИзмерения.ConversionFactor / &ConversionFactor
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ВложенныйЗапрос.Количество = 0
	               |				ТОГДА ВложенныйЗапрос.Сумма
	               |			ИНАЧЕ ВложенныйЗапрос.Сумма / ВложенныйЗапрос.Количество
	               |		КОНЕЦ КАК Сумма,
	               |		ВложенныйЗапрос.СтрокаИнвойсаЕдиницаИзмерения КАК СтрокаИнвойсаЕдиницаИзмерения
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ВложенныйЗапрос.PO КАК PO,
	               |			СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	               |			ВложенныйЗапрос.Код КАК Код,
	               |			СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |			ВложенныйЗапрос.СтрокаИнвойсаЕдиницаИзмерения КАК СтрокаИнвойсаЕдиницаИзмерения
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				InvoiceLinesCostsОбороты.СтрокаИнвойса.СтрокаЗаявкиНаЗакупку.Владелец КАК PO,
	               |				InvoiceLinesCostsОбороты.СуммаФискальнаяОборот КАК Сумма,
	               |				InvoiceLinesCostsОбороты.СтрокаИнвойса.КодПоИнвойсу КАК Код,
	               |				ВЫБОР
	               |					КОГДА InvoiceLinesCostsОбороты.ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсСуммаСтрокиИнвойса)
	               |						ТОГДА InvoiceLinesCostsОбороты.СтрокаИнвойса.Количество
	               |					ИНАЧЕ 0
	               |				КОНЕЦ КАК Количество,
	               |				InvoiceLinesCostsОбороты.СтрокаИнвойса.ЕдиницаИзмерения КАК СтрокаИнвойсаЕдиницаИзмерения
	               |			ИЗ
	               |				РегистрНакопления.InvoiceLinesCosts.Обороты(, , , (НЕ ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняНДС))) КАК InvoiceLinesCostsОбороты) КАК ВложенныйЗапрос
	               |		ГДЕ
	               |			ВложенныйЗапрос.PO = &PO
	               |			И ВложенныйЗапрос.Код = &Код
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВложенныйЗапрос.PO,
	               |			ВложенныйЗапрос.Код,
	               |			ВложенныйЗапрос.СтрокаИнвойсаЕдиницаИзмерения) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос1";
	Запрос.УстановитьПараметр("PO", ЗаявкаНаЗакупку);
	Запрос.УстановитьПараметр("Код", КодТовара);
	Запрос.УстановитьПараметр("UOM", UOM);
	Запрос.УстановитьПараметр("ConversionFactor", UOM.ConversionFactor);
	
	Результат = Запрос.Выполнить();
	ТаблицаИнвойсов = Результат.Выгрузить();
    Возврат ТаблицаИнвойсов;
	
КонецФункции // ()

&НаКлиенте
Процедура СтрокиFiscalPriceНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Строки.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("PO", Объект.PO);
	ПараметрыФормы.Вставить("UOM", ТекущиеДанные.UOM);
	ПараметрыФормы.Вставить("Good", ТекущиеДанные.Good);
	
	ОткрытьФормуМодально("Документ.InventoryПоступление.Форма.ФормаВыбораИнвойса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

//Inventory tangible assets costs

&НаКлиенте
Процедура ЗаполнитьСуммыИзРаспределенияМА(Команда)
	
	ЕстьЗаполненные = Ложь;
	Для каждого СтрокаТЧ из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.FiscalSum) Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаполненные И 
		Вопрос("Заполненные значения в колонке fiscal sum могут быть изменены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСуммыИзРаспределенияМАНаСервере();
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыИзРаспределенияМАНаСервере()
	
	Документы.InventoryПоступление.СформироватьПриходInventoryTangibleAssetsCosts(Объект.Ссылка, Объект.Дата);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК Проводка,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Описание,
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.PoNumber
	               |ПОМЕСТИТЬ ВТСправочникПроводки
	               |ИЗ
	               |	Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок КАК ПроводкиDSSДеталейСчетовКнигиПокупок
	               |ГДЕ
	               |	ПроводкиDSSДеталейСчетовКнигиПокупок.Документ = &Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryTangibleAssetsCostsОстатки.FiscalSumОстаток КАК FiscalSum,
	               |	InventoryTangibleAssetsCostsОстатки.ManagementSumОстаток КАК ManagementSum,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Описание КАК ItemCode,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.PoNumber КАК PoNumber,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.AU КАК AU,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.InventoryTangibleAssetsCosts.Остатки(
	               |			,
	               |			ПроводкаДеталейСКП В
	               |				(ВЫБРАТЬ
	               |					ВТСправочникПроводки.Проводка
	               |				ИЗ
	               |					ВТСправочникПроводки)) КАК InventoryTangibleAssetsCostsОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП,
	               |	InventoryTangibleAssetsCostsОстатки.FiscalSumОстаток КАК FiscalSum,
	               |	InventoryTangibleAssetsCostsОстатки.ManagementSumОстаток КАК ManagementSum,
	               |	InventoryTangibleAssetsCostsОстатки.ПроводкаДеталейСКП.Описание КАК ItemCode
	               |ИЗ
	               |	РегистрНакопления.InventoryTangibleAssetsCosts.Остатки(
	               |			,
	               |			ПроводкаДеталейСКП.System = ""AP""
	               |				И ПроводкаДеталейСКП В
	               |					(ВЫБРАТЬ
	               |						ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка КАК Проводка
	               |					ИЗ
	               |						Справочник.ПроводкиDSSДеталейСчетовКнигиПокупок КАК ПроводкиDSSДеталейСчетовКнигиПокупок ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСправочникПроводки
	               |							ПО
	               |								ПроводкиDSSДеталейСчетовКнигиПокупок.PoNumber = ВТСправочникПроводки.PoNumber
	               |									И ПроводкиDSSДеталейСчетовКнигиПокупок.Описание = ВТСправочникПроводки.Описание
	               |									И ПроводкиDSSДеталейСчетовКнигиПокупок.Ссылка <> ВТСправочникПроводки.Проводка)) КАК InventoryTangibleAssetsCostsОстатки";
		
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаТекДок = Результат[1].Выбрать();
    ВыборкаТекДокСКП = Результат[2].Выгрузить();
	
	СтруктураItemCode = Новый Структура("ItemCode");
			
	Пока ВыборкаТекДок.Следующий() Цикл
		
		СтруктураItemCode.Вставить("ItemCode", ВыборкаТекДок.ItemCode);
	    ЗначениеFiscalSum = Документы.InventoryПоступление.ПолучитьFiscalSumПоДокументуInventoryПартия(
		                                                   ВыборкаТекДокСКП.НайтиСтроки(СтруктураItemCode), ВыборкаТекДок);
				
		Если ТипЗнч(ЗначениеFiscalSum) = Тип("Строка") Тогда  
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗначениеFiscalSum);
		иначе
			//в ТЧ подставляем FiscalSum
			ПараметрыОтбора = Новый Структура("Good");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	InventoryGoods.Ссылка
			|ИЗ
			|	Справочник.InventoryGoods КАК InventoryGoods
			|ГДЕ
			|	InventoryGoods.Код = &Код";
			
			Запрос.УстановитьПараметр("Код", ВыборкаТекДок.ItemCode);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
			    ПараметрыОтбора.Вставить("Good", Выборка.Ссылка);
 			КонецЦикла;
			
			СтрокаТЧ = Строки.НайтиСтроки(ПараметрыОтбора);
			Если СтрокаТЧ.Количество() > 0  Тогда 
				 СтрокаТЧ[0].FiscalSum = ЗначениеFiscalSum;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	       	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьFiscalPriceПоОснованию(Команда)
	
	ЗаполнитьFiscalPriceПоОснованиюНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьFiscalPriceПоОснованиюНаСервере()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryСписаниеGoods.Good,
		|	InventoryСписаниеGoods.ManagementPrice
		|ИЗ
		|	Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
		|ГДЕ
		|	InventoryСписаниеGoods.Ссылка = &ДокументОснование";	

	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	ПараметрыОтбора = Новый Структура("Good");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыОтбора.Good = ВыборкаДетальныеЗаписи.Good;
		НайденныеСтроки = Объект.Goods.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из НайденныеСтроки Цикл
			
		     Строка.FiscalPrice = ВыборкаДетальныеЗаписи.ManagementPrice;
			 Строка.FiscalSum = Строка.Quantity * Строка.FiscalPrice;
			 
		КонецЦикла; 
		 
	КонецЦикла;
	
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура СтрокиAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Строки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.AU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиAUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиAUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры
//<- RG-Soft VIvanov

 // { RGS MYurkevich 9/30/2015 10:23:20 AM -  RCA-0000104
&НаСервере
Процедура ЗаполнитьСуммыТКШНаСервере()
	
	// { RGS LFedotova 26.09.2016 21:10:12 - вопрос SLI-0006814
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryПоступлениеGoods.Ссылка КАК InventoryПоступление,
		|	InventoryПоступлениеGoods.НомерИнвойса
		|ПОМЕСТИТЬ ТабИнвенториПоступление
		|ИЗ
		|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг КАК ПТИУ,
		|	СчетКнигиПокупокСуммы.Ссылка КАК СКП,
		|	СчетКнигиПокупокСуммы.НомерСтроки КАК НомерСтроки,
		|	СчетКнигиПокупокСуммы.Ссылка.НомерВходящегоДокумента
		|ПОМЕСТИТЬ ТабСчетКнигиПокупок
		|ИЗ
		|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
		|ГДЕ
		|	СчетКнигиПокупокСуммы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -1) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)
		|	И НЕ СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабИнвенториПоступление.InventoryПоступление КАК InventoryПоступление,
		|	ТабСчетКнигиПокупок.СКП КАК СКП,
		|	ТабСчетКнигиПокупок.ПТИУ КАК ПТИУ,
		|	ТабСчетКнигиПокупок.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Доки
		|ИЗ
		|	ТабИнвенториПоступление КАК ТабИнвенториПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСчетКнигиПокупок КАК ТабСчетКнигиПокупок
		|		ПО ТабИнвенториПоступление.НомерИнвойса = ТабСчетКнигиПокупок.НомерВходящегоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 3, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 2)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 4, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 3)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 5, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 4)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 6, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 5)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 7, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 6)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 8, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 7)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 9, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 8)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 10, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 9)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 11, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 10)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 12, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 11)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 13, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 12)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 14, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 13)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 15, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 14)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 16, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 15)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 17, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 16)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 18, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 17)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 19, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 18)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 20, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 19)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 21, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 20)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 22, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 21)
		|		ИНАЧЕ ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул
		|	КОНЕЦ КАК НоменклатураПоставщикаАртикул,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.НомерPO,
		|	Доки.InventoryПоступление,
		|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		|	Доки.НомерСтроки
		|ПОМЕСТИТЬ ВТ_ТЧПоступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Доки КАК Доки
		|		ПО ПоступлениеТоваровУслугТовары.Ссылка = Доки.ПТИУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка,
		|	ПоступлениеТоваровУслугУслуги.НоменклатураПоставщика.Артикул,
		|	ПоступлениеТоваровУслугУслуги.Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма,
		|	ПоступлениеТоваровУслугУслуги.НомерPO,
		|	Доки.InventoryПоступление,
		|	ПоступлениеТоваровУслугУслуги.ЕдиницаИзмерения,
		|	Доки.НомерСтроки
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Доки КАК Доки
		|		ПО ПоступлениеТоваровУслугУслуги.Ссылка = Доки.ПТИУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|					ИЛИ ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity
		|				ТОГДА ВТ_ТЧПоступление.Цена
		|			ИНАЧЕ ВТ_ТЧПоступление.Цена * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|		КОНЕЦ) КАК FiscalPrice,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|					ИЛИ ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity
		|				ТОГДА ВТ_ТЧПоступление.Сумма
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТ_ТЧПоступление.ЕдиницаИзмерения = InventoryПоступлениеGoods.UOM.BasicUOM
		|						ТОГДА ВТ_ТЧПоступление.Цена * InventoryПоступлениеGoods.Quantity
		|					ИНАЧЕ ВТ_ТЧПоступление.Цена * InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|				КОНЕЦ
		|		КОНЕЦ) КАК FiscalSum,
		|	InventoryПоступлениеGoods.НомерСтроки,
		|	InventoryПоступлениеGoods.UOM,
		|	ВТ_ТЧПоступление.ЕдиницаИзмерения,
		|	InventoryПоступлениеGoods.Good.Catalog.Код
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	ВТ_ТЧПоступление КАК ВТ_ТЧПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|		ПО (ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""0"" + InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""00"" + InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""000"" + InventoryПоступлениеGoods.Good.Код)
		|			И ВТ_ТЧПоступление.InventoryПоступление = InventoryПоступлениеGoods.Ссылка
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryПоступлениеGoods.НомерСтроки,
		|	InventoryПоступлениеGoods.UOM,
		|	InventoryПоступлениеGoods.Good.Catalog.Код,
		|	ВТ_ТЧПоступление.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_Итог.FiscalPrice) КАК FiscalPrice,
		|	СУММА(ВТ_Итог.FiscalSum) КАК FiscalSum,
		|	ВТ_Итог.НомерСтроки,
		|	ВТ_Итог.UOM,
		|	ВТ_Итог.ЕдиницаИзмерения
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Итог.НомерСтроки,
		|	ВТ_Итог.UOM,
		|	ВТ_Итог.ЕдиницаИзмерения,
		|	ВТ_Итог.GoodCatalogКод";
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryПоступлениеGoods.Ссылка КАК InventoryПоступление,
		|	InventoryПоступлениеGoods.НомерИнвойса
		|ИЗ
		|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка";	
		
	Запрос1.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса1 = Запрос1.Выполнить().Выгрузить();	
	
	Для каждого Строка Из РезультатЗапроса1 Цикл
		Строка.НомерИнвойса = Прав(СокрЛП(Строка.НомерИнвойса),8);
	КонецЦикла;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг КАК ПТИУ,
		|	СчетКнигиПокупокСуммы.Ссылка КАК СКП,
		|	СчетКнигиПокупокСуммы.НомерСтроки КАК НомерСтроки,
		|	СчетКнигиПокупокСуммы.Ссылка.НомерВходящегоДокумента
		|ИЗ
		|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
		|ГДЕ
		|	СчетКнигиПокупокСуммы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -1) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)
		|	И НЕ СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)";
		
	Запрос2.УстановитьПараметр("Дата", Объект.Ссылка.Дата);
	РезультатЗапроса2 = Запрос2.Выполнить().Выгрузить();
	
	Для каждого Строка Из РезультатЗапроса2 Цикл
		Строка.НомерВходящегоДокумента = Прав(СокрЛП(Строка.НомерВходящегоДокумента),8);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РезультатЗапроса1",РезультатЗапроса1);
	Запрос.УстановитьПараметр("РезультатЗапроса2",РезультатЗапроса2);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатЗапроса1.InventoryПоступление,
		|	РезультатЗапроса1.НомерИнвойса
		|ПОМЕСТИТЬ ТабИнвенториПоступление
		|ИЗ
		|	&РезультатЗапроса1 КАК РезультатЗапроса1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатЗапроса2.ПТИУ,
		|	РезультатЗапроса2.НомерВходящегоДокумента,
		|	РезультатЗапроса2.СКП,
		|	РезультатЗапроса2.НомерСтроки
		|ПОМЕСТИТЬ ТабСчетКнигиПокупок
		|ИЗ
		|	&РезультатЗапроса2 КАК РезультатЗапроса2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабИнвенториПоступление.InventoryПоступление КАК InventoryПоступление,
		|	ТабСчетКнигиПокупок.СКП КАК СКП,
		|	ТабСчетКнигиПокупок.ПТИУ КАК ПТИУ,
		|	ТабСчетКнигиПокупок.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Доки
		|ИЗ
		|	ТабИнвенториПоступление КАК ТабИнвенториПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСчетКнигиПокупок КАК ТабСчетКнигиПокупок
		|		ПО ТабИнвенториПоступление.НомерИнвойса = ТабСчетКнигиПокупок.НомерВходящегоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 3, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 2)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 4, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 3)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 5, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 4)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 6, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 5)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 7, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 6)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 8, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 7)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 9, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 8)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 10, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 9)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 11, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 10)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 12, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 11)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 13, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 12)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 14, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 13)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 15, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 14)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 16, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 15)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 17, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 16)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 18, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 17)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 19, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 18)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 20, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 19)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 21, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 20)
		|		КОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 22, 1) = "";""
		|			ТОГДА ПОДСТРОКА(ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул, 1, 21)
		|		ИНАЧЕ ПоступлениеТоваровУслугТовары.НоменклатураПоставщика.Артикул
		|	КОНЕЦ КАК НоменклатураПоставщикаАртикул,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Сумма,
		|	ПоступлениеТоваровУслугТовары.НомерPO,
		|	Доки.InventoryПоступление,
		|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		|	Доки.НомерСтроки
		|ПОМЕСТИТЬ ВТ_ТЧПоступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Доки КАК Доки
		|		ПО ПоступлениеТоваровУслугТовары.Ссылка = Доки.ПТИУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка,
		|	ПоступлениеТоваровУслугУслуги.НоменклатураПоставщика.Артикул,
		|	ПоступлениеТоваровУслугУслуги.Количество,
		|	ПоступлениеТоваровУслугУслуги.Цена,
		|	ПоступлениеТоваровУслугУслуги.Сумма,
		|	ПоступлениеТоваровУслугУслуги.НомерPO,
		|	Доки.InventoryПоступление,
		|	ПоступлениеТоваровУслугУслуги.ЕдиницаИзмерения,
		|	Доки.НомерСтроки
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Доки КАК Доки
		|		ПО ПоступлениеТоваровУслугУслуги.Ссылка = Доки.ПТИУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|					ИЛИ ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity
		|				ТОГДА ВТ_ТЧПоступление.Цена
		|			ИНАЧЕ ВТ_ТЧПоступление.Цена * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|		КОНЕЦ) КАК FiscalPrice,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|					ИЛИ ВТ_ТЧПоступление.Количество = InventoryПоступлениеGoods.Quantity
		|				ТОГДА ВТ_ТЧПоступление.Сумма
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТ_ТЧПоступление.ЕдиницаИзмерения = InventoryПоступлениеGoods.UOM.BasicUOM
		|						ТОГДА ВТ_ТЧПоступление.Цена * InventoryПоступлениеGoods.Quantity
		|					ИНАЧЕ ВТ_ТЧПоступление.Цена * InventoryПоступлениеGoods.Quantity * ЕСТЬNULL(InventoryПоступлениеGoods.UOM.ConversionFactor, 1)
		|				КОНЕЦ
		|		КОНЕЦ) КАК FiscalSum,
		|	InventoryПоступлениеGoods.НомерСтроки,
		|	InventoryПоступлениеGoods.UOM,
		|	ВТ_ТЧПоступление.ЕдиницаИзмерения,
		|	InventoryПоступлениеGoods.Good.Catalog.Код
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	ВТ_ТЧПоступление КАК ВТ_ТЧПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|		ПО (ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""0"" + InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""00"" + InventoryПоступлениеGoods.Good.Код
		|				ИЛИ ВТ_ТЧПоступление.НоменклатураПоставщикаАртикул = ""000"" + InventoryПоступлениеGoods.Good.Код)
		|			И ВТ_ТЧПоступление.InventoryПоступление = InventoryПоступлениеGoods.Ссылка
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка
		|	И InventoryПоступлениеGoods.НомерИнвойса <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryПоступлениеGoods.НомерСтроки,
		|	InventoryПоступлениеGoods.UOM,
		|	InventoryПоступлениеGoods.Good.Catalog.Код,
		|	ВТ_ТЧПоступление.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_Итог.FiscalPrice) КАК FiscalPrice,
		|	СУММА(ВТ_Итог.FiscalSum) КАК FiscalSum,
		|	ВТ_Итог.НомерСтроки,
		|	ВТ_Итог.UOM,
		|	ВТ_Итог.ЕдиницаИзмерения
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Итог.НомерСтроки,
		|	ВТ_Итог.UOM,
		|	ВТ_Итог.ЕдиницаИзмерения,
		|	ВТ_Итог.GoodCatalogКод";
		
	// } RGS LFedotova 26.09.2016 21:10:23 - вопрос SLI-0006814
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Сивол = СтрНайти(Объект.Ссылка.PONumber, "-0");
	PONumber = Лев(Объект.Ссылка.PONumber, ?(Сивол = 0, СтрДлина(Объект.Ссылка.PONumber), Сивол - 1));
	Запрос.УстановитьПараметр("PONumber", ?(ЗначениеЗаполнено(Объект.Ссылка.PO), Объект.Ссылка.PO.Код, PONumber));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ВРЕГ(Лев(Выборка.UOM.BasicUOM,2)) <> ВРЕГ(Лев(Выборка.ЕдиницаИзмерения,2)) Тогда
			Сообщить("Не совпадают единицы измерения в поступлении и реализации для строки " + Выборка.номерСтроки);
		Иначе	
			ЗаполнитьЗначенияСвойств(Объект.Goods[Выборка.НомерСтроки - 1], Выборка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте

Процедура ЗаполнитьСуммыТКШ(Команда)
	ЗаполнитьСуммыТКШНаСервере();
КонецПроцедуры

// } RGS MYurkevich 9/30/2015 10:23:20 AM - RCA-0000104

//Добавила Фёдорова 26.02.16 KF-00000196
&НаСервереБезКонтекста
Функция ЗаполнитьПоКурсуНаСервере(РО)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтрокиИнвойса.Инвойс,
		|	СтрокиИнвойса.Инвойс.Дата КАК Дата,
		|	СтрокиИнвойса.Инвойс.Валюта КАК Валюта
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец = &PO";
	
	Запрос.УстановитьПараметр("PO", РО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта,Выборка.Дата);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоКурсу(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.PO) Тогда
		Сообщить("Не заполнен PO");
		ОткрытьФорму("Документ.InventoryПоступление.Форма.ФормаДатаКурса", Новый Структура("Валюта", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Goods[0].POLine,"Валюта")), ЭтаФорма, ,,,Новый ОписаниеОповещения("ЗакрытиеВыборДатыКурса", ЭтотОбъект));
		Возврат;
	КонецЕсли;	
	КурсКратность =  ЗаполнитьПоКурсуНаСервере(Объект.PO);
	Mangment = Ложь;
	
	Если КурсКратность = Неопределено Тогда
		Сообщить("Не найден инвойс по PO " + Объект.PO);
		ОткрытьФорму("Документ.InventoryПоступление.Форма.ФормаДатаКурса", Новый Структура("Валюта", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Goods[0].POLine,"Валюта")), ЭтаФорма, ,,,Новый ОписаниеОповещения("ЗакрытиеВыборДатыКурса", ЭтотОбъект));
		Возврат;
	КонецЕсли;
    Ответ = Неопределено;

    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКурсуЗавершение", ЭтотОбъект, Новый Структура("КурсКратность", КурсКратность)), "Рассчитать суммы по данным Managment?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКурсуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РасчетПоКурсу(Ложь, РезультатВопроса, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВыборДатыКурса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	 Ответ = Неопределено;

	 ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытиеВыборДатыКурсаЗавершение", ЭтотОбъект, Новый Структура("Результат", Результат)), "Рассчитать суммы по данным Managment?", РежимДиалогаВопрос.ДаНет);			

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВыборДатыКурсаЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
	
	 РасчетПоКурсу(Истина, РезультатВопроса, ДополнительныеПараметры1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоКурсу(РезультатКурс, РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Mangment = Ложь;
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Mangment = Истина;
	КонецЕсли;	
	
	Если РезультатКурс Тогда
		КурсРасчета = ДополнительныеПараметры.Результат; 
	Иначе
		КурсРасчета = ДополнительныеПараметры.КурсКратность;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.Goods Цикл
		Стр.FiscalSum = ?(Mangment, Стр.ManagementSum, Стр.FiscalSum) * КурсРасчета.Курс / ?(КурсРасчета.Кратность = 0, 1, КурсРасчета.Кратность);
		Стр.FiscalPrice = Стр.FiscalSum / ?(Стр.Quantity = 0, 1, Стр.Quantity);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьПервичныйДокументТКШНаСервере(Ссылка)
	
	// { RGS LFedotova 26.09.2016 18:18:57 - вопрос SLI-0006814
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	InventoryПоступлениеGoods.Ссылка КАК InventoryПоступление,
	//	|	СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг КАК ПТИУ
	//	|ИЗ
	//	|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	//	|		ПО InventoryПоступлениеGoods.НомерИнвойса = СчетКнигиПокупокСуммы.Ссылка.НомерВходящегоДокумента
	//	|ГДЕ
	//	|	InventoryПоступлениеGoods.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryПоступлениеGoods.Ссылка КАК InventoryПоступление,
		|	InventoryПоступлениеGoods.НомерИнвойса
		|ИЗ
		|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка";
		
	Запрос1.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса1 = Запрос1.Выполнить().Выгрузить();
	Для каждого Строка Из РезультатЗапроса1 Цикл
		Строка.НомерИнвойса = Прав(СокрЛП(Строка.НомерИнвойса),8);
	КонецЦикла;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг КАК ПТИУ,
		|	СчетКнигиПокупокСуммы.Ссылка.НомерВходящегоДокумента
		|ИЗ
		|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
		|ГДЕ
		// { RGS LFedotova 24.04.2018 1:09:56 - вопрос SLI-0007542
		//|	СчетКнигиПокупокСуммы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -1) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)";
		|	СчетКнигиПокупокСуммы.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -2) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)";
		// } RGS LFedotova 24.04.2018 1:10:15 - вопрос SLI-0007542 
	
	Запрос2.УстановитьПараметр("Дата", Ссылка.Дата);
	РезультатЗапроса2 = Запрос2.Выполнить().Выгрузить();
	Для каждого Строка Из РезультатЗапроса2 Цикл
		Строка.НомерВходящегоДокумента = Прав(СокрЛП(Строка.НомерВходящегоДокумента),8);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РезультатЗапроса1",РезультатЗапроса1);
	Запрос.УстановитьПараметр("РезультатЗапроса2",РезультатЗапроса2);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатЗапроса1.InventoryПоступление,
		|	РезультатЗапроса1.НомерИнвойса
		|ПОМЕСТИТЬ ТабInventoryПоступление
		|ИЗ
		|	&РезультатЗапроса1 КАК РезультатЗапроса1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатЗапроса2.НомерВходящегоДокумента,
		|	РезультатЗапроса2.ПТИУ
		|ПОМЕСТИТЬ ТабСчетКнигиПокупок
		|ИЗ
		|	&РезультатЗапроса2 КАК РезультатЗапроса2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабСчетКнигиПокупок.ПТИУ,
		|	ТабInventoryПоступление.InventoryПоступление
		|ИЗ
		|	ТабInventoryПоступление КАК ТабInventoryПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСчетКнигиПокупок КАК ТабСчетКнигиПокупок
		|		ПО ТабInventoryПоступление.НомерИнвойса = ТабСчетКнигиПокупок.НомерВходящегоДокумента";
		
	// } RGS LFedotova 26.09.2016 20:15:17 - вопрос SLI-0006814
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса.ВыгрузитьКолонку("ПТИУ");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПервичныйДокументТКШ(Команда)
	МассивПоступлений = ОткрытьПервичныйДокументТКШНаСервере(Объект.Ссылка);
	Для Каждого Док Из МассивПоступлений Цикл
		Если Док <> ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка") Тогда
			ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", Док), ЭтаФорма);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ОткрытьСКПНаСервере(Ссылка)
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryПоступлениеGoods.Ссылка КАК InventoryПоступление,
		|	InventoryПоступлениеGoods.НомерИнвойса
		|ИЗ
		|	Документ.InventoryПоступление.Goods КАК InventoryПоступлениеGoods
		|ГДЕ
		|	InventoryПоступлениеGoods.Ссылка = &Ссылка";
		
	Запрос1.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса1 = Запрос1.Выполнить().Выгрузить();
	Для каждого Строка Из РезультатЗапроса1 Цикл
		Строка.НомерИнвойса = Прав(СокрЛП(Строка.НомерИнвойса),8);
	КонецЦикла;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетКнигиПокупок.НомерВходящегоДокумента,
		|	СчетКнигиПокупок.Ссылка КАК СКП
		|ИЗ
		|	Документ.СчетКнигиПокупок КАК СчетКнигиПокупок
		|ГДЕ
		// { RGS LFedotova 24.04.2018 0:57:05 - вопрос SLI-0007542
		//|	СчетКнигиПокупок.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -1) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)";
		|	СчетКнигиПокупок.Ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ГОД, -2) И ДОБАВИТЬКДАТЕ(&Дата, ГОД, 1)";
		// } RGS LFedotova 24.04.2018 0:57:54 - вопрос SLI-0007542 
	
	Запрос2.УстановитьПараметр("Дата", Ссылка.Дата);
	РезультатЗапроса2 = Запрос2.Выполнить().Выгрузить();
	Для каждого Строка Из РезультатЗапроса2 Цикл
		Строка.НомерВходящегоДокумента = Прав(СокрЛП(Строка.НомерВходящегоДокумента),8);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РезультатЗапроса1",РезультатЗапроса1);
	Запрос.УстановитьПараметр("РезультатЗапроса2",РезультатЗапроса2);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатЗапроса1.InventoryПоступление,
		|	РезультатЗапроса1.НомерИнвойса
		|ПОМЕСТИТЬ ТабInventoryПоступление
		|ИЗ
		|	&РезультатЗапроса1 КАК РезультатЗапроса1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатЗапроса2.НомерВходящегоДокумента,
		|	РезультатЗапроса2.СКП
		|ПОМЕСТИТЬ ТабСчетКнигиПокупок
		|ИЗ
		|	&РезультатЗапроса2 КАК РезультатЗапроса2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабСчетКнигиПокупок.СКП
		|ИЗ
		|	ТабInventoryПоступление КАК ТабInventoryПоступление
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСчетКнигиПокупок КАК ТабСчетКнигиПокупок
		|		ПО ТабInventoryПоступление.НомерИнвойса = ТабСчетКнигиПокупок.НомерВходящегоДокумента";
		
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса.ВыгрузитьКолонку("СКП");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСКП(Команда)
	
	МассивСКП = ОткрытьСКПНаСервере(Объект.Ссылка);
	Для Каждого Док Из МассивСКП Цикл
		Если Док <> ПредопределенноеЗначение("Документ.СчетКнигиПокупок.ПустаяСсылка") Тогда
			ОткрытьФорму("Документ.СчетКнигиПокупок.Форма.ФормаДокументаУправляемая", Новый Структура("Ключ", Док), ЭтаФорма);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// } RGS MYurkevich 9/30/2015 10:23:20 AM - RCA-0000104

//Конец добавления 26.02.16  KF-00000196