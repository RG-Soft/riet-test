Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мУчетнаяПолитикаБУ;
Перем мУчетнаяПолитикаНУ;

Перем мОперация;
Перем мПроводкиБУ;
Перем мПроводкиНУ;

Перем мКУДиР;
Перем мКУДиР_ОС;
Перем мПоддержкаПБУ18;

Перем мСтавкаНалогаНаПрибыль;

Перем ПроводкаНУ;

Перем ТаблицаСчетов;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

// Добавил Булавский - РГ-Софт - 29.08.2011
Перем ТаблицаАмортизации;
// Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//Т.к. при проведении больших объемов данных эта функция из общего модуля вызывается 2*кол-во_ОС 
//раз, то мы сохраняем раннее полученные результаты запросов в таблицу и смотрим сначала туда.
//Создал Трефиленков Дмитрий.
Функция ПреобразоватьСчетаБУвСчетНУ_Local(СтруктураДанных, Тип, ССубконто, ДатаСреза)

	Если Не ТаблицаСчетов = Неопределено Тогда
		Строка = ТаблицаСчетов.Найти(СтруктураДанных.СчетБУ, "СчетБУ");
		Если Не Строка = Неопределено Тогда
			Возврат Строка.СчетНУ;	
		КонецЕсли;
	Иначе
		ТаблицаСчетов = Новый ТаблицаЗначений();
		ТаблицаСчетов.Колонки.Добавить("СчетБУ");
		ТаблицаСчетов.Колонки.Добавить("СчетНУ");
	КонецЕсли;
	Результат = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных, Тип, ССубконто, ДатаСреза);
	Строка = ТаблицаСчетов.Добавить();
	Строка.СчетБУ = СтруктураДанных.СчетБУ;
	Строка.СчетНУ = Результат;
	Возврат Результат;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация","ПодразделениеОрганизации");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция РасчетАмортизации(Дата,Подразделение, СписокОС)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	               |	ВложенныйЗапрос.Подразделение
	               |ПОМЕСТИТЬ ОС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	               |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	               |	ИЗ
	               |		РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, НЕ ОсновноеСредство.АрендованноеОС) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	               |	ГДЕ
	               |		МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение)) КАК ВложенныйЗапрос
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Амортизация.ОсновноеСредство,
	               |	Амортизация.НалоговыйПериод,
	               |	Амортизация.СуммаБУ КАК АмортизацияБУ,
	               |	Амортизация.СуммаНУ КАК АмортизацияНУ,
	               |	ВЫБОР
	               |		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВведеноВЭксплуатацию.ДатаСостояния, МЕСЯЦ), НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ), МЕСЯЦ) = 1
	               |				ИЛИ ВЫБОР
	               |					КОГДА События.ОсновноеСредство ЕСТЬ NULL 
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СписыватьКВ,
	               |	ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СуммаКВОстаток, 0) КАК СуммаКВ,
	               |	Амортизация.Подразделение,
	               |	&ДатаД КАК Период
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	               |		РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	               |		РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ,
	               |		НАЧАЛОПЕРИОДА(РасчетАмортизацииОС.ПериодАмортизации, МЕСЯЦ) КАК НалоговыйПериод,
	               |		ОС.Подразделение КАК Подразделение
	               |	ИЗ
	               |		РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОС КАК ОС
	               |			ПО РасчетАмортизацииОС.ОсновноеСредство = ОС.ОсновноеСредство
	               |	ГДЕ
	               |		РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	               |		И РасчетАмортизацииОС.ОсновноеСредство В
	               |				(ВЫБРАТЬ
	               |					ОС.ОсновноеСредство КАК ОсновноеСредство
	               |				ИЗ
	               |					ОС КАК ОС)) КАК Амортизация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
	               |			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	               |		ИЗ
	               |			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |		ГДЕ
	               |			СостоянияОСОрганизаций.ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						ОС.ОсновноеСредство КАК ОсновноеСредство
	               |					ИЗ
	               |						ОС КАК ОС)
	               |			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВведеноВЭксплуатацию)) КАК ВведеноВЭксплуатацию
	               |		ПО Амортизация.ОсновноеСредство = ВведеноВЭксплуатацию.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	               |				&Дата,
	               |				ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						ОС.ОсновноеСредство КАК ОсновноеСредство
	               |					ИЗ
	               |						ОС КАК ОС)) КАК СтоимостьАмортизацияОСОстатки
	               |		ПО Амортизация.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			СобытияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	               |		ИЗ
	               |			РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	               |		ГДЕ
	               |			СобытияОСОрганизаций.ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						ОС.ОсновноеСредство КАК ОсновноеСредство
	               |					ИЗ
	               |						ОС КАК ОС)
	               |			И СобытияОСОрганизаций.Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
	               |			И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СобытияОСОрганизаций.Период, МЕСЯЦ), НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ), МЕСЯЦ) = 1) КАК События
	               |		ПО Амортизация.ОсновноеСредство = События.ОсновноеСредство";
	
	Если НЕ СписокОС = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение)",
		"МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение) И МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство В (&СписокОС)");
	    Запрос.УстановитьПараметр("СписокОС", СписокОС);
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаД", Дата);
	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(Дата));			   
	Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(Дата), ВидГраницы.Включая));
	
	Возврат Запрос.Выполнить().Выгрузить();
	                                                              
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации основных средств
//
//Процедура НачислениеАмортизацииОС(Отказ, Заголовок, СписокОС = Неопределено)
	
	//Если АмортизацияОСБУ ИЛИ АмортизацияОСНУ Тогда
	//	ТабАмортизации  = РасчетАмортизации(Дата, ПодразделениеОрганизации, СписокОС);	
	//	Если НЕ СписокОС = Неопределено Тогда
	//	
	//		
	//	
	//	КонецЕсли; 
	//	
	//	Для Каждого Строка Из ТабАмортизации Цикл
	//		Движение = Движения.СтоимостьАмортизацияОС.ДобавитьПриход();
	//		ЗаполнитьЗначенияСвойств(Движение, Строка);
	//		Движение.АмортизацияБУ = ?(АмортизацияОСБУ, Строка.АмортизацияБУ, 0);
	//		Движение.АмортизацияНУ = ?(АмортизацияОСНУ, Строка.АмортизацияНУ, 0);
	//		Движение.СуммаКВ = 0;
	//		//Из-за предыдущей строчки следующее условие всегда будет ЛОЖЬ !!!  Федотова Л.
	//		//Если Строка.СписыватьКВ И НЕ Движение.СуммаКВ = 0 Тогда
	//		Если Строка.СписыватьКВ И НЕ Строка.СуммаКВ = 0 Тогда  //исправила предыдущую строку Федотова Л., РГ-Софт,  11.08.09
	//			Движение = Движения.СтоимостьАмортизацияОС.ДобавитьРасход();
	//			ЗаполнитьЗначенияСвойств(Движение, Строка);
	//			//добавила Федотова Л., РГ-Софт, 11.08.09  ->
	//			Движение.СтоимостьБУ = 0;
	//			Движение.СтоимостьНУ = Строка.СуммаКВ;
	//			Движение.СуммаКВ = Строка.СуммаКВ;
	//			//<-                        
	//			Движение.АмортизацияБУ = 0;
	//			Движение.АмортизацияНУ = 0;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Возврат;
	//КонецЕсли;
	
	//Если СтруктураШапкиДокумента.АмортизацияОСБУ Тогда
	//	
	//	Изменил Трефиленков Дмитрий, РГ-Софт
	//	Если НовыйМетод Тогда
	//		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл2(Дата, СтруктураШапкиДокумента.Организация,Неопределено, Истина,ПодразделениеОрганизации);
	//	Иначе
	//		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл1(Дата, СтруктураШапкиДокумента.Организация,Неопределено, Истина,ПодразделениеОрганизации);
	//	КонецЕсли;
	//	КонецИзменения

	//	ТабАмортизации.Колонки.Бух.Имя = "Сумма";
	//	ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
	//	ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "ОС");
	//	
	//	мПроводкиБУ.Записать(Ложь);
	//	
	//КонецЕсли;

	// Начисление амортизации ОС в налоговом учете (по налогу на прибыль).
	//Если СтруктураШапкиДокумента.АмортизацияОСНУ тогда

	//	//Изменил Трефиленков Дмитрий, РГ-Софт
	//	Если НовыйМетод Тогда
	//		ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл2(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация, Неопределено, Истина,ПодразделениеОрганизации);
	//	Иначе
	//		ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл1(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация, Неопределено, Истина,ПодразделениеОрганизации);
	//	КонецЕсли;
	//	//КонецИзменения
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//	ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";		
	//	
	//	// Включение капитальных вложений в состав расходов.
	//	ТабКапитальныхВложений = ТабАмортизации.Скопировать();
	//	ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
	//	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
	//	ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
		//ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
		//
		// Формирование проводок по возникающим временным разницам.
		//Если мПоддержкаПБУ18 Тогда
		//	ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
		//	Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
		//		СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
		//	КонецЦикла;
		//	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
		//КонецЕсли;
		//
		//// Начисление амортизации.
		//ТабАмортизации.Колонки.Налог.Имя = "Сумма";
		//ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", "ОС");
		//
		//// Расчет разниц по амортизации.
		//Если мПоддержкаПБУ18 Тогда
		//	НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", "",  мПроводкиНУ);
		//КонецЕсли;

		// Списание сумм капитальных вложений, включенных в состав расходов.
		//Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
		//	
		//	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
		//
		//		Проводка = мПроводкиНУ.Добавить();
		//		
		//		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		//		Проводка.НомерЖурнала = "ОС";
		//		Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
		//		Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
		//		
		//		Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТабКапитальныхВложений.Подразделение);
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//мПроводкиНУ.Записать(Ложь);
		//
	//КонецЕсли;

//КонецПроцедуры

// Выполняет расчет постоянных и временных разниц в оценке амортизации основных средств
//
Процедура РасчетРазницПоАмортизацииОС(СтруктураШапкиДокумента, ТабЗатрат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОбороты.КорСчет   КАК СчетЗатрат,
	|	ХозрасчетныйОбороты.Счет      КАК СчетАмортизации,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСубконто1 ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ ХозрасчетныйОбороты.КорСубконто1 КОНЕЦ КАК Субконто1,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСубконто2 ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ ХозрасчетныйОбороты.КорСубконто2 КОНЕЦ КАК Субконто2,
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.КорСубконто3 ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ ХозрасчетныйОбороты.КорСубконто3 КОНЕЦ КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&Счет02БУ), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3";
	
	Запрос.УстановитьПараметр("НачДата",    мНачДата);
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Счет02БУ",   ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	РезультатЗапроса = Запрос.Выполнить();  
	ТаблицаЗатрат = РезультатЗапроса.Выгрузить();
	ТаблицаЗатрат.Колонки.Добавить("СуммаНУ");
	ТаблицаЗатрат.Колонки.Добавить("Счет02");
	Для Каждого СтрокаАмортизацияБУ Из ТаблицаЗатрат Цикл
		СтрокаАмортизацияБУ.Счет02 = ПреобразоватьСчетаБУвСчетНУ_Local(Новый Структура("СчетБУ",СтрокаАмортизацияБУ.СчетАмортизации), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
	КонецЦикла;
	Для Каждого СтрокаТабЗатрат Из ТабЗатрат Цикл
		СтрокаАмортизацияБУ = ТаблицаЗатрат.Добавить();
		СтрокаАмортизацияБУ.ОбъектУчета = СтрокаТабЗатрат.ОбъектУчета;
		СтрокаАмортизацияБУ.СчетЗатрат = СтрокаТабЗатрат.СчетЗатрат;
		СтрокаАмортизацияБУ.Счет02 = СтрокаТабЗатрат.СчетАмортизацииНУ;
		СтрокаАмортизацияБУ.Субконто1 = СтрокаТабЗатрат.Субконто1;
		СтрокаАмортизацияБУ.Субконто2 = СтрокаТабЗатрат.Субконто2;
		СтрокаАмортизацияБУ.Субконто3 = СтрокаТабЗатрат.Субконто3;
		СтрокаАмортизацияБУ.СуммаНУ = СтрокаТабЗатрат.Сумма;
	КонецЦикла;
	 ТаблицаЗатрат.Свернуть("ОбъектУчета,СчетЗатрат,Счет02,Субконто1,Субконто2,Субконто3","Сумма,СуммаНУ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1             КАК Субконто1,
	               |	0                                      КАК Сумма01БУ,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК Сумма01НУ,
	               |	0                                      КАК Сумма01ПР
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт),
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&Счет01БУ), , Организация = &Организация) КАК НалоговыйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	СУММА(НалоговыйОстатки.СуммаОстатокДт)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонДата,
	               |		Счет В ИЕРАРХИИ (&Счет01НУ),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчетаПр) КАК НалоговыйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОстатки.Субконто1
	               |ИТОГИ
	               |	СУММА(Сумма01БУ),
	               |	СУММА(Сумма01НУ),
	               |	СУММА(Сумма01ПР)
	               |ПО
	               |	Субконто1";
	
	Запрос.УстановитьПараметр("КонДата",    мКонДата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",   Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР", Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("Счет01НУ",   ПланыСчетов.Налоговый.ОСвОрганизации);	
	Запрос.УстановитьПараметр("Счет01БУ",   ПланыСчетов.Хозрасчетный.ОСвОрганизации);	
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ТаблицаОС = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаЗатрат Цикл
		
		// Если амортизация по НУ и по БУ совпадает, разниц нет
				Если СтрокаТаблицы.СУмма = СтрокаТаблицы.СУммаНУ Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОС = ТаблицаОС.Найти(СтрокаТаблицы.ОбъектУчета,"Субконто1");
				
		// Если ОС в НУ нет, разниц нет
				Если СтрокаТаблицыОС = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТаблицыОС.Сумма01НУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТаблицыОС.Сумма01БУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// постоянная разница в оценке амортизации, возникшая вследствие постоянной разницы в оценке ОС
				// амортизация по ПР, начисленная по способу амортизации БУ
					СуммаПР = (СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ) * СтрокаТаблицыОС.Сумма01ПР;
					
				// временная разница в оценке амортизации, возникшая вследствие временной разницы в оценке ОС
				// амортизация по ВР, начисленная по способу амортизации БУ
					СуммаВР1 = (СтрокаТаблицы.Сумма / СтрокаТаблицыОС.Сумма01БУ) * (СтрокаТаблицыОС.Сумма01БУ - СтрокаТаблицыОС.Сумма01НУ - СтрокаТаблицыОС.Сумма01ПР);
					
				// временная разница в оценке амортизации, возникшая вследствие разных способов начисления амортизации по НУ и БУ	
				    СуммаВР2 = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ - СуммаПР - СуммаВР1;
					
					СуммаВР = СуммаВР1 + СуммаВР2;
				
					СчетЗатрат    = ПреобразоватьСчетаБУвСчетНУ_Local(Новый Структура("СчетБУ",СтрокаТаблицы.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					СчетАмортизации = СтрокаТаблицы.Счет02;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетАмортизации) Тогда
						Продолжить;
					КонецЕсли;
				
				Если СуммаПР <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
					ПроводкаНУ.Сумма        = СуммаПР;
					ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
					ПроводкаНУ.НомерЖурнала = "ПР";
				КонецЕсли;
				Если СуммаВр <> 0 Тогда
					ПроводкаНУ              = мПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетКт       = СчетАмортизации; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);  
					ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
					ПроводкаНУ.Сумма        = СуммаВр;
					ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
					ПроводкаНУ.СчетДт       = СчетЗатрат; 
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);   			
					ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);   			
					ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
					ПроводкаНУ.НомерЖурнала = "ВР";
				КонецЕсли;
			КонецЦикла;
мПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// АМОРТИЗАЦИЯ
	// Начисление амортизации ОС
	//НачислениеАмортизацииОС(Отказ, Заголовок);
	ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Ссылка);
	ВыполнитьДвиженияПоРегиструОстаточнаяСтоимостьПР();
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС = Неопределено) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	Если Документ.АмортизацияОСБУ ИЛИ Документ.АмортизацияОСНУ Тогда
		ДокументДата = КонецДня(Документ.Дата) - 59 * 60 - 59;
		ТабАмортизации  = РасчетАмортизации(ДокументДата, Документ.ПодразделениеОрганизации, СписокОС);	
		СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
		СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
		СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
		
		СтоимостьАмортизацияОСНабор.Прочитать();
		ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
		ТаблицаНабора = ИсходнаяТаблица.СкопироватьКолонки();
		
		Если НЕ СписокОС = Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ИсходнаяТаблица.Регистратор,
			               |	ИсходнаяТаблица.Период,
			               |	ИсходнаяТаблица.ОсновноеСредство,
			               |	ИсходнаяТаблица.СтоимостьБУ,
			               |	ИсходнаяТаблица.СтоимостьНУ,
			               |	ИсходнаяТаблица.СуммаКВ,
			               |	ИсходнаяТаблица.АмортизацияБУ,
			               |	ИсходнаяТаблица.АмортизацияНУ,
			               |	ИсходнаяТаблица.Подразделение,
			               |	ИсходнаяТаблица.Активность,
			               |	ИсходнаяТаблица.ВидДвижения,
			               |	ИсходнаяТаблица.НалоговыйПериод
			               |ПОМЕСТИТЬ ИсходнаяТаблица
			               |ИЗ
			               |	&ИсходнаяТаблица КАК ИсходнаяТаблица
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ИсходнаяТаблица.Регистратор,
			               |	КОНЕЦПЕРИОДА(ИсходнаяТаблица.Период, МЕСЯЦ) КАК Период,
			               |	ИсходнаяТаблица.ОсновноеСредство,
			               |	ИсходнаяТаблица.СтоимостьБУ,
			               |	ИсходнаяТаблица.СтоимостьНУ,
			               |	ИсходнаяТаблица.СуммаКВ,
			               |	ИсходнаяТаблица.АмортизацияБУ,
			               |	ИсходнаяТаблица.АмортизацияНУ,
			               |	ИсходнаяТаблица.Подразделение,
			               |	ИсходнаяТаблица.ВидДвижения,
			               |	ИсходнаяТаблица.Активность,
			               |	ИсходнаяТаблица.НалоговыйПериод
			               |ИЗ
			               |	ИсходнаяТаблица КАК ИсходнаяТаблица
			               |ГДЕ
			               |	(НЕ ИсходнаяТаблица.ОсновноеСредство В (&СписокОС))";
			
			Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
			Запрос.УстановитьПараметр("СписокОС", СписокОС);
			Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
			
			Результат = Запрос.Выполнить();
			НоваяТаблица = Результат.Выгрузить();
			Для каждого Строка Из НоваяТаблица Цикл
				НоваяСтрока = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				НоваяСтрока.Период = НоваяСтрока.Период - 59 * 60 - 59;
			КонецЦикла; 
		КонецЕсли; 
		
		Для Каждого Строка Из ТабАмортизации Цикл
			НоваяСтрока = ТаблицаНабора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.АмортизацияБУ = ?(АмортизацияОСБУ, Строка.АмортизацияБУ, 0);
			НоваяСтрока.АмортизацияНУ = ?(АмортизацияОСНУ, Строка.АмортизацияНУ, 0);
			НоваяСтрока.СуммаКВ = 0;
			//Из-за предыдущей строчки следующее условие всегда будет ЛОЖЬ !!!  Федотова Л.
			//Если Строка.СписыватьКВ И НЕ Движение.СуммаКВ = 0 Тогда
			Если Строка.СписыватьКВ И НЕ Строка.СуммаКВ = 0 Тогда  //исправила предыдущую строку Федотова Л., РГ-Софт,  11.08.09
				НоваяСтрока = ТаблицаНабора.Добавить();
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				//добавила Федотова Л., РГ-Софт, 11.08.09  ->
				НоваяСтрока.СтоимостьБУ = 0;
				НоваяСтрока.СтоимостьНУ = Строка.СуммаКВ;
				НоваяСтрока.СуммаКВ = Строка.СуммаКВ;
				//<-                        
				НоваяСтрока.АмортизацияБУ = 0;
				НоваяСтрока.АмортизацияНУ = 0;
			КонецЕсли;
		КонецЦикла;
		СтоимостьАмортизацияОСНабор.Загрузить(ТаблицаНабора);
		СтоимостьАмортизацияОСНабор.УстановитьАктивность(Истина);
		СтоимостьАмортизацияОСНабор.Записать();
		// Добавил Булавский - РГ-Софт - 29.08.2011
		ТаблицаАмортизации = ТаблицаНабора.Скопировать( , "ОсновноеСредство, АмортизацияНУ");
		ТаблицаАмортизации.Свернуть("ОсновноеСредство", "АмортизацияНУ");
		// Конец добавления
	КонецЕсли;

КонецПроцедуры //ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС)

// Добавил Булавский - РГ-Софт - 29.08.2011
Процедура ВыполнитьДвиженияПоРегиструОстаточнаяСтоимостьПР()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходнаяТаблица.ОсновноеСредство,
	               |	ИсходнаяТаблица.АмортизацияНУ
	               |ПОМЕСТИТЬ ТаблицаСАмортизацией
	               |ИЗ
	               |	&ТаблицаАмортизации КАК ИсходнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство,
	               |	ВложенныйЗапрос.СтоимостьНУОстаток - ВложенныйЗапрос.СуммаКВОстаток - ВложенныйЗапрос.АмортизацияНУОстаток КАК ОстаточнаяСтоимостьОСНУ
	               |ПОМЕСТИТЬ ТаблицаОстаточнойСтоимости
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	               |		СУММА(СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток) КАК СтоимостьНУОстаток,
	               |		СУММА(СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток) КАК АмортизацияНУОстаток,
	               |		СУММА(СтоимостьАмортизацияОСОстатки.СуммаКВОстаток) КАК СуммаКВОстаток
	               |	ИЗ
	               |		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаДокумента, ) КАК СтоимостьАмортизацияОСОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СтоимостьАмортизацияОСОстатки.ОсновноеСредство) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.ОстаточнаяСтоимостьОСНУ ЕСТЬ NULL 
	               |				ИЛИ ВложенныйЗапрос.ОстаточнаяСтоимостьОСНУ = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ВложенныйЗапрос.АмортизацияНУ / ВложенныйЗапрос.ОстаточнаяСтоимостьОСНУ
	               |	КОНЕЦ КАК ДоляСписанияПР
	               |ПОМЕСТИТЬ ДолиСписания
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСАмортизацией.ОсновноеСредство КАК ОсновноеСредство,
	               |		ТаблицаСАмортизацией.АмортизацияНУ КАК АмортизацияНУ,
	               |		ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьОСНУ КАК ОстаточнаяСтоимостьОСНУ
	               |	ИЗ
	               |		ТаблицаСАмортизацией КАК ТаблицаСАмортизацией
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстаточнойСтоимости КАК ТаблицаОстаточнойСтоимости
	               |			ПО ТаблицаСАмортизацией.ОсновноеСредство = ТаблицаОстаточнойСтоимости.ОсновноеСредство) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос1.ОсновноеСредство КАК ОсновноеСредство,
	               |	ВложенныйЗапрос1.СписаниеПР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВложенныйЗапрос1.ОсновноеСредство КАК ОсновноеСредство,
	               |		ВЫБОР
	               |			КОГДА ВложенныйЗапрос1.СтоимостьПРОстаток ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			КОГДА ВЫБОР
	               |					КОГДА ВложенныйЗапрос1.СтоимостьПРОстаток * ВложенныйЗапрос1.ДоляСписанияПР >= 0
	               |						ТОГДА ВложенныйЗапрос1.СтоимостьПРОстаток * ВложенныйЗапрос1.ДоляСписанияПР
	               |					ИНАЧЕ -ВложенныйЗапрос1.СтоимостьПРОстаток * ВложенныйЗапрос1.ДоляСписанияПР
	               |				КОНЕЦ >= ВЫБОР
	               |					КОГДА ВложенныйЗапрос1.СтоимостьПРОстаток >= 0
	               |						ТОГДА ВложенныйЗапрос1.СтоимостьПРОстаток
	               |					ИНАЧЕ -ВложенныйЗапрос1.СтоимостьПРОстаток
	               |				КОНЕЦ
	               |				ТОГДА ВложенныйЗапрос1.СтоимостьПРОстаток
	               |			ИНАЧЕ ВложенныйЗапрос1.СтоимостьПРОстаток * ВложенныйЗапрос1.ДоляСписанияПР
	               |		КОНЕЦ КАК СписаниеПР
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ДолиСписания.ОсновноеСредство КАК ОсновноеСредство,
	               |			ДолиСписания.ДоляСписанияПР КАК ДоляСписанияПР,
	               |			ВложенныйЗапрос.СтоимостьПРОстаток КАК СтоимостьПРОстаток
	               |		ИЗ
	               |			ДолиСписания КАК ДолиСписания
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ОстаточнаяСтоимостьПРОстатки.ОсновноеСредство КАК ОсновноеСредство,
	               |					ОстаточнаяСтоимостьПРОстатки.СтоимостьПРОстаток КАК СтоимостьПРОстаток
	               |				ИЗ
	               |					РегистрНакопления.ОстаточнаяСтоимостьПР.Остатки(&ДатаДокумента, ) КАК ОстаточнаяСтоимостьПРОстатки) КАК ВложенныйЗапрос
	               |				ПО ДолиСписания.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство) КАК ВложенныйЗапрос1) КАК ВложенныйЗапрос1
	               |ГДЕ
	               |	ВложенныйЗапрос1.СписаниеПР <> 0";
	
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ТаблицаАмортизации);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоМесяца(Дата));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		ДвиженияПоРегистру = Движения.ОстаточнаяСтоимостьПР;
		Пока Выборка.Следующий() Цикл
			Движение = ДвиженияПоРегистру.Добавить();
			Движение.Активность = Истина;
			Движение.Период = Дата;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.ОсновноеСредство = Выборка.ОсновноеСредство;
			Движение.Регистратор = Ссылка;
			Движение.СтоимостьПР = Выборка.СписаниеПР;
		КонецЦикла;
		ДвиженияПоРегистру.Записать();
	КонецЕсли; 
	
КонецПроцедуры
 
// Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	 // Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",        Ложь);

	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца (Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	мПоддержкаПБУ18 = ОбщегоНазначения.ПоддержкаПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	мПроводкиБУ = Движения.Хозрасчетный;
	
	мПроводкиНУ = Движения.Налоговый;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
	                                                       
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры
