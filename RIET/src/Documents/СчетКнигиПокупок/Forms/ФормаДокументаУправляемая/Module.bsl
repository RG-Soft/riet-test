&НаКлиенте
Перем ПараметрыОбработчикаОжидания; //ПроверкаКонтрагентов

////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда //новый
		ЗаполнитьЗначениямиПоУмолчанию();
	Иначе 
		
		// Установим отбор на проводки DSS деталей
		ПроводкиDSSДеталей.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
		
		Элементы.НадписьСчетФактура.Видимость = Объект.WHT;
		Элементы.КПП.Видимость = Объект.WHT;
		Если Объект.WHT Тогда 
			ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	         		
	// { RGS LFedotova 02.03.2017 - вопрос SLI-0007188
	//РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, Объект); 
	//внутренние процедуры расчета дат запрета определяют метаданные, а у ДанныеФормыСтруктура такого метода нет 
	//поэтому переделаем в объект
	текОБ = РеквизитФормыВЗначение("Объект");	
	НачалоОткрытогоПериодаМодуля = ДатыЗапретаИзменения.ПолучитьДатуЗапретаРедактирования(текОБ);
	Если НачалоОткрытогоПериодаМодуля <> Неопределено Тогда
		Элементы.инфНадписьОткрытыйПериод.Заголовок = "Открыт: " + Формат(ДобавитьМесяц(НачалоОткрытогоПериодаМодуля,1), "ДФ='ММММ гггг'");
	Иначе
		Элементы.инфНадписьОткрытыйПериод.Заголовок = "";
	КонецЕсли;
	// } RGS LFedotova 02.03.2017 - вопрос SLI-0007188
	
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	
	// Регулировка вывода признака загрузки из Excel
	Элементы.ЗагруженИзExcel.Видимость = Объект.ЗагруженИзExcel;
	
	// есть корректировочный СФ
	Элементы.НомерСФ.Видимость = Объект.Корректировочный;
	Элементы.ДатаСФ.Видимость = Объект.Корректировочный;
	
	ПриИзмененииВалютыДокумента();
		       		
	ЗаполнитьРеквизитыФормыПоПроводкеDSS();
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 16.01.2015
			             	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	  ПриИзмененииWHT();
	  
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015

	// { RGS AFokin 04.06.2017 23:59:59
	// проведенный ДокументIco доступен только на просмотр
	КонтрольПроведенияСервер.УстановитьТолькоПросмотрДляФормы(ЭтаФорма, ТекущийОбъект);
	// } RGS AFokin 04.06.2017 23:59:59

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установим отбор на проводки DSS деталей
	ПроводкиDSSДеталей.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	 		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПровестиБезПроверок", ПровестиБезПроверок);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененФлагРучнаяКорректировка" Тогда 
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный"
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	ИначеЕсли (ИмяСобытия = "ЗапускПроцессаУтверждения" или ИмяСобытия = "ОстановленПроцессУтверждения")
		И Параметр = Объект.Ссылка Тогда 
		РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ ДОКУМЕНТЫ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);
	// } РГ-Софт Пахоменков А. 16.01.2015
КонецПроцедуры
           
&НаКлиенте
Процедура ДатаПроведенияПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры
          
&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
		
	ПересчитатьКурсДокумента();		
		
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)       
	
	ПересчитатьКурсДокумента();
	
	ПриИзмененииВалютыДокумента();
	        	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	
	ПриИзмененииКурсаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкаDSSПриИзменении(Элемент)    
	         	        	
	ЗаполнитьРеквизитыФормыПоПроводкеDSS();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРубСНДСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СуммаРубСНДС) Тогда
		Объект.КурсДокумента = 1;
		Элементы.КурсДокумента.Доступность = Ложь;
		
		Если Объект.Суммы.Количество() > 0 Тогда
			ПриИзмененииСуммыРубсНДСДокумента();
		КонецЕсли;
	
	Иначе 
		ПересчитатьКурсДокумента();
		Элементы.КурсДокумента.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныйПриИзменении(Элемент)
	
	Элементы.НомерСФ.Видимость = Объект.Корректировочный;
	Элементы.ДатаСФ.Видимость = Объект.Корректировочный;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ДОКУМЕНТА
////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПересчитатьКурсДокумента() 
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		НовыйКурсДокумента = 1;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			ДатаКурса = PostingDateПроводки;
		КонецЕсли;
		
		Если НачалоКвартала(Объект.ДатаВходящегоДокумента) < НачалоКвартала(PostingDateПроводки) Тогда
			ДатаКурса = PostingDateПроводки;
		Иначе
			ДатаКурса = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
			
		СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
		НовыйКурсДокумента = СтруктураКурса.Курс / СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Если НовыйКурсДокумента <> Объект.КурсДокумента Тогда
		
		Объект.КурсДокумента = НовыйКурсДокумента;
		ПриИзмененииКурсаДокумента();
		
	КонецЕсли;
	
КонецПроцедуры
           
&НаСервере
Процедура ПриИзмененииКурсаДокумента() 
	
	Объект.СуммаДокументаСНДСРуб = Объект.СуммаДокументаСНДС * Объект.КурсДокумента;
	Объект.СуммаДокументаБезНДСРуб = Объект.СуммаДокументаБезНДС * Объект.КурсДокумента;
	
	Для Каждого Строка Из Объект.Суммы Цикл
		ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка)
	
	Строка.СуммаСНДСРуб = Строка.СуммаСНДС * Объект.КурсДокумента;
	Строка.СуммаБезНДСРуб = Строка.СуммаБезНДС * Объект.КурсДокумента;
	Строка.СуммаНДСРуб = Строка.СуммаНДС * Объект.КурсДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкиНДСВСтрокеТЧСуммы(Строка, Идентификатор) 
		
	Если ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
		ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Идентификатор);
	ИначеЕсли ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
		ПриИзмененииСуммыНДСВСтрокеТЧСуммы(Идентификатор);
	ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
		ПриИзмененииСуммыБезНДСВСтрокеТЧСуммы(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Идентификатор) 
	
	Строка = Объект.Суммы.НайтиПоИдентификатору(Идентификатор);
	Если Строка=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		
		ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		Строка.СуммаНДС = Строка.СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС);
		Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
			Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
			Строка.СуммаНДС = Строка.СуммаСНДС - Строка.СуммаБезНДС;
		Иначе
			Строка.СуммаБезНДС = Строка.СуммаСНДС;
		КонецЕсли;
		
		//Добавил Трефиленков Дмитрий, 16 августа 2010, вопросы №SLI001508, №SLI001507
		Если Строка.СуммаБезНДС <> 0 Тогда 
			Ставка = Строка.СуммаНДС/Строка.СуммаБезНДС;
			Если Ставка > 0.179 И Ставка < 0.181 Тогда
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ВключатьВКнигуПокупок = Истина;
			КонецЕсли;
		КонецЕсли;
		//конец добавления
		
	КонецЕсли;
	     
	Объект.РасхождениеСуммыСНДСИAC = Объект.Суммы.Итог("СуммаСНДС") + Объект.ПроводкаDSS.TranAmount; // Tran amount - отрицательная 
	
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыБезНДСВСтрокеТЧСуммы(Идентификатор) 
	
	Строка = Объект.Суммы.НайтиПоИдентификатору(Идентификатор);
	Если Строка=Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда

		ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);	
		Строка.СуммаНДС = Строка.СуммаБезНДС * ПроцентНДС / 100;
		Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
			Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
			Строка.СуммаНДС = Строка.СуммаСНДС - Строка.СуммаБезНДС;
		Иначе
			Строка.СуммаСНДС = Строка.СуммаБезНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.РасхождениеСуммыСНДСИAC = Объект.Суммы.Итог("СуммаСНДС") + Объект.ПроводкаDSS.TranAmount; // Tran amount - отрицательная//
	
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыНДСВСтрокеТЧСуммы(Идентификатор) 
	
	Строка = Объект.Суммы.НайтиПоИдентификатору(Идентификатор);
	Если Строка=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
	МожноВычислитьПоСтавке = ЗначениеЗаполнено(ПроцентНДС);
		
	Если МожноВычислитьПоСтавке Тогда
		
		Строка.СуммаБезНДС = Строка.СуммаНДС * 100 / ПроцентНДС;
		Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
			Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
			Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		КонецЕсли;
	
	КонецЕсли;
	
	Объект.РасхождениеСуммыСНДСИAC = Объект.Суммы.Итог("СуммаСНДС") + Объект.ПроводкаDSS.TranAmount; // Tran amount - отрицательная//Пахоменков
	
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыРубсНДСДокумента() 
	     		
	УчетНДС.РаспределитьСуммуПоСтолбцу(РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Суммы,"СуммаСНДС"), 
															Объект.СуммаРубСНДС, Объект.Суммы, "СуммаСНДСРуб");
	
	Для Каждого Строка из Объект.Суммы Цикл
		
		Строка.СуммаНДСРуб    = УчетНДС.ОпределитьСуммуНДС(Строка.СуммаСНДСРуб,Строка.СтавкаНДС);
		Строка.СуммаБезНДСРуб = Строка.СуммаСНДСРуб - Строка.СуммаНДСРуб;
		
	КонецЦикла;
	
	Объект.СуммаДокументаСНДСРуб   = Объект.СуммаРубСНДС;
	Объект.СуммаДокументаБезНДСРуб = Объект.Суммы.Итог("СуммаБезНДСРуб");
	
КонецПроцедуры
                                        
////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ТЧ СУММЫ
////////////////////////////////////////////////////////////////////////////////////////////////
            
&НаКлиенте
Процедура СуммыСтавкаНДСПриИзменении(Элемент)
	
	ТекДанные = Элементы.Суммы.ТекущиеДанные;
	Если ТекДанные<>Неопределено Тогда 
		ПриИзмененииСтавкиНДСВСтрокеТЧСуммы(ТекДанные, ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыСуммаСНДСПриИзменении(Элемент)
	
	Идентификатор = Элементы.Суммы.ТекущиеДанные.ПолучитьИдентификатор();
	Если Идентификатор <> Неопределено Тогда 
		ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыСуммаБезНДСПриИзменении(Элемент)
	
	Идентификатор = Элементы.Суммы.ТекущиеДанные.ПолучитьИдентификатор();
	Если Идентификатор <> Неопределено Тогда 
		ПриИзмененииСуммыБезНДСВСтрокеТЧСуммы(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыСуммаНДСПриИзменении(Элемент)
	
	Идентификатор = Элементы.Суммы.ТекущиеДанные.ПолучитьИдентификатор();
	Если Идентификатор <> Неопределено Тогда 
		ПриИзмененииСуммыНДСВСтрокеТЧСуммы(Идентификатор);
	КонецЕсли;
			
КонецПроцедуры
   
///////////////////////////////////////////////////////////////////////////////////////////////
// Счет-фактура выданный - WHT
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура WHTПриИзменении(Элемент)
	
	ПриИзмененииWHT();
	   		
	//добавила Федотова Л., РГ-Софт, 12.11.12, вопрос №SLI-0002977 ->
	Если Объект.WHT Тогда
		AU = SalesBook.ВернутьAU(Объект.Ссылка);
		Объект.КПП = SalesBook.ВернутьКПП(AU);
	Иначе 
		Объект.КПП = "";
	КонецЕсли;
	//<-
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииWHT()
	
	Если Не Объект.WHT И ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Ответ = Вопрос("Требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОтменитьПроведениеСчетаФактуры(СчетФактура);
		Иначе
			Объект.WHT = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НадписьСчетФактура.Видимость = Объект.WHT;
	Элементы.КПП.Видимость = Объект.WHT;
	Если Объект.WHT Тогда 
		ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеСчетаФактуры(СчетФактура)
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.ДокументОснование = Неопределено;
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
     	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьМодифицированность();
	
	SalesBookКлиент.ОткрытьВыданныйСчетФактуру(ЭтаФорма, СчетФактура);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элемент);
	// } РГ-Софт Пахоменков А. 16.01.2015
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетФактуру(Форма) 
           		
	Объект = Форма.Объект;
	ЗаполнитьЗначенияСвойств(Форма, SalesBookКлиентСервер.ДанныеНадписиОСчетеФактуреВыданном(
		Объект.Ссылка,
		Объект.WHT));
	
КонецПроцедуры
                     
                       
////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТА
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПривязаннымПроводкамДеталей(Команда)
	
	ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, , "Внимание!");
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Состояние("Заполнение табличной части счета книги покупок по данным: " + Объект.ПроводкаDSS);
		ЗаполнитьТЧСуммыПоПривязаннымПроводкам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШапку(Команда)
	
	Если Не ПроводкаDSSЗаполнена() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Перед заполнением все данные шапки документа будут очищены.
	|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, , "Внимание!");
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Состояние("Заполнение шапки документа по данным: " + Объект.ПроводкаDSS); 
		ЗаполнитьШапкуДокумента();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПроводкаDSSЗаполнена()
	
	Если ЗначениеЗаполнено(Объект.ПроводкаDSS) Тогда 
		Возврат Истина;
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Проводка DSS"" не заполнено!");
		Возврат Ложь;
	КонецЕсли;	
	  	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВесьДокумент(Команда)
	
	Если Не ПроводкаDSSЗаполнена() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Перед заполнением все данные документа будут очищены.
		|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, , "Внимание!");
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Состояние("Заполнение счета книги покупок по данным: " + Объект.ПроводкаDSS);
		ЗаполнитьДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(Отказ = Ложь) 
	 		
	ЗаполнитьШапкуДокумента(Отказ);
	ОбновитьСоставПроводокДеталейИЗаполнитьСуммы(Отказ);
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуДокумента(Отказ = Ложь) 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьШапкуДокумента();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
			
КонецПроцедуры
                       
&НаКлиенте
Процедура ОбновитьСоставПроводокДеталейИЗаполнитьТЧСуммы(Команда)
	
	ПроверитьМодифицированность();
	
	ТекстВопроса = "Перед заполнением произойдет обновления состава привязанных проводок деталей,
		|а табличная часть будет очищена.
		|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, , "Внимание!");
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Состояние("Отвязывание и привязывание заново проводок деталей к счету книги покупок по данным: " + Объект.ПроводкаDSS);
		ОбновитьСоставПроводокДеталейИЗаполнитьСуммы();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставПроводокДеталейИЗаполнитьСуммы(Отказ = Ложь) 
		   		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Отвяжем старые проводки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроводкаDSS.Ссылка
			|ИЗ
			|	Документ.ПроводкаDSS КАК ПроводкаDSS
			|ГДЕ
			|	ПроводкаDSS.Документ = &Документ
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	Документ.ПроводкаDSS";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			ПустаяСсылка = Документы.СчетКнигиПокупок.ПустаяСсылка();
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();  
				ДокументОбъект.Документ = ПустаяСсылка;       
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);   
				Исключение
					ТекстОшибки = "Не удалось записать документ """ + ДокументОбъект + """: " + ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		ЭтаФорма.Прочитать();
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ = Ложь) 
	         		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Reference", Объект.ПроводкаDSS.Reference);
	Запрос.УстановитьПараметр("ApInvoice", Объект.ПроводкаDSS.ApInvoice);
	Запрос.УстановитьПараметр("Vendor",    Объект.ПроводкаDSS.Vendor);
			
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроводкаDSS.Ссылка,
		|	ПроводкаDSS.Reference КАК Reference,
		|	ПроводкаDSS.Vendor КАК Vendor,
		|	ПроводкаDSS.ApInvoice
		|ПОМЕСТИТЬ Пустые
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.System = ""AP""
		|	И (ПроводкаDSS.Документ = ЗНАЧЕНИЕ(Документ.СчетКнигиПокупок.ПустаяСсылка)
		|			ИЛИ ПроводкаDSS.Документ ССЫЛКА Документ.ОперацияLawson
		|			ИЛИ ПроводкаDSS.Документ = НЕОПРЕДЕЛЕНО)
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Reference,
		|	Vendor
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пустые.Ссылка КАК Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	Пустые.Reference = &Reference
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пустые.Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	(Пустые.Vendor ПОДОБНО ""%OP0399%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0114%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0355%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""E%"")
		|	И Пустые.ApInvoice = &ApInvoice
		|	И Пустые.Vendor = &Vendor
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		// Если документ еще не записан - запишем его
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Попытка
				Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстОшибки = "Не удалось записать счет книги покупок с данными: " + Объект.ПроводкаDSS + ": " + ОписаниеОшибки();  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		МассивПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, Объект.Ссылка, Отказ);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСуммыПоПривязаннымПроводкам() 
	
	// Если документ новый - то к нему не может быть привязано проводок
	//	поэтому можно сразу выйти
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	     			
	Объект.Суммы.Очистить();
	
	// А ЕСЛИ ПРОВОДКИ В ДРУГОЙ ВАЛЮТЕ???
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.TaxCode,
		|	ПроводкаDSS.AccountLawson,
		|	ПроводкаDSS.TranAmount,
		|	ПроводкаDSS.PeriodLawson
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Документ
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|	И (НЕ(ПроводкаDSS.Документ.WHT
		|				И ПроводкаDSS.AccountLawson.Код = ""208655""))";
		
	Результат = Запрос.Выполнить();
	
	// Если привязанных проводок не нашли - выходим
	Если Результат.Пустой() Тогда
		Объект.ВключатьВКнигуПокупок = Ложь;
		Возврат;
	КонецЕсли;
		
	ТаблицаСтрокДеталей = Результат.Выгрузить();
	
	Объект.ТаможеннаяДекларация = Ложь;
	
	// Заполним суммы НДС в ТЧ Суммы
	Для Каждого СтрокаТаблицыДеталей Из ТаблицаСтрокДеталей Цикл
		
		// Сумма НДС заполняется, если счет строки AD начинается с 1402
		Если Лев(СтрокаТаблицыДеталей.AccountLawson.Код, 4) = "1402" Тогда
			
			СтавкаНДС = ПолучениеСсылок.ПолучитьСтавкуНДСИзTaxCode(СтрокаТаблицыДеталей.TaxCode);
			
			//-> RG-Soft VIvanov 08/06/12 - добавлен отбор по периоду
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("СтавкаНДС", СтавкаНДС);
			ОтборСтрок.Вставить("Период", СтрокаТаблицыДеталей.PeriodLawson);
			СтрокиТЧ = Объект.Суммы.НайтиСтроки(ОтборСтрок);
			Если СтрокиТЧ.Количество() = 0 Тогда
				СтрокаТЧ = Объект.Суммы.Добавить();
				СтрокаТЧ.СтавкаНДС = СтавкаНДС;
				СтрокаТЧ.Период = СтрокаТаблицыДеталей.PeriodLawson;
			КонецЕсли;
			//<- RG-Soft
			
			СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС + СтрокаТаблицыДеталей.TranAmount;
			
		КонецЕсли;
		
		Если СтрокаТаблицыДеталей.TaxCode = "RUMOSVTCST"
			ИЛИ СтрокаТаблицыДеталей.TaxCode = "RUSAKVTCST" Тогда
			Объект.ТаможеннаяДекларация = Истина;
		КонецЕсли;
					
	КонецЦикла;
	
	// Расчитываем суммы
	Для Каждого СтрокаТЧ Из Объект.Суммы Цикл	
		ПриИзмененииСуммыНДСВСтрокеТЧСуммы(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если Объект.ТаможеннаяДекларация Тогда
		
		Объект.КорректировкаРасхожденияСуммыСНДСИAC = Объект.РасхождениеСуммыСНДСИAC;
				
	Иначе
		
		// Определим необходимость включения в книгу покупок
		Объект.ВключатьВКнигуПокупок = Ложь;
		Для Каждого СтрокаТЧ Из Объект.Суммы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				Объект.ВключатьВКнигуПокупок = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	// Рассчитываем разницу между тем, что рассчитали и тем, что есть по проводке AC
	ПрочиеСуммы = (- TranAmountПроводки) - Объект.Суммы.Итог("СуммаСНДС");  //Пахоменков
	
	Если ПрочиеСуммы <> 0 и Не Объект.WHT Тогда // Если есть расхождения с проводкой AC
		
		СтавкиНДС = Перечисления.СтавкиНДС;
		
		// Поймем, можем ли мы устранить эту ошибку округления
		МаксИзменениеСуммыСНДС = 0;
		Для Каждого Строка Из Объект.Суммы Цикл
			
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
			Если ЗначениеЗаполнено(ПроцентНДС) Тогда
				
				МаксИзменениеСуммыСНДС = МаксИзменениеСуммыСНДС + ПолучитьМаксимальноеИзменениеСуммыСНДС(Строка.СуммаСНДС, ПроцентНДС, ПрочиеСуммы);
							
			КонецЕсли;
						
		КонецЦикла;
		
		// Если можно устранить ошибку округления
		Если ПрочиеСуммы > 0 И ПрочиеСуммы <= МаксИзменениеСуммыСНДС
			ИЛИ ПрочиеСуммы < 0 И ПрочиеСуммы >= МаксИзменениеСуммыСНДС Тогда
			
			// Устраним ошибку округления
			Для Каждого Строка Из Объект.Суммы Цикл
				
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
				Если ЗначениеЗаполнено(ПроцентНДС) Тогда
					ТекИзменениеСуммыСНДС = ПолучитьМаксимальноеИзменениеСуммыСНДС(Строка.СуммаСНДС, ПроцентНДС, ПрочиеСуммы);	
				Иначе
					Продолжить;
				КонецЕсли;
								
				Если ПрочиеСуммы > 0 И ТекИзменениеСуммыСНДС > ПрочиеСуммы
					ИЛИ ПрочиеСуммы < 0 И ТекИзменениеСуммыСНДС < ПрочиеСуммы Тогда
					
					ТекИзменениеСуммыСНДС = ПрочиеСуммы;
					
				КонецЕсли;
										
				СтараяСуммаНДС = Строка.СуммаНДС;
				Строка.СуммаСНДС = Строка.СуммаСНДС + ТекИзменениеСуммыСНДС;
				ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Строка.ПолучитьИдентификатор());
				// РАДИ ИНТЕРЕСА, ПОТОМ УБРАТЬ!!!
				Если СтараяСуммаНДС <> Строка.СуммаНДС Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка при избавлении от ошибки округления: изменилась сумма НДС!");
				КонецЕсли;
				
				ПрочиеСуммы = ПрочиеСуммы - ТекИзменениеСуммыСНДС;
				
				// Если вся ошибка округления исправлена - выходим
				Если ПрочиеСуммы = 0 Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
						
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("СтавкаНДС");
		Если ПрочиеСуммы <> 0 Тогда 
			
			// Если ставок НДС несколько, по умолчанию кидаем разницу на Без НДС
			СтруктураПоиска.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаСумм = Объект.Суммы.НайтиСтроки(СтруктураПоиска);
			Если СтрокаСумм.Количество()=0 Тогда
				
				// В противном случае кидаем на прочую (пустую) ставку
				СтруктураПоиска.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаСумм = Объект.Суммы.НайтиСтроки(СтруктураПоиска);
				Если СтрокаСумм.Количество()=0 Тогда
					СтрокаСумм = Объект.Суммы.Добавить();
					СтрокаСумм.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
			//Добавила Федотова Л., РГ-Софт, 17.05.13, вопрос SLI-0003578
			Если ТипЗнч(СтрокаСумм) = Тип("Массив") Тогда
			    СтрокаСумм = СтрокаСумм[0];
			КонецЕсли;
			
			//-> Rg-Soft VIVanov 09/06/12
			СтрокаСумм.Период = Объект.НалоговыйПериод; 
			//<- Rg-Soft
			СтрокаСумм.СуммаСНДС = СтрокаСумм.СуммаСНДС + ПрочиеСуммы;
			ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(СтрокаСумм.ПолучитьИдентификатор());
			
			Если Объект.ТаможеннаяДекларация Тогда
				СтрокаСумм.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				
				Суммы = Объект.Суммы.Выгрузить();
				Суммы.Свернуть("СтавкаНДС","СуммаСНДС,СуммаСНДСРуб,СуммаБезНДС,СуммаБезНДСРуб,СуммаНДС,СуммаНДСРуб");
				Объект.Суммы.Загрузить(Суммы);
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли; // Если ПрочиеСуммы <> 0
	//изменил Трефиленков Дмитрий, 30.05.2011 по вопросу SLI001679
	Для Каждого СтрокаТЧ Из Объект.Суммы Цикл
		Если СтрокаТЧ.СтавкаНДС.Пустая() Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	//конец изменения //SLI001679
	
	//изменил Трефиленков Дмитрий, 30.05.2011 по вопросу SLI001691
	Если Объект.ТаможеннаяДекларация или Объект.WHT Тогда
		ВключатьВКнигуПокупок = Истина;
	КонецЕсли;
	//конец изменения //SLI001691
	
	Объект.РасхождениеСуммыСНДСИAC = Объект.Суммы.Итог("СуммаСНДС") + TranAmountПроводки; // Tran amount - отрицательная   
	
	//Добавила Федотова Л., РГ-Софт, 17.05.13, вопрос SLI-0003566
	Документ = РеквизитФормыВЗначение("Объект");	
	Документ.ДляZERУстановитьНольПроцентовВместоБезНДС(ТаблицаСтрокДеталей);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальноеИзменениеСуммыСНДС(СуммаСНДС, ПроцентНДС, Направление)
	
	ТочнаяСуммаНДС = СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС);
	Поправка = ?(Направление > 0, 0.0049, -0.0049);
	НоваяСуммаНДС = Окр(ТочнаяСуммаНДС, 2) + Поправка;
	МаксИзменениеНДС = НоваяСуммаНДС - ТочнаяСуммаНДС;
	МаксТочноеИзменениеСуммыСНДС = МаксИзменениеНДС * (100 + ПроцентНДС) / ПроцентНДС;	
	Возврат Цел(100*МаксТочноеИзменениеСуммыСНДС)/100;
	
КонецФункции

&НаКлиенте
Процедура ПроводкиDSSДеталейИзменитьTaxCode(Команда)

	НовыйTaxCode = Команда.Имя;
	текДанные = Элементы.ПроводкиDSSДеталей.ТекущиеДанные;
	Если текДанные <> Неопределено и текДанные.TaxCode <> НовыйTaxCode Тогда
		ИзменитьTaxCodeПроводкиDSSДеталей(текДанные.Ссылка, НовыйTaxCode);
	КонецЕсли;
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьTaxCodeПроводкиDSSДеталей(Проводка, TaxCode)
	
	текПроводка = Проводка.ПолучитьОбъект();
	текПроводка.TaxCode = TaxCode;
	
	Попытка
		текПроводка.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось записать """+текПроводка+"""!
		|" + ОписаниеОшибки());
	КонецПопытки;
	     	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПроверитьМодифицированность()
	
	Если Модифицированность или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
					
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось записать текущий документ!
				|" + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		  	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениямиПоУмолчанию()
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	Объект.ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
	Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента,Объект.Дата);
	Объект.КурсДокумента = СтруктураКурсаДокумента.Курс;
	
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(Объект);
	
	// Установим отбор на проводки DSS деталей
	ПроводкиDSSДеталей.Параметры.УстановитьЗначениеПараметра("Документ", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоПроводкеDSS()
	
	Если ЗначениеЗаполнено(Объект.ПроводкаDSS) Тогда 
		
		Если Объект.ПроводкаDSS.SourceCode <> "AC"  Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Source Code проводки DSS должен иметь значение ""AC""!");
			Объект.ПроводкаDSS = Неопределено;	
			
		Иначе 
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПроводкаDSS", Объект.ПроводкаDSS);
			Запрос.Текст = "ВЫБРАТЬ
			|	ПроводкаDSS.Номер,
			|	ПроводкаDSS.Дата,
			|	ПроводкаDSS.AccountLawson,
			|	ПроводкаDSS.AU,
			|	ПроводкаDSS.BaseAmount,
			|	ПроводкаDSS.DateLawson,
			|	ПроводкаDSS.Reference,
			|	ПроводкаDSS.Description,
			|	ПроводкаDSS.TranAmount,
			|	ПроводкаDSS.Currency,
			|	ПроводкаDSS.PeriodLawson,
			|	ПроводкаDSS.Company,
			|	ПроводкаDSS.Vendor,
			|	ПроводкаDSS.VendorVname,
			|	ПроводкаDSS.ApInvoice,
			|	ПроводкаDSS.CashCode,
			|	ПроводкаDSS.TaxCode,
			|	ПроводкаDSS.AktOfAcceptance,
			|	ПроводкаDSS.AktDateLawson
			|ИЗ
			|	Документ.ПроводкаDSS КАК ПроводкаDSS
			|ГДЕ
			|	ПроводкаDSS.Ссылка = &ПроводкаDSS";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			GltObjIdПроводки 		=  Выборка.Номер;
			CompanyПроводки			=  Выборка.Company;
			AUПроводки 				=  Выборка.AU;
			VendorПроводки 			=  Выборка.Vendor;
			VendorNameПроводки 		=  Выборка.VendorVname;
			APInvoiceПроводки 		=  Выборка.APInvoice;
			DateLawsonПроводки		=  Выборка.DateLawson;
			ReferenceПроводки 		=  Выборка.Reference;
			ПериодПроводки 			=  Выборка.Дата;
			AktOfAcceptanceПроводки =  Выборка.AktOfAcceptance;
			AktDateLawsonПроводки 	=  Выборка.AktDateLawson;
			CashCodeПроводки 		=  Выборка.CashCode;
			DescriptionПроводки 	=  Выборка.Description;
			TaxCodeПроводки 		=  Выборка.TaxCode;
			AccountLawsonПроводки 	=  Выборка.AccountLawson;
			CurrencyПроводки 		=  Выборка.Currency;
			TranAmountПроводки 		=  Выборка.TranAmount;
			BaseAmountПроводки      =  Выборка.BaseAmount;
			PostingDateПроводки     =  Выборка.PeriodLawson;
			Возврат;
			
		КонецЕсли;   
		
	КонецЕсли;

	GltObjIdПроводки	    =  Неопределено;
	CompanyПроводки			=  Неопределено;
	AUПроводки 				=  Неопределено;
	VendorПроводки 			=  Неопределено;
	VendorNameПроводки 		=  Неопределено;
	APInvoiceПроводки 		=  Неопределено;
	DateLawsonПроводки		=  Неопределено;
	ReferenceПроводки 		=  Неопределено;
	ПериодПроводки 			=  Неопределено;
	AktOfAcceptanceПроводки =  Неопределено;
	AktDateLawsonПроводки 	=  Неопределено;
	CashCodeПроводки 		=  Неопределено;
	DescriptionПроводки 	=  Неопределено;
	TaxCodeПроводки 		=  Неопределено;
	AccountLawsonПроводки 	=  Неопределено;
	CurrencyПроводки 		=  Неопределено;
	TranAmountПроводки 		=  Неопределено;
	BaseAmountПроводки      =  Неопределено;
	PostingDateПроводки     =  Неопределено;

КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииВалютыДокумента()
	
	СуммаРубДоступна = ?(Объект.ВалютаДокумента = ВалютаРуб, Ложь, Истина);
	
	Элементы.СуммаРубСНДС.Видимость = СуммаРубДоступна;
			
	Если СуммаРубДоступна Тогда 
		Элементы.КурсДокумента.Доступность = Не ЗначениеЗаполнено(Объект.СуммаРубСНДС);
	КонецЕсли;

КонецПроцедуры
      
////////////////////////////////////////////////////////////////////////////////////////////////
// ИНФОРМАЦИОННЫЕ НАДПИСИ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриИзмененииНалоговогоПериодаИЛИДатыПроведения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	РГСофт.УстановитьИнформационнуюНадписьНалоговыйПериод(Элементы.инфНадписьНалоговыйПериод, Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДаты()
	
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(Объект);
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

//-> RG-Soft VIvanov 17/06/13
&НаКлиенте
Процедура DeferredПриИзменении(Элемент)
	
	Если Не Объект.Deferred Тогда
		Объект.ДатаПроведения = НачалоМесяца(ТекущаяДата());
		Объект.НалоговыйПериод = ТекущаяДата();
		ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	КонецЕсли;
	
КонецПроцедуры
//<-

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтаФорма);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтаФорма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	                    
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтаФорма, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
		Сообщить("Проверка контрагентов невозможна");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	                              
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры
           
Процедура ОпределитьНаличиеНовыхОшибокВДокументе(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) 
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	ИначеЕсли ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументСОшибкой(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтаФорма, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтаФорма, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтИмениПриИзменении(Элемент)
	
	Элементы.Продавец.Видимость = ЗаполнитьОтИмени;
	
	Если НЕ ЗаполнитьОтИмени Тогда
		Объект.Продавец = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

