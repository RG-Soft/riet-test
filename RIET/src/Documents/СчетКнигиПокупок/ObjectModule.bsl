
Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Переменные кеша, инициализируются извне
//	нужны только для скорости при массовом создании документов, документ может работать и без них
Перем мНачалоОткрытогоНалоговогоПериода Экспорт; 
Перем мНачалоОткрытогоУправленческогоПериода Экспорт;
Перем мТаблицаКешКодов Экспорт;
Перем мТаблицаКонтрагентов Экспорт;

Перем мПровестиБезПроверок Экспорт; // Проведение документа без проверок
Перем мМенеджерВремТаблиц Экспорт; // Если мы массово привязываем проводки, то будет передана таблица непривязанных


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// ДОДЕЛАТЬ!!!
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// ++ КДС 20.07.2015 Контроль проведения
	// контроль проведения должен быть включен как для организации, так и для контрагента
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	КонтрольПроведенияСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	// -- КДС 20.07.2015 Контроль проведения
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ПроводкаDSS.DateLawson; //Пахоменков
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(Ваучер, СокрЛП(Ваучер));
	
	ОбщегоНазначения.УстановитьЗначение(СуммаДокументаСНДС, Суммы.Итог("СуммаСНДС"));
	ОбщегоНазначения.УстановитьЗначение(СуммаДокументаСНДСРуб, Суммы.Итог("СуммаСНДСРуб"));
	ОбщегоНазначения.УстановитьЗначение(СуммаДокументаБезНДС, Суммы.Итог("СуммаБезНДС"));
	ОбщегоНазначения.УстановитьЗначение(СуммаДокументаБезНДСРуб, Суммы.Итог("СуммаБезНДСРуб"));
	ОбщегоНазначения.УстановитьЗначение(СуммаНДСДокумента, Суммы.Итог("СуммаНДС"));
	ОбщегоНазначения.УстановитьЗначение(СуммаНДСДокументаРуб, Суммы.Итог("СуммаНДСРуб"));
	
	ОбщегоНазначения.УстановитьЗначение(СуммаРасхождения, ПолучитьСуммуРасхождения());
	ОбщегоНазначения.УстановитьЗначение(РасхождениеСуммыСНДСИAC, Суммы.Итог("СуммаСНДС") + ПроводкаDSS.TranAmount); // Tran amount - отрицательная  //Пахоменков
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номер) Тогда 
		ОбщегоНазначения.УстановитьНомерДокумента(ЭтотОбъект);
		УстановитьВремя(РежимАвтоВремя.Последним);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ОтвязатьПроводки(Отказ);
	КонецЕсли;
	
	//-> RG-Soft VIvanov 17/06/13
	СинхронизироватьПроводкиDSS();
	//<-
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + ЭтотОбъект + """:";
	
	// Сформируем структуру шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ПровестиБезПроверок") Тогда 
		мПровестиБезПроверок = ДополнительныеСвойства.ПровестиБезПроверок;
	КонецЕсли;
	
	// Проверим, нужно ли делать проверки при проведении
	//Закомментировала Федотова Л., РГ-Софт, 24.12.15, вопрос SLI-0006048
	//Если НЕ (ПараметрыСеанса.ГруппыТекущегоПользователя.Найти(Справочники.ГруппыПользователей.ВозможностьПроведенияДокументовКнигиПокупокБезПроверок) <> Неопределено
	Если мПровестиБезПроверок Тогда
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Проверим правильность заполнения ТЧ Суммы
		ПроверитьЗаполнениеТЧСуммы(Отказ, Заголовок);
		
	КонецЕсли;
	
	// Сформируем таблицу Суммы
	ТаблицаСуммы = СформироватьТаблицуСуммы();
	
	СтруктураШапкиДокумента.Вставить("СчетФактураБезНДС",(ТаблицаСуммы.Итог("СуммаНДСРуб") = 0));
	// { РГ-Софт Пахоменков А. 07.04.2015 условие на другой код вида операции
	Если ЗначениеЗаполнено(Продавец) Тогда
		СтруктураШапкиДокумента.Вставить("КодВидаОперации", "04");
	// { RGS MYurkevich 4/16/2015 2:16:25 PM - RCA-0000054
	ИначеЕсли ТаможеннаяДекларация Тогда
		СтруктураШапкиДокумента.Вставить("КодВидаОперации", "20");
	// } RGS MYurkevich 4/16/2015 2:17:04 PM - RCA-0000054
	Иначе
		СтруктураШапкиДокумента.Вставить("КодВидаОперации", "01");
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 07.04.2015
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСуммы, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТА

Процедура ЗаполнитьДокумент(Отказ = Ложь, Заголовок = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = "Заполнение счета книги покупок """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер; //Пахоменков
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(Отказ, Заголовок);
	ОбновитьСоставПроводокДеталейИЗаполнитьТЧСуммы(Отказ, Заголовок);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(Отказ = Ложь, Заголовок = "") Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = "Заполнение шапки документа """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер;  //пахоменков
	КонецЕсли;
		
	// Номер входящего документа
	НомерВходящегоДокумента = ПроводкаDSS.ApInvoice;   //Пахоменков
	Если НЕ ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		
		// Попробуем определить APInvoice по Description
		КоличествоСимволов = 7;
		Если Лев(ПроводкаDSS.Description, 2) = "OP" Тогда  //Пахоменков
			КоличествоСимволов = 6;
		КонецЕсли;
		НомерВходящегоДокумента = Прав(ПроводкаDSS.Description, СтрДлина(ПроводкаDSS.Description) - КоличествоСимволов);    //Пахоменков
		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ТекстОшибки = "Не удалось определить Номер входящего документа: в проводке AC заполнен ни AP invoice, ни Description!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	// Дата входящего документа
	ДатаВходящегоДокумента = ПроводкаDSS.DateLawson;  //Пахоменков
		
	// Дата документа
	Дата = ПроводкаDSS.DateLawson;  //Пахоменков

		
	Если НЕ ЗначениеЗаполнено(ПроводкаDSS.DateLawson) Тогда  //Пахоменков
		ТекстОшибки = "В проводке AC не заполнен Date!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
		
	// Налоговый период
	НалоговыйПериод = ПроводкаDSS.PeriodLawson;   //Пахоменков
	Если ЗначениеЗаполнено(мНачалоОткрытогоНалоговогоПериода) Тогда
		НачалоОткрытогоНалоговогоПериода = мНачалоОткрытогоНалоговогоПериода;
	Иначе
		НачалоОткрытогоНалоговогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоНалоговогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
	КонецЕсли;
	Если ЗначениеЗаполнено(НачалоОткрытогоНалоговогоПериода)
		И НалоговыйПериод < НачалоОткрытогоНалоговогоПериода Тогда
		НалоговыйПериод = НачалоОткрытогоНалоговогоПериода;
	КонецЕсли;
	
	// Дата проведения
	ДатаПроведения = ПроводкаDSS.Дата;   //Пахоменков
	Если ЗначениеЗаполнено(мНачалоОткрытогоУправленческогоПериода) Тогда
		НачалоОткрытогоУправленческогоПериода = мНачалоОткрытогоУправленческогоПериода
	Иначе
		НачалоОткрытогоУправленческогоПериода = НастройкаПравДоступа.ПолучитьНачалоОткрытогоУправленческогоПериодаМодуля(Перечисления.МодулиРазработки.PurchaseBook);
	КонецЕсли;
	Если ЗначениеЗаполнено(НачалоОткрытогоУправленческогоПериода)
		И ДатаПроведения < НачалоОткрытогоУправленческогоПериода Тогда
		ДатаПроведения = НачалоОткрытогоУправленческогоПериода;
	КонецЕсли;
		
	// Организация
	// СДЕЛАТЬ КЕШ ОРГАНИЗАЦИЙ!!!
	Организация = ПолучениеСсылок.ПолучитьОрганизациюПоCompany(ПроводкаDSS.Company); //Пахоменков
	
	// Подразделение
	Если ЗначениеЗаполнено(ПроводкаDSS.AU) Тогда  //Пахоменков
		ПодразделениеОрганизации = ПроводкаDSS.AU.TaxRegistration;	//Пахоменков		
	Иначе
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// Cash code
	CashCode = ПолучениеСсылок.ПолучитьCashCodeПоКодуСоздатьНовый(ПроводкаDSS.CashCode, мТаблицаКешКодов); //Пахоменков
		
	// Ваучер
	Ваучер = ПроводкаDSS.Reference;   //Пахоменков
			
	// Vendor проводки
	Vendor = ПроводкаDSS.Vendor;     //Пахоменков

	// Доработано Булавский для случаев с длиной кода 8 21.09.12
	
	// Попытаемся определить Vendor из Description 
	Если Не ЗначениеЗаполнено(Vendor) Тогда
		// Попробуем определить Vendor по Description
		// Не уверен, что контрагент всегда пустой в этой ситуации
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КоличествоСимволов = 8;
		Пока НЕ ЗначениеЗаполнено(Контрагент) И КоличествоСимволов > 5 Цикл
			Vendor = Лев(ПроводкаDSS.Description, КоличествоСимволов);
			Контрагент = ПолучениеСсылок.ПолучитьКонтрагентаПоLawsonID_КонтрагентLawson_НаименованиюEnglish(Vendor, ПроводкаDSS.VendorVname, мТаблицаКонтрагентов);
			КоличествоСимволов = КоличествоСимволов - 1;
		КонецЦикла;
	Иначе
		Контрагент = ПолучениеСсылок.ПолучитьКонтрагентаПоLawsonID_КонтрагентLawson_НаименованиюEnglish(Vendor, ПроводкаDSS.VendorVname, мТаблицаКонтрагентов);
	КонецЕсли;
		
	// Конец доработки Булавский
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Если контрагент не найдет - создадим его
		// ПЕРЕДЕЛАТЬ, КОГДА ЗАРАБОТАЕТ СПРАВОЧНИК КОНТРАГЕНТЫ LAWSON!!!
		НовыйКонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагентОбъект.Наименование = ПроводкаDSS.VendorVname;  //Пахоменков
		НовыйКонтрагентОбъект.LawsonID = Vendor;
		НовыйКонтрагентОбъект.НаименованиеEnglish = ПроводкаDSS.VendorVname;  //Пахоменков
		НовыйКонтрагентОбъект.Комментарий = "Создан автоматически при создании счетов книги покупок";
		НовыйКонтрагентОбъект.Родитель = Справочники.Контрагенты.НайтиПоНаименованию("Поставщики");
		//Добавила Федотова Л, РГ-Софт, 15.03.11 ->
		НовыйКонтрагентОбъект.КонтрагентLawson = Справочники.КонтрагентыLawson.НайтиПоКоду(Vendor);
		Попытка
			НовыйКонтрагентОбъект.Записать();
			Контрагент = НовыйКонтрагентОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать нового контрагента: " + ОписаниеОшибки(), , Заголовок);	
		КонецПопытки;
		
	КонецЕсли;	
	
	// Описание затрат
	ОписаниеЗатрат = ПолучениеСсылок.ПолучитьОписаниеЗатрат(ПроводкаDSS.AktOfAcceptance); //Пахоменков
		
	// Валюта документа
	ВалютаДокумента = ПроводкаDSS.Currency;  //Пахоменков
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ПересчитатьКурсДокумента();
			
	КонецЕсли;
		
КонецПроцедуры

// ДОДЕЛАТЬ!!!
Процедура ОбновитьСоставПроводокДеталейИЗаполнитьТЧСуммы(Отказ = Ложь, Заголовок = "") Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = "Отвязывание и привязывание заново проводок деталей к счету книги покупок """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер;  //Пахоменокв
	КонецЕсли;
	
	НачатьТранзакцию();
	Если НЕ ЭтоНовый() Тогда
		
		// Отвяжем старые проводки
		// ВСЕ ПРОВОДКИ ОТВЯЗЫВАТЬ ВОВСЕ НЕ ОБЯЗАТЕЛЬНО, ДОСТАТОЧНО ОТВЯЗАТЬ ТЕ, КОТОРЫЕ НЕ ПОДХОДЯТ!!!
		// НО ТОГДА НАДО НЕ ЗАБЫТЬ ПЕРЕЗАПОЛНЯТЬ ТЧ, ДАЖЕ ЕСЛИ НОВЫХ ПРОВОДОК НЕ НАЙДЕНО
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документ", Ссылка);
		//Пахоменков
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроводкаDSS.Ссылка
			|ИЗ
			|	Документ.ПроводкаDSS КАК ПроводкаDSS
			|ГДЕ
			|	ПроводкаDSS.Документ = &Документ
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	Документ.ПроводкаDSS";
		//<<			
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			ПустаяСсылка = Документы.СчетКнигиПокупок.ПустаяСсылка();
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); //Пахоменков 
				ДокументОбъект.Документ = ПустаяСсылка;  //Пахоменков     
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);//Пахоменков   
				Исключение
					ТекстОшибки = "Не удалось записать документ ""Проводка DSS"" """ + ДокументОбъект + """: " + ОписаниеОшибки();//Пахоменков
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ, Заголовок);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривязатьПроводкиИЗаполнитьТЧСуммы(Отказ = Ложь, Заголовок = "") Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = "Привязывание проводок деталей к счету книги покупок """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер;  //Пахоменков
	КонецЕсли;
	
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	//Пахоменков
	Запрос.УстановитьПараметр("Reference", ПроводкаDSS.Reference);
	Запрос.УстановитьПараметр("ApInvoice", ПроводкаDSS.ApInvoice);
	Запрос.УстановитьПараметр("Vendor", ПроводкаDSS.Vendor);
	Если мМенеджерВремТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = мМенеджерВремТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пустые.Ссылка КАК Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	Пустые.Reference = &Reference
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пустые.Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	(Пустые.Vendor ПОДОБНО ""%OP0399%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0114%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0355%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""E%"")
		|	И Пустые.ApInvoice = &ApInvoice
		|	И Пустые.Vendor = &Vendor
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроводкаDSS.Ссылка,
		|	ПроводкаDSS.Reference КАК Reference,
		|	ПроводкаDSS.Vendor КАК Vendor,
		|	ПроводкаDSS.ApInvoice
		|ПОМЕСТИТЬ Пустые
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.System = ""AP""
		|	И (ПроводкаDSS.Документ = ЗНАЧЕНИЕ(Документ.СчетКнигиПокупок.ПустаяСсылка)
		|			ИЛИ ПроводкаDSS.Документ ССЫЛКА Документ.ОперацияLawson
		|			ИЛИ ПроводкаDSS.Документ = НЕОПРЕДЕЛЕНО)
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Reference,
		|	Vendor
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пустые.Ссылка КАК Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	Пустые.Reference = &Reference
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пустые.Ссылка
		|ИЗ
		|	Пустые КАК Пустые
		|ГДЕ
		|	(Пустые.Vendor ПОДОБНО ""%OP0399%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0114%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""%OP0355%""
		|			ИЛИ Пустые.Vendor ПОДОБНО ""E%"")
		|	И Пустые.ApInvoice = &ApInvoice
		|	И Пустые.Vendor = &Vendor
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
	КонецЕсли;
	//<<	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		// Если документ еще не записан - запишем его
		Если ЭтоНовый() Тогда
			
			Попытка
				Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстОшибки = "Не удалось записать счет книги покупок """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер + ": " + ОписаниеОшибки();  //Пахоменков
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		МассивПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, ЭтотОбъект, Отказ, Заголовок);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// ДУМАТЬ!!!
Процедура ЗаполнитьТЧСуммыПоПривязаннымПроводкам(Отказ = Ложь, Заголовок="") Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ новый - то к нему не может быть привязано проводок
	//	поэтому можно сразу выйти
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = "Заполнение табличной части счета книги покупок """ + ЭтотОбъект + """ с GltObjId = " + ПроводкаDSS.Номер + " по привязанным проводкам";  //Пахоменков
	КонецЕсли;
		
	Суммы.Очистить();
	
	// А ЕСЛИ ПРОВОДКИ В ДРУГОЙ ВАЛЮТЕ???
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	//Пахоменков
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.TaxCode,
		|	ПроводкаDSS.AccountLawson,
		|	ПроводкаDSS.TranAmount,
		|	ПроводкаDSS.PeriodLawson
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Документ
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|	И (НЕ(ПроводкаDSS.Документ.WHT
		|				И ПроводкаDSS.AccountLawson.Код = ""208655""))";
	//<<	
	Результат = Запрос.Выполнить();
	
	// Если привязанных проводок не нашли - выходим
	Если Результат.Пустой() Тогда
		ВключатьВКнигуПокупок = Ложь;
		Возврат;
	КонецЕсли;
		
	ТаблицаСтрокДеталей = Результат.Выгрузить();
	
	ТаможеннаяДекларация = Ложь;
	
	// Заполним суммы НДС в ТЧ Суммы
	Для Каждого СтрокаТаблицыДеталей Из ТаблицаСтрокДеталей Цикл
		
		// Сумма НДС заполняется, если счет строки AD начинается с 1402
		Если Лев(СтрокаТаблицыДеталей.AccountLawson.Код, 4) = "1402" Тогда
			
			СтавкаНДС = ПолучениеСсылок.ПолучитьСтавкуНДСИзTaxCode(СтрокаТаблицыДеталей.TaxCode);
			
			//-> RG-Soft VIvanov 08/06/12 - добавлен отбор по периоду
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("СтавкаНДС", СтавкаНДС);
			ОтборСтрок.Вставить("Период", СтрокаТаблицыДеталей.PeriodLawson);
			СтрокиТЧ = Суммы.НайтиСтроки(ОтборСтрок);
			Если СтрокиТЧ.Количество() = 0 Тогда
				СтрокаТЧ = Суммы.Добавить();
				СтрокаТЧ.СтавкаНДС = СтавкаНДС;
				СтрокаТЧ.Период = СтрокаТаблицыДеталей.PeriodLawson;
			КонецЕсли;
			//<- RG-Soft
			
			СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС + СтрокаТаблицыДеталей.TranAmount;
			
		КонецЕсли;
		
		Если СтрокаТаблицыДеталей.TaxCode = "RUMOSVTCST"
			ИЛИ СтрокаТаблицыДеталей.TaxCode = "RUSAKVTCST" Тогда
			ТаможеннаяДекларация = Истина;
		КонецЕсли;
					
	КонецЦикла;
	
	// Расчитываем суммы
	Для Каждого СтрокаТЧ Из Суммы Цикл	
		ПриИзмененииСуммыНДСВСтрокеТЧСуммы(СтрокаТЧ);
	КонецЦикла;
	
	Если ТаможеннаяДекларация Тогда
		
		КорректировкаРасхожденияСуммыСНДСИAC = РасхождениеСуммыСНДСИAC;
				
	Иначе
		
		// Определим необходимость включения в книгу покупок
		ВключатьВКнигуПокупок = Ложь;
		Для Каждого СтрокаТЧ Из Суммы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				ВключатьВКнигуПокупок = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	// Рассчитываем разницу между тем, что рассчитали и тем, что есть по проводке AC
	ПрочиеСуммы = (- ПроводкаDSS.TranAmount) - Суммы.Итог("СуммаСНДС");  //Пахоменков
	
	Если ПрочиеСуммы <> 0 и Не WHT Тогда // Если есть расхождения с проводкой AC
		
		СтавкиНДС = Перечисления.СтавкиНДС;
		
		// Поймем, можем ли мы устранить эту ошибку округления
		МаксИзменениеСуммыСНДС = 0;
		Для Каждого Строка Из Суммы Цикл
			
			ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
			Если ЗначениеЗаполнено(ПроцентНДС) Тогда
				
				МаксИзменениеСуммыСНДС = МаксИзменениеСуммыСНДС + ПолучитьМаксимальноеИзменениеСуммыСНДС(Строка.СуммаСНДС, ПроцентНДС, ПрочиеСуммы);
							
			КонецЕсли;
						
		КонецЦикла;
		
		// Если можно устранить ошибку округления
		Если ПрочиеСуммы > 0 И ПрочиеСуммы <= МаксИзменениеСуммыСНДС
			ИЛИ ПрочиеСуммы < 0 И ПрочиеСуммы >= МаксИзменениеСуммыСНДС Тогда
			
			// Устраним ошибку округления
			Для Каждого Строка Из Суммы Цикл
				
				ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
				Если ЗначениеЗаполнено(ПроцентНДС) Тогда
					ТекИзменениеСуммыСНДС = ПолучитьМаксимальноеИзменениеСуммыСНДС(Строка.СуммаСНДС, ПроцентНДС, ПрочиеСуммы);	
				Иначе
					Продолжить;
				КонецЕсли;
								
				Если ПрочиеСуммы > 0 И ТекИзменениеСуммыСНДС > ПрочиеСуммы
					ИЛИ ПрочиеСуммы < 0 И ТекИзменениеСуммыСНДС < ПрочиеСуммы Тогда
					
					ТекИзменениеСуммыСНДС = ПрочиеСуммы;
					
				КонецЕсли;
										
				СтараяСуммаНДС = Строка.СуммаНДС;
				Строка.СуммаСНДС = Строка.СуммаСНДС + ТекИзменениеСуммыСНДС;
				ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Строка);
				// РАДИ ИНТЕРЕСА, ПОТОМ УБРАТЬ!!!
				Если СтараяСуммаНДС <> Строка.СуммаНДС Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при избавлении от ошибки округления: изменилась сумма НДС!", , Заголовок);
				КонецЕсли;
				
				ПрочиеСуммы = ПрочиеСуммы - ТекИзменениеСуммыСНДС;
				
				// Если вся ошибка округления исправлена - выходим
				Если ПрочиеСуммы = 0 Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
						
		КонецЕсли;
			
		Если ПрочиеСуммы <> 0 Тогда 
			
			// Если ставок НДС несколько, по умолчанию кидаем разницу на Без НДС
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаСумм = Суммы.Найти(СтавкаНДС, "СтавкаНДС");
			Если СтрокаСумм = Неопределено Тогда
				
				// В противном случае кидаем на прочую (пустую) ставку
				СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаСумм = Суммы.Найти(СтавкаНДС, "СтавкаНДС");
				Если СтрокаСумм = Неопределено Тогда
					СтрокаСумм = Суммы.Добавить();
					СтрокаСумм.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
			//-> Rg-Soft VIVanov 09/06/12
			СтрокаСумм.Период = НалоговыйПериод; 
			//<- Rg-Soft
			СтрокаСумм.СуммаСНДС = СтрокаСумм.СуммаСНДС + ПрочиеСуммы;
			ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(СтрокаСумм);
			
			Если ТаможеннаяДекларация Тогда
				СтрокаСумм.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				Суммы.Свернуть("СтавкаНДС","СуммаСНДС,СуммаСНДСРуб,СуммаБезНДС,СуммаБезНДСРуб,СуммаНДС,СуммаНДСРуб");
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли; // Если ПрочиеСуммы <> 0
	//изменил Трефиленков Дмитрий, 30.05.2011 по вопросу SLI001679
	Для Каждого СтрокаТЧ Из Суммы Цикл
		Если СтрокаТЧ.СтавкаНДС.Пустая() Тогда
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	//конец изменения //SLI001679
	
	//изменил Трефиленков Дмитрий, 30.05.2011 по вопросу SLI001691
	Если ТаможеннаяДекларация или WHT Тогда
		ВключатьВКнигуПокупок = Истина;
	КонецЕсли;
	//конец изменения //SLI001691
	
	РасхождениеСуммыСНДСИAC = Суммы.Итог("СуммаСНДС") + ПроводкаDSS.TranAmount; // Tran amount - отрицательная   // пахоменков
	
	//Добавила Федотова Л., РГ-Софт, 17.05.13, вопрос SLI-0003566
	ДляZERУстановитьНольПроцентовВместоБезНДС(ТаблицаСтрокДеталей);
	
КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 17.05.13, вопрос SLI-0003566
Процедура ДляZERУстановитьНольПроцентовВместоБезНДС(ТаблицаСтрокДеталей) Экспорт
	
	КоличествоСтрокДеталей = ТаблицаСтрокДеталей.Количество();
	Если КоличествоСтрокДеталей > 0 Тогда
		ПоследняяСтрокаДеталей = ТаблицаСтрокДеталей[КоличествоСтрокДеталей - 1];
	    Если Прав(ПоследняяСтрокаДеталей.TaxCode,3) = "ZER" Тогда
			Для каждого Строка Из Суммы Цикл
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьМаксимальноеИзменениеСуммыСНДС(СуммаСНДС, ПроцентНДС, Направление)
	
	ТочнаяСуммаНДС = СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС);
	Поправка = ?(Направление > 0, 0.0049, -0.0049);
	НоваяСуммаНДС = Окр(ТочнаяСуммаНДС, 2) + Поправка;
	МаксИзменениеНДС = НоваяСуммаНДС - ТочнаяСуммаНДС;
	МаксТочноеИзменениеСуммыСНДС = МаксИзменениеНДС * (100 + ПроцентНДС) / ПроцентНДС;	
	Возврат Цел(100*МаксТочноеИзменениеСуммыСНДС)/100;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ДОКУМЕНТА

Процедура ПересчитатьКурсДокумента() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	PostingDate = ПроводкаDSS.PeriodLawson;
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НовыйКурсДокумента = 1;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			ДатаКурса = PostingDate;
		КонецЕсли;
		
		Если ДатаВходящегоДокумента >= Дата('20120401') Тогда
			ДатаКурса = ДатаВходящегоДокумента;
		Иначе
			Если НачалоКвартала(ДатаВходящегоДокумента) < НачалоКвартала(PostingDate) Тогда
				ДатаКурса = PostingDate;
			Иначе
				ДатаКурса = ДатаВходящегоДокумента;
			КонецЕсли;
		КонецЕсли;
			
		СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
		НовыйКурсДокумента = СтруктураКурса.Курс / СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Если НовыйКурсДокумента <> КурсДокумента Тогда
		
		КурсДокумента = НовыйКурсДокумента;
		ПриИзмененииКурсаДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьPostingDateПроводки()
	
	Возврат ПроводкаDSS.PeriodLawson;
	
КонецФункции
           	
Процедура ПриИзмененииКурсаДокумента() Экспорт
	
	СуммаДокументаСНДСРуб = СуммаДокументаСНДС * КурсДокумента;
	СуммаДокументаБезНДСРуб = СуммаДокументаБезНДС * КурсДокумента;
	
	Для Каждого Строка Из Суммы Цикл
		
		ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка)
	
	Строка.СуммаСНДСРуб = Строка.СуммаСНДС * КурсДокумента;
	Строка.СуммаБезНДСРуб = Строка.СуммаБезНДС * КурсДокумента;
	Строка.СуммаНДСРуб = Строка.СуммаНДС * КурсДокумента;
	
КонецПроцедуры

Процедура ПриИзмененииСтавкиНДСВСтрокеТЧСуммы(Строка) Экспорт
		
	Если ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
		ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Строка);
	ИначеЕсли ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
		ПриИзмененииСуммыНДСВСтрокеТЧСуммы(Строка);
	ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
		ПриИзмененииСуммыБезНДСВСтрокеТЧСуммы(Строка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСуммыСНДСВСтрокеТЧСуммы(Строка) Экспорт
			
	Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		
		ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		Строка.СуммаНДС = Строка.СуммаСНДС * ПроцентНДС / (100 + ПроцентНДС);
		Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
			Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
			Строка.СуммаНДС = Строка.СуммаСНДС - Строка.СуммаБезНДС;
		Иначе
			Строка.СуммаБезНДС = Строка.СуммаСНДС;
		КонецЕсли;
		
		//Добавил Трефиленков Дмитрий, 16 августа 2010, вопросы №SLI001508, №SLI001507
		Если Строка.СуммаБезНДС <> 0 Тогда 
			Ставка = Строка.СуммаНДС/Строка.СуммаБезНДС;
			Если Ставка > 0.179 И Ставка < 0.181 Тогда
				Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ВключатьВКнигуПокупок = Истина;
			КонецЕсли;
		КонецЕсли;
		//конец добавления
		
	КонецЕсли;
	
	РасхождениеСуммыСНДСИAC = Суммы.Итог("СуммаСНДС") + ПроводкаDSS.TranAmount; // Tran amount - отрицательная //Пахоменков
	
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
		
КонецПроцедуры

Процедура ПриИзмененииСуммыБезНДСВСтрокеТЧСуммы(Строка) Экспорт
	
	Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда

		ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);	
		Строка.СуммаНДС = Строка.СуммаБезНДС * ПроцентНДС / 100;
		Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
			Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
			Строка.СуммаНДС = Строка.СуммаСНДС - Строка.СуммаБезНДС;
		Иначе
			Строка.СуммаСНДС = Строка.СуммаБезНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	РасхождениеСуммыСНДСИAC = Суммы.Итог("СуммаСНДС") + ПроводкаDSS.TranAmount; // Tran amount - отрицательная//Пахоменков
			
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
	
КонецПроцедуры

Процедура ПриИзмененииСуммыНДСВСтрокеТЧСуммы(Строка) Экспорт
	
	ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
	МожноВычислитьПоСтавке = ЗначениеЗаполнено(ПроцентНДС);
		
	Если МожноВычислитьПоСтавке Тогда
		
		Строка.СуммаБезНДС = Строка.СуммаНДС * 100 / ПроцентНДС;
		Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.СуммаСНДС) Тогда
			Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
		ИначеЕсли ЗначениеЗаполнено(Строка.СуммаБезНДС) Тогда
			Строка.СуммаСНДС = Строка.СуммаБезНДС + Строка.СуммаНДС;
		КонецЕсли;
	
	КонецЕсли;
	
	РасхождениеСуммыСНДСИAC = Суммы.Итог("СуммаСНДС") + ПроводкаDSS.TranAmount; // Tran amount - отрицательная//Пахоменков
	
	ПересчитатьСуммыРубВСтрокеТЧСуммы(Строка);
	
КонецПроцедуры

Функция ВалютаДокументаРубли() Экспорт 
	
	Если ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	        	
КонецФункции

Процедура ПриИзмененииСуммыРубсНДСДокумента() Экспорт
	
	Если Суммы.Количество() > 0 Тогда 
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(Суммы.ВыгрузитьКолонку("СуммаСНДС"), СуммаРубСНДС, Суммы, "СуммаСНДСРуб");
		
		Для Каждого Строка из Суммы Цикл
			
			Строка.СуммаНДСРуб    = УчетНДС.ОпределитьСуммуНДС(Строка.СуммаСНДСРуб,Строка.СтавкаНДС);
			Строка.СуммаБезНДСРуб = Строка.СуммаСНДСРуб - Строка.СуммаНДСРуб;
			
		КонецЦикла;
		
		СуммаДокументаСНДСРуб   = СуммаРубСНДС;
		СуммаДокументаБезНДСРуб = Суммы.Итог("СуммаБезНДСРуб");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ОБЕСПЕЧИВАЮЩИЕ ЗАПИСЬ И ПРОВЕДЕНИЕ ДОКУМЕНТА

Функция ПолучитьСуммуРасхождения()
	
	Если ЭтоНовый() Тогда
		Возврат (-ПроводкаDSS.TranAmount);//Пахоменков
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Currency", ПроводкаDSS.Currency);  //Пахоменков
	//Пахоменков
	//Условие на /AD/ обязательно, иначе находящаяся в провокдах DSS /AC/ превратит результат в ноль 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПроводкаDSS.TranAmount), 0) КАК TranAmount,
		|	ЕСТЬNULL(СУММА(ПроводкаDSS.BaseAmount), 0) КАК BaseAmount,
		|	СУММА(ВЫБОР
		|			КОГДА ПроводкаDSS.Currency = &Currency
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Валюта
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|	И (НЕ ПроводкаDSS.ПометкаУдаления)
		|	И ПроводкаDSS.SourceCode <> ""AC""";
		//<<
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Валюта = 0 Тогда
		Возврат (-ПроводкаDSS.TranAmount) - Выборка.TranAmount; //Пахоменков 
	Иначе
		Возврат (-ПроводкаDSS.TranAmount) - Выборка.BaseAmount;  //Пахоменков
	КонецЕсли;
	
КонецФункции

Процедура ОтвязатьПроводки(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ новый - к нему не может быть привязано проводок, выходим
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = "Отвязывание проводок от документа """ + ЭтотОбъект + """";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	//Пахоменков
		"ВЫБРАТЬ
		|	ПроводкаDSS.Ссылка
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Ссылка
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.ПроводкаDSS";
	//<<	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивПроводок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		МеханизмыКнигиПокупок.ПереброситьПроводкиКнигиПокупокНаДокумент(МассивПроводок, Документы.СчетКнигиПокупок.ПустаяСсылка(), Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуСуммы()
	
	ТаблицаСуммы = Суммы.Выгрузить();
	//-> RG-Soft VIvanov 10/06/12
	//ТаблицаСуммы.Свернуть("СтавкаНДС", "СуммаСНДС, СуммаСНДСРуб, СуммаБезНДС, СуммаБезНДСРуб, СуммаНДС, СуммаНДСРуб");
	// { RGS MYurkevich 20.07.2015 16:38:24 - RCA-0000071
	//ТаблицаСуммы.Свернуть("СтавкаНДС, Период", "СуммаСНДС, СуммаСНДСРуб, СуммаБезНДС, СуммаБезНДСРуб, СуммаНДС, СуммаНДСРуб");
	ТаблицаСуммы.Свернуть("СтавкаНДС, Период, ПоступлениеТоваровИУслуг", "СуммаСНДС, СуммаСНДСРуб, СуммаБезНДС, СуммаБезНДСРуб, СуммаНДС, СуммаНДСРуб");
	// } RGS MYurkevich 20.07.2015 16:38:36 - RCA-0000071
	//<- Rg-Soft
	
	Возврат ТаблицаСуммы;
		
КонецФункции

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
		
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ДатаПроведения");
	СтруктураОбязательныхПолей.Вставить("НалоговыйПериод");	
	СтруктураОбязательныхПолей.Вставить("Ваучер");
	СтруктураОбязательныхПолей.Вставить("ДатаВходящегоДокумента");
	СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
	СтруктураОбязательныхПолей.Вставить("КурсДокумента");
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок, Истина, Истина);
		
	// Выполним более сложные проверки
	
	// Организация
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "Организация", "Заполните реквизит по значению ""Company"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	КонецЕсли;
	
	// Контрагент
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) Тогда
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "Контрагент", "Найдите или создайте контрагента по реквизитам ""Vendor"" или ""VendorName"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	КонецЕсли;	
			
	// Номер входящего документа
	Если СокрЛП(СтруктураШапкиДокумента.НомерВходящегоДокумента) = "" Тогда
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "НомерВходящегоДокумента", , Отказ, Истина, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) И ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации)
		И СтруктураШапкиДокумента.ПодразделениеОрганизации.Владелец <> СтруктураШапкиДокумента.Организация Тогда
		
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаЗаполненНеправильно(ЭтотОбъект, "Подразделение организации", "Организация-владелец подразделения не совпадает с организацией, указанной в шапке", , Отказ, Истина, Заголовок);
		
	КонецЕсли;
	
	// Проверим привязанные проводки
	Если СуммаРасхождения <> 0 И НЕ ЗагруженИзExcel Тогда
		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаЗаполненНеправильно(ЭтотОбъект, "Проводки DSS", 1, "Соотношение проводок", "Сумма проводок AD не совпадает с суммой проводки AC", "Воспользуйтесь обработкой ""Привязывание проводок DSS к счетам книги покупок""", Отказ, Истина, Заголовок);
	КонецЕсли;
	
	//Если РасхождениеСуммыСНДСИAC - КорректировкаРасхожденияСуммыСНДСИAC <> 0 Тогда
	Если РасхождениеСуммыСНДСИAC <> 0 и Не WHT Тогда   //изменила условие Л. Федотова, РГ-Софт, 26.08.11
		ТекстОшибки = "Сумма с НДС расходится с суммой проводки AC!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	// проверим, что для Не WHT нет счет-фактуры 
	СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный", Ложь,Ложь,Неопределено,Истина);
    Если Не WHT и СчетФактура <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счет-фактура выданный может быть выписан только на основании уплаты агентского НДС (WHT),
		| необходимо пометить на удаление " + СчетФактура + ", либо установить признак ""WHT"".");
	КонецЕсли;
	
	//ДвиженияПоПроводкамDSS = Движения.ПроводкиDSSОбщие;
	//ДвиженияПоПроводкамDSS.Прочитать();
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ПроводкиDSSОбщие", ДвиженияПоПроводкамDSS);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПроводкиDSSОбщие.GltObjId,
	//	|	ПроводкиDSSОбщие.TranAmount
	//	|ПОМЕСТИТЬ ПроводкиDSSОбщие
	//	|ИЗ
	//	|	&ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПроводкиDSSОбщие.GltObjId,
	//	|	ПроводкиDSSОбщие.TranAmount,
	//	|	ПроводкиDSSДетали.SourceCode
	//	|ИЗ
	//	|	ПроводкиDSSОбщие КАК ПроводкиDSSОбщие
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроводкиDSSДетали КАК ПроводкиDSSДетали
	//	|		ПО ПроводкиDSSОбщие.GltObjId = ПроводкиDSSДетали.GltObjId";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//СуммаПроводкиAC = 0;
	//СуммаПроводокAD = 0;
	//НомерСтроки = 0;
	//Пока Выборка.Следующий() Цикл
	//	
	//	НомерСтроки = НомерСтроки + 1;
	//	
	//	Если Выборка.SourceCode = "AC" Тогда
	//		
	//		Если СуммаПроводкиAC <> 0 Тогда
	//			УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаЗаполненНеправильно(ЭтотОбъект, "Проводки DSS", НомерСтроки, "Проводка AC", "Найдено несколько проводок AC, привязанных к документу!", , Отказ, Истина, Заголовок); 
	//		КонецЕсли;
	//		
	//		// Проводки AC идут с минусом
	//		СуммаПроводкиAC = СуммаПроводкиAC - Выборка.TranAmount;
	//		
	//	ИначеЕсли Выборка.SourceCode = "AD"
	//		ИЛИ Выборка.SourceCode = "XC"
	//		ИЛИ Выборка.SourceCode = "ZB" Тогда
	//		
	//		СуммаПроводокAD = СуммаПроводокAD + Выборка.TranAmount;
	//		
	//	Иначе
	//		
	//		УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаЗаполненНеправильно(ЭтотОбъект, "Проводки DSS", НомерСтроки, "Проводка AD / XC / ZB", "К документу привязана проводка с неизвестным Source code (" + Выборка.SourceCode + ")", , Отказ, Истина, Заголовок);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// ДОДЕЛАТЬ!!!
Процедура ПроверитьЗаполнениеТЧСуммы(Отказ, Заголовок)
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("СуммаСНДС");
	СтруктураОбязательныхПолей.Вставить("СуммаСНДСРуб");
	Если ВключатьВКнигуПокупок Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаБезНДС");
		СтруктураОбязательныхПолей.Вставить("СуммаБезНДСРуб");
	КонецЕсли;
		
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Суммы", СтруктураОбязательныхПолей, Отказ, Заголовок, , Истина, Истина);
	
	СтавкиНДС = Перечисления.СтавкиНДС;
	Для Каждого Строка Из Суммы Цикл
		
		Если Строка.СтавкаНДС = СтавкиНДС.НДС18
			ИЛИ Строка.СтавкаНДС = СтавкиНДС.НДС10
			ИЛИ Строка.СтавкаНДС = СтавкиНДС.НДС10_110 
			ИЛИ Строка.СтавкаНДС = СтавкиНДС.НДС18_118
			ИЛИ Строка.СтавкаНДС = СтавкиНДС.НДС20
			ИЛИ Строка.СтавкаНДС = СтавкиНДС.НДС20_120 Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.СуммаНДС) Тогда
				УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаНеЗаполнен(ЭтотОбъект, "Суммы", Строка.НомерСтроки, "СуммаНДС", , Отказ, Истина, Заголовок); 
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СуммаНДСРуб) Тогда
				УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВТЧТипаНеЗаполнен(ЭтотОбъект, "Суммы", Строка.НомерСтроки, "СуммаНДСРуб", , Отказ, Истина, Заголовок);
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			
			Если Строка.СуммаСНДС >= 0.49 ИЛИ Строка.СуммаСНДС <= -0.49 Тогда
				ТекстОшибки = "В строке номер """ + Строка.НомерСтроки + """ табличной части ""Суммы"": Не заполнено значение реквизита ""Ставка НДС""!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// СДЕЛАТЬ ПРОВЕРКИ НА СООТНОШЕНИЯ СУММ ОТНОСИТЕЛЬНО КУРСА
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСуммы, Отказ, Заголовок);
	// { RGS MYurkevich 22.07.2015 14:14:46 - RCA-0000071
	НеПисатьВЖурнал = Ложь;
	// } RGS MYurkevich 22.07.2015 14:15:57 - RCA-0000071
	// Отразим неоплаченные остатки по ваучерам
	Движение = Движения.НеоплаченныеОстаткиПоВаучерам.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = СтруктураШапкиДокумента.ДатаПроведения;
	Движение.Ваучер = СтруктураШапкиДокумента.Ваучер;
	Движение.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
	Движение.Сумма = СтруктураШапкиДокумента.СуммаДокументаСНДС;
	Движение.СуммаРуб = СтруктураШапкиДокумента.СуммаДокументаСНДСРуб;
	
	ДвиженияПоНДСПредъявленному = Движения.НДСПредъявленный;
	ДвиженияПоНДСНачисленному = Движения.НДСНачисленный;
	
	Если Корректировочный Тогда
		
		//-> RG-Soft VIvanov 17/06/13
		Если не Deferred Тогда
		//<-
		Для Каждого Строка ИЗ ТаблицаСуммы Цикл
			
			Если Строка.СуммаНДСРуб > 0 Тогда
				Движение = ДвиженияПоНДСПредъявленному.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Если Не ЗначениеЗаполнено(Строка.Период) Тогда
					Движение.Период = СтруктураШапкиДокумента.НалоговыйПериод;
					Движение.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод;
				Иначе
					Движение.Период = Строка.Период;
					Движение.НалоговыйПериод = Строка.Период;
				КонецЕсли;
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
				Если WHT Тогда
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.АгентскийНДС;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;  
				//Обновление рег. Отчетности на бух. Корп 3.0.38.39
				ИначеЕсли ТаможеннаяДекларация Тогда
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи; 
				//<=
				Иначе	
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;  
				КонецЕсли; 
				Движение.Валюта = ВалютаДокумента;
				// { RGS MYurkevich 20.07.2015 16:33:58 - RCA-0000071
				//Движение.СчетФактура = Ссылка;
				Движение.СчетФактура = ?(ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг), Строка.ПоступлениеТоваровИУслуг, Ссылка);
				// } RGS MYurkevich 20.07.2015 16:34:12 - RCA-0000071
				Движение.СтавкаНДС = Строка.СтавкаНДС;
				Движение.Поставщик = СтруктураШапкиДокумента.Контрагент;
				Движение.СуммаБезНДС = Строка.СуммаБезНДСРуб;
				Движение.НДС = Строка.СуммаНДСРуб;
				Движение.СуммаБезНДСВВалюте = Строка.СуммаБезНДС;
				Движение.НДСВВалюте = Строка.СуммаНДС;
			Иначе
				
				Движение = ДвиженияПоНДСНачисленному.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Если Не ЗначениеЗаполнено(Строка.Период) Тогда
					Движение.Период = СтруктураШапкиДокумента.ДатаПроведения;
					Движение.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод;
				Иначе
					Движение.Период = Строка.Период;
					Движение.НалоговыйПериод = Строка.Период;
				КонецЕсли;
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
				Движение.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
				Движение.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
				Движение.Валюта = ВалютаДокумента;
				// { RGS MYurkevich 20.07.2015 16:33:58 - RCA-0000071
				//Движение.СчетФактура = Ссылка;
				Движение.СчетФактура = ?(ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг), Строка.ПоступлениеТоваровИУслуг, Ссылка);
				// } RGS MYurkevich 20.07.2015 16:34:12 - RCA-0000071
				Движение.СтавкаНДС = Строка.СтавкаНДС;
				Движение.Покупатель = СтруктураШапкиДокумента.Контрагент;
				Движение.СуммаБезНДС = -Строка.СуммаБезНДСРуб;
				Движение.НДС = -Строка.СуммаНДСРуб;
				Движение.СуммаБезНДСВВалюте = -Строка.СуммаБезНДС;
				Движение.НДСВВалюте = -Строка.СуммаНДС;
				
			КонецЕсли;		
		КонецЦикла;
		
		//-> RG-Soft VIvanov 17/06/13
		КонецЕсли;
		//<-
		
	ИначеЕсли ВключатьВКнигуПокупок Тогда
		//-> RG-Soft VIvanov 17/06/13
		Если не Deferred Тогда
		//<-
		
		//Движения по НДС предъявленному
		
		// Отразим записи, которые должны попасть в формирование записей книги покупок
		Для Каждого Строка ИЗ ТаблицаСуммы Цикл
			
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда //Добавил Трефиленков Дмитрий, 05.05.2011, вопрос SLI001679
				Движение = ДвиженияПоНДСПредъявленному.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				//-> RG-Soft VIvanov 08/06/12
				Если Не ЗначениеЗаполнено(Строка.Период) Тогда
					Движение.Период = СтруктураШапкиДокумента.НалоговыйПериод; // Изменил Булавский Анатолий 23_11_2011
					Движение.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод; //добавила Федотова Л., РГ-Софт, 06.04.10
				Иначе
					Движение.Период = Строка.Период;
					Движение.НалоговыйПериод = Строка.Период;
				КонецЕсли;
				//<- RG-Soft
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
				// { RGS MYurkevich 22.07.2015 14:10:57 - 
				Если ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг) Тогда
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы; 
				// } RGS MYurkevich 22.07.2015 14:10:57 - 
				ИначеЕсли WHT Тогда
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.АгентскийНДС;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;  
				//Обновление рег. Отчетности на бух. Корп 3.0.38.39
				ИначеЕсли ТаможеннаяДекларация Тогда
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи; 
				//<=
				Иначе	
					Движение.ВидВычета = Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
					Движение.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;  
				КонецЕсли; 
				Движение.Валюта = ВалютаДокумента;
				// { RGS MYurkevich 20.07.2015 16:33:58 - RCA-0000071
				//Движение.СчетФактура = Ссылка;
				Движение.СчетФактура = ?(ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг), Строка.ПоступлениеТоваровИУслуг, Ссылка);
				// } RGS MYurkevich 20.07.2015 16:34:12 - RCA-0000071
				Движение.СтавкаНДС = Строка.СтавкаНДС;
				Движение.Поставщик = СтруктураШапкиДокумента.Контрагент;
				Движение.СуммаБезНДС = Строка.СуммаБезНДСРуб;
				// А ЕСЛИ НДС 0%???
				Движение.НДС = Строка.СуммаНДСРуб;
				//Добавила Федотова Л., РГ-Софт, 06.04.10 ->
				Движение.СуммаБезНДСВВалюте = Строка.СуммаБезНДС;
				Движение.НДСВВалюте = Строка.СуммаНДС;
				//Движение.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			КонецЕсли;	
			// { RGS MYurkevich 22.07.2015 14:14:46 - RCA-0000071
			Если ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг) Тогда
			    НеПисатьВЖурнал = Истина;
			КонецЕсли;
			// } RGS MYurkevich 22.07.2015 14:15:57 - RCA-0000071
		КонецЦикла;
		//-> RG-Soft VIvanov 17/06/13
		КонецЕсли;
		//<-
	КонецЕсли;
	
	//Добавила Федотова Л., РГ-Софт, 06.04.10 ->
	Если СтруктураШапкиДокумента.WHT Тогда
		//-> RG-Soft VIvanov 17/06/13
		Если не Deferred Тогда
		//<-
		
		//Движения по НДС начисленному
		
		// Отразим записи, которые должны попасть в формирование записей книги продаж
		Для Каждого Строка ИЗ ТаблицаСуммы Цикл
			
			Движение = ДвиженияПоНДСНачисленному.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			//-> RG-Soft VIvanov 08/06/12
			Если Не ЗначениеЗаполнено(Строка.Период) Тогда
				Движение.Период = СтруктураШапкиДокумента.ДатаПроведения;
				Движение.НалоговыйПериод = СтруктураШапкиДокумента.НалоговыйПериод;
			Иначе
				Движение.Период = Строка.Период;
				Движение.НалоговыйПериод = Строка.Период;
			КонецЕсли;
			//<- RG-Soft
			
			Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Движение.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
			//Движение.ВидЦенности = СтруктураШапкиДокумента.;  //надо бы в самом документе указывать вид ценности
			//-> RG-Soft VIvanov 02/04/12
			Движение.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
			//<-
			Движение.Валюта = ВалютаДокумента;
			
			// { RGS MYurkevich 20.07.2015 16:33:58 - RCA-0000071
			//Движение.СчетФактура = Ссылка;
			Движение.СчетФактура = ?(ЗначениеЗаполнено(Строка.ПоступлениеТоваровИУслуг), Строка.ПоступлениеТоваровИУслуг, Ссылка);
			// } RGS MYurkevich 20.07.2015 16:34:12 - RCA-0000071
			Движение.СтавкаНДС = Строка.СтавкаНДС;
			Движение.Покупатель = СтруктураШапкиДокумента.Контрагент;
			Движение.СуммаБезНДС = Строка.СуммаБезНДСРуб;
			Движение.НДС = Строка.СуммаНДСРуб;
			Движение.СуммаБезНДСВВалюте = Строка.СуммаБезНДС;
			Движение.НДСВВалюте = Строка.СуммаНДС;
			
		КонецЦикла;
		//-> RG-Soft VIvanov 17/06/13
		КонецЕсли;
		//<-
	КонецЕсли;
	//<-
	
	//Добавил Трефиленков Дмитрий, РГ-Софт, 10.06.2010
	//движения по регистру "Материальные активы"
	Если ЗначениеЗаполнено(СуммаРубСНДС) Тогда
		Документы.СчетКнигиПокупок.СформироватьДвиженияПоРегиструМатериальныеАктивыДляУказаннойСуммыРуб(Ссылка, ДатаПроведения, СуммаРубСНДС);
	иначе
		Документы.СчетКнигиПокупок.СформироватьДвиженияПоРегиструМатериальныеАктивы(Ссылка, ДатаПроведения);	
	КонецЕсли;	
	//конец добавления
	
	//-> RG-Soft VIvanov 17/06/13
	Если не Deferred Тогда
	//<-
	// Добавлено Булавский 02.12.2010
	// Движения по регистру ДанныеОтчетаПоКнигеПокупок
	ЗапросДляЗаписи = Новый Запрос;
	ЗапросДляЗаписи.Текст = "ВЫБРАТЬ
	                        |	СчетКнигиПокупокСуммы.Ссылка,
	                        |	СчетКнигиПокупокСуммы.НомерСтроки КАК НомерСтроки,
	                        |	СчетКнигиПокупокСуммы.СтавкаНДС,
	                        |	СчетКнигиПокупокСуммы.СуммаСНДС,
	                        |	СчетКнигиПокупокСуммы.СуммаСНДСРуб,
	                        |	СчетКнигиПокупокСуммы.СуммаБезНДС,
	                        |	СчетКнигиПокупокСуммы.СуммаБезНДСРуб,
	                        |	СчетКнигиПокупокСуммы.СуммаНДС,
	                        |	СчетКнигиПокупокСуммы.СуммаНДСРуб,
	                        |	СчетКнигиПокупокСуммы.Период,
	                        |	ПроводкаDSS.BaseAmount,
	                        |	ПроводкаDSS.TaxCode,
	                        |	ПроводкаDSS.AU,
	                        |	ПроводкаDSS.Ссылка КАК ПроводкаAD,
	                        |	СчетКнигиПокупокСуммы.ПоступлениеТоваровИУслуг
	                        |ИЗ
	                        |	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроводкаDSS КАК ПроводкаDSS
	                        |		ПО СчетКнигиПокупокСуммы.Период = ПроводкаDSS.PeriodLawson
	                        |			И СчетКнигиПокупокСуммы.Ссылка = ПроводкаDSS.Документ
	                        |			И (НЕ ПроводкаDSS.ПометкаУдаления)
	                        |			И (НЕ(ПроводкаDSS.Документ.WHT
	                        |					И ПроводкаDSS.AccountLawson.Код = ""208655""))
	                        |ГДЕ
	                        |	СчетКнигиПокупокСуммы.Ссылка = &Документ
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";
	ЗапросДляЗаписи.УстановитьПараметр("Документ", Ссылка);
	ВыборкаДляЗаписи = ЗапросДляЗаписи.Выполнить().Выбрать();
	
	ДвиженияРег = ЭтотОбъект.Движения.ДанныеОтчетаПоКнигеПокупок;
	
	//-> RG-Soft VIVanov 10/06/12
	Пока ВыборкаДляЗаписи.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СуммаПоПроводкам = 0;
		СуммаВсего = 0;
		СписокПроводок = Новый СписокЗначений;
		ВсеПроводки = Новый СписокЗначений;
		Пока ВыборкаДляЗаписи.Следующий() Цикл
			Если ВыборкаДляЗаписи.ПроводкаAD <> Null И Лев(ВыборкаДляЗаписи.ПроводкаAD.AccountLawson.Код, 4) = "1402" Тогда
				СуммаВсего = СуммаВсего + ВыборкаДляЗаписи.BaseAmount;
				ВсеПроводки.Добавить(ВыборкаДляЗаписи.ПроводкаAD);
				Если ПолучениеСсылок.ПолучитьСтавкуНДСИзTaxCode(ВыборкаДляЗаписи.TaxCode) = ВыборкаДляЗаписи.СтавкаНДС Тогда
					СуммаПоПроводкам = СуммаПоПроводкам + ВыборкаДляЗаписи.BaseAmount;
					СписокПроводок.Добавить(ВыборкаДляЗаписи.ПроводкаAD);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (ВсеПроводки.Количество() = 0 ИЛИ ((СписокПроводок.Количество() <> 0 И СуммаПоПроводкам = 0) ИЛИ (СписокПроводок.Количество() = 0 И СуммаВсего = 0))) Тогда
			СтрокаДвиж = ДвиженияРег.Добавить();
			СтрокаДвиж.Период = НалоговыйПериод;
			СтрокаДвиж.Voucher = Ваучер;
			СтрокаДвиж.PostingDate = ПроводкаDSS.PeriodLawson; //пахоменков
			СтрокаДвиж.TaxPeriod = НалоговыйПериод;
			// пахоменков
			СтрокаДвиж.Vendor = Контрагент;
			СтрокаДвиж.ApInvoice = ?(ЗначениеЗаполнено(ПроводкаDSS.ApInvoice),ПроводкаDSS.ApInvoice,НомерВходящегоДокумента);
			СтрокаДвиж.ApInvoiceDate = ?(ЗначениеЗаполнено(ПроводкаDSS.DateLawson),ПроводкаDSS.DateLawson,ДатаВходящегоДокумента);
			СтрокаДвиж.AktOfAcceptance = ?(ЗначениеЗаполнено(ПроводкаDSS.AktOfAcceptance),ПроводкаDSS.AktOfAcceptance,НомерВходящегоДокумента);
			СтрокаДвиж.AktDate = ?(ЗначениеЗаполнено(ПроводкаDSS.AktDateLawson),ПроводкаDSS.AktDateLawson,ДатаВходящегоДокумента);
			СтрокаДвиж.TransNbr = ПроводкаDSS.TransNbr;
			// <<
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ОплатаКнигиПокупокСуммы.Ссылка.ДатаПроведения
			|ИЗ
			|	Документ.ОплатаКнигиПокупок.Суммы КАК ОплатаКнигиПокупокСуммы
			|ГДЕ
			|	ОплатаКнигиПокупокСуммы.Ваучер = &Ваучер";
			Запрос.УстановитьПараметр("Ваучер", Ваучер);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				СтрокаДвиж.ДатаОплаты = Выборка.ДатаПроведения //??? Это вообще что и зачем???
			КонецЕсли;
			
			СтрокаДвиж.НалоговаяСтавка = ВыборкаДляЗаписи.СтавкаНДС;
			СтрокаДвиж.Currency = ПроводкаDSS.Currency; //пахоменков
			
			Если WHT И ЗначениеЗаполнено(СтрокаДвиж.ДатаОплаты) Тогда
				ДатаКурса = СтрокаДвиж.ДатаОплаты;
			Иначе
				ДатаКурса = ПроводкаDSS.AktDateLawson;  //пахоменков
			КонецЕсли; 
			
			Отбор = Новый Структура;
			Отбор.Вставить("Валюта", ПроводкаDSS.Currency); //пахоменков
			
			СтрокаДвиж.Курс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Отбор).Курс;
			
			Если ЗначениеЗаполнено(ВыборкаДляЗаписи.СтавкаНДС) Тогда
				Запрос1 = Новый Запрос;
				//Пахоменков - поменял запрос
				Запрос1.Текст = "ВЫБРАТЬ
				|	ПроводкаDSS.AccountLawson
				|ИЗ
				|	Документ.ПроводкаDSS КАК ПроводкаDSS
				|ГДЕ
				|	ПроводкаDSS.Документ = &Документ
				|	И ПроводкаDSS.TranAmount = &TranAmount";
				Запрос1.УстановитьПараметр("Документ", Ссылка);
				Запрос1.УстановитьПараметр("TranAmount", ВыборкаДляЗаписи.СуммаНДС);
				Результат1 = Запрос1.Выполнить();
				Выборка1 = Результат1.Выбрать();
				
				Если Выборка1.Следующий() Тогда
					СтрокаДвиж.СчетНДС = Выборка1.AccountLawson;
				КонецЕсли;
				
			КонецЕсли; 
			
			Если WHT Тогда
				СтрокаДвиж.Тип = Перечисления.ТипыСКП.WHT;
			//Изменила Федотова Л., РГ-Софт, 27.08.15, вопрос SLI-0005708	
			//ИначеЕсли ПроводкаDSS.Vendor = "OP0355" ИЛИ ПроводкаDSS.Vendor = "OP0356" ИЛИ ПроводкаDSS.Vendor = "OP0363" ИЛИ ПроводкаDSS.Vendor = "OP0385" ИЛИ ПроводкаDSS.Vendor = "OP0391" ИЛИ ПроводкаDSS.Vendor = "OP0106" Тогда //пахоменков
			//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.ICO;
			//ИначеЕсли ТаможеннаяДекларация И ПроводкаDSS.Vendor = "RSGG151" Тогда //пахоменков
			//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsSakh;
			//ИначеЕсли ТаможеннаяДекларация И ПроводкаDSS.Vendor = "RSGS064" Тогда //пахоменков  
			//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsMOS;
			ИначеЕсли СтрокаДвиж.Vendor.LawsonID = "OP0355" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0356" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0363" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0385" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0391" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0106" Тогда //пахоменков
				СтрокаДвиж.Тип = Перечисления.ТипыСКП.ICO;
			ИначеЕсли ТаможеннаяДекларация И СтрокаДвиж.Vendor.LawsonID = "RSGG151" Тогда //пахоменков
				СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsSakh;
			ИначеЕсли ТаможеннаяДекларация И СтрокаДвиж.Vendor.LawsonID = "RSGS064" Тогда //пахоменков  
				СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsMOS;
			Иначе
				СтрокаДвиж.Тип = Перечисления.ТипыСКП.General;
			КонецЕсли; 
			
			ЭлементСправочникаТипыСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
			Если WHT Тогда
				СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.WHT;
			ИначеЕсли НЕ ЭлементСправочникаТипыСКП.Пустая() И ЭлементСправочникаТипыСКП.Наименование = "ICO"  Тогда
				СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
			ИначеЕсли НЕ ЭлементСправочникаТипыСКП.Пустая() И ТаможеннаяДекларация Тогда
				СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
			Иначе
				СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.General;
			КонецЕсли;
			
			//Пахоменков
			СтрокаДвиж.AccountUnit = ПроводкаDSS.AU;
			СтрокаДвиж.TaxCode = ПроводкаDSS.TaxCode;
			Если ЗначениеЗаполнено(ПроводкаDSS.TaxCode) Тогда
				СтрокаДвиж.Location = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Лев(ПроводкаDSS.TaxCode, 4));
			КонецЕсли;
			//<<
			
			СтрокаДвиж.СуммаСНДС = ВыборкаДляЗаписи.СуммаСНДС;
			СтрокаДвиж.СуммаБезНДС = ВыборкаДляЗаписи.СуммаБезНДС;
			СтрокаДвиж.НДС = ВыборкаДляЗаписи.СуммаНДС;
			СтрокаДвиж.СуммаСНДСРуб = ВыборкаДляЗаписи.СуммаСНДСРуб;
			СтрокаДвиж.СуммаБезНДСРуб = ВыборкаДляЗаписи.СуммаБезНДСРуб;
			СтрокаДвиж.НДСРуб = ВыборкаДляЗаписи.СуммаНДСРуб;
		ИначеЕсли СписокПроводок.Количество() = 0 Тогда
			СписокПроводок = ВсеПроводки;
			СуммаПоПроводкам = СуммаВсего;
		КонецЕсли;
		Если СуммаПоПроводкам <> 0 Тогда
			Для Каждого СтрокаПроводкиAD Из СписокПроводок Цикл
				ПроводкаAD = СтрокаПроводкиAD.Значение;
				СтрокаДвиж = ДвиженияРег.Добавить();
				//-> RG-Soft VIVanov 10/06/12
				Если Не ЗначениеЗаполнено(ВыборкаДляЗаписи.Период) Тогда
					СтрокаДвиж.Период = НалоговыйПериод;
				Иначе
					СтрокаДвиж.Период = ВыборкаДляЗаписи.Период;
				КонецЕсли;
				//<- Rg-Soft
				СтрокаДвиж.Voucher = Ваучер;
				СтрокаДвиж.PostingDate = ПроводкаDSS.PeriodLawson; //пахоменков
				СтрокаДвиж.TaxPeriod = НалоговыйПериод;
				// пахоменков
				СтрокаДвиж.Vendor = Контрагент;
				СтрокаДвиж.ApInvoice = ?(ЗначениеЗаполнено(ПроводкаDSS.ApInvoice),ПроводкаDSS.ApInvoice,НомерВходящегоДокумента);
				СтрокаДвиж.ApInvoiceDate = ?(ЗначениеЗаполнено(ПроводкаDSS.DateLawson),ПроводкаDSS.DateLawson,ДатаВходящегоДокумента);
				СтрокаДвиж.AktOfAcceptance = ?(ЗначениеЗаполнено(ПроводкаDSS.AktOfAcceptance),ПроводкаDSS.AktOfAcceptance,НомерВходящегоДокумента);
				СтрокаДвиж.AktDate = ?(ЗначениеЗаполнено(ПроводкаDSS.AktDateLawson),ПроводкаDSS.AktDateLawson,ДатаВходящегоДокумента);
				СтрокаДвиж.TransNbr = ПроводкаDSS.TransNbr;
				// <<
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ОплатаКнигиПокупокСуммы.Ссылка.ДатаПроведения
				|ИЗ
				|	Документ.ОплатаКнигиПокупок.Суммы КАК ОплатаКнигиПокупокСуммы
				|ГДЕ
				|	ОплатаКнигиПокупокСуммы.Ваучер = &Ваучер";
				Запрос.УстановитьПараметр("Ваучер", Ваучер);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтрокаДвиж.ДатаОплаты = Выборка.ДатаПроведения //??? Это вообще что и зачем???
				КонецЕсли;
				
				СтрокаДвиж.НалоговаяСтавка = ВыборкаДляЗаписи.СтавкаНДС;
				СтрокаДвиж.Currency = ПроводкаDSS.Currency; //пахоменков
				
				Если WHT И ЗначениеЗаполнено(СтрокаДвиж.ДатаОплаты) Тогда
					ДатаКурса = СтрокаДвиж.ДатаОплаты;
				Иначе
					ДатаКурса = ПроводкаDSS.AktDateLawson;  //пахоменков
				КонецЕсли; 
				
				Отбор = Новый Структура;
				Отбор.Вставить("Валюта", ПроводкаDSS.Currency); //пахоменков
				
				СтрокаДвиж.Курс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Отбор).Курс;
				
				Если ЗначениеЗаполнено(ВыборкаДляЗаписи.СтавкаНДС) Тогда
					Запрос1 = Новый Запрос;
					//Пахоменков - поменял запрос
					Запрос1.Текст = "ВЫБРАТЬ
					|	ПроводкаDSS.AccountLawson
					|ИЗ
					|	Документ.ПроводкаDSS КАК ПроводкаDSS
					|ГДЕ
					|	ПроводкаDSS.Документ = &Документ
					|	И ПроводкаDSS.TranAmount = &TranAmount";
					Запрос1.УстановитьПараметр("Документ", Ссылка);
					//-> RG-Soft VIVanov 09/06/12
					СуммаНДС = ВыборкаДляЗаписи.СуммаНДС * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
					//<- RG-Soft
					Запрос1.УстановитьПараметр("TranAmount", СуммаНДС);
					Результат1 = Запрос1.Выполнить();
					Выборка1 = Результат1.Выбрать();
					
					Если Выборка1.Следующий() Тогда
						СтрокаДвиж.СчетНДС = Выборка1.AccountLawson;
					КонецЕсли;
					
				КонецЕсли; 
				
				Если WHT Тогда
					СтрокаДвиж.Тип = Перечисления.ТипыСКП.WHT;
				//ИначеЕсли ПроводкаDSS.Vendor = "OP0355" ИЛИ ПроводкаDSS.Vendor = "OP0356" ИЛИ ПроводкаDSS.Vendor = "OP0363" ИЛИ ПроводкаDSS.Vendor = "OP0385" ИЛИ ПроводкаDSS.Vendor = "OP0391" ИЛИ ПроводкаDSS.Vendor = "OP0106" Тогда //пахоменков
				//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.ICO;
				//ИначеЕсли ТаможеннаяДекларация И ПроводкаDSS.Vendor = "RSGG151" Тогда //пахоменков
				//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsSakh;
				//ИначеЕсли ТаможеннаяДекларация И ПроводкаDSS.Vendor = "RSGS064" Тогда //пахоменков  
				//	СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsMOS;
				ИначеЕсли СтрокаДвиж.Vendor.LawsonID = "OP0355" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0356" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0363" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0385" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0391" ИЛИ СтрокаДвиж.Vendor.LawsonID = "OP0106" Тогда //пахоменков
					СтрокаДвиж.Тип = Перечисления.ТипыСКП.ICO;
				ИначеЕсли ТаможеннаяДекларация И СтрокаДвиж.Vendor.LawsonID = "RSGG151" Тогда //пахоменков
					СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsSakh;
				ИначеЕсли ТаможеннаяДекларация И СтрокаДвиж.Vendor.LawsonID = "RSGS064" Тогда //пахоменков  
					СтрокаДвиж.Тип = Перечисления.ТипыСКП.CustomsMOS;
				Иначе
					СтрокаДвиж.Тип = Перечисления.ТипыСКП.General;
				КонецЕсли; 
				
				ЭлементСправочникаТипыСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
				Если WHT Тогда
					СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.WHT;
				ИначеЕсли НЕ ЭлементСправочникаТипыСКП.Пустая() И ЭлементСправочникаТипыСКП.Наименование = "ICO"  Тогда
					СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
				ИначеЕсли НЕ ЭлементСправочникаТипыСКП.Пустая() И ТаможеннаяДекларация Тогда
					СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.НайтиПоКоду(СтрокаДвиж.Vendor.LawsonID);
				Иначе
					СтрокаДвиж.ТипСКП = Справочники.ТипыСКП.General;
				КонецЕсли;
					
				//Пахоменков
				//-> RG-Soft VIVanov 10/06/12
				//СтрокаДвиж.AccountUnit = ПроводкаDSS.AU;
				//СтрокаДвиж.TaxCode = ПроводкаDSS.TaxCode;
				//Если ЗначениеЗаполнено(ПроводкаDSS.TaxCode) Тогда
				//	СтрокаДвиж.Location = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Лев(ПроводкаDSS.TaxCode, 4));
				//КонецЕсли;
				СтрокаДвиж.AccountUnit = ПроводкаAD.AU;
				СтрокаДвиж.TaxCode = ПроводкаAD.TaxCode;
				Если ЗначениеЗаполнено(ПроводкаAD.AU) Тогда
					СтрокаДвиж.Location = ПроводкаAD.AU.ПодразделениеОрганизации;
				КонецЕсли;
				
				//СтрокаДвиж.СуммаСНДС = ВыборкаДляЗаписи.СуммаСНДС;
				//СтрокаДвиж.СуммаБезНДС = ВыборкаДляЗаписи.СуммаБезНДС;
				//СтрокаДвиж.НДС = ВыборкаДляЗаписи.СуммаНДС;
				//СтрокаДвиж.СуммаСНДСРуб = ВыборкаДляЗаписи.СуммаСНДСРуб;
				//СтрокаДвиж.СуммаБезНДСРуб = ВыборкаДляЗаписи.СуммаБезНДСРуб;
				//СтрокаДвиж.НДСРуб = ВыборкаДляЗаписи.СуммаНДСРуб;
				СтрокаДвиж.СуммаСНДС = ВыборкаДляЗаписи.СуммаСНДС * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
				СтрокаДвиж.СуммаБезНДС = ВыборкаДляЗаписи.СуммаБезНДС * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
				СтрокаДвиж.НДС = ВыборкаДляЗаписи.СуммаНДС * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
				СтрокаДвиж.СуммаСНДСРуб = ВыборкаДляЗаписи.СуммаСНДСРуб * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
				СтрокаДвиж.СуммаБезНДСРуб = ВыборкаДляЗаписи.СуммаБезНДСРуб * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
				СтрокаДвиж.НДСРуб = ВыборкаДляЗаписи.СуммаНДСРуб * ПроводкаAD.BaseAmount / СуммаПоПроводкам;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;		
	//<- Rg-Soft
	// { RGS MYurkevich 22.07.2015 14:14:46 - RCA-0000071
	//Если ВключатьВКнигуПокупок и Не WHT Тогда
	Если ВключатьВКнигуПокупок и Не WHT И НЕ НеПисатьВЖурнал Тогда
		// } RGS MYurkevich 22.07.2015 14:15:57 - RCA-0000071
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			УчетНДС.ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, ЭтотОбъект, Суммы.Итог("СуммаСНДС"), Суммы.Итог("СуммаНДС"), Отказ, Заголовок);	
		Иначе
			УчетНДС.ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, ЭтотОбъект, Суммы.Итог("СуммаСНДСРуб"), Суммы.Итог("СуммаНДСРуб"), Отказ, Заголовок);	
		КонецЕсли;
	КонецЕсли;
	//-> RG-Soft VIvanov 17/06/13
	КонецЕсли;
	//<-
	
КонецПроцедуры

//-> RG-Soft VIvanov 17.06.13
Процедура СинхронизироватьПроводкиDSS()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроводкиПоДокументу.Ссылка
	|ИЗ
	|	КритерийОтбора.ПроводкиПоДокументу(&Регистратор) КАК ПроводкиПоДокументу";
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Deferred = Deferred;
		ДокОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры
//<-

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
УчетОшибокЗаполнения.ИнициализироватьСтруктуруДанныхОшибокЗаполнения(ЭтотОбъект);
мПровестиБезПроверок = Ложь; //добавила Федотова Л., РГ-Софт, 22.03.2011, так как документ не проводился при закрытой форме
//из-за того, что значение этой переменной было неопределено
