
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУдалятьДвижения;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ОБЕСПЕЧИВАЮЩИЕ ПРОВЕДЕНИЕ ДОКУМЕНТА

Функция СформироватьТаблицуСостав()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			, "Номенклатура");
	// ЧТО ЗДЕСЬ ЕЩЕ ДОЛЖНО БЫТЬ???
		
	РезультатЗапросаПоСоставу = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	Возврат РезультатЗапросаПоСоставу.Выгрузить();
	
КонецФункции

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
		
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ДатаПроведения");
	СтруктураОбязательныхПолей.Вставить("НалоговыйПериод");	
	
	// СДЕЛАТЬ ОБЯЗАТЕЛЬНЫМИ!!!
	//СтруктураОбязательныхПолей.Вставить("AU1C");
	//СтруктураОбязательныхПолей.Вставить("БухСчет1C");
	
	СтруктураОбязательныхПолей.Вставить("ДатаВходящейСФ");
	СтруктураОбязательныхПолей.Вставить("СуммаСФСНДС");
	СтруктураОбязательныхПолей.Вставить("ВалютаСФ");
	СтруктураОбязательныхПолей.Вставить("СуммаСФСНДСРуб");
	СтруктураОбязательныхПолей.Вставить("СуммаСФБезНДСРуб");
	
	СтруктураОбязательныхПолей.Вставить("ДатаПрихода");
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок, Ложь, Истина);
		
	// Выполним более сложные проверки
	
	// Может быть проверять стоит, регистрировать точно не стоит, так как документ не используется
	//// Организация
	//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "Организация", "Заполните реквизит по значению ""Company"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// Подразделение организации, отказ не передается!
	//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "ПодразделениеОрганизации", "Подставьте подразделение с кодом, указанным на вкладке ""Дополнительно""", , Истина, Заголовок);
	//КонецЕсли;
	//
	//// Контрагент
	//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "Контрагент", "Найдите или создайте контрагента по реквизитам ""Vendor"" или ""VendorName"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// Cash code, отказ не передается!
	//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.CashCode) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "CashCode", "Подставьте cash code с кодом, указанным на вкладке ""Дополнительно""", , Истина, Заголовок);
	//КонецЕсли;	
	//	
	//// Ваучер
	//Если СокрЛП(СтруктураШапкиДокумента.Ваучер) = "" Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "Ваучер", , Отказ, Истина, Заголовок);
	//КонецЕсли;

	//// Номер Счета
	//Если СокрЛП(СтруктураШапкиДокумента.НомерСчета) = "" Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "НомерСчета", , Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// Бух. счет Lawson, отказ не передается!
	////Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.БухСчетLawson) Тогда
	////	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "БухСчетLawson", "Укажите счет, соответствующий счету Lawson, указанному на вкладке ""Дополнительно""", , Истина, Заголовок);
	////КонецЕсли;
	//
	//// Описание затрат
	//// ДУМАТЬ!!! НУЖЕН ЛИ КОМУ-ТО ЭТО РЕКВИЗИТ???
	////Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ОписаниеЗатрат) Тогда
	////	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "ОписаниеЗатрат", "Для заполнения реквизита можно воспользоваться значением ""Akt of acceptance"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	////КонецЕсли;
	//	
	//// Номер СФ
	//Если СокрЛП(СтруктураШапкиДокумента.НомерВходящейСФ) = "" Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "НомерВходящейСФ", , Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// Ставка НДС СФ
	//Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.СтавкаНДССФ) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "СтавкаНДССФ", "Заполните реквизит по значению ""TaxCode"" на вкладке ""Дополнительно""", Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// СуммаНДССФ
	//Если НЕ ОбщегоНазначения.ЗначениеСуммаНДСЗаполнено(СтруктураШапкиДокумента.СтавкаНДССФ, СтруктураШапкиДокумента.СуммаНДССФРуб) Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "СуммаНДССФРуб", , Отказ, Истина, Заголовок);
	//КонецЕсли;
	//
	//// Проверим заполнение поля Номер прихода
	//Если СокрЛП(СтруктураШапкиДокумента.НомерПрихода) = "" Тогда
	//	УчетОшибокЗаполнения.ЗарегистрироватьОшибкуВШапкеТипаНеЗаполнен(ЭтотОбъект, "НомерПрихода", , Отказ, Истина, Заголовок);
	//КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеТЧСостав(ТаблицаСостав, Отказ, Заголовок)
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Номенклатура");
	// ЧТО ЗДЕСЬ ДОЛЖНО БЫТЬ ЕЩЕ???
	
    ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок, , Ложь, Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движение по Взаиморасчеты с поставщиками
	Движение = Движения.ВзаиморасчетыСПоставщиками.Добавить();
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	Движение.Период			= СтруктураШапкиДокумента.ДатаВходящейСФ; //Регистр не регламентный
	Движение.Контрагент		= СтруктураШапкиДокумента.Контрагент;
	Движение.Валюта			= мВалютаРегламентированногоУчета;
	Движение.CashCode		= СтруктураШапкиДокумента.CashCode;
	Движение.СтавкаНДС		= СтруктураШапкиДокумента.СтавкаНДССФ;
	Движение.НомерСчета		= СтруктураШапкиДокумента.НомерСчета;
    Движение.НомерДокумента	= СтруктураШапкиДокумента.НомерВходящейСФ;
    //Движение.Договор		= СтруктураШапкиДокумента.Договор;
	Движение.Сумма			= СтруктураШапкиДокумента.СуммаСФСНДСРуб;
	Движение.СуммаНДС		= СтруктураШапкиДокумента.СуммаНДССФРуб;
		
	// Движение по НДСПокупкиУпр - Получен Счет-фактура
	Движение = Движения.НДСПокупкиУпр.Добавить();
	Движение.Период 			= СтруктураШапкиДокумента.ДатаПроведения; //Была ДатаРегистрацииСФ;
	Движение.Событие 			= Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.НомерСчета 		= СтруктураШапкиДокумента.НомерСчета;
	Движение.НомерСФ 			= СтруктураШапкиДокумента.НомерВходящейСФ;
	Движение.ДатаСФ 			= СтруктураШапкиДокумента.ДатаВходящейСФ;
	Движение.Поставщик 			= СтруктураШапкиДокумента.Контрагент;
	Движение.Валюта				= СтруктураШапкиДокумента.ВалютаСФ;
	Движение.СтавкаНДС			= СтруктураШапкиДокумента.СтавкаНДССФ;
	Движение.Подразделение		= СтруктураШапкиДокумента.ПодразделениеОрганизации;
	Движение.БухСчет			= СтруктураШапкиДокумента.БухСчет1c;
	Движение.AU					= СтруктураШапкиДокумента.AU1C;
	Движение.CashCode			= СтруктураШапкиДокумента.CashCode;
	Движение.НомерВаучера		= СтруктураШапкиДокумента.Ваучер;
	Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
	Движение.СуммаБезНДС    	= СтруктураШапкиДокумента.СуммаСФБезНДСРуб;
	Движение.НДС   				= СтруктураШапкиДокумента.СуммаНДССФРуб;
	
	// Движение по СчетаФактурыКонтрагентов
	Движение = Движения.СчетаФактурыКонтрагентов.Добавить();
	Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; //Было ДатаРегистрацииСФ;
	Движение.ДатаРегистрации	= СтруктураШапкиДокумента.ДатаПроведения;		
	Движение.Валюта				= СтруктураШапкиДокумента.ВалютаСФ;
	Движение.Контрагент			= СтруктураШапкиДокумента.Контрагент;
	Движение.ДатаСФ				= СтруктураШапкиДокумента.ДатаВходящейСФ;
	Движение.НомерСФ 			= СтруктураШапкиДокумента.НомерВходящейСФ;
	Движение.НомерСчета			= СтруктураШапкиДокумента.НомерСчета;
	Движение.НомерВаучера		= СтруктураШапкиДокумента.Ваучер;
	Движение.СтавкаНДС			= СтруктураШапкиДокумента.СтавкаНДССФ;
	Движение.БухСчет1С			= СтруктураШапкиДокумента.БухСчет1C;
	Движение.AU1С				= СтруктураШапкиДокумента.AU1C;
	//Движение.Причина			= СтруктураШапкиДокумента.Причина;
	Движение.ОписаниеЗатрат		= СтруктураШапкиДокумента.ОписаниеЗатрат;
	Движение.Сумма				= СтруктураШапкиДокумента.СуммаСФСНДС;
	Движение.СуммаРуб			= СтруктураШапкиДокумента.СуммаСФСНДСРуб;
		
	// Движение по НДСПокупкиУпр - Предъявлен НДС Поставщиком
	Движение = Движения.НДСПокупкиУпр.Добавить();
	Движение.Событие 			= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.Период 			= СтруктураШапкиДокумента.ДатаПроведения; //Было ДатаРегистрацииПрихода;
	Движение.НомерСчета 		= СтруктураШапкиДокумента.НомерСчета;
	Движение.НомерСФ 			= СтруктураШапкиДокумента.НомерВходящейСФ;
	Движение.ДатаСФ 			= СтруктураШапкиДокумента.ДатаВходящейСФ;
	Движение.Поставщик 			= СтруктураШапкиДокумента.Контрагент;
	Движение.Валюта				= СтруктураШапкиДокумента.ВалютаСФ;
	Движение.СтавкаНДС			= СтруктураШапкиДокумента.СтавкаНДССФ;
	Движение.Подразделение		= СтруктураШапкиДокумента.ПодразделениеОрганизации;
	Движение.БухСчет			= СтруктураШапкиДокумента.БухСчет1C;
	Движение.AU					= СтруктураШапкиДокумента.AU1C;
	Движение.CashCode			= СтруктураШапкиДокумента.CashCode;
	Движение.НомерВаучера		= СтруктураШапкиДокумента.Ваучер;
	Движение.НалоговыйПериод	= СтруктураШапкиДокумента.НалоговыйПериод;
	Движение.СуммаБезНДС    	= СтруктураШапкиДокумента.СуммаСФБезНДСРуб;
	Движение.НДС   				= СтруктураШапкиДокумента.СуммаНДССФРуб;
	
	// Движение по АктыКонтрагентов
	Движение=Движения.АктыКонтрагентов.Добавить();
	Движение.Период				= СтруктураШапкиДокумента.ДатаПроведения; // Было ДатаРегистрацииПрихода
	Движение.ДатаРегистрации	= СтруктураШапкиДокумента.ДатаПроведения;
	// Решено, что валюта прихода должна совпадать с валютой СФ
	//Движение.Валюта				= СтруктураШапкиДокумента.ВалютаПрихода;
	Движение.Валюта				= СтруктураШапкиДокумента.ВалютаСФ;
	Движение.Контрагент			= СтруктураШапкиДокумента.Контрагент;
	Движение.ДатаПрихода		= СтруктураШапкиДокумента.ДатаПрихода;
	Движение.НомерПрихода		= СтруктураШапкиДокумента.НомерПрихода;
	Движение.НомерСчета			= СтруктураШапкиДокумента.НомерСчета;
	Движение.НомерВаучера		= СтруктураШапкиДокумента.Ваучер;
	Движение.СтавкаНДС			= СтруктураШапкиДокумента.СтавкаНДССФ;
	// Решено, что сумма приода должна совпадать с суммой СФ
	//Движение.Сумма				= СтруктураШапкиДокумента.СуммаПрихода;
	//Движение.СуммаРуб			= СтруктураШапкиДокумента.СуммаПриходаРуб;
	// ЗДЕСЬ ТОЧНО С НДС???
	Движение.Сумма				= СтруктураШапкиДокумента.СуммаСФСНДС;
	Движение.СуммаРуб			= СтруктураШапкиДокумента.СуммаСФСНДСРуб;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Сформируем таблицу Состав
	ТаблицаСостав = СформироватьТаблицуСостав();
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения ТЧ Состав
	ПроверитьЗаполнениеТЧСостав(ТаблицаСостав, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
УчетОшибокЗаполнения.ИнициализироватьСтруктуруДанныхОшибокЗаполнения(ЭтотОбъект);
