////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Элементы.Основание.Видимость = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЭД.ПродажаКомиссия");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Обслуживание счета-фактуры:

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	
КонецПроцедуры

// Возвращает структуру параметров представления счета-фактуры в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//	НеТребуется - Булево - Истина - для документа не требуется вводить счет-фактуру.
//
// Возвращаемое значение:
//  Структура
//		ТекстСчетФактура - Строка - Представление счета-фактуры;
//		ТекстСписок - Строка - Представление команды открытия списка счетов-фактур;
//		ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры;
//		РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
&НаСервере
Функция ПараметрыПредставленияСчетаФактуры(Основание, Организация, НеТребуется = Ложь)
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактуры = СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	Если СчетаФактуры.Количество() > 0 Тогда
		ТекстСчетФактура = ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры);
		Если СчетаФактуры.Количество() > 1 Тогда
			ТекстСписок = ВернутьСтр("ru='Открыть список'") + " (" + Строка(СчетаФактуры.Количество()) + ")"; 
		Иначе
			ТекстСписок = "";
		КонецЕсли;
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = Истина;
		
	ИначеЕсли НеТребуется Тогда
		ТекстСчетФактура = ВернутьСтр("ru='Не требуется'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	Иначе
		ТекстСчетФактура = ВернутьСтр("ru='Не введен'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления",
		ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления);
	
КонецФункции

// Функция находит счет-фактуру для заданного документа.
//
// Параметры:
//	ДокументСсылка		 - Документ, для которого необходимо найти счет-фактуру
//	Организация			 - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура
//
// Возвращаемое значение:
//	РеквизитыСчетФактуры - Структура - Номер и дата счет-фактуры
//
// Возвращаемое значение:
//	ДокументСсылка._ДемоСчетФактураВыданный - Найденный документ
//
Функция СчетаФактурыПоОснованию(Основание, Организация = Неопределено,
		РеквизитыСчетФактуры = Неопределено, ВключаяКорректировкиПоступлений = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Основание КАК Ссылка
	|ПОМЕСТИТЬ Основания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Номер КАК Номер,
	|	ТаблицаОснований.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Основания КАК Основания
	|		ПО ТаблицаОснований.ДокументОснование = Основания.Ссылка
	|ГДЕ
	|	НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|	И (ТаблицаОснований.Ссылка.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СчетаФактуры = Новый Массив;
	РеквизитыСчетФактуры = Новый Структура("Ссылка, Номер, Дата");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		СчетаФактуры = ТаблицаСчетовФактур.ВыгрузитьКолонку("Ссылка");
		ЗаполнитьЗначенияСвойств(РеквизитыСчетФактуры, СчетаФактуры[0]);
	КонецЕсли;
	
	Возврат СчетаФактуры;
	
КонецФункции

// Функция формирует представление счет-фактуры.
//
// Параметры:
//  Номер - Строка - Номер счета-фактуры;
//  Дата - Дата - Дата счета-фактуры;
//
// Возвращаемое значение:
//	Строка - Представление счета-фактуры.
//
&НаСервере
Функция ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры)
	
	ШаблоСчетФактуры = ВернутьСтр("ru = '№ %1 от %2 г.'");
	ТекстСчетФактуры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблоСчетФактуры,
		РеквизитыСчетаФактуры.Номер, Формат(РеквизитыСчетаФактуры.Дата, "ДФ=dd.MM.yyyy"));
	
	Возврат ТекстСчетФактуры;
	
КонецФункции

// Создает документ "Счет-фактура выданный" или открывает существующий.
//
// Параметры:
//	Форма - Форма - Форма, из которой вызвана команда. Устанавливается владелецем открываемой формы счета-фактуры;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//  ОткрыватьСуществующую - Булево - Признак необходимости поиска и открытия формы найденного счета-фактуры;
//  Исправление - Булево - Истина - Создается исправление счета-фактуры.
//
&НаКлиенте
Процедура ВвестиСчетФактуру(Форма, Организация, ОткрыватьСуществующую = Ложь, ВидОперации)
	
	Основание = ?(ЗначениеЗаполнено(Форма.Объект.Основание), Форма.Объект.Основание, ЭтаФорма.Объект.Ссылка);
	
	Если ОткрыватьСуществующую Тогда
		СчетФактураДокумента = СчетФактураДокумента(ЭтаФорма.Объект.Ссылка, Организация);
		Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
			
			ПараметрыФормы = Новый Структура("Ключ, ДокументОснование", СчетФактураДокумента, ЭтаФорма.Объект.Ссылка);
			ОткрытьФормуМодально("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на счет-фактуру по документу.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураВыданный, Неопределено - Ссылка на счет-фактуру по документу.
//		Если счет-фактура не найдена - Неопределено.
//
Функция СчетФактураДокумента(Основание, Организация = Неопределено) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	
	Если РеквизитыСчетаФактуры <> Неопределено Тогда
		СчетФактураДокумента = РеквизитыСчетаФактуры.Ссылка;
	Иначе
		СчетФактураДокумента = Неопределено;
	КонецЕсли;
	
	Возврат СчетФактураДокумента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена*ТекущаяСтрока.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена*ТекущаяСтрока.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока.Сумма = 0 ИЛИ ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Цена = 0;
	Иначе
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 
		// { RGS MYurkevich 17.07.2015 18:14:47 - 
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		// } RGS MYurkevich 17.07.2015 18:14:48 - 
		Объект.ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

