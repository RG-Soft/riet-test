// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

//// Формирует движения по регистрам
////  Отказ                     - флаг отказа в проведении,
////  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
////  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);

	//Добавила Федотова Людмила, РГ-Софт, 07.10.09 ->
	//Движение по регистру КурсовыеРазницыSB 
	Попытка
		ПровестиПоРегиструКурсовыхРазниц(ЭтотОбъект);
	Исключение
	КонецПопытки;
	//<-
	
	//Добавила Федотова Людмила, РГ-Софт, 13.11.09 ->
	//Движение по регистру НДСНачисленный 
	ПровестиКурсовыеРазницыПоРегиструНДСНачисленный(ЭтотОбъект);
	//<-
	
	//Добавил Булавский Анатолий, РГ-Софт, 21.10.2010 ->
	//Движение по регистру ОстаткиВзаиморасчетовПоИнвойсам
	ПровестиПоРегиструОстаткиВзаиморасчетовПоИнвойсам();
	//<-
	
	////добавил Трефиленков Дмитрий, РГ-Софт, для установки подразделений в проводках
	//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
	//	Проводки = Движения.Хозрасчетный;
	//	Для Каждого Проводка Из Проводки Цикл
	//		Попытка
	//			Проводка.ПодразделениеОрганизацииДт = Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами.ПодразделениеОрганизации;
	//			Проводка.ПодразделениеОрганизацииКт = Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами.ПодразделениеОрганизации;
	//		Исключение
	//		КонецПопытки;
	//		Попытка
	//			Проводка.ПодразделениеОрганизацииДт = Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами.ПодразделениеОрганизации;
	//			Проводка.ПодразделениеОрганизацииКт = Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами.ПодразделениеОрганизации;
	//		Исключение
	//		КонецПопытки;
	//		
	//		//аванс или переплата
	//		Если Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = Ссылка Тогда
	//			Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
	//				Если СтрокаТЧ.Сделка = Ссылка ИЛИ СтрокаТЧ.Сделка = Неопределено ИЛИ СтрокаТЧ.Сделка.Пустая() Тогда
	//					Проводка.ПодразделениеОрганизацииДт = СтрокаТЧ.ПодразделениеОрганизации; 
	//					Проводка.ПодразделениеОрганизацииКт = СтрокаТЧ.ПодразделениеОрганизации; 
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;	
	//		Если Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Ссылка Тогда
	//			Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
	//				Если СтрокаТЧ.Сделка = Ссылка ИЛИ СтрокаТЧ.Сделка = Неопределено ИЛИ СтрокаТЧ.Сделка.Пустая() Тогда
	//					Проводка.ПодразделениеОрганизацииДт = СтрокаТЧ.ПодразделениеОрганизации; 
	//					Проводка.ПодразделениеОрганизацииКт = СтрокаТЧ.ПодразделениеОрганизации; 
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;	
	//		
	//		
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПровестиКурсовыеРазницыПоРегиструНДСНачисленный(ДокументОбъект) Экспорт
	
	//изменил Трефиленков Дмитрий, РГ-Софт, 09.10.2011 по вопросу SLI001803
	//с 01.10.2011 НДС с суммовых не начисляется
	Если ДокументОбъект.Allocated И ДатаПроведения < Дата('20111001') Тогда
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ТаблицаКурсовыхРазниц = ДокументОбъект.Движения.КурсовыеРазницыSB.Выгрузить();
			ТаблицаКурсовыхРазниц.Свернуть("Период,Активность,ПодразделениеОрганизации,СтавкаНДС,КурсОплаты,КурсОтгрузки,НалоговыйПериод,ДокументРеализации,КурсSLB","Сумма,СуммаUSD,СуммаНДС,СуммаНДСUSD");
			НДСНачисленный = ДокументОбъект.Движения.НДСНачисленный;
			ТаблицаНДСНачисленный = НДСНачисленный.Выгрузить();
			ТаблицаНДСНачисленный.Очистить();
			Для каждого Строка Из ТаблицаКурсовыхРазниц Цикл
				Если НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					НоваяСтрока = ТаблицаНДСНачисленный.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка); 
					НоваяСтрока.СчетФактура = Строка.ДокументРеализации;
					НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.НДССКурсовыхРазниц;
					НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
					НоваяСтрока.Покупатель = ДокументОбъект.Контрагент;
					НоваяСтрока.Валюта = ДокументОбъект.ВалютаДокумента;
					НоваяСтрока.СуммаБезНДС = Строка.СуммаUSD * (Строка.КурсОплаты - Строка.КурсОтгрузки);
					НоваяСтрока.НДС = Строка.СуммаНДСUSD * (Строка.КурсОплаты - Строка.КурсОтгрузки);
					НоваяСтрока.СуммаБезНДСВВалюте = НоваяСтрока.СуммаБезНДС / Строка.КурсSLB;
					НоваяСтрока.НДСВВалюте = НоваяСтрока.НДС / Строка.КурсSLB;
				КонецЕсли; 
			КонецЦикла; 
			НДСНачисленный.Загрузить(ТаблицаНДСНачисленный);
			НДСНачисленный.Записать();
		КонецЕсли;
	КонецЕсли;
		
		
КонецПроцедуры // ДвиженияПоРегистрам(ДокументОбъект)

//Добавила Федотова Людмила, РГ-Софт, 07.10.09 ->
Процедура ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект) Экспорт
	
	ТаблицаОплаты = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"ПодразделениеОрганизации,Сделка,СуммаВзаиморасчетов");
	ТаблицаОплаты.Колонки.Добавить("ДокументОплаты",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Если ДокументОбъект.Allocated Тогда
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			КурсовыеРазницыSB = ДокументОбъект.Движения.КурсовыеРазницыSB;
			ТаблицаКурсовыхРазниц = КурсовыеРазницыSB.Выгрузить();
			
			ТаблицаРасшифровкиПлатежа = ДокументОбъект.РасшифровкаПлатежа.Выгрузить();
			Если НЕ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				Для каждого СтрокаТаб Из ТаблицаРасшифровкиПлатежа Цикл
					СтрокаТаб.СуммаПлатежа = СтрокаТаб.СуммаПлатежа * СтрокаТаб.КурсВзаиморасчетов;	                              
					СтрокаТаб.СуммаНДС = СтрокаТаб.СуммаНДС * СтрокаТаб.КурсВзаиморасчетов;	                              
				КонецЦикла;
			КонецЕсли;
			Для каждого Строка Из ТаблицаРасшифровкиПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(Строка.Сделка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Сделка.ВалютаДокумента = ДокументОбъект.ВалютаДокумента 
					И ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
					Продолжить;
				КонецЕсли;
				ТаблицаОплаты.Очистить();
				НоваяСтрока = ТаблицаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.ДокументОплаты = ДокументОбъект.Ссылка;
				Если ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ТаблицаРеализации = Строка.Сделка.Услуги.Выгрузить(,"КостЦентр,СтавкаНДС,Сумма,СуммаНДС");
					ТаблицаПоТоварам = Строка.Сделка.Товары.Выгрузить(,"КостЦентр,СтавкаНДС,Сумма,СуммаНДС");
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаРеализации);
				ИначеЕсли ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.ПередачаОС") Тогда
					ТаблицаРеализации = Строка.Сделка.ОС.Выгрузить(,"КостЦентр,СтавкаНДС,Сумма,СуммаНДС");
				КонецЕсли;
				ТаблицаРеализации.Свернуть("КостЦентр,СтавкаНДС","Сумма,СуммаНДС");
				ТаблицаРеализации.Колонки.Добавить("СуммаВзаиморасчетов",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ТаблицаРеализации.Колонки.Добавить("СуммаВал",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ТаблицаРеализации.Колонки.Добавить("СуммаUSD",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ТаблицаРеализации.Колонки.Добавить("СуммаНДСUSD",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				ТаблицаРеализации.Колонки.Добавить("ДокументОплаты",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
				ТаблицаРеализации.Колонки.Добавить("ПодразделениеОрганизации",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
				Для каждого СтрокаТЗ Из ТаблицаРеализации Цикл
					Если Строка.Сделка.СуммаВключаетНДС Тогда
						СтрокаТЗ.СуммаВзаиморасчетов = СтрокаТЗ.Сумма;
						СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СтрокаТЗ.СуммаНДС;
					Иначе
						СтрокаТЗ.СуммаВзаиморасчетов = СтрокаТЗ.Сумма + СтрокаТЗ.СуммаНДС;
					КонецЕсли; 
					СтрокаТЗ.СуммаВал = СтрокаТЗ.СуммаВзаиморасчетов;
					СтрокаТЗ.ДокументОплаты = ДокументОбъект.Ссылка;
					СтрокаТЗ.ПодразделениеОрганизации = Строка.Сделка.ПодразделениеОрганизации;
				КонецЦикла; 
				
				//Распределим оплату по строкам реализации
				Распределение = Новый Структура("СуммаВзаиморасчетов");
				ТаблицаРеализации = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаОплаты,ТаблицаРеализации,Распределение);			
				
				Для каждого СтрокаТаблицы Из ТаблицаРеализации Цикл
					Коэффициент = СтрокаТаблицы.СуммаВзаиморасчетов / СтрокаТаблицы.СуммаВал;
					СтрокаТаблицы.СуммаUSD = СтрокаТаблицы.Сумма * Коэффициент;
					СтрокаТаблицы.СуммаНДСUSD = СтрокаТаблицы.СуммаНДС * Коэффициент;
					СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаUSD * Строка.СуммаПлатежа / Строка.СуммаВзаиморасчетов;
					СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаНДСUSD * Строка.СуммаПлатежа / Строка.СуммаВзаиморасчетов;
				КонецЦикла; 
				
				ВалютаSLB = Справочники.Валюты.НайтиПоНаименованию("SLB");
				ДанныеОВалютеSLB = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаSLB,ДокументОбъект.Дата);
				
				Для Каждого СтрокаТЧ Из ТаблицаРеализации Цикл
					СтрокаКурсовыхРазниц = ТаблицаКурсовыхРазниц.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКурсовыхРазниц,СтрокаТЧ);
					СтрокаКурсовыхРазниц.ИнвойсинговыйЦентр = ДокументОбъект.ИнвойсинговыйЦентр;
					СтрокаКурсовыхРазниц.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
					СтрокаКурсовыхРазниц.AU = СтрокаТЧ.КостЦентр;
					СтрокаКурсовыхРазниц.Сумма = СтрокаТЧ.Сумма;
					СтрокаКурсовыхРазниц.СуммаUSD = СтрокаТЧ.СуммаUSD;
					СтрокаКурсовыхРазниц.СуммаНДС = СтрокаТЧ.СуммаНДС;
					СтрокаКурсовыхРазниц.СуммаНДСUSD = СтрокаТЧ.СуммаНДСUSD;
					СтрокаКурсовыхРазниц.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
					СтрокаКурсовыхРазниц.ДокументРеализации = Строка.Сделка;
					СтрокаКурсовыхРазниц.ДокументОплаты = ДокументОбъект.Ссылка;
					СтрокаКурсовыхРазниц.КурсSLB = ДанныеОВалютеSLB.Курс;
					СтрокаКурсовыхРазниц.КурсОплаты = Строка.КурсВзаиморасчетов;
					СтрокаКурсовыхРазниц.КурсОтгрузки = Строка.Сделка.КурсВзаиморасчетов;
					//СтрокаКурсовыхРазниц.СуммаВзаиморасчетов = Строка.СуммаВзаиморасчетов;
					СтрокаКурсовыхРазниц.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
					
					СтрокаКурсовыхРазниц.Регистратор = ДокументОбъект.Ссылка;
					СтрокаКурсовыхРазниц.Период = ДокументОбъект.Дата;
					СтрокаКурсовыхРазниц.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
					СтрокаКурсовыхРазниц.Активность = Истина;
				КонецЦикла;
			КонецЦикла; 
			
			КурсовыеРазницыSB.Загрузить(ТаблицаКурсовыхРазниц);
			КурсовыеРазницыSB.Записать();
			
			//добавим для положительных курсовых разниц движения в регистр ПроводкиDSSОбщие
			ДвиженияПоРегиструПроводкиDSSОбщие(ТаблицаКурсовыхРазниц, ВалютаSLB, ДокументОбъект.Batch); 
			
		КонецЕсли;
	КонецЕсли;     
КонецПроцедуры //ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект)

Процедура ДвиженияПоРегиструПроводкиDSSОбщие(ТаблицаКурсовыхРазниц, ВалютаSLB, Batch)
	
	ДвиженияПроводкиDSSОбщие = ЭтотОбъект.Движения.ПроводкиDSSОбщие;
	Для Каждого СтрокаКурсовыхРазниц Из ТаблицаКурсовыхРазниц Цикл
		
		КурсоваяРазницаРуб = (СтрокаКурсовыхРазниц.Сумма + СтрокаКурсовыхРазниц.СуммаНДС) * 
							 (СтрокаКурсовыхРазниц.КурсОплаты - СтрокаКурсовыхРазниц.КурсОтгрузки);
		
		Если КурсоваяРазницаРуб < 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = ДвиженияПроводкиDSSОбщие.Добавить();
		НоваяПроводка.Период = СтрокаКурсовыхРазниц.Период;
		
		ДанныеОВалютеSLB = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаSLB,НоваяПроводка.Период);
		
		//измерения
		НоваяПроводка.AccountLawson = ПланыСчетов.Lawson.НайтиПоКоду("800101");
		НоваяПроводка.FiscalType    = Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("Sum_Diff");
		НоваяПроводка.AU            = СтрокаКурсовыхРазниц.AU;
		НоваяПроводка.LegalEntity   = СтрокаКурсовыхРазниц.ПодразделениеОрганизации;
		//ресурсы
		НоваяПроводка.RubAmount     = КурсоваяРазницаРуб;
		НоваяПроводка.FiscAmount    = КурсоваяРазницаРуб / ДанныеОВалютеSLB.Курс;
		НоваяПроводка.PermDiff      = - НоваяПроводка.FiscAmount;
		//реквизиты
		НоваяПроводка.GltObjId = 1000000000;
		НоваяПроводка.Reference = Batch;
		НоваяПроводка.Company = 4;
		НоваяПроводка.Модуль = Перечисления.МодулиРазработки.SalesBook;
		НоваяПроводка.Description = "Sum diff +";
		
	КонецЦикла;
	
	Попытка
		ДвиженияПроводкиDSSОбщие.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать движения в регистр Проводки DSS:
		|"+ ОписаниеОшибки());
	КонецПопытки;	
		
КонецПроцедуры // ДвиженияПоРегиструПроводкиDSSОбщие

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок)


	
	// Бухгалтерские проводки документа
	Если Не СтруктураШапкиДокумента.Оплачено Тогда
		Возврат;
	Конецесли;

	ДатаДока = СтруктураШапкиДокумента.Дата;
	ВидСчетаОрг = СтруктураШапкиДокумента.СчетОрганизации.ВидСчета;
	ВалютаСчета = СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств;
	
	//ПроводкиБУ  = Движения.Хозрасчетный;
    ЗаписиДС = Движения.СчетаДенежныхСредств;
	
	РасчетыВВалюте = Ложь;
	
	СчетДт = СтруктураШапкиДокумента.СчетБанк;

	Если СчетДт.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	

	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);
		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		СодержаниеПроводки = "";
		Если ЕстьРасчетыПоКредитам Тогда
		    СодержаниеПроводки = "Расчеты по кредитам и займам";
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
			СодержаниеПроводки = "Расчеты с контрагентом";
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли; 

		//Добавлено Булавский, РГ_Софт
		Для каждого РезультатРаспределения из РеестрПлатежей Цикл
			ЗаписьДС = ЗаписиДС.Добавить();
			ЗаписьДС.Период = ДатаДока;
			ЗаписьДС.Регистратор = Ссылка;
			ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
			ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
			ЗаписьДС.СуммаВал = РезультатРаспределения .ВалютнаяСумма;
			ЗаписьДС.Сумма = РезультатРаспределения.РублеваяСумма;
		КонецЦикла;
		
		//КонецДобавления
		
		//Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей)=Ложь тогда
		//	Возврат;
		//КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда

		//Проводка = ПроводкиБУ.Добавить();

		//Проводка.Период     = ДатаДока;
		//Проводка.Содержание = "Прочее поступление денежных средств";
		//Проводка.Организация = СтруктураШапкиДокумента.Организация;

		//Проводка.СчетДт     = СчетДт;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

		//Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		
		//Добавлено Булавский, РГ-СОфт
		ЗаписьДС = ЗаписиДС.Добавить();
		ЗаписьДС.Период = ДатаДока;
		ЗаписьДС.Регистратор = Ссылка;
		ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Приход;
		ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
		ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
		ЗаписьДС.СуммаВал = СуммаДокумента;
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
		ЗаписьДС.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);

		
		//Если РасчетыВВалюте Тогда

		//	Если Проводка.СчетДт.Валютный Тогда
		//		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;

		//	Если Проводка.СчетКт.Валютный Тогда
		//		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;

		//	ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);

		//	Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
		//												 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
		//												 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		//Иначе
		//	Проводка.Сумма = СуммаДокумента;
		//КонецЕсли;
		
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		//	и ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		//	//Проводка по налоговому учету для прочего расхода
		//	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУ) тогда
		//		ПроводкаНУ = Движения.Налоговый.Добавить();
		//		ПроводкаНУ.Период     = СтруктураШапкиДокумента.Дата;
		//		ПроводкаНУ.Содержание = "Прочее поступление денежных средств";
		//		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		//		
		//		ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетУчетаНУ;
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
		//		ПроводкаНУ.Сумма = Проводка.Сумма;
		//		
		//	КонецЕсли;
		//КонецЕсли;

	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

	// Движения по регистру Расчеты с покупателями
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	РУБ = Справочники.Валюты.НайтиПоКоду("643");
	
	Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		//Движение = Движения.ВзаиморасчетыСПокупателями.Добавить();
		//ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ); 
		//Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетНаПредоплату) Тогда
		//	Движение.Сделка = Ссылка;		
		//КонецЕсли;
		//Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//Движение.Период = Дата;
		//Движение.ПодразделениеОрганизации = ПодразделениеОрганизации;
		//Движение.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, ВалютаДокумента, РУБ, СтрокаТЧ.КурсВзаиморасчетов, 1);
		//Движение.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, ВалютаДокумента, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
		//
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетНаПредоплату) Тогда
			Запись = Движения.СчетаНаПредоплату.Добавить();
			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
			Запись.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			Запись.Период = Дата;
			Запись.ПодразделениеОрганизации = СтрокаТЧ.СчетНаПредоплату.ПодразделениеОрганизации;
			Запись.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
			Запись.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, ВалютаДокумента, РУБ, СтрокаТЧ.КурсВзаиморасчетов, 1);
			Запись.СчетНаОплату = СтрокаТЧ.СчетНаПредоплату;
		КонецЕсли;
		
	КонецЦикла;
	Движения.СчетаНаПредоплату.Записать();
	
	//РГ-Софт, Прокошева
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		СписокСделок = РасшифровкаПлатежа.ВыгрузитьКолонку("Сделка");
		СписокДоговоров = РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
		
		//Изменила Федотова Л., РГ-Софт, 23.09.15, вопрос SLI-0005804
		//ТаблицаСтрокРег=SalesBook.НайтиСтрокиРегистраВзаиморасчетов(ПодразделениеОрганизации, СписокДоговоров,СписокСделок,,МоментВремени());
		ТаблицаСтрокРег=SalesBook.НайтиСтрокиРегистраВзаиморасчетов(ПодразделениеОрганизации, СписокДоговоров,СписокСделок,,КонецДня(Дата));
		Реал = Неопределено;
		Реал2 = Неопределено;

		ТаблицаНов = РасшифровкаПлатежа.Выгрузить().Скопировать();
		ТаблицаНов.Свернуть("ДоговорКонтрагента, Сделка, КурсВзаиморасчетов, СтавкаНДС, СчетНаПредоплату, ПодразделениеОрганизации", "СуммаПлатежа, СуммаВзаиморасчетов, СуммаНДС");
		
		Для каждого СтрокаТЧ из ТаблицаНов Цикл
			
			ОтборСтрок = Новый Структура("ДоговорКонтрагента,Сделка",СтрокаТЧ.ДоговорКонтрагента,СтрокаТЧ.Сделка);
			СтрокиРег = ТаблицаСтрокРег.НайтиСтроки(ОтборСтрок);
			Если СтрокиРег.Количество() <>0 и ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетНаПредоплату) Тогда
				ОсталосьСписать = СтрокаТЧ.СуммаВзаиморасчетов;
				Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
					ОсталосьСписатьРегл = СтрокаТЧ.СуммаПлатежа;
				КонецЕсли; 
				н=0;
				Пока ОсталосьСписать >0 ЦИкл
					//
					Если н + 1 > СтрокиРег.Количество() Тогда
					    Прервать;
					КонецЕсли;
					Движение = Движения.ВзаиморасчетыСПокупателями.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ); 
					Движение.СчетНаПредоплату = Неопределено;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					//Изменила Федотова Л., РГ-Софт, 31.05.13, вопрос SLI-0003610
					//Движение.Период = Дата;
					
					//Изменила Федотова Л., РГ-Софт, 23.09.15, вопрос SLI-0005804
					//Движение.Период = ДатаПроведения;
					Движение.Период = КонецДня(ДатаПроведения);
					Движение.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
					СуммаСписать=?(ОсталосьСписать > СтрокиРег[н].СуммаВзаиморасчетовОстаток,СтрокиРег[н].СуммаВзаиморасчетовОстаток ,ОсталосьСписать);
					Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
						//внесла изменения Федотова Л., РГ-Софт, 21.10.11, так как списывалась сумма отличающаяся от указанной в платежном поручении, 
						//и не шел акт сверки взаиморасчетов
						
						//Изменила Федотова Л., РГ-Софт, 15.04.15, вопрос SLI-0005352
						//СуммаСписатьРегл = ?(ОсталосьСписатьРегл > СтрокиРег[н].СуммаРеглОстаток,СтрокиРег[н].СуммаРеглОстаток ,ОсталосьСписатьРегл);
						////СуммаСписатьРегл = ОсталосьСписатьРегл;    //вернула, как было после исправления запроса (при получении ТаблицаСтрокРег)
						//СуммаСписатьРегл = ?(ОсталосьСписатьРегл > СтрокиРег[н].СуммаРеглОстаток,СтрокиРег[н].СуммаРеглОстаток ,ОсталосьСписатьРегл);
						СуммаСписатьРегл = ОсталосьСписатьРегл;    //вернула, как было после исправления запроса (при получении ТаблицаСтрокРег)
						Движение.СуммаРегл = СуммаСписатьРегл;
					Иначе	
						Движение.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаСписать, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, РУБ, СтрокаТЧ.КурсВзаиморасчетов, 1);
					КонецЕсли; 
					Движение.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаСписать, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
					Движение.СуммаВзаиморасчетов = СуммаСписать;
					Движение.КостЦентр = СтрокиРег[н].КостЦентр;
					Движение.WO = СтрокиРег[н].WO;
					//Изменила Федотова Л., РГ-Софт, 30.06.15, вопрос SLI-0005538
					//Движение.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
//{{MRG[ <-> ]
					Если ЗначениеЗаполнено(СтрокиРег[н].Сделка) Тогда
						Движение.ИнвойсинговыйЦентр = СтрокиРег[н].Сделка.ИнвойсинговыйЦентр;
					Иначе	
						Движение.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
					КонецЕсли; 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					//Если ЗначениеЗаполнено(СтрокиРег[н].Сделка) Тогда
//					//	Движение.ИнвойсинговыйЦентр = СтрокиРег[н].Сделка.ИнвойсинговыйЦентр;
//					//Иначе	
//					//	Движение.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
//					//КонецЕсли; 
//}}MRG[ <-> ]
					Реал = СтрокиРег[н].КостЦентр;
					Реал2 = СтрокиРег[н].WO;
					ОсталосьСписать = ОсталосьСписать-СуммаСписать;
					Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
						ОсталосьСписатьРегл = ОсталосьСписатьРегл - СуммаСписатьРегл;
					КонецЕсли; 
					н=н+1;
				КонецЦикла;
			Иначе         
				
				Движение = Движения.ВзаиморасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ); 
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Движение.Сделка) Тогда
					Движение.Сделка = Ссылка;
				КонецЕсли;
				Если Движение.Сделка = Ссылка И ВалютаДокумента.Код = "643" Тогда

					Движение.СуммаРегл = СтрокаТЧ.СуммаПлатежа;
				Иначе
					Движение.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, РУБ, СтрокаТЧ.КурсВзаиморасчетов, 1);
				КонецЕсли;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				//Изменила Федотова Л., РГ-Софт, 31.05.13, вопрос SLI-0003610
				
				//Изменила Федотова Л., РГ-Софт, 23.09.15, вопрос SLI-0005804
				//Движение.Период = Дата;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетНаПредоплату) Тогда
				    Движение.Период = КонецДня(ДатаПроведения);
				Иначе	
					Движение.Период = ДатаПроведения;
				КонецЕсли;  
				Движение.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
				Движение.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
				//Движение.СуммаРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, РУБ, СтрокаТЧ.КурсВзаиморасчетов, 1);
				Движение.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
				
				
				//Закомментировала Федотова Л., РГ-Софт, 06.12.13, вопрос SLI-0004022
				//Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Реал) Тогда
				//	
				//	Движение.КостЦентр = Реал;
				//КонецЕсли;	
				Если не ОбщегоНазначения.ЗначениеНеЗаполнено(Реал2) Тогда
					
					Движение.WO = Реал2;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

		Движения.ВзаиморасчетыСПокупателями.Записать();
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура("Организация");

	//СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	//Если Allocated Тогда
	//	СтруктураПолей.Вставить("ПодразделениеОрганизации","Не указано подразделение организации.");
	//КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда

		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");

	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		
		//Проверяем заполнение табличной части 
		//RG-Soft Розов 240706
		//СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом,ДоговорКонтрагента");
		//Изменила Федотова Л., РГ-Софт, 13.01.15, вопрос SLI-0005078
		//СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		СтруктураПолей = Новый Структура;
		//RG-Soft Розов 240706
		//добавил Трефиленков Дмитрий, РГ-Софт
		Если Allocated Тогда
			СтруктураПолей.Вставить("ПодразделениеОрганизации");
			Для Каждого Платеж Из РасшифровкаПлатежа Цикл
				Если Платеж.ДоговорКонтрагента.Наименование = "NotAllocatedRUR" ИЛИ Платеж.ДоговорКонтрагента.Наименование = "NotAllocatedUSD" Тогда
					Отказ = Истина;
					Сообщить("Наличие договора NotAllocated означает, что платеж не аллокирован. Снимите галку Allocated, либо правильно аллокируйте платеж.");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		//конец добавления


		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			БухгалтерскийУчет.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
													  Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтрокуПоНераспределеннойСумме() Экспорт
	
	//Удаляем строки с незаполненными договорами
	Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			РасшифровкаПлатежа.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	СуммаПоСтрокам = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Разница = СуммаДокумента - СуммаПоСтрокам;
	Если Разница>0 Тогда
		СтрокаНеРаспределено = РасшифровкаПлатежа.Добавить();
		СтрокаНеРаспределено.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.NotAllocated;
		СтрокаНеРаспределено.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.NotAllocated;
		СтрокаНеРаспределено.КурсВзаиморасчетов = 1;
		СтрокаНеРаспределено.КратностьВзаиморасчетов = 1;
		СтрокаНеРаспределено.СуммаВзаиморасчетов = Разница;
		СтрокаНеРаспределено.СуммаПлатежа = Разница;
		СтрокаНеРаспределено.СуммаНДС = 0;
		СтрокаНеРаспределено.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;

		Если ВалютаДокумента.Код = "643" Тогда

			СтрокаНеРаспределено.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("NotAllocatedRUR");
		ИначеЕсли ВалютаДокумента.Наименование = "USD" Тогда
			СтрокаНеРаспределено.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("NotAllocatedUSD");
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

//Добавил Булавский Анатолий, РГ-Софт, 21.10.2010 ->

Процедура ПровестиПоРегиструОстаткиВзаиморасчетовПоИнвойсам()
	ЗаписиРегистра = Движения.ОстаткиВзаиморасчетовПоИнвойсам;
	Для каждого СтрокаРаспределения Из РаспределениеПоИнвойсам Цикл
		ЗаписьНовая = ЗаписиРегистра.Добавить();
		ЗаписьНовая.Период = Дата;
		ЗаписьНовая.ВидДвижения = ВидДвиженияНакопления.Расход;
		ЗаписьНовая.Инвойс = СтрокаРаспределения.Инвойс;
		ЗаписьНовая.Реализация = СтрокаРаспределения.Реализация;
		ЗаписьНовая.СуммаИнвойса = СтрокаРаспределения.СуммаРаспределения;
	КонецЦикла; 
	ЗаписиРегистра.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено ИЛИ ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
       	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	#Если Клиент Тогда
		Дата = РабочаяДата;
	#КонецЕсли

	ВалютаДокумента             = мВалютаРегламентированногоУчета;

	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);

	КонецЕсли;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	//добавлено для 8.2  РГ-Софт - Петроченко   	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или // Пахоменков 12.09.2012 закоментированных доков нет в конфе
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или    
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаНМА") или                
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		 Тогда
	//добавлено для 8.2	  РГ-Софт - Петроченко
	
	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
	 или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
	 или ВидДокументаОснования = "ОтчетКомиссионераОПродажах" 
	 или ВидДокументаОснования = "ОтчетКомитентуОПродажах" 
	 или ВидДокументаОснования = "ПередачаОС" 
	 или ВидДокументаОснования = "ПередачаНМА" 
	 или ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда

		ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента    = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
	
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();

		Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
			СчетОрганизации = ПараметрыДокументаОснования.СтруктурнаяЕдиница;
		КонецЕсли;

		Если Не ВидДокументаОснования = "ОтчетКомитентуОПродажах" или ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе

			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();

			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
				
			ИначеЕсли ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;

		КонецЕсли;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 

		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];

	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = ПараметрыСеанса.ТекущийПользователь;
	
    КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	//RG-Soft Розов 240706
	//СтруктураШапкиДокумента.Удалить("ДоговорКонтрагента");
	//RG-Soft Розов 240706
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Оплачено Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("Платежное поручение может быть проведено только если оно оплачено(флаг ""Оплачено"")."+Символы.ПС+
		         "До установки признака оплаты документ можно только записать.",Отказ,Заголовок);
	Иначе
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам тогда 

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;

		//Проверим на возможность проведения в БУ и НУ
		//Закомментировала Федотова Л., РГ-Софт, 27.05.2016, вопрос SLI-0006492
		//Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл

		//	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
		//    Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");

		//КонецЦикла;

	КонецЕсли;

	// Движения по документу
	Если Оплачено И НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения") И ДополнительныеСвойства.ЭтоПробноеПроведениеПередЗапускомПроцессаУтверждения Тогда
		Возврат;
	КонецЕсли; 
	
	//Если ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
	//	ИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнойИнвойсинговыйЦентр");		
	//КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если Не Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Сообщить("Платежное поручение может быть проведено только если оно оплачено (флаг ""Оплачено"")."+Символы.ПС+
		         "До установки признака оплаты документ можно только записать.", СтатусСообщения.Информация);
		
		РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

 
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
