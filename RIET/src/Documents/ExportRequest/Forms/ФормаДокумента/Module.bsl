
////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Функция БоргИзСписка()
	Если (Объект.Segment = Справочники.Сегменты.НайтиПоКоду("WSV")
		Или Объект.Segment = Справочники.Сегменты.НайтиПоКоду("TLMS"))
		И (Объект.BORG = Справочники.BORGs.НайтиПоКоду("YD35") 
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("YD59")
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("YD79")
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("YD60")
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("DRU9")
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("DRUN")
		Или Объект.BORG = Справочники.BORGs.НайтиПоКоду("DACE")) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЕстьПрисоединенныеФайлы()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ExportRequestПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ExportRequestПрисоединенныеФайлы КАК ExportRequestПрисоединенныеФайлы
		|ГДЕ
		|	ExportRequestПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();	
КонецФункции

&НаСервере
Процедура ПроверкаЗаполнения(Отказ)
	// { RGS EParshina 11.09.2018 11:45:20 - S-I-0005711
	Если БоргИзСписка() Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникСтрокиИнвойса.КодПоИнвойсу,
			|	СправочникСтрокиИнвойса.BPN,
			|	СправочникСтрокиИнвойса.ImportReference,
			|	СправочникСтрокиИнвойса.Manufacturer,
			|	СправочникСтрокиИнвойса.Ссылка КАК Item
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК СправочникСтрокиИнвойса
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TDStatuses.СрезПоследних КАК TDStatusesСрезПоследних
			|		ПО СправочникСтрокиИнвойса.Ссылка = TDStatusesСрезПоследних.Item
			|			И (TDStatusesСрезПоследних.DOC = &ExportRequest)
			|			И (TDStatusesСрезПоследних.PartNo.Код = СправочникСтрокиИнвойса.КодПоИнвойсу)
			|ГДЕ
			|	СправочникСтрокиИнвойса.ExportRequest = &ExportRequest";
		
		Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ПолныйТекстОшибокEN = "";
		ПолныйТекстОшибокRU = "";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстОшибки = "";
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодПоИнвойсу) Тогда
				ТекстОшибки = "SPN";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.BPN) Тогда
				ТекстОшибки =?(ЗначениеЗаполнено(ТекстОшибки),ТекстОшибки+",","") + "BPN";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ImportReference) Тогда
				ТекстОшибки =?(ЗначениеЗаполнено(ТекстОшибки),ТекстОшибки+",","") + "Import reference";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Manufacturer) Тогда
				ТекстОшибки =?(ЗначениеЗаполнено(ТекстОшибки),ТекстОшибки+",","") + "Manufacturer";
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ПолныйТекстОшибокRU = ?(ЗначениеЗаполнено(ПолныйТекстОшибокRU),ПолныйТекстОшибокRU + Символы.ПС + Символы.ВК, "") + "Строка инвойса - " +ВыборкаДетальныеЗаписи.Item + "  - не заполнены поля:" + ТекстОшибки;
				ПолныйТекстОшибокEN = ?(ЗначениеЗаполнено(ПолныйТекстОшибокEN),ПолныйТекстОшибокEN + Символы.ПС + Символы.ВК, "") + "Item - "+ВыборкаДетальныеЗаписи.Item + "  -  fields are not filled:" + ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ПолныйТекстОшибокEN) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = '" + ПолныйТекстОшибокRU + "'; en = '" + ПолныйТекстОшибокEN + "'");
			Сообщение.Поле = "Items";
			Сообщение.Сообщить();		
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли
	// } RGS EParshina 11.09.2018 11:45:20 - S-I-0005711	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	// Далее будут запросы, для выполнения которых не нужно проверять права доступа, поэтому для скорости установим привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНовыйExportRequest();
	КонецЕсли;
	
	НастроитьВидимостьВЗависимостиОтСостояния();
	СкрытьЭлементыОтSubmitterПриНеобходимости();
	НастроитьВидимостьToTMS();
	НастроитьПараметрыВыбораToTMS();
	НастроитьВидимостьПоExportPurpose();
	НастроитьВидимостьПоUrgency();
	НастроитьВидимостьПоPickUpFrom();
	//НастроитьВидимостьПоDomesticOBSentToTMS();
	НастроитьВидимостьПоInternationalOBSentToTMS();
	НастроитьВидимостьArchiveShipper();
	НастроитьВидимостьПоConsignee();
	НастроитьВидимостьПоDeliverTo();
	НастроитьВидимостьOFSStoreTransactions();
	НастроитьВидимостьAcceptCancel();
	
	Stage = ОпределитьStage();
	
	ЗаполнитьРеквизитыExportShipment();
	ЗаполнитьРеквизитыTransportRequest();
	
	НастроитьItemsНаСервере();
	НастроитьParcelsНаСервере();
	
	УстановитьОтборActivityПоCostCenter();
	НастроитьПараметрыОтбораShipperContact();
	    		
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.ExportRequestОткрытие, Объект.Ссылка);
	// { RGS LHristyc 02.07.2018 10:33:20 - S-I-0004942
	УстановитьДоступностьЭлементовExportReports();
	// } RGS LHristyc 02.07.2018 10:33:22 - S-I-0004942 
	
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested, Ложь);
	КонецЕсли;
	НастроитьВидимостьКонтракта();
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовыйExportRequest()

	Роли = Метаданные.Роли;
	
	Если РольДоступна(Роли.ImportExportSpecialist)
		ИЛИ РольДоступна(Роли.ImportExportAdministrator) Тогда
	
		// Для экспортного специалиста страну можно определить по Process level
		Объект.ExportSpecialist = ПараметрыСеанса.ТекущийПользователь;
		Объект.ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.ExportSpecialist, "ProcessLevel");
		Если ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
			Объект.FromCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.ProcessLevel, "Country");
		КонецЕсли;
		
	ИначеЕсли РольДоступна(Роли.ImportExportTracker)
		ИЛИ РольДоступна(Роли.SegmentLogisticsSpecialist) Тогда
		
		// Для внешнего пользователя или логистика сегмента страну можно определить по последним реквестам
		Если НЕ ЗначениеЗаполнено(Объект.FromCountry) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Submitter", Объект.Submitter);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Last5Countries.FromCountry
				|ИЗ
				|	(ВЫБРАТЬ ПЕРВЫЕ 5
				|		ExportRequest.FromCountry КАК FromCountry
				|	ИЗ
				|		Документ.ExportRequest КАК ExportRequest
				|	ГДЕ
				|		ExportRequest.AcceptedBySpecialist > ДАТАВРЕМЯ(1, 1, 1)
				|		И ExportRequest.Submitter = &Submitter
				|		И (НЕ ExportRequest.Canceled)
				|	
				|	УПОРЯДОЧИТЬ ПО
				|		ExportRequest.AcceptedBySpecialist УБЫВ) КАК Last5Countries";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Объект.FromCountry = Выборка.FromCountry;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) И ЗначениеЗаполнено(Объект.FromCountry) Тогда
		Объект.Company = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "SoldTo", "Country", Объект.FromCountry);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Shipper) И ЗначениеЗаполнено(Объект.Company) Тогда
		Объект.Shipper = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "ConsignTo", "Владелец", Объект.Company);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Urgency) Тогда
		Объект.Urgency = Перечисления.Urgencies.Standard;
	КонецЕсли;
	   	
	Если НЕ ЗначениеЗаполнено(Объект.Activity) Тогда
		Объект.Activity = Справочники.ActivityCodes.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьВЗависимостиОтСостояния()
	
	Элементы.ФормаSubmitToExportSpecialist.Видимость = НЕ ЗначениеЗаполнено(Объект.Submitted);
	Элементы.ФормаCancel.Видимость = НЕ Объект.Canceled;
	Элементы.ФормаReturnToWork.Видимость = Объект.Canceled И НЕ Объект.ПометкаУдаления;
	
	Элементы.Canceled.Видимость = Объект.Canceled;
	Элементы.ПометкаУдаления.Видимость = Объект.ПометкаУдаления;
	
	Элементы.СтраницаStages.Видимость = ЗначениеЗаполнено(Объект.Submitted);
	
	Если НЕ ЗначениеЗаполнено(Объект.LocalFreightProvider) Тогда
		Объект.LocalFreightProvider = Справочники.ServiceProviders.ПустаяСсылка();	
	// { RGS DKazanskiy 08.10.2018 14:16:30 - S-I-0005759
		Элементы.LocalWB.Видимость =  Ложь;
	Иначе
		Элементы.LocalWB.Видимость =  НЕ СтрНайти(Строка(Объект.CCA.Код),"DHL") = 0;
	// } RGS DKazanskiy 08.10.2018 14:16:42 - S-I-0005759
	КонецЕсли;
	
КонецПроцедуры
       
&НаСервере
Процедура СкрытьЭлементыОтSubmitterПриНеобходимости()
	
	Если НЕ CustomsСервер.ЭтоImportExportTracker() Тогда
		Возврат;
	КонецЕсли;
	
	// Видимость настраивается с помощью пользовательской видимости
	// а здесь только доступность
	
	Элементы.Submitted.ТолькоПросмотр = Истина;
	Элементы.Submitted.Доступность = Ложь;
	
	Элементы.Submitter.ТолькоПросмотр = Истина;
	Элементы.Submitter.Доступность = Ложь;

	Элементы.AcceptedBySpecialist.ТолькоПросмотр = Истина;
	Элементы.AcceptedBySpecialist.Доступность = Ложь;
	     	
	Элементы.ExportSpecialist.ТолькоПросмотр = Истина;
	Элементы.ExportSpecialist.Доступность = Ложь;
	
	Элементы.PageOtherInvolvedParties.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьStage()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Перечисления.ExportStages.Draft;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	StagesOfExportRequests.Stage
		|ИЗ
		|	РегистрСведений.StagesOfExportRequests КАК StagesOfExportRequests
		|ГДЕ
		|	StagesOfExportRequests.ExportRequest = &Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Stage;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьArchiveShipper()
	
	Элементы.ArchiveShipperContact.Видимость = ЗначениеЗаполнено(Объект.ArchiveShipperContact);
	Элементы.ArchiveShipperPhone.Видимость = ЗначениеЗаполнено(Объект.ArchiveShipperPhone);
	Элементы.ArhiveShipperEmail.Видимость = ЗначениеЗаполнено(Объект.ArchiveShipperEmail);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыExportShipment()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если CustomsСервер.ЭтоImportExportTracker() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ExportShipmentExportRequests.Ссылка КАК ExportShipment,
		|	ExportShipmentExportRequests.Ссылка.SubmittedToCustoms КАК SubmittedToCustoms,
		|	ExportShipmentExportRequests.Ссылка.ReleasedFromCustoms КАК ReleasedFromCustoms,
		|	ExportShipmentExportRequests.Ссылка.InternationalETD КАК InternationalETD,
		|	ExportShipmentExportRequests.Ссылка.InternationalATD КАК InternationalATD,
		|	ExportShipmentExportRequests.Ссылка.PreAlertSent КАК PreAlertSent,
		|	ExportShipmentExportRequests.Ссылка.InternationalETA КАК InternationalETA,
		|	ExportShipmentExportRequests.Ссылка.InternationalATA КАК InternationalATA,
		|	ExportShipmentExportRequests.Ссылка.InternationalWBList КАК InternationalWBList
		|ИЗ
		|	Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
		|ГДЕ
		|	ExportShipmentExportRequests.ExportRequest = &ExportRequest
		|	И (НЕ ExportShipmentExportRequests.Ссылка.ПометкаУдаления)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ExportShipment = Выборка.ExportShipment;
		Элементы.ExportShipment.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ExportShipment.Ширина = 35;
		
		SubmittedToCustoms = Выборка.SubmittedToCustoms;
		ReleasedFromCustoms = Выборка.ReleasedFromCustoms;
		InternationalETD = Выборка.InternationalETD;
		InternationalATD = Выборка.InternationalATD;
		PreAlertSent = Выборка.PreAlertSent;
		InternationalETA = Выборка.InternationalETA;
		InternationalATA = Выборка.InternationalATA;
		InternationalWBList = Выборка.InternationalWBList;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ExportShipment) Тогда
		ExportShipment = "Create new";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыTransportRequest()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если CustomsСервер.ЭтоImportExportTracker() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	TransportRequest.Ссылка КАК TransportRequest
		|ИЗ
		|	Документ.TransportRequest КАК TransportRequest
		|ГДЕ
		|	TransportRequest.ExportRequest = &ExportRequest
		|	И НЕ TransportRequest.ПометкаУдаления";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		TransportRequest = Выборка.TransportRequest;
	КонецЕсли;
	
	НастроитьВидимостьTransportRequest();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьTransportRequest()
	
	Если НЕ ЗначениеЗаполнено(TransportRequest) Тогда
		TransportRequest = "Create new";
	КонецЕсли;

	Элементы.TransportRequest.Видимость = Не (Объект.LocalMOT = Справочники.MOTs.COURIER);
			
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыОтбораShipperContact()
	
	Если Не ЗначениеЗаполнено(Объект.ProcessLevel) 
		ИЛИ Не ЗначениеЗаполнено(Объект.Segment) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ProcessLevel", Объект.ProcessLevel);
	Запрос.УстановитьПараметр("Segment", Объект.Segment);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	SLSRCAProcessLevels.Ссылка КАК SLSRCA
	               |ПОМЕСТИТЬ SLSRCAProcessLevels
	               |ИЗ
	               |	Справочник.SLSRCA.ProcessLevels КАК SLSRCAProcessLevels
	               |ГДЕ
	               |	SLSRCAProcessLevels.ProcessLevel = &ProcessLevel
	               |	И НЕ SLSRCAProcessLevels.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	SLSRCASegments.Ссылка КАК SLSRCA
	               |ПОМЕСТИТЬ SLSRCASegments
	               |ИЗ
	               |	Справочник.SLSRCA.Segments КАК SLSRCASegments
	               |ГДЕ
	               |	НЕ SLSRCASegments.Ссылка.ПометкаУдаления
	               |	И SLSRCASegments.Segment = &Segment
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	SLSRCA.Ссылка КАК SLSRCA
	               |ИЗ
	               |	Справочник.SLSRCA КАК SLSRCA
	               |ГДЕ
	               |	SLSRCA.Ссылка В
	               |			(ВЫБРАТЬ
	               |				SLSRCAProcessLevels.SLSRCA
	               |			ИЗ
	               |				SLSRCAProcessLevels КАК SLSRCAProcessLevels)
	               |	И SLSRCA.Ссылка В
	               |			(ВЫБРАТЬ
	               |				SLSRCASegments.SLSRCA
	               |			ИЗ
	               |				SLSRCASegments КАК SLSRCASegments)";
	
	МассивSLSRCA = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("SLSRCA");
		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивSLSRCA));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ShipperContact.ПараметрыВыбора = НовыеПараметрыВыбора;		
	
КонецПроцедуры

// { RGS LHristyc 29.06.2018 17:14:21 - S-I-0004942
&НаСервере
Процедура УстановитьДоступностьЭлементовExportReports()
	
	Если CustomsСервер.ЭтоБрокер() ИЛИ РольДоступна("РедактированиеНедоступныхПолейExport") Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS DKazanskiy 22.08.2018 10:56:22 - 
	// Set the read only flags for elements by default before checking access rights
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAGLReceived", "ТолькоПросмотр", Ложь);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationRequired", "ТолькоПросмотр", Ложь);
	// { RGS DKazanskiy 09.10.2018 10:15:21 - S-I-0005759
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationCertificateRequired", "ТолькоПросмотр", Ложь);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationDone", "ТолькоПросмотр", Ложь);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequired", "ТолькоПросмотр", Ложь);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangePermits", "Видимость", Ложь);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangeIPLetter", "Видимость", Ложь);
	// } RGS DKazanskiy 09.10.2018 10:15:29 - S-I-0005759
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsObtained", "ТолькоПросмотр", Ложь);

	// } RGS DKazanskiy 22.08.2018 10:56:26 - 
	
	ИспользуетсяExportReports = ПланыОбмена.Leg7.ПолучитьИспользованиеExportReportsДляCCA(Объект.CCA);
	Если ИспользуетсяExportReports Тогда
		ProcessLevelЕстьВУзле = ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(Объект.CCA, Объект.ProcessLevel);
	КонецЕсли;
	
	Если ИспользуетсяExportReports И ProcessLevelЕстьВУзле Тогда
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAGLReceived", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationRequired", "ТолькоПросмотр", Истина);
		// { RGS DKazanskiy 09.10.2018 10:15:21 - S-I-0005759
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationCertificateRequired", "ТолькоПросмотр", Истина);
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationDone", "ТолькоПросмотр", Истина);
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequired", "ТолькоПросмотр", Истина);
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangePermits", "Видимость", Истина);
		//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangeIPLetter", "Видимость", Истина);
		// } RGS DKazanskiy 09.10.2018 10:15:29 - S-I-0005759
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsObtained", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры // } RGS LHristyc 29.06.2018 17:14:52 - S-I-0004942
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.СтрокиИнвойса") Тогда 
		
		ПоказатьВопрос(
		Новый ОписаниеОповещения("CopyImportItemsЗаверешение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)),
		"Are you sure you want to copy import items?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML" Тогда
		
		Ответ = ОбработатьПолучениеСтруктурыПочтовогоСообщенияHTML(ВыбранноеЗначение);
		
		Если Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ.записатьИсториюИзменения Тогда
			ТД = Элементы.Items.ТекущиеДанные;
			Если НЕ ТД = Неопределено Тогда
				TDСервер.ЗаписатьНовоеЗначениеСтатуса(НовыйСтатус, ТД.КодПоИнвойсу, Объект.Ссылка, НовыйЗапрос, ТД.Item, Ответ.ЭлПисьмо);
				// { RGS DKazanskiy 24.10.2018 14:34:38 - S-I-0005759
				ОбновитьStage();
				// } RGS DKazanskiy 24.10.2018 14:34:38 - S-I-0005759
				Элементы.Items.Обновить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CopyImportItemsЗаверешение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьItemsИзInvoice(Объект.Ссылка, Параметры.ВыбранноеЗначение);
	
	Элементы.Items.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ПриИзмененииCustomUnionTransaction();
	
	// { RGS AArsentev 28.06.2018
	Если CustomsСервер.ЭтоБрокер() Тогда
		Элементы.ГруппаLocalDelivery.Видимость = Ложь;
		Элементы.ГруппаInternationalDelivery.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev 28.06.2018
	
	// { RGS DKazanskiy 15.10.2018 9:45:12 - S-I-0005759
	НастроитьВидимостьTESSNo();
	НастроитьВидимостьTranCountry();
	// } RGS DKazanskiy 15.10.2018 9:45:14 - S-I-0005759
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Если был изменен Parcel, на котором сейчас спозиционирован курсор
	// значит надо обновить нижнее поле Parcel lines
	Если ИмяСобытия = "ИзмененParcel" Тогда
		
		Если Элементы.Parcels.ТекущаяСтрока = Параметр Тогда
			Элементы.ParcelLines.Обновить();
		КонецЕсли;			
		
	// { RGS DKazanskiy 08.08.2018 17:18:51 - S-I-0005748
	ИначеЕсли ИмяСобытия = "ИзменениеСтрокиИнвойса"
		И НЕ Объект.Ссылка.Пустая() И Объект.Ссылка = Параметр Тогда
		ЭтаФорма.Прочитать();
	// } RGS DKazanskiy 08.08.2018 17:19:16 - S-I-0005748	
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	
	ТекущийОбъект.ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
	ПроверитьPermitsWithExportControl();
	                        	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.AcceptedBySpecialist) Тогда 
			ТекущийОбъект.AcceptedBySpecialist = ТекущаяДата();
			ТекущийОбъект.ExportSpecialist = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
	Иначе 
		
		ТекущийОбъект.AcceptedBySpecialist = Неопределено;
		ТекущийОбъект.ExportSpecialist = Неопределено;
		
	КонецЕсли;
	
	// { RGS DKazanskiy 03.08.2018 13:01:40 - S-I-0005748
	// проверим версию перед записью, чтобы исключить любые действия с версией (например, ручное удаление последних)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested, Ложь);
	КонецЕсли;
	
	ТекущийОбъект.ТекущаяВерсияДокумента = ТекущаяВерсия;	
	// } RGS DKazanskiy 03.08.2018 13:01:54 - S-I-0005748

КонецПроцедуры

&НаСервере
Процедура ПроверитьPermitsWithExportControl()
	
	PermitsWithExportControl.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Canceled ИЛИ Объект.CustomUnionTransaction Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Country", Объект.FromCountry);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Permits.Ссылка КАК Permit
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Permits КАК Permits
		|		ПО Items.КодПоИнвойсу = Permits.GoodsPartNoSerialNo
		|ГДЕ
		|	Items.ExportRequest = &Ссылка
		|	И НЕ Items.ПометкаУдаления
		|	И Items.КодПоИнвойсу <> """"
		|	И Items.КодПоИнвойсу <> ""N/A""
		|	И Items.КодПоИнвойсу <> ""N\A""
		|	И Items.КодПоИнвойсу <> ""NA""
		|	И Permits.ExportControl
		|	И Permits.Closed = ДАТАВРЕМЯ(1, 1, 1)
		|	И Permits.Country = &Country";
		
	PermitsWithExportControl.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Permit"));
	
	ExportControl = (PermitsWithExportControl.Количество() > 0);
	
	Если Объект.ExportControl <> ExportControl Тогда 
		Объект.ExportControl = ExportControl;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьВидимостьВЗависимостиОтСостояния();
			
	Stage = ОпределитьStage();	
	
	Если НЕ ЗначениеЗаполнено(ExportShipment) Тогда
		ExportShipment = "Create new";
	КонецЕсли;
	
	НастроитьItemsНаСервере();
		
	НастроитьParcelsНаСервере();
	
	НайтиТоварыВоВременномИмпорте();
	
	НастроитьВидимостьTransportRequest();
	
	НастроитьВидимостьAcceptCancel();
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.ExportRequestИнтерактивнаяЗапись, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура НайтиТоварыВоВременномИмпорте()
	
	ItemsInTempImp.Очистить();
	
	Если Объект.Canceled ИЛИ НЕ ЗначениеЗаполнено(Объект.AcceptedBySpecialist) Тогда
		Возврат;
	КонецЕсли;
	 		
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.УстановитьПараметр("ProcessLevel", Объект.ProcessLevel);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	QtyOfItemsInTemporaryImpExpОстатки.Item КАК Item
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.QtyOfItemsInTemporaryImpExp.Остатки КАК QtyOfItemsInTemporaryImpExpОстатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.AdditionalDataOfItemsInTemporaryImpExp КАК AdditionalDataOfItemsInTemporaryImpExp
		|			ПО (AdditionalDataOfItemsInTemporaryImpExp.Item = QtyOfItemsInTemporaryImpExpОстатки.Item)
		|		ПО (QtyOfItemsInTemporaryImpExpОстатки.Item.СерийныйНомер ПОДОБНО ""%"" + Items.СерийныйНомер + ""%""
		|				ИЛИ QtyOfItemsInTemporaryImpExpОстатки.Item.КодПоИнвойсу ПОДОБНО ""%"" + Items.КодПоИнвойсу + ""%"")
		|			И Items.КостЦентр.Segment = QtyOfItemsInTemporaryImpExpОстатки.Item.КостЦентр.Segment
		|ГДЕ
		|	Items.ExportRequest = &ExportRequest
		|	И НЕ Items.ПометкаУдаления
		|	И (Items.СерийныйНомер <> """"
		|				И Items.СерийныйНомер <> ""N/A""
		|				И Items.СерийныйНомер <> ""N\A""
		|				И Items.СерийныйНомер <> ""NA""
		|			ИЛИ Items.КодПоИнвойсу <> """"
		|				И Items.КодПоИнвойсу <> ""N/A""
		|				И Items.КодПоИнвойсу <> ""N\A""
		|				И Items.КодПоИнвойсу <> ""NA"")
		|	И AdditionalDataOfItemsInTemporaryImpExp.CustomsRegime.ImportExport = ЗНАЧЕНИЕ(Перечисление.ИмпортЭкспорт.Import)
		|	И AdditionalDataOfItemsInTemporaryImpExp.ProcessLevel = &ProcessLevel";
		
	ItemsInTempImp.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Item"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОткрытьTemporaryImpExpDesktopПриНеобходимости();
	
	ОткрытьPermitsПриНеобходимости(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьTemporaryImpExpDesktopПриНеобходимости()
	
	Если ItemsInTempImp.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
		
	СтруктураОтбора = Новый Структура("Ссылка", ItemsInTempImp);	
	СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);	
	ОткрытьФорму("Обработка.TemporaryImpExpDesktop.Форма", СтруктураПараметров);	
	
	ПоказатьПредупреждение(,
		"We found items in temporary import
		|that might be in current Export request.",
		30);
	
КонецПроцедуры
	     
&НаКлиенте
Процедура ОткрытьPermitsПриНеобходимости(ПоказыватьПредупреждение=Ложь)
	
	Если PermitsWithExportControl.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
		
	СтруктураОтбора = Новый Структура("Ссылка", PermitsWithExportControl);	
	СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);	
	ОткрытьФорму("Справочник.Permits.ФормаСписка", СтруктураПараметров, ЭтаФорма);	
	
	Если ПоказыватьПредупреждение Тогда 
		ПоказатьПредупреждение(, "Please check export control.", 30);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура SaveComment(Команда)
	
	Если Не Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("No need to save comment");
		Возврат;
	КонецЕсли;
	
	Если Не ИзмененТолькоКомментарий() Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("SaveCommentЗавершение", ЭтаФорма),
			"There is a changed data besides the comment. If you continue, the data changes will be lost. Continue?", 
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			,
			КодВозвратаДиалога.Нет);
			
	Иначе 
		
		SaveCommentНаСервере();
		
		Модифицированность = Ложь;
		
	КонецЕсли;
	        	
КонецПроцедуры

&НаКлиенте
Процедура SaveCommentЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
		
	SaveCommentНаСервере();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ИзмененТолькоКомментарий()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	// проверим изменилось ли еще что-то кроме комента
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ОбъектДляСервера);
	//проверяем неизменность всех ТЧ
	СписокТЧ = ОбъектДляСервера.Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	Если ИзмененныеРеквизиты.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты[0] = "SpecialistComments";
	
КонецФункции

&НаСервере
Функция SaveCommentНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ДокОбъект = ОбъектДляСервера.Ссылка.ПолучитьОбъект();
	ДокОбъект.SpecialistComments = ОбъектДляСервера.SpecialistComments;
	ДокОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ДокОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save comment!");
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

КонецФункции

////////////////////////////////////////////////////////////
// ВЕРХНЯЯ КОМАНДНАЯ ПАНЕЛЬ

&НаКлиенте
Процедура Cancel(Команда)
	
	Если Объект.Canceled Тогда
		ПоказатьПредупреждение(, "Export request is already canceled!", 60);
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("CancelExportRequestЗавершение", ЭтаФорма),
		"Are you sure you want to cancel Export request?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура CancelExportRequestЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Объект.Canceled = Истина;
	Модифицированность = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Copy(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("CopyExportRequestЗавершение", ЭтаФорма),
		"Are you sure you want to copy Export request?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура CopyExportRequestЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НовыйExportRequest = CopyНаСервере();
	Если ЗначениеЗаполнено(НовыйExportRequest) Тогда
		ПоказатьЗначение(, НовыйExportRequest);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция CopyНаСервере()
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	// Скопируем текущий Export request
	СтарыйОбъект = РеквизитФормыВЗначение("Объект");
	НовыйОбъект = СтарыйОбъект.Скопировать();
	
	// Сохраним новый Export request
	НовыйОбъект.Записать();
	
	// Скопируем все товары и грузовые места
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", СтарыйОбъект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Items.Ссылка
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|ГДЕ
		|	Items.ExportRequest = &ExportRequest
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Parcels.Ссылка,
		|	Parcels.Код
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.ExportRequest = &ExportRequest
		|	И (НЕ Parcels.Отменен)";	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Скопируем все товары, заодно запомним соответствие старых и новых товаров
	СоответствиеСтарыхИНовыхТоваров = Новый Соответствие;
	ВыборкаItems = Результаты[0].Выбрать();
	Пока ВыборкаItems.Следующий() Цикл
		
		НовыйТоварОбъект = ВыборкаItems.Ссылка.Скопировать();
		НовыйТоварОбъект.ExportRequest = НовыйОбъект.Ссылка;
		НовыйТоварОбъект.Записать();
		СоответствиеСтарыхИНовыхТоваров.Вставить(ВыборкаItems.Ссылка, НовыйТоварОбъект.Ссылка);		
		
	КонецЦикла;
	
	// Скопируем все не отмененные грузовые места
	ВыборкаParcels = Результаты[1].Выбрать();
	Пока ВыборкаParcels.Следующий() Цикл
		
		НовыйParcel = ВыборкаParcels.Ссылка.Скопировать();
		НовыйParcel.Код = СтрЗаменить(НовыйParcel.Код, СокрЛП(ВыборкаParcels.Код), СокрЛП(НовыйОбъект.Номер));
		НовыйParcel.ExportRequest = НовыйОбъект.Ссылка;
		
		// Заменим в табличной части старые товары на новые
		ParcelItems = НовыйParcel.Детали;
		Для Каждого СтрокаТЧ Из ParcelItems Цикл	
			СтрокаТЧ.СтрокаИнвойса = СоответствиеСтарыхИНовыхТоваров[СтрокаТЧ.СтрокаИнвойса];	
		КонецЦикла;
		
		НовыйParcel.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйОбъект.Ссылка;
		
КонецФункции

&НаКлиенте
Процедура ReturnToWork(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ReturnToWorkЗавершение", ЭтаФорма),
		"Are you sure you want to returnt to work Export request?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		       		
КонецПроцедуры

&НаКлиенте
Процедура ReturnToWorkЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ReturnToWorkНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ReturnToWorkНаСервере()
			
	НачатьТранзакцию();
	
	Объект.Canceled = Ложь;
	Модифицированность = Истина;
	Записать(Новый Структура);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ProcessLevelПриИзменении(Элемент)
	
	НастроитьПараметрыОтбораShipperContact();
	
	НастроитьВидимостьToTMS();
	
	// { RGS DKazanskiy 16.10.2018 13:48:26 - S-I-0005759
	НастроитьВидимостьTranCountry();
	// } RGS DKazanskiy 16.10.2018 13:48:45 - S-I-0005759
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// PRINT

&НаКлиенте
Процедура Print(Команда)
	
	ТабДок = ПечатьExportRequest();
	Если ТабДок <> Неопределено Тогда 
		ТабДок.Показать("Export request " + СокрЛП(Объект.Номер));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьExportRequest()
	
	// Запишем модифицированный документ
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to save current Export request.
				|See errors above.
				|" + ОписаниеОшибки(), , "Объект");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли; 
		
	// Получим данные
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ExportRequest.Submitter.Представление КАК SubmitterПредставление,
		|	ExportRequest.ExportPurpose.Представление КАК ExportPurposeПредставление,
		|	ExportRequest.BORG.Код КАК BORGКод,
		|	ExportRequest.AU.Код КАК AUКод,
		|	ExportRequest.Shipper.Наименование КАК ShipperНаименование,
		|	ExportRequest.Shipper.Address1 КАК ShipperAddress1,
		|	ExportRequest.Shipper.Address2 КАК ShipperAddress2,
		|	ExportRequest.Shipper.Address3 КАК ShipperAddress3,
		|	ExportRequest.Shipper.CityLocation КАК ShipperAddress4,
		|	ExportRequest.Shipper.Country КАК ShipperAddress5,
		|	ExportRequest.ShipperContact.Наименование КАК ShipperContactName,
		|	ExportRequest.ShipperContact.Phone КАК ShipperContactPhone,
		|	ExportRequest.ShipperContact.EMail КАК ShipperContactEmail,
		|	ExportRequest.PickUpWarehouse.Представление КАК PickUpFromПредставление,
		|	ExportRequest.PickUpWarehouse.Address1 КАК PickUpFromAddress1,
		|	ExportRequest.PickUpWarehouse.Address2 КАК PickUpFromAddress2,
		|	ExportRequest.PickUpWarehouse.Address3 КАК PickUpFromAddress3,
		|	ExportRequest.PickUpWarehouse.City КАК PickUpFromAddress4,
		|	ExportRequest.PickUpWarehouse.CountryCode КАК PickUpFromAddress5,
		|	ExportRequest.Consignee.Наименование КАК ConsigneeНаименование,
		|	ExportRequest.Consignee.Address1 КАК ConsigneeAddress1,
		|	ExportRequest.Consignee.Address2 КАК ConsigneeAddress2,
		|	ExportRequest.Consignee.Address3 КАК ConsigneeAddress3,
		|	ExportRequest.Consignee.City КАК ConsigneeAddress4,
		|	ExportRequest.Consignee.CountryCode КАК ConsigneeAddress5,
		|	ExportRequest.DeliverTo.Наименование КАК DeliverToНаименование,
		|	ExportRequest.DeliverTo.Address1 КАК DeliverToAddress1,
		|	ExportRequest.DeliverTo.Address2 КАК DeliverToAddress2,
		|	ExportRequest.DeliverTo.Address3 КАК DeliverToAddress3,
		|	ExportRequest.DeliverTo.City КАК DeliverToAddress4,
		|	ExportRequest.DeliverTo.CountryCode КАК DeliverToAddress5
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequest
		|ГДЕ
		|	ExportRequest.Ссылка = &ExportRequest
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ParcelsДетали.Ссылка.Код КАК КодParcel,
		|	ParcelsДетали.Ссылка.PackingType.Код КАК PackingType,
		|	ParcelsДетали.Ссылка.NetWeightKG,
		|	ParcelsДетали.Ссылка.GrossWeightKG,
		|	ParcelsДетали.Ссылка.LengthCM,
		|	ParcelsДетали.Ссылка.WidthCM,
		|	ParcelsДетали.Ссылка.HeightCM,
		|	ParcelsДетали.НомерСтроки КАК НомерСтроки,
		|	ParcelsДетали.Qty КАК Qty,
		|	ParcelsДетали.СтрокаИнвойса.НаименованиеТовара КАК DescriptionEng,
		|	ParcelsДетали.СтрокаИнвойса.DescriptionRus КАК DescriptionRus,
		|	ParcelsДетали.СтрокаИнвойса.КодПоИнвойсу КАК PartNo,
		|	ParcelsДетали.СерийныйНомер КАК SerialNo,
		|	ParcelsДетали.СтрокаИнвойса.Цена КАК Price,
		|	ParcelsДетали.Qty * ParcelsДетали.СтрокаИнвойса.Цена КАК TotalPrice,
		|	ParcelsДетали.СтрокаИнвойса.СтранаПроисхождения КАК CountryOfOrigin,
		|	ParcelsДетали.СтрокаИнвойса.ImportReference КАК ImportReference,
		|	ParcelsДетали.СтрокаИнвойса.НомерВходящейДекларации КАК PriorCCD,
		|	ParcelsДетали.СтрокаИнвойса.RAN КАК RAN
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|ГДЕ
		|	ParcelsДетали.Ссылка.ExportRequest = &ExportRequest
		|	И НЕ ParcelsДетали.Ссылка.Отменен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодParcel,
		|	НомерСтроки";
		
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаШапки = Результаты[0].Выбрать();
	ВыборкаШапки.Следующий();
	
	Выборка = Результаты[1].Выбрать();
	ЗафиксироватьТранзакцию();
	
	Если Выборка.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"List of ""Parcels"" is empty!", , "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	// получим макет
	Макет = Документы.ExportRequest.ПолучитьМакет("ExportRequest");
	          	
	// Выведем шапку
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ПараметрыШапки = ОбластьШапка.Параметры;
	ЗаполнитьЗначенияСвойств(ПараметрыШапки, Объект, "Номер, Activity, Submitted, ReadyToShipDate, ExportMode, Urgency,
		|ConsigneeContact, ConsigneePhone, ConsigneeEmail,
		|DeliverToContact, DeliverToPhone, DeliverToEmail,
		|PickUpFromContact, PickUpFromPhone, PickUpFromEmail, Comments");
	ЗаполнитьЗначенияСвойств(ПараметрыШапки, ВыборкаШапки, "SubmitterПредставление, ExportPurposeПредставление, ShipperНаименование, BORGКод, AUКод, PickUpFromПредставление, ConsigneeНаименование, DeliverToНаименование");
	
	ПараметрыШапки.ShipperAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаШапки.ShipperAddress1,
		ВыборкаШапки.ShipperAddress2,
		ВыборкаШапки.ShipperAddress3,
		ВыборкаШапки.ShipperAddress4,
		ВыборкаШапки.ShipperAddress5);
		
	ПараметрыШапки.ShipperContact = ?(ЗначениеЗаполнено(ВыборкаШапки.ShipperContactName), ВыборкаШапки.ShipperContactName, Объект.ArchiveShipperContact);
	ПараметрыШапки.ShipperPhone = ?(ЗначениеЗаполнено(ВыборкаШапки.ShipperContactPhone), ВыборкаШапки.ShipperContactPhone, Объект.ArchiveShipperPhone);
	ПараметрыШапки.ShipperEmail = ?(ЗначениеЗаполнено(ВыборкаШапки.ShipperContactEmail), ВыборкаШапки.ShipperContactEmail, Объект.ArchiveShipperEmail);
	
	ПараметрыШапки.ConsigneeAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаШапки.ConsigneeAddress1,
		ВыборкаШапки.ConsigneeAddress2,
		ВыборкаШапки.ConsigneeAddress3,
		ВыборкаШапки.ConsigneeAddress4,
		ВыборкаШапки.ConsigneeAddress5);
		
	ПараметрыШапки.DeliverToAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаШапки.DeliverToAddress1,
		ВыборкаШапки.DeliverToAddress2,
		ВыборкаШапки.DeliverToAddress3,
		ВыборкаШапки.DeliverToAddress4,
		ВыборкаШапки.DeliverToAddress5);
		
	ПараметрыШапки.PickUpFromAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаШапки.PickUpFromAddress1,
		ВыборкаШапки.PickUpFromAddress2,
		ВыборкаШапки.PickUpFromAddress3,
		ВыборкаШапки.PickUpFromAddress4,
		ВыборкаШапки.PickUpFromAddress5);
		
	ТабДок.Вывести(ОбластьШапка);
	
	// выведем шапку Parcels     
	ОбластьШапкаParcels = Макет.ПолучитьОбласть("ШапкаParcels");
    ТабДок.Вывести(ОбластьШапкаParcels);

	// выведем таблицу Parcels     
	ПредыдущийКодParcel = Неопределено;
	ExportPurposeRAN = Справочники.ExportPurposes.RAN;
	
	ВсегоNetWeightKG = 0;
	ВсегоGrossWeightKG = 0;
	ВсегоQty = 0;
	ВсегоTotalPrice = 0;
		
	Пока Выборка.Следующий() Цикл  
		
		ОбластьСтрокаParcel = Макет.ПолучитьОбласть("СтрокаParcel");
		ПараметрыОбластиСтрокаParcel = ОбластьСтрокаParcel.Параметры;
		
		Если ПредыдущийКодParcel <> Выборка.КодParcel Тогда
			
			ПредыдущийКодParcel = Выборка.КодParcel;
				
			СтрокаСвойств = "КодParcel, PackingType, NetWeightKG, GrossWeightKG, DescriptionEng, DescriptionRus, Qty, PartNo, SerialNo, Price, TotalPrice, CountryOfOrigin, ImportReference, PriorCCD";
			ПараметрыОбластиСтрокаParcel.LxHxW = "" + Выборка.LengthCM + "x" + Выборка.HeightCM + "x" + Выборка.WidthCM;
			
			ВсегоNetWeightKG   = ВсегоNetWeightKG + Выборка.NetWeightKG;
			ВсегоGrossWeightKG = ВсегоGrossWeightKG + Выборка.GrossWeightKG;
			
		Иначе
			
			СтрокаСвойств = "DescriptionEng, DescriptionRus, Qty, PartNo, SerialNo, Price, TotalPrice, CountryOfOrigin, ImportReference, PriorCCD"; 
			
		КонецЕсли;
		
		Если Объект.ExportPurpose = ExportPurposeRAN Тогда
			СтрокаСвойств = СтрокаСвойств + ", RAN";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОбластиСтрокаParcel, Выборка, СтрокаСвойств);
		ПараметрыОбластиСтрокаParcel.КодParcel = СокрЛП(ПараметрыОбластиСтрокаParcel.КодParcel);
		
		ТабДок.Вывести(ОбластьСтрокаParcel);
		
		ВсегоQty = ВсегоQty + Выборка.Qty;
		ВсегоTotalPrice = ВсегоTotalPrice + Выборка.TotalPrice;
		
	КонецЦикла;	
	           	
	// выведем итоги Parcels 
	ОбластьИтогов = Макет.ПолучитьОбласть("ИтогиParcels");
	ПараметрыОбластиИтогов = ОбластьИтогов.Параметры;
	
	ПараметрыОбластиИтогов.NetWeightKG = ВсегоNetWeightKG;
	ПараметрыОбластиИтогов.GrossWeightKG = ВсегоGrossWeightKG;
	ПараметрыОбластиИтогов.Qty = ВсегоQty;
	ПараметрыОбластиИтогов.TotalPrice = ВсегоTotalPrice;
	           	
    ТабДок.Вывести(ОбластьИтогов);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДок;
		
КонецФункции

&НаКлиенте
Процедура PrintLabels(Команда)
	
	ТабДокумент = СформироватьМассивLabels();	
	Если ТабДокумент <> Неопределено Тогда 
		ТабДокумент.Показать("Label " + СокрЛП(Объект.Номер));
	КонецЕсли;
                		
КонецПроцедуры

&НаСервере
Функция СформироватьМассивLabels()
	   		
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save current Export request.
			|See errors above.
			|" + ОписаниеОшибки(), , "Объект");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли; 
	
	// Получим данные
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ExportRequest.Shipper.Наименование КАК ShipperНаименование,
		|	ExportRequest.Shipper.Address1 КАК ShipperAddress1,
		|	ExportRequest.Shipper.Address2 КАК ShipperAddress2,
		|	ExportRequest.Shipper.Address3 КАК ShipperAddress3,
		|	ExportRequest.Shipper.CityLocation КАК ShipperAddress4,
		|	ExportRequest.Shipper.Country КАК ShipperAddress5,
		|	ExportRequest.ShipperContact.Наименование КАК ShipperContactName,
		|	ExportRequest.ShipperContact.Phone КАК ShipperContactPhone,
		|	ExportRequest.ShipperContact.EMail КАК ShipperContactEmail,
		|	ExportRequest.Consignee.Наименование КАК ConsigneeНаименование,
		|	ExportRequest.Consignee.Address1 КАК ConsigneeAddress1,
		|	ExportRequest.Consignee.Address2 КАК ConsigneeAddress2,
		|	ExportRequest.Consignee.Address3 КАК ConsigneeAddress3,
		|	ExportRequest.Consignee.City КАК ConsigneeAddress4,
		|	ExportRequest.Consignee.CountryCode КАК ConsigneeAddress5
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequest
		|ГДЕ
		|	ExportRequest.Ссылка = &ExportRequest
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Parcels.SpecialHandling.Код КАК SpecialHandlingCode
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Ссылка.ExportRequest = &ExportRequest
		|	И НЕ Parcels.Ссылка.Отменен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Parcels.Код";
		
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаДляКаждогоLabel = Результаты[0].Выбрать();
	ВыборкаДляКаждогоLabel.Следующий();
	
	ТЗParcels = Результаты[1].Выгрузить();
	ЗафиксироватьТранзакцию();
	
	КолВоParcels = ТЗParcels.Количество();
	Если КолВоParcels = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"List of ""Parcels"" is empty!", , "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	// получим макет
	Макет = Документы.ExportRequest.ПолучитьМакет("Label");
    	
	// заполним параметры
	ОбластьLabel = Макет.ПолучитьОбласть("ОбластьLabel");
	
	ПараметрыLabel = ОбластьLabel.Параметры;
	ПараметрыLabel.КолВоParcels = КолВоParcels;
	
	ЗаполнитьЗначенияСвойств(ПараметрыLabel, Объект, "Номер,
		|ConsigneeContact, ConsigneePhone, ConsigneeEmail");
	ЗаполнитьЗначенияСвойств(ПараметрыLabel, ВыборкаДляКаждогоLabel, "ShipperНаименование, ConsigneeНаименование");
	
	ПараметрыLabel.ShipperAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаДляКаждогоLabel.ShipperAddress1,
		ВыборкаДляКаждогоLabel.ShipperAddress2,
		ВыборкаДляКаждогоLabel.ShipperAddress3,
		ВыборкаДляКаждогоLabel.ShipperAddress4,
		ВыборкаДляКаждогоLabel.ShipperAddress5);
		
	ПараметрыLabel.ShipperContact = ?(ЗначениеЗаполнено(ВыборкаДляКаждогоLabel.ShipperContactName), ВыборкаДляКаждогоLabel.ShipperContactName, Объект.ArchiveShipperContact);
	ПараметрыLabel.ShipperPhone = ?(ЗначениеЗаполнено(ВыборкаДляКаждогоLabel.ShipperContactPhone), ВыборкаДляКаждогоLabel.ShipperContactPhone, Объект.ArchiveShipperPhone);
	ПараметрыLabel.ShipperEmail = ?(ЗначениеЗаполнено(ВыборкаДляКаждогоLabel.ShipperContactEmail), ВыборкаДляКаждогоLabel.ShipperContactEmail, Объект.ArchiveShipperEmail);	
		
	ПараметрыLabel.ConsigneeAddress = ImportExportСервер.ПолучитьАдресИзСоставляющих(
		ВыборкаДляКаждогоLabel.ConsigneeAddress1,
		ВыборкаДляКаждогоLabel.ConsigneeAddress2,
		ВыборкаДляКаждогоLabel.ConsigneeAddress3,
		ВыборкаДляКаждогоLabel.ConsigneeAddress4,
		ВыборкаДляКаждогоLabel.ConsigneeAddress5);

	ParcelНомерПП = 0;
	Для Каждого СтрокаТаблицыParcels Из ТЗParcels Цикл 
		
		ParcelНомерПП = ParcelНомерПП + 1;
		ПараметрыLabel.ParcelНомерПП = ParcelНомерПП;
		ПараметрыLabel.SpecialHandlingCode = СокрЛП(СтрокаТаблицыParcels.SpecialHandlingCode);
		
		ТабДок.Вывести(ОбластьLabel);
						
	КонецЦикла;

	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	
	Возврат ТабДок;
			
КонецФункции

&НаКлиенте
Процедура PrintExportInvoice(Команда)
	
	ТабДок = ПолучитьТабДокExportInvoice();
	Если ТабДок <> Неопределено Тогда 
		ТабДок.Показать("Export invoice " + СокрЛП(Объект.Номер));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокExportInvoice()
	
	Если НЕ ЗначениеЗаполнено(Объект.AcceptedBySpecialist) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Export request is not accepted by export specialist!",
			, "AcceptedBySpecialist", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	// Запишем модифицированный документ
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to save current Export request.
				|See errors above.
				|" + ОписаниеОшибки(), , "Объект");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли; 
		
	// Получим данные
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ExportRequest.AU.Код КАК AUCode,
		|	ExportRequest.Shipper.Наименование КАК ShipperName,
		|	ExportRequest.Shipper.Address1 КАК ShipperAddress1,
		|	ExportRequest.Shipper.Address2 КАК ShipperAddress2,
		|	ExportRequest.Shipper.Address3 КАК ShipperAddress3,
		|	ExportRequest.Shipper.CityLocation КАК ShipperAddress4,
		|	ExportRequest.Shipper.Country КАК ShipperAddress5,
		|	ExportRequest.ShipperContact.Наименование КАК ShipperContactName,
		|	ExportRequest.ShipperContact.Phone КАК ShipperContactPhone,
		|	ExportRequest.ShipperContact.EMail КАК ShipperContactEmail,
		|	ExportRequest.Consignee.Наименование КАК ConsigneeName,
		|	ExportRequest.Consignee.Address1 КАК ConsigneeAddress1,
		|	ExportRequest.Consignee.Address2 КАК ConsigneeAddress2,
		|	ExportRequest.Consignee.Address3 КАК ConsigneeAddress3,
		|	ExportRequest.Consignee.City КАК ConsigneeAddress4,
		|	ExportRequest.Consignee.CountryCode КАК ConsigneeAddress5,
		|	ExportRequest.DeliverTo.Наименование КАК DeliverToName,
		|	ExportRequest.DeliverTo.Address1 КАК DeliverToAddress1,
		|	ExportRequest.DeliverTo.Address2 КАК DeliverToAddress2,
		|	ExportRequest.DeliverTo.Address3 КАК DeliverToAddress3,
		|	ExportRequest.DeliverTo.City КАК DeliverToAddress4,
		|	ExportRequest.DeliverTo.CountryCode КАК DeliverToAddress5,
		|	ExportRequest.AU.Segment.Код КАК SegmentCode,
		|	ExportRequest.Company.CompanyNo КАК CompanyNo,
		|	ExportRequest.Incoterms.Код КАК IncotermsCode,
		|	ExportRequest.Activity,
		|	ExportRequest.PickUpWarehouse.Address1 КАК PickUpAddress1,
		|	ExportRequest.PickUpWarehouse.Address2 КАК PickUpAddress2,
		|	ExportRequest.PickUpWarehouse.Address3 КАК PickUpAddress3,
		|	ExportRequest.PickUpWarehouse.City КАК PickUpAddress4,
		|	ExportRequest.PickUpWarehouse.RCACountry КАК PickUpAddress5,
		|	BORGs.Код КАК BORGCode,
		// { RGS DKazanskiy 19.10.2018 11:14:48 - S-I-0005759
		|	ExportRequest.ExportContract.Номер,
		|	ExportRequest.ExportContract.Дата
		// } RGS DKazanskiy 19.10.2018 11:14:58 - S-I-0005759
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequest
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs
		|		ПО ExportRequest.Company = BORGs.Компания
		|			И ExportRequest.AU = BORGs.DefaultAU
		|			И (НЕ BORGs.ПометкаУдаления)
		|ГДЕ
		|	ExportRequest.Ссылка = &ExportRequest
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Items.Ссылка КАК Item,
		|	Items.НомерСтрокиИнвойса КАК ItemNo,
		|	Items.НаименованиеТовара КАК ItemDescription,
		|	Items.СерийныйНомер КАК SerialNo,
		|	Items.СтранаПроисхождения КАК CountryOO,
		|	Items.КодПоИнвойсу КАК SPN,
		|	Items.BPN КАК BPN,
		|	Items.Manufacturer КАК Manufacturer,
		|	Items.Количество КАК QTY,
		|	Items.ЕдиницаИзмерения КАК UOM,
		|	Items.NetWeight,
		|	Items.Цена КАК UnitPrice,
		|	Items.Сумма КАК TotalValue,
		|	Items.МеждународныйКодТНВЭД КАК HTC,
		|	Items.RAN,
		|	Items.НомерВходящейДекларации КАК PriorCCD
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|ГДЕ
		|	Items.ExportRequest = &ExportRequest
		|	И НЕ Items.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ItemNo
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Parcels.Ссылка.GrossWeightKG КАК WeightKG,
		|	Parcels.Ссылка.LengthCM КАК LengthCM,
		|	Parcels.Ссылка.WidthCM КАК WidthCM,
		|	Parcels.Ссылка.HeightCM КАК HeightCM,
		|	Parcels.Ссылка.PackingType.Код КАК PackageType,
		|	Parcels.HazardClass КАК HazardClass,
		|	Parcels.CubicMeters КАК CubicMeters,
		|	Parcels.Код КАК PackageNumber,
		|	Parcels.NumOfParcels КАК Qty
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.ExportRequest = &ExportRequest
		|	И НЕ Parcels.Отменен
		|
		|УПОРЯДОЧИТЬ ПО
		|	PackageNumber
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ParcelItems.СтрокаИнвойса КАК Item,
		|	ParcelItems.Ссылка.Код КАК PackageNumber
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelItems
		|ГДЕ
		|	ParcelItems.Ссылка.ExportRequest = &ExportRequest
		|	И НЕ ParcelItems.Ссылка.Отменен";
		
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаШапки = Результаты[0].Выбрать();
	ВыборкаШапки.Следующий();
	
	ВыборкаItems = Результаты[1].Выбрать();
	
	ВыборкаParcels = Результаты[2].Выбрать();
	
	ТаблицаPackageNumbers = Результаты[3].Выгрузить();
	ТаблицаPackageNumbers.Индексы.Добавить("Item");
	
	ЗафиксироватьТранзакцию();
	
	Если ВыборкаParcels.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"List of ""Parcels"" is empty!", , "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ExportRequest.ПолучитьМакет("ExportInvoice");

	// Шапка
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ПараметрыШапки = ОбластьШапка.Параметры;
	
	ПараметрыШапки.ShipToName = ВыборкаШапки.DeliverToName;
	ПараметрыШапки.ShipToAddress =
		ВыборкаШапки.DeliverToAddress1 + Символы.ПС
		+ ВыборкаШапки.DeliverToAddress2 + Символы.ПС
		+ ВыборкаШапки.DeliverToAddress3 + Символы.ПС
		+ ВыборкаШапки.DeliverToAddress4 + Символы.ПС
		+ ВыборкаШапки.DeliverToAddress5;
	
	ПараметрыШапки.ShipToAttention = Объект.DeliverToContact + " " + Объект.DeliverToPhone + " " + Объект.DeliverToEmail;
	
	ПараметрыШапки.ConsignToName = ВыборкаШапки.ConsigneeName;
	ПараметрыШапки.ConsignToAddress =
		ВыборкаШапки.ConsigneeAddress1 + Символы.ПС
		+ ВыборкаШапки.ConsigneeAddress2 + Символы.ПС
		+ ВыборкаШапки.ConsigneeAddress3 + Символы.ПС
		+ ВыборкаШапки.ConsigneeAddress4 + Символы.ПС
		+ ВыборкаШапки.ConsigneeAddress5;
		
	ПараметрыШапки.ConsignToAttention = Объект.ConsigneeContact + " " + Объект.ConsigneePhone + " " + Объект.ConsigneeEmail;
	
	ПараметрыШапки.ShipperName = ВыборкаШапки.ShipperName;
	            		
	Если Объект.CustomUnionTransaction Тогда 
		
		//S-I-0001483	
		ПараметрыШапки.ShipperAddress = 
			ВыборкаШапки.PickUpAddress1 + Символы.ПС
			+ ВыборкаШапки.PickUpAddress2 + Символы.ПС
			+ ВыборкаШапки.PickUpAddress3 + Символы.ПС
			+ ВыборкаШапки.PickUpAddress4 + Символы.ПС
			+ ВыборкаШапки.PickUpAddress5;

		ПараметрыШапки.ShipperContact = СокрЛП(Объект.PickUpFromContact) + " " + СокрЛП(Объект.PickUpFromPhone) + " " + СокрЛП(Объект.PickUpFromEmail);
		
	Иначе 

		ПараметрыШапки.ShipperAddress = 
			ВыборкаШапки.ShipperAddress1 + Символы.ПС
			+ ВыборкаШапки.ShipperAddress2 + Символы.ПС
			+ ВыборкаШапки.ShipperAddress3 + Символы.ПС
			+ ВыборкаШапки.ShipperAddress4 + Символы.ПС
			+ ВыборкаШапки.ShipperAddress5;

		Если ЗначениеЗаполнено(Объект.ShipperContact) Тогда
			ПараметрыШапки.ShipperContact = СокрЛП(ВыборкаШапки.ShipperContactName) + " " + СокрЛП(ВыборкаШапки.ShipperContactPhone) + " " + СокрЛП(ВыборкаШапки.ShipperContactEmail);	
		Иначе
			ПараметрыШапки.ShipperContact = СокрЛП(Объект.ArchiveShipperContact) + " " + СокрЛП(Объект.ArchiveShipperPhone) + " " + СокрЛП(Объект.ArchiveShipperEmail);
		КонецЕсли;
		
	КонецЕсли;

	ПараметрыШапки.InvoiceNo = Объект.Номер;
    ПараметрыШапки.Date = Формат(Объект.Дата,"ДФ='dd.MM.yyyy'");
	
	// { RGS DKazanskiy 19.10.2018 11:15:33 - S-I-0005759
	Если ЗначениеЗаполнено(ВыборкаШапки.ExportContractНомер) Тогда
		ПараметрыШапки.ContractNo = Строка(ВыборкаШапки.ExportContractНомер) + " dd " + Формат(ВыборкаШапки.ExportContractДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	// } RGS DKazanskiy 19.10.2018 11:15:35 - S-I-0005759
	 
	ПараметрыШапки.AU = СокрЛП(ВыборкаШапки.AUCode);

	ПараметрыШапки.Segment = СокрЛП(ВыборкаШапки.SegmentCode) + " / " + СокрЛП(ВыборкаШапки.BORGCode) + "-" + ВыборкаШапки.CompanyNo + " / " + СокрЛП(ВыборкаШапки.AUCode) + " / " + ВыборкаШапки.Activity;
	
	ТабДок.Вывести(ОбластьШапка);
	
	// Items     
	ОбластьItem = Макет.ПолучитьОбласть("Items");
    ПараметрыItem = ОбластьItem.Параметры;
	TotalValue = 0;
	СтруктураПоиска = Новый Структура("Item");
	Пока ВыборкаItems.Следующий() цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыItem, ВыборкаItems, "ItemNo, Qty, UOM, HTC, ItemDescription, NetWeight, SPN, BPN, Manufacturer, SerialNo, RAN, PriorCCD, CountryOO, UnitPrice, TotalValue");
		
		TotalValue = TotalValue + ВыборкаItems.TotalValue;
		
		PackageNumber= "";
		СтруктураПоиска.Item = ВыборкаItems.Item;
		МассивСтрок = ТаблицаPackageNumbers.НайтиСтроки(СтруктураПоиска);
		Для Каждого Стр из МассивСтрок Цикл 
			PackageNumber = PackageNumber + ", " + СокрЛП(Стр.PackageNumber);
		КонецЦикла;
		ПараметрыItem.PackageNumber = Сред(PackageNumber, 3);
		
		ТабДок.Вывести(ОбластьItem);
		
	Конеццикла;
	
	// Шапка Parcels     
	ОбластьШапкаParcels = Макет.ПолучитьОбласть("ШапкаParcels");
	ТабДок.Вывести(ОбластьШапкаParcels);
	
	// Parcels   
	ОбластьParcel = Макет.ПолучитьОбласть("Parcel");
	ПараметрыParcel = ОбластьParcel.Параметры;	
	TotalWeight = 0;
	TotalVolume = 0;
	Hazardous = "No";
	Пока ВыборкаParcels.Следующий() цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыParcel, ВыборкаParcels, "PackageNumber, Qty, PackageType, WeightKG, LengthCM, WidthCM, HeightCM");
		
		ПараметрыParcel.PackageNumber = СокрЛП(ПараметрыParcel.PackageNumber);
		
		ПараметрыParcel.VolumeSea = Окр(ВыборкаParcels.CubicMeters, 2);
		ПараметрыParcel.VolumeAir = Окр(ВыборкаParcels.CubicMeters*1000/6, 2);
		
		TotalWeight = TotalWeight + ВыборкаParcels.WeightKG;
		TotalVolume = TotalVolume + ПараметрыParcel.VolumeSea;
		
		Если ЗначениеЗаполнено(ВыборкаParcels.HazardClass) 
			И ВыборкаParcels.HazardClass <> Справочники.HazardClasses.NonHazardous Тогда
			Hazardous = "Yes";
		КонецЕсли;
	
		ТабДок.Вывести(ОбластьParcel);
		
	Конеццикла;
               	
	// выведем подвал     
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ПараметрыПодвала = ОбластьПодвал.Параметры;
	
	ПараметрыПодвала.TotalWeight = TotalWeight;
	ПараметрыПодвала.TotalVolume = TotalVolume;
	ПараметрыПодвала.TotalValue = TotalValue;
	ПараметрыПодвала.Pieces = ВыборкаParcels.Количество();
    ПараметрыПодвала.Hazardous = Hazardous;
    ПараметрыПодвала.Incoterms = СокрЛП(ВыборкаШапки.IncotermsCode);
					 
    ТабДок.Вывести(ОбластьПодвал);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДок;

КонецФункции

&НаКлиенте
Процедура GoToOriginDetails(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаOriginDetails;
	
КонецПроцедуры

&НаКлиенте
Процедура GoToDestinationDetails(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаDestinationDetails;
	
КонецПроцедуры

&НаКлиенте
Процедура GoToItems(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаItems;
	Если НЕ Элементы.Items.Видимость Тогда
		НастроитьItemsНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GoToParcels(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаParcels;
	Если НЕ Элементы.Parcels.Видимость Тогда
		НастроитьParcelsНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура GoToSubmission(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаSubmission;
	
КонецПроцедуры

// { RGS DKazanskiy 10.10.2018 14:26:43 - S-I-0005759
&НаКлиенте
Процедура PrintFormOfOrder(Команда)
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаОЗаписиДокумента", ЭтаФорма, Новый Структура("ИмяФормыПечати", "FormOfOrder")), "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Сохранение документа");
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ExportRequest", "FormOfOrder", МассивОбъектов,
														 ЭтаФорма, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура PrintCertificateOfOrigin(Команда)
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаОЗаписиДокумента", ЭтаФорма, Новый Структура("ИмяФормыПечати", "CERTIFICATEOFORIGIN")), "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Сохранение документа");
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ExportRequest", "CERTIFICATEOFORIGIN", МассивОбъектов,
														 ЭтаФорма, Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура PrintCertificateOfQuality(Команда)
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВопросаОЗаписиДокумента", ЭтаФорма, Новый Структура("ИмяФормыПечати", "CERTIFICATEOFQUALITY")), "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Сохранение документа");
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ExportRequest", "CERTIFICATEOFQUALITY", МассивОбъектов,
														 ЭтаФорма, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОЗаписиДокумента(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Если Модифицированность Тогда
		Возврат;	
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОБъект.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ExportRequest", ДопПараметры.ИмяФормыПечати, МассивОбъектов,
														 ЭтаФорма, Неопределено);
	
													 КонецПроцедуры

// } RGS DKazanskiy 10.10.2018 14:26:43 - S-I-0005759

////////////////////////////////////////////////////////////
// Custom Union transaction

&НаКлиенте
Процедура CustomUnionTransactionПриИзменении(Элемент)
	
	ПриИзмененииCustomUnionTransaction();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииCustomUnionTransaction()
	
	Элементы.ГруппаLocalDelivery.Видимость = Не Объект.CustomUnionTransaction;
	// { RGS AFokin 25.09.2018 23:59:59 - S-I-0006035
	//Элементы.ГруппаCustoms.Видимость = Не Объект.CustomUnionTransaction;
	// } RGS AFokin 25.09.2018 23:59:59 - S-I-0006035
	Элементы.SubmittedToCustoms.Видимость = Не Объект.CustomUnionTransaction;
	Элементы.ReleasedFromCustoms.Видимость = Не Объект.CustomUnionTransaction;
	
	Элементы.POD.Видимость = Не Объект.CustomUnionTransaction;

КонецПроцедуры

////////////////////////////////////////////////////////////
// STAGES

&НаКлиенте
Процедура CheckPermitsWithExportControl(Команда)
	
	ПроверитьPermitsWithExportControl();
	
	ОткрытьPermitsПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура LocalMOTПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();

	НастроитьВидимостьTransportRequest();
	
КонецПроцедуры

&НаКлиенте
Процедура LocalWarehouseToНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");	
		СтандартнаяОбработка=Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура LocalFreightProviderНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ОткрытьФорму("Справочник.ServiceProviders.ФормаВыбора", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура LocalFreightProviderПриИзменении(Элемент)
	
	// { RGS DKazanskiy 08.10.2018 14:28:10 - S-I-0005759
	НастроитьВидимостьВЗависимостиОтСостояния();
	// } RGS DKazanskiy 08.10.2018 14:28:25 - S-I-0005759
	
КонецПроцедуры

&НаКлиенте
Процедура IncotermsПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

&НаКлиенте
Процедура InternationalMOTПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();
	
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested);
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748
	   	
КонецПроцедуры

&НаКлиенте
Процедура PODПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.POD)
		И НЕ ЗначениеЗаполнено(Объект.LocalWarehouseTo) Тогда
		
		Объект.LocalWarehouseTo = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.POD, "DefaultWarehouse");	
		
	КонецЕсли;
	
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested);
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748
	
КонецПроцедуры

&НаКлиенте
Процедура ExportShipmentНажатие(Элемент, СтандартнаяОбработка)
	
	Если ExportShipment = "Create new" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		// { RGS ASeryakov, 28.12.2018 17:53:18 S-I-0006322
		Если Объект.Recharge И НЕ ЗначениеЗаполнено(Объект.InternationalFreightApproved) Тогда
			ТекстОшибок = Нстр("ru='Поле Int. approved"" не заполнено!';en='Field Int. approved"" is empty!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			Объект.Ссылка, "InternationalFreightApproved", , Истина);
			Возврат;
		КонецЕсли;
		// } RGS ASeryakov 28.12.2018 17:53:31 S-I-0006322
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.ExportShipment.ФормаОбъекта", СтруктураПараметров);
	КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SendDomesticOBToTMS(Команда)
	
	SendOBToTMS("Domestic", "DomesticOBSentToTMS");
	
КонецПроцедуры

&НаКлиенте
Процедура SendInternationalOBToTMS(Команда)
	
	SendOBToTMS("International", "InternationalOBSentToTMS");
			
КонецПроцедуры

&НаКлиенте
Процедура SendOBToTMS(ИмяDomesticInternational, ИмяРеквизитаOBSentToTMS)
	
	Если Объект[ИмяРеквизитаOBSentToTMS] Тогда
		Сообщить(ИмяDomesticInternational + " OB was already sent to TMS!");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("SendOBToTMSЗавершение", ЭтаФорма, 
		Новый Структура("ИмяDomesticInternational,ИмяРеквизитаOBSentToTMS", ИмяDomesticInternational, ИмяРеквизитаOBSentToTMS)),
		"Send " + ИмяDomesticInternational + " OB to TMS?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте 
Процедура SendOBToTMSЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	SendExportRequestToTMSНаСервере(Параметры.ИмяDomesticInternational, Параметры.ИмяРеквизитаOBSentToTMS);
	
КонецПроцедуры

&НаСервере
Процедура SendExportRequestToTMSНаСервере(ИмяDomesticInternational, ИмяРеквизита)
	
	НачатьТранзакцию();
	
	Объект[ИмяРеквизита] = Истина;
	
	Попытка
		Записать(Новый Структура);
	Исключение
		ОтменитьТранзакцию();
		Объект[ИмяРеквизита] = Ложь;
		Сообщить("Failed to save Export request: 
			| " + ОписаниеОшибки());
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;
	
	DomesticInternational = Перечисления.DomesticInternational[ИмяDomesticInternational];

	Попытка
		Обработки.PushExportToTMS.PushExportToTMS(Объект.Ссылка, DomesticInternational);
	Исключение
		ОтменитьТранзакцию();
		Объект.DomesticOBSentToTMS = Ложь;
		Сообщить("Failed to push Export request to TMS!");
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;
    
	ЗафиксироватьТранзакцию();
	
	НастроитьВидимостьToTMS();
	//НастроитьВидимостьПоDomesticOBSentToTMS();
	НастроитьВидимостьПоInternationalOBSentToTMS();
	
КонецПроцедуры

&НаКлиенте
Процедура CancelDomesticOBToTMS(Команда)
	
	CancelOBToTMS("Domestic", "DomesticOBSentToTMS"); 
		
КонецПроцедуры

&НаКлиенте
Процедура CancelInternationalOBToTMS(Команда)
	
	CancelOBToTMS("International", "InternationalOBSentToTMS");
	
КонецПроцедуры

&НаКлиенте
Процедура CancelOBToTMS(ИмяDomesticInternational, ИмяРеквизитаOBSentToTMS)
	
	Если НЕ Объект[ИмяРеквизитаOBSentToTMS] Тогда
		Сообщить(ИмяDomesticInternational + " OB of current Export request was not sent to TMS!");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("CancelOBToTMSЗавершение", ЭтаФорма, 
		Новый Структура("ИмяРеквизитаOBSentToTMS", ИмяРеквизитаOBSentToTMS)),
		"Cancel " + ИмяDomesticInternational + " OB sent to TMS?
		|(The system will only uncheck flag, nothing will be changed in TMS)", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
			  
КонецПроцедуры

&НаКлиенте
Процедура CancelOBToTMSЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	CancelOBToTMSНаСервере(Параметры.ИмяРеквизитаOBSentToTMS);
	
КонецПроцедуры

&НаСервере
Процедура CancelOBToTMSНаСервере(ИмяРеквизитаOBSentToTMS)
	
	НачатьТранзакцию();
	
	Объект[ИмяРеквизитаOBSentToTMS] = Ложь;
	Записать(Новый Структура);
		
	ЗафиксироватьТранзакцию();
	
	НастроитьВидимостьПоDomesticOBSentToTMS();
	НастроитьВидимостьПоInternationalOBSentToTMS();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоDomesticOBSentToTMS()
	
	Элементы.SendDomesticOBToTMS.Видимость = НЕ Объект.DomesticOBSentToTMS;
	Элементы.CancelDomesticOBToTMS.Видимость = Объект.DomesticOBSentToTMS;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоInternationalOBSentToTMS()
	
	Элементы.SendInternationalOBToTMS.Видимость = НЕ Объект.InternationalOBSentToTMS;
	Элементы.CancelInternationalOBToTMS.Видимость = Объект.InternationalOBSentToTMS;
	
КонецПроцедуры

&НаКлиенте
Процедура AUПриИзменении(Элемент)
	          		
	УстановитьОтборActivityПоCostCenter();
	
КонецПроцедуры

&НаКлиенте
Процедура ActivityНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.AU) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Select 'AU' first!",
			, "AU", "Объект");
		
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборActivityПоCostCenter()
	
	Если Не ЗначениеЗаполнено(Объект.Activity) Тогда 
		Объект.Activity = Справочники.ActivityCodes.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.AU) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.AcceptedBySpecialist), Объект.AcceptedBySpecialist, Объект.Дата));
	Запрос.УстановитьПараметр("AUCode", СокрЛП(Объект.AU));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	AUsActivityCodesСрезПоследних.ActivityCode.Ссылка КАК Activity
	|ИЗ
	|	РегистрСведений.AUsActivityCodes.СрезПоследних(&Дата, AUCode = &AUCode) КАК AUsActivityCodesСрезПоследних";
	
	МассивActivities = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Activity");
		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивActivities));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Activity.ПараметрыВыбора = НовыеПараметрыВыбора;	
	
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура AUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", ?(ЗначениеЗаполнено(Объект.AcceptedBySpecialist), Объект.AcceptedBySpecialist, Объект.Дата));
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура AUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", ?(ЗначениеЗаполнено(Объект.AcceptedBySpecialist), Объект.AcceptedBySpecialist, Объект.Дата));
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

//<- RG-Soft VIvanov

// { RGS ASeryakov, 28.12.2018 18:11:50 S-I-0006322

&НаСервере
Процедура InternationalFreightApprovedНачалоВыбораНаСервере(Ссылка, InternationalFreightApproved, ЕстьAttachment)
	
	ЕстьAttachment = ЕстьAttachmentRechargeConfirmation(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура InternationalFreightApprovedНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьAttachment();
	
КонецПроцедуры


// ЕстьAttachmentRechargeConfirmation
//  Проверяет наличие аттачмента c названием Recharge confirmation
//
&НаСервере
Функция ЕстьAttachmentRechargeConfirmation(ВладелецФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ExportRequestПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ExportRequestПрисоединенныеФайлы КАК ExportRequestПрисоединенныеФайлы
	|ГДЕ
	|	ExportRequestПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ExportRequestПрисоединенныеФайлы.Наименование ПОДОБНО ""Recharge confirmation""
	|	И НЕ ExportRequestПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьAttachment()
	
	ЕстьAttachment = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстОшибок = Нстр("ru='Необходимо сохранить документ!';en='You must save the document!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибок,
		Объект.Ссылка, , , Истина);
		Возврат;
		
	КонецЕсли;
	
	InternationalFreightApprovedНачалоВыбораНаСервере(Объект.Ссылка, Объект.InternationalFreightApproved, ЕстьAttachment);
	
	Если НЕ ЕстьAttachment Тогда
		
		ТекстОшибок = Нстр("en='Please attach confirmation from receiving location that transportation costs should be re-charged to destination location.';
		|ru='Пожалуйста, приложите подтверждение от места получения, что транспортные расходы должны быть повторно списаны с места назначения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибок,
		Объект.Ссылка, , , Истина);
		
		Объект.InternationalFreightApproved = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура InternationalFreightApprovedПриИзменении(Элемент)
	
	ПроверитьAttachment();
	
КонецПроцедуры

// } RGS ASeryakov 28.12.2018 18:11:53 S-I-0006322

////////////////////////////////////////////////////////////
// Transport Request

&НаКлиенте
Процедура TransportRequestНажатие(Элемент, СтандартнаяОбработка)
	
	Если TransportRequest = "Create new" Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Ложь;
		
		Если Объект.Canceled Тогда
			ПоказатьПредупреждение(, "You can not create Transport request from canceled Export request!", 60);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.AcceptedBySpecialist) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Accepted by specialist' is empty!",
				, "AcceptedBySpecialist", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.LocalWarehouseTo) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Local warehouse to' is empty!",
				, "LocalWarehouseTo", "Объект", Отказ);
		КонецЕсли;

		Если Не Отказ Тогда
			
			Если Модифицированность Тогда 
			    Записать(Новый Структура);
			КонецЕсли;
			
			ПоказатьВопрос(
			Новый ОписаниеОповещения("CreateNewTransportRequestЗаверешение", ЭтаФорма),
			"Create new transport request?", 
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			,
			КодВозвратаДиалога.Нет);
			  			
		КонецЕсли;
		
	КонецЕсли;
	 	
КонецПроцедуры

&НаКлиенте
Процедура CreateNewTransportRequestЗаверешение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	TransportRequest = CreateNewTransportRequestНаСервере();
	
	ПоказатьЗначение(,TransportRequest);
		
КонецПроцедуры

&НаСервере
Функция CreateNewTransportRequestНаСервере()  

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	НовыйTransportRequest = Документы.TransportRequest.СоздатьДокумент();
	НовыйTransportRequest.Заполнить(Объект.Ссылка);
	НовыйTransportRequest.Записать();
	
	// Скопируем все товары и грузовые места
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Items.Ссылка,
		|	Items.КодПоИнвойсу,
		|	Items.СерийныйНомер,
		|	Items.RAN,
		|	Items.Каталог,
		|	Items.НаименованиеТовара,
		|	Items.DescriptionRus,
		|	Items.Количество,
		|	Items.ЕдиницаИзмерения,
		|	Items.Цена,
		|	Items.Currency,
		|	Items.Сумма,
		|	Items.Классификатор,
		|	Items.СтранаПроисхождения,
		|	Items.NetWeight,
		|	Items.WeightUOM
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК Items
		|ГДЕ
		|	Items.ExportRequest = &ExportRequest
		|	И (Не Items.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Parcels.Ссылка,
		|	Parcels.Код
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.ExportRequest = &ExportRequest
		|	И НЕ Parcels.Отменен";	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Скопируем все товары, заодно запомним соответствие старых и новых товаров
	СоответствиеСтарыхИНовыхТоваров = Новый Соответствие;
	ВыборкаItems = Результаты[0].Выбрать();
	Пока ВыборкаItems.Следующий() Цикл
		
		НовыйТоварОбъект = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		НовыйТоварОбъект.TransportRequest = НовыйTransportRequest.Ссылка;
		НовыйТоварОбъект.Final = Истина;
		
		ЗаполнитьЗначенияСвойств(НовыйТоварОбъект, ВыборкаItems);
		
		Если Не ЗначениеЗаполнено(НовыйТоварОбъект.DescriptionRus) Тогда
			НовыйТоварОбъект.DescriptionRus = НовыйТоварОбъект.НаименованиеТовара;
		КонецЕсли;
		
		НовыйТоварОбъект.ERPTreatmentNonLawson = Справочники.ERPTreatments.Expense;
		
		НовыйТоварОбъект.Записать();
		
		СоответствиеСтарыхИНовыхТоваров.Вставить(ВыборкаItems.Ссылка, НовыйТоварОбъект.Ссылка);		
		
	КонецЦикла;
	
	// Скопируем все не отмененные грузовые места
	ВыборкаParcels = Результаты[1].Выбрать();
	Пока ВыборкаParcels.Следующий() Цикл
		
		НовыйParcel = ВыборкаParcels.Ссылка.Скопировать();
		НовыйParcel.Код = СтрЗаменить(НовыйParcel.Код, СокрЛП(Объект.Номер), СокрЛП(НовыйTransportRequest.Номер));
		НовыйParcel.TransportRequest = НовыйTransportRequest.Ссылка;
		НовыйParcel.ExportRequest = Неопределено;
		
		// Заменим в табличной части старые товары на новые
		ParcelItems = НовыйParcel.Детали;
		Для Каждого СтрокаТЧ Из ParcelItems Цикл	
			СтрокаТЧ.СтрокаИнвойса = СоответствиеСтарыхИНовыхТоваров[СтрокаТЧ.СтрокаИнвойса];	
		КонецЦикла;
		
		НовыйParcel.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйTransportRequest.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////
// 1) ORIGIN DETAILS

&НаКлиенте
Процедура FromCountryПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.FromCountry) Тогда
		
		Если ЗначениеЗаполнено(Объект.Company) Тогда
			
			CompanyCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Company, "Country");
			Если CompanyCountry <> Объект.FromCountry Тогда
				Объект.Company = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
			
			Объект.Company = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "SoldTo", "Country", Объект.FromCountry);
			ПриИзмененииCompany();
			
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура CompanyНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.FromCountry) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'From country' first!",
			, "FromCountry", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CompanyПриИзменении(Элемент)
	
	ПриИзмененииCompany();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииCompany()
	
	Если ЗначениеЗаполнено(Объект.Company) Тогда
		
		Если ЗначениеЗаполнено(Объект.FromLegalEntity) Тогда
			
			FromLegalEntityParentCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.FromLegalEntity, "ParentCompany");
			Если FromLegalEntityParentCompany <> Объект.Company Тогда
				Объект.FromLegalEntity = Неопределено;	
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Объект.BORG) Тогда
		//	
		//	BORGCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.BORG, "Компания");
		//	Если BORGCompany <> Объект.Company Тогда
		//		Объект.BORG = Неопределено;
		//	КонецЕсли;
		//	
		//КонецЕсли;
						
		Если ЗначениеЗаполнено(Объект.Shipper) Тогда
			
			ShipperCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Shipper, "Владелец");
			Если ShipperCompany <> Объект.Company Тогда
				Объект.Shipper = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Объект.Shipper) Тогда
			Объект.Shipper = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "ConsignTo", "Владелец", Объект.Company);
		КонецЕсли;
		
	КонецЕсли;
	
	// { RGS DKazanskiy 19.10.2018 9:53:08 - S-I-0005759	
	НастроитьВидимостьКонтракта();
	// } RGS DKazanskiy 19.10.2018 9:53:21 - S-I-0005759
	
	НастроитьВидимостьToTMS();
	
	НастроитьПараметрыВыбораToTMS();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьToTMS()
	
	//Элементы.GroupDomesticOBToTMS.Видимость = Объект.DomesticOBSentToTMS  
	//	ИЛИ Документы.ExportRequest.ПолучитьExportDomesticOBToTMS(
	//		Объект.Company, Объект.Submitted, Объект.LocalMOT, Объект.BORG, Объект.CustomUnionTransaction);
																			
	Элементы.GroupInternationalOBToTMS.Видимость = Объект.InternationalOBSentToTMS ИЛИ Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(
		Объект.FromCountry, Объект.Company, Объект.Submitted, Объект.InternationalMOT, Объект.InternationalFreightProvider, Объект.Incoterms, Объект.BORG, Объект.CreationDate);
						
	Элементы.PayingEntity.Видимость = Объект.DomesticOBSentToTMS ИЛИ Объект.InternationalOBSentToTMS
		ИЛИ Элементы.GroupDomesticOBToTMS.Видимость ИЛИ Элементы.GroupInternationalOBToTMS.Видимость;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораToTMS()
	
	ИмяПараметраInTMS = "Отбор.InTMS";
	
	DomesticOBToTMS = Документы.ExportRequest.ПолучитьExportDomesticOBToTMS(
		Объект.Company, Объект.Submitted, Объект.LocalMOT, Объект.BORG, Объект.CustomUnionTransaction);
	
	Если DomesticOBToTMS Тогда
		
		ПараметрВыбораInTMS = Новый ПараметрВыбора(ИмяПараметраInTMS, Истина);
		
		РГСофт.ВставитьПараметрВыбора(Элементы.FromLegalEntity, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.Shipper, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.ShipperContact, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.Consignee, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.PickUpFrom, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.LocalWarehouseTo, ПараметрВыбораInTMS);
		РГСофт.ВставитьПараметрВыбора(Элементы.DeliverTo, ПараметрВыбораInTMS);
		
	Иначе
		
		РГСофт.УдалитьПараметрВыбора(Элементы.FromLegalEntity, ИмяПараметраInTMS);
		РГСофт.УдалитьПараметрВыбора(Элементы.Shipper, ИмяПараметраInTMS);
		РГСофт.УдалитьПараметрВыбора(Элементы.Shipper, ИмяПараметраInTMS);
		РГСофт.УдалитьПараметрВыбора(Элементы.Consignee, ИмяПараметраInTMS);
		РГСофт.УдалитьПараметрВыбора(Элементы.PickUpFrom, ИмяПараметраInTMS);
		РГСофт.УдалитьПараметрВыбора(Элементы.LocalWarehouseTo, ИмяПараметраInTMS);  	      		
		РГСофт.УдалитьПараметрВыбора(Элементы.DeliverTo, ИмяПараметраInTMS);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура FromLegalEntityНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если Parent company еще не заполнена
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");	
		СтандартнаяОбработка=Ложь;	
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура BORGНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Parent company' is empty!",
			, "Company", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Segment) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Segment' is empty!",
			, "Segment", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура AUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Segment) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Segment' is empty!",
			, "Segment", "Объект");
		СтандартнаяОбработка=Ложь;
		
	Иначе
		//-> RG-Soft VIvanov 2015/02/18
		СтандартнаяОбработка = Ложь;
		СтруктураПараметров = Новый Структура;
		// { RGS AArsentev 30.01.2018 S-I-0004437
		Если СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Segment, "Код")) <> "TS" Тогда
		// } RGS AArsentev 30.01.2018 S-I-0004437
			СтруктураПараметров.Вставить("Дата", ?(ЗначениеЗаполнено(Объект.AcceptedBySpecialist), Объект.AcceptedBySpecialist, Объект.Дата));
		КонецЕсли;
		СтруктураПараметровОтбора = Новый Структура;
		СтруктураПараметровОтбора.Вставить("Segment", Объект.Segment);
		СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
		СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.AU);
		ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		//<- RG-Soft VIvanov
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура SegmentПриИзменении(Элемент)
	
	ПриИзмененииSegmentНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииSegmentНаСервере()
	
	НастроитьВидимостьOFSStoreTransactions();
	
	НастроитьПараметрыОтбораShipperContact();
		
КонецПроцедуры

&НаКлиенте
Процедура ExportPurposeПриИзменении(Элемент)
	
	НастроитьВидимостьПоExportPurpose();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоExportPurpose()
	
	Элементы.ExportPurposeDescription.Видимость = Объект.ExportPurpose = Справочники.ExportPurposes.Other;
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "ItemsRAN", "Видимость", Объект.ExportPurpose = Справочники.ExportPurposes.RAN);	
	
	НастроитьВидимостьOFSStoreTransactions();
	
КонецПроцедуры

&НаКлиенте
Процедура UrgencyПриИзменении(Элемент)
	
	НастроитьВидимостьПоUrgency();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоUrgency()
	
	ПеречислениеUrgencies = Перечисления.Urgencies;
	Standard = ПеречислениеUrgencies.Standard;
	Emergency = ПеречислениеUrgencies.Emergency;
	
    Элементы.UrgencyComment.Видимость = ЗначениеЗаполнено(Объект.Urgency) И Объект.Urgency <> Standard;
    Элементы.EmergencyApprovedBy.Видимость = Объект.Urgency = Emergency;
	
КонецПроцедуры

&НаКлиенте
Процедура ShipperНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Запретим выбор, если Parent company не заполнена
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");
		СтандартнаяОбработка = Ложь;	
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ShipperContactНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Process level' first!",
			, "Process level", "Объект");
		СтандартнаяОбработка = Ложь;	
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Segment) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Segment' first!",
			, "Segment", "Объект");
		СтандартнаяОбработка = Ложь;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если не заполнена From country
	Если НЕ ЗначениеЗаполнено(Объект.FromCountry) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'From country' first!",
			, "FromCountry", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
	// Запретим выбор, если не заполнена Parent company
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromПриИзменении(Элемент)
	
	НастроитьВидимостьПоPickUpFrom();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоPickUpFrom()
	
	Элементы.PickUpFromAddress.Видимость = (Объект.PickUpWarehouse = Справочники.Warehouses.Other);
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromContactНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораPickUpContactЗаполнен, Элемент.СписокВыбора, "PickUpFromContact");
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromContactАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "PickUpFromContact", СписокВыбораPickUpContactЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromPhoneНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораPickUpPhoneЗаполнен, Элемент.СписокВыбора, "PickUpFromPhone");
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromPhoneАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "PickUpFromPhone", СписокВыбораPickUpPhoneЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromEmailНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораPickUpEMailЗаполнен, Элемент.СписокВыбора, "PickUpFromEmail");
	
КонецПроцедуры

&НаКлиенте
Процедура PickUpFromEmailАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "PickUpFromEmail", СписокВыбораPickUpEMailЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура BORGПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();	
	
КонецПроцедуры

&НаКлиенте
Процедура InternationalFreightProviderПриИзменении(Элемент)
	
	НастроитьВидимостьToTMS();
	
	// { RGS DKazanskiy 15.10.2018 9:45:12 - S-I-0005759
	НастроитьВидимостьTESSNo();
	// } RGS DKazanskiy 15.10.2018 9:45:14 - S-I-0005759
	
КонецПроцедуры


////////////////////////////////////////////////////////////
// 2) DESTINATION DETAILS

&НаКлиенте
Процедура ConsigneeНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если не заполнена Parent company
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ConsigneeПриИзменении(Элемент)
	
	НастроитьВидимостьПоConsignee();
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
	УстановкаФлагаCustomsUnion();
	Если Объект.CustomUnionTransaction Тогда
		Элементы.ГруппаLocalDelivery.Видимость = Не Объект.CustomUnionTransaction;
		Элементы.SubmittedToCustoms.Видимость = Не Объект.CustomUnionTransaction;
		Элементы.ReleasedFromCustoms.Видимость = Не Объект.CustomUnionTransaction;
		Элементы.POD.Видимость = Не Объект.CustomUnionTransaction;
	КонецЕсли;	
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006035

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоConsignee()
	
	Элементы.ConsigneeCompany.Видимость = (Объект.Consignee = Справочники.Warehouses.Other);
	Элементы.ConsigneeAddress.Видимость = (Объект.Consignee = Справочники.Warehouses.Other);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьOFSStoreTransactions()
	
	Элементы.ГруппаOFSStoreTransactions.Видимость = 
		Документы.ExportRequest.OFSStoreTransactionsRequired(Объект.Segment, Объект.ExportPurpose);
		
	ПерезаполнитьOFSStoreTransactionsDetails();
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneeContactНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораConsigneeContactЗаполнен, Элемент.СписокВыбора, "ConsigneeContact");
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneeContactАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "ConsigneeContact", СписокВыбораConsigneeContactЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneePhoneНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораConsigneePhoneЗаполнен, Элемент.СписокВыбора, "ConsigneePhone");
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneePhoneАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "ConsigneePhone", СписокВыбораConsigneePhoneЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneeEmailНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораConsigneeEMailЗаполнен, Элемент.СписокВыбора, "ConsigneeEMail");
	
КонецПроцедуры

&НаКлиенте
Процедура ConsigneeEmailАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "ConsigneeEMail", СписокВыбораConsigneeEMailЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если не заполнена Parent company
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект");
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура DeliverToПриИзменении(Элемент)
	
	НастроитьВидимостьПоDeliverTo();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоDeliverTo()
	
	Элементы.DeliverToCompany.Видимость = (Объект.DeliverTo = Справочники.Warehouses.Other);
	Элементы.DeliverToAddress.Видимость = (Объект.DeliverTo = Справочники.Warehouses.Other);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToContactНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораDeliverToContactЗаполнен, Элемент.СписокВыбора, "DeliverToContact");
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToContactАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "DeliverToContact", СписокВыбораDeliverToContactЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToPhoneНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораDeliverToPhoneЗаполнен, Элемент.СписокВыбора, "DeliverToPhone");
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToPhoneАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "DeliverToPhone", СписокВыбораDeliverToPhoneЗаполнен, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToEmailНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораDeliverToEMailЗаполнен, Элемент.СписокВыбора, "DeliverToEMail");
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToEmailАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеАвтоподбора(Элемент, "DeliverToEMail", СписокВыбораDeliverToEMailЗаполнен, Текст);
	
КонецПроцедуры


////////////////////////////////////////////////////////////
// РАБОТА СО СПИСКАМИ ВЫБОРА

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораЗаполнен, СписокВыбора, ИмяРеквизита)
	
	Если СписокВыбораЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = ПолучитьМассивИзИстории(ИмяРеквизита);
	СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	СписокВыбораЗаполнен = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивИзИстории(ИмяРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("User", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ExportRequest." + ИмяРеквизита + "
		|ИЗ
		|	Документ.ExportRequest КАК ExportRequest
		|ГДЕ
		|	(НЕ ExportRequest.Canceled)
		|	И ExportRequest.Submitted <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Если CustomsСервер.ЭтоImportExportTracker() Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ExportRequest.Submitter = &User";
	Иначе
		Запрос.Текст = Запрос.Текст + "
			|	И ExportRequest.ExportSpecialist = &User";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеАвтоподбора(Элемент, ИмяРеквизита, СписокВыбораЗаполнен, Знач Текст)
	
	СписокВыбора = Элемент.СписокВыбора;
	
	ЗаполнитьСписокВыбораПриНеобходимости(СписокВыбораЗаполнен, СписокВыбора, ИмяРеквизита);	
	Если СписокВыбора.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = НРег(СокрЛП(Текст));
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Если СтрНайти(НРег(ЭлементСписка.Значение), Текст) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
		
КонецФункции


////////////////////////////////////////////////////////////
// 3) ITEMS

&НаСервере
Процедура НастроитьItemsНаСервере()
	
	// { RGS AArsentev 13.06.2018 - Доработка TD
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ItemsСписок.Отбор,
		"ExportRequest",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	ItemsСписок.Параметры.УстановитьЗначениеПараметра("ExportRequest", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	// } RGS AArsentev 13.06.2018 - Доработка TD
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Canceled Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not add items to canceled Export request!",
			, "ItemsСписок", "Объект", Отказ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// проверим from country, так как она может понадобиться при выборе PSA
	Если НЕ ЗначениеЗаполнено(Объект.FromCountry) Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'From country' first!",
			, "FromCountry", "Объект", Отказ);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.AU) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'AU' first!",
			, "AU", "Объект", Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS DKazanskiy 08.08.2018 17:18:51 - S-I-0005748
	// при добавлении айтема записываем т.к. при смене версии происходит модификация исходного Export Request и его форма перечитывается. 
	Если НЕ Отказ И НЕ Объект.Ссылка.Пустая() И Модифицированность Тогда
		Записать();
		Возврат;
	КонецЕсли;
	// } RGS DKazanskiy 08.08.2018 17:19:16 - S-I-0005748
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

// OFS Store Transactions

&НаКлиенте
Процедура OFSStoreTransactionsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МассивРодителей = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл 
		
		Если Не ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементМассива, "ЭтоГруппа") Тогда
			Родитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементМассива, "Родитель");
			Если МассивРодителей.Найти(Родитель) = Неопределено Тогда 
				МассивРодителей.Добавить(Родитель);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого ЭлементМассива из МассивРодителей Цикл 
		НоваяСтрока = Объект.OFSStoreTransactions.Добавить();
		НоваяСтрока.TransactionID = ЭлементМассива;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ПерезаполнитьOFSStoreTransactionsDetails();
	
КонецПроцедуры

&НаКлиенте
Процедура OFSStoreTransactionsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Canceled Тогда
		ПоказатьПредупреждение(, "You can not add transactions to canceled Export request!", 60);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	#Если ВебКлиент Тогда
	АктивноеОкно = АктивноеОкно();
	Если АктивноеОкно <> Неопределено Тогда
		Если АктивноеОкно.Содержимое.Количество() > 0 Тогда
			Если АктивноеОкно.Содержимое[0].ИмяФормы = "Справочник.OFSStoreTransactions.Форма.ФормаВыбора" Тогда
				АктивноеОкно.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзExportRequest");
	СтруктураНастройки.Вставить("МассивTransactions", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.OFSStoreTransactions, "TransactionID"));
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
		
	ОткрытьФорму("Справочник.OFSStoreTransactions.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура OFSStoreTransactionsПослеУдаления(Элемент)
	
	ПерезаполнитьOFSStoreTransactionsDetails();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьOFSStoreTransactionsDetails()
	
	Если Не Элементы.ГруппаOFSStoreTransactions.Видимость Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивTransactions", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.OFSStoreTransactions, "TransactionID"));
	Запрос.Текст = "ВЫБРАТЬ
	|	OFSStoreTransactions.Код КАК Part_Num,
	|	OFSStoreTransactions.Part_Description,
	|	OFSStoreTransactions.Qty_Txn,
	|	OFSStoreTransactions.Transaction_Purchase_Pri,
	|	OFSStoreTransactions.Part_Type
	|ИЗ
	|	Справочник.OFSStoreTransactions КАК OFSStoreTransactions
	|ГДЕ
	|	OFSStoreTransactions.Родитель В(&МассивTransactions)";
	
	OFSStoreTransactionsDetails.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура CreateItemsFromTransactionsЗаверешение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	CreateItemsFromTransactionsНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура CreateItemsFromTransactionsНаСервере()  

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивPartNumbers", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(OFSStoreTransactionsDetails, "Part_Num"));
	Запрос.УстановитьПараметр("ExportRequest", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	СтрокиИнвойса.КодПоИнвойсу КАК PartNumber
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.КодПоИнвойсу В(&МассивPartNumbers)
	|	И СтрокиИнвойса.ExportRequest = &ExportRequest";
	
	ТЗPartNumbers = Запрос.Выполнить().Выгрузить();
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(ТЗPartNumbers, "PartNumber");
	МассивPartNumbersДляИсключения = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТЗPartNumbers, "PartNumber");
	
	Для Каждого СтрTransaction из OFSStoreTransactionsDetails Цикл
		
		Part_Num = СокрЛП(СтрTransaction.Part_Num);
		
		Если МассивPartNumbersДляИсключения.Найти(Part_Num) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйItem = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		НовыйItem.ExportRequest = Объект.Ссылка;
		НовыйItem.КодПоИнвойсу = Part_Num;
		НовыйItem.НаименованиеТовара = СтрTransaction.Part_Description;
		НовыйItem.Количество = СтрTransaction.Qty_Txn;
		НовыйItem.ЕдиницаИзмерения = РГСофтСерверПовтИспСеанс.НайтиСсылку("Справочник", "UOMs", "Код", "EA");
		НовыйItem.Цена = СтрTransaction.Transaction_Purchase_Pri;
		НовыйItem.Сумма = СтрTransaction.Qty_Txn * СтрTransaction.Transaction_Purchase_Pri;
		
		Попытка
			НовыйItem.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save Item with Part_num " + Part_Num + "!");
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.Items.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура CreateItemsFromTransactions(Команда)
	
	Если Объект.Canceled Тогда
		ПоказатьПредупреждение(, "You can not add transactions to canceled Export request!", 60);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	ПоказатьВопрос(
		Новый ОписаниеОповещения("CreateItemsFromTransactionsЗаверешение", ЭтаФорма),
		"Items will be created for new Part numbers from transactions.
		|Continue?", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Нет,
		,
		КодВозвратаДиалога.Нет);
		   	
КонецПроцедуры

/// КОМАНДА Load From Invoice

&НаКлиенте
Процедура CopyImportItems(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Failed to save current Export request.
			|See errors above.
			|" + ОписаниеОшибки(), , "Объект");
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ExportRequest.Форма.ФормаВыбораImportItems", , ЭтаФорма);
	     		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьItemsИзInvoice(ExportRequest, МассивItems)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивItems", МассивItems);
	Запрос.УстановитьПараметр("ExportRequest", ExportRequest);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтрокиИнвойса.НомерСтрокиИнвойса КАК НомерСтрокиИнвойса
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |ГДЕ
	               |	НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И СтрокиИнвойса.ExportRequest = &ExportRequest
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтрокиИнвойса УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтрокиИнвойса.КодПоИнвойсу,
	               |	СтрокиИнвойса.Инвойс.Номер КАК ImportReference,
	               |	СтрокиИнвойса.СерийныйНомер,
	               |	СтрокиИнвойса.RAN,
	               |	СтрокиИнвойса.Каталог,
	               |	СтрокиИнвойса.НаименованиеТовара,
	               |	СтрокиИнвойса.DescriptionRus,
	               |	СтрокиИнвойса.Количество,
	               |	СтрокиИнвойса.ЕдиницаИзмерения,
	               |	СтрокиИнвойса.Цена,
	               |	СтрокиИнвойса.Currency,
	               |	СтрокиИнвойса.Сумма,
	               |	СтрокиИнвойса.SoldTo,
	               |	СтрокиИнвойса.СтранаПроисхождения,
	               |	СтрокиИнвойса.Manufacturer,
	               |	СтрокиИнвойса.NetWeight,
	               |	СтрокиИнвойса.WeightUOM,
	               |	СтрокиИнвойса.PSA,
	               |	СтрокиИнвойса.PermanentTemporary,
	               |	СтрокиИнвойса.PermitsRequired,
	               |	СтрокиИнвойса.Наименование,
	               |	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
	               |	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку,
	               |	СтрокиИнвойса.TNVED,
	               |	СтрокиИнвойса.НомерВходящейДекларации,
	               |	СтрокиИнвойса.МеждународныйКодТНВЭД,
	               |	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Номер КАК ГТДНомер
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
	               |		ПО СтрокиИнвойса.Ссылка = ЗакрытиеПоставкиСопоставление.СтрокаИнвойса
	               |ГДЕ
	               |	НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И СтрокиИнвойса.Ссылка В(&МассивItems)
	               |	И ЗакрытиеПоставкиСопоставление.Ссылка.Проведен";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНомера = Результат[0].Выбрать();
	Если ВыборкаНомера.Следующий() тогда
		Сч = ВыборкаНомера.НомерСтрокиИнвойса + 1;
	Иначе 
		Сч = 1;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Выборка = Результат[1].Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		НовыйItem = Справочники.СтрокиИнвойса.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(НовыйItem, Выборка);
		
		НовыйItem.ExportRequest = ExportRequest;
		НовыйItem.НомерСтрокиИнвойса = Сч;
		
		Если Не ЗначениеЗаполнено(НовыйItem.НомерВходящейДекларации) Тогда 
			НовыйItem.НомерВходящейДекларации = Выборка.ГТДНомер;
		КонецЕсли;
			
		//попытаемся заполнить страну из справочника CountriesHUBs
		Если ТипЗнч(НовыйItem.СтранаПроисхождения) = Тип("Строка") 
			И Не ПустаяСтрока(НовыйItem.СтранаПроисхождения) Тогда 
			
			НовыйItem.СтранаПроисхождения = СтрЗаменить(НовыйItem.СтранаПроисхождения, "#", "");
						
			ЗапросCOO = Новый Запрос;
			ЗапросCOO.УстановитьПараметр("Наименование", ВРег(СокрЛП(НовыйItem.СтранаПроисхождения)));
			
			ЗапросCOO.Текст = "ВЫБРАТЬ
			|	CountriesHUBs.Ссылка КАК COO
			|ИЗ
			|	Справочник.CountriesHUBs КАК CountriesHUBs
			|ГДЕ
			|	CountriesHUBs.Наименование ПОДОБНО &Наименование
			|	И НЕ CountriesHUBs.ПометкаУдаления
			|	И ПОДСТРОКА(CountriesHUBs.Код, 1, 1) <> ""#""";
			
			ВыборкаCOO = ЗапросCOO.Выполнить().Выбрать();
			  											
			Если ВыборкаCOO.Следующий() Тогда 
			    НовыйItem.СтранаПроисхождения = ВыборкаCOO.COO;
			КонецЕсли;
			
		КонецЕсли;
	
		Попытка
			НовыйItem.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to copy Item " + Выборка.Наименование + "!");
			ОтменитьТранзакцию();
		КонецПопытки;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// 4) PARCELS

&НаСервере
Процедура НастроитьParcelsНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Parcels.Отбор,
		"ExportRequest",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,	
		,
		Истина);
				
	ОбновитьПодвалParcels(Объект.Ссылка, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, ParcelsCubicMeters);
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Canceled Тогда
		ПоказатьПредупреждение(, "You can not add parcels to canceled Export request!", 60);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Parent company' first!",
			, "Company", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьПодвалParcels(Объект.Ссылка, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, ParcelsCubicMeters);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриАктивизацииСтроки(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ParcelLines.Отбор,
		"Ссылка",
		Элемент.ТекущаяСтрока,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПодвалParcels(ExportRequest, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, ParcelsCubicMeters)
	
	ParcelsCubicMeters = 0;
	ParcelsGrossWeightKG = 0;           
	ParcelsNetWeightKG = 0;
	ParcelsChargeableWeight = 0;
	
	Если НЕ ЗначениеЗаполнено(ExportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", ExportRequest);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Parcels.CubicMeters) КАК CubicMeters,
		|	СУММА(Parcels.GrossWeightKG) КАК GrossWeightKG,
		|	СУММА(Parcels.NetWeightKG) КАК NetWeightKG,
		|	СУММА(Parcels.ChargeableWeight) КАК ChargeableWeight
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	(НЕ Parcels.Отменен)
		|	И Parcels.ExportRequest = &ExportRequest";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ParcelsCubicMeters = Выборка.CubicMeters;
		ParcelsGrossWeightKG = Выборка.GrossWeightKG;           
		ParcelsNetWeightKG = Выборка.NetWeightKG;
		ParcelsChargeableWeight = Выборка.ChargeableWeight;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////
// 5) SUBMISSION

&НаКлиенте
Процедура SubmitToExportSpecialist(Команда)
	// { RGS EParshina 11.09.2018 13:15:15 - S-I-0005711
	Отказ = Ложь;
	ПроверкаЗаполнения(Отказ);
	Если Не ЕстьПрисоединенныеФайлы() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru =""Прикрепите фотографии каждого артикула с общим видом детали, информацией о партийном/серийном номере и этикеткой производителя""; en = ""Please attach photos of each item with general view, part/serial no. and manufacturer's label"""));
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// } RGS EParshina 11.09.2018 13:15:15 - S-I-0005711
	OldSubmitted = Объект.Submitted;
	Объект.Submitted = ТекущаяДата();
	Модифицированность = Истина;
	Попытка
		
		Записать();
		
		ПоказатьОповещениеПользователя(
			"Success",
			,
			"Export request was successfully sent to export specialist");
			
	Исключение
			
		Объект.Submitted = OldSubmitted;
		
		ПоказатьОповещениеПользователя(
			"Error",
			,
			"Failed to send request to export specialist.");
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура SubmittedПриИзменении(Элемент)
	
	Элементы.СтраницаStages.Видимость = ЗначениеЗаполнено(Объект.Submitted);
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

&НаКлиенте
Процедура Accept(Команда)
	
	//OldAccepted = Объект.AcceptedBySpecialist;
	//Объект.AcceptedBySpecialist = ТекущаяДата();
	//
	//OldExportSpecialist = Объект.ExportSpecialist;
	//Объект.ExportSpecialist = ПолучитьТекущегоПользователя(); 
	//
	//Модифицированность = Истина;
	//
	//Попытка
	//	
	//	Записать();
	//	
	//	ПоказатьОповещениеПользователя(
	//		"Success",
	//		,
	//		"Export request was successfully accepted.");
	//		
	//Исключение
	//		
	//	Объект.AcceptedBySpecialist = OldAccepted;
	//	Объект.ExportSpecialist = OldExportSpecialist;
	//	
	//	ПоказатьОповещениеПользователя(
	//		"Error",
	//		,
	//		"Failed to accept request.");
	//		
	//КонецПопытки;      	
	
КонецПроцедуры

&НаКлиенте
Процедура CancelAcceptance(Команда)
	
	//OldAccepted = Объект.AcceptedBySpecialist;
	//Объект.AcceptedBySpecialist = Неопределено;
	//
	//OldExportSpecialist = Объект.ExportSpecialist;
	//Объект.ExportSpecialist = Неопределено;
	//
	//Модифицированность = Истина;
	//
	//Попытка
	//	
	//	Записать();
	//	
	//Исключение
	//	
	//	Объект.AcceptedBySpecialist = OldAccepted;
	//	Объект.ExportSpecialist = OldExportSpecialist;

	//	ПоказатьОповещениеПользователя(
	//		"Error",
	//		,
	//		"Failed to cancel acceptance.");
	//		
	//КонецПопытки;
	       		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьAcceptCancel()

	Попытка
		Элементы.ФормаПровести.Видимость = Не ЗначениеЗаполнено(Объект.AcceptedBySpecialist);
		Элементы.ФормаОтменаПроведения.Видимость = ЗначениеЗаполнено(Объект.AcceptedBySpecialist);
	Исключение
	КонецПопытки;

КонецПроцедуры

// { RGS AArsentev 06.09.2016 12:25:41 - S-I-0001784
&НаКлиенте
Процедура CreateParcelsFromHistory(Команда)
	
	Если Элементы.Items.ТекущаяСтрока = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Message = New UserMessage();
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Message.Text = "Необходимо записать документ.";
		иначе
			Message.Text = "First save document.";
		КонецЕсли;
		Message.Message();
		Возврат;
	КонецЕсли;
	
	СтруктураСвойств = LocalDistributionForNonLawsonСервер.CreateParcelsFromHistory(Элементы.Items.ТекущаяСтрока, Объект.Ссылка, Объект.Номер);
	           		
	Если СтруктураСвойств <> Неопределено Тогда 
		
		СтруктураСвойств.Вставить("СтрокаИнвойса", Элементы.Items.ТекущаяСтрока);
		ОткрытьФорму("Справочник.Parcels.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураСвойств));
		
	КонецЕсли;
	               	
КонецПроцедуры 

&НаКлиенте
Процедура CreateDoc(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДанныеЗаполненияИзExportRequest", Новый Структура("ExportRequest",Объект.Ссылка));
		
		Инвойс = ОткрытьФорму("Документ.Инвойс.ФормаОбъекта", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Инвойс.Объект.Ссылка) Тогда
		СтруктураПараметров.Вставить("ДанныеЗаполненияИнвойс", Новый Структура("Инвойс",Инвойс.Объект.Ссылка));
		
		Doc = ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.ФормаОбъекта", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// { RGS AArsentev 01.11.2017 10:33:25 - S-I-0003185
	Если ЗначениеЗаполнено(Объект.RechargeToAU) Тогда
		Если СтрДлина(Объект.RechargeToAU) <> 7 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("'Recharge to AU' должно содержать 7 символов",,"RechargeToAU", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;	
	// } RGS AArsentev 01.11.2017 10:33:25 - S-I-0003185
	// { RGS EParshina 11.09.2018 13:05:16 - S-I-0005711
	ПроверкаЗаполнения(Отказ);
	// } RGS EParshina 11.09.2018 13:05:16 - S-I-0005711	
	
КонецПроцедуры

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаСервереБезКонтекста
Процедура ItemsПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникСтрокиИнвойса.Ссылка,
	               |	СправочникСтрокиИнвойса.ПометкаУдаления,
	               |	СправочникСтрокиИнвойса.Код,
	               |	СправочникСтрокиИнвойса.Наименование,
	               |	СправочникСтрокиИнвойса.Инвойс,
	               |	СправочникСтрокиИнвойса.ExportRequest,
	               |	СправочникСтрокиИнвойса.TransportRequest,
	               |	СправочникСтрокиИнвойса.НомерСтрокиИнвойса,
	               |	СправочникСтрокиИнвойса.НомерЗаявкиНаЗакупку,
	               |	СправочникСтрокиИнвойса.СтрокаЗаявкиНаЗакупку,
	               |	СправочникСтрокиИнвойса.КодПоИнвойсу,
	               |	СправочникСтрокиИнвойса.СерийныйНомер,
	               |	СправочникСтрокиИнвойса.RAN,
	               |	СправочникСтрокиИнвойса.Каталог,
	               |	СправочникСтрокиИнвойса.ImportReference,
	               |	СправочникСтрокиИнвойса.НаименованиеТовара,
	               |	СправочникСтрокиИнвойса.DescriptionRus,
	               |	СправочникСтрокиИнвойса.Количество,
	               |	СправочникСтрокиИнвойса.ЕдиницаИзмерения,
	               |	СправочникСтрокиИнвойса.Цена,
	               |	СправочникСтрокиИнвойса.Currency,
	               |	СправочникСтрокиИнвойса.Сумма,
	               |	СправочникСтрокиИнвойса.SoldTo,
	               |	СправочникСтрокиИнвойса.КостЦентр,
	               |	СправочникСтрокиИнвойса.Классификатор,
	               |	СправочникСтрокиИнвойса.Активити,
	               |	СправочникСтрокиИнвойса.СтранаПроисхождения,
	               |	СправочникСтрокиИнвойса.Manufacturer,
	               |	СправочникСтрокиИнвойса.МеждународныйКодТНВЭД,
	               |	СправочникСтрокиИнвойса.НомерВходящейДекларации,
	               |	СправочникСтрокиИнвойса.NetWeight,
	               |	СправочникСтрокиИнвойса.WeightUOM,
	               |	СправочникСтрокиИнвойса.PSA,
	               |	СправочникСтрокиИнвойса.PermanentTemporary,
	               |	СправочникСтрокиИнвойса.PermitsRequired,
	               |	СправочникСтрокиИнвойса.Final,
	               |	СправочникСтрокиИнвойса.LocalOnly,
	               |	СправочникСтрокиИнвойса.Prefix,
	               |	СправочникСтрокиИнвойса.Shortage,
	               |	СправочникСтрокиИнвойса.EUCNotRequired,
	               |	СправочникСтрокиИнвойса.EUCRequested,
	               |	СправочникСтрокиИнвойса.EUCReceived,
	               |	СправочникСтрокиИнвойса.SCNo,
	               |	СправочникСтрокиИнвойса.TNVED,
	               |	СправочникСтрокиИнвойса.COORequired,
	               |	СправочникСтрокиИнвойса.ERPTreatmentNonLawson,
	               |	СправочникСтрокиИнвойса.ProjectMobilization,
	               |	СправочникСтрокиИнвойса.HazardClass,
	               |	СправочникСтрокиИнвойса.GuaranteeLetter,
	               |	СправочникСтрокиИнвойса.MOC,
	               |	СправочникСтрокиИнвойса.ClientPO,
	               |	СправочникСтрокиИнвойса.ConfirmationOfCargoLatestDate,
	               |	СправочникСтрокиИнвойса.CustomsBSReceiptDate,
	               |	СправочникСтрокиИнвойса.Предопределенный,
	               |	СправочникСтрокиИнвойса.ИмяПредопределенныхДанных,
	               |	"""" КАК TDIndicator,
	               |	"""" КАК TDHistory,
	               |	ЕСТЬNULL(TDStatusesСрезПоследних.Status, ЗНАЧЕНИЕ(Перечисление.TDStatuses.ПустаяСсылка)) КАК TDStatus,
	               |	TDStatusesСрезПоследних.Query КАК TDQuery
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СправочникСтрокиИнвойса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TDStatuses.СрезПоследних(, Item В (&КлючиСтрок)) КАК TDStatusesСрезПоследних
	               |		ПО СправочникСтрокиИнвойса.Ссылка = TDStatusesСрезПоследних.Item
	               |			И СправочникСтрокиИнвойса.КодПоИнвойсу = TDStatusesСрезПоследних.PartNo.Код
	               |			И СправочникСтрокиИнвойса.ExportRequest = TDStatusesСрезПоследних.DOC
	               |ГДЕ
	               |	СправочникСтрокиИнвойса.Ссылка В(&КлючиСтрок)";
	Запрос.УстановитьПараметр("КлючиСтрок", Строки.ПолучитьКлючи());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		TDHistory = ПолучитьИсториюСтатусов(Выборка.ExportRequest, Выборка.Ссылка, Выборка.КодПоИнвойсу);
		Строки[Выборка.Ссылка].Данные.TDHistory = TDHistory;
		
	КонецЦикла;
	
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаСервереБезКонтекста
Функция ПолучитьИсториюСтатусов(DOC, Item, PartNo)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	TDStatuses.PartNo.Код КАК PartNo,
	|	TDStatuses.Период КАК Период,
	|	TDStatuses.Status,
	|	TDStatuses.Item,
	|	TDStatuses.ModifiedBy
	|ИЗ
	|	РегистрСведений.TDStatuses КАК TDStatuses
	|ГДЕ
	|	TDStatuses.DOC = &DOC
	|	И TDStatuses.Item = &Item
	|	И TDStatuses.PartNo.Код = &PartNo
	|
	|УПОРЯДОЧИТЬ ПО
	|	PartNo,
	|	Период";
	Запрос.УстановитьПараметр("DOC",DOC);
	Запрос.УстановитьПараметр("Item",Item);
	Запрос.УстановитьПараметр("PartNo",PartNo);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеИстории = ПолучитьОписаниеИстории(PartNo, Результат);
	
	Возврат ОписаниеИстории;
	
КонецФункции // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаСервереБезКонтекста
Функция ПолучитьОписаниеИстории(PartNo, ТаблицаИстории)
	
	Если ТаблицаИстории = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	маска = "                                                                               ";
	
	строкиПоиска = ТаблицаИстории.НайтиСтроки(Новый Структура("PartNo", PartNo + Лев(маска, 50 - СтрДлина(PartNo))));
	Если строкиПоиска.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	результат = "";
	Для Каждого текСтрокаПоиска из строкиПоиска Цикл
		
		результат = результат + ?(ПустаяСтрока(результат), "", Символы.ПС) + текСтрокаПоиска.status + ", " + СокрЛП(текСтрокаПоиска.ModifiedBy) + ", " + Формат(текСтрокаПоиска.Период, "ДЛФ=DT");
		
	КонецЦикла;
	
	Возврат результат;
	
КонецФункции // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаКлиенте
Процедура ItemsПриАктивизацииЯчейки(Элемент)
	
	ТД = Элементы.Items.ТекущийЭлемент;
	Если ТД = Неопределено ИЛИ ТД.Имя <> "ItemsTDStatus" Тогда
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ChangeTDStatus", ЭтотОбъект, Элементы.Items.ТекущиеДанные.TDStatus);
		
	ПоказатьВводЗначения(
	Оповещение, 
	Элементы.Items.ТекущиеДанные.TDStatus,
	?(РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS(), "Изменение статуса TD", "TD Statuse change"), 
	Тип("ПеречислениеСсылка.TDStatuses")
	);
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаКлиенте
Процедура ChangeTDStatus(NewStatuse, ТекущийСтатус) Экспорт
	
	Если NewStatuse <> Неопределено Тогда
		ТД = Элементы.Items.ТекущиеДанные;
		НовыйСтатус = NewStatuse;
		Если NewStatuse = ПредопределенноеЗначение("Перечисление.TDStatuses.Requested") 
			И NewStatuse <> ТекущийСтатус Тогда
			
			TDСервер.НайтиСоздатьPartNo(ТД.КодПоИнвойсу, ТД.Item); 
			
			Если ЗначениеЗаполнено(ТД.TDQuery) Тогда
				
				ОткрытьФормуОтправкиПисьма(ТД);
				
			Иначе
				
				// покажем окно ввода запроса и только потом откроем форму письма
				начальнаяСтрока = ТД.TDQuery;
				
				ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработкаQuery", ЭтаФорма, Новый Структура("ЗапросПередПисьмом", Истина)), начальнаяСтрока, "Please fill out the request", , Истина);
				
			КонецЕсли; 
			
		ИначеЕсли NewStatuse <> ТекущийСтатус Тогда
			
			// если статус изменился и это не Requested, тогда надо его записать просто без доп. действий
			TDСервер.ЗаписатьНовоеЗначениеСтатуса(НовыйСтатус, ТД.КодПоИнвойсу, Объект.Ссылка, ТД.TDQuery, ТД.Item);
			// { RGS DKazanskiy 24.10.2018 14:34:38 - S-I-0005759	
			Если Stage = ПредопределенноеЗначение("Перечисление.ExportStages.PendingTD") Тогда
				ОбновитьStage();
			КонецЕсли;
			// } RGS DKazanskiy 24.10.2018 14:34:50 - S-I-0005759
		КонецЕсли;
		Элементы.Items.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаКлиенте
Процедура ОткрытьФормуОтправкиПисьма(ТД)
	
	параметрыПисьма = Новый Структура;
	параметрыПисьма.Вставить("PartNo",		СокрЛП(ТД.КодПоИнвойсу));
	параметрыПисьма.Вставить("DOCNo",  		СокрЛП(Объект.Номер));
	параметрыПисьма.Вставить("DOC",  		Объект.Ссылка);
	параметрыПисьма.Вставить("Coordinator", Объект.ShipperContact);
	параметрыПисьма.Вставить("Query",  		НовыйЗапрос);
	параметрыПисьма.Вставить("Item",  		ТД.Item);
	параметрыПисьма.Вставить("DOCType",  	"DOC");
	
	// передадим список items с требуемым парт-номером
	массивItems = новый Массив;
	массивItems.Добавить(ТД.Item);
	
	параметрыПисьма.Вставить("Items", массивItems);
	
	// надо показать форму отправки нового сообщения
	СтруктураПараметров = TDСервер.ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщенияПриИзмененииСтатуса(параметрыПисьма);
	Если СтруктураПараметров <> Неопределено Тогда
		
		Для Каждого Borg из СтруктураПараметров.УдаленныеБорги Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(Borg) + " was marked for deletion!
			|Please send request via RIET-support!",
			, "ФормаОбщаяКомандаrgsМониторСопровождения");
		КонецЦикла;
		
		Если СтруктураПараметров.УдаленныеБорги.Количество() = 0 Тогда 
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML", СтруктураПараметров, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаКлиенте
Процедура ОбработкаQuery(текстЗапроса, допПараметры) Экспорт
	
	Если текстЗапроса = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	ТД = Элементы.Items.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЗапрос = текстЗапроса;
	
	Если ТипЗнч(допПараметры) = Тип("Структура") И 
		допПараметры.Свойство("ЗапросПередПисьмом") Тогда
		ОткрытьФормуОтправкиПисьма(ТД);
	Иначе
		// Если это просто правка запроса, то надо записать текст в самую позднюю запись регистра сведениий
		ДобавитьТекстQueryКЗаписямРегистра(ТД.КодПоИнвойсу, ТД.Item, Объект.Ссылка, НовыйЗапрос);
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаСервереБезКонтекста
Процедура ДобавитьТекстQueryКЗаписямРегистра(PartNo, Item, DOC, текстЗапроса)
	
	Набор = РегистрыСведений.TDStatuses.СоздатьНаборЗаписей();
	Набор.Отбор.PartNo.Установить(TDСервер.НайтиСоздатьPartNo(PartNo, Item), Истина);
	Набор.Отбор.DOC.Установить(DOC, Истина);
	Набор.Отбор.Item.Установить(Item, Истина);
	
	Набор.Прочитать();
	
	Если Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	строкаПравки 		= Набор[Набор.Количество()-1];
	строкаПравки.Query	= текстЗапроса;
	
	Набор.Записать(Истина);
	
КонецПроцедуры // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаКлиенте
Процедура ItemsTDQueryНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Goods.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	начальнаяСтрока = ТД.TDQuery;
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработкаQuery", ЭтаФорма, Неопределено), начальнаяСтрока, "Please fill out the request", , Истина);
	
	Элементы.Items.Обновить();
	
КонецПроцедуры  // } RGS AArsentev 14.06.2018 - Работа с TD из ER

// { RGS AArsentev 14.06.2018 - Работа с TD из ER
&НаСервере
Функция ОбработатьПолучениеСтруктурыПочтовогоСообщенияHTML(СтруктураПараметров)
	
	НачатьТранзакцию();
	
	записатьИсториюИзменения = Ложь;
	Если СтруктураПараметров.Свойство("TechDOC") И СтруктураПараметров.TechDOC Тогда
		
		записатьИсториюИзменения = Истина;
		
	КонецЕсли;
	
	// Создадим и отправим EMail	
	УстановитьПривилегированныйРежим(Истина);
	ДокументEMail = Документы.EMails.СоздатьДокумент();
	СтруктураПараметров.Вставить("Object", Объект.Ссылка);
	ДокументEMail.Заполнить(СтруктураПараметров);
	
	Попытка
		ДокументEMail.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить(
		"Failed to send email.
		|See errors above.
		|" + ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Новый Структура("записатьИсториюИзменения, ЭлПисьмо", записатьИсториюИзменения, ДокументEMail.Ссылка);
	
КонецФункции // } RGS AArsentev 14.06.2018 - Работа с TD из ER

&НаКлиенте
Процедура ItemsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ItemsКодПоИнвойсу" Тогда
		СтандартнаяОбработка = Ложь;
		PartNo_Catalog = НайтиPartNo(Элементы.items.ТекущиеДанные.КодПоИнвойсу);
		Если ЗначениеЗаполнено(PartNo_Catalog) Тогда
			// { RGS ASeryakov, 10.10.2018 12:54:22 S-I-0006169
			//ОткрытьЗначение(PartNo_Catalog);
			
			#Если ТонкийКлиент Тогда
				ОткрытьЗначение(PartNo_Catalog);
			#ИначеЕсли ВебКлиент Тогда
				ОткрытьФорму("Справочник.Catalog.ФормаОбъекта", Новый Структура("Ключ",PartNo_Catalog), ЭтотОбъект);
			#КонецЕсли
			// } RGS ASeryakov 10.10.2018 12:54:24 S-I-0006169

		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Catalog Part no. not found");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиPartNo(КодКаталога)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Catalog.Ссылка
	|ИЗ
	|	Справочник.Catalog КАК Catalog
	|ГДЕ
	|	Catalog.Код = &Код
	|	И НЕ Catalog.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", КодКаталога);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СброситьДатыРедактируемыеБрокером()
	
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAGLReceived", "ТолькоПросмотр", Истина);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationRequired", "ТолькоПросмотр", Истина);
	// { RGS DKazanskiy 09.10.2018 10:16:19 - S-I-0005759
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationCertificateRequired", "ТолькоПросмотр", Истина);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "FumigationDone", "ТолькоПросмотр", Истина);
	//РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsRequired", "ТолькоПросмотр", Истина);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangePermits", "Видимость", Истина);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "GoodsПодменюChangeIPLetter", "Видимость", Истина);
	// } RGS DKazanskiy 09.10.2018 10:16:34 - S-I-0005759
	
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "PermitsObtained", "ТолькоПросмотр", Истина);
	
	Объект.CCAGLReceived = '00010101';
	Объект.FumigationRequired = ПредопределенноеЗначение("Перечисление.YesNo.ПустаяСсылка");
	// { RGS DKazanskiy 09.10.2018 10:16:19 - S-I-0005759
	//Объект.FumigationCertificateRequired = ПредопределенноеЗначение("Перечисление.YesNo.ПустаяСсылка");
	//Объект.FumigationDone = '00010101';
	// } RGS DKazanskiy 09.10.2018 10:16:34 - S-I-0005759
	Объект.PermitsRequired = ПредопределенноеЗначение("Перечисление.YesNo.ПустаяСсылка");
	Объект.PermitsObtained = '00010101';
	
	УстановитьДоступностьЭлементовExportReports();
	
КонецПроцедуры

&НаКлиенте
Процедура CCAПриИзменении(Элемент)
	
	Если ТекущийCCA <> Объект.CCA Тогда
		СброситьДатыРедактируемыеБрокером();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CCAНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущийCCA = Объект.CCA;
КонецПроцедуры

&НаСервере
Процедура ПроверитьВерсию(ТекущийMOT, ТекущийCCA, ТекущийPOD, CCAGLRequested, ОбновлятьДаты = Истина)
	
	// { RGS DKazanskiy 24.07.2018 11:34:50 - S-I-0005748
	Ответ = Документы.ExportRequest.ПроверитьВерсию(Объект.Ссылка, ТекущийMOT, ТекущийCCA, ТекущийPOD, CCAGLRequested);
	
	Если ОбновлятьДаты Тогда
		Объект.CCAGLReceived 	= Ответ.CCAGLReceived;
	КонецЕсли;
	
	Если Ответ.ТекущаяВерсия <> Неопределено Тогда
		ТекущаяВерсия 		= Ответ.ТекущаяВерсия;
	Иначе
		ТекущаяВерсия       = 0;
	КонецЕсли; 	
	
	// } RGS DKazanskiy 24.07.2018 11:34:52 - S-I-0005748
КонецПроцедуры

&НаКлиенте
Процедура POAПриИзменении(Элемент)
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested);
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748
КонецПроцедуры

&НаКлиенте
Процедура CCAGLRequestedПриИзменении(Элемент)
	
	// { RGS DKazanskiy 03.08.2018 13:05:27 - S-I-0005748
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.InternationalMOT, Объект.CCA, Объект.POD, Объект.CCAGLRequested);
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:05:28 - S-I-0005748
	
КонецПроцедуры

// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
&НаСервере
Процедура УстановкаФлагаCustomsUnion()
	
	Если Объект.PickUpWarehouse.RCACountry = Справочники.CountriesOfProcessLevels.KZ И Объект.Consignee.RCACountry = Справочники.CountriesOfProcessLevels.RU 
		ИЛИ Объект.PickUpWarehouse.RCACountry = Справочники.CountriesOfProcessLevels.RU И Объект.Consignee.RCACountry = Справочники.CountriesOfProcessLevels.KZ 
			ИЛИ Объект.PickUpWarehouse.RCACountry = Справочники.CountriesOfProcessLevels.BY И Объект.Consignee.RCACountry = Справочники.CountriesOfProcessLevels.RU 
				ИЛИ Объект.PickUpWarehouse.RCACountry = Справочники.CountriesOfProcessLevels.RU И Объект.Consignee.RCACountry = Справочники.CountriesOfProcessLevels.BY Тогда 
		Объект.CustomUnionTransaction = Истина;				
	КонецЕсли;			
	
КонецПроцедуры	

// { RGS DKazanskiy 10.10.2018 14:26:33 - S-I-0005759
// PERMITS

&НаКлиенте
Процедура PermitsRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "PermitsRequired", ПредопределенноеЗначение("Перечисление.YesNo.Yes"));
	
	Элементы.Items.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура PermitsNotRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "PermitsRequired", ПредопределенноеЗначение("Перечисление.YesNo.Yes"));
	
	Элементы.Items.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхItems()
	
	Возврат Элементы.Items.ВыделенныеСтроки;
	//МассивGoods = Новый Массив;
	//ВыделенныеСтроки = Элементы.Items.ВыделенныеСтроки;
	//Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	//	
	//	СтрокаТаблицы = Элементы.Items.НайтиПоИдентификатору(ВыделеннаяСтрока);
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.ItemsItem) Тогда
	//		МассивGoods.Добавить(СтрокаТаблицы.ItemsItem);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат МассивGoods;
	
КонецФункции

&НаКлиенте
Процедура IPLetterNotRequired(Команда)
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "IPLetterRequired", ПредопределенноеЗначение("Перечисление.YesNo.No"));
	
	Элементы.Items.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура IPLetterRequired(Команда)
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "IPLetterRequired", ПредопределенноеЗначение("Перечисление.YesNo.Yes"));
	
	Элементы.Items.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьTESSNo()

	Элементы.TessNo.Видимость = Найти(Строка(Объект.InternationalFreightProvider), "DHL") = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьTranCountry()

	Уровни = Новый Массив;
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.RUEA"));
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.KZ"));
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.AZ"));
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.GE"));
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.TM"));
	Уровни.Добавить(ПредопределенноеЗначение("Справочник.ProcessLevels.UZ"));
	
	Элементы.TransitionalCountry.Видимость = НЕ (Уровни.Найти(Объект.ProcessLevel) = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКонтракта()
	Элементы.ExportContract.Видимость = ЗначениеЗаполнено(Объект.Company) И (Объект.Company.Country = Справочники.CountriesOfProcessLevels.RU);
КонецПроцедуры

&НаСервере
Процедура ОбновитьStage() 
	
	ТекущийСтатус = ОпределитьStage();
	
	NewStage = ImportExportСервер.ПолучитьExportRequestStage(РеквизитФормыВЗначение("Объект"), Неопределено);
	
	Если ТекущийСтатус <> NewStage и НЕ Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
	
		МенеджерЗаписи = РегистрыСведений.StagesOfExportRequests.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ExportRequest = Объект.Ссылка;
		МенеджерЗаписи.Stage = NewStage;
		МенеджерЗаписи.ModificationDate = ТекущаяДата();
		МенеджерЗаписи.Записать(Истина);
		
		Stage = NewStage;
		
	КонецЕсли;
	
	
КонецПроцедуры  


// } RGS DKazanskiy 10.10.2018 14:26:43 - S-I-0005759
