
Перем СамаяРанняяДата; // Раньше этой даты заводить ничего нельзя
Перем ЗаполнениеПроверено;
// { RGS DKazanskiy 03.08.2018 12:45:35 - S-I-0005748
Перем ТекущаяВерсияДокумента Экспорт;
Перем ИзменениеСостава Экспорт;
// } RGS DKazanskiy 03.08.2018 12:45:37 - S-I-0005748


/////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Stage = Перечисления.ExportStages.Draft;
	Submitter = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	// Очистим некоторые реквизиты
	SourceEmailUID = "";
	SourceEMail = "";
	
	RequiredDeliveryDate = Неопределено;
	ReadyToShipDate = Неопределено;
	ActualAvailabilityDate = Неопределено;
	
	ArchiveShipperContact = Неопределено;
	ArchiveShipperPhone = Неопределено;
	ArchiveShipperEmail = Неопределено;
	
	Submitted = Неопределено;
	AcceptedBySpecialist = Неопределено;
	ExportSpecialist = Неопределено;
	
	УдалитьLocalFreightRequested = Неопределено;
	УдалитьLocalFreightReceived = Неопределено;
	LocalFreightSubmittedForApproval = Неопределено;
	УдалитьLocalFreightApproved = Неопределено;
	LocalFreightProvider = Неопределено;
	LocalFreightSum = Неопределено;
	LocalFreightCurrency = Неопределено;

	LocalWB = Неопределено;
	УдалитьLocalETD = Неопределено;
	LocalATD = Неопределено;
	УдалитьLocalETA = Неопределено;
	LocalATA = Неопределено;
	
	CCAGLRequested = Неопределено;
	CCAGLReceived = Неопределено;
	SourceDocsAvailable = Неопределено;
	PermitsRequired = Неопределено;
	УдалитьPermitsRequested = Неопределено;
	PermitsObtained = Неопределено;
	ConsigneeGLRequested = Неопределено;
	ConsigneeGLReceived = Неопределено;
	ShippingInvoiceReady = Неопределено;
	FumigationRequired = Неопределено;
	УдалитьFumigationCertificateRequired = Неопределено;
	УдалитьFumigationDone = Неопределено;
	
	InternationalFreightRequested = Неопределено;
	InternationalFreightReceived = Неопределено;
	InternationalFreightSubmittedForApproval = Неопределено;
	InternationalFreightApproved = Неопределено;
	InternationalFreightProvider = Неопределено;
	InternationalFreightSum = Неопределено;
	InternationalFreightCurrency = Неопределено;

	РГСофт.ОчиститьCreationModification(ЭтотОбъект);

	LoadedFromCBR = Ложь;
	
	DomesticOBSentToTMS = Ложь;
	InternationalOBSentToTMS = Ложь;
		
	Stage = Перечисления.ExportStages.Draft;
	Submitter = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПРИ УСТАНОВКЕ НОВОГО НОМЕРА

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если НЕ ЗначениеЗаполнено(FromCountry) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	FromCountryCode = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(FromCountry, "Код");
	Префикс = "E" + Лев(FromCountryCode, 2) + Формат(CreationDate, "ДФ=yy-");
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ДозаполнитьРеквизитыБезДополнительныхДанных();
		
	ПроверитьВозможностьИзмененияБезДополнительныхДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью();	
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ВыборкаРеквизитовExportShipment);
	
	ПроверитьВозможностьИзмененияСДополнительнымиДанными(Отказ, 
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, 
		ДополнительныеСвойства.ВыборкаРеквизитовExportShipment,
	    ДополнительныеСвойства.ВыборкаAUsLegalEntities);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьРеквизитыСДополнительнымиДанными(Отказ);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.ТаблицаСтарыхOtherInvolvedLocations,
		ДополнительныеСвойства.ТаблицаСтарыхOtherInvolvedContacts);
	
	// { RGS AArsentev 23.09.2016 13:15:41 - S-I-0001909
	Если Отказ Тогда
		Возврат	
	КонецЕсли;
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
	// возвращение Customs Union
	//Отказ = ПроверитьRussiaKazakhstan();
	Если НЕ ЗначениеЗаполнено(PickUpWarehouse) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено поле 'PickUpWarehouse'!",
			ЭтотОбъект, "PickUpWarehouse", , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'PickUpWarehouse' is empty!",
			ЭтотОбъект, "PickUpWarehouse", , Отказ);
		КонецЕсли;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Consignee) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено поле 'Consignee'!",
			ЭтотОбъект, "Consignee", , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Consignee' is empty!",
			ЭтотОбъект, "Consignee", , Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		УстановитьПризнакCustomsUnion();
	КонецЕсли;
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
	// } RGS AArsentev 23.09.2016 13:15:41 - S-I-0001909
	
	// { RGS DKazanskiy 02.08.2018 15:54:59 - S-I-0005748
	Если НЕ Отказ Тогда
		ВерсионированиеДокумента(Отказ, ИзменениеСостава);	
	КонецЕсли;
	// } RGS DKazanskiy 02.08.2018 15:55:16 - S-I-0005748
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
				
	Если ЭтоНовый() Тогда	
		РГСофт.ЗаполнитьCreation(ЭтотОбъект);									
	КонецЕсли;
	
    Дата = ?(ЗначениеЗаполнено(Submitted), Submitted, CreationDate); 
	
	СинхронизироватьОтменуИПометкуУдаленияДокумента();
	
	Если НЕ Recharge Тогда
		
		RechargeToLegalEntity = Неопределено;
		RechargeToAU = Неопределено;
		RechargeToActivity = Неопределено;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Submitter)
		И CustomsСервер.ЭтоImportExportTracker() Тогда
		Submitter = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	СОКРЛПТекстовыхРеквизитов();
	
	// Удалим строки Involved locations с пустым location id
	ИндексСтроки = 0;
	Пока ИндексСтроки < OtherInvolvedLocations.Количество() Цикл
		
		Если ЗначениеЗаполнено(OtherInvolvedLocations[ИндексСтроки].LocationId) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			OtherInvolvedLocations.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим строки Involved party contacts с пустым contact id
	ИндексСтроки = 0;
	Пока ИндексСтроки < OtherInvolvedContacts.Количество() Цикл
		
		Если ЗначениеЗаполнено(OtherInvolvedContacts[ИндексСтроки].ContactId) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			OtherInvolvedContacts.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Документы.ExportRequest.OFSStoreTransactionsRequired(Segment, ExportPurpose) Тогда 
		OFSStoreTransactions.Свернуть("TransactionID");
	иначе
		OFSStoreTransactions.Очистить();
	КонецЕсли;
	
	Если CustomUnionTransaction Тогда
		
		УдалитьLocalFreightRequested = Неопределено;
		УдалитьLocalFreightReceived = Неопределено;
		LocalFreightSubmittedForApproval = Неопределено;
		УдалитьLocalFreightApproved = Неопределено;
		LocalFreightProvider = Неопределено;
		LocalMOT = Неопределено;
		LocalWarehouseTo = Неопределено;
		ActualAvailabilityDate = Неопределено;
		УдалитьLocalETD = Неопределено;
		LocalATD = Неопределено;
		УдалитьLocalETA = Неопределено;
		LocalATA = Неопределено;
		LocalWB = Неопределено;
		LocalFreightSum = Неопределено;
		LocalFreightCurrency = Неопределено;
		
		// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
		//CCAGLRequested = Неопределено;
		//CCAGLReceived = Неопределено;
		//SourceDocsAvailable = Неопределено;
		//CCA = Неопределено;
		//FumigationRequired = Неопределено;
		//FumigationCertificateRequired = Неопределено;
		//FumigationDone = Неопределено;
		//PermitsRequired = Неопределено;
		PermitsRequested = Неопределено;
		PermitsObtained = Неопределено;
		//ConsigneeGLRequested = Неопределено;
		//ConsigneeGLReceived = Неопределено;
		//ShippingInvoiceReady = Неопределено;
		// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
		POD = Неопределено;

	КонецЕсли;
	
	// { RGS DKazanskiy 10.10.2018 16:17:03 - S-I-0005759
	// заполним PermitsRequired
	// if any item has PermitsRequired == Yes then PermitsRequired = Yes for whole request
	УстановитьЗначениеPermitsRequiredДляExportRequest();	
	// } RGS DKazanskiy 10.10.2018 16:17:14 - S-I-0005759

КонецПроцедуры

Процедура СОКРЛПТекстовыхРеквизитов()
	
	ExternalReference = СокрЛП(ExternalReference);
	JobNumber = СокрЛП(JobNumber);
	
	РГСофтКлиентСервер.УстановитьЗначение(ExportPurposeDescription, СокрЛП(ExportPurposeDescription)); 
	РГСофтКлиентСервер.УстановитьЗначение(UrgencyComment, СокрЛП(UrgencyComment));
	РГСофтКлиентСервер.УстановитьЗначение(EmergencyApprovedBy, СокрЛП(EmergencyApprovedBy));
	
	РГСофтКлиентСервер.УстановитьЗначение(PickUpFromAddress, СокрЛП(PickUpFromAddress));
	РГСофтКлиентСервер.УстановитьЗначение(PickUpFromContact, СокрЛП(PickUpFromContact));
	РГСофтКлиентСервер.УстановитьЗначение(PickUpFromPhone, СокрЛП(PickUpFromPhone));
	РГСофтКлиентСервер.УстановитьЗначение(PickUpFromEmail, СокрЛП(PickUpFromEmail));
	
	РГСофтКлиентСервер.УстановитьЗначение(ConsigneeCompany, СокрЛП(ConsigneeCompany));
	РГСофтКлиентСервер.УстановитьЗначение(ConsigneeAddress, СокрЛП(ConsigneeAddress));
	РГСофтКлиентСервер.УстановитьЗначение(ConsigneeContact, СокрЛП(ConsigneeContact));
	РГСофтКлиентСервер.УстановитьЗначение(ConsigneePhone, СокрЛП(ConsigneePhone));
	РГСофтКлиентСервер.УстановитьЗначение(ConsigneeEmail, СокрЛП(ConsigneeEmail));
	
	РГСофтКлиентСервер.УстановитьЗначение(DeliverToCompany, СокрЛП(DeliverToCompany));
	РГСофтКлиентСервер.УстановитьЗначение(DeliverToAddress, СокрЛП(DeliverToAddress));
	РГСофтКлиентСервер.УстановитьЗначение(DeliverToContact, СокрЛП(DeliverToContact));
	РГСофтКлиентСервер.УстановитьЗначение(DeliverToPhone, СокрЛП(DeliverToPhone));
	РГСофтКлиентСервер.УстановитьЗначение(DeliverToEmail, СокрЛП(DeliverToEmail));
	
	RechargeToAU = СокрЛП(RechargeToAU);
	RechargeToActivity = СокрЛП(RechargeToActivity);
	
	РГСофтКлиентСервер.УстановитьЗначение(Comments, СокрЛП(Comments));
	
	РГСофтКлиентСервер.УстановитьЗначение(LocalWB, СокрЛП(LocalWB));
	
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(OtherInvolvedLocations, "LocationId");
	РГСофтКлиентСервер.СокрЛПКолонокВТаблице(OtherInvolvedContacts, "ContactId");
	
КонецПроцедуры

Процедура СинхронизироватьОтменуИПометкуУдаленияДокумента() Экспорт
	
	Если ПометкаУдаления Тогда
		Canceled = Истина;	
	Иначе
		
		// Снимем статус Отменен, если снимается пометка на удаление
		Если НЕ ЭтоНовый() Тогда
			
			ПометкаУдаленияДоЗаписи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
			Если ПометкаУдаленияДоЗаписи = Истина Тогда
				Canceled = Ложь;
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзмененияБезДополнительныхДанных(Отказ)
	
	Если ЗначениеЗаполнено(AcceptedBySpecialist)
		И CustomsСервер.ЭтоImportExportTracker() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change Export request, as it is already Accepted by export specialist!
			|Please, contact " + СокрЛП(ExportSpecialist) + " to submit changes.",
			ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ)
	     		
	ПроверитьDomesticOBSentToTMS(Отказ);
	
	ПроверитьInternationalOBSentToTMS(Отказ);
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		
		ТекстОшибок = "'Date' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Дата", , Отказ);	
			
	Иначе
		
		Если Дата > ТекущаяДата() Тогда
			ТекстОшибок = "'Date' can not be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Дата", , Отказ);
		КонецЕсли;
		
		Если Дата < СамаяРанняяДата Тогда 
			ТекстОшибок = "'Date' can not be earlier than """ + Формат(СамаяРанняяДата, "ДЛФ=D") + """";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Дата", , Отказ);
		КонецЕсли;
				
	КонецЕсли;
	
	// From country
	Если НЕ ЗначениеЗаполнено(FromCountry) Тогда
		ТекстОшибок = "'From country' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "FromCountry", , Отказ);
	КонецЕсли;
	
	// Есть такой случай сабмита как загрузка из e-mail или из TMS
	// В этом случае мы делаем проверки на стороне загрузки, а не на стороне документа
	// Поэтому если в документе какие-то проверки не проходят - мы все равно должны отразить его как Submitted
	Если ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
	
	// Segment
    Если НЕ ЗначениеЗаполнено(Segment) Тогда
		ТекстОшибок = "'Segment' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Segment", , Отказ);
	Иначе
		
		//S-I-0001512
		// Segment, not Sub segment
		//Если ЗначениеЗаполнено(РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Segment, "Родитель")) Тогда 
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"Select Segment, not Sub segment!",
		//		ЭтотОбъект, "Segment", , Отказ);
		//КонецЕсли;			
					
	КонецЕсли;
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
	Если НЕ ЗначениеЗаполнено(AgreementNumber) И CustomUnionTransaction Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено поле '№ соглашения'!",
			ЭтотОбъект, "AgreementNumber", , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Agreement number' is empty!",
			ЭтотОбъект, "AgreementNumber", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(AgreementDate) И CustomUnionTransaction Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено поле 'Дата соглашения'!",
			ЭтотОбъект, "AgreementDate", , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Agreement date' is empty!",
			ЭтотОбъект, "AgreementDate", , Отказ);
		КонецЕсли;
	КонецЕсли;
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
	
	// Export purpose
	Если НЕ ЗначениеЗаполнено(ExportPurpose) Тогда		
		ТекстОшибок = "'Export purpose' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ExportPurpose", , Отказ);				
	КонецЕсли;

	ПроверитьSubmittedБезДополнительныхДанных(Отказ);
	
	ПроверитьAcceptedБезДополнительныхДанных(Отказ);
	
	ПроверитьLocalDeliveryБезДополнительныхДанных(Отказ);
	
	ПроверитьCustomsБезДополнительныхДанных(Отказ);
	
	ПроверитьInternationalDeliveryБезДополнительныхДанных(Отказ);
	
КонецПроцедуры

Функция ToTMS()
	
	Возврат Документы.ExportRequest.ПолучитьExportDomesticOBToTMS(Company, Submitted, LocalMOT, BORG, CustomUnionTransaction)
		ИЛИ Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG, CreationDate);	
	
КонецФункции

Процедура ПроверитьSubmittedБезДополнительныхДанных(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Submitted) Тогда
		Возврат;
	КонецЕсли;
	
	// Есть такой случай сабмита как загрузка из e-mail или из TMS
	// В этом случае мы делаем проверки на стороне загрузки, а не на стороне документа
	// Поэтому если в документе какие-то проверки не проходят - мы все равно должны отразить его как Submitted
	Если ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
				
	// Company
	Если НЕ ЗначениеЗаполнено(Company) Тогда
		
		ТекстОшибок = "'Company' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Company", , Отказ);	
			
	Иначе
		
		// Parent company.Country vs From country
		Если ЗначениеЗаполнено(FromCountry) Тогда
			
			ParentCompanyCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Company, "Country");
			Если ParentCompanyCountry <> FromCountry Тогда
				ТекстОшибок = "Country '" + СокрЛП(ParentCompanyCountry) + "' of Parent company '" + СокрЛП(Company) + "' differs from From country '" + СокрЛП(FromCountry) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "Company", , Отказ);
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;
			
	// From legal entity
	Если НЕ ЗначениеЗаполнено(FromLegalEntity) Тогда
		
		Если ToTMS() Тогда
			ТекстОшибок = "'From legal entity' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "FromLegalEntity", , Отказ);			
		КонецЕсли;
		
	Иначе
		
		// From legal entity.Parent company vs Parent company
		FromLegalEntityParentCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(FromLegalEntity, "ParentCompany");
		Если FromLegalEntityParentCompany <> Company Тогда	
			ТекстОшибок = "Parent company '" + СокрЛП(FromLegalEntityParentCompany) + "' of 'From legal entity' differs from Parent company '" + СокрЛП(Company) + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "FromLegalEntity", , Отказ);	
		КонецЕсли;
		
		Если ToTMS() И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(FromLegalEntity, "InTMS") Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'From legal entity' is not in TMS!
				|Choose 'From legal entity' that is in TMS.",
				ЭтотОбъект, "FromLegalEntity", , Отказ);			
		КонецЕсли;
						
	КонецЕсли;
	
	
	// AU
	Если НЕ ЗначениеЗаполнено(AU) Тогда
		ТекстОшибок = "'AU' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "AU", , Отказ);
	Иначе
		
		// AU.Segment vs Segment
		Если ЗначениеЗаполнено(Segment) Тогда
			
			AUSegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(AU, "Segment"); 
			Если AUSegment <> Segment Тогда
				ТекстОшибок = "Segment '" + СокрЛП(AUSegment) + "' in AU differs from Segment in Export request!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "AU", , Отказ);
			КонецЕсли;
				
 		КонецЕсли;
			
	КонецЕсли;
	
	// Activity
	Если НЕ ЗначениеЗаполнено(Activity) Тогда
		ТекстОшибок = "'Activity' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Activity", , Отказ);
	КонецЕсли;
	         		
	// Export purpose description
	Если ExportPurpose = Справочники.ExportPurposes.Other И НЕ ЗначениеЗаполнено(ExportPurposeDescription) Тогда	
		ТекстОшибок = "'Purpose description' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ExportPurposeDescription", , Отказ);		
	КонецЕсли;
	
	// Urgency         				
	Если НЕ ЗначениеЗаполнено(Urgency) Тогда	
		ТекстОшибок = "'Urgency' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Urgency", , Отказ); 									
	КонецЕсли;
	
	// Urgency comment
	Если ЗначениеЗаполнено(Urgency) И Urgency <> Перечисления.Urgencies.Standard И НЕ ЗначениеЗаполнено(UrgencyComment) Тогда 		
		ТекстОшибок = "'Urgency comment' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "UrgencyComment", , Отказ);		
	КонецЕсли; 		
	
	// Emeregency approved by
	Если Urgency = Перечисления.Urgencies.Emergency Тогда
		
		Если НЕ ЗначениеЗаполнено(EmergencyApprovedBy) Тогда
			
			ТекстОшибок = "'Emergency approved by' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "EmergencyApprovedBy", , Отказ);
				
		Иначе
			
			// Approved by
			Если СтрДлина(EmergencyApprovedBy) < 3 Тогда
				ТекстОшибок = "'Approved by' must be at least 3 characters long!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "EmergencyApprovedBy", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Required delivery date
	Если НЕ ЗначениеЗаполнено(RequiredDeliveryDate) Тогда
		
		ТекстОшибок = "'Required delivery date' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "RequiredDeliveryDate", , Отказ);
			
	Иначе
	
		Если RequiredDeliveryDate < Submitted + 3 * 24 * 60 * 60 Тогда 
			ТекстОшибок = "'Required delivery date' can not be earlier than 3 days after 'Submitted date'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "RequiredDeliveryDate", , Отказ);
		КонецЕсли;
		
		Если RequiredDeliveryDate < ReadyToShipDate + 1 * 24 * 60 * 60 Тогда
			ТекстОшибок = "'Required delivery date' can not be earlier than 1 day after 'Ready to ship date'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "RequiredDeliveryDate", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
	// Pick Up
	Если НЕ ЗначениеЗаполнено(PickUpWarehouse) Тогда
		
		ТекстОшибок = "'Pick up warehouse' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpWarehouse", , Отказ);
			
	Иначе
		
		// Pick up warhouse.RCA country vs From country
		Если PickUpWarehouse <> Справочники.Warehouses.Other И ЗначениеЗаполнено(FromCountry) Тогда
			
			PickUpWarehouseRCACountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PickUpWarehouse, "RCACountry");
			Если PickUpWarehouseRCACountry <> FromCountry Тогда
				ТекстОшибок = "RCA country '" + СокрЛП(PickUpWarehouseRCACountry) + "' of Warehouse '" + СокрЛП(PickUpWarehouse) + "' differs from From country '" + СокрЛП(FromCountry) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "PickUpWarehouse", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверки для TMS
		Если ToTMS() И PickUpWarehouse <> Справочники.Warehouses.Other
			И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PickUpWarehouse, "InTMS") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Pick up warehouse' is not in TMS!
				|Choose 'Pick up warehouse' that is in TMS.",
				ЭтотОбъект, "PickUpWarehouse", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Pick up from address
	Если PickUpWarehouse = Справочники.Warehouses.Other И НЕ ЗначениеЗаполнено(PickUpFromAddress) Тогда
		ТекстОшибок = "'Pick up from address' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpFromAddress", , Отказ);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(PickUpFromContact) Тогда
		ТекстОшибок = "'Pick up from contact' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpFromContact", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(PickUpFromPhone) Тогда
		ТекстОшибок = "'Pick up from phone' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpFromPhone", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(PickUpFromEmail) Тогда
		ТекстОшибок = "'Pick up from e-mail' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpFromEmail", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ReadyToShipDate) Тогда
		ТекстОшибок = "'Ready to ship' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ReadyToShipDate", , Отказ);		
	КонецЕсли;
	
	// Ready to ship date
	Если ЗначениеЗаполнено(ReadyToShipDate) Тогда
			
		Если ReadyToShipDate < СамаяРанняяДата Тогда 
			ТекстОшибок = "'Ready to ship' can not be earlier than '" + Формат(СамаяРанняяДата, "ДЛФ=D") + "'";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "ReadyToShipDate", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
	// Consignee
	Если НЕ ЗначениеЗаполнено(Consignee) Тогда
		
		ТекстОшибок = """Consignee"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Consignee", , Отказ);
			
	Иначе
			
		Если ToTMS() И Consignee <> Справочники.Warehouses.Other
			И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Consignee, "InTMS") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Consignee' is not in TMS!
				|Choose 'Consignee' that is in TMS.",
				ЭтотОбъект, "Consignee", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Consignee company
	Если Consignee = Справочники.Warehouses.Other И НЕ ЗначениеЗаполнено(ConsigneeCompany) Тогда
		ТекстОшибок = """Consignee company"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ConsigneeCompany", , Отказ);
	КонецЕсли;
		
	// Consignee address		
	Если Consignee = Справочники.Warehouses.Other И НЕ ЗначениеЗаполнено(ConsigneeAddress) Тогда
		ТекстОшибок = """Consignee address"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ConsigneeAddress", , Отказ);
	КонецЕсли;
		
	// Consignee contact	
	Если НЕ ЗначениеЗаполнено(ConsigneeContact) Тогда
		ТекстОшибок = """Consignee contact"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ConsigneeContact", , Отказ);
	КонецЕсли;
	
	// Consignee phone
	Если НЕ ЗначениеЗаполнено(ConsigneePhone) Тогда
		ТекстОшибок = """Consignee phone"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ConsigneePhone", , Отказ);
	КонецЕсли;
	
	// Consignee e-mail
	Если НЕ ЗначениеЗаполнено(ConsigneeEmail) Тогда
		ТекстОшибок = """Consignee e-mail"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ConsigneeEmail", , Отказ);
	КонецЕсли;	
	
	// Deliver-to 	
	Если НЕ ЗначениеЗаполнено(DeliverTo) Тогда
		
		ТекстОшибок = """Deliver-to"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverTo", , Отказ);
			
	Иначе
		
		Если Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG, CreationDate)
			И DeliverTo <> Справочники.Warehouses.Other
			И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(DeliverTo, "InTMS") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Deliver-to' is not in TMS!
				|Choose 'Deliver-to' that is in TMS.",
				ЭтотОбъект, "DeliverTo", , Отказ);
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Deliver-to company
	Если DeliverTo = Справочники.Warehouses.Other И НЕ ЗначениеЗаполнено(DeliverToCompany) Тогда
		ТекстОшибок = """Deliver-to company"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverToCompany", , Отказ);
	КонецЕсли;	
	
	// Deliver-to address
	Если DeliverTo = Справочники.Warehouses.Other И НЕ ЗначениеЗаполнено(DeliverToAddress) Тогда
		ТекстОшибок = """Deliver-to address"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverToAddress", , Отказ);
	КонецЕсли;
	
	// Deliver-to contact
	Если НЕ ЗначениеЗаполнено(DeliverToContact) Тогда
		ТекстОшибок = """Deliver-to contact"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverToContact", , Отказ);
	КонецЕсли;
	
	// Deliver-to phone
	Если НЕ ЗначениеЗаполнено(DeliverToPhone) Тогда
		ТекстОшибок = """Deliver-to phone"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverToPhone", , Отказ);
	КонецЕсли;
	
	// Deliver-to e-mail
	Если НЕ ЗначениеЗаполнено(DeliverToEmail) Тогда
		ТекстОшибок = """Deliver-to e-mail"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverToEmail", , Отказ);
	КонецЕсли;
	
	// Recharge-to legal entity
	Если НЕ ЗначениеЗаполнено(RechargeToLegalEntity) Тогда
	
		Если Recharge Тогда
			ТекстОшибок = "'Recharge to legal entity' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "RechargeToLegalEntity", , Отказ);
		КонецЕсли;
		
	Иначе
		
		Если ToTMS() И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(RechargeToLegalEntity, "InTMS") Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Recharge to legal entity' is not in TMS!
				|Choose 'Recharge to legal entity' that is in TMS.",
				ЭтотОбъект, "RechargeToLegalEntity", , Отказ);
			
		КонецЕсли;
	
	КонецЕсли;

	// Recharge-to AU
	Если НЕ ЗначениеЗаполнено(RechargeToAU) Тогда
	
		Если Recharge Тогда
			ТекстОшибок = "'Recharge to AU' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "RechargeToAU", , Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
	// Recharge-to Activity
	Если НЕ ЗначениеЗаполнено(RechargeToActivity) Тогда
	
		Если Recharge Тогда
			ТекстОшибок = "'Recharge to activity' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "RechargeToActivity", , Отказ);	
		КонецЕсли;
		
	КонецЕсли;
	
	// Involved party locations
	Для Каждого СтрокаТЧ Из OtherInvolvedLocations Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.LocationQualifier) Тогда
			
			ТекстОшибок = "Involved party locations: line " + СтрокаТЧ.НомерСтроки + ": Location qualifier is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "OtherInvolvedLocations[" + (СтрокаТЧ.НомерСтроки-1) + "].LocationQualifier", , Отказ);
			
		КонецЕсли;
		
		// Строки с пустым location id будут удалены автоматически
		
	КонецЦикла;

	// Involved party contacts
	Для Каждого СтрокаТЧ Из OtherInvolvedContacts Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ContactQualifier) Тогда
			
			ТекстОшибок = "Involved party contacts: line " + СтрокаТЧ.НомерСтроки + ": Contact qualifier is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "OtherInvolvedContacts[" + (СтрокаТЧ.НомерСтроки-1) + "].ContactQualifier", , Отказ);
			
		КонецЕсли;
		
	// Строки с пустым contact id будут удалены автоматически
		
	КонецЦикла;
	
	Если Submitted > ТекущаяДата() Тогда
		ТекстОшибок = """Submitted"" can not be later than the current date!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Submitted", , Отказ);
	КонецЕсли;
	
	Если Submitted < СамаяРанняяДата Тогда 
		ТекстОшибок = """Submitted"" can not be earlier than """ + Формат(СамаяРанняяДата, "ДЛФ=D") + """";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Submitted", , Отказ);
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Submitter) Тогда
		ТекстОшибок = """Submitter"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Submitter", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьAcceptedБезДополнительныхДанных(Отказ)
	
	Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
		Возврат;
	КонецЕсли;
		
	// Accepted by specialist
	Если Не ЗначениеЗаполнено(Submitted) Тогда   
         ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Submitted"" is empty!",
			ЭтотОбъект, "Submitted", , Отказ);
    КонецЕсли;
	
	Если AcceptedBySpecialist < Submitted Тогда 
		ТекстОшибок = """Accepted by specialist"" can't be earlier than ""Submitted""!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
	КонецЕсли;
	
	Если AcceptedBySpecialist > ТекущаяДата() Тогда
		ТекстОшибок = """Accepted by specialist"" can not be later than the current date!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
	КонецЕсли;
	
	// BORG
	Если Не ЗначениеЗаполнено(BORG) Тогда
		

		Если ProcessLevel <> Справочники.ProcessLevels.AZ
			И ProcessLevel <> Справочники.ProcessLevels.KZ
			И ProcessLevel <> Справочники.ProcessLevels.TM
			// { RGS AArsentev 18.07.2017 S-I-0003557
			И СокрЛП(Company) <> "TCS-MI-RU" Тогда
			// } RGS AArsentev 18.07.2017 S-I-0003557
			
			ТекстОшибок = """BORG"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "BORG", , Отказ);
				
		КонецЕсли;
		
	иначе	
		
		Если СокрЛП(Company) <> "SLI-SMI RU" Тогда
			
			// BORG.Parent company vs Parent company	
			Если ЗначениеЗаполнено(Company) Тогда
			
				BORGParentCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(BORG, "Компания");
				Если BORGParentCompany <> Company Тогда
					ТекстОшибок = "Parent company '" + СокрЛП(BORGParentCompany) + " of BORG '" + СокрЛП(BORG) + "' differs from Parent company '" + СокрЛП(Company) + "'!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибок,
						ЭтотОбъект, "BORG", , Отказ);
				КонецЕсли;
					
			КонецЕсли;
			
			// BORG.Segment vs Segment
			Если ЗначениеЗаполнено(Segment) Тогда 
				
				BORGSegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(BORG, "Segment");
				Если BORGSegment <> Segment Тогда
					ТекстОшибок = "Segment '" + СокрЛП(BORGSegment) + "' in BORG differs from Segment in Export request!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибок,
						ЭтотОбъект, "BORG", , Отказ);
				КонецЕсли;
					
		 	КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

	// Export specialist
	Если Не ЗначениеЗаполнено(ExportSpecialist) Тогда   
	     ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Export specialist"" is empty!",
			ЭтотОбъект, "ExportSpecialist", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ShipperContact) Тогда   
	     ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Specialist (SLS RCA)"" is empty!",
			ЭтотОбъект, "ShipperContact", , Отказ);
	КонецЕсли;
	
	// Export mode
	Если НЕ ЗначениеЗаполнено(ExportMode) Тогда
		ТекстОшибок = """Export mode"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "ExportMode", , Отказ);
	КонецЕсли;
	
	// Pick up warehouse
	Если PickUpWarehouse = Справочники.Warehouses.Other Тогда
		ТекстОшибок = "You can not use ""Other"" pick up warehouse!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PickUpWarehouse", , Отказ);	
	КонецЕсли;
	
	// Shipper
	Если НЕ ЗначениеЗаполнено(Shipper) Тогда	
		
		ТекстОшибок = "'Shipper' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Shipper", , Отказ);
			
	Иначе
		
		// Shipper.Parent company vs Parent company
		Если ЗначениеЗаполнено(Company) Тогда
		
			ShipperParentCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Shipper, "Владелец");
			Если ShipperParentCompany <> Company Тогда 
				ТекстОшибок = "Parent company '" + СокрЛП(ShipperParentCompany) + "' of Shipper '" + СокрЛП(Shipper) + "' differs from Parent company '" + СокрЛП(Company) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "Shipper", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
	
		Если ToTMS() И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Shipper, "InTMS") Тогда		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Shipper' is not in TMS!
				|Choose 'Shipper' that is in TMS.",
				ЭтотОбъект, "Shipper", , Отказ);		
		КонецЕсли;
				
	КонецЕсли;
	
	//// Shipper contact
	//Если НЕ ЗначениеЗаполнено(ShipperContact) Тогда
	//	
	//	// Раньше у нас было 3 реквизита: Shipper contact, shipper phone, shipper e-mail
	//	// Теперь это 1 справочник
	//	// Будем требовать его заполнения для новых документов (в которых хотя бы один из старых реквизитов пустой)
	//	Если (НЕ ЗначениеЗаполнено(ArchiveShipperContact)
	//		ИЛИ НЕ ЗначениеЗаполнено(ArchiveShipperPhone)
	//		ИЛИ НЕ ЗначениеЗаполнено(ArchiveShipperEmail)) Тогда
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			"'Shipper contact' is empty!",
	//			ЭтотОбъект, "ShipperContact", , Отказ);
	//			
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
	// Shipper.Country vs From country
	Если ЗначениеЗаполнено(ShipperContact) И ЗначениеЗаполнено(FromCountry) 
		И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ShipperContact, "AllowDifferenceInCountries") Тогда
		
		ShipperContactCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ShipperContact, "Country");
		Если ShipperContactCountry <> FromCountry Тогда
			ТекстОшибок = "Country '" + СокрЛП(ShipperContactCountry) + "' of Shipper contact '" + СокрЛП(ShipperContact) + "' differs from From country '" + СокрЛП(FromCountry) + "'!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "Shipper", , Отказ);	
		КонецЕсли;
		
	КонецЕсли;
		
	//// Shipper.InTMS vs ToTMS
	//Если ToTMS() И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ShipperContact, "InTMS") Тогда		
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"'Shipper contact' is not in TMS!
	//		|Choose 'Shipper contact' that is in TMS.",
	//		ЭтотОбъект, "ShipperContact", , Отказ);
	//КонецЕсли;
	
	
	// Consignee
	Если Consignee = Справочники.Warehouses.Other Тогда	
		ТекстОшибок = "You can not use ""Other"" consignee!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Consignee", , Отказ);	
	КонецЕсли;

	// Deliver-to
	Если DeliverTo = Справочники.Warehouses.Other Тогда	
		ТекстОшибок = "You can not use ""Other"" deliver-to!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "DeliverTo", , Отказ);	
	КонецЕсли;
	
	// POA
	Если НЕ ЗначениеЗаполнено(POA) Тогда
		ТекстОшибок = """POA"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "POA", , Отказ);	
	КонецЕсли;
	
	// Incoterms
	Если CustomUnionTransaction И НЕ ЗначениеЗаполнено(Incoterms) Тогда
		ТекстОшибок = """Incoterms"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Incoterms", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьLocalDeliveryБезДополнительныхДанных(Отказ)
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	// { RGS DKazanskiy 08.10.2018 13:49:02 - S-I-0005759
	//// Local freight requested
	//Если ЗначениеЗаполнено(УдалитьLocalFreightRequested) Тогда 
	//	
	//	Если НЕ ЗначениеЗаполнено(Submitted) Тогда
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			"""Submitted"" is empty!
	//			|You can not request local freight quotes before submission.",
	//			ЭтотОбъект, "Submitted", , Отказ);
	//			
	//	
	//			
		//ИначеЕсли УдалитьLocalFreightRequested < Submitted Тогда 
		//		
		//	ТекстОшибок = """Local freight requested"" can't be earlier than ""Submitted""!";
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстОшибок,
		//		ЭтотОбъект, "LocalFreightRequested", , Отказ);
		//			
		//ИначеЕсли УдалитьLocalFreightRequested > ТекущаяДата() Тогда 
		//	
		//	ТекстОшибок = """Local freight requested"" can't be later than the current date!";
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		ТекстОшибок,
		//		ЭтотОбъект, "LocalFreightRequested", , Отказ);
	//	
	//			
	//	
	//	КонецЕсли;
	//	
	//КонецЕсли;

	
	//// Local freight received
	//Если ЗначениеЗаполнено(УдалитьLocalFreightReceived) Тогда 
	//	
	//	Если НЕ ЗначениеЗаполнено(УдалитьLocalFreightRequested) Тогда
	//		
	//		ТекстОшибок = """Local freight requested"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightRequested", , Отказ);
	//			
	//	ИначеЕсли УдалитьLocalFreightReceived < УдалитьLocalFreightRequested Тогда
	//			
	//		ТекстОшибок = """Local freight received"" can't be earlier than ""Local freight requested""!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightReceived", , Отказ);
	//			
	//	ИначеЕсли УдалитьLocalFreightReceived > ТекущаяДата() Тогда
	//			
	//		ТекстОшибок = """Local freight received"" can't be later than the current date!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightReceived", , Отказ);
	//			
	//	КонецЕсли;
	//	      				
	//КонецЕсли;
	// } RGS DKazanskiy 08.10.2018 13:49:16 - S-I-0005759
	
	//// Local freight submitted for approval
	//Если ЗначениеЗаполнено(LocalFreightSubmittedForApproval) Тогда 
		
		//Если НЕ ЗначениеЗаполнено(LocalFreightReceived) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local freight received"" is empty!",
		//		ЭтотОбъект, "LocalFreightReceived", , Отказ);	
		//		
		//ИначеЕсли LocalFreightSubmittedForApproval < LocalFreightReceived Тогда 
		//		
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local freight submitted for approval"" can't be earlier than ""Local freight received""!",
		//		ЭтотОбъект, "LocalFreightSubmittedForApproval", , Отказ);
		//		
		//ИначеЕсли LocalFreightSubmittedForApproval > ТекущаяДата() Тогда 
		//		
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local freight submitted for approval"" can't be later than the current date!",
		//		ЭтотОбъект, "LocalFreightSubmittedForApproval", , Отказ);
		//		
		//КонецЕсли;
				
	//КонецЕсли;
	
	// { RGS DKazanskiy 08.10.2018 13:49:02 - S-I-0005759
	//// Local freight approved		
	//Если ЗначениеЗаполнено(УдалитьLocalFreightApproved) Тогда 
	//	
	//	//Если НЕ ЗначениеЗаполнено(LocalFreightSubmittedForApproval) Тогда
	//	//	
	//	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	//		"""Local freight submitted for approval"" is empty!",
	//	//		ЭтотОбъект, "LocalFreightSubmittedForApproval", , Отказ);
	//	//
	//	//ИначеЕсли LocalFreightApproved < LocalFreightSubmittedForApproval Тогда 
	//	//	
	//	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	//		"""Local freight approved"" can not be earlier than ""Local freight submitted for approval""!",
	//	//		ЭтотОбъект, "LocalFreightApproved", , Отказ);

	//	Если НЕ ЗначениеЗаполнено(УдалитьLocalFreightReceived) Тогда
	//		
	//		ТекстОшибок = """Local freight received"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightReceived", , Отказ);
	//			
	//	КонецЕсли;
	//					
	//	Если УдалитьLocalFreightApproved > ТекущаяДата() Тогда 
	//			
	//		ТекстОшибок = """Local freight approved"" can not be later than the current date!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightApproved", , Отказ);
	//				
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(LocalWarehouseTo) Тогда
	//		
	//		ТекстОшибок = "'Local warehouse to' is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalWarehouseTo", , Отказ);
	//		
	//	КонецЕсли;

	//	Если Не ЗначениеЗаполнено(LocalFreightProvider) Тогда
	//		
	//		ТекстОшибок = """Local freight provider"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalFreightProvider", , Отказ);	
	//			
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(LocalMOT) Тогда
	//		
	//		ТекстОшибок = """Local MOT"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalMOT", , Отказ);
	//			
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(LocalWarehouseTo) Тогда
	//		
	//		ТекстОшибок = "'Local warehouse to' is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "LocalWarehouseTo", , Отказ);
	//		
	//	КонецЕсли;

	//КонецЕсли;
	
	// } RGS DKazanskiy 08.10.2018 13:49:02 - S-I-0005759
	
	// Local warehouse to
	Если ЗначениеЗаполнено(LocalWarehouseTo) Тогда
				
		// Local warhouse.RCA country vs From country
		Если ЗначениеЗаполнено(FromCountry) Тогда
			
			LocalWarehouseToRCACountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(LocalWarehouseTo, "RCACountry");
			Если LocalWarehouseToRCACountry <> FromCountry Тогда
				ТекстОшибок = "RCA country '" + СокрЛП(LocalWarehouseToRCACountry) + "' of Warehouse '" + СокрЛП(LocalWarehouseTo) + "' differs from From country '" + СокрЛП(FromCountry) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "LocalWarehouseTo", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверки для TMS
		Если Документы.ExportRequest.ПолучитьExportDomesticOBToTMS(Company, Submitted, LocalMOT, BORG, CustomUnionTransaction)
			И НЕ РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(LocalWarehouseTo, "InTMS") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Local warehouse to' is not in TMS!
				|Choose 'Local warehouse to' that is in TMS.",
				ЭтотОбъект, "LocalWarehouseTo", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УдалитьLocalETD) Тогда
		
		Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Accepted by specialist"" is empty!
				|You can not plan departure from local warehouse before acception.",
				ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
			
		//ИначеЕсли LocalETD < AcceptedBySpecialist Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local ETD"" can not be earlier than ""Accepted by specialist""!",
		//		ЭтотОбъект, "LocalETD", , Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(LocalWarehouseTo) Тогда
			
			ТекстОшибок = "'Local warehouse to' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalWarehouseTo", , Отказ);
			
		КонецЕсли;
		
		Если УдалитьLocalETD < УдалитьLocalFreightReceived Тогда
			
			ТекстОшибок = """Local ETD"" can not be earlier than ""Local freight received""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalETD", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(LocalATD) Тогда 
		
		Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Accepted by specialist"" is empty!
				|You can not take cargo out from local warehouse before acception.",
				ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
			
		//ИначеЕсли LocalATD < AcceptedBySpecialist Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local ATD"" can not be earlier than ""Accepted by specialist""!",
		//		ЭтотОбъект, "LocalATD", , Отказ);
			
		КонецЕсли;
		
		Если LocalATD < УдалитьLocalFreightReceived Тогда 
			ТекстОшибок = """Local ATD"" can not be earlier than ""Local freight received""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalATD", , Отказ);
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(ActualAvailabilityDate) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Actual availability date"" is empty!",
		//		ЭтотОбъект, "ActualAvailabilityDate", , Отказ);
		//	
		//ИначеЕсли LocalATD < ActualAvailabilityDate Тогда
		//		
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Local ATD"" can not be earlier than ""Actual availability date""!",
		//		ЭтотОбъект, "LocalATD", , Отказ);
		//		
		//КонецЕсли;

		Если LocalATD > ТекущаяДата() Тогда 
				
			ТекстОшибок = """Local ATD"" can not be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalATD", , Отказ);
				
		КонецЕсли;
						
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УдалитьLocalETA) Тогда
		
		Если НЕ ЗначениеЗаполнено(УдалитьLocalETD) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Local ETD"" is empty!
				|You can not plan local arrival before you plan local departure.",
				ЭтотОбъект, "LocalETA", , Отказ);
			
		ИначеЕсли УдалитьLocalETA < УдалитьLocalETD Тогда
			
			ТекстОшибок = """Local ETA"" can not be earlier than ""Local ETD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalETA", , Отказ);
			
		КонецЕсли;
		
		Если УдалитьLocalETA < УдалитьLocalFreightReceived Тогда 
			
			ТекстОшибок = """Local ETA"" can not be earlier than ""Local freight received""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalETA", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(LocalATA) Тогда 
		
		Если Не ЗначениеЗаполнено(LocalATD) Тогда 	
			
			ТекстОшибок = """Local ATD"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalATD", , Отказ);
				
		ИначеЕсли LocalATA < LocalATD Тогда 
				
			ТекстОшибок = """Local ATA"" can not be earlier than ""Local ATD""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalATA", , Отказ);
				
		ИначеЕсли LocalATA > ТекущаяДата() Тогда 
				
			ТекстОшибок = """Local ATA"" can not be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalATA", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(LocalWB) Тогда
			
			ТекстОшибок = """Local WB"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "LocalWB", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(LocalFreightSum) И НЕ ЗначениеЗаполнено(LocalFreightCurrency) Тогда
		
		ТекстОшибок = """Local freight currency"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "LocalFreightCurrency", , Отказ);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьCustomsБезДополнительныхДанных(Отказ)
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	Если НЕ CustomUnionTransaction Тогда
	// } RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	
		// CCA requested
		Если ЗначениеЗаполнено(CCAGLRequested) Тогда

			Если НЕ ЗначениеЗаполнено(Submitted) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"'Submitted' is empty!
					|You can not request CCA GL before submission.",
					ЭтотОбъект, "Submitted", , Отказ);
				
			ИначеЕсли CCAGLRequested < Submitted Тогда 
					
				ТекстОшибок = "'CCA GL requested' can not be earlier than 'Submitted'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCAGLRequested", , Отказ);
						
			ИначеЕсли CCAGLRequested > ТекущаяДата() Тогда 
					
				ТекстОшибок = "'CCA GL requested' can not be later than the current date!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCAGLRequested", , Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
	
	// { RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	КонецЕсли;
	// } RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	
	// { RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	Если НЕ CustomUnionTransaction Тогда
	// } RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	
	// CCA received
	Если ЗначениеЗаполнено(CCAGLReceived) Тогда  
		
			Если НЕ ЗначениеЗаполнено(CCAGLRequested) Тогда
				
				ТекстОшибок = "'CCA GL requested' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCAGLRequested", , Отказ);
					
			ИначеЕсли CCAGLReceived < CCAGLRequested Тогда 
					
				ТекстОшибок = "'CCA GL received' can't be earlier than 'CCA GL requested'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCAGLReceived", , Отказ);
					
			ИначеЕсли CCAGLReceived > ТекущаяДата() Тогда 
					
				ТекстОшибок = "'CCA GL received' can not be later than the current date!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCAGLReceived", , Отказ);
					
			КонецЕсли;
					
			Если НЕ ЗначениеЗаполнено(CCA) Тогда
				
				ТекстОшибок = "'CCA' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "CCA", , Отказ);
					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(InternationalMOT) Тогда
				
				ТекстОшибок = "'Int. MOT' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "InternationalMOT", , Отказ);
					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Incoterms) Тогда
				
				ТекстОшибок = """Incoterms"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "Incoterms", , Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
	
	// { RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	КонецЕсли;
	// } RGS AFokin 21.11.2018 23:59:59 - S-I-0006306
	
	// { RGS DKazanskiy 09.10.2018 10:24:41 - S-I-0005759
	// Fumigation done
	//Если ЗначениеЗаполнено(УдалитьFumigationDone) Тогда
	//	
	//	Если НЕ ЗначениеЗаполнено(FumigationRequired) Тогда
	//		
	//		ТекстОшибок = """Fumigation required"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "FumigationRequired",, Отказ);
	//			
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(УдалитьFumigationCertificateRequired) Тогда
	//		
	//		ТекстОшибок = """Fumigation certificate required"" is empty!";
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
	//		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстОшибок,
	//			ЭтотОбъект, "FumigationCertificateRequired",, Отказ);
	//			
	//	КонецЕсли;
	//	
	//	Если УдалитьFumigationDone > ТекущаяДата() Тогда
	//		
	//		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			"""Fumigation done"" can not be later than the current date!",
	//			ЭтотОбъект, "FumigationDone", , Отказ);
	//			
	//	КонецЕсли;
	//	
	//КонецЕсли;
	// } RGS DKazanskiy 09.10.2018 10:24:51 - S-I-0005759
	
	// Permits requested
	Если ЗначениеЗаполнено(PermitsRequested) Тогда
		
		Если НЕ ЗначениеЗаполнено(PermitsRequired) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Permits required"" is empty!",
				ЭтотОбъект, "PermitsRequired",, Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(CCAGLRequested) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""CCA GL requested"" is empty!
				|You can not request permits before CCA GL request.",
				ЭтотОбъект, "PermitsRequested",, Отказ);
			
		ИначеЕсли PermitsRequested < CCAGLRequested Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Permits requested"" can not be earlier than ""CCA GL requested""!",
				ЭтотОбъект, "PermitsRequested",, Отказ);
				
		ИначеЕсли PermitsRequested > ТекущаяДата() Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Permits requested"" can not be later than the current date!",
				ЭтотОбъект, "PermitsRequested",, Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Permits obtained
	Если ЗначениеЗаполнено(PermitsObtained) Тогда
		
		//Если НЕ ЗначениеЗаполнено(PermitsRequested) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Permits requested"" is empty!",
		//		ЭтотОбъект, "PermitsRequested",, Отказ);
		//		
		//ИначеЕсли PermitsObtained < PermitsRequested Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Permits obtained"" can not be earlier than ""Permits requested""!",
		//		ЭтотОбъект, "PermitsObtained",, Отказ);
		//
		//КонецЕсли;
		 			
		Если PermitsObtained > ТекущаяДата() Тогда
				
			ТекстОшибок = """Permits obtained"" can not be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "PermitsObtained",, Отказ);
				
		КонецЕсли;
		
	КонецЕсли;	
	
	// Consignee GL requested
	Если ЗначениеЗаполнено(ConsigneeGLRequested) Тогда
		
		Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Accepted by specialist"" is empty
				|You can not requested GL from consignee before acception.",
				ЭтотОбъект, "ConsigneeGLRequested", , Отказ);
			
		//ИначеЕсли ConsigneeGLRequested < AcceptedBySpecialist Тогда
		//	
		//	 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Consignee GL requested"" can not be erlier than ""Accepted by specialist""!",
		//		ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
				
		ИначеЕсли ConsigneeGLRequested > ТекущаяДата() Тогда
				
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Consignee GL requested"" can not be later than the current date!",
				ЭтотОбъект, "ConsigneeGLRequested", , Отказ);
				
		КонецЕсли;
		      				
		Если Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG, CreationDate)
			И Не InternationalOBSentToTMS И Не ЗначениеЗаполнено(ConsigneeGLReceived) 
			//И Не ЗначениеЗаполнено(ShippingInvoiceReady) 
			И Не CustomUnionTransaction Тогда
			Сообщить("Reminder: 
			|Send Int. OB to TMS before Consignee GL received!");
		КонецЕсли;

	КонецЕсли;
	
	// Consignee GL received
	Если ЗначениеЗаполнено(ConsigneeGLReceived) Тогда	
		
		Если Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG, CreationDate)
			И Не InternationalOBSentToTMS И Не CustomUnionTransaction тогда
			
			Сообщить("Send Int. OB to TMS before Consignee GL received!");
			Отказ = Истина;	
		
		Иначе

			Если Не ЗначениеЗаполнено(ConsigneeGLRequested) Тогда 
				
				ТекстОшибок = """Consignee GL requested"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "ConsigneeGLRequested", , Отказ);	
					
			ИначеЕсли ConsigneeGLReceived < ConsigneeGLRequested Тогда
					
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"""Consignee GL received"" can not be earlier than ""Consignee GL requested""!",
					ЭтотОбъект, "ConsigneeGLReceived", , Отказ);
					
			ИначеЕсли ConsigneeGLReceived > ТекущаяДата() Тогда
					
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"""Consignee GL received"" can not be later than the current date!",
					ЭтотОбъект, "ConsigneeGLReceived", , Отказ);
					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(FumigationRequired) Тогда
				
				ТекстОшибок = """Fumigation required"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "FumigationRequired", , Отказ);
					
			КонецЕсли;
			
			// { RGS DKazanskiy 09.10.2018 10:24:51 - S-I-0005759
			//Если НЕ ЗначениеЗаполнено(УдалитьFumigationCertificateRequired) Тогда
			//	
			//	ТекстОшибок = """Fumigation cert. required"" is empty!";
			//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			//	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//		ТекстОшибок,
			//		ЭтотОбъект, "FumigationCertificateRequired", , Отказ);
			//		
			//КонецЕсли;
			// } RGS DKazanskiy 09.10.2018 10:24:51 - S-I-0005759
			
			Если НЕ ЗначениеЗаполнено(PermitsRequired) Тогда
				
				ТекстОшибок = """Permits required"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "PermitsRequired", , Отказ);
					
			КонецЕсли;
			     					
			Если НЕ CustomUnionTransaction И НЕ ЗначениеЗаполнено(POD) Тогда
				
				ТекстОшибок = "'POD' is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "POD", , Отказ);
					
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЕсли;
	
	//// Shipping invoice ready
	//Если ЗначениеЗаполнено(ShippingInvoiceReady) Тогда
		
		//Если Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG)
		//	И Не InternationalOBSentToTMS тогда
		//	
		//	Сообщить("Send Int. OB to TMS before Shipping invoice ready!");
		//	Отказ = Истина;	
		//
		//	Иначе
				//
				//Если Не ЗначениеЗаполнено(ConsigneeGLReceived) Тогда 
				//
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//		"""Consignee GL received"" is empty!",
				//		ЭтотОбъект, "ConsigneeGLReceived", , Отказ);
				//		
				//ИначеЕсли ShippingInvoiceReady < CCAGLReceived Тогда
				//		
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//		"""Shipping invoice ready"" can not be erlier than ""CCA GL received""!",
				//		ЭтотОбъект, "ShippingInvoiceReady", , Отказ);
				//	
				//ИначеЕсли ShippingInvoiceReady > ТекущаяДата() Тогда 
				//		
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//		"""Shipping invoice ready"" can not be later than the current date!",
				//		ЭтотОбъект, "ShippingInvoiceReady", , Отказ);
						
				//КонецЕсли;
			
		//КонецЕсли;
		
	//КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьInternationalDeliveryБезДополнительныхДанных(Отказ)
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	
	// International freight requested
	Если ЗначениеЗаполнено(InternationalFreightRequested) Тогда 

		Если НЕ ЗначениеЗаполнено(Submitted) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Submitted"" is empty!
				|You can not request int. freight quotes before submission.",
				ЭтотОбъект, "InternationalFreightRequested", , Отказ);
				
		ИначеЕсли InternationalFreightRequested < Submitted Тогда 
				
			ТекстОшибок = """Int. freight requested"" can not be earlier than ""Submitted""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightRequested", , Отказ);
				
		ИначеЕсли InternationalFreightRequested > ТекущаяДата() Тогда 
				
			ТекстОшибок = """Int. freight requested"" can't be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightRequested", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// International freight received
	Если ЗначениеЗаполнено(InternationalFreightReceived) Тогда  
		
		Если НЕ ЗначениеЗаполнено(InternationalFreightRequested) Тогда
			
			ТекстОшибок = """Int. freight requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightRequested", , Отказ);
				
		ИначеЕсли InternationalFreightReceived < InternationalFreightRequested Тогда
				
			ТекстОшибок = """Int. freight received"" can not be earlier than ""Int. freight requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightReceived", , Отказ);
				
		ИначеЕсли InternationalFreightReceived > ТекущаяДата() Тогда
				
			ТекстОшибок = """Int. freight received"" can not be later than the current date!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightReceived", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// International freight submitted for approval
	Если ЗначениеЗаполнено(InternationalFreightSubmittedForApproval) Тогда  
		
		
		//Если НЕ ЗначениеЗаполнено(InternationalFreightReceived) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Int. freight received"" is empty!",
		//		ЭтотОбъект, "InternationalFreightReceived", , Отказ);
		//		
		//ИначеЕсли InternationalFreightSubmittedForApproval < InternationalFreightReceived Тогда
		//		
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Int. freight submitted for approval"" can not be earlier than ""Int. freight received""!",
		//		ЭтотОбъект, "InternationalFreightSubmittedForApproval", , Отказ);
		//		
		//ИначеЕсли InternationalFreightSubmittedForApproval > ТекущаяДата() Тогда
		//		
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Int. freight submitted for approval"" can not be later than the current date!",
		//		ЭтотОбъект, "InternationalFreightSubmittedForApproval", , Отказ);
		//		
		//КонецЕсли;
		 				
	КонецЕсли;
	
	// International freight approved
	Если ЗначениеЗаполнено(InternationalFreightApproved) Тогда  
		
		// { RGS DKazanskiy 15.10.2018 10:15:21 - S-I-0005759
		Если НЕ ЗначениеЗаполнено(InternationalFreightSum) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Int. freight"" is empty!",
				ЭтотОбъект, "InternationalFreightSum", , Отказ);	
		КонецЕсли;
		// } RGS DKazanskiy 15.10.2018 10:15:21 - S-I-0005759
		
		//Если НЕ ЗначениеЗаполнено(InternationalFreightSubmittedForApproval) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Int. freight submitted for approval"" is empty!",
		//		ЭтотОбъект, "InternationalFreightSubmittedForApproval", , Отказ);
		//		
		//ИначеЕсли InternationalFreightApproved < InternationalFreightSubmittedForApproval Тогда
		//		
		//	 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		"""Int. freight approved"" can not be earlier than ""Int. freight submitted for approval""!",
		//		ЭтотОбъект, "InternationalFreightApproved", , Отказ);
		//
		//КонецЕсли;
		
		Если InternationalFreightApproved > ТекущаяДата() Тогда
				
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Int. freight approved"" can not be later than the current date!",
				ЭтотОбъект, "InternationalFreightApproved", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(InternationalFreightReceived) Тогда
			
			ТекстОшибок = """Int. freight received"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightReceived", , Отказ);
				
		КонецЕсли;
		
		Если НЕ CustomUnionTransaction И НЕ ЗначениеЗаполнено(POD) Тогда
			
			ТекстОшибок = """POD"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "POD", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(InternationalMOT) Тогда
			
			ТекстОшибок = "'Int. MOT' is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalMOT", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(POA) Тогда
			
			ТекстОшибок = """POA"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "POA", , Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(InternationalFreightProvider) Тогда
			
			ТекстОшибок = """Int. freight provider"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "InternationalFreightProvider", , Отказ);
				
		КонецЕсли;
			
		// { RGS DKazanskiy 15.10.2018 10:15:21 - S-I-0005759
		Если СтрНайти(Строка(CCA.Код), "DHL") = 0 И НЕ ЗначениеЗаполнено(TessNo) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Tess no."" is empty!",
				ЭтотОбъект, "TessNo", , Отказ);	
		КонецЕсли;
		// } RGS DKazanskiy 15.10.2018 10:15:21 - S-I-0005759
		
	// { RGS ASeryakov, 26.11.2018 16:14:52 S-I-0006322
	ИначеЕсли НЕ ЗначениеЗаполнено(InternationalFreightApproved) И НЕ ЭтоНовый() Тогда
		ТекстОшибок = """Int. freight approved"" is empty!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибок,
		ЭтотОбъект, "InternationalFreightApproved", , Отказ);
		
	// } RGS ASeryakov 26.11.2018 16:15:06 S-I-0006322
	КонецЕсли; // Если ЗначениеЗаполнено(InternationalFreightApproved)
	
	Если ЗначениеЗаполнено(InternationalFreightSum) И НЕ ЗначениеЗаполнено(InternationalFreightCurrency) Тогда
		
		ТекстОшибок = """Int. freight currency"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "InternationalFreightCurrency", , Отказ);
		
		КонецЕсли;	
		
	
КонецПроцедуры

Процедура ПроверитьDomesticOBSentToTMS(Отказ)
	
	Если НЕ DomesticOBSentToTMS Тогда
		Возврат;
	КонецЕсли;
	      					
	Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда	
		ТекстОшибок = "Export request can be sent to TMS only after acceptance by specialist!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "AcceptedBySpecialist", , Отказ);
	КонецЕсли;
	
	Если НЕ Документы.ExportRequest.ПолучитьExportDomesticOBToTMS(Company, Submitted, LocalMOT, BORG, CustomUnionTransaction) Тогда	
		Сообщить("Export to TMS is not used for Parent company '" + СокрЛП(Company) + "' or Local MOT '" + СокрЛП(LocalMOT) + "'!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(LocalWarehouseTo) Тогда		
		ТекстОшибок = "'Local warehouse to' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "LocalWarehouseTo", , Отказ);			
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(PayingEntity) Тогда	
		ТекстОшибок = "Paying entity is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PayingEntity", , Отказ);
	КонецЕсли;
		   	          	
КонецПроцедуры

Процедура ПроверитьInternationalOBSentToTMS(Отказ)
	
	Если НЕ InternationalOBSentToTMS Тогда
		Возврат;
	КонецЕсли;
	     			 	
	Если НЕ Документы.ExportRequest.ПолучитьExportInternationalOBToTMS(FromCountry, Company, Submitted, InternationalMOT, InternationalFreightProvider, Incoterms, BORG, CreationDate) Тогда	
		Сообщить("Export to TMS is not used for Parent company '" + СокрЛП(Company) + "' or Int. MOT '" + СокрЛП(InternationalMOT) + "'!");
		Отказ = Истина;	
	КонецЕсли;
	
	Если НЕ CustomUnionTransaction И НЕ ЗначениеЗаполнено(CCAGLReceived) Тогда	
		ТекстОшибок = "Export request can be sent to TMS only after CCA GL received!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "CCAGLReceived", , Отказ);
	КонецЕсли;
 	        		
	Если НЕ CustomUnionTransaction И НЕ ЗначениеЗаполнено(РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(POD, "TMSID")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'POD' is not in TMS!
			|Choose POD that is in TMS or ask support team to add this POD to TMS.",
			ЭтотОбъект, "POD", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(PayingEntity) Тогда	
		ТекстОшибок = "Paying entity is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "PayingEntity", , Отказ);
	КонецЕсли;
		
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью()
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если НЕ ЭтоНовый() Тогда
		
		СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			|	ExportRequests.Ссылка,
			|	ExportRequests.ПометкаУдаления,
			|	ExportRequests.Номер,
			|	ExportRequests.Дата,
			|	ExportRequests.Проведен,
			|	ExportRequests.FromCountry,
			|	ExportRequests.Segment,
			|	ExportRequests.BORG,
			|	ExportRequests.AU,
			|	ExportRequests.Activity,
			|	ExportRequests.ExternalReference,
			|	ExportRequests.JobNumber,
			|	ExportRequests.ExportPurpose,
			|	ExportRequests.ExportPurposeDescription,
			|	ExportRequests.ExportMode,
			|	ExportRequests.DualUse,
			|	ExportRequests.Urgency,
			|	ExportRequests.UrgencyComment,
			|	ExportRequests.RequiredDeliveryDate,
			|	ExportRequests.EmergencyApprovedBy,
			|	ExportRequests.ReadyToShipDate,
			|	ExportRequests.ActualAvailabilityDate,
			|	ExportRequests.PickUpWarehouse,
			|	ExportRequests.PickUpFromAddress,
			|	ExportRequests.PickUpFromContact,
			|	ExportRequests.PickUpFromPhone,
			|	ExportRequests.PickUpFromEmail,
			|	ExportRequests.Company,
			|	ExportRequests.FromLegalEntity,
			|	ExportRequests.Shipper,
			|	ExportRequests.ShipperContact,
			|	ExportRequests.Consignee,
			|	ExportRequests.ConsigneeCompany,
			|	ExportRequests.ConsigneeAddress,
			|	ExportRequests.ConsigneeContact,
			|	ExportRequests.ConsigneePhone,
			|	ExportRequests.ConsigneeEmail,
			|	ExportRequests.DeliverTo,
			|	ExportRequests.DeliverToCompany,
			|	ExportRequests.DeliverToAddress,
			|	ExportRequests.DeliverToContact,
			|	ExportRequests.DeliverToPhone,
			|	ExportRequests.DeliverToEmail,
			|	ExportRequests.Recharge,
			|	ExportRequests.RechargeToLegalEntity,
			|	ExportRequests.RechargeToAU,
			|	ExportRequests.RechargeToActivity,
			|	ExportRequests.Submitted,
			|	ExportRequests.Submitter,
			|	ExportRequests.AcceptedBySpecialist,
			|	ExportRequests.ExportSpecialist,
			|	ExportRequests.TransitionalCountry,
			|	ExportRequests.Comments,
			// { RGS DKazanskiy 09.10.2018 13:22:51 - S-I-0005759
			|	ExportRequests.TessNo,
			//|	ExportRequests.LocalFreightRequested,
			//|	ExportRequests.LocalFreightReceived,
			//|	ExportRequests.LocalETD,
			//|	ExportRequests.LocalFreightApproved,
			//|	ExportRequests.LocalETA,
			//|	ExportRequests.FumigationCertificateRequired,
			//|	ExportRequests.FumigationDone,		
			|	ExportRequests.PermitsRequested,
			|	ExportRequests.PermitsObtained,
			|	ExportRequests.City,
			|	ExportRequests.ExportContract,
			// } RGS DKazanskiy 09.10.2018 13:23:03 - S-I-0005759
			|	ExportRequests.LocalFreightSubmittedForApproval,
			|	ExportRequests.LocalFreightProvider,
			|	ExportRequests.LocalWarehouseTo,
			|	ExportRequests.LocalMOT,
			|	ExportRequests.LocalWB,			
			|	ExportRequests.LocalATD,			
			|	ExportRequests.LocalATA,
			|	ExportRequests.DomesticOBSentToTMS,
			|	ExportRequests.CCAGLRequested,
			|	ExportRequests.CCAGLReceived,
			|	ExportRequests.CCA,
			|	ExportRequests.SourceDocsAvailable,
			|	ExportRequests.PermitsRequired,			
			|	ExportRequests.FumigationRequired,			
			|	ExportRequests.Incoterms,
			|	ExportRequests.ConsigneeGLRequested,
			|	ExportRequests.ConsigneeGLReceived,
			|	ExportRequests.ShippingInvoiceReady,
			|	ExportRequests.InternationalFreightRequested,
			|	ExportRequests.InternationalFreightReceived,
			|	ExportRequests.InternationalFreightSubmittedForApproval,
			|	ExportRequests.InternationalFreightApproved,
			|	ExportRequests.InternationalFreightProvider,
			|	ExportRequests.POD,
			|	ExportRequests.POA,
			|	ExportRequests.InternationalMOT,
			|	ExportRequests.InternationalOBSentToTMS,
			|	ExportRequests.Canceled,
			|	ExportRequests.SpecialistComments,
			|	ExportRequests.SourceEmailUID,
			|	ExportRequests.SourceEMail,
			|	ExportRequests.PayingEntity,
			|	StagesOfExportRequests.Stage,
			|	ExportRequests.LocalFreightSum,
			|	ExportRequests.LocalFreightCurrency,
			|	ExportRequests.InternationalFreightSum,
			|	ExportRequests.InternationalFreightCurrency,
			|	ExportRequests.CustomUnionTransaction,
			// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
			|	ExportRequests.AgreementNumber,
			|	ExportRequests.AgreementDate,
			|	ExportRequests.SpecificationNumber,
			|	ExportRequests.SpecificationDate,
			// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
			|	ExportRequests.ExportControl
			|ИЗ
			|	Документ.ExportRequest КАК ExportRequests
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.StagesOfExportRequests КАК StagesOfExportRequests
			|		ПО ExportRequests.Ссылка = StagesOfExportRequests.ExportRequest
			|ГДЕ
			|	ExportRequests.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("СтарыеOtherInvolvedLocations",
			"ВЫБРАТЬ
			|	OtherInvolvedLocations.LocationQualifier,
			|	OtherInvolvedLocations.LocationId
			|ИЗ
			|	Документ.ExportRequest.OtherInvolvedLocations КАК OtherInvolvedLocations
			|ГДЕ
			|	OtherInvolvedLocations.Ссылка = &Ссылка");

		СтруктураТекстов.Вставить("СтарыеOtherInvolvedContacts",
			"ВЫБРАТЬ
			|	OtherInvolvedContacts.ContactQualifier,
			|	OtherInvolvedContacts.ContactId
			|ИЗ
			|	Документ.ExportRequest.OtherInvolvedContacts КАК OtherInvolvedContacts
			|ГДЕ
			|	OtherInvolvedContacts.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("РеквизитыItems",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК Item,
			|	Items.SoldTo,
			|	Items.КостЦентр КАК AU,
			|	Items.Активити КАК Activity,
			|	Items.RAN,
			|	Items.Количество КАК Qty,
			|	Items.ЕдиницаИзмерения,
			|	Items.NetWeight,
			|	Items.WeightUOM,
			|	Items.WeightUOM.TMSId КАК WeightUOMTMSId,
			|	СУММА(ParcelsItems.Qty) КАК QtyInParcels,
			|	СУММА(ParcelsItems.NetWeight) КАК NetWeightInParcels,
			|	Items.Final,
			|	Items.PermanentTemporary,
			|	Items.PSA,
			|	Items.СтранаПроисхождения,
			|	Items.Классификатор,
			|	Items.СерийныйНомер
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsItems
			|		ПО Items.Ссылка = ParcelsItems.СтрокаИнвойса
			|			И (НЕ ParcelsItems.Ссылка.Отменен)
			|ГДЕ
			|	Items.ExportRequest = &Ссылка
			|	И НЕ Items.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	Items.Ссылка,
			|	Items.SoldTo,
			|	Items.КостЦентр,
			|	Items.Активити,
			|	Items.RAN,
			|	Items.Количество,
			|	Items.ЕдиницаИзмерения,
			|	Items.NetWeight,
			|	Items.WeightUOM,
			|	Items.Final,
			|	Items.PermanentTemporary,
			|	Items.WeightUOM.TMSId,
			|	Items.PSA,
			|	Items.СтранаПроисхождения,
			|	Items.Классификатор,
			|	Items.СерийныйНомер");
			
		СтруктураТекстов.Вставить("РеквизитыParcels",
			"ВЫБРАТЬ
			|	Parcels.Ссылка КАК Parcel,
			|	Parcels.DIMsUOM.TMSId КАК DIMsUOMTMSId,
			|	Parcels.WeightUOM.TMSId КАК WeightUOMTMSId,
			|	Parcels.Проверен КАК Final
			|ИЗ
			|	Справочник.Parcels КАК Parcels
			|ГДЕ
			|	Parcels.ExportRequest = &Ссылка
			|	И НЕ Parcels.Отменен");	
			
		СтруктураТекстов.Вставить("РеквизитыParcelsLines",
			"ВЫБРАТЬ
			|	ParcelsДетали.Ссылка КАК Parcel,
			|	ParcelsДетали.NetWeight,
			|	ParcelsДетали.НомерСтроки
			|ИЗ
			|	Справочник.Parcels.Детали КАК ParcelsДетали
			|ГДЕ
			|	ParcelsДетали.Ссылка.ExportRequest = &Ссылка
			|	И НЕ ParcelsДетали.Ссылка.Отменен");
			
		СтруктураТекстов.Вставить("РеквизитыExportShipment",
			"ВЫБРАТЬ
			|	ExportShipmentExportRequests.Ссылка.SubmittedToCustoms КАК SubmittedToCustoms,
			|	ExportShipmentExportRequests.Ссылка.ReleasedFromCustoms КАК ReleasedFromCustoms,
			|	ExportShipmentExportRequests.Ссылка.InternationalATD КАК InternationalATD,
			|	ExportShipmentExportRequests.Ссылка.InternationalATA КАК InternationalATA,
			|	ExportShipmentExportRequests.Ссылка.Проведен КАК Проведен,
			|	ExportShipmentExportRequests.Ссылка КАК Shipment,
			|	ЕСТЬNULL(ЗакрытиеПоставки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗакрытиеПоставки.ПустаяСсылка)) КАК InvoiceLinesMatching,
			|	ЕСТЬNULL(ЗакрытиеПоставки.Проведен, ЛОЖЬ) КАК InvoiceLinesMatchingПроведен
			|ИЗ
			|	Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки КАК ЗакрытиеПоставки
			|		ПО ExportShipmentExportRequests.Ссылка = ЗакрытиеПоставки.Поставка
			|			И (НЕ ЗакрытиеПоставки.ПометкаУдаления)
			|ГДЕ
			|	ExportShipmentExportRequests.ExportRequest = &Ссылка
			|	И НЕ ExportShipmentExportRequests.Ссылка.ПометкаУдаления");
			
			Если Документы.ExportRequest.OFSStoreTransactionsRequired(Segment, ExportPurpose) Тогда 
				
				СтруктураПараметров.Вставить("OFSStoreTransactions", OFSStoreTransactions.ВыгрузитьКолонку("TransactionID"));
				
				СтруктураТекстов.Вставить("РеквизитыOFSStoreTransactions",
					"ВЫБРАТЬ
					|	OFSStoreTransactions.Код КАК PartNumber,
					|	OFSStoreTransactions.Родитель.Код КАК TransactionID
					|ИЗ
					|	Справочник.OFSStoreTransactions КАК OFSStoreTransactions
					|ГДЕ
					|	OFSStoreTransactions.Родитель В(&OFSStoreTransactions)");
					
					СтруктураТекстов.Вставить("ItemsPartNumbers",
					"ВЫБРАТЬ
					|	Items.КодПоИнвойсу КАК PartNumber
					|ИЗ
					|	Справочник.СтрокиИнвойса КАК Items
					|ГДЕ
					|	Items.ExportRequest = &Ссылка");

				СтруктураТекстов.Вставить("TransactionsInOtherER",
					"ВЫБРАТЬ
					|	ExportRequestOFSStoreTransactions.Ссылка.Номер КАК ExportRequest,
					|	ExportRequestOFSStoreTransactions.TransactionID
					|ИЗ
					|	Документ.ExportRequest.OFSStoreTransactions КАК ExportRequestOFSStoreTransactions
					|ГДЕ
					|	ExportRequestOFSStoreTransactions.TransactionID В(&OFSStoreTransactions)
					|	И ExportRequestOFSStoreTransactions.Ссылка <> &Ссылка");
					
			КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Submitted) Тогда 
		
		СтруктураПараметров.Вставить("Company", Company);
		СтруктураПараметров.Вставить("AU", AU);
		
		СтруктураТекстов.Вставить("AUsLegalEntities",
			"ВЫБРАТЬ
			|	ЕСТЬNULL(AUsAndLegalEntitiesСрезПоследних.LegalEntity, """") КАК LegalEntity,
			|	SoldTo.Leg7LegalEntityDetermining КАК LegalEntityDetermining
			|ИЗ
			|	Справочник.SoldTo КАК SoldTo
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities.СрезПоследних(
			|				,
			|				ParentCompany = &Company
			|					И AU = &AU) КАК AUsAndLegalEntitiesСрезПоследних
			|		ПО SoldTo.Ссылка = AUsAndLegalEntitiesСрезПоследних.ParentCompany
			|			И (AUsAndLegalEntitiesСрезПоследних.AU = &AU)
			|ГДЕ
			|	SoldTo.Ссылка = &Company");
			
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать(); 
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыхOtherInvolvedLocations", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеOtherInvolvedLocations") Тогда
		ДополнительныеСвойства.ТаблицаСтарыхOtherInvolvedLocations = СтруктураРезультатов.СтарыеOtherInvolvedLocations.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыхOtherInvolvedContacts", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеOtherInvolvedContacts") Тогда
		ДополнительныеСвойства.ТаблицаСтарыхOtherInvolvedContacts = СтруктураРезультатов.СтарыеOtherInvolvedContacts.Выгрузить();
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItems") Тогда
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыParcels") Тогда
		ДополнительныеСвойства.ТаблицаParcels = СтруктураРезультатов.РеквизитыParcels.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаParcelsLines", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыParcelsLines") Тогда
		ДополнительныеСвойства.ТаблицаParcelsLines = СтруктураРезультатов.РеквизитыParcelsLines.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовExportShipment", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыExportShipment") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовExportShipment = СтруктураРезультатов.РеквизитыExportShipment.Выбрать(); 
		ДополнительныеСвойства.ВыборкаРеквизитовExportShipment.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаAUsLegalEntities", Неопределено);
	Если СтруктураРезультатов.Свойство("AUsLegalEntities") Тогда
		ДополнительныеСвойства.ВыборкаAUsLegalEntities = СтруктураРезультатов.AUsLegalEntities.Выбрать(); 
		ДополнительныеСвойства.ВыборкаAUsLegalEntities.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаOFSStoreTransactions", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыOFSStoreTransactions") Тогда
		ДополнительныеСвойства.ТаблицаOFSStoreTransactions = СтруктураРезультатов.РеквизитыOFSStoreTransactions.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаTransactionsInOtherER", Неопределено);
	Если СтруктураРезультатов.Свойство("TransactionsInOtherER") Тогда
		ДополнительныеСвойства.ТаблицаTransactionsInOtherER = СтруктураРезультатов.TransactionsInOtherER.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItemsPartNumbers", Неопределено);
	Если СтруктураРезультатов.Свойство("ItemsPartNumbers") Тогда
		ДополнительныеСвойства.ТаблицаItemsPartNumbers = СтруктураРезультатов.ItemsPartNumbers.Выгрузить();
	КонецЕсли;

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовExportShipment)
	
	//// Заполним Actual availability date, если нужно
	//Если ВыборкаСтарыхРеквизитовШапки = Неопределено 
	//	ИЛИ ActualAvailabilityDate = ВыборкаСтарыхРеквизитовШапки.ReadyToShipDate Тогда
	//	РГСофтКлиентСервер.УстановитьЗначение(ActualAvailabilityDate, ReadyToShipDate);
	//КонецЕсли;
	
	//// Обновим Process level, если изменился Export specialist
	//Если ЗначениеЗаполнено(ProcessLevel) И ВыборкаСтарыхРеквизитовШапки <> Неопределено
	//	И ЗначениеЗаполнено(ExportSpecialist) И ExportSpecialist <> ВыборкаСтарыхРеквизитовШапки.ExportSpecialist Тогда
	//	ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ExportSpecialist, "ProcessLevel");
	//КонецЕсли;
	
	// Заполним Process level, если можем
	Если НЕ ЗначениеЗаполнено(ProcessLevel) И ЗначениеЗаполнено(ExportSpecialist) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ExportSpecialist, "ProcessLevel");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) И ЗначениеЗаполнено(PickUpWarehouse) И PickUpWarehouse <> Справочники.Warehouses.Other Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(PickUpWarehouse, "ProcessLevel");
	КонецЕсли;
		
	// Обновим Pending days
	InternationalATD = Неопределено;
	Если ВыборкаРеквизитовExportShipment <> Неопределено 
		И ЗначениеЗаполнено(ВыборкаРеквизитовExportShipment.InternationalATD) Тогда
		InternationalATD = ВыборкаРеквизитовExportShipment.InternationalATD;
	КонецЕсли;
	РГСофтКлиентСервер.УстановитьЗначение(PendingDays, ImportExportСервер.ПолучитьExportRequestPendingDays(AcceptedBySpecialist, InternationalATD)); 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзмененияСДополнительнымиДанными(Отказ, ВыборкаСтарыхРеквизитовШапки, 
	ВыборкаРеквизитовExportShipment, ВыборкаAUsLegalEntities)
	     
	Если ЗначениеЗаполнено(Submitted)
		И Не ДополнительныеСвойства.Свойство("LoadingFromEmail") И НЕ ДополнительныеСвойства.Свойство("LoadingFromTMS")
		И ВыборкаAUsLegalEntities.LegalEntityDetermining = Перечисления.Leg7LegalEntityDetermining.FiscalRegistration Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаAUsLegalEntities.LegalEntity) Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"For AU '" + СокрЛП(AU) + "' Legal entity is not determined!
				|Please contact riet-support@slb.com",
				ЭтотОбъект.AU, , , Отказ);
			
		ИначеЕсли ВыборкаAUsLegalEntities.LegalEntity <> FromLegalEntity Тогда 
		
			ТекстОшибок = "For AU '" + СокрЛП(AU) + "' Legal entity '" + СокрЛП(ВыборкаAUsLegalEntities.LegalEntity) + "' is determined!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект.AU, , , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыборкаРеквизитовExportShipment = Неопределено 
		ИЛИ Не ЗначениеЗаполнено(ВыборкаРеквизитовExportShipment.Shipment) Тогда 
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 04.04.2014 1:45:23 - S-I-0000518
	Если ИзменилисьТолькоНесущественныеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	// } RGS AGorlenko 04.04.2014 1:45:24 - S-I-0000518
	
	Если ЗначениеЗаполнено(ВыборкаРеквизитовExportShipment.InternationalATA)
		И ВыборкаРеквизитовExportShipment.Проведен Тогда
		
		ТекстОшибок = "You can not change Export request, because it is already delivered to destination!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, , , Отказ);
			
		Возврат;
		
	КонецЕсли;
	
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.CCA)
		И ВыборкаСтарыхРеквизитовШапки.CCA <> CCA
		И ВыборкаРеквизитовExportShipment.Проведен Тогда 
		
		ТекстОшибок = "CCA can not be changed, because '" + ВыборкаРеквизитовExportShipment.Shipment + "' is posted!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, , , Отказ);
			
	КонецЕсли;
	
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И (ВыборкаСтарыхРеквизитовШапки.LocalFreightSum <> LocalFreightSum
		ИЛИ ВыборкаСтарыхРеквизитовШапки.LocalFreightCurrency <> LocalFreightCurrency)
		И ВыборкаРеквизитовExportShipment.InvoiceLinesMatchingПроведен Тогда 
		
		ТекстОшибок = "Local freight sum and currency can not be changed, because '" + ВыборкаРеквизитовExportShipment.InvoiceLinesMatching + "' is posted!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, , , Отказ);
			
	КонецЕсли;

	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И (ВыборкаСтарыхРеквизитовШапки.InternationalFreightSum <> InternationalFreightSum
		ИЛИ ВыборкаСтарыхРеквизитовШапки.InternationalFreightCurrency <> InternationalFreightCurrency)
		И ВыборкаРеквизитовExportShipment.InvoiceLinesMatchingПроведен Тогда 
		
		ТекстОшибок = "Int. freight sum and currency can not be changed, because '" + ВыборкаРеквизитовExportShipment.InvoiceLinesMatching + "' is posted!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, , , Отказ);
			
	КонецЕсли;

КонецПроцедуры

// { RGS AGorlenko 21.03.2014 18:39:35 - S-I-0000518
Функция ИзменилисьТолькоНесущественныеРеквизиты()
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ЭтотОбъект);
	
	//проверяем неизменность всех ТЧ
	СписокТЧ = Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//проверяем изменились ли только несущественные реквизиты
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	МассивНесущественныхРеквизитов = Новый Массив;
	МассивНесущественныхРеквизитов.Добавить("SpecialistComments");
	МассивНесущественныхРеквизитов.Добавить("ModifiedBy");
	МассивНесущественныхРеквизитов.Добавить("ModificationDate");
	
	Для каждого НесущественныйРеквизит Из МассивНесущественныхРеквизитов Цикл
		Индекс = ИзмененныеРеквизиты.Найти(НесущественныйРеквизит);
		Если Индекс <> Неопределено Тогда
			ИзмененныеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмененныеРеквизиты.Количество() = 0;
	
КонецФункции
// } RGS AGorlenko 21.03.2014 18:39:37 - S-I-0000518

/////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ)
	
	ПроверитьОсновныеРеквизитыСДополнительнымиДанными(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
		
	ПроверитьItemsСДополнительнымиДанными(Отказ, ДополнительныеСвойства.ТаблицаItems);
		
	ПроверитьParcelsСДополнительнымиДанными(Отказ, ДополнительныеСвойства.ТаблицаParcels, ДополнительныеСвойства.ТаблицаParcelsLines);
				
КонецПроцедуры

// РАСФОРМИРОВАТЬ
Процедура ПроверитьОсновныеРеквизитыСДополнительнымиДанными(Отказ, ВыборкаСтарыхРеквизитовШапки)
	
	// если отменяем реквест а он отправлен в TMS - сообщаем, что реквест будет отменен только в 1с
	// если хотим отправить в TMS отмененный реквест - ругаемся
	Если Canceled тогда 
		
		Если ВыборкаСтарыхРеквизитовШапки = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не ВыборкаСтарыхРеквизитовШапки.Canceled 
			И (InternationalOBSentToTMS ИЛИ DomesticOBSentToTMS) Тогда
			Сообщить("Export request will be cancelled only in 1C, nothing will be changed in TMS.");
			Возврат;
		КонецЕсли;	
		  		
		Если ((Не ВыборкаСтарыхРеквизитовШапки.InternationalOBSentToTMS И InternationalOBSentToTMS) 
			ИЛИ (Не ВыборкаСтарыхРеквизитовШапки.DomesticOBSentToTMS И DomesticOBSentToTMS)) Тогда
			ТекстОшибок = "Return to work Export request!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, , , Отказ);
			Возврат;
		КонецЕсли;
			   				
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
		Возврат;
	КонецЕсли;
	
	// Process level
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ТекстОшибок = "Process level is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, , , Отказ);
	КонецЕсли;
	 		
КонецПроцедуры

Процедура ПроверитьItemsСДополнительнымиДанными(Отказ, ТаблицаItems)
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Submitted) ИЛИ ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
	
	// OFS Store transactions
	OFSStoreTransactionsRequired = Документы.ExportRequest.OFSStoreTransactionsRequired(Segment, ExportPurpose);
	Если OFSStoreTransactionsRequired Тогда 
		
		Если OFSStoreTransactions.Количество() = 0 Тогда
			
			ТекстОшибок = "Add at least one OFS Store transaction!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				ЭтотОбъект, "OFSStoreTransactions", "Объект", Отказ);
			Возврат;
			
		КонецЕсли;
		
		ТаблицаOFSStoreTransactions = ДополнительныеСвойства.ТаблицаOFSStoreTransactions;
		ТаблицаItemsPartNumbers = ДополнительныеСвойства.ТаблицаItemsPartNumbers;
		
		Для Каждого СтрокаOFSStoreTransactions Из ТаблицаOFSStoreTransactions Цикл
			
			Если ТаблицаItemsPartNumbers.Найти(СокрЛП(СтрокаOFSStoreTransactions.PartNumber), "PartNumber") = Неопределено Тогда 
				ТекстОшибок = "Create item with Part number '" + СокрЛП(СтрокаOFSStoreTransactions.PartNumber) + "' OFS Store transaction: '" + СокрЛП(СтрокаOFSStoreTransactions.TransactionID) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "OFSStoreTransactions", "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаTransactionsInOtherER = ДополнительныеСвойства.ТаблицаTransactionsInOtherER;
		
		Для Каждого СтрокаTransactionsInOtherER Из ТаблицаTransactionsInOtherER Цикл
			
				ТекстОшибок = "Non-critical error: Transaction ID '" + СокрЛП(СтрокаTransactionsInOtherER.TransactionID) + "' was already added to : '" + СокрЛП(СтрокаTransactionsInOtherER.ExportRequest) + "'!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект, "OFSStoreTransactions", "Объект");
						
		КонецЦикла;
		
	КонецЕсли;
	
	// Потребуем, чтобы был введен хотя бы один товар
	Если (ЭтоНовый() ИЛИ ТаблицаItems.Количество() = 0) Тогда
		
		ТекстОшибок = "Add at least one Item!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Items", "Объект", Отказ);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
		Справочники.СтрокиИнвойса.ПроверитьExportItem(Отказ, СтрокаТаблицы, Ссылка, ЭтотОбъект, СтрокаТаблицы.Item);
				
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.QtyInParcels) Тогда
			ТекстОшибок = "Put Item '" + СокрЛП(СтрокаТаблицы.Item) + "' in some parcel!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибок,
				СтрокаТаблицы.Item,,, Отказ);
		Иначе
				
			Если СтрокаТаблицы.Qty <> СтрокаТаблицы.QtyInParcels Тогда	
				ТекстОшибок = "" + Формат(СтрокаТаблицы.Qty, "ЧН=0") + " " + СокрЛП(СтрокаТаблицы.ЕдиницаИзмерения) + " of Item '" + СокрЛП(СтрокаТаблицы.Item) + "' differs from " + Формат(СтрокаТаблицы.QtyInParcels, "ЧН=0") + " in parcels!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					СтрокаТаблицы.Item,,, Отказ);	
			КонецЕсли;
	
			Если ЗначениеЗаполнено(СтрокаТаблицы.NetWeight) И СтрокаТаблицы.NetWeight <> СтрокаТаблицы.NetWeightInParcels Тогда	
				ТекстОшибок = "" + Формат(СтрокаТаблицы.NetWeight, "ЧН=0") + " " + СокрЛП(СтрокаТаблицы.WeightUOM) + " of 'Item " + СокрЛП(СтрокаТаблицы.Item) + "' differs from " + Формат(СтрокаТаблицы.NetWeightInParcels, "ЧН=0") + " in parcels!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					СтрокаТаблицы.Item,,, Отказ);	
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;	
			
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура ПроверитьParcelsСДополнительнымиДанными(Отказ, ТаблицаParcels, ТаблицаParcelsLines)
	
	Если Canceled Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Submitted) ИЛИ ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоНовый() ИЛИ ТаблицаParcels.Количество() = 0 Тогда
	
		ТекстОшибок = "Add at least one Parecel!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибок,
			ЭтотОбъект, "Parcels",, Отказ);
		Возврат;	
			
	КонецЕсли;

	СтруктураПоискаParcelsLines = Новый Структура("Parcel");
	
	Для Каждого СтрокаТаблицы Из ТаблицаParcels Цикл
	
		// TMS проверки
		Если ToTMS() Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.DIMsUOMTMSId) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Parcel '" + СокрЛП(СтрокаТаблицы.Parcel) + "': DIMs UOM is not in TMS!
					|Choose DIMs UOM that is in TMS.",
					СтрокаТаблицы.Parcel, "DIMsUOM", , Отказ);
				
			КонецЕсли;
			
			СтруктураПоискаParcelsLines.Parcel = СтрокаТаблицы.Parcel;
			МассивСтрокParcelsLines = ТаблицаParcelsLines.НайтиСтроки(СтруктураПоискаParcelsLines);
			Для Каждого СтрокаParcelsLine из МассивСтрокParcelsLines Цикл 
				
				Если НЕ ЗначениеЗаполнено(СтрокаParcelsLine.NetWeight) Тогда
					ТекстОшибок = "In line " + СтрокаParcelsLine.НомерСтроки + " of Parcel '" + СокрЛП(СтрокаТаблицы.Parcel) + "': Net weight is empty!";
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибок,
						СтрокаТаблицы.Parcel, "Детали.[" + СтрокаParcelsLine.НомерСтроки + "].NetWeight", , Отказ);
					КонецЕсли;
					
			КонецЦикла;
				
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.WeightUOMTMSId) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Parcel '" + СокрЛП(СтрокаТаблицы.Parcel) + "': weight UOM is not in TMS!
					|Choose weight UOM that is in TMS.",
					СтрокаТаблицы.Parcel, "WeightUOM", , Отказ);
				
			КонецЕсли;
			
			// ВЫЗЫВАТЬ ПРОВЕРКИ ЗАПОЛНЕНИЯ ВЫГРУЗКИ В TMS
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, ТаблицаСтарыхOtherInvolvedLocations, ТаблицаСтарыхOtherInvolvedContacts)

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();	
	СтрокаИсключаемыхРеквизитов = "PendingDays, Stage, ProcessLevel, CreatedBy, CreationDate, ModifiedBy, ModificationDate, LoadedFromCBR, ArchiveShipperContact, ArchiveShipperPhone, ArchiveShipperEmail, УДАЛИТЬExportMode, УДАЛИТЬDeliverTo, УДАЛИТЬConsignee, TMSTransOrderGid, LastLogText"; 
	// { RGS DKazanskiy 08.10.2018 16:01:19 - S-I-0005759
	СтрокаИсключаемыхРеквизитов = СтрокаИсключаемыхРеквизитов + ", УдалитьLocalFreightRequested, УдалитьLocalFreightReceived, УдалитьLocalFreightApproved, УдалитьLocalETD, УдалитьLocalETA, УдалитьFumigationCertificateRequired, УдалитьFumigationDone";
	// } RGS DKazanskiy 08.10.2018 16:01:33 - S-I-0005759
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		МетаданныеОбъекта.СтандартныеРеквизиты,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	ТекстИзмененийOtherInvolvedLocations = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		OtherInvolvedLocations,
		ТаблицаСтарыхOtherInvolvedLocations,
		МетаданныеОбъекта.ТабличныеЧасти.OtherInvolvedLocations);	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийOtherInvolvedLocations);

	ТекстИзмененийOtherInvolvedContacts = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		OtherInvolvedContacts,
		ТаблицаСтарыхOtherInvolvedContacts,
		МетаданныеОбъекта.ТабличныеЧасти.OtherInvolvedContacts);	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийOtherInvolvedContacts);
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ExportRequestsLogs.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	
	//{ RGS AArsentev 07.10.2016 10:08:41 - S-I-0001946
	LastLogText = "" + ТекущаяДата() + ", " + СокрЛП(ПараметрыСеанса.ТекущийПользователь) + ": " + СтрЗаменить(ТекстИзменений, Символы.ПС, " ");
	//{ RGS AArsentev 07.10.2016 10:08:41 - S-I-0001946
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыItems(Отказ, ДополнительныеСвойства.ТаблицаItems);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыParcels(Отказ, ДополнительныеСвойства.ТаблицаParcels);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьStage(ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.ВыборкаРеквизитовExportShipment);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьПочтовыеСообщения(Отказ, ДополнительныеСвойства.Stage, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
	
	// S-I-0000713 - terminate transmission of shipment events from 1C to TMS for export domestic and international shipments
	//ЗарегистрироватьTMSLocalExportGateInGateOutEvents();
	
	// { RGS DKazanskiy 03.08.2018 13:25:28 - 
	ТекущаяДата = ТекущаяДата();
	КолВерсий = Документы.ExportRequest.rgsПолучитьКоличествоВерсий(Ссылка);
	Если КолВерсий = Неопределено Тогда
		ЗаписатьПервуюВерсию();
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 13:25:31 - 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ОбновитьРеквизитыItems(Отказ, ТаблицаItems)
	
	Если ТаблицаItems = Неопределено ИЛИ ДополнительныеСвойства.Свойство("LoadingFromEMail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаItems Цикл
		
		Если СтрокаТаблицы.SoldTo <> Company
			ИЛИ СтрокаТаблицы.AU <> AU
			ИЛИ СтрокаТаблицы.Activity <> СокрЛП(Activity)
			ИЛИ СтрокаТаблицы.PermanentTemporary <> ExportMode
			ИЛИ ЗначениеЗаполнено(Submitted) И НЕ Canceled И НЕ СтрокаТаблицы.Final Тогда
			
			ItemОбъект = СтрокаТаблицы.Item.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(Submitted) И НЕ Canceled Тогда
				ItemОбъект.Final = Истина;
			КонецЕсли;
			
			// Остальные реквизиты обновятся автоматически при записи Item
			
			Попытка
				ItemОбъект.Записать();
			Исключение
				ТекстОшибок = "Failed to update ""Item " + СокрЛП(ItemОбъект) + """! See errors above.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ItemОбъект.Ссылка,,, Отказ);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// { RGS DKazanskiy 10.10.2018 16:17:03 - S-I-0005759
Процедура УстановитьЗначениеPermitsRequiredДляExportRequest()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтрокиИнвойса.Ссылка
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.ExportRequest = &ExportRequest
	|	И СтрокиИнвойса.PermitsRequired = ЗНАЧЕНИЕ(Перечисление.YesNo.Yes)";
	
	Запрос.УстановитьПараметр("ExportRequest", Ссылка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		PermitsRequired = Перечисления.YesNo.No;
	Иначе
		PermitsRequired = Перечисления.YesNo.Yes;
	КонецЕсли;
	
КонецПроцедуры
// } RGS DKazanskiy 10.10.2018 16:17:14 - S-I-0005759


/////////////////////////////////////////////////////////////////////////

Процедура ОбновитьРеквизитыParcels(Отказ, ТаблицаParcels)
	
	// Обновляет реквизиты Parcels которые зависят от Export request
	
	Если ТаблицаParcels = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Пока только ставим галочку final на этапе submitted
	
	Если Canceled ИЛИ НЕ ЗначениеЗаполнено(Submitted) ИЛИ ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ТаблицаParcels Цикл
		
		Если НЕ СтрокаТаблицы.Final Тогда
			
			ParcelОбъект = СтрокаТаблицы.Parcel.ПолучитьОбъект();
			ParcelОбъект.Проверен = Истина;
			Попытка
				ParcelОбъект.Записать();
			Исключение
				ТекстОшибок = "Failed to mark ""Parcel " + СокрЛП(ParcelОбъект) + """ as final! See errors above.";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибок, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибок,
					ЭтотОбъект,,, Отказ);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ОбновитьStage(ВыборкаСтарыхРеквизитовШапки, ВыборкаРеквизитовExportShipment)
	
	NewStage = ImportExportСервер.ПолучитьExportRequestStage(ЭтотОбъект, ВыборкаРеквизитовExportShipment);
	ДополнительныеСвойства.Вставить("Stage", NewStage);
	
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И ВыборкаСтарыхРеквизитовШапки.Stage = NewStage Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.StagesOfExportRequests.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ExportRequest = Ссылка;
	МенеджерЗаписи.Stage = NewStage;
	МенеджерЗаписи.ModificationDate = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

Процедура СоздатьПочтовыеСообщения(Отказ, Stage, ВыборкаСтарыхРеквизитовШапки)
	
	// Для черновиков никаких сообщений не отправляем
	Если Stage = Перечисления.ExportStages.Draft ИЛИ ДополнительныеСвойства.Свойство("LoadingFromEmail") ИЛИ ДополнительныеСвойства.Свойство("LoadingFromTMS") Тогда
		Возврат;
	КонецЕсли;
	
	// Далее все делаем в привилегированном режиме, чтобы не заморачиваться с правами доступа.
	УстановитьПривилегированныйРежим(Истина);
	
	Тема = "Update of Export request #" + Номер + ": ";
	
	// Отправим сообщение о том, что export request был отменен или возвращен в работу
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И Canceled <> ВыборкаСтарыхРеквизитовШапки.Canceled Тогда
		
		Если Canceled Тогда
			
			Тема = Тема + "Canceled";
			Тело = "Export request #" + СокрЛП(Номер) + " was canceled by " + ПараметрыСеанса.ТекущийПользователь;
			
		Иначе
			
			Тема = Тема + "Returned to work";
			Тело = "Export request #" + СокрЛП(Номер) + " was returned to work by " + ПараметрыСеанса.ТекущийПользователь;
			
		КонецЕсли;
		Тело = ДобавитьСсылкуНаExportRequest(Тело);
		
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Submitter, "EMail");	
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, Тема, Тело);
		
		Если ЗначениеЗаполнено(ShipperContact) Тогда
			
			EMailТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "EMail");
			EMailShipperContact = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ShipperContact, "EMail");
			
			Если EMailТекущийПользователь <> EMailShipperContact Тогда
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(EMailShipperContact, Тема, Тело);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыборкаСтарыхРеквизитовШапки = Неопределено ИЛИ Stage <> ВыборкаСтарыхРеквизитовШапки.Stage Тогда
		
		Тема = Тема + Stage;
		Тело = "The stage of Export request #" + СокрЛП(Номер) + " was updated to """ + Stage + """";
		Тело = ДобавитьСсылкуНаExportRequest(Тело);
		
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Submitter, "EMail");
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, Тема, Тело);
		
		Если ЗначениеЗаполнено(ShipperContact) Тогда
			
			EMailТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "EMail");
			EMailShipperContact = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ShipperContact, "EMail");
			
			Если EMailТекущийПользователь <> EMailShipperContact Тогда
				
				РГСофт.ЗарегистрироватьПочтовоеСообщение(EMailShipperContact, Тема, Тело);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// Отправим сообщение SLSам по сегменту о том, что export request принят специалистом
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И ProcessLevel = Справочники.ProcessLevels.RUWE
		И AcceptedBySpecialist <> ВыборкаСтарыхРеквизитовШапки.AcceptedBySpecialist Тогда
		
		МассивSLSEmails = Справочники.SLSRCA.ПолучитьМассивSLSEmailsBySegmentProcessLevel(Segment, ProcessLevel);
		Тема = Тема + "Accepted by specialist";
		
		Для Каждого SLSEmail из МассивSLSEmails Цикл 
			
			Если ЗначениеЗаполнено(AcceptedBySpecialist) Тогда
				Тело = "Export request #" + СокрЛП(Номер) + " was accepted by " + ПараметрыСеанса.ТекущийПользователь;
			Иначе
				Тело = "For Export request #" + СокрЛП(Номер) + " date of acceptance was cleared by " + ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;

			Тело = ДобавитьСсылкуНаExportRequest(Тело);
			
			РГСофт.ЗарегистрироватьПочтовоеСообщение(СокрЛП(SLSEmail), Тема, Тело);
					
		КонецЦикла;
		
	КонецЕсли;
	
	ЗарегистрироватьПочтовоеСообщениеOBSentCanceledToTMS(Отказ, ВыборкаСтарыхРеквизитовШапки);

КонецПроцедуры

Процедура ЗарегистрироватьПочтовоеСообщениеOBSentCanceledToTMS(Отказ, ВыборкаСтарыхРеквизитовШапки)
	
	// Отправим сообщение о том, что export request был отправлен в TMS или отправка была отменена
	
	Если ВыборкаСтарыхРеквизитовШапки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Тема = "Update of Export request #" + Номер + ": ";
	
	Если DomesticOBSentToTMS <> ВыборкаСтарыхРеквизитовШапки.DomesticOBSentToTMS Тогда
		
		ShipperContactEmail = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipperContact, "EMail"));
		Тема = Тема + "Domestic OB";
		
		Если DomesticOBSentToTMS Тогда
			Тело = "For Export request #" + СокрЛП(Номер) + " Domestic OB was sent to TMS by " + ПараметрыСеанса.ТекущийПользователь;
		Иначе
			Тело = "For Export request #" + СокрЛП(Номер) + " Domestic OB was canceled in 1C by " + ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Тело = ДобавитьСсылкуНаExportRequest(Тело);
		
		Адрес = ?(ЗначениеЗаполнено(ShipperContactEmail), ShipperContactEmail, ArchiveShipperEmail);
		Если ЗначениеЗаполнено(Адрес) Тогда 
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, Тема, Тело);
		КонецЕсли;
		
	КонецЕсли;
	
	Если InternationalOBSentToTMS <> ВыборкаСтарыхРеквизитовШапки.InternationalOBSentToTMS Тогда
		
		ShipperContactEmail = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ShipperContact, "EMail"));
		Тема = Тема + "International OB";

		Если InternationalOBSentToTMS Тогда
			Тело = "For Export request #" + СокрЛП(Номер) + " International OB was sent to TMS by " + ПараметрыСеанса.ТекущийПользователь;
		Иначе
			Тело = "For Export request #" + СокрЛП(Номер) + " International OB was canceled in 1C by " + ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Тело = ДобавитьСсылкуНаExportRequest(Тело);
		
		Адрес = ?(ЗначениеЗаполнено(ShipperContactEmail), ShipperContactEmail, ArchiveShipperEmail);
		Если ЗначениеЗаполнено(Адрес) Тогда 
			РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, Тема, Тело);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьTMSLocalExportGateInGateOutEvents()
	
	Если НЕ DomesticOBSentToTMS Тогда
		Возврат;
	КонецЕсли;
		
	// Определим значения старых реквизитов	
	СтарыйLocalATD = '00010101';
	СтарыйLocalATA = '00010101';
		
	Если НЕ ПометкаУдаления И ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		СтарыйLocalATD = ВыборкаСтарыхРеквизитовШапки.LocalATD;
		СтарыйLocalATA = ВыборкаСтарыхРеквизитовШапки.LocalATA;
				
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	LocalExportGateInGateOutEventsQueue = РегистрыСведений.LocalExportGateInGateOutEventsQueue;
	GateInGateOutEventsTypes = Перечисления.GateInGateOutEventsTypes;
	          	       		
	LocalExportGateInGateOutEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		GateInGateOutEventsTypes.GateInSource,
		СтарыйLocalATD,
		LocalATD);
		
	LocalExportGateInGateOutEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		GateInGateOutEventsTypes.GateOutSource,
		СтарыйLocalATD,
		LocalATD);
		
	LocalExportGateInGateOutEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		GateInGateOutEventsTypes.GateInDestination,
		СтарыйLocalATA,      
		LocalATA);
		
	LocalExportGateInGateOutEventsQueue.ЗарегистрироватьEventПриНеобходимости(
		Ссылка,
		GateInGateOutEventsTypes.GateOutDestination,
		СтарыйLocalATA,      
		LocalATA);	
			       	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
      
// ДОДЕЛАТЬ
Функция ДобавитьСсылкуНаExportRequest(Текст)
	
	// СДЕЛАТЬ ЧТОБЫ ССЫЛКА РАБОТАЛА!!!
	//НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	//НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
	//ПолнаяСсылка = "http://ru0149app35.dir.slb.com/RIET/#" + НавигационнаяСсылка;
	//HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ПолнаяСсылка + "</a>";
	//Возврат Текст + "<br>
	//	|Link to the request: " + HTMLСсылка;
	
	ПолнаяСсылка = "http://ru0149app35.dir.slb.com/RIET";
	HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ПолнаяСсылка + "</a>";
	Возврат Текст + "<br>
		|Link to the RCA Import / Export tracking: " + HTMLСсылка;
		
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияInternationalFactCosts(Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияInternationalFactCosts(Отказ)
	
	// регистр International Fact Costs   	
	// распределяем суммы по строкам пропорционально стоимости

	УстановитьПривилегированныйРежим(Истина);
	 		
	ДвиженияInternationalFactCosts = Движения.InternationalAndDomesticFactCosts;
	
	ДвиженияInternationalFactCosts.Записывать = Истина;
	ДвиженияInternationalFactCosts.Очистить();
	
	Если Не ЗначениеЗаполнено(InternationalFreightSum) Тогда 
		Возврат;
	КонецЕсли;
	
	СurrencyUSD = Справочники.Валюты.НайтиПоКоду("840");
		
	Если InternationalFreightCurrency = СurrencyUSD тогда
		
		СуммаФрахтUSD = InternationalFreightSum;
		
	иначе
		
		СтруктураСurrency = ОбщегоНазначения.ПолучитьКурсВалюты(InternationalFreightCurrency, Дата);
		СтруктураСurrencyUSD = ОбщегоНазначения.ПолучитьКурсВалюты(СurrencyUSD, Дата);
		
		СуммаФрахтUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(InternationalFreightSum, 
			InternationalFreightCurrency, СurrencyUSD, 
			СтруктураСurrency.Курс, СтруктураСurrencyUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencyUSD.Кратность);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ExportRequest", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиИнвойса.КостЦентр.Geomarket КАК Geomarket,
	               |	СтрокиИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	               |	СтрокиИнвойса.КостЦентр.Segment КАК Segment,
	               |	СтрокиИнвойса.КостЦентр.SubSegment КАК SubSegment,
	               |	СУММА(СтрокиИнвойса.Сумма) КАК Сумма,
	               |	СУММА(0) КАК Sum
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |ГДЕ
	               |	НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И СтрокиИнвойса.ExportRequest = &ExportRequest
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтрокиИнвойса.КостЦентр.SubSegment,
	               |	СтрокиИнвойса.КостЦентр.SubGeomarket,
	               |	СтрокиИнвойса.КостЦентр.Segment,
	               |	СтрокиИнвойса.КостЦентр.Geomarket";
				   
	ТЗLines = Запрос.Выполнить().Выгрузить();
	
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗLines.ВыгрузитьКолонку("Сумма"), СуммаФрахтUSD, ТЗLines, "Sum");
	
	Для Каждого СтрокаТЗ из ТЗLines Цикл
		
		Движение = ДвиженияInternationalFactCosts.Добавить();
		
		Движение.Период = НачалоМесяца(?(День(Дата) > 25, ДобавитьМесяц(Дата, 1), Дата));
		Движение.CostsType = Перечисления.FactCostsTypes.Freight;
		Движение.DomesticInternational = Перечисления.DomesticInternational.International;
		
		Движение.ParentCompany = Company;
		Движение.Geomarket = СтрокаТЗ.Geomarket;
		Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
		Движение.Segment = СтрокаТЗ.Segment;
		Движение.SubSegment = СтрокаТЗ.SubSegment;
		
		Движение.Sum = СтрокаТЗ.Sum;
		
	КонецЦикла;
		         	
КонецПроцедуры

// { RGS AArsentev 23.09.2016 13:15:41 - S-I-0001909
Функция ПроверитьRussiaKazakhstan()
	
	Отказ = Ложь;	
	
	Если Submitted < Дата('20161001000000') Тогда 
		Возврат Отказ;
	КонецЕсли;
	 	
	Если PickUpWarehouse.RCACountry.Код = "RU" И DeliverTo.RCACountry.Код = "KZ" Тогда
		Сообщить("Shipment from Russia to Kazakhstan should be processed by transport request.");
		Отказ = Истина;
	ИначеЕсли PickUpWarehouse.RCACountry.Код = "KZ" И DeliverTo.RCACountry.Код = "RU" Тогда
		Сообщить("Shipment from Kazakhstan to Russia should be processed by transport request.");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // } RGS AArsentev 23.09.2016 13:15:41 - S-I-0001909

// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006035
Процедура УстановитьПризнакCustomsUnion()
	
	CustomUnionTransaction = Ложь;
	Если PickUpWarehouse.RCACountry.Код = "RU" И Consignee.RCACountry.Код = "KZ" Тогда
		CustomUnionTransaction = Истина;
	ИначеЕсли PickUpWarehouse.RCACountry.Код = "KZ" И Consignee.RCACountry.Код = "RU" Тогда
		CustomUnionTransaction = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

// ВЕРСИОНИРОВАНИЕ EXPORT REQUEST
Процедура ВерсионированиеДокумента(Отказ, ИзменилсяСоставИнвойсов)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяДата = ТекущаяДата();
	ВерсияDOC = ПолучитьАктуальнуюВерсиюДокумента(ТекущаяДата, Ссылка);
	
	Если ВерсияDOC = 0 ИЛИ ИзменилсяСоставИнвойсов Тогда
		Версия = Документы.ExportRequest.rgsПолучитьКоличествоВерсий(Ссылка);
		Если Версия = Неопределено Тогда
			Версия = 0;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ERVersions.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Отбор.ER.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДата;
		Запись.Version = Версия + 1;
		Запись.ER = Ссылка;
		Запись.CCA = CCA;
		Запись.MOT = InternationalMOT;
		Запись.POD = POD;
		Запись.CCAGLRequested = CCAGLRequested;
		Запись.CCAGLReceived  = CCAGLReceived;
		Запись.ИзменилсяСостав = ИзменилсяСоставИнвойсов;	
		НаборЗаписей.Записать();

	ИначеЕсли ВерсияDOC.CCA <> CCA 
			ИЛИ ВерсияDOC.MOT <> InternationalMOT
			ИЛИ ВерсияDOC.POD <> POD 
			ИЛИ ВерсияDOC.CCAGLReceived<> CCAGLReceived 
			ИЛИ ВерсияDOC.CCAGLRequested <> CCAGLRequested
			Тогда
	
		НаборЗаписей = РегистрыСведений.ERVersions.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Отбор.ER.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДата;
		Запись.Version = ?(ТекущаяВерсияДокумента > 0, ТекущаяВерсияДокумента, Документы.ExportRequest.rgsПолучитьМаксимальнуюВерсию(Ссылка) + 1);
		Если ТекущаяВерсияДокумента > 0 Тогда // восстановили версию
			Запись.Version = ТекущаяВерсияДокумента;
		ИначеЕсли ВерсияDOC.CCA = CCA 
			И ВерсияDOC.MOT = InternationalMOT
			И ВерсияDOC.POD = POD  
			И ВерсияDOC.CCAGLRequested = CCAGLRequested
			Тогда// версия прежняя
			Запись.Version = ВерсияDOC.Version;
		Иначе
			Запись.Version = Документы.ExportRequest.rgsПолучитьМаксимальнуюВерсию(Ссылка) + 1;
		КонецЕсли;
		
		Запись.ER = Ссылка;
		Запись.CCA = CCA;
		Запись.MOT = InternationalMOT;
		Запись.POD = POD;
		Запись.CCAGLReceived = CCAGLReceived;
		Запись.CCAGLRequested = CCAGLRequested;
		Запись.ИзменилсяСостав = ИзменилсяСоставИнвойсов;	
		НаборЗаписей.Записать();

	КонецЕсли; 

КонецПроцедуры 

// { RGS DKazanskiy 24.07.2018 15:54:27 - S-I-0005657
Функция ПолучитьАктуальнуюВерсиюДокумента(ТекущаяДата, ER)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросСамаяПоследняяВерсия = Новый Запрос;
	ЗапросСамаяПоследняяВерсия.Текст = "ВЫБРАТЬ
	                                   |	ERVersionsСрезПоследних.ER,
	                                   |	ERVersionsСрезПоследних.CCA,
	                                   |	ERVersionsСрезПоследних.MOT,
	                                   |	ERVersionsСрезПоследних.POD,
	                                   |	ERVersionsСрезПоследних.CCAGLRequested,
	                                   |	ERVersionsСрезПоследних.ИзменилсяСостав,
	                                   |	ERVersionsСрезПоследних.Version,
	                                   |	ERVersionsСрезПоследних.CCAGLReceived
	                                   |ИЗ
	                                   |	РегистрСведений.ERVersions.СрезПоследних(, ER = &ER) КАК ERVersionsСрезПоследних";
	ЗапросСамаяПоследняяВерсия.УстановитьПараметр("ER",ER);
	РезультатПоследняяВерсия =  ЗапросСамаяПоследняяВерсия.Выполнить();
	Если РезультатПоследняяВерсия.Пустой() Тогда
		Возврат 0; 
	Иначе
		Выборка = РезультатПоследняяВерсия.Выбрать();
		Выборка.Следующий();
		
		ЗапросДатаИзмененияСостава = новый запрос;
		ЗапросДатаИзмененияСостава.Текст = "ВЫБРАТЬ
		|	ERVersionsСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ERVersions.СрезПоследних(
		|			,
		|			ER = &ER
		|				И ИзменилсяСостав) КАК ERVersionsСрезПоследних";
		ЗапросДатаИзмененияСостава.УстановитьПараметр("ER",ER);
		РезДатаИзмененияСостава = ЗапросДатаИзмененияСостава.Выполнить().Выгрузить();
		Если РезДатаИзмененияСостава.Количество()>0 тогда
			ДатаНачалаСреза = РезДатаИзмененияСостава[0].Период; 
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ERVersions.ER,
		               |	ERVersions.CCA,
		               |	ERVersions.MOT,
		               |	ERVersions.POD,
		               |	ERVersions.CCAGLRequested,
		               |	ERVersions.ИзменилсяСостав,
		               |	ERVersions.Version,
		               |	ERVersions.CCAGLReceived
		               |ИЗ
		               |	РегистрСведений.ERVersions КАК ERVersions
		               |ГДЕ
		               |	ERVersions.ER = &ER";	
		Запрос.УстановитьПараметр("ER", ER);

		Если РезДатаИзмененияСостава.Количество()>0 тогда
			Запрос.УстановитьПараметр("Дата1", ДатаНачалаСреза);
			Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
			Запрос.Текст = Запрос.Текст + " И ERVersions.Период МЕЖДУ &Дата1 И &Дата2 УПОРЯДОЧИТЬ ПО ERVersions.Период УБЫВ";
		Иначе
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ERVersions.Период УБЫВ";
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ЗаписатьПервуюВерсию()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ERVersions.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ER.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ТекущаяДата();
	Запись.Version = 1;
	Запись.ER = Ссылка;
	Запись.CCA = CCA;
	Запись.MOT = InternationalMOT;
	Запись.POD = POD;
	Запись.CCAGLReceived = CCAGLReceived;
	Запись.CCAGLRequested = CCAGLRequested;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

ТекущаяВерсияДокумента 	= 0;
ИзменениеСостава		= Ложь;
// } RGS DKazanskiy 24.07.2018 15:54:29 - S-I-0005657


СамаяРанняяДата = '20120101';
ЗаполнениеПроверено = Ложь;

