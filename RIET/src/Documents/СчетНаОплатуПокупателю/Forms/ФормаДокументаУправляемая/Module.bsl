
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
            	
	ПодготовитьФормуНаСервере();
	
	// Определить первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",         "Товары");
	СписокТабличныхЧастей.Добавить("Услуги",         "Услуги");
	АктивизироватьТабличнуюЧасть = SalesBookСервер.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);

КонецПроцедуры

&НаКлиенте                  
Процедура ПриОткрытии(Отказ)

	// Активизировать первую непустую табличную часть
	SalesBookКлиент.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	//Добавила Федотова Л., РГ-Софт, 12.03.15, вопрос SLI-0005279	
	НомерНачалоВыбораИзСписка(, );
	
КонецПроцедуры
    
&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	Объект.ДоговорКонтрагента = НовыйОбъект;

	ДоговорКонтрагентаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры
                          
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура Архив(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если Вопрос("Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать текущий документ, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	Объект.Архив = Не Объект.Архив;
	//Изменила Федотова Л., РГ-Софт, 12.03.13, вопрос SLI-0003395 ->
	//КоманднаяПанель.ПодчиненныеЭлементы.ФормаАрхив.Пометка = Объект.Архив;
	Элементы.ФормаАрхив.Пометка = Объект.Архив;
	Записать();
	//<-
	ЭтаФорма.ТолькоПросмотр = Объект.Архив;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеализации(Команда)
	
	Ответ = Вопрос("Табличные части будут очищены и заново заполнены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;	
	
	ДокументОснованиеОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДоговор(Команда)

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = ВернутьСтр("ru = 'Для выполнения данной операции необходимо записать документ. Записать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Записать() Тогда
			ТекстСообщения = ВернутьСтр("ru = 'Не удалось записать документ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("Владелец", 	 Объект.Контрагент);
	ДанныеЗаполнения.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));

	НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Объект.Ссылка);
	ТекстНаименования = ВернутьСтр("ru = 'Счет № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДокумента%", НомерДокумента);
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДокумента%", Формат(Объект.Дата, "ДФ='дд ММ гггг'"));

	ДанныеЗаполнения.Вставить("Наименование", ТекстНаименования);

	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

&НаКлиенте
Процедура НомерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Предупреждение(ВернутьСтр("ru = 'Документ не записан. Сначала следует записать документ.'"));
	//	Возврат;
	//КонецЕсли;
	
	Если Модифицированность Тогда
		Предупреждение(ВернутьСтр("ru = 'Документ был изменен. Сначала следует записать документ.'"));
		Возврат;
	КонецЕсли;
	
	СписокНомеров = ПолучитьСписокНомеров();	
	
	//Изменила Федотова Л., РГ-Софт, 12.03.15, вопрос SLI-0005279	
	//Объект.Номер = ВыбратьИзСписка(СписокНомеров, Элементы.Номер);
	
	Элементы.Номер.СписокВыбора.Очистить();
	МассивНомеров = Новый Массив;
	Для к = 1 По СписокНомеров.Количество() Цикл
		МассивНомеров.Добавить(СписокНомеров[к-1].Значение);
	КонецЦикла; 
	Элементы.Номер.СписокВыбора.ЗагрузитьЗначения(МассивНомеров);

	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменитьКурсВзаиморасчетов = Ложь;
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		Если Вопрос("Изменилась дата документа. Изменить курс взаиморасчетов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ИзменитьКурсВзаиморасчетов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()
	
	КонтрагентПриИзмененииНаСервере();
	
	//Добавила Федотова Л., РГ-Софт, 22.02.16, вопрос SLI-0006308
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ДоговорКонтрагентаПриИзмененииНаСервере(); 

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	  		
	ЗаполнитьСписокАдресовДоставки();

КонецПроцедуры
       	
&НаКлиенте
Процедура КостЦентрНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		
		СписокВыбора = SalesBook.ПолучитьСписокAU(Объект.ПодразделениеОрганизации);
		ЭлементСписка = ВыбратьИзСписка(СписокВыбора, Элементы.КостЦентр);
		
		Если ЭлементСписка <> Неопределено Тогда 
			Объект.КостЦентр = ЭлементСписка.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Элементы.ФормаЗаполнитьПоРеализации.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		
		СписокБанковскихСчетов = SalesBook.ПолучитьСписокСчетов(Объект.ПодразделениеОрганизации, Объект.Дата);
		ЭлементСписка = ВыбратьИзСписка(СписокБанковскихСчетов, Элементы.СтруктурнаяЕдиница);
		
		Если ЭлементСписка <> Неопределено Тогда 
			Объект.СтруктурнаяЕдиница = ЭлементСписка.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <ТОВАРЫ>
//

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.ФормаУправляемая", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда 
		Элемент.ТекущиеДанные.Номенклатура = НоменклатураПустаяСсылка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыWOНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWO = ПолучитьСписокWO(Объект.ДоговорКонтрагента);
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	СтароеЗначение = ТекДанные.WO;
	
	Результат = ВыбратьИзСписка(СписокWO, Элемент);
	Если Результат = Неопределено Тогда
		ТекДанные.WO = СтароеЗначение;
	Иначе
		ТекДанные.WO = Результат.Значение;
	КонецЕсли;
	
	ОбработатьИзменениеWO("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыWOПриИзменении(Элемент)
	
	ОбработатьИзменениеWO("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыTicketПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
    Если ЗначениеЗаполнено(ТекДанные.Ticket) Тогда
		ТекДанные.SIR = ПолучитьTicketNumber(ТекДанные.Ticket);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

    //Изменила Федотова Л., РГ-Софт, 28.01.13, вопрос SLI-0003248
	//ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	НоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "Товары");
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыНДС("Товары");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <УСЛУГИ>
//

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиWOНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWO = ПолучитьСписокWO(Объект.ДоговорКонтрагента);
	
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
	СтароеЗначение = ТекДанные.WO;
	
	Результат = ВыбратьИзСписка(СписокWO, Элемент);
	Если Результат = Неопределено Тогда
		ТекДанные.WO = СтароеЗначение;
	Иначе
		ТекДанные.WO = Результат.Значение;
	КонецЕсли;
	
	ОбработатьИзменениеWO("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиWOПриИзменении(Элемент)
	
	ОбработатьИзменениеWO("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиTicketПриИзменении(Элемент)
	
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
    Если ЗначениеЗаполнено(ТекДанные.Ticket) Тогда
		ТекДанные.SIR = ПолучитьTicketNumber(ТекДанные.Ticket);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	//Изменила Федотова Л., РГ-Софт, 28.01.13, вопрос SLI-0003248
	//ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Содержание, СодержаниеEng");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ПодразделениеОрганизации, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	НоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "Услуги");
	
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыНДС("Услуги");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ПЕЧАТЬ>
//

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОрганизацияОбработатьИзменение();
	иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПримечание(Команда)
	
	Объект.Примечание = "The payment is to be proceeded in Russian Rubles according to the General Bank 
						|Exchange Rate valid on the date of payment [Rate]
						|Оплата производится в рублях по курсу ЦБ РФ на дату платежа [Rate]";
	Если Объект.Процент > 0 Тогда
		Объект.Примечание = СтрЗаменить(Объект.Примечание, "[Rate]", "+" + Объект.Процент + "%");
	Иначе
		Объект.Примечание = СтрЗаменить(Объект.Примечание, " [Rate]", "");
	КонецЕсли;
	
	ПроверитьЗаполнениеПримечания();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)

	КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	// 2. Открываем форму "Цены и Валюта".
	СтруктураЦеныИВалюта = ОткрытьФормуМодально("ОбщаяФорма.ФормаЦеныИВалютаТонкая", СтруктураПараметров);

	// 3. Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		ЗаполнитьРассчитатьСуммы(
			ВалютаДоИзменения, 
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПересчитатьЦены,
			ПересчитатьНДС);
			
		ОбновитьИтоги(ЭтаФорма);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если НЕ (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		Возврат;
	КонецЕсли;
	
    УстановитьЗаголовкиКолонок();
	
	Если ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаДоИзменения, СтруктураКурса, 
			ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	Для каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаДоИзменения, СтруктураКурса, 
			ПересчитатьЦены, ПересчитатьНДС, Ложь, 0);
	КонецЦикла;
	Для каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаДоИзменения, СтруктураКурса, 
			ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаПередИзменением, СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	Если ПересчитатьЦены Тогда

	Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			СтруктураКурса.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);

	Иначе
		Цена = Строка.Цена;
	КонецЕсли;
	
	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Если ЕстьНДС Тогда
		Строка.Цена     = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
																				   УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма 	= Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(Строка.Сумма, ЕстьНДС, Объект.СуммаВключаетНДС,
																 УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:
&НаСервере
Функция ПолучитьСписокНомеров()
	
	Список = Новый СписокЗначений;
	
	//Док = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	//Док.Дата = ТекущаяДата();
	//Док.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	
	Если Параметры.Ключ.Пустая() Тогда
	    Дата = ТекущаяДата();
	Иначе
		Дата = Объект.Дата;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		Префикс0 = "PAS";
	Иначе 	
		Префикс0 = "SLI";
	КонецЕсли; 
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПокупателю.ПредоплатаПоДоговору Тогда
		Префикс = Префикс0 + "-Advance-" + Прав(Год(ТекущаяДата()),1)+ "I-";
		//Док.УстановитьНовыйНомер(Префикс);
		Ном = НайтиСледующийНомер(Префикс, Дата);
		//Список.Добавить(Префикс+Формат(Число(Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=3; ЧВН="));
		Список.Добавить(Ном);
		Док = Неопределено;
	Иначе
		Если ЗначениеЗаполнено(Объект.КостЦентр) Тогда                                      
			Префикс = Префикс0 + "-" + Объект.КостЦентр + "-"+Прав(Год(ТекущаяДата()),1)+"I-";
			//Док.УстановитьНовыйНомер(Префикс);
			Ном = НайтиСледующийНомер(Префикс, Дата);
			//Список.Добавить(Префикс+Формат(Число(Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=3; ЧВН="));
			//Список.Добавить(Префикс+СокрЛП(Сред(Док.Номер,СтрДлина(Префикс)+1)));
			Список.Добавить(Ном);
		КонецЕсли;
		Префикс = Префикс0 + "-YAL-"+Прав(Год(ТекущаяДата()),1)+"I-";
		//Док.УстановитьНовыйНомер(Префикс);
		Ном = НайтиСледующийНомер(Префикс, Дата);
		//Список.Добавить(Префикс+Формат(Число(Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=4; ЧВН="));
		//Добавила попытку Федотова Л., РГ-Софт, 03.10.12, вопрос №SLI-0002855 ->
		Попытка
			//Список.Добавить(Префикс+Формат(Число(Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=4; ЧВН="));
			Список.Добавить(Ном);
		Исключение
		КонецПопытки;
		Префикс = Префикс0 + "-RP1-"+Прав(Год(ТекущаяДата()),1)+"I-";
		//Док.УстановитьНовыйНомер(Префикс);
		Ном = НайтиСледующийНомер(Префикс, Дата);
		//Список.Добавить(Префикс+Формат(Число(Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=4; ЧВН="));
		Список.Добавить(Ном);
		Док = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СчетФактураВыданный.Номер
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование");
			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
			Выборка = запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Список.Добавить(Выборка.Номер);
			Иначе
				Список.Добавить(СокрЛП(Объект.ДокументОснование.НомерСчетаНаОплату));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Значение = "" Тогда
			Список.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Функция НайтиСледующийНомер(Префикс, Дата)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номер КАК Номер
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(СчетНаОплатуПокупателю.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)
	|	И СчетНаОплатуПокупателю.Номер ПОДОБНО &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ");
	Запрос.УстановитьПараметр("Дата", Дата);					  
	Запрос.УстановитьПараметр("Номер", Префикс + "%");
	
	МаксЧислоНомера = 0;
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Номер = Выборка.Номер;
		Номер = СтрЗаменить(СокрЛП(Сред(Номер,СтрДлина(Префикс)+1))," ","");
		ЧастьЦифры = "";
		Пока СтрДлина(Номер) > 0  Цикл
			ЛевЧасть = Лев(Номер,1);
			Если ЛевЧасть = "-" ИЛИ ЛевЧасть = "/" ИЛИ ЛевЧасть = "\" ИЛИ ЛевЧасть = "." Тогда
				Прервать;
			КонецЕсли; 
			Попытка
				ЧислоЛевЧасть = Число(ЛевЧасть);
				ЧастьЦифры = ЧастьЦифры + ЛевЧасть;
			Исключение
			КонецПопытки;
			Номер = Сред(Номер,2);	
		КонецЦикла; 
		ЧислоНомера = Число(ЧастьЦифры);
		Если ЧислоНомера > МаксЧислоНомера Тогда
		    МаксЧислоНомера = ЧислоНомера;
		КонецЕсли; 
	КонецЦикла;
	
	Если МаксЧислоНомера > 0 Тогда
		ЧислоНомераСтрока = СтрЗаменить(Строка(МаксЧислоНомера+1),Символы.НПП,""); 
		Пока СтрДлина(ЧислоНомераСтрока) < 4 Цикл
		     ЧислоНомераСтрока = "0" + ЧислоНомераСтрока;
		КонецЦикла; 
		Возврат Префикс + ЧислоНомераСтрока;			
	Иначе
		Возврат Префикс + "0001";
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов)
	
	Если ИзменитьКурсВзаиморасчетов Тогда 
		СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента,,Истина);
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
КонецПроцедуры
        
&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	ОбщегоНазначения.УстановитьНомерДокумента(Объект);

	ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновноеПодразделениеОрганизации");
	
	// Если ПодразделениеОрганизации не заполнено.
	Если Не ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		
		// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
		Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
			Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		КонецЕсли;
		
	Иначе // Если ПодразделениеОрганизации заполнено.
		
		// Если ПодразделениеОрганизации не соответствует выбранной организации.
		Если Объект.ПодразделениеОрганизации.Владелец = Объект.Организация Тогда
			
			// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
				Объект.ПодразделениеОрганизации = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		СписокБанковскихСчетов = SalesBook.ПолучитьСписокСчетов(Объект.ПодразделениеОрганизации, Объект.Дата);
		Объект.СтруктурнаяЕдиница = СписокБанковскихСчетов[0].Значение; 
	КонецЕсли;

	КонтрагентОбработатьИзменение();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ЗаполнитьСписокАдресовДоставки();
	Если Элементы.АдресДоставки.СписокВыбора.Количество() > 0 Тогда
		Объект.АдресДоставки = Элементы.АдресДоставки.СписокВыбора[0].Значение;
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;

	КонтрагентОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	SalesBookСервер.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, 
		Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);

	ДоговорКонтрагентаОбработатьИзменение();
	
	КонтрагентПроверитьДатуЗапретаИзменения(Объект.Контрагент, Объект.Дата);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПроверитьДатуЗапретаИзменения(Контрагент, Дата)
	ДатаЗапретаИспользования = Контрагент.ДатаЗапретаИспользования;
	Если НЕ ДатаЗапретаИспользования = Дата(1,1,1) И ДатаЗапретаИспользования <= Дата Тогда
		Сообщить("Запрещено использование контрагента " + Контрагент + " с " + Формат(ДатаЗапретаИспользования, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	Сделка = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения   	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВидДоговора,РасчетыВУсловныхЕдиницах");

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	Если Объект.Товары.Количество() > 0 
		ИЛИ Объект.Услуги.Количество() > 0 Тогда
	
		ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
			ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
		ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
	
	КонецЕсли;
	
	ЭтоКомиссия = (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	Иначе
		ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ПроверитьЗаполнениеПримечания();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеОбработатьИзменение() 
	
	СкопироватьТовары(Объект.ДокументОснование);
	СкопироватьУслуги(Объект.ДокументОснование)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокАдресовДоставки(КонтрагентДоставки);
	
	СписокАдресов = Новый СписокЗначений();
	Адреса = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		КонтрагентДоставки, Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Для каждого Адрес Из Адреса Цикл
		СписокАдресов.Добавить(Адрес.Значение, "" + Адрес.Вид + ": " + Адрес.Значение);
	КонецЦикла;
	
	Возврат СписокАдресов;
		
КонецФункции

// Изменение реквизитов в строках табличных частей

&НаСервереБезКонтекста
Функция ПолучитьСписокWO(ДоговорКонтрагента)
	
	СписокWO = Новый СписокЗначений;
	Выборка = Справочники.ЗаказНаряды.Выбрать(,ДоговорКонтрагента,,);
	Пока Выборка.Следующий() Цикл
		СписокWO.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокWO;

КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеWO(ИмяТабЧасти)
	
	ТекСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ТипЗнч(ТекСтрока.WO) = Тип("СправочникСсылка.ЗаказНаряды") Тогда
		
		СтруктураДанныхWO = ПолучитьСтруктуруДанныхWO(ТекСтрока.WO);
		
		Если СтруктураДанныхWO.СрокОплаты <> 0 Тогда
			Объект.ДнейНаОплату = СтруктураДанныхWO.СрокОплаты;	
		КонецЕсли;
		
		Если СтруктураДанныхWO.Процент <> 0 Тогда
			Объект.Процент	= СтруктураДанныхWO.Процент;
		КонецЕсли;
		
	КонецЕсли;
        	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхWO(WO)
	
	СтруктураДанныхWO = Новый Структура("СрокОплаты,Процент");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", WO);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказНаряды.Процент,
	|	ЗаказНаряды.СрокОплаты
	|ИЗ
	|	Справочник.ЗаказНаряды КАК ЗаказНаряды
	|ГДЕ
	|	ЗаказНаряды.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
	    СтруктураДанныхWO.СрокОплаты = Выборка.СрокОплаты;
		СтруктураДанныхWO.Процент    = Выборка.Процент;
	КонецЕсли;
	
	Возврат СтруктураДанныхWO;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьTicketNumber(Ticket)
	
	Возврат Ticket.TicketNumber;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ПараметрыОбъекта, ИмяТабЧасти)

	Если ИмяТабЧасти = "Услуги" Тогда 
		SalesBookСервер.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, "Услуги", ПараметрыОбъекта.Ссылка.Метаданные());
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда 
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаУслуги.Видимость = НЕ Форма.ЭтоКомиссия;

	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.НовыйДоговор.Доступность             = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.СтруктурнаяЕдиница.Доступность       = ЗначениеЗаполнено(Объект.Организация);
	Элементы.АдресДоставки.Доступность            = ЗначениеЗаполнено(Объект.Контрагент);

	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокЦена = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Цена с НДС'"), ВернутьСтр("ru='Цена без НДС'"));
	ЗаголовокСумма = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Сумма с НДС'"), ВернутьСтр("ru='Сумма без НДС'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС);
	Форма.ЦеныИВалюта = SalesBookКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

// Прочий функционал:
              
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонок "Всего" в табличных частях
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
                     	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если Не ЗначениеЗаполнено(Объект.Ссылка) и Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		ЗаполнитьДаннымиПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Попытка
			РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				Объект.ДоговорКонтрагента, "ВидДоговора,РасчетыВУсловныхЕдиницах,ВалютаВзаиморасчетов");
			ЭтоКомиссия = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
			Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				ВалютаОплаты = ВалютаРегламентированногоУчета;
			Иначе
				ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе
		ЭтоКомиссия = Ложь;
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	// Проверка ведения однофирменности 
	Элементы.Организация.ТолькоПросмотр = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям");	

	ЭтаФорма.ТолькоПросмотр = Объект.Архив;
	Элементы.ФормаЗаполнитьПоРеализации.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокАдресовДоставки();

	УправлениеФормой(ЭтаФорма);

	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАдресовДоставки()

	Элементы.АдресДоставки.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		Объект.Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Для каждого Адрес Из Адреса Цикл
		Элементы.АдресДоставки.СписокВыбора.Добавить(Адрес.Значение, "" + Адрес.Вид + ": " + Адрес.Значение);
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;   
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПримечания()
	
	ДопУсловияПоДоговору = СокрЛП(Объект.ДоговорКонтрагента.Условия);
	Если ДопУсловияПоДоговору = "" Тогда
		Объект.Процент = Объект.ДоговорКонтрагента.Процент;
		Объект.ДнейНаОплату = Объект.ДоговорКонтрагента.СрокОплаты;
	иначе
		Объект.Процент = 0;
		Объект.ДнейНаОплату = 0;
		Объект.Примечание = ДопУсловияПоДоговору;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьТовары(Основание) Экспорт

	МетаданныеОснования = Основание.Метаданные();
	ИмяДокумента = МетаданныеОснования.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ИмяДокумента + "Товары.Номенклатура,
	|	" + ИмяДокумента + "Товары.ЕдиницаИзмерения,
	|	" + ИмяДокумента + "Товары.Цена,
	|	" + ИмяДокумента + "Товары.Сумма,
	|	" + ИмяДокумента + "Товары.СтавкаНДС,
	|	" + ИмяДокумента + "Товары.СуммаНДС,
	|	" + ИмяДокумента + "Товары.Коэффициент,
	|	" + ИмяДокумента + "Товары.Количество,
	|	" + ИмяДокумента + "Товары.КоличествоМест,
	|	" + ИмяДокумента + "Товары.Oilfield,
	|	" + ИмяДокумента + "Товары.КостЦентр,
	|	" + ИмяДокумента + "Товары.Ticket,
	|	" + ИмяДокумента + "Товары.TicketNumber КАК SIR,
	|	" + ИмяДокумента + "Товары.WO,
	|	" + ИмяДокумента + "Товары.ProductLine,
	|	" + ИмяДокумента + "Товары.Well
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК " + ИмяДокумента + "Товары
	|
	|ГДЕ
	|	" + ИмяДокумента + "Товары.Ссылка = &Ссылка
	| Упорядочить по " + ИмяДокумента + "Товары.НомерСтроки";

	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьУслуги(Основание) Экспорт

	МетаданныеОснования = Основание.Метаданные();
	ИмяДокумента = МетаданныеОснования.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ИмяДокумента + "Услуги.НомерСтроки,
	|	" + ИмяДокумента + "Услуги.Содержание,
	|	" + ИмяДокумента + "Услуги.СодержаниеEng,
	|	" + ИмяДокумента + "Услуги.Количество,
	|	" + ИмяДокумента + "Услуги.Цена,
	|	" + ИмяДокумента + "Услуги.Сумма,
	|	" + ИмяДокумента + "Услуги.СтавкаНДС,
	|	" + ИмяДокумента + "Услуги.СуммаНДС,
	|	" + ИмяДокумента + "Услуги.Номенклатура,
	|	" + ИмяДокумента + "Услуги.Oilfield,
	|	" + ИмяДокумента + "Услуги.КостЦентр,
	|	" + ИмяДокумента + "Услуги.Ticket,
	|	" + ИмяДокумента + "Услуги.WO,
	|	" + ИмяДокумента + "Услуги.TicketNumber КАК SIR,
	|	" + ИмяДокумента + "Услуги.ProductLine,
	|	" + ИмяДокумента + "Услуги.Well
	|ИЗ
	|	Документ." + ИмяДокумента + ".Услуги КАК " + ИмяДокумента + "Услуги
	|
	|ГДЕ
	|	" + ИмяДокумента + "Услуги.Ссылка = &Ссылка
	| Упорядочить по " + ИмяДокумента + "Услуги.НомерСтроки";
	
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, Пользователи.ТекущийПользователь(), ВалютаРегламентированногоУчета, "Продажа");
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект); 
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПриИзмененииКоличестваЦены(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ИмяТабЧасти = "Услуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, ЗначениеПустогоКоличества);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	    	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
      		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммы(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		Если ИмяТабЧасти = "Услуги" Тогда 
			ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
		Иначе
			ТекущиеДанные.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкиНДС(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
 	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыНДС(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;
    	
КонецПроцедуры 

&НаКлиенте
Процедура Да(Команда)
	п=1;
КонецПроцедуры

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура КостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Добавила Федотова Л., РГ-Софт, 12.03.15, вопрос SLI-0005279	
	НомерНачалоВыбораИзСписка(, );
КонецПроцедуры
//<- RG-Soft VIvanov
