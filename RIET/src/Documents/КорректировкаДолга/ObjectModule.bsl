Перем мВалютаРегламентированногоУчета Экспорт;

Перем НомераСубконтоРДпоСчету;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктаВзаимозачета()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Номер,
	|	КорректировкаДолга.Дата,
	|	КорректировкаДолга.КонтрагентДебитор КАК Дебитор,
	|	КорректировкаДолга.КонтрагентКредитор КАК Кредитор,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.ВалютаДокумента
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	

	ЗапросДолги = Новый Запрос;
	ЗапросДолги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДолги.УстановитьПараметр("ВидЗадолженностиДебиторка", Перечисления.ВидыЗадолженности.Дебиторская);
	ЗапросДолги.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВалютнаяСуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.Сумма
	|		КОНЕЦ) КАК СуммаКредиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКредиторки
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолга.ДоговорКонтрагента";
						
	ТаблицаЗадолженностей = ЗапросДолги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("Взаимозачет");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКредитора   = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Кредитор, Шапка.Дата), "ПолноеНаименование,");
	
	СтрокаКредиторки = "1. Задолженность "+ПредставлениеОрганизации + " перед " + ПредставлениеКредитора + " составляет ";
	Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета или ОбщегоНазначения.ЗначениеНеЗаполнено(Шапка.ВалютаДокумента) Тогда
		КолонкаСуммы        = "Сумма";
		ПредставлениеВалюты = строка(мВалютарегламентированногоУчета);
	Иначе	
		КолонкаСуммы        = "ВалютнаяСумма";
		ПредставлениеВалюты = строка(Шапка.ВалютаДокумента);
	КонецЕсли; 
	
	СтрокаШапки       = "Акт взаимозачета № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + Символы.ПС+" от " + Формат(Шапка.Дата, "ДЛФ=DD"); 
	СтрокаКредиторки  = СтрокаКредиторки + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы + "Кредиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты + " по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаШапки      = СтрокаШапки;
	ОбластьМакета.Параметры.СтрокаКредиторки = СтрокаКредиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКредиторки");
	Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы + "Кредиторки"]=0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.СтрокаДокументовКред = сокрЛП(СтрокаЗадолженности.ДоговорКонтрагента) + " :"+ символы.Таб + Формат(СтрокаЗадолженности[КолонкаСуммы + "Кредиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета         = Макет.ПолучитьОбласть("ЗаголовокДебиторки");
	ПредставлениеДебитора = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Дебитор, Шапка.Дата), "ПолноеНаименование,");
	СтрокаДебиторки       = "2. Задолженность " + ПредставлениеДебитора + " перед " + ПредставлениеОрганизации + " составляет "
	                      + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы + "Дебиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты + " по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаДебиторки = СтрокаДебиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДебиторки");
	Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы + "Дебиторки"] = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.СтрокаДокументовДеб = сокрЛП(СтрокаЗадолженности.ДоговорКонтрагента) + " :" + символы.Таб + Формат(СтрокаЗадолженности[КолонкаСуммы + "Дебиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьПодвала     = Макет.ПолучитьОбласть("Подвал");
	СтрокаВзаимозачета = "3. Взаимозачет производится на сумму "
	                   + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Дебиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
	ОбластьПодвала.Параметры.СтрокаВзаимозачета       = СтрокаВзаимозачета;
	ОбластьПодвала.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ОбластьПодвала.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
	ТабДокумент.Вывести(ОбластьПодвала);
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_Акт";
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КорректировкаДолга" Тогда		
		
		ТабДокумент = ПечатьАктаВзаимозачета();
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками взаиморасчетов по контрагенту
//
Процедура ЗаполнитьОстаткамиВзаиморасчетов(ПоКонтрагенту, ВидЗадолженности) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента Как Договор,
		|	ВзаиморасчетыСПокупателямиОстатки.Сделка КАК ДокументРасчетов,
		|	ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
		|			&Период,
		|			ДоговорКонтрагента.Владелец = &Контрагент
		|				И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСПокупателямиОстатки";
	
	Запрос.УстановитьПараметр("Период",НОвый МоментВремени(Дата, Ссылка));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Контрагент", ПоКонтрагенту);
	
	ТекущийРезультат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаОстатков Из ТекущийРезультат Цикл
		Если СтрокаОстатков.СуммаВзаиморасчетов > 0 и ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		    НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
			НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
			НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
			НоваяСтрока.СуммаВзаиморасчетов = СтрокаОстатков.СуммаВзаиморасчетов;
			НоваяСтрока.КурсВзаиморасчетов = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
			НоваяСтрока.Сумма = СтрокаОстатков.Сумма;
		ИначеЕсли СтрокаОстатков.СуммаВзаиморасчетов < 0 и ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда	
		    НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
			НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
			НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
			НоваяСтрока.СуммаВзаиморасчетов = -СтрокаОстатков.СуммаВзаиморасчетов;
			НоваяСтрока.КурсВзаиморасчетов = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
			НоваяСтрока.Сумма = -СтрокаОстатков.Сумма;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		Если СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор Тогда
			// Очистим корр. счет и аналитику (далее заполняться счет и аналитика будут отдельным алгоритмом)
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено,"КоррСчет,КоррСубконто1, КоррСубконто2, КоррСубконто3");
		Иначе
			// Счет переноса для кредиторской задолженности устанавливается из другого поля
			Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
				СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			КонецЦикла; 
			
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
			
			// При наличии аналитики по документам расчетов в конце документ перенесем из проводки по счету учета
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"КоррСубконто3");
		КонецЕсли;
		
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
			Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтрокаКредиторки.КоррСчетНУ = СтруктураШапкиДокумента.СчетКтНУ;
				СтрокаКредиторки.КоррСубконтоНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
				СтрокаКредиторки.КоррСубконтоНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
				СтрокаКредиторки.КоррСубконтоНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская и СтрокаРасчетов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
			//Это возврат от поставщика
			СтрокаРасчетов.ЭтоВозврат = Истина;
		ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская и СтрокаРасчетов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			//Это возврат покупателю
			СтрокаРасчетов.ЭтоВозврат = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	// Дополним таблицу расчетов полями рублвой и валютной сумм (для отработки стандартных механизмов движения денег)
	ТаблицаРасчетов.Колонки.Добавить("РублеваяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"),"РублеваяСумма");
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
	Иначе
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
		Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
			Если СтрокаРасчетов.РасчетыВУсловныхЕдиницах Тогда
				СтрокаРасчетов.РублеваяСумма = СтрокаРасчетов.Сумма;
			Иначе
				// { RGS MYurkevich 13.02.2015 17:38:00 - RCA-0000032
				//СтрокаРасчетов.РублеваяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСумма,
				//		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				//		СтрокаРасчетов.КурсВзаиморасчетов, 1, 
				//        СтрокаРасчетов.КратностьВзаиморасчетов, 1);
				СтрокаРасчетов.РублеваяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСумма,
						СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
						ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата).Курс, 1, 
	                    СтрокаРасчетов.КратностьВзаиморасчетов, 1);
				// } RGS MYurkevich 13.02.2015 17:38:35 - RCA-0000032
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;	
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВалютаДокумента");
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор");
		//Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
		//	СтруктураОбязательныхПолей.Вставить("СчетДт", "Вспомогательный счет для проведения взаиморасчета");
		//КонецЕсли; 
	Иначе
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор","Контрагент для списания задолженности");
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор","Контрагент для зачисления задолженности");
			
			//Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
			//	СтруктураОбязательныхПолей.Вставить("СчетДт","Счет зачисления дебиторской задолженности");
			//КонецЕсли; 
			//Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
			//	СтруктураОбязательныхПолей.Вставить("СчетКт","Счет зачисления кредиторской задолженности");
			//КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			//Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
			//	СтруктураОбязательныхПолей.Вставить("СчетДт","Счет списания дебиторской задолженности");
			//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			//		СтруктураОбязательныхПолей.Вставить("СчетДтНУ","Счет списания дебиторской задолженности по налоговому учету");
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
			//	СтруктураОбязательныхПолей.Вставить("СчетКт","Счет списания кредиторской задолженности");
			//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			//		СтруктураОбязательныхПолей.Вставить("СчетКтНУ","Счет списания кредиторской задолженности по налоговому учету");
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		и ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента)Тогда

		СтрокаСообщения = "Не заполнен договор для зачисления задолженности!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
	КонецЕсли; 

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	//Изменила Федотова Л., РГ-Софт, 21.11.12, вопрос №УЗ-015193
	//СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов");
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ТабСумм         = ТаблицаПоСуммамДолга.Скопировать();
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или СтруктураШапкиДокумента.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ТабСумм.Свернуть("ВидЗадолженности","Сумма");
		Иначе
			ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
			ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
		КонецЕсли; 
		
		СуммаДеб  = 0;
		СуммаКред = 0;
		
		Для каждого СтрокаСумм Из ТабСумм Цикл
			Если  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				СуммаДеб  = СтрокаСумм.Сумма;
			ИначеЕсли  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				СуммаКред = СтрокаСумм.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если не Разница =0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" " +Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2")+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
	
	
	//Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

	//	Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	//	 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

	//		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
	//										 """ табличной части ""Суммы долга"": ";

	//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
	//			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся по заказам.
	//								|Необходимо заполнить сделку!", Отказ, Заголовок);
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	Если ТаблицаПоСуммамДолга.Количество()=0 Тогда
		 Возврат;
	КонецЕсли;  
	
	ТаблицаДебиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаКредиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();

	ВидЗадолженностиДебиторская = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаДебиторскойЗадолженности.Количество() Цикл

		СтрокаТаблицы = ТаблицаДебиторскойЗадолженности.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
			 ТаблицаДебиторскойЗадолженности.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаКредиторскойЗадолженности.Количество() Цикл

		СтрокаТаблицы = ТаблицаКредиторскойЗадолженности.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
			 ТаблицаКредиторскойЗадолженности.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности);
	
КонецПроцедуры // ДвиженияПоРегистрам()

//Функция для получения номера субконто "Расчетные документы" по счету учета
//
// Параметры
//  Счет         - счет по которому определяетс номер субконто "Документы расчетов с контрагентами"
// Возвращаемое значение:
//   Число   – номер субконто "Документы расчетов с контрагентами" на счете. Если субконто нет - возвращается 0.
//
Функция ПолучитьНомерСубконтоРД(Счет)
    Если НомераСубконтоРДпоСчету = Неопределено Тогда
	    НомераСубконтоРДпоСчету = Новый Соответствие();
	КонецЕсли; 
	
	НомерСубконтоРД = НомераСубконтоРДпоСчету[Счет];
	
	Если  НомерСубконтоРД = Неопределено Тогда
		НомерСубконтоРД = 0;
		
		// Определим начичие субконто "Документы расчетов с контрагентами" по счету учета.
		ВидыСубконто = Счет.ВидыСубконто;
		СтрокаСубконтоРД = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если не СтрокаСубконтоРД = Неопределено Тогда
			НомераСубконтоРДпоСчету.Вставить(Счет, СтрокаСубконтоРД.НомерСтроки);
			НомерСубконтоРД = СтрокаСубконтоРД.НомерСтроки;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НомерСубконтоРД;

КонецФункции // ПолучитьНомерСубконтоРД()

Процедура ДвиженияПоРегистрамРегл( СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности)
	
	//СодержаниеПроводки = "";
	//Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	//	СодержаниеПроводки = "Взаимозачет";
	//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
	//	СодержаниеПроводки = "Перенос задолженности";
	//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	//	СодержаниеПроводки = "Списание задолженности";
	//КонецЕсли; 
	//
	//КоличествоПроводокПоДебиторке = 0;
	//
	Если ТаблицаДебиторскойЗадолженности.Количество()>0 Тогда
	//	СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Дебиторская);
		ТаблицаДебиторскойЗадолженности1 = ТаблицаДебиторскойЗадолженности.Скопировать();
	//	Если не ТаблицаДебиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
	//		Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
	//		Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДебиторскойЗадолженности);
	//		Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
	//		
	//		// Сначала по возвратам пройдемся
	//		Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
	//		СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
	//		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
	//			// Ошибка при списании задолженности
	//			Возврат;
	//		КонецЕсли;
	//		// Затем отработаем погашение задолженности
	//		СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
	//		Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
	//		
	//		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
	//			// Ошибка при списании задолженности
	//			Возврат;
	//		КонецЕсли;
	//	
	//	Иначе
	//		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаДебиторскойЗадолженности)=Ложь тогда
	//			// Ошибка при списании задолженности
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
	//		// Выгружаем набор движении для последующей корректировки
	//		НаборДвиженийДебиторка = Движения.Хозрасчетный.Выгрузить();
	//		КоличествоПроводокПоДебиторке = Движения.Хозрасчетный.Количество();
	//		
	//		Движения.Хозрасчетный.Очистить();
	//	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
	//		и СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор 
	//		Тогда
	//		
	//		Для каждого Проводка Из Движения.Хозрасчетный Цикл
	//			Если ОбщегоНазначения.ЗначениеНеЗаполнено(проводка.СчетДт) Тогда
	//				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
	//				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
	//				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
	//				
	//				Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетДт) = 0  Тогда
	//					НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
	//					
	//					Если НомерСубконтоРД = 0 Тогда
	//						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
	//					Иначе
	//						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами);
	//					КонецЕсли; 
	//				КонецЕсли; 
	//			КонецЕсли; 
	//			
	//			Если ОбщегоНазначения.ЗначениеНеЗаполнено(проводка.СчетКт) Тогда
	//				Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт;
	//				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
	//				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
	//				
	//				Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетДт) = 0  Тогда
	//					НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
	//					
	//					Если НомерСубконтоРД = 0 Тогда
	//						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
	//					Иначе
	//						ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами);
	//					КонецЕсли; 
	//				КонецЕсли; 
	//			КонецЕсли; 
	//		
	//		КонецЦикла; 
	//		КоличествоПроводокПоДебиторке = Движения.Хозрасчетный.Количество();
	//	КонецЕсли;
		
		СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаДебиторскойЗадолженности1,ВидДвиженияНакопления.Расход , Отказ, Заголовок);
		//добавила Федотова Людмила, РГ-Софт 10.12.08 ->
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			СформироватьДополнительныеДвиженияРасчетыСКонтрагентами(ТаблицаДебиторскойЗадолженности1,ВидДвиженияНакопления.Приход);	
		КонецЕсли; 
		//<-
	КонецЕсли; 
	
	Если ТаблицаКредиторскойЗадолженности.Количество()>0 Тогда
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Кредиторская);
		
		//Если не ТаблицаКредиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
		//	Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
		//	Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаКредиторскойЗадолженности);
		//	Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
		//	
		//	// Сначала по возвратам пройдемся
		//	Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
		//	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
		//	Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
		//		// Ошибка при списании задолженности
		//		Возврат;
		//	КонецЕсли;
		//	// Затем отработаем погашение задолженности
		//	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
		//	Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
		//	
		//	Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
		//		// Ошибка при списании задолженности
		//		Возврат;
		//	КонецЕсли;
		//
		//Иначе
		//	Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаКредиторскойЗадолженности)=Ложь тогда
		//		// Ошибка при списании задолженности
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
		//	// Выгружаем набор движении для последующей корректировки
		//	НаборДвиженийКредиторка = Движения.Хозрасчетный.Выгрузить();
		//	
		//	Движения.Хозрасчетный.Очистить();
		//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
		//	и (Движения.Хозрасчетный.Количество()) >0 
		//	и СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор
		//	Тогда
		//	Для НомерПроводки = КоличествоПроводокПоДебиторке по Движения.Хозрасчетный.Количество()-1 Цикл
		//		Проводка = Движения.Хозрасчетный[НомерПроводки];
		//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(проводка.СчетДт) Тогда
		//			Проводка.СчетДт = СтруктураШапкиДокумента.СчетКт;
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
		//			
		//			Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетКт) = 0  Тогда
		//				
		//				НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
		//					
		//				Если НомерСубконтоРД = 0 Тогда
		//					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
		//				Иначе
		//					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами);
		//				КонецЕсли; 
		//			КонецЕсли;
		//		КонецЕсли; 
		//		
		//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(проводка.СчетКт) Тогда
		//			Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
		//			
		//			Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетКт) = 0  Тогда
		//				НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
		//				
		//				Если НомерСубконтоРД = 0 Тогда
		//					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
		//				Иначе
		//					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами);
		//				КонецЕсли; 
		//			КонецЕсли; 
		//		КонецЕсли; 
		//	
		//	КонецЦикла; 
		//КонецЕсли;
		
		СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаКредиторскойЗадолженности ,ВидДвиженияНакопления.Приход , Отказ, Заголовок);

	КонецЕсли; 
	
	//Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет и КоличествоПроводокПоДебиторке>0 Тогда
	//	// Сопоставление дебета и кредита проводки
	//	// Сопоставление производится по сумме регламентированного учета - балансовый реквизит проводки
	//	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	//	
	//	Для каждого СтрокаДебиторки Из НаборДвиженийДебиторка Цикл
	//		Если не СтрокаДебиторки.СчетДт = ВспомогательныйСчет Тогда
	//			// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
	//			Проводка  = Движения.Хозрасчетный.Добавить();
	//			Проводка.Период			= СтрокаДебиторки.Период;
	//			Проводка.Организация	= СтрокаДебиторки.Организация;
	//			Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
	//			Проводка.Содержание		= СтрокаДебиторки.Содержание;
	//			Проводка.Сумма			= СтрокаДебиторки.Сумма;
	//			
	//			Проводка.СчетДт			= СтрокаДебиторки.СчетДт;
	//			Для НомерСубконто = 1  По 3 Цикл
	//				Если Не СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
	//					ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто], СтрокаДебиторки["СубконтоДт"+НомерСубконто]);
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			
	//			Проводка.ВалютаДт		= СтрокаДебиторки.ВалютаДт;
	//			Проводка.ВалютнаяСуммаДт= СтрокаДебиторки.ВалютнаяСуммаДт;
	//			
	//			Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
	//			Для НомерСубконто = 1  По 3 Цикл
	//				Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
	//					ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			
	//			Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
	//			Проводка.ВалютнаяСуммаКт= СтрокаДебиторки.ВалютнаяСуммаКт;
	//			
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
	//			Если СтрокаДебиторки.Сумма = 0 Тогда
	//				Прервать;
	//			КонецЕсли;
	//			Если СтрокаКредиторки.Сумма = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			Если не СтрокаКредиторки.СчетКт = ВспомогательныйСчет Тогда
	//				// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
	//				Проводка  = Движения.Хозрасчетный.Добавить();
	//				Проводка.Период			= СтрокаКредиторки.Период;
	//				Проводка.Организация	= СтрокаКредиторки.Организация;
	//				Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
	//				Проводка.Содержание		= СтрокаКредиторки.Содержание;
	//				Проводка.Сумма			= СтрокаКредиторки.Сумма;
	//				
	//				Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
	//				Для НомерСубконто = 1  По 3 Цикл
	//					Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
	//						ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
	//					КонецЕсли; 
	//				КонецЦикла; 
	//				
	//				Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
	//				Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
	//				
	//				Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
	//				Для НомерСубконто = 1  По 3 Цикл
	//					Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
	//						ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
	//					КонецЕсли; 
	//				КонецЦикла; 
	//				
	//				Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
	//				Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
	//				
	//				СтрокаКредиторки.Сумма = 0;
	//				СтрокаКредиторки.ВалютнаяСуммаДт = 0;
	//				СтрокаКредиторки.ВалютнаяСуммаКт = 0;
	//				Продолжить;
	//			КонецЕсли; 
	//			
	//			СуммаСоответствия = мин(СтрокаДебиторки.Сумма,СтрокаКредиторки.Сумма);
	//			
	//			Если СуммаСоответствия = 0 Тогда
	//				продолжить;
	//			КонецЕсли; 
	//			
	//			// Проводка взаимозачета
	//			Проводка  = Движения.Хозрасчетный.Добавить();
	//			Проводка.Период			= СтрокаДебиторки.Период;
	//			Проводка.Организация	= СтрокаДебиторки.Организация;
	//			Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
	//			Проводка.Содержание		= СтрокаДебиторки.Содержание;
	//			Проводка.Сумма			= СуммаСоответствия;
	//			
	//			Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
	//			Для НомерСубконто = 1  По 3 Цикл
	//				Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
	//					ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			
	//			Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
	//			Проводка.ВалютнаяСуммаДт= Окр(СтрокаКредиторки.ВалютнаяСуммаДт*СуммаСоответствия/СтрокаКредиторки.Сумма,2);
	//			
	//			
	//			Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
	//			Для НомерСубконто = 1  По 3 Цикл
	//				Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
	//					ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			
	//			Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
	//			Проводка.ВалютнаяСуммаКт= Окр(СтрокаДебиторки.ВалютнаяСуммаКт*СуммаСоответствия/СтрокаДебиторки.Сумма,2);
	//			
	//			
	//			СтрокаДебиторки.Сумма			= СтрокаДебиторки.Сумма - СуммаСоответствия;
	//			СтрокаДебиторки.ВалютнаяСуммаКт = СтрокаДебиторки.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
	//		
	//			СтрокаКредиторки.Сумма			= СтрокаКредиторки.Сумма - СуммаСоответствия;
	//			СтрокаКредиторки.ВалютнаяСуммаДт = СтрокаКредиторки.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
	//			
	//		КонецЦикла; 
	//	КонецЦикла; 
	//
	//	Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
	//		Если СтрокаКредиторки.Сумма = 0 и СтрокаКредиторки.ВалютнаяСуммаДт = 0 и СтрокаКредиторки.ВалютнаяСуммаКт = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
	//		Проводка  = Движения.Хозрасчетный.Добавить();
	//		Проводка.Период			= СтрокаКредиторки.Период;
	//		Проводка.Организация	= СтрокаКредиторки.Организация;
	//		Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
	//		Проводка.Содержание		= СтрокаКредиторки.Содержание;
	//		Проводка.Сумма			= СтрокаКредиторки.Сумма;
	//		
	//		Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
	//		Для НомерСубконто = 1  По 3 Цикл
	//			Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
	//				ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
	//			КонецЕсли; 
	//		КонецЦикла; 
	//		
	//		Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
	//		Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
	//		
	//		Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
	//		Для НомерСубконто = 1  По 3 Цикл
	//			Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
	//				ОбщегоНазначения.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
	//			КонецЕсли; 
	//		КонецЦикла; 
	//		
	//		Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
	//		Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
	//		
	//		СтрокаКредиторки.Сумма = 0;
	//		СтрокаКредиторки.ВалютнаяСуммаДт = 0;
	//		СтрокаКредиторки.ВалютнаяСуммаКт = 0;
	//		Продолжить;
	//	КонецЦикла; 
	//	
	//КонецЕсли;
	
	// Списание задолженности в налоговом учете
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности и ТаблицаПоСуммамДолга.Количество()>0 
	//	и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	Для Каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
	//		Если СтрокаДолга.СуммаНУ = 0 Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		ПроводкаНУ = Движения.Налоговый.Добавить();
	//		ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
	//		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
	//		ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
	//		
	//		Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
	//			ПроводкаНУ.Содержание  = "Списана дебиторская задолженность";
	//			ПроводкаНУ.СчетДт = СтрокаДолга.КоррСчетНУ;
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоНУ1);
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоНУ2);
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоНУ3);
	//		ИначеЕсли СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
	//			ПроводкаНУ.Содержание  = "Списана кредиторская задолженность";
	//			ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
	//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли; 
	
	//Учет курсовых разниц
	//Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
	//	БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	//КонецЕсли; // Учет курсовых разниц

		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
    Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		ИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнойИнвойсинговыйЦентр");		
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("Сделка"                				  , "Сделка");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	 СтруктураПолей.Вставить("СчетОплаты"          					  , "СчетУчетаРасчетов");
	 СтруктураПолей.Вставить("СчетАванса"          					  , "СчетУчетаРасчетов");
	
	СтруктураПолей.Вставить("КоррСчет"              					  , "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"              				  , "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"              				  , "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"              				  , "Ссылка.СубконтоДт3");
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности и СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолей.Вставить("СуммаНУ"              					  , "СуммаНУ");
		
		СтруктураПолей.Вставить("КоррСчетНУ"              					  , "Ссылка.СчетДтНУ");
		СтруктураПолей.Вставить("КоррСубконтоНУ1"              				  , "Ссылка.СубконтоДтНУ1");
		СтруктураПолей.Вставить("КоррСубконтоНУ2"              				  , "Ссылка.СубконтоДтНУ2");
		СтруктураПолей.Вставить("КоррСубконтоНУ3"              				  , "Ссылка.СубконтоДтНУ3");
		
	КонецЕсли; 

	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоДвижениям,ВидДвижения, Отказ, Заголовок)

	Для Каждого СтрокаТЧ ИЗ ТаблицаПоДвижениям Цикл
		Запись = Движения.ВзаиморасчетыСПокупателями.Добавить();
		Запись.Период = Дата;
		Запись.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
		Запись.ПодразделениеОрганизации = ПодразделениеОрганизации;
		Запись.Сделка = СтрокаТЧ.Сделка;
		Запись.ВидДвижения = ВидДвижения;
			
		Запись.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		Если  ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если СтрокаТЧ.Сделка.Товары.Количество() >0 Тогда
				
				Запись.КостЦентр = СтрокаТЧ.Сделка.Товары[0].КостЦентр;
				Запись.WO = СтрокаТЧ.Сделка.Товары[0].WO;
			ИначеЕсли СтрокаТЧ.Сделка.Услуги.Количество() >0 Тогда

				Запись.КостЦентр = СтрокаТЧ.Сделка.Услуги[0].КостЦентр;
                Запись.WO = СтрокаТЧ.Сделка.Услуги[0].WO;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ПередачаОС") Тогда
			Запись.КостЦентр = СтрокаТЧ.Сделка.ОС[0].КостЦентр;
	
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
			Строки = SalesBook.НайтиСтрокиРегистраВзаиморасчетов(,СтрокаТЧ.ДоговорКонтрагента,СтрокаТЧ.Сделка);
			//Добавила Федотова Л., РГ-Софт, 21.03.13, вопрос SLI-0003423
			Если Строки.Количество() > 0 Тогда
				Запись.КостЦентр = Строки[0].КостЦентр;
			Иначе
				#Если Клиент Тогда
					Сообщить("Не найдены остатки долга по документу расчета " + СтрокаТЧ.Сделка); 
				#КонецЕсли 
				Отказ = Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			Строки = SalesBook.НайтиСтрокиРегистраВзаиморасчетов(,СтрокаТЧ.ДоговорКонтрагента,СтрокаТЧ.Сделка, Истина);
			//Добавила Федотова Л., РГ-Софт, 21.03.13, вопрос SLI-0003423
			Если Строки.Количество() > 0 Тогда
				Запись.КостЦентр = Строки[0].КостЦентр;
			Иначе
				#Если Клиент Тогда
					Сообщить("Не найдены остатки долга по документу расчета " + СтрокаТЧ.Сделка); 
				#КонецЕсли 
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;	
		// 
		Запись.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
		Запись.СуммаРегл = СтрокаТЧ.РублеваяСумма;
		USD = Справочники.Валюты.НайтиПоНаименованию("USD");
		Запись.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Запись.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДополнительныеДвиженияРасчетыСКонтрагентами(ТаблицаПоДвижениям, ВидДвижения)

	Для Каждого СтрокаТЧ ИЗ ТаблицаПоДвижениям Цикл
		Запись = Движения.ВзаиморасчетыСПокупателями.Добавить();
		Запись.Период = Дата;
		Запись.ДоговорКонтрагента = ДоговорКонтрагента;
		Запись.ПодразделениеОрганизации = ПодразделениеОрганизации;
		Запись.Сделка = Ссылка;
		Запись.ВидДвижения = ВидДвижения;
			
		Запись.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		Если  ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если СтрокаТЧ.Сделка.Товары.Количество() >0 Тогда
				
				Запись.КостЦентр = СтрокаТЧ.Сделка.Товары[0].КостЦентр;
				Запись.WO = СтрокаТЧ.Сделка.Товары[0].WO;
			ИначеЕсли СтрокаТЧ.Сделка.Услуги.Количество() >0 Тогда

				Запись.КостЦентр = СтрокаТЧ.Сделка.Услуги[0].КостЦентр;
                Запись.WO = СтрокаТЧ.Сделка.Услуги[0].WO;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ПередачаОС") Тогда
			Запись.КостЦентр = СтрокаТЧ.Сделка.ОС[0].КостЦентр;
	
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
			Строки = SalesBook.НайтиСтрокиРегистраВзаиморасчетов(,СтрокаТЧ.ДоговорКонтрагента,СтрокаТЧ.Сделка);
			Запись.КостЦентр = Строки[0].КостЦентр;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Сделка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			Строки = SalesBook.НайтиСтрокиРегистраВзаиморасчетов(,СтрокаТЧ.ДоговорКонтрагента,СтрокаТЧ.Сделка, Истина);
			Запись.КостЦентр = Строки[0].КостЦентр;
		КонецЕсли;	
		// 
		Запись.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
		Запись.СуммаРегл = СтрокаТЧ.РублеваяСумма;
		USD = Справочники.Валюты.НайтиПоНаименованию("USD");
		Запись.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Запись.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
	КонецЦикла;

КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
