// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
//Перем ТабЗатрат;
Перем ПроводкиНУ;
Перем ПоддержкаПБУ18;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
//Процедура заполняет параметры ответственных лиц организации-получателя формы ОС4 
//
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	
	ПараметрыОрганизации = Новый структура("Руководитель,ДолжностьРуководителя,ГлавБух");	
		
	ПараметрыОрганизации.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
	ПараметрыОрганизации.ДолжностьРуководителя = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ПараметрыОрганизации.ГлавБух = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры
 	
// Функция возращает параметры ОС
//
Функция ПолучитьПробегАвто(ОбъектОС, НачДата, КонДата)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
	|	ВыработкаОС.ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот КАК Пробег
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК РегСведенияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
	|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ОС", ОбъектОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Пробег;
	
КонецФункции // ПолучитьПробегАвто()
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеОС()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеОС.Номер КАК НомерДок,
	|	СписаниеОС.Дата КАК ДатаДок,
	|	СписаниеОС.СобытиеОС КАК Состояние,
	|	СписаниеОС.ПричинаСписания КАК ПричинаСписания,
	|	СписаниеОС.Организация КАК Организация,
	|	СписаниеОС.Организация.КодПоОКПО КАК КодОКПО,
	|	СписаниеОС.ПредседательКомиссии,
	|	СписаниеОС.ПредседательКомиссии.Должность КАК ДолжностьПредседателя,
	|	СписаниеОС.Комментарий
	|ИЗ
	|	Документ.СписаниеОС КАК СписаниеОС
	|ГДЕ
	|	СписаниеОС.Ссылка = &Ссылка";
	СтруктураДока = Запрос.Выполнить().Выбрать();
	СтруктураДока.Следующий();

	СведенияОбОрганизации    = КонтактнаяИнформация.СведенияОЮрФизЛице(СтруктураДока.Организация, СтруктураДока.ДатаДок);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	ОтветственныеЛица        = ОбщегоНазначения.ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОСОС.НомерСтроки КАК НП,
		|	СписаниеОСОС.ОсновноеСредство КАК ОС,
		|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	СписаниеОСОС.ОсновноеСредство.Автотранспорт КАК Автотранспорт,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
		|	СписаниеОСОС.ОсновноеСредство.ГруппаОС КАК Группа,
		|	СписаниеОСОС.АмортизацияБУ КАК НачАмортизация,
		|	СписаниеОСОС.СтоимостьБУ КАК Стоимость,
		|	СписаниеОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК НачСтоимость,
		|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвНомер,
		|	ПервоначальныеСведения.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение.НаименованиеПолное КАК Подразделение,
		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
		|	СписаниеОСОС.ОсновноеСредство.НомерШасси КАК НомерШасси,
		|	СписаниеОСОС.ОсновноеСредство.РегистрационныйНомер КАК РегистрационныйНомер,
		|	СписаниеОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		|	РегистрацияВГАИСрезПоследних.Период КАК ДатаСнятияСУчета
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
		|				&ДатаДок,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Документ.СписаниеОС.ОС.ОсновноеСредство
		|					ИЗ
		|						Документ.СписаниеОС.ОС
		|					ГДЕ
		|						Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведения
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияВГАИ.СрезПоследних КАК РегистрацияВГАИСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = РегистрацияВГАИСрезПоследних.ОС
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НП";
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 1 Тогда

		ВыборкаОС.Следующий();

		Если ВыборкаОС.Автотранспорт Тогда 
			Макет = ПолучитьМакет("ОС4а");
		Иначе
			Макет = ПолучитьМакет("ОС4");
		КонецЕсли;

		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заполнить(СтруктураДока);
		Область.Параметры.Организация = ПредставлениеОрганизации;
		
		Область.Параметры.Заполнить(ВыборкаОС);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) тогда
			Область.Параметры["НаимОС"] = ВыборкаОС.ОС;
		КонецЕслИ;
		
		ДокументПринятияКУчету     = "";
		ДокументВводаВЭксплуатацию = "";
		ПринятоКУчету              = "";
		ВведеноВЭксплуатацию       = "";

		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);

		Если ВыборкаОС.Автотранспорт Тогда
			Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
			//исправила Логинова О., РГ-Софт, 2014.10.07 по вопросу SLI-0004885
			//Если ДокументВводаВЭксплуатацию = Неопределено Тогда
			//	Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата);
			//Иначе
			//	Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ДокументВводаВЭксплуатацию.Дата, Дата);
			//КонецЕсли;
		Иначе
			Область.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; // это в месяцах - по 30 дней
		КонецЕсли;

		СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
		                ВыборкаОС.НачСтоимость,
		                ВыборкаОС.Стоимость);
						
		АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
		                  0,
		                  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
		
		Область.Параметры.ГодВыпуска     = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.ГодВыпуска), Год(ВыборкаОС.ГодВыпуска), 0);
		Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
		Область.Параметры.НачСтоимость   = СтоимостьОС;
		Область.Параметры.НачАмортизация = АмортизацияОС;
		Область.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
		
		// { RGS LFedotova 06.12.2018 22:23:41 - вопрос SLI-0007760
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СписаниеОСКомиссия.Ссылка,
			|	СписаниеОСКомиссия.ЧленКомиссии,
			|	СписаниеОСКомиссия.Ссылка.ПредседательКомиссии,
			|	СписаниеОСКомиссия.НомерСтроки,
			|	СписаниеОСКомиссия.ЧленКомиссии.Должность КАК ДолжностьЧленаКомиссии
			|ИЗ
			|	Документ.СписаниеОС.Комиссия КАК СписаниеОСКомиссия
			|ГДЕ
			|	СписаниеОСКомиссия.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	СписаниеОСКомиссия.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НомерСтроки = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Область.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			НомерСтроки = ВыборкаДетальныеЗаписи.НомерСтроки;
			Если НомерСтроки = 1 Тогда
				ТабДокумент.Вывести(Область);
				Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			Иначе
				ТабДокумент.Вывести(Область);
			КонецЕсли;	
		КонецЦикла;
		
		Если НомерСтроки = 0 Тогда
			ТабДокумент.Вывести(Область);
			Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			ТабДокумент.Вывести(Область);
		КонецЕсли;	
		
		Если НомерСтроки = 1 Тогда
			Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			ТабДокумент.Вывести(Область);
		КонецЕсли;	
		
		Область = Макет.ПолучитьОбласть("Подвал");
		// } RGS LFedotova 06.12.2018 22:23:44 - вопрос SLI-0007760

		Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		//Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
		//Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		
		ТабДокумент.Вывести(Область);

	Иначе

		Макет  = ПолучитьМакет("ОС4б");

		Шапка = Макет.ПолучитьОбласть("Шапка0");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Организация           = ПредставлениеОрганизации;
		//Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
		//Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		
		// { RGS LFedotova 09.12.2018 23:40:20 - вопрос SLI-0007772
		ВыборкаОС.Следующий();
		Шапка.Параметры.Заполнить(ВыборкаОС);
		ВыборкаОС.Сбросить();
		// } RGS LFedotova 09.12.2018 23:40:44 - вопрос SLI-0007772 

		
		ТабДокумент.Вывести(Шапка);

		Шапка = Макет.ПолучитьОбласть("Шапка1");
		Шапка.Параметры.Заполнить(СтруктураДока);
		ТабДокумент.Вывести(Шапка);

		Строка1 = Макет.ПолучитьОбласть("Строка1");

		Пока ВыборкаОС.Следующий() Цикл

			Строка1.Параметры.Заполнить(ВыборкаОС);
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) Тогда
				Строка1.Параметры["НаимОС"] = ВыборкаОС.ОС;
			КонецЕсли;
			
			СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			                ВыборкаОС.НачСтоимость,
			                ВыборкаОС.Стоимость);
							
			АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			                  0,
			                  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
							
			Строка1.Параметры.Заполнить(СтруктураДока);
			Строка1.Параметры.НачСтоимость   = СтоимостьОС;
			Строка1.Параметры.НачАмортизация = АмортизацияОС;
			Строка1.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
			
			Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;

			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";

			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);

			Если ВведеноВЭксплуатацию = Неопределено Тогда
				
				Строка1.Параметры.СрокЭкспл = 0;
				
			Иначе
				
				КоличествоЛет     = Год(Дата) - Год(ВведеноВЭксплуатацию);
				КоличествоМесяцев = Месяц(Дата) - Месяц(ВведеноВЭксплуатацию);
				
				Строка1.Параметры.СрокЭкспл = КоличествоЛет * 12 + КоличествоМесяцев;

			КонецЕсли;

			ТабДокумент.Вывести(Строка1);

		КонецЦикла;

		Шапка = Макет.ПолучитьОбласть("Шапка2");
		Шапка.Параметры.Заполнить(СтруктураДока);
		
		// { RGS LFedotova 09.12.2018 22:23:41 - вопрос SLI-0007760
		//Шапка = Макет.ПолучитьОбласть("Шапка2");
		//Шапка.Параметры.Заполнить(СтруктураДока);
		Область = Макет.ПолучитьОбласть("Шапка2");
		Область.Параметры.Заполнить(СтруктураДока);
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СписаниеОСКомиссия.Ссылка,
			|	СписаниеОСКомиссия.ЧленКомиссии,
			|	СписаниеОСКомиссия.Ссылка.ПредседательКомиссии,
			|	СписаниеОСКомиссия.НомерСтроки,
			|	СписаниеОСКомиссия.ЧленКомиссии.Должность КАК ДолжностьЧленаКомиссии
			|ИЗ
			|	Документ.СписаниеОС.Комиссия КАК СписаниеОСКомиссия
			|ГДЕ
			|	СписаниеОСКомиссия.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	СписаниеОСКомиссия.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		НомерСтроки = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Область.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			НомерСтроки = ВыборкаДетальныеЗаписи.НомерСтроки;
			Если НомерСтроки = 1 Тогда
				ТабДокумент.Вывести(Область);
				Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			Иначе
				ТабДокумент.Вывести(Область);
			КонецЕсли;	
		КонецЦикла;
		
		Если НомерСтроки = 0 Тогда
			ТабДокумент.Вывести(Шапка);
			Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			ТабДокумент.Вывести(Область);
		КонецЕсли;	
		
		Если НомерСтроки = 1 Тогда
			Область = Макет.ПолучитьОбласть("ЧленКомиссии");
			ТабДокумент.Вывести(Область);
		КонецЕсли;	
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		// } RGS LFedotova 09.12.2018 22:23:44 - вопрос SLI-0007760
		
		// { RGS LFedotova 09.12.2018 22:34:59 - вопрос SLI-0007760
		//Шапка.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		//
		//ТабДокумент.Вывести(Шапка);
		Подвал.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		
		ТабДокумент.Вывести(Подвал);
		// } RGS LFedotova 09.12.2018 22:35:04 - вопрос SLI-0007760 

	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()
	
// { RGS LFedotova 05.12.2018 12:04:15 - вопрос SLI-0007759
// Функция формирует табличный документ с печатной формой приказа о списании,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа
//
Функция ПечатьПриказа()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приказ";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеОС.Номер КАК НомерДок,
	|	СписаниеОС.Дата КАК ДатаДок,
	|	СписаниеОС.ПодразделениеОрганизации КАК Организация,
	|	СписаниеОС.ПредседательКомиссии
	|ИЗ
	|	Документ.СписаниеОС КАК СписаниеОС
	|ГДЕ
	|	СписаниеОС.Ссылка = &Ссылка";
	
	СтруктураДока = Запрос.Выполнить().Выбрать();
	СтруктураДока.Следующий();
	
	СведенияОбОрганизации    = КонтактнаяИнформация.СведенияОЮрФизЛице(СтруктураДока.Организация, СтруктураДока.ДатаДок);
	Адрес					 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес");
	ОтветственныеЛица        = ОбщегоНазначения.ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок);

	Макет = ПолучитьМакет("Приказ");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(СтруктураДока);
	ОбластьШапка.Параметры.АдресФилиала = Адрес;
	ТабДокумент.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     СтруктураДока.ДатаДок);
	Запрос.УстановитьПараметр("Организация", СтруктураДока.Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОСОС.НомерСтроки КАК НП,
		|	СписаниеОСОС.ОсновноеСредство,
		|	СписаниеОСОС.ОсновноеСредство.СерийныйНомер КАК СерийныйНомер,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
		|	ПервоначальныеСведения.ИнвентарныйНомер,
		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК Подразделение,
		|	СписаниеОСОС.ОсновноеСредство.ОсновноеСредствоLawson.Код КАК AssetNumber
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
		|				&ДатаДок,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Документ.СписаниеОС.ОС.ОсновноеСредство
		|					ИЗ
		|						Документ.СписаниеОС.ОС
		|					ГДЕ
		|						Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведения
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.СписаниеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.СписаниеОС.ОС
		|						ГДЕ
		|							Документ.СписаниеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");

	Пока ВыборкаОС.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаОС);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) тогда
			ОбластьСтрока.Параметры.НаимОС = ВыборкаОС.НаимОС;
		Иначе
			ОбластьСтрока.Параметры.НаимОС = ВыборкаОС.ОсновноеСредство;
		КонецЕслИ;
		ОбластьСтрока.Параметры.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;

		ТабДокумент.Вывести(ОбластьСтрока);

	КонецЦикла;
	
	ОбластьПодвал1 = Макет.ПолучитьОбласть("Подвал1");
	ОбластьПодвал1.Параметры.Заполнить(СтруктураДока);
	ТабДокумент.Вывести(ОбластьПодвал1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОСКомиссия.Ссылка,
		|	СписаниеОСКомиссия.ЧленКомиссии,
		|	СписаниеОСКомиссия.Ссылка.ПредседательКомиссии
		|ИЗ
		|	Документ.СписаниеОС.Комиссия КАК СписаниеОСКомиссия
		|ГДЕ
		|	СписаниеОСКомиссия.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписаниеОСКомиссия.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбластьЧленКомиссии = Макет.ПолучитьОбласть("ЧленКомиссии");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьЧленКомиссии.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДокумент.Вывести(ОбластьЧленКомиссии);
	КонецЦикла;
	
	ОбластьПодвал2 = Макет.ПолучитьОбласть("Подвал2");
	ОбластьПодвал2.Параметры.Заполнить(СтруктураДока);
	ТабДокумент.Вывести(ОбластьПодвал2);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказа()
// } RGS LFedotova 05.12.2018 12:05:00 - вопрос SLI-0007759 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС4" Тогда
		
		ТабДокумент = ПечатьСписаниеОС();
		
	ИначеЕсли ИмяМакета = "Приказ" Тогда
		
		ТабДокумент = ПечатьПриказа();
		
	КонецЕсли; 
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС4,Приказ","ОС-4","Приказ");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ"; 
	мСтрокаРеквизитыНалУчета = "ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()
 
// Процедура вызывается при выборе пункта подменю "Для списка ОС" из меню "Заполнить"
// командной панели формы. Процедура выполняет заполнение колонок с данными 
// в табличной части по каждому выбранному основному средству.
//
Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт 
	
	СписокОС  = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтоимостьАмортизацияОС.ОсновноеСредство,
	|	СтоимостьАмортизацияОС.АмортизацияБУ,
	|	СтоимостьАмортизацияОС.АмортизацияНУ
	|ПОМЕСТИТЬ НачальнаяАмортизация
	|ИЗ
	|	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	|ГДЕ
	|	СтоимостьАмортизацияОС.ОсновноеСредство В(&СписокОС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьАмортизацияОСОстатки.ОсновноеСредство,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	АмортизацияЗаПериод.СуммаБУ КАК АмортизацияБУ,
	|	АмортизацияЗаПериод.СуммаНУ КАК АмортизацияНУ,
	|	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ОС_ИнвенНомер.ИнвентарныйНомер,
	|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|		ПервоначальныеСведенияСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияСрезПоследних) КАК ОС_ИнвенНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОСПлюсНачАморт.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(РасчетАмортизацииОСПлюсНачАморт.СуммаБУ) КАК СуммаБУ,
	|			СУММА(РасчетАмортизацииОСПлюсНачАморт.СуммаНУ) КАК СуммаНУ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|				РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|				РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|			ИЗ
	|				РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|			ГДЕ
	|				РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|				И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НачальнаяАмортизация.ОсновноеСредство,
	|				НачальнаяАмортизация.АмортизацияБУ,
	|				НачальнаяАмортизация.АмортизацияНУ
	|			ИЗ
	|				НачальнаяАмортизация КАК НачальнаяАмортизация) КАК РасчетАмортизацииОСПлюсНачАморт
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетАмортизацииОСПлюсНачАморт.ОсновноеСредство) КАК АмортизацияЗаПериод
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.Дата), ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.Дата));
	//Запрос.УстановитьПараметр("МоментВремени", КонецДня(ДокОбъект.Дата - 24*60*60));
	Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.ДатаПроведения), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.ДатаПроведения));
	Запрос.УстановитьПараметр("МоментВремени", КонецДня(ДокОбъект.ДатаПроведения - 24*60*60));
	
	табСведенияОС = Запрос.Выполнить().Выгрузить();
	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого Строка Из ОС Цикл	
		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Если НЕ НайденноеОС = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьДляСписка()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, ,СтруктураШапкиДокумента);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС", СтруктураШапкиДокумента);

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если  НЕ (СтрокаОС.СтоимостьБУ = 0) Тогда
		
			Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если СтрокаОС.СнятоСУчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если СтрокаОС.СнятоСУчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокПогашенияСтоимостиБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок погашения стоимости (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			//Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			//	Отказ = Истина;
			//КонецЕсли;
			
		КонецЕсли;
		
		//Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		// ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		//
		//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
		//		Отказ = Истина;
		//	КонецЕсли;
		//	
		//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.Направление_БУ) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
		//		Отказ = Истина;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		//Если НЕ СтрокаОС.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//		
		//		Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
		//			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
		//			Отказ = Истина;
		//			Возврат;
		//		КонецЕсли;
		//		
		//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда
		//			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (НУ).",,, СтатусСообщения.Важное);
		//			Отказ = Истина;
		//		КонецЕсли;
		//		
		//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		//			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок включения стоимости в состав расходов (НУ).",,, СтатусСообщения.Важное);
		//			Отказ = Истина;
		//		КонецЕсли;
		//		
		//		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		//		
		//			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииНУ) Тогда
		//				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (НУ).",,, СтатусСообщения.Важное);
		//				Отказ = Истина;
		//			КонецЕсли;
		//			
		//			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.Направление_НУ) Тогда
		//				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (НУ).",,, СтатусСообщения.Важное);
		//				Отказ = Истина;
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ОсновноеСредство
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ОсновноеСредство В(&СписокОС)";
	
	Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ,
	|	ИсходнаяТаблица.АмортизацияБУ,
	|	ИсходнаяТаблица.АмортизацияНУ,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтоимостьАмортизацияОС.ОсновноеСредство,
	|	СтоимостьАмортизацияОС.Подразделение,
	|	СтоимостьАмортизацияОС.АмортизацияБУ,
	|	СтоимостьАмортизацияОС.АмортизацияНУ
	|ПОМЕСТИТЬ НачальнаяАмортизация
	|ИЗ
	|	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	|ГДЕ
	|	СтоимостьАмортизацияОС.ОсновноеСредство В(&СписокОС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.СтоимостьБУОстаток,
	|	ВложенныйЗапрос.СтоимостьНУОстаток,
	|	ВложенныйЗапрос.АмортизацияБУ,
	|	ВложенныйЗапрос.АмортизацияНУ,
	|	ВложенныйЗапрос.СуммаКВОстаток,
	|	ВложенныйЗапрос.ПодразделениеСписания
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.Подразделение, СтоимостьАмортизацияОСОстатки.Подразделение) КАК Подразделение,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУОстаток,
	|		СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКВОстаток,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаБУ, 0) КАК АмортизацияБУ,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) КАК АмортизацияНУ,
	|		СтоимостьАмортизацияОСОстатки.Подразделение КАК ПодразделениеСписания
	|	ИЗ
	|		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РасчетАмортизацииОСПлюсНачАморт.ОсновноеСредство КАК ОсновноеСредство,
	|				РасчетАмортизацииОСПлюсНачАморт.Подразделение КАК Подразделение,
	|				СУММА(РасчетАмортизацииОСПлюсНачАморт.СуммаБУ) КАК СуммаБУ,
	|				СУММА(РасчетАмортизацииОСПлюсНачАморт.СуммаНУ) КАК СуммаНУ
	|			ИЗ
	|				(ВЫБРАТЬ
	|					РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|					РасчетАмортизацииОС.Подразделение КАК Подразделение,
	|					РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|					РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|				ИЗ
	|					РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|				ГДЕ
	|					РасчетАмортизацииОС.ПериодАмортизации <= &ПериодАмортизации
	|					И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					НачальнаяАмортизация.ОсновноеСредство,
	|					НачальнаяАмортизация.Подразделение,
	|					НачальнаяАмортизация.АмортизацияБУ,
	|					НачальнаяАмортизация.АмортизацияНУ
	|				ИЗ
	|					НачальнаяАмортизация КАК НачальнаяАмортизация) КАК РасчетАмортизацииОСПлюсНачАморт
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетАмортизацииОСПлюсНачАморт.ОсновноеСредство,
	|				РасчетАмортизацииОСПлюсНачАморт.Подразделение) КАК РасчетАмортизацииОССвернутый
	|			ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = РасчетАмортизацииОССвернутый.ОсновноеСредство) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУОстаток, ВложенныйЗапрос.СтоимостьБУ)) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ВложенныйЗапрос.СтоимостьНУ) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ВложенныйЗапрос.СуммаКВ) КАК СуммаКВ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.АмортизацияБУ, ВложенныйЗапрос.АмортизацияБУ)) КАК АмортизацияБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ВложенныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.ПодразделениеСписания, ВложенныйЗапрос.ПодразделениеСписания)) КАК ПодразделениеСписания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
	|		ИсходнаяТаблица.СтоимостьБУ КАК СтоимостьБУ,
	|		ИсходнаяТаблица.СтоимостьНУ КАК СтоимостьНУ,
	|		ИсходнаяТаблица.СуммаКВ КАК СуммаКВ,
	|		ИсходнаяТаблица.АмортизацияБУ КАК АмортизацияБУ,
	|		ИсходнаяТаблица.АмортизацияНУ КАК АмортизацияНУ,
	|		ИсходнаяТаблица.Подразделение КАК Подразделение,
	|		ВложенныйЗапрос.Подразделение КАК ПодразделениеСписания
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ИсходнаяТаблица.Подразделение КАК Подразделение,
	|				ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство
	|			ИЗ
	|				ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ГДЕ
	|				НЕ(ИсходнаяТаблица.СтоимостьБУ = 0
	|							И ИсходнаяТаблица.СтоимостьНУ = 0
	|							И ИсходнаяТаблица.СуммаКВ = 0)) КАК ВложенныйЗапрос
	|			ПО ИсходнаяТаблица.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство) КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|		ПО ВложенныйЗапрос.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство
	|			И ВложенныйЗапрос.Подразделение = ТаблицаПоОС.Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство),
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение),
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ВложенныйЗапрос.СтоимостьНУ),
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ВложенныйЗапрос.АмортизацияНУ),
	|	ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ВложенныйЗапрос.СуммаКВ)
	|ИТОГИ
	|	МАКСИМУМ(СтоимостьБУ),
	|	МАКСИМУМ(СтоимостьНУ),
	|	МАКСИМУМ(СуммаКВ),
	|	МАКСИМУМ(ПодразделениеСписания)
	|ПО
	|	ОсновноеСредство";

	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
	Запрос.УстановитьПараметр("ПериодАмортизации", Документ.Дата);
	
	Результат = Запрос.Выполнить();
	ВыборкаОС = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОС.Следующий() Цикл
	//	НоваяСтрока					 = НоваяТаблица.Добавить();
	//	НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
	//	НоваяСтрока.Активность		 = Истина;
	//	НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
	//	НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
	//	НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	//	НоваяСтрока.Подразделение    = ВыборкаОС.ПодразделениеСписания;
	//	НоваяСтрока.СтоимостьБУ  	 = ВыборкаОС.СтоимостьБУ;      
	//	НоваяСтрока.СтоимостьНУ   	 = ВыборкаОС.СтоимостьНУ;      
	//	НоваяСтрока.СуммаКВ			 = ВыборкаОС.СуммаКВ;
	
		//Выборка = Результат.Выбрать();
		СтоимостьСписана = Ложь;
		Выборка = ВыборкаОС.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока					 = НоваяТаблица.Добавить();
			НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Активность		 = Истина;
			НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
			НоваяСтрока.Подразделение    = Выборка.Подразделение;
			Если Выборка.Подразделение = Выборка.ПодразделениеСписания Тогда
				НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
				НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;   
				НоваяСтрока.СуммаКВ			 = Выборка.СуммаКВ;
				СтоимостьСписана = Истина;
			КонецЕсли;
			НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
			НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
		КонецЦикла;
		Если НЕ СтоимостьСписана Тогда
			НоваяСтрока					 = НоваяТаблица.Добавить();
			НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Активность		 = Истина;
			НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
			НоваяСтрока.Подразделение    = ВыборкаОС.ПодразделениеСписания;
			НоваяСтрока.СтоимостьБУ  	 = ВыборкаОС.СтоимостьБУ;      
			НоваяСтрока.СтоимостьНУ   	 = ВыборкаОС.СтоимостьНУ;   
			НоваяСтрока.СуммаКВ			 = ВыборкаОС.СуммаКВ;
		КонецЕсли;
	КонецЦикла;
	НоваяТаблица.ЗаполнитьЗначения(Документ, "Регистратор");
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();

	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		//Хорошо бы здесь сравнить таблицы документа до заполнения и после, и если они совпадают, 
		//то ничего не записывать и не сообщать о перезаполнении
		Сообщить("Перезаполнена табличная часть документа " + Документ);
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = "ОС";
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	ПроводкиБУ              = Движения.Хозрасчетный;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТабАмортизации.Колонки.Добавить("Валюта");
	ТабАмортизации.Колонки.Добавить("Подразделение");
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		   И СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			//НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
			НоваяСтрока.Валюта        		   = СтрокаОС.ОсновноеСредство.Валюта;
			НоваяСтрока.Подразделение  		   = СтрокаОС.ОсновноеСредство.Подразделение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	//ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", НомерЖурнала);

	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(Дата, Организация, масОС);
    	
	// Создание движений документа по БУ
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		
		Движение.ДатаСостояния    = ДатаПроведения;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Движение.Период            = ?(ДатаПроведения = '0001.01.01',ДатаДока,ДатаПроведения);
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		Если СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		 ИЛИ СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		 
		    //Добавил РГ-Софт - Пронин Иван - 2009-09-21
			// Движения по регистру НачислениеАмортизации
			ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(ТекОС, "ОсновноеСредство");
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			ДвижениеВТаблице.НачислятьБУ = Ложь;
			ДвижениеВТаблице.НачислятьНУ = Ложь;
			
		КонецЕсли;
			
		//Если СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		//
		//	// списание амортизации Д 02.01 К 01.09
		//	СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;

		//	Если СуммаПроводки <> 0 Тогда

		//		Проводка = ПроводкиБУ.Добавить();

		//		Проводка.Период       = ДатаДока;
		//		Проводка.Активность   = Истина;
		//		Проводка.Организация  = ТекОрганизация;
		//		Проводка.Содержание   = "Списана амортизация";
		//		Проводка.НомерЖурнала = НомерЖурнала;
		//		Проводка.Сумма        = СуммаПроводки;
		//		
		//		Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ТекОС.Подразделение);
		//		Проводка.ПодразделениеОрганизацииДт = ТекОС.Подразделение;
		//		
		//		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
		//	//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
		//		Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;

		//	КонецЕсли;
		//	
		//ИначеЕсли СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		//	
		//	// доначисление износа Д 010
		//	СуммаПроводки = СтрокаТЧ.АмортизацияЗаМесяцБУ;

		//	Если СуммаПроводки <> 0 Тогда

		//		Проводка = ПроводкиБУ.Добавить();

		//		Проводка.Период       = ДатаДока;
		//		Проводка.Активность   = Истина;
		//		Проводка.Организация  = ТекОрганизация;
		//		Проводка.Содержание   = "Начислен износ";
		//		Проводка.НомерЖурнала = НомерЖурнала;
		//		Проводка.Сумма        = СуммаПроводки;				
		//		
		//		Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//	КонецЕсли;
		//	
		//	// списание износа К 010
		//	СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;

		//	Если СуммаПроводки <> 0 Тогда

		//		Проводка = ПроводкиБУ.Добавить();

		//		Проводка.Период       = ДатаДока;
		//		Проводка.Активность   = Истина;
		//		Проводка.Организация  = ТекОрганизация;
		//		Проводка.Содержание   = "Списан износ";
		//		Проводка.НомерЖурнала = НомерЖурнала;
		//		Проводка.Сумма        = СуммаПроводки;
		//		
		//		Проводка.СчетКт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		//Если НЕ (СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) Тогда
		//	
		//	// списание балансовой стоимости Д 01.09 К 01.01
		//	СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
		//	
		//	Если СуммаПроводки <> 0 Тогда
		//		
		//		Проводка = ПроводкиБУ.Добавить();
		//		
		//		Проводка.Период       = ДатаДока;
		//		Проводка.Активность   = Истина;
		//		Проводка.Организация  = ТекОрганизация;
		//		Проводка.Содержание   = "Списана балансовая ст-ть";
		//		Проводка.НомерЖурнала = НомерЖурнала;
		//		Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
		//		Если НЕ СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		//			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		//		Иначе
		//			Поставщик = "";
		//			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства;
		//			Запрос = Новый Запрос;
		//			Запрос.Текст = "ВЫБРАТЬ
		//			|	ХозрасчетныйОстатки.Субконто3 КАК Поставщик
		//			|ИЗ
		//			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет = &Счет, , Субконто1 = &ОС) КАК ХозрасчетныйОстатки";
		//			
		//			Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		//			Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);
		//			Запрос.УстановитьПараметр("ОС", ТекОС);
		//			
		//			Результат = Запрос.Выполнить();
		//			Выборка = Результат.Выбрать();
		//			
		//			Если Выборка.Следующий() Тогда
		//				Поставщик = Выборка.Поставщик;
		//			КонецЕсли;
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Поставщик);
		//		КонецЕсли;
		//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ТекОС.Подразделение);
		//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
		//		Проводка.ПодразделениеОрганизацииДт = ТекОС.Подразделение;
		//		
		//		Если НЕ СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
		//			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;                       
		//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
		//			//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
		//			Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;
		//		КонецЕсли;
		//	КонецЕсли;
			
			//// списание остаточной стоимости Д 91.02 К 01.09
			//Если НЕ СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства Тогда
			//	СуммаПроводки = ?(СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации,
			//					  СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ,
			//					  СтрокаТЧ.СтоимостьБУ);
			//	
			//	Если СуммаПроводки <> 0 Тогда

			//		Проводка = ПроводкиБУ.Добавить();
			//		
			//		Проводка.Период       = Дата;
			//		Проводка.Организация  = ТекОрганизация;
			//		Проводка.Содержание   = "Списана ост. стоимость";
			//		Проводка.НомерЖурнала = НомерЖурнала;
			//		Проводка.Сумма        = СуммаПроводки;

			//		Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
			//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);

			//		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
			//		Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;

			//	КонецЕсли;
			//КонецЕсли;
			
		//КонецЕсли;
		
	КонецЦикла;
	
	//ПроводкиБУ.Записать(Ложь);
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций, Отказ, Заголовок);

	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;		
	
	// Движения документа по НУ
 //   Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

 //   	НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
 //   	ПроводкиНУ              = Движения.Налоговый;
 //
 //   	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
 //   	ТабАмортизации = Новый ТаблицаЗначений;
 //   	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
 //   	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
 //   	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
 //   	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
 //   	ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
 //   	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
 //   	ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
 //   	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
 //   	ТабАмортизации.Колонки.Добавить("Подразделение");

 //   	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
 //   		
 //   		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
 //   			 И СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда
 //   			
 //   			НоваяСтрока = ТабАмортизации.Добавить();
 //   			
 //   			НоваяСтрока.Сумма                                      = СтрокаОС.АмортизацияЗаМесяцНУ;
 //   			НоваяСтрока.ОбъектУчета                                = СтрокаОС.ОсновноеСредство;
 //   			НоваяСтрока.НаправлениеАмортизации                     = СтрокаОС.Направление_НУ;
 //   			НоваяСтрока.СчетУчетаНУ                                = СтрокаОС.СчетУчетаНУ;
 //   			НоваяСтрока.СчетАмортизацииНУ                          = СтрокаОС.СчетНачисленияАмортизацииНУ;
 //   			НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
 //   			НоваяСтрока.ИмяСубконто                                = "ОсновныеСредства";
 //   			НоваяСтрока.Подразделение  		   = СтрокаОС.ОсновноеСредство.Подразделение;
 //   			
 //   		КонецЕсли;
 //   		
 //   	КонецЦикла;
 //   	
 //   	// Включение капитальных вложений в состав расходов.
 //   	ТабКапитальныхВложений = ТабАмортизации.Скопировать();
 //   	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.Сумма);
 //   	ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
 //   	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
 //   	ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
 //   	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
 //   	
 //   	// Формирование проводок по возникающим временным разницам.
 //   	Если ПоддержкаПБУ18 Тогда
 //   		ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
 //   		Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
 //   			СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
 //   		КонецЦикла;
 //   		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
 //   	КонецЕсли;

 //   	// Вызов процедуры списания амортизации по направлениям.
 //   	// Создаются движения по начислению амортизации.
 //   	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Нал", НомерЖурнала);
 //   	
 //   	Если ПоддержкаПБУ18 Тогда
 //   		// Рассчитаем разницы в амортизации на месяц списания
 //   		НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), ПроводкиНУ);
 //   	КонецЕсли;
 //   
 //   	// Создание движений документа по НУ		
 //   	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
 //   		
 //   		ТекОС = СтрокаТЧ.ОсновноеСредство;
 //   		
 //   		Если СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
 //   			
 //   			// Движения по регистру НачислениеАмортизацииНУ
 //   			Движение = НачислениеАмортизацииНУ.Добавить();
 //   			
 //   			Движение.Период               = ДатаДока;
 //   			Движение.ОсновноеСредство     = ТекОС;
 //   			Движение.Организация          = ТекОрганизация;
 //   			Движение.НачислятьАмортизацию = Ложь;
 //   			
 //   			// списание амортизации Д 02.01 К 01.09
 //   			СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
 //   			
 //   			Если СуммаПроводки <> 0 Тогда

 //   				Проводка = ПроводкиНУ.Добавить();

 //   				Проводка.Период       = ДатаДока;
 //   				Проводка.Организация  = ТекОрганизация;
 //   				Проводка.НомерЖурнала = НомерЖурнала;
 //   				Проводка.Содержание   = "Списана амортизация";
 //   				Проводка.Сумма        = СуммаПроводки;

 //   				Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииНУ;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
 //   			//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ТекОС.Подразделение);
 //					Проводка.ПодразделениеОрганизацииДт = ТекОС.Подразделение;

 //   				Проводка.СчетКт = ПланыСчетов.Налоговый.ВыбытиеОС;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
 //   				//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
 //   				Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;

 //   			КонецЕсли;
 //   		
 //   		КонецЕсли;
 //   		
 //   		Если НЕ (СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
 //   		
 //   			// списание балансовой стоимости Д 01.09 К 01.01
 //   			СуммаПроводки = СтрокаТЧ.СтоимостьНУ;
 //   			
 //   			Если СуммаПроводки <> 0 Тогда

 //   				Проводка = ПроводкиНУ.Добавить();

 //   				Проводка.Период       = ДатаДока;
 //   				Проводка.Организация  = ТекОрганизация;
 //   				Проводка.НомерЖурнала = НомерЖурнала;
 //   				Проводка.Содержание   = "Списана балансовая ст-ть";
 //   				Проводка.Сумма        = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

 //   				Проводка.СчетДт = ПланыСчетов.Налоговый.ВыбытиеОС;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
 //   				//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ТекОС.Подразделение);
 //   				Проводка.ПодразделениеОрганизацииДт = ТекОС.Подразделение;

 //   				Проводка.СчетКт = СтрокаТЧ.СчетУчетаНУ;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
 //   				//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
 //   				Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;

 //   			КонецЕсли;

 //   			// списание остаточной стоимости Д 91.02 К 01.09
 //   			СуммаПроводки = ?(СтрокаТЧ.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации,
 //   							  СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
 //   							  СтрокаТЧ.СтоимостьНУ);
 //   			
 //   			Если СуммаПроводки <> 0 Тогда
 //   				
 //   				Проводка = ПроводкиНУ.Добавить();
 //   				
 //   				Проводка.НомерЖурнала = НомерЖурнала;
 //   				Проводка.Период       = Дата;
 //   				Проводка.Организация  = ТекОрганизация;
 //   				Проводка.Содержание   = "Списана ост. стоимость";
 //   				Проводка.Сумма        = СуммаПроводки;
 //   				
 //   				Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияНУ;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
 //   				Проводка.ПодразделениеОрганизацииДт = ТекОС.Подразделение;
 //   				
 //   				Проводка.СчетКт = ПланыСчетов.Налоговый.ВыбытиеОС;
 //   				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
 //   				//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ТекОС.Подразделение);
 //   				Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;
 //   				
 //   			КонецЕсли;
 //   			
 //   		КонецЕсли;
	//		
	//	КонецЦикла;

	//	// Списание сумм капитальных вложений, включенных в состав расходов.
	//	Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
	//		
	//		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
	//	
	//			Проводка = ПроводкиНУ.Добавить();
	//			
	//			Проводка.Период       = СтруктураШапкиДокумента.Дата;
	//			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//			Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
	//			
	//			Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
	//			//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТабКапитальныхВложений.ОбъектУчета.Подразделение);
	//			Проводка.ПодразделениеОрганизацииКт = ТекОС.Подразделение;
	//	
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
	//	ПроводкиНУ.Записать(Ложь);
	//КонецЕсли; 
	
КонецПроцедуры

//Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС)
//	
//	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ПоддержкаПБУ18 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Списание разниц счета 01 и 02
//	Запрос = Новый Запрос;
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	НалоговыйОстатки.Субконто1 Как Субконто1,
//	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
//	|	0 КАК Сумма02ВР,
//	|	0 КАК Сумма01ПР,
//	|	0 КАК Сумма01ВР,
//	|	0 КАК Сумма01
//	|ИЗ
//	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
//	|
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	НалоговыйОстатки.Субконто1,
//	|	0,
//	|	НалоговыйОстатки.СуммаОстатокКт,
//	|	0,
//	|	0,
//	|	0
//	|ИЗ
//	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	НалоговыйОстатки.Субконто1,
//	|	0,
//	|	0,
//	|	НалоговыйОстатки.СуммаОстатокДт,
//	|	0,
//	|	0
//	|ИЗ
//	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
//	|
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	НалоговыйОстатки.Субконто1,
//	|	0,
//	|	0,
//	|	0,
//	|	НалоговыйОстатки.СуммаОстатокДт,
//	|	0
//	|ИЗ
//	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	НалоговыйОстатки.Субконто1,
//	|	0,
//	|	0,
//	|	0,
//	|	0,
//	|	НалоговыйОстатки.СуммаОстатокДт
//	|ИЗ
//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
//	|
//	|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
//	|Субконто1 ";

//	
//	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
//	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
//	Запрос.УстановитьПараметр("Организация",Организация);
//	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
//	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
//	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
//	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
//	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
//	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
//	Список = ОС.Выгрузить();
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
//	Пока Выборка.Следующий() Цикл
//		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
//		Если СтрокаТаблицы = NULL Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОсновноеСредство");
//		Если Выборка.Сумма01Вр <> 0 Тогда
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			
//			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
//			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
//			ПроводкаНУ.НомерЖурнала = "ВР";
//		КонецЕсли;
//		Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			
//			ПроводкаНУ.СчетДт      = СчетСписанияНУ;
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
//			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
//			ПроводкаНУ.НомерЖурнала = "ВР";
//		КонецЕсли;
//		Если Выборка.Сумма02Вр <> 0 Тогда
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			
//			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
//			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
//			ПроводкаНУ.НомерЖурнала = "ВР";
//			
//		КонецЕсли;
//		
//		Если Выборка.Сумма01Пр <> 0 Тогда
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			
//			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
//			ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
//			ПроводкаНУ.НомерЖурнала = "ПР";
//		КонецЕсли;
//		Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			ПроводкаНУ.СчетДт      = СчетСписанияНУ;
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
//			ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
//			ПроводкаНУ.НомерЖурнала = "ПР";
//		КонецЕсли;
//		Если Выборка.Сумма02Пр <> 0 Тогда		
//			ПроводкаНУ              = ПроводкиНУ.Добавить();
//			ПроводкаНУ.Период       = Дата;
//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
//			
//			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
//			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
//			ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
//			ПроводкаНУ.НомерЖурнала = "ПР";
//		КонецЕсли;
//	КонецЦикла;
//	
//	ПроводкиНУ.Записать(Ложь);
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		Если Основание.ЭтоГруппа Тогда
			
			Сообщить("Нельзя списать группу основных средств",СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// { RGS LFedotova 05.12.2018 20:46:11 - вопрос SLI-0007759
Процедура ЗаполнитьКомиссию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧленыКомиссии.ЧленКомиссии,
		|	ЧленыКомиссии.Председатель
		|ИЗ
		|	РегистрСведений.ЧленыКомиссии КАК ЧленыКомиссии
		|ГДЕ
		|	ЧленыКомиссии.ПодразделениеОрганизации = &ПодразделениеОрганизации
		|	И ЧленыКомиссии.Сегмент = &Сегмент";
	
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	Segment = ВернутьСегмент(Ссылка, Организация, Дата);
	Запрос.УстановитьПараметр("Сегмент", Segment);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Комиссия.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Председатель Тогда
			ПредседательКомиссии = ВыборкаДетальныеЗаписи.ЧленКомиссии;
		Иначе
			НоваяСтрока = Комиссия.Добавить();
			НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЧленКомиссии;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьСегмент(Документ, ТекОрганизация, ДатаСведений) Экспорт

	Если Документ.ОС.Количество() = 0  Тогда
		Возврат Справочники.Сегменты.ПустаяСсылка();
	КонецЕсли;
	
	ОсновноеСредство = Документ.ОС[0].ОсновноеСредство;
	
	Если ОсновноеСредство.Пустая() Тогда
		Возврат Справочники.Сегменты.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаЗаписей = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений, Новый Структура("ОсновноеСредство,Организация", ОсновноеСредство, ТекОрганизация));
	AU = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей.КостЦентр, Справочники.КостЦентры.ПустаяСсылка());
	Если НЕ AU.Пустая() Тогда
		Возврат AU.Segment;
	Иначе
		Возврат Справочники.Сегменты.ПустаяСсылка();
	КонецЕсли; 

КонецФункции // ()                                    

// } RGS LFedotova 05.12.2018 20:46:29 - вопрос SLI-0007759 

Процедура ОбработкаПроведения(Отказ)
	
	// { RGS LFedotova 25.10.2016 11:59:55 - вопрос SLI-0006888
	// Проверим, есть ли движения позже даты документа
	ОбщегоНазначения.ПроверитьДвиженияПозжеДатыДокумента(ЭтотОбъект, Отказ);
	// } RGS LFedotova 25.10.2016 12:00:45 - вопрос SLI-0006888
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	СписаниеОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	//Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаПроведения);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);

	 Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеОСОС.НомерСтроки,
	|	СписаниеОСОС.ОсновноеСредство,
	|	СписаниеОСОС.СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток,
	|	СписаниеОСОС.АмортизацияБУ,
	|	СписаниеОСОС.АмортизацияЗаМесяцБУ,
	|	СписаниеОСОС.СтоимостьНУ,
	|	СписаниеОСОС.АмортизацияНУ,
	|	СписаниеОСОС.АмортизацияЗаМесяцНУ,
	|	СписаниеОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНУ,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&ДатаДокумента,
	|		    ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаНалоговогоУчетаОССрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В( " + СписокОС + " ) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО СписаниеОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаДокумента, ОсновноеСредство В ( " + СписокОС + " ))  КАК СтоимостьАмортизацияОСОстатки
	|		ПО СписаниеОСОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по ОС.
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		//ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата);	
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		//ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоОС);
		
		Для Каждого СтрокаОС Из ОС Цикл 
			Если СтрокаОС.ОсновноеСредство.Автотранспорт Тогда
				Попытка 
					Запись = РегистрыСведений.РегистрацияВГАИ.СоздатьМенеджерЗаписи();
					Запись.Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					Запись.РегистрационныйЗнак = "";
					Запись.ОС = СтрокаОС.ОсновноеСредство;
					Запись.Период = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения); 
					Запись.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОСЗаполнитьДляСписка(ЭтотОбъект);
	КонецЕсли;

	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры
