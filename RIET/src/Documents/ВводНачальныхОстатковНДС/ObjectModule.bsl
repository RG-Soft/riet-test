Перем мВалютаРегламентированногоУчета Экспорт;

Перем мВестиУчетНДС Экспорт;

Перем мУчетнаяНУПолитикаПоДатам Экспорт; 

Перем мУчетнаяБУПолитикаПоДатам Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьРасчетыСКонтрагентами() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Ложь));
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Истина));
	Иначе 
		СтрокиКУдалению = Неопределено;
	КонецЕсли;
	
	Если СтрокиКУдалению <> Неопределено Тогда
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуРасчетов(), РасчетыСКонтрагентами);
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	"СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	//Удаление строк с нулевой суммой
	
	Если СтрокиКУдалению = Неопределено Тогда							   
		СтрокиКУдалению = Новый Массив;
	Иначе
		СтрокиКУдалению.Очистить();
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из РасчетыСКонтрагентами Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСФРасчетыСКонтрагентами() Экспорт
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	
	ТаблицаРасчетов.Колонки.Добавить("ДатаСФ", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для Каждого СтрокаТЧ Из ТаблицаРасчетов Цикл
		Если СтрокаТЧ.Аванс Тогда
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.ДокументОплаты.Дата;
			КонецЕсли;
		Иначе
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.СчетФактура.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРасчетов.Сортировать("ДатаСФ");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом");
	
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		
		СтрокаРасчетов.СчетФактура = Неопределено;
		
		РасчетыВВалюте = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
		(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета));
		
		Если  (Не РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.СуммаВзаиморасчетов)) Или 
			(РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		
		СтрокиСФ = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаСФ Из СтрокиСФ Цикл
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов[КолонкаСФ]) Тогда
				Прервать;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ[КолонкаСФ]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РасчетыВВалюте и Не СтрокаРасчетов.РасчетыСБюджетом Тогда
				Если  ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ.ВалютнаяСуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов > СтрокаСФ.ВалютнаяСуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = СтрокаСФ.ВалютнаяСуммаВзаиморасчетов;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
						НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
						НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НоваяСтрока.ВалютнаяСуммаВзаиморасчетов, 
					НоваяСтрока.ВалютаВзаиморасчетов, 
					мВалютаРегламентированногоУчета,
					НоваяСтрока.КурсВзаиморасчетов, 1,
					НоваяСтрока.КратностьВзаиморасчетов, 1);
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов - НоваяСтрока.ВалютнаяСуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
					СтрокаРасчетов.ВалютаВзаиморасчетов, 
					мВалютаРегламентированногоУчета,
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов), 1,
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов), 1);
					СтрокаСФ.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
						СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
						СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
					СтрокаРасчетов.ВалютаВзаиморасчетов, 
					мВалютаРегламентированногоУчета,
					СтрокаРасчетов.КурсВзаиморасчетов, 1,
					СтрокаРасчетов.КратностьВзаиморасчетов, 1);
					
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			Иначе
				Если  ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаСФ.СуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.СуммаВзаиморасчетов > СтрокаСФ.СуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = СтрокаРасчетов.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетов;
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
					мВалютаРегламентированногоУчета,
					СтрокаРасчетов.ВалютаВзаиморасчетов, 
					1, ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов),
					1, ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов));
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
							НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
							НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаВзаиморасчетов, 
						мВалютаРегламентированногоУчета,
						НоваяСтрока.ВалютаВзаиморасчетов, 
						1, НоваяСтрока.КурсВзаиморасчетов, 
						1, НоваяСтрока.КратностьВзаиморасчетов);
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
							СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
							СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
						мВалютаРегламентированногоУчета,
						СтрокаРасчетов.ВалютаВзаиморасчетов, 
						1, СтрокаРасчетов.КурсВзаиморасчетов, 
						1, СтрокаРасчетов.КратностьВзаиморасчетов);
						
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	"СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	
КонецПроцедуры

Функция ПолучитьТаблицуРасчетов() Экспорт
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
	
	КолонкиТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты;
	
	Для Каждого Колонка Из КолонкиТЧ Цикл
		ТаблицаРезультатов.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
	КонецЦикла;
	ТаблицаРезультатов.Колонки.Добавить("ПодразделениеОрганизации");
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.ПодразделениеОрганизации 	= СтрокаСФ.ПодразделениеОрганизации;
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
					ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС - ДополнительнаяСтрока.СуммаБезНДСОплата;
				Иначе
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				КонецЕсли;
				
				СтруктураКурсаВзаиморасчетов 							= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов, СтрокаРасчетовСКонтрагентами.СчетФактура.Дата);
				СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
				СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
				
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов, 
				мВалютаРегламентированногоУчета,
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, 
				1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
				1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаРасчетовСКонтрагентами.Контрагент,СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента);
				
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда	
					СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
					ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
					
					СтрокаРасчетовСКонтрагентами 					= ТаблицаРезультатов.Добавить();
					СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
					СтрокаРасчетовСКонтрагентами.Контрагент 		= СтрокаСФ.Контрагент;
					СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента = СтрокаСФ.ДоговорКонтрагента;
					СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
					СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= ДополнительнаяСтрока.НДС - ДополнительнаяСтрока.НДСОплата;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.ПодразделениеОрганизации	= СтрокаСФ.ПодразделениеОрганизации;
				СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
				СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= ДополнительнаяСтрока.НДС - ДополнительнаяСтрока.НДСОплата;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Истина;
				СтрокаРасчетовСКонтрагентами.ПодразделениеОрганизации	= СтрокаСФ.ПодразделениеОрганизации;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.ДокументОплаты				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов		= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Если СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов = СтрокаСФ.ВалютаАванса Тогда
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов			= ?(ДополнительнаяСтрока.ВалютнаяСуммаСНДС = 0, 1, (ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС)/ДополнительнаяСтрока.ВалютнаяСуммаСНДС);
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
				Иначе
					СтруктураКурсаВзаиморасчетов 							= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
					
				КонецЕсли; 
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов,
				мВалютаРегламентированногоУчета, СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов,
				1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
				1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаРасчетовСКонтрагентами.Контрагент,СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента);
				СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выводит сообщение об ошибке 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения не вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  СтатусСообщения
//
Процедура СообщитьОбОшибкеБезОстановкиПроведения(ТекстСообщения, Заголовок = "",Статус)
	
	#Если не ВнешнееСоединение Тогда
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация";
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ОбязательныеРеквизиты = "";
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		ОбязательныеРеквизиты = "Контрагент" + ?(Не ПереходСРедакции10, ", ДоговорКонтрагента", "");
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + "СчетФактура";
	КонецЕсли;
	//Проверка основной таблицы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Если не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + 
			"ДатаСФ, НомерСФ, ДатаПлатежноРасчетногоДокумента,ВалютаАванса";//, НомерПлатежноРасчетногоДокумента
		Иначе
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + "ВалютаАванса"; 
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Если не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + "ДатаСФ, НомерСФ"; 
		КонецЕсли;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
	КонецЕсли;
	
	
	//Проверка заполнения обязательных реквизитов
	Если СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", Новый Структура("СчетФактура"),Отказ, Заголовок);
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", Новый Структура(ОбязательныеРеквизиты),Неопределено, Заголовок);
	Иначе	
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
	КонецЕсли; 
	
	Если ПереходСРедакции10 Тогда
		Для Каждого СтрокаТЧ Из ДанныеПоСФ Цикл
			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетФактура) И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
				МетаданныеДокумента = СтрокаТЧ.СчетФактура.Метаданные();
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ табличной части ""Данные по СФ"" должна быть заполнена колонка ""Договор контрагента""", ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;					
	//Проверка таблицы дополнительных сведений
	ОбязательныеРеквизиты = "ВидЦенности, СтавкаНДС";
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДополнительныеСведения", Новый Структура(ОбязательныеРеквизиты), ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Процедура проверяет корректность заполнения реквизитов таб. части "ДополнительныеСведения" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для Каждого СтрокаТЧ Из ДополнительныеСведения Цикл
		Если ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям) И
			(СтрокаТЧ.СуммаБезНДССтроительство <> 0 Или СтрокаТЧ.НДССтроительство <> 0 Или СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию <> 0 Или СтрокаТЧ.НДСВведеноВЭксплуатацию <> 0) 
			Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
			И (ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ОбъектСтроительства)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка " + 
			?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, """Основное средство""", """Объект Вн.А.""") + "!", 
			?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, Отказ, Неопределено), 
			Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным И
			СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 И
			ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДокументОтгрузки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка ""Документ отгрузки""!", , Заголовок);
		КонецЕсли;
		Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям И
			(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДС) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСВключеноВСтоимость) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДССтроительство) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию)
			ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДССтавка0) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСПодтверждено0 ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСНеПодтверждено0) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявлено)
			ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявлено) ИЛИ Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявленоНеПодтверждено0)))) 
			И (ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетУчетаНДС)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка ""Счет учета НДС""!", , Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов таб. части "РасчетыСКонтрагентами" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для Каждого СтрокаТЧ Из РасчетыСКонтрагентами Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части ""Расчеты с контрагентами"": ";
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления И
			ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Контрагент""!", ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления И
			ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Договор контрагента""!", ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
		КонецЕсли;
		Если СтрокаТЧ.Аванс Тогда
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Документ оплаты""!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Счет-фактура""!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаВзаиморасчетов) Тогда
			СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма расчетов, руб.""!",Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если Не СтрокаТЧ.РасчетыСБюджетом Тогда
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ВалютаВзаиморасчетов) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Валюта взаиморасчетов""!", ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
			Иначе
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.КурсВзаиморасчетов) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Курс взаиморасчетов""!", ?(СтруктураШапкиДокумента.ПереходСРедакции10, Неопределено, Отказ), Заголовок);
				КонецЕсли;
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.ВалютнаяСуммаВзаиморасчетов) Тогда
					СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма взаиморасчетов, вал.""!",Заголовок,СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	ТаблицаРасчетов.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	"СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	//Удаление строк с нулевой суммой
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаРасчетов.Колонки.Добавить( "ФлагУдалить", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.ЗаполнитьЗначения( Ложь, "ФлагУдалить");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом, " + КолонкаСФ);
	
	ПровереноСтрок = 0;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		РасчетыВВалюте = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
		(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета) И СтрокаРасчетов.Аванс);
		
		СуммаВзаиморасчетов = ?(РасчетыВВалюте, СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетов);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		СтруктураОтбора[КолонкаСФ]				= СтрокаРасчетов[КолонкаСФ];
		
		СтрокиОсновныеДанные = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОсновныеДанные Из СтрокиОсновныеДанные Цикл
			Если (РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СуммаВзаиморасчетов) Тогда 
				ПровереноСтрок = ПровереноСтрок + 1;
				Прервать;
			КонецЕсли;
			
			Если РасчетыВВалюте Тогда
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов;
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.СуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.СуммаВзаиморасчетов ;
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = СтрокаОсновныеДанные.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			КонецЕсли;
			Если (РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаРасчетов.Количество() - 1;
	Индекс = ВсегоСтрок;
	Пока Индекс >= 0 Цикл
		Если ТаблицаРасчетов[Индекс].ФлагУдалить Тогда
			ТаблицаРасчетов.Удалить(ТаблицаРасчетов[Индекс]);
			ВсегоСтрок = ВсегоСтрок - 1;
			Индекс = Мин(Индекс, ВсегоСтрок);
		Иначе
			Индекс = Индекс - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРасчетов.Количество() > 0 Или ПровереноСтрок < СтрокиРасчетов.Количество() Тогда
		Сообщить("Информация о задолженности на закладке """ + ?(ЭтоАванс, "авансы", "расчеты с контрагентами") + """ не соответствует основным данным по остаткам", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос и выгружает таблицу в развороте по событиям для отражения в регистре НДС.
//
// Параметры: 
//  РезультатЗапросаПоСтрокам - результат запроса по табличной части "ДанныеПоСФ",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("СчетУчетаНДС0",	ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	Запрос.УстановитьПараметр("СчетУчетаНДССтр",ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
	
	СоответствиеСобытияИколонки  = новый Соответствие();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,	"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСОплачен,				"НДСОплата");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,"НДССтроительство");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,	"НДСВведеноВЭксплуатацию");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,		"НДСВключеноВСтоимость");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,	"НДССтавка0");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 	"НДСПредъявлено");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0,	"НДСПредъявлено0");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Реализация,				"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Оплата,					"НДСОплата");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.ПолученАванс,				"НДС");
	КонецЕсли; 
	
	Счетчик = 0;
	ТекстЗапроса = "";
	Для каждого Событие из СоответствиеСобытияИколонки Цикл
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Событие.Ключ);
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПокупки") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Событие.Ключ));
		ИначеЕсли ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПродажи.Индекс(Событие.Ключ));
		Иначе
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Счетчик);
		КонецЕсли; 
		
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПодразделениеОрганизации,
		|	ОсновныеДанные.ПредъявленСФ,";
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			ПустыеВалюты = новый массив();
			ПустыеВалюты.Добавить(Справочники.Валюты.ПустаяСсылка());
			ПустыеВалюты.Добавить(Неопределено);
			Запрос.УстановитьПараметр("ПустыеВалюты",ПустыеВалюты);
			Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
			ТекстЗапроса = ТекстЗапроса +"
			|	(выбор когда ОсновныеДанные.ВалютнаяСуммаСНДС = 0 или (ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютаАванса = &мВалютаРегламентированногоУчета) тогда Расшифровка.СуммаБез"+Событие.Значение+" + Расшифровка."+Событие.Значение+" иначе Расшифровка.ВалютнаяСуммаСНДС конец) как ВалютнаяСуммаСНДС,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютнаяСуммаСНДС = 0 тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ВалютаДокумента,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ОргигинальнаяВалютаАванса,
			|	СвязанныйСФ.СчетФактура,";
		Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетФактура,";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|	Расшифровка.ВидЦенности,
		|	Расшифровка.СтавкаНДС,";
		
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	Неопределено  как СчетУчетаНДС,";
		ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	&СчетУчетаНДССтр  как СчетУчетаНДС,";
		Иначе	
			ТекстЗапроса = ТекстЗапроса +"
			|	Расшифровка.СчетУчетаНДС  как СчетУчетаНДС,";
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса +"
		|	Расшифровка.СуммаБез"+Событие.Значение+" как СуммаБезНДС,
		|	Расшифровка."+Событие.Значение+" как НДС,
		|	Расшифровка.Номенклатура,
		|	Расшифровка.СчетЗатрат,
		|	Расшифровка.Субконто1,
		|	Расшифровка.Субконто2,
		|	Расшифровка.Субконто3,
		|	ОсновныеДанные.КлючСтроки,
		|	Расшифровка.НомерСтроки";
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям  
			Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей	
			тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.НДСОплачен 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Оплата 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура иначе Расшифровка.ДокументОплаты Конец как ДокументОплаты
				|	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура.дата иначе Расшифровка.ДокументОплаты.дата Конец как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Реализация 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				//Заполнение даты события далее
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	";
				
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
		Иначе
			Если Событие.Ключ = Перечисления.СобытияПоНДСПродажи.ПолученАванс тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
			
		КонецЕсли; 
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда Расшифровка.ДокументОтгрузки = Неопределено тогда ОсновныеДанные.Ссылка.дата иначе Расшифровка.ДокументОтгрузки.дата Конец как ДатаСобытия
				|	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";
				
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОтгрузки";
			КонецЕслИ;	 
			
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +"
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки";
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			ТекстЗапроса = ТекстЗапроса +"
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
			|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|	
			|ГДЕ
			|	(СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)) КАК СвязанныйСФ
			|	ПО ОсновныеДанные.ДоговорКонтрагента = СвязанныйСФ.ДоговорКонтрагента И ОсновныеДанные.СчетФактура = СвязанныйСФ.ДокументОснование
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	Расшифровка.Ссылка = &Ссылка и
		|	(Расшифровка.СуммаБез"+Событие.Значение+" <> 0 или Расшифровка."+Событие.Значение+" <> 0)";
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура));
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПредъявленСФ,
		|	ОсновныеДанные.СчетФактура,
		|	ОсновныеДанные.ПодразделениеОрганизации,
		|	Расшифровка.ВидЦенности,
		|	Расшифровка.СтавкаНДС,
		|	Расшифровка.СчетУчетаНДС,
		|	Расшифровка.СуммаБезНДС,
		|	Расшифровка.НДС,
		|	Расшифровка.Номенклатура,
		|	Расшифровка.СчетЗатрат,
		|	Расшифровка.Субконто1,
		|	Расшифровка.Субконто2,
		|	Расшифровка.Субконто3,
		|	ОсновныеДанные.КлючСтроки,
		|	Расшифровка.НомерСтроки
		|	, Неопределено как ДокументОплаты
		|	, ОсновныеДанные.СчетФактура.Дата как ДатаСобытия
		|	, Неопределено как ДокументОтгрузки
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	Расшифровка.Ссылка = &Ссылка и
		|	(Расшифровка.СуммаБезНДС <> 0 или Расшифровка.НДС <> 0)
		|	и ОсновныеДанные.ПредъявленСФ = Истина ";
	КонецЕсли; 
	Если Счетчик = 0  Тогда
		Возврат новый ТаблицаЗначений();
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.НомерСтроки,
	|	ПорядокСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции // ПодготовитьТаблицуРазвернутуюПоСобытиям()

// Формирует запрос и выгружает таблицу для формирования проводок по виду операции "НДС по приобретенным ценностям".
Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	Расшифровка.ВидЦенности,
	|	Расшифровка.ОбъектСтроительства,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.СчетЗатрат,
	|	Расшифровка.Субконто1,
	|	Расшифровка.Субконто2,
	|	Расшифровка.Субконто3,
	|	Расшифровка.НДС,
	|	Расшифровка.НДСОплата,
	|	Расшифровка.НДССтроительство,
	|	Расшифровка.НДСВведеноВЭксплуатацию,
	|	Расшифровка.НДСВключеноВСтоимость,
	|	Расшифровка.НДССтавка0,
	|	Расшифровка.НДСПредъявлено,
	|	Расшифровка.НДСПредъявлено0,
	|	Расшифровка.НДС - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0 КАК НДСНаСчетУчета,
	|	Расшифровка.НДССтавка0 - Расшифровка.НДСПредъявлено0 - Расшифровка.НДСПредъявленоНеПодтверждено0 КАК НДСНаСчет0,
	|	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	|	Расшифровка.НомерСтроки КАК НомерСтроки,
	|	Расшифровка.ДокументОтгрузки
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|	И Расшифровка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки,
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки()	

// Формирует запрос и выгружает таблицу для формирования проводок по видам операций "НДС по авансам полученным" и "НДС неполученный от покупателей".
Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Авансы0", Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	Расшифровка.НДС "+?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей,"- Расшифровка.НДСОплата","")+" КАК НДСНаСчетУчета,
	|	" + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "ВЫБОР КОГДА Расшифровка.ВидЦенности = &Авансы0 ТОГДА Расшифровка.НДСПредъявлено0 + Расшифровка.НДСПредъявленоНеПодтверждено0 ИНАЧЕ Расшифровка.НДСОплата КОНЕЦ", "0") + " КАК НДСКВычету
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	|
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка И
	|	Расшифровка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи()	

// Формирует запрос и выгружает таблицу для формирования проводок по расчетам с контрагентами.
Функция ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Ссылка.Организация,
	|	РасчетыСКонтрагентами.Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.СчетФактура,
	|	РасчетыСКонтрагентами.СчетФактура.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РасчетыСКонтрагентами.ДокументОплаты,
	|	РасчетыСКонтрагентами.СчетУчетаРасчетовСКонтрагентом,
	|	РасчетыСКонтрагентами.СуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютнаяСуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.СчетУчетаРасчетовСКонтрагентом.Валютный КАК СчетУчетаРасчетовСКонтрагентомВалютный,
	|	РасчетыСКонтрагентами.РасчетыСБюджетом,
	|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	|	РасчетыСКонтрагентами.Аванс КАК Аванс,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.ДокументОплаты.Дата, &ПустаяДата) КАК ДокументОплатыДата
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаДокумента;
	
КонецФункции  //ПодготовитьТаблицуПоРасчетам()

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по приобретенным ценностям"
//
Функция ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Поставщик,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	Расшифровка.ВидЦенности,
	|	Расшифровка.Номенклатура,
	|	СУММА(Расшифровка.НДС) КАК НДС,
	|	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	|	СУММА(Расшифровка.НДССтроительство) КАК НДССтроительство,
	|	СУММА(Расшифровка.НДСВведеноВЭксплуатацию) КАК НДСВведеноВЭксплуатацию,
	|	СУММА(Расшифровка.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	|	СУММА(Расшифровка.НДССтавка0) КАК НДССтавка0,
	|	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(Расшифровка.НДС - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0) КАК НДСНаСчетУчета,
	|	СУММА(Расшифровка.НДССтавка0 - Расшифровка.НДСПредъявлено0) КАК НДСНаСчет0,
	|	СУММА(ВЫБОР
	|			КОГДА Расшифровка.НДССтроительство = 0
	|				ТОГДА 0
	|			КОГДА Расшифровка.НДСПредъявлено = 0
	|					ИЛИ Расшифровка.НДС = 0
	|				ТОГДА Расшифровка.НДССтроительство
	|			КОГДА Расшифровка.НДСВведеноВЭксплуатацию = 0
	|				ТОГДА ВЫБОР
	|						КОГДА -Расшифровка.НДС - Расшифровка.НДССтроительство - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0 > Расшифровка.НДССтроительство
	|							ТОГДА Расшифровка.НДССтроительство
	|						ИНАЧЕ -Расшифровка.НДС - Расшифровка.НДССтроительство - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0
	|					КОНЕЦ
	|			ИНАЧЕ Расшифровка.НДССтроительство
	|		КОНЕЦ) КАК НДСНаСчетСтроительства,
	|	ВЫБОР
	|		КОГДА Расшифровка.НДССтроительство > 0
	|				И Расшифровка.НДС > 0
	|				И Расшифровка.НДСПредъявлено > 0
	|				И Расшифровка.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспределитьВычетПоСтроительству,
	|	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	|	Расшифровка.ДокументОтгрузки,
	|	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	СУММА(Расшифровка.СуммаБезНДССтроительство) КАК СуммаБезНДССтроительство,
	|	СУММА(Расшифровка.СуммаБезНДСВведеноВЭксплуатацию) КАК СуммаБезНДСВведеноВЭксплуатацию,
	|	СУММА(Расшифровка.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	|	СУММА(Расшифровка.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.СчетЗатрат КАК СчетУчетаЦенности,
	|	Расшифровка.ОбъектСтроительства КАК Объект,
	|	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	|	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	|	ОсновныеДанные.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	Расшифровка.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	Расшифровка.НеВлияетНаВычет,
	|	ОсновныеДанные.ПодразделениеОрганизации
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|	И Расшифровка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.ДокументОтгрузки,
	|	Расшифровка.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	Расшифровка.Номенклатура,     
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.КлючСтроки,
	|	ВЫБОР
	|		КОГДА Расшифровка.НДССтроительство > 0
	|				И Расшифровка.НДС > 0
	|				И Расшифровка.НДСПредъявлено > 0
	|				И Расшифровка.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.СчетЗатрат,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.ОбъектСтроительства,
	|	Расшифровка.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.Ссылка.Дата,
	|	Расшифровка.НеВлияетНаВычет,
	|	ОсновныеДанные.ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС неоплаченный покупателями"
//
Функция ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	Расшифровка.ВидЦенности,
	|	СУММА(Расшифровка.НДС) КАК НДС,
	|	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	|	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	|	Расшифровка.ДокументОтгрузки,
	|	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.ОбъектСтроительства КАК Объект,
	|	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	|	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	|	ОсновныеДанные.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	|	Расшифровка.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	Расшифровка.Номенклатура,
	|	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	Расшифровка.СтавкаНДСНеПодтверждена0,
	|	ОсновныеДанные.AU
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|	И Расшифровка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.ДокументОтгрузки,
	|	Расшифровка.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.ОбъектСтроительства,
	|	Расшифровка.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	Расшифровка.Номенклатура,
	|	ОсновныеДанные.Ссылка.Дата,
	|	Расшифровка.СтавкаНДСНеПодтверждена0,
	|	ОсновныеДанные.AU
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по авансам полученным"
//
Функция ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	Расшифровка.ВидЦенности,
	|	СУММА(Расшифровка.НДС) КАК НДС,
	|	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	|	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	Расшифровка.СтавкаНДС,
	|	Расшифровка.СчетУчетаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	|	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	ОсновныеДанные.ВалютаАванса,
	|	СУММА(Расшифровка.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура КАК СчетФактура,
	|	Расшифровка.ДокументОтгрузки,
	|	Расшифровка.ДокументОтгрузки.Дата КАК ДатаОплаты,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА Расшифровка.ВалютнаяСуммаСНДС = 0
	|				ТОГДА 1
	|			ИНАЧЕ (Расшифровка.СуммаБезНДС + Расшифровка.НДС) / Расшифровка.ВалютнаяСуммаСНДС
	|		КОНЕЦ) КАК КурсАванса,
	|	ОсновныеДанные.AU,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	ОсновныеДанные.КурсВзаиморасчетов
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	|		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|	И Расшифровка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.СчетУчетаНДС,
	|	Расшифровка.СтавкаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.ВалютаАванса,
	|	Расшифровка.ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура,
	|	Расшифровка.ДокументОтгрузки,
	|	Расшифровка.ДокументОтгрузки.Дата,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.AU,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	ОсновныеДанные.КурсВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура дополняет структуру шапки флагом ПроводитьПоПодсистемеНДС
//
Процедура ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПодсистемеНДС", ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаРасчетов, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если ТаблицаДокумента.Количество() = 0 И ТаблицаРасчетов.Количество() = 0 И ТаблицаПоДвижениям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	КонецЕсли;

	СформироватьПроводкиПоРасчетамСКонтрагентами(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования проводок по входящему НДС 
//
Процедура СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Если СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	ИначеЕсли не СтруктураШапкиДокумента.ФормироватьПроводки тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		
		Если СтрокаДок.НДСНаСчет0<>0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Нач. ост.: НДС полученный, предп. 0%";
			
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаДок.ДокументОтгрузки);
			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчет0;
			
		КонецЕсли; 
		
		Если СтрокаДок.НДСНаСчетУчета <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = ?(СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами, 
			"Нач. ост.: НДС по строительству хоз. способом",
			"Нач. ост.: НДС полученный");
			
			Проводка.СчетДт       = СтрокаДок.СчетУчетаНДС;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			Если ТипЗнч(СтрокаДок.Субконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.Субконто1);
			ИначеЕсли ТипЗнч(СтрокаДок.Субконто2) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.Субконто2);
			ИначеЕсли ТипЗнч(СтрокаДок.Субконто3) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.Субконто3);
			ИначеЕсли ТипЗнч(СтрокаДок.ОбъектСтроительства) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.ОбъектСтроительства);
			КонецЕсли;
			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПоставщиков()

// Процедура формирования проводок по неоплаченному покупателями НДС 
//
Процедура СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Если СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	ИначеЕсли не СтруктураШапкиДокумента.ФормироватьПроводки тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		Если СтрокаДок.НДСНаСчетУчета=0 Тогда
			//Нет необходимости формировать проводку с 0 суммой.
			Продолжить;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
			
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаДок.СчетФактура);
			
			Проводка.СчетКт       = Счет000;
			
			Если СтрокаДок.НДСКВычету <> 0 Тогда
				
				Проводка2 = Движения.Хозрасчетный.Добавить();
				
				Проводка2.Период       = СтруктураШапкиДокумента.Дата;
				Проводка2.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка2.СчетДт       = Счет000;
				
				Проводка2.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
				Проводка2.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
				
				ОбщегоНазначения.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
				ОбщегоНазначения.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "СФВыданные", СтрокаДок.СчетФактура);
				
				Проводка2.Сумма = СтрокаДок.НДСКВычету;
				
			КонецЕсли;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			
		Иначе
			УчетнаяПолитикаНал = ПолучитьПараметрыУчетнойПолитикиЛокально(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДок.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаДок.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаДок.СчетФактура);
			МоментОпределенияНалоговойБазыНДС = ?(УчетнаяПолитикаНал.Свойство("МоментОпределенияНалоговойБазыНДС"), УчетнаяПолитикаНал.МоментОпределенияНалоговойБазыНДС, Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
			
			Если МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Нач. ост.: НДС неоплаченный покупателем";
				Проводка.СчетДт       =  Счет000;
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные",    СтрокаДок.СчетФактура);
				Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			КонецЕсли;
		КонецЕсли; 
		
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПокупателей()

// Процедура формирования проводок по расчетам с контрагентами
Процедура СформироватьПроводкиПоРасчетамСКонтрагентами(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ, Заголовок)
	Если Не СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами 
		Или Не СтруктураШапкиДокумента.ФормироватьПроводки
		Или СтруктураШапкиДокумента.ПереходСРедакции10 
		Или ТаблицаРасчетов.Количество()=0 
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		
		Если СтрокаТаблицы.РасчетыСБюджетом Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
			
			Проводка.Содержание   = "Нач. ост.: расчеты с покупателем";
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СчетФактура);
			
			//добавил Трефиленков Дмитрий, РГ-Софт
			Попытка
				Проводка.ПодразделениеОрганизацииДт = СтрокаТаблицы.СчетФактура.ПодразделениеОрганизации;
			Исключение
			КонецПопытки;
			//конец добавления
			
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
				Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			КонецЕсли; 
			
			Проводка.СчетКт       = Счет000;
			
		Иначе
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
				Проводка.Содержание   = "Нач. ост.: расчеты по авансам и предопл.";
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
				Проводка.Содержание   = "Нач. ост.: расчеты с поставщиком";
			КонецЕсли;
			
			Если СтрокаТаблицы.Аванс И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
				Проводка.СчетКт       =  Счет000;
				
				Проводка.СчетДт       =  СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.ДокументОплаты);
				
				Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
					Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
				КонецЕсли; 
			Иначе
				Проводка.СчетДт       =  Счет000;
				
				Проводка.СчетКт       =  СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", 
				?(СтрокаТаблицы.Аванс, 
				СтрокаТаблицы.ДокументОплаты, 
				СтрокаТаблицы.СчетФактура));
				
				Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
					Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;			 
			
		КонецЕсли; 
		Проводка.Сумма        = СтрокаТаблицы.СуммаВзаиморасчетов;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается из обработчика события "ПослеЗаписи".
// Осуществляет обновление ссылок на текущий документ у документов
// "Отражение поступления товаров и услуг для НДС", "Отражение 
// реализации товаров и услуг для НДС" и "Счет-фактура выданный"
// выбранных в табличной части.
//
Процедура ОбновитьСсылкиВПодчиненныхДокументах()
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСчета Из ДанныеПоСФ Цикл
		
		ТекСФ = СтрокаСчета.СчетФактура;
		
		Если ТекСФ <> Неопределено Тогда
			ТекСФ = ТекСФ.ПолучитьОбъект(); 
			
			Если ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ДокументРасчетовСКонтрагентом") Тогда
				ТекСФ.ДокументОснование = Ссылка;
			ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеНачисленияНДС") Тогда
				ТекСФ.РасчетныйДокумент = Ссылка;
			ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС") Тогда
				ТекСФ.РасчетныйДокумент = Ссылка;
			КонецЕсли;
			
			ТекСФ.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движения по НДС предъявленному постащиком
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленный = Движения.НДСПредъявленный;
	
	ТаблицаДвиженийНДСПредъявленный = ДвиженияНДСПредъявленный.Выгрузить();
	// НДС предъявленный поставщиком
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			СтрокаДвижения.Поставщик = Неопределено;
		КонецЕсли;
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьПриход();
		
	КонецЕсли;	
	
	// НДС включенный в стоимость
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		ТаблицаДвиженийНДСПредъявленный.Очистить();
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
		ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
		
		Если Не Отказ Тогда
			
			ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
			ДвиженияНДСПредъявленный.ВыполнитьРасход();
			
		КонецЕсли;	
	КонецЕсли;
	
	// НДС принятый к вычету
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ТаблицаКВычету = ТаблицаПоДвижениям.Скопировать();
	ТаблицаКВычету.Свернуть("Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДатаСобытия",
	"СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСПредъявлено0, НДСПредъявлено0, 
	|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");
	
	// НДС принятый к вычету						
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено.Имя = "НДС";
	ТаблицаКВычету.Колонки.Добавить("Событие");
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС включенному в стоимость
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость;
	
	ТаблицаДвиженийНДСВключенныйВСтоимость = ДвиженияНДСВключенныйВСтоимость.Выгрузить();
	ТаблицаДвиженийНДСВключенныйВСтоимость.Очистить();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСВключенныйВСтоимость);
	Если Не Отказ Тогда
		
		ДвиженияНДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		ДвиженияНДСВключенныйВСтоимость.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с поставщиками
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками;
	
	ТаблицаДвиженийНДСРасчетыСПоставщиками = ДвиженияНДСРасчетыСПоставщиками.Выгрузить();
	// Долг перед поставщиком
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Очистить();
	
	СтрокиРасчетов = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Ложь));
	
	Для Каждого СтрокаТаблицы из СтрокиРасчетов Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация				= СтрокаТаблицы.Организация;
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			СтрокаДвижения.Поставщик			= СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.ВалютаРасчетов		= СтрокаТаблицы.ВалютаВзаиморасчетов;
			СтрокаДвижения.ВалютнаяСумма		= СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
		КонецЕсли;
		СтрокаДвижения.Документ					= СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.РасчетыСБюджетом			= СтрокаТаблицы.РасчетыСБюджетом;
		СтрокаДвижения.Сумма					= СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия				= СтрокаТаблицы.СчетФактураДата;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Движения по авансам выданным
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Очистить();
	СтрокиАванса = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Истина));
	Для Каждого СтрокаТаблицы Из СтрокиАванса Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
		СтрокаДвижения.Поставщик			= СтрокаТаблицы.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаДвижения.Документ				= СтрокаТаблицы.ДокументОплаты;
		СтрокаДвижения.РасчетыСБюджетом		= Ложь;
		СтрокаДвижения.ВалютаРасчетов		= СтрокаТаблицы.ВалютаВзаиморасчетов;
		СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ВалютнаяСумма		= СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия			= СтрокаТаблицы.ДокументОплатыДата;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Распределенный НДС
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
	
	Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС И СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
			СтрокаДвижения.Организация		= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура		= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.ДокументОплаты	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОплаты), СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			СтрокаДвижения.РасчетыСБюджетом	= Ложь;
			СуммаДвижения					= СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			СтрокаДвижения.РаспределеннаяСумма = СуммаДвижения;
			СтрокаДвижения.ДатаСобытия		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОплаты), 
												СтрокаТаблицы.СчетФактура.Дата, 
												СтрокаТаблицы.ДокументОплаты.Дата);
			
		Иначе
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
			СтрокаДвижения.Организация		= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура		= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.ДокументОплаты	= СтрокаТаблицы.ДокументОплаты;
			СтрокаДвижения.РасчетыСБюджетом	= Истина;
			СтрокаДвижения.РаспределеннаяСумма = СтрокаТаблицы.НДСОплата;
			СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактура.Дата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк с пустой распределенной суммой
	СтрокиКУдалению = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.НайтиСтроки(Новый Структура("РаспределеннаяСумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() > 0 Тогда
		
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьПриход();
		
	КонецЕсли;
	
	// НДС к вычету
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
	
	Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС И СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
			СтрокаДвижения.Организация		= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура		= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.ДокументОплаты	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОплаты), СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			СтрокаДвижения.РасчетыСБюджетом	= Ложь;
			СуммаДвижения = СтрокаТаблицы.СуммаБезНДСПредъявлено + СтрокаТаблицы.НДСПредъявлено + 
							СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.НДСПредъявлено0 + 
							СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
			СтрокаДвижения.РаспределеннаяСумма = СуммаДвижения;
			СтрокаДвижения.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
			
		Иначе
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
			СтрокаДвижения.Организация		= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура		= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.ДокументОплаты	= СтрокаТаблицы.ДокументОплаты;
			СтрокаДвижения.РасчетыСБюджетом	= Истина;
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.РаспределеннаяСумма = СтрокаТаблицы.НДСПредъявлено + 
														СтрокаТаблицы.НДСПредъявлено0 + 
														СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
			Иначе
				СтрокаДвижения.РаспределеннаяСумма = СтрокаТаблицы.НДСПредъявлено;
			КонецЕсли;
			
			СтрокаДвижения.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиКУдалению = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.НайтиСтроки(Новый Структура("РаспределеннаяСумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() > 0 Тогда
		
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС по ОС и НМА
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоОСиНМА = Движения.НДСпоОСиНМА;
	ТаблицаДвиженийНДСПоОСиНМА = ДвиженияПоОСиНМА.Выгрузить();
	
	// Движение по объектам строительства ожидающим принятия к учету
	ТаблицаДвиженийНДСПоОСиНМА.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
			
			//Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			//	Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			//ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.НематериальныеАктивы") 
			//	Или ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			//	Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
			//ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			//	Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
			//КонецЕсли;
			Состояние = Неопределено;   
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли;
			// Ценность отнесена на объект строительства
			Если СтрокаТаблицы.СуммаБезНДССтроительство <> 0 ИЛИ СтрокаТаблицы.НДССтроительство <> 0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтроительство;
				СтрокаДвижения.НДС			= СтрокаТаблицы.НДССтроительство;
				СтрокаДвижения.Состояние	= Состояние;
				//Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.НематериальныеАктивы") 
				//	Или ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда				
				//	СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
				//ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
					СтрокаДвижения.Событие		= Неопределено;
				Иначе
					СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
				КонецЕсли;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли;
			//Объект строительства введен в эксплуатацию
			Если СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию <> 0 ИЛИ СтрокаТаблицы.НДСВведеноВЭксплуатацию <> 0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию;
				СтрокаДвижения.НДС			= СтрокаТаблицы.НДСВведеноВЭксплуатацию;
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПоОСиНМА);
	Если Не Отказ Тогда
		
		ДвиженияПоОСиНМА.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияПоОСиНМА.мТаблицаДвижений = ТаблицаДвиженийНДСПоОСиНМА;
		ДвиженияПоОСиНМА.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС предъявленный, реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ДвиженияНДСПредъявленныйРеализация0.Выгрузить(); 
	
	// Движение по НДС по ставке 0% ожидается подтверждение
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтавка0;
			СтрокаТаблицы.НДС			= СтрокаТаблицы.НДССтавка0;
			СтрокаТаблицы.ДатаСобытия 	= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным  Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСОплата;
			СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	КонецЕсли;							
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// Движение по НДС по ставке 0% подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% не подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявлено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявлено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок;
	
	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ДвиженияНДСЗаписиКнигиПокупок.Выгрузить();
	ТаблицаДвиженийНДСЗаписиКнигиПокупок.Очистить();
	
	ТаблицаЗаписей = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	КолонкиГруппировки 	= "";
	КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДокументОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСОплата, НДСОплата";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, ДокументОплаты";
		КолонкиСуммирования	= "СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	КонецЕсли;
	
	ТаблицаЗаписей.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаЗаписей.Колонки.Добавить("Событие");
	
	Если не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл
				СтрокаДвижения.ДатаОплаты = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты), 
				Неопределено,
				СтрокаДвижения.ДокументОплаты.Дата);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСОплата.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСОплата.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		Для каждого СтрокаЗаписи Из ТаблицаЗаписей Цикл
			Если не СтрокаЗаписи.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				и не (СтрокаЗаписи.СуммаБезНДС = 0 и СтрокаЗаписи.НДС = 0)
				Тогда
				СтрокаКниги = ТаблицаДвиженийНДСЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКниги,СтрокаЗаписи);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
		ТаблицаЗаписей.Колонки.Удалить("НДС");
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
		ТаблицаЗаписей.Колонки.Удалить("НДС");
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПокупок.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПокупок;
		ДвиженияНДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры


// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж;
	
	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ДвиженияНДСЗаписиКнигиПродаж.Выгрузить();
	ТаблицаДвиженийНДСЗаписиКнигиПродаж.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			
			СтрокаДвижения.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
			СтрокаДвижения.ДатаОплаты		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			СтрокаДвижения.ДатаОплаты		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты),
			СтрокаДвижения.СчетФактура.Дата,
			СтрокаДвижения.ДокументОплаты.Дата);
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ДатаОплаты 		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				
			Иначе
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ДатаОплаты 		= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Если УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 		= СтрокаДвижения.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСОплата;
					СтрокаДвижения.НДС 				= СтрокаДвижения.НДС - СтрокаТаблицы.НДСОплата;
					СтрокаДвижения.ДокументОплаты 	= Неопределено;
					СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
					СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПродаж);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПродаж;
		ДвиженияНДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;	
	
	
КонецПроцедуры

// Процедура формирования движения по НДС начисленный
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСНачисленный = Движения.НДСНачисленный;
	
	ТаблицаДвиженийНДСНачисленный = ДвиженияНДСНачисленный.Выгрузить();
	
	ТаблицаДвиженийНДСНачисленный.Очистить();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		// Авансы и СМРХозпособом
		
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Неопределено, "Покупатель");
		Иначе	
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСсАвансов, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные , "ВидЦенности");
		КонецЕсли;
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			// Отражение в книге продаж сразу же, по факту начисления НДС с аванса
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;
		
	Иначе
		// Продажа
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСНачисленный);
		
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл
			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;	
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		// Не подтверждение 0%
		ТаблицаДвиженийНДСНачисленный.Очистить();
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		СтрокиКУдалению = Новый Массив();
		
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			//Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Или 
			//	(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
				СтрокаТаблицы.НДС = 0;
				СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОплаты),
				СтрокаТаблицы.СчетФактура.Дата,
				СтрокаТаблицы.ДокументОплаты.Дата);
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.Реализация0, "ВидНачисления");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		ТаблицаДвиженийНДСНачисленный.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				
			ИначеЕсли Не УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				Перечисления.НДСВидНачисления.РеализацияБезНДС,
				Перечисления.НДСВидНачисления.РеализацияСНДС);
				
			Иначе
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				Перечисления.НДСВидНачисления.РеализацияБезНДС,
				Перечисления.НДСВидНачисления.РеализацияСНДС);
				
			КонецЕсли;
			
		КонецЦикла;
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРеализация0 = Движения.НДСРеализация0;
	
	ТаблицаДвиженийНДСРеализация0 = ДвиженияНДСРеализация0.Выгрузить();
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Счетчик = ТаблицаДвижений.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		//Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или 
		//	(ТаблицаДвижений[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвижений[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
		Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			ТаблицаДвижений.Удалить(ТаблицаДвижений[Счетчик]);
		Иначе	
			ТаблицаДвижений[Счетчик].ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ТаблицаДвижений[Счетчик].ДокументОтгрузки),
			СтруктураШапкиДокумента.Дата,
			ТаблицаДвижений[Счетчик].ДокументОтгрузки);
		КонецЕсли;
	КонецЦикла;
	
	// Ожидается подтверждение ставки 0%
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% не подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.НДС = 0;
		СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		СтрокаТаблицы.ДатаСобытия = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			
		КонецЕсли;
		
	КонецЦикла;
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с покупателями
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями;
	
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.Выгрузить();
	
	// Долг покупателя
	ТаблицаДвиженийНДСРасчетыСПокупателями.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиАванса = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Истина));
		
		Для Каждого СтрокаТаблицы из СтрокиАванса Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель			= СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ				= СтрокаТаблицы.ДокументОплаты;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.ВалютаРасчетов		= СтрокаТаблицы.ВалютаВзаиморасчетов;
			СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ВалютнаяСумма		= СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			СтрокаДвижения.ДатаСобытия			= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОплатыДата),СтруктураШапкиДокумента.Дата,СтрокаТаблицы.ДокументОплатыДата);
			
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы из ТаблицаРасчетов Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель			= СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ				= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.ВалютаРасчетов		= СтрокаТаблицы.ВалютаВзаиморасчетов;
			СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ВалютнаяСумма		= СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			СтрокаДвижения.ДатаСобытия			= СтрокаТаблицы.СчетФактураДата;
			
		КонецЦикла;
	КонецЕсли;
	
	// Удаление строк с пустой суммой
	Счетчик = ТаблицаДвиженийНДСРасчетыСПокупателями.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик].Сумма = 0) Тогда
			ТаблицаДвиженийНДСРасчетыСПокупателями.Удалить(ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьРасход();
		Иначе
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	// Распределенный НДС
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		
		Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации			= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура			= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
			СтрокаДвижения.ДокументОплаты		= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			СтрокаДвижения.РаспределеннаяСумма	= СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			СтрокаДвижения.ДатаСобытия			= ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты),
			СтрокаДвижения.СчетФактура.Дата,
			СтрокаДвижения.ДокументОплаты.Дата);
			
		КонецЦикла;
		
		// Удаление строк с пустой распределенной суммой
		СтрокиКУдалению = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.НайтиСтроки(Новый Структура("РаспределеннаяСумма", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() > 0 Тогда
			
			Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
			Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			Движения.НДСУчетРаспределенныхОплатПокупателей.ВыполнитьПриход();
			
		КонецЕсли;
		
		// НДС принятый к вычету (подтвержденный и неподтвержденный)
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		
		Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаДвижения.Организация		= СтрокаТаблицы.Организация;
			СтрокаДвижения.ПодразделениеОрганизации			= СтрокаТаблицы.ПодразделениеОрганизации;
			СтрокаДвижения.СчетФактура		= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
			СтрокаДвижения.ДокументОплаты	= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			//Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
			//	(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и Не (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))) Тогда
			Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда
				РаспределеннаяСумма = (СтрокаТаблицы.СуммаБезНДСПодтверждено0 + СтрокаТаблицы.НДСПодтверждено0) +
				(СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
			Иначе
				РаспределеннаяСумма = СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			КонецЕсли;
			СтрокаДвижения.РаспределеннаяСумма = РаспределеннаяСумма;
			
			СтрокаДвижения.ДатаСобытия		= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, 
			?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
			СтрокаТаблицы.СчетФактура.Дата,
			СтрокаТаблицы.ДокументОтгрузки.Дата), 
			?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты),
			СтрокаДвижения.СчетФактура.Дата,
			СтрокаДвижения.ДокументОплаты.Дата));
			
			//Если Не ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
			//	(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и Не (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")))) Тогда
			Если Не ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0)) Тогда
	
				УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
				
				Если УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
					СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
					СтрокаДвижения.ПодразделениеОрганизации	= СтрокаТаблицы.ПодразделениеОрганизации;
					СтрокаДвижения.СчетФактура			= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
					СтрокаДвижения.РаспределеннаяСумма  = (СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС) - (СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата);
					СтрокаДвижения.ДатаСобытия			= ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, 
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
					СтрокаТаблицы.СчетФактура.Дата,
					СтрокаТаблицы.ДокументОтгрузки.Дата), 
					?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаДвижения.ДокументОплаты),
					СтрокаДвижения.СчетФактура.Дата,
					СтрокаДвижения.ДокументОплаты.Дата));
				КонецЕсли;			
			КонецЕсли;	
			
		КонецЦикла;
		
		// Удаление строк с пустой распределенной суммой
		СтрокиКУдалению = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.НайтиСтроки(Новый Структура("РаспределеннаяСумма", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() > 0 Тогда
			
			Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
			Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			Движения.НДСУчетРаспределенныхОплатПокупателей.ВыполнитьРасход();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС с авансов
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС И Не СтруктураШапкиДокумента.ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСсАвансов = Движения.НДСсАвансов;
	
	ТаблицаДвиженийНДСсАвансов = ДвиженияНДСсАвансов.Выгрузить();
	// НДС с аванса начисленный
	ТаблицаДвиженийНДСсАвансов.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// НДС с аванса к вычету
	ТаблицаДвиженийНДСсАвансов.Очистить();
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	
	Для Каждого	СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		СтрокаТаблицы.СуммаБезНДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.СуммаБезНДСОплата);
		СтрокаТаблицы.НДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.НДСПредъявлено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.НДСОплата);
		СтрокаТаблицы.ВалютнаяСуммаСНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС,
		мВалютаРегламентированногоУчета,
		СтрокаТаблицы.ВалютаАванса,
		1, СтрокаТаблицы.КурсАванса,
		1, 1);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура переименовывает колонки ТЧ СуммаБезНДС и НДС и замещает их другими колонками
// Параметры:
//  ТаблицаДвижений - таблица, колонки которой требуется переименовать
//  ИмяСуммаБезНДС  - имя колонки, которая помещается в колонку СуммаБезНДС
//  ИмяНДС			- имя колонки, которая помещается в колонку НДС
//  Заменить		- если Истина, тогда колонки СуммаБезНДС и НДС замещаются, Ложь - отмена замещения
Процедура ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, ИмяСуммаБезНДС, ИмяНДС, Заменить = Истина)
	
	Если Заменить Тогда
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = "УдалитьСуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.НДС.Имя = "УдалитьНДС";
		ТаблицаПоДвижениям.Колонки[ИмяСуммаБезНДС].Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки[ИмяНДС].Имя = "НДС";
	Иначе
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = ИмяСуммаБезНДС;
		ТаблицаПоДвижениям.Колонки.НДС.Имя = ИмяНДС;
		ТаблицаПоДвижениям.Колонки.УдалитьСуммаБезНДС.Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.УдалитьНДС.Имя = "НДС";
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет из таблицы строки, в которых СуммаБезНДС и НДС равны 0
//
Процедура УдалитьПустыеДвижения(ТаблицаПоДвижениям)
	
	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если (ТаблицаПоДвижениям[Счетчик].СуммаБезНДС = 0) И (ТаблицаПоДвижениям[Счетчик].НДС = 0) Тогда
			
			ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка КАК СсылкаСФ,
	|	СчетФактураВыданный.ПометкаУдаления КАК СчетФактураВыданныйПометкаУдаления
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ДокументРасчетовСКонтрагентом.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	(ДокументРасчетовСКонтрагентом.Проведен = &ПризнакПроведения
	|			ИЛИ СчетФактураВыданный.Проведен = &ПризнакПроведения)
	|	И ДокументРасчетовСКонтрагентом.ПометкаУдаления = ЛОЖЬ
	|	И ДокументРасчетовСКонтрагентом.ДокументОснование = &ДокументОснование";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекРеализация = СтрРез.Ссылка.ПолучитьОбъект();
		ТекРеализация.Проведен = Провести;
		ТекРеализация.Записать();
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если НЕ СтрРез.СчетФактураВыданныйПометкаУдаления Тогда
				ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
				ТекСчетФактура.Проведен = Провести;
				
				Если Провести Тогда
					ТекСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ТекСчетФактура.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодчиненныхДокументовСчетФактура()

// Процедура проведения подчиненных документов "ОтражениеНачисленияНДС".
// Выбирает все документы отражения реализации, в которых в качестве документа
// основания указан текущий документ и проводит их (делает непроведенными).
//
Процедура ОбработкаПодчиненныхДокументовОтраженияРеализации(Провести = Истина)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеНачисленияНДС.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка КАК СсылкаСФ,
	|	СчетФактураВыданный.ПометкаУдаления КАК СчетФактураВыданныйПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|		ПО СчетФактураВыданный.ДокументОснование = ОтражениеНачисленияНДС.Ссылка
	|			И (СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	(ОтражениеНачисленияНДС.Проведен = &ПризнакПроведения
	|			ИЛИ СчетФактураВыданный.Проведен = &ПризнакПроведения)
	|	И ОтражениеНачисленияНДС.ПометкаУдаления = ЛОЖЬ
	|	И ОтражениеНачисленияНДС.РасчетныйДокумент = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекРеализация = СтрРез.Ссылка.ПолучитьОбъект();
		//Прокошева
		ТекРеализация.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		//
		ТекРеализация.Проведен = Провести;
		ТекРеализация.Записать();
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если НЕ СтрРез.СчетФактураВыданныйПометкаУдаления Тогда
				ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
				ТекСчетФактура.Проведен = Провести;
				
				Если Провести Тогда
					ТекСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ТекСчетФактура.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодчиненныхДокументовОтраженияРеализации()

// Процедура проведения подчиненных документов "ОтражениеПоступленияТоваровИУслугНДС".
// Выбирает все документы отражения реализации, в которых в качестве документа
// основания указан текущий документ и проводит их (делает непроведенными).
//
Процедура ОбработкаПодчиненныхДокументовОтраженияПоступления(Провести = Истина)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка КАК СсылкаСФ,
	|	СчетФактураПолученный.ПометкаУдаления КАК СчетФактураПолученныйПометкаУдаления
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО ОтражениеПоступленияТоваровИУслугНДС.Ссылка = СчетФактураПолученный.ДокументОснование.Ссылка
	|			И (СчетФактураПолученный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	(ОтражениеПоступленияТоваровИУслугНДС.Проведен = &ПризнакПроведения
	|			ИЛИ СчетФактураПолученный.Проведен = &ПризнакПроведения)
	|	И ОтражениеПоступленияТоваровИУслугНДС.ПометкаУдаления = ЛОЖЬ
	|	И ОтражениеПоступленияТоваровИУслугНДС.РасчетныйДокумент = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекПоступление = СтрРез.Ссылка.ПолучитьОбъект();
		ТекПоступление.Проведен = Провести;
		ТекПоступление.Записать();
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Если НЕ СтрРез.СчетФактураПолученныйПометкаУдаления Тогда
				ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
				ТекСчетФактура.Проведен = Провести;
				
				Если Провести Тогда
					ТекСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ТекСчетФактура.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодчиненныхДокументовОтраженияРеализации()

// Процедура установки пометки на удаление подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и устанавливает пометку удаления для них.
//
Процедура ПометкаУдаленияПодчиненныхДокументовСчетФактура(ПометитьНаУдаление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПометкиНаУдаление", Не ПометитьНаУдаление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка КАК СсылкаСФ
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ДокументРасчетовСКонтрагентом.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.ПометкаУдаления = &ПризнакПометкиНаУдаление
	|	И ДокументРасчетовСКонтрагентом.ДокументОснование = &ДокументОснование";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекРеализация = СтрРез.Ссылка.ПолучитьОбъект();
		ТекРеализация.УстановитьПометкуУдаления(ПометитьНаУдаление);
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
			ТекСчетФактура.УстановитьПометкуУдаления(ПометитьНаУдаление);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры // ПометкаУдаленияПодчиненныхДокументовСчетФактутра()

// Процедура установки пометки на удаление документов "ОтражениеНачисленияНДС".
// Выбирает все документы отражения реализации, в которых в качестве документа
// основания указан текущий документ и устанавливает пометку удаления для них.
//
Процедура ПометкаУдаленияПодчиненныхДокументовОтраженияРеализации(ПометитьНаУдаление = Ложь)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПометкиНаУдаление", Не ПометитьНаУдаление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеНачисленияНДС.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка КАК СсылкаСФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|		ПО СчетФактураВыданный.ДокументОснование = ОтражениеНачисленияНДС.Ссылка
	|			И (СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	ОтражениеНачисленияНДС.ПометкаУдаления = &ПризнакПометкиНаУдаление
	|	И ОтражениеНачисленияНДС.РасчетныйДокумент = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекРеализация = СтрРез.Ссылка.ПолучитьОбъект();
		ТекРеализация.УстановитьПометкуУдаления(ПометитьНаУдаление);
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
			ТекСчетФактура.УстановитьПометкуУдаления(ПометитьНаУдаление);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры // ПометкаУдаленияПодчиненныхДокументовОтраженияРеализации()

// Процедура установки пометки подчиненных документов "ОтражениеПоступленияТоваровИУслугНДС".
// Выбирает все документы отражения реализации, в которых в качестве документа
// основания указан текущий документ и устанавливает пометку удаления для них.
//
Процедура ПометкаУдаленияПодчиненныхДокументовОтраженияПоступления(ПометитьНаУдаление = Ложь)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПометкиНаУдаление", Не ПометитьНаУдаление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка КАК СсылкаСФ
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО ОтражениеПоступленияТоваровИУслугНДС.Ссылка = СчетФактураПолученный.ДокументОснование.Ссылка
	|			И (СчетФактураПолученный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)
	|ГДЕ
	|	ОтражениеПоступленияТоваровИУслугНДС.ПометкаУдаления = &ПризнакПометкиНаУдаление
	|	И ОтражениеПоступленияТоваровИУслугНДС.РасчетныйДокумент = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекПоступление = СтрРез.Ссылка.ПолучитьОбъект();
		ТекПоступление.УстановитьПометкуУдаления(ПометитьНаУдаление);
		
		Если ТипЗнч(СтрРез.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ТекСчетФактура = СтрРез.СсылкаСФ.ПолучитьОбъект();
			ТекСчетФактура.УстановитьПометкуУдаления(ПометитьНаУдаление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПометкаУдаленияПодчиненныхДокументовОтраженияПоступления()

// Получение учетной политики на дату. При повторном получении считывает ранее полученную учетную политику.
Функция ПолучитьПараметрыУчетнойПолитикиЛокально(КонДата, Отказ, ОбрабатываемаяОрганизация, Учет = "Бух", СчетФактура = Неопределено)
	
	Если мУчетнаяНУПолитикаПоДатам = Неопределено тогда 
		мУчетнаяНУПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	Если мУчетнаяБУПолитикаПоДатам = Неопределено тогда 
		мУчетнаяБУПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	
	Если Учет = "Нал" Тогда
		УчетнаяПолитика = мУчетнаяНУПолитикаПоДатам[?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	Иначе
		УчетнаяПолитика = мУчетнаяБУПолитикаПоДатам[?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	КонецЕсли; 
	
	Если УчетнаяПолитика = Неопределено Тогда
		ОшибкаПолученияУчетнойПолитики = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонДата, ОшибкаПолученияУчетнойПолитики, ОбрабатываемаяОрганизация, Учет);
		
		Если ОшибкаПолученияУчетнойПолитики тогда
			Если Учет = "Нал" тогда
				ОбщегоНазначения.СообщитьОбОшибке("При формировании движений по НДС "+?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),"на "+Формат(КонДата, "ДФ=dd.MM.yyyy"),"для документа <"+строка(СчетФактура)+">")+" 
				| используется момент определения налоговой базы ""по отгрузке"".",,,СтатусСообщения.Информация); 
				УчетнаяПолитика = Новый Структура("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
				мУчетнаяНУПолитикаПоДатам.Вставить(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если Учет = "Нал" тогда
				мУчетнаяНУПолитикаПоДатам.Вставить(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				мУчетнаяБУПолитикаПоДатам.Вставить(?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УчетнаяПолитика;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоСобытиям = ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для отражения расчетов с контрагентами
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
		Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		
		ОбработкаПодчиненныхДокументовОтраженияРеализации();
		
		ОбработкаПодчиненныхДокументовОтраженияПоступления();
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСобытиям, ТаблицаПоРасчетам, ТаблицаПоДвижениям, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
	ОбработкаПодчиненныхДокументовОтраженияРеализации(Ложь);
	
	ОбработкаПодчиненныхДокументовОтраженияПоступления(Ложь);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ПереходСРедакции10 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ДанныеПоСФ Цикл
		Строка.СчетФактура = Неопределено;	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	ОбновитьСсылкиВПодчиненныхДокументах();
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
		
		ПометкаУдаленияПодчиненныхДокументовСчетФактура(ПометкаУдаления);
		
		ПометкаУдаленияПодчиненныхДокументовОтраженияРеализации(ПометкаУдаления);
		
		ПометкаУдаленияПодчиненныхДокументовОтраженияПоступления(ПометкаУдаления);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияРасчетыСКонтрагентами(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)

	Для Каждого СтрокаТЧ ИЗ ТаблицаПоДвижениям Цикл
		Запись = Движения.ВзаиморасчетыСПокупателями.Добавить();
		Запись.Период = СтрокаТЧ.ДатаПлатежноРасчетногоДокумента;
		Запись.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
		Запись.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
			Запись.Сделка = СтрокаТЧ.СчетФактура;
			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			Запись.СчетНаПредоплату = СтрокаТЧ.СчетФактура;
			Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;	
		//Прокошева
		Запись.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		Запись.КостЦентр = СтрокаТЧ.AU;
		//
		Запись.СуммаРегл = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Запись.СуммаВзаиморасчетов = Запись.СуммаРегл / СтрокаТЧ.КурсВзаиморасчетов;
		USD = Справочники.Валюты.НайтиПоНаименованию("USD");
		Запись.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Запись.СуммаВзаиморасчетов, СтрокаТЧ.ВалютаРасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
	КонецЦикла;

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
