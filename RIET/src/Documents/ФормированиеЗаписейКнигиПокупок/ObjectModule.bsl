Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мВестиУчетНДС Экспорт;

// Хранит признак ведения упрощенного учета НДС
Перем мУпрощенныйУчетНДС Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ПолучитьСтруктуруШапкиДокумента(Отказ);
	
	// Проверим правильность заполнения шапки документа
	// ДОБАВИТЬ СЮДА ДРУГИЕ ПОЛЯ!!!
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ТаблицаПоВычетам = ПолучитьТаблицуПоВычетам(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
	
    ТаблицаПоКурсовымРазницам = ПолучитьТаблицуПоКурсовымРазницам(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоКурсовымРазницам(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок);
			
    ТаблицаПоАгентскомуНДС = ПолучитьТаблицуПоАгентскомуНДС(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАгентскомуНДС(СтруктураШапкиДокумента, ТаблицаПоАгентскомуНДС, Отказ, Заголовок);
	
	ТаблицаПоНДССАвансов = ПолучитьТаблицуПоНДССАвансов(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоНДССАвансов(СтруктураШапкиДокумента, ТаблицаПоНДССАвансов, Отказ, Заголовок);
	
	// { РГ-Софт Пахоменков А. 10.12.2014
	ТаблицаПоИзменениямСтоимости = ПолучитьТаблицуПоИзменениямСтоимости(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоИзменениямСтоимости(СтруктураШапкиДокумента, ТаблицаПоИзменениямСтоимости, Отказ, Заголовок);
	// } РГ-Софт Пахоменков А. 10.12.2014
	
	// А ЭТО НУЖНО???
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам2(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоКурсовымРазницам, ТаблицаПоАгентскомуНДС, ТаблицаПоНДССАвансов, ТаблицаПоИзменениямСтоимости, Отказ, Заголовок);
	КонецЕсли;
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас это не используется
	//Если Не Отказ Тогда
	//	УниверсальныеМеханизмы.ЗафиксироватьФактВыполненияРегламентнойОперации(НачалоМесяца(Дата),
	//												  СтруктураШапкиДокумента.Организация,
	//												  Ссылка,														  
	//												  ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0,Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок));
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас это не используется
	//УниверсальныеМеханизмы.СброситьФактВыполненияОперации(Ссылка);
		
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// ШАПКА

Функция ПолучитьСтруктуруШапкиДокумента(Отказ)
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСНалоговыйПериод");
	Если Не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") Тогда
		СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод", ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал));
	КонецЕсли; 
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// ВЫЧЕТЫ ПО ПРИОБРЕТЕННЫМ ЦЕННОСТЯМ

Функция ПолучитьТаблицуПоВычетам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
	//добавила Федотова Л., РГ-Софт, 06.04.2010 ->
	СтруктураПолей.Вставить("ПодразделениеОрганизации",		"ПодразделениеОрганизации");
	СтруктураПолей.Вставить("Валюта",		"СчетФактура.ВалютаДокумента");
	//<-
	СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",					"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",				"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",					"ДатаОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",							"НДС");
	//добавила Федотова Л., РГ-Софт, 06.04.2010 ->
	СтруктураПолей.Вставить("СуммаБезНДСВВалюте",			"СуммаБезНДСВВалюте");
	СтруктураПолей.Вставить("НДСВВалюте",					"НДСВВалюте");
	//<-
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
	//	СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
	//	СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
	//	СтруктураПолей.Вставить("Состояние",	"Состояние");
	//КонецЕсли; 

	РезультатЗапросаПоВычетам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураПолей);
	ТаблицаПоВычетам = ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат ТаблицаПоВычетам;
	
КонецФункции

// { РГ-Софт Пахоменков А. 10.12.2014
Функция ПолучитьТаблицуПоИзменениямСтоимости(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации",		"ПодразделениеОрганизации");
	СтруктураПолей.Вставить("Валюта",		"СчетФактура.ВалютаДокумента");
	СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",					"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",				"СчетФактура.Дата");
	//СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
	//СтруктураПолей.Вставить("ДатаОплаты",					"ДатаОплаты");
	//СтруктураПолей.Вставить("ДатаДокументаОплаты",			"ДокументОплаты.Дата");
	//СтруктураПолей.Вставить("ДатаСобытия",					"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаСобытия",					"Ссылка.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",							"НДС");
	СтруктураПолей.Вставить("СуммаБезНДСВВалюте",			"СуммаБезНДСВВалюте");
	СтруктураПолей.Вставить("НДСВВалюте",					"НДСВВалюте"); 
	//СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	//СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");

	РезультатЗапросаПоИзменениямСтоимости = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПриИзмененииСтоимостиВСторонуУменьшения", СтруктураПолей);
	ТаблицаПоИзменениямСтоимости = ПодготовитьТаблицуПоИзменениямСтоимости(РезультатЗапросаПоИзменениямСтоимости, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат ТаблицаПоИзменениямСтоимости;

КонецФункции
// } РГ-Софт Пахоменков А. 10.12.2014

// { РГ-Софт Пахоменков А. 10.12.2014
// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоИзменениямСтоимости(РезультатЗапросаПоИзменениямСтоимости, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаИзмененийСтоимости = РезультатЗапросаПоИзменениямСтоимости.Выгрузить();
	
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, НачалоМесяца(СтруктураШапкиДокумента.Дата), НачалоКвартала(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, КонецМесяца(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для каждого СтрокаТаблицы из ТаблицаИзмененийСтоимости Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
		//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты) Тогда
		//		Если (СтруктураШапкиДокумента.Дата < '20060101') Тогда
		//			СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата; 					
		//		КонецЕсли;
		//	Иначе
		//		СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
		//	КонецЕсли;
		//КонецЕсли; 
		//
		Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
			//СтрокаТаблицы.ДатаСобытия = Макс(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры);
			СтрокаТаблицы.ДатаСобытия = Макс(СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаСчетаФактуры);
		Иначе
			Если СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
				СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
			Иначе
				СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Контрагент по данным виждам ценностей не указывается
			СтрокаТаблицы.Поставщик = Неопределено;
		КонецЕсли; 
		
		//Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
		//	СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		//КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаИзмененийСтоимости.Колонки.Добавить("Событие");
	ТаблицаИзмененийСтоимости.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,"Событие");
	
	Возврат ТаблицаИзмененийСтоимости;
	
КонецФункции // ПодготовитьТаблицуПоВычетам()

// } РГ-Софт Пахоменков А. 10.12.2014

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетов = РезультатЗапросаПоВычетам.Выгрузить();
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас всегда по отгрузке
	//МоментОпределенияНалоговойБазыНДСОплата = Неопределено;
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, НачалоМесяца(СтруктураШапкиДокумента.Дата), НачалоКвартала(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, КонецМесяца(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата));
	Для каждого СтрокаТаблицы из ТаблицаВычетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
							
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты) Тогда
				Если (СтруктураШапкиДокумента.Дата < '20060101') Тогда
					СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
					
				// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
				// У нас всегда по отгрузке
				//ИначеЕсли СтрокаТаблицы.ДатаСчетаФактуры < '20060101' Тогда
					//Если МоментОпределенияНалоговойБазыНДСОплата = Неопределено Тогда
					//	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики('20051231', Отказ, СтруктураШапкиДокумента.Организация);
					//	Если Не Отказ Тогда
					//		МоментОпределенияНалоговойБазыНДСОплата = (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате);
					//	Иначе
					//		МоментОпределенияНалоговойБазыНДСОплата = Ложь;
					//	КонецЕсли;
					//КонецЕсли;
					//Если МоментОпределенияНалоговойБазыНДСОплата Тогда
					//	СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
					//КонецЕсли;
					
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
			КонецЕсли;
		КонецЕсли; 
		
		//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		//	Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
		//		СтрокаТаблицы.ДатаСобытия = Макс(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры, ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата));
		//	Иначе
		//		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата);
		//		Если Не (СтрокаТаблицы.ДатаСобытия >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСобытия <= КонецНалоговогоПериода) Тогда
		//			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		//		КонецЕсли;
		//	КонецЕсли;
		//Иначе
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры);
			Иначе
				Если СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
					СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
				Иначе
					СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли; 
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Контрагент по данным виждам ценностей не указывается
			СтрокаТаблицы.Поставщик = Неопределено;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаВычетов.Колонки.Добавить("Событие");
	ТаблицаВычетов.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,"Событие");
	
	Возврат ТаблицаВычетов;

КонецФункции // ПодготовитьТаблицуПоВычетам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	// Изменил РГ-Софт - Иванов Антон - 2010-03-02
	// У нас непонятно как определять вид ценности, поэтому на заполненность не проверяем
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоВычетам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"": ";
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
		
		//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияДокОтгрузки, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// { РГ-Софт Пахоменков А. 10.12.2014
// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоИзменениямСтоимости(СтруктураШапкиДокумента,ТаблицаПоИзменениямСтоимости, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетПриИзмененииСтоимостиВСторонуУменьшения", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоИзменениямСтоимости Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Уменьшение стоимости реализации"": ";
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
		КонецЕсли; 
		
		//Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()
// } РГ-Софт Пахоменков А. 10.12.2014

// КУРСОВЫЕ РАЗНИЦЫ

Функция ПолучитьТаблицуПоКурсовымРазницам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",				"Ссылка.Организация");
	СтруктураПолей.Вставить("ВидЦенности",				"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",				"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",				"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",			"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",			"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",				"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаДокументаОплаты",		"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",				"ДатаОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",				"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",				"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",						"НДС");
	СтруктураПолей.Вставить("Валюта",					"Валюта");
	СтруктураПолей.Вставить("СуммаБезНДСВВалюте",		"СуммаБезНДСВВалюте");
	СтруктураПолей.Вставить("НДСВВалюте",				"НДСВВалюте");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ПодразделениеОрганизации",		"ПодразделениеОрганизации");
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "КурсовыеРазницы", СтруктураПолей);
	Таблица = ПодготовитьТаблицуПоКурсовымРазницам(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат Таблица;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоКурсовымРазницам(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Таблица = РезультатЗапроса.Выгрузить();
	Таблица.Колонки.Добавить("Событие");
	Таблица.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,"Событие");
	
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоКурсовымРазницам(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	// Изменил РГ-Софт - Иванов Антон - 2010-03-02
	// У нас непонятно как определять вид ценности, поэтому на заполненность не проверяем
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КурсовыеРазницы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";


	Для Каждого СтрокаТаблицы Из ТаблицаПоКурсовымРазницам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Курсовые разницы"": ";
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
		КонецЕсли; 
		
		//Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;

	КонецЦикла; 

КонецПроцедуры

// АГЕНТСКИЙ НДС

Функция ПолучитьТаблицуПоАгентскомуНДС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",				"Ссылка.Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации",	"ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ВидЦенности",				"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",				"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",				"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",			"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",			"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",				"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаДокументаОплаты",		"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",				"СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",				"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",				"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",						"НДС");
	СтруктураПолей.Вставить("Валюта",					"Валюта");
	СтруктураПолей.Вставить("СуммаБезНДСВВалюте",		"СуммаБезНДСВВалюте");
	СтруктураПолей.Вставить("НДСВВалюте",				"НДСВВалюте");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "АгентскийНДС", СтруктураПолей);
	Таблица = ПодготовитьТаблицуПоКурсовымРазницам(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	Возврат Таблица;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоАгентскомуНДС(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок)

	Таблица = РезультатЗапроса.Выгрузить();
	Таблица.Колонки.Добавить("Событие");
	Таблица.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,"Событие");
	
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАгентскомуНДС(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	// Изменил РГ-Софт - Иванов Антон - 2010-03-02
	// У нас непонятно как определять вид ценности, поэтому на заполненность не проверяем
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "АгентскийНДС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	                                                                          
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";


	Для Каждого СтрокаТаблицы Из ТаблицаПоКурсовымРазницам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Агентский НДС"": ";
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
		КонецЕсли; 
		
		//Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;

	КонецЦикла; 

КонецПроцедуры

//НДС С АВАНСОВ

Функция ПолучитьТаблицуПоНДСсАвансов(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",				"Ссылка.Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации",	"ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ВидЦенности",				"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",				"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",				"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",			"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",			"ДокументОплаты");
	// { РГ-Софт Пахоменков А. 12.12.2014
	//СтруктураПолей.Вставить("ДатаОплаты",				"ДатаОплаты");
	// } РГ-Софт Пахоменков А. 12.12.2014
	СтруктураПолей.Вставить("ДатаДокументаОплаты",		"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",				"ДатаОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",				"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",				"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",						"НДС");
	СтруктураПолей.Вставить("Валюта",					"Валюта");
	СтруктураПолей.Вставить("СуммаБезНДСВВалюте",		"СуммаБезНДСВВалюте");
	СтруктураПолей.Вставить("НДСВВалюте",				"НДСВВалюте");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста","ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",		"КорректируемыйПериод");
	// { РГ-Софт Пахоменков А. 12.12.2014
	СтруктураПолей.Вставить("ДоговорКонтрагента",		"ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДатаОплаты",				"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",				"СчетФактура.Дата");
	// } РГ-Софт Пахоменков А. 12.12.2014
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураПолей);
	Таблица = ПодготовитьТаблицуПоНДСсАвансов(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат Таблица;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоНДСсАвансов(РезультатЗапроса, СтруктураШапкиДокумента, Отказ, Заголовок)

	Таблица = РезультатЗапроса.Выгрузить();
	Таблица.Колонки.Добавить("Событие");
	Таблица.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,"Событие");
	
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	// Изменил РГ-Софт - Иванов Антон - 2010-03-02
	// У нас непонятно как определять вид ценности, поэтому на заполненность не проверяем
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	//СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";


	Для Каждого СтрокаТаблицы Из ТаблицаПоКурсовымРазницам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""НДС с Авансов"": ";
		
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами и НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
		КонецЕсли; 
		
		//Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		//КонецЕсли;

	КонецЦикла; 

КонецПроцедуры


// Движение по регистрам

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоКурсовымРазницам, Отказ, Заголовок)
		
	ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
	ДвиженияПоКурсовымРазницам(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок);
		
КонецПроцедуры // ДвиженияПоРегистрам()


// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам2(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоКурсовымРазницам, ТаблицаПоАгентскомуНДС, ТаблицаПоНДССАвансов, ТаблицаПоИзменениямСтоимости, Отказ, Заголовок)
		
	ДвиженияПоВычетамНДСпоПриобретеннымЦенностям2(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
	ДвиженияПоКурсовымРазницам(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок);
	ДвиженияПоАгентскомуНДС(СтруктураШапкиДокумента, ТаблицаПоАгентскомуНДС, Отказ, Заголовок);
	ДвиженияПоНДССАвансов(СтруктураШапкиДокумента, ТаблицаПоНДССАвансов, Отказ, Заголовок);
	// { РГ-Софт Пахоменков А. 10.12.2014
	ДвиженияПоВычетПриИзмененииСтоимостиВСторонуУменьшения(СтруктураШапкиДокумента, ТаблицаПоИзменениямСтоимости, Отказ, Заголовок);	
	// } РГ-Софт Пахоменков А. 10.12.2014
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок)

	Если ТаблицаПоВычетам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам, ТаблицаДвижений_НДСПредъявленный);
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаСобытия, Событие","СуммаБезНДС, НДС");
		
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014     	
				
		//-> RG-Soft VIvanov 02/04/12
		//Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		//<-
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
		// У нас нет такого вида ценности
		//СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ВнутреннееПотребление,"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,"НДС");
		
		// Отражение по регистру взаиморасчетов
		// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
		// У нас этот регистр не используется
		//ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		//
		//Для каждого СтрокаВычета Из ТаблицаПоВычетам Цикл
		//	Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "Исключить" Тогда
		//		Продолжить;
		//	Иначе
		//		СтрокаРасчетов = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		//		СтрокаРасчетов.Организация = СтрокаВычета.Организация;
		//		СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
		//		СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
		//		Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "НДС" Тогда
		//			СтрокаРасчетов.РасчетыСБюджетом = Истина;
		//			СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.НДС;
		//		Иначе
		//			СтрокаРасчетов.РасчетыСБюджетом = Ложь;
		//			СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.СуммаБезНДС+СтрокаВычета.НДС;
		//		КонецЕсли;
		//	КонецЕсли; 
		//КонецЦикла;

		//ТаблицаДвижений_НДСРасчетыСПоставщиками.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,РасчетыСБюджетом,ДатаСобытия","РаспределеннаяСумма");
		//
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас нет НДС 0
	//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
	//	
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	//	
	//	
	//	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
	//		Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
	//			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
	//				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
	//			Иначе
	//				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
	//			КонецЕсли; 
	//			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
	//			
	//		КонецЕсли;
	//	КонецЦикла; 
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
	//	
	//	Если мВестиУчетНДС Тогда
	//		// Отражение по регистру НДСПредъявленныйРеализация0
	//		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	//		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
	//		
	//		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
	//		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
	//		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
	//	КонецЕсли;
	//	
	//Иначе
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	//КонецЕсли; 
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014   
	
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	// Сформировать проводи по записям книги покупок
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас бухгалтерский регистр не используется
	//Для каждого ТекСтрокаВычета Из ТаблицаПоВычетам Цикл
	//	Если ТекСтрокаВычета.НДС = 0 Тогда
	//		ПродолжитЬ;
	//	КонецЕсли; 
	//																																																   
	//	Движение = Движения.Хозрасчетный.Добавить();
	//	Движение.Период = СтруктураШапкиДокумента.Дата;
	//	Движение.Организация =  СтруктураШапкиДокумента.Организация;
	//	Движение.Сумма = ТекСтрокаВычета.НДС;
	//	Движение.Содержание = "НДС";
	//	Движение.НомерЖурнала = "НДС";
	//	
	//	Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	//	
	//	Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
	//		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
	//	Иначе
	//		Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
	//	КонецЕсли;

	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
	//	
	//	Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
	//		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
	//	КонецЕсли;

	//КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

Процедура ДвиженияПоКурсовымРазницам(СтруктураШапкиДокумента, ТаблицаПоКурсовымРазницам, Отказ, Заголовок)
	
	Если ТаблицаПоКурсовымРазницам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКурсовымРазницам, ТаблицаДвижений_НДСПредъявленный);
		
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014   		
		
		//Добавила Федотова Л., РГ-Софт, 06.04.2010 ->
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.КурсовыеРазницы, "ВидВычета");
		//<-
		//-> RG-Soft VIvanov 02/04/12
		//Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		//<-
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,"НДС");
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКурсовымРазницам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности, ПодразделениеОрганизации", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014  	  	
	
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.КурсовыеРазницы, "ВидВычета");
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
КонецПроцедуры

Процедура ДвиженияПоАгентскомуНДС(СтруктураШапкиДокумента, ТаблицаПоАгентскомуНДС, Отказ, Заголовок)
	
	Если ТаблицаПоАгентскомуНДС.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАгентскомуНДС, ТаблицаДвижений_НДСПредъявленный);
		     		
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014   
		
		//Добавила Федотова Л., РГ-Софт, 06.04.2010 ->
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.АгентскийНДС, "ВидВычета");
		//<-
		//-> RG-Soft VIvanov 02/04/12
		//Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		//<-
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,"НДС");
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАгентскомуНДС,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности, ПодразделениеОрганизации", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014  	 
	
	//Для добавления даты и номера оплаты в бюджет в 7-ю колонку книги покупок ->
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДатаДокументаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50)); //уже добавлен ранее
	Для каждого Строка из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
		
		ДокСКП = Строка.СчетФактура;
		
		Если ТипЗнч(ДокСКП) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокСКП.WHT Тогда
			ДокументСФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(Строка.СчетФактура, "СчетФактураВыданный");
			Если ЗначениеЗаполнено(ДокументСФ) Тогда
				Строка.ДатаДокументаОплаты 		= ДокументСФ.ДатаПлатежноРасчетногоДокумента;	
				Строка.НомерДокументаОплаты 	= ДокументСФ.НомерПлатежноРасчетногоДокумента;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	//Для добавления даты и номера оплаты в бюджет в 7-ю колонку книги покупок <-
	
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.АгентскийНДС, "ВидВычета");                                                                                                                           
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
КонецПроцедуры

Процедура ДвиженияПоНДССАвансов(СтруктураШапкиДокумента, ТаблицаПоНДССАвансов, Отказ, Заголовок)
	
	Если ТаблицаПоНДССАвансов.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНДССАвансов, ТаблицаДвижений_НДСПредъявленный);
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014
		
		//Добавила Федотова Л., РГ-Софт, 06.04.2010 ->
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.НДСсАвансов, "ВидВычета");
		//<-
		//-> RG-Soft VIvanov 02/04/12
		//Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		//<-
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,"НДС");
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНДССАвансов,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности, ПодразделениеОрганизации", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014    
	
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.АгентскийНДС, "ВидВычета");
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоПриобретеннымЦенностям2(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок)

	Если ТаблицаПоВычетам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам, ТаблицаДвижений_НДСПредъявленный);
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаСобытия, Событие","СуммаБезНДС, НДС");
		
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014    		
		
		//Добавила Федотова Л., РГ-Софт, 06.04.2010 ->
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком, "ВидВычета");
		//<-
		
		//-> RG-Soft VIvanov 02/04/12
		//Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		//<-
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
		// У нас нет такого вида ценности
		//СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ВнутреннееПотребление,"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,"НДС");
		
		// Отражение по регистру взаиморасчетов
		// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
		// У нас этот регистр не используется
		//ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		//
		//Для каждого СтрокаВычета Из ТаблицаПоВычетам Цикл
		//	Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "Исключить" Тогда
		//		Продолжить;
		//	Иначе
		//		СтрокаРасчетов = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		//		СтрокаРасчетов.Организация = СтрокаВычета.Организация;
		//		СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
		//		СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
		//		Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "НДС" Тогда
		//			СтрокаРасчетов.РасчетыСБюджетом = Истина;
		//			СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.НДС;
		//		Иначе
		//			СтрокаРасчетов.РасчетыСБюджетом = Ложь;
		//			СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.СуммаБезНДС+СтрокаВычета.НДС;
		//		КонецЕсли;
		//	КонецЕсли; 
		//КонецЦикла;

		//ТаблицаДвижений_НДСРасчетыСПоставщиками.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,РасчетыСБюджетом,ДатаСобытия","РаспределеннаяСумма");
		//
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		//Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас нет НДС 0
	//Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
	//	
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	//	
	//	
	//	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
	//		Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
	//			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
	//				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
	//			Иначе
	//				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
	//			КонецЕсли; 
	//			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
	//			
	//		КонецЕсли;
	//	КонецЦикла; 
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
	//	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
	//	
	//	Если мВестиУчетНДС Тогда
	//		// Отражение по регистру НДСПредъявленныйРеализация0
	//		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	//		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
	//		
	//		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
	//		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
	//		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
	//	КонецЕсли;
	//	
	//Иначе
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	//КонецЕсли; 
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности, ПодразделениеОрганизации", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014 
	
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	// Сформировать проводи по записям книги покупок
	// Закомментировал РГ-Софт - Иванов Антон - 2010-03-02
	// У нас бухгалтерский регистр не используется
	//Для каждого ТекСтрокаВычета Из ТаблицаПоВычетам Цикл
	//	Если ТекСтрокаВычета.НДС = 0 Тогда
	//		ПродолжитЬ;
	//	КонецЕсли; 
	//																																																   
	//	Движение = Движения.Хозрасчетный.Добавить();
	//	Движение.Период = СтруктураШапкиДокумента.Дата;
	//	Движение.Организация =  СтруктураШапкиДокумента.Организация;
	//	Движение.Сумма = ТекСтрокаВычета.НДС;
	//	Движение.Содержание = "НДС";
	//	Движение.НомерЖурнала = "НДС";
	//	
	//	Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; //68.02
	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	//	
	//	Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
	//		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; //19.07
	//	Иначе
	//		Движение.СчетКт = ТекСтрокаВычета.СчетУчетаНДС; //19.чч
	//	КонецЕсли;

	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", ТекСтрокаВычета.Поставщик);
	//	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", ТекСтрокаВычета.СчетФактура);
	//	
	//	Если ПредъявленНДСКВычету0 Тогда // Дополнительное субконто по 19.07
	//		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРеализации", ТекСтрокаВычета.ДокументОтгрузки);
	//	КонецЕсли;

	//КонецЦикла; 

КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

// { РГ-Софт Пахоменков А. 11.12.2014
// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетПриИзмененииСтоимостиВСторонуУменьшения(СтруктураШапкиДокумента, ТаблицаПоИзменениямСтоимости, Отказ, Заголовок)

	Если ТаблицаПоИзменениямСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		
		// Отражение по регистру "НДС предъявленный"
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоИзменениямСтоимости, ТаблицаДвижений_НДСПредъявленный);
		
		// { РГ-Софт Пахоменков А. 12.12.2014
		//ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, ПодразделениеОрганизации, СчетФактура, ВидВычета, ВидЦенности, СтавкаНДС, Поставщик, Валюта","СуммаБезНДС, НДС, СуммаБезНДСВВалюте, НДСВВалюте");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСПредъявленный", "Период,Активность");
		ТаблицаДвижений_НДСПредъявленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 12.12.2014
		
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком, "ВидВычета");
		
		Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.ДатаПроведения;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ВыполнитьРасход();
		                                                                                                                              
		// Виды ценностей с особой обработкой расчетов
		СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,						"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,					"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,					"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС,					"Исключить");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,								"Исключить"); 		
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, 				"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, 	"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,				"НДС");
		СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами,				"НДС");		
		
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоИзменениямСтоимости,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	
	// { РГ-Софт Пахоменков А. 12.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ДокументОплаты, ДатаОплаты, СтавкаНДС, Поставщик, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, Событие, ВидЦенности, ПодразделениеОрганизации", "СуммаБезНДС, НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 12.12.2014
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.ДатаПроведения;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	                                                                                                                                                                                        
	
КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()
// } РГ-Софт Пахоменков А. 11.12.2014

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// ТОЧНО НУЖНО ОТМЕНЯТЬ ПРОВЕДЕНИЕ???
// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мУпрощенныйУчетНДС = Неопределено Тогда
		// Изменил РГ-Софт - Иванов Антон - 2010-03-02
		// А У НАС ТОЧНО НЕ УПРОЩЕННЫЙ УЧЕТ НДС???
		мУпрощенныйУчетНДС = Ложь;
		//мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, Дата);
	КонецЕсли;
	
	Если Не мУпрощенныйУчетНДС Тогда
		ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(, Ложь, СтрокаСообщения, ОшибкаЗаполнения);
		ЗаполнитьСТроки_КурсовыеРазницы(, Ложь, СтрокаСообщения, ОшибкаЗаполнения);
	КонецЕсли;
		
	Если Не (ВычетПоПриобретеннымЦенностям.Количество() > 0 
		Или КурсовыеРазницы.Количество() >0 ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружены записи к отражению в книге покупок"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()


////////////////////////////////////////////////////////////////////////////////
// ВЫЧЕТ ПО ПРИОБРЕТЕННЫМ ЦЕННОСТЯМ

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТаблицаРезультатов = ПолучитьТаблицуДляЗаполненияТЧВычетПоПриобретеннымЦенностям();
	
	ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И НДСВключенВСтоимость = ЛОЖЬ
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|					И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСпоОСиНМАОстатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСпоОСиНМАОстатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСпоОСиНМАОстатки.СчетУчетаНДС
		|			И (НДСпоОСиНМАОстатки.СуммаБезНДСОстаток + НДСпоОСиНМАОстатки.НДСОстаток > 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|				&ДатаГраница,
		|				Организация = &Организация
		|					И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
		|			И (НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДССМР)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) < ДАТАВРЕМЯ(2009, 1, 1)
		|						ТОГДА 1
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДССМР = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДССМР.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДССМР", ВидыЦенностей_ОплатаПоНДССМР);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК КВычету_БезНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_НДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйРеализация0Остатки.Состояние
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Проверяем возможность предъявления к вычету по остаткам регистра "НДС предъявленный)
	// (вычет не может превышать текущий остаток)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
		|ИТОГИ
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";
		
	Запрос.УстановитьПараметр("СписокСчетовФактур", РезультатЗапроса.Строки.ВыгрузитьКолонку("СчетФактура"));
    СтрокиСФкУдалению = новый массив();
	ДоступныйКВычетуНДС = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураОтбора = НОвый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Для каждого СтрокаСФ Из РезультатЗапроса.Строки Цикл
		СтрокаСФ_НДСПРедъявленный = ДоступныйКВычетуНДС.строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если СтрокаСФ_НДСПРедъявленный = Неопределено Тогда
			// Не найдены положитьельные остатки по СФ
			// НДС по СФ не может быть принят к вычету
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
			Продолжить;
		ИначеЕсли СтрокаСФ_НДСПРедъявленный.СуммаСНДС >= СтрокаСФ.КВычету_СНДС тогда
			// Сумма НДС доступного к вычету по СФ не менее, чем сумма списываемая документом.
			// Корректировка не требуется
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаПорядкаОплат Из СтрокаСФ.Строки Цикл
		
			СтрокиКУдалению = Новый Массив();
			Для каждого СтрокаРасшифровки Из СтрокаПорядкаОплат.Строки Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРасшифровки);
				СтрокиПоОтбору = СтрокаСФ_НДСПРедъявленный.строки.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПоОтбору.Количество() = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				//может быть выбрана только одна строка
				СтрокаПоОтбору = СтрокиПоОтбору[0];
				Если СтрокаПоОтбору.СуммаСНДС = 0 тогда 
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПоОтбору.СуммаСНДС >= СтрокаРасшифровки.КВычету_СНДС тогда
					СтрокаПоОтбору.СуммаСНДС = СтрокаПоОтбору.СуммаСНДС - СтрокаРасшифровки.КВычету_СНДС;
				Иначе
					СтрокаРасшифровки.КВычету_НДС = (СтрокаРасшифровки.КВычету_НДС*СтрокаПоОтбору.СуммаСНДС/СтрокаРасшифровки.КВычету_СНДС);
					СтрокаРасшифровки.КВычету_СНДС = СтрокаПоОтбору.СуммаСНДС;
					СтрокаРасшифровки.КВычету_БезНДС = СтрокаРасшифровки.КВычету_СНДС - СтрокаРасшифровки.КВычету_НДС;
					СтрокаПоОтбору.СуммаСНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			Для каждого СтрокаКУдалению	из СтрокиКУдалению Цикл
			    СтрокаПорядкаОплат.Строки.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			СтрокаПорядкаОплат.КВычету_НДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_НДС");
			СтрокаПорядкаОплат.КВычету_СНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_СНДС");
			СтрокаПорядкаОплат.КВычету_БезНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_БезНДС");
		
		КонецЦикла; 
		СтрокаСФ.КВычету_НДС = СтрокаСФ.Строки.Итог("КВычету_НДС");
		СтрокаСФ.КВычету_СНДС = СтрокаСФ.Строки.Итог("КВычету_СНДС");
		СтрокаСФ.КВычету_БезНДС = СтрокаСФ.Строки.Итог("КВычету_БезНДС");
		
		Если СтрокаСФ.КВычету_СНДС = 0 Тогда
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению	из СтрокиСФкУдалению Цикл
		РезультатЗапроса.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат РезультатЗапроса;

КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

// { РГ-Софт Пахоменков А. 16.12.2014
// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПриИзмененииСтоимостиВСторонуУменьшенияЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетПриИзмененииСтоимостиВСторонуУменьшения(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТаблицаРезультатов = ПолучитьТаблицуДляЗаполненияТЧВычетПриИзмененииСтоимостиВСторонуУменьшения();
	
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()
// } РГ-Софт Пахоменков А. 16.12.2014

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Получает информацию о НДС включенном в стоимость и прочим блокирующим событиям 
// для блокировки распределенных оплат
Функция ПолучитьСведенияПоЗаблокированномуНДС(СписокСчетовФактур)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_СНДС,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_НДС,
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокОплаты
	|ИЗ
	|	РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|		,
	|		&ДатаГраница,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСВключенныйВСтоимостьОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСпоОСиНМАОстатки.СчетФактура,
	|	ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0),
	|	ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0),
	|	НДСпоОСиНМАОстатки.СчетФактура.Дата,
	|	ВЫБОР
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСпоОСиНМАОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НДСпоОСиНМА.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)
	|			И НДСВключенВСтоимость = ЛОЖЬ
	|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|			И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(КВычету_СНДС),
	|	СУММА(КВычету_НДС)
	|ПО
	|	СчетФактура,
	|	ПорядокОплаты";
	
	//Если не ПредъявленНДСКВычету0 Тогда
		ДополнениеПоРеализации0 = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И СчетФактура В (&СписокСчетовФактур)
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		| УПОРЯДОЧИТЬ ПО
		| ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО",ДополнениеПоРеализации0);
	//КонецЕсли; 

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьСведенияПоЗаблокированномуНДС()

// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток КАК РаспределеннаяОплата,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РасчетыСБюджетом,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.Дата КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПоставщикам.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСУчетРаспределенныхОплатПоставщикамОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("Дата", 		КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	//РаспределенныеОплаты.Колонки.Добавить("ИспользованнаяОплата", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	РаспределенныеОплаты.Колонки.Добавить("QuieryId", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QuieryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QuieryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QuieryId,"QuieryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур распределяет по видам ценностей суммы не использованных ранее распределенных оплат.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина,КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина)

	НДСНалоговыйПериод = Неопределено;
	
	ОтфактурованныеПоступления = Новый СписокЗначений();
	ОтфактурованныеПоступления.ЗагрузитьЗначения(СписокСчетовФактур);
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РасчетыСБюджетом");
	Отбор.РасчетыСБюджетом.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
			Если СтрокаСФ.КВычету_СНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ТаблицаОплат.Очистить();
			Если СтрокаПорядокОплаты.ПорядокОплаты = 2 Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = СтрокаСФ.СчетФактура;
				СтрокаОплаты.ДатаОплаты = СтрокаСФ.СчетФактураДата;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 4 
				И Не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = Неопределено Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = Неопределено;
				СтрокаОплаты.ДатаОплаты = Неопределено;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			Иначе
				Отбор = Построитель_РаспределенныеОплаты.Отбор;
				Отбор.СчетФактура.Значение = СтрокаПорядокОплаты.СчетФактура;
				Отбор.РасчетыСБюджетом.Значение = (СтрокаПорядокОплаты.ПорядокОплаты = 1 Или СтрокаПорядокОплаты.ПорядокОплаты = 5);
				Построитель_РаспределенныеОплаты.Выполнить();
				Если Построитель_РаспределенныеОплаты.Результат.Пустой() Тогда
					// Оплата не обнаружена
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3
						И Не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = Неопределено 
						Тогда
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						    СуммаОплаты = Мин(СтрокаПорядокОплаты.КВычету_СНДС_Часть,СтрокаПорядокОплаты.КВычету_СНДС);
						Иначе
							СуммаОплаты = СтрокаПорядокОплаты.КВычету_СНДС;
						КонецЕсли; 
						
						
						Если СуммаОплаты = 0 тогда
							Продолжить;
						КонецЕсли;
						
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = Неопределено;
						СтрокаОплаты.ДатаОплаты = Неопределено;
						СтрокаОплаты.СуммаОплаты = СуммаОплаты;
					ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
						СуммаОплаты = СтрокаПорядокОплаты.КВычету_НДС;
						
						Если СуммаОплаты = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = Неопределено;
						СтрокаОплаты.ДатаОплаты = Неопределено;
						СтрокаОплаты.СуммаОплаты = СуммаОплаты;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					
					Если СтрокаПорядокОплаты.ПорядокОплаты = 1 
						Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
						// Оплата определяется по сумме НДС
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_НДС;
					Иначе
						// Оплата определяется в общем порядке (по сумме с НДС)
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_СНДС;
					КонецЕсли; 
					
					Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
						СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
						СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
						
						СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
						ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
						
						Если СуммаКПогашению = 0 Тогда
						    Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаКПогашению > 0 
						И (СтрокаПорядокОплаты.ПорядокОплаты = 3
						Или СтрокаПорядокОплаты.ПорядокОплаты = 5) Тогда
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
							ПредложеноКВычетуПоОплатам = СтрокаПорядокОплаты.КВычету_СНДС - СуммаКПогашению;
							СуммаКПогашению = Макс(0, СтрокаПорядокОплаты.КВычету_СНДС_Часть - ПредложеноКВычетуПоОплатам);
						КонецЕсли;
						
						Если не СуммаКПогашению = 0 Тогда
							СтрокаОплаты = ТаблицаОплат.Добавить();
							СтрокаОплаты.ДокументОплаты = Неопределено;
							СтрокаОплаты.ДатаОплаты = Неопределено;
							СтрокаОплаты.СуммаОплаты = СуммаКПогашению;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			Если ТаблицаОплат.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если не ОтражатьВРеестре тогда
				// Оплаты заблокированы, дальнейшая обработка не требуется
				Продолжить;
			КонецЕсли;
			
			ТаблицаОплат.Свернуть("ДокументОплаты, ДатаОплаты","СуммаОплаты");
			
			Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 1 
					Или СтрокаПорядокОплаты.ПорядокОплаты = 5 Тогда
					МассивБазиса = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюНДС = СтрокаОплаты.СуммаОплаты;
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюСНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС"),2);
					Если КРаспределениюСНДС > 0 Тогда
						//13.09.2012 Пахоменков тут эта функция в другом модуле
						//МассивРезультата_СНДС = ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюСНДС ,СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС"));
						МассивРезультата_СНДС = УправлениеПроизводством.РаспределитьПропорционально(КРаспределениюСНДС ,СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС"));
					КонецЕсли;
				ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 и НЕ ЗначениеЗаполнено(СтрокаОплаты.ДокументОплаты)Тогда
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС_Часть");
					КРаспределениюНДС = 0;
					Массив_НДС =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС_Часть");
					Для НомерЭлемента = 0 по Массив_НДС.Количество()-1 Цикл
//						Массив_НДС[НомерЭлемента] = МассивБазиса[НомерЭлемента] - Массив_НДС[НомерЭлемента];
						КРаспределениюНДС = КРаспределениюНДС + Массив_НДС[НомерЭлемента];
					КонецЦикла; 
					Если СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть") = 0 Тогда
						КРаспределениюНДС = 0;
						Продолжить;
					иначе
						КРаспределениюНДС = Окр(КРаспределениюНДС * СтрокаОплаты.СуммаОплаты /СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть"),2);
					КонецЕсли; 
					
					
				Иначе	
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС");
					КРаспределениюНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС"),2);
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
				КонецЕсли; 
				
				//13.09.2012 Пахоменков тут эта функция в другом модуле
				//МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
				МассивРезультата = УправлениеПроизводством.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
				
				Если (СтрокаПорядокОплаты.ПорядокОплаты = 1 
					Или СтрокаПорядокОплаты.ПорядокОплаты = 5) И КРаспределениюСНДС > 0 Тогда
					МассивРезультата = МассивРезультата_СНДС;
				КонецЕсли; 
				
				Если КРаспределениюНДС <> 0 Тогда
					//13.09.2012 Пахоменков тут эта функция в другом модуле
					//МассивРезультата_НДС = ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюНДС,Массив_НДС);
					МассивРезультата_НДС = УправлениеПроизводством.РаспределитьПропорционально(КРаспределениюНДС,Массив_НДС);
				КонецЕсли; 
				
				НомерСтроки = 0;
				Для каждого СтрокаЗадолжености Из СтрокаПорядокОплаты.Строки Цикл
					Если МассивРезультата[НомерСтроки] = 0 и ?(КРаспределениюНДС=0,Истина, МассивРезультата_НДС[НомерСтроки] =0) Тогда
						НомерСтроки = НомерСтроки+1;
						Продолжить;
					КонецЕсли; 
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.СчетФактура				= СтрокаЗадолжености.СчетФактура;
					СтрокаРезультата.Поставщик					= СтрокаЗадолжености.Поставщик;
					СтрокаРезультата.ВидЦенности				= СтрокаЗадолжености.ВидЦенности;
					СтрокаРезультата.СчетУчетаНДС				= СтрокаЗадолжености.СчетУчетаНДС;
					СтрокаРезультата.СтавкаНДС					= СтрокаЗадолжености.СтавкаНДС;

					СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
					//Если ПредъявленНДСКВычету0 Тогда
					//	СтрокаРезультата.ДокументОтгрузки	= СтрокаЗадолжености.ДокументОтгрузки;
					//	СтрокаРезультата.Состояние	= СтрокаЗадолжености.Состояние;
					//КонецЕсли; 
					
					СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
					
					СтрокаРезультата.СуммаБезНДС	= МассивРезультата[НомерСтроки]- ?(КРаспределениюНДС=0,0,МассивРезультата_НДС[НомерСтроки]);
					СтрокаРезультата.НДС			= ?(СтрокаПорядокОплаты.ПорядокОплаты = 1 Или СтрокаПорядокОплаты.ПорядокОплаты = 5,МассивРезультата_НДС[НомерСтроки], МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС);
					
					//Если (ПредъявленНДСКВычету0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) 
					//	Или ((СтрокаРезультата.СуммаБезНДС < 0 Или СтрокаРезультата.НДС < 0) И СтрокаЗадолжености.СчетФактураДата >= '20060101') Тогда
					//	Если Дата >= '20060530' Тогда
					//		Если НДСНалоговыйПериод = Неопределено Тогда
					//			НДСНалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, Дата);
					//		КонецЕсли;
					//		СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
					//		Если ПредъявленНДСКВычету0 Тогда
					//			СтрокаРезультата.КорректируемыйПериод = СтрокаЗадолжености.ДокументОтгрузки.Дата;
					//		Иначе 
					//			СтрокаРезультата.КорректируемыйПериод = СтрокаЗадолжености.СчетФактураДата;
					//		КонецЕсли;
					//		Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
					//				КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
					//				КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
					//			СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
					//			СтрокаРезультата.КорректируемыйПериод = '00010101';
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЕсли;
						
					СтрокаЗадолжености.КВычету_БезНДС = СтрокаЗадолжености.КВычету_БезНДС - СтрокаРезультата.СуммаБезНДС;
					СтрокаЗадолжености.КВычету_НДС = СтрокаЗадолжености.КВычету_НДС - СтрокаРезультата.НДС;
					СтрокаЗадолжености.КВычету_СНДС = СтрокаЗадолжености.КВычету_СНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						СтрокаЗадолжености.КВычету_НДС_Часть = СтрокаЗадолжености.КВычету_НДС_Часть - СтрокаРезультата.НДС;
						СтрокаЗадолжености.КВычету_СНДС_Часть = СтрокаЗадолжености.КВычету_СНДС_Часть - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					КонецЕсли; 
					
					НомерСтроки = НомерСтроки+1;
				КонецЦикла; 
				
			КонецЦикла; 
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();

КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()

// Процедура из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Корректирует сумму, доступную к вычету исходя из положений преходного периода,
// установленных в п.10 статьи 2 федерального закона №119-ФЗ
Процедура ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету)
	
	Если Месяц(дата) > 6 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение списка СФ (с аналитикой) с датой ранее 2006 года, по которым НДС был предъявлен к вычету в текущем месяце
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.СчетФактура КАК СчетФактура,
	|	ОстаткиНаНачалоГода.ВидЦенности,
	|	ОстаткиНаНачалоГода.СтавкаНДС,
	|	ОстаткиНаНачалоГода.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленныйОстатки.Организация КАК Организация,
	|		НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|		НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|		НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|		НДСПредъявленныйОстатки.СуммаБезНДСОстаток / 6 КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|		НДСПредъявленныйОстатки.НДСОстаток / 6 КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(
	|			&НачалоГода2006,
	|			Организация = &Организация
	|			    И СчетФактура.Дата < &НачалоГода2006
	|			    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки) КАК ОстаткиНаНачалоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|		&НачалоМесяца,
	|		&КонецМесяца,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура.Дата < &НачалоГода2006
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|		    И Событие = &ОтбираемоеСобытие) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСЗаписиКнигиПокупокОбороты.Организация = ОстаткиНаНачалоГода.Организация
	|			И НДСЗаписиКнигиПокупокОбороты.Поставщик = ОстаткиНаНачалоГода.Поставщик
	|			И НДСЗаписиКнигиПокупокОбороты.СчетФактура = ОстаткиНаНачалоГода.СчетФактура
	|			И НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ОстаткиНаНачалоГода.ВидЦенности
	|			И НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = ОстаткиНаНачалоГода.СтавкаНДС
	|			И НДСЗаписиКнигиПокупокОбороты.СчетУчетаНДС = ОстаткиНаНачалоГода.СчетУчетаНДС
	|ГДЕ
	|	(ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ИЛИ ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0)
	|ИТОГИ
	|	СУММА(СуммаБезНДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(НДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля),
	|	СУММА(НДСНаНачалоГода_ЕжемесячнаяДоля)
	|ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоГода2006", '20060101');
	Запрос.УстановитьПараметр("ОтбираемоеСобытие", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	НаличиеОстатковНаНачалоГода = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Если СтрокаСФ.СчетФактураДата<'20060101' тогда
			СтрокаОстатковНаНачалоГода_СчетФактура = НаличиеОстатковНаНачалоГода.Строки.НайтиСтроки(Новый Структура("СчетФактура",СтрокаСФ.СчетФактура));
			Если СтрокаОстатковНаНачалоГода_СчетФактура.Количество() = 0 Тогда
				// Остатки по указанному счету-фактуре на начло года не обнаружены.
				// Расчет доли к вычету (ограничение) не производится.
				Продолжить;
			КонецЕсли; 
			СтрокаОстатковНаНачалоГода_СчетФактура = СтрокаОстатковНаНачалоГода_СчетФактура[0];
			
			
			КВычетуПоСФ_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_СчетФактура.НДСНаНачалоГода_ЕжемесячнаяДоля);
			Если (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
				КВычетуПоСФ_СНДС = макс(0,КВычетуПоСФ_СНДС - (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце));
			КонецЕсли; 
			
			Если КВычетуПоСФ_СНДС = 0 Тогда
				// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 3 Тогда
					СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 = истина;
					Для каждого СтрокаТаблицы из СтрокаПорядокОплаты.Строки Цикл
						СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_СчетФактура.Строки.НайтиСтроки(Новый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС",СтрокаТаблицы.ВидЦенности,СтрокаТаблицы.СтавкаНДС,СтрокаТаблицы.СчетУчетаНДС));
						
						Если СтрокаОстатковНаНачалоГода_Расшифровка.Количество() =0 Тогда
							// Остатки в указанном разрезе аналитики не обнаружены.
							// Расчет доли к вычету (ограничение) не производится.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							Продолжить;
						Иначе
							СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_Расшифровка[0];
						КонецЕсли;
						
						СтрокаТаблицы.ОпределенаДоля_119ФЗ_2_10 = истина;
						
						КВычету_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля);
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_СНДС = макс(0,КВычету_СНДС - (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						Если КВычету_СНДС = 0 Тогда
							// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
							Продолжить;
						КонецЕсли; 
						
						КВычету_НДС = СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля;
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_НДС = макс(0,КВычету_НДС - (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						//Расчет суммы без НДС
						Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
							// СМР подрядные отрабатываются в соответствии со ст.3 п.2 №119-ФЗ, а не с положениями ст.2 п.10 №119-ФЗ.
							// Суммы к вычету разблокируется поэтапно (1/12) с использование специального документа.
							// Пересчет сумм при формировании записей книги покупок не требуется.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							
						Иначе
							СтрокаТаблицы.КВычету_СНДС_Часть = Макс(Мин(КВычету_СНДС,СтрокаТаблицы.КВычету_СНДС),0);
							СтрокаТаблицы.КВычету_НДС_Часть = Макс(Мин(КВычету_НДС,СтрокаТаблицы.КВычету_НДС),0);
						КонецЕсли; 
						
					КонецЦикла;
					
					СтрокаПорядокОплаты.КВычету_НДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС_Часть");
					СтрокаПорядокОплаты.КВычету_СНДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть");
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавил РГ-Софт - Иванов Антон - 2010-03-02
// Наша процедура заполнения ТЧ ВычетПоПриобретеннымЦенностям
Функция ПолучитьТаблицуДляЗаполненияТЧВычетПоПриобретеннымЦенностям()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалоговыйПериод", НалоговыйПериод);
	СтруктураПараметров.Вставить("ИмяВкладки",      "ВычетПоПриобретеннымЦенностям");

	ЗапросОстатков = Документы.ФормированиеЗаписейКнигиПокупок.ЗапросОстатковНДСПредъявленный(Дата,,СтруктураПараметров);
	
	ТаблицаЗаполненияТЧ = ЗапросОстатков.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаполненияТЧ;
	
КонецФункции

// { РГ-Софт Пахоменков А. 16.12.2014
// На 16.12.2014 процедура отличается от ПолучитьТаблицуДляЗаполненияТЧВычетПоПриобретеннымЦенностям только условием на РТиУ в запросе
Функция ПолучитьТаблицуДляЗаполненияТЧВычетПриИзмененииСтоимостиВСторонуУменьшения()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалоговыйПериод", НалоговыйПериод);
	СтруктураПараметров.Вставить("ИмяВкладки",      "ВычетПриИзмененииСтоимостиВСторонуУменьшения");
	
	ЗапросОстатков = Документы.ФормированиеЗаписейКнигиПокупок.ЗапросОстатковНДСПредъявленный(Дата,,СтруктураПараметров);
	
	ТаблицаЗаполненияТЧ = ЗапросОстатков.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаполненияТЧ;

КонецФункции

// } РГ-Софт Пахоменков А. 16.12.2014

////////////////////////////////////////////////////////////////////////////////
// НДС с авансов

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансов(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе      			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ПолучитьТаблицуДляЗаполненияТЧНДСсАвансов();
	
	НДСсАвансов.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Функция ПолучитьТаблицуДляЗаполненияТЧНДСсАвансов()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалоговыйПериод", НалоговыйПериод);
	СтруктураПараметров.Вставить("ИмяВкладки",      "НДСсАвансов");
	
	ЗапросОстатков = Документы.ФормированиеЗаписейКнигиПокупок.ЗапросОстатковНДСПредъявленный(Дата,,СтруктураПараметров);
	
	ТаблицаЗаполненияТЧ = ЗапросОстатков.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаполненияТЧ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Агентский НДС

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельАгентсткийНДСЗаполнить
//
Процедура ЗаполнитьСтроки_АгентскийНДС(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ПолучитьТаблицуДляЗаполненияТЧАгентскийНДС();
	
	АгентскийНДС.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Функция ПолучитьТаблицуДляЗаполненияТЧАгентскийНДС()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалоговыйПериод", НалоговыйПериод);
	СтруктураПараметров.Вставить("ИмяВкладки",      "АгентскийНДС");
	
	ЗапросОстатков = Документы.ФормированиеЗаписейКнигиПокупок.ЗапросОстатковНДСПредъявленный(Дата,,СтруктураПараметров);
	
	ТаблицаЗаполненияТЧ = ЗапросОстатков.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаполненияТЧ;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// КУРСОВЫЕ РАЗНИЦЫ

Процедура ЗаполнитьСтроки_КурсовыеРазницы(ОтменитьПроведение = Ложь,Сообщать = Истина, СтрокаСообщения = "", ОшибкаЗаполнения = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ПолучитьТаблицуДляЗаполненияТЧКурсовыеРазницы();
	
	КурсовыеРазницы.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры

Функция ПолучитьТаблицуДляЗаполненияТЧКурсовыеРазницы()
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидВычета", Перечисления.ВидыНДСкВычету.КурсовыеРазницы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0)) КАК НДС,
	|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
	|	НДСПредъявленныйОстатки.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ДатаГраница, ВидВычета = &ВидВычета) КАК НДСПредъявленныйОстатки
	|ГДЕ
	|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ПодразделениеОрганизации,
	|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0)) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата";
		
	Возврат Запрос.Выполнить().Выгрузить();

	//Запрос = Новый Запрос;
	//
	//Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("Организация", Организация);
	//	
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	НеоплаченныеОстаткиПоВаучерамОстатки.Ваучер,
	//	|	НеоплаченныеОстаткиПоВаучерамОстатки.СуммаРубОстаток
	//	|ПОМЕСТИТЬ ВаучерыСОстаткамиПоСуммеРуб
	//	|ИЗ
	//	|	РегистрНакопления.НеоплаченныеОстаткиПоВаучерам.Остатки(&ДатаГраница, ) КАК НеоплаченныеОстаткиПоВаучерамОстатки
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ
	//	|	РегистрНакопления.НеоплаченныеОстаткиПоВаучерам.Остатки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	НеоплаченныеОстаткиПоВаучерамОбороты.Регистратор,
	//	|	НеоплаченныеОстаткиПоВаучерамОбороты.Ваучер,
	//	|	НеоплаченныеОстаткиПоВаучерамОбороты.Валюта,
	//	|	НеоплаченныеОстаткиПоВаучерамОбороты.СуммаОборот,
	//	|	НеоплаченныеОстаткиПоВаучерамОбороты.СуммаРубОборот
	//	|ПОМЕСТИТЬ РегистраторыПоВаучерамСОстаткамиПоСуммеРуб
	//	|ИЗ
	//	|	РегистрНакопления.НеоплаченныеОстаткиПоВаучерам.Обороты(
	//	|			,
	//	|			&ДатаГраница,
	//	|			Регистратор,
	//	|			Ваучер В
	//	|				(ВЫБРАТЬ
	//	|					ВаучерыСОстаткамиПоСуммеРуб.Ваучер
	//	|				ИЗ
	//	|					ВаучерыСОстаткамиПоСуммеРуб КАК ВаучерыСОстаткамиПоСуммеРуб)) КАК НеоплаченныеОстаткиПоВаучерамОбороты
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Регистратор,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Ваучер КАК Ваучер,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Валюта,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.СуммаОборот,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.СуммаРубОборот
	//	|ПОМЕСТИТЬ СКППоВаучерамСОстаткамиПоСуммеРуб
	//	|ИЗ
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб КАК РегистраторыПоВаучерамСОстаткамиПоСуммеРуб
	//	|ГДЕ
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Регистратор ССЫЛКА Документ.СчетКнигиПокупок
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Ваучер
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Регистратор,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Ваучер КАК Ваучер,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Валюта,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.СуммаОборот,
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.СуммаРубОборот
	//	|ПОМЕСТИТЬ ОКППоВаучерамСОстаткамиПоСуммеРуб
	//	|ИЗ
	//	|	РегистраторыПоВаучерамСОстаткамиПоСуммеРуб КАК РегистраторыПоВаучерамСОстаткамиПоСуммеРуб
	//	|ГДЕ
	//	|	(НЕ РегистраторыПоВаучерамСОстаткамиПоСуммеРуб.Регистратор ССЫЛКА Документ.СчетКнигиПокупок)
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Ваучер
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб.Регистратор КАК ОКП,
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб.Ваучер КАК Ваучер,
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб.Валюта КАК ОКПВалюта,
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб.СуммаОборот КАК ОКПСуммаОборот,
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб.СуммаРубОборот КАК ОКПСуммаРубОборот,
	//	|	СКППоВаучерамСОстаткамиПоСуммеРуб.Регистратор КАК СКП,
	//	|	СКППоВаучерамСОстаткамиПоСуммеРуб.Валюта КАК СКПВалюта,
	//	|	СКППоВаучерамСОстаткамиПоСуммеРуб.СуммаОборот КАК СКПСуммаОборот,
	//	|	СКППоВаучерамСОстаткамиПоСуммеРуб.СуммаРубОборот КАК СКПСуммаРубОборот
	//	|ИЗ
	//	|	ОКППоВаучерамСОстаткамиПоСуммеРуб КАК ОКППоВаучерамСОстаткамиПоСуммеРуб
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СКППоВаучерамСОстаткамиПоСуммеРуб КАК СКППоВаучерамСОстаткамиПоСуммеРуб
	//	|		ПО ОКППоВаучерамСОстаткамиПоСуммеРуб.Ваучер = СКППоВаучерамСОстаткамиПоСуммеРуб.Ваучер";
	//	
	//Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
