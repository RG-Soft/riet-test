Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,Сегмент");

	// Вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура СписаниеТранспортныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", мНачДата);
	Запрос.УстановитьПараметр("КонецПериода", мКонДата);
	//Закомментировала Федотова Л., РГ-Софт, 20.11.2016, вопрос SLI-0005980
	//Если Найти(Сегмент.Код , "WTT") = 0 Тогда
		Запрос.УстановитьПараметр("Сегменты", Сегмент);
	//Иначе
	//	Сегменты = Новый Массив;
	//	Сегменты.Добавить(Справочники.Сегменты.НайтиПоКоду("WTT"));
	//	Сегменты.Добавить(Справочники.Сегменты.НайтиПоКоду("REW"));
	//	Сегменты.Добавить(Справочники.Сегменты.НайтиПоКоду("GSS"));
	//	Запрос.УстановитьПараметр("Сегменты", Сегменты);
	//КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	InventoryTransportationОстаткиИОбороты.TaxRegistration,
	|	InventoryTransportationОстаткиИОбороты.СуммаРубНачальныйОстаток КАК ТранспортНачальныйОстаток,
	|	InventoryTransportationОстаткиИОбороты.СуммаРубПриход КАК ТранспортПриход,
	|	InventoryTransportationОстаткиИОбороты.СуммаРубРасход КАК ТранспортРасход,
	|	InventoryTransportationОстаткиИОбороты.СуммаРубКонечныйОстаток КАК ТранспортКонечныйОстаток,
	|	InventoryTransportationОстаткиИОбороты.Период
	|ПОМЕСТИТЬ Траспорт
	|ИЗ
	|	РегистрНакопления.InventoryTransportation.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Квартал, ДвиженияИГраницыПериода, Сегмент В (&Сегменты)) КАК InventoryTransportationОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(InventoryBatchesОстаткиИОбороты.SumНачальныйОстаток) КАК ИнвенториНачальныйОстаток,
	|	СУММА(InventoryBatchesОстаткиИОбороты.SumПриход) КАК ИнвенториПриход,
	|	СУММА(InventoryBatchesОстаткиИОбороты.SumКонечныйОстаток) КАК ИнвенториКонечныйОстаток,
	|	InventoryBatchesОстаткиИОбороты.TaxRegistration КАК TaxRegistration,
	|	InventoryBatchesОстаткиИОбороты.Период
	|ПОМЕСТИТЬ Инвентори
	|ИЗ
	|	РегистрНакопления.InventoryBatches.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Квартал, ДвиженияИГраницыПериода, AU.Segment В (&Сегменты)) КАК InventoryBatchesОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	InventoryBatchesОстаткиИОбороты.Период,
	|	InventoryBatchesОстаткиИОбороты.TaxRegistration
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА InventoryBatches.Sum
	|			ИНАЧЕ -InventoryBatches.Sum
	|		КОНЕЦ) КАК ИнвРасход,
	|	НАЧАЛОПЕРИОДА(InventoryBatches.FiscalPeriod, КВАРТАЛ) КАК Период,
	// { RGS LFedotova 15.03.2018 20:23:55 - вопрос SLI-0007514
	//|	InventoryBatches.AU.TaxRegistration КАК TaxRegistration,
	|	InventoryBatches.TaxRegistration КАК TaxRegistration,
	// } RGS LFedotova 15.03.2018 20:24:02 - вопрос SLI-0007514 
	|	1 КАК Поле1
	|ПОМЕСТИТЬ ИнвенториРасход
	|ИЗ
	|	РегистрНакопления.InventoryBatches КАК InventoryBatches
	|ГДЕ
	|	InventoryBatches.Fiscal
	|	И InventoryBatches.FiscalPeriod МЕЖДУ &НачалоПериода И &КонецПериода
	|	И InventoryBatches.AU.Segment В(&Сегменты)
	|
	|СГРУППИРОВАТЬ ПО
	// { RGS LFedotova 15.03.2018 20:23:55 - вопрос SLI-0007514
	//|	InventoryBatches.AU.TaxRegistration,
	|	InventoryBatches.TaxRegistration,
	// } RGS LFedotova 15.03.2018 20:24:02 - вопрос SLI-0007514 
	|	НАЧАЛОПЕРИОДА(InventoryBatches.FiscalPeriod, КВАРТАЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Инвентори.Период, Траспорт.Период) КАК Период,
	|	ЕСТЬNULL(Инвентори.TaxRegistration, Траспорт.TaxRegistration) КАК TaxRegistration,
	|	ЕСТЬNULL(Инвентори.ИнвенториКонечныйОстаток, 0) КАК ИнвенториКонечныйОстаток,
	|	ЕСТЬNULL(Траспорт.ТранспортНачальныйОстаток, 0) КАК ТранспортНачальныйОстаток,
	|	ЕСТЬNULL(Траспорт.ТранспортПриход, 0) КАК ТранспортПриход,
	|	ЕСТЬNULL(Траспорт.ТранспортРасход, 0) КАК ТранспортРасход,
	|	ЕСТЬNULL(Траспорт.ТранспортКонечныйОстаток, 0) КАК ТранспортКонечныйОстаток,
	|	ЕСТЬNULL(Траспорт.ТранспортНачальныйОстаток, 0) + ЕСТЬNULL(Траспорт.ТранспортПриход, 0) КАК ТранспортВсего,
	|	ЕСТЬNULL(ИнвенториРасход.ИнвРасход, 0) КАК ИнвенториРасход,
	|	ЕСТЬNULL(ИнвенториРасход.ИнвРасход, 0) + ЕСТЬNULL(Траспорт.ТранспортРасход, 0) КАК РасходВсего
	|ИЗ
	|	Инвентори КАК Инвентори
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвенториРасход КАК ИнвенториРасход
	|		ПО Инвентори.TaxRegistration = ИнвенториРасход.TaxRegistration
	|			И Инвентори.Период = ИнвенториРасход.Период
	|		ПОЛНОЕ СОЕДИНЕНИЕ Траспорт КАК Траспорт
	|		ПО Инвентори.TaxRegistration = Траспорт.TaxRegistration
	|			И Инвентори.Период = Траспорт.Период";
	
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// { RGS LFedotova 09.03.2017 18:28:28 - вопрос SLI-0007198
		//Если Выборка.ИнвенториКонечныйОстаток = 0 Тогда
		Если Выборка.ИнвенториКонечныйОстаток < 0.1 И Выборка.ИнвенториКонечныйОстаток > -0.1 Тогда
		// } RGS LFedotova 09.03.2017 18:28:34 - вопрос SLI-0007198
			Если Выборка.ИнвенториРасход = 0 Тогда  //добавила Федотова Л., РГ-Софт, 09.03.17
				ПроцентСписания = 0;                //добавила Федотова Л., РГ-Софт, 18.10.11
			Иначе                                   //добавила Федотова Л., РГ-Софт, 18.10.11
				ПроцентСписания = 1;                
			КонецЕсли;                              //добавила Федотова Л., РГ-Софт, 18.10.11
		Иначе
			ПроцентСписания = Окр(Выборка.ИнвенториРасход / Выборка.ИнвенториКонечныйОстаток, 4);
		КонецЕсли;
		Если ПроцентСписания > 1 Тогда
			ПроцентСписания = 1;
		КонецЕсли;
		Сообщить(Выборка.TaxRegistration);
		//исправил Трефиленков Дмитрий, РГ-Софт, 17.07.2014 по вопросу SLI-0004749
		Если Выборка.ИнвенториКонечныйОстаток = 0 Тогда
			Сообщить(ПроцентСписания);
		Иначе
			Сообщить(Выборка.ИнвенториРасход / Выборка.ИнвенториКонечныйОстаток);
		КонецЕсли;
		Сообщить(ПроцентСписания);
		Сообщить(Выборка.ИнвенториРасход);
		Сообщить(Выборка.ИнвенториКонечныйОстаток);
		Сообщить(Выборка.ТранспортНачальныйОстаток);
		Сообщить(Выборка.ТранспортПриход);
		СуммаСписания = (Выборка.ТранспортНачальныйОстаток + Выборка.ТранспортПриход) * ПроцентСписания;
		
		Движение = Движения.InventoryTransportation.ДобавитьРасход();
		Движение.Период = мКонДата;
		Движение.Сегмент = Сегмент;
		Движение.TaxRegistration = Выборка.TaxRegistration;
		Движение.СуммаРуб = СуммаСписания;
		Движение.Сумма = 0;
	КонецЦикла;
	
	Движения.InventoryTransportation.Записать();

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	мНачДата    = НачалоКвартала(СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецКвартала(СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	СписаниеТранспортныхРасходов(СтруктураШапкиДокумента, Отказ, Заголовок) ;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();