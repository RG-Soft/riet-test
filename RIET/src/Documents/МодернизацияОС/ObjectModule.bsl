//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

// Строки, хранят реквизиты имеющие смысл только для бух. учета
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

#Если Клиент Тогда
	
	//Процедура заполняет параметры ответственных лиц организации-получателя формы ОС3
	//
	Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
		
		ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
		
		ПараметрыОрганизации = Новый структура("Руководитель,ДолжностьРуководителя,ГлавБух");	
		
		ПараметрыОрганизации.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
		ПараметрыОрганизации.ДолжностьРуководителя = ОтветственныеЛицаОрганизации.РуководительДолжность;
		ПараметрыОрганизации.ГлавБух = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
		
	КонецПроцедуры
	
	// Функция формирует табличный документ унифицированной формы ОС-14
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Табличный документ по форме ОС-14 (приходный ордер).
	//
	Функция ПечатьОС3()
		
		Макет       = ПолучитьМакет("ОС3");
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("КонДата", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	МодернизацияОСОС.Ссылка.Номер КАК НомерДок,
		               |	МодернизацияОСОС.Ссылка.Дата КАК ДатаДок,
		               |	МодернизацияОСОС.Ссылка.СобытиеОС КАК ВидРабот,
		               |	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
		               |	МодернизацияОСОС.ОсновноеСредство.Наименование КАК НаимОС,
		               |	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвНомер,
		               |	МодернизацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		               |	МодернизацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		               |	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		               |	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
		               |	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаЗатрат,
		               |	МодернизацияОСОС.ФактСрокИспользованияБУ КАК СрокЭксплуатации,
		               |	МодернизацияОС.Организация КАК Организация,
		               |	МодернизацияОС.ПодразделениеОрганизации.Код КАК КодПодр,
		               |	МодернизацияОС.ПодразделениеОрганизации.Наименование КАК Подразделение
		               |ИЗ
		               |	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
		               |				&КонДата,
		               |				ОсновноеСредство В
		               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |						Документ.МодернизацияОС.ОС.ОсновноеСредство
		               |					ИЗ
		               |						Документ.МодернизацияОС.ОС
		               |					ГДЕ
		               |						Документ.МодернизацияОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведения
		               |		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС КАК МодернизацияОС
		               |		ПО МодернизацияОСОС.Ссылка = МодернизацияОС.Ссылка
		               |ГДЕ
		               |	МодернизацияОСОС.Ссылка = &Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		// Печать лицевой стороны.
		// Секция № 1
		Шапка         = Макет.ПолучитьОбласть("Шапка1");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
		Подвал        = Макет.ПолучитьОбласть("Строка1П");
		
		Шапка.Параметры.Заполнить(Выборка);
		ЗаполнитьДанныеОрганизацииПолучателя(Выборка, Шапка);
		ТабДокумент.Вывести(Шапка);
		
		НомПП = 0;
		ДокВводаБУ  = Неопределено;
		ДатаВводаБУ = Дата('00000000');
		
		Выборка1 = Выборка;
		Выборка = РезультатЗапроса.Выгрузить();
		
		Для каждого СтрокаВыборки Из Выборка Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаВыборки.ОсновноеСредство, Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокВводаБУ, ДатаВводаБУ);
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			
			СтрокаТаблицы.Параметры.СрокЭкспл = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаВыборки.СрокЭксплуатации),
			"-",
			Строка(СтрокаВыборки.СрокЭксплуатации) + " мес.");
			
			СтрокаТаблицы.Параметры.ВосстановительнаяСтоимостьПеч = Формат( СтрокаВыборки.СтоимостьБУ, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=-; ЧГ=3,0");
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Секция № 2
		Шапка         = Макет.ПолучитьОбласть("Шапка2");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка2");
		Подвал        = Макет.ПолучитьОбласть("Строка2П");
		
		ТабДокумент.Вывести(Шапка);
		
		НомПП = 0;
		
		Для каждого СтрокаВыборки Из Выборка Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.ИтогоСуммаЗатрат = Выборка.ИТОГ("СуммаЗатрат");
		
		Если Выборка.Количество()=1 Тогда
			Подвал.Параметры.СтоимостьКонечнаяПеч = Выборка.ИТОГ("СтоимостьБУ")+Выборка.ИТОГ("СуммаЗатрат") ;
		КонецЕсли; 
		
		ТабДокумент.Вывести(Подвал);
		
		// Печать оборотной стороны.
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
		ЗаполнитьДанныеОрганизацииПолучателя(Выборка1, ОбластьПечати);
		ТабДокумент.Вывести(ОбластьПечати);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьОС3()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "ОС3" тогда
			
			// Управленческая печатная форма документа
			ТабДокумент = ПечатьОС3();
			
		КонецЕсли;
		
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"), НепосредственнаяПечать);
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС3","Форма ОС-3");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
	|СтоимостьБУХоз,
	|СчетУчетаБУВнеоборотногоАктива,
	|ОС.СрокПолезногоИспользованияБУ,
	|ОС.ФактСрокИспользованияБУ,
	|ОС.ОстСрокИспользованияБУ,
	//|ОС.ОбъемПродукцииРаботБУ,
	//|ОС.ОстОбъемПродукцииРаботБУ,
	|ОС.СтоимостьБУ,
	|ОС.СуммаМодернизацииБУ,
	|ОС.АмортизацияБУ,
	|ОС.АмортизацияЗаМесяцБУ,
	|ОС.ОстСтоимостьБУ";
	//|ОС.КоэффициентАмортизацииБУ,
	//|ОС.КоэффициентУскоренияБУ";
	
	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
	|СтоимостьНУХоз,
	|СчетУчетаНУВнеоборотногоАктива,
	|ОС.СтоимостьНУ,
	|ОС.СуммаМодернизацииНУ,
	|ОС.СрокПолезногоИспользованияНУ,
	|ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(СтруктураШапкиДокумента, Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУВнеоборотногоАктива"+?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,",СчетУчетаНУВнеоборотногоАктива","");
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ОбъектСтроительства";
	ДополнитьОбязательныеРеквизитыШапкиРегл(СтруктураШапкиДокумента, ОбязательныеРеквизитыШапки);
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета,,СтруктураШапкиДокумента);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание
		тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииБУ") = СтруктураШапкиДокумента.СтоимостьБУ) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	//Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииБУХоз") = СтруктураШапкиДокумента.СтоимостьБУХоз) Тогда
	//	ОбщегоНазначения.ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!", Отказ, Заголовок);
	//КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииНУ") = СтруктураШапкиДокумента.СтоимостьНУ) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		//Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииНУХоз") = СтруктураШапкиДокумента.СтоимостьНУХоз) Тогда
		//	ОбщегоНазначения.ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!", Отказ, Заголовок);
		//КонецЕсли;
		
		// Проверка правильности указания сумм расходов на капитальные вложения.
		Если ТаблицаОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") > 0 Тогда
			
			// Проверим, не превышает ли допустимый процент сумма капитальных вложений, включаемых в состав расходов.
			Для Каждого СтрокаОС Из ТаблицаОС Цикл
				
				Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
					
					Если ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СуммаМодернизацииНУ),
						СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ / СтрокаОС.СуммаМодернизацииНУ * 100,
						0) > 10 Тогда
						
						ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """ + СтрокаОС.НомерСтроки + 
						""" по основному средству <" + СтрокаОС.ОсновноеСредство + 
						"> сумма капитальных вложений, включаемых в состав расходов (НУ), превышает 10% суммы модернизации (НУ)!", Отказ, Заголовок);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитовТЧРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС", СтруктураШапкиДокумента);
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		//Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
		//	Отказ = Истина;
		//КонецЕсли;
		
		//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//		
		//		Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
		//			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
		//			Отказ = Истина;
		//			Возврат;
		//		КонецЕсли;
		//		
		//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда
		//			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (НУ).",,, СтатусСообщения.Важное);
		//			Отказ = Истина;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
	КонецЦикла;
	
	// Логические проверки
	//ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт 
	
	СписокОС = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОС_ИнвенНомер.ОсновноеСредство,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	ЕСТЬNULL(АмортизацияЗаПериод.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(АмортизацияЗаПериод.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ОС_ИнвенНомер.ИнвентарныйНомер,
	|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ,
	|	НачислениеАмортизации.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ,
	|	НачислениеАмортизации.СрокНУ КАК СрокПолезногоИспользованияНУ,
	|	РАЗНОСТЬДАТ(ОС_ДатаЭксплуатация.ДатаСостояния, &ДатаН, МЕСЯЦ) КАК ФактСрокИспользованияБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|		ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|		ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ПервоначальныеСведения.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения) КАК ОС_ИнвенНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(&Дата, ) КАК НачислениеАмортизации
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ) КАК СтоимостьАмортизацияОСОстатки
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|			СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВведеноВЭксплуатацию)
	|			И СостоянияОСОрганизаций.ОсновноеСредство В(&СписокОС)) КАК ОС_ДатаЭксплуатация
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = ОС_ДатаЭксплуатация.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.ДатаПроведения), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата", ДатаПроведения);
	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.ДатаПроведения));
	
	табСведенияОС = Запрос.Выполнить().Выгрузить();
	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого Строка Из ДокОбъект.ОС Цикл	
		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Если НЕ НайденноеОС = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
		КонецЕсли;
		//Строка.СуммаМодернизацииНУ          = ?(ДокОбъект.ОС.Количество()<>0,Строка.СтоимостьНУ / ДокОбъект.ОС.Количество(),0);
		//Строка.СуммаМодернизацииБУ          = ?(ДокОбъект.ОС.Количество()<>0,Строка.СтоимостьБУ / ДокОбъект.ОС.Количество(),0);
	КонецЦикла;
	
КонецПроцедуры 

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ОсновноеСредство
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ОсновноеСредство В(&СписокОС)";
	
	Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ,
	|	ИсходнаяТаблица.АмортизацияБУ,
	|	ИсходнаяТаблица.АмортизацияНУ
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство,
	|	ТабЧасть.СуммаМодернизацииБУ КАК СтоимостьБУ,
	|	ТабЧасть.СуммаМодернизацииНУ КАК СтоимостьНУ,
	|	ТабЧасть.СуммаКапитальныхВложенийВключаемыхВРасходыНУ КАК СуммаКВ
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ИсходнаяТаблица.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУ, ИсходнаяТаблица.СтоимостьБУ) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУ, ИсходнаяТаблица.СтоимостьНУ) КАК СтоимостьНУ,
	//|	ЕСТЬNULL(ИсходнаяТаблица.СуммаКВ, 0)+ ТаблицаПоОС.СуммаКВ КАК СуммаКВ,
	|	ЕСТЬNULL(ТаблицаПоОС.СуммаКВ, ИсходнаяТаблица.СуммаКВ) КАК СуммаКВ,
	|	ЕСТЬNULL(ИсходнаяТаблица.АмортизацияБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(ИсходнаяТаблица.АмортизацияНУ, 0) КАК АмортизацияНУ
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|		ПО ИсходнаяТаблица.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("ТабЧасть", Документ.ОС.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока					 = НоваяТаблица.Добавить();
		НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Активность		 = Истина;
		НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
		НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.Подразделение    = Документ.ПодразделениеОрганизации;
		НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
		НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;      
		НоваяСтрока.СуммаКВ			 = Выборка.СуммаКВ;
		НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
		НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
	КонецЦикла;
	НоваяТаблица.ЗаполнитьЗначения(Документ, "Регистратор");
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();
	
	//ФормаДок = Документ.ПолучитьФорму();
	//Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ТЧ_ДоПерезаполнения = ДокументОбъект.ОС.Выгрузить();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		ТЧ_ПослеПерезаполнения = ДокументОбъект.ОС.Выгрузить();
		ТаблицыОдинаковы = НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТЧ_ДоПерезаполнения, ТЧ_ПослеПерезаполнения);
		Если Не ТаблицыОдинаковы Тогда
			Сообщить("Перезаполнена табличная часть документа " + Документ);
			ДокументОбъект.Записать();
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = ДатаПроведения;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	ОперацииОС             = Движения.СобытияОСОрганизаций;
	ПроводкиБУ             = Движения.Хозрасчетный;
	
	//Добавил Трефиленков Дмитрий для учета ОС в валюте
	Доллар = Справочники.Валюты.НайтиПоНаименованию("USD");
	КурсДоллара = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоНаименованию("USD"), ДатаПроведения).Курс;
	//конец добавления
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(ДатаПроведения, Организация, масОС);
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период             = ДатаПроведения;
		Движение.ОсновноеСредство   = ТекОС;
		Движение.Организация        = ТекОрганизация;
		Движение.Событие            = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента     = СтруктураШапкиДокумента.Номер;
		Движение.СуммаЗатратБУ      = СтрокаТЧ.СуммаМодернизацииБУ;
		Движение.СуммаЗатратНУ      = СтрокаТЧ.СуммаМодернизацииНУ;
		
		//Добавил РГ-Софт - Пронин Иван - 2009-09-21
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
		ДвижениеВТаблице.СрокБУ  			 = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
		ДвижениеВТаблице.ДатаИзмененияБУ  	 = ДатаПроведения;
		ДвижениеВТаблице.СтоимостьБУ         = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
		
	КонецЦикла;
	
	
	// списание амортизации Д 01.01 К 08.03
	//	СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ;
	//	
	//	Если НЕ (СуммаПроводки = 0) Тогда
	
	//		Проводка = ПроводкиБУ.Добавить();
	
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = ТекОрганизация;
	//		Проводка.Содержание   = "Модернизация подрядн. способ";
	//		Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеОрганизации);
	//		Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
	//		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Сумма        = СуммаПроводки;
	//		
	//		//Добавил Трефиленков Дмитрий для учета ОС в валюте
	//		//по валютному учету как раз будет правильная сумма в рублях :)
	//		Если ТекОС.Валюта = Доллар Тогда 
	//			Проводка.ВалютнаяСуммаДт= Проводка.Сумма*КурсДоллара;
	//		Иначе
	//			Проводка.ВалютнаяСуммаДт= Проводка.Сумма;
	//		КонецЕсли;
	//		//конец добавления
	
	//	КонецЕсли;
	
	//	// списание амортизации Д 01.01 К 08.03
	//	//СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУХоз;
	//	СуммаПроводки = 0;
	//	
	//	Если НЕ (СуммаПроводки = 0) Тогда
	
	//		Проводка = ПроводкиБУ.Добавить();
	
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = ТекОрганизация;
	//		Проводка.Содержание   = "Модернизация хоз. способ";
	//		Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеОрганизации);
	//		Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
	//		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Сумма        = СуммаПроводки;
	//		
	//		//Добавил Трефиленков Дмитрий для учета ОС в валюте
	//		//по валютному учету как раз будет правильная сумма в рублях :)
	//		Если ТекОС.Валюта = Доллар Тогда 
	//			Проводка.ВалютнаяСуммаДт= Проводка.Сумма*КурсДоллара;
	//		Иначе
	//			Проводка.ВалютнаяСуммаДт= Проводка.Сумма;
	//		КонецЕсли;
	//		//конец добавления
	
	//	КонецЕсли;
	
	//КонецЦикла;
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
	
	//	ПоддержкаПБУ18 = ОбщегоНазначения.ПоддержкаПБУ18(Организация, Дата);
	
	
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		//Добавил РГ-Софт - Пронин Иван - 2009-09-21
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
		
		ДвижениеВТаблице.СрокНУ = СтрокаТЧ.СрокПолезногоИспользованияНУ;
		// { RGS LFedotova 11.07.2017 23:54:22 - вопрос SLI-0007299
		ДвижениеВТаблице.СрокБУ  = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
		ДвижениеВТаблице.СрокПолезногоИспользованияБУ  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
		// } RGS LFedotova 11.07.2017 23:54:38 - вопрос SLI-0007299
	КонецЦикла;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			
			Если Движение.СпециальныйКоэффициент = 0 Тогда Движение.СпециальныйКоэффициент = 1; КонецЕсли;
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;		
	
	//Движение по регистру ОборудованиеDSS
	Если ЗначениеЗаполнено(ПроводкаDSSДеталейСКП) Тогда
	    //Найдем остатки сумм по Проводке деталей СКП, чтобы их и списать
		Запрос = Новый Запрос;
		Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	СУММА(ОборудованиеDSS.СуммаРуб * ВЫБОР
		//	|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		//	|				ТОГДА 1
		//	|			ИНАЧЕ -1
		//	|		КОНЕЦ) КАК СуммаРуб,
		//	|	СУММА(ОборудованиеDSS.Сумма * ВЫБОР
		//	|			КОГДА ОборудованиеDSS.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		//	|				ТОГДА 1
		//	|			ИНАЧЕ -1
		//	|		КОНЕЦ) КАК Сумма,
		//	|	ОборудованиеDSS.Количество,
		//	|	ОборудованиеDSS.Номенклатура
		//	|ИЗ
		//	|	РегистрНакопления.ОборудованиеDSS КАК ОборудованиеDSS
		//	|ГДЕ
		//	|	ОборудованиеDSS.ПроводкаДеталейСКП = &ПроводкаДеталейСКП
		//	|
		//	|СГРУППИРОВАТЬ ПО
		//	|	ОборудованиеDSS.Количество,
		//	|	ОборудованиеDSS.Номенклатура";

			"ВЫБРАТЬ
			|	ОборудованиеDSSОстатки.Номенклатура,
			|	ОборудованиеDSSОстатки.КоличествоОстаток КАК Количество,
			|	ОборудованиеDSSОстатки.СуммаОстаток КАК Сумма,
			|	ОборудованиеDSSОстатки.СуммаРубОстаток КАК СуммаРуб
			|ИЗ
			|	РегистрНакопления.ОборудованиеDSS.Остатки(, ) КАК ОборудованиеDSSОстатки
			|ГДЕ
			|	ОборудованиеDSSОстатки.ПроводкаДеталейСКП = &ПроводкаДеталейСКП
			|
			|СГРУППИРОВАТЬ ПО
			|	ОборудованиеDSSОстатки.Номенклатура,
			|	ОборудованиеDSSОстатки.КоличествоОстаток,
			|	ОборудованиеDSSОстатки.СуммаОстаток,
			|	ОборудованиеDSSОстатки.СуммаРубОстаток";
		
		Запрос.УстановитьПараметр("ПроводкаДеталейСКП", ПроводкаDSSДеталейСКП);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ВыборкаДетальныеЗаписи.СуммаРуб = СтоимостьБУ Тогда
				BaseAmount = ВыборкаДетальныеЗаписи.Сумма;
			ИначеЕсли НЕ ВыборкаДетальныеЗаписи.СуммаРуб = 0 Тогда
				BaseAmount = ВыборкаДетальныеЗаписи.Сумма * СтоимостьБУ/ВыборкаДетальныеЗаписи.СуммаРуб;
			Иначе
				BaseAmount = 0;
			КонецЕсли; 	
		
			Движение = Движения.ОборудованиеDSS.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
			Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			Движение.Период = ДатаПроведения;
			Движение.ПроводкаДеталейСКП = ПроводкаDSSДеталейСКП;
			Движение.Сумма = BaseAmount;
			Движение.СуммаРуб = ОС[0].СуммаМодернизацииБУ;
		КонецЕсли;
	КонецЕсли;
	
	//		//Д 01.01 К 08.03
	//		СуммаПроводки   = СтрокаТЧ.СуммаМодернизацииНУ;
	//		СуммаПроводкиПР = ?(ПоддержкаПБУ18, СтрокаТЧ.СуммаМодернизацииПР, 0);
	//		СуммаПроводкиВР = ?(ПоддержкаПБУ18, СтрокаТЧ.СуммаМодернизацииВР, 0);
	//		
	//		Если НЕ (СуммаПроводки = 0) Тогда
	//			
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеОрганизации);
	//			Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	
	//		КонецЕсли;
	//		
	//		Если НЕ (СуммаПроводкиПР = 0) Тогда
	//			
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводкиПР;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	
	//		КонецЕсли;
	//		
	//		Если НЕ (СуммаПроводкиВР = 0) Тогда
	//			
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводкиВР;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	
	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		//СуммаПроводки = СтрокаТЧ.СуммаМодернизацииНУХоз;
	//		//СуммаПроводкиПР = ?(ПоддержкаПБУ18, СтрокаТЧ.СуммаМодернизацииПРХоз, 0);
	//		//СуммаПроводкиВР = ?(ПоддержкаПБУ18, СтрокаТЧ.СуммаМодернизацииВРХоз, 0);
	//		СуммаПроводки = 0;
	//		СуммаПроводкиПР = 0;
	//		СуммаПроводкиВР = 0;			
	
	//		Если НЕ (СуммаПроводки = 0) Тогда
	
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	
	//		КонецЕсли;
	//		
	//		Если НЕ (СуммаПроводкиПР = 0) Тогда
	
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводкиПР;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			
	//		КонецЕсли;
	//		
	//		Если НЕ (СуммаПроводкиВР = 0) Тогда
	
	//			Проводка = ПроводкиНУ.Добавить();
	
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНУ;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводкиВР;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;				
	
	//		КонецЕсли;
	//		
	//		// Проводка по счету КВ "Расходы на капитальные вложения по п. 1.1 ст. 259 НК РФ"
	//		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
	//			
	//			Проводка = ПроводкиНУ.Добавить();
	//			
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//			Проводка.Сумма        = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			
	//			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ТекОС.Подразделение);
	//			Проводка.ПодразделениеОрганизацииДт = ПодразделениеОрганизации;
	//			
	//		КонецЕсли;
	
	//	КонецЦикла;
	//		
	//КонецЕсли;
	
	//Движения по подсистеме НДС
	//ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
//// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" 
//Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
//	
//	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТаблицаПоОС.Количество() = 0 Тогда
//		// Движения по этому документу делать не нужно
//		Возврат;
//	КонецЕсли; 
//	
//	//Вычислим коэффициент распределения
//	ИтоговаяСуммаМодернизацииБУ = ТаблицаПоОС.Итог("СуммаМодернизацииБУ");
//	//ИтоговаяСуммаМодернизацииБУХоз = ТаблицаПоОС.Итог("СуммаМодернизацииБУХоз");
//	ИтоговаяСуммаМодернизацииБУХоз = 0;
//	
//	Если (ИтоговаяСуммаМодернизацииБУ <= 0) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	//Вычислим коэффициент распределения
//	Запрос = Новый Запрос;
//	
//	Запрос.УстановитьПараметр("КонецПериода"     	, Новый граница(новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Включая));
//	Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива);
//	Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
//	Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
//	
//	ВидыСубконто = Новый Массив;
//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
//	
//	ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
//	
//	Если ЕстьСубконто_СпособыСтроительства Тогда
//		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
//		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
//		Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	СУММА(ВЫБОР
//		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
//		|				ТОГДА 0
//		|			ИНАЧЕ Остатки.СуммаОстаток
//		|		КОНЕЦ) КАК СуммаОстаток,
//		|	СУММА(ВЫБОР
//		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
//		|				ТОГДА Остатки.СуммаОстаток
//		|			ИНАЧЕ 0
//		|		КОНЕЦ) КАК Хозспособ_Остаток
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
//		|		&КонецПериода,
//		|		Счет = &Счет,
//		|		&ВидыСубконто,
//		|		Организация = &Организация
//		|		    И Субконто1 = &Объект) КАК Остатки";
//	Иначе
//		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Остатки.СуммаОстаток КАК СуммаОстаток,
//		|	0 КАК Хозспособ_Остаток
//		|ИЗ
//		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
//		|		&КонецПериода,
//		|		Счет = &Счет,
//		|		&ВидыСубконто,
//		|		Организация = &Организация
//		|		    И Субконто1 = &Объект) КАК Остатки";
//		
//	КонецЕсли; 
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда
//		СуммаОстатка = 0;
//		СуммаОстатка_Хозспособ = 0;
//	иначе
//		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
//		СуммаОстатка  = Результат.Итог("СуммаОстаток");
//		СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
//	КонецЕсли; 
//	
//	Если (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз) > 0 Тогда
//		Если (СуммаОстатка = 0) тогда
//			ОбщегоНазначения.СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
//			КоэффициентРаспределения = 1;
//		ИначеЕсли (СуммаОстатка < 0) Тогда
//			ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
//			КоэффициентРаспределения = 1;
//		Иначе
//			КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка;
//		КонецЕсли;
//		
//		// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
//		УчетНДС.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
//		СтруктураШапкиДокумента.ОбъектСтроительства,
//		Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
//		Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
//		КоэффициентРаспределения, Движения, Отказ);
//	КонецЕсли;							
//	
//	//Добавим необходимые события в рег. НДСпоОСиНМА по каждому ОС в табличной части		
//	ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
//	
//	ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');
//	
//	// Отразим НДС при принятии к учету ОС хоз способом.
//	Если ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
//		СуммаНДСПоХозСпособу = ОбщегоНазначения.РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
//		Если СтруктураШапкиДокумента.Дата >= '20060101' Тогда
//			// НДС по хозспособу на джданный моемнт может быть уже начислен.
//			// Необходимо определить долю погашения ранее начисленного НДС и долю текущего начисления
//			Если (СуммаОстатка_Хозспособ = 0) тогда
//				ОбщегоНазначения.СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
//				КоэффициентРаспределения = 1;
//			ИначеЕсли (СуммаОстатка_Хозспособ < 0) Тогда
//				ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
//				КоэффициентРаспределения = 1;
//			Иначе
//				КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка_Хозспособ;
//			КонецЕсли;
//			
//			// Отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства по СМР собственными силами (НДС начислен ранее).
//			СуммаБезНДСПоХозСпособу_НачисленоРанее = УчетНДС.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента,
//			СтруктураШапкиДокумента.ОбъектСтроительства,
//			Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
//			Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
//			КоэффициентРаспределения, Движения, Отказ);
//			
//			ИтоговаяСуммаМодернизацииБУХоз = ИтоговаяСуммаМодернизацииБУХоз - СуммаБезНДСПоХозСпособу_НачисленоРанее;
//			СуммаНДСПоХозСпособу = ОбщегоНазначения.РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
//			
//			ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
//		КонецЕсли; 
//		
//		Если ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
//			
//			УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Движения, Отказ,ИтоговаяСуммаМодернизацииБУХоз,СуммаНДСПоХозСпособу);
//			
//			//Дополним ТаблицаДвижений_НДСпоОСиНМА 
//			ТаблицаДвижений_НДСНачисленныйПредъявленный = Движения.НДСПредъявленный.Выгрузить();
//			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСНачисленныйПредъявленный,ТаблицаДвижений_НДСпоОСиНМА);
//			//Дополним последнюю строку таблицы ТаблицаДвижений_НДСпоОСиНМА
//			ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].Объект				 = СтруктураШапкиДокумента.ОбъектСтроительства;
//			ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НДСВключенВСтоимость = Ложь;
//			ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НеВлияетНаВычет = ОсобыеУсловияБлокировкиВычета2006;
//			
//			// Проводка по уплате НДС в бюджет
//			ПроводкаБУ = Движения.Хозрасчетный.Добавить();
//			ПроводкаБУ.Период = СтруктураШапкиДокумента.Дата;
//			ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
//			ПроводкаБУ.Содержание = "Начислен НДС по строительству хоз. способом";
//			
//			ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка, Истина);
//			
//			ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
//			ОбщегоНазначения.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
//			
//			ПроводкаБУ.Сумма = СуммаНДСПоХозСпособу;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
//	Если ОсобыеУсловияБлокировкиВычета2006 тогда
//		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
//	КонецЕсли;
//	// Заблокируем вычет в текущем месяце
//	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
//	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
//	Движения.НДСпоОСиНМА.ВыполнитьПриход();
//	
//	//на след. месяц разблокируем вычет по ОС введенн. в экспл.
//	ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
//	Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
//	Движения.НДСпоОСиНМА.ВыполнитьРасход();
//	
//	
//КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Выборка строк табличной части
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаПроведения);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПринятоКУчету",   Перечисления.СостоянияОС.ПринятоКУчету);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодернизацияОСОС.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МодернизацияОСОС.НомерСтроки КАК НомерСтроки,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СуммаМодернизацииБУ,
	|	МодернизацияОСОС.АмортизацияБУ КАК АмортизацияБУ,
	|	МодернизацияОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ,
	|	МодернизацияОСОС.СрокПолезногоИспользованияБУ,
	|	МодернизацияОСОС.ФактСрокИспользованияБУ,
	|	МодернизацияОСОС.СрокПолезногоИспользованияНУ,
	|	МодернизацияОСОС.СуммаМодернизацииНУ,
	|	МодернизацияОСОС.СуммаМодернизацииПР,
	|	МодернизацияОСОС.СуммаМодернизацииВР,
	|	МодернизацияОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаНУ,
	|	ВЫБОР
	|		КОГДА ОС_принятые.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ОС_принятые.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР
	|		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ТЧ.ОсновноеСредство
	|						ИЗ
	|							ТЧ)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	|				&ДатаДокумента,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ТЧ.ОсновноеСредство
	|						ИЗ
	|							ТЧ)) КАК СчетаНалоговогоУчетаОССрезПоследних
	|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТЧ.ОсновноеСредство
	|					ИЗ
	|						ТЧ)
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(
	|				&ДатаДокумента,
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТЧ.ОсновноеСредство
	|					ИЗ
	|						ТЧ)) КАК СтоимостьАмортизацияОСОстатки
	|		ПО МодернизацияОСОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	|			И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	|			И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТЧ.ОсновноеСредство
	|					ИЗ
	|						ТЧ)
	|			И СостоянияОСОрганизацииСрезПоследних.Состояние = &ПринятоКУчету) КАК ОС_принятые
	|		ПО МодернизацияОСОС.ОсновноеСредство = ОС_принятые.ОсновноеСредство
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//ФормаДок = ПолучитьФорму();
	
	//Если ФормаДок.Открыта() Тогда
	//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//		ОСЗаполнитьДляСписка(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	// Если на документ оформлен счет-фактура, необходимо проконтролировать, помечать или нет 
	// в зависимости от способа принятия к учету.
	Если СтоимостьБУХоз > 0 Тогда
		
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
		
	Иначе	
		
		СчетФактура 		= ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
		
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СчетФактура) Тогда
			СчетФактураОбъект 	= СчетФактура.ПолучитьОбъект();
			
			Если НЕ (СчетФактураОбъект.ПометкаУдаления) Тогда
				
				Сообщить("Счет-фактура № "+ СчетФактура.Номер + " от " + СчетФактура.Дата + " помечен на удаление!");
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
				СчетФактураОбъект.Комментарий = "Пометка удаления установлена документом ""Модернизация ОС"" № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy");
				СчетФактураОбъект.Записать();
				
			КонецЕсли;							
			
		КонецЕсли;	
		
	КонецЕсли;								
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры
