// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мУчетнаяПолитикаБУ Экспорт;
Перем мУчетнаяПолитикаНУ Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

//// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета дебета
	КассаВВалюте = Ложь;
	ВалютаРег    = мВалютаРегламентированногоУчета;
	Если СчетКасса.Валютный Тогда
		КассаВВалюте = Истина;
	КонецЕсли;
	
	СчетДт=СчетКасса;
		
	КодыСчетов.Дебет=СчетДт;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		Если КассаВВалюте Тогда
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабСчет=РасшифровкаПлатежа.Выгрузить();
		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");
		
		СтрокаКредит="";
		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И СтрНайти(СтрокаКредит,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И СтрНайти(СтрокаКредит,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаКредит=Сред(СтрокаКредит,2);
		
	КонецЕсли;
	
	КодыСчетов.Кредит=СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет()

Функция РубКоп(Сумма)
	
	Руб=Цел(Сумма);
	Коп=ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп=""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

//// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("КО1");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Валютный=(НЕ Шапка.ВалютаДокумента=мВалютаРегламентированногоУчета);

	// Выводим шапку ПКО

	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	ОбластьМакета.Параметры.СуммаРубКоп       = ?(Валютный,Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+" "+СокрЛП(Шапка.ВалютаДокумента),РубКоп(Шапка.Сумма));
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2; ЧРД=-")+?(Валютный," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = РаботаСДиалогами.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечатьБезПрефикса(Шапка);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;

	ТабНДС = РасшифровкаПлатежа.Выгрузить();

	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");

	ТекстСуммаНДС="";

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (" + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
		КонецЦикла;
		
	Иначе
		ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (без налога) " + Формат(0, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
	КонецЕсли;

	ТекстСуммаНДС = Сред(ТекстСуммаНДС,2);

	ОбластьМакета.Параметры.ВТомЧисле=ТекстСуммаНДС;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;

	ТекстПринятоОт = Шапка.ПринятоОт;

	Если ТекстПринятоОт = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда

		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо=&ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда
				ТекстПринятоОт = ""+Результат.Фамилия+" "+ Результат.Имя+ " "+ Результат.Отчество;
			КонецЕсли;

		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ТекстПринятоОт = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);

		КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.ПринятоОт  = ТекстПринятоОт;
	ОбластьМакета.Параметры.Основание  = Основание;
	ОбластьМакета.Параметры.Приложение = Приложение;

	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

//// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПКО" Тогда
		
		ТабДокумент = ПечатьПКО();
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО","Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

//// Пересчитывает сумму НДС
////
//// Параметры:
////  Нет.
////
//Процедура SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

//КонецПроцедуры // SalesBook.ПересчитатьСуммуНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)

	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("СуммаДокумента","Не указана сумма по документу.");
	СтруктураОбязательныхПолей.Вставить("СчетКасса","Не указан счет учета денежных средств.");

	Если СчетКасса.Валютный Тогда
		 СтруктураОбязательныхПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
		СтруктураОбязательныхПолей.Вставить("СчетОрганизации","Не указан банковский счет организации");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверяем заполнение табличной части 
	Если (ЕстьРасчетыСКонтрагентами) ИЛИ (ЕстьРасчетыПоКредитам) Тогда

		СтруктураПолей = Новый Структура();

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");

		СтруктураПолей.Вставить("ДоговорКонтрагента");
		
		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			БухгалтерскийУчет.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, Платеж.ДоговорКонтрагента, 
			                                                       Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
																	   
		КонецЦикла;

	КонецЕсли;

	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка) И мУчетВПродажныхЦенах Тогда
		
		СтруктураПолей = Новый Структура();
        СтруктураПолей.Вставить("СтавкаНДС");
		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа

	ДатаДок            = Дата;
	ПроводкиБУ         = Движения.Хозрасчетный;

	ВалютаРег          = мВалютаРегламентированногоУчета;
	ДанныеОВалюте      = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, ДатаДок);

	КурсДокумента      = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьДокумента = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	КассаВВалюте       = СчетКасса.Валютный;
	СчетДт             = СчетКасса;

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет",СчетДт);

		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,"Расчеты по кредитам и займам",""))=Ложь тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда

		Если СтруктураШапкиДокумента.ВыручкаСНТТ Тогда

			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				// Запишем проводки по выручке
				Если мУчетВПродажныхЦенах Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Оприходована выручка из розничной торговли";
					
					Проводка.СчетДт      = СчетДт;
					Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = Строка.СтатьяДвиженияДенежныхСредств;
					
					Если мУчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
					Иначе
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
						Проводка.СубконтоКт.СтавкиНДС = Строка.СтавкаНДС;
					КонецЕсли;
					Проводка.Сумма       = Строка.СуммаПлатежа;
					
					//списание товаров по продажным ценам
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Оприходована выручка из розничной торговли";
					
					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",  Строка.СтавкаНДС);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтруктураШапкиДокумента.Контрагент);
										
					Если мУчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
					Иначе
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
					КонецЕсли;
					Проводка.Сумма       = Строка.СуммаПлатежа;
					
					//НДС
					Если Строка.СуммаНДС > 0 Тогда
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Выделен НДС";
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Продажи_НДС;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
						Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
						Проводка.Сумма       = Строка.СуммаНДС;
						
					КонецЕсли;
					
					
				Иначе
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Оприходована выручка из розничной торговли";
					
					Проводка.СчетДт      = СчетДт;
					Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = Строка.СтатьяДвиженияДенежныхСредств;
					
					Если мУчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
					Иначе
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
						Проводка.СубконтоКт.СтавкиНДС = Строка.СтавкаНДС;
					КонецЕсли;
					
					Проводка.Сумма       = Строка.СуммаПлатежа;
					
					Если КассаВВалюте Тогда
						
						Проводка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа,
						СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
						КурсДокумента, ДанныеОВалюте.Курс, 
						КратностьДокумента, ДанныеОВалюте.Кратность);
						
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;
						
						Если СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;
						КонецЕсли;
						
					КонецЕсли; // Если КассаВВалюте Тогда

					Если Строка.СуммаНДС > 0 Тогда
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Выделен НДС";
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.Продажи_НДС;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
						Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
						Проводка.Сумма       = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДС,
																		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
																		КурсДокумента, ДанныеОВалюте.Курс, 
																		КратностьДокумента, ДанныеОВалюте.Кратность);
						
					КонецЕсли; // Если СуммаНДС > 0 Тогда

					// Запишем проводки по учету розничной вуручки - Счета РВ
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = Организация;
					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручка;
					Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Контрагент;
					Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
					Проводка.Содержание  = "Учет РВ";
					Проводка.НомерЖурнала= "РВ";
					Проводка.Сумма       = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа,
																	СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
																	КурсДокумента, ДанныеОВалюте.Курс, 
																	КратностьДокумента, ДанныеОВалюте.Кратность);
					
					Если Строка.СуммаНДС > 0 Тогда												
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = ДатаДок;
						Проводка.Организация = Организация;
						Проводка.Содержание  = "Учет НДС РВ";
						Проводка.НомерЖурнала= "РВ";
						Проводка.Сумма       = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДС,
																			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
																			КурсДокумента, ДанныеОВалюте.Курс, 
																			КратностьДокумента, ДанныеОВалюте.Кратность);
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДСВРозничнойВыручке;
						Проводка.СубконтоДт.Склады    = СтруктураШапкиДокумента.Контрагент;
						Проводка.СубконтоДт.СтавкиНДС = Строка.СтавкаНДС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если мУчетВПродажныхЦенах Тогда
				ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	Иначе

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = Организация;

		Проводка.СчетДт      = СчетДт;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств",  РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

			Если КассаВВалюте Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Возврат средств от подотчетника";
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Контрагент);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Прочие поступления";

			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоКт1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СубконтоКт2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СубконтоКт3);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентом;

			Проводка.Содержание = "Получение наличных в банке";
			Проводка.СчетКт     = СчетКт;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СчетОрганизации);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

		КонецЕсли; // Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

		Если КассаВВалюте Тогда

			Проводка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
										СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
										КурсДокумента, ДанныеОВалюте.Курс, 
										КратностьДокумента, ДанныеОВалюте.Кратность);

			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;

			Если СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

			Если СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;

		Иначе

			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;

		КонецЕсли; // Если КассаВВалюте Тогда

	КонецЕсли; // Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента,Отказ, Заголовок)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка и СтруктураШапкиДокумента.ВыручкаСНТТ и мУчетВПродажныхЦенах Тогда
		
		СтруктураТаблицыВыручки = Новый Структура("ВидЦенности, СчетДоходовБУ
				|, СтавкаНДС
				|, СуммаПлатежа, СуммаНДС, СуммаБезНДСВал
				|",,
				,
				,"СуммаВал","НДСВал",
				);
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(РасшифровкаПлатежа.Выгрузить(),СтруктураТаблицыВыручки,,Истина);
		ТаблицаВыручки.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаВыручки.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаВыручки.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		ТаблицаВыручки.Колонки.Добавить("Ценность");
		
		ТаблицаВыручки.ЗаполнитьЗначения(?(мУчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД,ПланыСчетов.Хозрасчетный.ВыручкаЕНВД,ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД),"СчетДоходовБУ");
		ТаблицаВыручки.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары,"ВидЦенности");
		
		Если не СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			ДанныеОВалютеРегУчета			= ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
			СуммаДокументаВВалютеРеглУчета = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТаблицаВыручки.Итог("СуммаВал"),
																		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																		КурсДокумента, ДанныеОВалютеРегУчета.Курс, 
																		КратностьДокумента, ДанныеОВалютеРегУчета.Кратность);
			Если не СуммаДокументаВВалютеРеглУчета = 0  Тогда
				ТаблицаВыручки.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(СуммаДокументаВВалютеРеглУчета,ТаблицаВыручки.ВыгрузитьКолонку("СуммаВал")),"Сумма");
				НДСВВалютеРегУчета =Окр(СуммаДокументаВВалютеРеглУчета*ТаблицаВыручки.Итог("НДСВал")/ ТаблицаВыручки.Итог("СуммаВал"),2);
				Если НДСВВалютеРегУчета = 0  Тогда
					ТаблицаВыручки.ЗаполнитьЗначения(0,"НДС");
				Иначе
					ТаблицаВыручки.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(НДСВВалютеРегУчета,ТаблицаВыручки.ВыгрузитьКолонку("НДСВал")),"НДС");
				КонецЕсли;
			КонецЕсли; 
																		
																		
		Иначе
			ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКОлонку("СуммаВал"),"Сумма");
			ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКОлонку("НДСВал"),	"НДС");
		КонецЕсли; 
		
		Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
		    СтрокаВыручки.СуммаБезНДС = СтрокаВыручки.Сумма - СтрокаВыручки.НДС;
			СтрокаВыручки.СуммаБезНДСВал = СтрокаВыручки.СуммаВал - СтрокаВыручки.НДСВал;
		
		КонецЦикла; 

		СчетОтнесенияНДС = ПланыСчетов.Хозрасчетный.НДС;
		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ,СчетОтнесенияНДС);
		
		УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Розница(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

//// Процедура - обработчик события "ОбработкаЗаполнения".
////
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	#Если Клиент Тогда
    Дата = РабочаяДата;
	#КонецЕсли
	ВалютаДокумента = мВалютаРегламентированногоУчета;
	//СчетКасса       = ПланыСчетов.Хозрасчетный.КассаОрганизации;

	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	
	//добавлено для 8.2  РГ-Софт - Петроченко
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") или //12.09.2012 Пахоменков закомментированных доков нет в конфе
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаНМА")  или 
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		 Тогда
	//добавлено для 8.2  РГ-Софт - Петроченко	
	
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);
	КонецЕсли;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
	 или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
	 или ВидДокументаОснования = "ОтчетКомиссионераОПродажах" 
	 или ВидДокументаОснования = "ОтчетКомитентуОПродажах" 
	 или ВидДокументаОснования = "ПередачаОС" 
	 или ВидДокументаОснования = "СчетНаОплатуПокупателю"
	 или ВидДокументаОснования = "ПередачаНМА" тогда

		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если Не ВидДокументаОснования = "ОтчетКомитентуОПродажах" или ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
				
			ИначеЕсли ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 

		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" и ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам") ;
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
			КонецЕсли;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	 ИначеЕсли ВидДокументаОснования = "ОтчетОРозничныхПродажах" тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		Контрагент   = ПараметрыДокументаОснования.Склад;
		СтатьяДвиженияДенежныхСредств = ПараметрыДокументаОснования.СтатьяДвиженияДенежныхСредств;
		//Если ПараметрыДокументаОснования.ВидОперации = перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		//	ВыручкаСНТТ = Истина;
		//КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		ПроверкаКурсовВалют(СтрокаПлатеж);

		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СуммаДокументаОснования = ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(Основание);
		
		СтрокаПлатеж.СуммаПлатежа        = СуммаДокументаОснования;
		СтрокаПлатеж.СуммаВзаиморасчетов = СуммаДокументаОснования;

		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли; 

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный = глЗначениеПеременной("глТекущийПользователь");

	Если ПринятоОт = "" И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПринятоОт = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо=&ФизЛицо) КАК ФИОФизическихЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				              Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя),
				              " " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим) //в разработке

	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда 
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;	
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

Попытка
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Ссылка.Дата, УчетнаяПолитикаНеЗадана, Ссылка.Организация, "Бух");
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Ссылка.Дата, УчетнаяПолитикаНеЗадана, Ссылка.Организация, "Нал");
	
	мУчетВПродажныхЦенах = Ложь;
	Если мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		Если (мУчетнаяПолитикаБУ.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			мУчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
	
Исключение
КонецПопытки;

БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
