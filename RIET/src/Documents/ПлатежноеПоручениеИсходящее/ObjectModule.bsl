// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтрагента - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);
	
	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
//Процедура SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
//	
//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
//	
//КонецПроцедуры // SalesBook.ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

Функция Проверить()
	
	Ошибка = Новый СписокЗначений();
	
	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода,".","")))=1,"", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода,".",""))="0","",ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ПоказательДаты;
	П110 = СокрЛП(ПоказательТипа);
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15", П101) =0) или
		(ПустаяСтрока(СокрЛП(П101))) Тогда
		
		Ошибка.Добавить("Неверное значение поля ""Статус составителя"".");
	КонецЕсли;
	
	Если (СтрЗаменить(П104,"0","")="")и(Найти("06,07", П101) =0) Тогда
		
		Ошибка.Добавить("Необходимо заполнить поле ""Код БК"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		Ошибка.Добавить("Необходимо заполнить поле ""Код ОКАТО"".");
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106,"0","")<>"" Тогда 
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П107,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Период"".");
		КонецЕсли;
		Если СтрЗаменить(П108,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер"".");
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(П109) = Ложь Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Тип платежа"".");
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106),"0","") = "" Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106)<>2 Тогда
			Ошибка.Добавить("Возможно, неверно заполнено поле ""Основание платежа"".");
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Ошибка.Добавить("При основании платежа ""АП"" или ""АР"" в поле ""Период"" необходимо указывать ""0"".");
			КонецЕсли;
		ИначеЕсли СтрНайти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>12)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>4)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
						Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>2)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
						Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ<>0)или
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
						Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				Иначе
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(П107) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108,"0","")<>"" Тогда
				Ошибка.Добавить("При основании платежа ""ТП"" или ""ЗД"" в поле ""Номер"" необходимо указывать ""0"".");
			КонецЕсли;
			Если СтрНайти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109,"0","")<>"" Тогда
					Ошибка.Добавить("Не должна заполнятся дата");
				КонецЕсли;
			Иначе
				Если СтрЗаменить(П109,"0","")<>"" Тогда
					Если ОбщегоНазначения.ЗначениеНеЗаполнено(Дата(П109)) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("БФ", П106) > 0 Тогда
		Иначе
			Ошибка.Добавить("Неверно указано значение в поле ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли СтрНайти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			Ошибка.Добавить("Некорректный тип платежа");
		КонецЕсли;
	КонецЕсли;
	
	//Выводим список найденых ошибок
	Для Ном = 0 по Ошибка.Количество()-1 Цикл
		Сообщить(Ошибка.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // Проверить()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);

	Если Прав(НомерПечать,3)="000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";

	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(ДатаВыписки,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ СчетОрганизации.ВсегдаУказыватьКПП,"0",""),СокрЛП(КППплательщика));	

	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;

	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПлательщикаПриПеречисленииНалогов,СокрЛП(ТекстПлательщика));
	Иначе
		ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
		
	КонецЕсли;

	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;

	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ СчетКонтрагента.ВсегдаУказыватьКПП,"0",""),СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	КонецЕсли;

	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		Проверить();
		
		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(СтатусСоставителя),"0",СокрЛП(СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),"",СокрЛП(КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(ПоказательНомера),"0",СокрЛП(ПоказательНомера));
		Обл.Параметры.ПоказательДаты      = ?(ПоказательДаты = '00010101000000',"0",Формат(ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		Если (ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ") Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
		КонецЕсли;
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура("Организация");
	
	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");
				
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		//RG-Soft Розов 240706
		//СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом,ДоговорКонтрагента");
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		//RG-Soft Розов 240706
		
		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			БухгалтерскийУчет.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
			Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
			Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
			Отказ=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//добавил Трефиленков Дмитрий, РГ-Софт
	//движения по регистру ВзаиморасчетыСПокупателями
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	РУБ = Справочники.Валюты.НайтиПоКоду("643");
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		СписокСделок = РасшифровкаПлатежа.ВыгрузитьКолонку("Сделка");
		СписокДоговоров = РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
		
		ТаблицаСтрокРег=НайтиСтрокиВзаиморасчетов(СписокДоговоров,СписокСделок);
		
		Для каждого СтрокаТЧ из РасшифровкаПлатежа Цикл
			
			Если ТаблицаСтрокРег.Количество()<> 0 Тогда
				//Изменила Федотова Л., РГ-Софт, 22.03.2013, вопрос SLI-0003428
				//СтрокиРег= ТаблицаСтрокРег[0];
				СтрокиРег = ТаблицаСтрокРег.Найти(СтрокаТЧ.Сделка,"ПП");
				Движение = Движения.ВзаиморасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ); 
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				//Изменила Федотова Л., РГ-Софт, 22.03.2013, вопрос SLI-0003428
				//Движение.Сделка = СтрокаТЧ.Сделка;
				Движение.Сделка = СтрокиРег.Сделка;
				Движение.ПодразделениеОрганизации = СтрокиРег.ПодразделениеОрганизации;
				Движение.СуммаРегл = СтрокаТЧ.СуммаПлатежа;
				Движение.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, СтрокаТЧ.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
				Движение.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
				Движение.КостЦентр = СтрокиРег.КостЦентр;
				Движение.WO = СтрокиРег.WO;
				//Движение.ИнвойсинговыйЦентр = СтрокиРег.ИнвойсинговыйЦентр;
				//Изменила Логинова О., РГ-Софт, 17,09,2014, вопрос SLI-0004844
				Движение.СчетНаПредоплату = СтрокиРег.СчетНаПредоплату;

				Если  ОбщегоНазначения.ЗначениеНеЗаполнено(Движение.Сделка) Тогда
					Движение.Сделка = Ссылка;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Движения.ВзаиморасчетыСПокупателями.Записать();
		
		//добавила Федотова Людмила, РГ-Софт, для установки подразделений в проводках
		ТаблицаДвиженийВзаиморасчетыСПокупателями = Движения.ВзаиморасчетыСПокупателями.Выгрузить();
		
		Если ТаблицаДвиженийВзаиморасчетыСПокупателями.Количество() <>0 Тогда
			Проводки = Движения.Хозрасчетный;
			Для Каждого Проводка Из Проводки Цикл
				Подразделение = ТаблицаДвиженийВзаиморасчетыСПокупателями[Проводка.НомерСтроки].ПодразделениеОрганизации;
				Попытка
					Проводка.ПодразделениеОрганизацииДт = Подразделение;
					Проводка.ПодразделениеОрганизацииКт = Подразделение;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		//конец добавления
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

Функция НайтиСтрокиВзаиморасчетов(СписокДоговоров,СписокСделок)
	
	//Изменила запрос Федотова Л., РГ-Софт, 22.03.13, вопрос SLI-0003411
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	//					  |	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ИнвойсинговыйЦентр,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.WO
	//					  |ИЗ
	//					  |	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	//					  |		,
	//					  |		ДоговорКонтрагента В (&Договора)
	//					  |		    И Сделка В (&Сделки)) КАК ВзаиморасчетыСПокупателямиОстатки
	//					  |
	//					  |СГРУППИРОВАТЬ ПО
	//					  |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ИнвойсинговыйЦентр,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	//					  |	ВзаиморасчетыСПокупателямиОстатки.WO
	//					  |
	//					  |УПОРЯДОЧИТЬ ПО
	//					  |	ВзаиморасчетыСПокупателямиОстатки.Сделка.Дата");
	
	//Добавила счет на предоплату Логинова О., РГ-Софт, 17,09,2014, вопрос SLI-0004844
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВзаиморасчетыСПокупателями.Сделка,
	                      |	ВзаиморасчетыСПокупателями.Регистратор КАК ПП
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыСПокупателями КАК ВзаиморасчетыСПокупателями
	                      |ГДЕ
	                      |	ВзаиморасчетыСПокупателями.Регистратор В(&Сделки)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	                      |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	                      |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	                      |	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	                      |	ВзаиморасчетыСПокупателямиОстатки.ИнвойсинговыйЦентр,
	                      |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	                      |	ВзаиморасчетыСПокупателямиОстатки.WO,
	                      |	ВТ.ПП,
	                      |	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату
	                      |ИЗ
	                      |	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(, ДоговорКонтрагента В (&Договора)) КАК ВзаиморасчетыСПокупателямиОстатки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	                      |		ПО ВзаиморасчетыСПокупателямиОстатки.Сделка = ВТ.Сделка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВзаиморасчетыСПокупателямиОстатки.Сделка,
	                      |	ВзаиморасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	                      |	ВзаиморасчетыСПокупателямиОстатки.КостЦентр,
	                      |	ВзаиморасчетыСПокупателямиОстатки.ИнвойсинговыйЦентр,
	                      |	ВзаиморасчетыСПокупателямиОстатки.ПодразделениеОрганизации,
	                      |	ВзаиморасчетыСПокупателямиОстатки.WO,
	                      |	ВТ.ПП,
	                      |	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВзаиморасчетыСПокупателямиОстатки.Сделка.Дата");
						   
	Запрос.УстановитьПараметр("Договора", СписокДоговоров);
	Запрос.УстановитьПараметр("Сделки", СписокСделок);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если Не СтруктураШапкиДокумента.Оплачено Тогда
		Возврат;
	Конецесли;
	
	//Закомментировал РГ-Софт - Иванов Антон
	//Если ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() и ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
	//	Сообщить("Для проведения документа необходимо заполнить договор.");
	//	Отказ = истина;
	//	Возврат;              
	//КонецЕсли;
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	//ПроводкиБУ = Движения.Хозрасчетный;
	ЗаписиДС = Движения.СчетаДенежныхСредств;
	
	РасчетыВВалюте = Ложь;
	Если СчетОрганизации.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;
	
	ВидСчетаОрг = СчетОрганизации.ВидСчета;
	ВалютаСчета = СчетОрганизации.ВалютаДенежныхСредств;
	
	СчетКт		= СтруктураШапкиДокумента.СчетБанк;
	
	РасчетыВВалюте = Ложь;
	Если СчетБанк.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,СчетКт);
		
		//Вызов универсальной процедуры подготовки реестра платежей по данным документа. 		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		СодержаниеПроводки = "";
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
				СодержаниеПроводки = "Расчеты с контрагентом";
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
			КонецЕсли; 
			//УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей); 	  
		Иначе //расчеты по кредитам
			СодержаниеПроводки = "Расчеты по кредитам и займам";
			//УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Ложь,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей);
		КонецЕсли; 
		
		
		//Добавлено Булавский, РГ_Софт
		Для каждого РезультатРаспределения из РеестрПлатежей Цикл
			ЗаписьДС = ЗаписиДС.Добавить();
			ЗаписьДС.Период = ДатаДока;
			ЗаписьДС.Регистратор = Ссылка;
			ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
			ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
			ЗаписьДС.Сумма = РезультатРаспределения.РублеваяСумма;
			ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
			ЗаписьДС.СуммаВал = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(РезультатРаспределения.РублеваяСумма, мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаДокумента,
														       ДанныеОВалюте.Курс, СтруктураШапкиДокумента.КурсДокумента,
														  ДанныеОВалюте.Кратность, СтруктураШапкиДокумента.КратностьДокумента);
		КонецЦикла;
		//КонецДобавления
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ   ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		//Проводка = ПроводкиБУ.Добавить();
		
		//Проводка.Период      = СтруктураШапкиДокумента.Дата;
		//Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//Проводка.Содержание  = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,
		//"Перечисление налога",
		//"Прочее списание денежных средств");
		//
		//Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
		//
		//Проводка.СчетКт      = СчетКт;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		//
		//Если РасчетыВВалюте Тогда
		//	
		//	Если Проводка.СчетДт.Валютный Тогда
		//		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;
		//	
		//	Если Проводка.СчетКт.Валютный Тогда
		//		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;
		//	
		//	ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
		//	
		//	Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
		//	СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
		//	СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		//Иначе
		//	Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		//КонецЕсли;
		
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		//	и ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		//	//Проводка по налоговому учету для прочего расхода
		//	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУ) тогда
		//		ПроводкиНУ = Движения.Налоговый;
		//		ПроводкаНУ = ПроводкиНУ.Добавить();
		//		ПроводкаНУ.Период     = СтруктураШапкиДокумента.Дата;
		//		ПроводкаНУ.Содержание = "Прочее списание денежных средств";
		//		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		//		
		//		ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетУчетаНУ;
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1НУ);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2НУ);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3НУ);
		//		ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Контрагент);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ДоговорКонтрагента);	
		//		ПроводкаНУ.Сумма = Проводка.Сумма;
		//		
		//		ДвиженияПоРазницам(Отказ, ПроводкиНУ, Проводка.Сумма);	
		//	КонецЕсли;
		//КонецЕсли;
		
		ЗаписьДС = ЗаписиДС.Добавить();
		ЗаписьДС.Период = ДатаДока;
		ЗаписьДС.Регистратор = Ссылка;
		ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Расход;
		ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
		ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
		ЗаписьДС.СуммаВал = СуммаДокумента;
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
		ЗаписьДС.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);

		
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		//Проводка = ПроводкиБУ.Добавить();
		
		//Проводка.Период      = СтруктураШапкиДокумента.Дата;
		//Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//Проводка.Содержание  = "Перевод средств на другой счет организации";
		//
		//Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		//
		//Проводка.СчетКт      = СчетКт;
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		//
		//Если РасчетыВВалюте Тогда
		//	
		//	Если Проводка.СчетДт.Валютный Тогда
		//		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;
		//	
		//	Если Проводка.СчетКт.Валютный Тогда
		//		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		//		Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		//	КонецЕсли;
		//	
		//	ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
		//	
		//	Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
		//	СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
		//	СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		//Иначе
		//	Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		//КонецЕсли;
		
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - сборщик налогов и сборов");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	
	Если Дата >= '20050101' Тогда
		
		Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
		Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
		Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
		Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
		Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
		Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
		Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление налогов, сборов и иных платежей в бюджетную систему Российской Федерации, уплачиваемых физическими лицами без открытия банковского счета");
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокОснованийПлатежа() Экспорт
	
	ОснованиеПлатежа = Новый СписокЗначений;
	ОснованиеПлатежа.Добавить("ТП", "ТП - платежи текущего года");
	ОснованиеПлатежа.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	
	Если Дата >= '20050101' Тогда
		ОснованиеПлатежа.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	КонецЕсли;
	
	ОснованиеПлатежа.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	ОснованиеПлатежа.Добавить("РС", "РС - погашение рассроченной задолженности");
	ОснованиеПлатежа.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	ОснованиеПлатежа.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	ОснованиеПлатежа.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	ОснованиеПлатежа.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	ОснованиеПлатежа.Добавить("АП", "АП - погашение задолженности по акту проверки");
	ОснованиеПлатежа.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	ОснованиеПлатежа.Добавить("0", "0 - Невозможно указать конкретное значение показателя");
	
	Возврат ОснованиеПлатежа;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокПоказателейТипа() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("НС", "НС - уплата налога или сбора");
	
	Если Дата >= '20050101' Тогда
		Список.Добавить("ПЛ", "ПЛ - уплата платежа");
		Список.Добавить("ГП", "ГП - уплата пошлины");
		Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	КонецЕсли;
	
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	Список.Добавить("0", "0 - Конкретное значение указать невозможно");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

Процедура ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки)
	
	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Бух");
	
	Если НЕ УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;              
	
	мКэшСчетов = Новый Соответствие;
	
		
		СуммаВПроводку = СуммаПроводки;
		
		Если ТипЗнч(СубконтоДт1НУ)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоДт1НУ.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоДт2НУ)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоДт2НУ.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоДт3НУ)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоДт3НУ.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоДт1НУ)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоДт1НУ.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоДт2НУ)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоДт2НУ.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоДт3НУ)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоДт3НУ.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатрат = "";
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), "НУ", Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), "НУ", Ложь, Дата);
					СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаНУ	Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), "НУ", Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), "НУ", Ложь, Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаНУ	Тогда
				Возврат;
			КонецЕсли;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				
				СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
				Если СтруктураСчетаВКэше = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), "НУ", Ложь, Дата);
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
				Иначе
					СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
					Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
						СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), "НУ", Ложь, Дата);
						СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
					КонецЕсли;								
				КонецЕсли;
				
				Если СчетНУСоответствующийСчетуБУ = СчетУчетаНУ	Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СчетУчетаРасчетовСКонтрагентом + ", разницы между БУ и НУ не рассчитаны");
			Возврат;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
		
		Если СчетНУСоответствующийСчетуБУ = ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников Тогда
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт3);
		Иначе
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоДт3);
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		Если ТипЗнч(СубконтоДт1НУ) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоДт1НУ.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоДт1НУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоДт1НУ.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоДт2НУ) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоДт2НУ.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоДт2НУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоДт2НУ.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоДт3НУ) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоДт3НУ.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоДт3НУ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоДт3НУ.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Проводка.ВидУчетаДт = ВидУчета;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		Проводка.СчетДт = СчетУчетаНУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт1НУ);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт2НУ);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоДт3НУ);
		Проводка.Сумма = - СуммаПроводки;
		
		Проводка.ВидУчетаДт = ВидУчета;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) 
	
	//добавила Федотова Л., РГ-Софт, 11.10.11 ->
	Если Основание = Неопределено ИЛИ ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	//<-
	
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	//в базе нет документа ЗарплатаКВыплатеОрганизаций  РГ-Софт - Петроченко
	
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
	//	Если Основание.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
	//		Сообщить("Платежная ведомость оформлена на выплату через кассу.");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	#Если Клиент Тогда
	Дата = РабочаяДата;
	#КонецЕсли
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	ДокументОснование           = ПараметрыДокументаОснования.Ссылка;
	
	//добавлено для 8.2  РГ-Софт - Петроченко
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") или  //12.09.2012 Пахоменков закомментированных доков нет в конфе
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.РегистрацияПП") 
		 Тогда
	//добавлено для 8.2  РГ-Софт - Петроченко
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
		или ВидДокументаОснования = "ПоступлениеДопРасходов" 
		или ВидДокументаОснования = "ПоступлениеНМА"
		или ВидДокументаОснования = "ОтчетКомиссионераОПродажах"
		или ВидДокументаОснования = "ОтчетКомитентуОПродажах"
		или ВидДокументаОснования = "ВозвратТоваровОтПокупателя" тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли; 
		
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ИННПолучателя = Контрагент.ИНН;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах"тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаПлатежа	= ?(ПараметрыДокументаОснования.СуммаВключаетНДС, ПараметрыДокументаОснования.СуммаВознаграждения, ПараметрыДокументаОснования.СуммаВознаграждения+СтрокаТаблицыСумм.СуммаНДС);
		Иначе
			СуммаДокументаОснования = Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" Тогда
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				Если ПараметрыДокументаОснования.УдержатьВознаграждение Тогда 
					СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - ПараметрыДокументаОснования.СуммаВознаграждения;
					НоваяКолонкаСумм = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаСумм = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли; 
					
					Если Не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если не НоваяКолонкаНДС = Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыДокументаОснования.ДоговорКонтрагента.УчетАгентскогоНДС И Основание.Дата >= '20060101000000' Тогда
					СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = УправлениеПроизводством.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если не НоваяКолонкаНДС = Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
					КонецЕсли; 
				КонецЕсли;
			ИначеЕсли ВидДокументаОснования = "ПоступлениеДопРасходов" тогда
				Если Не(ПараметрыДокументаОснования.Сумма=0 и ПараметрыДокументаОснования.СуммаНДС=0)  тогда
					Если СуммаДокументаОснования.Количество()=0 тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
					Если не ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+ПараметрыДокументаОснования.СуммаНДС;
					КонецЕсли; 
				КонецЕсли;
				СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС = 0;
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
					мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
					1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
					1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
					мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
					1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
					1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
				ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
				СтрокаПлатеж.КурсВзаиморасчетов,1,
				СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
				ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
				СтрокаПлатеж.КурсВзаиморасчетов,1,
				СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 
		
		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
			Если ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовСКонтрагентом") ;
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетовСКомитентом, "СчетУчетаРасчетовСКонтрагентом") ;
			КонецЕсли;
			ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"),"СчетУчетаРасчетовПоАвансам");
			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РегистрацияПП") Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		//ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		//Номер 					= ПараметрыДокументаОснования.НомерПП;
		УстановитьНовыйНомер();
		Комментарий 			= "Автоматическое формирование. Платежка №" + ПараметрыДокументаОснования.НомерПП;
		ДатаВыписки 			= ПараметрыДокументаОснования.ДатаПП;
		СчетОрганизации 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойБанковскийСчет");
		Контрагент   			= ПараметрыДокументаОснования.Контрагент;
		ИННПолучателя 			= Контрагент.ИНН;
		КПППолучателя 			= Контрагент.КПП;
		ДоговорКонтрагента 		= ПараметрыДокументаОснования.Договор;
		ВидРасчетовПоДоговору 	= УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		СуммаДокумента			= ПараметрыДокументаОснования.СуммаПлатежа;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		//Закомментировал РГ-Софт - Иванов Антон. Там дальше есть такие же строки.
		//ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		//ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		ОчередностьПлатежа 		= 6;
		ВидПлатежа 				= "Электронно";
		ОтражатьВНалоговомУчете = ложь;
		ТЗ = ДокументОснование.Счета.Выгрузить();
		НазначениеПлатежа = "";
		Для каждого строка из ТЗ цикл
			НазначениеПлатежа = НазначениеПлатежа + " " + строка.НомерСчета + ",";
		КонецЦикла;
		НазначениеПлатежа = "Оплата по счетам:" + лев(НазначениеПлатежа,стрДлина(НазначениеПлатежа)-1);
		
		//ТЗ.Свернуть("СтавкаНДС","СуммаНДССчета");
		//Если РасшифровкаПлатежа.Количество() = 0 тогда
		//	НоваяСтрока = РасшифровкаПлатежа.Добавить();
		//иначе
		//	НоваяСтрока = РасшифровкаПлатежа[0];
		//КонецЕсли;
		//
		//НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		//НоваяСтрока.СуммаПлатежа = СуммаДокумента;
		//НоваяСтрока.СуммаВзаиморасчетов = СуммаДокумента;
		//Если ТЗ.Количество() > 1  тогда
		//	НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		//	суммаНДС = 0;
		//	Для каждого строка из ТЗ цикл
		//		СуммаНДС = СуммаНДС + строка.СуммаНДССчета;
		//	КонецЦикла;
		//иначеЕсли ТЗ.Количество() = 1 тогда
		//	НоваяСтрока.СтавкаНДС = ТЗ[0].СтавкаНДС;
		//	НоваяСтрока.СуммаНДС = ТЗ[0].СуммаНДССчета;
		//иначе
		//	сообщить("В регистрации не указаны счета оплаты.");
		//	Возврат;
		//КонецЕсли;
		//НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
		//НоваяСтрока.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
		
		Если НЕ ПараметрыДокументаОснования.УплатаНДС Тогда 
			РасшифровкаПлатежа.Очистить();
			ТЧ = Основание.счета.выгрузить();
			ТЧ.Свернуть("СтавкаНДС","СуммаСчетаВал,СуммаСчетаРуб,СуммаНДССчета");
			Для каждого Строка Из ТЧ Цикл
				СтрокаПлатежа = РасшифровкаПлатежа.Добавить();
				СтрокаПлатежа.ДоговорКонтрагента 	= ПараметрыДокументаОснования.Договор;
				//СтрокаПлатежа.СуммаПлатежа 			= Строка.СуммаСчетаВал;
				СтрокаПлатежа.СуммаПлатежа 			= Строка.СуммаСчетаРуб;
				СтрокаПлатежа.СуммаВзаиморасчетов 	= Строка.СуммаСчетаРуб;
				СтрокаПлатежа.СтавкаНДС 			= Строка.СтавкаНДС;
				СтрокаПлатежа.СуммаНДС				= строка.СуммаНДССчета;
				Если ПараметрыДокументаОснования.КомандировочныеРасходы тогда
					СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
					СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
					//Добавил РГ-Софт - Иванов Антон - 2008.07.28
					//Обрабатываем ситуацию командировачных расходов
					ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
					СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("71.01");
					СубконтоДт1 = Основание.Контрагент;
					СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Командировочные");
					
					//Закомментировал РГ-Софт - Иванов Антон - При открытии само сгенерится.
					//иначе
					//СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
					//СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
				КонецЕсли;
			КонецЦикла;
		Иначе 
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.02");
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			
			РасшифровкаПлатежа.Очистить();
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = ПараметрыДокументаОснования.СуммаПлатежа;;
			
			//СформироватьНазначениеПлатежа();
			
			//Закомментировал РГ-Софт - Иванов Антон - Там дальше есть такие же строки.
			//ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
			//ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		КонецЕсли;
		//документы.РегистрацияПП.СоздатьДокумент().Счета.Выгрузить()
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
	  	
КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//RG-Soft Розов 240706
	СтруктураШапкиДокумента.Удалить("ДоговорКонтрагента");
	//RG-Soft Розов 240706
	
	// Документ должен принадлежать хотя бы к одному виду учета  (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если не Оплачено Тогда
		
		ОбщегоНазначения.ОшибкаПриПроведении("Платежное поручение может быть проведено только если оно оплачено(флаг ""Оплачено"")."+Символы.ПС+
		"До установки признака оплаты документ можно только записать.",Отказ,Заголовок);
		
	Иначе
		
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда 
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
		//Проверим на возможность проведения в БУ и НУ
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения по документу
	Если Оплачено И НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если Не Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Сообщить("Платежное поручение может быть проведено только если оно оплачено (флаг ""Оплачено"")."+Символы.ПС+
		         "До установки признака оплаты документ можно только записать.", СтатусСообщения.Информация);
		
		РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры
 
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
