// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мФормаДокумента Экспорт;

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

//Процедура заполняет параметры организации-получателя формы ОС1 
//
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	
	ПараметрыОрганизации = Новый структура("ОрганизацияПолучатель,АдресПолучателя,РеквПолучателя,ДолжРукПолуч,РукПолучателя,ГлавБухПолучателя");	
	
	ПараметрыОрганизации.ОрганизацияПолучатель = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(СведенияОбОрганизации.ПолноеНаименование),СведенияОбОрганизации.Представление,СведенияОбОрганизации.ПолноеНаименование);
	ПараметрыОрганизации.АдресПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ПараметрыОрганизации.РеквПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет,");
	
	ПараметрыОрганизации.РукПолучателя = ОтветственныеЛицаОрганизации.Руководитель;
	ПараметрыОрганизации.ДолжРукПолуч = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ПараметрыОрганизации.ГлавБухПолучателя = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры

// Процедура печати табличной части документа
//
Функция ПечатьОписи() Экспорт
	
	Если мФормаДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Список полей, по которым нужно выводить итоги.
	СписокИтоговыхПолей = Новый СписокЗначений();
	СписокИтоговыхПолей.Добавить("ПервоначальнаяСтоимостьБУ");
	СписокИтоговыхПолей.Добавить("ПервоначальнаяСтоимостьНУ");
	СписокИтоговыхПолей.Добавить("НакопленнаяАмортизацияБУ");
	СписокИтоговыхПолей.Добавить("НакопленнаяАмортизацияНУ");
	СписокИтоговыхПолей.Добавить("ТекущаяСтоимостьБУ");
	СписокИтоговыхПолей.Добавить("ТекущаяСтоимостьНУ");
	
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Метаданные().Представление() + " № " + Номер + " от " + Формат( Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть("ШапкаБух");
	Область.Параметры.Организация              = Организация;
	Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ТабДок.Вывести( Область);
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мФормаДокумента.ЭлементыФормы.ОС.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "КодОС")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из ОС Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
				Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.ТекущаяОбласть.Формат = "БЛ=Нет; БИ=Да";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.ТекущаяОбласть.Формат = "ДЛФ=DD";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Число") Тогда
					//Формат числового значения
					Разрядность = 0;
					РазрядностьДробнойЧасти = 0;
					Если Колонка.Значение.Тип.СодержитТип(Тип("Число")) тогда
						Разрядность = Колонка.Значение.Тип.КвалификаторыЧисла.Разрядность;
						РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					КонецЕсли;
					СтрокаФормата = ?(Разрядность=0,"","ЧЦ="+Разрядность+";")+?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти);				
					
					Область.ТекущаяОбласть.Формат = СтрокаФормата;
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "ОсновноеСредство" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") 
		   И НЕ (СписокИтоговыхПолей.НайтиПоЗначению(Колонка.Ключ) = Неопределено) Тогда
			//Формат числового значения
			РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			СтрокаФормата = ?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти+";");				
			Область.Параметры.КолИтог = ОС.Итог( Колонка.Ключ);
			Область.ТекущаяОбласть.Формат = СтрокаФормата+"ЧРД=,; ЧРГ=; ЧГ=3,0";
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции 

// Функция формирует табличный документ с печатной формой ОС-1,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОС1()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковОС.Номер КАК НомерАкта,
		|	ВводНачальныхОстатковОС.Дата КАК ДатаДок,
		|	ВводНачальныхОстатковОС.Дата КАК ДатаВвода,
		|	ВводНачальныхОстатковОС.Ответственный,
		|	ВводНачальныхОстатковОС.ПодразделениеОрганизации,
		|	ВводНачальныхОстатковОС.Организация КАК Организация,
		|	ВводНачальныхОстатковОС.ПодразделениеОрганизации.Наименование КАК ПодрПолучателя,
		|	ВводНачальныхОстатковОС.ПодразделениеОрганизации.Код КАК КодПодрПол,
		|	ВводНачальныхОстатковОСОС.КоэффициентУскоренияБУ,
		|	ВводНачальныхОстатковОСОС.МОЛРегл КАК МОЛБУ,
		|	ВводНачальныхОстатковОСОС.СпособПоступленияРегл КАК СпособПоступления,
		|	ВводНачальныхОстатковОСОС.СрокПолезногоИспользованияБУ КАК СрокПолезнИспПриПост,
		|	ВводНачальныхОстатковОСОС.ТекущаяСтоимостьБУ КАК СтоимостьБУ,
		|	ВводНачальныхОстатковОСОС.СпособНачисленияАмортизацииБУ КАК СпособАмортизации,
		|	ВводНачальныхОстатковОС.ПодразделениеОрганизации.Адрес КАК АдресПолучателя,
		|	ВводНачальныхОстатковОС.КостЦентр,
		|	ВводНачальныхОстатковОСОС.ДатаПринятияКУчетуРегл КАК Дата
		|ИЗ
		|	Документ.ВводНачальныхОстатковОС.ОС КАК ВводНачальныхОстатковОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОС КАК ВводНачальныхОстатковОС
		|		ПО ВводНачальныхОстатковОСОС.Ссылка = ВводНачальныхОстатковОС.Ссылка
		|ГДЕ
		|	ВводНачальныхОстатковОС.Ссылка = &Ссылка";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	//Заполнение реквизитов организации получателя

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сведения.НомерСтроки,
		|	Сведения.ОсновноеСредство,
		|	Сведения.ИнвентарныйНомер КАК ИнвНомер,
		|	Сведения.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
		|	Сведения.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	Сведения.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
		|	Сведения.ПервоначальнаяСтоимостьБУ КАК НачСтоимость,
		|	Сведения.ОсновноеСредство.ЗаводскойНомер КАК СерийныйНомер,
		|	Сведения.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ,
		|	ВЫБОР
		|		КОГДА ГОД(Сведения.ОсновноеСредство.ДатаВыпуска) = 1
		|			ТОГДА 0
		|		ИНАЧЕ ГОД(Сведения.ОсновноеСредство.ДатаВыпуска)
		|	КОНЕЦ КАК ГодВыпуска,
		|	Сведения.ОсновноеСредство.Поставщик КАК НаимСдатчика,
		|	Сведения.ОсновноеСредство.КодПоставщика КАК КодПодрСд,
		|	Сведения.ОсновноеСредство.Счет КАК СчетУчета,
		|	Сведения.ОсновноеСредство.Автотранспорт КАК Автотранспорт,
		|	Сведения.ОсновноеСредство.РегистрационныйНомер КАК РегистрационныйНомер,
		|	Сведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведения КАК Сведения
		|ГДЕ
		|	Сведения.Регистратор = &Регистратор";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	
	Если ВыборкаПоОС.Количество() = 1 Тогда

		ВыборкаПоОС.Следующий();

		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
				ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ТабДокумент   = Новый ТабличныйДокумент();
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводНачальныхОстатковОС_ОС1";

			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			
			Попытка
				ОбластьМакета.Параметры.НормаАморт = Формат(100/ВыборкаОС.СрокПолезнИспПриПост,"ЧЦ=5; ЧДЦ=2")+"%";
			Исключение
			КонецПопытки;
			ОбластьМакета.Параметры.AU = "AU: "+ ВыборкаОС.КостЦентр;
			ОбластьМакета.Параметры.Валюта = "руб.";
			ОбластьМакета.Параметры.БезНДС = "имость);";
			ОбластьМакета.Параметры.НомерАкта1 = ОбластьМакета.Параметры.НомерАкта;
			ОбластьМакета.Параметры.ДатаДок1 = ОбластьМакета.Параметры.ДатаДок;
			
			Если ВыборкаПоОС.Автотранспорт Тогда
				ОбластьМакета.Параметры.НомерПаспорта1 = "VIN code: " + ВыборкаПоОС.НомерПаспорта;
				ОбластьМакета.Параметры.РегистрационныйНомер1 = "Регистрационный номер: " + ВыборкаПоОС.РегистрационныйНомер;
			КонецЕсли;
			
			ОбластьМакета.Параметры.АдресПолучателя = ВыборкаОС.АдресПолучателя;
			ОбластьМакета.Параметры.ДатаДок = ВыборкаОС.Дата;
			ОбластьМакета.Параметры.ДатаВвода = ВыборкаОС.Дата;
			ОбластьМакета.Параметры.ДатаВводаПриПередаче = ВыборкаОС.Дата;
			ф = СтрНайти(Формат(ВыборкаОС.Дата,"ДЛФ=DD")," ");
			ОбластьМакета.Параметры.День = """" + Лев(Формат(ВыборкаОС.Дата,"ДЛФ=DD"),ф-1) + """" + Сред(Формат(ВыборкаОС.Дата,"ДЛФ=DD"),ф);;
			ОбластьМакета.Параметры.День1 = """     "" ______________ 200  г.";
			ТабДокумент.Вывести(ОбластьМакета);
			
		Иначе 

			ТабДокумент    = Новый ТабличныйДокумент();
			МакетОС1а      = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = МакетОС1а.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЕсли;

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ЗаполнитьДанныеОрганизацииПолучателя(ВыборкаОС, Шапка1ОС1б);
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		НомПП = 0;
		Пока ВыборкаПоОС.Следующий() Цикл

			НомПП = НомПП + 1;
			Строка2ОС1б.Параметры.Нс = НомПП;
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			ОС1б_Страница2.Вывести(Строка2ОС1б);

			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Подвал3);

		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2");
		ФормированиеПечатныхФорм.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1");

		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПечатьОС15()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ИмяМакета = "Опись" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОписи();
	ИначеЕсли ИмяМакета = "ОС1" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОС1();
	КонецЕсли;
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//Изменил Трефиленков Дмитрий, РГ-Софт
	СтруктураФорм = Новый Структура();
	СтруктураФорм.Вставить("Опись","Опись ОС при вводе остатков");
	СтруктураФорм.Вставить("ОС1","Форма ОС-1");
	Возврат СтруктураФорм; 
	//КонецИзменения

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал()
	
	мСтрокаРеквизитыНалУчета = "
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ОС.АмортизацияДо2002НУ,
		|ОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		|ОС.МетодНачисленияАмортизацииНУ,
		|ОС.НакопленнаяАмортизацияНУ,
		|ОС.НачислятьАмортизациюНУ,
		|ОС.НачислятьПоБазовойСтоимостиНУ,
		|ОС.ПервоначальнаяСтоимостьНУ,
		|ОС.СпециальныйКоэффициентНУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииНУ,
		|ОС.СрокПолезногоИспользованияНУ,
		|ОС.СтоимостьДо2002НУ,
		|ОС.СуммаНакопленнойАмортизацииНУ,
		|ОС.СуммаПоследнейМодернизацииНУ,
		|ОС.ТекущаяСтоимостьНУ,
		|ОС.ФактическийСрокИспользованияНУ";
		
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация, ПодразделениеОрганизации";
					
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство,ДатаПринятияКУчетуРегл";
	//проверка заполнения обязательных реквизитов
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

	БухУчет    = Истина;
	НалУчет    = Истина;
	РеквизитыВысокойВажности = "ИнвентарныйНомерРегл";

	Если БухУчет тогда
		РеквизитыВысокойВажности = РеквизитыВысокойВажности +",СпособПоступленияРегл,ПервоначальнаяСтоимостьБУ";
	КонецЕсли;

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;

	Для Каждого СтрокаТЧ Из ОС Цикл

		ПроверкаПоСтроке(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет,Отказ,Заголовок,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтроке(СтрокаОС,БезусловныеРеквизиты, БухУчет, НалУчет, Отказ, Заголовок,МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;

	//Проверка реквизитов общей группы
	Если БухУчет или НалУчет тогда
		РеквизитыДляПроверки.Вставить("СостояниеПринятияКУчетуРегл"			,СтатусСообщения.Внимание);
		РеквизитыДляПроверки.Вставить("НомерДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		РеквизитыДляПроверки.Вставить("НазваниеДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		
		РеквизитыДляПроверки.Вставить("МОЛРегл"	,СтатусСообщения.Внимание);
		
		Если не  СтрокаОС.ВводВЭксплуатациюПриПринятииРегл тогда
			ВводВЭксплуатацию = Новый структура("ДатаВводаВЭксплуатациюРегл,СостояниеВводаВЭксплуатациюРегл,НомерДокументаВводаВЭксплуатациюРегл,НазваниеДокументаВводаВЭксплуатациюРегл");
			Для Каждого ТекРеквизит Из ВводВЭксплуатацию Цикл
				Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
					РеквизитыДляПроверки.Вставить("ДатаВводаВЭксплуатациюРегл"				,СтатусСообщения.Важное);
					РеквизитыДляПроверки.Вставить("СостояниеВводаВЭксплуатациюРегл"			,СтатусСообщения.Внимание);
					РеквизитыДляПроверки.Вставить("НомерДокументаВводаВЭксплуатациюРегл"	,СтатусСообщения.Внимание);
					РеквизитыДляПроверки.Вставить("НазваниеДокументаВводаВЭксплуатациюРегл"	,СтатусСообщения.Внимание);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		 ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		
			//По видам учета
			Если БухУчет тогда
				РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьБУ" ,СтатусСообщения.Важное);
				Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ" ,СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
		   И НалУчет Тогда
			РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьНУ"							,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияНУ"				,СтатусСообщения.Важное);
		КонецЕсли;

	КонецЕсли;
	
	//Проверка реквизитов дополнительной группы
	Если (БухУчет ИЛИ НалУчет) 
	   И ((НЕ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету) 
	     ИЛИ (НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)) Тогда
		Модернизация = Новый структура("ДатаПоследнейМодернизацииРегл,
			|СостояниеМодернизацииРегл,
			|НомерДокументаМодернизацииРегл,
			|НазваниеДокументаМодернизацииРегл");
		Если БухУчет тогда
			Модернизация.Вставить("СуммаПоследнейМодернизацииБУ");
		КонецЕсли;
		Если НалУчет тогда
			Модернизация.Вставить("СуммаПоследнейМодернизацииНУ");
		КонецЕсли;
		
		Для Каждого ТекРеквизит Из Модернизация Цикл
			Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				РеквизитыДляПроверки.Вставить("ДатаПоследнейМодернизацииРегл"		,СтатусСообщения.Важное);
				РеквизитыДляПроверки.Вставить("СостояниеМодернизацииРегл"			,СтатусСообщения.Внимание);
				РеквизитыДляПроверки.Вставить("НомерДокументаМодернизацииРегл"		,СтатусСообщения.Внимание);
				РеквизитыДляПроверки.Вставить("НазваниеДокументаМодернизацииРегл"	,СтатусСообщения.Внимание);
				Если БухУчет тогда
					РеквизитыДляПроверки.Вставить("СуммаПоследнейМодернизацииБУ"	,СтатусСообщения.Внимание);
					РеквизитыДляПроверки.Вставить("СтоимостьДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					
					Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
						или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
						или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
						РеквизитыДляПроверки.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
						РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ"	,СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	//Проверка реквизитов групп амортизации
	Если БухУчет 
	   И СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ"			,СтатусСообщения.Важное);
		
		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"					,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботБУ"				,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскоренияБУ"				,СтатусСообщения.Важное);
		Конецесли;

		Если СтрокаОС.НачислятьАмортизациюБУ Тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииБУ"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НалУчет
	   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("МетодНачисленияАмортизацииНУ"			,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ"				,СтатусСообщения.Внимание);
		
		Если СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда
			НачислениеПоБазовой = Новый структура("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
				|СуммаНакопленнойАмортизацииНУ,
				|ФактическийСрокИспользованияНУ");
			Для Каждого ТекРеквизит Из НачислениеПоБазовой Цикл
				Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) или СтрокаОС.НачислятьПоБазовойСтоимостиНУ тогда
					РеквизитыДляПроверки.Вставить("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ" ,СтатусСообщения.Важное);
					РеквизитыДляПроверки.Вставить("СуммаНакопленнойАмортизацииНУ"			 ,СтатусСообщения.Важное);
					РеквизитыДляПроверки.Вставить("ФактическийСрокИспользованияНУ"			 ,СтатусСообщения.Важное);
					РеквизитыДляПроверки.Вставить("НачислятьПоБазовойСтоимостиНУ"			 ,СтатусСообщения.Важное);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Конецесли;

		Если СтрокаОС.НачислятьАмортизациюНУ тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииНУ"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕслИ;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		ИначеЕсли КлючЗначение.Ключ = "НачислятьПоБазовойСтоимостиНУ" и не СтрокаОС.НачислятьПоБазовойСтоимостиНУ тогда
			//Логическая проверка
			СтрокаСообщения ="(НУ) не установлен признак начисления по базовой стоимости (заполнены некоторые реквизиты для начисления по базовой)";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения,Заголовок,статусСообщения.Важное);
		КонецЕсли;

	КонецЦикла;
	
	//Логические проверки
	Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если БухУчет и СтрокаОС.НачислятьАмортизациюБУ тогда
			СтрокаСообщения = "(БУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету.
			|Документ не будет проведен.";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
	
		Если БухУчет и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
			СтрокаСообщения = "(БУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
		Если БухУчет и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.НакопленнаяАмортизацияБУ) тогда
			СтрокаСообщения = "(БУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
	КонецЕсли;

	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если НалУчет и СтрокаОС.НачислятьАмортизациюНУ тогда
			СтрокаСообщения = "(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли;

		Если НалУчет и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.НакопленнаяАмортизацияНУ) тогда
			СтрокаСообщения = "(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;
		
		Если НалУчет и не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
			СтрокаСообщения = "(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения ,Заголовок,СтатусСообщения.Обычное);
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		
		Если ПустаяСтрока(СтрокаОС.ИнвентарныйНомерРегл) Тогда
			НоваяСтрока.ИнвентарныйНомер        = СтрокаОС.ОсновноеСредство.Код;
		КонецЕсли; 
		
		НоваяСтрока.СпособПоступления			= СтрокаОС.СпособПоступленияРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ПорядокПогашенияСтоимости   = СтрокаОС.ПорядокПогашенияСтоимостиБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                                   = Макс(СтрокаОС.ДатаПринятияКУчетуРегл, '20020101000000');
		НоваяСтрока.Организация                              = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		//изменил Трефиленков Дмитрий, РГ-Софт
		НоваяСтрока.Период           = СтрокаОС.ДатаПринятияКУчетуРегл;
		//НоваяСтрока.Период           = Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		//Добавил Трефиленков Дмитрий, РГ-Софт для учета по кост-центрам
		НоваяСтрока.КостЦентр 		 = СтруктураШапкиДокумента.КостЦентр;
		Элем = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
		Элем.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Элем.Записать();
		//конец добавления
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		//Изменил Трефиленков Дмитрий, РГ-Софт
		//Если не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) тогда
		//	ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаВводаВЭксплуатациюРегл+1 ,?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1,СтрокаОС.ДатаПоследнейМодернизацииРегл));
		//ИначеЕсли не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) тогда
		//	ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПринятияКУчетуРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		//КонецЕсли;
		//КонецИзменения
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ДатаДвижения;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот                         = СтрокаОС.ОбъемПродукцииРаботБУ;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьБУ;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;
		НоваяСтрока.КоэффициентУскорения                        = СтрокаОС.КоэффициентУскоренияБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда 
			Продолжить;
		КонецЕсли;
		
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
			                 СтрокаОС.ДатаВводаВЭксплуатациюРегл + 1,
							 ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
							 СтрокаОС.ДатаПринятияКУчетуРегл + 1,
							 СтрокаОС.ДатаПоследнейМодернизацииРегл));
		ИначеЕсли НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			ДатаДвижения = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПринятияКУчетуРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;
		ДатаДвижения = макс(ДатаДвижения,'20020101000000');
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                     = ДатаДвижения;
		НоваяСтрока.Организация                = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента,Отказ,Заголовок)
		
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ДатаСостояния     = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
		
		Если СтрокаОС.ВводВЭксплуатациюПриПринятииРегл или Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ДатаСостояния     = ?(СтрокаОС.ВводВЭксплуатациюПриПринятииРегл,
			                                  СтрокаОС.ДатаПринятияКУчетуРегл,
										      СтрокаОС.ДатаВводаВЭксплуатациюРегл);
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			
		КонецЕсли;
		
	КонецЦикла;
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, ТаблицаДвижений,Отказ,Заголовок);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструОперацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СостояниеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) и не СтрокаОС.ВводВЭксплуатациюПриПринятииРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПринятияКУчетуРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1 ,СтрокаОС.ДатаВводаВЭксплуатациюРегл);
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СостояниеВводаВЭксплуатациюРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаВводаВЭксплуатациюРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаВводаВЭксплуатациюРегл+1 ,?(СтрокаОС.ДатаПринятияКУчетуРегл=СтрокаОС.ДатаПоследнейМодернизацииРегл,СтрокаОС.ДатаПринятияКУчетуРегл+1,СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СостояниеМодернизацииРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()
////////////////////////////////////////////////////////////////////////////////

Процедура ДвижениеПоРегиструСпособыОтраженияБух	     ( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
			Продолжить;
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) тогда
			Продолжить;
		КонецЕслИ;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

Процедура ДвижениеПоРегиструСпособыОтраженияНал	     ( ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда 
			Продолжить;
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ) тогда
			Продолжить;
		КонецЕслИ;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияНал()
////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру начисление амортизации по базовой стоимости нал.
//
Процедура ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.НачислятьПоБазовойСтоимостиНУ
		   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
		   И Не ОбщегоНазначения.ЗначениеНеЗаполнено( СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ)
		   И    СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			
			НоваяСтрока.ПризнакНачисленияПоБазовойСтоимости   = СтрокаОС.НачислятьПоБазовойСтоимостиНУ;
			НоваяСтрока.СуммаНакопленнойАмортизации           = СтрокаОС.СуммаНакопленнойАмортизацииНУ;
			НоваяСтрока.ФактическийСрокполезногоИспользования = СтрокаОС.ФактическийСрокИспользованияНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал()

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпецКоэффициентНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			  И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                 = СтруктураШапкиДокумента.Дата;
	 		НоваяСтрока.Активность             = Истина;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСпецКоэффициентНал()

////////////////////////////////////////////////////////////////////////////////
// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБухНал(ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьАмортизацияОС;                                     
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.АрендованноеОС И НЕ СтрокаОС.ОсновноеСредство.АрендованноеОС Тогда
			ТекОСОбъект = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
			ТекОСОбъект.АрендованноеОС = Истина;
			ТекОСОбъект.Контрагент = СтрокаОС.Контрагент;
			ТекОСОбъект.Записать();
		ИначеЕсли НЕ СтрокаОС.АрендованноеОС И СтрокаОС.ОсновноеСредство.АрендованноеОС Тогда
			ТекОСОбъект = СтрокаОС.ОсновноеСредство.ПолучитьОбъект();
			ТекОСОбъект.АрендованноеОС = Ложь;
			ТекОСОбъект.Записать();
		КонецЕсли; 
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету 
			И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			//Проводки не формируются
			Продолжить;
		Иначе
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',СтрокаОС.ДатаПринятияКУчетуРегл,СтруктураШапкиДокумента.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(СтруктураШапкиДокумента.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,СтруктураШапкиДокумента.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Подразделение    = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		КонецЕсли;
			
		//БУ
		Если НЕ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
			Если НЕ (СтрокаОС.ТекущаяСтоимостьБУ = 0) Тогда
				// Ввод балансовой стоимости.
				НоваяСтрока.СтоимостьБУ      = СтрокаОС.ТекущаяСтоимостьБУ;
			КонецЕсли;
			
			Если НЕ (СтрокаОС.НакопленнаяАмортизацияБУ = 0) Тогда
				Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
					// Ввод начисленной амортизации.
					НоваяСтрока.АмортизацияБУ    = СтрокаОС.НакопленнаяАмортизацияБУ;			
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//НУ
		Если //СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
			НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			Если НЕ (СтрокаОС.ТекущаяСтоимостьНУ = 0) Тогда
				НоваяСтрока.СтоимостьНУ       = СтрокаОС.ТекущаяСтоимостьНУ;
			КонецЕсли;
			// Проводка по счету КВ "Расходы на капитальные вложения по п. 1.1 ст. 259 НК РФ"
			Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СуммаКапитальныхВложений) Тогда
				НоваяСтрока.СуммаКВ        = СтрокаОС.СуммаКапитальныхВложений;
			КонецЕсли;
			
			Если НЕ (СтрокаОС.НакопленнаяАмортизацияНУ = 0) Тогда
				// Ввод начисленной амортизации.
				НоваяСтрока.АмортизацияНУ       = СтрокаОС.НакопленнаяАмортизацияНУ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
		
КонецПроцедуры // ФормированиеПроводокБух

////////////////////////////////////////////////////////////////////////////////

//Добавил РГ-Софт - Пронин Иван - 2009-09-21 - Начало

// Процедура формирования движений по регистру Первоначальные сведеняи 
//
Процедура ДвижениеПоРегиструПервоначальныеСведения(ТабОС, СтруктураШапкиДокумента, табНачислениеАмортизацииПервоначальныеСведения)
		
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеПервоначальныеСведения = Истина;
		
		ДвижениеВТаблице.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		Если ПустаяСтрока(СтрокаОС.ИнвентарныйНомерРегл) Тогда
			ДвижениеВТаблице.ИнвентарныйНомер        = СтрокаОС.ОсновноеСредство.Код;
		КонецЕсли; 
		ДвижениеВТаблице.СпособПоступления			= СтрокаОС.СпособПоступленияРегл;
		ДвижениеВТаблице.ПервоначальнаяСтоимостьБУ  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		ДвижениеВТаблице.ПорядокПогашенияСтоимости  = СтрокаОС.ПорядокПогашенияСтоимостиБУ;
		ДвижениеВТаблице.ПервоначальнаяСтоимостьНУ  = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		ДвижениеВТаблице.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
		// Добавил Булавский - РГ-Софт - 30.08.2011
		ДвижениеВТаблице.КурсНаДатуПринятияКУчету = ОбщегоНазначения.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("999"), ?(ЗначениеЗаполнено(СтрокаОС.ДатаПринятияКУчетуРегл), СтрокаОС.ДатаПринятияКУчетуРегл, СтрокаОС.ДатаВводаВЭксплуатациюРегл)).Курс;
		// Переделать под нужный алгоритм.
		ДвижениеВТаблице.КРПервоначальная = 0;
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведения()

// Процедура формирования движений по регистру Начисление амортизации 
//
Процедура ДвижениеПоРегиструНачислениеАмортизации(ТабОС, СтруктураШапкиДокумента, табНачислениеАмортизацииПервоначальныеСведения)
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;

		ДвижениеВТаблице.НачислятьБУ = СтрокаОС.НачислятьАмортизациюБУ;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			ДвижениеВТаблице.СрокБУ   = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			ДвижениеВТаблице.СрокБУ   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		
		ДвижениеВТаблице.СрокПолезногоИспользованияБУ = СтрокаОС.СрокПолезногоИспользованияБУ;
		ДвижениеВТаблице.ДатаИзмененияБУ = Дата;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) тогда
			ДвижениеВТаблице.СтоимостьБУ           = СтрокаОС.ТекущаяСтоимостьБУ;
		Иначе
			ДвижениеВТаблице.СтоимостьБУ           = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
		КонецЕсли;
		
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			ДвижениеВТаблице.СрокНУ = СтрокаОС.СрокПолезногоИспользованияНУ;
			ДвижениеВТаблице.НачислятьНУ = СтрокаОС.НачислятьАмортизациюНУ;
 			Если СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
				ДвижениеВТаблице.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОС.ВводВЭксплуатациюПриПринятииРегл или ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			ДвижениеВТаблице.ДатаВводаНУ  = ?(СтрокаОС.ВводВЭксплуатациюПриПринятииРегл,
			                                  СтрокаОС.ДатаПринятияКУчетуРегл,
										      СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;		
 	
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизации()

//Добавил РГ-Софт - Пронин Иван - 2009-09-21 - Конец

// Добавил РГ-Софт - Булавский Анатолий - 2011-08-26
// Процедура формирования движений по регистру ОстаточнаяСтоимостьПР
Процедура ДвижениеПоРегиструОстаточнаяСтоимостьПР(ТабОС)
	ТаблицаДляЗапроса = ТабОС.Скопировать( , "ОсновноеСредство, ДатаПринятияКУчетуРегл, ДатаВводаВЭксплуатациюРегл, ПервоначальнаяСтоимостьНУ");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.ДатаПринятияКУчетуРегл,
	|	ТаблицаОС.ДатаВводаВЭксплуатациюРегл,
	|	ТаблицаОС.ПервоначальнаяСтоимостьНУ
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТаблицаДляЗапроса КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.ПервоначальнаяСтоимостьБУ - ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьПР,
	|	ВложенныйЗапрос.ДатаКурса КАК ДатаПринятия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|		ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|		ВЫБОР
	|			КОГДА ОсновныеСредства.ОсновноеСредствоLawson = ЗНАЧЕНИЕ(Справочник.ОсновныеСредстваLawson.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ОсновныеСредства.ОсновноеСредствоLawson.ПервоначальнаяСтоимость
	|		КОНЕЦ КАК ПервоначальнаяСтоимостьБУ,
	|		ВложенныйЗапрос.ДатаКурса КАК ДатаКурса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|			ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ / ВложенныйЗапрос.КурсSLB КАК ПервоначальнаяСтоимостьНУ,
	|			ВложенныйЗапрос.ДатаКурса КАК ДатаКурса
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|				ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|				ЕСТЬNULL(ВложенныйЗапрос.Курс, 1) КАК КурсSLB,
	|				ВложенныйЗапрос.ДатаКурса КАК ДатаКурса
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	|					ВложенныйЗапрос.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|					ВложенныйЗапрос1.Курс КАК Курс,
	|					ВложенныйЗапрос.ДатаКурса КАК ДатаКурса
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ТабличнаяЧасть.ОсновноеСредство КАК ОсновноеСредство,
	|						ТабличнаяЧасть.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|						ВЫБОР
	|							КОГДА ТабличнаяЧасть.ДатаПринятияКУчетуРегл = &ПустаяДата
	|								ТОГДА ТабличнаяЧасть.ДатаВводаВЭксплуатациюРегл
	|							ИНАЧЕ ТабличнаяЧасть.ДатаПринятияКУчетуРегл
	|						КОНЕЦ КАК ДатаКурса
	|					ИЗ
	|						ТабличнаяЧасть КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							КурсыВалют.Период КАК Период,
	|							КурсыВалют.Курс КАК Курс
	|						ИЗ
	|							РегистрСведений.КурсыВалют КАК КурсыВалют
	|						ГДЕ
	|							КурсыВалют.Валюта = &ВалютаSLB) КАК ВложенныйЗапрос1
	|						ПО ВложенныйЗапрос.ДатаКурса = ВложенныйЗапрос1.Период) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|			ПО ВложенныйЗапрос.ОсновноеСредство = ОсновныеСредства.Ссылка) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("ТаблицаДляЗапроса", ТаблицаДляЗапроса);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоКоду("999"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		ДвиженияПоРегистру = Движения.ОстаточнаяСтоимостьПР;
		Пока Выборка.Следующий() Цикл
			СтрокаДвижений = ДвиженияПоРегистру.Добавить();
			СтрокаДвижений.Активность = Истина;
			СтрокаДвижений.Период = Выборка.ДатаПринятия;
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДвижений.ОсновноеСредство = Выборка.ОсновноеСредство;
			СтрокаДвижений.СтоимостьПР = Выборка.ПервоначальнаяСтоимостьПР;
			СтрокаДвижений.Регистратор = Ссылка;
		КонецЦикла;
		ДвиженияПоРегистру.Записать();
	КонецЕсли; 
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизации()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ,Заголовок)

	ТабОС = ОС.Выгрузить();
	
	// Движение по регистрам общим для упр. и регл. учета
	//ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента);

	// Движение по регл. регистрам
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТабОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(Дата, Организация, масОС);
	ДвижениеПоРегиструПервоначальныеСведения(ТабОС, СтруктураШапкиДокумента, табНачислениеАмортизацииПервоначальныеСведения);
	ДвижениеПоРегиструНачислениеАмортизации(ТабОС, СтруктураШапкиДокумента, табНачислениеАмортизацииПервоначальныеСведения);
	
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Если Движение.СпециальныйКоэффициент = 0 Тогда Движение.СпециальныйКоэффициент = 1; КонецЕсли;
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;	
	
	
	//@# Пронин Иван (Удалить начало)
	//ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента);
	//ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТабОС, СтруктураШапкиДокумента, Заголовок);
	//ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТабОС, СтруктураШапкиДокумента);
	//
	//ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента);
	//ДвижениеПоРегиструСпецКоэффициентНал( ТабОС, СтруктураШапкиДокумента);
	//ДвижениеПоРегиструНачислениеАмортизацииНал   ( ТабОС, СтруктураШапкиДокумента, Заголовок);
	//ДвижениеПоРегиструПараметрыАмортизацииНал    ( ТабОС, СтруктураШапкиДокумента);
	//@# Пронин Иван (Удалить конец)
	
	ДвижениеПоРегиструСостоянияОСБух             ( ТабОС, СтруктураШапкиДокумента,Отказ,  Заголовок);
	ДвижениеПоРегиструМестонахождениеОСБух       ( ТабОС, СтруктураШапкиДокумента);
	//Закомментировала Федотова Л., РГ-Софт, 21.01.13, вопрос SLI-0003222 ->
	//ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструСпособыОтраженияБух	     ( ТабОС, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструОперацииОСБух              ( ТабОС, СтруктураШапкиДокумента);

	ФормированиеПроводокБухНал( ТабОС, СтруктураШапкиДокумента);

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

	    //Закомментировала Федотова Л., РГ-Софт, 21.01.13, вопрос SLI-0003222 ->
		//ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента);
		//<-
		ДвижениеПоРегиструСпособыОтраженияНал        ( ТабОС, СтруктураШапкиДокумента, Заголовок);
		
		//ФормированиеПроводокНал( ТабОС, СтруктураШапкиДокумента);

	//КонецЕсли;
	
	// Добавил РГ-Софт - Булавский Анатолий - 2011-08-26
	ДвижениеПоРегиструОстаточнаяСтоимостьПР(ТабОС);

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОшибкаПроведенияПоСтроке(СтрокаОС, ТекстСообщения,Заголовок,Статус)
	//НачалоСообщения = "- строка № "+СтрокаОС.НомерСтроки+", инв. номер ОС <"+СтрокаОС.ИнвентарныйНомерРегл+"> : ";
	//ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения+ТекстСообщения, ,Заголовок ,Статус)
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомерРегл");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Проверим, нет ли одинаковых инвентарных номеров основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мФормаДокумента = Неопределено;