&НаКлиенте
Перем ПараметрыОбработчикаОжидания;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	КомандаФормы  = Команды.Добавить("ПроцедураОбработкиНажатия");
    КомандаФормы.Действие = "ПроцедураОбработкиНажатия";
	
	//добавила Федотова Л., РГ-Софт, 25.10.12, вопрос №SLI-0002941 ->
	Рубли = Справочники.Валюты.НайтиПоКоду("643").Наименование;	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ВалютаДокумента.Наименование);
		Если НЕ Объект.ВалютаДокумента.Код = "643" Тогда
			Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Рубли);
		КонецЕсли; 
	Иначе
		Если НЕ Объект.ПредставлениеВалюты = "" Тогда
			Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ПредставлениеВалюты);
		КонецЕсли; 
		Если НЕ Объект.ВалютаДокумента.Наименование = Объект.ПредставлениеВалюты Тогда
			Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ВалютаДокумента.Наименование);
		КонецЕсли; 
		
		Если Элементы.ПредставлениеВалюты.СписокВыбора.НайтиПоЗначению(Рубли) = Неопределено Тогда
			Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Рубли);
		КонецЕсли; 
	КонецЕсли;
	Объект.ПредставлениеВалюты = Элементы.ПредставлениеВалюты.СписокВыбора[0].Значение;
	//<-
	УправлениеФормой(ЭтаФорма);	
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	//ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	ПолучитьЗаголовок();
	
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ВладелецФормы = Неопределено Тогда

		//изменила Наталья Петроченко 08.10.2012
		Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") тогда

			// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
			ДокументыОснования = Новый Массив;
			Для Каждого СтрокаТЧ Из Объект.ДокументыОснования Цикл
				ДокументыОснования.Добавить(СтрокаТЧ.ДокументОснование);
			КонецЦикла;
			ПараметрыЗаписи.Вставить("ДокументыОснования", ДокументыОснования);
			Оповестить("Запись_СчетФактураВыданный", ПараметрыЗаписи, Объект.Ссылка);
						
		иначе
			
			// Надо поменять текст про счет-фактуру в форме-владельце
			//-> RG-Soft VIVanov 01/08/12
			Попытка
				Если НЕ ВладелецФормы.Имя = "Список"  Тогда  //добавила условие Федотова Л, РГ-Софт, 14.03.13, вопрос SLI-0003402 
					Если ТипЗнч(ВладелецФормы.Ссылка) = тип("ДокументСсылка.СчетКнигиПокупок") тогда
						ВладелецФормы.ЗаполнитьТекстПроСчетФактуру(Объект.Ссылка);
					//<-
					Иначе
						ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтаФорма);
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 1 Тогда
		Объект.Исправление				= Ложь;
		Объект.НомерИсправления			= 0;
		Объект.НомерИсходногоДокумента	= "";
		Объект.ДатаИсходногоДокумента	= '00010101';
	КонецЕсли;
	
	Объект.КодВидаОперации	= ПолучитьКодВидаОперации();
	
	УправлениеФормой(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов();
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация",        Объект.Организация);
	ПараметрыДокумента.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	НовыеПараметры = ПолучитьДанныеОрганизацияПриИзменении(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры);
	Объект.ДокументыОснования.Очистить();
	Объект.ДатаНомерДокументовОплаты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация",        Объект.Организация);
	ПараметрыДокумента.Вставить("Контрагент" ,        Объект.Контрагент);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		
	НовыеПараметры = ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры);
	Объект.ДокументыОснования.Очистить();
	Объект.ДатаНомерДокументовОплаты.Очистить();
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элемент);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	НовыеПараметры = ПолучитьДанныеДоговорКонтрагентаПриИзменении(Объект.ДоговорКонтрагента);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры);
	Объект.ДокументыОснования.Очистить();
	Объект.ДатаНомерДокументовОплаты.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКонтрагента(ПараметрыДокумента)
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ПараметрыДокумента.Контрагент) Тогда 
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ДоговорКонтрагента = УправлениеПользователями.ДоступныйДоговорКонтрагента(ПараметрыДокумента.Контрагент.ОсновнойДоговорКонтрагента);
	КонецЕсли;

	Если не ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) тогда
		Если Не ЗначениеЗаполнено(ПараметрыДокумента.Организация) Тогда
			//Фильтр по организации не вклчается, договор подходит.	
		ИначеЕсли ПараметрыДокумента.Организация = ДоговорКонтрагента.Организация Тогда
			//принадлежит организации из документа, договор подходит.	
		Иначе
			//Договор не подходит. Очистим поле договора в документе.
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // Очистить старый договор
		КонецЕсли;
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		ВидыДоговоров = Новый СписокЗначений;
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ВидДоговора = ДоговорКонтрагента.ВидДоговора;
		Если ВидыДоговоров.НайтиПоЗначению(ВидДоговора) = Неопределено тогда
			//Договор не подходит. Очистим поле договора в документе.
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // Очистить старый договор
		КонецЕсли;
	КонецЕсли;
	Возврат ДоговорКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДоговораКонтрагента(ДоговорКонтрагента)
	
	ПараметрыДоговора = Новый Структура;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", 
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	Иначе
		ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыДоговора;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Знач ПараметрыДокумента)
	
	НовыеПараметры = Новый Структура;
	
	НовыйДоговор = ПолучитьДоговорКонтрагента(ПараметрыДокумента);
	НовыеПараметры.Вставить("ДоговорКонтрагента", НовыйДоговор);
	
	ПараметрыДоговора = ПолучитьПараметрыДоговораКонтрагента(НовыйДоговор);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыДоговора.ВалютаВзаиморасчетов);
	
	НовыеПараметры.Вставить("СуммаДокумента",  0);
	
	Возврат НовыеПараметры;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(Знач ПараметрыДокумента)
	
	НовыеПараметры = Новый Структура;
	
	НовыйДоговор = ПолучитьДоговорКонтрагента(ПараметрыДокумента);
	НовыеПараметры.Вставить("ДоговорКонтрагента", НовыйДоговор);
	
	ПараметрыДоговора = ПолучитьПараметрыДоговораКонтрагента(НовыйДоговор);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыДоговора.ВалютаВзаиморасчетов);
	
	НовыеПараметры.Вставить("СуммаДокумента",  0);
	
	Возврат НовыеПараметры;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорКонтрагентаПриИзменении(Знач ДоговорКонтрагента)
	
	НовыеПараметры = Новый Структура;
	
	ПараметрыДоговора = ПолучитьПараметрыДоговораКонтрагента(ДоговорКонтрагента);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыДоговора.ВалютаВзаиморасчетов);
	
	НовыеПараметры.Вставить("СуммаДокумента",  0);
	НовыеПараметры.Вставить("СуммаНДСДокумента", 0);
	НовыеПараметры.Вставить("СуммаУвеличение", 0);
	НовыеПараметры.Вставить("СуммаУменьшение", 0);
	НовыеПараметры.Вставить("СуммаНДСУвеличение", 0);
	НовыеПараметры.Вставить("СуммаНДСУменьшение", 0);
	
	Возврат НовыеПараметры;
		
КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	
	УстановитьОграничениеТипов(ЭтаФорма);
	
	Если Объект.ДокументыОснования.Количество() > 0
		И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		
		ТипОснования	= ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование);
		Если НЕ Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа.СодержитТип(ТипОснования) Тогда
		
			ТекстВопроса = НСтр("ru='Выбранный документ-основание не соответствует виду счета-фактуры. 
				|Для продолжения требуется очистить документ-основание. Продолжить?'");
				
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Объект.Исправление = НЕ Объект.Исправление;
				УстановитьОграничениеТипов(ЭтаФорма);
				Возврат;
			Иначе
				Объект.ДокументОснование	= Неопределено;
				Объект.ДокументыОснования.Очистить();
				Объект.НомерПлатежноРасчетногоДокумента	= "";
				Объект.ДатаПлатежноРасчетногоДокумента	= '00010101';
				Объект.ДатаНомерДокументовОплаты.Очистить();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Объект.Исправление Тогда
		
		Объект.НомерИсправления	= 0;
		
		Объект.НомерИсходногоДокумента	= "";
		Объект.ДатаИсходногоДокумента	= '00010101';
		
	КонецЕсли;
	
	Объект.КодВидаОперации	= ПолучитьКодВидаОперации();	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	Если НЕ Объект.Выставлен Тогда
		Объект.ДатаВыставления	= '00010101';
	Иначе
		Объект.ДатаВыставления	= Объект.Дата;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНеВыставляетсяПриИзменении(Элемент)
	
	Если Объект.СчетФактураНеВыставляется Тогда
		Объект.Выставлен				= Ложь;
		Объект.ДатаВыставления			= '00010101';
		Объект.КодСпособаВыставления	= 1;
	КонецЕсли;
	
	Объект.КодВидаОперации	= ПолучитьКодВидаОперации();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
	КонецЕсли;
	
КонецПроцедуры

//Обновление рег. Отчетности на бух. Корп 3.0.37.25
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
//<=

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.ДокументыОснования.ТекущиеДанные;
		ТекущиеДанные.ДокументОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Объект.СуммаДокумента = 0;
		Объект.ДатаНомерДокументовОплаты.Очистить();
	Иначе
		ЗаполнитьДатыНомераПлатежноРасчетныхДокументов();
	КонецЕсли; 
	Объект.КодВидаОперации	= ПолучитьКодВидаОперации();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаДокумента Из Объект.ДокументыОснования Цикл
		
		Если СтрокаДокумента.ПолучитьИдентификатор() = ТекущиеДанные.ПолучитьИдентификатор() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДокумента.ДокументОснование = ТекущиеДанные.ДокументОснование Тогда
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
				ТекущиеДанные.ДокументОснование,
				СтрокаДокумента.НомерСтроки);
				
				Предупреждение(ТекстСообщения);
				ТекущиеДанные.ДокументОснование = Неопределено;
				
			Возврат;
		
		КонецЕсли;
		
	КонецЦикла;
	 	
	ОпределениеПараметровСчетаФактурыНаРеализациюСервер();	
		
	Ответ = Вопрос(НСтр("ru='Перезаполнить данные о платежно-расчетных документах?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьДатыНомераПлатежноРасчетныхДокументов();
		
	КонецЕсли;
	Объект.КодВидаОперации	= ПолучитьКодВидаОперации();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//Обновление рег. Отчетности на бух. Корп 3.0.37.25
&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Покупатель";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)

КонецПроцедуры
//<=

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	СписокТиповИсправление.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.ПередачаОС"));
	СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.ОтчетПринципалуОПродажах"));
	//СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
    СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.ОтчетАгентаПоРасходам")); //Пахоменков 23.05.2013
	СписокТиповНеИсправление.Добавить(Тип("ДокументСсылка.ОтражениеНачисленияНДС")); //Пахоменков 28.03.2014

	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, ЭтаФорма.Элементы.КодВидаОперации.СписокВыбора);
	
	УстановитьОграничениеТипов(ЭтаФорма);
	
	//закомментировала Федотова Л., РГ-Софт, 25.10.12, так как все равно ничего не отобразится, вопрос №SLI-0002941 ->
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // проверить объект на то, что он еще не внесен в ИБ
	//	Объект.ПредставлениеВалюты = Элементы.ПредставлениеВалюты.СписокВыбора[0].Значение;
	//КонецЕсли;
	
	 //Обновление рег. Отчетности на бух. Корп 3.0.37.25
 	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если ПустаяСтрока(Объект.КППКонтрагента) Тогда
			//Изменила Федотова Л., РГ-Софт, 09.02.16, вопрос 
			//КППКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
			КППКонтрагента =  ОбщегоНазначения.ПолучитьКППНаДату(Объект.Контрагент,Объект.Дата);
		Иначе
			КППКонтрагента = Объект.КППКонтрагента;
		КонецЕсли;
	Иначе
		КППКонтрагента	= "";
	КонецЕсли;
	 //<=
	 
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	УказанДокументОснование = Ложь;
	//ПоОтчетуКомиссионера    = Ложь;
	Для каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
		
		Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			УказанДокументОснование = Истина;
			//ПоОтчетуКомиссионера = ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Организация.Доступность		= НЕ УказанДокументОснование;
	Элементы.Контрагент.Доступность			= НЕ УказанДокументОснование;
	Элементы.ДоговорКонтрагента.Доступность	= НЕ УказанДокументОснование;
	Элементы.ПодразделениеОрганизации.Доступность	= НЕ УказанДокументОснование;
	//Элементы.ДокументыОснования.Доступность	= НЕ (УказанДокументОснование И ПоОтчетуКомиссионера);
	Элементы.ДокументыОснования.Доступность	= Истина;
	
	Элементы.ГруппаИсправление.Доступность				= УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2;
	Элементы.ГруппаИсходныйДокумент.Доступность			= (УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2) И Объект.Исправление;
	
	Элементы.ГруппаВыставлениеСчетаФактуры.Доступность	= УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2;
		
	Элементы.НомерИсправления.Доступность	= (УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2) И Объект.Исправление;

	Элементы.Выставлен.Доступность				= (УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2) И НЕ Объект.СчетФактураНеВыставляется;
	Элементы.ДатаВыставления.Доступность		= (УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2) И НЕ Объект.СчетФактураНеВыставляется И Объект.Выставлен;
	Элементы.КодСпособаВыставления.Доступность	= (УчетНДС.ПолучитьВерсиюПостановления(Объект.Дата) = 2) И НЕ Объект.СчетФактураНеВыставляется И Объект.Выставлен;
	
	//Обновление рег. Отчетности на бух. Корп 3.0.37.25
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента = Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента = Форма.КППКонтрагента;
		КонецЕсли;
		
		Форма.ПредставлениеКППКонтрагента	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		Форма.ПредставлениеКППКонтрагента = "";
	КонецЕсли;
	//<=
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыНомераПлатежноРасчетныхДокументов()
	
	МассивОснований = Объект.ДокументыОснования.Выгрузить(, "ДокументОснование").ВыгрузитьКолонку("ДокументОснование");
	Объект.ДатаНомерДокументовОплаты.Загрузить(
		Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований));

КонецПроцедуры 

&НаСервере
Процедура ОпределениеПараметровСчетаФактурыНаРеализациюСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Исправление = Ложь;
	ДокументОбъект.НомерИсправления = 0;
	ДокументОбъект.НомерИсходногоДокумента = "";
	ДокументОбъект.ДатаИсходногоДокумента = Дата("00010101000000");
	ДокументОбъект.УчитыватьИсправлениеИсходногоДокумента = Ложь;
	ДокументОбъект.НомерИсправляемогоКорректировочногоДокумента = "";
	ДокументОбъект.ДатаИсправляемогоКорректировочногоДокумента = Дата("00010101000000");
	ДокументОбъект.НомерИсправленияИсходногоДокумента = 0;
	ДокументОбъект.ДатаИсправленияИсходногоДокумента = Дата("00010101000000");
	ДокументОбъект.ОпределениеПараметровСчетаФактуры(ДокументОбъект);
	Если ДокументОбъект.ДокументыОснования.Количество() > 0 Тогда
		Основание = ДокументОбъект.Документыоснования[0].ДокументОснование;
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или
			ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) И 
			Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
			
			ДокументОбъект.ЗаполнитьРеквизитыКорректировки(Основание);
		КонецЕсли;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьКодВидаОперации(КодВидаОперацииОснования = Неопределено)
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",						Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					Объект.Исправление);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СчетФактураНеВыставляется",	Объект.СчетФактураНеВыставляется);
	СтруктураПараметров.Вставить("СчетФактураБезНДС",			Объект.СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",				Объект.КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",			Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	
	Возврат Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования);
	Возврат Объект.КодВидаОперации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипов(Форма)

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.Исправление Тогда
	
		ОписаниеТиповОснования = Новый ОписаниеТипов(Форма.СписокТиповИсправление.ВыгрузитьЗначения());
	Иначе
		
		ОписаниеТиповОснования = Новый ОписаниеТипов(Форма.СписокТиповНеИсправление.ВыгрузитьЗначения());
	
	КонецЕсли;
		
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа = ОписаниеТиповОснования;

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаголовок()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УстановитьЗаголовокФормыДокумента(, ДокументОбъект, ЭтаФорма);
    ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	ТекущийПользователь = Неопределено;
	ОписаниеОшибкиОпределенияПользователя = "";
	Если НЕ УправлениеПользователями.ОпределитьТекущегоПользователя(ТекущийПользователь, ОписаниеОшибкиОпределенияПользователя) Тогда
		//Предупреждение(ОписаниеОшибкиОпределенияПользователя);
		//ЗавершитьРаботуСистемы(Ложь);
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(ДокументОбъект, ТекущийПользователь);
    ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагента()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УправлениеВзаиморасчетами.ПриИзмененииЗначенияКонтрагента(ДокументОбъект,);
    ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСведенийОПодразделенииПриИзменении(Элемент)
	
	УстановитьЗагрузку();     
	Записать();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗагрузку()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
    ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Заголовок = "" + ДокументОбъект + ": ";
	
	Если НЕ ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = Заголовок + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Процедура ЗаполнитьСписокДокументовОплаты(Команда)
	ЗаполнитьСписокДокументовОплатыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументовОплатыНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьДатаНомерДокументовОплаты();
    ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтаФорма, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтаФорма);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтаФорма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтаФорма, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтаФорма, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//закомментировала Федотова Л, РГ-Софт, 25.10.12 при решении вопроса №SLI-0002941, так как наименование в список добавляется трижды
//Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ВалютаДокумента.Наименование);
//Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ВалютаДокумента.НаименованиеПолное);
//Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
//	Если НЕ(Объект.ВалютаДокумента.Наименование = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов.Наименование) Тогда
//		Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов.Наименование);
//		Элементы.ПредставлениеВалюты.СписокВыбора.Добавить(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов.НаименованиеПолное);
//	КонецЕсли; 
//КонецЕсли;