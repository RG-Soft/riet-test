Перем мВалютаРегламентированногоУчета Экспорт;
Перем мНадписьПредоплата;
Перем Список;
// Хранит признак ввода на основании
Перем мВведенНаОсновании Экспорт;

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("ТоварНаименование", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(300));
	Товары.Колонки.Добавить("СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторСтранМира"));
	Товары.Колонки.Добавить("ПредставлениеСтраны", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	Товары.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	Товары.Колонки.Добавить("ПредставлениеГТД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	Товары.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,4));
	Товары.Колонки.Добавить("ЕдиницаИзмерения", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
	Товары.Колонки.Добавить("Цена", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Товары.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
 	Товары.Колонки.Добавить("Скважина", Новый ОписаниеТипов("СправочникСсылка.Wells"));
 	Товары.Колонки.Добавить("Месторождение", Новый ОписаниеТипов("СправочникСсылка.Oilfields"));
 	Товары.Колонки.Добавить("Отчет", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
 	Товары.Колонки.Добавить("WO", Новый ОписаниеТипов("СправочникСсылка.ЗаказНаряды"));
  	Товары.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
  	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	// { RGS LFedotova 29.09.2017 15:27:49 - СФ 981
   	Товары.Колонки.Добавить("ТоварКодТНВЭД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	// } RGS LFedotova 29.09.2017 15:27:57 - СФ 981 
 	Товары.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
  	Товары.Колонки.Добавить("СуммаНДСРуб", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Возврат Товары;

КонецФункции

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьДокументРасчетовКакСчетФактуру", МетаданныеОснования) 
			и ОбщегоНазначения.ЕстьРеквизитДокумента("РасчетныйДокумент", МетаданныеОснования) 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				//Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") //13.09.2012 Пахоменков. Это условие никогда не выполниться. т.к. таког дока нет в конфе 
				//	И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
				//	ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
				//	МетаданныеОснования = ДокументСсылка.Метаданные();
				//	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
				//		Возврат Неопределено;
				//	КонецЕсли;
				//Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				//КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		Если ВидДокумента = "СчетФактураПолученный" 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", МетаданныеОснования)
			И ДокументСсылка.ПредъявленСчетФактура 
			И не ДокументСсылка = ИсключитьИзВыборкиСФ
			Тогда
			Возврат ДокументСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ СФ.Ссылка  = &ИсключитьИзВыборкиСФ
			|";
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе

				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры",ВидСчетаФактуры);
	СтруктураОтбора.Вставить("ПометкаУдаления"		, Ложь);
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		СтруктураОтбора.Вставить("СчетНаОплату"			, Авансы.ВыгрузитьКолонку("СчетНаОплату"));
		
		СуществующийСФ = НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС, СчетНаОплату", СтрокаТаблицы.СтавкаНДС, СтрокаТаблицы.СчетНаОплату));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		//Для СФ на суммовую разницу возможна выписка нескольких СФ (разные ставки НДС).
		СтруктураОтбора.Вставить("СтавкаНДС"			, СтавкаНДС);
		
		СуществующийСФ = НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если не СуществующийСФ = неопределено Тогда
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на суммовую разницу со ставкой НДС «"+СтавкаНДС+"»:"
			+ Символы.ПС+" - «"+ Строка(СуществующийСФ)+"»";
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			СуществующийСФ = НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ПровркаСчетаНаПредоплату(Счет, Отказ, СтавкаСчета)
	
	Копия = Счет.Товары.Выгрузить(,"СтавкаНДС");
	Копия.Свернуть("СтавкаНДС");
	Если ЗначениеЗаполнено(Копия) Тогда
	СтавкаСчета = Копия[0].СтавкаНДС;
	Если Копия.Количество() > 1 Тогда
		
		Сообщить("В счете: " + Строка(Счет) + " - указано более одного вида ставки НДС. Дальнейшее заполнение счета-фактуры невозможно.", СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	КонецЕсли;

	Копия = Счет.Услуги.Выгрузить(,"СтавкаНДС");
	Копия.Свернуть("СтавкаНДС");
	Если ЗначениеЗаполнено(Копия) Тогда
	СтавкаСчета = Копия[0].СтавкаНДС;
	Если Копия.Количество() > 1 Тогда
		
		Сообщить("В счете: " + Строка(Счет) + " - указано более одного вида ставки НДС. Дальнейшее заполнение счета-фактуры невозможно.", СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		или не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	//Если не ПараметрыСФ.Организация = Неопределено 
	//	и не ПараметрыСФ.Организация = Организация 
	//	Тогда
	//	Номер = "";
	//	Организация		  = ПараметрыСФ.Организация;
	//КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
		//Обновление рег. Отчетности на бух. Корп 3.0.37.25
		КППКонтрагента		= "";
		//<=
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
	КонецЕсли;
	//Добавила Федотова Л., РГ-Софт, 04.07.2013, вопрос SLI-0003693 ->
	Если не ПараметрыСФ.ПодразделениеОрганизации = Неопределено 
		и не ПараметрыСФ.ПодразделениеОрганизации = ПодразделениеОрганизации 
		Тогда
		ПодразделениеОрганизации		  = ПараметрыСФ.ПодразделениеОрганизации;
	КонецЕсли;
	//<-
	Если НЕ ПараметрыСФ.ВалютаДокумента = Неопределено
		И НЕ ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента	= ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		Если не СуммаДокумента = ПараметрыСФ.СуммаРубДокумента Тогда
			СуммаДокумента    = ПараметрыСФ.СуммаРубДокумента;
		КонецЕсли;
	Иначе
		Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
			СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента Тогда
		СуммаНДСДокумента	= ПараметрыСФ.СуммаНДСДокумента;
	КонецЕсли;
	Если НЕ СуммаКДоплате = ПараметрыСФ.СуммаУвеличение Тогда
		СуммаКДоплате		= ПараметрыСФ.СуммаУвеличение;
	КонецЕсли;

	Если НЕ СуммаКУменьшению = ПараметрыСФ.СуммаУменьшение Тогда
		СуммаКУменьшению	= ПараметрыСФ.СуммаУменьшение;
	КонецЕсли;

	Если НЕ СуммаНДСКДоплате = ПараметрыСФ.СуммаНДСУвеличение Тогда
		СуммаНДСКДоплате	= ПараметрыСФ.СуммаНДСУвеличение;
	КонецЕсли;

	Если НЕ СуммаНДСКУменьшению = ПараметрыСФ.СуммаНДСУменьшение Тогда
		СуммаНДСКУменьшению	= ПараметрыСФ.СуммаНДСУменьшение;
	КонецЕсли;

	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	//Добавила Федотова Л., РГ-Софт, 01.08.2012
	Если не ПараметрыСФ.ВидСчетаФактуры = Неопределено Тогда
		ВидСчетаФактуры = ПараметрыСФ.ВидСчетаФактуры;
	КонецЕсли;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		КодВидаОперации = "02";
	Иначе
		КодВидаОперации = "01";
	Конецесли;
	
    ЗаполнитьДатаНомерДокументовОплаты();
	
	//Обновление рег. Отчетности на бух. Корп 3.0.37.25
	Если ПустаяСтрока(КППКонтрагента) Тогда        		
		ТекДокОснование = ДокументыОснования[0].ДокументОснование;  	
		Если ТипЗнч(ТекДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ТекДокОснование.ВыводитьИННКППГрузополучателя И ЗначениеЗаполнено(ТекДокОснование.Грузополучатель) Тогда
			КППКонтрагента	= ТекДокОснование.Грузополучатель.КПП;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Грузополучатель", ТекДокОснование.Метаданные()) Тогда
			КППКонтрагента	= ТекДокОснование.Грузополучатель.КПП;			
		Иначе
			КППКонтрагента	= ТекДокОснование.Контрагент.КПП;			
		КонецЕсли;
	КонецЕсли;
	//<=
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", ДокументыОснования[0].ДокументОснование.Метаданные()) Тогда
		Возврат;
	Иначе
		Контрагент = ДокументыОснования[0].ДокументОснование.Контрагент;
	КонецЕсли; 
	
	//Добавила Федотова Л., РГ-Софт, 06.04.13, вопрос 
	КодВидаОперации = "02";
	//Конец добавления
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
		
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВзаиморасчетыСПокупателями.СуммаВзаиморасчетов) КАК ВалютнаяСуммаАванса,
		|	СУММА(ВзаиморасчетыСПокупателями.СуммаРегл) КАК СуммаАванса,
		|	ВзаиморасчетыСПокупателями.Регистратор.ВалютаДокумента КАК ВалютаРасчетов,
		|	ВзаиморасчетыСПокупателями.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями КАК ВзаиморасчетыСПокупателями
		|ГДЕ
		|	ВзаиморасчетыСПокупателями.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСПокупателями.Регистратор.ВалютаДокумента,
		|	ВзаиморасчетыСПокупателями.ДоговорКонтрагента";
		Запрос.УстановитьПараметр("Регистратор", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДокАванса = ДокументыОснования[0].ДокументОснование;
		
		Пока Выборка.Следующий() Цикл
			ВалютаДокумента = Выборка.ВалютаРасчетов;     
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
			
			Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
				
				ТекСтавкаНДС                   	= ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрПлатежа.СтавкаНДС]), СоответствиеСтавок[СтрПлатежа.СтавкаНДС], СтрПлатежа.СтавкаНДС);
				СтрокаПоСтавке 					= ТаблицаПоСтавкам.Добавить();
				СтрокаПоСтавке.СтавкаНДС 		= ТекСтавкаНДС;
				СтрокаПоСтавке.Сумма 			= СтрПлатежа.СуммаПлатежа;
				СтрокаПоСтавке.ВалютнаяСумма	= СтрПлатежа.СуммаПлатежа;
				
				Если ЗначениеЗаполнено(СтрПлатежа.СчетНаПредоплату) Тогда
					
					Отказ = Ложь;
					СтавкаСчета = Перечисления.СтавкиНДС.ПустаяСсылка(); 
					ПровркаСчетаНаПредоплату(СтрПлатежа.СчетНаПредоплату, Отказ, СтавкаСчета);
					Если Отказ Тогда Возврат; КонецЕсли;
					
					СтавкаСчета = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтавкаСчета]), СоответствиеСтавок[СтавкаСчета], СтавкаСчета);
					Если НЕ ТекСтавкаНДС = СтавкаСчета Тогда
						Сообщить("Ставки НДС в счете: " + Строка(СтрПлатежа.СчетНаПредоплату) + " - и ставка в Платежном поручении входящем: " + Строка(ДокАванса) + " - не совпадают. Дальнейшее заполнение счета-фактуры невозможно.", СтатусСообщения.ОченьВажное);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаПредоплату;
				
				КонецЕсли;
			КонецЦикла;
			
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
			
			//Распределение суммы рег учета
			МассивСумм = УправлениеПроизводством.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			//Распределение валютной суммы
			Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
				КонецЕсли; 
			Иначе
				МассивСуммВал = УправлениеПроизводством.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
				Если не МассивСуммВал = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
				Иначе
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
				КонецЕсли; 
			КонецЕсли; 
			
			ВалютнаяСумма = 0;
			СуммаДокумента = 0;
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если ДокАванса.Дата >= '20060101' 
					И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли ДокАванса.Дата >= '20080101' 
					И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				
				//Добавила условие Федотова Л., РГ-Софт, 07.09.15
				Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				Иначе	
					СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.ВалютнаяСумма;
				КонецЕсли;
				ВалютнаяСумма		= ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
				
				СтрокаАванса = Авансы.Добавить();
				
				//Добавила условие Федотова Л., РГ-Софт, 07.09.15
				Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					СтрокаАванса.Сумма		= СтрокаПоСтавке.Сумма;
				Иначе	
					СтрокаАванса.Сумма		= СтрокаПоСтавке.ВалютнаяСумма;
				КонецЕсли;
				СтрокаАванса.СтавкаНДС 	= СтрокаПоСтавке.СтавкаНДС;
				СтрокаАванса.СуммаНДС	= ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
				СтрокаАванса.СчетНаОплату = СтрокаПоСтавке.СчетНаОплату;
				ОшибкаПриЗаполнении = Ложь;
			КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
			
			//СуммаДокумента = Сумма;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
			Иначе
				ДокументЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПодразделениеОрганизации = ДокументОснование.РасшифровкаПлатежа[0].ПодразделениеОрганизации;
		
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу
		ИЛИ ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда  //добавила Федотова Л., РГ-Софт, 03.06.11
		// Список типов не требует корректировки
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС"));
		
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ТекущееОснование) Экспорт
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
    Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомитентуОПродажах.Организация,
		|	ОтчетКомитентуОПродажах.Организация КАК Поставщик,
		|	ОтчетКомитентуОПродажах.Контрагент КАК Покупатель,
		|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК Сумма,
		|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажах.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
		|				И ОтчетКомитентуОПродажах.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
		|			ТОГДА ОтчетКомитентуОПродажах.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|		ИНАЧЕ &ВалютаРегламентированногоУчета
		|	КОНЕЦ КАК Валюта,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению КАК Товар,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению.НаименованиеПолное КАК ТоварНаименование,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению.БазоваяЕдиницаИзмерения.КодПоОКЕИ КАК ЕдиницаИзмеренияКод,
		// { RGS LFedotova 29.09.2017 15:28:31 - СФ 981
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|			ТОГДА ЕСТЬNULL(ОтчетКомитентуОПродажах.УслугаПоВознаграждению.КодТНВЭД, ""--"")
		|		ИНАЧЕ ""--""
		|	КОНЕЦ КАК ТоварКодТНВЭД,
		// } RGS LFedotova 29.09.2017 15:28:37 - СФ 981
		|	ОтчетКомитентуОПродажах.Товары.(
		|		СУММА(СуммаВознаграждения) КАК Сумма,
		|		СУММА(СуммаНДСВознаграждения) КАК СуммаНДС
		|	),
		|	ОтчетКомитентуОПродажах.СуммаВключаетНДС,
		|	ОтчетКомитентуОПродажах.УчитыватьНДС,
		|	ОтчетКомитентуОПродажах.КурсВзаиморасчетов,
		|	ОтчетКомитентуОПродажах.Руководитель,
		|	ОтчетКомитентуОПродажах.ГлавныйБухгалтер
		|ИЗ
		|	Документ.ОтчетПринципалуОПродажах КАК ОтчетКомитентуОПродажах
		|ГДЕ
		|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Руководитель",  	 Шапка.Руководитель);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Шапка.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.Товар);
		Строчка.ТоварНаименование   = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", СокрЛП(Шапка.ТоварНаименование));
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = Шапка.ЕдиницаИзмерения;
		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		СуммаДляПечати    = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаНДС  = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, ВыборкаСтрокТовары.СуммаНДС);
		Строчка.Сумма     = СуммаДляПечати;
		Строчка.Цена      = 0;
		Строчка.СуммаБезНДСРуб  = ?(ВыборкаСтрокТовары.Сумма = Null ИЛИ ВыборкаСтрокТовары.СуммаНДС = Null, 0, ?(Шапка.СуммаВключаетНДС, (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС)* Шапка.КурсВзаиморасчетов, ВыборкаСтрокТовары.Сумма * Шапка.КурсВзаиморасчетов));
		Строчка.СуммаНДСРуб  = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, ВыборкаСтрокТовары.СуммаНДС * Шапка.КурсВзаиморасчетов);

		Строчка.Скважина            = Справочники.Wells.ПустаяСсылка();
		Строчка.Месторождение       = Справочники.Oilfields.ПустаяСсылка();
		Строчка.Отчет     		    = "";
		Строчка.WO     		   		= "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ЕдиницаИзмеренияКод = Шапка.ЕдиницаИзмеренияКод;
		// { RGS LFedotova 29.09.2017 14:32:12 - СФ 981
		Строчка.ТоварКодТНВЭД = Шапка.ТоварКодТНВЭД;
		// } RGS LFedotova 29.09.2017 14:33:08 - СФ 981
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	СуммаДокумента          КАК Сумма,
	|	ВалютаДокумента         КАК Валюта,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|		СтранаПроисхождения                    КАК СтранаПроисхождения,
	|		СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		НомерГТД                               КАК НомерГТД,
	|		НомерГТД.Представление                 КАК ПредставлениеГТД,
	|		Номенклатура.БазоваяЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|		Количество,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";
		
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС) / ВыборкаСтрокТовары.Количество);
	КонецЦикла;
		
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(Реализация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Реализация);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка
	               |ПОМЕСТИТЬ ЕстьУслуги
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Ссылка
	               |ПОМЕСТИТЬ ЕстьТовары
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.РеализацияАгент)
	               |			ТОГДА РеализацияТоваровУслуг.Принципал
	               |		ИНАЧЕ РеализацияТоваровУслуг.Организация
	               |	КОНЕЦ КАК Организация,
	               |	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслуг.НеЗаполнятьГрузоотправителя
	               |				ИЛИ ЕстьТовары.Ссылка ЕСТЬ NULL 
	               |					И НЕ ЕстьУслуги.Ссылка ЕСТЬ NULL 
	               |			ТОГДА &ПустойКонтрагент
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |					ТОГДА РеализацияТоваровУслуг.ПодразделениеОрганизации
	               |				ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕстьТовары.Ссылка ЕСТЬ NULL 
	               |				И НЕ ЕстьУслуги.Ссылка ЕСТЬ NULL 
	               |			ТОГДА &ПустойКонтрагент
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |					ТОГДА РеализацияТоваровУслуг.Контрагент
	               |				ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Грузополучатель,
	               |	РеализацияТоваровУслуг.Грузополучатель КАК ГрузополучательДляКПП,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	               |	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	               |	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	               |	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК Счет,
	               |	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	               |	РеализацияТоваровУслуг.Руководитель,
	               |	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	               |	РеализацияТоваровУслуг.ПримечаниеДляСФ КАК Примечание,
	               |	РеализацияТоваровУслуг.Руководитель.Доверенность,
	               |	РеализацияТоваровУслуг.ГлавныйБухгалтер.Доверенность,
	               |	РеализацияТоваровУслуг.ВыводитьИННКППГрузополучателя,
	               |	РеализацияТоваровУслуг.АдресДоставки
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьТовары КАК ЕстьТовары
	               |		ПО (ЕстьТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьУслуги КАК ЕстьУслуги
	               |		ПО (ЕстьУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	                                              
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Реализация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(630)) КАК ТоварНаименование,
	               |	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	               |	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
	               |	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	               |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	               |	РеализацияТоваровУслугТовары.Цена КАК Цена,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	               |	1 КАК ID,
	               |	РеализацияТоваровУслугТовары.Well КАК Скважина,
				   |	РеализацияТоваровУслугТовары.Oilfield КАК Месторождение,
				   |	РеализацияТоваровУслугТовары.TicketNumber КАК Отчет,
				   |	РеализацияТоваровУслугТовары.WO КАК WO,
				   |	РеализацияТоваровУслугТовары.СтранаПроисхождения.Код,
				   |	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ КАК ЕдиницаИзмеренияКод,
				   // { RGS LFedotova 29.09.2017 14:37:26 - СФ 981
				   |	ВЫБОР
				   |		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
				   |			ТОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.КодТНВЭД, ""--"")
				   |		ИНАЧЕ ""--""
				   |	КОНЕЦ КАК ТоварКодТНВЭД,
				   
				   // } RGS LFedotova 29.09.2017 14:37:33 - СФ 981 
				   |	РеализацияТоваровУслугТовары.СуммаБезНДСРуб,
				   |	РеализацияТоваровУслугТовары.СуммаНДСРуб
				   |ИЗ
				   |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				   |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугУслуги.Номенклатура,
	               |	РеализацияТоваровУслугУслуги.Содержание,
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	               |	NULL,
	               |	"""",
	               |	РеализацияТоваровУслугУслуги.Количество,
	               |	РеализацияТоваровУслугУслуги.Цена,
	               |	РеализацияТоваровУслугУслуги.СтавкаНДС,
	               |	РеализацияТоваровУслугУслуги.СуммаНДС,
	               |	РеализацияТоваровУслугУслуги.Сумма,
	               |	РеализацияТоваровУслугУслуги.НомерСтроки,
	               |	2,
	               |	РеализацияТоваровУслугУслуги.Well,
	               |	РеализацияТоваровУслугУслуги.Oilfield,
	               |	РеализацияТоваровУслугУслуги.TicketNumber,
	               |	РеализацияТоваровУслугУслуги.WO,
	               |	NULL,
	               |	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
				   // { RGS LFedotova 29.09.2017 14:38:56 - СФ 981
				   |	""--"",
				   // } RGS LFedotova 29.09.2017 14:39:02 - СФ 981 
	               |	РеализацияТоваровУслугУслуги.СуммаБезНДСРуб,
	               |	РеализацияТоваровУслугУслуги.СуммаНДСРуб
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ID,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
	               |	СУММА(НДСНачисленныйОбороты.НДСОборот) КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(, , Регистратор, ) КАК НДСНачисленныйОбороты
	               |ГДЕ
	               |	НДСНачисленныйОбороты.Регистратор = &ДокументОснование";
	
				   
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтрокТовары = Результат[0].Выбрать();
	СуммыНДС = Результат[1].Выгрузить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("Счет", 			 Шапка.Счет);
	ДанныеДляПечати.Вставить("Договор", 		 Шапка.Договор);
	ДанныеДляПечати.Вставить("Руководитель", 	 Шапка.Руководитель);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Шапка.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("Примечание", 		 Шапка.Примечание);
	ДанныеДляПечати.Вставить("ДоверенностьРуководитель", 	?(Шапка.РуководительДоверенность = "","","по доверенности " + Шапка.РуководительДоверенность));
	ДанныеДляПечати.Вставить("ДоверенностьГлавныйБухгалтер",?(Шапка.ГлавныйБухгалтерДоверенность = "","","по доверенности " + Шапка.ГлавныйБухгалтерДоверенность));
	ДанныеДляПечати.Вставить("ВыводитьИННКППГрузополучателя",Шапка.ВыводитьИННКППГрузополучателя);
	ДанныеДляПечати.Вставить("ГрузополучательДляКПП",Шапка.ГрузополучательДляКПП);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Скважина            = ВыборкаСтрокТовары.Скважина;
		Строчка.Месторождение       = ВыборкаСтрокТовары.Месторождение;
		Строчка.Отчет     		    = ВыборкаСтрокТовары.Отчет;
		Строчка.WO     		   		= ВыборкаСтрокТовары.WO;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ЕдиницаИзмеренияКод = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		// { RGS LFedotova 29.09.2017 14:40:26 - СФ 981
		Строчка.ТоварКодТНВЭД 		= ВыборкаСтрокТовары.ТоварКодТНВЭД;
		// } RGS LFedotova 29.09.2017 14:40:34 - СФ 981 
		Строчка.СуммаБезНДСРуб 		= ВыборкаСтрокТовары.СуммаБезНДСРуб;
		Строчка.СуммаНДСРуб 		= ВыборкаСтрокТовары.СуммаНДСРуб;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

//Rg-Soft Федотова Л. П. >>
// Функция собирает данные по документу основанию реализации с видом операции КредитНотаСторно
// и возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслугКорректировка()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РеализацияТоваровУслугУслуги.Ссылка
					|ПОМЕСТИТЬ ЕстьУслуги
					|ИЗ
					|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
					|ГДЕ
					|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	РеализацияТоваровУслугТовары.Ссылка
					|ПОМЕСТИТЬ ЕстьТовары
					|ИЗ
					|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
					|ГДЕ
					|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	РеализацияТоваровУслуг.Организация,
					|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Поставщик,
					|	ВЫБОР
					|		КОГДА РеализацияТоваровУслуг.НеЗаполнятьГрузоотправителя
					|				ИЛИ ЕстьТовары.Ссылка ЕСТЬ NULL 
					|					И (НЕ ЕстьУслуги.Ссылка ЕСТЬ NULL )
					|			ТОГДА &ПустойКонтрагент
					|		ИНАЧЕ ВЫБОР
					|				КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
					|					ТОГДА РеализацияТоваровУслуг.ПодразделениеОрганизации
					|				ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
					|			КОНЕЦ
					|	КОНЕЦ КАК Грузоотправитель,
					|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
					|	ВЫБОР
					|		КОГДА ЕстьТовары.Ссылка ЕСТЬ NULL 
					|					И (НЕ ЕстьУслуги.Ссылка ЕСТЬ NULL )
					|			ТОГДА &ПустойКонтрагент
					|		ИНАЧЕ ВЫБОР
					|				КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
					|					ТОГДА РеализацияТоваровУслуг.Контрагент
					|				ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
					|			КОНЕЦ
					|    КОНЕЦ КАК Грузополучатель,
					|	Грузополучатель КАК ГрузополучательДляКПП,
					|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
					|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
					|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
					|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
					|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК Счет,
					|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
					|	РеализацияТоваровУслуг.Руководитель,
					|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
					|	РеализацияТоваровУслуг.ПримечаниеДляСФ КАК Примечание,
					|	РеализацияТоваровУслуг.Руководитель.Доверенность,
					|	РеализацияТоваровУслуг.ГлавныйБухгалтер.Доверенность,
					|	РеализацияТоваровУслуг.ВыводитьИННКППГрузополучателя
					|ИЗ
					|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
					|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьТовары КАК ЕстьТовары
					|		ПО (ЕстьТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьУслуги КАК ЕстьУслуги
					|		ПО (ЕстьУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
					|ГДЕ
					|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";
	
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();   

	ЗапросСФ = Новый Запрос;
	ЗапросСФ.УстановитьПараметр("ДокументОснование", ДокументОснование.Сделка);
	ЗапросСФ.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер,
		|	СчетФактураВыданный.Дата
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";

	СФОснования = ЗапросСФ.Выполнить().Выбрать();
	СФОснования.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ОснованиеДокументаОснования", ДокументОснование.Сделка);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
	|			ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ КАК ЕдиницаИзмеренияКод,
	// { RGS LFedotova 29.09.2017 14:42:17 - СФ 981
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.КодТНВЭД, ""--"")
	|		ИНАЧЕ ""--""
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	// } RGS LFedotova 29.09.2017 14:42:29 - СФ 981 
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеТовара
	|ПОМЕСТИТЬ Реализация
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ОснованиеДокументаОснования
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СУММА(РеализацияТоваровУслугУслуги.Количество),
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС),
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|				ТОГДА РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
	|			ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма
	|		КОНЕЦ),
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
	// { RGS LFedotova 29.09.2017 14:45:26 - СФ 981
	|	""--"",
	// } RGS LFedotova 29.09.2017 14:45:32 - СФ 981
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(500))
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ОснованиеДокументаОснования
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(500))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
	|			ИНАЧЕ РеализацияТоваровУслугТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код,
	// { RGS LFedotova 29.09.2017 14:47:50 - СФ 981
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.КодТНВЭД, ""--"")
	|		ИНАЧЕ ""--""
	|	КОНЕЦ КАК ТоварКодТНВЭД,
	// } RGS LFedotova 29.09.2017 14:47:57 - СФ 981
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеТовара
	|ПОМЕСТИТЬ КредитНотаСторно
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СУММА(РеализацияТоваровУслугУслуги.Количество),
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС),
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|				ТОГДА РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
	|			ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма
	|		КОНЕЦ),
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
	// { RGS LFedotova 29.09.2017 14:49:18 - СФ 981
	|	""--"",
	// } RGS LFedotova 29.09.2017 14:49:23 - СФ 981 
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(500))
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.КодПоОКЕИ,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(500))                    
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Реализация.Товар, КредитНотаСторно.Товар) КАК Номенклатура,
	|	ЕСТЬNULL(Реализация.НаименованиеТовара, КредитНотаСторно.НаименованиеТовара) КАК НаименованиеТовара,
	|	ЕСТЬNULL(Реализация.ЕдиницаИзмерения, КредитНотаСторно.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения,
	// { RGS LFedotova 29.09.2017 22:42:05 - СФ 981
	|	ЕСТЬNULL(Реализация.ЕдиницаИзмеренияКод, КредитНотаСторно.ЕдиницаИзмеренияКод) КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(Реализация.ТоварКодТНВЭД, КредитНотаСторно.ТоварКодТНВЭД) КАК ТоварКодТНВЭД,
	// } RGS LFedotova 29.09.2017 22:42:11 - СФ 981 
	|	ЕСТЬNULL(Реализация.Количество, 0) КАК КоличествоДоИзменения,
	|	ЕСТЬNULL(Реализация.Количество, 0) + ЕСТЬNULL(КредитНотаСторно.Количество, 0) КАК КоличествоПослеИзменения,
	|	ЕСТЬNULL(Реализация.Сумма, 0) КАК СтоимостьБезНДСДоИзменения,
	|	ЕСТЬNULL(Реализация.Сумма, 0) + ЕСТЬNULL(КредитНотаСторно.Сумма, 0) КАК СтоимостьБезНДСПослеИзменения,
	|	ЕСТЬNULL(Реализация.СтавкаНДС, КредитНотаСторно.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(Реализация.СуммаНДС, 0) КАК СуммаНДСДоИзменения,
	|	ЕСТЬNULL(Реализация.СуммаНДС, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0) КАК СуммаНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0) > 0
	|			ТОГДА ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0) < 0
	|			ТОГДА -ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0) > 0
	|			ТОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0) < 0
	|			ТОГДА -ЕСТЬNULL(КредитНотаСторно.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0) > 0
	|			ТОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КредитНотаСторно.Сумма, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0) < 0
	|			ТОГДА -(ЕСТЬNULL(КредитНотаСторно.Сумма, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаНДС, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	0 КАК ЦенаДоИзменения,
	|	0 КАК ЦенаПослеИзменения
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	Реализация КАК Реализация
	|		ПОЛНОЕ СОЕДИНЕНИЕ КредитНотаСторно КАК КредитНотаСторно
	|		ПО Реализация.Товар = КредитНотаСторно.Товар
	|			И Реализация.НаименованиеТовара = КредитНотаСторно.НаименованиеТовара
	|			И Реализация.СтавкаНДС = КредитНотаСторно.СтавкаНДС
	|			И Реализация.ЕдиницаИзмерения = КредитНотаСторно.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.НаименованиеТовара,
	|	ИтоговаяТаблица.НаименованиеЕдиницыИзмерения,
	// { RGS LFedotova 29.09.2017 22:46:55 - СФ 981
	|	ИтоговаяТаблица.ЕдиницаИзмеренияКод,
	|	ИтоговаяТаблица.ТоварКодТНВЭД,
	// } RGS LFedotova 29.09.2017 22:47:01 - СФ 981 
	|	ИтоговаяТаблица.КоличествоДоИзменения,
	|	ИтоговаяТаблица.КоличествоПослеИзменения,
	|	ИтоговаяТаблица.СтоимостьБезНДСДоИзменения,
	|	ИтоговаяТаблица.СтоимостьБезНДСПослеИзменения,
	|	ИтоговаяТаблица.СтавкаНДС,
	|	ИтоговаяТаблица.СуммаНДСДоИзменения,
	|	ИтоговаяТаблица.СуммаНДСПослеИзменения,
	|	ИтоговаяТаблица.РазницаНДСУвеличение,
	|	ИтоговаяТаблица.РазницаНДСУменьшение,
	|	ИтоговаяТаблица.РазницаБезНДСУвеличение,
	|	ИтоговаяТаблица.РазницаБезНДСУменьшение,
	|	ИтоговаяТаблица.РазницаСНДСУвеличение,
	|	ИтоговаяТаблица.РазницаСНДСУменьшение,
	|	ИтоговаяТаблица.ЦенаДоИзменения,
	|	ИтоговаяТаблица.ЦенаПослеИзменения,
	|	ИтоговаяТаблица.СтоимостьБезНДСДоИзменения + ИтоговаяТаблица.СуммаНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ИтоговаяТаблица.СтоимостьБезНДСПослеИзменения + ИтоговаяТаблица.СуммаНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	(НЕ(ИтоговаяТаблица.РазницаБезНДСУвеличение = 0
	|				И ИтоговаяТаблица.РазницаБезНДСУменьшение = 0
	|				И ИтоговаяТаблица.РазницаНДСУвеличение = 0
	|				И ИтоговаяТаблица.РазницаНДСУменьшение = 0))";
	
	Номенклатура = Запрос.Выполнить().Выгрузить();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СокрЛП(Номер));
	ДанныеДляПечати.Вставить("Дата",             Формат(Дата, "ДФ='dd MMMM yyyy'") + " г.");
	//ДанныеДляПечати.Вставить("НомерПРД",         "");
	//ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	//ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	//ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("Счет", 			 Шапка.Счет);
	ДанныеДляПечати.Вставить("Договор", 		 Шапка.Договор);
	ДанныеДляПечати.Вставить("Руководитель", 	 Шапка.Руководитель);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Шапка.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("Примечание", 		 Шапка.Примечание);
	ДанныеДляПечати.Вставить("ДоверенностьРуководитель", 	?(Шапка.РуководительДоверенность = "","","по доверенности " + Шапка.РуководительДоверенность));
	ДанныеДляПечати.Вставить("ДоверенностьГлавныйБухгалтер",?(Шапка.ГлавныйБухгалтерДоверенность = "","","по доверенности " + Шапка.ГлавныйБухгалтерДоверенность));
	ДанныеДляПечати.Вставить("ВыводитьИННКППГрузополучателя",Шапка.ВыводитьИННКППГрузополучателя);
	ДанныеДляПечати.Вставить("ГрузополучательДляКПП",Шапка.ГрузополучательДляКПП);
	ДанныеДляПечати.Вставить("ГрузополучательДляКПП",Шапка.ГрузополучательДляКПП);
	ДанныеДляПечати.Вставить("НомерСчетаФактуры",СокрЛП(СФОснования.Номер));
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры", Формат(СФОснования.Дата, "ДФ='dd MMMM yyyy'") + " г.");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Номенклатура);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслугКорректировка

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоПКО()

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	СуммаДокумента        КАК Сумма,
	|	СтавкаНДС             КАК СтавкаНДС,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары   = ИнициализацияТаблицыСтрок();

	Строчка  = Товары.Добавить();

	Строчка.Товар               = мНадписьПредоплата;
	Строчка.ТоварНаименование   = мНадписьПредоплата;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = "";
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СтавкаНДС           = СтавкаНДС;
	Строчка.СуммаНДС            = СуммаНДС;
	Строчка.Сумма               = Сумма;
	Строчка.Цена                = "";

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПКО()

// Функция собирает данные по документу основанию ПлатежноеПоручениеВходящее и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоСВП() Экспорт

	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	//ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = мНадписьПредоплата;
	Строчка.ТоварНаименование   = мНадписьПредоплата;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = "";
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СтавкаНДС = СтавкаНДС;
	Строчка.СуммаНДС  = СуммаНДС;
	Строчка.Сумма     = Сумма;
	Строчка.Цена      = "";

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция собирает данные по документу основанию ПлатежныйОрдерПоступлениеДенежныхСредств и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоПлатежномуОрдеру()

	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
	|
	|ГДЕ
	|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = мНадписьПредоплата;
	Строчка.ТоварНаименование   = мНадписьПредоплата;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = "";
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СтавкаНДС = СтавкаНДС;
	Строчка.СуммаНДС  = СуммаНДС;
	Строчка.Сумма     = Сумма;
	Строчка.Цена      = "";

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПлатежномуОрдеру()

Функция СобратьДанныеПоАкту()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	Контрагент КАК Покупатель,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента КАК Валюта,
	|	УчитыватьНДС КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Услуги.(
	|		Ссылка,
	|		НомерСтроки,
	|		Количество,
	|		Номенклатура КАК Товар,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Коэффициент,
	|		НоменклатурнаяГруппа,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Услуги.Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;


КонецФункции

// Функция собирает данные по документу основанию ПередачаОС и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеОС(Реализация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Реализация);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПередачаОС.Организация,
	               |	ПередачаОС.ПодразделениеОрганизации КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПередачаОС.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ПередачаОС.ПодразделениеОрганизации
	               |		ИНАЧЕ ПередачаОС.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	ПередачаОС.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПередачаОС.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ПередачаОС.Контрагент
	               |		ИНАЧЕ ПередачаОС.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ПередачаОС.СуммаДокумента КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ПередачаОС.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	               |				И ПередачаОС.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ЛОЖЬ
	               |			ТОГДА ПередачаОС.ДоговорКонтрагента.ВалютаВзаиморасчетов
	               |		ИНАЧЕ &ВалютаРегламентированногоУчета
	               |	КОНЕЦ КАК Валюта,
	               |	ПередачаОС.УчитыватьНДС КАК УчитыватьНДС,
	               |	ПередачаОС.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ПередачаОС.Ответственный,
	               |	ПередачаОС.Руководитель,
	               |	ПередачаОС.ГлавныйБухгалтер,
	               |	ПередачаОС.ДоговорКонтрагента КАК Договор,
	               |	ПередачаОС.ВыводитьИННКППГрузополучателя
	               |ИЗ
	               |	Документ.ПередачаОС КАК ПередачаОС
	               |ГДЕ
	               |	ПередачаОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Реализация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОС.ОсновноеСредство КАК Товар,
	               |	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(630)) КАК ТоварНаименование,
				   |	NULL КАК СтранаПроисхождения,
				   |	NULL КАК ЕдиницаИзмерения,
				   |	NULL КАК НомерГТД,
				   |	NULL КАК ЕдиницаИзмеренияКод,
				   // { RGS LFedotova 29.09.2017 15:04:19 - СФ 981
				   |	ВЫБОР
				   |		КОГДА ТаблицаОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
				   |			ТОГДА ЕСТЬNULL(ТаблицаОС.ОсновноеСредство.КодТНВЭД, ""--"")
				   |		ИНАЧЕ ""--""
				   |	КОНЕЦ КАК ТоварКодТНВЭД,
				   // } RGS LFedotova 29.09.2017 15:04:26 - СФ 981 
				   |	NULL КАК СтранаПроисхожденияКод,
	               |	ТаблицаОС.СтавкаНДС КАК СтавкаНДС,
	               |	ТаблицаОС.СуммаНДС КАК СуммаНДС,
	               |	1 КАК Количество,
	               |	ТаблицаОС.Сумма КАК Цена,
	               |	ТаблицаОС.Сумма КАК Сумма,
	               |	ТаблицаОС.ОсновноеСредство.НомерНакладной КАК НомерНакладной,
	               |	ТаблицаОС.СуммаБезНДСРуб,
	               |	ТаблицаОС.СуммаНДСРуб
	               |ИЗ
	               |	Документ.ПередачаОС.ОС КАК ТаблицаОС
	               |ГДЕ
	               |	ТаблицаОС.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТаблицаОС.НомерСтроки";    
	
	//добавила Людмила Федотова 24.03.09 ->
	Запрос.УстановитьПараметр("Штука", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"));
	//<-
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	//ДанныеДляПечати.Вставить("Руководитель", 	 УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Шапка.Ответственный, "ДиректорПоУмолчанию"));
	//ДанныеДляПечати.Вставить("ГлавныйБухгалтер", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Шапка.Ответственный, "ГлавныйБухгалтерПоУмолчанию"));
	ДанныеДляПечати.Вставить("Руководитель", 	 Шапка.Руководитель);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Шапка.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("Договор", 		 Шапка.Договор);
	ДанныеДляПечати.Вставить("ВыводитьИННКППГрузополучателя", 		 Шапка.ВыводитьИННКППГрузополучателя);
	ДанныеДляПечати.Вставить("ГрузополучательДляКПП", 		 Шапка.Грузополучатель);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		//Строчка.ПредставлениеГТД    = ?(СтрЧислоВхождений(ВыборкаСтрокТовары.НомерНакладной,"/")=2,ВыборкаСтрокТовары.НомерНакладной,"");
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 1;
		//Строчка.ЕдиницаИзмерения    = "";
		// { RGS AFokin 06.12.2016 12:48:25 - SLI-0007019 
		//Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения; //изменила Федотова Людмила 24.03.09
		Строчка.ЕдиницаИзмерения    = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар.ЕдиницаИзмерения), ВыборкаСтрокТовары.Товар.ЕдиницаИзмерения, 
															Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796")); 
		// } RGS AFokin 06.12.2016 12:48:25 - SLI-0007019 
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаБезНДСРуб		= ВыборкаСтрокТовары.СуммаБезНДСРуб;
		Строчка.СуммаНДСРуб			= ВыборкаСтрокТовары.СуммаНДСРуб;
		
		Строчка.Скважина            = Справочники.Wells.ПустаяСсылка();
		Строчка.Месторождение       = Справочники.Oilfields.ПустаяСсылка();
		Строчка.Отчет     		    = "";
		Строчка.WO     		   		= "";
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ЕдиницаИзмеренияКод = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		// { RGS LFedotova 29.09.2017 15:05:46 - СФ 981
		Строчка.ТоварКодТНВЭД = ВыборкаСтрокТовары.ТоварКодТНВЭД;
		// } RGS LFedotova 29.09.2017 15:05:52 - СФ 981 

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ПередачаНМА и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПередачеНМАОрганизаций()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация 			КАК Поставщик,
	|	Организация 			КАК Грузоотправитель,
	|	Контрагент  			КАК Покупатель,
	|	Контрагент  			КАК Грузополучатель,
	|	СуммаДокумента   		КАК СуммаДокумента,
	|	ВалютаДокумента  		КАК Валюта,
	|	УчитыватьНДС     		КАК УчитыватьНДС,
	|	СуммаВключаетНДС 		КАК СуммаВключаетНДС,
	|	НематериальныйАктив 	КАК Товар,
	|	ВЫРАЗИТЬ (НематериальныйАктив.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	Сумма                                  КАК Сумма
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|
	|ГДЕ
	|	ПередачаНМА.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.СуммаДокумента);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.Товар;
	Строчка.ТоварНаименование   = СокрЛП(Шапка.ТоварНаименование);
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.Цена                = Шапка.Сумма;
	Строчка.Сумма               = Шапка.Сумма;
	Строчка.СуммаНДС            = Шапка.СуммаНДС;
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|
	|ГДЕ
	|	ОтражениеНачисленияНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура КАК Товар,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
					|	ОтражениеНачисленияНДСТоварыИУслуги.СтранаПроисхождения,
					|	ОтражениеНачисленияНДСТоварыИУслуги.СтранаПроисхождения.Представление КАК ПредставлениеСтраны,
					|	ОтражениеНачисленияНДСТоварыИУслуги.НомерГТД,
					|	ОтражениеНачисленияНДСТоварыИУслуги.НомерГТД.Представление КАК ПредставлениеГТД,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Количество,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Цена,
					|	ОтражениеНачисленияНДСТоварыИУслуги.СтавкаНДС,
					|	ОтражениеНачисленияНДСТоварыИУслуги.СуммаНДС,
					|	ОтражениеНачисленияНДСТоварыИУслуги.Сумма
					|ИЗ
					|	Документ.ОтражениеНачисленияНДС.ТоварыИУслуги КАК ОтражениеНачисленияНДСТоварыИУслуги

					|ГДЕ
					|	ОтражениеНачисленияНДСТоварыИУслуги.Ссылка = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Товар";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию ДокументРасчетовСКонтрагентом и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоДокументуРасчетовСКонтрагентом()

	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = мНадписьПредоплата;
	Строчка.ТоварНаименование   = мНадписьПредоплата;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = "";
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СтавкаНДС = СтавкаНДС;
	Строчка.СуммаНДС  = СуммаНДС;
	Строчка.Сумма     = Сумма;
	Строчка.Цена      = "";

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция собирает данные по документу основанию РеализацияУслугПоПереработке и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияУслугПоПереработке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	Контрагент  КАК Покупатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияУслугПоПереработке.Содержание КАК Услуга,
	               |	СУММА(РеализацияУслугПоПереработке.Количество) КАК Количество,
	               |	СУММА(РеализацияУслугПоПереработке.Цена) КАК Цена,
	               |	РеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(РеализацияУслугПоПереработке.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(РеализацияУслугПоПереработке.Сумма) КАК Сумма
	               |ИЗ
	               |	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	               |ГДЕ
	               |	РеализацияУслугПоПереработке.Ссылка = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияУслугПоПереработке.Содержание,
	               |	РеализацияУслугПоПереработке.СтавкаНДС,
				   |	РеализацияУслугПоПереработке.Номенклатура.БазоваяЕдиницаИзмерения";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ОчищатьКоличество", Ложь); // Признак очищения количества при незаполненной единице измерения

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Услуга;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.Услуга;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

Функция СобратьДанныеПоЦепочкеРеализацийТоваровУслуг() Экспорт
	
	//сделаем цепочку вида "риикикии", где р - реализация, к - корректировка, и - исправление
	ЦепочкаРеализаций = Новый Массив;
	ЦепочкаРеализаций = ПолучитьЦепочкуРеализаций(ЦепочкаРеализаций, ДокументОснование); 
	
	СтрокаЦепочки = ПолучитьСтрокуЦепочки(ЦепочкаРеализаций);
	
	Если ТипЗнч(ДокументОснование) = тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.ПередачаОС") Тогда
		ДанныеДляПечати = СобратьДанныеПоПередачеОС(ДокументОснование);
	КонецЕсли;
	//ДанныеДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокументОснование);
	
	//-> RG-Soft VIVanov 07/08/12
	РасчетыВВалюте = (ДанныеДляПечати.Валюта <> мВалютаРегламентированногоУчета) И Не ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	СуммаВключаетНДС = ДанныеДляПечати.СуммаВключаетНДС;
	//<-	
	
	ДанныеДляПечати.ТабличнаяЧасть = ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПолучитьЦепочкуРеализаций(ЦепочкаРеализаций, Реализация)
	
	Звено = Новый Структура;
	Звено.Вставить("Имя", ПолучитьТипРеализации(Реализация));
	Если ТипЗнч(Реализация) = тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Звено.Вставить("ТЧ", СобратьДанныеПоРеализацияТоваровУслуг(Реализация).ТабличнаяЧасть);
	ИначеЕсли ТипЗнч(Реализация) = тип("ДокументСсылка.ПередачаОС") Тогда
		Звено.Вставить("ТЧ", СобратьДанныеПоПередачеОС(Реализация).ТабличнаяЧасть);
	ИначеЕсли ТипЗнч(Реализация) = тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		Звено.Вставить("ТЧ", СобратьДанныеПоОтчетКомитентуОПродажах(Реализация).ТабличнаяЧасть);
	КонецЕсли;
	
	ЦепочкаРеализаций.Вставить(0, Звено);
	
	Если ТипЗнч(Реализация) = тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		Возврат ЦепочкаРеализаций;
	ИначеЕсли ЗначениеЗаполнено(Реализация.Сделка) И (ТипЗнч(Реализация.Сделка) = тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Реализация.Сделка) = тип("ДокументСсылка.ПередачаОС") Или ТипЗнч(Реализация.Сделка) = тип("ДокументСсылка.ОтчетПринципалуОПродажах")) Тогда
		Возврат ПолучитьЦепочкуРеализаций(ЦепочкаРеализаций, Реализация.Сделка); 
	Иначе
		Возврат ЦепочкаРеализаций;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипРеализации(Реализация) 
	
	Если ТипЗнч(Реализация) = Тип("ДокументСсылка.ПередачаОС") Или ТипЗнч(Реализация) = тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		Возврат "р";
	ИначеЕсли Реализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		Если Реализация.Корректировка Тогда
			Возврат "к";
		Иначе
			Возврат "и";
		КонецЕсли;
	ИначеЕсли Реализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		Возврат "р";
	ИначеЕсли Реализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент Тогда
		Возврат "р";
	Иначе
		Возврат "р";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуЦепочки(ЦепочкаРеализаций)
	
	Строчка = "";
	Для Каждого Элемент Из ЦепочкаРеализаций Цикл
		Строчка = Строчка + Элемент.Имя;
	КонецЦикла;
	
	Возврат Строчка;
	
КонецФункции

Функция ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС)
	
	НомерИИ = Найти(СтрокаЦепочки, "ии");
	НомерКК = Найти(СтрокаЦепочки, "кк");
	НомерКИ = Найти(СтрокаЦепочки, "ки");
	НомерРИ = Найти(СтрокаЦепочки, "ри");
	НомерРК = Найти(СтрокаЦепочки, "рк");
	НомерР  = Найти(СтрокаЦепочки, "р");
	
	Если НомерИИ > 0 Тогда
		ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерИИ, "ии", РасчетыВВалюте, СуммаВключаетНДС); //ии->и
		СтрокаЦепочки = ПолучитьСтрокуЦепочки(ЦепочкаРеализаций);
		Возврат ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС);
	ИначеЕсли НомерКК > 0 Тогда
		//Изменила Федотова Л., РГ-Софт, 10.04.13, вопрос SLI-0003478
		//ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерКК, "кк", РасчетыВВалюте, СуммаВключаетНДС); //кк->к
		ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерКК, "ркк", РасчетыВВалюте, СуммаВключаетНДС); //ркК->рК
		//Конец изменения
		СтрокаЦепочки = ПолучитьСтрокуЦепочки(ЦепочкаРеализаций);
		Возврат ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС);
	ИначеЕсли НомерКИ > 0 Тогда
		ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерКИ, "ки", РасчетыВВалюте, СуммаВключаетНДС); //ки->к
		СтрокаЦепочки = ПолучитьСтрокуЦепочки(ЦепочкаРеализаций);
		Возврат ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС);
	ИначеЕсли НомерРИ > 0 Тогда
		ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерРИ, "ри", РасчетыВВалюте, СуммаВключаетНДС); //ри->р
		СтрокаЦепочки = ПолучитьСтрокуЦепочки(ЦепочкаРеализаций);
		Возврат ПрименитьСледующееПравило(СтрокаЦепочки, ЦепочкаРеализаций, РасчетыВВалюте, СуммаВключаетНДС);
	ИначеЕсли НомерРК > 0 Тогда
		ЦепочкаРеализаций = ПрименитьПравило(ЦепочкаРеализаций, НомерРК, "рк", РасчетыВВалюте, СуммаВключаетНДС); //терминальное правило
		Возврат ЦепочкаРеализаций[0].ТЧ;
	ИначеЕсли НомерР > 0 Тогда //терминальное правило, ничего делать не надо
		Возврат ЦепочкаРеализаций[0].ТЧ;
	КонецЕсли;		
	
КонецФункции

Функция ПрименитьПравило(ЦепочкаРеализаций, Номер, Правило, РасчетыВВалюте, СуммаВключаетНДС)
	
	Если Правило = "ии" Тогда //суммируем ТЧ, удаляем первое "и"
		СуммаТЧ = ЦепочкаРеализаций[Номер-1].ТЧ;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЦепочкаРеализаций[Номер].ТЧ, СуммаТЧ);
		ЦепочкаРеализаций[Номер].ТЧ = СвернутьТЧ(СуммаТЧ);
		ЦепочкаРеализаций.Удалить(Номер-1);
		Возврат ЦепочкаРеализаций;
	ИначеЕсли Правило = "кк" Тогда //суммируем ТЧ, удаляем первое "к"
		СуммаТЧ = ЦепочкаРеализаций[Номер-1].ТЧ;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЦепочкаРеализаций[Номер].ТЧ, СуммаТЧ);
		ЦепочкаРеализаций[Номер].ТЧ = СвернутьТЧ(СуммаТЧ);
		ЦепочкаРеализаций.Удалить(Номер-1);
		Возврат ЦепочкаРеализаций;
	ИначеЕсли Правило = "ки" Тогда //суммируем ТЧ, удаляем "и"
		СуммаТЧ = ЦепочкаРеализаций[Номер-1].ТЧ;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЦепочкаРеализаций[Номер].ТЧ, СуммаТЧ);
		ЦепочкаРеализаций[Номер-1].ТЧ = СвернутьТЧ(СуммаТЧ);
		ЦепочкаРеализаций.Удалить(Номер);
		Возврат ЦепочкаРеализаций;
	ИначеЕсли Правило = "ри" Тогда //суммируем ТЧ, удаляем "и"
		СуммаТЧ = ЦепочкаРеализаций[Номер-1].ТЧ;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЦепочкаРеализаций[Номер].ТЧ, СуммаТЧ);
		ЦепочкаРеализаций[Номер-1].ТЧ = СвернутьТЧ(СуммаТЧ);
		ЦепочкаРеализаций.Удалить(Номер);
		Возврат ЦепочкаРеализаций;
	ИначеЕсли Правило = "рк" Тогда //скрещиваем ТЧ, удаляем "к"
		//изменила Федотова Л., РГ-Софт, 20.11.12, вопрос №SLI-0003014
		//ЦепочкаРеализаций[Номер-1].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,Отчет,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
		//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		
		// { RGS LFedotova 29.09.2017 15:06:58 - СФ 981
		//ЦепочкаРеализаций[Номер-1].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
		//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		ЦепочкаРеализаций[Номер-1].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод,ТоварКодТНВЭД"
		, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		// } RGS LFedotova 29.09.2017 15:07:03 - СФ 981 
		
		//изменила Федотова Л., РГ-Софт, 20.11.12, вопрос №SLI-0003014
		//ЦепочкаРеализаций[Номер].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,Отчет,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
		//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		Для каждого Строка Из ЦепочкаРеализаций[Номер].ТЧ Цикл
			Строка.Цена = 0;
		КонецЦикла; 
		
		// { RGS LFedotova 29.09.2017 15:09:50 - СФ 981
		//ЦепочкаРеализаций[Номер].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
		//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		ЦепочкаРеализаций[Номер].ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,Цена,СтавкаНДС,Скважина,Месторождение,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод,ТоварКодТНВЭД"
		, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб");
		// } RGS LFedotova 29.09.2017 15:09:54 - СФ 981   
		
		Для каждого Строка Из ЦепочкаРеализаций[Номер].ТЧ Цикл
			Строка.Цена = ?(Строка.Количество = 0,Строка.Цена = Строка.Сумма, Строка.Сумма/Строка.Количество);
		КонецЦикла; 
		ИтоговаяТЧ = СкреститьТЧ(ЦепочкаРеализаций[Номер-1].ТЧ, ЦепочкаРеализаций[Номер].ТЧ, РасчетыВВалюте, СуммаВключаетНДС);
		ЦепочкаРеализаций[Номер-1].ТЧ = ИтоговаяТЧ;
		ЦепочкаРеализаций.Удалить(Номер);
		Возврат ЦепочкаРеализаций;
	//Добавила Федотова Л., РГ-Софт, 10.04.13, вопрос SLI-0003478
	ИначеЕсли Правило = "ркк" Тогда //суммируем "р" и первое "к"
		СуммаТЧ = ЦепочкаРеализаций[0].ТЧ;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЦепочкаРеализаций[1].ТЧ, СуммаТЧ);
		ЦепочкаРеализаций[0].ТЧ = СвернутьТЧ(СуммаТЧ);
		ЦепочкаРеализаций.Удалить(1);
		Возврат ЦепочкаРеализаций;
	КонецЕсли;	
	
КонецФункции

Функция СкреститьТЧ(ТЧреализации, ТЧкорректировки, РасчетыВВалюте, СуммаВключаетНДС)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧкорректировки", ТЧкорректировки);
	Запрос.УстановитьПараметр("ТЧреализации", ТЧреализации);
	Запрос.УстановитьПараметр("РасчетыВВалюте", РасчетыВВалюте);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧреализации.Товар,
	               |	ТЧреализации.ТоварНаименование КАК НаименованиеТовара,
	               |	ТЧреализации.СтранаПроисхождения,
	               |	ТЧреализации.ПредставлениеСтраны,
	               |	ТЧреализации.НомерГТД,
	               |	ТЧреализации.ПредставлениеГТД,
	               |	ТЧреализации.Количество,
	               |	ТЧреализации.ЕдиницаИзмерения,
	               |	ТЧреализации.Цена,
	               |	ТЧреализации.СтавкаНДС,
				   |	ВЫБОР
				   |		КОГДА &РасчетыВВалюте
				   |			ТОГДА ТЧреализации.СуммаНДС
				   |		ИНАЧЕ ТЧреализации.СуммаНДСРуб
				   |	КОНЕЦ КАК НДС,
				   |	ВЫБОР
				   |		КОГДА &РасчетыВВалюте
				   |			ТОГДА ВЫБОР
				   |					КОГДА &СуммаВключаетНДС
				   |						ТОГДА ТЧреализации.Сумма - ТЧреализации.СуммаНДС
				   |					ИНАЧЕ ТЧреализации.Сумма
				   |				КОНЕЦ
				   |		ИНАЧЕ ТЧреализации.СуммаБезНДСРуб
				   |	КОНЕЦ КАК СуммаБезНДС,
				   |	ТЧреализации.СуммаНДС,
	               |	ТЧреализации.Сумма,
	               |	ТЧреализации.Скважина,
	               |	ТЧреализации.Месторождение,
				   //|	ТЧреализации.Отчет,  //закомментировала Федотова Л., РГ-Софт, 21.11.12
	               |	ТЧреализации.WO,
	               |	ТЧреализации.СтранаПроисхожденияКод,
	               |	ТЧреализации.ЕдиницаИзмеренияКод,
				   // { RGS LFedotova 29.09.2017 15:11:14 - СФ 981
	               |	ТЧреализации.ТоварКодТНВЭД,
				   // } RGS LFedotova 29.09.2017 15:11:19 - СФ 981
	               |	ТЧреализации.СуммаБезНДСРуб,
	               |	ТЧреализации.СуммаНДСРуб
	               |ПОМЕСТИТЬ Реализация
	               |ИЗ
	               |	&ТЧреализации КАК ТЧреализации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧкорректировки.Товар,
	               |	ТЧкорректировки.ТоварНаименование КАК НаименованиеТовара,
	               |	ТЧкорректировки.СтранаПроисхождения,
	               |	ТЧкорректировки.ПредставлениеСтраны,
	               |	ТЧкорректировки.НомерГТД,
	               |	ТЧкорректировки.ПредставлениеГТД,
	               |	ТЧкорректировки.Количество,
	               |	ТЧкорректировки.ЕдиницаИзмерения,
	               |	ТЧкорректировки.Цена,
	               |	ТЧкорректировки.СтавкаНДС,
				   |	ВЫБОР
				   |		КОГДА &РасчетыВВалюте
				   |			ТОГДА ТЧкорректировки.СуммаНДС
				   |		ИНАЧЕ ТЧкорректировки.СуммаНДСРуб
				   |	КОНЕЦ КАК НДС,
				   |	ВЫБОР
				   |		КОГДА &РасчетыВВалюте
				   |			ТОГДА ВЫБОР
				   |					КОГДА &СуммаВключаетНДС
				   |						ТОГДА ТЧкорректировки.Сумма - ТЧкорректировки.СуммаНДС
				   |					ИНАЧЕ ТЧкорректировки.Сумма
				   |				КОНЕЦ
				   |		ИНАЧЕ ТЧкорректировки.СуммаБезНДСРуб
				   |	КОНЕЦ КАК СуммаБезНДС,
	               |	ТЧкорректировки.СуммаНДС,
	               |	ТЧкорректировки.Сумма,
	               |	ТЧкорректировки.Скважина,
	               |	ТЧкорректировки.Месторождение,
				   //|	ТЧкорректировки.Отчет,  //закомментировала Федотова Л., РГ-Софт, 21.11.12
	               |	ТЧкорректировки.WO,
	               |	ТЧкорректировки.СтранаПроисхожденияКод,
	               |	ТЧкорректировки.ЕдиницаИзмеренияКод,
				   // { RGS LFedotova 29.09.2017 15:12:40 - СФ 981
	               |	ТЧкорректировки.ТоварКодТНВЭД,
				   // } RGS LFedotova 29.09.2017 15:12:46 - СФ 981 
	               |	ТЧкорректировки.СуммаБезНДСРуб,
	               |	ТЧкорректировки.СуммаНДСРуб
	               |ПОМЕСТИТЬ КредитНотаСторно
	               |ИЗ
	               |	&ТЧкорректировки КАК ТЧкорректировки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Реализация.Товар, КредитНотаСторно.Товар) КАК Номенклатура,
	               |	ЕСТЬNULL(Реализация.НаименованиеТовара, КредитНотаСторно.НаименованиеТовара) КАК НаименованиеТовара,
	               |	ЕСТЬNULL(Реализация.ЕдиницаИзмерения, КредитНотаСторно.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения,
	               |	ЕСТЬNULL(Реализация.Количество, 0) КАК КоличествоДоИзменения,
	               |	ЕСТЬNULL(Реализация.Количество, 0) + ЕСТЬNULL(КредитНотаСторно.Количество, 0) КАК КоличествоПослеИзменения,
	               |	ЕСТЬNULL(Реализация.СуммаБезНДС, 0) КАК СтоимостьБезНДСДоИзменения,
	               |	ЕСТЬNULL(Реализация.СуммаБезНДС, 0) + ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) КАК СтоимостьБезНДСПослеИзменения,
	               |	ЕСТЬNULL(Реализация.СтавкаНДС, КредитНотаСторно.СтавкаНДС) КАК СтавкаНДС,
	               |	ЕСТЬNULL(Реализация.НДС, 0) КАК СуммаНДСДоИзменения,
	               |	ЕСТЬNULL(Реализация.НДС, 0) + ЕСТЬNULL(КредитНотаСторно.НДС, 0) КАК СуммаНДСПослеИзменения,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.НДС, 0) > 0
	               |			ТОГДА ЕСТЬNULL(КредитНотаСторно.НДС, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаНДСУвеличение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.НДС, 0) < 0
	               |			ТОГДА -ЕСТЬNULL(КредитНотаСторно.НДС, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаНДСУменьшение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) > 0
	               |			ТОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаБезНДСУвеличение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) < 0
	               |			ТОГДА -ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаБезНДСУменьшение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) + ЕСТЬNULL(КредитНотаСторно.НДС, 0) > 0
	               |			ТОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) + ЕСТЬNULL(КредитНотаСторно.НДС, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаСНДСУвеличение,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) + ЕСТЬNULL(КредитНотаСторно.НДС, 0) < 0
	               |			ТОГДА -(ЕСТЬNULL(КредитНотаСторно.СуммаБезНДС, 0) + ЕСТЬNULL(КредитНотаСторно.НДС, 0))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК РазницаСНДСУменьшение,
	               |	0 КАК ЦенаДоИзменения,
	               |	0 КАК ЦенаПослеИзменения,
	               |	ЕСТЬNULL(Реализация.СтранаПроисхождения, КредитНотаСторно.СтранаПроисхождения) КАК СтранаПроисхождения,
	               |	ЕСТЬNULL(Реализация.ПредставлениеСтраны, КредитНотаСторно.ПредставлениеСтраны) КАК ПредставлениеСтраны,
	               |	ЕСТЬNULL(Реализация.НомерГТД, КредитНотаСторно.НомерГТД) КАК НомерГТД,
	               |	ЕСТЬNULL(Реализация.ПредставлениеГТД, КредитНотаСторно.ПредставлениеГТД) КАК ПредставлениеГТД,
	               |	ЕСТЬNULL(Реализация.Скважина, КредитНотаСторно.Скважина) КАК Скважина,
	               |	ЕСТЬNULL(Реализация.Месторождение, КредитНотаСторно.Месторождение) КАК Месторождение,
				   //|	ЕСТЬNULL(Реализация.Отчет, КредитНотаСторно.Отчет) КАК Отчет,  //закомментировала Федотова Л., РГ-Софт, 21.11.12
	               |	ЕСТЬNULL(Реализация.WO, КредитНотаСторно.WO) КАК WO,
	               |	ЕСТЬNULL(Реализация.СтранаПроисхожденияКод, КредитНотаСторно.СтранаПроисхожденияКод) КАК СтранаПроисхожденияКод,
				   // { RGS LFedotova 29.09.2017 15:13:33 - СФ 981
	               |	ЕСТЬNULL(Реализация.ТоварКодТНВЭД, КредитНотаСторно.ТоварКодТНВЭД) КАК ТоварКодТНВЭД,
				   // } RGS LFedotova 29.09.2017 15:13:41 - СФ 981
	               |	ЕСТЬNULL(Реализация.ЕдиницаИзмеренияКод, КредитНотаСторно.ЕдиницаИзмеренияКод) КАК ЕдиницаИзмеренияКод
	               |ПОМЕСТИТЬ ИтоговаяТаблица
	               |ИЗ
	               |	Реализация КАК Реализация
	               |		ПОЛНОЕ СОЕДИНЕНИЕ КредитНотаСторно КАК КредитНотаСторно
	               |		ПО Реализация.Товар = КредитНотаСторно.Товар
	               |			И Реализация.НаименованиеТовара = КредитНотаСторно.НаименованиеТовара
	               |			И Реализация.СтавкаНДС = КредитНотаСторно.СтавкаНДС
	               |			И Реализация.ЕдиницаИзмерения = КредитНотаСторно.ЕдиницаИзмерения
				   //|			И Реализация.WO = КредитНотаСторно.WO
				   //|			И Реализация.Отчет = КредитНотаСторно.Отчет
				   //|			И Реализация.Месторождение = КредитНотаСторно.Месторождение
				   //|			И Реализация.Скважина = КредитНотаСторно.Скважина
				   //|			И Реализация.ПредставлениеГТД = КредитНотаСторно.ПредставлениеГТД
				   //|			И Реализация.СтранаПроисхождения = КредитНотаСторно.СтранаПроисхождения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИтоговаяТаблица.Номенклатура,
	               |	ИтоговаяТаблица.НаименованиеТовара,
	               |	ИтоговаяТаблица.НаименованиеЕдиницыИзмерения,
	               |	ИтоговаяТаблица.КоличествоДоИзменения,
	               |	ИтоговаяТаблица.КоличествоПослеИзменения,
	               |	ИтоговаяТаблица.СтоимостьБезНДСДоИзменения,
	               |	ИтоговаяТаблица.СтоимостьБезНДСПослеИзменения,
	               |	ИтоговаяТаблица.СтавкаНДС,
	               |	ИтоговаяТаблица.СуммаНДСДоИзменения,
	               |	ИтоговаяТаблица.СуммаНДСПослеИзменения,
	               |	ИтоговаяТаблица.РазницаНДСУвеличение,
	               |	ИтоговаяТаблица.РазницаНДСУменьшение,
	               |	ИтоговаяТаблица.РазницаБезНДСУвеличение,
	               |	ИтоговаяТаблица.РазницаБезНДСУменьшение,
	               |	ИтоговаяТаблица.РазницаСНДСУвеличение,
	               |	ИтоговаяТаблица.РазницаСНДСУменьшение,
	               |	ИтоговаяТаблица.ЦенаДоИзменения,
	               |	ИтоговаяТаблица.ЦенаПослеИзменения,
	               |	ИтоговаяТаблица.СтоимостьБезНДСДоИзменения + ИтоговаяТаблица.СуммаНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	               |	ИтоговаяТаблица.СтоимостьБезНДСПослеИзменения + ИтоговаяТаблица.СуммаНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	               |	ИтоговаяТаблица.СтранаПроисхождения,
	               |	ИтоговаяТаблица.ПредставлениеСтраны,
	               |	ИтоговаяТаблица.НомерГТД,
	               |	ИтоговаяТаблица.ПредставлениеГТД,
	               |	ИтоговаяТаблица.Скважина,
	               |	ИтоговаяТаблица.Месторождение,
				   //|	ИтоговаяТаблица.Отчет,  //закомментировала Федотова Л., РГ-Софт, 21.11.12
	               |	ИтоговаяТаблица.WO,
	               |	ИтоговаяТаблица.СтранаПроисхожденияКод,
				   // { RGS LFedotova 29.09.2017 15:14:59 - СФ 981
	               |	ИтоговаяТаблица.ТоварКодТНВЭД,
				   // } RGS LFedotova 29.09.2017 15:15:06 - СФ 981
	               |	ИтоговаяТаблица.ЕдиницаИзмеренияКод
	               |ИЗ
	               |	ИтоговаяТаблица КАК ИтоговаяТаблица
	               |ГДЕ
	               |	(НЕ(ИтоговаяТаблица.РазницаБезНДСУвеличение = 0
	               |				И ИтоговаяТаблица.РазницаБезНДСУменьшение = 0
	               |				И ИтоговаяТаблица.РазницаНДСУвеличение = 0
	               |				И ИтоговаяТаблица.РазницаНДСУменьшение = 0))";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СвернутьТЧ(ТЧ)
	
	// { RGS LFedotova 09.08.2016 14:43:37 - вопрос SLI-0006686
	//Запишем в каждую строку колонки "Отчет" таблицы ТЧ одинаковое значение, составленное из разных встречающихся значений,
	//перечисленных через запятую, чтобы можно было потом свернуть таблицу ТЧ, не избавляясь от колонки "Отчет", 
	//так как эта колонка может потребоваться для вывода на печать счета-фактуры с параметром "Выводить SIR в с/ф".
	КопияТЧ = ТЧ.Скопировать();
	КопияТЧ.Свернуть("Отчет");
	Отчет = "";
	Для каждого СтрокаТЧ Из КопияТЧ Цикл
		Отчет = ?(Отчет = "",Отчет + СтрокаТЧ.Отчет,Отчет + ", " + СтрокаТЧ.Отчет);	
	КонецЦикла; 
	
	Для каждого СтрокаТЧ Из ТЧ Цикл
		СтрокаТЧ.Отчет = Отчет;
	КонецЦикла;
	// } RGS LFedotova 09.08.2016 14:47:33 - вопрос SLI-0006686
	
	//изменила Федотова Людмила, РГ-Софт, 01.10.12, вопрос №SLI-0002858
	//ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,СтавкаНДС,Скважина,Месторождение,Отчет,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
	//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб,Цена");
	
	// { RGS LFedotova 09.08.2016 15:12:02 - вопрос SLI-0006686
	//ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,СтавкаНДС,Скважина,Месторождение,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
	//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб,Цена");
	
	// { RGS LFedotova 29.09.2017 15:15:55 - СФ 981
	//ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,СтавкаНДС,Скважина,Месторождение,Отчет,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод"
	//, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб,Цена");
	ТЧ.Свернуть("Товар,ТоварНаименование,СтранаПроисхождения,ПредставлениеСтраны,НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,СтавкаНДС,Скважина,Месторождение,Отчет,WO,СтранаПроисхожденияКод,ЕдиницаИзмеренияКод,ТоварКодТНВЭД"
	, "Количество,СуммаНДС,Сумма,СуммаБезНДСРуб,СуммаНДСРуб,Цена");
	// } RGS LFedotova 29.09.2017 15:16:05 - СФ 981 
	
	// } RGS LFedotova 09.08.2016 15:12:10 - вопрос SLI-0006686
	
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		Если ВалютаДокумента = мВалютаРегламентированногоУчета И СтрокаТЧ.Количество <> 0 Тогда
			СтрокаТЧ.Цена = СтрокаТЧ.СуммаБезНДСРуб / СтрокаТЧ.Количество;
		ИначеЕсли СтрокаТЧ.Количество <> 0 Тогда
			СтрокаТЧ.Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
		КонецЕсли;
	КонецЦикла;
	
	//удалим пустые строки
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		Если СтрокаТЧ.СуммаБезНДСРуб = 0 и СтрокаТЧ.СуммаНДСРуб = 0 Тогда
			МассивКУдалению.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из МассивКУдалению Цикл
		ТЧ.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Возврат ТЧ;
	
КонецФункции

// Функция собирает данные по документу основанию ПринятиеКУчетуОС возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоПринятиюКУчетуОС()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Дата 			КАК ДатаНачисления,
	|	Организация 	КАК Поставщик,
	|	Организация  	КАК Покупатель,
	|	СтоимостьБУХоз	КАК Сумма
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияНДСкУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСНачисленный.СтавкаНДС,
	|	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСНачисленный.НДС) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Регистратор = &ДокументОснование
	|	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	|	И НДСНачисленный.ВидНачисления = &ВидНачисленияНДСкУплате
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленный.СтавкаНДС";

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ВыборкаСтрок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтрок.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Строительно-монтажные работы для собственного потребления";
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = "";
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.Сумма               = ВыборкаСтрок.СуммаБезНДС;;
		Строчка.СуммаНДС            = ВыборкаСтрок.НДС;
		Строчка.СтавкаНДС           = ВыборкаСтрок.СтавкаНДС;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию МодернизацияОС возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоМодернизацииОС()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Дата 			КАК ДатаНачисления,
	|	Организация 	КАК Поставщик,
	|	Организация  	КАК Покупатель,
	|	СтоимостьБУХоз	КАК Сумма
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|
	|ГДЕ
	|	МодернизацияОС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ВидЦенностиСМРхозспособом", Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидНачисленияНДСкУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСНачисленный.СтавкаНДС,
	|	СУММА(НДСНачисленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСНачисленный.НДС) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Регистратор = &ДокументОснование
	|	И НДСНачисленный.ВидЦенности = &ВидЦенностиСМРхозспособом
	|	И НДСНачисленный.ВидНачисления = &ВидНачисленияНДСкУплате
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленный.СтавкаНДС";

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ВыборкаСтрок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтрок.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Строительно-монтажные работы для собственного потребления";
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = "";
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.Сумма               = ВыборкаСтрок.СуммаБезНДС;;
		Строчка.СуммаНДС            = ВыборкаСтрок.НДС;
		Строчка.СтавкаНДС           = ВыборкаСтрок.СтавкаНДС;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по документу основанию НачислениеНДСпоСМРхозспособом возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоНачислениеНДСпоСМРхозспособом()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Дата 		КАК ДатаНачисления,
	|	Организация КАК Поставщик,
	|	Организация КАК Покупатель
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(СуммаБезНДС) КАК СуммаБезНДС,
	               |	СтавкаНДС,
	               |	СУММА(НДС) КАК НДС
	               |ИЗ
	               |	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособомСМРхозспособом
	               |ГДЕ
	               |	Ссылка = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтавкаНДС";
				   
	ВыборкаСтрок = Запрос.Выполнить().Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  "");
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрок.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Строительно-монтажные работы для собственного потребления";
		Строчка.ТоварНаименование   = "Строительно-монтажные работы для собственного потребления";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = "";
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.Сумма               = ВыборкаСтрок.СуммаБезНДС;
		Строчка.СуммаНДС            = ВыборкаСтрок.НДС;
		Строчка.СтавкаНДС           = ВыборкаСтрок.СтавкаНДС;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФнаАванс() Экспорт
	
	Если Не (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		или ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) 
		Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = ?(ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, мНадписьПредоплата, "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)");
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	//|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.ВалютаДокумента КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|			СУММА(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|		ИЗ
	|			Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка) КАК ВложенныйЗапрос
	|		ПО СчетФактураВыданный.ДокументОснование = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

				   
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("СуммаВзаиморасчетов",Шапка.СуммаВзаиморасчетов);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	
	Руководитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ДиректорПоУмолчанию");
 	ГлавныйБухгалтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ГлавныйБухгалтерПоУмолчанию");
	ДанныеДляПечати.Вставить("Руководитель", Руководитель);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтер);	
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.СчетНаОплату,
		|	СчетФактураВыданныйАвансы.Сумма КАК Сумма,
		|	СчетФактураВыданныйАвансы.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйАвансы.СтавкаНДС
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка";
		ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
		СоответствиеСтавок = Новый Соответствие();
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
			
			ОтсутствуютДанныеПоСчету = Ложь;
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНаОплату) Тогда
		
				СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
				СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
				СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
				
				Запрос.УстановитьПараметр("СчетНаОплату", СтрокаТаблицы.СчетНаОплату);
				СтавкиНДС = Новый СписокЗначений;
				СтавкиНДС.Добавить(СтрокаТаблицы.СтавкаНДС);
				СтавкиНДС.Добавить(СоответствиеСтавок[СтрокаТаблицы.СтавкаНДС]);
				Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
				
				Запрос.Текст = "ВЫБРАТЬ
				               |	СчетНаОплатуПокупателюТовары.Номенклатура КАК Товар,
				               |	ВЫРАЗИТЬ(СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
				               |	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
				               |	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
				               |	ВЫБОР
				               |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
				               |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
				               |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
				               |	КОНЕЦ КАК Сумма,
				               |	ВЫБОР
				               |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
				               |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
				               |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
				               |	КОНЕЦ КАК СуммаБезНДС,
				               |	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
				               |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
				               |	СчетНаОплатуПокупателюТовары.Ссылка.КурсВзаиморасчетов,
				               |	СчетНаОплатуПокупателюТовары.Ссылка.КратностьВзаиморасчетов,
				               |	1 КАК ID
				               |ИЗ
				               |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				               |ГДЕ
				               |	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
				               |	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	СчетНаОплатуПокупателюУслуги.Номенклатура,
				               |	ВЫРАЗИТЬ(СчетНаОплатуПокупателюУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
				               |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
				               |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
				               |	ВЫБОР
				               |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
				               |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
				               |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
				               |	КОНЕЦ,
				               |	ВЫБОР
				               |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
				               |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
				               |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
				               |	КОНЕЦ,
				               |	СчетНаОплатуПокупателюУслуги.НомерСтроки,
				               |	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
				               |	СчетНаОплатуПокупателюУслуги.Ссылка.КурсВзаиморасчетов,
				               |	СчетНаОплатуПокупателюУслуги.Ссылка.КратностьВзаиморасчетов,
				               |	2
				               |ИЗ
				               |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
				               |ГДЕ
				               |	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
				               |	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	ID,
				               |	НомерСтроки";
							   
				Результат = Запрос.Выполнить().Выгрузить();
				
				Если Результат.Количество() <> 0 Тогда
					
					СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
					СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
					СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
					
					Результат.Колонки.Добавить("СуммаРаспределение");
					Результат.ЗагрузитьКолонку(УправлениеПроизводством.РаспределитьПропорционально(СтрокаТаблицы.Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
					
					МассивРаспределения = Новый Массив;
					Для Каждого СтрокаРезультата Из Результат Цикл
						
						Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
							СтрокаРезультата.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																								СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																								СтрокаРезультата.КурсВзаиморасчетов, 1,
																								СтрокаРезультата.КратностьВзаиморасчетов, 1);
							СтрокаРезультата.СуммаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																								СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																								СтрокаРезультата.КурсВзаиморасчетов, 1,
																								СтрокаРезультата.КратностьВзаиморасчетов, 1);
							СтрокаРезультата.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																								СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																								СтрокаРезультата.КурсВзаиморасчетов, 1,
																								СтрокаРезультата.КратностьВзаиморасчетов, 1);
						КонецЕсли;
						
						МассивРаспределения.Очистить();
						МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
						МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
						
						РезультатРаспределения = УправлениеПроизводством.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
						
						СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
						СтрокаРезультата.СуммаБезНДС = Мин(СтрокаРезультата.СуммаБезНДС, РезультатРаспределения[0]); 
						СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС; 
						
						Строчка = Товары.Добавить();
						Строчка.Товар               = СтрокаРезультата.Товар;
						Строчка.ТоварНаименование   = СокрЛП(СтрокаРезультата.ТоварНаименование);
						Строчка.СтранаПроисхождения = "";
						Строчка.ПредставлениеСтраны = "";
						Строчка.НомерГТД            = "";
						Строчка.ПредставлениеГТД    = "";
						Строчка.Количество          = 0;
						Строчка.ЕдиницаИзмерения    = "";

						Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
						Строчка.СуммаНДС  = СтрокаРезультата.СуммаНДС;
						Строчка.Сумма     = СтрокаРезультата.Сумма;
					КонецЦикла;	
				Иначе
					ОтсутствуютДанныеПоСчету = Истина;
				КонецЕсли;
				
				Если Не ОтсутствуютДанныеПоСчету И СтрокаТаблицы.Сумма > Результат.Итог("Сумма") Тогда
					СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - Результат.Итог("Сумма");
					СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаНДС - Результат.Итог("СуммаНДС");
					
					ОтсутствуютДанныеПоСчету = Истина;
				КонецЕсли;
				
			Иначе
				ОтсутствуютДанныеПоСчету = Истина;
			КонецЕсли;
			
			
			Если ОтсутствуютДанныеПоСчету Тогда
				Строчка = Товары.Добавить();
				Строчка.Товар               = НадписьНаименование;
				Строчка.ТоварНаименование   = НадписьНаименование;
				Строчка.СтранаПроисхождения = "";
				Строчка.ПредставлениеСтраны = "";
				Строчка.НомерГТД            = "";
				Строчка.ПредставлениеГТД    = "";
				Строчка.Количество          = 0;
				Строчка.ЕдиницаИзмерения    = "";

				Строчка.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
				Строчка.СуммаНДС  = СтрокаТаблицы.СуммаНДС;
				Строчка.Сумма     = СтрокаТаблицы.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе

		Строчка = Товары.Добавить();
		Строчка.Товар               = НадписьНаименование;
		Строчка.ТоварНаименование   = НадписьНаименование;
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";

		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		Строчка.СуммаНДС  = Шапка.СуммаНДС;
		Строчка.Сумма     = Шапка.Сумма;

	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;
	
	//Если не НаАванс Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	//
	//мНадписьПредоплата = ?(Дата >= '20060101',"Предварительный платеж","Авансовый платеж");
	//
	//Запрос = Новый Запрос;
	// Запрос.УстановитьПараметр("Ссылка", Ссылка);
	// Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СчетФактураВыданный.Организация,
	//|	СчетФактураВыданный.Номер,
	//|	СчетФактураВыданный.Дата,
	//|	СчетФактураВыданный.Организация КАК Поставщик,
	//|	СчетФактураВыданный.ДоговорКонтрагента.Владелец КАК Покупатель,
	//|	СчетФактураВыданный.ДоговорКонтрагента КАК Договор,
	//|	&ВалютаРегламентированногоУчета КАК Валюта,
	//|	СчетФактураВыданный.Сумма КАК Сумма
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|ГДЕ
	//|	СчетФактураВыданный.Ссылка = &Ссылка";
	//
	//Шапка = Запрос.Выполнить().Выбрать();
	//Шапка.Следующий();

	//ДанныеДляПечати = Новый Структура();
	//ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	//ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	//ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	//ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	//ДанныеДляПечати.Вставить("Грузоотправитель", );
	//ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	//ДанныеДляПечати.Вставить("Договор",        	 Шапка.Договор);
	//ДанныеДляПечати.Вставить("Грузополучатель",  );
	//ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	//ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	//ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	//ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Дата,);
	//ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	//ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	//ДанныеДляПечати.Вставить("Руководитель", Руководители.Руководитель);
	//ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
	//
	//Товары = ИнициализацияТаблицыСтрок();

	//Строчка = Товары.Добавить();
	//Строчка.Товар               = мНадписьПредоплата;
	//Строчка.ТоварНаименование   = мНадписьПредоплата;
	//Строчка.СтранаПроисхождения = "";
	//Строчка.ПредставлениеСтраны = "";
	//Строчка.НомерГТД            = "";
	//Строчка.ПредставлениеГТД    = "";
	//Строчка.Количество          = 0;
	//Строчка.ЕдиницаИзмерения    = "";

	//Строчка.СтавкаНДС = СтавкаНДС;
	//Строчка.СуммаНДС  = СуммаНДС;
	//Строчка.Сумма     = Сумма;

	//ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	//ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	//Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)
          
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьУведомления(ДанныеДляПечати, ПараметрыПечати) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;

	Макет = ПолучитьМакет("УведомлениеОПолучении");

	СведенияОбПокупателе = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОбОрганизации  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, Дата);
	СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Основная");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.НомерСФ = СокрЛП(Номер);
	ОбластьМакета.Параметры.НомерАкта = СокрЛП(ДокументОснование.Номер);
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.Компания  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,") + Символы.ПС +
	"Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,") + Символы.ПС +
	"ИНН: "+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП + Символы.ПС +
	"Грузоотправитель и его адрес: " + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
	ОбластьМакета.Параметры.Контрагент       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,") + Символы.ПС +
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	
	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
	//Rg-Soft Пахоменков А.С. >>
	//ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, СтавкаНДС", "Количество, Сумма, СуммаНДС");

	//Заполнить = Истина;
	//Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
	//	Если Заполнить Тогда
	//		ОбластьМакета.Параметры.Описание = Строчка.ТоварНаименование;
	//		Заполнить = Ложь;
	//	КонецЕсли;;
	//	ИтогоВсего = ИтогоВсего + Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
	//	ИтогоСуммаНДС    = ИтогоСуммаНДС    + Строчка.СуммаНДС;
	//КонецЦикла;
	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		//Изменила Федотова Л., РГ-Софт, 01.04.13, вопрос SLI-0003444
		//ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, СтавкаНДС", "Количество, Сумма, СуммаНДС");
		ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаБезНДСРуб, СуммаНДСРуб");
		
		Заполнить = Истина;
		Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
			Если Заполнить Тогда
				ОбластьМакета.Параметры.Описание = Строчка.ТоварНаименование;
				Заполнить = Ложь;
			КонецЕсли;
			//Добавила Федотова Л., РГ-Софт, 01.04.13, вопрос SLI-0003444
			Если (ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() ИЛИ ПредставлениеВалюты = Константы.ВалютаРегламентированногоУчета.Получить().Наименование) 
				И (НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT) Тогда
				СуммаБезНДС = ?(Строчка.СуммаБезНДСРуб <> 0,Строчка.СуммаБезНДСРуб,Строчка.СуммаБезНДС);
				СуммаНДС = ?(Строчка.СуммаНДСРуб <> 0,Строчка.СуммаНДСРуб,Строчка.СуммаНДС);
				ИтогоВсего = ИтогоВсего + СуммаБезНДС + СуммаНДС;
				ИтогоСуммаНДС    = ИтогоСуммаНДС    + СуммаНДС;
			Иначе
			//конец добавления
				ИтогоВсего = ИтогоВсего + Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
				ИтогоСуммаНДС    = ИтогоСуммаНДС    + Строчка.СуммаНДС;
			КонецЕсли; //Добавила Федотова Л., РГ-Софт, 01.04.13, вопрос SLI-0003444
		КонецЦикла;  
	Иначе   		
		Заполнить = Истина;
		Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
			Если Заполнить Тогда
				ОбластьМакета.Параметры.Описание = Строчка.Номенклатура.НаименованиеПолное;
				Заполнить = Ложь;
			КонецЕсли;;
			//Исправила Федотова Л., РГ-Софт, 01.04.13, вопрос SLI-0003448 
			//ИтогоВсего = ИтогоВсего + Строчка.СтоимостьСНалогомПосле;
			//ИтогоСуммаНДС    = ИтогоСуммаНДС    + Строчка.СуммаНДСПосле;
			ИтогоВсего = ИтогоВсего + Строчка.СтоимостьСНДСПослеИзменения;
			ИтогоСуммаНДС    = ИтогоСуммаНДС    + Строчка.СуммаНДСПослеИзменения;
		КонецЦикла;  	
	КонецЕсли; 
	//<<
	
	ОбластьМакета.Параметры.СуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.Сумма    = ИтогоВСего;
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(ИтогоВСего, ВалютаДокумента);
	
	ТабДокумент.Вывести(ОбластьМакета);
   
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()
        
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура("СчетФактура","Счет-фактура");
	СтруктураПечатныхФорм.Вставить("СчетФактураСНастройкой","Счет-фактура (настройка)");
	СтруктураПечатныхФорм.Вставить("УведомлениеОПолучении","Уведомление о получении");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование, ПодразделениеОрганизации");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
   Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
      // Формирование проводки по начислению НДС с авансов в бюджет
      ДвиженияПоРегиструХозрасчетный(СтруктураШапкиДокумента, Отказ, Заголовок);

      Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
         Возврат;
      КонецЕсли;
      // Отражение начисления НДС с авансов для последующего отражения в книге продаж
      ДвиженияПоРегиструНДСНачисленный(СтруктураШапкиДокумента, Отказ, Заголовок);
      // Отражение НДС с авансов для последующего предъявления НДС к вычету при зачете аванса,
      // отражения вычета в книге покупок
      ДвиженияПоРегиструНДСсАвансов(СтруктураШапкиДокумента, Отказ, Заголовок);
	  
   КонецЕсли;
   
   //-> 20/03/12 RG-Soft VIvanov
   Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент И ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
	   СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета;
	   СуммаДляЖурнала = ДокументОснование.СуммаДокументаСНДСРуб;
	   СуммаНДСДляЖурнала = ДокументОснование.СуммаНДСДокументаРуб;
   Иначе
	   СуммаДляЖурнала = СуммаДокумента;
	   СуммаНДСДляЖурнала = СуммаНДСДокумента;
   КонецЕсли;
   
   УчетНДС.ЗарегистрироватьВЖурналеУчетаСчетовФактур(СтруктураШапкиДокумента, ЭтотОбъект, СуммаДляЖурнала, СуммаНДСДляЖурнала, Отказ, Заголовок);	
   //<- 20/03/12 RG-Soft 
   
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистру НДСНачисленный.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСНачисленный(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = Движения.НДСНачисленный.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	
	СтрокаДвижений.ПодразделениеОрганизации = 	СтруктураШапкиДокумента.ПодразделениеОрганизации;
	Если Под0 Тогда
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
	Иначе
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
	КонецЕсли;
	
	СтрокаДвижений.Покупатель = 	 СтруктураШапкиДокумента.Контрагент;
	
	СтрокаДвижений.СчетФактура =     СтруктураШапкиДокумента.ДокументОснование;
	
	//СтрокаДвижений.Событие = 		 Перечисления.СобытияПоНДСПродажи.ПолученАванс;

	ТаблицаАвансов = Авансы.Выгрузить();
	ТаблицаАвансов.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
	Для каждого Строка Из ТаблицаАвансов Цикл
	
		СтрокаДвижений.СтавкаНДС = 		 Строка.СтавкаНДС;
		Рубли = Константы.ВалютаРегламентированногоУчета.Получить();
		Если НЕ СтруктураШапкиДокумента.ВалютаДокумента = Рубли Тогда
			СтрокаДвижений.СуммаБезНДСВВалюте = 	 ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.Сумма - Строка.СуммаНДС, Рубли, СтруктураШапкиДокумента.ВалютаДокумента, 1, СтруктураШапкиДокумента.КурсДокумента);
			СтрокаДвижений.НДСВВалюте = 	 ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДС, Рубли, СтруктураШапкиДокумента.ВалютаДокумента, 1, СтруктураШапкиДокумента.КурсДокумента);
		Иначе	
			СтрокаДвижений.СуммаБезНДСВВалюте = 	 Строка.Сумма - Строка.СуммаНДС;
			СтрокаДвижений.НДСВВалюте = 			 Строка.СуммаНДС;
		КонецЕсли; 
		
		СтрокаДвижений.СуммаБезНДС = 	 Строка.Сумма - Строка.СуммаНДС;
		СтрокаДвижений.НДС = 			 Строка.СуммаНДС;
		
	КонецЦикла; 
	
	СтрокаДвижений.ВидНачисления   = Перечисления.НДСВидНачисления.НДСсАвансов;
	СтрокаДвижений.Валюта 		   = СтруктураШапкиДокумента.ВалютаДокумента;
	//СтрокаДвижений.НалоговыйПериод = ДокументОснование.НалоговыйПериод;
	СтрокаДвижений.НалоговыйПериод = Дата;
	
	// { РГ-Софт Пахоменков А. 28.11.2014
	СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
	// } РГ-Софт Пахоменков А. 28.11.2014
	
	Движения.НДСНачисленный.мПериод =   СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСНачисленный.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПродажи()

// Формирование движений по регистру НДСсАвансов.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСсАвансов(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = Движения.НДСсАвансов.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	
	СтрокаДвижений.Организация = 	 СтруктураШапкиДокумента.Организация;
	
	СтрокаДвижений.Покупатель = 		 СтруктураШапкиДокумента.Контрагент;
	СтрокаДвижений.ДоговорКонтрагента =  СтруктураШапкиДокумента.ДоговорКонтрагента;
	
	СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.ДокументОснование;
	
	СтрокаДвижений.СтавкаНДС = 		СтруктураШапкиДокумента.СтавкаНДС;
	
	СтрокаДвижений.СуммаБезНДС = 	СтруктураШапкиДокумента.Сумма - СтруктураШапкиДокумента.СуммаНДС;
	СтрокаДвижений.НДС = 			СтруктураШапкиДокумента.СуммаНДС;
	
	СтрокаДвижений.ВалютнаяСуммаСНДС = СтруктураШапкиДокумента.ВалютнаяСумма;
	СтрокаДвижений.ВалютаАванса      = СтруктураШапкиДокумента.ВалютаДокумента;
	
	Движения.НДСсАвансов.мПериод =   СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСсАвансов.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПокупки()

// Формирование движений по регистру Хозрасчетный.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструХозрасчетный(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.СуммаНДС = 0 Тогда
		//Формирование проводки не требуется
		Возврат;
	КонецЕсли; 
	
	ПроводкиБУ 	= Движения.Хозрасчетный;
	
	// Заполним характеристики проводок
	Проводка = ПроводкиБУ.Добавить();
	
	Проводка.Период 	= СтруктураШапкиДокумента.Дата;
	Проводка.Активность = Истина;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	
	Проводка.СчетДт                   = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтруктураШапкиДокумента.ДокументОснование);
	
	Проводка.СчетКт                   = ПланыСчетов.Хозрасчетный.НДС; //68.02
	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	Проводка.Сумма =	СтруктураШапкиДокумента.СуммаНДС;
	
	Проводка.Содержание =		?(Дата >= '20060101000000', "НДС по предоплате", "НДС с аванса");
	Проводка.НомерЖурнала = 	"НДС";
	
КонецПроцедуры // ДвиженияПоРегиструХозрасчетный()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПроверкаПодразделений(табРасшифровкаПлатежа, ПодразделениеОрганизации)
	
	Копия = табРасшифровкаПлатежа.Выгрузить(,"ПодразделениеОрганизации");
	Копия.Свернуть("ПодразделениеОрганизации");
	Если Копия.Количество() > 1 Тогда 
		Сообщить("Счет-фактура может быть введена только на одно Подразделение организации. Некорректное заполнение счета-фактуры.", СтатусСообщения.Важное);
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;
	
	ПодразделениеОрганизации = Копия[0].ПодразделениеОрганизации;
	
	Возврат Ложь;
	
КонецФункции

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") или
		ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг") или
		ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ПередачаОС") или
		ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ОтчетАгентаПоРасходам") или
		ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ОтчетПринципалуОПродажах") или
		//23.05.2013 Пахоменков
		ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ОтчетАгентаПоРасходам") или 
		//<<
		//28.03.2014 Пахоменков
		ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") или
		ТипЗнч(Основание) = Тип("ДокументОбъект.ОтражениеНачисленияНДС")
		//<-

		Тогда  //добавлено для 8.2  РГ-Софт - Петроченко
			
	Дата 				= Основание.Дата;
	Организация 		= Основание.Организация;
	Контрагент  		= Основание.Контрагент;
	ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
	
	мВведенНаОсновании  = Истина;
	
	ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
	
	ДокументОснование = Основание.Ссылка;
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		НаАванс = Истина;
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			НомерПлатежноРасчетногоДокумента = ?(ЗначениеЗаполнено(Основание.НомерВходящегоДокумента), Основание.НомерВходящегоДокумента, Основание.Номер);
			ДатаПлатежноРасчетногоДокумента =  ?(ЗначениеЗаполнено(Основание.ДатаВходящегоДокумента), Основание.ДатаВходящегоДокумента, Основание.Дата);
			

			Если ПроверкаПодразделений(Основание.РасшифровкаПлатежа, ПодразделениеОрганизации) Тогда
				Возврат; 
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		ДокументЗаполнен = Ложь;
		ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
		
		Если не ДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату или на суммовую разницу.");
		КонецЕсли; 
	Иначе
 		ОпределениеПараметровСчетаФактуры(Основание);   
	КонецЕсли;
	
	//ДокументОснование = Основание.Ссылка;
	//Дата = Основание.Дата;
	////Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	////	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	////						  |	ВложенныйЗапрос.Номер КАК Номер
	////						  |ИЗ
	////						  |	(ВЫБРАТЬ
	////						  |		РеализацияТоваровУслугТовары.TicketNumber КАК Номер
	////						  |	ИЗ
	////						  |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	////						  |	ГДЕ
	////						  |		РеализацияТоваровУслугТовары.Ссылка = &Док
	////						  |	
	////						  |	ОБЪЕДИНИТЬ ВСЕ
	////						  |	
	////						  |	ВЫБРАТЬ
	////						  |		РеализацияТоваровУслугУслуги.TicketNumber
	////						  |	ИЗ
	////						  |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	////						  |	ГДЕ
	////						  |		РеализацияТоваровУслугУслуги.Ссылка = &Док) КАК ВложенныйЗапрос
	////						  |
	////						  |УПОРЯДОЧИТЬ ПО
	////						  |	Номер");
	////	Запрос.УстановитьПараметр("Док", ДокументОснование);
	////	мМассивТикетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	////	Если мМассивТикетов.Количество() > 0 Тогда
	////		Номер = мМассивТикетов[0];
	////	КонецЕсли;
	////	
	////Иначе
		Номер = Основание.Номер;
	////КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Попытка
			ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		Исключение
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновноеПодразделениеОрганизации");
		КонецПопытки;
	КонецЕсли;
	//-> Rg-Soft VIvanov 07/08/12
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или
		ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг")) И 
		Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		
		ЗаполнитьРеквизитыКорректировки(Основание);
	КонецЕсли;
	//<-
	
	//-> RG-Soft VIvanov 01/08/12
	//СЧЕТ КНИГИ ПОКУПОК - WHT
	ИначеЕсли (ТипЗнч(Основание) = тип("ДокументОбъект.СчетКнигиПокупок") Или ТипЗнч(Основание) = тип("ДокументСсылка.СчетКнигиПокупок")) И Основание.WHT тогда
		
		Если Не Основание.WHT тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("СФ может быть выписан только на основании уплаты агентского НДС (WHT).");
			Возврат;
		КонецЕсли;
		ЭтотОбъект.ДокументОснование = Основание.Ссылка;
		//Изменила Федотова Л., РГ-Софт, 08.11.12, вопрос №SLI-0002977 ->
		//Дата = Основание.Дата;
		Дата = Основание.ДатаВходящегоДокумента;
		//<-
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
		Организация 		= Основание.Организация;
		Контрагент  		= Основание.Контрагент;
		ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
		
		//ОпределениеПараметровСчетаФактуры(Основание);
		
		//Изменила Федотова Л., РГ-Софт, 08.11.12, вопрос №SLI-0002977 ->
		//Номер = Основание.Номер;
		Номер = Основание.НомерВходящегоДокумента;
		//<-
		
		ДанныеДляПечати    = СобратьДанныеПоСчетуКнигиПокупок();
		AU = ?(ЗначениеЗаполнено(ДанныеДляПечати.AU), ДанныеДляПечати.AU, Основание.ПроводкаDSS.AU); 
		
		//Добавила и закомментировала Федотова Л., РГ-Софт, 12.11.12, вопрос №SLI-0002977 ->
		КПП = Основание.КПП;
		
		//Если AU = Справочники.КостЦентры.НайтиПоКоду("2811420") Тогда
		//	КПП = "301751001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812038") Тогда
		//	КПП = "560351001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811426") Тогда
		//	КПП = "773851001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811414") Тогда
		//	КПП = "890651001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811412") Тогда
		//	КПП = "861951001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811437") Тогда
		//	КПП = "860351001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811415") Тогда
		//	КПП = "890551001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811421") Тогда
		//	КПП = "650151001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812045") Тогда
		//	КПП = "243751002";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811419") Тогда
		//	КПП = "720251001";
		//ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811418") Тогда
		//	КПП = "110651001";
		//ИначеЕсли ЗначениеЗаполнено(AU.TaxRegistration.КПП) Тогда
		//	КПП = AU.TaxRegistration.КПП;
		//Иначе
		//	КПП = AU.TaxRegistration.Родитель.КПП;
		//КонецЕсли;
		//<-
		
		ЗапросПодразделения = Новый Запрос;
		ЗапросПодразделения.Текст = "ВЫБРАТЬ
		                            |	ПодразделенияОрганизаций.Ссылка
		                            |ИЗ
		                            |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                            |ГДЕ
		                            |	ПодразделенияОрганизаций.КПП = &КПП
		                            |	И ПодразделенияОрганизаций.ЭтоГруппа";
		ЗапросПодразделения.УстановитьПараметр("КПП", КПП);
		Выборка = ЗапросПодразделения.Выполнить().Выбрать();
		РодителейМаксимум = 0;
		ПодразделениеВыбора = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Пока Выборка.Следующий() Цикл
			ТекущееКоличество = 0;
			текПодразделение = Выборка.Ссылка;
			Пока ЗначениеЗаполнено(текПодразделение.Родитель) Цикл
				текПодразделение = ТекПодразделение.Родитель;
				ТекущееКоличество = ТекущееКоличество + 1;
			КонецЦикла;
			Если ТекущееКоличество > РодителейМаксимум Тогда
				ПодразделениеВыбора = Выборка.Ссылка;
				РодителейМаксимум = ТекущееКоличество;
			ИначеЕсли ТекущееКоличество = РодителейМаксимум Тогда
				Если КПП = "773851001" Или КПП = "861951001" Тогда
					Если Найти(Выборка.Ссылка.Код, "WG") = 0 Тогда
						ПодразделениеВыбора = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПодразделениеОрганизации = ПодразделениеВыбора;
		
		КодВидаОперации = "06";
		КодСпособаВыставления = 1;
		СчетФактураНеВыставляется = Истина;
		
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		СуммаДокумента    = Основание.СуммаДокументаСНДСРуб;
		СуммаНДСДокумента = Основание.СуммаНДСДокументаРуб;
		
		Для Каждого СтрокаТЧ Из Основание.Суммы Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			СтрокаАвансы.Сумма = СтрокаТЧ.СуммаСНДСРуб;
			СтрокаАвансы.СуммаНДС    = СтрокаТЧ.СуммаНДСРуб;
		КонецЦикла;
		
	КонецЕсли;
    //<-
	
	// -> Пахоменков 05.06.2013
	Если (ТипЗнч(Основание) = тип("ДокументСсылка.ОтчетАгентаПоРасходам")) Тогда
		Выставлен = Истина;
		ДатаВыставления = ТекущаяДата();
	КонецЕсли;
	//<-
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	//ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование", 	"Контрагент",      		   "Контрагент");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",       "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора",   "ВидАгентскогоДоговора");
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Владелец",   			"КонтрагентДоговора");
	КонецЕсли;
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		 СтруктураШапкиДокумента.Вставить("Контрагент",СтруктураШапкиДокумента.КонтрагентДоговора);
	КонецЕсли;	

	////добавила Федотова Л., РГ-Софт, 10.11.09
	//Если НаАванс Тогда
	//	 СтруктураШапкиДокумента.Вставить("Контрагент",СтруктураШапкиДокумента.КонтрагентДоговора);
	//КонецЕсли;	

	// Движения по документу
	Если (Не Отказ)
	   и (ДокументОснование <> Неопределено)	  
	   и не СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// { РГ-Софт Пахоменков А. 09.12.2014
	//Если НЕ СформированПриВводеНачальныхОстатковНДС
	//	И (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
	//	ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный) Тогда
	//	ОпределениеПараметровСчетаФактуры(Ссылка);
	//КонецЕсли;
	РассчитатьСуммуДокумента();
	// } РГ-Софт Пахоменков А. 09.12.2014	
	
	Если НЕ ДокументОснование = Неопределено Тогда
		//-> RG-Soft VIvanov 01/08/12
		Если ТипЗнч(ДокументОснование) = тип("ДокументСсылка.СчетКнигиПокупок") Тогда
			
			Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление Тогда
				
				Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда  //условие 03.04.2015 пахоменков
					СуммаДокумента    = ДокументОснование.СуммаДокументаСНДСРуб;
				Иначе
					СуммаДокумента =  ДокументОснование.СуммаДокументаСНДС;
				КонецЕсли;
				
			КонецЕсли;
		//<-	
		Иначе
			//Внесла изменения Федотова Л., РГ-Софт, 26.09.13, вопрос SLI-0003876
			Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить()
				И НЕ(ДокументОснование.ВалютаДокумента = ВалютаДокумента)
				И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				СуммаДокументаТребуемая = ДокументОснование.Товары.Итог("СуммаБезНДСРуб") + ДокументОснование.Товары.Итог("СуммаНДСРуб")
				+ ДокументОснование.Услуги.Итог("СуммаБезНДСРуб") + ДокументОснование.Услуги.Итог("СуммаНДСРуб");
				//Добавила Федотова Л., РГ-Софт, 26.09.13, вопрос SLI-0003887 ->
				СуммаНДСТребуемая = ДокументОснование.Товары.Итог("СуммаНДСРуб") + ДокументОснование.Услуги.Итог("СуммаНДСРуб");
				//<-
			// { РГ-Софт Пахоменков А. 09.12.2014
			ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
				СуммаДокументаТребуемая = ДокументОснование.АгентскаяСумма;
				СуммаНДСТребуемая 		= ДокументОснование.АгентскийНДС;
			// } РГ-Софт Пахоменков А. 09.12.2014
			Иначе	
				// { RGS LFedotova 27.07.2017 10:39:39 - вопрос SLI-0007316
				//СуммаДокументаТребуемая = ДокументОснование.СуммаДокумента;     
				// } RGS LFedotova 27.07.2017 10:41:01 - вопрос SLI-0007316
				//Добавила Федотова Л., РГ-Софт, 26.09.13, вопрос SLI-0003887 ->
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
					// { RGS LFedotova 27.07.2017 10:39:39 - вопрос SLI-0007316
					//СуммаНДСТребуемая = ДокументОснование.Товары.Итог("СуммаНДС") + ДокументОснование.Услуги.Итог("СуммаНДС");
					СуммаНДСТребуемая = ?(ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(), ДокументОснование.Товары.Итог("СуммаНДСРуб") + ДокументОснование.Услуги.Итог("СуммаНДСРуб"),ДокументОснование.Товары.Итог("СуммаНДС") + ДокументОснование.Услуги.Итог("СуммаНДС"));
					СуммаДокументаТребуемая = ?(ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),СуммаНДСТребуемая + ДокументОснование.Товары.Итог("СуммаБезНДСРуб") + ДокументОснование.Услуги.Итог("СуммаБезНДСРуб"),ДокументОснование.СуммаДокумента);     
					// } RGS LFedotova 27.07.2017 10:41:01 - вопрос SLI-0007316
				ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаОС")  Тогда
					// { RGS LFedotova 27.07.2017 10:39:39 - вопрос SLI-0007316
					//СуммаНДСТребуемая = ДокументОснование.ОС.Итог("СуммаНДС");
					СуммаНДСТребуемая = ?(ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(), ДокументОснование.ОС.Итог("СуммаНДСРуб"),ДокументОснование.ОС.Итог("СуммаНДС"));
					СуммаДокументаТребуемая = ?(ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),СуммаНДСТребуемая + ДокументОснование.ОС.Итог("СуммаБезНДСРуб"),ДокументОснование.СуммаДокумента);     
					// } RGS LFedotova 27.07.2017 10:41:01 - вопрос SLI-0007316
				КонецЕсли; 
				//<-
			КонецЕсли;
			Если НЕ СуммаДокумента = СуммаДокументаТребуемая И СуммаДокументаТребуемая <> Неопределено Тогда // 09.12.2014 Пахоменков Неопределенно
				СуммаДокумента = СуммаДокументаТребуемая;     
			КонецЕсли; 
			//Добавила Федотова Л., РГ-Софт, 26.09.13, вопрос SLI-0003887 ->
			Если НЕ СуммаНДСДокумента = СуммаНДСТребуемая И СуммаНДСТребуемая <> Неопределено Тогда			// 09.12.2014 Пахоменков Неопределенно
				СуммаНДСДокумента = СуммаНДСТребуемая;     
			КонецЕсли; 
			//<-
			
		КонецЕсли;
		
		//заполним табличную часть ДокументыОснования
		Если ДокументыОснования.Количество() = 0 Тогда
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснование;
		Иначе
			Если НЕ ДокументОснование = ДокументыОснования[0].ДокументОснование  Тогда
			     ДокументыОснования[0].ДокументОснование = ДокументОснование;
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьСписокНаименованийСФ() Экспорт
	Если НЕ Список = Неопределено Тогда
		Возврат Список;
	КонецЕсли;
	Список = Новый СписокЗначений;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	ВложенныйЗапрос.Ticket КАК Ticket
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		РеализацияТоваровУслугТовары.Ticket КАК Ticket
		                      |	ИЗ
		                      |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                      |	ГДЕ
		                      |		РеализацияТоваровУслугТовары.Ссылка = &Док
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		РеализацияТоваровУслугУслуги.Ticket
		                      |	ИЗ
		                      |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		                      |	ГДЕ
		                      |		РеализацияТоваровУслугУслуги.Ссылка = &Док) КАК ВложенныйЗапрос
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Ticket.SiebelOrder.LawsonInvoice ВОЗР");
		Запрос.УстановитьПараметр("Док", ДокументОснование);
		МассивТикетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ticket");
		
		Для Каждого Тикет Из МассивТикетов Цикл
			
			Список.Добавить(Тикет.SiebelOrder.Name);
			Список.Добавить(SalesBook.ПарсингНомераИнвойсаLawson(Тикет.SiebelOrder.LawsonInvoice, "Ноябрьск"));
			Список.Добавить(SalesBook.ПарсингНомераИнвойсаLawson(Тикет.SiebelOrder.LawsonInvoice, "Москва"));
			
		КонецЦикла;
		
		Если МассивТикетов.Количество() = 2 Тогда
			Тикет = МассивТикетов[0];
			Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
			НомерИнвойса1 = СтрЗаменить(Формат(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),"ЧЦ=4"),Символы.НПП,"");
			Тикет = МассивТикетов[1];
			НомерИнвойса2 = СтрЗаменить(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),Символы.НПП,"");
			Имя = Префикс + "-" + НомерИнвойса1 + "/" + НомерИнвойса2;
			Список.Добавить(Имя);
		ИначеЕсли МассивТикетов.Количество() > 2 Тогда
			Тикет = МассивТикетов[0];
			Префикс = Лев(Тикет.SiebelOrder.LawsonInvoice,2);
			НомерИнвойса1 = СтрЗаменить(Формат(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),"ЧЦ=4"),Символы.НПП,"");
			Тикет = МассивТикетов[МассивТикетов.Количество()-1];
			НомерИнвойса2 = СтрЗаменить(Число("0"+Сред(Тикет.SiebelOrder.LawsonInvoice,3)),Символы.НПП,"");
			Имя = Префикс + "-" + НомерИнвойса1 + "-" + НомерИнвойса2;
			Список.Добавить(Имя);
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	ВложенныйЗапрос.КостЦентр КАК AU
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		РеализацияТоваровУслугТовары.КостЦентр КАК КостЦентр
		                      |	ИЗ
		                      |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                      |	ГДЕ
		                      |		РеализацияТоваровУслугТовары.Ссылка = &Док
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		РеализацияТоваровУслугУслуги.КостЦентр
		                      |	ИЗ
		                      |		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		                      |	ГДЕ
		                      |		РеализацияТоваровУслугУслуги.Ссылка = &Док) КАК ВложенныйЗапрос");
		Запрос.УстановитьПараметр("Док", ДокументОснование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда                                      
			Док = Документы.СчетФактураВыданный.СоздатьДокумент();
			Док.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
			Док.Дата = Дата;
			Префикс = "SLI-" + Выборка.AU + "-"+Прав(Год(Дата),1)+"I-";
			Док.УстановитьНовыйНомер(Префикс);
			//->
			ЛевЧастьНомераПослеПрефикса = ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(Док.Номер,Префикс);
			//Список.Добавить(Префикс+Формат(Число("0"+Сред(Док.Номер,СтрДлина(Префикс)+1)),"ЧЦ=3; ЧВН=; ЧГ="));
			Список.Добавить(Префикс+Формат(Число("0"+ЛевЧастьНомераПослеПрефикса),"ЧЦ=3; ЧВН=; ЧГ="));
			Префикс = "SLI-YAL-"+Прав(Год(Дата),1)+"I-";
			Док.УстановитьНовыйНомер(Префикс);
			ЛевЧастьНомераПослеПрефикса = ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(Док.Номер,Префикс);
			Список.Добавить(Префикс+Формат(Число("0"+ЛевЧастьНомераПослеПрефикса),"ЧЦ=4; ЧВН=; ЧГ="));
			Префикс = "SLI-RP1-"+Прав(Год(Дата),1)+"I-";
			Док.УстановитьНовыйНомер(Префикс);
			ЛевЧастьНомераПослеПрефикса = ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(Док.Номер,Префикс);
			Список.Добавить(Префикс+Формат(Число("0"+ЛевЧастьНомераПослеПрефикса),"ЧЦ=3; ЧВН=; ЧГ="));
			Док = Неопределено;
		КонецЕсли;
		
		Список.Добавить(ДокументОснование.НомерСчетаНаОплату);
		Список.Добавить(ДокументОснование.Номер);  //добавила Федотова Л, РГ-Софт, 16.10.09 по просьбе О. Тивиковой и Т. Денисовой
		
	КонецЕсли;
	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.Значение = "" Тогда
			Список.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьНужнуюЛевуюЧастьНомераПослеПрефикса(ДокНомер,Префикс)
	НомерПослеПрефикса = Сред(ДокНомер,СтрДлина(Префикс)+1);
	Сч = 0;
	ДлинаНомераПослеПрефикса = СтрДлина(НомерПослеПрефикса);
	ЛевЧастьНомераПослеПрефикса = НомерПослеПрефикса;
	ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей = ЛевЧастьНомераПослеПрефикса;
	ЧислоНулей = 0;
	Пока Сч < ДлинаНомераПослеПрефикса Цикл
		Сч = Сч + 1;                                                           
		ТекСимвол = Сред(НомерПослеПрефикса,Сч,1);
		Попытка
			Ч = Число(ТекСимвол);
			Если Ч = 0 Тогда
				ЧислоНулей = ЧислоНулей + 1;
			КонецЕсли;
		Исключение
			ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей = Число(Лев(НомерПослеПрефикса,Сч-1))+1;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	ЛевЧастьНомераПослеПрефикса = ЛевЧастьНомераПослеПрефиксаБезЛевыхНулей;
	Для К = 1 По ЧислоНулей Цикл
		ЛевЧастьНомераПослеПрефикса = "0" + ЛевЧастьНомераПослеПрефикса;
	КонецЦикла;
	Возврат ЛевЧастьНомераПослеПрефикса; 
КонецФункции

Функция ПечатьСчетаФактуры2012(ДанныеДляПечати, ПараметрыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура2012";
	
	// { RGS LFedotova 29.09.2017 20:36:23 - СФ 981
	//Макет = ПолучитьОбщийМакет("СчетФактура2012");
	Если Дата >= '20171001' Тогда
		Макет = ПолучитьОбщийМакет("СчетФактура981");
	Иначе
		Макет = ПолучитьОбщийМакет("СчетФактура2012");
	КонецЕсли; 
	// } RGS LFedotova 29.09.2017 20:36:33 - СФ 981 
	
	СведенияОбПокупателе = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	
	//Изменила Федотова Л., РГ-Софт, 06.07.2010, вопрос №SLI001458
	Если ПечатьСведенийОПодразделении Тогда
		СведенияОбОрганизации  = КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата);         
	Иначе	                                                 
		СведенияОбОрганизации  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, Дата);
	КонецЕсли;
	//
	Попытка
		СведенияОГрузополучателеДляКПП = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.ГрузополучательДляКПП, Дата);
	Исключение
	    СведенияОГрузополучателеДляКПП = СведенияОГрузополучателе;
	КонецПопытки;
	
	//выводим лого
	Если ПараметрыПечати.ВыводитьЗаголовокСФ И НЕ НаАванс Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Лого");
		ОбластьМакета.Параметры.Адрес = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		Если ПараметрыПечати.ВыводитьРасчетныйСчетВСФ Тогда
			Попытка
 				ОбластьМакета.Параметры.РасчетныйСчет = "Расчетный счет: " + ДанныеДляПечати.Счет.РеквизитыПлатежа + Символы.ПС + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,КПП,")
			Исключение
				Сообщить("Произошла ошибка: в документе нет счета!");
			КонецПопытки;
 		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
    КонецЕсли;
	
	// Выводим шапку
	// { RGS LFedotova 30.06.2017 18:37:18 - вопрос SLI-0007289
	//ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(Дата);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда
		Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("Шапка625")) Тогда 
			ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
			|новой формы необходимо обновить отредактированный ранее макет. 
			|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	// } RGS LFedotova 30.06.2017 18:37:52 - вопрос SLI-0007289
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление №" + Строка(НомерИсправления) + " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		ДанныеДляПечати.Номер = ?(СокрЛП(НомерИсходногоДокумента) = "", НомерИсправляемогоКорректировочногоДокумента,
									НомерИсходногоДокумента);
		ДанныеДляПечати.Дата = ?(ДатаИсходногоДокумента = Дата(1,1,1), ДатаИсправляемогоКорректировочногоДокумента,
									ДатаИсходногоДокумента);
 	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	Если ДанныеДляПечати.Свойство("АдресДоставки") 
		И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
		ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			ДанныеДляПечати.АдресДоставки,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм") + ", " + ДанныеДляПечати.АдресДоставки);
	Иначе
		ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
			"показатель отсутствует",
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм, ФактическийАдрес,"));
	КонецЕсли;

	//-> Rg-Soft VIvanov 01/08/12
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT 
		// -> РГ-Софт Пахоменков 05.06.2013
        ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ЗначениеЗаполнено(ОтчетАгентаПоРасходам) И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление
		// <-
		Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
	
		//ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "АнглийскийАдрес,");
		АдресПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "АнглийскийАдрес,");
		Если Не ЗначениеЗаполнено(АдресПоставщика) Тогда
			АдресПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(АдресПоставщика) Тогда
			АдресПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		КонецЕсли;
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + АдресПоставщика;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,  "ПолноеНаименование,");
	
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,  "ЮридическийАдрес,");
	КонецЕсли;
	//<-                                
	                                                      
	Если НЕ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		И ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		
		//21.07.2013 РГ-СОФТ Пахоменков для этой СФ нужен КПП подразделения, а не продавца
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
			КПП = ДанныеДляПечати.ПодразделениеОрганизации.КПП;
		КонецЕсли;
		//<--
		
		//Добавила Федотова Л., РГ-Софт, 08.05.15, вопрос SLI-0005405
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			КПП = Ссылка.ПодразделениеОрганизации.КПП;
		КонецЕсли;
		//<--
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
			
	Иначе
		ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: --"
	КонецЕсли;
	
	ЗаголовокДляПечати = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		
	Иначе
		
		СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(
			?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
		СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(
			ДанныеДляПечати.Грузополучатель, Дата);
		
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
			"--", 
			?(ДанныеДляПечати.Грузоотправитель = "он же", 
				ДанныеДляПечати.Грузоотправитель, 
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		
		Если ДанныеДляПечати.Свойство("АдресДоставки") 
			И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
			ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
				ДанныеДляПечати.АдресДоставки,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм") + ", " + ДанныеДляПечати.АдресДоставки);
		Иначе
			ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
				"--",
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		КонецЕсли;
			
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
		
	КонецЕсли;

	СтрокаПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
			И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
		    Продолжить;
		КонецЕсли;
		СтрокаПоДокументу = СтрокаПоДокументу
			+ ?(ПустаяСтрока(СтрокаПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
		
	КонецЦикла; 
	//-> RG-Soft VIvanov 30.08.12
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если (ЗначениеЗаполнено(НомерПлатежноРасчетногоДокумента) Или ЗначениеЗаполнено(ДатаПлатежноРасчетногоДокумента)) Тогда
			СтрокаПоДокументу = "К платежно-расчетному документу № " + НомерПлатежноРасчетногоДокумента + " от: " + Формат(ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
		Иначе
	//<-
			Если ВидСчетаФактуры = Перечисления.НДСВидНачисления.НДСсАвансов Тогда
				СтрокаПоДокументу = "К платежно-расчетному документу № -- от --";
			Иначе
				СтрокаПоДокументу = "К платежно-расчетному документу №    от";
			КонецЕсли;
		КонецЕсли;                                                           
	КонецЕсли;
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	//Изменила Федотова Л., РГ-Софт, 09.02.16, вопрос SLI-0006176 
	//КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если ПустаяСтрока(КППКонтрагента) Тогда
		КПП =  ОбщегоНазначения.ПолучитьКППНаДату(Контрагент,Дата);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
		
	Попытка 
		Если ДанныеДляПечати.ВыводитьИННКППГрузополучателя или ДокументОснование.ВыводитьИННКППГрузополучателя Тогда
			//Изменила Федотова Л., РГ-Софт, 09.02.16, вопрос SLI-0006176 
			//ОбластьМакета.Параметры.ИННПокупателя         = "ИНН/КПП покупателя: " + СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателеДляКПП, "ИНН,КПП,", Ложь),",","/");
			ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателеДляКПП, "ИНН", Ложь);
			
			//Изменила Федотова Л., РГ-Софт, 26.02.16, вопрос SLI-0006236
			//КППГрузополучателя =  ОбщегоНазначения.ПолучитьКППНаДату(Контрагент,Дата);
			КППГрузополучателя =  ОбщегоНазначения.ПолучитьКППНаДату(ДанныеДляПечати.ГрузополучательДляКПП,Дата);
			
			Если ЗначениеЗаполнено(КППГрузополучателя) Тогда
				ОбластьМакета.Параметры.ИННПокупателя = ОбластьМакета.Параметры.ИННПокупателя + "/" + КППГрузополучателя;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	//Отменила доработку Логинова О., РГ-Софт, 16.06.2016г., вопрос SLI-0006544 ->
	//Добавила Федотова Л., РГ-Софт, 25.10.12, вопрос №SLI-0002941 ->
	//Рубли = Константы.ВалютаРегламентированногоУчета.Получить();
	//Если ВалютаДокумента <> Рубли
	//	И ПредставлениеВалюты = Рубли.Наименование Тогда
	//	ДанныеДляПечати.Валюта = Рубли;
	//КонецЕсли; 
	//<-
	//<- SLI-0006544
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код "
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"");
		
	//-> RG-Soft VIvanov 01/08/12
	// Добавил Булавский РГ-Софт 21_05_2012
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT Тогда
		ОбластьМакета.Параметры.Номер 							= "СЧЕТ-ФАКТУРА №" + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		ОбластьМакета.Параметры.НомерИсправления 				= "ИСПРАВЛЕНИЕ № - от "" - "" - ";
		//ОбластьМакета.Параметры.АдресПоставщика 				= "Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "АнглийскийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика       			= "ИНН/КПП продавца: -";
		//ОбластьМакета.Параметры.ПоДокументу                   	= "К платежно-расчетному документу № от: " + Формат(Дата, "ДФ=dd.MM.yyyy") + " г.";
		КПП = "";
		AU = ?(ЗначениеЗаполнено(ДанныеДляПечати.AU), ДанныеДляПечати.AU, ДокументОснование.ПроводкаDSS.AU); 
		Если AU = Справочники.КостЦентры.НайтиПоКоду("2811420") Тогда
			КПП = "301751001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812038") Тогда
			КПП = "560351001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811426") Тогда
			КПП = "773851001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811414") Тогда
			КПП = "890651001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811412") Тогда
			КПП = "861951001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811437") Тогда
			КПП = "860351001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811415") Тогда
			КПП = "890551001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811421") Тогда
			КПП = "650151001";
		//Добавила Федотова Л., РГ-Софт, 08.07.2013, вопрос SLI-0003700	->
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811460") Тогда
			КПП = "773851001";
		//<-
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2812045") Тогда
			КПП = "243751002";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811419") Тогда
			КПП = "720251001";
		ИначеЕсли AU = Справочники.КостЦентры.НайтиПоКоду("2811418") Тогда
			КПП = "110651001";
		ИначеЕсли ЗначениеЗаполнено(AU.TaxRegistration.КПП) Тогда
			КПП = AU.TaxRegistration.КПП;
		Иначе
			КПП = AU.TaxRegistration.Родитель.КПП;
		КонецЕсли; 
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя   = "ИНН/КПП покупателя: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
		//ОбластьМакета.Параметры.Валюта 			= "Валюта: " + ДокументОснование.ВалютаДокумента.НаименованиеПолное + ", " + ДокументОснование.ВалютаДокумента.Код;
	КонецЕсли; 
	// конец добавления
	//<-
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
    	//Добавила Федотова Л., РГ-Софт, 19.09.13
		ПараметрыПечати.ДоговорВШапке = Истина;
		//Конец добавления      
	КонецЕсли;
	//[<-РКХ]
	
	Если ПараметрыПечати.ДоговорВШапке И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Договор");
		ОбластьМакета.Параметры.Договор = ДанныеДляПечати.Договор;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// { RGS LFedotova 30.06.2017 21:15:28 - вопрос SLI-0007289
	//Выводим иднтификатор госконтракта
	// { RGS LFedotova 29.09.2017 18:44:15 - СФ 981
	//Если ВедетсяУчетНДСПоФЗ56 Тогда
	Если Дата >= '20170701' Тогда
	// } RGS LFedotova 29.09.2017 18:44:26 - СФ 981
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		// { RGS LFedotova 29.09.2017 18:46:51 - СФ 981
		//ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
		ШаблонЗаголовкаГосконтракт = ?(Дата >= '20171001', НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'"),
														   НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'"));
		
		// } RGS LFedotova 29.09.2017 18:46:57 - СФ 981 
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//ШаблонЗаголовкаГосконтракт, ДанныеШапки.ИдентификаторГосКонтракта);
		ШаблонЗаголовкаГосконтракт, "");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	// } RGS LFedotova 30.06.2017 21:15:36 - вопрос SLI-0007289
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	СтруктураОплаты = SalesBook.ПолучитьСрокОплатыИПроцент(ДокументОснование);
	Если НЕ НеВыводитьУсловияОплаты Тогда
		Если СтруктураОплаты.СрокОплаты <> 0 И Не ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ОбластьМакетаЗаголовокТаблицы.Параметры.УсловияОплаты = "Срок оплаты - "+СтруктураОплаты.СрокОплаты+" дней"; 
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента.Условия) Тогда
			ОбластьМакетаЗаголовокТаблицы.Параметры.УсловияОплаты = ?(ОбластьМакетаЗаголовокТаблицы.Параметры.УсловияОплаты <> Неопределено, ОбластьМакетаЗаголовокТаблицы.Параметры.УсловияОплаты + ", ","") + ДоговорКонтрагента.Условия;	
		КонецЕсли;
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		
		//Добавила Федотова Л., РГ-Софт, 19.09.13
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугДополнительныеРеквизиты.Значение
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ДополнительныеРеквизиты КАК РеализацияТоваровУслугДополнительныеРеквизиты
		|ГДЕ
		|	РеализацияТоваровУслугДополнительныеРеквизиты.Свойство.Заголовок = ""Наименование для с/ф""
		|	И РеализацияТоваровУслугДополнительныеРеквизиты.Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВыборкаСтрокТоварыПерваяСтрока = ВыборкаСтрокТовары.Скопировать()[0];
			ВыборкаСтрокТоварыПерваяСтрока.ЕдиницаИзмерения = "--";
			ВыборкаСтрокТоварыПерваяСтрока.Количество = "--";
			ВыборкаСтрокТоварыПерваяСтрока.Цена= "--";
			ВыборкаСтрокТоварыПерваяСтрока.СуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
			ВыборкаСтрокТоварыПерваяСтрока.Сумма = ВыборкаСтрокТовары.Итог("Сумма");
			ВыборкаСтрокТоварыПерваяСтрока.СуммаБезНДСРуб = ВыборкаСтрокТовары.Итог("СуммаБезНДСРуб");
			ВыборкаСтрокТоварыПерваяСтрока.СуммаНДСРуб = ВыборкаСтрокТовары.Итог("СуммаНДСРуб");
			ВыборкаСтрокТовары.Очистить();
			НоваяСтрока = ВыборкаСтрокТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрокТоварыПерваяСтрока);
			
			НоваяСтрока.ТоварНаименование = ВыборкаДетальныеЗаписи.Значение;
		КонецЕсли;
		//Конец добавления
		
	КонецЕсли;
	//[<-РКХ]        	
	
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		//Изменила условие Федотова Л., РГ-Софт, 25.10.12, вопрос №SLI-0002941
		//Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() И (НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT) Тогда
		Если (ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() ИЛИ ПредставлениеВалюты = Константы.ВалютаРегламентированногоУчета.Получить().Наименование) 
			И (НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT) Тогда
			Строчка.СуммаБезНДС = ?(Строчка.СуммаБезНДСРуб <> 0,Строчка.СуммаБезНДСРуб,Строчка.СуммаБезНДС);
			Строчка.СуммаНДС = ?(Строчка.СуммаНДСРуб <> 0,Строчка.СуммаНДСРуб,Строчка.СуммаНДС);
			Строчка.СуммаСНДС = ?(Строчка.СуммаБезНДСРуб + Строчка.СуммаНДСРуб <> 0,Строчка.СуммаБезНДСРуб + Строчка.СуммаНДСРуб,Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС));
			Строчка.Цена = ?(Строчка.Количество = 0, Строчка.СуммаБезНДС, ?(Строчка.СуммаБезНДС = Неопределено, 0,Строчка.СуммаБезНДС)/ Строчка.Количество);
		//Добавила "ИначеЕсли" Федотова Л., РГ-Софт, 10.09.15, вопрос SLI-0005761	
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс И НЕ(ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить()) И ПредставлениеВалюты = Константы.ВалютаРегламентированногоУчета.Получить().Наименование Тогда
			КурсВзаиморасчетов = ДокументОснование.РасшифровкаПлатежа[0].КурсВзаиморасчетов;
			КратностьВзаиморасчетов = ДокументОснование.РасшифровкаПлатежа[0].КратностьВзаиморасчетов;
			Строчка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строчка.Сумма, 
																		ВалютаДокумента, мВалютаРегламентированногоУчета,
																		КурсВзаиморасчетов, 1,
																		КратностьВзаиморасчетов, 1);
			Строчка.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строчка.СуммаНДС, 
																		ВалютаДокумента, мВалютаРегламентированногоУчета,
																		КурсВзаиморасчетов, 1,
																		КратностьВзаиморасчетов, 1);
			Строчка.СуммаСНДС = Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Иначе
			//Добавила Федотова Л., РГ-Софт, 14.03.16, вопрос SLI-0006286 
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") Тогда
				ДанныеДляПечати.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			//
			Строчка.СуммаСНДС = Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		КонецЕсли; 

		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
			И ((Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 	ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 	ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ ДанныеДляПечати.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если ДанныеДляПечати.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НеСворачиватьСтроки Тогда
		// { RGS LFedotova 29.09.2017 15:17:17 - СФ 981
		//ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
		ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС, ТоварКодТНВЭД", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
		// } RGS LFedotova 29.09.2017 15:17:23 - СФ 981
	КонецЕсли;

	Если ПараметрыПечати.ВыводитьСкидку Тогда
		ПроцентСкидки = ПараметрыПечати.ПроцентСкидки;
		ВыборкаСтрокТоварыБезСкидки = ВыборкаСтрокТовары.Скопировать();
		Для Каждого Строка Из ВыборкаСтрокТовары Цикл
			Строка.Сумма = Строка.Сумма * 1/(1 - ПроцентСкидки/100);	
			Строка.СуммаНДС = Строка.СуммаНДС * 1/(1 - ПроцентСкидки/100);	
		КонецЦикла;
		НоваяСтрока = ВыборкаСтрокТовары.Добавить();
		НоваяСтрока.ТоварНаименование = "Скидка";
		НоваяСтрока.Сумма = ВыборкаСтрокТоварыБезСкидки.Итог("Сумма") - ВыборкаСтрокТовары.Итог("Сумма");
		НоваяСтрока.СуммаНДС = ВыборкаСтрокТоварыБезСкидки.Итог("СуммаНДС") - ВыборкаСтрокТовары.Итог("СуммаНДС");
	КонецЕсли;
	
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	ИтогоСтоимость = 0;
	ИтогоСуммаНДС  = 0;
	ИтогоВсего     = 0;
	
	ПечСчетФактураБезНДС = Истина;
    	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		//Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда   //временно
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		//Иначе
		//	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		//		ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
		//	Иначе
		//		ОбластьМакета.Параметры.Стоимость = 0;
		//	КонецЕсли;
		//	ОбластьМакета.Параметры.Количество = 0;
		//	ОбластьМакета.Параметры.Цена       = 0;
		//КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		Иначе
			ПечСчетФактураБезНДС = Ложь;
		КонецЕсли;
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
        				
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда	
			//Изменила Федотова Л., РГ-Софт, 26.06.13, вопрос SLI-0003666
			//ОбластьМакета.Параметры.ПредставлениеСтраны    = "";
			//ОбластьМакета.Параметры.СтранаПроисхожденияКод = "";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				Если ТипЗнч(Строчка.СтранаПроисхождения) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
					ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
				Иначе
					ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения);
				КонецЕсли;
			//Добавила "Иначе" Федотова Л., РГ-Софт, 26.06.13, вопрос SLI-0003666	
			Иначе
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
		КонецЕсли; 
		
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			// { RGS LFedotova 29.09.2017 15:18:55 - СФ 981
			Если Дата >= '20171001' Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
			КонецЕсли; 
			// } RGS LFedotova 29.09.2017 15:19:02 - СФ 981
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		//-> Rg-Soft VIvanov 01/08/12
		// Добавил Булавский РГ-Софт 21_05_2012
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ДокументОснование.WHT Тогда
			ОбластьМакета.Параметры.ТоварНаименование 		= " ";
			ОбластьМакета.Параметры.Акциз					= "Без акциза";
		КонецЕсли; 
		// конец добавления
		//<-
		
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоСтоимость = ИтогоСтоимость + ?(Строчка.СуммаБезНДС = Неопределено, 0, Строчка.СуммаБезНДС);
		ИтогоСуммаНДС  = ИтогоСуммаНДС + ?(Строчка.СуммаНДС = Неопределено, 0, Строчка.СуммаНДС);
		ИтогоВсего     = ИтогоВсего    + ?(Строчка.СуммаСНДС = Неопределено, 0, Строчка.СуммаСНДС);
        	
	КонецЦикла;
	
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	// Выводим строку "Всего к оплате"
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ИтогоСтоимость;
	КонецЕсли;
	Если ПечСчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ИтогоВСего;
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	Если ПараметрыПечати.ВыводитьДанныеОДоговореВСФ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ДопСведения");
		ОбластьМакета.Параметры.СтрокаСведений = "Работы выполнены согласно контракту: " + ДоговорКонтрагента + ?(ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента) ИЛИ ОбщегоНазначения.ЗначениеНеЗаполнено(ДоговорКонтрагента.ДополнениеКНазванию), "", ", " +  ДоговорКонтрагента.ДополнениеКНазванию);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс И ПараметрыПечати.ВыводитьЗаказНарядВСФ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ДопСведения");
		ОбластьМакета.Параметры.СтрокаСведений = "Заказ-наряд(ы): ";
		Выгрузка = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
		Выгрузка.Свернуть("WO");
		ПустаяСтрокаОтч = Выгрузка.Найти("", "WO");
		Если Не ПустаяСтрокаОтч = Неопределено Тогда
			Выгрузка.Удалить(ПустаяСтрокаОтч);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			ОбластьМакета.Параметры.СтрокаСведений = ОбластьМакета.Параметры.СтрокаСведений + ?(Выгрузка.Индекс(СтрокаТЧ) =0, СтрокаТЧ.WO, ", " + СтрокаТЧ.WO);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьНомерАкта И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ДопСведения");
		ОбластьМакета.Параметры.СтрокаСведений = "Акт(ы): ";
		Выгрузка = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
		//Добавила условие и содержимое "Иначе" Федотова Л., РГ-Софт, 27.07.15, вопрос SLI-0005631
		Если НЕ Выгрузка.Колонки.Найти("Отчет") = Неопределено Тогда
			Выгрузка.Свернуть("Отчет");
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.TicketNumber КАК Отчет
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка.Дата = &Дата
			|	И РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РеализацияТоваровУслугУслуги.TicketNumber
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|ГДЕ
			|	РеализацияТоваровУслугУслуги.Ссылка.Дата = &Дата
			|	И РеализацияТоваровУслугУслуги.Ссылка.Номер = &Номер";
			
			Запрос.УстановитьПараметр("Дата", ДанныеДляПечати.Дата);
			Запрос.УстановитьПараметр("Номер", ДанныеДляПечати.Номер);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выгрузка = РезультатЗапроса.Выгрузить();
			
		КонецЕсли;
		
		ПустаяСтрокаОтч = Выгрузка.Найти("", "Отчет");
		Если Не ПустаяСтрокаОтч = Неопределено Тогда
			Выгрузка.Удалить(ПустаяСтрокаОтч);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			ОбластьМакета.Параметры.СтрокаСведений = ОбластьМакета.Параметры.СтрокаСведений + ?(Выгрузка.Индекс(СтрокаТЧ) =0, СтрокаТЧ.Отчет, ", " + СтрокаТЧ.Отчет);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьSIRВСФ И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ДопСведения");
		ОбластьМакета.Параметры.СтрокаСведений = "Отчет(ы): ";
		Выгрузка = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
		Выгрузка.Свернуть("Отчет");
		ПустаяСтрокаОтч = Выгрузка.Найти("", "Отчет");
		Если Не ПустаяСтрокаОтч = Неопределено Тогда
			Выгрузка.Удалить(ПустаяСтрокаОтч);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			ОбластьМакета.Параметры.СтрокаСведений = ОбластьМакета.Параметры.СтрокаСведений + ?(Выгрузка.Индекс(СтрокаТЧ) =0, СтрокаТЧ.Отчет, ", " + СтрокаТЧ.Отчет);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьДанныеОСкважинеВСФ И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ДопСведения");
		ОбластьМакета.Параметры.СтрокаСведений = "Скважина(ы): ";
		Выгрузка = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
		Выгрузка.Свернуть("Месторождение, Скважина");
		ПустыеСтроки = Выгрузка.НайтиСтроки(Новый Структура("Месторождение, Скважина", Справочники.Oilfields.ПустаяСсылка(), Справочники.Wells.ПустаяСсылка()));
		Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Выгрузка.Удалить(ПустаяСтрока);
		КонецЦикла;
		Выгрузка.Сортировать("Месторождение Возр");
		Месторождение = Неопределено;
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			Если Месторождение = СтрокаТЧ.Месторождение Тогда
				ОбластьМакета.Параметры.СтрокаСведений = ОбластьМакета.Параметры.СтрокаСведений + ", " + СтрокаТЧ.Скважина;
			Иначе
				ОбластьМакета.Параметры.СтрокаСведений = ОбластьМакета.Параметры.СтрокаСведений + ?(Выгрузка.Индекс(СтрокаТЧ) =0, "" + СтрокаТЧ.Месторождение + " " + СтрокаТЧ.Скважина, ", " + СтрокаТЧ.Месторождение + " " + СтрокаТЧ.Скважина);
			КонецЕсли;
			Месторождение = СтрокаТЧ.Месторождение;
			
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Выводим подвал
	
	Если ЗначениеЗаполнено(ДанныеДляПечати.Руководитель) Тогда
		// { RGS LFedotova 01.07.2017 0:35:05 - вопрос SLI-0007289
		//ДанныеДляПечати.ФИОРуководителя = ДанныеДляПечати.Руководитель;
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(ДанныеДляПечати.Поставщик) Тогда
			ДанныеДляПечати.ФИОПБОЮЛ = ДанныеДляПечати.Руководитель;
		Иначе	
			ДанныеДляПечати.ФИОРуководителя = ДанныеДляПечати.Руководитель;
		КонецЕсли; 
		// } RGS LFedotova 01.07.2017 0:35:33 - вопрос SLI-0007289	
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеДляПечати.ГлавныйБухгалтер) Тогда
		ДанныеДляПечати.ФИОГлавногоБухгалтера = ДанныеДляПечати.ГлавныйБухгалтер;
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	                        
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "Свидетельство,");
	Иначе
		ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	
	//rg-soft Лактюшкина 14.12.2016
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление Тогда
		ОбластьМакетаАгент = Макет.ПолучитьОбласть("Агент");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакетаАгент.Параметры.ПредставлениеАгента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование")+", ИНН/КПП: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь) + КПП; 
		ТабДокумент.Вывести(ОбластьМакетаАгент);	
	КонецЕсли;
	//

	// Устанавливаем параметры печати и колонтитулы
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры2012()

// Функция формирует печатную форму корректировочного счета-фактуры
// в соответствии с постановлением 1137 от 26.12.2011 г.
Функция ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати) Экспорт 
	 		
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура1137";
	
	// { RGS LFedotova 29.09.2017 20:31:56 - СФ 981
	//Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура2012");
	Если Дата >= '20171001' Тогда
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура981");
	Иначе
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура2012");
	КонецЕсли; 
	// } RGS LFedotova 29.09.2017 20:32:05 - СФ 981
		
		
	СведенияОбПокупателе = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	Если ПечатьСведенийОПодразделении Тогда
		СведенияОбОрганизации  = КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата);         
	Иначе	                                                 
		СведенияОбОрганизации  = КонтактнаяИнформация.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, Дата);
	КонецЕсли;
	
	// Выводим шапку
	// { RGS LFedotova 30.06.2017 18:37:18 - вопрос SLI-0007289
	//ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(Дата);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда
		Если НЕ ЗначениеЗаполнено(Макет.Области.Найти("Шапка625")) Тогда 
			ТекстИсключения = НСтр("ru = 'C 01.07.2017 г. изменился типовой макет печатной формы счета-фактуры. Для использования 
			|новой формы необходимо обновить отредактированный ранее макет. 
			|Вы можете отредактировать макет самостоятельно в разделе ""Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	// } RGS LFedotova 30.06.2017 18:37:52 - вопрос SLI-0007289
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда 
	 	ОбластьМакета.Параметры.НомерИсправленияКорректировочного = СокрЛП(НомерИсправления);
	 	ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(Дата, "ДФ='дд ММММ гггг'");
	 	ОбластьМакета.Параметры.Номер = НомерИсправляемогоКорректировочногоДокумента;
	 	ОбластьМакета.Параметры.Дата = Формат(ДатаИсправляемогоКорректировочногоДокумента, "ДФ='дд ММММ гггг'");
	Иначе
	 	ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
	 	ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = "--";
		// { RGS LFedotova 29.09.2017 23:57:04 - СФ 981
		ОбластьМакета.Параметры.Номер = СокрЛП(Номер);
		ОбластьМакета.Параметры.Дата = Формат(Дата, "ДФ='дд ММММ гггг'");
		// } RGS LFedotova 29.09.2017 23:57:12 - СФ 981
	КонецЕсли;
	
	// { RGS LFedotova 29.09.2017 23:00:23 - СФ 981
	Если Дата >= '20171001' Тогда
		НомерСчетаФактуры = СокрЛП(НомерИсходногоДокумента);
		ДатаСчетаФактуры = Формат(ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'");
		
		//Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда 
		Если НомерИсправленияИсходногоДокумента <> 0 Тогда 
		// } RGS LFedotova 29.09.2017 23:27:22 - СФ 981
			НомерИсправленияПараметр = НомерИсправленияИсходногоДокумента;
			ДатаИсправления = Формат(ДатаИсправленияИсходногоДокумента, "ДФ='дд ММММ гггг'");
		Иначе
			НомерИсправленияПараметр = "--";
			ДатаИсправления = "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.РеквизитыОснований = НомерСчетаФактуры + " от " + ДатаСчетаФактуры +
		", с учетом исправления № " + НомерИсправленияПараметр + " от " + ДатаИсправления;
	Иначе	
	// } RGS LFedotova 29.09.2017 23:27:22 - СФ 981
		ОбластьМакета.Параметры.НомерСчетаФактуры = НомерИсходногоДокумента;
		ОбластьМакета.Параметры.ДатаСчетаФактуры = Формат(ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'");
		
		// { RGS LFedotova 29.09.2017 23:00:23 - СФ 981
		//Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда 
		Если НомерИсправленияИсходногоДокумента <> 0 Тогда 
		// } RGS LFedotova 29.09.2017 23:27:22 - СФ 981
			ОбластьМакета.Параметры.НомерИсправления = НомерИсправленияИсходногоДокумента;
			ОбластьМакета.Параметры.ДатаИсправления = Формат(ДатаИсправленияИсходногоДокумента, "ДФ='дд ММММ гггг'");
		Иначе
			ОбластьМакета.Параметры.НомерИсправления = "--";
			ОбластьМакета.Параметры.ДатаИсправления = "--";
		КонецЕсли;
	
	// { RGS LFedotova 29.09.2017 23:00:23 - СФ 981
	КонецЕсли; 
	// } RGS LFedotova 29.09.2017 23:00:28 - СФ 981
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,  "ПолноеНаименование,");
	
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	
	Если НЕ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		И ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННКПППродавца = ""
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
			
	Иначе
		ОбластьМакета.Параметры.ИННКПППродавца = "--"
	КонецЕсли;
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	         	
	ОбластьМакета.Параметры.Валюта = ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		"Валюта: наименование, код " + ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"Валюта: наименование, код");		
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// { RGS LFedotova 30.06.2017 21:15:28 - вопрос SLI-0007289
	//Выводим иднтификатор госконтракта
	// { RGS LFedotova 10.12.2018 20:05:31 - вопрос S-B-0000681
	//Если ВедетсяУчетНДСПоФЗ56 Тогда
	Если Дата >= '20170701' Тогда
	// } RGS LFedotova 10.12.2018 20:05:43 - вопрос S-B-0000681 
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		// { RGS LFedotova 29.09.2017 22:26:15 - СФ 981
		//ШаблонЗаголовкаГосконтракт = НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): %1'");
		ШаблонЗаголовкаГосконтракт = ?(Дата >= '20171001', НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения) (при наличии): -- %1'"),
														   НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения): -- %1'"));
		// } RGS LFedotova 29.09.2017 22:26:21 - СФ 981 
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//ШаблонЗаголовкаГосконтракт, ДанныеШапки.ИдентификаторГосКонтракта);
		ШаблонЗаголовкаГосконтракт, "");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	// } RGS LFedotova 30.06.2017 21:15:36 - вопрос SLI-0007289
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаТабличнойЧасти = ДанныеДляПечати.ТабличнаяЧасть;
	
	ИтогРазницаБезНДСУменьшение = 0;
	ИтогРазницаБезНДСУвеличение = 0;
	ИтогРазницаСНДСУменьшение   = 0;
	ИтогРазницаСНДСУвеличение   = 0;
	ИтогРазницаНДСУменьшение    = 0;
	ИтогРазницаНДСУвеличение    = 0;
				
	Для Каждого СтрокаТабличнойЧасти ИЗ ВыборкаТабличнойЧасти Цикл 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаТабличнойЧасти.КоличествоДоИзменения    = 0;
			СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0;
			СтрокаТабличнойЧасти.ЦенаДоИзменения          = 0;
			СтрокаТабличнойЧасти.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаДоИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаДоИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения / СтрокаТабличнойЧасти.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ЦенаПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.ЦенаПослеИзменения = Окр(СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения / СтрокаТабличнойЧасти.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаТабличнойЧасти.КоличествоДоИзменения = 0 
				И СтрокаТабличнойЧасти.КоличествоПослеИзменения = 0 Тогда
				СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеЕдиницыИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		          		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
				
		ИтогРазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение + СтрокаТабличнойЧасти.РазницаБезНДСУменьшение;
		ИтогРазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение + СтрокаТабличнойЧасти.РазницаБезНДСУвеличение;
		ИтогРазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение   + СтрокаТабличнойЧасти.РазницаСНДСУменьшение;
		ИтогРазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение   + СтрокаТабличнойЧасти.РазницаСНДСУвеличение;
		ИтогРазницаНДСУменьшение    = ИтогРазницаНДСУменьшение    + СтрокаТабличнойЧасти.РазницаНДСУменьшение;
		ИтогРазницаНДСУвеличение    = ИтогРазницаНДСУвеличение    + СтрокаТабличнойЧасти.РазницаНДСУвеличение;
				
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	                                    
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ИтогРазницаБезНДСУменьшение;
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ИтогРазницаБезНДСУвеличение;
	
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ИтогРазницаСНДСУменьшение;
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ИтогРазницаСНДСУвеличение;
	ОбластьМакета.Параметры.РазницаНДСУменьшение    = ?(СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУменьшение);
	ОбластьМакета.Параметры.РазницаНДСУвеличение    = ?(СчетФактураБезНДС, "без НДС", ИтогРазницаНДСУвеличение);
    	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал
    	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	Если ЗначениеЗаполнено(ДанныеДляПечати.Руководитель) Тогда
		ДанныеДляПечати.ФИОРуководителя = ДанныеДляПечати.Руководитель;
	КонецЕсли;
	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(ДанныеДляПечати.ГлавныйБухгалтер) Тогда
		ДанныеДляПечати.ФИОГлавногоБухгалтера = ДанныеДляПечати.ГлавныйБухгалтер;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);	
	ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    	
	Возврат ТабДокумент;
                 	
КонецФункции

//-> RG-Soft VIvanov 01/08/12
Функция СобратьДанныеПоСчетуКнигиПокупок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ЭтотОбъект.ДокументОснование.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетКнигиПокупокСуммы.Ссылка.Организация,
	|	СчетКнигиПокупокСуммы.Ссылка.Организация КАК Покупатель,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ СчетКнигиПокупокСуммы.Ссылка.Организация
	|	КОНЕЦ КАК Грузополучатель,
	|	СчетКнигиПокупокСуммы.Ссылка.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ СчетКнигиПокупокСуммы.Ссылка.Контрагент
	|	КОНЕЦ КАК Грузоотправитель,
	//|	СУММА(ВЫБОР
	//|			КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	//|				ТОГДА СчетКнигиПокупокСуммы.СуммаСНДС
	//|			ИНАЧЕ СчетКнигиПокупокСуммы.СуммаСНДСРуб
	//|		КОНЕЦ) КАК Сумма,
	|	СУММА(СчетКнигиПокупокСуммы.СуммаСНДСРуб) КАК Сумма,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ЛОЖЬ КАК СуммаВключаетНДС,
	|	ВложенныйЗапрос.СсылкаAU КАК AU
	|ИЗ
	|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПроводкиПоДокументу.Ссылка.AU) КАК СсылкаAU
	|	ИЗ
	|		КритерийОтбора.ПроводкиПоДокументу(&ДокументОснование) КАК ПроводкиПоДокументу
	|	ГДЕ
	|		ПроводкиПоДокументу.Ссылка.AccountLawson.Код = ""140203"") КАК ВложенныйЗапрос
	|ГДЕ
	|	СчетКнигиПокупокСуммы.Ссылка = &ДокументОснование
	|	И СчетКнигиПокупокСуммы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетКнигиПокупокСуммы.Ссылка.Организация,
	|	СчетКнигиПокупокСуммы.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ СчетКнигиПокупокСуммы.Ссылка.Организация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ СчетКнигиПокупокСуммы.Ссылка.Контрагент
	|	КОНЕЦ,
	|	ВложенныйЗапрос.СсылкаAU,
	|	СчетКнигиПокупокСуммы.Ссылка.Организация";
                                   	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ЭтотОбъект.ДокументОснование.Ссылка);
	WHT = Справочники.Номенклатура.НайтиПоКоду("00001WHT");
	ЗапросПоТоварам.УстановитьПараметр("Товар", WHT);
	ЗапросПоТоварам.УстановитьПараметр("ЕдИзм", WHT.БазоваяЕдиницаИзмерения);
	ЗапросПоТоварам.УстановитьПараметр("Наименование", WHT.НаименованиеПолное);
	
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ &Товар
	|	КОНЕЦ КАК Товар,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ &Наименование
	|	КОНЕЦ КАК ТоварНаименование,
	|	1 КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА """"
	|		ИНАЧЕ &ЕдИзм
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	// { RGS LFedotova 30.09.2017 15:33:44 - СФ 981
	|	""--"" КАК ТоварКодТНВЭД,
	// } RGS LFedotova 30.09.2017 15:33:51 - СФ 981
	|	0 КАК Количество,
	|	0 КАК СтранаПроисхождения,
	|	0 КАК НомерГТД,
	//|	ВЫБОР
	//|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	//|			ТОГДА СчетКнигиПокупокСуммы.СуммаБезНДС
	//|		ИНАЧЕ СчетКнигиПокупокСуммы.СуммаБезНДСРуб
	//|	КОНЕЦ КАК Цена,
	//|	ВЫБОР
	//|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	//|			ТОГДА СчетКнигиПокупокСуммы.СуммаНДС
	//|		ИНАЧЕ СчетКнигиПокупокСуммы.СуммаНДСРуб
	//|	КОНЕЦ КАК СуммаНДС,
	|	СчетКнигиПокупокСуммы.СуммаБезНДСРуб КАК Цена,
	|	СчетКнигиПокупокСуммы.СуммаНДСРуб КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		ИНАЧЕ СчетКнигиПокупокСуммы.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	//|	ВЫБОР
	//|		КОГДА СчетКнигиПокупокСуммы.Ссылка.WHT
	//|			ТОГДА СчетКнигиПокупокСуммы.СуммаБезНДС
	//|		ИНАЧЕ СчетКнигиПокупокСуммы.СуммаБезНДСРуб
	//|	КОНЕЦ КАК Сумма
	|	СчетКнигиПокупокСуммы.СуммаБезНДСРуб КАК Сумма 
	|ИЗ
	|	Документ.СчетКнигиПокупок.Суммы КАК СчетКнигиПокупокСуммы
	|ГДЕ
	|	СчетКнигиПокупокСуммы.Ссылка = &ДокументОснование
	|	И (СчетКнигиПокупокСуммы.Ссылка.WHT
	|			ИЛИ СчетКнигиПокупокСуммы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118))";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    //00001WHT
	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("AU",            	 Шапка.AU);
	ДанныеДляПечати.Вставить("Валюта",           Справочники.Валюты.НайтиПоКоду("643"));
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	//Исправила Логинова 26.11.12г., вопрос SLI-0003017
	//ДанныеДляПечати.Вставить("ФИОРуководителя",  ?(ДокументОснование.WHT, "Барри Хармер", ""));
	ДанныеДляПечати.Вставить("ФИОРуководителя",  ?(ДокументОснование.WHT, "Альбина Зайнуллина", ""));
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", ?(ДокументОснование.WHT, "Ольга Миннуллина", ""));
	ДанныеДляПечати.Вставить("ДоверенностьРуководитель", ?(ДокументОснование.WHT, "(по доверенности)", ""));
	ДанныеДляПечати.Вставить("ДоверенностьГлавныйБухгалтер", ?(ДокументОснование.WHT, "(по доверенности)", ""));
	//Исправила Логинова 26.11.12г., вопрос SLI-0003017
    //ДанныеДляПечати.Вставить("Руководитель", ?(ДокументОснование.WHT, "Барри Хармер", ""));
	ДанныеДляПечати.Вставить("Руководитель", ?(ДокументОснование.WHT, "Альбина Зайнуллина", ""));
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", ?(ДокументОснование.WHT, "Ольга Миннуллина", ""));
	
	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

//-> RG-Soft Vivanov 07/08/12
Процедура ЗаполнитьРеквизитыКорректировки(ДокументОснование) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование.Сделка) И (ТипЗнч(ДокументОснование.Сделка) = тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(ДокументОснование.Сделка) = тип("ДокументСсылка.ПередачаОС") Или ТипЗнч(ДокументОснование.Сделка) = тип("ДокументСсылка.ОтчетПринципалуОПродажах")) Тогда
		//СтарыйСф = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОснование.Сделка, "СчетФактураВыданный");
		СтарыйСф = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОснование.Сделка, "СчетФактураВыданный");
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтарыйСф) Тогда
			Сообщить("Не обнаружен счет-фактура у корректируемого/исправляемого документа! Данные корректировки/исправления заполнены не будут!");
		Иначе
			Если ДокументОснование.Корректировка Тогда
				Операция = "к";
			Иначе
				Операция = "и";
			КонецЕсли;
			Операция = ПолучитьТипРеализации(ДокументОснование.Сделка) + Операция;
			ПрименитьОперациюКорректировки(Операция, СтарыйСф);
		КонецЕсли;
	Иначе
		Сообщить("Не определен корректируемый/исправляемый документ! Данные корректировки/исправления заполнены не будут!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьОперациюКорректировки(Операция, СтарыйСф)
	
	Если Операция = "ии" Тогда 
		Исправление = Истина;
		НомерИсправления = ?(ЗначениеЗаполнено(СтарыйСф.НомерИсправления), СтарыйСф.НомерИсправления, 0) + 1;
		НомерИсправляемогоКорректировочногоДокумента = СтарыйСф.НомерИсправляемогоКорректировочногоДокумента;
		ДатаИсправляемогоКорректировочногоДокумента = СтарыйСф.ДатаИсправляемогоКорректировочногоДокумента;
		НомерИсходногоДокумента = СтарыйСф.НомерИсходногоДокумента;
		ДатаИсходногоДокумента = СтарыйСф.ДатаИсходногоДокумента;
		УчитыватьИсправлениеИсходногоДокумента = СтарыйСф.УчитыватьИсправлениеИсходногоДокумента;
		НомерИсправленияИсходногоДокумента = СтарыйСф.НомерИсправленияИсходногоДокумента;
		ДатаИсправленияИсходногоДокумента = СтарыйСф.ДатаИсправленияИсходногоДокумента;
	ИначеЕсли Операция = "кк" Тогда 
		Исправление = Ложь;
		НомерИсправления = 0;
		НомерИсходногоДокумента = СтарыйСф.Номер;
		ДатаИсходногоДокумента = СтарыйСф.Дата;
	ИначеЕсли Операция = "ки" Тогда 
		Исправление = Истина;
		НомерИсправления = 1;
		НомерИсправляемогоКорректировочногоДокумента = СтарыйСф.Номер;
		ДатаИсправляемогоКорректировочногоДокумента = СтарыйСф.Дата;
		НомерИсходногоДокумента = СтарыйСф.НомерИсходногоДокумента;
		ДатаИсходногоДокумента = СтарыйСф.ДатаИсходногоДокумента;
		УчитыватьИсправлениеИсходногоДокумента = СтарыйСф.УчитыватьИсправлениеИсходногоДокумента;
		НомерИсправленияИсходногоДокумента = СтарыйСф.НомерИсправленияИсходногоДокумента;
		ДатаИсправленияИсходногоДокумента = СтарыйСф.ДатаИсправленияИсходногоДокумента;
	ИначеЕсли Операция = "ик" Тогда 
		Исправление = Ложь;
		НомерИсправления = 0;
		НомерИсходногоДокумента = СтарыйСф.НомерИсходногоДокумента;
		ДатаИсходногоДокумента = СтарыйСф.ДатаИсходногоДокумента;
		УчитыватьИсправлениеИсходногоДокумента = Истина;
		НомерИсправленияИсходногоДокумента = СтарыйСф.НомерИсправления;
		ДатаИсправленияИсходногоДокумента = СтарыйСф.Дата;	
	ИначеЕсли Операция = "ри" Тогда 
		Исправление = Истина;
		НомерИсправления = 1;
		НомерИсходногоДокумента = СтарыйСф.Номер;
		ДатаИсходногоДокумента = СтарыйСф.Дата;
	ИначеЕсли Операция = "рк" Тогда 
		Исправление = Ложь;
		НомерИсправления = 0;
		НомерИсходногоДокумента = СтарыйСф.Номер;
		ДатаИсходногоДокумента = СтарыйСф.Дата;
	КонецЕсли;
	
КонецПроцедуры
//<-

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		Возврат НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг';Л=ru_RU ");
	Иначе
  		Возврат НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект)
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'"); 
	КонецЕсли;
	//[<-РКХ] 
КонецФункции // СформироватьЗаголовокДокумента()

//Добавила Федотова Л., РГ-Софт, 24.10.13, вопрос SLI-0003951
Процедура ЗаполнитьДатаНомерДокументовОплаты() Экспорт
	
	ДатаНомерДокументовОплаты.Очистить();
	Для каждого ДокОснование Из ДокументыОснования Цикл
		ТабЧасть = ДокОснование.ДокументОснование.Метаданные().ТабличныеЧасти.Найти("Предоплата");
		Если НЕ ТабЧасть = Неопределено Тогда // Есть такая таб. часть в документе
	    	Для каждого Строка Из ДокОснование.ДокументОснование.Предоплата Цикл
				НоваяСтрока = ДатаНомерДокументовОплаты.Добавить();
				НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Строка.ДокументАванса.ValueDate;
			    НоваяСтрока.НомерПлатежноРасчетногоДокумента = Строка.ДокументАванса.НомерВходящегоДокумента;                    
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДатаНомерДокументовОплаты()

// Пахоменков 24.05.2013 Функция собирает данные по текущему документу отчет агента по расходам
// 
Функция СобратьДанныеОтчетАгентаПоРасходам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетАгентаПоРасходам.Организация,
	               |	ОтчетАгентаПоРасходам.Контрагент,
	               |	ОтчетАгентаПоРасходам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ОтчетАгентаПоРасходам.ВалютаДокумента,
	               |	ОтчетАгентаПоРасходам.Организация КАК Поставщик,
	               |	ОтчетАгентаПоРасходам.Контрагент КАК Покупатель,
				   //Товары
	               |	ОтчетАгентаПоРасходам.НоменклатураАгентская КАК Товар,
	               |	ОтчетАгентаПоРасходам.СодержаниеАгентское КАК ТоварНаименование,
				   // { RGS LFedotova 30.09.2017 15:15:43 - СФ 981
				   |	""--"" КАК ТоварКодТНВЭД,
				   // } RGS LFedotova 30.09.2017 15:15:48 - СФ 981
	               |	ОтчетАгентаПоРасходам.АгентскаяСтавкаНДС КАК СтавкаНДС,
	               |	ОтчетАгентаПоРасходам.АгентскийНДС КАК СуммаНДС,
	               |	ОтчетАгентаПоРасходам.АгентскаяСумма КАК СуммаДокумента,
	               |	ОтчетАгентаПоРасходам.ПодразделениеОрганизации
	               |ИЗ
	               |	Документ.ОтчетАгентаПоРасходам КАК ОтчетАгентаПоРасходам
	               |ГДЕ
	               |	ОтчетАгентаПоРасходам.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();   	
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);    
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Контрагент);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);  

	ДанныеДляПечати.Вставить("Сумма",            Неопределено);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Неопределено);    	
	ДанныеДляПечати.Вставить("Руководитель", 	 Неопределено);
    ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Неопределено); 
	
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Грузополучатель",  ""); 
	
	ДанныеДляПечати.Вставить("ПодразделениеОрганизации", Шапка.ПодразделениеОрганизации);   
            	
	Товары = ИнициализацияТаблицыСтрок();  
	
	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.Товар;
	Строчка.ТоварНаименование   = Шапка.ТоварНаименование;
	// { RGS LFedotova 30.09.2017 15:22:34 - СФ 981
	Строчка.ТоварКодТНВЭД   = Шапка.ТоварКодТНВЭД;
	// } RGS LFedotova 30.09.2017 15:22:42 - СФ 981 
	Строчка.Сумма               = Шапка.СуммаДокумента;
	Строчка.СуммаНДС            = Шапка.СуммаНДС;
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;        
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);  
	
	Возврат ДанныеДляПечати;  
	
КонецФункции // СобратьДанныеОтчетАгентаПоРасходам  

// Пахоменков 28.03.2014 Функция собирает данные по текущему документу отражение реализации товаров Ии услуг НДС
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслугНДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеНачисленияНДС.Организация,
	               |	ОтражениеНачисленияНДС.Контрагент,
	               |	ОтражениеНачисленияНДС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ОтражениеНачисленияНДС.ВалютаДокумента,
	               |	ОтражениеНачисленияНДС.Организация КАК Поставщик,
	               |	ОтражениеНачисленияНДС.Контрагент КАК Покупатель,
	               |	ОтражениеНачисленияНДС.ПодразделениеОрганизации
	               |ИЗ
	               |	Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	               |ГДЕ
	               |	ОтражениеНачисленияНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();   	
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);    
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Контрагент);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);  

	ДанныеДляПечати.Вставить("Сумма",            Неопределено);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.ВалютаДокумента);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Неопределено);    	
	ДанныеДляПечати.Вставить("Руководитель", 	 Неопределено);
    ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Неопределено); 
	
	ДанныеДляПечати.Вставить("Грузоотправитель", "");
	ДанныеДляПечати.Вставить("Грузополучатель",  ""); 
	
	ДанныеДляПечати.Вставить("ПодразделениеОрганизации", Шапка.ПодразделениеОрганизации);   
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура.Наименование,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Сумма,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СтавкаНДС,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СуммаНДС
		|ИЗ
		|	Документ.ОтражениеНачисленияНДС.ТоварыИУслуги КАК ОтражениеНачисленияНДСТоварыИУслуги
		|ГДЕ
		|	ОтражениеНачисленияНДСТоварыИУслуги.Ссылка = &Ссылка";  
	ТЧ = Запрос.Выполнить().Выбрать();

	Товары = ИнициализацияТаблицыСтрок();  
	
	Пока ТЧ.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ТЧ.Номенклатура;
		Строчка.ТоварНаименование   = ТЧ.НоменклатураНаименование;
		Строчка.Сумма               = ТЧ.Сумма;
		Строчка.СуммаНДС            = ТЧ.СуммаНДС;
		Строчка.СтавкаНДС           = ТЧ.СтавкаНДС; 
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);  
	
	Возврат ДанныеДляПечати;  
	
КонецФункции // СобратьДанныеОтчетАгентаПоРасходам  
     
// Пахоменков 05.06.2013 Функция собирает данные строкам отчета агента по расходам
// 
Функция СобратьДанныеСФПеревыставление() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСчетФактура", Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданный.Номер,
	               |	СчетФактураВыданный.Дата,
	               |	СчетФактураВыданный.Организация,
	               |	СчетФактураВыданный.Контрагент,
	               |	СчетФактураВыданный.ДокументОснование.Контрагент КАК Поставщик,
	               |	СчетФактураВыданный.ОтчетАгентаПоРасходам.Контрагент КАК Покупатель,
	               |	СчетФактураВыданный.ОтчетАгентаПоРасходам.ПодразделениеОрганизации,
	               |	СчетФактураВыданный.ОтчетАгентаПоРасходам.БезПодбораВаучера КАК БезПодбораВаучера
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка = &ТекущаяСчетФактура";
                                                
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий(); 	

	ДанныеДляПечати = Новый Структура();
	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	//ДанныеДляПечати.Вставить("Поставщик",        ?(Шапка.БезПодбораВаучера,Шапка.Организация,Шапка.Поставщик));
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель); 
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета); 
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);   	
	ДанныеДляПечати.Вставить("Руководитель", 	 Неопределено);
	ДанныеДляПечати.Вставить("ГлавныйБухгалтер", Неопределено);  
	ДанныеДляПечати.Вставить("AU", Неопределено);  
    ДанныеДляПечати.Вставить("ПодразделениеОрганизации", Шапка.ОтчетАгентаПоРасходамПодразделениеОрганизации);
	
	Товары = ИнициализацияТаблицыСтрок();  
	
	ЕстьТовар = Ложь;
	Для каждого Строка из Авансы Цикл
		
		СтрокаТаблицы = Товары.Добавить(); 
		СтрокаТаблицы.ТоварНаименование = Строка.Содержание;   
		СтрокаТаблицы.ЕдиницаИзмеренияКод = Строка.Номенклатура.БазоваяЕдиницаИзмерения.Код;
		СтрокаТаблицы.ЕдиницаИзмерения = Строка.Номенклатура.БазоваяЕдиницаИзмерения;
		// { RGS LFedotova 29.09.2017 15:21:23 - СФ 982
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТаблицы.ТоварКодТНВЭД = ?(ЗначениеЗаполнено(Строка.Номенклатура),
				?(ЗначениеЗаполнено(Строка.Номенклатура.КодТНВЭД),Строка.Номенклатура.КодТНВЭД,"--"),"--");
		Иначе	
			СтрокаТаблицы.ТоварКодТНВЭД = "--";
		КонецЕсли;
		// } RGS LFedotova 29.09.2017 15:21:28 - СФ 982 
		СтрокаТаблицы.Сумма = Строка.Сумма;
		СтрокаТаблицы.СтавкаНДС = Строка.СтавкаНДС;
		СтрокаТаблицы.СуммаНДС = Строка.СуммаНДС;
		СтрокаТаблицы.СуммаБезНДСРуб = Строка.Сумма - Строка.СуммаНДС;
		СтрокаТаблицы.СуммаНДСРУб = Строка.СуммаНДС; 
		СтрокаТаблицы.СтранаПроисхожденияКод = Строка.СтранаПроисхождения.Код;
		СтрокаТаблицы.ПредставлениеСтраны = Строка.СтранаПроисхождения;
		СтрокаТаблицы.Количество = Строка.Количество;
		Если ЗначениеЗаполнено(Строка.Номенклатура) И НЕ Строка.Номенклатура.Услуга Тогда
			ЕстьТовар = Истина;
		КонецЕсли;			

	КонецЦикла;
	
	//ДанныеДляПечати.Вставить("Грузополучатель",  ?(ЕстьТовар,Шапка.Покупатель,Неопределено)); 
	ДанныеДляПечати.Вставить("Грузополучатель",  ?(ЕстьТовар,Шапка.Организация,Неопределено)); 	
    ДанныеДляПечати.Вставить("Грузоотправитель", ?(ЕстьТовар,Шапка.Поставщик, Неопределено));     
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);  
	
	Возврат ДанныеДляПечати;  
	
КонецФункции // СобратьДанныеОтчетАгентаПоРасходамПеревыставление 

// { РГ-Софт Пахоменков А. 09.12.2014 Взято из типовой бухгалтерии ради заполнения суммы НДС документа в журнале счет-фактур. Новый код отключен
Процедура РассчитатьСуммуДокумента()
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		// { РГ-Софт Пахоменков А. 09.12.2014
		//ОпределениеПараметровСчетаФактурыНаРеализацию();
		ОпределениеПараметровСчетаФактуры(Ссылка);
		// } РГ-Софт Пахоменков А. 09.12.2014
		
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		// { РГ-Софт Пахоменков А. 09.12.2014
		//ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 		
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление // 03.04.2015 Пахоменков		
		// } РГ-Софт Пахоменков А. 09.12.2014
		Тогда
		
		Сумма	 = Авансы.Итог("Сумма");
		СуммаНДС = Авансы.Итог("СуммаНДС");
		
		// { РГ-Софт Пахоменков А. 09.12.2014
		//ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();		
		ВалютаРегламентированногоУчета	= SalesBookСервер.ПолучитьВалютуРегламентированногоУчета();
		// } РГ-Софт Пахоменков А. 09.12.2014
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
			// { РГ-Софт Пахоменков А. 09.12.2014
			//СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			//СуммаДокумента	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
			//							ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
			//							1, СтруктураКурсаВзаиморасчетов.Кратность);
			//СуммаНДСДокумента	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНДС,
			//							ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
			//							1, СтруктураКурсаВзаиморасчетов.Кратность);
			СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);			
			СуммаДокумента	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Сумма,
			ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
			1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаНДСДокумента	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаНДС,
			ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
			1, СтруктураКурсаВзаиморасчетов.Кратность);
			// } РГ-Софт Пахоменков А. 09.12.2014   										
			
		Иначе
			
			СуммаДокумента    = Сумма;
			СуммаНДСДокумента = СуммаНДС;
			
		КонецЕсли;
		
		// { РГ-Софт Пахоменков А. 09.12.2014
		//Если СводныйКорректировочный Тогда
		//	СводныйКорректировочный = Ложь;
		//КонецЕсли;
		// } РГ-Софт Пахоменков А. 09.12.2014
		
		// { РГ-Софт Пахоменков А. 09.12.2014
		//ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		//	
		//	СуммаДокумента    = Сумма;
		//	СуммаНДСДокумента = СуммаНДС;
		//	
		//	Если СводныйКорректировочный Тогда
		//		СводныйКорректировочный = Ложь;
		//	КонецЕсли;
		// } РГ-Софт Пахоменков А. 09.12.2014      	
		
	КонецЕсли;
	
КонецПроцедуры
// } РГ-Софт Пахоменков А. 09.12.2014

Функция ПолучитьОписаниеСчетовПокупателя()
	//-> Фролов М. 01.11.12 Реализация вывода счетов покупателя , если их несколько
	СчетПлательщика = "";
	ДокументРеализации = ДокументОснование;
	Если ТипЗнч(ДокументРеализации) = Тип ("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ДокументРеализации.СчетаПокупателя.Количество() > 0 Тогда
			Для каждого СтрокаТаблицы Из ДокументРеализации.СчетаПокупателя Цикл
				НомерСчетаПлательщика = СокрЛП(СтрокаТаблицы.СчетПокупателя.НомерСчета);
				БанкДляРасчетов = ?(СтрокаТаблицы.СчетПокупателя.БанкДляРасчетов.Пустая(), СтрокаТаблицы.СчетПокупателя.Банк, СтрокаТаблицы.СчетПокупателя.БанкДляРасчетов);
				БанкПлательщика =  СокрЛП(БанкДляРасчетов.Наименование);
				БанкПлательщикаАдресБанка = СокрЛП(БанкДляРасчетов.Адрес);
				БанкПлательщикаБИК = СокрЛП(БанкДляРасчетов.Код);
				СчетПлательщика = СчетПлательщика + ?(СчетПлательщика = "", "", ", ") + НомерСчетаПлательщика + " в " + БанкПлательщика + ", " + БанкПлательщикаАдресБанка + ", " + БанкПлательщикаБИК;	
			КонецЦикла;  				
		КонецЕсли;
	КонецЕсли;
	//<- Фролов М. 01.11.12
	Возврат СчетПлательщика;
КонецФункции // ()

// Возвращает параметры печати по умолчанию
//
Функция ПолучитьПараметрыПечатиСФ() Экспорт

	 ПараметрыПечати = Новый Структура;
	 ПараметрыПечати.Вставить("ВыводитьSIRВСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьSIRВСФ"));
	 ПараметрыПечати.Вставить("ВыводитьДанныеОСкважинеВСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьДанныеОСкважинеВСФ"));
	 ПараметрыПечати.Вставить("ВыводитьЗаголовокСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьЗаголовокСФ"));
	 ПараметрыПечати.Вставить("ВыводитьЗаказНарядВСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьЗаказНарядВСФ"));
	 ПараметрыПечати.Вставить("ВыводитьРасчетныйСчетВСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьРасчетныйСчетВСФ"));
	 ПараметрыПечати.Вставить("ВыводитьДанныеОДоговореВСФ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьДанныеОДоговореВСФ"));
	 ПараметрыПечати.Вставить("ВыводитьНомерАкта", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьНомерАкта"));
	 //ПараметрыПечати.Вставить("ВыводитьУЕ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ВыводитьУЕ"));
	 //добавила Федотова Л., РГ-Софт, 10.08.10 ->
	 ПараметрыПечати.Вставить("ВыводитьСкидку", Ложь);
	 ПараметрыПечати.Вставить("ПроцентСкидки", 20);
	 //<-
	 ПараметрыПечати.Вставить("ДоговорВШапке", Ложь);
	 Возврат ПараметрыПечати;

КонецФункции // ПолучитьПараметрыПечатиСФ()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	SalesBookСервер.СформироватьГрафикиУведомленийКС(Ссылка);  // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНадписьПредоплата = "Предварительная оплата";