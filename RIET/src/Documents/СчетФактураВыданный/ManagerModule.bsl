Функция ПолучитьСоответствиеВидовСчетаФактурыФормам() Экспорт

	ФормыСчетовФактур = Новый Соответствие;
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию,      "ФормаДокументаНаРеализацию");
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс,           "ФормаДокументаНаАванс");
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "ФормаДокументаНаСуммовуюРазницу");
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент,    "ФормаДокументаНалоговыйАгент");
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный,	"ФормаДокументаКорректировочный");
	//20.05.2013	
	ФормыСчетовФактур.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Перевыставление,	"ФормаДокументаПеревыставление");
	//<<
	
	Возврат ФормыСчетовФактур;

КонецФункции 

// Открываемая форма документа определяется в зависимости от указанного виды счета-фактуры
//

//Процедура ОбработкаПолученияФормы(Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт 
//изменила Федотова Л., РГ-Софт, 01.11.12, вопрос №SLI-0002957
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт //	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидСчетаФактуры = Параметры.Ключ.ВидСчетаФактуры;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		И Параметры.ЗначенияЗаполнения.Свойство("ВидСчетаФактуры") Тогда 
		ВидСчетаФактуры = Параметры.ЗначенияЗаполнения.ВидСчетаФактуры;
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") 
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		ВидСчетаФактуры = Параметры.ЗначениеКопирования.ВидСчетаФактуры;
	ИначеЕсли Параметры.Свойство("Основание") 
		И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		ВидСчетаФактуры = УчетНДС.ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(Параметры.Основание);
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И НЕ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			Отказ = Ложь;
			
			//ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияАванс(
			//	Параметры.Основание, Неопределено, Неопределено, Отказ);
			
			Если Отказ Тогда
				
				Отказ = Ложь;
				//ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(
				//	Параметры.Основание, Неопределено, Отказ);
				
				Если НЕ Отказ Тогда
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
    
	Иначе
		ВидСчетаФактуры = Неопределено;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	ФормыСчетовФактур = ПолучитьСоответствиеВидовСчетаФактурыФормам();
	ВыбраннаяФорма = ФормыСчетовФактур[ВидСчетаФактуры];
	Если ВыбраннаяФорма = Неопределено Или ВыбраннаяФорма = "" Тогда
		ВыбраннаяФорма = "ФормаДокументаУправляемая";
	КонецЕсли;
	
КонецПроцедуры

Функция ДатыНомераПлатежноРасчетныхДокументов(МассивОснований) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);

	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК ДокументОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор В (&МассивОснований)
	|				И СчетДт В (&МассивСчетовАвансов)
	|				И ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто";
		
				   
	ДатыНомера = Новый ТаблицаЗначений;
	ДатыНомера.Колонки.Добавить("ДатаДокумента",  Новый ОписаниеТипов("Дата"));
	ДатыНомера.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаНомер = УчетНДС.ДатаНомерПлатежноРасчетногоДокумента(Выборка.ДокументОплаты);
		Если НЕ ЗначениеЗаполнено(ДатаНомер.ДатаПлатежноРасчетногоДокумента)
			И НЕ ЗначениеЗаполнено(ДатаНомер.НомерПлатежноРасчетногоДокумента) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДатыНомера.Добавить();
		НоваяСтрока.ДатаДокумента  = ДатаНомер.ДатаПлатежноРасчетногоДокумента;
		НоваяСтрока.НомерДокумента = ДатаНомер.НомерПлатежноРасчетногоДокумента;
	КонецЦикла;
	ДатыНомера.Сортировать("ДатаДокумента,НомерДокумента");
	
	Возврат ДатыНомера;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечатиНач, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	ЭтотОбъект = МассивОбъектов[0];
	Если ТипЗнч(ЭтотОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ЭтотОбъект = ЭтотОбъект.ПолучитьОбъект();
	КонецЕсли;
	ИмяМакета = КоллекцияПечатныхФорм[0].ИмяМакета;
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		Сообщить("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	//Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "СчетФактура" ИЛИ ИмяМакета = "СчетФактураПоПостановлению1137" 
		ИЛИ ИмяМакета = "СчетФактураСНастройкой" ИЛИ ИмяМакета = "СчетФактураПоПостановлению113СНастройкой" 
		ИЛИ ИмяМакета = "УведомлениеОПолучении" Тогда
		
		Если ЭтотОбъект.Дата >= '20060101000000' Тогда
			мНадписьПредоплата = "Предварительный платеж";
		Иначе
			мНадписьПредоплата = "Авансовый платеж";
		КонецЕсли;
		
		ТипОснования = ТипЗнч(ЭтотОбъект.ДокументОснование);
		ДанныеДляПечати = Неопределено;
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФнаАванс();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();   			
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоПКО();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСВП();
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоПлатежномуОрдеру();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоЦепочкеРеализацийТоваровУслуг();
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтражениюРеализацииТоваровИУслуг();		
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоДокументуРасчетовСКонтрагентом();		
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоПринятиюКУчетуОС();
		//ИначеЕсли ТипОснования = Тип("ДокументСсылка.МодернизацияОС") Тогда
		//	ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоМодернизацииОС();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтчетКомитентуОПродажах(ЭтотОбъект.ДокументОснование);
		//-> RG-Soft VIvanov 01/08/12
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") И НЕ ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление  Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоСчетуКнигиПокупок();
		//-> Пахоменков 24.05.2013
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И НЕ ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеОтчетАгентаПоРасходам();  	
		ИначеЕсли ЭтотОбъект.ВидСчетаФАктуры = Перечисления.ВидСчетаФактурыВыставленного.Перевыставление
			      И (ТипОснования = Тип("ДокументСсылка.СчетКнигиПокупок") ИЛИ ТипОснования = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") И ЭтотОбъект.ОтчетАгентаПоРасходам.БезПодбораВаучера) 
			      И ЗначениеЗаполнено(ЭтотОбъект.ОтчетАгентаПоРасходам) Тогда
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеСФПеревыставление();
		//<-
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда   
			ДанныеДляПечати    = ЭтотОбъект.СобратьДанныеПоОтражениюРеализацииТоваровИУслугНДС();
		КонецЕсли;
		//<-                     
		
		Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;
		ПараметрыПечати = ПолучитьПараметрыПечатиСФ();
		Если ИмяМакета = "СчетФактураСНастройкой" Тогда
			ПараметрыПечати = ПараметрыПечатиНач;
		КонецЕсли;
		Если   ИмяМакета = "УведомлениеОПолучении" Тогда
			ТабДокумент = ЭтотОбъект.ПечатьУведомления(ДанныеДляПечати, ПараметрыПечати);
		Иначе
			//Rg-Soft Пахоменков А.С. >>
			//ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг();
			Если НЕ ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
				ОбщиеДанныеДляПечати = Неопределено;
				Если ОбщиеДанныеДляПечати = Неопределено Тогда
					ОбщиеДанныеДляПечати = ДанныеДляПечати;
				Иначе
					Для Каждого СтрДанных Из ДанныеДляПечати Цикл
						
						Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
							ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
							ТекущаяТабЧасть = СтрДанных.Значение;
							
							Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
								СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
							КонецЦикла;
						Иначе
							Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
								// Если данный параметр для печати шапки документа еще не  определен - то определяем его
								ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			
				Если ОбщиеДанныеДляПечати = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ТаблицаДатОплат = ЭтотОбъект.ДатаНомерДокументовОплаты.Выгрузить();
				ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
				СтрокиКУдалению = Новый массив();
				Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
					Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
						и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
						СтрокиКУдалению.Добавить(СтрокаОплат);
					КонецЕсли; 
				КонецЦикла; 
				Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					ТаблицаДатОплат.Удалить(СтрокаКУдалению);
				КонецЦикла; 
				
				ОбщиеДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
				
				Если УчетНДС.ПолучитьВерсиюПостановления(ЭтотОбъект.Дата) = 1 И Не (ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") И ЭтотОбъект.ДокументОснование.WHT) Тогда
					//ТабДокумент = ПечатьСчетаФактуры(ОбщиеДанныеДляПечати);
					Если ИмяМакета = "СчетФактураПоПостановлению1137" ИЛИ ИмяМакета = "СчетФактураПоПостановлению113СНастройкой" Тогда
						ТабДокумент = ЭтотОбъект.ПечатьСчетаФактуры2012(ОбщиеДанныеДляПечати, ПараметрыПечати);
					Иначе
						ТабДокумент = ЭтотОбъект.ПечатьСчетаФактуры(ДанныеДляПечати, ПараметрыПечати);
					КонецЕсли; 
				Иначе
					ТабДокумент = ЭтотОбъект.ПечатьСчетаФактуры2012(ОбщиеДанныеДляПечати, ПараметрыПечати);
				КонецЕсли;	
			Иначе
				ТабДокумент = ЭтотОбъект.ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати);  	
			КонецЕсли;
			//<<
		КонецЕсли;
	КонецЕсли;
	
	//ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
	Стр = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	
	Если Стр <> Неопределено Тогда
		Стр.ТабличныйДокумент = ТабДокумент;
		Стр.СинонимМакета = ИмяМакета;
		Стр.Картинка = Неопределено;
		Стр.ПолныйПутьКМакету = "";
	КонецЕсли;
	
	// Запомним номер строки, с которой начали выводить текущий документ.
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст	= ТекстЗапросаПечатьСчетовФактур();
	Результаты		= Запрос.ВыполнитьПакет();
	
	ПервыйДокумент = Истина;

	// { RGS LFedotova 23.12.2017 21:52:46 - вопрос SLI-0007442
	//ВыборкаСФ	= Результаты[0].Выбрать();
	ВыборкаСФ	= Результаты[0].Выгрузить();
	СчетФактура = ?(ВыборкаСФ.Количество(), ВыборкаСФ[0].СчетФактура, Неопределено);
	// } RGS LFedotova 23.12.2017 21:52:54 - вопрос SLI-0007442
	
	// В табличном документе зададим имя области, в которую был выведен объект.
	// Нужно для возможности печати покомплектно.
	// { RGS LFedotova 23.12.2017 21:52:46 - вопрос SLI-0007442
	//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
	//	НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
		1, ОбъектыПечати, СчетФактура);
	// } RGS LFedotova 23.12.2017 21:52:54 - вопрос SLI-0007442
	
КонецПроцедуры // Печать

Функция ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования = Неопределено) Экспорт
	Перем КодВидаОперации;
	
	Дата                      = СтруктураПараметров.Дата;
	ВидСчетаФактуры           = СтруктураПараметров.ВидСчетаФактуры;
	Исправление               = СтруктураПараметров.Исправление;
	ДоговорКонтрагента        = СтруктураПараметров.ДоговорКонтрагента;
	СчетФактураНеВыставляется = СтруктураПараметров.СчетФактураНеВыставляется;
	СчетФактураБезНДС         = СтруктураПараметров.СчетФактураБезНДС;
	ДокументыОснования        = СтруктураПараметров.ДокументыОснования;
	
	Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 1 Тогда
		Возврат СтруктураПараметров.КодВидаОперации;
	КонецЕсли;
	
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда		
		Если НЕ КодВидаОперацииОснования = Неопределено Тогда
			КодВидаОперации = КодВидаОперацииОснования;
			Возврат(КодВидаОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.СчетКнигиПокупок") Тогда
			КодВидаОперации = "06";
		ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			КодВидаОперации = "04"
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда		
		
		КодВидаОперации = "01";
				
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		
		КодВидаОперации = "01";
		
	Иначе
		
		КодВидаОперации = "01";
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

// Возвращает параметры печати по умолчанию
//
Функция ПолучитьПараметрыПечатиСФ() Экспорт

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьSIRВСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьSIRВСФ"));
	ПараметрыПечати.Вставить("ВыводитьДанныеОСкважинеВСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьДанныеОСкважинеВСФ"));
	ПараметрыПечати.Вставить("ВыводитьЗаголовокСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьЗаголовокСФ"));
	ПараметрыПечати.Вставить("ВыводитьЗаказНарядВСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьЗаказНарядВСФ"));
	ПараметрыПечати.Вставить("ВыводитьРасчетныйСчетВСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьРасчетныйСчетВСФ"));
	ПараметрыПечати.Вставить("ВыводитьДанныеОДоговореВСФ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьДанныеОДоговореВСФ"));
	ПараметрыПечати.Вставить("ВыводитьНомерАкта", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьНомерАкта"));
	//ПараметрыПечати.Вставить("ВыводитьУЕ", РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ВыводитьУЕ"));
	//добавила Федотова Л., РГ-Софт, 10.08.10 ->
	ПараметрыПечати.Вставить("ВыводитьСкидку", Ложь);
	ПараметрыПечати.Вставить("ПроцентСкидки", 20);
	//<-
	ПараметрыПечати.Вставить("ДоговорВШапке", Ложь);
	Возврат ПараметрыПечати;

КонецФункции // ПолучитьПараметрыПечатиСФ()

Функция ТекстЗапросаПечатьСчетовФактур()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка В(&МассивОбъектов)
	|	И ДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|
	// { RGS LFedotova 26.09.2018 22:11:12 - вопрос SLI-0007680
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|
	// } RGS LFedotova 26.09.2018 22:41:49 - вопрос SLI-0007680 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)
	|
	// { RGS LFedotova 01.02.2018 16:34:23 - вопрос S-B-0000276
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Перевыставление)
	|
	// } RGS LFedotova 01.02.2018 16:34:42 - вопрос S-B-0000276 
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|ГДЕ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

//Обновление на бух. корп. 3.0.38.43
Функция СоздатьДокументНаОсновании(Основание) Экспорт
	
	СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
	
	СчетФактура.Заполнить(Основание);
	
	РежимЗаписи = ?(Основание.Проведен, 
		РежимЗаписиДокумента.Проведение, 
		РежимЗаписиДокумента.Запись);
		
	СчетФактура.Записать(РежимЗаписи);
	
	Возврат СчетФактура.Ссылка;
	
КонецФункции
