&НаКлиенте
Перем ПараметрыОбработчикаОжидания; //ПроверкаКонтрагентов

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
////////////////////////////////////////////////////////////////////////

//СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры
//Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////

//СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
//Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
      
	ПодготовитьФормуНаСервере();
	
	Если Параметры.Свойство("КредитНотаСторно") Тогда
		Объект.Сделка = Параметры.Основание;
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно;
		
		Документы.РеализацияТоваровУслуг.СкопироватьПредоплату(Объект.Сделка, Объект);
				
		Документы.РеализацияТоваровУслуг.ИзменитьЗнак(-1, Объект);
		РассчитатьСуммыРуб();
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Ticket") Тогда 
		Ticket = Параметры.ЗначенияЗаполнения.Ticket;
	КонецЕсли;
	
	АктивизироватьТабличнуюЧасть = SalesBookСервер.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
		
	//СтандартныеПодсистемы.Свойства
	//УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ,"ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	//Конец СтандартныеПодсистемы.Свойства
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
    	Элементы.Номер.КнопкаСпискаВыбора = Ложь;
	Иначе
		Элементы.Номер.КнопкаСпискаВыбора = Истина;
	КонецЕсли;
	//[<-РКХ]
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//Конец СтандартныеПодсистемы.Свойства
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015

	Если ТекущийОбъект.Проведен Тогда
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	КонецЕсли;

	// { RGS AFokin 04.06.2017 23:59:59
	// проведенный ДокументIco доступен только на просмотр
	КонтрольПроведенияСервер.УстановитьТолькоПросмотрДляФормы(ЭтаФорма, ТекущийОбъект);
	// } RGS AFokin 04.06.2017 23:59:59

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	//Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	//Конец СтандартныеПодсистемы.Свойства
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
            	
	// Активизировать первую непустую табличную часть
	SalesBookКлиент.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
	Если ЗначениеЗаполнено(Объект.СписаниеОборудования) Тогда
		ЭтоCoGS = Истина;
	Иначе
		ЭтоCoGS = Ложь;
	КонецЕсли;
	УстановитьВидимостьПоCoGS(ЭтаФорма);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	// { RGS LFedotova 07.06.2018 12:23:11 - вопрос SLI-0007577
	Если РедактированиеНеРазрешено() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	// } RGS LFedotova 07.06.2018 12:23:36 - вопрос SLI-0007577

	НомерНачалоВыбораИзСписка(, );
	
КонецПроцедуры

&НаСервере
Функция РедактированиеНеРазрешено()

	Возврат Объект.ЭтоДокументБиллинга И НЕ (РольДоступна("ПолныеПрава") И НЕ ПользователиИнформационнойБазы.ТекущийПользователь().АутентификацияОС);	

КонецФункции // РедактированиеНеРазрешено()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);
	УправлениеДоступностьюCoGS(ЭтаФорма);

	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	УстановитьТекстСостоянияЭДНаСервере(); // RG-Soft ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ОповеститьОВыборе(Объект.Ссылка);
		
		Если ЗначениеЗаполнено(Ticket) Тогда
			СтруктураЗначений = Новый Структура("Реализация,Ticket");
			СтруктураЗначений.Реализация = Объект.Ссылка;
			СтруктураЗначений.Ticket = Ticket;
			Оповестить("Реализация", СтруктураЗначений);
		КонецЕсли;
		
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененФлагРучнаяКорректировка" Тогда 
		ЭтаФорма.Прочитать();
		ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный"
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли (ИмяСобытия = "ЗапускПроцессаУтверждения" или ИмяСобытия = "ОстановленПроцессУтверждения")
		И Параметр = Объект.Ссылка Тогда 
		ОбработкаПроцессаУтверждения();
	КонецЕсли;
	//СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли; 
	//Конец СтандартныеПодсистемы.Свойства
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	// } РГ-Софт Пахоменков А. 16.01.2015

	// { RG-Soft ЭДО
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;  // } RG-Soft ЭДО 
	
	// { SLI-0006169 - Notification KS - Добавила Петроченко НН
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" И Параметр.Свойство("ВладелецФайла")
		И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;  // // { SLI-0006169 - Notification KS - конец добавления 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ДокументРасчетовСКонтрагентом.Форма.ФормаВыбораУправляемая" Тогда
		
		Объект.Сделка = ВыбранноеЗначение.Ссылка;
		Модифицированность = Истина;
		СделкаОбработатьИзменение();
		
		УправлениеФормой(ЭтаФорма);
		
	//Добавила Федотова Л., РГ-Софт, 27.05.13, вопрос SLI-0003596	                    
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаПодбораCoGS" Тогда

		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение.Номенклатура;
		ТекущиеДанные.Количество = ВыбранноеЗначение.Количество;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	НомерНачалоВыбораИзСписка(, );

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	//Добавила Федотова Л., РГ-Софт, 19.10.15, вопрос SLI-0005899
	ПроверкаБюджетаКонтракта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ
////////////////////////////////////////////////////////////////////////
            
&НаКлиенте
Процедура Архив(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если Вопрос("Записать документ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Записать(Новый Структура) Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось записать текущий документ, "
			+ ОписаниеОшибки());
		Возврат;
		
	КонецЕсли;
	
	Объект.Архив = Не Объект.Архив;
	КоманднаяПанель.ПодчиненныеЭлементы.ФормаАрхив.Пометка = Объект.Архив;
	ЭтаФорма.ТолькоПросмотр = Объект.Архив;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыРуб(Команда)
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ ДОКУМЕНТЫ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Знак = 1;
		УстановитьКурсРасчетовПоСделке = Ложь;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно") ИЛИ
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ") Тогда
			
			Знак = -1;
			
			Если ЗначениеЗаполнено(Объект.Сделка) 
				И НЕ Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				Если Вопрос("Курс документа будет установлен в соответствии с курсом документа расчетов", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
					УстановитьКурсРасчетовПоСделке = Истина;
				КонецЕсли; 
			Иначе
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить документ расчетов.");
				КонецЕсли; 
			КонецЕсли; 
			
			Элементы.ФормаПровестиИЗакрыть.Доступность = Ложь;
			Элементы.ФормаПровести.Доступность         = Ложь;
			
		КонецЕсли;
		
		ВидОперацииОбработатьИзменение(УстановитьКурсРасчетовПоСделке, Знак);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НомерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		
		//СтандартнаяОбработка = Ложь;
		//Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		//	Предупреждение(ВернутьСтр("ru = 'Документ не записан. Сначала следует записать документ.'"));
		//	Возврат;
		//КонецЕсли;
		//Если Модифицированность Тогда
		//	Предупреждение(ВернутьСтр("ru = 'Документ был изменен. Сначала следует записать документ.'"));
		//	Возврат;
		//КонецЕсли;
		//
		//СписокНомеров = SalesBook.ПолучитьСписокНаименованийРеализацииТиУ(Объект.Ссылка);	
		//Объект.Номер = ВыбратьИзСписка(СписокНомеров, Элементы.Номер);
	Иначе
		Если Параметры.Ключ.Пустая() Тогда
			Док = Неопределено;
		Иначе
			Док = Объект.Ссылка;
		КонецЕсли;
		
		МассивТикетов = Новый Массив;
		МассивКостЦентров = Новый Массив;
		Для каждого Строка Из Объект.Товары Цикл
			МассивТикетов.Добавить(Строка.Ticket);              
			МассивКостЦентров.Добавить(Строка.КостЦентр);
		КонецЦикла; 
		
		Для каждого Строка Из Объект.Услуги Цикл
			МассивТикетов.Добавить(Строка.Ticket);
			МассивКостЦентров.Добавить(Строка.КостЦентр);
		КонецЦикла; 

		СписокНомеров = SalesBook.ПолучитьСписокНаименованийРеализацииТиУ(Док, МассивТикетов, МассивКостЦентров);	
		//Объект.Номер = ВыбратьИзСписка(СписокНомеров, Элементы.Номер);
		Элементы.Номер.СписокВыбора.Очистить();
		МассивНомеров = Новый Массив;
		Для к = 1 По СписокНомеров.Количество() Цикл
			МассивНомеров.Добавить(СписокНомеров[к-1].Значение);
		КонецЦикла; 
		Элементы.Номер.СписокВыбора.ЗагрузитьЗначения(МассивНомеров);
	КонецЕсли;    
	//[<-РКХ]    

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменитьКурсВзаиморасчетов = Ложь;
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		Если Вопрос("Изменилась дата документа. Изменить курс взаиморасчетов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ИзменитьКурсВзаиморасчетов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	// { RGS VChaplygin 12.08.2016 1:04:39 - TriggerDate - ERM'
	ДатаКСПриИзмененииНаСервере();
	// } RGS VChaplygin 12.08.2016 1:04:51 - TriggerDate - ERM'
	
КонецПроцедуры
    
 &НаКлиенте
Процедура ДатаПроведенияПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		//Добавила Федотова Л., РГ-Софт, 02.10.13, вопрос PA_-0000022  ->
		Если Объект.ПодразделениеОрганизации.Пустая() Тогда
			Объект.ПодразделениеОрганизации = ВернутьПодразделение(Объект.Контрагент);
		КонецЕсли; 
		//<-      
	КонецЕсли;
	//[<-РКХ]
	
	Если НЕ ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		ЗаполнитьСписокАдресовДоставки();
		Если Элементы.АдресДоставки.СписокВыбора.Количество() > 0 Тогда
			Объект.АдресДоставки = Элементы.АдресДоставки.СписокВыбора[0].Значение;
		Иначе
			Объект.АдресДоставки = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
  
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ДоговорКонтрагентаОбработатьИзменение();
		
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметров  = Новый Структура("Организация,Контрагент,ДоговорКонтрагента,КонецПериода,СторонаСчета", 
									Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента,Объект.Дата-1, 1);

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно") Тогда
		SalesBookКлиент.ВыборРасчетногоДокумента(СтруктураПараметров, ЭтаФорма, Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	Иначе	
		SalesBookКлиент.ВыборРасчетногоДокумента(СтруктураПараметров, ЭтаФорма, SalesBookСервер.ПолучитьТипыДокументовРасчетов("РеализацияТоваровУслуг","Сделка"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда 
		СделкаОбработатьИзменение();
	КонецЕсли;
	          	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)

    ЗаполнениеУполномоченныхЛиц();
	
КонецПроцедуры
              
////////////////////////////////////////////////////////////////////////
// ЦЕНЫ И ВАЛЮТА
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	СтруктураЦеныИВалюта = ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДоИзменения);

	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") 
		И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;

		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			СтруктураЦеныИВалюта.ПересчитатьЦены, 
			ПересчитатьНДС);
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС);
	Форма.ЦеныИВалюта = SalesBookКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

	Если Объект.ВалютаДокумента <> Форма.ВалютаUSD Тогда
		//Закомментировала федотова Л.. РГ-Софт, 09.01.13, вопрос SLI-0003126
		//Элементы.ФормаДокументРеализацияТоваровУслугПечатьАктPetrosakh.Видимость = Ложь;
		//Элементы.ФормаДокументРеализацияТоваровУслугПечатьАктДляExxon.Видимость = Ложь;
	КонецЕсли;
	          		
КонецПроцедуры 

&НаКлиенте
Функция ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	//Добавила Федотова Л., РГ-Софт ->
	СтруктураПараметров.Вставить("КурсРасчетов",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьРасчетов",            Объект.КратностьВзаиморасчетов);
	//<-
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	// 2. Открываем форму "Цены и Валюта".
	СтруктураЦеныИВалюта = ОткрытьФормуМодально("ОбщаяФорма.ФормаЦеныИВалютаТонкая", СтруктураПараметров);

	Возврат СтруктураЦеныИВалюта;

КонецФункции

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если НЕ (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		Возврат;
	КонецЕсли;

	Если ПересчитатьЦены Тогда
		Если НЕ Объект.ДоговорКонтрагента.Курс = 0 Тогда
		    СтруктураКурса = Новый Структура("Кратность,Курс", 1, Объект.ДоговорКонтрагента.Курс);
		Иначе
			СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли; 
	КонецЕсли;

	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаДоИзменения, СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаДоИзменения, СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;

	РассчитатьСуммыРуб();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ВалютаПередИзменением, СтруктураКурса,
										ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС,
										ЗначениеПустогоКоличества)

	Если ПересчитатьЦены Тогда

		Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов,
			Объект.КратностьВзаиморасчетов, 1, 1);
		Иначе
			Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			СтруктураКурса.Кратность, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов);
		КонецЕсли;
		
	Иначе
		Цена = Строка.Цена;
	КонецЕсли;
	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	//Изменила Федотова Л., РГ-Софт, 27.02.13, вопрос SLI-0003359
	//ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	
	Если ЕстьНДС Тогда

		Строка.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, Неопределено, ЦенаВключаетНДС, ЕстьНДС, Объект.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(Строка.Сумма, ЕстьНДС, Объект.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

	Иначе
		Строка.Цена = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры
  
////////////////////////////////////////////////////////////////////////
// ---------------------  СТРАНИЦЫ ------------------------
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ТОВАРЫ/ОБОРУДОВАНИЕ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИзменитьЗаголовки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьТикеты(Команда)
	
	ЗаполнитьТикеты("Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуТовары(Команда)
	
	ЗаполнитьПоСчету("Товары");
	
КонецПроцедуры
     
&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.ФормаУправляемая", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыWOНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWO = ПолучитьСписокWO(Объект.ДоговорКонтрагента);
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	СтароеЗначение = ТекДанные.WO;
	
	Результат = ВыбратьИзСписка(СписокWO, Элемент);
	Если Результат = Неопределено Тогда
		ТекДанные.WO = СтароеЗначение;
	Иначе
		ТекДанные.WO = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыTicketНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда 
		ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		ПараметрыФормы.Вставить("Договор", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ПараметрыФормы.Количество() > 0 Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.Tickets.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыTicketОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Tickets") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Элементы.Товары.ТекущиеДанные.Ticket = ВыбранноеЗначение;
		
		Модифицированность = Истина;
		
		TicketОбработатьИзменение("Товары");

	КонецЕсли; 
	
КонецПроцедуры
  
&НаКлиенте
Процедура ТоварыКостЦентрПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.КостЦентр) Тогда
		ТекДанные.ProductLine = ПолучитьProductLine(ТекДанные.КостЦентр);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
			
	НоменклатураОбработатьИзменение("Товары", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Товары");
	
КонецПроцедуры
        
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Товары");
	
КонецПроцедуры
      
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("Товары");
	
КонецПроцедуры
       
&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыНДС("Товары");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Заполнение ТЧ Для NY / из Excel

&НаКлиенте
Процедура ЗаполнениеТЧДляNY(Команда)
	
	ПрочитатьExcelиЗаполнитьТЧ("Товары", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТЧИзExcelТовары(Команда)
	
	ПрочитатьExcelиЗаполнитьТЧ("Товары");
	
КонецПроцедуры
          
&НаКлиенте
Функция ВыбратьФайл()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						= "Files xls (*.xls)|*.xls|Files xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	= Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Возврат ДиалогВыбораФайла.ПолноеИмяФайла;
				
	КонецЕсли;
           	
КонецФункции


////////////////////////////////////////////////////////////////////////
// СТРАНИЦА УСЛУГИ
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗаполнениеТЧИзExcelУслуги(Команда)
	
	ПрочитатьExcelиЗаполнитьТЧ("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаполнитьТикеты(Команда)
	
	ЗаполнитьТикеты("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуУслуги(Команда)
	
	ЗаполнитьПоСчету("Услуги");	
	
КонецПроцедуры
 
&НаКлиенте
Процедура УслугиWOНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокWO = ПолучитьСписокWO(Объект.ДоговорКонтрагента);
	
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
	СтароеЗначение = ТекДанные.WO;
	
	Результат = ВыбратьИзСписка(СписокWO, Элемент);
	Если Результат = Неопределено Тогда
		ТекДанные.WO = СтароеЗначение;
	Иначе
		ТекДанные.WO = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиTicketНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Подразделение", Объект.ПодразделениеОрганизации);
		ОткрытьФорму("Документ.Tickets.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиTicketОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Tickets") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Элементы.Услуги.ТекущиеДанные.Ticket = ВыбранноеЗначение;
		
		Модифицированность = Истина;
		
		TicketОбработатьИзменение("Услуги");

	КонецЕсли; 
	 	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКостЦентрПриИзменении(Элемент)
	
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.КостЦентр) Тогда
		ТекДанные.ProductLine = ПолучитьProductLine(ТекДанные.КостЦентр);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	НоменклатураОбработатьИзменение("Услуги", Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Услуги");	
	
КонецПроцедуры
               
&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличестваЦены("Услуги");
	
КонецПроцедуры
           
&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммы("Услуги");
	
КонецПроцедуры
            
&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДС("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыНДС("Услуги");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ДОПОЛНИТЕЛЬНО
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОрганизацияОбработатьИзменение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ЗаполнитьСписокАдресовДоставки();
	Если Элементы.АдресДоставки.СписокВыбора.Количество() > 0 Тогда
		Объект.АдресДоставки = Элементы.АдресДоставки.СписокВыбора[0].Значение;
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
КонецПроцедуры
       
&НаКлиенте
Процедура БанковскийСчетОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокБанковскихСчетов = SalesBook.ПолучитьСписокСчетов(Объект.ПодразделениеОрганизации, Объект.Дата);
	ЭлементСписка = ВыбратьИзСписка(СписокБанковскихСчетов, Элементы.БанковскийСчетОрганизации);

	Если ЭлементСписка <> Неопределено Тогда 
		Объект.БанковскийСчетОрганизации = ЭлементСписка.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 И Не ЗначениеЗаполнено(Объект.Склад) Тогда 
		Элементы.Склад.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ПРЕДОПЛАТА
////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПредоплатаСуммаПриИзменении(Элемент)
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПослеУдаления(Элемент)
	
	РассчитатьСуммыРуб();	
	
КонецПроцедуры

//КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьПоСчетам(Команда)
	
	СчетаНаПредоплату = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Предоплата, "СчетНаОплату");
	СчетаНаПредоплату.Добавить(Объект.СчетНаОплату);
		
	Объект.Предоплата.Очистить();
	
	ЗаполнитьПоСчетамНаСервере(СчетаНаПредоплату);
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСчетамНаСервере(СчетаНаПредоплату)
	
	КПодбору = Объект.СуммаДокумента;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВзаиморасчетыСПокупателямиОстатки.Сделка КАК ДокументАванса,
	|	-ВзаиморасчетыСПокупателямиОстатки.СуммаРеглОстаток КАК Сумма,
	|	-ВзаиморасчетыСПокупателямиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПокупателямиОстатки.СчетНаПредоплату КАК СчетНаПредоплату
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&МоментВремени, СчетНаПредоплату В (&СчетаНаПредоплату)) КАК ВзаиморасчетыСПокупателямиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСПокупателямиОстатки.Сделка.Дата");
	
	//изменила Федотова Л., РГ-Софт, 30.05.13, вопрос SLI-0003610
	//Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Запрос.УстановитьПараметр("МоментВремени", КонецДня(Объект.ДатаПроведения));
	Запрос.УстановитьПараметр("СчетаНаПредоплату", СчетаНаПредоплату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() и КПодбору > 0 Цикл 
		
		СтрокаТЧ = Объект.Предоплата.Добавить();
		СуммаВал = ?(Выборка.СуммаВзаиморасчетов > КПодбору, КПодбору, Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.ДокументАванса = Выборка.ДокументАванса;
		СтрокаТЧ.КурсАванса = ?(Выборка.СуммаВзаиморасчетов=0,0, 
								Выборка.Сумма/Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.Сумма = ?(Выборка.СуммаВзаиморасчетов=0,0,
						   СуммаВал*Выборка.Сумма/Выборка.СуммаВзаиморасчетов);
		СтрокаТЧ.СуммаВзаиморасчетов = СуммаВал;
		СтрокаТЧ.СчетНаОплату = Выборка.СчетНаПредоплату;
		
		КПодбору = КПодбору - СуммаВал;
					
	КонецЦикла;	

	РассчитатьСуммыРуб();
	
КонецПроцедуры
           
////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА
////////////////////////////////////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетФактуру(Форма) 

	Объект = Форма.Объект;
	ЗаполнитьЗначенияСвойств(Форма, SalesBookКлиентСервер.ДанныеНадписиОСчетеФактуреВыданном(
		Объект.Ссылка,
		Истина));
	
КонецПроцедуры
	
&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	SalesBookКлиент.ОткрытьВыданныйСчетФактуру(ЭтаФорма, СчетФактура);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элемент);
	// } РГ-Софт Пахоменков А. 16.01.2015
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СЧЕТ НА ОПЛАТУ ПОКУПАТЕЛЮ
////////////////////////////////////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстПроСчетНаОплату(Форма) 

	Объект = Форма.Объект;
	ЗаполнитьЗначенияСвойств(Форма, SalesBookКлиентСервер.ДанныеНадписиОСчетеНаОплату(Объект.Ссылка));
	
КонецПроцедуры
	
&НаКлиенте
Процедура НадписьСчетНаОплатуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	SalesBookКлиент.ОткрытьСчетНаОплатуПокупателю(ЭтаФорма, СчетНаОплату);
 	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////

// ПОДГОТОВКА ФОРМЫ И УПРАВЛЕНИЕ ЭЛЕМЕНТАМИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаUSD = Справочники.Валюты.НайтиПоНаименованию("USD");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьДаннымиПоУмолчанию();
	КонецЕсли;
	
	// Проверка ведения однофирменности 
	Элементы.Организация.ТолькоПросмотр = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "УчетПоВсемОрганизациям");	

	ЭтаФорма.ТолькоПросмотр = Объект.Архив;
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	// { RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	//РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, Объект); 
	текОБ = РеквизитФормыВЗначение("Объект");	
	РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, текОБ); 
	// } RGS LFedotova 14.03.2017 - вопрос SLI-0007188
	
	ЗаполнитьСписокАдресовДоставки();
	
	ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	ЗаполнитьТекстПроСчетНаОплату(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьТекстСостоянияЭДНаСервере(); // RG-Soft ЭДО
	УстановитьВидЭД();  // RG-Soft ЭДО
	
	// { RGS LFedotova 08.06.2018 12:49:20 - вопрос SLI-0007578
	Если Параметры.Ключ.Пустая() Тогда
		ЭтоДокументБиллинга = Ложь;
	КонецЕсли; 
	// } RGS LFedotova 08.06.2018 12:49:24 - вопрос SLI-0007578 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекущийПользователь, ВалютаРегламентированногоУчета, "Продажа");
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект); 
	
	Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Объект.Руководитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ДиректорПоУмолчанию");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Объект.ГлавныйБухгалтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ГлавныйБухгалтерПоУмолчанию");
	КонецЕсли;          
	
КонецПроцедуры

&НаСервере
Функция СписокВидимыхТабличныхЧастей()
	
	СписокТЧ = Новый СписокЗначений;       
	
	СписокТЧ.Добавить("Товары", "Товары");
	СписокТЧ.Добавить("Услуги", "Услуги");
	
	Возврат СписокТЧ;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма)

	Объект = Форма.Объект;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;         
                             
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

	Элементы = Форма.Элементы;
	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Форма.Объект.ВидОперации));
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров);
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Если НЕ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДляКредитНоты(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Сделка.Доступность = (СпособВеденияВзаиморасчетов(Объект.ДоговорКонтрагента) = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам") 
									ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно")  
									ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ"));
	                                         
    Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно") Тогда
		Элементы.ГруппаТовары.Доступность         = Истина;
		Элементы.ГруппаУслуги.Доступность         = Истина;
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
		Элементы.Корректировка.Доступность        = Истина;
		Элементы.Предоплата.ТолькоПросмотр        = Истина;
		Элементы.ЗаполнитьПоСчетам.Доступность    = Ложь;
		
		Элементы.ФормаДокументРеализацияТоваровУслугПечатьАктМосква.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота") Тогда
		Элементы.ГруппаТовары.Доступность         = Ложь;
		Элементы.ГруппаУслуги.Доступность         = Ложь;
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
		Элементы.Корректировка.Доступность        = Истина;
		
		Элементы.ФормаДокументРеализацияТоваровУслугПечатьАктМосква.Видимость = Истина;
	Иначе
		Элементы.ГруппаТовары.Доступность         = Истина;
		Элементы.ГруппаУслуги.Доступность         = Истина;
		Элементы.Сделка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Корректировка.Доступность        = Ложь;
		
		Элементы.ФормаДокументРеализацияТоваровУслугПечатьАктМосква.Видимость = Ложь;
	КонецЕсли;
	          	
		
КонецПроцедуры // УстановитьВидимость()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	КонтрагентДоставки = ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент);
	Элементы.АдресДоставки.Доступность            = ЗначениеЗаполнено(КонтрагентДоставки);
	
	Элементы.Принципал.Доступность = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.РеализацияАгент"));
	     		
	ЭтоКомиссия = ВидДоговораКомиссия(Объект.ДоговорКонтрагента);
	Если ЭтоКомиссия И Объект.Услуги.Количество() > 0 Тогда
		Объект.Услуги.Очистить(); // На комиссию передать услуги нельзя
	КонецЕсли;
    Элементы.ГруппаУслуги.Видимость = НЕ ЭтоКомиссия;
	
	УстановитьВидимостьДляКредитНоты(Форма);
	УстановитьВидимостьПоCoGS(Форма);
	УправлениеДоступностьюCoGS(Форма);
	
	ИзменитьЗаголовки(Форма);
	
	// { RGS VChaplygin 15.08.2016 10:40:10 - SLI-0006667 Добавим описание расчета платежа
	Форма.ermОписаниеПараметровПлатежа = РГСофт.ПолучитьНадписьПараметровРасчетаПлатежа(Объект);
	// } RGS VChaplygin 15.08.2016 10:42:05 - SLI-0006667 Добавим описание расчета платежа
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗаголовки(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	   		             	
	// СТРАНИЦЫ
	
	// Подсчитаем количество строк в табличных частях.
	ЗаголовокГруппыТовары = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование"),
													"Оборудование (", "Товары (");
	ТоварыКоличество = Объект.Товары.Количество();
												
	Элементы.ГруппаТовары.Заголовок = ЗаголовокГруппыТовары + ТоварыКоличество + " поз.)";
		
	Элементы.ГруппаУслуги.Заголовок       = "Услуги (" + Объект.Услуги.Количество() + " поз.)";
	Элементы.ГруппаПредоплата.Заголовок   = "Предоплата (" + Объект.Предоплата.Количество() + " поз.)";
	
	КолонкиТоваров = Элементы.Товары.ПодчиненныеЭлементы;
	КолонкиУслуг   = Элементы.Услуги.ПодчиненныеЭлементы;

	// Колонки налога показываем только тогда, когда его учитываем.
	КолонкиТоваров.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КолонкиТоваров.ТоварыСуммаНДС.Видимость  = Объект.УчитыватьНДС;

	КолонкиУслуг.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КолонкиУслуг.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	    		
	Если ТоварыКоличество > 0 И Не ЗначениеЗаполнено(Объект.Склад) Тогда 
		Элементы.Склад.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;	
		
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

	ЗаголовокЦена = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Цена с НДС'"), ВернутьСтр("ru='Цена без НДС'"));
	ЗаголовокСумма = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Сумма с НДС'"), ВернутьСтр("ru='Сумма без НДС'"));
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.УслугиЦена.Заголовок = ЗаголовокЦена;
	Элементы.УслугиСумма.Заголовок = ЗаголовокСумма;
	
	Элементы.ИтогиВсегоНДС.Заголовок = ?(Объект.СуммаВключаетНДС, "НДС (в т. ч.):", "НДС (сверху):");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
         		
	Форма.ИтогиВсего    = Форма.Объект.Товары.Итог("Всего");
	Форма.ИтогиВсегоНДС = Форма.Объект.Товары.Итог("СуммаНДС");
	
	Форма.ИтогиВсего = Форма.ИтогиВсего
							+ Форма.Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Форма.ИтогиВсегоНДС
							+ Форма.Объект.Услуги.Итог("СуммаНДС");
							
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроцессаУтверждения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораКомиссия(ДоговорКонтрагента)
	
	Возврат ?(ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, Истина, Ложь);

КонецФункции

&НаСервереБезКонтекста
Функция СпособВеденияВзаиморасчетов(ДоговорКонтрагента)
	
	Возврат ДоговорКонтрагента.ВедениеВзаиморасчетов;

КонецФункции

//ОБРАБОТКА СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ИзменитьКурсВзаиморасчетов)
	
	//Изменила Федотова Л., РГ-Софт, 21.07.15, вопрос SLI-0005613
	//ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ДокОбъект = РеквизитФормыВЗначение("Объект");
	Исключение 
		ДокОбъект = Объект.Ссылка.ПолучитьОбъект();
	КонецПопытки;
	//Конец изменения
	
	SalesBookСервер.ПроверитьНомерДокумента(ДокОбъект, Объект.Дата);
	
	НастройкаПравДоступа.УстановитьДатуПроведенияДокумента(ДокОбъект);
	НастройкаПравДоступа.УстановитьНалоговыйПериодДокумента(ДокОбъект);
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
 	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
	Если ИзменитьКурсВзаиморасчетов Тогда 
		СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		//Изменила Федотова Л., РГ-Софт, 27.02.13, вопрос SLI-0003359
		//ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента,,Истина);
		ЗаполнитьРассчитатьСуммы(Объект.ВалютаДокумента,Истина,Истина);
		//Добавила Федотова Л., РГ-Софт, 27.02.13, вопрос SLI-0003359
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	                    	
КонецПроцедуры
    
&НаСервере
Процедура ВидОперацииОбработатьИзменение(УстановитьКурсРасчетовПоСделке, Знак)
	
	Документы.РеализацияТоваровУслуг.ИзменитьЗнак(Знак, Объект);
	
	Если УстановитьКурсРасчетовПоСделке Тогда 
		Объект.КурсВзаиморасчетов      = Объект.Сделка.КурсВзаиморасчетов;
		Объект.КратностьВзаиморасчетов = Объект.Сделка.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		SalesBookСервер.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
	КонецЕсли;
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	ОбщегоНазначения.УстановитьНомерДокумента(Объект);

	ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделениеОрганизации");
	
	// Если ПодразделениеОрганизации не заполнено.
	Если Не ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		
		// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
		Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
			Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		КонецЕсли;
		
	Иначе // Если ПодразделениеОрганизации заполнено.
		
		// Если ПодразделениеОрганизации не соответствует выбранной организации.
		Если Объект.ПодразделениеОрганизации.Владелец = Объект.Организация Тогда
			
			// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Объект.Организация Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
				Объект.ПодразделениеОрганизации = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		СписокБанковскихСчетов = SalesBook.ПолучитьСписокСчетов(Объект.ПодразделениеОрганизации, Объект.Дата);
		Объект.БанковскийСчетОрганизации = СписокБанковскихСчетов[0].Значение; 
	КонецЕсли;

	КонтрагентОбработатьИзменение();
			
КонецПроцедуры
  
&НаСервере
Процедура КонтрагентОбработатьИзменение()
	   	
	SalesBookСервер.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));

	ДоговорКонтрагентаОбработатьИзменение();
	
	// { RGS AKozhevnikova - вопрос RCA-0000242
	Если Прав(Объект.Контрагент.LawsonID,2) = "OC" Тогда
		Объект.ЭтоДокументИнтеркомпани = Истина;	
	Иначе
		Объект.ЭтоДокументИнтеркомпани = Ложь;
	КонецЕсли;
	// } RGS AKozhevnikova 

КонецПроцедуры
   
&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	Сделка = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS LFedotova 03.08.2016 14:36:34 - вопрос SLI-0006667
	РГСофт.РассчитатьTriggerDate(Объект);
	ermОписаниеПараметровПлатежа = РГСофт.ПолучитьНадписьПараметровРасчетаПлатежа(Объект);
	// } RGS LFedotova 03.08.2016 14:36:52 - вопрос SLI-0006667 
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,Владелец,ВидДоговора");

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
         		
	Если Объект.Товары.Количество() > 0 или Объект.Услуги.Количество() > 0 Тогда
	
		ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
			ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
		ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, ПересчитатьЦены, ПересчитатьНДС);
	
	КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура СделкаОбработатьИзменение()
	         		
	ЗаполнитьПоСделке(Объект.Сделка);
	    	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		Документы.РеализацияТоваровУслуг.ИзменитьЗнак(-1, Объект);
		Объект.Дата = Объект.Сделка.Дата;	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
		Документы.РеализацияТоваровУслуг.ИзменитьЗнак(1, Объект);
	КонецЕсли;	
	
	РассчитатьСуммыРуб();
		
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнениеУполномоченныхЛиц()
	
	Объект.ГлавныйБухгалтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ГлавныйБухгалтерПоУмолчанию");
	Объект.Руководитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Объект.Ответственный, "ДиректорПоУмолчанию");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАдресовДоставки()

	Элементы.АдресДоставки.СписокВыбора.Очистить();
	КонтрагентДоставки = ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент);
	Если НЕ ЗначениеЗаполнено(КонтрагентДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		КонтрагентДоставки, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Для каждого Адрес Из Адреса Цикл
		Элементы.АдресДоставки.СписокВыбора.Добавить(Адрес.Значение, "" + Адрес.Вид + ": " + Адрес.Значение);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалоговогоПериодаИЛИДатыПроведения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	РГСофт.УстановитьИнформационнуюНадписьНалоговыйПериод(Элементы.инфНадписьНалоговыйПериод, Объект.НалоговыйПериод);
	
КонецПроцедуры

// ЦЕНЫ, СУММЫ

&НаСервере
Процедура РассчитатьСуммыРуб() 

	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Для каждого Строка Из Объект.Товары Цикл
			Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
			Строка.СуммаНДСРуб = Строка.СуммаНДС;
		КонецЦикла; 
		Для каждого Строка Из Объект.Услуги Цикл
			Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
			Строка.СуммаНДСРуб = Строка.СуммаНДС;
		КонецЦикла; 
	Иначе
		
		СуммаПредоплатыВал = Объект.Предоплата.Итог("СуммаВзаиморасчетов");
		СуммаПредоплатыРуб = Объект.Предоплата.Итог("Сумма");
		ТоварыУслугиИтогСумма = Объект.Товары.Итог("Сумма")+Объект.Услуги.Итог("Сумма");
		
		//Распределим предоплату по строкам товаров и услуг
		СуммаВалВсего = ?(Объект.СуммаВключаетНДС, ТоварыУслугиИтогСумма, 
						 ТоварыУслугиИтогСумма + Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС"));
		Если СуммаВалВсего = 0 Тогда
			Возврат;
		КонецЕсли; 
		//Проверим правильность задания суммы предоплаты
		Если Объект.ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			Если СуммаПредоплатыВал > 0 И СуммаПредоплатыВал > СуммаВалВсего Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неправильное соотношение суммы документа и суммы взаиморасчетов предоплаты.
				|Сумма взаиморасчетов предоплаты не может превышать сумму документа!");
			КонецЕсли; 
		КонецЕсли; 

		КурсВзаиморасчетов = Объект.КурсВзаиморасчетов;
		Коэф = СуммаПредоплатыВал/СуммаВалВсего;
		Если Объект.Предоплата.Количество() > 0 Тогда
			ДокументПредоплаты = Объект.Предоплата[0].ДокументАванса;
			Если НЕ ДокументПредоплаты.Пустая() Тогда
				КурсПредоплаты = ДокументПредоплаты.РасшифровкаПлатежа[0].КурсВзаиморасчетов;
				Если КурсВзаиморасчетов = КурсПредоплаты Тогда
					Коэф = 1;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		Для каждого Строка Из Объект.Товары Цикл
			Если Коэф = 0 Тогда
				Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Окр((Строка.Сумма - Строка.СуммаНДС) * КурсВзаиморасчетов,2),Окр(Строка.Сумма * КурсВзаиморасчетов,2)); 
				Строка.СуммаНДСРуб = Окр(Строка.СуммаНДС * КурсВзаиморасчетов,2); 
			Иначе
				СтрокаСуммаВсего = ?(Объект.СуммаВключаетНДС,Строка.Сумма,Строка.Сумма + Строка.СуммаНДС); 
				СтрокаСуммаВсегоРуб = Окр(СтрокаСуммаВсего * (1-Коэф) * КурсВзаиморасчетов
				+ СуммаПредоплатыРуб * Строка.Сумма/ТоварыУслугиИтогСумма,2);
				Строка.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаВсегоРуб, Объект.УчитыватьНДС,Истина, 
									 УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				Строка.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - Строка.СуммаНДСРуб; 
			КонецЕсли; 
		КонецЦикла; 
		Для каждого Строка Из Объект.Услуги Цикл
			Если Коэф = 0 Тогда
				Строка.СуммаБезНДСРуб = ?(Объект.СуммаВключаетНДС, Окр((Строка.Сумма - Строка.СуммаНДС) * КурсВзаиморасчетов,2),Окр(Строка.Сумма * КурсВзаиморасчетов,2)); 
				Строка.СуммаНДСРуб = Окр(Строка.СуммаНДС * КурсВзаиморасчетов,2); 
				СтрокаСуммаВсегоРуб = Строка.СуммаБезНДСРуб + Строка.СуммаНДСРуб;
			Иначе
				СтрокаСуммаВсего = ?(Объект.СуммаВключаетНДС,Строка.Сумма,Строка.Сумма + Строка.СуммаНДС); 
				СтрокаСуммаВсегоРуб = Окр(СтрокаСуммаВсего * (1-Коэф) * КурсВзаиморасчетов
				+ СуммаПредоплатыРуб * Строка.Сумма/(ТоварыУслугиИтогСумма),2);
				Строка.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаВсегоРуб, Объект.УчитыватьНДС,Истина, 
									 УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				Строка.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - Строка.СуммаНДСРуб; 
			КонецЕсли; 
		КонецЦикла; 
		
		Если СуммаПредоплатыРуб = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		СуммаРаспределения = СуммаПредоплатыВал;
		СуммаРубИтого = Объект.Товары.Итог("СуммаБезНДСРуб") + Объект.Товары.Итог("СуммаНДСРуб")                
						+ Объект.Услуги.Итог("СуммаБезНДСРуб") + Объект.Услуги.Итог("СуммаНДСРуб");
		
		Если СуммаВалВсего = СуммаРаспределения Тогда
			//Проверим, сходятся ли суммы
			Если СуммаРубИтого <> СуммаПредоплатыРуб Тогда
				Превышение = СуммаРубИтого - СуммаПредоплатыРуб; 
				//отнимем его из последней строчки товаров или услуг
				КоличествоСтрокТоваров = Объект.Товары.Количество();
				КоличествоСтрокУслуг = Объект.Услуги.Количество();
				Если КоличествоСтрокТоваров > 0 Тогда
					ПоследняяСтрокаТовары = Объект.Товары[КоличествоСтрокТоваров - 1];
					СтрокаСуммаРубВсего = ПоследняяСтрокаТовары.СуммаБезНДСРуб + ПоследняяСтрокаТовары.СуммаНДСРуб - Превышение; 
					//заново рассчитаем НДС
					ПоследняяСтрокаТовары.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаРубВсего, Объект.УчитыватьНДС,Истина, 
										 УчетНДС.ПолучитьСтавкуНДС(ПоследняяСтрокаТовары.СтавкаНДС));
					
					ПоследняяСтрокаТовары.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - ПоследняяСтрокаТовары.СуммаНДСРуб; 
				ИначеЕсли КоличествоСтрокУслуг > 0 Тогда
					ПоследняяСтрокаУслуги = Объект.Услуги[КоличествоСтрокУслуг - 1];
					СтрокаСуммаРубВсего = ПоследняяСтрокаУслуги.СуммаБезНДСРуб + ПоследняяСтрокаУслуги.СуммаНДСРуб - Превышение; 
					//заново рассчитаем НДС
					ПоследняяСтрокаУслуги.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаРубВсего, Объект.УчитыватьНДС,Истина, 
										 УчетНДС.ПолучитьСтавкуНДС(ПоследняяСтрокаУслуги.СтавкаНДС));
					
					ПоследняяСтрокаУслуги.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - ПоследняяСтрокаУслуги.СуммаНДСРуб; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры
       
// КОМАНДЫ

// ЗАПОЛНИТЬ ПО СДЕЛКЕ

&НаСервере
Процедура ЗаполнитьПоСделке(Основание) 
	
	SalesBookСервер.ЗаполнитьШапкуДокументаПоОснованию(Объект, Объект.Ссылка, Основание);

	Документы.РеализацияТоваровУслуг.СкопироватьТовары(Основание, Объект);
	Документы.РеализацияТоваровУслуг.СкопироватьУслуги(Основание, Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		Документы.РеализацияТоваровУслуг.СкопироватьПредоплату(Основание, Объект);
	КонецЕсли;
	
КонецПроцедуры
       
// ЗАПОЛНЕНИЕ ТАБЛИЦ
     
&НаКлиенте
Процедура ЗаполнитьТикеты(ИмяТабЧасти)
	
	ТабЧасть = Объект[ИмяТабЧасти];
	
	Если ТабЧасть.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Тикет = ТабЧасть[0].Ticket;
	Если ВвестиЗначение(Тикет, "Укажите тикет:") Тогда 
		
		Для Каждого СтрокаТЧ ИЗ ТабЧасть Цикл
			СтрокаТЧ.Ticket = Тикет;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчету(ИмяТабЧасти)

	ПараметрыФормы = Новый Структура("Организация", объект.Организация);
	
	Основание = ОткрытьФормуМодально("Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбораУправляемая", ПараметрыФормы, ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть = Объект[ИмяТабЧасти];
	Если ТабЧасть.Количество() > 0 Тогда
		
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		ТабЧасть.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоСчету(Основание, ИмяТабЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоСчету(Основание, ИмяТабЧасти)
	
	Если ИмяТабЧасти = "Товары" Тогда
		Документы.РеализацияТоваровУслуг.СкопироватьТовары(Основание, Объект);
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		Документы.РеализацияТоваровУслуг.СкопироватьУслуги(Основание, Объект);
	КонецЕсли

КонецПроцедуры
	
&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;   
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	РассчитатьСуммыРуб();
	
	ИзменитьЗаголовки(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокWO(ДоговорКонтрагента)
	
	СписокWO = Новый СписокЗначений;
	Выборка = Справочники.ЗаказНаряды.Выбрать(,ДоговорКонтрагента,,);
	Пока Выборка.Следующий() Цикл
		СписокWO.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокWO;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьProductLine(Реквизит)
	
	Если ТипЗнч(Реквизит) = Тип("СправочникСсылка.КостЦентры") Тогда 
		Возврат Реквизит.Сегмент.Родитель;
	иначе
		Возврат Реквизит.ProductLine;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура TicketОбработатьИзменение(ИмяТабЧасти)
	
	ТекДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Ticket) И Не ТипЗнч(ТекДанные.Ticket) = Тип("Строка") Тогда
		
		СтруктураTicket = ПолучитьСтруктуруДанныхTicket(ТекДанные.Ticket);
		
		ТекДанные.TicketNumber = СтруктураTicket.TicketNumber;
		ТекДанные.ProductLine  = СтруктураTicket.ProductLine;
		ТекДанные.Oilfield     = СтруктураTicket.Oilfield;
		ТекДанные.Well         = СтруктураTicket.Well;
		ТекДанные.КостЦентр    = СтруктураTicket.AccountingUnit;
		ТекДанные.Сумма        = СтруктураTicket.Сумма;
		ТекДанные.Цена         = СтруктураTicket.Цена;
		ТекДанные.Количество   = СтруктураTicket.Количество;
		ТекДанные.СтавкаНДС    = СтруктураTicket.СтавкаНДС;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Объект.СуммаВключаетНДС);
		
		Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			Если Вопрос("Умножить сумму тикета на курс документа?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда		    					
				ТекДанные.Цена     = ТекДанные.Цена * Объект.КурсВзаиморасчетов;				
				ТекДанные.Сумма    = ТекДанные.Сумма * Объект.КурсВзаиморасчетов;				
				ТекДанные.СуммаНДС = ТекДанные.СуммаНДС * Объект.КурсВзаиморасчетов;				
			КонецЕсли;
		КонецЕсли; 
               				
		Если Объект.ПодразделениеОрганизации <> СтруктураTicket.ПодразделениеОрганизации ИЛИ  
			Объект.Контрагент <> СтруктураTicket.Контрагент Тогда
			Если Вопрос("Выбранный тикет не соответствует шапке документа. 
				|Перезаполнить шапку по тикету?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Объект.ПодразделениеОрганизации = СтруктураTicket.ПодразделениеОрганизации;
				Объект.ДоговорКонтрагента       = СтруктураTicket.ДоговорКонтрагента;
				Объект.Контрагент               = СтруктураTicket.Контрагент;
				
				ДоговорКонтрагентаОбработатьИзменение();
				УправлениеФормой(ЭтаФорма);
			//Добавила Федотова Л., РГ-Софт, 04.07.13, вопрос SLI-0003691 ->
			Иначе
				РассчитатьСуммыРуб();
			//<-
			КонецЕсли; 				
		Иначе 
			ИзменитьЗаголовки(ЭтаФорма);
			РассчитатьСуммыРуб();
		КонецЕсли;
		
	Иначе 
		ТекДанные.TicketNumber = ТекДанные.Ticket;
	КонецЕсли;
    		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхTicket(Ticket)
	
	СтруктураTicket = Новый Структура(
	"TicketNumber,ProductLine,Oilfield,Well,AccountingUnit,ПодразделениеОрганизации,Контрагент,ДоговорКонтрагента,Сумма,Цена,Количество,СтавкаНДС");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Tickets.TicketNumber,
	|	Tickets.Oilfield,
	|	Tickets.ProductLine,
	|	Tickets.ПодразделениеОрганизации,
	|	Tickets.ДоговорКонтрагента,
	|	Tickets.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	Tickets.AccountingUnit,
	|	Tickets.Сумма КАК Цена,
	|	Tickets.Well,
	|	Tickets.СтавкаНДС
	|ИЗ
	|	Документ.Tickets КАК Tickets
	|ГДЕ
	|	Tickets.Ссылка = &Ticket";
	
	Запрос.УстановитьПараметр("Ticket", Ticket);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураTicket, Выборка);
		СтруктураTicket.Сумма = SalesBook.ПолучитьОстатокПоТикету(,Ticket);
		СтруктураTicket.Количество = 1;
	КонецЕсли;
	  	   		
	Возврат СтруктураTicket;
	
КонецФункции

&НаСервере
Процедура НоменклатураОбработатьИзменение(ИмяТабЧасти, Идентификатор)
	
	ТекДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(Идентификатор); 
	
	Если ИмяТабЧасти = "Товары" Тогда 
		SalesBookСервер.ЗаполнитьНомерГТДИСтрануПроисхождения(ТекДанные, ИмяТабЧасти, Объект.Ссылка.Метаданные());
	КонецЕсли;
	
	Если ИмяТабЧасти = "Услуги" Тогда 
		SalesBookСервер.ЗаполнитьСодержаниеТабЧасти(ТекДанные, ИмяТабЧасти, Объект.Ссылка.Метаданные());
	КонецЕсли;
	
	ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.БазоваяЕдиницаИзмерения;
	Если Не ЗначениеЗаполнено(ТекДанные.СтавкаНДС) Тогда 
		ТекДанные.СтавкаНДС = ТекДанные.Номенклатура.СтавкаНДС;
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ProductLine) Тогда
		ТекДанные.ProductLine = ПолучитьProductLine(ТекДанные.Номенклатура);	
	КонецЕсли;
	
КонецПроцедуры
          
&НаКлиенте
Процедура ПриИзмененииКоличестваЦены(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ИмяТабЧасти = "Услуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, ЗначениеПустогоКоличества);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	    	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;

	РассчитатьСуммыРуб();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммы(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		Если ИмяТабЧасти = "Услуги" Тогда 
			ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
		Иначе
			ТекущиеДанные.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;

	РассчитатьСуммыРуб();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкиНДС(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;

	РассчитатьСуммыРуб();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыНДС(ИмяТабЧасти)

	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Если ТекущиеДанные.Свойство("Всего") Тогда
		ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	КонецЕсли;

	РассчитатьСуммыРуб();
	
КонецПроцедуры 

//ЗАПОЛНИТЬ ИЗ EXCEL

&НаКлиенте
Процедура ПрочитатьExcelиЗаполнитьТЧ(ИмяТЧ, ДляNY=Ложь)
	
	Объект.СуммаВключаетНДС = Ложь;
	           	 	
	ПолноеИмяXLSФайла = ВыбратьФайл();
	Если ПолноеИмяXLSФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РГСофтКлиентСервер.ФайлДоступенДляЗагрузки(ПолноеИмяXLSФайла) Тогда
		Возврат;
	КонецЕсли;

	Excel = Неопределено;
	Workbooks = Неопределено;
	Worksheet = Неопределено;
	Отказ = Ложь;
	
	Состояние("Opening Excel...");
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Failed to open Excel!
			|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		Состояние("Opening file with Excel...");
		Workbooks = Excel.Workbooks;
		Попытка
			Workbook = Workbooks.Open(ПолноеИмяXLSФайла, , Истина);
		Исключение
			Excel.Quit();
			Сообщить("Failed to open file with Excel!
				|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Состояние("Opening Excel sheet...");
		Попытка
			WorkSheet = Workbook.Worksheets(1);
		Исключение
			Сообщить("Failed to open First sheet!
				|" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ИмяТЧ = "Товары" Тогда 
		Если ДляNY Тогда 
			ЗаполнитьТоварыДляNY(Worksheet);
		иначе
			ЗаполнитьТоварыИзExcel(Worksheet);
		КонецЕсли;
	иначе
		ЗаполнитьУслугиИзExcel(Worksheet);
	КонецЕсли;
		         	
	Состояние("Closing file...");
	Если Workbook <> Неопределено Тогда
		
		Попытка
			Workbook.Close(False);
		Исключение
			Сообщить("Failed to close Excel Workbook!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	Если Workbooks <> Неопределено Тогда
		
		Попытка
			Workbooks.Close();
		Исключение
			Сообщить("Failed to close Excel Workbooks!
				|" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Если Excel <> Неопределено Тогда
		
		Состояние("Closing Excel...");
		Попытка
			Excel.Quit();
		Исключение
			Сообщить("Failed to close Excel!
				|" + ОписаниеОшибки());
		КонецПопытки;
			
	КонецЕсли;
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьТоварыДляNY(Sheet)
	
	i = 2;
	
	ТабЧасть = Объект.Товары;
	     	
	Если ТабЧасть.Количество() > 0 Тогда
		ТиповаяСтрока = ТабЧасть[0];
	Иначе
		ТиповаяСтрока = ТабЧасть.Добавить();
	КонецЕсли;
	
	ТабЧасть.Очистить();
	     	
	Пока СокрЛП(Sheet.Cells(i,1).Value) <> "" Цикл
		Строка = ТабЧасть.Добавить();
		
		ЗаполнитьЗначенияСвойств(Строка, ТиповаяСтрока);
		Имя = СокрЛП(Sheet.Cells(i,1).Value); 
		имяEng = "";
		ЕдИзм = СокрЛП(Sheet.Cells(i,4).Value);
		Единица = СоздатьЕдиницу(ЕдИзм);
		//добавила Федотова Л., РГ-Софт, 03.10.12, вопрос №SLI-0002877 ->
		Артикул = СокрЛП(Sheet.Cells(i,6).Value);
		Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
		//<-
		
		//Строка.Номенклатура = СоздатьНоменклатуру(Имя, имяEng, Единица);//изменила Федотова Л., РГ-Софт, 03.10.12, вопрос №SLI-0002877
		Строка.Номенклатура = НайтиСоздатьНоменклатуру(Имя, имяEng, Единица, Артикул, ТекущийПользователь, Истина);
		
		Попытка
			Строка.ЕдиницаИзмерения = Единица;
		Исключение
		КонецПопытки;
		Попытка
			Строка.Сумма = Число(Sheet.Cells(i,8).Value);
		Исключение
		КонецПопытки;
		Попытка
			Строка.СуммаНДС = Число(Sheet.Cells(i,10).Value);
		Исключение
		КонецПопытки;
		Попытка
			Строка.Цена = Число(Sheet.Cells(i,7).Value);
		Исключение
		КонецПопытки;
		Попытка
			Строка.Количество = Число(Sheet.Cells(i,5).Value);
		Исключение
		КонецПопытки;
		
		Попытка
			Ставка = Число(Sheet.Cells(i,9).Value);
			Если Ставка = 0 Тогда
				Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
			ИначеЕсли Ставка = 0.18 ИЛИ Ставка = 18 Тогда
				Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		НомерГТД = СокрЛП(Sheet.Cells(i,3).Value);
	 	Страна = ВРЕГ(СокрЛП(Sheet.Cells(i,2).Value));
				
		СтруктураЗначений = ПолучитьСтруктуруНомерГТДИСтранаПроисхождения(Строка.НомерСтроки, НомерГТД, Неопределено, "",Страна, Истина);
		Строка.НомерГТД = СтруктураЗначений.НомерГТД;
		Строка.СтранаПроисхождения = СтруктураЗначений.СтранаПроисхождения;
		    				
		Если Строка.Свойство("Всего") Тогда
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
		КонецЕсли;
                  		
		i = i + 1;
				
	КонецЦикла;	
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыИзExcel(Sheet)
	
	i = 2;
	
	ТабЧасть = Объект.Товары;
	     	
	Если ТабЧасть.Количество() > 0 Тогда
		ТиповаяСтрока = ТабЧасть[0];
	Иначе
		ТиповаяСтрока = ТабЧасть.Добавить();
	КонецЕсли;
	
	ТабЧасть.Очистить();
	
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда

		Пока СокрЛП(Sheet.Cells(i,1).Value) <> "" Цикл
			Строка = ТабЧасть.Добавить();
			
			ЗаполнитьЗначенияСвойств(Строка, ТиповаяСтрока);
			Имя = СокрЛП(Sheet.Cells(i,8).Value); 
			имяEng = СокрЛП(Sheet.Cells(i,7).Value);
			ЕдИзм = СокрЛП(Sheet.Cells(i,4).Value);
			Единица = СоздатьЕдиницу(ЕдИзм);
			Строка.Номенклатура = НайтиСоздатьНоменклатуру(Имя, имяEng, Единица, "", ТекущийПользователь);
			
			Попытка
				Строка.ЕдиницаИзмерения = Единица;
			Исключение
			КонецПопытки;
			Попытка
				Строка.Сумма = Число(Sheet.Cells(i,10).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.СуммаНДС = Число(Sheet.Cells(i,11).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.Цена = Число(Sheet.Cells(i,6).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.Количество = Число(Sheet.Cells(i,5).Value);
			Исключение
			КонецПопытки;
			Попытка
				Объект.Дата = Дата(Sheet.Cells(i,3).Value);
			Исключение
			КонецПопытки;
			Попытка
				
				Ставка = Число(Sheet.Cells(i,9).Value);
				Если Ставка = 0 Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
				ИначеЕсли Ставка = 0.18 ИЛИ Ставка = 18 Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
				КонецЕсли;

			Исключение
			КонецПопытки;
					
			СтруктураЗначений = ПолучитьНомерГТДИСтранаПроисхождения(Строка.НомерСтроки, СокрЛП(Sheet.Cells(i,12).Value), ВРЕГ(СокрЛП(Sheet.Cells(i,13).Value)));
			Строка.НомерГТД = СтруктураЗначений.НомерГТД;
			Строка.СтранаПроисхождения = СтруктураЗначений.СтранаПроисхождения;
			    				
			Если Строка.Свойство("Всего") Тогда
				Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			КонецЕсли;                		
			
			i = i + 1;
			
		КонецЦикла;	
	Иначе
		Пока СокрЛП(Sheet.Cells(i,1).Value) <> "" Цикл
			Строка = ТабЧасть.Добавить();
			
			ЗаполнитьЗначенияСвойств(Строка, ТиповаяСтрока);
			Имя = СокрЛП(Sheet.Cells(i,9).Value); 
			имяEng = СокрЛП(Sheet.Cells(i,8).Value);
			ЕдИзм = СокрЛП(Sheet.Cells(i,4).Value);
			Единица = СоздатьЕдиницу(ЕдИзм);
			// { RGS MYurkevich 09.02.2015 14:47:23 - TP-00000694
			//Строка.Номенклатура = СоздатьНоменклатуру(Имя, имяEng, Единица, "", ТекущийПользователь);
			Артикул = СокрЛП(Sheet.Cells(i,7).Value);
			// { RGS LFedotova 30.04.2017 22:23:25 - вопрос SLI-0007261
			// { RGS LFedotova 06.05.2017 18:24:03 - вопрос SLI-0007264
			//Артикул = СокрЛП(Артикул);
			Артикул = СтрЗаменить(Артикул,Символы.НПП,"");
			// } RGS LFedotova 06.05.2017 18:25:50 - вопрос SLI-0007264
			//Строка.Номенклатура = СоздатьНоменклатуру(Имя, имяEng, Единица, Артикул, ТекущийПользователь);
			Строка.Номенклатура = НайтиСоздатьНоменклатуру(Имя, имяEng, Единица, Артикул, ТекущийПользователь);
			// } RGS LFedotova 30.04.2017 22:24:28 - вопрос SLI-0007261
			НомерPO = СокрЛП(Sheet.Cells(i,13).Value);
			PO = CustomsСервер.НайтиPOПоНомеру(НомерPO);
			Строка.PO = PO;
			// } RGS MYurkevich 09.02.2015 14:48:02 - TP-00000694
			
			Попытка
				Строка.ЕдиницаИзмерения = Единица;
			Исключение
			КонецПопытки;
			Попытка
				Строка.Сумма = Число(Sheet.Cells(i,11).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.СуммаНДС = Число(Sheet.Cells(i,12).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.Цена = Число(Sheet.Cells(i,6).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.Количество = Число(Sheet.Cells(i,5).Value);
			Исключение
			КонецПопытки;
			Попытка
				Объект.Дата = Дата(Sheet.Cells(i,3).Value);
			Исключение
			КонецПопытки;
			Попытка
				
				//Ставка = Число(Sheet.Cells(i,10).Value);
				Ставка = Число(Sheet.Cells(i,8).Value);
				Если Ставка = 0 Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
				//ИначеЕсли Ставка = 0.18 ИЛИ Ставка = 18 Тогда
				ИначеЕсли Ставка = 0.18 ИЛИ Ставка = 18 ИЛИ Ставка = "0,18" Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			СтруктураЗначений = ПолучитьСтруктуруНомерГТДИСтранаПроисхождения(Строка.НомерСтроки, СокрЛП(Sheet.Cells(i,14).Value), ВРЕГ(СокрЛП(Sheet.Cells(i,15).Value)), PO, Артикул);
			Строка.НомерГТД = СтруктураЗначений.НомерГТД;
			Строка.СтранаПроисхождения = СтруктураЗначений.СтранаПроисхождения;
			
			Если Строка.Свойство("Всего") Тогда
				Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			КонецЕсли;                		
			
			i = i + 1;
			
		КонецЦикла;	
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиИзExcel(Sheet)
	
	ТабЧасть = Объект.Услуги;
	
	i = 1;
	МассивНомеров = новый Массив;
	Пока СокрЛП(Sheet.Cells(i,1).Value) <> "" Цикл
		Если СокрЛП(Sheet.Cells(i,1).Value) = "Tax" 
			И МассивНомеров.Найти(СокрЛП(Sheet.Cells(i,2).Value)) = Неопределено Тогда
			МассивНомеров.Добавить(СокрЛП(Sheet.Cells(i,2).Value));
		КонецЕсли;
		i = i + 1;
	КонецЦикла;	
	
	Список = новый СписокЗначений;
	Список.ЗагрузитьЗначения(МассивНомеров);
	Элемент = Список.ВыбратьЭлемент("Выберите номер WO:",);
	Если Элемент <> Неопределено Тогда 
    	WO = Элемент.Значение;
	КонецЕсли;
	
	Если ТабЧасть.Количество() > 0 Тогда
		ТиповаяСтрока = ТабЧасть[0];
	Иначе
		ТиповаяСтрока = ТабЧасть.Добавить();
	КонецЕсли;
	
	ТабЧасть.Очистить();
	
	Если ТиповаяСтрока.Номенклатура.Пустая() Тогда
		ВвестиЗначение(ТиповаяСтрока.Номенклатура, "Выберите номенклатуру: ", Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	i = 1;
	Пока СокрЛП(Sheet.Cells(i,1).Value) <> "" Цикл
		Если СокрЛП(Sheet.Cells(i,1).Value) = "Tax" И СокрЛП(Sheet.Cells(i,2).Value) = WO Тогда
			Строка = ТабЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ТиповаяСтрока);
			Строка.Содержание = СокрЛП(Sheet.Cells(i,8).Value); 
			Строка.СодержаниеEng = СокрЛП(Sheet.Cells(i,7).Value);
			Попытка
				Строка.Сумма = Число(Sheet.Cells(i,6).Value);
			Исключение
			КонецПопытки;
			Попытка
				Строка.Количество = Число(Sheet.Cells(i,5).Value);
			Исключение
			КонецПопытки;
			Попытка
				Объект.Дата = Дата(Sheet.Cells(i,3).Value);
			Исключение
			КонецПопытки;
			Попытка
				Ставка = Число(Sheet.Cells(i,9).Value);
				Если Ставка = 0 Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
				ИначеЕсли Ставка = 0.18 ИЛИ Ставка = 18 Тогда
					Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(Строка, 0);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
			
			Если Строка.Свойство("Всего") Тогда
				Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			КонецЕсли;
			
		КонецЕсли;
		i = i + 1;
	КонецЦикла;	
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// { RGS LFedotova 30.04.2017 22:30:26 - вопрос SLI-0007261
//Функция СоздатьНоменклатуру(Имя, ИмяАнгл, ЕдИзм, Артикул, ТекущийПользователь, ДляNY=Ложь) 
Функция НайтиСоздатьНоменклатуру(Имя, ИмяАнгл, ЕдИзм, Артикул, ТекущийПользователь, ДляNY=Ложь) 
// } RGS LFedotova 30.04.2017 22:30:44 - вопрос SLI-0007261
	
	Если ДляNY Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.Услуга = ЛОЖЬ
		|	И Номенклатура.НаименованиеПолное ПОДОБНО &Имя
		|	И Номенклатура.Артикул = &Артикул
		|	И Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмерения
		|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Папка)");
		//добавила в запрос Артикул Федотова Л., РГ-Софт, 03.10.12, вопрос №SLI-0002877 ->
		Запрос.УстановитьПараметр("Имя", Имя);	
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдИзм);	
		Запрос.УстановитьПараметр("Папка", Справочники.Номенклатура.НайтиПоКоду("T9353"));	
		Запрос.УстановитьПараметр("Артикул", Артикул);	
		выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Эл = Справочники.Номенклатура.СоздатьЭлемент();
			Эл.Родитель = Справочники.Номенклатура.НайтиПоКоду("T9353");
			Эл.Наименование = Имя;
			Эл.НаименованиеПолное = Имя;
			Эл.НаименованиеENG = ИмяАнгл;
			Эл.Услуга = Ложь;
			Эл.Комментарий = "Создано при загрузке из Excel пользователем " + ТекущийПользователь;
			Эл.БазоваяЕдиницаИзмерения = ЕдИзм;
			//добавила Федотова Л., РГ-Софт, 03.10.12, вопрос №SLI-0002877 ->
			Эл.Артикул = Артикул;
			//<-
			Эл.Записать();
			Возврат Эл.Ссылка;
		КонецЕсли;
		
	иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.Услуга = ЛОЖЬ
		|	И Номенклатура.НаименованиеПолное ПОДОБНО &Имя
		// { RGS LFedotova 30.04.2017 22:32:45 - вопрос SLI-0007261
		|	И Номенклатура.Артикул = &Артикул
		// } RGS LFedotova 30.04.2017 22:33:09 - вопрос SLI-0007261 
		|	И Номенклатура.БазоваяЕдиницаИзмерения = &ЕдиницаИзмерения");
		// { RGS LFedotova 30.04.2017 22:34:30 - вопрос SLI-0007261
		//Запрос.УстановитьПараметр("Имя", "%"+Имя+"%");	
		Запрос.УстановитьПараметр("Имя", СокрЛП(Имя));	
		Запрос.УстановитьПараметр("Артикул", Артикул);	
		// } RGS LFedotova 30.04.2017 22:34:37 - вопрос SLI-0007261
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдИзм);	
		выборка = Запрос.Выполнить().Выбрать();
		// { RGS MYurkevich 09.02.2015 16:14:59 - TP-00000694
		Catalog = Справочники.Catalog.НайтиПоКоду(Артикул);
		// } RGS MYurkevich 09.02.2015 16:17:56 - TP-00000694
		Если Выборка.Следующий() Тогда
			// { RGS MYurkevich 09.02.2015 16:14:59 - TP-00000694
			//Возврат Выборка.Ссылка;
            НомОбъект = выборка.Ссылка.ПолучитьОбъект();
			Если НомОбъект.Catalog = Справочники.Catalog.ПустаяСсылка() Тогда
				НомОбъект.Catalog = Catalog;
				НомОбъект.Артикул = Артикул;
				НомОбъект.Записать();
			КонецЕсли;	
			Возврат НомОбъект.Ссылка;
		    // } RGS MYurkevich 09.02.2015 16:17:56 - TP-00000694
		Иначе
			Эл = Справочники.Номенклатура.СоздатьЭлемент();
			Эл.Родитель = Справочники.Номенклатура.НайтиПоКоду("00198");
			Эл.Наименование = Имя;
			Эл.НаименованиеПолное = Имя;
			Эл.НаименованиеENG = ИмяАнгл;
			Эл.Услуга = Ложь;
			// { RGS MYurkevich 09.02.2015 16:14:59 - TP-00000694
			Эл.Catalog = Catalog;
			Эл.Артикул = Артикул;
			// } RGS MYurkevich 09.02.2015 16:17:56 - TP-00000694
			Эл.Комментарий = "Создано при загрузке из Excel пользователем " + ТекущийПользователь;
			Эл.БазоваяЕдиницаИзмерения = ЕдИзм;
			Эл.Записать();
			Возврат Эл.Ссылка;
		КонецЕсли;
		    		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЕдиницу(Имя) 
	
	Если Прав(Имя,1) = "." Тогда
		Имя = Лев(Имя, СтрДлина(Имя)-1);
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.НаименованиеПолное = &НаименованиеПолное
	|	И (НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления)");
	Запрос.УстановитьПараметр("НаименованиеПолное", Имя);	
	выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Эл = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Эл.Наименование = Имя;
		Эл.НаименованиеПолное = Имя;
		//Эл.Комментарий = "Создано при загрузке из Excel пользователем " + глТекущийПользователь;
		Попытка
			Эл.Записать();
		Исключение
		    Сообщить("Не записана единица измерения " + Имя);
		КонецПопытки;
		Возврат Эл.Ссылка;
	КонецЕсли;
	
КонецФункции

//
 &НаСервереБезКонтекста
Функция ПолучитьНомерГТДИСтранаПроисхождения(НомерСтроки, НомерГТДИзФайла, Страна, ДляNY=Ложь)
	
	Структура = Новый Структура("НомерГТД, СтранаПроисхождения");
	
	Если ЗначениеЗаполнено(НомерГТДИзФайла) Тогда
		Структура.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НомерГТДИзФайла);
		Если Не ЗначениеЗаполнено(Структура.НомерГТД) И ДляNY Тогда
			Попытка
				датаГТД = Дата(число("20" + сред(НомерГТДИзФайла,14,2)),число(сред(НомерГТДИзФайла,12,2)),число(сред(НомерГТДИзФайла,10,2)));
				Эл = Справочники.НомераГТД.СоздатьЭлемент();
				Эл.Код = НомерГТДИзФайла;
				Эл.ДатаГТД = датаГТД;
				Эл.Комментарий = "AR";
				Эл.Записать(); 
				Структура.НомерГТД = Эл.Ссылка;
			Исключение
				Сообщить("Для строки №"+НомерСтроки+" неправильно введен номер ГТД:""" + НомерГТДИзФайла+"""!");
			конецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Страна) Тогда
		Структура.СтранаПроисхождения = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Страна);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

 &НаСервереБезКонтекста
Функция ПолучитьСтруктуруНомерГТДИСтранаПроисхождения(НомерСтроки, НомерГТДИзФайла, Страна, PO = Неопределено, Артикул, ДляNY=Ложь)
	
	Структура = Новый Структура("НомерГТД, СтранаПроисхождения");
	
	Если ЗначениеЗаполнено(НомерГТДИзФайла) Тогда
		Структура.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НомерГТДИзФайла);
		Если Не ЗначениеЗаполнено(Структура.НомерГТД) И ДляNY Тогда
			Попытка
				датаГТД = Дата(число("20" + сред(НомерГТДИзФайла,14,2)),число(сред(НомерГТДИзФайла,12,2)),число(сред(НомерГТДИзФайла,10,2)));
				Эл = Справочники.НомераГТД.СоздатьЭлемент();
				Эл.Код = НомерГТДИзФайла;
				Эл.ДатаГТД = датаГТД;
				Эл.Комментарий = "AR";
				Эл.Записать(); 
				Структура.НомерГТД = Эл.Ссылка;
			Исключение
				Сообщить("Для строки №"+НомерСтроки+" неправильно введен номер ГТД:""" + НомерГТДИзФайла+"""!");
			конецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Страна) Тогда
		Структура.СтранаПроисхождения = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Страна);
	КонецЕсли;
	// { RGS MYurkevich 09.02.2015 16:47:47 - TP-00000694
	Если Структура.НомерГТД = Неопределено И PO <> Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Номер КАК НомерГТД,
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|		ПО (ЗакрытиеПоставкиСопоставление.СтрокаИнвойса = СтрокиИнвойса.Ссылка)
		|ГДЕ
		|	СтрокиИнвойса.НомерЗаявкиНаЗакупку = &НомерЗаявки
		|	И СтрокиИнвойса.КодПоИнвойсу = &Артикул";
		Запрос.УстановитьПараметр("НомерЗаявки", PO.Код); 
		Запрос.УстановитьПараметр("Артикул", Артикул);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 Структура.НомерГТД = Справочники.НомераГТД.НайтиПоКоду(Выборка.НомерГТД);
			 Структура.СтранаПроисхождения = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Выборка.СтранаПроисхождения);
		КонецЕсли;	
	КонецЕсли;
	// } RGS MYurkevich 09.02.2015 16:47:50 - TP-00000694
	
	Возврат Структура;
	
КонецФункции

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЭтоCoGS Тогда
		                                                      
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Период", Объект.Дата);
		ПараметрыФормы.Вставить("СписаниеОборудования", Объект.СписаниеОборудования);
		
		ОткрытьФормуМодально("ОбщаяФорма.ФормаПодбораCoGS", ПараметрыФормы, ЭтаФорма);
	
	КонецЕсли; 
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаКлиенте
Процедура ЭтоCoGSПриИзменении(Элемент) 
	
	Если НЕ ЭтоCoGS Тогда
		Если Вопрос("Будет очищен документ ""Списание оборудование"". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Объект.СписаниеОборудования = ПредопределенноеЗначение("Документ.СписаниеОборудования.ПустаяСсылка");
		Иначе
			ЭтоCoGS = Истина;
		КонецЕсли; 		
	
	КонецЕсли;
	УстановитьВидимостьПоCoGS(ЭтаФорма);

КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПоCoGS(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Если Форма.ЭтоCoGS Тогда
		Элементы.СписаниеОборудования.Видимость = Истина;
	Иначе
		Элементы.СписаниеОборудования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюCoGS(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Если Объект.Проведен Тогда
		Элементы.ЭтоCoGS.Доступность = Ложь;
		Элементы.СписаниеОборудования.Доступность = Ложь;
	Иначе
		Элементы.ЭтоCoGS.Доступность = Истина;
		Элементы.СписаниеОборудования.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаКлиенте
Процедура СписаниеОборудованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СписаниеОборудования) Тогда
		ЭтоCoGS = Ложь;
		Элементы.СписаниеОборудования.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если Вопрос("Перезаполнить табличную часть ""Товары""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Перезаполнить = Ложь;
			Возврат;
		Иначе
			Перезаполнить = Истина;
		КонецЕсли; 
	КонецЕсли;
	СписаниеОборудованияПриИзмененииНаСервере(Перезаполнить);
	
КонецПроцедуры

//добавила Федотова Л., РГ-Софт, 29.05.13, вопрос SLI-0003596
&НаСервере
Процедура СписаниеОборудованияПриИзмененииНаСервере(Перезаполнить)
	
	ТабТовары = Объект.Товары.Выгрузить();
	Если Перезаполнить Тогда
		Объект.Товары.Очистить();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CoGSОстатки.Номенклатура,
	|	CoGSОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.CoGS.Остатки(&ДатаПроведения, СписаниеОборудования = &СписаниеОборудования) КАК CoGSОстатки";
	
	Запрос.УстановитьПараметр("ДатаПроведения", Объект.ДатаПроведения);
	Запрос.УстановитьПараметр("СписаниеОборудования", Объект.СписаниеОборудования);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		СтрокаТаб = ТабТовары.Найти(НоваяСтрока.Номенклатура, "Номенклатура");
		Если НЕ СтрокаТаб = Неопределено Тогда
			Количество = НоваяСтрока.Количество;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
			Если НоваяСтрока.Количество <> Количество Тогда
				НоваяСтрока.Количество = Количество;
				ТекущиеДанные = НоваяСтрока;
				
				ЗначениеПустогоКоличества = 0;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные, ЗначениеПустогоКоличества);

				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Объект.СуммаВключаетНДС);
				    	
				Если ТекущиеДанные.Свойство("Всего") Тогда
					ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
				КонецЕсли;

				РассчитатьСуммыРуб();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ()

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтаФорма);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтаФорма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	                    
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтаФорма, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
		//Сообщить("Проверка контрагентов невозможна");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	                              
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры
           
Процедура ОпределитьНаличиеНовыхОшибокВДокументе(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) 
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	ИначеЕсли ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументСОшибкой(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтаФорма, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтаФорма, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// { RGS MYurkevich 02.02.2015 15:03:04 - TP-00000673
&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)	  
	  СтандартнаяОбработка = Ложь;
	  ПараметрыПодбора = Новый Структура("Отбор, СтрокаПоиска, ВыборГруппИЭлементов", Новый Структура(), Текст, ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	  ПараметрыПодбора.Вставить("ЭтоРеализация", Истина);
	  ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ПараметрыПодбора);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСебестоимость(Команда)
	ПараметрыФормы = Новый Структура;
	Отбор  = Новый Структура;      
	Отбор.Вставить("Регистратор",Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ОткрытьФорму("РегистрНакопления.РегистрСебестоимости.Форма.ФормаНабораЗаписей", ПараметрыФормы);
КонецПроцедуры

// } RGS MYurkevich 02.02.2015 15:03:17 - TP-00000673


#КонецОбласти

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура ТоварыКостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Услуги.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезНДСРубПриИзменении(Элемент)
	СуммаБезНДСРубПриИзменении("Товары");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаБезНДСРубПриИзменении(Элемент)
	СуммаБезНДСРубПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура СуммаБезНДСРубПриИзменении(ИмяТабЧасти)
	ТекущиеДанные = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ТекущиеДанные.СуммаНДСРуб = ТекущиеДанные.СуммаБезНДСРуб * УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС)/100;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД() // RG-Soft ЭДО
	
	ДоступныеЗначения = Документы.РеализацияТоваровУслуг.ПолучитьДоступныеВидыЭдПоВидуОперации(Объект.ВидОперации);
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеЗначения Цикл 
		Элементы.ВидЭД.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Документы.РеализацияТоваровУслуг.ПолучитьВидЭдПоУмолчанию(Объект.ВидОперации); 
	КонецЕсли;
	
КонецПроцедуры

//[РКХ->]
//Добавила Федотова Л., РГ-Софт, 02.10.13, вопрос PA_-0000022
&НаСервереБезКонтекста
Функция ВернутьПодразделение(Контрагент)
	
	Возврат Контрагент.ПодразделениеОрганизации;

КонецФункции // ВернутьПодразделение()

&НаСервереБезКонтекста
Функция ВернутьНомерПодразделения(Подразделение)

	Если Подразделение.Пустая() Тогда
		Возврат "00";	                                   
	Иначе
		Возврат Подразделение.Префикс;	
	КонецЕсли;	

КонецФункции // ()


&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент) 	
	
	//[РКХ->]
	Если ОбщегоНазначенияПовтИсп.ИдентификаторРабочейКонфигурации() = "PA" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			Возврат;
		КонецЕсли; 
		
		Если Объект.ПодразделениеОрганизации.Пустая() Тогда
			НомерПодразделения = "00";
		Иначе	
			НомерПодразделения = ВернутьНомерПодразделения(Объект.ПодразделениеОрганизации);
		КонецЕсли; 
		
		//Заменим номер подразделения в номере документа
		НомерБезПробелов = СокрЛП(Объект.Номер);
		НомерПодразделенияИзНомераДокумента = Прав(НомерБезПробелов, СтрДлина(НомерБезПробелов) - 14);
		НомерТребуемый = Лев(НомерБезПробелов, 14) + НомерПодразделения;
		Если НЕ Объект.Номер = НомерТребуемый Тогда
			Объект.Номер = НомерТребуемый;
		КонецЕсли; 
	КонецЕсли;
	
	// { RGS TChubarova 02.03.2016 23:25:14 - заполнение грузоотправителя
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) 
		И Не Объект.НеЗаполнятьГрузоотправителя Тогда
		Объект.Грузоотправитель = Объект.ПодразделениеОрганизации.rgsКонтрагент;
	Иначе
		//Исправила Федотова Л., РГ-Софт, 16.03.16, вопрос SLI-0006292
		//Объект.Грузоотправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка()");
		Объект.Грузоотправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	// } RGS TChubarova 03.03.2016 0:13:57 - заполнение грузоотправителя

	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()  // RG-Soft ЭДО
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)   // RG-Soft ЭДО
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗаполнятьГрузоотправителяПриИзменении(Элемент)
	
	// { RGS TChubarova 02.03.2016 23:25:14 - заполнение грузоотправителя
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) 
		И объект.НеЗаполнятьГрузоотправителя Тогда
		Объект.Грузоотправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	// } RGS TChubarova 03.03.2016 0:13:57 - заполнение грузоотправителя
	

КонецПроцедуры

//Добавила Федотова Л., РГ-Софт, 19.10.15, вопрос SLI-0005899
Процедура ПроверкаБюджетаКонтракта()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ИсполнениеБюджетаКонтрактаОбороты.СуммаОборот) КАК СуммаОборот,
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта КАК СуммаКонтракта
		|ИЗ
		|	РегистрНакопления.ИсполнениеБюджетаКонтракта.Обороты(, , Регистратор, ) КАК ИсполнениеБюджетаКонтрактаОбороты
		|ГДЕ
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И НЕ ИсполнениеБюджетаКонтрактаОбороты.Регистратор = &Ссылка
		|	И ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнениеБюджетаКонтрактаОбороты.ДоговорКонтрагента.СуммаКонтракта";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаПревышения = -(ВыборкаДетальныеЗаписи.СуммаКонтракта - ВыборкаДетальныеЗаписи.СуммаОборот - Объект.СуммаДокумента);
		Если СуммаПревышения > 0 Тогда
			Сообщить("Превышен бюджет контракта (" + ВыборкаДетальныеЗаписи.СуммаКонтракта + " " + Объект.ВалютаДокумента + ") на сумму " + СуммаПревышения + " " + Объект.ВалютаДокумента);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// { RGS LFedotova 08.08.2016 13:52:57 - вопрос SLI-0006667
&НаКлиенте
Процедура ДатаОтправкиКСПриИзменении(Элемент)
	ДатаКСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаКСПриИзмененииНаСервере()
	РГСофт.РассчитатьTriggerDate(Объект);
КонецПроцедуры


&НаКлиенте
Процедура ДатаВозвратаКСПриИзменении(Элемент)
	ДатаКСПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура TriggerTypeFormContractНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	TriggerTypeFormContractНажатиеНаКлиенте();

КонецПроцедуры


&НаКлиенте
Процедура TriggerTypeFormContractНажатиеНаКлиенте()

	// 1. Формируем структуру параметров для заполнения формы
	
	СтруктураПараметров = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.ДоговорКонтрагента, 
		"ermDocumentFlowPeriodFrom, ermDocumentFlowPeriodTo, ermPtDaysFrom, СрокОплаты, ermPtType, ermPtType, ermTrigger");
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ermDocumentFlowPeriodFrom", Объект.);
	//СтруктураПараметров.Вставить("ermDocumentFlowPeriodTo",                 Объект.);
	//СтруктураПараметров.Вставить("ermPtDaysFrom",            Объект.);
	//СтруктураПараметров.Вставить("ermPtType",     Объект.);
	//СтруктураПараметров.Вставить("ermTrigger",           Объект.);
	//СтруктураПараметров.Вставить("СрокОплаты",              Объект.);
	
	// 2. Открываем форму "Цены и Валюта".
	СтруктураЦеныИВалюта = ОткрытьФормуМодально("Справочник.ДоговорыКонтрагентов.Форма.ermФормаНастройкиПлатежей", СтруктураПараметров);

КонецПроцедуры
// } RGS LFedotova 08.08.2016 14:06:49 - вопрос SLI-0006667