
////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ТАБЛИЦ ПО ОСНОВАНИЮ
////////////////////////////////////////////////////////////////////////////////
                             
Процедура СкопироватьТовары(Основание, Объект) Экспорт

	МетаданныеОснования = Основание.Метаданные();
	ИмяДокумента = МетаданныеОснования.Имя;
	Если МетаданныеОснования.ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ИмяДокумента + "Товары.Номенклатура,
	|	" + ИмяДокумента + "Товары.ЕдиницаИзмерения,
	|	" + ИмяДокумента + "Товары.Цена,
	|	" + ИмяДокумента + "Товары.Сумма,
	|	" + ИмяДокумента + "Товары.СтавкаНДС,
	|	" + ИмяДокумента + "Товары.СуммаНДС,
	|	" + ИмяДокумента + "Товары.Коэффициент,
	|	" + ИмяДокумента + "Товары.Количество,
	|	" + ИмяДокумента + "Товары.Oilfield," + ?(ИмяДокумента <> "РеализацияТоваровУслуг","","
	|	" + ИмяДокумента + "Товары.КоличествоМест,
	|	" + ИмяДокумента + "Товары.TicketNumber,
	|	" + ИмяДокумента + "Товары.ProductLine,
	|	" + ИмяДокумента + "Товары.КостЦентр,") + "
	|	" + ИмяДокумента + "Товары.Ticket,
	|	" + ИмяДокумента + "Товары.Well
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК " + ИмяДокумента + "Товары
	|
	|ГДЕ
	|	" + ИмяДокумента + "Товары.Ссылка = &Ссылка";
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
    	СтрокаТЧ.НомерГТД            = СтрокаТЧ.Номенклатура.НомерГТД;
		СтрокаТЧ.СтранаПроисхождения = СтрокаТЧ.Номенклатура.СтранаПроисхождения;
	КонецЦикла;
	         	
КонецПроцедуры
     
Процедура СкопироватьУслуги(Основание, Объект) Экспорт

	МетаданныеОснования = Основание.Метаданные();
	ИмяДокумента = МетаданныеОснования.Имя;
	Если МетаданныеОснования.ТабличныеЧасти.Найти("Услуги") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ИмяДокумента + "Услуги.НомерСтроки,
	|	" + ИмяДокумента + "Услуги.Содержание,
	|	" + ИмяДокумента + "Услуги.СодержаниеEng,
	|	" + ИмяДокумента + "Услуги.Количество,
	|	" + ИмяДокумента + "Услуги.Цена,
	|	" + ИмяДокумента + "Услуги.Сумма,
	|	" + ИмяДокумента + "Услуги.СтавкаНДС,
	|	" + ИмяДокумента + "Услуги.СуммаНДС,
	|	" + ИмяДокумента + "Услуги.Номенклатура,
	|	" + ИмяДокумента + "Услуги.Oilfield," + ?(ИмяДокумента <> "РеализацияТоваровУслуг","","
	|	" + ИмяДокумента + "Услуги.TicketNumber,
	|	" + ИмяДокумента + "Услуги.ProductLine,
	|	" + ИмяДокумента + "Услуги.КостЦентр,") + "
	|	" + ИмяДокумента + "Услуги.Ticket,
	|	" + ИмяДокумента + "Услуги.Well
	|ИЗ
	|	Документ." + ИмяДокумента + ".Услуги КАК " + ИмяДокумента + "Услуги
	|
	|ГДЕ
	|	" + ИмяДокумента + "Услуги.Ссылка = &Ссылка";
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура СкопироватьПредоплату(Основание, Объект) Экспорт

	МетаданныеОснования = Основание.Метаданные();
	ИмяДокумента = МетаданныеОснования.Имя;
	Если МетаданныеОснования.ТабличныеЧасти.Найти("Предоплата") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ИмяДокумента + "Предоплата.НомерСтроки,
	|	" + ИмяДокумента + "Предоплата.ДокументАванса,
	|	" + ИмяДокумента + "Предоплата.Сумма,
	|	" + ИмяДокумента + "Предоплата.СуммаВзаиморасчетов,
	|	" + ИмяДокумента + "Предоплата.КурсАванса,
	|	" + ИмяДокумента + "Предоплата.СчетНаОплату
	|ИЗ
	|	Документ." + ИмяДокумента + ".Предоплата КАК " + ИмяДокумента + "Предоплата
	|
	|ГДЕ
	|	" + ИмяДокумента + "Предоплата.Ссылка = &Ссылка";
	Объект.Предоплата.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура СкопироватьОС(Основание, Объект) Экспорт

	ИмяДокумента = Основание.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки,
	|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК Содержание,
	|	1 КАК Количество,
	|	ПередачаОСОС.Сумма КАК Цена,
	|	ПередачаОСОС.Сумма,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС,
	|	ПередачаОСОС.КостЦентр,
	|	&Номенклатура
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	//Добавила Федотова Л., РГ-Софт, 22.02.13, вопрос SLI-0003336 ->
	Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.НайтиПоНаименованию("Кредит-нота"));
	//<-
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьВознаграждение(Основание, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомитентуОПродажах.Организация,
		|	ОтчетКомитентуОПродажах.Организация КАК Поставщик,
		|	ОтчетКомитентуОПродажах.Контрагент КАК Покупатель,
		|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК Сумма,
		|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
		|	ОтчетКомитентуОПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению КАК Товар,
		|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению.НаименованиеПолное КАК ТоварНаименование,
		|	ОтчетКомитентуОПродажах.Товары.(
		|		СУММА(СуммаВознаграждения) КАК Сумма,
		|		СУММА(СуммаНДСВознаграждения) КАК СуммаНДС
		|	),
		|	ОтчетКомитентуОПродажах.СуммаВключаетНДС,
		|	ОтчетКомитентуОПродажах.УчитыватьНДС,
		|	ОтчетКомитентуОПродажах.КурсВзаиморасчетов,
		|	ОтчетКомитентуОПродажах.Руководитель,
		|	ОтчетКомитентуОПродажах.ГлавныйБухгалтер
		|ИЗ
		|	Документ.ОтчетПринципалуОПродажах КАК ОтчетКомитентуОПродажах
		|ГДЕ
		|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Если ВыборкаСтрокТовары.Следующий() Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.Товар);
		НоваяСтрока.Содержание = ?(НЕ ЗначениеЗаполнено(Шапка.Товар), "Комиссионное вознаграждение", Шапка.ТоварНаименование);
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Цена = 0;
		НоваяСтрока.СтавкаНДС = Шапка.СтавкаНДС;
		НоваяСтрока.СуммаНДС = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, 0 - ВыборкаСтрокТовары.СуммаНДС);
		НоваяСтрока.Сумма = ?(ВыборкаСтрокТовары.Сумма = Null, 0, 0 - ВыборкаСтрокТовары.Сумма);
		Если Основание.Товары.Количество() > 0 Тогда
			НоваяСтрока.КостЦентр = Основание.Товары[0].КостЦентр;
		КонецЕсли;
		НоваяСтрока.СуммаБезНДСРуб  = ?(ВыборкаСтрокТовары.Сумма = Null ИЛИ ВыборкаСтрокТовары.СуммаНДС = Null, 0, 0 - (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС)* Шапка.КурсВзаиморасчетов);
		НоваяСтрока.СуммаНДСРуб  = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, 0 - ВыборкаСтрокТовары.СуммаНДС * Шапка.КурсВзаиморасчетов);
	КонецЕсли;
			
КонецПроцедуры

Процедура СкопироватьВознаграждениеОтчетАгента(Основание, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетАгентаПоРасходам.Организация,
		|	ОтчетАгентаПоРасходам.Организация КАК Поставщик,
		|	ОтчетАгентаПоРасходам.Контрагент КАК Покупатель,
		|	ОтчетАгентаПоРасходам.АгентскаяСтавкаНДС КАК СтавкаНДС,
		|	ОтчетАгентаПоРасходам.ВалютаДокумента КАК Валюта,
		|	ОтчетАгентаПоРасходам.НоменклатураАгентская КАК Товар,
		|	ОтчетАгентаПоРасходам.НоменклатураАгентская.НаименованиеПолное КАК ТоварНаименование,
		|	ОтчетАгентаПоРасходам.СуммаВключаетНДС,
		|	ОтчетАгентаПоРасходам.УчитыватьНДС,
		|	ОтчетАгентаПоРасходам.КурсВзаиморасчетов,
		|	ОтчетАгентаПоРасходам.АгентскаяСумма,
		|	ОтчетАгентаПоРасходам.АгентскийНДС,
		|	ОтчетАгентаПоРасходам.АгентскийAU
		|ИЗ
		|	Документ.ОтчетАгентаПоРасходам КАК ОтчетАгентаПоРасходам
		|ГДЕ
		|	ОтчетАгентаПоРасходам.Ссылка = &Ссылка";
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар), "Агентское вознаграждение", ВыборкаСтрокТовары.Товар);
		НоваяСтрока.Содержание = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар), "Агентское вознаграждение", ВыборкаСтрокТовары.ТоварНаименование);
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Цена = 0;
		НоваяСтрока.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
		НоваяСтрока.СуммаНДС = ?(ВыборкаСтрокТовары.АгентскийНДС = Null, 0, 0 - ВыборкаСтрокТовары.АгентскийНДС);
		НоваяСтрока.Сумма = ?(ВыборкаСтрокТовары.АгентскаяСумма = Null, 0, 0 - ВыборкаСтрокТовары.АгентскаяСумма);
		НоваяСтрока.КостЦентр = ВыборкаСтрокТовары.АгентскийAU;
	КонецЕсли;
			
КонецПроцедуры

Процедура ИзменитьЗнак(Знак, Объект) Экспорт  
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Количество = ?(СтрокаТЧ.Количество > 0, Знак*СтрокаТЧ.Количество,  -Знак*СтрокаТЧ.Количество);
		СтрокаТЧ.КоличествоМест = ?(СтрокаТЧ.КоличествоМест > 0, Знак*СтрокаТЧ.КоличествоМест,  -Знак*СтрокаТЧ.КоличествоМест)                    ;
		СтрокаТЧ.Сумма = ?(СтрокаТЧ.Сумма > 0, Знак*СтрокаТЧ.Сумма,  -Знак*СтрокаТЧ.Сумма)    ;
		СтрокаТЧ.СуммаНДС = ?(СтрокаТЧ.СуммаНДС > 0, Знак*СтрокаТЧ.СуммаНДС,  -Знак*СтрокаТЧ.СуммаНДС);
		
		//Добавила условие Федотова Л., РГ-Софт, 11.02.13, вопрос SLI-0003303
		Если НЕ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		СтрокаТЧ.Количество = ?(СтрокаТЧ.Количество > 0, Знак*СтрокаТЧ.Количество,  -Знак*СтрокаТЧ.Количество) ;
		СтрокаТЧ.Сумма = ?(СтрокаТЧ.Сумма > 0, Знак*СтрокаТЧ.Сумма,  -Знак*СтрокаТЧ.Сумма)                ;
		СтрокаТЧ.СуммаНДС = ?(СтрокаТЧ.СуммаНДС > 0, Знак*СтрокаТЧ.СуммаНДС,  -Знак*СтрокаТЧ.СуммаНДС)      ;
		
		//Добавила условие Федотова Л., РГ-Софт, 11.02.13, вопрос SLI-0003303
		Если НЕ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Предоплата Цикл
		СтрокаТЧ.Сумма = ?(СтрокаТЧ.Сумма > 0, Знак*СтрокаТЧ.Сумма,  -Знак*СтрокаТЧ.Сумма)                ;
		СтрокаТЧ.СуммаВзаиморасчетов = ?(СтрокаТЧ.СуммаВзаиморасчетов > 0, Знак*СтрокаТЧ.СуммаВзаиморасчетов,  -Знак*СтрокаТЧ.СуммаВзаиморасчетов)      ;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьГрафикиУведомленийКС(Ссылка) Экспорт  // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписейРеализации = РегистрыСведений.ГрафикиУведомленийКС.СоздатьНаборЗаписей();
	НаборЗаписейРеализации.Отбор.РеализацияТоваровУслуг.Установить(Ссылка);
	НаборЗаписейРеализации.Прочитать();
	НаборЗаписейРеализации.Очистить();
	НаборЗаписейРеализации.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // { SLI-0006169 - Notification KS - конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЭЛЕКТРОННОГО ДОКУМЕНТООБОРОТА
////////////////////////////////////////////////////////////////////////////////

// ТОРГ12

// УДАЛИТЬ!!!
// Функция получает данные для формирования печатной формы ТОРГ - 12
//
Функция ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, Ссылка) Экспорт 
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.Представление, """") КАК Основание,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ОснованиеДата,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование, """") КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК ФИОРуководителя,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.Представление КАК ФИОГлавБухгалтера
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	Если ТаблицаШапки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	КонецЕсли;
	        	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
 	Шапка.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		Шапка.Вставить("ФИОРуководителя", СокрЛП(Фамилия) + " " + СокрЛП(Инициалы));
    КонецЕсли;
		
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		Шапка.Вставить("ФИОГлавБухгалтера", СокрЛП(Фамилия) + " " + СокрЛП(Инициалы));
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Курс));           
	Запрос.УстановитьПараметр("Кратность", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Кратность));
	 		
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма  КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	NULL,
	|	0,
	|	0,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	3
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
	ЗапросТовары.Колонки.Добавить("СуммаСНДС");
	Для Каждого СтрокаТовар Из ЗапросТовары Цикл
		СтрокаТовар.СуммаСНДС   = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
		СтрокаТовар.СуммаБезНДС = СтрокаТовар.СуммаСНДС - СтрокаТовар.СуммаНДС;
		СтрокаТовар.Цена        = СтрокаТовар.СуммаБезНДС / ?(СтрокаТовар.Количество = 0, 1, СтрокаТовар.Количество);
    КонецЦикла;
              	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Шапка", Шапка);
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ЗапросТовары);
	Возврат ДанныеДляПечати;
         
КонецФункции

Функция ПолучитьТаблицуСведенийТОРГ12(Знач МассивДокументов, Знач ВключатьУслуги) Экспорт
	
	ТаблицаСведений = ПолучитьОписаниеТОРГ12();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	Запрос.УстановитьПараметр("ВключатьУслуги", 	ВключатьУслуги);
	//Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12();
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		СведенияОДокументе.Валюта             = ВалютаРегУчета;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		
		ТаблицаДокумента = ПолучитьОписаниеТаблицыТОРГ12();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.ВалютаДокумента <> ВалютаРегУчета Тогда
			НуженПересчетВРубли	= Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС 	= Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность   	= 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС  = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			СтрокаТаблицыДокумента.Цена 	 = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, 
														СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКладовщика");
		ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
	
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаПодписанияДокумента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Организация.ОбособленноеПодразделение
	|			ТОГДА РеализацияТоваровУслуг.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РеализацияТоваровУслуг.Организация
	|	КОНЕЦ КАК Поставщик,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетПродавца,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	РеализацияТоваровУслуг.СчетНаОплату КАК ДокументОснование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаНачала КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	"""" КАК Кладовщик,
	|	"""" КАК ЗаРуководителяПоПриказу,
	|	"""" КАК ЗаГлавногоБухгалтераПоПриказу,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.Доверенность КАК ДоверенностьЧерезКого
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура КАК Товар,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ВидУпаковки,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Код, """") КАК ВидУпаковкиКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Наименование, """") КАК ВидУпаковкиНаименование,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьОписаниеТОРГ12() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",        	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсправления",         	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДатаПодписанияДокумента", 	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",    Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Поставщик",        Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузоотправитель", Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Покупатель",       Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузополучатель",  Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",     Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("АдресДоставки",              Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТранспортнаяНакладнаяНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТранспортнаяНакладнаяДата",  ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Договор",        Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеДата",  ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтер",                  		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерФИО",               		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерСтруктураФИО",     		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаГлавногоБухгалтераПоПриказу",      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжностьНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжность",             	Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	Таблица.Колонки.Добавить("Кладовщик",                         		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("КладовщикФИО",                      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КладовщикСтруктураФИО",             		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("КладовщикДолжность",                		Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	Таблица.Колонки.Добавить("КладовщикДолжностьНаименование",    		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ДоверенностьНомер",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьВыдана",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьЧерезКого",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьДата",        ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыТОРГ12() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 				 ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Товар", 						 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТоварНаименование", 			 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТоварКод", 					 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество", 					 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоМест", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоВОдномМесте", 		 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",          Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковки",                  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ВидУпаковкиКод",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковкиНаименование",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассаБрутто", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена",						 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Возврат Таблица;
	
КонецФункции

// АКТ

// УДАЛИТЬ!!!
// Функция получает данные для формирования печатной формы Акт по схеме 5.01
//
Функция ПолучитьДанныеДляПечатнойФормыАкт501(ПараметрыПечати, Ссылка) Экспорт 
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Код КАК ВалютаДокументаКод,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК ФИОРуководителя,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.Представление КАК ФИОГлавБухгалтера,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.Сделка КАК ДокументРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	ТаблицаШапки = ЗапросШапка.Выполнить().Выгрузить();
	Если ТаблицаШапки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	КонецЕсли;

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
 	Шапка.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		Шапка.Вставить("ФИОРуководителя", СокрЛП(Фамилия) + " " + СокрЛП(Инициалы));
    КонецЕсли;
	
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		Шапка.Вставить("ФИОГлавБухгалтера", СокрЛП(Фамилия) + " " + СокрЛП(Инициалы));
    КонецЕсли;
    		
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросУслуги.УстановитьПараметр("Курс", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Курс));           
	ЗапросУслуги.УстановитьПараметр("Кратность", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Кратность));
	 		
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");

	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Цена * &Курс КАК ЦенаРуб,
	|	Сумма,
	|	Сумма * &Курс КАК СуммаРуб,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СуммаНДС * &Курс КАК СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Цена * &Курс КАК ЦенаРуб,
	|	Сумма,
	|	Сумма * &Курс КАК СуммаРуб,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СуммаНДС * &Курс КАК СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Шапка", Шапка);
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаУслуги);
	ДанныеДляПечати.Вставить("ВыводитьКоды", Ложь);
	ДанныеДляПечати.Вставить("ТекстКодАртикул", Ложь);
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетПродавца,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ВалютаДокумента.Код, """") КАК ВалютаКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ВалютаДокумента.Наименование, """") КАК ВалютаНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.СчетНаОплату КАК ДокументОснование,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,
	|	"""" КАК ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.Доверенность КАК ПредставительЗаказчика,
	|	"""" КАК ЗаЗаказчикаНаОсновании
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	"""" КАК НоменклатураКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийАктаОбОказанииУслуг(Знач МассивОбъектов) Экспорт
	
	ТаблицаСведений = ПолучитьОписаниеАктаОбОказанииУслуг();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг();
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	//Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			СведенияОДокументе.Валюта             = ВалютаРегУчета;
			СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
			СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		КонецЕсли;
		
		ТаблицаДокумента = ПолучитьОписаниеТаблицыАктаОбОказанииУслуг();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.Валюта <> ВалютаРегУчета
			И Выборка.РасчетыВУсловныхЕдиницах Тогда
			НуженПересчетВРубли = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС = Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС = Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность = 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС = Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
				СтрокаТаблицыДокумента.Сумма = СтрокаТаблицыДокумента.СуммаБезНДС + ?(Выборка.СуммаВключаетНДС, СтрокаТаблицыДокумента.СуммаНДС, 0);
				СтрокаТаблицыДокумента.Цена  = ?(СтрокаТаблицыДокумента.Количество=0, СтрокаТаблицыДокумента.Сумма, СтрокаТаблицыДокумента.Сумма / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, Новый Структура("ЗаполнятьРуководителя"));
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьОписаниеАктаОбОказанииУслуг() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ТипДокументы = Новый Массив();
	ТипДокументы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Документ",	 				Новый ОписаниеТипов(ТипДокументы));
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",   	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",        	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсправления",         	ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Поставщик",         			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Получатель",       			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("Организация",      			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",				Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",   	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", 	Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Руководитель",            			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",         			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",			Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу", 			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",            	Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	
	Таблица.Колонки.Добавить("ПредставительЗаказчика",            	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЗаЗаказчикаНаОсновании",            	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыАктаОбОказанииУслуг() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть",				Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки",					ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("НоменклатураКод",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество",					ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Цена",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаСНДС",					ОписаниеТиповЧисло15_2);
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьДоступныеВидыЭдПоВидуОперации(ВидОперации) Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ-12");
	Результат.Добавить(Перечисления.ВидыЭД.АктИсполнитель, "Акт об оказании услуг");
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидЭдПоУмолчанию(ВидОперации) Экспорт
	
	Возврат Перечисления.ВидыЭД.ТОРГ12Продавец;
		
КонецФункции

Процедура ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения) Экспорт
	
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьРуководителя") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.Руководитель)
			ИЛИ СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель Тогда
			СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
			СведенияОДокументе.РуководительФИО = ОтветственныеЛицаОрганизации.РуководительПредставление;
			СведенияОДокументе.РуководительСтруктураФИО = ОтветственныеЛицаОрганизации.РуководительФИО;
			СведенияОДокументе.РуководительДолжность = ОтветственныеЛицаОрганизации.РуководительДолжность;
			СведенияОДокументе.РуководительДолжностьНаименование = ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
			СведенияОДокументе.ЗаРуководителяПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Руководитель, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.РуководительФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.РуководительСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.РуководительДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжность) Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.РуководительДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьГлавногоБухгалтера") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтер)
			ИЛИ СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
			СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
			СведенияОДокументе.ГлавныйБухгалтерФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность;
			СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжностьПредставление;
			СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.ГлавныйБухгалтер, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.ГлавныйБухгалтерФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтерДолжность) Тогда
				СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.ГлавныйБухгалтерДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьКладовщика") Тогда
		Если ЗначениеЗаполнено(СведенияОДокументе.Кладовщик) Тогда
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Кладовщик, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.КладовщикФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.КладовщикСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.КладовщикДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.КладовщикДолжность) Тогда
				СведенияОДокументе.КладовщикДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.КладовщикДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ
////////////////////////////////////////////////////////////////////////////////

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	//ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") тогда
		
		ТабДокумент = ПечатьРасходнаяНакладная(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
				"Расходная накладная", ТабДокумент);
				
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12ДвеВалюты") тогда
		
		ТабДокумент = ПечатьТОРГ12_ДвеВалюты(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12ДвеВалюты",
				"ТОРГ-12 в двух валютах (Товарная накладная)", ТабДокумент);

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") тогда
		
		ТабДокумент = ПечатьТОРГ12(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12",
				"ТОРГ-12 (Товарная накладная)", ТабДокумент);
				
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт",
				"Акт об оказании услуг", ТабДокумент);

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктМосква") тогда
		
		ТабДокумент = ПечатьАктМосква(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктМосква",
				"Кредит-нота", ТабДокумент);

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПростой") тогда
		
		ТабДокумент = ПечатьАктПростой(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктПростой",
				"Акт приемки-сдачи работ", ТабДокумент);
				
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриемкиСдачи") тогда
		
		ТабДокумент = ПечатьАктПриемкиСдачи(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктПриемкиСдачи",
				"Акт приемки-сдачи (по услугам)", ТабДокумент);
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПолныхРабот") тогда
		
		ТабДокумент = ПечатьАкта(МассивОбъектов, "ПолныхРабот");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктПолныхРабот",
				"Акт об исполнении обязательств", ТабДокумент);
				
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктЗБС") тогда
		
		ТабДокумент = ПечатьАкта(МассивОбъектов, "ЗБС");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктЗБС",
				"Акт зарезки бокового ствола", ТабДокумент);
                       
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") тогда
		
		ТабДокумент = ПечатьМ15(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15",
				"М-15 (Накладная)", ТабДокумент);

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Petrosakh") тогда
		
		ТабДокумент = ПечатьPetrosakh(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Petrosakh",
				"Акт Petrosakh", ТабДокумент);   				
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСдачиПриемкиРаботЛукойл") тогда
		
		ТабДокумент = ПечатьАктСдачиПриемкиРаботЛукойл(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСдачиПриемкиРаботЛукойл",
		"Акт сдачи приемки работ лукойл", ТабДокумент);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПоГРПДляЛукойл") тогда
		
		ТабДокумент = ПечатьАктПоГРПДляЛукойл(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктПоГРПДляЛукойл",
		"Акт по ГРП для Лукойл", ТабДокумент);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктДляЛукойл") тогда
		
		ТабДокумент = ПечатьАктДляЛукойл(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктДляЛукойл",
		"Акт для Лукойл", ТабДокумент);	
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КС2ГРП") тогда
		
		ТабДокумент = ПечатьКС2ГРП(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КС2ГРП",
		"КС2ГРП", ТабДокумент);	
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктДляБашнефть") тогда
		
		ТабДокумент = ПечатьАктДляБашнефть(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктДляБашнефть",
		"Акт для башнефть", ТабДокумент);	
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктДляЭксплутационныйФонд") тогда
		
		ТабДокумент = ПечатьАктЭсплутационныйФонд(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктДляЭксплутационныйФонд",
		"Акт эксплутационного фонда", ТабДокумент);  
		
	КонецЕсли;

	// { RGS LFedotova 12.01.2018 1:44:03 - вопрос SLI-0007459
	Если НЕ ТабДокумент = Неопределено Тогда
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			1, ОбъектыПечати, МассивОбъектов);
	КонецЕсли;
	// } RGS LFedotova 12.01.2018 1:44:15 - вопрос SLI-0007459 
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРасходнаяНакладная(Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СтранаПроисхождения КАК СтранаПроисхождения,
	|	НомерГТД КАК НомерГТД,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СтранаПроисхождения  КАК СтранаПроисхождения,
	|		НомерГТД             КАК НомерГТД,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС,
	|		СтранаПроисхождения,
	|		НомерГТД
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	NULL,
	|	NULL,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	3
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка)
	                         								 + " от " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг'");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	ВыводитьКоды = Ложь;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

 		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = 0;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРасходнаяНакладная()

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12_ДвеВалюты(Ссылка)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,    //добавила Федотова Л., РГ-Софт, 17.10.11
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер //добавила Федотова Л., РГ-Софт, 17.10.11
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Курс));           
	Запрос.УстановитьПараметр("Кратность", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Кратность));
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	// { RGS MYurkevich 03.03.2015 13:57:24 - ICSLI-0075 
	//|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод
	|   ВЫБОР 
	|       КОГДА РеализацияТоваровУслуг.Номенклатура.Артикул = """" 
	|	          ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|       ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Артикул
	|   КОНЕЦ КАК ТоварКод,
	// } RGS MYurkevich 03.03.2015 13:57:27 - ICSLI-0075
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Цена КАК ЦенаUSD,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.Сумма КАК СуммаUSD,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID,
	|	РеализацияТоваровУслуг.СуммаБезНДСРуб, //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|	РеализацияТоваровУслуг.СуммаНДСРуб     //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	3,
	|	РеализацияТоваровУслуг.СуммаБезНДСРуб,  //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|	РеализацияТоваровУслуг.СуммаНДСРуб      //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12ДвеВалюты");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Выведем заголовок таблицы
	НомерСтраницы = 1;
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

	// Инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоСуммаНаСтраницеUSD   = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	ИтогоСуммаСНДСНаСтраницеUSD = 0;
	
	// Инициализация итогов по документу
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСуммаСНДСUSD  = 0;
	ИтогоСумма      = 0;
	ИтогоСуммаUSD   = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим многострочную часть докмента

	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		//Добавила условие Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
        Если ВыборкаСтрок.СуммаБезНДСРуб + ВыборкаСтрок.СуммаНДСРуб > 0 Тогда
			СуммаСНДС = ВыборкаСтрок.СуммаБезНДСРуб + ВыборкаСтрок.СуммаНДСРуб;
			СуммаНДС = ВыборкаСтрок.СуммаНДСРуб;
			СуммаБезНДС = ВыборкаСтрок.СуммаБезНДСРуб;
		Иначе	
			//Изменила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
			//СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			СуммаСНДС = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)),2);
			//Изменила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
			//СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС,2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
		КонецЕсли; 
		
		СуммаСНДСUSD = СуммаСНДС/Шапка.Курс;
		СуммаБезНДСUSD = ВыборкаСтрок.СуммаUSD;
		
		Количество  = ВыборкаСтрок.Количество;
		
		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаСНДСUSD   = СуммаСНДСUSD;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДСUSD = СуммаБезНДСUSD;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		ОбластьМакетаСтрока.Параметры.ЦенаUSD        = СуммаБезНДСUSD / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда

			// Выводим итоги по странице
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD = ИтогоСуммаСНДСНаСтраницеUSD;
			
			ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
			
			// Очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоСуммаНаСтраницеUSD      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;
			ИтогоСуммаСНДСНаСтраницеUSD  = 0;
			
			// Выведем заголовок таблицы
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);


		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоСуммаНаСтраницеUSD   = ИтогоСуммаНаСтраницеUSD   + СуммаБезНДСUSD;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
		ИтогоСуммаСНДСНаСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD  + СуммаСНДСUSD;
		
		// Увеличим итоги по документу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоСуммаUSD   = ИтогоСуммаUSD   + СуммаБезНДСUSD;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		ИтогоСуммаСНДСUSD  = ИтогоСуммаСНДСUSD  + СуммаСНДСUSD;

	КонецЦикла;

		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD;
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогСуммыUSD   = ИтогоСуммаUSD;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДСUSD  = ИтогоСуммаСНДСUSD;

		ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа


	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);

	//Изменила Федотова Л., РГ-Софт, 17.10.11 ->
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя = "" + Фамилия + " " + Инициалы;
    КонецЕсли;
	
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = Фамилия + " " + Инициалы;
    КонецЕсли;
		
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.СуммаПрописьюUSD                           = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДСUSD, Шапка.ВалютаДокумента);
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДС, ВалютаРегламентированногоУчета);
	
	ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12_ДвеВалюты()

// Функция формирует табличный документ с печатной формой акта об обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(Ссылка)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросУслуги.УстановитьПараметр("Курс", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Курс));           
		
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Цена * &Курс КАК ЦенаРуб,
	|	Сумма,
	|	Сумма * &Курс КАК СуммаРуб,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СуммаНДС * &Курс КАК СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Цена * &Курс КАК ЦенаРуб,
	|	Сумма,
	|	Сумма * &Курс КАК СуммаРуб,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СуммаНДС * &Курс КАК СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка)
	                        					  + " от " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг'");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	Если Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыРуб");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаРуб");
		ОбластьМакета.Параметры.Вал = Шапка.ВалютаДокумента;
	КонецЕсли;                                       

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
        ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

		СуммаРуб    = ТаблицаУслуги.Итог("СуммаРуб");
		СуммаНДСРуб = ТаблицаУслуги.Итог("СуммаНДСРуб");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

		СуммаРуб    = 0;
		СуммаНДСРуб = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;
	
	Если НЕ Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
	 	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРуб");
		ОбластьМакета.Параметры.ВсегоРуб = ФормированиеПечатныхФорм.ФорматСумм(СуммаРуб);
		ТабДокумент.Вывести(ОбластьМакета);

		Если Шапка.УчитыватьНДС Тогда

			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСРуб");
			ОбластьМакета.Параметры.ВсегоНДСРуб = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДСРуб);
			ОбластьМакета.Параметры.НДСРуб      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС руб.");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	СуммаКПрописиРуб = СуммаРуб + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДСРуб);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если НЕ Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюРуб");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
		                                       + ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописиРуб, ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописиРуб, ВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция формирует табличный документ с печатной формой кредит-ноты
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктМосква(Ссылка)

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.НомерСчетаНаОплату,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Руководитель.НаименованиеEng
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID,
	|	РеализацияТоваровУслугТовары.Well КАК Скважина,
	|	РеализацияТоваровУслугТовары.Oilfield КАК Месторождение,
	|	РеализацияТоваровУслугТовары.TicketNumber КАК Отчет,
	|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеENG КАК НаименованиеENG
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	NULL,
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	NULL,
	|	"""",
	|	РеализацияТоваровУслугУслуги.Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	2,
	|	РеализацияТоваровУслугУслуги.Well,
	|	РеализацияТоваровУслугУслуги.Oilfield,
	|	РеализацияТоваровУслугУслуги.TicketNumber,
	|	РеализацияТоваровУслугУслуги.СодержаниеEng
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Товар,
	|	ВТ.ТоварНаименование,
	|	ВТ.СтранаПроисхождения,
	|	ВТ.ПредставлениеСтраны,
	|	ВТ.НомерГТД,
	|	ВТ.Количество,
	|	ВТ.Цена,
	|	ВТ.СтавкаНДС,
	|	ВТ.СуммаНДС,
	|	ВТ.Сумма,
	|	ВТ.НомерСтроки КАК НомерСтроки,
	|	ВТ.ID КАК ID,
	|	ВТ.Скважина,
	|	ВТ.Месторождение,
	|	ВТ.Отчет,
	|	ВТ.НаименованиеENG,
	|	ВТ.ЕдиницаИзмерения,
	|	ВТ.ПредставлениеГТД
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	
	ТЧТоварыУслуги = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктМосква";
	Макет       = ПолучитьМакет("АктМосква");

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаКН");
	
 	ОбластьМакета.Параметры.Номер = СокрЛП(?(Шапка.НомерСчетаНаОплату = "",Шапка.Номер,Шапка.НомерСчетаНаОплату));
  	ОбластьМакета.Параметры.Дата = Формат(Шапка.Дата,"ДФ=dd.MM.yyyy");
	Если Не Шапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код <> "643" Тогда
  		ОбластьМакета.Параметры.Организация = "Schlumberger Logelco Inc.";
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(Шапка.ПодразделениеОрганизации) Тогда
 			ОбластьМакета.Параметры.Адрес = "No 8 Aquilino de la Guardia Panama 1 Republic of Panama";
		Иначе
			ОбластьМакета.Параметры.Адрес = "Representative office address: "+ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "АнглийскийАдрес,");
		КонецЕсли;
	Иначе
  		ОбластьМакета.Параметры.Организация = "Шлюмберже Лоджелко Инк.";
 		ОбластьМакета.Параметры.Адрес = "Адрес представительства: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ЮридическийАдрес,");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Клиент = Шапка.Получатель.DescriptionFull + Символы.ПС + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "АнглийскийАдрес,");
	ОбластьМакета.Параметры.Контракт = Шапка.ДоговорКонтрагента.НаименованиеEng;
	ОбластьМакета.Параметры.Валюта = ?(Шапка.ВалютаДокумента.наименованиеeng="", Шапка.ВалютаДокумента, Шапка.ВалютаДокумента.наименованиеeng);
	
	ОбластьМакета.Параметры.Well = "";
	Выгрузка = ТЧТоварыУслуги.Скопировать();
	Выгрузка.Свернуть("Месторождение, Скважина");
	ПустаяСтрокаСкв = Выгрузка.Найти(Справочники.Wells.ПустаяСсылка(), "Скважина");
	Если Не ПустаяСтрокаСкв = Неопределено Тогда
		Выгрузка.Удалить(ПустаяСтрокаСкв);
	КонецЕсли;
	ПустаяСтрокаМест = Выгрузка.Найти(Справочники.Oilfields.ПустаяСсылка(), "Месторождение");
	Если Не ПустаяСтрокаМест = Неопределено Тогда
		Выгрузка.Удалить(ПустаяСтрокаМест);
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Выгрузка Цикл
		ОбластьМакета.Параметры.Well = ОбластьМакета.Параметры.Well + ?(Выгрузка.Индекс(СтрокаТЧ) =0, "" + СтрокаТЧ.Месторождение.НаименованиеENG + " " + СтрокаТЧ.Скважина.НаименованиеENG, ", " + СтрокаТЧ.Месторождение.НаименованиеENG + " " + СтрокаТЧ.Скважина.НаименованиеENG);
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Выгрузка = ТЧТоварыУслуги.Скопировать();
	Выгрузка.Свернуть("Отчет, ТоварНаименование, ЕдиницаИзмерения, Цена, НаименованиеENG", "Сумма, Количество");
	Для Каждого СтрокаТЧ Из Выгрузка Цикл
	    ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ОбластьМакета.Параметры.SIR = СтрокаТЧ.Отчет;
		ОбластьМакета.Параметры.ЕдИзм = СтрокаТЧ.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Описание = СтрокаТЧ.ТоварНаименование + "/" + СтрокаТЧ.НаименованиеENG;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	СуммаНДС = ТЧТоварыУслуги.Итог("СуммаНДС");
	СуммаПоДокументу = ТЧТоварыУслуги.Итог("Сумма");
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.СтавкаНДС = ТЧТоварыУслуги[0].СтавкаНДС;  
		ОбластьМакета.Параметры.СуммаБезНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаПоДокументу);  
		ОбластьМакета.Параметры.СуммаНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);  
		ОбластьМакета.Параметры.Сумма      = ?(Шапка.СуммаВключаетНДС, СуммаПоДокументу, СуммаПоДокументу+СуммаНДС);
	ТабДокумент.Вывести(ОбластьМакета);

	СФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка.Сделка, "СчетФактураВыданный"); 
	ОбластьМакета = Макет.ПолучитьОбласть("Дополнительно");
	Если НЕ СФ = Неопределено Тогда
		ОбластьМакета.Параметры.Примечание = "Credit note to "+ СокрЛП(СФ.Номер) + " dtd " + Формат(СФ.Дата,"ДФ=dd.MM.yyyy") +
		" / " + "Кредит-нота к счету "+ СокрЛП(СФ.Номер) + " от " + Формат(СФ.Дата,"ДФ=dd.MM.yyyy"); 
	КонецЕсли;
	ОбластьМакета.Параметры.Номер = ?(Шапка.НомерСчетаНаОплату = "",Шапка.Номер,Шапка.НомерСчетаНаОплату);  
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Руководитель = Шапка.РуководительНаименованиеEng;  
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьАктМосква()

Функция ПечатьАктПростой(Ссылка)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктПростой";
	Макет       = ПолучитьМакет("АктПростой");

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагентаНаименование,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.Руководитель.Должность КАК РуководительДолжность,
	|	РеализацияТоваровУслуг.ВалютаДокумента.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Выборка = ЗапросШапка.Выполнить().Выбрать();
	Выборка.Следующий();

	ОбластьМакета = Макет.ПолучитьОбласть("Основная");
	ОписаниеОрг = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "НаименованиеЗаказчика,");
	ОписаниеОрг = ОписаниеОрг + ", " + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), "ЮридическийАдрес,ИНН,");
	ОписаниеКПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "КПП,");
	ОписаниеОргФил = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,");
	БанковскиеРеквизитыОрг = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет");
	БанковскиеРеквизитыКонтр = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет");
	
	ОбластьМакета.Параметры.Организация = ОписаниеОрг+","+ОписаниеКПП+Символы.ПС+ Символы.ПС +"Адрес: "+ОписаниеОргФил
	+ Символы.ПС + Символы.ПС + "Банковские реквизиты:" + БанковскиеРеквизитыОрг;
	ОбластьМакета.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), 
											"ПолноеНаименование,ЮридическийАдрес,ИНН,КПП")+ Символы.ПС + Символы.ПС + "Банковские реквизиты:" + БанковскиеРеквизитыКонтр;
											
	СФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
	
	НомерАкта = СокрЛП(СФ.Номер);
	Кол = СтрЧислоВхождений(НомерАкта,"-");
	Для н=0 по Кол+1 Цикл
		
		длин = СтрДлина(НомерАкта);
		ном= СтрНайти(НомерАкта,"-");
		
		НомерАкта = Прав(НомерАкта,длин-ном); 
				
		н=н+1;
	КонецЦикла;
	
	ОбластьМакета.Параметры.Номер = Строка(НомерАкта)+"/"+ Формат(СФ.Дата,"ДФ=yy");
	ОбластьМакета.Параметры.Дата = Формат(СФ.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Договор = Выборка.ДоговорКонтрагентаНаименование;

	ТабДокумент.Вывести(ОбластьМакета);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Содержание";
	ТабУслуги = ЗапросШапка.Выполнить().Выгрузить();
	
	ТабУслуги.Свернуть("Содержание","Сумма, СуммаНДС");
	Для каждого СтрокаУслуги из ТабУслуги Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Услуга");
		ОбластьМакета.Параметры.Услуга = СтрокаУслуги.Содержание;
		СуммаУслуги = СтрокаУслуги.Сумма+СтрокаУслуги.СуммаНДС;
		ОбластьМакета.Параметры.Сумма = СуммаУслуги;
	  	ОбластьМакета.Параметры.Валюта = Выборка.ВалютаНаименованиеПолное;
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаУслуги, Выборка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
    КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("НДС");
	ОбластьМакета.Параметры.Сумма = ТабУслуги.Итог("СуммаНДС");
	ОбластьМакета.Параметры.Валюта = Выборка.ВалютаНаименованиеПолное;
	ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ТабУслуги.Итог("СуммаНДС"), Выборка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подпись");
	ОбластьМакета.Параметры.ФИО = Выборка.Руководитель;
	ОбластьМакета.Параметры.Должность = Выборка.РуководительДолжность;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции //ПечатьАктПростой()

Функция ПечатьАктПриемкиСдачи(Ссылка)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктПростой";
	Макет       = ПолучитьМакет("АктПриемкиСдачи");

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагентаНаименование,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.Руководитель,
	|	РеализацияТоваровУслуг.Ссылка.Руководитель.Должность КАК РуководительДолжность,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.БанковскийСчетОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент.ОсновноеКонтактноеЛицо КАК КонтрагентОснКонтактноеЛицо,
	|	РеализацияТоваровУслуг.Ссылка.Руководитель.Наименование КАК РуководительНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование,
	|	РеализацияТоваровУслуг.Ссылка.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Выборка = ЗапросШапка.Выполнить().Выбрать();
	Выборка.Следующий(); 
		
	ОбластьМакета = Макет.ПолучитьОбласть("Основная");
	ОписаниеОрг= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "НаименованиеЗаказчика,");
	ОписаниеОрг = ОписаниеОрг + "," + Символы.ПС + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), "ЮридическийАдрес,");
	ОписаниеКонтр = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,КПП");

	ОбластьМакета.Параметры.Организация = ОписаниеОрг;
	//Исправила Федотова Л., РГ-Софт, 30.06.15, вопрос SLI-0005535
	//ОбластьМакета.Параметры.СчетОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(
	//										Выборка.ПодразделениеОрганизации, Выборка.Дата,,Выборка.БанковскийСчетОрганизации), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет,");
	ОбластьМакета.Параметры.СчетОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(
											Выборка.ПодразделениеОрганизации, Выборка.Дата,Выборка.БанковскийСчетОрганизации), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет,");
	ОбластьМакета.Параметры.Контрагент =  ОписаниеКонтр;
	ОбластьМакета.Параметры.СчетКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет,");

	ОбластьМакета.Параметры.Филиал = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,КПП");
	
	СФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");

	ОбластьМакета.Параметры.Номер = СокрЛП(СФ.Номер);
	ОбластьМакета.Параметры.Дата = Формат(СФ.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Договор = Выборка.ДоговорКонтрагентаНаименование;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугУслуги.Количество) КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.ЕдиницаИзмерения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.ЕдиницаИзмерения";
	ТабУслуги = ЗапросШапка.Выполнить().Выгрузить();

	ОбластьМакета.Параметры.ВидРабот = Выборка.НоменклатураНаименование;
	
	ТабДокумент.Вывести(ОбластьМакета);
    ОбластьМакета = Макет.ПолучитьОбласть("Основание");
	ОбластьМакета.Параметры.Контрагент = Выборка.КонтрагентНаименованиеПолное;
    ОбластьМакета.Параметры.КонтрагентЛицо = Выборка.КонтрагентОснКонтактноеЛицо;
    ОбластьМакета.Параметры.Руководитель = Выборка.РуководительНаименование;
	ОбластьМакета.Параметры.Организация = Выборка.ОрганизацияНаименованиеПолное;
	ТабДокумент.Вывести(ОбластьМакета);
	
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.Валюта = Выборка.ВалютаНаименованиеПолное;
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки=0;
	Для каждого СтрокаУслуги из ТабУслуги Цикл
		НомерСтроки= НомерСтроки+1;
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакета.Параметры.Услуга = СтрокаУслуги.Содержание;
		СуммаУслуги= СтрокаУслуги.Сумма+СтрокаУслуги.СуммаНДС;
		ОбластьМакета.Параметры.СуммаСНДС = СуммаУслуги;
		ОбластьМакета.Параметры.Сумма = СтрокаУслуги.Сумма;
        ОбластьМакета.Параметры.НДС = СтрокаУслуги.СуммаНДС;
		ОбластьМакета.Параметры.Цена = СтрокаУслуги.Цена;
		ОбластьМакета.Параметры.Количество = СтрокаУслуги.Количество;
		ОбластьМакета.Параметры.Ед = СтрокаУслуги.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Номер = НомерСтроки;
		ТабДокумент.Вывести(ОбластьМакета);
    КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоТаблицы");
	ОбластьМакета.Параметры.ВсегоНДС = ТабУслуги.Итог("СуммаНДС");
	ОбластьМакета.Параметры.ВсегоСумма = ТабУслуги.Итог("Сумма");
	ОбластьМакета.Параметры.ВсегоСНДС = ТабУслуги.Итог("Сумма")+ТабУслуги.Итог("СуммаНДС");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Пропись");
	
	ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ТабУслуги.Итог("Сумма")+ТабУслуги.Итог("СуммаНДС"), Выборка.ВалютаДокумента);
	ОбластьМакета.Параметры.НДС = ТабУслуги.Итог("СуммаНДС");
	ОбластьМакета.Параметры.СуммаНДСПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ТабУслуги.Итог("СуммаНДС"), Выборка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подпись");
   	ОбластьМакета.Параметры.Расшифровка = Выборка.Руководитель;
   	ОбластьМакета.Параметры.Должность = Выборка.РуководительДолжность;
   
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции //ПечатьАктПриемкиСдачи()	

Функция ПечатьАкта(Ссылка, ВидАкта)
	      	
	ТабДокумент = Новый ТабличныйДокумент;	
	Если ВидАкта = "ПолныхРабот" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТПолныхРабот";
		Макет       = ПолучитьМакет("АктПолныхРабот");
	ИначеЕсли ВидАкта = "ЗБС" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТЗБС";
		Макет       = ПолучитьМакет("АктЗБС");
	КонецЕсли; 

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагентаНаименование,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.Руководитель.Должность КАК РуководительДолжность,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Контрагент.DescriptionFull,
	|	РеализацияТоваровУслуг.Руководитель.ФИОродительныйПадеж,
	|	РеализацияТоваровУслуг.Руководитель.Доверенность,
	|	РеализацияТоваровУслуг.Заказчик.Наименование,
	|	РеализацияТоваровУслуг.Заказчик,
	|	РеализацияТоваровУслуг.Заказчик.Должность,
	|	РеализацияТоваровУслуг.Заказчик.Доверенность
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Выборка = ЗапросШапка.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Основная");
	
	ОбластьМакета.Параметры.Дата =  Формат(Выборка.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Договор = Выборка.ДоговорКонтрагентаНаименование;
	ОбластьМакета.Параметры.СторонаВАкте = КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата).СторонаВАкте;
	
	//Добавила Федотова Л., РГ-Софт, 26.05.14, вопрос SLI-0004542 
	//Если ВидАкта = "ПолныхРабот" Тогда
		ОбластьМакета.Параметры.РасшифровкаЗаказчика = КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата).РасшифровкаЗаказчика;
	//КонецЕсли;
	ОбластьМакета.Параметры.КонтрагентКратко = Выборка.КонтрагентDescriptionFull;
	ОбластьМакета.Параметры.АдресКонтрагента = КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата).ЮридическийАдрес;
	                                                                                              
	ОбластьМакета.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.ПодразделениеОрганизации, Выборка.Дата), "НаименованиеЗаказчика");
		
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Well,
	|	РеализацияТоваровУслугУслуги.Oilfield,
	|	РеализацияТоваровУслугУслуги.Oilfield.НаименованиеРодПадеж,
	|	РеализацияТоваровУслугУслуги.Oilfield.ИнвентарныйНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Well,
	|	РеализацияТоваровУслугУслуги.Oilfield,
	|	РеализацияТоваровУслугУслуги.Oilfield.НаименованиеРодПадеж,
	|	РеализацияТоваровУслугУслуги.Oilfield.ИнвентарныйНомер";
	ТабУслуги = ЗапросШапка.Выполнить().Выгрузить();

	ОбластьМакета.Параметры.Скважина = ТабУслуги[0].Well;
	Если ВидАкта = "ПолныхРабот" Тогда
		ОбластьМакета.Параметры.Месторождение = ТабУслуги[0].Oilfield;
	ИначеЕсли ВидАкта = "ЗБС" Тогда
		ОбластьМакета.Параметры.МесторождениеРодПадеж = ТабУслуги[0].OilfieldНаименованиеРодПадеж;
		ОбластьМакета.Параметры.ИнвентарныйНомер = ТабУслуги[0].OilfieldИнвентарныйНомер;
	КонецЕсли; 
	
	ИтогоСумма = ТабУслуги.Итог("Сумма");
	ИтогоНДС   = ТабУслуги.Итог("СуммаНДС");
	ИтогоСумма = ИтогоСумма + ИтогоНДС;
	
	ОбластьМакета.Параметры.Стоимость = Формат(ИтогоСумма,"ЧДЦ=2");
	ОбластьМакета.Параметры.Валюта = СклонениеВалюты(Цел(ИтогоСумма),Выборка.ВалютаВзаиморасчетов);
	ОбластьМакета.Параметры.НДС = Формат(ИтогоНДС,"ЧДЦ=2");
	ОбластьМакета.Параметры.ВалютаНДС = СклонениеВалюты(Цел(ИтогоНДС),Выборка.ВалютаВзаиморасчетов);
	ОбластьМакета.Параметры.ФИОПодрядчик = Выборка.Руководитель;
	ОбластьМакета.Параметры.ФИОПодрядчика = Выборка.РуководительФИОродительныйПадеж;
	ОбластьМакета.Параметры.ПоДоверенности = "Доверенность " + СокрЛП(Выборка.РуководительДоверенность);
	ОбластьМакета.Параметры.ФИОЗаказчик = СокрЛП(Выборка.ЗаказчикНаименование);
	ОбластьМакета.Параметры.ДолжностьЗаказчик = СокрЛП(Выборка.ЗаказчикДолжность);
	ОбластьМакета.Параметры.ЗаказчикПоДоверенности = ?(Выборка.Заказчик.Пустая(),"","Доверенность " + СокрЛП(Выборка.ЗаказчикДоверенность));
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
              	
КонецФункции //ПечатьАкта()

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(Ссылка)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации, //добавила Федотова Л., РГ-Софт, 09.12.15     
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,        //добавила Федотова Л., РГ-Софт, 17.10.11 
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер     //добавила Федотова Л., РГ-Софт, 17.10.11
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Курс));           
	Запрос.УстановитьПараметр("Кратность", ?(Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Шапка.Кратность));
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	// { RGS MYurkevich 03.03.2015 13:57:24 - ICSLI-0075 
	//|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод
	|   ВЫБОР 
	|       КОГДА РеализацияТоваровУслуг.Номенклатура.Артикул = """" 
	|	          ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|       ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Артикул
	|   КОНЕЦ КАК ТоварКод,
	// } RGS MYurkevich 03.03.2015 13:57:27 - ICSLI-0075
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID,
	|	РеализацияТоваровУслуг.СуммаБезНДСРуб,  //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|	РеализацияТоваровУслуг.СуммаНДСРуб      //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	3,
	|	РеализацияТоваровУслуг.СуммаБезНДСРуб, //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|	РеализацияТоваровУслуг.СуммаНДСРуб     //Добавила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	//Добавила Федотова Л., РГ-Софт, 09.12.15, вопрос SLI-0006019
	СведенияОПодразделении  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации,  Шапка.ДатаДокумента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,Телефоны,ИНН,КПП,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	//Добавила Федотова Л., РГ-Софт, 09.12.15, вопрос SLI-0006019
	ПредставлениеПодразделения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделении, "ПолноеНаименование, ФактическийАдрес,");
	//
	
	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
	//Добавила Федотова Л., РГ-Софт, 09.12.15, вопрос SLI-0006019
	ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения  = ПредставлениеПодразделения;
	//

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Выведем заголовок таблицы
	НомерСтраницы = 1;
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

 
	// Инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// Инициализация итогов по документу
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();

	// Выводим многострочную часть докмента

	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		//Добавила условие Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
        Если ВыборкаСтрок.СуммаБезНДСРуб + ВыборкаСтрок.СуммаНДСРуб > 0 Тогда
			СуммаСНДС = ВыборкаСтрок.СуммаБезНДСРуб + ВыборкаСтрок.СуммаНДСРуб;
			СуммаНДС = ВыборкаСтрок.СуммаНДСРуб;
			СуммаБезНДС = ВыборкаСтрок.СуммаБезНДСРуб;
		Иначе	
			//Изменила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
			//СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			СуммаСНДС = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)),2);
			//Изменила Федотова Л., РГ-Софт, 17.06.13, вопрос SLI-0003633
			//СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС,2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
		КонецЕсли; 
		
		Количество  = ВыборкаСтрок.Количество;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда

			// Выводим итоги по странице
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
			
			// Очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;
			
			// Выведем заголовок таблицы
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);


		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

 
		// Увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// Увеличим итоги по документу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;


	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;


	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
     
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);

	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя = СокрЛП(Фамилия) + " " + СокрЛП(Инициалы);
    КонецЕсли;
		
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		Фамилия  = ТаблицаРегистра[0].Фамилия;
		Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = СокрЛП(Фамилия) + " " + СокрЛП(Инициалы);
	КонецЕсли;
      	
	ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДС, ВалютаРегламентированногоУчета);
	
	ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
 
	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15(Ссылка)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаСоставления,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Склад.Наименование КАК СкладНаименование,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КонтрагентКод,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ДоговорВид
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	ВыборкаШапки = Запрос.Выполнить().Выбрать();
	ВыборкаШапки.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс", ?(ВыборкаШапки.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, ВыборкаШапки.Курс));           
	Запрос.УстановитьПараметр("Кратность", ?(ВыборкаШапки.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, ВыборкаШапки.Кратность));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
	

	Макет = ПолучитьОбщийМакет("М15");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("Строка");
	Подвал           = Макет.ПолучитьОбласть("Подвал");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";

	// Выведем шапку документа
	Шапка.Параметры.Заполнить(ВыборкаШапки);
	
	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.ЮрФизЛицо, ВыборкаШапки.ДатаСоставления);
	
	Шапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаШапки);
	Шапка.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.Контрагент, ВыборкаШапки.ДатаСоставления), "ПолноеНаименование,");
	Шапка.Параметры.Основание                = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаШапки.Сделка), РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаШапки.Сделка, СокрЛП(ВыборкаШапки.Сделка.Метаданные().Представление())), "Договор " + СокрЛП(ВыборкаШапки.ДоговорНаименование));
	
	ТабДокумент.Вывести(Шапка);
	
	// Подготовим к выводу выборку строк
	ВыборкаСтрок.Колонки.Добавить("СуммаСНДС");
	ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС");
	
	Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл

 		СуммаНДС    = СтрокаВыборки.СуммаНДС;
		Количество  = СтрокаВыборки.Количество;
		СуммаСНДС   = (СтрокаВыборки.Сумма + ?(ВыборкаШапки.СуммаВключаетНДС, 0, СтрокаВыборки.СуммаНДС));
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		СтрокаВыборки.ТоварНаименование = СокрЛП(СтрокаВыборки.ТоварНаименование);
		СтрокаВыборки.СуммаСНДС         = СуммаСНДС;
		СтрокаВыборки.СуммаБезНДС       = СуммаБезНДС;
		СтрокаВыборки.Цена              = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
	КонецЦикла;
	
	// Заполним подвал документа

	Подвал.Параметры.Заполнить(ВыборкаШапки);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапки.Руководители, ВыборкаШапки.ДатаДокумента,);
	ПечРуководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	ИтогНДС      = ВыборкаСтрок.Итог("СуммаНДС");
	
	Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрок.Количество(), ,",,,с,,,,,0");
	Подвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаСНДС"), ВалютаРегламентированногоУчета);
	Подвал.Параметры.ИтогНДС                                    = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " руб. " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " коп. ", "______ руб. ______ коп.");
	Подвал.Параметры.ФИОРуководителя                            = ПечРуководитель;
	Подвал.Параметры.ФИОГлавБухгалтера                          = Бухгалтер;
	
	// Инициализируем счетчик страниц
	НомерСтраницы = 1;
	
	// Выведем заголовок табличной части
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем выборку строк
	Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл

		СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				
		// Если обрабатываемая строка - последняя, будем проверять, помещается ли подвал документа
		Если ВыборкаСтрок.Индекс(СтрокаВыборки) = ВыборкаСтрок.Количество() - 1 Тогда 
			СтрокаСПодвалом.Добавить(Подвал);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			//ТабДокумент.Вывести(ПодвалТаблицы);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			НомерСтраницы = НомерСтраницы + 1;
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;
	
	// Выведем все подвалы
	//ТабДокумент.Вывести(ПодвалТаблицы);
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ15()

Функция ПечатьPetrosakh(Ссылка)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация КАК Продавец,
	|	""Schlumberger Logelco Inc."" КАК ПродавецENG,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Контрагент.НаименованиеEnglish КАК ПокупательENG
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросУслуги.УстановитьПараметр("Курс", ОбщегоНазначения.КурсДокумента(Ссылка, ВалютаРегламентированногоУчета));
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Petrosakh_Акт";
	Макет       = ПолучитьМакет("Petrosakh");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер = Шапка.Номер;
	ОбластьМакета.Параметры.НомерДоговора = СокрЛП(Шапка.ДоговорКонтрагента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАкта");
	ОбластьМакета.Параметры.Заполнить(Шапка); 
	ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП(Шапка.ДоговорКонтрагента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		
		ОбластьСтроки.Параметры.Номенклатура = СокрЛП(СтрокаТабличнойЧасти.Номенклатура);
		
        ОбластьСтроки.Параметры.Цена = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.Цена);
        ОбластьСтроки.Параметры.Сумма = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.Сумма);
        ОбластьСтроки.Параметры.СуммаНДС = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС);
		
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;
	
	Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
    ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Всего;
	ОбластьМакета.Параметры.ВсегоНДС = ВсегоНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
 	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Всего = Всего;
	ОбластьМакета.Параметры.ВсегоНДС = ВсегоНДС;
	ОбластьМакета.Параметры.Курс = ОбщегоНазначения.КурсДокумента(Ссылка, ВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьPetrosakh()

Функция СклонениеВалюты(Сумма,Валюта)  Экспорт
	
	СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);

	ПолеПрописи1       = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1));
	ПолеПрописи2       = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2));
	ПолеПрописи3       = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3));
       	
	ПоследнееЧисло = Число(Прав(Строка(Сумма),1));
	
	Если ПоследнееЧисло=1 Тогда
		Возврат ПолеПрописи1;
	ИначеЕсли (ПоследнееЧисло>=2) и (ПоследнееЧисло<5) Тогда
		Возврат ПолеПрописи2;
	Иначе
		Возврат ПолеПрописи3;
 	КонецЕсли;	
		
КонецФункции

//[РКХ->] Кипр
//RG-Soft 16.09.13
Функция ПечатьАктСдачиПриемкиРаботЛукойл(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК Договор,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.Товары.(
		|		ЕдиницаИзмерения,
		|		Количество,
		|		Номенклатура,
		|		Цена,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Товары.Well, 0) КАК Скважина,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Товары.Oilfield, 0) КАК Месторождения,
		|		СуммаБезНДСРуб,
		|		СуммаНДСРуб
		|	),
		|	РеализацияТоваровУслуг.Услуги.(
		|		Количество,
		|		Цена,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		Номенклатура,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Услуги.Well, 0) КАК Скважина,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Услуги.Oilfield, 0) КАК Месторождения,
		|		ЕдиницаИзмерения,
		|		СуммаБезНДСРуб,
		|		СуммаНДСРуб
		|	),
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
		|	РеализацияТоваровУслуг.Руководитель.ФИОродительныйПадеж КАК РуководительРод,
		|	РеализацияТоваровУслуг.Руководитель.Должность КАК Должность,
		|	РеализацияТоваровУслуг.Руководитель.Представление КАК Руководитель,
		|	РеализацияТоваровУслуг.Руководитель.Доверенность КАК Доверенность,
		|	РеализацияТоваровУслуг.Заказчик.Должность,
		|	РеализацияТоваровУслуг.Заказчик.Представление,
		|	РеализацияТоваровУслуг.Заказчик.Доверенность,
		|	РеализацияТоваровУслуг.Заказчик.ФИОродительныйПадеж,
		|	РеализацияТоваровУслуг.Заказчик.Наименование,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Руководитель.Пол,
		|	РеализацияТоваровУслуг.Заказчик.Пол
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	ЗапросМесторождения = Новый Запрос;
	ЗапросМесторождения.Текст = "ВЫБРАТЬ
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	                            |	КОНЕЦ КАК Скважина,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	                            |	КОНЕЦ КАК Месторождение
	                            |ИЗ
	                            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                            |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                            |		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	                            |ГДЕ
	                            |	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	                            |	КОНЕЦ
	                            |
	                            |ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	                            |	КОНЕЦ
	                            |ИЗ
	                            |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	                            |ГДЕ
	                            |	РеализацияТоваровУслугУслуги.Ссылка В(&МассивОбъектов)
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	                            |	КОНЕЦ";
	ЗапросМесторождения.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаМесторождения = ЗапросМесторождения.Выполнить().Выбрать();
	
    ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктСдачиПриемкиРаботЛукойл";
	Макет       = ПолучитьМакет("АктСдачиПриемкиРаботЛукойл");
	Месторождение = "";
	Пока Выборка.Следующий() Цикл
	    Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Организация = Выборка.Организация;
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), "ЮридическийАдрес,Банк,НомерСчет,КоррСчет,ИНН,КПП,"); 
		Область.Параметры.Контрагент = Выборка.Контрагент;
		Область.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), "ЮридическийАдрес,Банк,НомерСчет,КоррСчет,ИНН,КПП,");
		Область.Параметры.Номер = Выборка.Номер;
		Область.Параметры.Дата = Выборка.Дата;
		Область.Параметры.Договор = Выборка.Договор;
		//Область.Параметры.ДолжностьПодрядчикаРод = ФормированиеПечатныхФорм.ПадежП(Выборка.Должность, 2);
		Область.Параметры.ФИОПодрядчикаРод = Выборка.РуководительРод;
		Если НЕ Выборка.Доверенность = "" Тогда
			Область.Параметры.НаОснованииПодрядчик = ", "+ ?(Выборка.РуководительПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.Доверенность;
		КонецЕсли;
		Область.Параметры.ДолжностьЗаказчикаРод = Выборка.ЗаказчикДолжность;
		Область.Параметры.ФИОЗаказчикаРод = Выборка.ЗаказчикНаименование;
		Если НЕ Выборка.ЗаказчикДоверенность = "" Тогда
			Область.Параметры.НаОснованииЗаказчик = ", "+ ?(Выборка.ЗаказчикПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.ЗаказчикДоверенность;
		КонецЕсли;
		Месяцы = Новый Соответствие;
		Месяцы.Вставить(1,"январе");
		Месяцы.Вставить(2,"феврале");
		Месяцы.Вставить(3,"марте");
		Месяцы.Вставить(4,"апреле");
		Месяцы.Вставить(5,"мае");
		Месяцы.Вставить(6,"июне");
		Месяцы.Вставить(7,"июле");
		Месяцы.Вставить(8,"августе");
		Месяцы.Вставить(9,"сентябре");
		Месяцы.Вставить(10,"октябре");
		Месяцы.Вставить(11,"ноябре");
		Месяцы.Вставить(12,"декабре");
		Месяц = Месяцы.Получить(Месяц(Выборка.Дата));
		Область.Параметры.ДатаИсполнения = Месяц + " " + Строка(Формат(Год(Выборка.Дата), "ЧГ=0")) + "г.";
		
		
		ТабДокумент.Вывести(Область);
		Первый = Истина;
		Пока ВыборкаМесторождения.Следующий() Цикл			
			Если ВыборкаМесторождения.Месторождение <> 0 И ВыборкаМесторождения.Скважина <> 0 Тогда
				Если Первый = Ложь Тогда
					Месторождение = Месторождение + ", ";
				КонецЕсли;
				Месторождение = Месторождение + ВыборкаМесторождения.Месторождение + ", " + ВыборкаМесторождения.Скважина;
				Первый = Ложь;
			ИначеЕсли ВыборкаМесторождения.Месторождение <> 0 Тогда
				Если Первый = Ложь Тогда
					Месторождение = Месторождение + ", ";
				КонецЕсли;
				Месторождение = Месторождение + ", " + ВыборкаМесторождения.Месторождение;
				Первый = Ложь;
			КонецЕсли;
		КонецЦикла; 
		Область = Макет.ПолучитьОбласть("ТаблицаШапка");
		Область.Параметры.Месторождение = Месторождение;
		Область.Параметры.Валюта = Выборка.Валюта;
		ТабДокумент.Вывести(Область);
		НомерСтроки = 1;
		Область = Макет.ПолучитьОбласть("Таблица");
		ВыборкаТовары = Выборка.Товары.Выбрать();
		СуммаНДС = 0;
		СуммаСНДС = 0;
		Пока ВыборкаТовары.Следующий() Цикл
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.Номенклатура = ВыборкаТовары.Номенклатура;
			Область.Параметры.Количество = ВыборкаТовары.Количество;
			Область.Параметры.Цена = ВыборкаТовары.Цена;
			Область.Параметры.Сумма = ВыборкаТовары.Сумма;
			СуммаСНДС = СуммаСНДС + ВыборкаТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаТовары.СуммаНДС;
			ТабДокумент.Вывести(Область);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			Область.Параметры.НомерСтроки = НомерСтроки;
			Область.Параметры.Номенклатура = ВыборкаУслуги.Номенклатура;
			Область.Параметры.Количество = ВыборкаУслуги.Количество;
			Область.Параметры.Цена = ВыборкаУслуги.Цена;
			Область.Параметры.Сумма = ВыборкаУслуги.Сумма;
			СуммаСНДС = СуммаСНДС + ВыборкаУслуги.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаУслуги.СуммаНДС;
			ТабДокумент.Вывести(Область);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		СуммаСНДСИтог = ?(Выборка.СуммаВключаетНДС,СуммаСНДС, СуммаСНДС + СуммаНДС);
		Область = Макет.ПолучитьОбласть("ТаблицаИтоги");
		Область.Параметры.СуммаНДС = СуммаНДС;
		Область.Параметры.СуммаСНДС = СуммаСНДСИтог;
		Область.Параметры.СуммаБезНДС = СуммаСНДС;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Подвал");
		Если Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
			Парам = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		Иначе
		    Парам = "доллар,доллара,долларов,м,цент,цента,центов,м,2";		
		КонецЕсли; 
		Область.Параметры.СуммаБезНДСПрописью = Формат(СуммаСНДС, "ЧДЦ=2") + " (" + ЧислоПрописью(СуммаСНДС,,Парам) + ")";
		Область.Параметры.СуммаНДСПрописью = Формат(СуммаНДС, "ЧДЦ=2") + " (" + ЧислоПрописью(СуммаНДС,,Парам) + ")";
		Область.Параметры.СуммаСНДСПрописью = Формат(СуммаСНДСИтог, "ЧДЦ=2") + " (" + ЧислоПрописью(СуммаСНДСИтог,,Парам) + ")";
		Область.Параметры.ДолжностьПодрядчика = Выборка.Должность;
		Область.Параметры.ФИОПодрядчика = Выборка.Руководитель;
		Область.Параметры.ДолжностьЗаказчика = Выборка.ЗаказчикДолжность;
		Область.Параметры.ФИОЗаказчика = Выборка.ЗаказчикПредставление;
		ТабДокумент.Вывести(Область);
	КонецЦикла; 
 	
	Возврат ТабДокумент;
	

КонецФункции 

Функция ПечатьАктДляЛукойл(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
		|	РеализацияТоваровУслуг.Доверенность,
		|	РеализацияТоваровУслуг.Услуги.(
		|		НомерСтроки,
		|		Содержание,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		СуммаНДС,
		|		Номенклатура,
		|		ЕдиницаИзмерения,
		|		СуммаБезНДСРуб,
		|		СуммаНДСРуб,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Услуги.Well, 0) КАК Скважина,
		|		ЕСТЬNULL(РеализацияТоваровУслуг.Услуги.Oilfield, 0) КАК Месторождение
		|	),
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
		|	РеализацияТоваровУслуг.Подписанты.(
		|		Сторона,
		|		Представитель,
		|		Должность
		|	),
		|	РеализацияТоваровУслуг.Руководитель.ФИОродительныйПадеж КАК РуководительФИО,
		|	РеализацияТоваровУслуг.Руководитель.Представление,
		|	РеализацияТоваровУслуг.Руководитель.Должность,
		|	РеализацияТоваровУслуг.Руководитель.Доверенность,
		|	РеализацияТоваровУслуг.Заказчик.Должность,
		|	РеализацияТоваровУслуг.Заказчик.Доверенность,
		|	РеализацияТоваровУслуг.Заказчик.ФИОродительныйПадеж КАК ЗаказчикФИО,
		|	РеализацияТоваровУслуг.Заказчик.Представление,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Руководитель.Пол,
		|	РеализацияТоваровУслуг.Заказчик.Пол
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
    ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктДляЛукойл";
	Макет = ПолучитьМакет("АктДляЛукойл");

	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Шапка");
		ДатаДок = Формат(Выборка.Дата,"ДЛФ=DD");
		Область.Параметры.Номер = Выборка.Номер;
		Область.Параметры.Дата = ДатаДок;
		Область.Параметры.Договор = Выборка.ДоговорНаименование;
		Область.Параметры.Валюта = Выборка.Валюта;
		Если НЕ Выборка.РуководительДоверенность = "" Тогда
			Область.Параметры.НаОснованииКомпания = ", "+ ?(Выборка.РуководительПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности ";
			Область.Параметры.ДоверенностьКомпания = Выборка.РуководительДоверенность;
		КонецЕсли;
		Область.Параметры.ДолжностьИсполнителя = Выборка.РуководительДолжность;
		Область.Параметры.ФИОИсполнителя = Выборка.РуководительФИО;
		Если НЕ Выборка.ЗаказчикДоверенность = "" Тогда
			Область.Параметры.НаОсновнииЗаказчик = ", "+ ?(Выборка.ЗаказчикПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности ";
			Область.Параметры.ДоверенностьЗаказчик = Выборка.ЗаказчикДоверенность;
		КонецЕсли;
		Область.Параметры.ДолжностьЗаказчика = Выборка.ЗаказчикДолжность;
		Область.Параметры.ФИОЗаказчика = Выборка.ЗаказчикФИО;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Таблица");
		СуммаИтого = 0;
		СуммаНДСИтого = 0;
		
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			Область.Параметры.НомерСтроки = ВыборкаУслуги.НомерСтроки;
			Область.Параметры.Номенклатура = Строка(ВыборкаУслуги.Номенклатура) + ?(ВыборкаУслуги.Месторождение<>0, ", месторождение " + Строка(ВыборкаУслуги.Месторождение),"")
				+ ?(ВыборкаУслуги.Скважина<>0," скважина " + Строка(ВыборкаУслуги.Скважина),"");
			Область.Параметры.ЕдИзм = ВыборкаУслуги.ЕдиницаИзмерения;
			Область.Параметры.Количество = ВыборкаУслуги.Количество;
			Область.Параметры.Цена = ВыборкаУслуги.Цена;
			Область.Параметры.СуммаБезНДС = ВыборкаУслуги.Сумма; 
			СуммаИтого = СуммаИтого + ВыборкаУслуги.Сумма;
			Область.Параметры.СуммаНДС = ВыборкаУслуги.СуммаНДС; 
			СуммаНДСИтого = СуммаНДСИтого + ВыборкаУслуги.СуммаНДС; 
			Область.Параметры.СуммаСНДС = ?(Выборка.СуммаВключаетНДС,ВыборкаУслуги.Сумма,ВыборкаУслуги.Сумма + ВыборкаУслуги.СуммаНДС);
			ТабДокумент.Вывести(Область);			
			
		КонецЦикла; 
		СуммаСНДСИтого = ?(Выборка.СуммаВключаетНДС,СуммаИтого,СуммаИтого + СуммаНДСИтого);
		Область = Макет.ПолучитьОбласть("ТаблицаИтоги");
		Область.Параметры.СуммаБезНДСИтого = СуммаИтого;
		Область.Параметры.СуммаСНДСИтого = СуммаСНДСИтого;
		Область.Параметры.СуммаНДСИтого = СуммаНДСИтого;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТекстИтог");
		Область.Параметры.Договор = Выборка.ДоговорНаименование;
		Область.Параметры.СуммаБезНДСИтого = СуммаИтого;
		Если Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
			Парам = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		Иначе
		    Парам = "доллар,доллара,долларов,м,цент,цента,центов,м,2";		
		КонецЕсли; 
		Область.Параметры.СуммаБезНДСИтогоПрописью = ЧислоПрописью(СуммаИтого,,Парам);
		Область.Параметры.СуммаНДС = СуммаНДСИтого;
		Область.Параметры.СуммаНДСПрописью = ЧислоПрописью(СуммаНДСИтого,,Парам);
		Область.Параметры.СуммаСНДСИтого = СуммаСНДСИтого;
		Область.Параметры.СуммаСНДСИтогоПрописью = ЧислоПрописью(СуммаСНДСИтого,,Парам);
		ТабДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ПодписьОсновная");
		Область.Параметры.ФИОИсполнителя = Выборка.РуководительПредставление;
		Область.Параметры.ФИОЗаказчика = Выборка.ЗаказчикПредставление;
		ТабДокумент.Вывести(Область);
		
		ВыборкаПодписанты = Выборка.Подписанты.Выбрать();
		Если ВыборкаПодписанты.Количество()>0 Тогда
			Область = Макет.ПолучитьОбласть("ПодписьДоп");
			Пока ВыборкаПодписанты.Следующий() Цикл
				Если ВыборкаПодписанты.Сторона = Перечисления.Сторона.Организация Тогда 					
					Область.Параметры.ДолжностьОрганизацияДоп = ВыборкаПодписанты.Должность;
					Область.Параметры.ФИОИсполнителяДоп = ВыборкаПодписанты.Представитель;
				Иначе
					Область.Параметры.ДолжностьКонтрагентДоп = ВыборкаПодписанты.Должность;
					Область.Параметры.ФИОЗаказчикаДоп = ВыборкаПодписанты.Представитель;
				КонецЕсли;
			КонецЦикла;
			ТабДокумент.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабДокумент;

	

КонецФункции

Функция ПечатьАктПоГРПДляЛукойл(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК Договор,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК Руководитель,
	|	РеализацияТоваровУслуг.Товары.(
	|		Сумма,
	|		СуммаНДС
	|	),
	|	РеализацияТоваровУслуг.Услуги.(
	|		Сумма,
	|		СуммаНДС
	|	),
	|	РеализацияТоваровУслуг.Руководитель.Должность,
	|	РеализацияТоваровУслуг.Заказчик.Представление КАК Заказчик,
	|	РеализацияТоваровУслуг.Заказчик.Должность,
	|	РеализацияТоваровУслуг.Подписанты.(
	|		Представитель,
	|		Должность,
	|		Сторона
	|	),
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ДополнительныеРеквизиты.(
	|		Свойство,
	|		Значение
	|	)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ЗапросМесторождения = Новый Запрос;
	ЗапросМесторождения.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	|	КОНЕЦ КАК Скважина,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	|	КОНЕЦ КАК Месторождение
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	|	КОНЕЦ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	|	КОНЕЦ";
	ЗапросМесторождения.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаМесторождения = ЗапросМесторождения.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктПоГРПДляЛукойл";
	Макет       = ПолучитьМакет("АктПоГРПДляЛукойл");
	Месторождение = "";
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.ФИОРуководителя = Выборка.Руководитель;
		Область.Параметры.Дата = Выборка.Дата;
		Область.Параметры.Номер = Выборка.Номер;
		Область.Параметры.Договор = Выборка.Договор;
		ВыборкаДопРеквизиты = Выборка.ДополнительныеРеквизиты.Выбрать();
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Основная");
		
		Первый = Истина;
		Пока ВыборкаМесторождения.Следующий() Цикл			
			Если ВыборкаМесторождения.Месторождение <> 0 И ВыборкаМесторождения.Скважина <> 0 Тогда
				Если Первый = Ложь Тогда
					Месторождение = Месторождение + ", ";
				КонецЕсли;
				Месторождение = Месторождение + ВыборкаМесторождения.Скважина + ", " + ВыборкаМесторождения.Месторождение;
				Первый = Ложь;
			КонецЕсли;
		КонецЦикла; 
		Область.Параметры.Месторождение = Месторождение;
		ВыборкаТовары = Выборка.Товары.Выбрать();
		СуммаНДС = 0;
		СуммаСНДС = 0;
		Пока ВыборкаТовары.Следующий() Цикл
			СуммаНДС = СуммаНДС + ВыборкаТовары.СуммаНДС;
		КонецЦикла;
		
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			СуммаНДС = СуммаНДС + ВыборкаУслуги.СуммаНДС;
		КонецЦикла; 
		
		Если Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
			Парам = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		Иначе
			Парам = "доллар,доллара,долларов,м,цент,цента,центов,м,2";		
		КонецЕсли; 
		Область.Параметры.Сумма = Формат(Выборка.СуммаДокумента, "ЧДЦ=2") + " (" + ЧислоПрописью(Выборка.СуммаДокумента,,Парам) + ")";
		Область.Параметры.СуммаНДС = Формат(СуммаНДС, "ЧДЦ=2") + " (" + ЧислоПрописью(СуммаНДС,,Парам) + ")";
		Пока ВыборкаДопРеквизиты.Следующий() Цикл
			Если ВыборкаДопРеквизиты.Свойство.Наименование = "Дата выполнения (Реализация товаров и услуг)" Тогда
				Область.Параметры.ДатаИсполнения = Формат(ВыборкаДопРеквизиты.Значение, "ДФ=dd.MM.yyyy");
			ИначеЕсли ВыборкаДопРеквизиты.Свойство.Наименование = "Закачано проппанта план (Реализация товаров и услуг)" Тогда
				Область.Параметры.План = ВыборкаДопРеквизиты.Значение;
			ИначеЕсли ВыборкаДопРеквизиты.Свойство.Наименование = "Закачано проппанта факт (Реализация товаров и услуг)" Тогда
				Область.Параметры.Факт = ВыборкаДопРеквизиты.Значение;
			ИначеЕсли ВыборкаДопРеквизиты.Свойство.Наименование = "Закачано проппанта в пласт (Реализация товаров и услуг)" Тогда
				Область.Параметры.ВПласт = ВыборкаДопРеквизиты.Значение;
			КонецЕсли;
		КонецЦикла;		
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Подпись");
		Область.Параметры.ДолжностьРуководителя = Выборка.РуководительДолжность;
		Область.Параметры.ФИОРуководителя = Выборка.Руководитель;
		Область.Параметры.ДолжностьКонтрагента = Выборка.ЗаказчикДолжность;
		Область.Параметры.ФИОКонтр = Выборка.Заказчик;
		ВыборкаПодписанты = Выборка.Подписанты.Выбрать();
		Пока ВыборкаПодписанты.Следующий() Цикл
			Если ВыборкаПодписанты.Сторона = Перечисления.Сторона.Организация Тогда
				Область.Параметры.ДолжностьОрганизацияДоп = ВыборкаПодписанты.Должность;
				Область.Параметры.ФИООрганизацияДоп = ВыборкаПодписанты.Представитель;
			Иначе
				Область.Параметры.ДолжностьКонрагентаДоп = ВыборкаПодписанты.Должность;
				Область.Параметры.ФИОКонтрДоп = ВыборкаПодписанты.Представитель;
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(Область);		
	КонецЦикла; 
	
	Возврат ТабДокумент;

	

КонецФункции // ПечатьАктПоГРПДляЛукойл()

Функция ПечатьКС2ГРП(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК ФИОРуководителя,
	|	РеализацияТоваровУслуг.Товары.(
	|		Сумма,
	|		СуммаНДС,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Товары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА РеализацияТоваровУслуг.Товары.Номенклатура.БазоваяЕдиницаИзмерения
	|			ИНАЧЕ РеализацияТоваровУслуг.Товары.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Количество,
	|		Цена,
	|		Номенклатура
	|	),
	|	РеализацияТоваровУслуг.Услуги.(
	|		Сумма,
	|		СуммаНДС,
	|		Количество,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Услуги.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА РеализацияТоваровУслуг.Услуги.Номенклатура.БазоваяЕдиницаИзмерения
	|			ИНАЧЕ РеализацияТоваровУслуг.Услуги.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Цена,
	|		Номенклатура
	|	),
	|	РеализацияТоваровУслуг.Руководитель.Должность КАК ДолжностьРуководителя,
	|	РеализацияТоваровУслуг.Заказчик.Представление КАК ФИОЗаказчика,
	|	РеализацияТоваровУслуг.Заказчик.Должность КАК ДолжностьЗаказчика,
	|	РеализацияТоваровУслуг.Подписанты.(
	|		Представитель,
	|		Должность,
	|		Сторона
	|	),
	|	РеализацияТоваровУслуг.Организация.КодПоОКПО КАК ОрганизацияОКПО,
	|	РеализацияТоваровУслуг.Организация.КодОКВЭД КАК ОрганизацияОКВЭД,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.SiebelID КАК НомерДоговора,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаНачала КАК ДатаДоговора,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Инвестор,
	|	РеализацияТоваровУслуг.Контрагент.КодПоОКПО КАК КонтрагентОКПО,
	|	РеализацияТоваровУслуг.Грузоотправитель.КодПоОКПО КАК ИнвесторОКПО,
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ДополнительныеРеквизиты.(
	|		Свойство,
	|		Значение
	|	)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ЗапросМесторождения = Новый Запрос;
	ЗапросМесторождения.Текст = "ВЫБРАТЬ
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	                            |	КОНЕЦ КАК Скважина,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	                            |	КОНЕЦ КАК Месторождение,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.Код, 0) КАК AgreementКод,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ДатаНачала, 0) КАК AgreementДатаНачала,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ИнвестПроект, 0) КАК ИнвестПроект
	                            |ИЗ
	                            |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                            |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                            |		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	                            |ГДЕ
	                            |	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	                            |	КОНЕЦ,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.Код, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ДатаНачала, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ИнвестПроект, 0)
	                            |
	                            |ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	                            |	КОНЕЦ,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.Код, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ДатаНачала, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ИнвестПроект, 0)
	                            |ИЗ
	                            |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	                            |ГДЕ
	                            |	РеализацияТоваровУслугУслуги.Ссылка В(&МассивОбъектов)
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	                            |			ТОГДА 0
	                            |		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	                            |	КОНЕЦ,
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.Код, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ДатаНачала, 0),
	                            |	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ИнвестПроект, 0)";
	ЗапросМесторождения.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаМесторождения = ЗапросМесторождения.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_КС2ГРП";
	Макет       = ПолучитьМакет("КС2ГРП");
	Месторождение = "";
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заполнить(Выборка);
		Область.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечатьБезПрефикса(Выборка.Ссылка);
		//Область.Параметры.Инвестор = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Инвестор, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		//Область.Параметры.ИнвесторОКПО = ?(Выборка.Инвестор = Выборка.Контрагент, Выборка.КонтрагентОКПО, Выборка.ИнвесторОКПО);
		Область.Параметры.Заказчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Область.Параметры.Подрядчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		ТипСтроительства = "";
		Область.Параметры.Стройка = "Интенсификация притока нефти методом ГРП. " + ТипСтроительства;		
		Пока ВыборкаМесторождения.Следующий() Цикл
			Если ВыборкаМесторождения.AgreementКод <> 0 Тогда
				ДопСогл = "/" + Строка(ВыборкаМесторождения.AgreementКод);
				ДатаДопС = Формат(ВыборкаМесторождения.AgreementДатаНачала,"ДФ=dd.MM.yyyy");
				ДатаДопСогл = "/" + Строка(ДатаДопС);
				Инвест = ВыборкаМесторождения.ИнвестПроект;
			КонецЕсли;
			Если ВыборкаМесторождения.Месторождение <> 0 И ВыборкаМесторождения.Скважина <> 0 Тогда
				Месторождение = Строка(ВыборкаМесторождения.Скважина) + " " + Строка(ВыборкаМесторождения.Месторождение);
			КонецЕсли;
		КонецЦикла;
		Область.Параметры.Объект = Месторождение;
		Область.Параметры.ИнвестПреокт = Инвест;
		Область.Параметры.НомерДопСоглашения =ДопСогл;
		Область.Параметры.ДатаДопСоглашения =ДатаДопСогл;
		Область.Параметры.ДатаДоговора = Формат(Выборка.ДатаДоговора, "ДФ=dd.MM.yyyy");
		ВыборкаДоп = Выборка.ДополнительныеРеквизиты.Выбрать();
		Пока ВыборкаДоп.Следующий() Цикл
			Если ВыборкаДоп.Свойство.Наименование = "Дата начала периода (Реализация товаров и услуг)" Тогда
				Область.Параметры.ДатаНач = ВыборкаДоп.Значение;
			ИначеЕсли ВыборкаДоп.Свойство.Наименование = "Дата окончания периода (Реализация товаров и услуг)" Тогда
				Область.Параметры.ДатаКон = ВыборкаДоп.Значение;
			КонецЕсли;
		КонецЦикла; 
		Область.Параметры.ТекстСметнаяСтоимость = "Сметная (договорная) стоимость в соответствии с договором подряда (субподряда): " + ЧислоПрописью(Выборка.СуммаДокумента) + " (" + Выборка.СуммаДокумента + ") " + Выборка.Валюта;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТаблицаОбъект");
		Область.Параметры.Объект = Месторождение;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Строка");
		ВыборкаТовары = Выборка.Товары.Выбрать();
		СуммаВсего = 0;
		НомерСтроки = 1;
		Пока ВыборкаТовары.Следующий() Цикл
			Область.Параметры.Заполнить(ВыборкаТовары);
			Область.Параметры.НомерСТроки = НомерСтроки;
			ТабДокумент.Вывести(Область);
			НомерСтроки = НомерСтроки + 1;
			СуммаВсего = СуммаВсего + ВыборкаТовары.Сумма;
		КонецЦикла;		
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			Область.Параметры.Заполнить(ВыборкаУслуги);
			Область.Параметры.НомерСТроки = НомерСтроки;
			ТабДокумент.Вывести(Область);
			НомерСтроки = НомерСтроки + 1;
            СуммаВсего = СуммаВсего + ВыборкаУслуги.Сумма;			
		КонецЦикла; 
		
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.Заполнить(Выборка);
		Область.Параметры.ВсегоСумма = СуммаВсего;
		ТабДокумент.Вывести(Область);
		
		
		Область = Макет.ПолучитьОбласть("ДопПодписанты");
		ВыборкаПодписанты = Выборка.Подписанты.Выбрать();
		Пока ВыборкаПодписанты.Следующий() Цикл
			Если ВыборкаПодписанты.Сторона = Перечисления.Сторона.Контрагент Тогда
				Область.Параметры.ДолжностьЗаказчикаДоп1 = ВыборкаПодписанты.Должность;
				Область.Параметры.ФИОЗаказчикаДоп1 = ВыборкаПодписанты.Представитель;
				ТабДокумент.Вывести(Область);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	Возврат ТабДокумент;

	

КонецФункции 

Функция ПечатьАктДляБашнефть(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК Договор,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.Руководитель.ФИОродительныйПадеж КАК РуководительФИОРод,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК РуководительФИО,
	|	РеализацияТоваровУслуг.Руководитель.Должность,
	|	РеализацияТоваровУслуг.Руководитель.Доверенность,
	|	РеализацияТоваровУслуг.Заказчик.ФИОродительныйПадеж КАК ЗаказчикФИОРод,
	|	РеализацияТоваровУслуг.Заказчик.Представление КАК ЗаказчикФИО,
	|	РеализацияТоваровУслуг.Заказчик.Доверенность,
	|	РеализацияТоваровУслуг.Заказчик.Должность,
	|	РеализацияТоваровУслуг.Руководитель.Пол,
	|	РеализацияТоваровУслуг.Заказчик.Пол,
	|	РеализацияТоваровУслуг.Услуги.(
	|		Номенклатура,
	|		Сумма,
	|		СуммаНДС
	|	),
	|	РеализацияТоваровУслуг.Подписанты.(
	|		Сторона,
	|		Представитель,
	|		Должность
	|	),
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ДополнительныеРеквизиты.(
	|		Свойство,
	|		Значение
	|	)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ЗапросМесторождения = Новый Запрос;
	ЗапросМесторождения.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	|	КОНЕЦ КАК Скважина,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	|	КОНЕЦ КАК Месторождение,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.Код, 0) КАК AgreementКод,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ДатаНачала, 0) КАК AgreementДатаНачала,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ИнвестПроект, 0) КАК ИнвестПроект
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Oilfield, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.Код, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ДатаНачала, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Agreement.ИнвестПроект, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.Код, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ДатаНачала, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ИнвестПроект, 0)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0) = ЗНАЧЕНИЕ(Справочник.Wells.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Well, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0) = ЗНАЧЕНИЕ(Справочник.Oilfields.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслугУслуги.Oilfield, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.Код, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ДатаНачала, 0),
	|	ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Agreement.ИнвестПроект, 0)";
	ЗапросМесторождения.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаМесторождения = ЗапросМесторождения.Выполнить().Выбрать();
	Макет = ПолучитьМакет("АктДляБашнефть");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктДляБашнефть";
	ЗапросМатериал = Новый Запрос;
	ЗапросМатериал.Текст="ВЫБРАТЬ
	                |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	                |	МАКСИМУМ(РеализацияТоваровУслугТовары.Цена) КАК Цена,
	                |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	                |	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	                |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	                |	ВЫБОР
	                |		КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	                |			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения
	                |		ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения
	                |	КОНЕЦ КАК ЕдиницаИзмерения
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                |ГДЕ
	                |	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	                |	И РеализацияТоваровУслугТовары.Номенклатура.Тип.Наименование = &Тип
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РеализацияТоваровУслугТовары.Номенклатура,
	                |	ВЫБОР
	                |		КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	                |			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения
	                |		ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения
	                |	КОНЕЦ";
	ЗапросМатериал.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросМатериал.УстановитьПараметр("Тип", "CHEM");
	ВыборкаХим = ЗапросМатериал.Выполнить().Выбрать();
	ЗапросМатериал.УстановитьПараметр("Тип", "M&S");
	ВыборкаМатериал = ЗапросМатериал.Выполнить().Выбрать();
	

	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заполнить(Выборка);
		Область.Параметры.Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
		//Область.Параметры.ДолжностьЗаказчикаРод = ФормированиеПечатныхФорм.ПадежП(Выборка.ЗаказчикДолжность, 2);
		Если Выборка.ЗаказчикДоверенность <> "" Тогда
			Область.Параметры.ЗаказчикДоверенность = ", "+ ?(Выборка.ЗаказчикПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.ЗаказчикДоверенность;
		КонецЕсли;
		//Область.Параметры.ДолжностьРуководителяРод = ФормированиеПечатныхФорм.ПадежП(Выборка.РуководительДолжность, 2);
		Если Выборка.РуководительДоверенность <> "" Тогда
			Область.Параметры.РуководительДоверенность = ", "+ ?(Выборка.РуководительПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.РуководительДоверенность;
		КонецЕсли;
		Пока ВыборкаМесторождения.Следующий() Цикл
			Если ВыборкаМесторождения.Месторождение <> 0 Тогда
				Месторождение = ВыборкаМесторождения.Месторождение;
			КонецЕсли;
			Если ВыборкаМесторождения.Скважина <> 0 Тогда
				Скважина = ВыборкаМесторождения.Скважина;
			КонецЕсли;
		КонецЦикла;
		Область.Параметры.Месторождение = Месторождение;
		Область.Параметры.Скважина = Скважина;
		ВыборкаДоп = Выборка.ДополнительныеРеквизиты.Выбрать();
		Пока ВыборкаДоп.Следующий() Цикл
			Если ВыборкаДоп.Свойство.Наименование = "НГДУ (Реализация товаров и услуг)"	Тогда
				Область.Параметры.НГДУ = ВыборкаДоп.Значение;
			ИначеЕсли ВыборкаДоп.Свойство.Наименование = "ЦДНГ (Реализация товаров и услуг)" Тогда
				Область.Параметры.ЦДНГ = ВыборкаДоп.Значение;
			ИначеЕсли ВыборкаДоп.Свойство.Наименование = "Дата выполнения (Реализация товаров и услуг)" Тогда
				Область.Параметры.ДатаРабот = Формат(ВыборкаДоп.Значение, "ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЦикла; 
		
		ТабДокумент.Вывести(Область);
		СуммаДоп = 0;
		СуммаДопНДС = 0;
		
		Проппант = Ложь;
		ВыборкаДоп = Выборка.ДополнительныеРеквизиты.Выбрать();
		Область = Макет.ПолучитьОбласть("ШапкаМатериал");
		ТабДокумент.Вывести(Область);
		
		Пока ВыборкаДоп.Следующий() Цикл
		    Область = Макет.ПолучитьОбласть("Доп");
			Если ВыборкаДоп.Свойство.Наименование = "Закачано проппанта факт (Реализация товаров и услуг)" Тогда
				Область.Параметры.Номенклатура = "Всего закачано проппанта:";
				Область.Параметры.Количество = ВыборкаДоп.Значение;
				Область.Параметры.ЕдиницаИзмерения = "тн";
				ТабДокумент.Вывести(Область);
				Проппант = Истина;
			ИначеЕсли ВыборкаДоп.Свойство.Наименование = "Закачано проппанта в пласт (Реализация товаров и услуг)" Тогда
				Область.Параметры.Номенклатура = "Закачано в пласт:";
				Область.Параметры.Количество = ВыборкаДоп.Значение;
				Область.Параметры.ЕдиницаИзмерения = "тн";
				ТабДокумент.Вывести(Область);
				Проппант = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Проппант Тогда 
			Область = Макет.ПолучитьОбласть("ШапкаДоп");
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("Материал");
		Пока ВыборкаМатериал.Следующий() Цикл
			Область.Параметры.Заполнить(ВыборкаМатериал);
			Область.Параметры.Цена = Формат(ВыборкаМатериал.Цена,"ЧДЦ=2"); 
			СуммаДоп = СуммаДоп + ВыборкаМатериал.Сумма;			
			СуммаДопНДС = СуммаДопНДС + ВыборкаМатериал.СуммаНДС;
			Область.Параметры.Валюта = Выборка.Валюта;
			ТабДокумент.Вывести(Область);
		КонецЦикла;
		
		Если ВыборкаХим.Количество()>0 Тогда 
			Область = Макет.ПолучитьОбласть("ШапкаХимреагенты");
			ТабДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Химреагенты");
			Пока ВыборкаХим.Следующий() Цикл
				Область.Параметры.Заполнить(ВыборкаХим);
				Область.Параметры.Цена = Формат(ВыборкаХим.Цена,"ЧДЦ=2");
				Область.Параметры.Валюта = Выборка.Валюта;
				ТабДокумент.Вывести(Область);
				СуммаДоп = СуммаДоп + ВыборкаХим.Сумма;
				СуммаДопНДС = СуммаДопНДС + ВыборкаХим.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
	
		Область = Макет.ПолучитьОбласть("ШапкаСтоимость");
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Стоимость");
		ВыборкаУслуги = Выборка.Услуги.Выбрать();
		СуммаИтог = 0;
		СуммаНДС = 0;
		
		Область.Параметры.Номенклатура = "Стоимость ГРП согласно таблицы приложения №1";
		Область.Параметры.Сумма = СуммаДоп;
		Область.Параметры.Валюта = Выборка.Валюта;
		ТабДокумент.Вывести(Область);
		Пока ВыборкаУслуги.Следующий() Цикл
			Область.Параметры.Номенклатура = "Стоимость " + Строка(ВыборкаУслуги.Номенклатура);
			Область.Параметры.Сумма = ВыборкаУслуги.Сумма;
			Область.Параметры.Валюта = Выборка.Валюта;
			ТабДокумент.Вывести(Область);
			СуммаИтог = СуммаИтог + ВыборкаУслуги.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаУслуги.СуммаНДС;
		КонецЦикла; 
		
		Область = Макет.ПолучитьОбласть("Итоги");
		Область.Параметры.ВсегоСтоимость = СуммаИтог + СуммаДоп;
		Область.Параметры.ВсегоНДС = СуммаНДС + СуммаДопНДС;
		Область.Параметры.ВсегоСНДС = ?(Выборка.СуммаВключаетНДС, СуммаИтог+СуммаДоп, СуммаИтог+СуммаДоп+СуммаНДС+СуммаДопНДС);
		Область.Параметры.Валюта = Выборка.Валюта;
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Подпись");
		Область.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(Область);
		
		ВыборкаПодписанты = Выборка.Подписанты.Выбрать();
		Если ВыборкаПодписанты.Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть("ДопПодпись");
			Пока ВыборкаПодписанты.Следующий() Цикл
				Если ВыборкаПодписанты.Сторона = Перечисления.Сторона.Контрагент Тогда
					Область.Параметры.ДолжностьЗаказчикДоп = ВыборкаПодписанты.Должность;
					Область.Параметры.ФИОЗаказчикДоп = ВыборкаПодписанты.Представитель;
				КонецЕсли;				
			КонецЦикла;
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции  

Функция ПечатьАктЭсплутационныйФонд(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК Договор,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.Руководитель.ФИОродительныйПадеж КАК РуководительФИОРод,
	|	РеализацияТоваровУслуг.Руководитель.Представление КАК РуководительФИО,
	|	РеализацияТоваровУслуг.Руководитель.Должность,
	|	РеализацияТоваровУслуг.Руководитель.Доверенность,
	|	РеализацияТоваровУслуг.Заказчик.ФИОродительныйПадеж КАК ЗаказчикФИОРод,
	|	РеализацияТоваровУслуг.Заказчик.Представление КАК ЗаказчикФИО,
	|	РеализацияТоваровУслуг.Заказчик.Доверенность,
	|	РеализацияТоваровУслуг.Заказчик.Должность,
	|	РеализацияТоваровУслуг.Руководитель.Пол,
	|	РеализацияТоваровУслуг.Заказчик.Пол,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Услуги.(
	|		Oilfield,
	|		Well,
	|		Номенклатура,
	|		Количество,
	|		СУММА(Цена),
	|		СУММА(Сумма),
	|		СуммаНДС
	|	),
	|	РеализацияТоваровУслуг.СуммаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Услуги.(Номенклатура,
	|	Well,
	|	Oilfield,
	|	Количество,
	|	СуммаНДС)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЗапросДоп = Новый Запрос;
	ЗапросДоп.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугПодписанты.Сторона,
		|	РеализацияТоваровУслугПодписанты.Представитель,
		|	РеализацияТоваровУслугПодписанты.Должность
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Подписанты КАК РеализацияТоваровУслугПодписанты
		|ГДЕ
		|	РеализацияТоваровУслугПодписанты.Ссылка В(&МассивОбъектов)";

	ЗапросДоп.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Результат = ЗапросДоп.Выполнить();

	ВыборкаПодписанты = Результат.Выбрать();


	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Макет = ПолучитьМакет("АктДляЭксплутационныйФонд");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктДляЭксплутационныйФонд";
	
	Пока Выборка.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заполнить(Выборка);
		//Область.Параметры.ДолжностьЗаказчикаРод = ФормированиеПечатныхФорм.ПадежП(Выборка.ЗаказчикДолжность, 2);
		Область.Параметры.ДолжностьЗаказчика = Выборка.ЗаказчикДолжность;
		Если Выборка.ЗаказчикДоверенность <> "" Тогда
			Область.Параметры.ЗаказчикДоверенность = ", "+ ?(Выборка.ЗаказчикПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.ЗаказчикДоверенность;
		КонецЕсли;
		Если Выборка.РуководительДоверенность <> "" Тогда
			Область.Параметры.РуководительДоверенность = ", "+ ?(Выборка.РуководительПол = Перечисления.ПолФизическогоЛица.Мужской,"действующего ","действующей ") + "на основании доверенности " + Выборка.РуководительДоверенность;
		КонецЕсли;
		ТабДокумент.Вывести(Область);
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	0 КАК НомерСтолбца,
		|	РеализацияТоваровУслугУслуги.Цена
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
		Результат = Запрос.Выполнить();
		ТаблицаШапки = Результат.Выгрузить();
		
		Область = Макет.ПолучитьОбласть("ШапкаТаблица | Начало");
		ТабДокумент.Вывести(Область);
		НС = 4;
		Для каждого Строка из ТаблицаШапки Цикл
			Строка.НомерСтолбца = НС;
			Область = Макет.ПолучитьОбласть("ШапкаТаблица | Динамическая");
			Область.Параметры.НаименованиеСтолбца = Строка(Строка.Номенклатура) + ", "+ Строка.Цена+Выборка.Валюта;
			ТабДокумент.Присоединить(Область);
			НС = НС + 1;
		КонецЦикла;
		НоваяСтрока = ТаблицаШапки.Добавить();
		НоваяСтрока.Номенклатура = "Итого";
		НоваяСтрока.НомерСтолбца = НС;
		Область = Макет.ПолучитьОбласть("ШапкаТаблица | ОкончаниеШапка");
		Область.Параметры.Валюта = Выборка.Валюта;
		ТабДокумент.Присоединить(Область);	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Well КАК Скважина,
		|	РеализацияТоваровУслугУслуги.Oilfield КАК Месторождение,
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
		|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
		|	РеализацияТоваровУслугУслуги.Цена * РеализацияТоваровУслугУслуги.Количество КАК Итого
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|ИТОГИ
		|	СУММА(Итого)
		|ПО
		|	Скважина,
		|	Месторождение";
		
		
		Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
		Результат = Запрос.Выполнить();
		ВыборкаСкважина = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		НСтр = 22;
		Первый = Истина;
		СтрокаНом = 1;
		Пока ВыборкаСкважина.Следующий() Цикл 
			ВыборкаНоменклатура = ВыборкаСкважина.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
			//По скважинам
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				Область = Макет.ПолучитьОбласть("Таблица | Начало");
				Область.Параметры.НомерСтроки = СтрокаНом;
				СтрокаНом = СтрокаНом + 1;
				Область.Параметры.СкважинаКуст = ВыборкаНоменклатура.Скважина;
				Область.Параметры.Месторождение = ВыборкаНоменклатура.Месторождение;
				ОбластьИсх = ТабДокумент.Вывести(Область);
				ТабДокумент.ВставитьОбласть(ОбластьИсх,ТабДокумент.Область("R"+(НСтр)+"C1:R"+(НСтр)+"C3"));
				Если НЕ Первый Тогда
					ТабДокумент.УдалитьОбласть(ОбластьИсх);
				КонецЕсли;
				Первый = Ложь;
				//по услугам
				
				ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать(); 
				ТаблицаУслуг = ТаблицаШапки.Скопировать();
				ТаблицаУслуг.Очистить();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НовСтр = ТаблицаУслуг.Добавить();
					НовСтр.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					НовСтр.Цена = ВыборкаДетальныеЗаписи.Цена;
					НовСтр.НомерСтолбца = ВыборкаДетальныеЗаписи.Количество;					
				КонецЦикла;	
				
				НСтб = 4;
				СуммаЦен = 0;
				Для каждого Строка из ТаблицаШапки Цикл
					Если Строка.Цена <> Неопределено Тогда
						СуммаЦен = СуммаЦен + Строка.Цена;
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("Таблица | Динамическая");
					Ном = Строка.Номенклатура;
					СтрОтбора = Новый Структура;
					СтрОтбора.Вставить("Номенклатура",Ном);
					СтрОтбора.Вставить("Цена",Строка.Цена);
					Строки = ТаблицаУслуг.НайтиСтроки(СтрОтбора);
					Если Строки.Количество() > 0 Тогда
						Область.Параметры.ЗначениеСтолбца = Строки[0].НомерСтолбца;
					ИначеЕсли Ном = Неопределено Тогда 
						Область.Параметры.ЗначениеСтолбца = ВыборкаНоменклатура.Итого;
						//Итоговыйстолбец
					КонецЕсли;
					ОбластьИсх = ТабДокумент.Вывести(Область);
					ТабДокумент.ВставитьОбласть(ОбластьИсх,ТабДокумент.Область("R"+(НСтр)+"C"+(НСтб)+":R"+(НСтр)+"C"+(НСтб)));
					ТабДокумент.УдалитьОбласть(ОбластьИсх, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					НСтб = Строка.НомерСтолбца + 1;
					
				КонецЦикла;
				
				Область = Макет.ПолучитьОбласть("Таблица | Окончание");
				ОбластьИсх = ТабДокумент.Вывести(Область);
				ТабДокумент.ВставитьОбласть(ОбластьИсх,ТабДокумент.Область("R"+(НСтр)+"C"+(НСтб)+":R"+(НСтр)+"C"+(НСтб)));
				ТабДокумент.УдалитьОбласть(ОбластьИсх, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НСтр = НСтр + 1;
				
			КонецЦикла;
		КонецЦикла;
		
		
		Область = Макет.ПолучитьОбласть("ПодвалТаблица | Начало");
		Область2 = ТабДокумент.Вывести(Область);
		ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(1)+":R"+(НСтр)+"C"+(1)));
		ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);

		Счетчик = 5;
		Стб = 4;
		Пока Счетчик <> НСтб Цикл
			
			Область = Макет.ПолучитьОбласть("ПодвалТаблица | Динамическая");
			Область2 = ТабДокумент.Присоединить(Область);
			ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(стб)+":R"+(НСтр)+"C"+(стб)));
			ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);
		

	        Стб = стб +1;
			Счетчик = Счетчик +1;
		КонецЦикла;

		ВсегоБезНдс = ?(Выборка.СуммаВключаетНДС, Выборка.СуммаДокумента, Выборка.СуммаДокумента - (Выборка.СуммаДокумента/118*18));
		ВсегоНДС = Формат(Выборка.СуммаДокумента/118*18,"ЧДЦ=2");
		
		Область = Макет.ПолучитьОбласть("ПодвалТаблица | ОкончаниеШапка");
		Область.Параметры.ВсегоБезНДС = ВсегоБезНдс ;
		Область.Параметры.ВсегоНДС = ВсегоНДС;
		Область.Параметры.ВсегоСНДС = Выборка.СуммаДокумента;
		Область2 = ТабДокумент.Присоединить(Область);
		ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(стб)+":R"+(НСтр)+"C"+(стб)));
		ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);
        Нстр = Нстр +3;
			
		//Если Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
		//	Парам = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		//Иначе
		//	Парам = "доллар,доллара,долларов,м,цент,цента,центов,м,2";		
		//КонецЕсли;
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.ВсегоЦена = СуммаЦен;
		Область.Параметры.ВсегоСНДСПрописью = Формат(Выборка.СуммаДокумента, "ЧДЦ=2") + " (" + ЧислоПрописью(Выборка.СуммаДокумента) + ") " + ?(Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643"),"рублей","доларов");
		Область.Параметры.ВсегоНДСПрописью = Формат(ВсегоНДС, "ЧДЦ=2") + " (" + ЧислоПрописью(ВсегоНДС) + ") " + ?(Выборка.Валюта = Справочники.Валюты.НайтиПоКоду("643"),"рублей.","доларов.");
		Область.Параметры.ВсегоБезНДС = ВсегоБезНдс;
		Область.Параметры.ВсегоНДС = ВсегоНДС;
		Область.Параметры.ВсегосНДС = Выборка.СуммаДокумента;
		Область2 = ТабДокумент.Вывести(Область);
		ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(1)+":R"+(НСтр)+"C"+(1)));
		ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);
        Нстр = Нстр +15;
		
		Если ВыборкаПодписанты.Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть("Подпись");
			ПервыйПодпись = Истина;
			Пока ВыборкаПодписанты.Следующий() Цикл
				Если ВыборкаПодписанты.Сторона = Перечисления.Сторона.Контрагент И ПервыйПодпись = Истина Тогда
					Область.Параметры.ДолжностьПодписантаЗаказчика = ВыборкаПодписанты.Должность;
					Область.Параметры.ФИОПодписантаЗаказчика = ВыборкаПодписанты.Представитель;
					ПервыйПодпись = Ложь;
					Область2 = ТабДокумент.Вывести(Область);
					ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(1)+":R"+(НСтр)+"C"+(1)));
					ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);
					Нстр = НСтр + 12;
				ИначеЕсли ВыборкаПодписанты.Сторона = Перечисления.Сторона.Контрагент И ПервыйПодпись = Ложь Тогда
					Область = Макет.ПолучитьОбласть("ДопПодпись");
					Область.Параметры.ДолжностьПодписантаЗаказчикаДоп = ВыборкаПодписанты.Должность;
					Область.Параметры.ФИОПодписантаЗаказчикаДоп = ВыборкаПодписанты.Представитель;					
				КонецЕсли;				
			КонецЦикла;
			Область2 = ТабДокумент.Вывести(Область);
			ТабДокумент.ВставитьОбласть(Область2, ТабДокумент.Область("R"+(Нстр)+"C"+(1)+":R"+(НСтр)+"C"+(1)));
			ТабДокумент.УдалитьОбласть(Область2, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
		


		
	КонецЦикла;
	
	
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
КонецФункции
  
//[<-РКХ]

Функция ПолучитьСписокПодчиненныхСчетФактур(ДокументОснование)         
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                   |	СтруктураПодчиненности.Ссылка
                   |ИЗ
                   |	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СтруктураПодчиненности
                   |ГДЕ
                   |	СтруктураПодчиненности.Ссылка ССЫЛКА Документ.СчетФактураВыданный
                   |	И НЕ СтруктураПодчиненности.Ссылка.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

