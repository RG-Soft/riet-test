
Перем мВалютаРегламентированногоУчета Экспорт;
Перем Список;
//Добавил РГ-Софт - Пронин Иван - 2009-06-27
Перем мУдалятьДвижения;
//Конец добавления 2009-06-27

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьДокумента()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Получатель,
		|	Организация,
		|	Организация КАК Поставщик,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|	Номенклатура.Код КАК Код,
		|	Количество,
		|	КоличествоМест,
		|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
		|	Цена,
		|	Сумма,
		|	СуммаНДС,
		|	СтранаПроисхождения КАК СтранаПроисхождения,
		|	НомерГТД КАК НомерГТД,
		|   НомерСтроки,
		|	1 КАК ID
		|ИЗ 
		|	(ВЫБРАТЬ
		|		Номенклатура         КАК Номенклатура,
		|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		Цена                 КАК Цена,
		|		СтавкаНДС            КАК СтавкаНДС,
		|		СтранаПроисхождения  КАК СтранаПроисхождения,
		|		НомерГТД             КАК НомерГТД,
		|		СУММА(Количество)    КАК Количество,
		|		СУММА(КоличествоМест)КАК КоличествоМест,
		|		СУММА(Сумма)         КАК Сумма,
		|		СУММА(СуммаНДС)      КАК СуммаНДС,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения,
		|		Цена,
		|		СтавкаНДС,
		|		СтранаПроисхождения,
		|		НомерГТД
		|	) КАК ВложенныйЗапросПоТоварам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	Номенклатура.Код КАК Код,
		|	Количество,
		|	NULL,
		|	NULL,
		|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХранения,
		|	Цена,
		|	Сумма,
		|	СуммаНДС,
		|	NULL,
		|	NULL,
		|	НомерСтроки,
		|	3
		|	
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
		
		Макет = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Ложь;
		
		ВыводитьКоды = Ложь;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			//ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			//ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			//									Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
			
			
			
			
			
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Скидка = 0;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
		+ ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьДокумента()
	
	// Функция формирует табличный документ с печатной формой накладной,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьТОРГ12()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Руководители,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Контрагент
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Организация
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Руководитель,        //добавила Федотова Л., РГ-Софт, 17.10.11 
		|	РеализацияТоваровУслуг.ГлавныйБухгалтер     //добавила Федотова Л., РГ-Софт, 17.10.11
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
		|	РеализацияТоваровУслуг.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
		|	РеализацияТоваровУслуг.Количество,
		|	РеализацияТоваровУслуг.КоличествоМест,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
		|	РеализацияТоваровУслуг.Коэффициент,
		|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	1 КАК ID
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	NULL,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	NULL,
		|	NULL,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	3
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	Номер";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		
		Макет = ПолучитьОбщийМакет("ТОРГ12");
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
		СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
			ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выведем заголовок таблицы
		НомерСтраницы = 1;
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСумма      = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Выводим многострочную часть докмента
		
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
			
			СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		
		
		Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
		
		//Изменила Федотова Л., РГ-Софт, 17.10.11 ->
		//ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
		Если ТаблицаРегистра.Количество() > 0 Тогда
			Фамилия  = ТаблицаРегистра[0].Фамилия;
			Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя = СокрЛП(Фамилия) + " " + СокрЛП(Инициалы);
		
		ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
		Если ТаблицаРегистра.Количество() > 0 Тогда
			Фамилия  = ТаблицаРегистра[0].Фамилия;
			Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = СокрЛП(Фамилия) + " " + СокрЛП(Инициалы);
		//<-
		
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		
		ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		
		
		
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ12()
	
	// Функция формирует табличный документ с печатной формой накладной,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьТОРГ12_ДвеВалюты()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Руководители,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Контрагент
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Организация
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Руководитель,    //добавила Федотова Л., РГ-Софт, 17.10.11
		|	РеализацияТоваровУслуг.ГлавныйБухгалтер //добавила Федотова Л., РГ-Софт, 17.10.11
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
		|	РеализацияТоваровУслуг.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
		|	РеализацияТоваровУслуг.Количество,
		|	РеализацияТоваровУслуг.КоличествоМест,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
		|	РеализацияТоваровУслуг.Коэффициент,
		|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
		|	РеализацияТоваровУслуг.Цена КАК ЦенаUSD,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
		|	РеализацияТоваровУслуг.Сумма КАК СуммаUSD,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	1 КАК ID
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	NULL,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	NULL,
		|	NULL,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Цена,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	3
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	Номер";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		
		Макет = ПолучитьОбщийМакет("ТОРГ12ДвеВалюты");
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
		СведенияОГрузоотправителе = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		СведенияОПокупателе       = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.НомерДокумента = СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка));
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ПредставлениеГрузополучателяДоАдреса    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
			ПредставлениеГрузополучателяПослеАдреса = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выведем заголовок таблицы
		НомерСтраницы = 1;
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоСуммаНаСтраницеUSD   = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		ИтогоСуммаСНДСНаСтраницеUSD = 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСуммаСНДСUSD  = 0;
		ИтогоСумма      = 0;
		ИтогоСуммаUSD   = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Выводим многострочную часть докмента
		
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
			
			СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
			СуммаСНДСUSD = СуммаСНДС/Шапка.Курс;
			
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаНДС    = ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			СуммаБезНДСUSD = ВыборкаСтрок.СуммаUSD;
			
			ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДСUSD   = СуммаСНДСUSD;
			ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДСUSD = СуммаБезНДСUSD;
			ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			ОбластьМакетаСтрока.Параметры.ЦенаUSD        = СуммаБезНДСUSD / ?(Количество = 0, 1, Количество);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD = ИтогоСуммаСНДСНаСтраницеUSD;
				
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоСуммаНаСтраницеUSD      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				ИтогоСуммаСНДСНаСтраницеUSD  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоСуммаНаСтраницеUSD   = ИтогоСуммаНаСтраницеUSD   + СуммаБезНДСUSD;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			ИтогоСуммаСНДСНаСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD  + СуммаСНДСUSD;
			
			// Увеличим итоги по документу
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоСуммаUSD   = ИтогоСуммаUSD   + СуммаБезНДСUSD;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			ИтогоСуммаСНДСUSD  = ИтогоСуммаСНДСUSD  + СуммаСНДСUSD;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтраницеUSD   = ИтогоСуммаНаСтраницеUSD;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтраницеUSD  = ИтогоСуммаСНДСНаСтраницеUSD;
		
		ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогСуммыUSD   = ИтогоСуммаUSD;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДСUSD  = ИтогоСуммаСНДСUSD;
		
		ТабДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		
		
		Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
		
		//Изменила Федотова Л., РГ-Софт, 17.10.11 ->
		//ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
		//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
		ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.Руководитель));
		Если ТаблицаРегистра.Количество() > 0 Тогда
			Фамилия  = ТаблицаРегистра[0].Фамилия;
			Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя = "" + Фамилия + " " + Инициалы;
		
		ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", Шапка.ГлавныйБухгалтер));
		Если ТаблицаРегистра.Количество() > 0 Тогда
			Фамилия  = ТаблицаРегистра[0].Фамилия;
			Инициалы = Лев(ТаблицаРегистра[0].Имя,1) + "." + Лев(ТаблицаРегистра[0].Отчество,1) + ".";
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = Фамилия + " " + Инициалы;
		//<-
		
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.СуммаПрописьюUSD                           = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДСUSD, Шапка.ВалютаДокумента);
		ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		
		ОбластьМакетаПодвал.Параметры.ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ12()
	
	// Функция формирует табличный документ унифицированной формы М-15
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Табличный документ по форме М-15.
	//
	Функция ПечатьМ15()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК ДатаСоставления,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваровУслуг.Организация КАК Руководители,
		|	РеализацияТоваровУслуг.Склад КАК Склад,
		|	РеализацияТоваровУслуг.Склад.Наименование КАК СкладНаименование,
		|	РеализацияТоваровУслуг.Контрагент.Код КАК КонтрагентКод,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Сделка,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ДоговорВид
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		ВыборкаШапки = Запрос.Выполнить().Выбрать();
		ВыборкаШапки.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Курс",            ОбщегоНазначения.КурсДокумента(ЭтотОбъект,      мВалютаРегламентированногоУчета));
		Запрос.УстановитьПараметр("Кратность",       ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
		|	РеализацияТоваровУслуг.Количество,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		
		Макет = ПолучитьОбщийМакет("М15");
		
		// Получаем области макета для вывода в табличный документ
		Шапка            = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("Строка");
		Подвал           = Макет.ПолучитьОбласть("Подвал");	
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета по умолчанию
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Загрузим настройки пользователя
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";
		
		// Выведем шапку документа
		Шапка.Параметры.Заполнить(ВыборкаШапки);
		
		СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.ЮрФизЛицо, ВыборкаШапки.ДатаСоставления);
		
		Шапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаШапки);
		Шапка.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ВыборкаШапки.Контрагент, ВыборкаШапки.ДатаСоставления), "ПолноеНаименование,");
		Шапка.Параметры.Основание                = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаШапки.Сделка), РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаШапки.Сделка, СокрЛП(ВыборкаШапки.Сделка.Метаданные().Представление())), "Договор " + СокрЛП(ВыборкаШапки.ДоговорНаименование));
		
		ТабДокумент.Вывести(Шапка);
		
		// Подготовим к выводу выборку строк
		ВыборкаСтрок.Колонки.Добавить("СуммаСНДС");
		ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС");
		
		Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл
			
			
			
			
			
			
			
			СуммаНДС    = СтрокаВыборки.СуммаНДС;
			Количество  = СтрокаВыборки.Количество;
			СуммаСНДС   = (СтрокаВыборки.Сумма + ?(ВыборкаШапки.СуммаВключаетНДС, 0, СтрокаВыборки.СуммаНДС));
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			//СтрокаВыборки.КоррСчет          = ?((ВыборкаШапки.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности), СтрокаВыборки.ПереданныеСчетУчетаБУКод, СтрокаВыборки.СчетРасходовБУКод);
			//СтрокаВыборки.КоррКод           = СтрокаВыборки.ТоварКод;
			СтрокаВыборки.ТоварНаименование = СокрЛП(СтрокаВыборки.ТоварНаименование);
			СтрокаВыборки.СуммаСНДС         = СуммаСНДС;
			СтрокаВыборки.СуммаБезНДС       = СуммаБезНДС;
			СтрокаВыборки.Цена              = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			
		КонецЦикла;
		
		// Заполним подвал документа
		
		Подвал.Параметры.Заполнить(ВыборкаШапки);
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапки.Руководители, ВыборкаШапки.ДатаДокумента,);
		ПечРуководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ИтогНДС      = ВыборкаСтрок.Итог("СуммаНДС");
		
		Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрок.Количество(), ,",,,с,,,,,0");
		Подвал.Параметры.СуммаПрописью                              = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаСНДС"), мВалютаРегламентированногоУчета);
		Подвал.Параметры.ИтогНДС                                    = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " руб. " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " коп. ", "______ руб. ______ коп.");
		Подвал.Параметры.ФИОРуководителя                            = ПечРуководитель;
		Подвал.Параметры.ФИОГлавБухгалтера                          = Бухгалтер;
		
		// Инициализируем счетчик страниц
		НомерСтраницы = 1;
		
		// Выведем заголовок табличной части
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// Выведем выборку строк
		Для Каждого СтрокаВыборки Из ВыборкаСтрок Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			//СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			
			// Если обрабатываемая строка - последняя, будем проверять, помещается ли подвал документа
			Если ВыборкаСтрок.Индекс(СтрокаВыборки) = ВыборкаСтрок.Количество() - 1 Тогда 
				СтрокаСПодвалом.Добавить(Подвал);
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				//ТабДокумент.Вывести(ПодвалТаблицы);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы = НомерСтраницы + 1;
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем все подвалы
		//ТабДокумент.Вывести(ПодвалТаблицы);
		
		ТабДокумент.Вывести(Подвал);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьМ15()
	
	// Функция формирует табличный документ с печатной формой акта об обказании услуг
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
	Функция ПечатьАктаОбОказанииУслуг()
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросУслуги.УстановитьПараметр("Курс", ОбщегоНазначения.КурсДокумента(ЭтотОбъект.Ссылка, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|	Количество,
		|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Цена,
		|	Цена * &Курс КАК ЦенаРуб,
		|	Сумма,
		|	Сумма * &Курс КАК СуммаРуб,
		|	СтавкаНДС,
		|	СуммаНДС,
		|	СуммаНДС * &Курс КАК СуммаНДСРуб
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|	И
		|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	Количество,
		|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Цена,
		|	Цена * &Курс КАК ЦенаРуб,
		|	Сумма,
		|	Сумма * &Курс КАК СуммаРуб,
		|	СтавкаНДС,
		|	СуммаНДС,
		|	СуммаНДС * &Курс КАК СуммаНДСРуб
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
		Макет       = ПолучитьМакет("Акт");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка, "Акт");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Ложь;
		
		// Вывести табличную часть
		Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыРуб");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаРуб");
			ОбластьМакета.Параметры.Вал = Шапка.ВалютаДокумента;
		КонецЕсли;                                       
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		Если ТаблицаУслуги <> Неопределено Тогда
			
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
			
			СуммаРуб    = ТаблицаУслуги.Итог("СуммаРуб");
			СуммаНДСРуб = ТаблицаУслуги.Итог("СуммаНДСРуб");
			
		Иначе
			
			Сумма    = 0;
			СуммаНДС = 0;
			
			СуммаРуб    = 0;
			СуммаНДСРуб = 0;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если НЕ Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРуб");
			ОбластьМакета.Параметры.ВсегоРуб = ФормированиеПечатныхФорм.ФорматСумм(СуммаРуб);
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если Шапка.УчитыватьНДС Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСРуб");
				ОбластьМакета.Параметры.ВсегоНДСРуб = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДСРуб);
				ОбластьМакета.Параметры.НДСРуб      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС руб.");
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		СуммаКПрописиРуб = СуммаРуб + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДСРуб);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
		+ ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если НЕ Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюРуб");
			ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
			+ ", на сумму " + ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописиРуб, мВалютаРегламентированногоУчета);
			ОбластьМакета.Параметры.СуммаПрописью  = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаКПрописиРуб, мВалютаРегламентированногоУчета);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	Функция ПечатьPetrosakh()
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Организация КАК Продавец,
		|	""Schlumberger Logelco Inc."" КАК ПродавецENG,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.Контрагент.НаименованиеEnglish КАК ПокупательENG
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросУслуги.УстановитьПараметр("Курс", ОбщегоНазначения.КурсДокумента(ЭтотОбъект.Ссылка, мВалютаРегламентированногоУчета));
		
		ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
		
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|	Количество,
		|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|	И
		|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	Количество,
		|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Petrosakh_Акт";
		Макет       = ПолучитьМакет("Petrosakh");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		//ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка, "Акт");
		ОбластьМакета.Параметры.Номер = Шапка.Номер;
		ОбластьМакета.Параметры.НомерДоговора = СокрЛП(Шапка.ДоговорКонтрагента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстАкта");
		ОбластьМакета.Параметры.Заполнить(Шапка); 
		ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП(Шапка.ДоговорКонтрагента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			
			//ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Номенклатура = СокрЛП(СтрокаТабличнойЧасти.Номенклатура);
			
			ОбластьСтроки.Параметры.Цена = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.Цена);
			ОбластьСтроки.Параметры.Сумма = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.Сумма);
			ОбластьСтроки.Параметры.СуммаНДС = ФормированиеПечатныхФорм.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		Если ТаблицаУслуги <> Неопределено Тогда
			
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
			
		Иначе
			
			Сумма    = 0;
			СуммаНДС = 0;
			
		КонецЕсли;
		
		Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = Всего;
		ОбластьМакета.Параметры.ВсегоНДС = ВсегоНДС;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Всего = Всего;
		ОбластьМакета.Параметры.ВсегоНДС = ВсегоНДС;
		ОбластьМакета.Параметры.Курс = ОбщегоНазначения.КурсДокумента(ЭтотОбъект.Ссылка, мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	// Функция формирует табличный документ с печатной формой акта об обказании услуг
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
	Функция ПечатьAct()
		
		Форма = ПолучитьФорму("ФормаПечатиАкта");
		Форма.Документ = ЭтотОбъект;
		Форма.Открыть();
		
		//ЗапросШапка = Новый Запрос;
		//ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		//ЗапросШапка.Текст =
		//"ВЫБРАТЬ
		//|	РеализацияТоваровУслуг.Номер,
		//|	РеализацияТоваровУслуг.Дата,
		//|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		//|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
		//|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		//|	РеализацияТоваровУслуг.Организация,
		//|	РеализацияТоваровУслуг.СуммаДокумента,
		//|	РеализацияТоваровУслуг.ВалютаДокумента,
		//|	РеализацияТоваровУслуг.УчитыватьНДС,
		//|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		//|	РеализацияТоваровУслуг.ПодразделениеОрганизации
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|ГДЕ
		//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		//Шапка = ЗапросШапка.Выполнить().Выбрать();
		//Шапка.Следующий();
		
		//ТабДокумент = Новый ТабличныйДокумент;
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Act";
		//Макет       = ПолучитьМакет("ActSLB");
		
		//ОбластьМакета = Макет.ПолучитьОбласть("Основная");
		//ОбластьМакета.Параметры.Договор = Шапка.ДоговорКонтрагента;
		// ОбластьМакета.Параметры.Номер = Шапка.Номер;
		//  ОбластьМакета.Параметры.Дата = Формат(Шапка.Дата,"ДФ=dd.MM.yyyy");
		//  ОбластьМакета.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ПолноеНаименование,");
		//  //ОбластьМакета.Параметры.Место = Шапка.ПодразделениеОрганизации.Место;
		//  //ОбластьМакета.Параметры.Place = Шапка.ПодразделениеОрганизации.Place;
		//
		//Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.ПодразделениеОрганизации, Шапка.Дата);
		//ОбластьМакета.Параметры.ФИО   = Руководители.РуководительПредставление;
		//ОбластьМакета.Параметры.Должность = Руководители.РуководительДолжность;
		
		////ОбластьМакета.Параметры.Менеджер = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ПолноеНаименование,");
		//ОбластьМакета.Параметры.Описание = Услуги[0].Номенклатура.НаименованиеПолное;
		//ОбластьМакета.Параметры.Description = Услуги[0].Номенклатура.НаименованиеENG;
		//  ОбластьМакета.Параметры.Сумма = Шапка.СуммаДокумента;
		//  ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
		//  ОбластьМакета.Параметры.Currency = Шапка.ВалютаДокумента;
		//ОбластьМакета.Параметры.СуммаПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
		//ОбластьМакета.Параметры.СуммаПрописьюENG = РаботаСДиалогами.СформироватьСуммуПрописьюENG(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
		//
		//ТабДокумент.Вывести(ОбластьМакета);
		
		//Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	Функция ПечатьExxon()
		
		Форма = ПолучитьФорму("ФормаExxon");
		Форма.Документ = ЭтотОбъект;
		Форма.Открыть();
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	// Функция формирует табличный документ с печатной формой КС-2
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
	Функция ПечатьКС2()
		
		Форма = ПолучитьФорму("ФормаПечатиКС2");
		Форма.Документ = ЭтотОбъект;
		Форма.Открыть();
		
		//ЗапросШапка = Новый Запрос;
		//ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		//ЗапросШапка.Текст =
		//"ВЫБРАТЬ
		//|	РеализацияТоваровУслуг.Номер,
		//|	РеализацияТоваровУслуг.Дата,
		//|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		//|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
		//|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		//|	РеализацияТоваровУслуг.Организация,
		//|	РеализацияТоваровУслуг.СуммаДокумента,
		//|	РеализацияТоваровУслуг.ВалютаДокумента,
		//|	РеализацияТоваровУслуг.УчитыватьНДС,
		//|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		//|	РеализацияТоваровУслуг.ПодразделениеОрганизации
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|ГДЕ
		//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		//Шапка = ЗапросШапка.Выполнить().Выбрать();
		//Шапка.Следующий();
		
		//ТабДокумент = Новый ТабличныйДокумент;
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Act";
		//Макет       = ПолучитьМакет("ActSLB");
		
		//ОбластьМакета = Макет.ПолучитьОбласть("Основная");
		//ОбластьМакета.Параметры.Договор = Шапка.ДоговорКонтрагента;
		// ОбластьМакета.Параметры.Номер = Шапка.Номер;
		//  ОбластьМакета.Параметры.Дата = Формат(Шапка.Дата,"ДФ=dd.MM.yyyy");
		//  ОбластьМакета.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ПолноеНаименование,");
		//  //ОбластьМакета.Параметры.Место = Шапка.ПодразделениеОрганизации.Место;
		//  //ОбластьМакета.Параметры.Place = Шапка.ПодразделениеОрганизации.Place;
		//
		//Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.ПодразделениеОрганизации, Шапка.Дата);
		//ОбластьМакета.Параметры.ФИО   = Руководители.РуководительПредставление;
		//ОбластьМакета.Параметры.Должность = Руководители.РуководительДолжность;
		
		////ОбластьМакета.Параметры.Менеджер = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ПолноеНаименование,");
		//ОбластьМакета.Параметры.Описание = Услуги[0].Номенклатура.НаименованиеПолное;
		//ОбластьМакета.Параметры.Description = Услуги[0].Номенклатура.НаименованиеENG;
		//  ОбластьМакета.Параметры.Сумма = Шапка.СуммаДокумента;
		//  ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
		//  ОбластьМакета.Параметры.Currency = Шапка.ВалютаДокумента;
		//ОбластьМакета.Параметры.СуммаПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
		//ОбластьМакета.Параметры.СуммаПрописьюENG = РаботаСДиалогами.СформироватьСуммуПрописьюENG(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
		//
		//ТабДокумент.Вывести(ОбластьМакета);
		
		//Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	// Функция формирует табличный документ с печатной формой кредит-ноты
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
	Функция ПечатьАктМосква()
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.НомерСчетаНаОплату,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.ПодразделениеОрганизации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID,
		|	РеализацияТоваровУслугТовары.Well КАК Скважина,
		|	РеализацияТоваровУслугТовары.Oilfield КАК Месторождение,
		|	РеализацияТоваровУслугТовары.TicketNumber КАК Отчет,
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеENG КАК НаименованиеENG
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	РеализацияТоваровУслугУслуги.Содержание,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	2,
		|	РеализацияТоваровУслугУслуги.Well,
		|	РеализацияТоваровУслугУслуги.Oilfield,
		|	РеализацияТоваровУслугУслуги.TicketNumber,
		|	РеализацияТоваровУслугУслуги.СодержаниеEng
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Товар,
		|	ВТ.ТоварНаименование,
		|	ВТ.СтранаПроисхождения,
		|	ВТ.ПредставлениеСтраны,
		|	ВТ.НомерГТД,
		|	ВТ.Количество,
		|	ВТ.Цена,
		|	ВТ.СтавкаНДС,
		|	ВТ.СуммаНДС,
		|	ВТ.Сумма,
		|	ВТ.НомерСтроки КАК НомерСтроки,
		|	ВТ.ID КАК ID,
		|	ВТ.Скважина,
		|	ВТ.Месторождение,
		|	ВТ.Отчет,
		|	ВТ.НаименованиеENG,
		|	ВТ.ЕдиницаИзмерения,
		|	ВТ.ПредставлениеГТД
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		
		ТЧТоварыУслуги = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктМосква";
		Макет       = ПолучитьМакет("АктМосква");
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаКН");
		
		ОбластьМакета.Параметры.Номер = СокрЛП(?(Шапка.НомерСчетаНаОплату = "",Шапка.Номер,Шапка.НомерСчетаНаОплату));
		ОбластьМакета.Параметры.Дата = Формат(Шапка.Дата,"ДФ=dd.MM.yyyy");
		Если Не Шапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код <> "643" Тогда
			ОбластьМакета.Параметры.Организация = "Schlumberger Logelco Inc.";
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(Шапка.ПодразделениеОрганизации) Тогда
				ОбластьМакета.Параметры.Адрес = "No 8 Aquilino de la Guardia Panama 1 Republic of Panama";
			Иначе
				ОбластьМакета.Параметры.Адрес = "Representative office address: "+ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "АнглийскийАдрес,");
			КонецЕсли;
		Иначе
			ОбластьМакета.Параметры.Организация = "Шлюмберже Лоджелко Инк.";
			ОбластьМакета.Параметры.Адрес = "Адрес представительства: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.ПодразделениеОрганизации, Шапка.Дата), "ЮридическийАдрес,");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Клиент = Шапка.Получатель.DescriptionFull + Символы.ПС + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "АнглийскийАдрес,");
		ОбластьМакета.Параметры.Контракт = Шапка.ДоговорКонтрагента.НаименованиеEng;
		ОбластьМакета.Параметры.Валюта = ?(Шапка.ВалютаДокумента.наименованиеeng="", Шапка.ВалютаДокумента, Шапка.ВалютаДокумента.наименованиеeng);
		
		ОбластьМакета.Параметры.Well = "";
		Выгрузка = ТЧТоварыУслуги.Скопировать();
		Выгрузка.Свернуть("Месторождение, Скважина");
		ПустаяСтрокаСкв = Выгрузка.Найти(Справочники.Wells.ПустаяСсылка(), "Скважина");
		Если Не ПустаяСтрокаСкв = Неопределено Тогда
			Выгрузка.Удалить(ПустаяСтрокаСкв);
		КонецЕсли;
		ПустаяСтрокаМест = Выгрузка.Найти(Справочники.Oilfields.ПустаяСсылка(), "Месторождение");
		Если Не ПустаяСтрокаМест = Неопределено Тогда
			Выгрузка.Удалить(ПустаяСтрокаМест);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			ОбластьМакета.Параметры.Well = ОбластьМакета.Параметры.Well + ?(Выгрузка.Индекс(СтрокаТЧ) =0, "" + СтрокаТЧ.Месторождение.НаименованиеENG + " " + СтрокаТЧ.Скважина.НаименованиеENG, ", " + СтрокаТЧ.Месторождение.НаименованиеENG + " " + СтрокаТЧ.Скважина.НаименованиеENG);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Выгрузка = ТЧТоварыУслуги.Скопировать();
		Выгрузка.Свернуть("Отчет, ТоварНаименование, ЕдиницаИзмерения, Цена, НаименованиеENG", "Сумма, Количество");
		Для Каждого СтрокаТЧ Из Выгрузка Цикл
			ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
			ОбластьМакета.Параметры.SIR = СтрокаТЧ.Отчет;
			ОбластьМакета.Параметры.ЕдИзм = СтрокаТЧ.ЕдиницаИзмерения;
			ОбластьМакета.Параметры.Описание = СтрокаТЧ.ТоварНаименование + "/" + СтрокаТЧ.НаименованиеENG;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		СуммаНДС = Товары.Итог("СуммаНДС")+  Услуги.Итог("СуммаНДС");
		СуммаПоДокументу = Товары.Итог("Сумма")+  Услуги.Итог("Сумма");
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.СтавкаНДС = ТЧТоварыУслуги[0].СтавкаНДС;  
		ОбластьМакета.Параметры.СуммаБезНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаПоДокументу);  
		ОбластьМакета.Параметры.СуммаНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);  
		ОбластьМакета.Параметры.Сумма      = ?(Шапка.СуммаВключаетНДС, СуммаПоДокументу, СуммаПоДокументу+СуммаНДС);
		ТабДокумент.Вывести(ОбластьМакета);
		
		СФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка.Сделка, "СчетФактураВыданный"); 
		ОбластьМакета = Макет.ПолучитьОбласть("Дополнительно");
		Если НЕ СФ = Неопределено Тогда
			ОбластьМакета.Параметры.Примечание = "Credit note to "+ СокрЛП(СФ.Номер) + " dtd " + Формат(СФ.Дата,"ДФ=dd.MM.yyyy") +
			" / " + "Кредит-нота к счету "+ СокрЛП(СФ.Номер) + " от " + Формат(СФ.Дата,"ДФ=dd.MM.yyyy"); 
		КонецЕсли;
		ОбластьМакета.Параметры.Номер = ?(Шапка.НомерСчетаНаОплату = "",Шапка.Номер,Шапка.НомерСчетаНаОплату);  
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Руководитель = Руководитель.НаименованиеEng;  
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()
	
	Функция ПечатьАкта(ВидАкта)
		Если Услуги.Количество() = 0 Тогда
			Сообщить("В документе нет услуг, печатная форма не может быть сформирована.");
			Возврат Неопределено;
		КонецЕсли; 
		
		ТабДокумент = Новый ТабличныйДокумент;	
		Если ВидАкта = "ПолныхРабот" Тогда
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТПолныхРабот";
			Макет       = ПолучитьМакет("АктПолныхРабот");
		ИначеЕсли ВидАкта = "ЗБС" Тогда
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТЗБС";
			Макет       = ПолучитьМакет("АктЗБС");
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Основная");
		
		ОбластьМакета.Параметры.Дата =  Формат(Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Договор = ДоговорКонтрагента.Наименование;
		//ОбластьМакета.Параметры.Контрагент = Контрагент.НаименованиеПолное;
		ОбластьМакета.Параметры.СторонаВАкте = КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата).СторонаВАкте;
		
		//Добавила Федотова Л., РГ-Софт, 26.05.14, вопрос SLI-0004542 
		ОбластьМакета.Параметры.РасшифровкаЗаказчика = КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата).РасшифровкаЗаказчика;
		
		ОбластьМакета.Параметры.КонтрагентКратко = Контрагент.DescriptionFull;
		ОбластьМакета.Параметры.АдресКонтрагента = КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата).ЮридическийАдрес;
		
		//изменила Л. Федотова, РГ-Софт, 30.12.08 ->
		//ОбластьМакета.Параметры.Организация = "Филиал Шлюмберже Лоджелко Инк.";
		ОбластьМакета.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "НаименованиеЗаказчика");
		//<-
		
		ОбластьМакета.Параметры.Скважина = Услуги[0].Well;
		Если ВидАкта = "ПолныхРабот" Тогда
			ОбластьМакета.Параметры.Месторождение = Услуги[0].Oilfield;
		ИначеЕсли ВидАкта = "ЗБС" Тогда
			ОбластьМакета.Параметры.МесторождениеРодПадеж = Услуги[0].Oilfield.НаименованиеРодПадеж;
			ОбластьМакета.Параметры.ИнвентарныйНомер = Услуги[0].Oilfield.ИнвентарныйНомер;
		КонецЕсли; 
		
		ИтогоСумма=0;
		ИтогоНДС=0;
		
		//для каждого СтрокаТаб из Товары Цикл
		//		ИтогоНДС = ИтогоНДС+ СтрокаТаб.СуммаНДС;
		//КонецЦикла;
		
		Для каждого СтрокаТаб из Услуги Цикл
			ИтогоСумма = ИтогоСумма+ СтрокаТаб.Сумма;
			
			ИтогоНДС = ИтогоНДС+ СтрокаТаб.СуммаНДС;
		КонецЦикла;
		
		ИтогоСумма= ИтогоСумма+ ИтогоНДС;
		
		ОбластьМакета.Параметры.Стоимость = Формат(ИтогоСумма,"ЧДЦ=2");
		ОбластьМакета.Параметры.Валюта = Документы.РеализацияТоваровУслуг.СклонениеВалюты(Цел(ИтогоСумма),ДоговорКонтрагента.ВалютаВзаиморасчетов);
		ОбластьМакета.Параметры.НДС = Формат(ИтогоНДС,"ЧДЦ=2");
		ОбластьМакета.Параметры.ВалютаНДС = Документы.РеализацияТоваровУслуг.СклонениеВалюты(Цел(ИтогоНДС),ДоговорКонтрагента.ВалютаВзаиморасчетов);
		//ОбластьМакета.Параметры.ДолжностьЗаказчик = ПринялДолжность;
		//ОбластьМакета.Параметры.ФИОЗаказчик = ПринялФИО;
		//ОбластьМакета.Параметры.ДолжностьПодрядчик = Руководитель.Должность;
		ОбластьМакета.Параметры.ФИОПодрядчик = Руководитель;
		ОбластьМакета.Параметры.ФИОПодрядчика = Руководитель.ФИОродительныйПадеж;
		ОбластьМакета.Параметры.ПоДоверенности = "Доверенность " + СокрЛП(Руководитель.Доверенность);
		ОбластьМакета.Параметры.ФИОЗаказчик = СокрЛП(Заказчик.Наименование);
		ОбластьМакета.Параметры.ЗаказчикПоДоверенности = ?(Заказчик.Пустая(),"","Доверенность " + СокрЛП(Заказчик.Доверенность));
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
		
	КонецФункции	
	
	// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
	//
	// Параметры
	//  Нет.
	//
	// Возвращаемое значение:
	//  <Неопределено> – Загрулшка для ФормированиеПечатныхФорм.НапечататьДокумент(), т.к. табличный 
	//                   документ формирутеся вызываемой обработкой.
	//
	Функция ПечатьТТН()
		
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
		ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
		ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
		ОбработкаПечати.Открыть();
		
		Возврат Неопределено;
		
	КонецФункции // ПечатьТТН()
	
	Функция ПечатьАкта1()
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктПростой";
		Макет       = ПолучитьМакет("АктПростой");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Основная");
		//изменила Федотова Л., РГ-Софт, 30.12.08 ->
		//ОписаниеОрг= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,");
		ОписаниеОрг = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "НаименованиеЗаказчика,");
		ОписаниеОрг = ОписаниеОрг + ", " + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, Дата), "ЮридическийАдрес,ИНН,");
		//<-
		ОписаниеКПП= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "КПП,");
		ОписаниеОргФил= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "ПолноеНаименование,ЮридическийАдрес,");
		БанковскиеРеквизитыОрг= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет");
		БанковскиеРеквизитыКонтр= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет");
		
		//ОбластьМакета.Параметры.Организация = ОписаниеОрг+"/"+ОписаниеКПП+Символы.ПС+ Символы.ПС +"Адрес: "+ОписаниеОргФил
		ОбластьМакета.Параметры.Организация = ОписаниеОрг+","+ОписаниеКПП+Символы.ПС+ Символы.ПС +"Адрес: "+ОписаниеОргФил
		+ Символы.ПС + Символы.ПС + "Банковские реквизиты:" + БанковскиеРеквизитыОрг;
		//ОбластьМакета.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование,ЮридическийАдрес,")+ Символы.ПС + Символы.ПС + "Банковские реквизиты:" + БанковскиеРеквизитыКонтр;
		ОбластьМакета.Параметры.Контрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,КПП")+ Символы.ПС + Символы.ПС + "Банковские реквизиты:" + БанковскиеРеквизитыКонтр;
		СФ=ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
		Если СФ = Неопределено Тогда
			Сообщить("Необходимо прежде завести счет-фактуру.");
			Возврат Неопределено;
		КонецЕсли; 
		
		НомерАкта = НайтиНомерДок(СФ.Номер);
		ОбластьМакета.Параметры.Номер = Строка(НомерАкта)+"/"+ Формат(СФ.Дата,"ДФ=yy");
		ОбластьМакета.Параметры.Дата = Формат(СФ.Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Договор = ДоговорКонтрагента.Наименование;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабУслуги = Услуги.Выгрузить();
		ТабУслуги.Свернуть("Содержание","Сумма, СуммаНДС");
		Для каждого СтрокаУслуги из ТабУслуги Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Услуга");
			ОбластьМакета.Параметры.Услуга = СтрокаУслуги.Содержание;
			СуммаУслуги= СтрокаУслуги.Сумма+СтрокаУслуги.СуммаНДС;
			ОбластьМакета.Параметры.Сумма = СуммаУслуги;
			ОбластьМакета.Параметры.Валюта = ВалютаДокумента.НаименованиеПолное;
			ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаУслуги, ВалютаДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("НДС");
		ОбластьМакета.Параметры.Сумма = Услуги.Итог("СуммаНДС");
		ОбластьМакета.Параметры.Валюта = ВалютаДокумента.НаименованиеПолное;
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(Услуги.Итог("СуммаНДС"), ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подпись");
		ОбластьМакета.Параметры.ФИО = Руководитель;
		ОбластьМакета.Параметры.Должность = Руководитель.Должность;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
	КонецФункции	
	
	Функция ПечатьАкта2()
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктПростой";
		Макет       = ПолучитьМакет("АктПриемкиСдачи");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Основная");
		//изменила Л. Федотова, РГ-Софт, 30.12.08 ->
		//ОписаниеОрг= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование,ЮридическийАдрес,");
		ОписаниеОрг= ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "НаименованиеЗаказчика,");
		ОписаниеОрг = ОписаниеОрг + "," + Символы.ПС + ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, Дата), "ЮридическийАдрес,");
		//<-
		ОписаниеКонтр = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,КПП");
		
		ОбластьМакета.Параметры.Организация = ОписаниеОрг;
		ОбластьМакета.Параметры.СчетОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата,,БанковскийСчетОрганизации), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет,");
		ОбластьМакета.Параметры.Контрагент =  ОписаниеКонтр;
		ОбластьМакета.Параметры.СчетКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Контрагент, Дата), "НомерСчета,Банк,БИК,АдресБанка,КоррСчет,");
		
		ОбластьМакета.Параметры.Филиал = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(ПодразделениеОрганизации, Дата), "ПолноеНаименование,ЮридическийАдрес,ИНН,КПП");
		СФ=ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
		Если СФ = Неопределено Тогда
			Сообщить("Необходимо прежде завести счет-фактуру.");
			Возврат Неопределено;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номер = СокрЛП(СФ.Номер);
		ОбластьМакета.Параметры.Дата = Формат(СФ.Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Договор = ДоговорКонтрагента.Наименование;
		
		Попытка
			ОбластьМакета.Параметры.ВидРабот = Услуги[0].Номенклатура.Наименование;
		Исключение
		КонецПопытки;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Контрагент = Контрагент.НаименованиеПолное;
		ОбластьМакета.Параметры.КонтрагентЛицо = Контрагент.ОсновноеКонтактноеЛицо;
		ОбластьМакета.Параметры.Руководитель = Руководитель.Наименование;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета.Параметры.Валюта = ВалютаДокумента.НаименованиеПолное;
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки=0;
		ТабУслуги = Услуги.Выгрузить();
		ТабУслуги.Свернуть("Содержание, ЕдиницаИзмерения, Цена","Сумма, СуммаНДС, Количество");
		Для каждого СтрокаУслуги из ТабУслуги Цикл
			НомерСтроки= НомерСтроки+1;
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьМакета.Параметры.Услуга = СтрокаУслуги.Содержание;
			СуммаУслуги= СтрокаУслуги.Сумма+СтрокаУслуги.СуммаНДС;
			ОбластьМакета.Параметры.СуммаСНДС = СуммаУслуги;
			ОбластьМакета.Параметры.Сумма = СтрокаУслуги.Сумма;
			ОбластьМакета.Параметры.НДС = СтрокаУслуги.СуммаНДС;
			ОбластьМакета.Параметры.Цена = СтрокаУслуги.Цена;
			ОбластьМакета.Параметры.Количество = СтрокаУслуги.Количество;
			ОбластьМакета.Параметры.Ед = СтрокаУслуги.ЕдиницаИзмерения;
			//ОбластьМакета.Параметры.Период = СтрокаУслуги;
			ОбластьМакета.Параметры.Номер = НомерСтроки;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ВсегоТаблицы");
		ОбластьМакета.Параметры.ВсегоНДС = Услуги.Итог("СуммаНДС");
		ОбластьМакета.Параметры.ВсегоСумма = Услуги.Итог("Сумма");
		ОбластьМакета.Параметры.ВсегоСНДС = Услуги.Итог("Сумма")+Услуги.Итог("СуммаНДС");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Пропись");
		
		ОбластьМакета.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(Услуги.Итог("Сумма")+Услуги.Итог("СуммаНДС"), ВалютаДокумента);
		ОбластьМакета.Параметры.НДС = Услуги.Итог("СуммаНДС");
		ОбластьМакета.Параметры.СуммаНДСПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(Услуги.Итог("СуммаНДС"), ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подпись");
		ОбластьМакета.Параметры.Расшифровка = Руководитель;
		ОбластьМакета.Параметры.Должность = Руководитель.Должность;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
	КонецФункции	
	
	//Добавил Карпов Стас РГ-Софт
	Функция ПечатьНакладнаяКазахстан()
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("НакладнаяПриложение13Казахстан");	
		Шапка = Макет.ПолучитьОбласть("Шапка");
		ИнфОрг = КонтактнаяИнформация.СведенияОЮрФизЛице(Организация,Дата);
		Шапка.Параметры.ОКПО = ИнфОрг.КодПоОКПО;
		Шапка.Параметры.РНН = ИнфОрг.ИНН;
		Шапка.Параметры.Дата = Дата;
		Шапка.Параметры.Номер = Номер;
		//Шапка.Параметры.НДогов = ДоговорКонтрагента.Код;
		ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблица");
		ШапкаТаблицы.Параметры.ОрганизацияНаименование = Организация.НаименованиеПолное;
		ШапкаТаблицы.Параметры.КонтрагентНаименование  = Контрагент.НаименованиеПолное;
		ТабДокумент.Вывести(Шапка);
		ТабДокумент.Вывести(ШапкаТаблицы);
		СтрокаОбласть = Макет.ПолучитьОбласть("Строка");
		Для Каждого Строка Из Товары Цикл
			СтрокаОбласть.Параметры.Номер = Строка.НомерСтроки;
			СтрокаОбласть.Параметры.Номенклатура = Строка.Номенклатура;
			СтрокаОбласть.Параметры.Ед = Строка.ЕдиницаИзмерения;
			СтрокаОбласть.Параметры.Цена = Строка.Цена;
			СтрокаОбласть.Параметры.СуммаНДС = Строка.СуммаНДС;
			Если СуммаВключаетНДС Тогда 
				СтрокаОбласть.Параметры.СуммаВсего = Строка.Сумма;
				СуммаИтог = СуммаИтог + Строка.Сумма;
			Иначе
				СтрокаОбласть.Параметры.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
				СуммаИтог = Строка.Сумма + Строка.СуммаНДС;
			КонецЕсли;
			СтрокаОбласть.Параметры.Отпущено = Строка.Количество;
			ТабДокумент.Присоединить(СтрокаОбласть);
		КонецЦикла;
		
		Для Каждого СтрокаУслуги Из Услуги Цикл
			СтрокаОбласть.Параметры.Номер = СтрокаУслуги.НомерСтроки;
			СтрокаОбласть.Параметры.Номенклатура = СтрокаУслуги.Содержание;
			СтрокаОбласть.Параметры.Ед = СтрокаУслуги.ЕдиницаИзмерения;
			СтрокаОбласть.Параметры.Цена = СтрокаУслуги.Цена;
			СтрокаОбласть.Параметры.СуммаНДС = СтрокаУслуги.СуммаНДС;
			Если СуммаВключаетНДС Тогда 
				СтрокаОбласть.Параметры.СуммаВсего = СтрокаУслуги.Сумма;
				СуммаИтог = СуммаИтог + СтрокаУслуги.Сумма;
			Иначе
				СтрокаОбласть.Параметры.СуммаВсего = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
				СуммаИтог = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
			КонецЕсли;
			СтрокаОбласть.Параметры.Отпущено = СтрокаУслуги.Количество;
			ТабДокумент.Присоединить(СтрокаОбласть);
		КонецЦикла;
		
		ОтпущеноИтог = Товары.Итог("Количество") + Услуги.Итог("Количество");
		НДСИтог = Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");
		Итоги = Макет.ПолучитьОбласть("Итоги");
		Итоги.Параметры.ИтогоСуммаВсего = СуммаИтог;
		Итоги.Параметры.ИтогоНДС = НДСИтог;
		Итоги.Параметры.ИтОтп = ОтпущеноИтог;
		//Итоги.Параметры.Ед = Строка.ЕдиницаИзмерения;
		Итоги.Параметры.СуммаПрописью = ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаИтог, мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(Итоги);
		Подписи = Макет.ПолучитьОбласть("Подписи");
		Подписи.Параметры.Доверенность = Доверенность;
		Подписи.Параметры.Ответственный = Ответственный;
		ТабДокумент.Вывести(Подписи);
		
		Возврат ТабДокумент;
	КонецФункции
	
	Функция НайтиНомерДок(Номерок)
		
		Номерочек = СокрЛП(Номерок);
		Кол = СтрЧислоВхождений(Номерочек,"-");
		
		Для н=0 по Кол+1 Цикл
			
			длин = СтрДлина(Номерочек);
			ном= СтрНайти(Номерочек,"-");
			
			Номерочек = Прав(Номерочек,длин-ном); 
			
			
			н=н+1;
		КонецЦикла;
		
		Возврат Номерочек;
		
	КонецФункции	
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
		// Получить экземпляр документа на печать
		Если      ИмяМакета = "Накладная" Тогда
			ТабДокумент = ПечатьДокумента();
			
		ИначеЕсли ИмяМакета = "ТОРГ12" тогда
			ТабДокумент = ПечатьТОРГ12();
		ИначеЕсли ИмяМакета = "ТОРГ12_ДвеВалюты" тогда
			ТабДокумент = ПечатьТОРГ12_ДвеВалюты();
		ИначеЕсли ИмяМакета = "Акт" Тогда
			ТабДокумент = ПечатьАктаОбОказанииУслуг();
		ИначеЕсли ИмяМакета = "АктПростой" Тогда
			ТабДокумент = ПечатьАкта1();
		ИначеЕсли ИмяМакета = "АктУслуг" Тогда
			ТабДокумент = ПечатьАкта2();	
		ИначеЕсли ИмяМакета = "Petrosakh" Тогда
			ТабДокумент = ПечатьPetrosakh();	
		ИначеЕсли ИмяМакета = "Exxon" Тогда
			ТабДокумент = ПечатьExxon();	
		ИначеЕсли ИмяМакета = "1Т" или ИмяМакета = "_1Т" Тогда
			ТабДокумент = ПечатьТТН();
		ИначеЕсли ИмяМакета = "АктОбязательств" Тогда
			ТабДокумент = ПечатьАкта("ПолныхРабот");	
		ИначеЕсли ИмяМакета = "АктЗБС" Тогда
			ТабДокумент = ПечатьАкта("ЗБС");	
		ИначеЕсли ИмяМакета = "НакладнаяПриложение13Казахстан" Тогда
			ТабДокумент = ПечатьНакладнаяКазахстан();	
		ИначеЕсли ИмяМакета = "М15" Тогда
			ТабДокумент = ПечатьМ15();
			
		ИначеЕсли ИмяМакета = "ActSLB" Тогда
			ТабДокумент = ПечатьAct();
			
		ИначеЕсли ИмяМакета = "КС2" Тогда
			ТабДокумент = ПечатьКС2();
			
		ИначеЕсли ИмяМакета = "АктМосква" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
				ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
				ТабДокумент = ПечатьАктМосква();
			Иначе
				Предупреждение("Документ не является кредит-нотой!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ТабДокумент = Неопределено Тогда
			ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
		КонецЕсли; 
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//изменил Трефиленков Дмитрий, РГ-Софт
	Структура = Новый Структура("ActSLB,Накладная,ТОРГ12_ДвеВалюты,Акт,АктМосква,АктПростой,АктУслуг,АктОбязательств,АктЗБС,ТОРГ12,_1Т,М15,КС2","Act","Расходная накладная","ТОРГ-12 в двух валютах (Товарная накладная)","Акт об оказании услуг","Кредит-нота","Акт приемки-сдачи работ", "Акт приемки-сдачи (по услугам)","Акт об исполнении обязательств","Акт зарезки бокового ствола","ТОРГ-12 (Товарная накладная)","1-Т (Товарно-транспортная накладная)","М-15 (Накладная)","КС-2");
	Если ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию("USD") Тогда
		Структура.Вставить("Petrosakh", "Акт Petrosakh");
		Структура.Вставить("Exxon", "Акт для Exxon");
	КонецЕсли;
	Структура.Вставить("НакладнаяПриложение13Казахстан","Накладная (Казахстан)");
	Возврат Структура;
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента) Экспорт
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	КоэффОплаты      = 0;
	
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");
	
	
	ТаблицаТоваров.ЗаполнитьЗначения(КоэффОплаты,      "КоэффОплаты");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента) Экспорт
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПок(РезультатЗапросаПоТоварам,РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	// { RGS MYurkevich 16.06.2016 13:35:55 - RCA-0000164
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно И ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
		ДвиженияОтчет = РегистрыНакопления.ВзаиморасчетыСПокупателями.СоздатьНаборЗаписей();
		ДвиженияОтчет.Отбор.Регистратор.Установить(Сделка);
		ДвиженияОтчет.Прочитать();
		ТаблицаПок = ДвиженияОтчет.Выгрузить();
		Для Каждого Запись Из ТаблицаПок Цикл
			Запись.Период              = ДатаПроведения;
			Запись.СуммаВзаиморасчетов = - Запись.СуммаВзаиморасчетов;
			Запись.СуммаУпр            = - Запись.СуммаУпр;
			Запись.СуммаРегл           = - Запись.СуммаРегл;		
		КонецЦикла;	
		Возврат ТаблицаПок;
	КонецЕсли;	
	// } RGS MYurkevich 16.06.2016 13:39:21 - RCA-0000164
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	//Убрал Розов
	//ТаблицаТоваров.Свернуть("AU,WO","Сумма,СуммаНДС");
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	//Убрал Розов
	//ТаблицаУслуг.Свернуть("AU,WO","Сумма,СуммаНДС");
	
	ТаблицаОбщ = ТаблицаУслуг.Скопировать();
	Для каждого СтрокаТов из ТаблицаТоваров Цикл
		
		СтрокаУсл = ТаблицаОбщ.Добавить();
		СтрокаУсл.AU = СтрокаТов.AU;
		
		СтрокаУсл.WO = СтрокаТов.WO;
		
		СтрокаУсл.Сумма = СтрокаТов.Сумма;
		СтрокаУсл.СуммаНДС = СтрокаТов.СуммаНДС;
		// { RGS LFedotova 18.06.2018 15:47:12 - вопрос SLI-0007580
		СтрокаУсл.СуммаБезНДСРуб = СтрокаТов.СуммаБезНДСРуб;
		СтрокаУсл.СуммаНДСРуб = СтрокаТов.СуммаНДСРуб;
		// } RGS LFedotova 18.06.2018 15:47:16 - вопрос SLI-0007580 
		
	КонецЦикла;	
	
	ТаблицаОбщ.Колонки.Добавить("СчетНаПредоплату");
	ТаблицаОбщ.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаОбщ.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаОбщ.Колонки.Добавить("Регистратор");
	ТаблицаОбщ.Колонки.Добавить("Сделка");
	ТаблицаОбщ.Колонки.Добавить("СуммаРегл");
	ТаблицаОбщ.Колонки.Добавить("СуммаУпр");
	ТаблицаОбщ.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаОбщ.Колонки.Добавить("ИнвойсинговыйЦентр");
	//добавлено РГ-Софт Федотова
	ТаблицаОбщ.Колонки.Добавить("КостЦентр");
	//конец добавления
	
	
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	
	Для Каждого СтрокаТаб Из ТаблицаОбщ Цикл
		
		СтрокаТаб.СуммаВзаиморасчетов = СтрокаТаб.Сумма+?(УчитыватьНДС И не СуммаВключаетНДС, СтрокаТаб.СуммаНДС, 0);
		
		//Добавила условие Федотова Л., РГ-Софт, 13.10.14, вопрос SLI-0004914
		Если ВалютаДокумента = мВалютаРегламентированногоУчета И НЕ(ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов;
			//Добавила Если Федотова Л., РГ-Софт, 19.01.15, вопрос SLI-0005098
			Если ДоговорКонтрагента.Курс > 0 Тогда
				СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, ДоговорКонтрагента.Курс);
			Иначе
				//СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
				СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, КурсВзаиморасчетов);
			КонецЕсли; 
			СтрокаТаб.СуммаУпр = СтрокаТаб.СуммаВзаиморасчетов;
		ИначеЕсли ВалютаДокумента = мВалютаРегламентированногоУчета И КурсВзаиморасчетов = 1 Тогда
			СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, 1);
			СтрокаТаб.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, 1, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
			СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов;
		ИначеЕсли ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, 1);
			СтрокаТаб.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, 1, КурсВзаиморасчетов);
			СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаб.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов,ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс, КурсВзаиморасчетов);
			//СтрокаТаб.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаб.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
			// { RGS LFedotova 13.06.2018 12:45:28 - вопрос SLI-0007580
			//// { RGS MYurkevich 13.02.2015 17:38:00 - RCA-0000032
			////СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов*КурсВзаиморасчетов;
			//СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаВзаиморасчетов*ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс;
			//// } RGS MYurkevich 13.02.2015 17:38:35 - RCA-0000032
			СтрокаТаб.СуммаРегл = СтрокаТаб.СуммаБезНДСРуб + СтрокаТаб.СуммаНДСРуб;
			// } RGS LFedotova 13.06.2018 12:45:47 - вопрос SLI-0007580 
			СтрокаТаб.СуммаУпр = СтрокаТаб.СуммаВзаиморасчетов;
		КонецЕсли; 
		
		//добавлено РГ-Софт Федотова
		СтрокаТаб.КостЦентр = СтрокаТаб.AU;
		//конец добавления
		
	КонецЦикла;
	
	ТаблицаОбщ.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаОбщ.ЗаполнитьЗначения(ПодразделениеОрганизации,   "ПодразделениеОрганизации");
	ТаблицаОбщ.ЗаполнитьЗначения(?(ОбщегоНазначения.ЗначениеНеЗаполнено(Сделка), Ссылка, Сделка),     "Сделка");
	ТаблицаОбщ.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаОбщ.ЗаполнитьЗначения(ИнвойсинговыйЦентр, "ИнвойсинговыйЦентр");
	
	//Добавила Федотова Л., РГ-Софт, 30.10.13, вопрос SLI-0003955 ->
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И  ПодразделениеОрганизации <> Сделка.ПодразделениеОрганизации Тогда //MYurkevich RCA-0000164
		Для каждого Строка Из ТаблицаОбщ Цикл
			Если Строка.Сумма < 0 Тогда
				Строка.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	ТаблицаОбщ.Свернуть("AU,WO,СчетНаПредоплату,ДоговорКонтрагента,ПодразделениеОрганизации,Регистратор,Сделка,ИнвойсинговыйЦентр,КостЦентр","Сумма,СуммаНДС,СуммаРегл,СуммаУпр,СуммаВзаиморасчетов");
	//<-
	
	//изменил Трефиленков Дмитрий, РГ-Софт
	//делаем зачет аванса по ТЧ Предоплата
	ТаблАвансов = ТаблицаОбщ.Скопировать();
	ТаблАвансов.Очистить();
	Для Каждого Аванс Из Предоплата Цикл
		СтрокаАванса = ТаблАвансов.Добавить();
		Попытка
			СтрокаАванса.ИнвойсинговыйЦентр = Аванс.ДокументАванса.ИнвойсинговыйЦентр;
		Исключение
			СтрокаАванса.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
		КонецПопытки;	
		СтрокаАванса.Сделка = Аванс.ДокументАванса;
		СтрокаАванса.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаАванса.СчетНаПредоплату = Аванс.СчетНаОплату;
		
		СтрокаАванса.СуммаВзаиморасчетов = Аванс.СуммаВзаиморасчетов;
		СтрокаАванса.СуммаРегл = Аванс.Сумма;
		СтрокаАванса.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаАванса.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыСПокупателямиОбороты.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты(, , , Сделка = &Сделка) КАК ВзаиморасчетыСПокупателямиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСПокупателямиОбороты.ПодразделениеОрганизации");
		Запрос.УстановитьПараметр("Сделка", Аванс.ДокументАванса);
		СтрокиРегистра = Запрос.Выполнить().Выгрузить();
		Если СтрокиРегистра.Количество() > 0 Тогда
			СтрокаАванса.ПодразделениеОрганизации = СтрокиРегистра[0].ПодразделениеОрганизации;
		КонецЕсли;
	КонецЦикла;  
	
	//добавила Петроченко Н. 06.02.13
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда 
		СуммаВзаиморасчетовСторно = ТаблицаОбщ.Итог("СуммаВзаиморасчетов");
		КопияТаблАвансов = ТаблАвансов.Скопировать();
		ТаблАвансов.Очистить();
		Для Каждого СтрокаАванса из КопияТаблАвансов Цикл 
			Если СуммаВзаиморасчетовСторно = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			СтрокаАванса.СуммаВзаиморасчетов = Макс(СуммаВзаиморасчетовСторно, СтрокаАванса.СуммаВзаиморасчетов);
			
			// { RGS MYurkevich 13.02.2015 17:38:00 - RCA-0000032
			//СтрокаАванса.СуммаРегл = СтрокаАванса.СуммаВзаиморасчетов*КурсВзаиморасчетов;
			СтрокаАванса.СуммаРегл = СтрокаАванса.СуммаВзаиморасчетов*ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата).Курс;
			// } RGS MYurkevich 13.02.2015 17:38:35 - RCA-0000032
			
			СтрокаАванса.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаАванса.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
			
			СуммаВзаиморасчетовСторно = СуммаВзаиморасчетовСторно - СтрокаАванса.СуммаВзаиморасчетов;
			
			НоваяСтрокаАванса = ТаблАвансов.добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАванса, СтрокаАванса);
		КонецЦикла;
	КонецЕсли;  //конец добавления
	
	ИтогоЗачет = ТаблАвансов.Итог("СуммаВзаиморасчетов");
	
	ТаблицаИтог = ТаблицаОбщ.Скопировать();
	ТаблицаИтог.Очистить();
	//копируем зачеты авансов
	Для Каждого СтрокаТЧ Из ТаблАвансов Цикл
		СтрокаИтог = ТаблицаИтог.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтог,СтрокаТЧ);
	КонецЦикла;
	Если ИтогоЗачет =0 Тогда
		ТаблицаИтог = ТаблицаОбщ.Скопировать();
	Иначе
		Для Каждого СтрокаТЧ Из ТаблицаОбщ Цикл
			Если СтрокаТЧ.СуммаВзаиморасчетов > ИтогоЗачет Тогда
				СтрокаИтог = ТаблицаИтог.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтог,СтрокаТЧ);
				СтрокаИтог.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов - ИтогоЗачет;
				СтрокаИтог.СуммаРегл = СтрокаИтог.СуммаВзаиморасчетов*КурсВзаиморасчетов;
				СтрокаИтог.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаИтог.СуммаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, USD, КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(USD, Дата).Курс);
				ИтогоЗачет = 0;
			Иначе
				ИтогоЗачет = ИтогоЗачет - СтрокаТЧ.СуммаВзаиморасчетов;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// { RGS LFedotova 13.06.2018 9:56:09 - вопрос SLI-0007580
	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
	//	ДвиженияОтчет = РегистрыНакопления.ВзаиморасчетыСПокупателями.СоздатьНаборЗаписей();
	//	ДвиженияОтчет.Отбор.Регистратор.Установить(Сделка);
	//	ДвиженияОтчет.Прочитать();
	//	ТаблицаПок = ДвиженияОтчет.Выгрузить();
	//	Для Каждого Запись Из ТаблицаПок Цикл
	//		Запись.Период              = ДатаПроведения;
	//	КонецЦикла;	
	//	Возврат ТаблицаПок;
	//КонецЕсли;	
	// } RGS LFedotova 13.06.2018 9:56:27 - вопрос SLI-0007580 
	
	Возврат ТаблицаИтог;
	//конец изменения
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно 
		Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, КостЦентр");   
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЭтоКомиссия = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма");      ///Номенклатура ДОБАВЛЕНА ДЛЯ ЭД!
	
	// Укажем, что надо проверить:
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";
		
	КонецЦикла;
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

//Полностью переписала РГ-Софт - Федотова Людмила - 2010-04-04
//Добавил РГ-Софт - Пронин Иван - 2010-03-30
// Процедура выполняет движения по регистру НДС предъявленному,
// если происходит закрытие аванса
Процедура СформироватьДвиженияПоНДСПредъявленному(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда 
		// { RGS MYurkevich 16.06.2016 13:35:55 - RCA-0000164
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
			ДвиженияОтчет = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
			ДвиженияОтчет.Отбор.Регистратор.Установить(Сделка);
			ДвиженияОтчет.Прочитать();
			Для Каждого Запись Из ДвиженияОтчет Цикл
				Движение = Движения.НДСПредъявленный.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Запись);
				Движение.Период             = ДатаПроведения;
				Движение.СуммаБезНДС        = - Движение.СуммаБезНДС;
				Движение.СуммаБезНДСВВалюте = - Движение.СуммаБезНДСВВалюте;
				Движение.НДС                = - Движение.НДС;
				Движение.НДСВВалюте         = - Движение.НДСВВалюте;		
			КонецЦикла;	
			Движения.НДСПредъявленный.Записать();
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	// } RGS MYurkevich 16.06.2016 13:39:21 - RCA-0000164
	
	Если Предоплата.Количество() > 0 Тогда
		
		ВидВычета		= Перечисления.ВидыНДСкВычету.НДСсАвансов;
		ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
		
		НДСПредъявленный = Движения.НДСПредъявленный;
		ТаблицаНДСПредъявленный = НДСПредъявленный.Выгрузить();
		
		ТаблицаРеализации = ТаблицаПоУслугам.Скопировать();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаРеализации);
		ТаблицаРеализации.Свернуть("СтавкаНДС", "СуммаВал,СуммаБезНДСВал,НДСВал");
		//ТаблицаРеализации.Свернуть("СтавкаНДС", "СуммаВал");
		ТаблицаПредоплаты = Предоплата.Выгрузить(,"ДокументАванса,Сумма,СуммаВзаиморасчетов");
		
		//добавила Петроченко Н. 06.02.13
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда 
			
			КопияТаблицаПредоплаты = ТаблицаПредоплаты.Скопировать();
			ТаблицаПредоплаты.Очистить();
			
			СуммаВзаиморасчетовСторно = ТаблицаРеализации.Итог("СуммаВал");
			СуммаСторно = ТаблицаПоУслугам.Итог("Сумма") + ТаблицаПоТоварам.Итог("Сумма");
			
			Для Каждого Стр из КопияТаблицаПредоплаты Цикл 
				
				Если СуммаВзаиморасчетовСторно = 0 Тогда 
					Продолжить;
				иначе
					Стр.СуммаВзаиморасчетов = Макс(СуммаВзаиморасчетовСторно, Стр.СуммаВзаиморасчетов);
					СуммаВзаиморасчетовСторно = СуммаВзаиморасчетовСторно - Стр.СуммаВзаиморасчетов;
				КонецЕсли;
				
				Если СуммаСторно = 0 Тогда 
					Продолжить;
				иначе
					Стр.Сумма = Макс(СуммаСторно, Стр.Сумма);
					СуммаСторно = СуммаСторно - Стр.Сумма;
				КонецЕсли;
				
				НоваяСтр = ТаблицаПредоплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
				
			КонецЦикла;
		КонецЕсли;
		//конец добавления
		
		//Изменила Федотова Л, РГ-Софт, 25.06.15, вопрос SLI-0005522
		//ДоляОплаты = ТаблицаПредоплаты.Итог("СуммаВзаиморасчетов")/ТаблицаРеализации.Итог("СуммаВал");
		ДоляОплаты = ?(ТаблицаРеализации.Итог("СуммаВал") = 0, 0,ТаблицаПредоплаты.Итог("СуммаВзаиморасчетов")/ТаблицаРеализации.Итог("СуммаВал"));
		
		//Распределим предоплату по строкам реализации
		ТаблицаРеализации.Колонки.Добавить("ДокументАванса",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		ТаблицаРеализации.Колонки.Добавить("СуммаВзаиморасчетов",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КопияТаблицаРеализации = ТаблицаРеализации.Скопировать();
		ТаблицаРеализации.Очистить();
		Для каждого Строка Из КопияТаблицаРеализации Цикл
			Для  каждого СтрокаАвансов Из ТаблицаПредоплаты  Цикл
				НоваяСтрока = ТаблицаРеализации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.ДокументАванса = СтрокаАвансов.ДокументАванса;
				НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВал;
			КонецЦикла;
		КонецЦикла;
		
		Распределение = Новый Структура("СуммаВзаиморасчетов");
		ТаблицаРеализации = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПредоплаты,ТаблицаРеализации,Распределение);			
		
		//Распределим сумму оплаты в рублях по ставкам НДС
		ТаблицаРеализацииКопия = ТаблицаРеализации.СкопироватьКолонки();
		ТаблицаРеализацииКопия.Колонки.Добавить("Сумма",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаРеализации.СтавкаНДС,
		|	ТаблицаРеализации.ДокументАванса,
		|	ТаблицаРеализации.СуммаБезНДСВал,
		|	ТаблицаРеализации.НДСВал,
		|	ТаблицаРеализации.СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТабРеализации
		|ИЗ
		|	&ТаблицаРеализации КАК ТаблицаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПредоплаты.ДокументАванса,
		|	ТаблицаПредоплаты.Сумма,
		|	ТаблицаПредоплаты.СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТабПредоплаты
		|ИЗ
		|	&ТаблицаПредоплаты КАК ТаблицаПредоплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРеализации.СтавкаНДС,
		|	ТабРеализации.ДокументАванса КАК ДокументАванса,
		|	ТабПредоплаты.Сумма КАК ТабПредоплатыСумма,
		|	ТабПредоплаты.СуммаВзаиморасчетов КАК ТабПредоплатыСуммаВзаиморасчетов,
		|	ТабРеализации.СуммаБезНДСВал КАК ТабРеализацииСуммаБезНДСВал,
		|	ТабРеализации.НДСВал КАК ТабРеализацииНДСВал,
		|	ТабРеализации.СуммаВзаиморасчетов КАК ТабРеализацииСуммаВзаиморасчетов
		|ИЗ
		|	ТабПредоплаты КАК ТабПредоплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРеализации КАК ТабРеализации
		|		ПО ТабПредоплаты.ДокументАванса = ТабРеализации.ДокументАванса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО ТабПредоплаты.ДокументАванса = СчетФактураВыданный.ДокументОснование
		|ГДЕ
		|	СчетФактураВыданный.Проведен
		|ИТОГИ
		|	СУММА(ТабПредоплатыСумма),
		|	СУММА(ТабПредоплатыСуммаВзаиморасчетов),
		|	СУММА(ТабРеализацииСуммаБезНДСВал),
		|	СУММА(ТабРеализацииНДСВал),
		|	СУММА(ТабРеализацииСуммаВзаиморасчетов)
		|ПО
		|	ОБЩИЕ,
		|	ДокументАванса";
		
		Запрос.УстановитьПараметр("ТаблицаРеализации", ТаблицаРеализации);
		Запрос.УстановитьПараметр("ТаблицаПредоплаты", ТаблицаПредоплаты);
		
		Результат = Запрос.Выполнить();
		ВыборкаОбщиеИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаОбщиеИтоги.Следующий();
		ВыборкаДокументАванса = ВыборкаОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаДокументАванса.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаДокументАванса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяСтрока = ТаблицаРеализацииКопия.Добавить();
				НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
				НоваяСтрока.ДокументАванса = ВыборкаДетальныеЗаписи.ДокументАванса;
				НоваяСтрока.СуммаВзаиморасчетов = ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииСуммаВзаиморасчетов;
				НоваяСтрока.Сумма =ВыборкаДетальныеЗаписи.ТабРеализацииСуммаВзаиморасчетов/ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов
				*ВыборкаДетальныеЗаписи.ТабПредоплатыСумма;
				НоваяСтрока.СуммаБезНДСВал =  ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииСуммаБезНДСВал
				*ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов/ВыборкаОбщиеИтоги.ТабРеализацииСуммаВзаиморасчетов;
				НоваяСтрока.НДСВал =  ДоляОплаты * ВыборкаДетальныеЗаписи.ТабРеализацииНДСВал
				*ВыборкаДокументАванса.ТабРеализацииСуммаВзаиморасчетов/ВыборкаОбщиеИтоги.ТабРеализацииСуммаВзаиморасчетов;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ТаблицаРеализацииКопия Цикл
			СтрокаНДСПредъявленный = ТаблицаНДСПредъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДСПредъявленный,СтрокаТЧ);
			СтрокаНДСПредъявленный.Период = СтруктураШапкиДокумента.ДатаПроведения;
			СтрокаНДСПредъявленный.НалоговыйПериод 	= СтруктураШапкиДокумента.НалоговыйПериод;
			СтрокаНДСПредъявленный.Валюта 			= СтруктураШапкиДокумента.ВалютаДокумента;
			Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаНДСПредъявленный.СтавкаНДС 	= Перечисления.СтавкиНДС.НДС18_118;
			КонецЕсли; 
			СтрокаНДСПредъявленный.ПодразделениеОрганизации = ПодразделениеОрганизации;
			СтрокаНДСПредъявленный.Поставщик		= СтруктураШапкиДокумента.Контрагент;
			СтрокаНДСПредъявленный.ВидВычета 		= ВидВычета;
			СтрокаНДСПредъявленный.ВидЦенности		= ВидЦенности;
			СтрокаНДСПредъявленный.СчетФактура 		= СтрокаТЧ.ДокументАванса;
			СтрокаНДСПредъявленный.СуммаБезНДС		= СтрокаТЧ.Сумма/(1+УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС)/100);
			СтрокаНДСПредъявленный.НДС				= СтрокаТЧ.Сумма - СтрокаНДСПредъявленный.СуммаБезНДС;
			СтрокаНДСПредъявленный.СуммаБезНДСВВалюте	= СтрокаТЧ.СуммаБезНДСВал;
			СтрокаНДСПредъявленный.НДСВВалюте		= СтрокаТЧ.НДСВал;
			СтрокаНДСПредъявленный.Регистратор 		= Ссылка;
			СтрокаНДСПредъявленный.Активность 		= Истина;
			// { РГ-Софт Пахоменков А. 12.12.2014
			СтрокаНДСПредъявленный.ДоговорКонтрагента = ДоговорКонтрагента;
			// } РГ-Софт Пахоменков А. 12.12.2014
		КонецЦикла;
		
		НДСПредъявленный.Загрузить(ТаблицаНДСПредъявленный);
		НДСПредъявленный.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, РезультатЗапросаПоТЧ, ТаблицаПок, Отказ, Заголовок)
	
	//Добавил РГ-Софт - Пронин Иван - 2010-01-24 
	Если ИнвойсинговыйЦентр.Наименование <> "Smith" 	//добавила Петроченко Н. 01.02.2013
		ИЛИ ИнвойсинговыйЦентр.Наименование <> "СЕМ" Тогда  //добавила Федотова Л., РГ-Софт, 27.03.16, вопрос SLI-0006309
		СформироватьДвиженияПоНДСПредъявленному(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	КонецЕсли;
	
	//Изменила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	//добавлен регистр, объединяющий регистры: "Продажи", "Выручка_SB" 
	//Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота 
	//	И НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент //добавила Федотова Л., РГ-Софт, 06.07.12
	//	Тогда
	//	ДвиженияПоРегиструВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	//КонецЕсли;
	//<-
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		//Возможны корректировки таблиц при расчетах в у.е.
		//Если Предоплата.Количество() = 0 Тогда
		//ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоТоварам,ТаблицаПоУслугам",ТаблицаПоТоварам,ТаблицаПоУслугам), Отказ,Заголовок,"АВ");
		ТаблицаАвансов = Новый ТаблицаЗначений();
		ТаблицаАвансов.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
		ТаблицаАвансов.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
		ТаблицаАвансов.Колонки.Добавить("Сумма",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаАвансов.Колонки.Добавить("СуммаВал",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		ТаблицаАвансов.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаАвансов.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаАвансов.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		//Распределение выручки по товарам по партиям
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,Комиссионный,Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом,СуммаСписания, Количество, ПодразделениеОрганизации, ИнвойсинговыйЦентр");
		
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		// Для дальнейшей работы количество по услугам интереса не представляет.
		ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
		ТаблицаВыручкиТовары = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
		Для Каждого СтрокаТЧ ИЗ ТаблицаВыручкиТовары Цикл
			СтрокаНовая = ТаблицаВыручки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовая, СтрокаТЧ);
		КонецЦикла;
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		
		//Добавила условие Федотова Л., РГ-Софт, 16.07.16, вопрос SLI-0006607
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно
			И ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
			И Сделка.ПодразделениеОрганизации <> ПодразделениеОрганизации Тогда
			Для каждого Строка Из ТаблицаВыручки Цикл
				Если Строка.Сумма < 0 Тогда
					Строка.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
				Иначе	
					Строка.ПодразделениеОрганизации = ПодразделениеОрганизации;
				КонецЕсли; 
			КонецЦикла;
			//
		Иначе	
			ТаблицаВыручки.ЗаполнитьЗначения(ПодразделениеОрганизации,    "ПодразделениеОрганизации");
		КонецЕсли;          
		ТаблицаВыручки.ЗаполнитьЗначения(ИнвойсинговыйЦентр,    "ИнвойсинговыйЦентр");
		
		//Опрделение параметров учетной политики по отражению НДС с продажи
		ТекУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация, "Нал").МоментОпределенияНалоговойБазыНДС;
		
		Для Каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
			ОтражатьНДСКомитента = СтруктураШапкиДокумента.Дата >= '20060101000000' И (СтрокаТаблицы.Комиссионный И СтрокаТаблицы.ДоговорКомиссии.УчетАгентскогоНДС);
			Если ОтражатьНДСКомитента Тогда 
				СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
			КонецЕсли;
		КонецЦикла;
		
		// Формирование движений документа для подсистемы НДС
		Если ИнвойсинговыйЦентр.Наименование <> "Smith"	//добавила Петроченко Н. 01.02.2013
			ИЛИ ИнвойсинговыйЦентр.Наименование <> "СЕМ" Тогда //добавила Федотова Л., РГ-Софт, 27.03.16, вопрос SLI-0006309
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов,Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли; // Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	
	
	// Учет реализованных услуг
	ДвиженияПоРегиструРасчетыСПокупателями(ТаблицаПок);
	
	//Движение по регистру Товары на складе
	
	//Движение по регистру Номера Lawson
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
		//Изменила Федотова Л., РГ-Софт, 20.09.13, вопрос SLI-0003866
		//ДвиженияПоРегиструНомераИнвойсовLawson(Истина); 
		ДвиженияПоРегиструНомераИнвойсовLawson(Отказ,Истина); 
	Иначе
		//Изменила Федотова Л., РГ-Софт, 20.09.13, вопрос SLI-0003866
		//ДвиженияПоРегиструНомераИнвойсовLawson(); 
		ДвиженияПоРегиструНомераИнвойсовLawson(Отказ); 
	КонецЕсли;
	
	//Изменила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	//добавлен регистр, объединяющий регистры: "Продажи", "Выручка_SB" 
	//Продажи = Движения.Продажи;
	//ТаблицаПродаж = Продажи.Выгрузить();
	////ТаблицаПродаж.Очистить();
	////Движение по регистру Продажи,
	//ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
	//USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
	//	ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, Сделка.Дата);
	//Иначе		
	//	ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
	//КонецЕсли; 
	//ВалютаДокументаКурс = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, СтруктураШапкиДокумента.Дата);
	//Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
	//	СтрокаПродаж = ТаблицаПродаж.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаПродаж,СтрокаТЧ);
	//	СтрокаПродаж.Регистратор = Ссылка;
	//	//СтрокаПродаж.Организация = Организация;
	//	СтрокаПродаж.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
	//	СтрокаПродаж.ПодразделениеОрганизации = ПодразделениеОрганизации;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = USD Тогда
	//		СтрокаПродаж.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//	Иначе
	//		СтрокаПродаж.Валюта = ВалютаДокумента;
	//	КонецЕсли;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	СтрокаПродаж.Период = СтруктураШапкиДокумента.Дата;
	//	//Добавила Федотова Л., РГ-Софт, 03.11.09 ->
	//	СтрокаПродаж.НалоговыйПериод = НалоговыйПериод;
	//	//<-
	//	//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//	//СтрокаПродаж.Тип = "W&S";
	//	СтрокаПродаж.Тип = ПолучитьТип("W&S");
	//	//<-
	//	СтрокаПродаж.Номенклатура = СтрокаТЧ.Содержание;
	//	//добавлено RG-Soft Федотова
	//	СтрокаПродаж.AU = СтрокаТЧ.AU;
	//	СтрокаПродаж.НоменклатураНаименованиеENG = СтрокаТЧ.Номенклатура.НаименованиеENG;
	//	//конец добавления
	//	//ресурсы
	//	СтрокаПродаж.СуммаRUR = СтрокаТЧ.Сумма;
	//	СтрокаПродаж.СуммаНДСRUR = СтрокаТЧ.НДС;
	//	Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт
	//		СтрокаПродаж.СуммаUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		СтрокаПродаж.СуммаНДСUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВал;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДСВал;
	//		СтрокаПродаж.Курс = ВнутреннийКурсUSD.Курс;
	//	ИначеЕсли ВалютаДокумента<>USD И ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда 
	//		СтрокаПродаж.СуммаUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов);
	//		СтрокаПродаж.СуммаНДСUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДС, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов);
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.Сумма;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДС;
	//		СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	Иначе
	//		СтрокаПродаж.СуммаUSD = СтрокаТЧ.СуммаВал;
	//		СтрокаПродаж.СуммаНДСUSD = СтрокаТЧ.НДСВал;
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВал;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДСВал;
	//		СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	КонецЕсли;	
	
	//	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
	//		//СтрокаПродаж.ДокументРеализации = СтруктураШапкиДокумента.Сделка;
	//		СтрокаПродаж.ДокументРеализации = СтруктураШапкиДокумента.СделкаИсходн;
	//	Иначе
	//		СтрокаПродаж.ДокументРеализации = Ссылка;
	//	КонецЕсли;
	//	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
	//			СтрокаПродаж.ПричинаКН = ОснованиеКредитНоты;
	//			СтрокаПродаж.УтвердилКН = Утвердил;//тут надо наверно обращаться к регистру СтатусыКН 
	//		//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//		//СтрокаПродаж.Тип = "CN";
	//		СтрокаПродаж.Тип = ПолучитьТип("CN");
	//		//<-
	//	КонецЕсли;
	//	//добавила Федотова Л., РГ-Софт, 15.01.10  ->
	//	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ПередачаОС") Тогда
	//		//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//		//СтрокаПродаж.Тип = "FA";
	//		СтрокаПродаж.Тип = ПолучитьТип("FA");
	//		//<- 
	//	КонецЕсли;            
	//	//<-	
	
	//КонецЦикла;
	//Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	//	СтрокаПродаж = ТаблицаПродаж.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаПродаж,СтрокаТЧ);
	//	СтрокаПродаж.Регистратор = Ссылка;
	//	//СтрокаПродаж.Организация = Организация;
	//	СтрокаПродаж.ИнвойсинговыйЦентр = ИнвойсинговыйЦентр;
	//	СтрокаПродаж.ПодразделениеОрганизации = ПодразделениеОрганизации;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	СтрокаПродаж.Валюта = ВалютаДокумента;
	//	СтрокаПродаж.ДоговорКонтрагента = ДоговорКонтрагента;
	//	СтрокаПродаж.Период = СтруктураШапкиДокумента.Дата;
	//	//Добавила Федотова Л., РГ-Софт, 03.11.09 ->
	//	СтрокаПродаж.НалоговыйПериод = НалоговыйПериод;
	//	//<-
	//	//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//	//СтрокаПродаж.Тип = "P&M";
	//	СтрокаПродаж.Тип = ПолучитьТип("P&M");
	//	//<-    
	//	СтрокаПродаж.Номенклатура = СтрокаТЧ.Номенклатура.НаименованиеПолное;
	//	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота И СтруктураШапкиДокумента.Сделка <> Неопределено ИЛИ
	//	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
	//		//СтрокаПродаж.ДокументРеализации = СтруктураШапкиДокумента.Сделка;
	//		СтрокаПродаж.ДокументРеализации = СтруктураШапкиДокумента.СделкаИсходн;
	//	Иначе
	//		СтрокаПродаж.ДокументРеализации = Ссылка;
	//	КонецЕсли;
	//	//добавлено RG-Soft Федотова
	//	СтрокаПродаж.AU = СтрокаТЧ.AU;
	//	СтрокаПродаж.НоменклатураНаименованиеENG = СтрокаТЧ.Номенклатура.НаименованиеENG;
	//	//конец добавления
	//	//ресурсы
	//	СтрокаПродаж.СуммаRUR = СтрокаТЧ.Сумма;
	//	СтрокаПродаж.СуммаНДСRUR = СтрокаТЧ.НДС;
	//	//ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
	//	//USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	//	//ВнутреннийКурсUSD = ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
	//	Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт
	//		СтрокаПродаж.СуммаUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		СтрокаПродаж.СуммаНДСUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс);
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВал;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДСВал;
	//		СтрокаПродаж.Курс = ВнутреннийКурсUSD.Курс;
	//	ИначеЕсли ВалютаДокумента<>USD И ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда 
	//		СтрокаПродаж.СуммаUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов);
	//		СтрокаПродаж.СуммаНДСUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДС, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов);
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.Сумма;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДС;
	//		СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	Иначе
	//		СтрокаПродаж.СуммаUSD = СтрокаТЧ.СуммаВал;
	//		СтрокаПродаж.СуммаНДСUSD = СтрокаТЧ.НДСВал;
	//		//СтрокаПродаж.СуммаВВалютеДокумента = СтрокаТЧ.СуммаВал;
	//		//СтрокаПродаж.СуммаНДСВВалютеДокумента = СтрокаТЧ.НДСВал;
	//		СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	КонецЕсли;			
	//	//реквизиты
	//	//СтрокаПродаж.Курс = КурсВзаиморасчетов;
	//	
	//	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ
	//		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
	//			СтрокаПродаж.ПричинаКН = ОснованиеКредитНоты;
	//			СтрокаПродаж.УтвердилКН = Утвердил;//тут надо наверно обращаться к регистру СтатусыКН 			
	//		//Изменил Пахоменков, РГ-СОФТ 26.02.2012 
	//		//СтрокаПродаж.Тип = "CN";
	//		СтрокаПродаж.Тип = ПолучитьТип("CN");
	//		//<-  		
	//		//СтрокаПродаж.Период = Дата;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////Добавила Федотова Л., РГ-Софт, 05.11.13, вопрос SLI-0003955 ->
	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно 
	//	И ПодразделениеОрганизации <> Сделка.ПодразделениеОрганизации Тогда
	//	Для каждого Строка Из ТаблицаПродаж Цикл
	//		 Если Строка.СуммаRUR < 0 Тогда
	//			 Строка.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
	//		 КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли; 
	//
	//Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
	//	ТаблицаПродаж.Свернуть("Период,НалоговыйПериод,Регистратор,ИнвойсинговыйЦентр,ПодразделениеОрганизации,ДоговорКонтрагента,Валюта,ДоговорКонтрагента,
	//							|Тип,ДокументРеализации,Курс,ПричинаКН,УтвердилКН,WO,СтавкаНДС,Номенклатура,AU,НоменклатураНаименованиеENG,ДокументАванса,НомерСтрокиТабЧасти",
	//							"СуммаRUR,СуммаНДСRUR,СуммаUSD,СуммаНДСUSD");  		//изменено RG-Soft Федотова
	//	//ТаблицаПродаж.Свернуть("Период,НалоговыйПериод,Регистратор,ИнвойсинговыйЦентр,ПодразделениеОрганизации,ДоговорКонтрагента,Валюта,ДоговорКонтрагента,
	//	//						|Тип,ДокументРеализации,Курс,ПричинаКН,УтвердилКН,WO,СтавкаНДС,Номенклатура,AU,НоменклатураНаименованиеENG,ДокументАванса,НомерСтрокиТабЧасти",
	//	//						"СуммаRUR,СуммаНДСRUR,СуммаВВалютеДокумента,СуммаНДСВВалютеДокумента");  		//изменено RG-Soft Федотова 19.01.10
	//КонецЕсли;							
	
	//Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент Тогда
	//	Продажи.Загрузить(ТаблицаПродаж);
	//	Продажи.Записать();
	//КонецЕсли;
	//<-
	
	//Добавила Федотова Людмила, РГ-Софт, 02.10.09 ->
	//Движение по регистру КурсовыеРазницыSB 
	//ПровестиПоРегиструКурсовыхРазниц(ЭтотОбъект, ТаблицаПоТоварам, ТаблицаПоУслугам);
	//<-
	
	//Добавил - РГ-Софт - Иванов Антон - 2008.08.22
	//Если был аванс - то пишем данные в книгу покупок на сумму аванса
	Если ИнвойсинговыйЦентр.Наименование <> "Smith"  //добавила Петроченко Н. 01.02.2013
		ИЛИ ИнвойсинговыйЦентр.Наименование <> "СЕМ" Тогда  //добавила Федотова Л., РГ-Софт, 27.03.16, вопрос SLI-0006309
		ДвиженияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаАвансов, Отказ, Заголовок);
	КонецЕсли;
	
	//добавила Федотова Л., РГ-Софт, 22.03.13, вопрос SLI-0003429 ->
	//движения по регистру Тикеты
	
	// { RGS OKozaeva 12/14/2016 9:14:47 PM - RCA-0000439 Если кредит-ноты не будут делать движения в регистр "Тикеты", то не будут проводится перевыставленные реализации.
	
	// { RGS LFedotova 02.09.2016 22:56:29 - вопрос SLI-0006740
	//ПроводитьПоТикетам = Истина;
	//Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда //проверим остатки по тикетам
	//	ПроводитьПоТикетам = Ложь;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	РеализацияТоваровУслугТовары.Ticket
	//	|ПОМЕСТИТЬ ТикетыВРеализации
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//	|ГДЕ
	//	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	РеализацияТоваровУслугУслуги.Ticket
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//	|ГДЕ
	//	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СУММА(ТикетыОстатки.СуммаОстаток) КАК СуммаОстаток
	//	|ИЗ
	//	|	РегистрНакопления.Тикеты.Остатки(
	//	|			,
	//	|			Тикет В
	//	|				(ВЫБРАТЬ
	//	|					ТикетыВРеализации.Ticket
	//	|				ИЗ
	//	|					ТикетыВРеализации КАК ТикетыВРеализации)) КАК ТикетыОстатки";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		Если ВыборкаДетальныеЗаписи.СуммаОстаток <> 0 Тогда
	//			ПроводитьПоТикетам = Истина;
	//		КонецЕсли;
	//	КонецЦикла;                               
	//КонецЕсли;		
	//Если ПроводитьПоТикетам Тогда
		// } RGS LFedotova 02.09.2016 22:56:56 - вопрос SLI-0006740
		
	// } RGS OKozaeva 12/14/2016 9:14:51 PM - RCA-0000439
		Тикеты = Движения.Тикеты;
		ТаблицаТикетов = Тикеты.Выгрузить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапросаПоТЧ.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Строка = ТаблицаТикетов.Добавить();
			Строка.ВидДвижения = ВидДвиженияНакопления.Расход;                      
			Строка.Тикет = ВыборкаДетальныеЗаписи.Ticket;
			Если ВыборкаДетальныеЗаписи.TicketВалюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда 
				Строка.Сумма = ВыборкаДетальныеЗаписи.СуммаРуб;
			Иначе 	                                                     
				Строка.Сумма = ВыборкаДетальныеЗаписи.СуммаUSD;
			КонецЕсли;
			Строка.Регистратор = Ссылка;
			Строка.Период = ДатаПроведения;
			Строка.Активность = Истина;
		КонецЦикла;
		
		Тикеты.Загрузить(ТаблицаТикетов);
		Тикеты.Записать();
		//<-
		// { RGS LFedotova 02.09.2016 22:59:31 - вопрос SLI-0006740
	//КонецЕсли; 
	// } RGS LFedotova 02.09.2016 22:59:33 - вопрос SLI-0006740
	
	//добавила Федотова Л., РГ-Софт, 27.05.13, вопрос SLI-0003596
	//CoGS
	Если ЗначениеЗаполнено(СписаниеОборудования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество
		|ПОМЕСТИТЬ ТабЧасть
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CoGSОстатки.СписаниеОборудования,
		|	CoGSОстатки.ПроводкаДеталейСКП,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Количество,
		|	CoGSОстатки.КоличествоОстаток,
		|	CoGSОстатки.FiscalSumОстаток,
		|	CoGSОстатки.ManagementSumОстаток
		|ИЗ
		|	ТабЧасть КАК ТабЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.CoGS.Остатки(
		|				&МоментВремени,
		|				СписаниеОборудования = &СписаниеОборудования
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ТабЧасть.Номенклатура
		|						ИЗ
		|							ТабЧасть КАК ТабЧасть)) КАК CoGSОстатки
		|		ПО ТабЧасть.Номенклатура = CoGSОстатки.Номенклатура";
		
		Запрос.УстановитьПараметр("МоментВремени", ДатаПроведения);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СписаниеОборудования", СписаниеОборудования);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СредняяЦенаFiscal = ?(ВыборкаДетальныеЗаписи.КоличествоОстаток > 0, ВыборкаДетальныеЗаписи.FiscalSumОстаток / ВыборкаДетальныеЗаписи.КоличествоОстаток, 0);
			СредняяЦенаManagement = ?(ВыборкаДетальныеЗаписи.КоличествоОстаток > 0, ВыборкаДетальныеЗаписи.ManagementSumОстаток / ВыборкаДетальныеЗаписи.КоличествоОстаток, 0);
			Если СредняяЦенаFiscal = 0 ИЛИ СредняяЦенаManagement = 0 Тогда
				Сообщить("Товар " + ВыборкаДетальныеЗаписи.Номенклатура + " не списан по регистру ""CoGS"".");
				Продолжить;
			Иначе
				Движение = Движения.CoGS.ДобавитьРасход();
				Движение.СписаниеОборудования = ВыборкаДетальныеЗаписи.СписаниеОборудования;
				Движение.ПроводкаДеталейСКП = ВыборкаДетальныеЗаписи.ПроводкаДеталейСКП;
				Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
				Если ВыборкаДетальныеЗаписи.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
					Движение.FiscalSum = ВыборкаДетальныеЗаписи.FiscalSumОстаток; 
					Движение.ManagementSum = ВыборкаДетальныеЗаписи.ManagementSumОстаток;
				Иначе
					Движение.FiscalSum = ВыборкаДетальныеЗаписи.Количество * СредняяЦенаFiscal;
					Движение.ManagementSum = ВыборкаДетальныеЗаписи.Количество * СредняяЦенаManagement;
				КонецЕсли; 
				Движение.Период = Дата;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Добавила РГ-Софт - Бакшеева Анна - 2014-02-25 ->
	//добавлен регистр, объединяющий регистры: "Продажи", "Выручка_SB" 
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент Тогда
		СформироватьДвиженияПоРегиструПродажиВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	КонецЕсли;
	//<-
	
	//добавила Федотова Л., РГ-Софт, 14.10.15, вопрос SLI-0005864 ->
	//движения по регистру ИсполнениеБюджетаКонтракта
	Если СтруктураШапкиДокумента.СуммаКонтракта > 0 Тогда
		ИсполнениеБюджетаКонтракта = Движения.ИсполнениеБюджетаКонтракта;
		ТаблицаИсполнениеБюджетаКонтракта = ИсполнениеБюджетаКонтракта.Выгрузить();
		
		Строка = ТаблицаИсполнениеБюджетаКонтракта.Добавить();
		Строка.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Строка.Период = СтруктураШапкиДокумента.ДатаПроведения;
		Строка.Регистратор = Ссылка;
		Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаДокумента Тогда 
			Строка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		Иначе 	                                                     
			Строка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов, ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ДатаПроведения).Курс);
		КонецЕсли;
		Строка.Активность = Истина;
		
		ИсполнениеБюджетаКонтракта.Загрузить(ТаблицаИсполнениеБюджетаКонтракта);
		ИсполнениеБюджетаКонтракта.Записать();
	КонецЕсли; 
	//<-
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

//Добавил Пахоменков РГ-СОФТ 26.02.2012 
Функция ПолучитьТип(СтарыйТип)
	
	// Тип Other ставим если пользователь проставил галку "Прочие продажи" или это кредит нота и год даты документа отличается от 
	// года даты документа, который корректируется
	НужноПроставитьТипOther = ПрочиеПродажи ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно И НЕ Год(Дата) = Год(Сделка.Дата));
	
	Если НужноПроставитьТипOther Тогда
		Возврат "OTH";		
	Иначе
		Возврат СтарыйТип;
	КонецЕсли;
	
КонецФункции

//Добавила Федотова Людмила, РГ-Софт, 02.10.09 ->
Процедура ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	Если НЕ ДокументОбъект.Предоплата.Количество() = 0 Тогда
		Если НЕ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			КурсовыеРазницыSB = ДокументОбъект.Движения.КурсовыеРазницыSB;
			ТаблицаКурсовыхРазниц = КурсовыеРазницыSB.Выгрузить();
			
			ТаблицаРеализации = ТаблицаПоУслугам.Скопировать();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаРеализации);
			ТаблицаРеализации.Свернуть("AU,СтавкаНДС", "СуммаВал,СуммаБезНДС,НДС,СуммаБезНДСВал,НДСВал");
			ТаблицаПредоплаты = ДокументОбъект.Предоплата.Выгрузить(,"ДокументАванса,Сумма,СуммаВзаиморасчетов");
			
			//Распределим предоплату по строкам реализации
			ТаблицаРеализации.Колонки.Добавить("ДокументАванса",Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеВходящее"));
			ТаблицаРеализации.Колонки.Добавить("СуммаВзаиморасчетов",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			КопияТаблицаРеализации = ТаблицаРеализации.Скопировать();
			ТаблицаРеализации.Очистить();
			Для каждого Строка Из КопияТаблицаРеализации Цикл
				Для  каждого СтрокаАвансов Из ТаблицаПредоплаты  Цикл
					НоваяСтрока = ТаблицаРеализации.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.ДокументАванса = СтрокаАвансов.ДокументАванса;
					НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВал;
				КонецЦикла;
			КонецЦикла;
			
			Распределение = Новый Структура("СуммаВзаиморасчетов");
			ТаблицаРеализации = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(ТаблицаПредоплаты,ТаблицаРеализации,Распределение);			
			
			Для каждого СтрокаТаблицы Из ТаблицаРеализации Цикл
				Коэффициент = СтрокаТаблицы.СуммаВзаиморасчетов / СтрокаТаблицы.СуммаВал;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС * Коэффициент;
				СтрокаТаблицы.НДС = СтрокаТаблицы.НДС * Коэффициент;
				СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаБезНДСВал * Коэффициент;
				СтрокаТаблицы.НДСВал = СтрокаТаблицы.НДСВал * Коэффициент;
			КонецЦикла; 
			
			ВалютаSLB = Справочники.Валюты.НайтиПоНаименованию("SLB");
			ДанныеОВалютеSLB = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаSLB,ДокументОбъект.Дата);
			ДанныеОВалютеОтгрузки = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
			СоответствиеКурсыОплат = Новый Соответствие;
			Для каждого СтрокаТаблицы Из ТаблицаПредоплаты Цикл
				//изменил Трефиленков Дмитрий, РГ-Софт, 13.04.2012 по вопросу SLI-0002419
				//ДанныеОВалютеОплаты = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов,СтрокаТаблицы.ДокументАванса.Дата);
				СоответствиеКурсыОплат.Вставить(СтрокаТаблицы.ДокументАванса, Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.СуммаВзаиморасчетов,4));
			КонецЦикла; 
			
			Для Каждого СтрокаТЧ Из ТаблицаРеализации Цикл
				СтрокаКурсовыхРазниц = ТаблицаКурсовыхРазниц.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКурсовыхРазниц,СтрокаТЧ);
				СтрокаКурсовыхРазниц.ИнвойсинговыйЦентр = ДокументОбъект.ИнвойсинговыйЦентр;
				СтрокаКурсовыхРазниц.ПодразделениеОрганизации = ДокументОбъект.ПодразделениеОрганизации;
				СтрокаКурсовыхРазниц.AU = СтрокаТЧ.AU;
				СтрокаКурсовыхРазниц.Сумма = СтрокаТЧ.СуммаБезНДС;
				СтрокаКурсовыхРазниц.СуммаUSD = СтрокаТЧ.СуммаБезНДСВал;
				СтрокаКурсовыхРазниц.СуммаНДС = СтрокаТЧ.НДС;
				СтрокаКурсовыхРазниц.СуммаНДСUSD = СтрокаТЧ.НДСВал;
				СтрокаКурсовыхРазниц.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
				СтрокаКурсовыхРазниц.ДокументРеализации = ДокументОбъект.Ссылка;
				СтрокаКурсовыхРазниц.ДокументОплаты = СтрокаТЧ.ДокументАванса;
				СтрокаКурсовыхРазниц.КурсSLB = ДанныеОВалютеSLB.Курс;
				СтрокаКурсовыхРазниц.КурсОплаты = СоответствиеКурсыОплат.Получить(СтрокаТЧ.ДокументАванса);
				СтрокаКурсовыхРазниц.КурсОтгрузки = ДанныеОВалютеОтгрузки.Курс;
				СтрокаКурсовыхРазниц.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов;
				
				СтрокаКурсовыхРазниц.Регистратор = ДокументОбъект.Ссылка;
				СтрокаКурсовыхРазниц.Период = ДокументОбъект.ДатаПроведения;
				СтрокаКурсовыхРазниц.НалоговыйПериод = ДокументОбъект.НалоговыйПериод;
				СтрокаКурсовыхРазниц.Активность = Истина;
			КонецЦикла;
			
			КурсовыеРазницыSB.Загрузить(ТаблицаКурсовыхРазниц);
			КурсовыеРазницыSB.Записать();
		КонецЕсли;
	КонецЕсли;                 
КонецПроцедуры //ПровестиПоРегиструКурсовыхРазниц(ДокументОбъект, ТаблицаПоТоварам)

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов,Отказ, Заголовок, ОтработкаДвиженийПоПартиям = Ложь)
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	//-> RG-Soft VIvanov 02/04/11 - если Кредит-нота сторно к уменьшению и это не исправление, то идёт в НДС предъявленный, а не начисленный
	Если (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно И Корректировка) Тогда
		
		//Добавила Федотова Л., РГ-Софт, 22.01.16, вопрос SLI-0006117
		ТаблицаВыручки.Свернуть("Номенклатура,ВидЦенности,Ценность,Партия,СтавкаНДС,Комиссионный,Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом,ПодразделениеОрганизации,ИнвойсинговыйЦентр","Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал,СуммаСписания,Количество");
		//
		ТаблицаУменьшения = ТаблицаВыручки.Скопировать();
		ТаблицаУменьшения.Очистить();
		Итератор = ТаблицаВыручки.Количество();
		Пока Итератор > 0 Цикл
			текСтрока = ТаблицаВыручки[Итератор - 1];
			Если текСтрока.НДС < 0 Тогда
				НоваяСтрока = ТаблицаУменьшения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока);
				ТаблицаВыручки.Удалить(текСтрока);
			КонецЕсли;
			Итератор = Итератор - 1;
		КонецЦикла;
		
		Если ТаблицаУменьшения.Количество() > 0 Тогда
			СформироватьДвиженияПоРегиструНДСПредъявленныйСторно(СтруктураШапкиДокумента, ТаблицаУменьшения, Движения, Отказ);	
		КонецЕсли;
	КонецЕсли;
	//<-	
	
	//Добавила Федотова Л., РГ-Софт, 08.06.09 
	//УчетНДС.УпрощенныйНДС_СформироватьДвиженияПоНДСНачисленному(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	
	//Добавила Федотова Л., РГ-Софт, 06.11.09 
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.РеализацияАгент Тогда
		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегиструНомераИнвойсовLawson(Отказ, ИзменитьЗнак = Ложь)
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота 
		//Добавила Федотова Л, РГ-Софт, 14.10.13, вопрос SLI-0003917 - >
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно И СуммаДокумента = 0
		//<-
		Тогда
		Номера = РегистрыСведений.НомераИнвойсовLawson.СоздатьНаборЗаписей();
		Номера.Отбор.Документ.Использование = Истина;
		Номера.Отбор.Документ.Значение = Ссылка;
		Номера.Отбор.Документ.ВидСравнения = ВидСравнения.Равно;
		
		Номера.Прочитать();
		
		Номера.Очистить();
		Номера.Записать();
		
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =	"ВЫБРАТЬ
	|	НомераИнвойсовLawson.Документ
	|ИЗ
	|	РегистрСведений.НомераИнвойсовLawson КАК НомераИнвойсовLawson
	|ГДЕ
	|	НомераИнвойсовLawson.Номер <> """"
	|	И НомераИнвойсовLawson.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Номера = РегистрыСведений.НомераИнвойсовLawson.СоздатьНаборЗаписей();
		Номера.Отбор.Документ.Использование = Истина;
		Номера.Отбор.Документ.Значение = Ссылка;
		Номера.Отбор.Документ.ВидСравнения = ВидСравнения.Равно;
		
		Номера.Прочитать();
		
		Номера.Очистить();
		
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВложенныйЗапрос.Номер,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		//|	ВложенныйЗапрос.СтавкаНДС, //Закомментировала Федотова Л., РГ-Софт, 22.03.13Ю вопрос SLI-0003408
		|	ВложенныйЗапрос.Ticket КАК Тикет,
		|	ВложенныйЗапрос.GLDate КАК ДатаLawson,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ticket.Валюта, ВложенныйЗапрос.ВалютаДоговора) КАК TicketВалюта,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.Курс,
		|	КурсыSLB.Курс КАК КурсSLB
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслугТовары.Ticket.SiebelOrder.LawsonInvoice КАК Номер,
		|		ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
		|				ТОГДА РеализацияТоваровУслугТовары.Сумма
		|			ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
		|		КОНЕЦ КАК Сумма,
		//|		РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС, //Закомментировала Федотова Л., РГ-Софт, 22.03.13Ю вопрос SLI-0003408
		|		РеализацияТоваровУслугТовары.Ticket КАК Ticket,
		|		РеализацияТоваровУслугТовары.Ticket.SiebelOrder.GLDate КАК GLDate,
		|		РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|		РеализацияТоваровУслугТовары.Ссылка.КурсВзаиморасчетов КАК Курс,
		|		НАЧАЛОПЕРИОДА(ЕСТЬNULL(РеализацияТоваровУслугТовары.Ticket.Дата, РеализацияТоваровУслугТовары.Ссылка.Дата), ДЕНЬ) КАК Дата,
		|		РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|	ГДЕ
		|		РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслугУслуги.Ticket.SiebelOrder.LawsonInvoice,
		|		ВЫБОР
		|			КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
		|				ТОГДА РеализацияТоваровУслугУслуги.Сумма
		|			ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
		|		КОНЕЦ,
		//|		РеализацияТоваровУслугУслуги.СтавкаНДС, //Закомментировала Федотова Л., РГ-Софт, 22.03.13Ю вопрос SLI-0003408
		|		РеализацияТоваровУслугУслуги.Ticket,
		|		РеализацияТоваровУслугУслуги.Ticket.SiebelOrder.GLDate,
		|		РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
		|		РеализацияТоваровУслугУслуги.Ссылка.КурсВзаиморасчетов,
		|		НАЧАЛОПЕРИОДА(ЕСТЬNULL(РеализацияТоваровУслугУслуги.Ticket.Дата, РеализацияТоваровУслугУслуги.Ссылка.Дата), ДЕНЬ),
		|		РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|	ГДЕ
		|		РеализацияТоваровУслугУслуги.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КурсыВалют.Курс КАК Курс,
		|			КурсыВалют.Период КАК Период
		|		ИЗ
		|			РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ГДЕ
		|			КурсыВалют.Валюта = &ВалютаSLB) КАК КурсыSLB
		|		ПО ВложенныйЗапрос.Дата = КурсыSLB.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номер,
		//|	ВложенныйЗапрос.СтавкаНДС, //Закомментировала Федотова Л., РГ-Софт, 22.03.13Ю вопрос SLI-0003408
		|	ВложенныйЗапрос.Ticket,
		|	ВложенныйЗапрос.GLDate,
		|	ВложенныйЗапрос.ВалютаДокумента,
		|	ВложенныйЗапрос.Курс,
		|	КурсыSLB.Курс,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ticket.Валюта, ВложенныйЗапрос.ВалютаДоговора)");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ВалютаSLB", Справочники.Валюты.НайтиПоНаименованию("SLB"));
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = Номера.Добавить();
			Запись.Документ = Ссылка;
			СуммаДокументаБезНДС = SalesBook.ОпределитьСуммуДокументаБезНДС(Ссылка);
			СуммаДокументаСНДС = ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(Ссылка);
			Сумма = Выборка.Сумма; 
			Если НЕ Выборка.TicketВалюта = Выборка.ВалютаДокумента Тогда
				//Добавила Федотова Л., РГ-Софт, 20.09.13, вопрос SLI-0003866
				Если Выборка.TicketВалюта.Пустая()  Тогда
					Сообщить("Документ не может быть проведен: необходимо заполнить валюту в тикете.");
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
				Если Выборка.КурсSLB = Null  Тогда
					Сообщить("Документ не может быть проведен: необходимо заполнить курс валюты SLB.");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				//Конец добавления
				Если Выборка.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
					СуммаДокументаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокументаБезНДС, Выборка.ВалютаДокумента, Выборка.TicketВалюта, 1, Выборка.КурсSLB);
					СуммаДокументаСНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокументаСНДС, Выборка.ВалютаДокумента, Выборка.TicketВалюта, 1, Выборка.КурсSLB);					
					Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Сумма, Выборка.ВалютаДокумента, Выборка.TicketВалюта, 1, Выборка.КурсSLB);					
				Иначе
					СуммаДокументаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокументаБезНДС, Выборка.ВалютаДокумента, Выборка.TicketВалюта, Выборка.Курс, 1);					
					СуммаДокументаСНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокументаСНДС, Выборка.ВалютаДокумента, Выборка.TicketВалюта, Выборка.Курс, 1);					
					Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Сумма, Выборка.ВалютаДокумента, Выборка.TicketВалюта, Выборка.Курс, 1);					
				КонецЕсли; 
			КонецЕсли; 
			Запись.СуммаДокументаБезНДС = ?(ИзменитьЗнак,-1*СуммаДокументаБезНДС,СуммаДокументаБезНДС);
			Запись.СуммаДокумента = ?(ИзменитьЗнак,-1*СуммаДокументаСНДС,СуммаДокументаСНДС);
			//Запись.Валюта = Выборка.TicketВалюта;
			Запись.Номер = Выборка.Номер;
			Запись.Сумма = ?(ИзменитьЗнак,-1*Сумма,Сумма);
			//Закомментировала Федотова Л., РГ-Софт, 22.03.13Ю вопрос SLI-0003408
			//Запись.СтавкаНДС = Выборка.СтавкаНДС;
			Запись.Тикет = Выборка.Тикет;
			Запись.ДатаLawson = Выборка.ДатаLawson;
		КонецЦикла;
		
		Номера.Записать();
		
	Иначе
		
		Номера = РегистрыСведений.НомераИнвойсовLawson.СоздатьНаборЗаписей();
		Номера.Отбор.Документ.Использование = Истина;
		Номера.Отбор.Документ.Значение = Ссылка;
		Номера.Отбор.Документ.ВидСравнения = ВидСравнения.Равно;
		
		Номера.Прочитать();
		Номера.Записать();
		
	КонецЕсли;
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван - 2010-01-24
Процедура ДвиженияПоРегиструВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам)
	
	ВыручкаДвижения = Движения.Выручка_SB;
	
	Для Каждого Запись Из ТаблицаПоТоварам Цикл
		Движение = ВыручкаДвижения.Добавить();
		Движение.Период 			= ДатаПроведения;
		Движение.Организация 		= Организация;
		Движение.Подразделение 		= ПодразделениеОрганизации;
		Движение.Контрагент 		= Контрагент;
		Движение.Договор 			= ДоговорКонтрагента;
		Движение.ВалютаДокумента 	= ВалютаДокумента;
		Движение.ВалютаДоговора 	= СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		Движение.AU 				= Запись.AU;
		Движение.Номенклатура 		= Запись.Номенклатура;
		Движение.НалоговыйПериод 	= НалоговыйПериод;
		
		//Если УчитыватьНДС Тогда
		//	Движение.СуммаБезНДСРуб = ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.СуммаБезНДС);
		//	Движение.СуммаБезНДС 	= Запись.СуммаБезНДС;
		//	Движение.СуммаНДСРуб	= ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.НДС);
		//	Движение.СуммаНДС 		= Запись.НДС;				
		//Иначе
		//	Движение.СуммаБезНДСРуб = ПолучитьРубСумму(СтруктураШапкиДокумента, Запись.Сумма);
		//	Движение.СуммаБезНДС 	= Запись.Сумма;
		//КонецЕсли;
		
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСРуб = Запись.СуммаБезНДС;
			Движение.СуммаБезНДС 	= Запись.СуммаБезНДСВал;
			Движение.СуммаНДСРуб	= Запись.НДС;
			Движение.СуммаНДС 		= Запись.НДСВал;				
		Иначе
			Движение.СуммаБезНДСРуб = Запись.Сумма;
			Движение.СуммаБезНДС 	= Запись.СуммаВал;
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Запись Из ТаблицаПоУслугам Цикл
		Движение = ВыручкаДвижения.Добавить();
		Движение.Период 			= ДатаПроведения;
		Движение.Организация 		= Организация;
		Движение.Подразделение 		= ПодразделениеОрганизации;
		Движение.Контрагент 		= Контрагент;
		Движение.Договор 			= ДоговорКонтрагента;
		Движение.ВалютаДокумента 	= ВалютаДокумента;
		Движение.ВалютаДоговора 	= СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		Движение.AU 				= Запись.AU;
		Движение.Номенклатура 		= Запись.Номенклатура;
		Движение.НалоговыйПериод 	= НалоговыйПериод;
		
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСРуб = Запись.СуммаБезНДС;
			Движение.СуммаБезНДС 	= Запись.СуммаБезНДСВал;
			Движение.СуммаНДСРуб	= Запись.НДС;
			Движение.СуммаНДС 		= Запись.НДСВал;				
		Иначе
			Движение.СуммаБезНДСРуб = Запись.Сумма;
			Движение.СуммаБезНДС 	= Запись.СуммаВал;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Добавила РГ-Софт - Бакшеева Анна - 2014-02-25
Процедура СформироватьДвиженияПоРегиструПродажиВыручка_SB(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам)
	
	ВнутреннийUSD = Справочники.Валюты.НайтиПоНаименованию("SLB");
	USD = Справочники.Валюты.НайтиПоНаименованию("USD");
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		ВнутреннийКурсUSD 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, Сделка.Дата);
		ДокументРеализации 	= СтруктураШапкиДокумента.СделкаИсходн;
	Иначе		
		ВнутреннийКурсUSD 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВнутреннийUSD, СтруктураШапкиДокумента.Дата);
		ДокументРеализации 	= Ссылка;
	КонецЕсли; 
	ВалютаДокументаКурс = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, СтруктураШапкиДокумента.Дата);
	
	ПродажиВыручка_SB = Движения.ПродажиВыручка_SB;
	ТаблицаПродаж = ПродажиВыручка_SB.Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
		
		Движение = ТаблицаПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		Движение.Период	= СтруктураШапкиДокумента.ДатаПроведения;
		
		// измерения
		Движение.НалоговыйПериод			= НалоговыйПериод;
		Движение.ИнвойсинговыйЦентр			= ИнвойсинговыйЦентр;
		Движение.ДоговорКонтрагента 		= ДоговорКонтрагента;
		Движение.ПодразделениеОрганизации 	= ПодразделениеОрганизации;
		Движение.ДокументРеализации 		= ДокументРеализации;
		Движение.ВалютаДокумента 			= ВалютаДокумента;
		
		Движение.Тип 						= ПолучитьТип("W&S");
		Движение.AU 						= СтрокаТЧ.AU;
		
		// ресурсы
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСRUR = СтрокаТЧ.СуммаБезНДС;
			Движение.СуммаНДСRUR	= СтрокаТЧ.НДС;
			//Добавила Федотова Л., РГ-Софт, 16.09.14, вопрос SLI-0004845 -> 
			Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаБезНДС;
				Движение.СуммаНДС 		= СтрокаТЧ.НДС;	
			Иначе	
				//<-
				Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаБезНДСВал;
				Движение.СуммаНДС 		= СтрокаТЧ.НДСВал;	
			КонецЕсли; 
		Иначе
			Движение.СуммаБезНДСRUR = СтрокаТЧ.Сумма;
			Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаВал;
		КонецЕсли;
		
		Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт
			_СуммаUSD = Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2), 0);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, _СуммаUSD - Движение.СуммаНДСUSD, _СуммаUSD);
			Движение.Курс = ВнутреннийКурсUSD.Курс;
		ИначеЕсли ВалютаДокумента<>USD И ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда 
			_СуммаUSD = Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов), 2);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДС, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов), 2), 0);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, _СуммаUSD - Движение.СуммаНДСUSD, _СуммаUSD);
			Движение.Курс = КурсВзаиморасчетов;
		Иначе
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.СуммаБезНДСВал, СтрокаТЧ.СуммаВал);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.НДСВал, 0);
			Движение.Курс = КурсВзаиморасчетов;
		КонецЕсли;			
		
		// реквизиты
		Движение.Номенклатура					= СтрокаТЧ.Номенклатура;
		Движение.НоменклатураНаименование		= СтрокаТЧ.Содержание;
		Движение.НоменклатураНаименованиеENG	= СтрокаТЧ.Номенклатура.НаименованиеENG;
		// { RGS MYurkevich 6/10/2015 2:37:40 PM - TP-00001070
		Движение.ЕдиницаИзмерения               = СтрокаТЧ.ЕдиницаИзмерения;
		Движение.Количество                     = СтрокаТЧ.Количество;
		// } RGS MYurkevich 6/10/2015 2:38:08 PM - TP-00001070
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
			
			Движение.ПричинаКН = ОснованиеКредитНоты;
			Движение.Тип = ПолучитьТип("CN");
		КонецЕсли;
		
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ПередачаОС") Тогда
			Движение.Тип = ПолучитьТип("FA");
		КонецЕсли;            
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
		Движение.Период	= СтруктураШапкиДокумента.ДатаПроведения;
		
		// измерения
		Движение.НалоговыйПериод			= НалоговыйПериод;
		Движение.ИнвойсинговыйЦентр			= ИнвойсинговыйЦентр;
		Движение.ДоговорКонтрагента 		= ДоговорКонтрагента;
		Движение.ПодразделениеОрганизации 	= ПодразделениеОрганизации;
		Движение.ДокументРеализации 		= ДокументРеализации;
		Движение.ВалютаДокумента 			= ВалютаДокумента;
		
		Движение.Тип 						= ПолучитьТип("P&M");
		Движение.AU 						= СтрокаТЧ.AU;
		
		// ресурсы
		Если УчитыватьНДС Тогда
			Движение.СуммаБезНДСRUR = СтрокаТЧ.СуммаБезНДС;
			Движение.СуммаНДСRUR	= СтрокаТЧ.НДС;
			//Добавила Федотова Л., РГ-Софт, 16.09.14, вопрос SLI-0004845 -> 
			Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаБезНДС;
				Движение.СуммаНДС 		= СтрокаТЧ.НДС;	
			Иначе	
				//<-
				Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаБезНДСВал;
				Движение.СуммаНДС 		= СтрокаТЧ.НДСВал;	
			КонецЕсли; 
		Иначе
			Движение.СуммаБезНДСRUR = СтрокаТЧ.Сумма;
			Движение.СуммаБезНДС 	= СтрокаТЧ.СуммаВал;
		КонецЕсли;
		
		СуммаОбщ = Движение.СуммаБезНДС + Движение.СуммаНДС;
		
		Если ВалютаДокумента<>USD И ВалютаДокумента = СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда //добавила "И" Людмила Федотова, РГ-Софт
			_СуммаUSD = Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДСВал, ВалютаДокумента, ВнутреннийUSD, КурсВзаиморасчетов, ВнутреннийКурсUSD.Курс), 2), 0);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, _СуммаUSD - Движение.СуммаНДСUSD, _СуммаUSD);
			Движение.Курс = ВнутреннийКурсUSD.Курс;
		ИначеЕсли ВалютаДокумента<>USD И ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаВзаиморасчетов Тогда 
			_СуммаUSD = Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов), 2);
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, Окр(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.НДС, ВалютаДокумента, USD, ВалютаДокументаКурс.Курс, КурсВзаиморасчетов), 2), 0);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, _СуммаUSD - Движение.СуммаНДСUSD, _СуммаUSD);
			Движение.Курс = КурсВзаиморасчетов;
		Иначе
			//Ресурса СуммаUSD нет, исправила на СуммаБезНДСUSD Федотова Л., РГ-Софт, 04.03.14 
			//Движение.СуммаUSD = ?(УчитыватьНДС, СтрокаТЧ.СуммаБезНДСВал, СтрокаТЧ.СуммаВал);
			Движение.СуммаБезНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.СуммаБезНДСВал, СтрокаТЧ.СуммаВал);
			//конец исправления
			Движение.СуммаНДСUSD = ?(УчитыватьНДС, СтрокаТЧ.НДСВал, 0);
			Движение.Курс = КурсВзаиморасчетов;
		КонецЕсли;			
		
		// реквизиты
		Движение.Номенклатура					= СтрокаТЧ.Номенклатура;
		Движение.НоменклатураНаименование		= СтрокаТЧ.Номенклатура.НаименованиеПолное;
		Движение.НоменклатураНаименованиеENG	= СтрокаТЧ.Номенклатура.НаименованиеENG;
		// { RGS MYurkevich 6/10/2015 2:37:40 PM - TP-00001070
		Движение.ЕдиницаИзмерения               = СтрокаТЧ.ЕдиницаИзмерения;
		Движение.Количество                     = СтрокаТЧ.Количество;
		// } RGS MYurkevich 6/10/2015 2:38:08 PM - TP-00001070
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота ИЛИ
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
			
			Движение.ПричинаКН = ОснованиеКредитНоты;
			Движение.Тип = ПолучитьТип("CN");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда 
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И  ПодразделениеОрганизации <> Сделка.ПодразделениеОрганизации Тогда //MYurkevich RCA-0000164
			//Исправила Федотова Л., РГ_Софт, 16.07.16, вопрос SLI-0006607
			//Для каждого Движение Из Движения.ПродажиВыручка_SB Цикл
			Для каждого Движение Из ТаблицаПродаж Цикл
				Если Движение.СуммаБезНДСRUR < 0 Тогда
					Движение.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
		ТаблицаПродаж.Свернуть("Период,Регистратор,НалоговыйПериод,ИнвойсинговыйЦентр,ДоговорКонтрагента,ПодразделениеОрганизации,
		|ВалютаДокумента,ДокументРеализации,Тип,AU,Номенклатура,ОсновноеСредство,НоменклатураНаименование,
		|НоменклатураНаименованиеENG,СтавкаНДС,Курс,WO,ПричинаКН, ЕдиницаИзмерения",
		"СуммаБезНДСRUR,СуммаНДСRUR,СуммаБезНДСUSD,СуммаНДСUSD,СуммаБезНДС,СуммаНДС, Количество");  		
	КонецЕсли;							
	
	ПродажиВыручка_SB.Загрузить(ТаблицаПродаж);
	ПродажиВыручка_SB.Записать(); 
	
КонецПроцедуры

Функция ПолучитьРубСумму(СтруктураШапкиДокумента, Сумма);
	
	СуммаРуб = 0;
	Если ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда //если валюта не рубли
		СуммаРуб = Сумма*СтруктураШапкиДокумента.КурсДокумента/?(СтруктураШапкиДокумента.КратностьДокумента = 0, 1, СтруктураШапкиДокумента.КратностьДокумента);
	Иначе
		СуммаРуб = Сумма;
	КонецЕсли;
	
	Возврат СуммаРуб;
	
КонецФункции

//Добавил - РГ-Софт - Иванов Антон - 2008.08.22
Процедура ДвиженияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаАвансов, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС
		ИЛИ НЕ ТаблицаАвансов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьШапкуДокументаДляПроведенияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаАвансов);
	ТаблицаПоНДСПокупкиУпр = СформироватьТаблицуДляПроведенияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	Для Каждого Строка Из ТаблицаПоНДСПокупкиУпр Цикл
		
		Движение = Движения.НДСПокупкиУпр.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Поставщик = СтруктураШапкиДокумента.Контрагент;
		Движение.СтавкаНДС = Строка.СтавкаНДС;
		Движение.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
		Движение.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетФактураВыданный) Тогда
			Движение.НомерСФ = СтруктураШапкиДокумента.СчетФактураВыданный.Номер;
			Движение.ДатаСФ = СтруктураШапкиДокумента.СчетФактураВыданный.Дата;
		КонецЕсли;
		
		Движение.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Движение.AU = Строка.AU;
		Движение.БухСчет = Строка.БухСчет;
		
		Движение.СуммаБезНДС =  Строка.СуммаБезНДС;
		Движение.НДС = Строка.НДС;
		Движение.СуммаБезНДСВал = Строка.СуммаБезНДСВал;
		Движение.НДСВал = Строка.НДСВал;
		
	КонецЦикла;
	
КонецПроцедуры

//Добавил - РГ-Софт - Иванов Антон - 2008.08.22
Процедура ДополнитьШапкуДокументаДляПроведенияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаАвансов)
	
	СчетФактураВыданный = ОбщегоНазначения.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
	СтруктураШапкиДокумента.Вставить("СчетФактураВыданный", СчетФактураВыданный);
	
	СуммаАвансовВал = ТаблицаАвансов.Итог("СуммаВал");
	СтруктураШапкиДокумента.Вставить("ЧистаяСуммаАвансовВал", СуммаАвансовВал / 1.18);
	СтруктураШапкиДокумента.Вставить("СуммаНДСАвансовВал", СуммаАвансовВал - СтруктураШапкиДокумента.ЧистаяСуммаАвансовВал);
	
	СуммаАвансов = ТаблицаАвансов.Итог("Сумма");
	СтруктураШапкиДокумента.Вставить("ЧистаяСуммаАвансов", СуммаАвансов / 1.18);
	СтруктураШапкиДокумента.Вставить("СуммаНДСАвансов", СуммаАвансов - СтруктураШапкиДокумента.ЧистаяСуммаАвансов);
	
КонецПроцедуры

//Добавил - РГ-Софт - Иванов Антон - 2008.08.22
Функция СформироватьТаблицуДляПроведенияПоРегиструНДСПокупкиУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("AU");
	Таблица.Колонки.Добавить("СтавкаНДС");
	Таблица.Колонки.Добавить("БухСчет");
	Таблица.Колонки.Добавить("СуммаБезНДС");
	Таблица.Колонки.Добавить("НДС");
	Таблица.Колонки.Добавить("СуммаБезНДСВал");
	Таблица.Колонки.Добавить("НДСВал");
	
	ДобавитьСтрокиВТаблицуПоНДСПокупкиУпр(ТаблицаПоТоварам, Таблица, СтруктураШапкиДокумента, ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	ДобавитьСтрокиВТаблицуПоНДСПокупкиУпр(ТаблицаПоУслугам, Таблица, СтруктураШапкиДокумента, ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
	
	Возврат Таблица;
	
КонецФункции

//Добавил - РГ-Софт - Иванов Антон - 2008.08.22
Процедура ДобавитьСтрокиВТаблицуПоНДСПокупкиУпр(ТаблицаИсточник, ТаблицаПоНДСПокупкиУпр, СтруктураШапкиДокумента, БухСчет)
	
	Если НЕ ТаблицаИсточник.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаНДС = ТаблицаИсточник.Итог("НДС");
	Если ОбщаяСуммаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаИсточник Цикл
		
		Если Строка.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоНДСПокупкиУпр.Добавить();
		КоэффициентУчастияСтроки = Строка.НДС / ОбщаяСуммаНДС;
		
		НоваяСтрока.AU = Строка.AU;
		НоваяСтрока.СтавкаНДС = Строка.СтавкаНДС;
		НоваяСтрока.БухСчет = БухСчет;
		НоваяСтрока.СуммаБезНДС = 		СтруктураШапкиДокумента.ЧистаяСуммаАвансов 		* КоэффициентУчастияСтроки;
		НоваяСтрока.НДС = 				СтруктураШапкиДокумента.СуммаНДСАвансов 		* КоэффициентУчастияСтроки;
		НоваяСтрока.СуммаБезНДСВал = 	СтруктураШапкиДокумента.ЧистаяСуммаАвансовВал 	* КоэффициентУчастияСтроки;
		НоваяСтрока.НДСВал = 			СтруктураШапкиДокумента.СуммаНДСАвансовВал 		* КоэффициентУчастияСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

// ПЕРЕНЕСТИ ВСЕ ЭТО В ПРОЦЕДУРУ ПРОВЕРКИ ПЕРЕД ПРОВЕДЕНИЕМ!!!
// Добавил Демиденко Олег, РГ-Софт
//Ф-ция проверяет заполнение необходимых полей для Кредит-Нот
Функция ПроверкаЗаполнения() Экспорт
	
	//Проверяем заполенение всех необходимых данных (взято из процедуры "ОбработкаПроведения")
	Перем ДеревоПолейЗапросаПоШапке;
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Добавила Федотова Л., РГ-Софт, 08.06.09
	СтруктураШапкиДокумента.Дата = ДатаПроведения;
	
	СтруктураПолейУчетнойПолитикиБУ = Новый Структура("РазрешитьУчетУслугБезПлановыхЦен");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиБУ);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("МоментОпределенияНалоговойБазыНДС,СложныйУчетНДС,НачислятьНДСПоОтгрузке");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"  , "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  ,        "Количество");
	СтруктураПолей.Вставить("Сумма"       ,        "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   ,        "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,        "СуммаНДС");
	СтруктураПолей.Вставить("НомерГТД",            "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	//добавил Трефиленков Дмитрий, РГ-Софт	
	//Убрал Розов
	СтруктураПолей.Вставить("AU"				   , "КостЦентр");
	СтруктураПолей.Вставить("WO"				   , "WO");
	//конец добавления
	
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	//добавил Трефиленков Дмитрий, РГ-Софт	
	//Убрал Розов
	СтруктураПолей.Вставить("AU"			, "КостЦентр");
	СтруктураПолей.Вставить("WO"			, "WO");
	СтруктураПолей.Вставить("НоменклатураНаименованиеENG"			, "Номенклатура.НаименованиеENG");
	//конец добавления
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	// Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Процедура ДвиженияПоРегиструРасчетыСПокупателями(ТаблицаПок)
	
	ТаблицаДвижений= Движения.ВзаиморасчетыСПокупателями.Выгрузить();
	
	// { RGS LFedotova 13.06.2018 10:25:22 - вопрос SLI-0007580
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
		Движения.ВзаиморасчетыСПокупателями.мПериод          = НалоговыйПериод;
	Иначе
		Движения.ВзаиморасчетыСПокупателями.мПериод          = Дата;
	КонецЕсли;		
	// } RGS LFedotova 13.06.2018 10:25:40 - вопрос SLI-0007580
	
	ТаблицаДвижений.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПок, ТаблицаДвижений);
	
	Движения.ВзаиморасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ВзаиморасчетыСПокупателями.ВыполнитьПриход();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Основание = Неопределено, ИмяТабЧастиИсточника = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
		ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
		ФормаПоступления.РежимВыбора = Истина;
		ФормаПоступления.Отбор.Организация.Значение = Организация;
		ФормаПоступления.Отбор.Организация.Использование = Истина;
		Поступление = ФормаПоступления.ОткрытьМодально();
	Иначе
		Поступление = Основание;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	Если ТабЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		
		#Если Клиент Тогда
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли; 
		#КонецЕсли
		
		ТабЧасть.Очистить();
		
	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		СтрокаТЧ = ТабЧасть.Добавить();
		
		СтрокаТЧ.Номенклатура        = ВыборкаТоваров.Номенклатура;
		СтрокаТЧ.Количество          = ВыборкаТоваров.Количество;
		
		Если ТабЧастьИсточник = "Товары" Тогда
			
			СтрокаТЧ.ЕдиницаИзмерения    = ВыборкаТоваров.ЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент         = ВыборкаТоваров.Коэффициент;
			СтрокаТЧ.КоличествоМест      = ВыборкаТоваров.КоличествоМест;
			СтрокаТЧ.СтавкаНДС           = ВыборкаТоваров.СтавкаНДС;
			СтрокаТЧ.НомерГТД            = ВыборкаТоваров.НомерГТД;
			СтрокаТЧ.СтранаПроисхождения = ВыборкаТоваров.СтранаПроисхождения;
			
		КонецЕсли;
		
		Если ТабЧастьИсточник = "Оборудование" Тогда
			
			СтрокаТЧ.ЕдиницаИзмерения = ВыборкаТоваров.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент      = 1;
			СтрокаТЧ.КоличествоМест   = ВыборкаТоваров.Количество;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

//добавил Трефиленков Дмитрий, РГ-Софт
Процедура ЗаполнитьПоРеализации(Основание) Экспорт
	
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
		ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
	КонецЕсли;
	
	Документы.РеализацияТоваровУслуг.СкопироватьТовары(Основание, ЭтотОбъект);
	Документы.РеализацияТоваровУслуг.СкопироватьУслуги(Основание, ЭтотОбъект);
	Документы.РеализацияТоваровУслуг.СкопироватьПредоплату(Основание, ЭтотОбъект);
	
КонецПроцедуры

Процедура ИзменитьЗнакТаблиц(ТаблицаПоТоварам, ТаблицаПоУслугам)
	
	Для Каждого СтрокаТЧ ИЗ ТаблицаПоТоварам Цикл
		СтрокаТЧ.Сумма			 	= - СтрокаТЧ.Сумма;
		СтрокаТЧ.СуммаВал			= - СтрокаТЧ.СуммаВал;
		СтрокаТЧ.СуммаБезНДС 		= - СтрокаТЧ.СуммаБезНДС;
		СтрокаТЧ.СуммаБезНДСВал 	= - СтрокаТЧ.СуммаБезНДСВал;
		СтрокаТЧ.НДС			 	= - СтрокаТЧ.НДС;
		СтрокаТЧ.НДСВал			 	= - СтрокаТЧ.НДСВал;
		СтрокаТЧ.Количество		 	= - СтрокаТЧ.Количество;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ТаблицаПоУслугам Цикл
		СтрокаТЧ.Сумма			 	= - СтрокаТЧ.Сумма;
		СтрокаТЧ.СуммаВал			= - СтрокаТЧ.СуммаВал;
		СтрокаТЧ.СуммаБезНДС 		= - СтрокаТЧ.СуммаБезНДС;
		СтрокаТЧ.СуммаБезНДСВал 	= - СтрокаТЧ.СуммаБезНДСВал;
		СтрокаТЧ.НДС			 	= - СтрокаТЧ.НДС;
		СтрокаТЧ.НДСВал			 	= - СтрокаТЧ.НДСВал;
		СтрокаТЧ.Количество		 	= - СтрокаТЧ.Количество;
	КонецЦикла;
	
КонецПроцедуры
//конец добавления

Процедура ПроверитьСовпадениеСуммТикетаИРеализации(РезультатЗапросаПоТЧ, Отказ, Заголовок)
	
	//-> Добавила Федотова Людмила 24.04.09 с одобрения Дмитрия Трефиленкова
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
		Возврат;
	КонецЕсли; 
	//<-	
	
	//Проверку написал Трефиленков, Иванов Антон выделил в отдельную процедуру и засунул в ОбработкуПроведения
	Если Дата >= '20090101' Тогда
		//-> Добавила Федотова Людмила 04.02.09
		НетНиОдногоТикетаВДокументе = Истина;
		Для каждого Строка Из Товары Цикл
			Если НЕ Строка.Ticket.Пустая() Тогда
				НетНиОдногоТикетаВДокументе = Ложь;
				Прервать;
			КонецЕсли;  
		КонецЦикла; 
		Если НетНиОдногоТикетаВДокументе Тогда
			Для каждого Строка Из Услуги Цикл
				Если НЕ Строка.Ticket.Пустая() Тогда
					НетНиОдногоТикетаВДокументе = Ложь;
					Прервать;
				КонецЕсли;  
			КонецЦикла; 
		КонецЕсли; 
		
		Если НЕ НетНиОдногоТикетаВДокументе Тогда  
			
			ВыборкаДетальныеЗаписи = РезультатЗапросаПоТЧ.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.TicketВалюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда 
					Разница = ?(ВыборкаДетальныеЗаписи.ОстатокДоПроведения - ВыборкаДетальныеЗаписи.СуммаРуб > 0, ВыборкаДетальныеЗаписи.ОстатокДоПроведения - ВыборкаДетальныеЗаписи.СуммаРуб, ВыборкаДетальныеЗаписи.СуммаРуб - ВыборкаДетальныеЗаписи.ОстатокДоПроведения);
					ДопустимаяРазница = 350;
					Если Разница > ДопустимаяРазница И ВыборкаДетальныеЗаписи.TicketСтатус = Перечисления.TicketsStatuses.Oracle Тогда 
						Разница = ?(ВыборкаДетальныеЗаписи.ОстатокДоПроведения - (ВыборкаДетальныеЗаписи.СуммаРуб + ВыборкаДетальныеЗаписи.СуммаНДСРуб) > 0,
									ВыборкаДетальныеЗаписи.ОстатокДоПроведения - (ВыборкаДетальныеЗаписи.СуммаРуб + ВыборкаДетальныеЗаписи.СуммаНДСРуб), 
									(ВыборкаДетальныеЗаписи.СуммаРуб + ВыборкаДетальныеЗаписи.СуммаНДСРуб) - ВыборкаДетальныеЗаписи.ОстатокДоПроведения);
					КонецЕсли;
				Иначе 	                                                     
					Разница = ?(ВыборкаДетальныеЗаписи.ОстатокДоПроведения - ВыборкаДетальныеЗаписи.СуммаUSD > 0, ВыборкаДетальныеЗаписи.ОстатокДоПроведения - ВыборкаДетальныеЗаписи.СуммаUSD, ВыборкаДетальныеЗаписи.СуммаUSD - ВыборкаДетальныеЗаписи.ОстатокДоПроведения);
					ДопустимаяРазница = 10;
					Если Разница > ДопустимаяРазница И ВыборкаДетальныеЗаписи.TicketСтатус = Перечисления.TicketsStatuses.Oracle Тогда 
						Разница = ?(ВыборкаДетальныеЗаписи.ОстатокДоПроведения - (ВыборкаДетальныеЗаписи.СуммаUSD + ВыборкаДетальныеЗаписи.СуммаНДСUSD) > 0,
									ВыборкаДетальныеЗаписи.ОстатокДоПроведения - (ВыборкаДетальныеЗаписи.СуммаUSD + ВыборкаДетальныеЗаписи.СуммаНДСUSD), 
									(ВыборкаДетальныеЗаписи.СуммаUSD + ВыборкаДетальныеЗаписи.СуммаНДСUSD) - ВыборкаДетальныеЗаписи.ОстатокДоПроведения);
					КонецЕсли;
				КонецЕсли;
				Если Разница > ДопустимаяРазница Тогда
					ОбщегоНазначения.СообщитьОбОшибке("По тикету " + ВыборкаДетальныеЗаписи.Ticket + " списывается сумма, отличная от суммы тикета, либо тикет не проведен", Отказ, Заголовок);
					Возврат;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьРезультатЗапросаПоТЧ()
	Запрос = Новый Запрос;
	// { RGS OKozaeva 12/15/2016 12:37:26 PM - RCA-0000440 для документов с валютой <> USD и RUB
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслугТовары.Сумма - ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ticket.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				И НЕ РеализацияТоваровУслугТовары.Ticket.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Ticket.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Ticket.Валюта
	|	КОНЕЦ КАК TicketВалюта,
	|	РеализацияТоваровУслугТовары.Ticket.Сумма,
	|	РеализацияТоваровУслугТовары.Ticket,
	|	РеализацияТоваровУслугТовары.Ссылка.КурсВзаиморасчетов,
	|	РеализацияТоваровУслугТовары.Ссылка.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Ticket.Статус КАК TicketСтатус
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслугУслуги.Сумма - ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ticket.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				И НЕ РеализацияТоваровУслугУслуги.Ticket.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугУслуги.Ticket.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Ticket.Валюта
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Ticket.Сумма,
	|	РеализацияТоваровУслугУслуги.Ticket,
	|	РеализацияТоваровУслугУслуги.Ссылка.КурсВзаиморасчетов,
	|	РеализацияТоваровУслугУслуги.Ссылка.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Ticket.Статус
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТикетыОбороты.СуммаРасход,
	|	ТикетыОбороты.Тикет
	|ПОМЕСТИТЬ ДвижениеРеализации
	|ИЗ
	|	РегистрНакопления.Тикеты.Обороты(&ДатаПроведения, &ДатаПроведения, Регистратор, ) КАК ТикетыОбороты
	|ГДЕ
	|	ТикетыОбороты.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ВалютаДокумента,
	|	ТЧ.TicketВалюта,
	|	ТЧ.TicketСумма,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТЧ.ВалютаДокумента = &RUB
	|				ТОГДА ТЧ.Сумма * ТЧ.КурсВзаиморасчетов / ТЧ.КратностьВзаиморасчетов
	|			ИНАЧЕ ТЧ.Сумма
	|		КОНЕЦ) КАК СуммаРуб,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТЧ.ВалютаДокумента = &RUB
	|				ТОГДА ТЧ.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТикетыОстатки.Тикет.ДоговорКонтрагента.Курс > 0
	|						ТОГДА ТЧ.Сумма / ТикетыОстатки.Тикет.ДоговорКонтрагента.Курс
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КурсВзаиморасчетов <> 1
	|									И ТЧ.КурсВзаиморасчетов <> 0
	|								ТОГДА ТЧ.Сумма / ТЧ.КурсВзаиморасчетов * ТЧ.КратностьВзаиморасчетов
	|							ИНАЧЕ ТЧ.Сумма / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаUSD,
	|	ТЧ.Ticket,
	|	ЕСТЬNULL(ТикетыОстатки.СуммаОстаток, 0) + ЕСТЬNULL(ДвижениеРеализации.СуммаРасход, 0) КАК ОстатокДоПроведения,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТЧ.ВалютаДокумента = &RUB
	|				ТОГДА ТЧ.СуммаНДС
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТикетыОстатки.Тикет.ДоговорКонтрагента.Курс > 0
	|						ТОГДА ТЧ.СуммаНДС / ТикетыОстатки.Тикет.ДоговорКонтрагента.Курс
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КурсВзаиморасчетов <> 1
	|									И ТЧ.КурсВзаиморасчетов <> 0
	|								ТОГДА ТЧ.СуммаНДС / ТЧ.КурсВзаиморасчетов * ТЧ.КратностьВзаиморасчетов
	|							ИНАЧЕ ТЧ.СуммаНДС / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНДСUSD,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТЧ.ВалютаДокумента = &RUB
	|				ТОГДА ТЧ.СуммаНДС * ТЧ.КурсВзаиморасчетов / ТЧ.КратностьВзаиморасчетов
	|			ИНАЧЕ ТЧ.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДСРуб,
	|	ТЧ.TicketСтатус
	|ИЗ
	|	ТЧ КАК ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Тикеты.Остатки КАК ТикетыОстатки
	|		ПО ТЧ.Ticket = ТикетыОстатки.Тикет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвижениеРеализации КАК ДвижениеРеализации
	|		ПО ТЧ.Ticket = ДвижениеРеализации.Тикет,
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ДатаПроведения,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ТЧ.ВалютаДокумента
	|				ИЗ
	|					ТЧ КАК ТЧ)) КАК КурсыВалютСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧ.Ticket,
	|	ТЧ.ВалютаДокумента,
	|	ТЧ.TicketВалюта,
	|	ТЧ.TicketСумма,
	|	ЕСТЬNULL(ТикетыОстатки.СуммаОстаток, 0) + ЕСТЬNULL(ДвижениеРеализации.СуммаРасход, 0),
	|	ТЧ.TicketСтатус";
	
	Запрос.УстановитьПараметр("RUB", Справочники.Валюты.НайтиПоНаименованию("RUB"));
	// } RGS OKozaeva 12/15/2016 12:37:46 PM - RCA-0000440
	//Изменила Федотова Л., РГ-Софт, 16.12.14, вопрос SLI-0005036
	
	//Запрос.УстановитьПараметр("ДатаПроведения", ДатаПроведения);
	Запрос.УстановитьПараметр("ДатаПроведения", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить();
КонецФункции

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		СчетНаОплату = Основание.Ссылка;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
			ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Документы.РеализацияТоваровУслуг.СкопироватьТовары(Основание, ЭтотОбъект);
		Документы.РеализацияТоваровУслуг.СкопироватьУслуги(Основание, ЭтотОбъект);
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.КостЦентр = Основание.КостЦентр;
			СтрокаТЧ.ProductLine = ?(СтрокаТЧ.КостЦентр.Пустая(), Справочники.Сегменты.ПустаяСсылка(),СтрокаТЧ.КостЦентр.Сегмент.Родитель);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.КостЦентр = Основание.КостЦентр;
			СтрокаТЧ.ProductLine = ?(СтрокаТЧ.КостЦентр.Пустая(), Справочники.Сегменты.ПустаяСсылка(),СтрокаТЧ.КостЦентр.Сегмент.Родитель);
		КонецЦикла;
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
			ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Документы.РеализацияТоваровУслуг.СкопироватьТовары(Основание, ЭтотОбъект);
		Документы.РеализацияТоваровУслуг.СкопироватьУслуги(Основание, ЭтотОбъект);
		
		//добавила Федотова Л., РГ-Софт, 15.01.10 ->	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
			ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Документы.РеализацияТоваровУслуг.СкопироватьОС(Основание, ЭтотОбъект);
		//<-
		
		//-> RG-Soft VIvanov 06/08/12
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПринципалуОПродажах") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
			ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Документы.РеализацияТоваровУслуг.СкопироватьВознаграждение(Основание, ЭтотОбъект);
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно;
		Сделка = Основание;
		//<-	
		// { RGS MYurkevich 16.06.2016 11:27:34 - RCA-0000164 
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетАгентаПоРасходам") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", Основание.Метаданные()) Тогда
			ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Документы.РеализацияТоваровУслуг.СкопироватьВознаграждениеОтчетАгента(Основание, ЭтотОбъект);
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно;
		Сделка = Основание;
		//<-	
		// } RGS MYurkevich 16.06.2016 11:27:35 - RCA-0000164	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Если Основание.Свойство("Ticket") Тогда
			
			Ticket = Основание.Ticket;
			ВидОперации = Основание.ВидОперации;
			СуммаТикета = Основание.СуммаТикета;
			
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ 
				или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда  
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда 
					Сделка = Основание.Сделка;
					Если Не ЗначениеЗаполнено(Сделка) Тогда
						Возврат;
					КонецЕсли;
					ЗаполнитьПоРеализации(Сделка);
				КонецЕсли;
				
				Документы.РеализацияТоваровУслуг.ИзменитьЗнак(?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота, 1,-1), ЭтотОбъект);
				Для Каждого СтрокаТЧ ИЗ Товары Цикл
					СтрокаТЧ.Ticket = Ticket;		
				КонецЦикла;
				Для Каждого СтрокаТЧ ИЗ Услуги Цикл
					СтрокаТЧ.Ticket = Ticket;		
				КонецЦикла;
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда 
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			УчитыватьНДС = Истина;
			Дата = Ticket.Дата;
			
			Если Основание.ТипРеализации = "Услуги" Тогда
				СтрокаТЧ = Услуги.Добавить();
				СтрокаТЧ.Ticket = Ticket;
				СтрокаТЧ.TicketNumber = Ticket.TicketNumber;
				СтрокаТЧ.ProductLine = Ticket.ProductLine;
				СтрокаТЧ.Oilfield = Ticket.Oilfield;
				СтрокаТЧ.Well = Ticket.Well;
				СтрокаТЧ.КостЦентр = Ticket.AccountingUnit;
				СтрокаТЧ.Количество = 1;
				СтрокаТЧ.Цена = СуммаТикета;
				СтрокаТЧ.Сумма = СуммаТикета;
				Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
				КонецЕсли;
				СтрокаТЧ.СтавкаНДС = Ticket.СтавкаНДС;
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
				НеЗаполнятьГрузоотправителя = Истина;
			Иначе
				СтрокаТЧ = Товары.Добавить();
				СтрокаТЧ.Ticket = Ticket;
				СтрокаТЧ.TicketNumber = Ticket.TicketNumber;
				СтрокаТЧ.ProductLine = Ticket.ProductLine;
				СтрокаТЧ.Oilfield = Ticket.Oilfield;
				СтрокаТЧ.Well = Ticket.Well;
				СтрокаТЧ.КостЦентр = Ticket.AccountingUnit;
				СтрокаТЧ.Количество = 1;
				СтрокаТЧ.Цена = СуммаТикета;
				СтрокаТЧ.Сумма = СуммаТикета;
				Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
				КонецЕсли;
				СтрокаТЧ.СтавкаНДС = Ticket.СтавкаНДС;
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
			КонецЕсли;
			ПодразделениеОрганизации = Ticket.ПодразделениеОрганизации;
			ДоговорКонтрагента = Ticket.ДоговорКонтрагента;
			Контрагент = Ticket.Контрагент;
			//закомментировала Федотова Л., РГ-Софт, 14.01.13, вопрос SLI-0003157
			//ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			//Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота
			//	ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно) Тогда
			
			ВалютаДокумента = Основание.ВалютаДокумента;
			КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
			КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
			
			//добавила условие Федотова Л., РГ-Софт, 24.01.13, вопрос SLI-0003230
			Если Основание.ВалютаДокумента = мВалютаРегламентированногоУчета
				И Основание.Ticket.Валюта <> мВалютаРегламентированногоУчета Тогда
				
				Для каждого СтрокаТЧ Из Услуги Цикл
					СтрокаТЧ.Цена = СтрокаТЧ.Цена * КурсВзаиморасчетов;				
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма * КурсВзаиморасчетов;				
					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС * КурсВзаиморасчетов;				
				КонецЦикла; 
				Для каждого СтрокаТЧ Из Товары Цикл
					СтрокаТЧ.Цена = СтрокаТЧ.Цена * КурсВзаиморасчетов;				
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма * КурсВзаиморасчетов;				
					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС * КурсВзаиморасчетов;				
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Попытка
			Номер = Ticket.TicketNumber;
		Исключение
		КонецПопытки;
		
		//КонецЕсли;
		
	КонецЕсли;
	
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Tickets") Тогда
	//	
	//	//Если Основание.Тип = "Credit note" Тогда
	//	Если Основание.Тип = "Credit note" ИЛИ Основание.Тип = Перечисления.ТипыТикетов.КредитНота Тогда
	//		Список = Новый СписокЗначений;
	//		Список.Добавить("Кредит-нота (отрицательный с/Ф)");
	//		//Список.Добавить("Внутренняя кредит-нота");
	//		Значение = Список.ВыбратьЭлемент("Выберите тип кредит-ноты:", Список.Добавить("Кредит-нота (сторно)"));
	//		Если Значение.Значение = "Кредит-нота (отрицательный с/Ф)" Тогда
	//			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ;
	//			Список = Новый СписокЗначений;
	//			Список.Добавить("Товары");
	//			Значение = Список.ВыбратьЭлемент("Выберите тип реализации:", Список.Добавить("Услуги"));
	//			Если Значение = Неопределено Тогда 
	//				Возврат;
	//			КонецЕсли;
	//		ИначеЕсли Значение.Значение = "Внутренняя кредит-нота" ИЛИ Значение.Значение = "Кредит-нота (сторно)"  Тогда
	//			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[?(Значение.Значение = "Внутренняя кредит-нота","ВнутренняяКредитНота","КредитНотаСторно")];
	//			Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(Основание.ДоговорКонтрагента) Тогда
	//				СтандартнаяОбработка = Ложь;
	//				Форма = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	//				Форма.Отбор.ДоговорКонтрагента.Значение =  Основание.ДоговорКонтрагента;
	//				Форма.Отбор.ДоговорКонтрагента.Использование =  Истина;
	//				Форма.Отбор.ВидОперации.Значение =  Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	//				Форма.Отбор.ВидОперации.Использование =  Истина;
	//				Сделка = Форма.ОткрытьМодально();
	//			ИначеЕсли Не ОбщегоНазначения.ЗначениеНеЗаполнено(Основание.Контрагент) Тогда
	//				СтандартнаяОбработка = Ложь;
	//				Форма = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	//				Форма.Отбор.Контрагент.Значение =  Основание.Контрагент;
	//				Форма.Отбор.Контрагент.Использование =  Истина;
	//				Форма.Отбор.ВидОперации.Значение =  Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	//				Форма.Отбор.ВидОперации.Использование =  Истина;
	//				Сделка = Форма.ОткрытьМодально();
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(Сделка) Тогда
	//				ЗаполнитьПоРеализации(Сделка);
	//			Иначе
	//				Возврат;
	//			КонецЕсли; 
	//			ИзменитьЗнак(?(Значение.Значение = "Внутренняя кредит-нота", 1,-1));
	//			Для Каждого СтрокаТЧ ИЗ Товары Цикл
	//				СтрокаТЧ.Ticket = Основание.Ссылка;		
	//			КонецЦикла;
	//			Для Каждого СтрокаТЧ ИЗ Услуги Цикл
	//				СтрокаТЧ.Ticket = Основание.Ссылка;		
	//			КонецЦикла;
	//			Возврат;
	//		Иначе
	//			Возврат;
	//		КонецЕсли;
	//		СуммаТикета = SalesBook.ПолучитьОстатокПоТикету(,Основание.Ссылка);
	//	Иначе
	//		СуммаТикета = SalesBook.ПолучитьОстатокПоТикету(,Основание.Ссылка);
	//		Если СуммаТикета <= 0 Тогда
	//			#Если Клиент Тогда				
	//				Предупреждение("Остаток по тикету составляет " + СуммаТикета);
	//			#КонецЕсли
	//		КонецЕсли;
	//		Список = Новый СписокЗначений;
	//		Список.Добавить("Товары");
	//		Значение = Список.ВыбратьЭлемент("Выберите тип реализации:", Список.Добавить("Услуги"));
	//		Если Значение = Неопределено Тогда 
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;  
	//	УчитыватьНДС = Истина;
	//	Дата = Основание.Дата;
	//	Если Значение.Значение = "Услуги" Тогда
	//		СтрокаТЧ = Услуги.Добавить();
	//		СтрокаТЧ.Ticket = Основание;
	//		СтрокаТЧ.TicketNumber = Основание.TicketNumber;
	//		СтрокаТЧ.ProductLine = Основание.ProductLine;
	//		СтрокаТЧ.Oilfield = Основание.Oilfield;
	//		СтрокаТЧ.Well = Основание.Well;
	//		СтрокаТЧ.КостЦентр = Основание.AccountingUnit;
	//		СтрокаТЧ.Количество = 1;
	//		СтрокаТЧ.Цена = СуммаТикета;
	//		СтрокаТЧ.Сумма = СуммаТикета;
	//		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
	//			СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
	//		КонецЕсли;
	//		СтрокаТЧ.СтавкаНДС = Основание.СтавкаНДС;
	//		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	//		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
	//		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	//		Контрагент = Основание.Контрагент;
	//		ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//		НеЗаполнятьГрузоотправителя = Истина;
	//	Иначе
	//		СтрокаТЧ = Товары.Добавить();
	//		СтрокаТЧ.Ticket = Основание;
	//		СтрокаТЧ.TicketNumber = Основание.TicketNumber;
	//		СтрокаТЧ.ProductLine = Основание.ProductLine;
	//		СтрокаТЧ.Oilfield = Основание.Oilfield;
	//		СтрокаТЧ.Well = Основание.Well;
	//		СтрокаТЧ.КостЦентр = Основание.AccountingUnit;
	//		СтрокаТЧ.Количество = 1;
	//		СтрокаТЧ.Цена = СуммаТикета;
	//		СтрокаТЧ.Сумма = СуммаТикета;
	//		Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
	//			СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
	//		КонецЕсли;
	//		СтрокаТЧ.СтавкаНДС = Основание.СтавкаНДС;
	//		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	//		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
	//		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	//		Контрагент = Основание.Контрагент;
	//		ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//	КонецЕсли;
	//	//РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	//	Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота
	//		//ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ
	//		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно) Тогда
	//		Если Основание.ДоговорКонтрагента.Курс > 0 Тогда
	//			КурсВзаиморасчетов = Основание.ДоговорКонтрагента.Курс;
	//			КратностьВзаиморасчетов = 1;
	//		Иначе
	//			СтруктураНовогоКурсаВалюты  = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	//			КурсВзаиморасчетов      = СтруктураНовогоКурсаВалюты.Курс;
	//			КратностьВзаиморасчетов = СтруктураНовогоКурсаВалюты.Кратность;
	//		КонецЕсли;
	//		
	//		// Изменил РГ-Софт - Иванов Антон - 2010-01-25
	//		// Элемент списка значений - мутабельное значение - его нельзя проверять на заполненность
	//		Если Основание.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	//			Значение = Неопределено;
	//		Иначе	                                         
	//			ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643");
	//			ВалютаДоллар = Справочники.Валюты.НайтиПоКоду("840");
	//			Список = Новый СписокЗначений;	
	//			ЭлементСпискаРубль = Список.Добавить(ВалютаРубль);
	//			ЭлементСпискаДоллар = Список.Добавить(ВалютаДоллар);
	//			Значение = Список.ВыбратьЭлемент("Выберите валюту документа:", ЭлементСпискаДоллар);
	//		КонецЕсли; 
	//		//Если Значение.Значение = Справочники.Валюты.НайтиПоКоду("643") Тогда  //исправила Федотова Л., РГ-Софт, 13.11.09
	//		// Если ЗначениеЗаполнено(Значение) Тогда
	//		Если Значение <> Неопределено Тогда
	//			ВалютаДокумента = Значение.Значение;
	//			КратностьВзаиморасчетов = 1;
	//			//Добавила Федотова Людмила, РГ-Софт 24.04.09 ->
	//			КурсДокумента = КурсВзаиморасчетов; 
	//			#Если Клиент Тогда				
	//				Если ВвестиЧисло(КурсДокумента,"Измените, если требуется, курс",10,4) = Истина Тогда
	//					КурсВзаиморасчетов = КурсДокумента;
	//				КонецЕсли;
	//			#КонецЕсли
	//			//<-
	//			Если НЕ ВалютаДокумента = Основание.Валюта Тогда //добавила Федотова Л., РГ-Софт, 26.01.10
	//				Для каждого СтрокаТЧ Из Услуги Цикл
	//					СтрокаТЧ.Цена = СтрокаТЧ.Цена * КурсВзаиморасчетов;				
	//					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма * КурсВзаиморасчетов;				
	//					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС * КурсВзаиморасчетов;				
	//				КонецЦикла; 
	//				Для каждого СтрокаТЧ Из Товары Цикл
	//					СтрокаТЧ.Цена = СтрокаТЧ.Цена * КурсВзаиморасчетов;				
	//					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма * КурсВзаиморасчетов;				
	//					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС * КурсВзаиморасчетов;				
	//				КонецЦикла; 
	//			КонецЕсли; 
	//		КонецЕсли; 
	//		РассчитатьСуммыРуб();
	//	Иначе
	//		КурсВзаиморасчетов      = Основание.Курс;
	//		КратностьВзаиморасчетов = Основание.Кратность;
	//	КонецЕсли;
	//	Попытка
	//		Номер = Основание.TicketNumber;
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	
	РассчитатьСуммыРуб();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// { RGS PBahushevich 8/25/2016 10:01:55 AM - для обенов
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// } RGS PBahushevich 8/25/2016 10:01:58 AM - для обенов
	//добавил Трефиленков Дмитрий, РГ-Софт, 11.09.2011
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) И Не ПодразделениеОрганизации.ЭтоГруппа Тогда
		РГСофтКлиентСервер.СообщитьОбОшибке("В поле Налоговая регистрация следует указывать группу", Отказ);
		Возврат;
	КонецЕсли;
	//конец добавления
	
	// ++ КДС 20.07.2015 Контроль проведения
	// контроль проведения должен быть включен как для организации, так и для контрагента
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	КонтрольПроведенияСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	// -- КДС 20.07.2015 Контроль проведения
	
	Если Не ЗначениеЗаполнено(ДатаСверки) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗакрытиеПериодов.ДатаЗакрытия,
		|	ЗакрытиеПериодов.ПериодДанных КАК Период
		|ИЗ
		|	РегистрСведений.ЗакрытиеПериодов КАК ЗакрытиеПериодов
		|ГДЕ
		|	ЗакрытиеПериодов.ПериодДанных >= &Период
		|	И ЗакрытиеПериодов.Модуль = ЗНАЧЕНИЕ(Перечисление.МодулиРазработки.Salesbook)
		|	И ЗакрытиеПериодов.ДатаЗакрытия >= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период");
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если НачалоМесяца(Дата) = Выборка.Период Тогда
				ТекДатаСверки = Дата;
			Иначе
				ТекДатаСверки = Выборка.Период;
			КонецЕсли;
		Иначе
			ТекДатаСверки = ТекущаяДата();	
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначение(ДатаСверки, ТекДатаСверки);
		
	КонецЕсли; 
	
	//Добавила Федотова Л., РГ-Софт, 03.08.16, вопрос SLI-0006667
	РГСофт.РассчитатьTriggerDate(ЭтотОбъект);
	//
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	ТекСуммаДокумента = ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	ОбщегоНазначения.УстановитьЗначение(СуммаДокумента, ТекСуммаДокумента);
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ИнвойсинговыйЦентр) Тогда
		ТекИнвойсинговыйЦентр = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнойИнвойсинговыйЦентр");		
		ОбщегоНазначения.УстановитьЗначение(ИнвойсинговыйЦентр, ТекИнвойсинговыйЦентр);
	КонецЕсли;
	
	
	// В этом случае почистим в табличных частях поля СпособСписанияОстаткаТоваров, НомерГТД и СтранаПроисхождения.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения) Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	//добавила Федотова Л. П., РГ-Софт, 22.03.12
	Если Товары.Итог("СуммаБезНДСРуб") + Товары.Итог("СуммаНДСРуб") 
		+ Услуги.Итог("СуммаБезНДСРуб") + Услуги.Итог("СуммаНДСРуб") = 0 И СуммаДокумента <> 0 Тогда
		
		РассчитатьСуммыРуб();	
	КонецЕсли;
	
	// { RGS LFedotova 21.09.2016 23:01:28 - вопрос RCA-0000280
	ЕстьНДС = Ложь;
	// } RGS LFedotova 21.09.2016 23:02:18 - вопрос RCA-0000280
	
	// { RGS MYurkevich 09.02.2015 16:26:21 - TP-00000694
	Для Каждого Строка Из ЭтотОбъект.Товары Цикл
		Если Строка.Номенклатура.Catalog = Справочники.Catalog.ПустаяСсылка() Тогда
			Сообщить("В ТЧ Товары в строке №" + Строка.НомерСтроки + " не заполнен Catalog в номенклатуре " + Строка.Номенклатура);
		КонецЕсли;
		// { RGS LFedotova 21.09.2016 23:04:11 - вопрос RCA-0000280
		Если НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЕстьНДС = Истина;
		КонецЕсли;
		// } RGS LFedotova 21.09.2016 23:04:17 - вопрос RCA-0000280
	КонецЦикла;	
	// } RGS MYurkevich 09.02.2015 16:26:23 - TP-00000694
	
	// { RGS LFedotova 21.09.2016 23:01:28 - вопрос RCA-0000280
	Для Каждого Строка Из ЭтотОбъект.Услуги Цикл
		Если НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЕстьНДС = Истина;
		КонецЕсли;
	КонецЦикла;	
	
	// { RGS LFedotova 31.10.2017 12:37:39 - вопрос SLI-0007416
	//Если ЕстьНДС И Товары.Итог("СуммаНДСРуб") + Услуги.Итог("СуммаНДСРуб") = 0 Тогда
	//	РассчитатьСуммыРуб();	
	//КонецЕсли;
	РассчитатьСуммыРуб();
	// } RGS LFedotova 31.10.2017 12:37:45 - вопрос SLI-0007416 
	
	// } RGS LFedotova 21.09.2016 23:02:18 - вопрос RCA-0000280
	
	ПроверкаРеквизитовКС(Отказ, РежимЗаписи); // SLI-0006169 - Notification KS - Добавила Петроченко НН
		
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПроверкаРеквизитовКС(Отказ, РежимЗаписи) // { SLI-0006169 - Notification KS - Добавила Петроченко НН
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение 
		// { RGS LFedotova 23.10.2017 14:22:55 - вопрос SLI-0007402
		ИЛИ ЭтотОбъект.ДополнительныеСвойства.Свойство("ПровестиДокументЛюбойЦеной")
		// } RGS LFedotova 23.10.2017 14:23:03 - вопрос SLI-0007402
		Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДатаОтправкиКС) Тогда 
		
		Если Дата >= Дата('20160101') И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Дата отправки КС' не заполнена!",
			ЭтотОбъект, "ДатаОтправкиКС", , Отказ);
		КонецЕсли;
		
	Иначе 
		
		//При записи реализации поле статуса будет обязательным, 
		//если дата отправки КС дошла до 2го уровня и нет даты возврата
		// { RGS LFedotova 23.07.2018 12:07:17 - вопрос SLI-0007626
		//Если Не ЗначениеЗаполнено(СтатусВозвратаКС) Тогда 
		Если ЭтоДокументБиллинга И Не ЗначениеЗаполнено(СтатусВозвратаКС) Тогда 
		// } RGS LFedotova 23.07.2018 12:07:24 - вопрос SLI-0007626 
			// { RGS LFedotova 23.10.2017 22:11:50 - вопросы SLI-0007402, S-B-0000138
			//ДнейВоВторомУровне = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.УровниУведомленийКС.НайтиПоКоду("Level 2"), "ДнейСДатыОтсчета");
			//
			//ДатаНачалаУведомлений = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
			//Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"), НачалоДня(ДатаОтправкиКС), ДнейВоВторомУровне);
			//
			//Если НачалоДня(ДатаНачалаУведомлений) <= НачалоДня(ТекущаяДата()) Тогда 
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"'Статус возврата КС' не заполнен!",
			//	ЭтотОбъект, "СтатусВозвратаКС", , Отказ);
			//КонецЕсли;
			
			СтатусВозвратаКС = Справочники.СтатусыВозвратаКС.НайтиПоНаименованию("Just sent",Истина);
			
			// } RGS LFedotova 23.10.2017 22:12:57 - вопросы SLI-0007402, S-B-0000138
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // } SLI-0006169 - Notification KS - Добавила Петроченко НН

//Добавил РГ-Софт - Пронин Иван - 2009-06-27
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// { RGS LFedotova 28.11.2016 21:03:13 - вопрос SLI-0006955
	Если Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("LawsonID", "OC0385R1") Тогда
		Если СокрЛП(ДоговорКонтрагента.Наименование) = "№4 AL-EPU-SERVICE-01/01/2007 от 01.01.2007" Тогда
			Если НЕ (СтрДлина(СокрЛП(Комментарий)) = 8 И (Лев(СокрЛП(Комментарий),1) = "T" ИЛИ Лев(СокрЛП(Комментарий),1) = "Т")) Тогда
				Сообщить("Необходимо заполнить в поле ""Комментарий"" Т-транзакцию (первый символ ""T"", длина номера - ""8"")!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;  
	// } RGS LFedotova 28.11.2016 21:04:10 - вопрос SLI-0006955 
	
	// { RGS LFedotova 06.12.2016 17:56:59 - вопрос SLI-0006955
	Если Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("LawsonID", "OC0355RU") И СокрЛП(ДоговорКонтрагента.Наименование) = "010705/SLI-TCS от 01.07.05" 
		ИЛИ Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("LawsonID", "OC0356RU") И СокрЛП(ДоговорКонтрагента.Наименование) = "SLI-YS-SLV-2007 от 01.09.2007 (RUB)" Тогда
			Если НЕ (СтрДлина(СокрЛП(Комментарий)) = 8 И (Лев(СокрЛП(Комментарий),1) = "T" ИЛИ Лев(СокрЛП(Комментарий),1) = "Т") 
				ИЛИ СтрДлина(СокрЛП(Комментарий)) = 6) Тогда
				Сообщить("Необходимо заполнить в поле ""Комментарий"" Т-транзакцию (первый символ ""T"", длина номера - ""8"") или номер ФМТ (6 знаков)!");
				Отказ = Истина;
			КонецЕсли;
	КонецЕсли;  
	
	
	// } RGS LFedotova 06.12.2016 17:57:49 - вопрос SLI-0006955
	
	// { RGS MYurkevich 04.02.2015 16:08:25 - TP-00000694
	НаборЗаписейРегСеб = РегистрыНакопления.РегистрСебестоимости.СоздатьНаборЗаписей();
	НаборЗаписейРегСеб.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписейРегСеб.Прочитать();
	ТабЗаписейРегСеб = НаборЗаписейРегСеб.Выгрузить();
	// } RGS MYurkevich 04.02.2015 16:08:59 - TP-00000694
	
	//Добавил РГ-Софт - Пронин Иван - 2009-06-27
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления 2009-06-27
	
	Если НЕ(ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда 
		Сообщить("В документе могут быть использованы только виды договоров ""С покупателем"" или ""С комиссионером""!");
		Отказ = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка = Ложь 
		И ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
		Сообщить("Документ с видом операции ""Внутренняя кредит-нота"" не может быть проведен!");
		Отказ = ИСТИНА;
		Возврат;
	КонецЕсли; 
	
	//закомментировала Федотова Л., РГ-Софт, 11.10.13, вопрос SLI-0003918
	//Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно ИЛИ
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ) Тогда
	//	Если СуммаДокумента < 0 Тогда
	//		Сообщить("Проведение отрицательных сумм должно осуществляться через кредит-ноты!");
	//		Отказ = ИСТИНА;
	//		Возврат;
	//	КонецЕсли; 
	//КонецЕсли; 
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// -> Добавила Федотова Людмила РГ-Софт
	СтруктураШапкиДокумента.Вставить("ДатаПроведения", ДатаПроведения);
	// <-
	// -> Добавила Федотова Людмила, РГ-Софт, 14.10.15, вопрос SLI-0005864
	СтруктураШапкиДокумента.Вставить("СуммаКонтракта", ДоговорКонтрагента.СуммаКонтракта);
	// <-
	
	СтруктураПолейУчетнойПолитикиБУ = Новый Структура("РазрешитьУчетУслугБезПлановыхЦен");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиБУ);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("МоментОпределенияНалоговойБазыНДС,СложныйУчетНДС,НачислятьНДСПоОтгрузке");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"  , "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      ,        "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  ,        "Количество");
	СтруктураПолей.Вставить("Сумма"       ,        "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   ,        "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         ,        "СуммаНДС");
	СтруктураПолей.Вставить("НомерГТД",            "НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	//добавил Трефиленков Дмитрий, РГ-Софт	
	СтруктураПолей.Вставить("AU"         		   , "КостЦентр");
	СтруктураПолей.Вставить("WO"				   , "WO");
	СтруктураПолей.Вставить("СуммаБезНДСРуб", "СуммаБезНДСРуб");
	СтруктураПолей.Вставить("СуммаНДСРуб"   , "СуммаНДСРуб");
	//конец добавления                                                                     
	
	СтруктураПолей.Вставить("СуммаНДСРуб"   , "СуммаНДСРуб");
	
	//добавила Федотова Л., РГ-Софт, 22.03.13, вопрос SLI-0003429 ->
	СтруктураПолей.Вставить("Ticket"   , "Ticket");
	//конец добавления 
	
	// { RGS MYurkevich 09.02.2015 12:36:27 - TP-00000694
	СтруктураПолей.Вставить("PO"   , "PO");
	// } RGS MYurkevich 09.02.2015 12:46:27 - TP-00000694
	// { RGS MYurkevich 6/10/2015 2:37:40 PM - TP-00001070
	СтруктураПолей.Вставить("ЕдиницаИзмерения"	   , "ЕдиницаИзмерения");
	// } RGS MYurkevich 6/10/2015 2:38:08 PM - TP-00001070
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	//добавил Трефиленков Дмитрий, РГ-Софт	
	СтруктураПолей.Вставить("AU"			, "КостЦентр");
	СтруктураПолей.Вставить("WO"			, "WO");
	СтруктураПолей.Вставить("СуммаБезНДСРуб", "СуммаБезНДСРуб");
	СтруктураПолей.Вставить("СуммаНДСРуб"   , "СуммаНДСРуб");
	//конец добавления
	// { RGS MYurkevich 6/10/2015 2:37:40 PM - TP-00001070
	СтруктураПолей.Вставить("ЕдиницаИзмерения"	   , "ЕдиницаИзмерения");
	// } RGS MYurkevich 6/10/2015 2:38:08 PM - TP-00001070
	//добавила Федотова Л., РГ-Софт, 22.03.13, вопрос SLI-0003429 ->
	СтруктураПолей.Вставить("Ticket"   , "Ticket");
	//конец добавления                                                                     
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Добавил РГ-Софт - Иванов Антон - 2009-01-30
	//Проверка совпадения суммы тикета и суммы реализации
	РезультатЗапросаПоТЧ = ВернутьРезультатЗапросаПоТЧ();
	ПроверитьСовпадениеСуммТикетаИРеализации(РезультатЗапросаПоТЧ, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	// Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);
	
	//РГ-Софт, Прокошева
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("AU",        "КостЦентр");
	СтруктураПолей.Вставить("WO",        "WO");
	СтруктураПолей.Вставить("Сумма"   ,        "Сумма");
	СтруктураПолей.Вставить("СуммаНДС"   ,     "СуммаНДС");
	// { RGS LFedotova 13.06.2018 13:30:12 - вопрос SLI-0007580
	СтруктураПолей.Вставить("СуммаБезНДСРуб"   ,        "СуммаБезНДСРуб");
	СтруктураПолей.Вставить("СуммаНДСРуб"   ,     "СуммаНДСРуб");
	// } RGS LFedotova 13.06.2018 13:30:43 - вопрос SLI-0007580 
	
	РезультатЗапросаПоТоварамПок = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	РезультатЗапросаПоУслугамПок = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПок = ПодготовитьТаблицуПок(РезультатЗапросаПоТоварамПок,РезультатЗапросаПоУслугамПок, СтруктураШапкиДокумента);
	
	
	// Движения по документу
	//изменил Трефиленков Дмитрий, РГ-Софт, Sales book
	Если Не Отказ Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота Тогда
			//движения в плюс
			// -> Добавила Федотова Людмила
			ТаблицаПокСторно = ТаблицаПок.Скопировать();
			ТаблицаПокСторно[0].СуммаВзаиморасчетов = -1 * ТаблицаПокСторно[0].СуммаВзаиморасчетов;
			ТаблицаПокСторно[0].СуммаРегл = -1 * ТаблицаПокСторно[0].СуммаРегл;
			ТаблицаПокСторно[0].СуммаУпр = -1 * ТаблицаПокСторно[0].СуммаУпр;
			СтруктураШапкиДокумента.Вставить("СсылкаИсходн", СтруктураШапкиДокумента.Ссылка);
			СтруктураШапкиДокумента.Вставить("СделкаИсходн", СтруктураШапкиДокумента.Сделка);
			Если НЕ СтруктураШапкиДокумента.ДатаПроведения = Дата(1,1,1) Тогда
				СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ДатаПроведения;//подменяем дату для движений на дату проведения
			КонецЕсли;	
			СтруктураШапкиДокумента.Ссылка = СтруктураШапкиДокумента.Сделка;
			СтруктураШапкиДокумента.Сделка = Неопределено;
			// <-
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
			ТаблицаПоУслугам,РезультатЗапросаПоТЧ,ТаблицаПокСторно, Отказ, Заголовок);
			//движения в минус
			ИзменитьЗнакТаблиц(ТаблицаПоТоварам, ТаблицаПоУслугам);
			//СтруктураШапкиДокумента.Сделка = Неопределено;
			// -> Добавила Федотова Людмила
			СтруктураШапкиДокумента.Ссылка = СтруктураШапкиДокумента.СсылкаИсходн;
			СтруктураШапкиДокумента.Сделка = СтруктураШапкиДокумента.СделкаИсходн;
			// <-
			ТаблицаПок[0].Сделка = Ссылка;
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
			ТаблицаПоУслугам,РезультатЗапросаПоТЧ,ТаблицаПок, Отказ, Заголовок);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ Тогда
			//СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.Сделка.Дата;//подменяем дату для движений на дату сторнируемого документа
			// -> Изменила Федотова Людмила
			СтруктураШапкиДокумента.Вставить("СсылкаИсходн", СтруктураШапкиДокумента.Ссылка);
			СтруктураШапкиДокумента.Вставить("СделкаИсходн", СтруктураШапкиДокумента.Сделка);
			Если НЕ СтруктураШапкиДокумента.ДатаПроведения = Дата(1,1,1) Тогда
				СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ДатаПроведения;//подменяем дату для движений на дату проведения
			КонецЕсли;
			// <-
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
			ТаблицаПоУслугам,РезультатЗапросаПоТЧ,ТаблицаПок, Отказ, Заголовок);
			
			//Добавила Федотова Л., РГ-Софт, 30.10.13, вопрос SLI-0003955 ->
			Если ТипЗнч(Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") И  ПодразделениеОрганизации <> Сделка.ПодразделениеОрганизации Тогда //MYurkevich RCA-0000164
				
				Для каждого Движение Из Движения.Выручка_SB Цикл
					Если Движение.СуммаБезНДС < 0 Тогда
						Движение.Подразделение = Сделка.ПодразделениеОрганизации;
					КонецЕсли; 
				КонецЦикла; 
				
				Для каждого Движение Из Движения.НДСНачисленный Цикл
					Если Движение.СуммаБезНДС < 0 Тогда
						Движение.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
					КонецЕсли; 
				КонецЦикла; 
				
				Для каждого Движение Из Движения.НДСНачисленный Цикл
					Если Движение.СуммаБезНДС < 0 Тогда
						Движение.ПодразделениеОрганизации = Сделка.ПодразделениеОрганизации;
					КонецЕсли; 
				КонецЦикла; 
				
			КонецЕсли; 
			//<-
		Иначе
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
			ТаблицаПоУслугам,РезультатЗапросаПоТЧ,ТаблицаПок, Отказ, Заголовок);
		КонецЕсли;
		
		// { RGS MYurkevich 03.02.2015 12:19:40 - TP-00000694
		Если НЕ Отказ Тогда
			ДвиженияПоРегиструСебестоимости(ТаблицаПоТоварам, ТабЗаписейРегСеб);
		КонецЕсли;
		// } RGS MYurkevich 03.02.2015 12:19:58 - TP-00000694				
	КонецЕсли;
	//конец изменения
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	СчетНаОплату = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	
	// { RGS LFedotova 16.11.2017 11:56:14 - вопрос S-B-0000189
	Попытка 
		НаименованиеИЦ = ОбъектКопирования.ИнвойсинговыйЦентр.Наименование; //если вместо инвойсингового центра битая ссылка или пустое значение, то наименование прочитать не сможем
	Исключение
		ЭтотОбъект.Ответственный =  Пользователи.ТекущийПользователь();
		ЭтотОбъект.ИнвойсинговыйЦентр = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойИнвойсинговыйЦентр");
	КонецПопытки;
	// } RGS LFedotova 16.11.2017 11:56:35 - вопрос S-B-0000189
	
КонецПроцедуры

Процедура РассчитатьСуммыРуб() Экспорт
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		// { RGS LFedotova 31.10.2017 12:39:09 - SLI-0007416
		//Для каждого Строка Из Товары Цикл
		//	Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		//	Строка.СуммаНДСРуб = Строка.СуммаНДС;
		//КонецЦикла; 
		//Для каждого Строка Из Услуги Цикл
		//	Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		//	Строка.СуммаНДСРуб = Строка.СуммаНДС;
		//КонецЦикла; 
		Для каждого Строка Из Товары Цикл
			Если Строка.СуммаБезНДСРуб = 0 Тогда 
				Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
				Строка.СуммаНДСРуб = Строка.СуммаНДС;
			КонецЕсли;
		КонецЦикла; 
		Для каждого Строка Из Услуги Цикл
			Если Строка.СуммаБезНДСРуб = 0 Тогда 
				Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
				Строка.СуммаНДСРуб = Строка.СуммаНДС;
			КонецЕсли;
		КонецЦикла; 
		// } RGS LFedotova 31.10.2017 12:39:24 - SLI-0007416 
	Иначе
		// { RGS LFedotova 31.10.2017 12:42:16 - SLI-0007416
		ЕстьНезаполненныеРублевыеСуммы = Ложь;
		Для каждого Строка Из Товары Цикл
			Если Строка.СуммаБезНДСРуб = 0 Тогда 
				ЕстьНезаполненныеРублевыеСуммы = Истина;
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка Из Услуги Цикл
			Если Строка.СуммаБезНДСРуб = 0 Тогда 
				ЕстьНезаполненныеРублевыеСуммы = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьНезаполненныеРублевыеСуммы Тогда
			Возврат;
		КонецЕсли;
		// } RGS LFedotova 31.10.2017 12:42:26 - SLI-0007416
		
		СуммаПредоплатыВал = Предоплата.Итог("СуммаВзаиморасчетов");
		СуммаПредоплатыРуб = Предоплата.Итог("Сумма");
		
		//Распределим предоплату по строкам товаров и услуг
		СуммаВалВсего = ?(СуммаВключаетНДС,Товары.Итог("Сумма") + Услуги.Итог("Сумма"), 
		Товары.Итог("Сумма") + Услуги.Итог("Сумма") + Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС"));
		Если СуммаВалВсего = 0 Тогда
			Возврат;
		КонецЕсли; 
		//Проверим правильность задания суммы предоплаты
		Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			Если Предоплата.Итог("СуммаВзаиморасчетов") > СуммаВалВсего Тогда
				Сообщить("Неправильное соотношение суммы документа и суммы взаиморасчетов предоплаты.
				|Сумма взаиморасчетов предоплаты не может превышать сумму документа!");
			КонецЕсли; 
		КонецЕсли; 
		
		Коэф = СуммаПредоплатыВал/СуммаВалВсего;
		Если Предоплата.Количество()>0 Тогда
			ДокументПредоплаты = Предоплата[0].ДокументАванса;
			Если НЕ ДокументПредоплаты.Пустая() Тогда
				КурсПредоплаты = ДокументПредоплаты.РасшифровкаПлатежа[0].КурсВзаиморасчетов;
				Если КурсВзаиморасчетов = КурсПредоплаты Тогда
					Коэф = 1;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		Для каждого Строка Из Товары Цикл
			Если Коэф = 0 Тогда
				Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Окр((Строка.Сумма - Строка.СуммаНДС) * КурсВзаиморасчетов,2),Окр(Строка.Сумма * КурсВзаиморасчетов,2)); 
				Строка.СуммаНДСРуб = Окр(Строка.СуммаНДС * КурсВзаиморасчетов,2); 
			Иначе
				СтрокаСуммаВсего = ?(СуммаВключаетНДС,Строка.Сумма,Строка.Сумма + Строка.СуммаНДС); 
				СтрокаСуммаВсегоРуб = Окр(СтрокаСуммаВсего * (1-Коэф) * КурсВзаиморасчетов
				+ Предоплата.Итог("Сумма") * Строка.Сумма/(Товары.Итог("Сумма")+Услуги.Итог("Сумма")),2);
				Строка.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаВсегоРуб, УчитыватьНДС,Истина, 
				УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				Строка.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - Строка.СуммаНДСРуб; 
			КонецЕсли; 
		КонецЦикла; 
		Для каждого Строка Из Услуги Цикл
			Если Коэф = 0 Тогда
				Строка.СуммаБезНДСРуб = ?(СуммаВключаетНДС, Окр((Строка.Сумма - Строка.СуммаНДС) * КурсВзаиморасчетов,2),Окр(Строка.Сумма * КурсВзаиморасчетов,2)); 
				Строка.СуммаНДСРуб = Окр(Строка.СуммаНДС * КурсВзаиморасчетов,2); 
				СтрокаСуммаВсегоРуб = Строка.СуммаБезНДСРуб + Строка.СуммаНДСРуб;
			Иначе
				СтрокаСуммаВсего = ?(СуммаВключаетНДС,Строка.Сумма,Строка.Сумма + Строка.СуммаНДС); 
				СтрокаСуммаВсегоРуб = Окр(СтрокаСуммаВсего * (1-Коэф) * КурсВзаиморасчетов
				+ Предоплата.Итог("Сумма") * Строка.Сумма/(Товары.Итог("Сумма")+Услуги.Итог("Сумма")),2);
				Строка.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаВсегоРуб, УчитыватьНДС,Истина, 
				УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				Строка.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - Строка.СуммаНДСРуб; 
			КонецЕсли; 
		КонецЦикла; 
		
		Если Предоплата.Итог("Сумма") = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		СуммаРаспределения = Предоплата.Итог("СуммаВзаиморасчетов");
		СуммаРубИтого = Товары.Итог("СуммаБезНДСРуб") + Товары.Итог("СуммаНДСРуб")                
		+ Услуги.Итог("СуммаБезНДСРуб") + Услуги.Итог("СуммаНДСРуб");
		
		Если СуммаВалВсего = СуммаРаспределения Тогда
			//Проверим, сходятся ли суммы
			Если СуммаРубИтого <> Предоплата.Итог("Сумма") Тогда
				Превышение = СуммаРубИтого - Предоплата.Итог("Сумма"); 
				//отнимем его из последней строчки товаров или услуг
				КоличествоСтрокТоваров = Товары.Количество();
				КоличествоСтрокУслуг = Услуги.Количество();
				Если КоличествоСтрокТоваров > 0 Тогда
					ПоследняяСтрокаТовары = Товары[КоличествоСтрокТоваров - 1];
					СтрокаСуммаРубВсего = ПоследняяСтрокаТовары.СуммаБезНДСРуб + ПоследняяСтрокаТовары.СуммаНДСРуб - Превышение; 
					//заново рассчитаем НДС
					ПоследняяСтрокаТовары.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаРубВсего, УчитыватьНДС,Истина, 
					УчетНДС.ПолучитьСтавкуНДС(ПоследняяСтрокаТовары.СтавкаНДС));
					
					ПоследняяСтрокаТовары.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - ПоследняяСтрокаТовары.СуммаНДСРуб; 
				ИначеЕсли КоличествоСтрокУслуг > 0 Тогда
					ПоследняяСтрокаУслуги = Услуги[КоличествоСтрокУслуг - 1];
					СтрокаСуммаРубВсего = ПоследняяСтрокаУслуги.СуммаБезНДСРуб + ПоследняяСтрокаУслуги.СуммаНДСРуб - Превышение; 
					//заново рассчитаем НДС
					ПоследняяСтрокаУслуги.СуммаНДСРуб = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаСуммаРубВсего, УчитыватьНДС,Истина, 
					УчетНДС.ПолучитьСтавкуНДС(ПоследняяСтрокаУслуги.СтавкаНДС));
					
					ПоследняяСтрокаУслуги.СуммаБезНДСРуб = СтрокаСуммаВсегоРуб - ПоследняяСтрокаУслуги.СуммаНДСРуб; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

//-> RG-Soft VIvanov 02/04/11
Процедура СформироватьДвиженияПоРегиструНДСПредъявленныйСторно(СтруктураШапкиДокумента, ТаблицаУменьшения, Движения, Отказ)
	
	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		мУчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не мУчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВидВычета		= Перечисления.ВидыНДСкВычету.ПредъявленПоставщиком;
	ВидЦенности		= Перечисления.ВидыЦенностей.Товары;
	
	НДСПредъявленный = Движения.НДСПредъявленный;
	ТаблицаНДСПредъявленный = НДСПредъявленный.Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаУменьшения Цикл
		СтрокаНДСПредъявленный = ТаблицаНДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСПредъявленный,СтрокаТЧ);
		СтрокаНДСПредъявленный.Период = СтруктураШапкиДокумента.ДатаПроведения;
		СтрокаНДСПредъявленный.НалоговыйПериод 	= СтруктураШапкиДокумента.НалоговыйПериод;
		СтрокаНДСПредъявленный.Валюта 			= СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаНДСПредъявленный.СтавкаНДС 		= СтрокаТЧ.СтавкаНДС;
		СтрокаНДСПредъявленный.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СтрокаНДСПредъявленный.Поставщик		= СтруктураШапкиДокумента.Контрагент;
		СтрокаНДСПредъявленный.ВидВычета 		= ВидВычета;
		СтрокаНДСПредъявленный.ВидЦенности		= ВидЦенности;
		СтрокаНДСПредъявленный.СчетФактура 		= СтруктураШапкиДокумента.Ссылка;	
		СтрокаНДСПредъявленный.СуммаБезНДС		= - СтрокаТЧ.СуммаБезНДС;
		СтрокаНДСПредъявленный.НДС				= - СтрокаТЧ.НДС;
		СтрокаНДСПредъявленный.СуммаБезНДСВВалюте = - СтрокаТЧ.СуммаБезНДСВал;
		СтрокаНДСПредъявленный.НДСВВалюте		=  - СтрокаТЧ.НДСВал;
		СтрокаНДСПредъявленный.Регистратор 		= Ссылка;
		СтрокаНДСПредъявленный.Активность 		= Истина;
	КонецЦикла;
	
	НДСПредъявленный.Загрузить(ТаблицаНДСПредъявленный);
	НДСПредъявленный.Записать();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// { SLI-0006169 - Notification KS - Добавила Петроченко НН
	Если ЗначениеЗаполнено(ДатаВозвратаКС) Или ПометкаУдаления Тогда 
		Документы.РеализацияТоваровУслуг.ОчиститьГрафикиУведомленийКС(Ссылка);
	КонецЕсли;  // } SLI-0006169 - Notification KS - конец добавления
	
	// { RGS PBahushevich 8/25/2016 10:01:55 AM - для обенов
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	// } RGS PBahushevich 8/25/2016 10:01:58 AM - для обенов
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
	// { RGS LFedotova 14.09.2017 15:40:20 - вопрос SLI-0007356
	РГСофт.ПроверитьСоответствиеДатыПроведенияВТикетах(ЭтотОбъект, ДатаПроведения);
	// } RGS LFedotova 14.09.2017 15:40:34 - вопрос SLI-0007356
	
КонецПроцедуры 

// { RGS MYurkevich 03.02.2015 10:58:34 - TP-00000694
Процедура ДвиженияПоРегиструСебестоимости(ТаблицаПоТоварам, НаборЗаписей)
	РегСеб = Движения.РегистрСебестоимости;
	ЕстьИнвентори = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.Объект,
	|	Записи.AU,
	|	Записи.РучнаяКорректировка
	|ПОМЕСТИТЬ Записи
	|ИЗ
	|	&НаборЗаписей КАК Записи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура
	|	КОНЕЦ КАК Объект,
	|	РеализацияТоваровУслугТовары.КостЦентр КАК AU,
	|	РеализацияТоваровУслугТовары.СуммаБезНДСРуб КАК СтоимостьПродажи,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	InventoryBatchesОбороты.Batch,
	|	ЕСТЬNULL(InventoryBatchesОбороты.QuantityРасход * InventoryСписаниеGoods.UOM.ConversionFactor, 0) КАК КоличествоСписания,
	|	ЕСТЬNULL(InventoryBatchesОбороты.SumРасход, 0) КАК Себестоимость,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	InventoryBatchesОбороты.Batch.PO КАК PO,
	|	InventoryBatchesОбороты.Batch.PO.Поставщик КАК Поставщик,
	|	РеализацияТоваровУслугТовары.Ссылка.ДатаПроведения КАК Период,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслугТовары.Ссылка КАК ДокументРеализации,
	|	InventoryBatchesОбороты.Batch КАК Batch1,
	|	""Inventory"" КАК Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.InventoryСписание.Goods КАК InventoryСписаниеGoods
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.InventoryBatches.Обороты(, , Регистратор, ) КАК InventoryBatchesОбороты
	|			ПО InventoryСписаниеGoods.Ссылка = InventoryBatchesОбороты.Регистратор
	|				И InventoryСписаниеGoods.Good = InventoryBatchesОбороты.Good
	|		ПО РеализацияТоваровУслугТовары.Ссылка = InventoryСписаниеGoods.Реализация
	|			И РеализацияТоваровУслугТовары.Номенклатура.Catalog = InventoryСписаниеGoods.Good.Catalog
	|		ЛЕВОЕ СОЕДИНЕНИЕ Записи КАК Записи
	|		ПО (ВЫБОР
	|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog ЕСТЬ НЕ NULL 
	|						И РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
	|					ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Catalog = Записи.Объект
	|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура = Записи.Объект
	|			КОНЕЦ)
	|			И РеализацияТоваровУслугТовары.КостЦентр = Записи.AU
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА Записи.РучнаяКорректировка ЕСТЬ НЕ NULL 
	|				ТОГДА НЕ Записи.РучнаяКорректировка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И РеализацияТоваровУслугТовары.PO = ЗНАЧЕНИЕ(Справочник.ЗаявкиНаЗакупку.ПустаяСсылка)
	|	И РеализацияТоваровУслугТовары.Номенклатура.Catalog <> ЗНАЧЕНИЕ(Справочник.Catalog.ПустаяСсылка)
	|ИТОГИ
	|	СРЕДНЕЕ(Количество),
	|	СУММА(КоличествоСписания),
	|	СУММА(Себестоимость)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
	ВыборкаПоСтроке = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСтроке.Следующий() Цикл
		СтрокаТЧ = Товары[ВыборкаПоСтроке.НомерСтроки - 1];
		Если ВыборкаПоСтроке.Количество = ВыборкаПоСтроке.КоличествоСписания Тогда
			Выборка = ВыборкаПоСтроке.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Движение = РегСеб.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
			Иначе
				ТаблицаЗаписей.Очистить();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТаблицаЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла;	
				КолонкаСумм = ТаблицаЗаписей.ВыгрузитьКолонку("Себестоимость");
				МассивРаспределения = УправлениеПроизводством.РаспределитьПропорционально(СтрокаТЧ.СуммаБезНДСРуб,КолонкаСумм);
				ТаблицаЗаписей.ЗагрузитьКолонку(МассивРаспределения, "СтоимостьПродажи");
				Для Каждого Запись Из ТаблицаЗаписей Цикл
					Движение = РегСеб.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, Запись);
				КонецЦикла;	
			КонецЕсли;
		Иначе
			Выборка = ВыборкаПоСтроке.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Движение = РегСеб.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Если Выборка.КоличествоСписания <> 0 Тогда
					Движение.Себестоимость = Выборка.Себестоимость * Выборка.Количество / Выборка.КоличествоСписания;
				Иначе 
					Движение.Себестоимость = 0;
				КонецЕсли;
			Иначе
				ОсталосьСписать = ВыборкаПоСтроке.Количество;
				ТаблицаЗаписей.Очистить();
				Пока Выборка.Следующий() И ОсталосьСписать <> 0 Цикл
					Если ОсталосьСписать < Выборка.КоличествоСписания Тогда
						НоваяСтрока = ТаблицаЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.Себестоимость = Выборка.Себестоимость * Выборка.Количество / Выборка.КоличествоСписания;
						ОсталосьСписать = 0;
					Иначе 
						НоваяСтрока = ТаблицаЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						ОсталосьСписать = ОсталосьСписать - Выборка.КоличествоСписания;
					КонецЕсли;	
				КонецЦикла;
				КолонкаСумм = ТаблицаЗаписей.ВыгрузитьКолонку("Себестоимость");
				МассивРаспределения = УправлениеПроизводством.РаспределитьПропорционально(СтрокаТЧ.СуммаБезНДСРуб,КолонкаСумм);
				ТаблицаЗаписей.ЗагрузитьКолонку(МассивРаспределения, "СтоимостьПродажи");
				Для Каждого Запись Из ТаблицаЗаписей Цикл
					Движение = РегСеб.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, Запись);
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Стр Из ТаблицаПоТоварам Цикл
		ДвиженияПоИнвентори = Движения.РегистрСебестоимости.Выгрузить();
		ПараметрыОтбора = Новый Структура("Объект", ?(ЗначениеЗаполнено(Стр.Номенклатура.Catalog), Стр.Номенклатура.Catalog, Стр.Номенклатура));
		ПараметрыОтбора.Вставить("AU", Стр.AU);
		НайденныеПоИнвентори = ДвиженияПоИнвентори.НайтиСтроки(ПараметрыОтбора);
		ПараметрыОтбора.Вставить("РучнаяКорректировка", Истина);
		НайденныеСтроки = НаборЗаписей.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Движение = РегСеб.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, НайденныеСтроки[0]);
			НаборЗаписей.Удалить(НайденныеСтроки[0]);
			Продолжить;
		ИначеЕсли НайденныеПоИнвентори.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;	
		Движение = РегСеб.Добавить();
		Движение.Период             = ДатаПроведения;
		Движение.AU                 = Стр.AU;
		Движение.Покупатель         = Контрагент;
		Движение.Объект             = ?(ЗначениеЗаполнено(Стр.Номенклатура.Catalog), Стр.Номенклатура.Catalog, Стр.Номенклатура);
		Движение.СтоимостьПродажи   = Стр.СуммаБезНДСРуб;
		Движение.ДокументРеализации = Ссылка;
		Если ЗначениеЗаполнено(Стр.PO) Тогда
			Движение.PO = Стр.PO;
			Движение.Поставщик = Стр.PO.Поставщик;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура.Catalog) И НЕ ЗначениеЗаполнено(Стр.PO) Тогда
			Продолжить;
		КонецЕсли;	 
		Условие = ?(ЗначениеЗаполнено(Стр.PO), " СтрокиИнвойса.НомерЗаявкиНаЗакупку", " СтрокиИнвойса.КодПоИнвойсу");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата КАК ДатаГТД,
		|	СтрокиИнвойса.Ссылка КАК Инвойс,
		|	СтрокиИнвойса.КостЦентр,
		|	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
		|   ЕСТЬNULL(СтрокиИнвойса.Количество * СтрокиИнвойса.ЕдиницаИзмерения.ConversionFactor, 0) КАК Количество,
		|   ЕСТЬNULL(InvoiceLinesCostsОбороты.СуммаФискальнаяОборот, 0) КАК Себестоимость
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
		|		ПО (ЗакрытиеПоставкиСопоставление.СтрокаИнвойса = СтрокиИнвойса.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.InvoiceLinesCosts.Обороты(
		|		,
		|		,
		|		,
		|		ЭлементФормированияСтоимости <> ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ТаможняНДС)
		|			И SoldTo = &FiscalParentCompany) КАК InvoiceLinesCostsОбороты
		|       ПО InvoiceLinesCostsОбороты.СтрокаИнвойса = СтрокиИнвойса.Ссылка
		|ГДЕ"
		+ Условие + " = &Параметр
		|	И ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ГТД.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаГТД УБЫВ,
		|   Количество УБЫВ";
		Запрос.УстановитьПараметр("Параметр", ?(ЗначениеЗаполнено(Стр.PO), Стр.PO.Код, Стр.Номенклатура.Catalog.Код));
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("FiscalParentCompany", Константы.FiscalParentCompany.Получить());
		
		ТаблицаИнвойсов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаИнвойсов.Количество() <> 0 Тогда
			ПараметрыОтбора = Новый Структура("КостЦентр", Стр.AU);
			НайденныйСтроки = ТаблицаИнвойсов.НайтиСтроки(ПараметрыОтбора);
			СтрокаРезультата = ?(НайденныйСтроки.Количество() > 0, НайденныйСтроки[0], ТаблицаИнвойсов[0]);
			PO = ?(ЗначениеЗаполнено(Стр.PO), Стр.PO, CustomsСервер.НайтиPOПоНомеру(СтрокаРезультата.НомерЗаявкиНаЗакупку));
			Если PO <> Неопределено Тогда
				Движение.Поставщик = PO.Поставщик;
				Движение.PO        = PO;
			КонецЕсли;
			Если СтрокаРезультата.Количество <> Стр.Количество Тогда
				Движение.Себестоимость = СтрокаРезультата.Себестоимость * Стр.Количество/СтрокаРезультата.Количество;
			Иначе
				Движение.Себестоимость = СтрокаРезультата.Себестоимость;
			КонецЕсли;
			Движение.Комментарий = ?(ЗначениеЗаполнено(Стр.PO), "По данным PO", "Import");
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	
// } RGS MYurkevich 03.02.2015 10:58:36 - TP-00000694

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
