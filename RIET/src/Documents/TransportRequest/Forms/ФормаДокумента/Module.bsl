
////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Далее будут запросы, для выполнения которых не нужно проверять права доступа, 
	// поэтому для скорости установим привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		НастроитьВидимостьЭлементов(Объект);
	КонецЕсли;
	
	НастроитьВидимостьПоCompany();
	
	// { RGS AArsentev 31.07.2018
	//НастроитьСписокВыбораSpecialistsНаСервере();
	// } RGS AArsentev 31.07.2018
	
	НастроитьСписокCompaniesWithSettingsНаСервере();
	                 		
	ReadyToShipLocalTime = Объект.ReadyToShipLocalTime;
	RequiredDeliveryTime = Объект.RequiredDeliveryLocalTime;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		// { RGS AArsentev S-I-0001855 06.09.2016 23:38:52
		Если НЕ ЗначениеЗаполнено(Объект.Urgency) Тогда
			Объект.Urgency = ПредопределенноеЗначение("Справочник.DeliveryUrgency.Standard");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.CustomUnionTransaction) И НЕ ЗначениеЗаполнено(Объект.Regime)  Тогда
			Объект.Regime = ПредопределенноеЗначение("Перечисление.PermanentTemporary.Permanent");
		КонецЕсли;
		// } RGS AArsentev S-I-0001855 06.09.2016 23:38:52 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Adjustments.Параметры.УстановитьЗначениеПараметра("TR", Объект.Ссылка);
	Иначе
		Adjustments.Параметры.УстановитьЗначениеПараметра("TR", Документы.TransportRequest.ПустаяСсылка());
	КонецЕсли;
	
	ShowCanceledParcels = Ложь;
	ShowCanceledItems = Ложь;
	
	// { RGS AArsentev 26.07.2018 Multimodal copy
	ПоказыватьMultimodal =  РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies")
		ИЛИ РольДоступна("LocalDistributionSpecialist_ForNonLawsonCompanies")
		ИЛИ РольДоступна("ПолныеПрава");
	Элементы.Multimodal.Видимость = ПоказыватьMultimodal;
	// } RGS AArsentev 26.07.2018 Multimodal copy
	
	// { RGS AFokin 06.09.2018 23:59:59 S-I-0005830
	MultiModalCopy = Ложь;
	Если Параметры.Свойство("MultiModalCopy") Тогда
		MultiModalCopy = Истина;
	КонецЕсли;
	//Если (Объект.Ссылка.Пустая() ИЛИ MultiModalCopy) И ТекущаяДата() >= '20180801' И Элементы.Urgency.СписокВыбора.Количество() <> 2 Тогда
	Если (Объект.Дата >= '20180801' ИЛИ ТекущаяДата() >= '20180801') И Элементы.Urgency.СписокВыбора.Количество() <> 2 ИЛИ MultiModalCopy Тогда
		Элементы.Urgency.СписокВыбора.Очистить();
		Элементы.Urgency.СписокВыбора.Добавить(Справочники.DeliveryUrgency.Standard);
		Элементы.Urgency.СписокВыбора.Добавить(Справочники.DeliveryUrgency.Critical);
	КонецЕсли;	
	// } RGS AFokin 06.09.2018 23:59:59 S-I-0005830
	
	// { RGS AFokin 09.09.2018 23:59:59 S-I-0005813
	Элементы.ГруппаReasonForReturn.Видимость = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		//TransportRequestStage = РегистрыСведений.StagesOfTransportRequests.ПолучитьTransportRequestStage(Объект.Ссылка);
		TransportRequestStage = ОпределитьStage();
		
		Если TransportRequestStage = Перечисления.TransportRequestStages.Requested Тогда
			ВидимостьReturnToRequestor = РольДоступна("LocalDistributionSpecialist_ForNonLawsonCompanies") ИЛИ РольДоступна("ПолныеПрава");
			Элементы.ГруппаReasonForReturn.Видимость = ВидимостьReturnToRequestor;
		КонецЕсли;
	КонецЕсли;		
	// } RGS AFokin 09.09.2018 23:59:59 S-I-0005813
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Stage = ОпределитьStage();	
	
	// { RG-Soft LGoncharova 06.12.2018 S-I-0006255
	ДатаВключенияReasonsForTR = Неопределено;
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ДатаВключенияReasonsForTR", ДатаВключенияReasonsForTR);
	// } RG-Soft LGoncharova 06.12.2018 S-I-0006255
	
	НастроитьВидимостьЭлементов(ТекущийОбъект);
	
	// { RGS AFokin 06.09.2018 23:59:59 S-I-0005830
	Если Объект.Ссылка.Пустая() И ТекущийОбъект.Дата >= '20180801' И Элементы.Urgency.СписокВыбора.Количество() <> 2 Тогда
		Элементы.Urgency.СписокВыбора.Очистить();
		Элементы.Urgency.СписокВыбора.Добавить(Справочники.DeliveryUrgency.Standard);
		Элементы.Urgency.СписокВыбора.Добавить(Справочники.DeliveryUrgency.Critical);
	КонецЕсли;	
	// } RGS AFokin 06.09.2018 23:59:59 S-I-0005830
	
КонецПроцедуры

&НаСервере
Функция НастроитьВидимостьПоCompany()
	
	СтруктураCompanySettings = Документы.TransportRequest.ПолучитьСтруктуруCompanySettings(Объект.Company, Объект.Дата);
	        				
	Элементы.LegalEntityCostCenter.Видимость = СтруктураCompanySettings.UseCostCenterFromLegalEntityForNON_PO;
		
	//NonLawsonCostCenter = (СтруктураCompanySettings.SpecifyCostCenter = Перечисления.TypesOfCostCenters.NonLawsonAU);
	
	Элементы.Segment.Видимость = СтруктураCompanySettings.SpecifySegment;
	
	Элементы.ProductLine.Видимость = СтруктураCompanySettings.SpecifyProductLine;
		
	Элементы.AcquisitionCost.Видимость = СтруктураCompanySettings.SpecifyAcquisitionCost;

	SpecifyCostCenter = СтруктураCompanySettings.SpecifyCostCenter;
	
	Элементы.AgreementForRecharge.Видимость = СтруктураCompanySettings.SpecifyAgreementForRecharge;
	Элементы.ClientForRecharge.Видимость = Не СтруктураCompanySettings.SpecifyAgreementForRecharge;
	
	Элементы.CostCenter.ТолькоПросмотр = (SpecifyCostCenter = Перечисления.TypesOfCostCenters.FromSegment
		ИЛИ SpecifyCostCenter = Перечисления.TypesOfCostCenters.DefaultCostCenter 
		ИЛИ SpecifyCostCenter = Перечисления.TypesOfCostCenters.FromLegalEntity_ProductLine);

	// In TMS
	//Элементы.PayingEntity.Видимость = СтруктураCompanySettings.InTMS;
	Элементы.TMSOBNumber.Видимость = СтруктураCompanySettings.InTMS;
	Элементы.ГруппаSentToTMS.Видимость = СтруктураCompanySettings.InTMS;
	
	Элементы.SegmentLawson.Видимость = СтруктураCompanySettings.InTMS;
	
	Элементы.ActivityLawson.Видимость = СтруктураCompanySettings.InTMS;
	Элементы.Activity.Видимость = Не СтруктураCompanySettings.InTMS;
	                                                   	  	
	Если ЗначениеЗаполнено(СтруктураCompanySettings.DefaultLegalEntity) Тогда 
		
		Если Объект.LegalEntity <> СтруктураCompanySettings.DefaultLegalEntity Тогда 
			Объект.LegalEntity = СтруктураCompanySettings.DefaultLegalEntity;
		КонецЕсли;
		
		Элементы.LegalEntity.ТолькоПросмотр = Истина;
		
	иначе
		
		LegalEntityCompany = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.LegalEntity, "ParentCompany");
		Если LegalEntityCompany <> Объект.Company Тогда
			Объект.LegalEntity = Неопределено;
		КонецЕсли;
	
		Элементы.LegalEntity.ТолькоПросмотр = Ложь;
		
	КонецЕсли; 
	       		
	Если СтруктураCompanySettings.InTMS Тогда 
		УстановитьОтборActivityПоCostCenter();
		//УстановитьОтборRechargeActivityПоRechargeCostCenter();
	КонецЕсли;	
	
	Возврат СтруктураCompanySettings;
	
КонецФункции

&НаСервере
Функция ОпределитьStage()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Перечисления.TransportRequestStages.Draft;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	StagesOfTransportRequests.Stage
		|ИЗ
		|	РегистрСведений.StagesOfTransportRequests КАК StagesOfTransportRequests
		|ГДЕ
		|	StagesOfTransportRequests.TransportRequest = &Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Stage;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура НастроитьСписокВыбораSpecialistsНаСервере()
	
	// { RGS AArsentev 31.07.2018
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	AU_Planners.Planner
	|ИЗ
	|	РегистрСведений.AU_Planners КАК AU_Planners
	|ГДЕ
	|	AU_Planners.AU = &AU";
	Запрос.УстановитьПараметр("AU", Объект.CostCenter);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		МассивСпециалистов = Результат.ВыгрузитьКолонку("Planner");
	Иначе
		МассивСпециалистов = РГСофтСерверПовтИспСеанс.ПолучитьМассивSpecialists();
	КонецЕсли;
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСпециалистов));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Specialist.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	//НовыйМассивПараметров = Новый Массив;
	//НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", 
	//РГСофтСерверПовтИспСеанс.ПолучитьМассивSpecialists()));
	//НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	//Элементы.Specialist.ПараметрыВыбора = НовыеПараметрыВыбора;
	// } RGS AArsentev 31.07.2018
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокCompaniesWithSettingsНаСервере()
	
	МассивCompaniesWithSettings = РГСофтСерверПовтИспСеанс.ПолучитьМассивCompaniesWithSettings();
	
	//Company 
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивCompaniesWithSettings));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.Company.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	//Legal entity
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ParentCompany", МассивCompaniesWithSettings));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.RechargeToLegalEntity.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры	

&НаСервере
Процедура НастроитьВидимостьЭлементов(ТекОбъект)
	
	Если Элементы.Найти("Accept") <> Неопределено Тогда 
		Элементы.Accept.Видимость = Не ТекОбъект.Проведен;
	КонецЕсли;
	
	Если Элементы.Найти("Cancel") <> Неопределено Тогда 
		Элементы.Cancel.Видимость = ТекОбъект.Проведен;
	КонецЕсли;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь; 
	РазрешеноРедактироватьAcceptedTR = РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies")
		ИЛИ РольДоступна("LocalDistributionSpecialist_ForNonLawsonCompanies")
		ИЛИ РольДоступна("LocalDistributionBillingSpecialist_ForNonLawsonCompanies");
	ДоступноРедактированиеRequestor = Не ЗначениеЗаполнено(ТекОбъект.AcceptedBySpecialistLocalTime) 
		И (ТекущийПользователь = ТекОбъект.Requestor 
		ИЛИ РольДоступна("LocalDistributionAdministrator_ForNonLawsonCompanies")
		ИЛИ РольДоступна("LocalDistributionBillingSpecialist_ForNonLawsonCompanies")
		ИЛИ (ЗначениеЗаполнено(Объект.ExportRequest) И РольДоступна("ImportExportSpecialist")));
		
	Если Элементы.Найти("Accept") <> Неопределено Тогда 
		Элементы.Accept.Доступность = РазрешеноРедактироватьAcceptedTR;
	КонецЕсли;
	
	Если Элементы.Найти("Cancel") <> Неопределено Тогда 
		Элементы.Cancel.Доступность = РазрешеноРедактироватьAcceptedTR;
	КонецЕсли;
	
	УточнитьПередЗакрытием = Не ЗначениеЗаполнено(Объект.RequestedLocalTime) 
		И Не ЗначениеЗаполнено(Объект.AcceptedBySpecialistLocalTime) 
		И Не РазрешеноРедактироватьAcceptedTR;

	Элементы.ReadyToShipLocalTime.Доступность = (ДоступноРедактированиеRequestor ИЛИ РазрешеноРедактироватьAcceptedTR);
	Элементы.RequiredDeliveryTime.Доступность = (ДоступноРедактированиеRequestor ИЛИ РазрешеноРедактироватьAcceptedTR);

	Элементы.ГруппаAddComment.Видимость = (Не ДоступноРедактированиеRequestor И Не РазрешеноРедактироватьAcceptedTR);	
	
	Элементы.Request.Доступность = ДоступноРедактированиеRequestor;	
	           		
	Попытка
		Элементы.ДокументTransportRequestSendOBToTMS.Видимость = Не Объект.SentToTMS;
		Элементы.ДокументTransportRequestCancelOBToTMS.Видимость = Объект.SentToTMS;
	Исключение
	КонецПопытки;
	
	НастроитьItemsНаСервере();
	
	НастроитьParcelsНаСервере();
	
	Trips.Параметры.УстановитьЗначениеПараметра("TransportRequest", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	// { RGS AArsentev S-I-0001855 06.09.2016 23:38:52
	Если ЗначениеЗаполнено(Объект.AcquisitionCost) Тогда
		Если Объект.AcquisitionCost = Перечисления.YesNo.Yes Тогда
			Элементы.InventoryPO.Видимость = Истина;
		Иначе
			Элементы.InventoryPO.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.InventoryPO.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev S-I-0001855 06.09.2016 23:38:52
	
	// { RGS AArsentev 26.07.2018 Multimodal copy
	Элементы.Multimodal.Видимость = РазрешеноРедактироватьAcceptedTR;
	// } RGS AArsentev 26.07.2018 Multimodal copy
	
	НастроитьВидимостьПоExportPurpose();
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	Если ЗначениеЗаполнено(Объект.Company) Тогда
		Элементы.ГруппаPickUp.Доступность = Истина;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.PickUpWarehouse) Тогда
		Элементы.ГруппаDeliverTo.Доступность = Истина;
	КонецЕсли;
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006036

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоExportPurpose()
	
	Элементы.ExportPurposeDescription.Видимость = Объект.ExportPurpose = Справочники.ExportPurposes.Other;
	// { RGS AArsentev 11.01.2018 S-I-0004118
	ExportPurpose_Return = Справочники.ExportPurposes.НайтиПоКоду("RET");
	
	Если Объект.Regime = Перечисления.PermanentTemporary.Temporary И ЗначениеЗаполнено(ExportPurpose_Return) И Объект.ExportPurpose = ExportPurpose_Return Тогда
		Элементы.PeriodOfTemporaryExport.Видимость = Ложь;
		Объект.PeriodOfTemporaryExport = Неопределено;
	ИначеЕсли Объект.CustomUnionTransaction И Объект.Regime = Перечисления.PermanentTemporary.Temporary Тогда
		Элементы.PeriodOfTemporaryExport.Видимость = Истина;
	Иначе
		Элементы.PeriodOfTemporaryExport.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev 11.01.2018 S-I-0004118
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	НастроитьВидимостьПоRecharge();
	НастроитьВидимостьCustomUnionTransaction();
	НастроитьВидимостьCanceledItems();
	НастроитьВидимостьCanceledParcels();
	
	// { RG-Soft LGoncharova 06.12.2018 S-I-0006255
	ДатаПриИзменении(Элементы.Дата);
	// } RG-Soft LGoncharova 06.12.2018 S-I-0006255
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не УточнитьПередЗакрытием Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемФормы", ЭтаФорма);
	
	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
		ТекстВопроса = "Заявка на доставку станет доступна специалисту после нажатия кнопки ""Request / запросить"" на вкладке
		|4) Reconciliation process / согласование заявки.
		|Закрыть заявку?";
	иначе
		ТекстВопроса = "Transport request will be available to specialist after it is requested on page
		|4) Reconciliation process / согласование заявки.
		|Close current request?";
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Закрытие формы");
				
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемФормы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УточнитьПередЗакрытием = Ложь;
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Если был изменен Parcel, на котором сейчас спозиционирован курсор
	// значит надо обновить нижнее поле Parcel lines
	Если ИмяСобытия = "ИзмененParcel" Тогда
		
		Если Элементы.Parcels.ТекущаяСтрока = Параметр Тогда
			Элементы.ParcelLines.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяCommentTR" Тогда 
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "OBSentToTMS" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "LoadItemsAndParcelsFromExcel" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0005813
	Если ИмяСобытия = "УбратьДоступностьКнопкиTabReturnToRequestor" Тогда
		Элементы.TabReturnToRequestor.Доступность = Ложь;
	КонецЕсли;			
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0005813
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.RequestedLocalTime) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Need to request document");
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.AcceptedBySpecialistLocalTime) Тогда 
			ТекущийОбъект.AcceptedBySpecialistLocalTime = ПолучитьТекущуюДатуСеанса();
			ТекущийОбъект.AcceptedBySpecialistUniversalTime = ПолучитьUniversalTime(ТекущийОбъект.AcceptedBySpecialistLocalTime);
		КонецЕсли;
		
	Иначе 
		
		ТекущийОбъект.AcceptedBySpecialistLocalTime = Неопределено;
		ТекущийОбъект.AcceptedBySpecialistUniversalTime = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДатуСеанса()
	
	Возврат НачалоМинуты(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.RequestedLocalTime) Тогда 
		 		
		Если НЕ ЗначениеЗаполнено(ReadyToShipLocalTime) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не заполнено местное время готовности груза к отправке!",
				, "ReadyToShipLocalTime", , Отказ);
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(RequiredDeliveryTime) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не заполнено требуемое время доставки (местное)!",
				, "RequiredDeliveryTime", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтаФорма.Прочитать();
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0005813
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Оповестить("УбратьДоступностьКнопкиTabReturnToRequestor",, ЭтаФорма);
	КонецЕсли;		
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0005813

КонецПроцедуры

////////////////////////////////////////////////////////////
// 1) ORIGIN DETAILS

&НаКлиенте
Процедура CompanyПриИзменении(Элемент)
	
	СтруктураCompanySettings = НастроитьВидимостьПоCompany();
	
	НастроитьВидимостьПоRecharge();

	// { RGS AArsentev S-I-0001800 22.08.2016 10:22:52
	ЗаполнитьЦентрЗатратПоТипуКомпании(SpecifyCostCenter, СтруктураCompanySettings);
	// } RGS AArsentev S-I-0001800 22.08.2016 10:22:52

	// { RGS AArsentev 13.04.2018
	УправлениеВидимостьюСервер();
	// } RGS AArsentev 13.04.2018
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	Если ЗначениеЗаполнено(Объект.Company) Тогда
		ЗаполнениеCountryDeliverToCountryНаОснованииCompany();
		Элементы.ГруппаPickUp.Доступность = Истина;
	КонецЕсли;
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	
КонецПроцедуры

&НаКлиенте
Процедура FromLegalEntityНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если company еще не заполнена
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда		
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Company / компания'!",
			, "Company", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Company / компания'!",
			, "Company", "Объект");
		КонецЕсли;

		СтандартнаяОбработка=Ложь;	
		
	КонецЕсли;
					
КонецПроцедуры

// Recharge

&НаКлиенте
Процедура RechargeПриИзменении(Элемент)
	
	НастроитьВидимостьПоRecharge();
		
КонецПроцедуры

&НаКлиенте
Процедура RechargeTypeПриИзменении(Элемент)
	
	НастроитьВидимостьПоRecharge();
	            	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьПоRecharge()
	
	Элементы.RechargeDetails.Видимость = Объект.Recharge;
	Элементы.RechargeType.Видимость = Объект.Recharge;
	            
	Элементы.ГруппаПолейRecharge.Видимость = Объект.Recharge;
	
	Элементы.InternalRecharge.Видимость = 
		(Объект.RechargeType = ПредопределенноеЗначение("Перечисление.RechargeType.Internal"));
		
	Элементы.ExternalRecharge.Видимость = 
		(Объект.RechargeType = ПредопределенноеЗначение("Перечисление.RechargeType.External"));
		
	Если Объект.RechargeType = ПредопределенноеЗначение("Перечисление.RechargeType.External")
		И ЗначениеЗаполнено(Объект.ProjectClient) 
		И Не ЗначениеЗаполнено(Объект.ClientForRecharge) Тогда
		Попытка
			Объект.ClientForRecharge = Объект.ProjectClient;
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////
// Cost Center

&НаКлиенте
Процедура CostCenterНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.SegmentLawson.Видимость И НЕ ЗначениеЗаполнено(Объект.SegmentLawson) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Сегмент'!",
			, "SegmentLawson", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Select 'Segment' first!",
			, "SegmentLawson", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
	//СтруктураПараметровОтбора.Вставить("NonLawson", NonLawsonCostCenter);
	Если ЗначениеЗаполнено(Объект.SegmentLawson) Тогда 
		СтруктураПараметровОтбора.Вставить("Segment", Объект.SegmentLawson);
	КонецЕсли;
	Если SpecifyCostCenter = ПредопределенноеЗначение("Перечисление.TypesOfCostCenters.CompanyCostCenters") Тогда
		СтруктураПараметровОтбора.Вставить("Ссылка", ЗаполнитьОтборПоCompanyCostCenters());
	КонецЕсли;
	СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.CostCenter);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();   	

КонецПроцедуры

&НаКлиенте
Процедура CostCenterАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		// { RGS AArsentev S-I-0004787 12.03.2018
		Если SpecifyCostCenter = ПредопределенноеЗначение("Перечисление.TypesOfCostCenters.CompanyCostCenters") Тогда
			ДанныеВыбора = ЗаполнитьДанныеВыбораCompanyCostCenters(Текст, Объект.Дата, Объект.Company);
		Иначе
		// } RGS AArsentev S-I-0004787 12.03.2018
			ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
			Если ЗначениеЗаполнено(Объект.SegmentLawson) Тогда 
				ПараметрыПолученияДанных.Отбор.Вставить("Segment", Объект.SegmentLawson);
			КонецЕсли;
			ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
			//ПараметрыПолученияДанных.Вставить("NonLawson", NonLawsonCostCenter);
			ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CostCenterОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если SpecifyCostCenter = ПредопределенноеЗначение("Перечисление.TypesOfCostCenters.CompanyCostCenters") Тогда
			ДанныеВыбора = ЗаполнитьДанныеВыбораCompanyCostCenters(Текст, Объект.Дата, Объект.Company);
		Иначе
			ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
			Если ЗначениеЗаполнено(Объект.SegmentLawson) Тогда 
				ПараметрыПолученияДанных.Отбор.Вставить("Segment", Объект.SegmentLawson);
			КонецЕсли;
			ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
			//ПараметрыПолученияДанных.Вставить("NonLawson", NonLawsonCostCenter);
			ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CostCenterПриИзменении(Элемент)
	
	УстановитьОтборActivityПоCostCenter();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборActivityПоCostCenter()
	
	Если Не ЗначениеЗаполнено(Объект.CostCenter) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("AUCode", СокрЛП(Объект.CostCenter));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	AUsActivityCodesСрезПоследних.ActivityCode.Ссылка КАК Activity
	|ИЗ
	|	РегистрСведений.AUsActivityCodes.СрезПоследних(&Дата, AUCode = &AUCode) КАК AUsActivityCodesСрезПоследних";
	
	МассивActivities = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Activity");
		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивActivities));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ActivityLawson.ПараметрыВыбора = НовыеПараметрыВыбора;	
	
КонецПроцедуры

&НаКлиенте
Процедура RechargeToAUПриИзменении(Элемент)
	
	//УстановитьОтборRechargeActivityПоRechargeCostCenter();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборRechargeActivityПоRechargeCostCenter()
	
	Если Не ЗначениеЗаполнено(Объект.RechargeToAU) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("AUCode", СокрЛП(Объект.RechargeToAU));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	AUsActivityCodesСрезПоследних.ActivityCode.Ссылка КАК Activity
	|ИЗ
	|	РегистрСведений.AUsActivityCodes.СрезПоследних(&Дата, AUCode = &AUCode) КАК AUsActivityCodesСрезПоследних";
	
	МассивActivities = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Activity");
		
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивActivities));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.RechargeToActivity.ПараметрыВыбора = НовыеПараметрыВыбора;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// Activity Lawson

&НаКлиенте
Процедура ActivityLawsonНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.CostCenter) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Центр затрат'!",
			, "CostCenter", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Select 'Cost Center' first!",
			, "CostCenter", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RechargeToActivityНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//Если НЕ ЗначениеЗаполнено(Объект.RechargeToAU) Тогда
	//	
	//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Сначала выберите 'Центр затрат для перевыставления'!",
	//		, "RechargeToAU", "Объект");
	//	иначе
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Select 'Recharge cost Center' first!",
	//		, "RechargeToAU", "Объект");
	//	КонецЕсли;
	//	
	//	СтандартнаяОбработка=Ложь;
	//	
	//КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////
// Project

&НаКлиенте
Процедура ProjectMobilizationНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProjectClient) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Заказчика'!",
			, "ProjectClient", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Select 'Client' first!",
			, "ProjectClient", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////
// Pick-Up From

&НаКлиенте
Процедура CountryПриИзменении(Элемент)
		
	// Custom Union Transaction
	Объект.CustomUnionTransaction = ЭтоCustomUnionTransaction();
	
	CountryAZ = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.AZ"); // S-I-0002174 AZ (только внутри AZ)
	Если Не ЗначениеЗаполнено(Объект.DeliverToCountry) И Объект.Country = CountryAZ Тогда    
		Объект.DeliverToCountry = CountryAZ;
	КонецЕсли;
	
	// { RGS AArsentev 31.05.2018 только внутри GE
	CountryGE = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.GE"); 
	Если Не ЗначениеЗаполнено(Объект.DeliverToCountry) И Объект.Country = CountryGE Тогда
		Объект.DeliverToCountry = CountryGE;
	КонецЕсли;
	// } RGS AArsentev 31.05.2018
	
	CountryTM = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.TM"); // S-I-0002694 TM (только внутри TM)
	Если Не ЗначениеЗаполнено(Объект.DeliverToCountry) И Объект.Country = CountryTM Тогда    
		Объект.DeliverToCountry = CountryTM;
	КонецЕсли;
	
	НастроитьВидимостьCustomUnionTransaction();

КонецПроцедуры

&НаКлиенте
Функция ЭтоCustomUnionTransaction()
	
	Возврат ЗначениеЗаполнено(Объект.DeliverToCountry) И ЗначениеЗаполнено(Объект.Country)
		И Объект.DeliverToCountry <> Объект.Country 
		И Объект.DeliverToCountry <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.AZ") 
		И Объект.Country <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.AZ")
		И Объект.DeliverToCountry <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.TM") 
		И Объект.Country <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.TM")
		// { RGS AArsentev 31.05.2018
		И Объект.DeliverToCountry <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.GE") 
		И Объект.Country <> ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.GE");
		// } RGS AArsentev 31.05.2018
		
КонецФункции

// S-I-0002174 AZ (только внутри AZ)

&НаКлиенте
Процедура CountryНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.DeliverToCountry);
	
КонецПроцедуры

&НаКлиенте
Процедура CountryАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.DeliverToCountry);
		
КонецПроцедуры

&НаКлиенте
Процедура CountryОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.DeliverToCountry);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToCountryНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.Country);

КонецПроцедуры

&НаКлиенте
Процедура DeliverToCountryАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.Country);
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToCountryОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ПолучитьСписокCountries(Объект.Country);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокCountries(Country)
	
	СписокCountries = Новый СписокЗначений;
	CountryAZ = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.AZ");
	CountryTM = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.TM");
	// { RGS AArsentev 31.05.2018
	CountryGE = ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.GE");
	// } RGS AArsentev 31.05.2018
	
	Если Country = CountryAZ ИЛИ Country = CountryTM ИЛИ Country = CountryGE Тогда    		                          		
		
		СписокCountries.Добавить(Country);				
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.Country) И Не ЗначениеЗаполнено(Объект.DeliverToCountry) Тогда
			СписокCountries.Добавить(CountryAZ);
			СписокCountries.Добавить(CountryTM);
			// { RGS AArsentev 31.05.2018
			СписокCountries.Добавить(CountryGE);
			// } RGS AArsentev 31.05.2018
		КонецЕсли;
		
		СписокCountries.Добавить(ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.RU"));
		СписокCountries.Добавить(ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.KZ"));
		СписокCountries.Добавить(ПредопределенноеЗначение("Справочник.CountriesOfProcessLevels.BY"));
		
	КонецЕсли;

	Возврат СписокCountries;
	
КонецФункции


&НаКлиенте
Процедура PickUpFromНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		  		
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	//// Запретим выбор, если не заполнена Country
	//Если НЕ ЗначениеЗаполнено(Объект.Country) Тогда
	//	
	//	Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"Сначала выберите 'Country code / Код страны'!",
	//		, "Country", "Объект");
	//	иначе
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"First select 'Country code / Код страны'!",
	//		, "Country", "Объект");
	//	КонецЕсли;
	//	
	//	СтандартнаяОбработка = Ложь;
	//	
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сначала выберите 'Код компании'!", , "Company", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("First select 'Company code'!", , "Company", "Объект");
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Список = Новый Массив;
	Список.Добавить(Объект.Country);
	ПараметрДляОтбора = Новый Структура("СписокДляОтбора", Список);
	ОткрытьФорму("Справочник.Warehouses.Форма.ФормаВыбора", ПараметрДляОтбора, Элемент);
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006036

КонецПроцедуры

&НаКлиенте
Процедура PickUpFromПриИзменении(Элемент)
	
	Объект.ReadyToShipUniversalTime = ПолучитьUniversalTime(Объект.ReadyToShipLocalTime, Объект.PickUpWarehouse);
	
	Если НЕ ЗначениеЗаполнено(Объект.PickUpWarehouse) Тогда
		Возврат;
	КонецЕсли;

	СтруктураКонтактныхДанныхWarehouse = ПолучитьСтруктуруКонтактныхДанныхWarehouse(Объект.PickUpWarehouse);
	
	Если ЗначениеЗаполнено(Объект.PickUpFromAddress) 
		ИЛИ ЗначениеЗаполнено(Объект.PickUpFromContact)
		ИЛИ ЗначениеЗаполнено(Объект.PickUpFromEmail)
		ИЛИ ЗначениеЗаполнено(Объект.PickUpFromPhone) Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеПоPickUpFrom", ЭтаФорма, СтруктураКонтактныхДанныхWarehouse);
		ПоказатьВопрос(Оповещение, "Update contacts? / Перезаполнить контактные данные из локации (склада)?", РежимДиалогаВопрос.ДаНет,,, "Заполнение контактных данных");
	иначе
		ЗаполнитьКонтактныеДанныеPickUpFrom(СтруктураКонтактныхДанныхWarehouse);
	КонецЕсли;

	Объект.Milage	= ргМодульКартографии.ВычислитьРасстояние(Объект.PickUpWarehouse, Объект.DeliverTo);
	
	
	// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	Если ЗначениеЗаполнено(Объект.PickUpWarehouse) Тогда
		Элементы.ГруппаDeliverTo.Доступность = Истина;
	КонецЕсли;
	// } RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеПоPickUpFrom(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    ЗаполнитьКонтактныеДанныеPickUpFrom(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактныеДанныеPickUpFrom(СтруктураКонтактныхДанныхWarehouse) Экспорт
	                             
	Объект.PickUpFromAddress = СтруктураКонтактныхДанныхWarehouse.AddressRus;
	Объект.PickUpFromContact = СтруктураКонтактныхДанныхWarehouse.ContactName;
	Объект.PickUpFromEmail = СтруктураКонтактныхДанныхWarehouse.ContactEMail;
	Объект.PickUpFromPhone = СтруктураКонтактныхДанныхWarehouse.ContactPhone;
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// Deliver-To

&НаКлиенте
Процедура DeliverToCountryПриИзменении(Элемент)
	
	Объект.CustomUnionTransaction = ЭтоCustomUnionTransaction();
		
	НастроитьВидимостьCustomUnionTransaction();
	
КонецПроцедуры

&НаКлиенте
Процедура DeliverToНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	// Запретим выбор, если не заполнена Country
	Если НЕ ЗначениеЗаполнено(Объект.DeliverToCountry) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Country code / код страны назначения'!",
			, "DeliverToCountry", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Country code / код страны назначения'!",
			, "DeliverToCountry", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура DeliverToПриИзменении(Элемент)
	
	Объект.RequiredDeliveryUniversalTime = ПолучитьUniversalTime(Объект.RequiredDeliveryLocalTime, Объект.DeliverTo);
	
	Если НЕ ЗначениеЗаполнено(Объект.DeliverTo) Тогда
		Возврат;
	КонецЕсли;

	СтруктураКонтактныхДанныхWarehouse = ПолучитьСтруктуруКонтактныхДанныхWarehouse(Объект.DeliverTo);
	
	Если ЗначениеЗаполнено(Объект.DeliverToAddress) 
		ИЛИ ЗначениеЗаполнено(Объект.DeliverToContact)
		ИЛИ ЗначениеЗаполнено(Объект.DeliverToEmail)
		ИЛИ ЗначениеЗаполнено(Объект.DeliverToPhone) Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнениеПоDeliverTo", ЭтаФорма, СтруктураКонтактныхДанныхWarehouse);
		ПоказатьВопрос(Оповещение, "Update contacts? / Перезаполнить контактные данные из локации (склада)?", РежимДиалогаВопрос.ДаНет,,, "Заполнение контактных данных");
	иначе
		ЗаполнитьКонтактныеДанныеDeliverTo(СтруктураКонтактныхДанныхWarehouse);
	КонецЕсли;
	
	Объект.Milage	= ргМодульКартографии.ВычислитьРасстояние(Объект.PickUpWarehouse, Объект.DeliverTo);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнениеПоDeliverTo(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    ЗаполнитьКонтактныеДанныеDeliverTo(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактныеДанныеDeliverTo(СтруктураКонтактныхДанныхWarehouse) Экспорт
	                             
	Объект.DeliverToAddress = СтруктураКонтактныхДанныхWarehouse.AddressRus;
	Объект.DeliverToContact = СтруктураКонтактныхДанныхWarehouse.ContactName;
	Объект.DeliverToEmail = СтруктураКонтактныхДанныхWarehouse.ContactEMail;
	Объект.DeliverToPhone = СтруктураКонтактныхДанныхWarehouse.ContactPhone;
	
КонецПроцедуры

// ReadyToShip

&НаКлиенте
Процедура ReadyToShipLocalDateПриИзменении(Элемент)
	
	ПриИзмененииReadyToShipLocalTime();

КонецПроцедуры

&НаКлиенте
Процедура ReadyToShipLocalTimeПриИзменении(Элемент)
	
	ПриИзмененииReadyToShipLocalTime();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииReadyToShipLocalTime()
	
	ВремяСтрокой = Формат(ReadyToShipLocalTime, "ДФ=HHmm");
	ДатаСтрокой = Формат(Объект.ReadyToShipLocalTime, "ДФ='yyyyMMdd'");
	
	ДатаПлюсВремя = ДатаСтрокой + ВремяСтрокой;
	
	Объект.ReadyToShipLocalTime = ДатаПлюсВремя;
	
	Объект.ReadyToShipUniversalTime = ПолучитьUniversalTime(
		Объект.ReadyToShipLocalTime, Объект.PickUpWarehouse);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ReadyToShipLocalDateНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.PickUpWarehouse) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Pick-up From / место отправления'!",
			, "PickUpWarehouse", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Pick-up From / место отправления'!",
			, "PickUpWarehouse", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// RequiredDelivery

&НаКлиенте
Процедура RequiredDeliveryDateПриИзменении(Элемент)
	
	ПриИзмененииRequiredDeliveryLocalTime();
    	
КонецПроцедуры

&НаКлиенте
Процедура RequiredDeliveryTimeПриИзменении(Элемент)
	
	ПриИзмененииRequiredDeliveryLocalTime();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииRequiredDeliveryLocalTime()
	
	ВремяСтрокой = Формат(RequiredDeliveryTime, "ДФ=HHmm");
	ДатаСтрокой = Формат(Объект.RequiredDeliveryLocalTime, "ДФ='yyyyMMdd'");
	
	ДатаПлюсВремя = ДатаСтрокой + ВремяСтрокой;
	
	Объект.RequiredDeliveryLocalTime = ДатаПлюсВремя;
	
	Объект.RequiredDeliveryUniversalTime = ПолучитьUniversalTime(
		Объект.RequiredDeliveryLocalTime, Объект.DeliverTo); 	
	
КонецПроцедуры

&НаКлиенте
Процедура RequiredDeliveryDateНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.DeliverTo) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Deliver-to / место доставки'!",
			, "DeliverTo", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Deliver-to / место доставки'!",
			, "DeliverTo", "Объект");
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////
// 3) ITEMS

&НаСервере
Процедура НастроитьItemsНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ItemsСписок.Отбор,
		"TransportRequest",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.ПометкаУдаления Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Нельзя добавить товары в заявку, которая помечена на удаление!",
			, , , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"It is not allowed to add items into marked for deletion request!",
			, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Company / компания'!",
			, "Company", "Объект", Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Company / компания'!",
			, "Company", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
				
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	        		
КонецПроцедуры

////////////////////////////////////////////////////////////
// 4) PARCELS

&НаСервере
Процедура НастроитьParcelsНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Parcels.Отбор,
		"TransportRequest",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,	
		,
		Истина);
				
	ОбновитьПодвалParcels(Объект.Ссылка, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, ParcelsCubicMeters, ParcelsTotalQty, ParcelsQtyNotDelivered);
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.ПометкаУдаления Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Нельзя добавить грузовые места в заявку, которая помечена на удаление!",
			, , , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"It is not allowed to add parcels into marked for deletion request!",
			, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Company) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Company / компания'!",
			, , , Отказ);
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Company / компания'!",
			, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьПодвалParcels(Объект.Ссылка, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, ParcelsCubicMeters, ParcelsTotalQty, ParcelsQtyNotDelivered);
	КонецЕсли;
	
	//{ RGS AArsentev S-I-0001983 18.10.2016
	Если Не Объект.ПометкаУдаления Тогда 
		ЭтотОбъект.Записать();
	КонецЕсли;
	//} RGS AArsentev S-I-0001983 18.10.2016
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПриАктивизацииСтроки(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ParcelLines.Отбор,
		"Ссылка",
		Элемент.ТекущаяСтрока,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПодвалParcels(TransportRequest, ParcelsGrossWeightKg, ParcelsNetWeightKg, ParcelsChargeableWeight, 
	ParcelsCubicMeters, ParcelsTotalQty, ParcelsQtyNotDelivered)
	
	ParcelsCubicMeters = 0;
	ParcelsGrossWeightKG = 0;           
	ParcelsNetWeightKG = 0;
	ParcelsChargeableWeight = 0;
	ParcelsTotalQty = 0;
	ParcelsQtyNotDelivered = 0;
	
	Если НЕ ЗначениеЗаполнено(TransportRequest) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("TransportRequest", TransportRequest);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Parcels.CubicMeters) КАК CubicMeters,
		|	СУММА(Parcels.GrossWeightKG) КАК GrossWeightKG,
		|	СУММА(Parcels.NetWeightKG) КАК NetWeightKG,
		|	СУММА(Parcels.ChargeableWeight) КАК ChargeableWeight,
		|	СУММА(Parcels.NumOfParcels) КАК ParcelsTotalQty,
		// { RGS AArsentev 29.03.2018 Не корректно отображались остатки, в динамическом списке Parcels, также изменил
		//|	СУММА(ЕСТЬNULL(ParcelsOfTransportRequestsWithoutShipmentОстатки.NumOfParcelsОстаток, Parcels.NumOfParcels)) КАК ParcelsQtyNotDelivered
		|	СУММА(ЕСТЬNULL(ParcelsOfTransportRequestsWithoutShipmentОстатки.NumOfParcelsОстаток, 0)) КАК ParcelsQtyNotDelivered
		// } RGS AArsentev 29.03.2018 Не корректно отображались остатки
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ParcelsOfTransportRequestsWithoutShipment.Остатки КАК ParcelsOfTransportRequestsWithoutShipmentОстатки
		|		ПО Parcels.Ссылка = ParcelsOfTransportRequestsWithoutShipmentОстатки.Parcel
		|ГДЕ
		|	НЕ Parcels.ПометкаУдаления
		|	И Parcels.TransportRequest = &TransportRequest";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ParcelsCubicMeters = Выборка.CubicMeters;
		ParcelsGrossWeightKG = Выборка.GrossWeightKG;           
		ParcelsNetWeightKG = Выборка.NetWeightKG;
		ParcelsChargeableWeight = Выборка.ChargeableWeight;
		ParcelsTotalQty = Выборка.ParcelsTotalQty;
		ParcelsQtyNotDelivered = Выборка.ParcelsQtyNotDelivered;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// REQUEST

&НаКлиенте
Процедура Request(Команда)
	
	// { RGS ASeryakov 20.03.18	S-I-0004835
	ОткрытьФорму("Документ.TransportRequest.Форма.ФормаУведомления",, ЭтотОбъект,,,,
	Новый ОписаниеОповещения("ВывестиУведомлениеЗавешение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	//Объект.RequestedLocalTime = ПолучитьТекущуюДатуСеанса();
	//Объект.RequestedUniversalTime = ПолучитьUniversalTime(Объект.RequestedLocalTime);
	//
	//Попытка
	//	
	//	Записать();
	//	
	//	ПоказатьОповещениеПользователя(
	//		"Success / Успешное выполнение",
	//		,
	//		"Заявка успешно сохранена для специалиста.");
	//		
	//Исключение
	//	
	//	Объект.RequestedLocalTime = Неопределено;
	//	Объект.RequestedUniversalTime = Неопределено;
	//	
	//	ПоказатьОповещениеПользователя(
	//		"Error / Ошибка",
	//		,
	//		"Не удалось сохранить заявку для специалиста.");
	//		
	//КонецПопытки;
	// } RGS ASeryakov 20.03.18 S-I-0004835
	
КонецПроцедуры

// { RGS ASeryakov 20.03.18 S-I-0004835
&НаКлиенте
Процедура ВыполнитьКомандуRequest()
	
	Объект.RequestedLocalTime = ПолучитьТекущуюДатуСеанса();
	Объект.RequestedUniversalTime = ПолучитьUniversalTime(Объект.RequestedLocalTime);
	
	// { RGS AFokin 09.09.2018 23:59:59 S-I-0005813
	Объект.ReturnToRequestor = Ложь;
	Объект.DateRequested = '00010101';
	Объект.ReasonForReturn = Неопределено;
	// } RGS AFokin 09.09.2018 23:59:59 S-I-0005813
		
	Ошибка = Ложь;
		
	ЗаписатьНаСервере(Ошибка);
			
	Если НЕ Ошибка Тогда
				ПоказатьОповещениеПользователя(
			"Success / Успешное выполнение",
			,
			"Заявка успешно сохранена для специалиста.");
	Иначе
		 Объект.RequestedLocalTime = Неопределено;
		Объект.RequestedUniversalTime = Неопределено;
		
		ПоказатьОповещениеПользователя(
			"Error / Ошибка",
			,
			"Не удалось сохранить заявку для специалиста.")
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьКомандуRequest()

&НаСервере
Процедура ЗаписатьНаСервере(Ошибка)
	
	Попытка		
		Записать(Новый Структура);
	Исключение
		Ошибка = Истина;
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиУведомлениеЗавешение(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат = Неопределено И Результат Тогда
	
		ВыполнитьКомандуRequest();
	
	КонецЕсли;	

КонецПроцедуры // ВывестиУведомлениеЗавершение()
// { RGS ASeryakov 20.03.18 S-I-0004835

////////////////////////////////////////////////////////////
//// 5) Trips / Поставки

&НаКлиенте
Процедура TripsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Trips.ТекущиеДанные;	
	
	Если ТекДанные <> Неопределено Тогда 
		ПоказатьЗначение(, ТекДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////
//// Send OB to TMS

&НаКлиенте
Процедура SendOBToTMS(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура CancelOBToTMS(Команда)
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////
//// ОБЩИЕ

&НаСервереБезКонтекста
Функция ПолучитьUniversalTime(LocalTime, Warehouse=Неопределено)
	
	Возврат LocalDistributionForNonLawsonСервер.ПолучитьUniversalTime(LocalTime, Warehouse);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруКонтактныхДанныхWarehouse(Warehouse)
	
	СтруктураКонтактныхДанныхWarehouse = Новый Структура("AddressRus,ContactName,ContactPhone,ContactEMail");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Warehouses.ContactName,
	|	Warehouses.ContactPhone,
	|	Warehouses.ContactEMail,
	|	Warehouses.AddressRus
	|ИЗ
	|	Справочник.Warehouses КАК Warehouses
	|ГДЕ
	|	Warehouses.Ссылка = &Warehouse";
	
	Запрос.УстановитьПараметр("Warehouse", Warehouse);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	
	СтруктураКонтактныхДанныхWarehouse.AddressRus = Выборка.AddressRus;
	СтруктураКонтактныхДанныхWarehouse.ContactName = Выборка.ContactName;
	СтруктураКонтактныхДанныхWarehouse.ContactPhone = Выборка.ContactPhone;
	СтруктураКонтактныхДанныхWarehouse.ContactEMail = Выборка.ContactEMail;
	
	Возврат СтруктураКонтактныхДанныхWarehouse;	
	
КонецФункции    

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаParcels Тогда 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ParcelLines.Отбор,
			"Ссылка",
			Неопределено,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
				
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьCustomUnionTransaction()
	
	Элементы.ConsignTo.Видимость = Объект.CustomUnionTransaction;
	Элементы.Shipper.Видимость = Объект.CustomUnionTransaction;	
	//Элементы.Incoterms.Видимость = Объект.CustomUnionTransaction;
	//Элементы.Regime.Видимость = Объект.CustomUnionTransaction;
	//Элементы.ГруппаExport.Видимость = Объект.CustomUnionTransaction;	
	//{ RGS AArsentev S-I-0003146 31.05.2017 18:30:15
	Элементы.ГруппаCustomUnion.Видимость = Объект.CustomUnionTransaction;
	// { RGS AFokin 04.10.2018 23:59:59 - S-I-0006036
	Элементы.CustomUnionTransaction.Видимость = Объект.CustomUnionTransaction;
	// } RGS AFokin 04.10.2018 23:59:59 - S-I-0006036
	//{ RGS AArsentev S-I-0003146 31.05.2017 18:30:15
	// { RGS AArsentev 11.01.2018 S-I-0004118
	НастроитьВидимостьПоRegime();
	// } RGS AArsentev 11.01.2018 S-I-0004118
	// { RGS AArsentev 13.04.2018
	УправлениеВидимостьюСервер();
	// } RGS AArsentev 13.04.2018
	
КонецПроцедуры

// { RGS AArsentev S-I-0001712 26.07.2016 11:22:52
&НаКлиенте
Процедура rgsCreateParcelsFromHistory(Команда)	
	
	Если Элементы.Items.ТекущаяСтрока = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Message = New UserMessage();
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Message.Text = "Необходимо записать документ.";
		иначе
			Message.Text = "First save document.";
		КонецЕсли;
		Message.Message();
		Возврат;
	КонецЕсли;
	
	СтруктураСвойств = LocalDistributionForNonLawsonСервер.CreateParcelsFromHistory(Элементы.Items.ТекущаяСтрока, Объект.Ссылка, Объект.Номер);
	           		
	Если СтруктураСвойств <> Неопределено Тогда 
		
		СтруктураСвойств.Вставить("СтрокаИнвойса", Элементы.Items.ТекущаяСтрока);
		ОткрытьФорму("Справочник.Parcels.Форма.ФормаЭлементаДляTransportRequest", Новый Структура("ЗначенияЗаполнения", СтруктураСвойств));
		
	КонецЕсли;
	
КонецПроцедуры  

// { RGS AArsentev S-I-0001800 22.08.2016 10:22:52    
&НаСервере
Функция ЗаполнитьПоСегменту()

	Если ЗначениеЗаполнено(Объект.Segment) Тогда
		Объект.CostCenter = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Segment, "CostCenter");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоFromLegalEntity_ProductLine()
	
	Если ЗначениеЗаполнено(Объект.ProductLine)  Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	AUsAndLegalEntitiesAndSegmentsСрезПоследних.LegalEntity,
		|	AUsAndLegalEntitiesAndSegmentsСрезПоследних.AU
		|ИЗ
		|	РегистрСведений.AUsAndLegalEntitiesAndSegments.СрезПоследних(
		|			&Дата,
		|			ParentCompany = &Company
		|				И Segment = &Segment
		|				И LegalEntity = &LegalEntity) КАК AUsAndLegalEntitiesAndSegmentsСрезПоследних";
		Запрос.УстановитьПараметр("Дата",Объект.Дата);
		Запрос.УстановитьПараметр("Company",Объект.Company);
		Запрос.УстановитьПараметр("Segment",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ProductLine, "Segment"));
		Запрос.УстановитьПараметр("LegalEntity",Объект.LegalEntity);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество()>0 Тогда
			Объект.CostCenter = Результат[0].AU;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ProductLineПриИзменении(Элемент)
	
	Если SpecifyCostCenter = ПредопределенноеЗначение("Перечисление.TypesOfCostCenters.FromLegalEntity_ProductLine") Тогда
		Объект.CostCenter = Неопределено;
		ЗаполнитьПоFromLegalEntity_ProductLine();
	КонецЕсли;
	
	// { RGS AArsentev 13.04.2018
	//НастроитьВидимостьAgreement();
	УправлениеВидимостьюСервер();
	// } RGS AArsentev 13.04.2018
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтборПоCompanyCostCenters()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.УстановитьПараметр("Company",Объект.Company);

	Запрос.Текст = "ВЫБРАТЬ
	               |	CompaniesСostСentersСрезПоследних.CostCenter
	               |ИЗ
	               |	РегистрСведений.CompaniesСostСenters.СрезПоследних(
	               |			&Дата,
	               |			Company = &Company
	               |				И НЕ CostCenter.ПометкаУдаления) КАК CompaniesСostСentersСрезПоследних";
	
	МассивCostCenter = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("CostCenter");
	
	СписокCostCenter = Новый СписокЗначений;
	СписокCostCenter.ЗагрузитьЗначения(МассивCostCenter);	
	
	Возврат СписокCostCenter;
	
КонецФункции

&НаКлиенте
Процедура SegmentПриИзменении(Элемент)	 
	
	Если SpecifyCostCenter = ПредопределенноеЗначение("Перечисление.TypesOfCostCenters.FromSegment") Тогда
		ЗаполнитьПоСегменту();
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция ЗаполнитьЦентрЗатратПоТипуКомпании(SpecifyCostCenter, СтруктураCompanySettings)
	
	Если SpecifyCostCenter = Перечисления.TypesOfCostCenters.FromSegment Тогда
		
		ЗаполнитьПоСегменту();
		
	ИначеЕсли SpecifyCostCenter = Перечисления.TypesOfCostCenters.DefaultCostCenter Тогда
		
		Объект.CostCenter = СтруктураCompanySettings.DefaultCostCenter;
		
	ИначеЕсли SpecifyCostCenter = Перечисления.TypesOfCostCenters.FromLegalEntity_ProductLine Тогда
		
		ЗаполнитьПоFromLegalEntity_ProductLine();
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура AcquisitionCostПриИзменении(Элемент)
	
	Если Объект.AcquisitionCost = ПредопределенноеЗначение("Перечисление.YesNo.Yes") Тогда
		Элементы.InventoryPO.Видимость = Истина;
	Иначе
		Элементы.InventoryPO.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ProjectClientНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	Заказчики = ProjectClientНачалоВыбораНаСервере();
	
	Форма = ПолучитьФорму("Справочник.КонтрагентыLawson.ФормаВыбора",,Элемент);
	
	Форма.Список.Отбор.Элементы.Очистить();
	ЭлОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));  
	ЭлОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбора.Использование  = Истина;
	ЭлОтбора.ПравоеЗначение = Заказчики;  
	Форма.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ProjectClientНачалоВыбораНаСервере(СтрокаПоиска = Неопределено)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ProjectMobilization.ProjectClient.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ProjectMobilization КАК ProjectMobilization
	|ГДЕ
	|	НЕ ProjectMobilization.ПометкаУдаления
	|	И НЕ ProjectMobilization.ProjectClient.ПометкаУдаления";
	
	// { RGS AArsentev S-I-0004787 12.03.2018
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Запрос.Текст = Запрос.Текст + " 
		| И ProjectMobilization.ProjectClient.Наименование ПОДОБНО &Наименование";
		Запрос.УстановитьПараметр("Наименование", СтрокаПоиска + "%");
	КонецЕсли;
	// } RGS AArsentev S-I-0004787 12.03.2018
	
	МассивProjectClient = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивProjectClient;	
	
КонецФункции

&НаКлиенте
Процедура ProjectClientПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ProjectClient) Тогда 
		Проект = ProjectClientПриИзмененииНаСервере(Объект.ProjectClient);
		Если Проект <> Неопределено Тогда
			Объект.ProjectMobilization = Проект;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ProjectClientПриИзмененииНаСервере(ProjectClient)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ProjectMobilization.Ссылка
	|ИЗ
	|	Справочник.ProjectMobilization КАК ProjectMobilization
	|ГДЕ
	|	ProjectMobilization.ProjectClient = &ProjectClient
	|	И НЕ ProjectMobilization.ПометкаУдаления";
	Запрос.УстановитьПараметр("ProjectClient", ProjectClient);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ProjectClientАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
		СписокClients = Новый СписокЗначений;
		СписокClients.ЗагрузитьЗначения(ProjectClientНачалоВыбораНаСервере(Текст));
		ДанныеВыбора = СписокClients;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ProjectClientОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления", Ложь);
		СписокClients = Новый СписокЗначений;
		СписокClients.ЗагрузитьЗначения(ProjectClientНачалоВыбораНаСервере(Текст));
		ДанныеВыбора = СписокClients;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ShowCanceledParcels(Команда)
	
	ShowCanceledParcels = Не ShowCanceledParcels;
	НастроитьВидимостьCanceledParcels();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьCanceledParcels()
	
	Если Не ShowCanceledParcels Тогда 
		Элементы.ParcelsShowCanceledParcels.Заголовок = НСтр("ru = 'Показать удаленные'; en = 'Show deleted!'"); 
	иначе
		Элементы.ParcelsShowCanceledParcels.Заголовок = НСтр("ru = 'Скрыть удаленные'; en = 'Hide deleted!'");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Parcels.Отбор,
		"ПометкаУдаления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,	
		,
		Не ShowCanceledParcels);
	
КонецПроцедуры

&НаКлиенте
Процедура ShowCanceledItems(Команда)
	
	ShowCanceledItems = Не ShowCanceledItems;
	НастроитьВидимостьCanceledItems();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьCanceledItems()
	
	Если Не ShowCanceledItems Тогда 
		Элементы.ItemsShowCanceledItems.Заголовок = НСтр("ru = 'Показать удаленные'; en = 'Show deleted!'"); 
	иначе
		Элементы.ItemsShowCanceledItems.Заголовок = НСтр("ru = 'Скрыть удаленные'; en = 'Hide deleted!'");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ItemsСписок.Отбор,
		"ПометкаУдаления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,	
		,
		Не ShowCanceledItems);
	
КонецПроцедуры

&НаКлиенте
Процедура ExportPurposeПриИзменении(Элемент)
	
	 НастроитьВидимостьПоExportPurpose();
	
КонецПроцедуры

&НаКлиенте
Процедура LinkForExcelTemplateНажатие(Элемент)
	
	//#Если ВебКлиент Тогда 
	//	
	//	СисИнфо = Новый СистемнаяИнформация;
	//	
	//	ВебБраузер = СисИнфо.ИнформацияПрограммыПросмотра;
	//	
	//	Если СтрЧислоВхождений(ВРег(ВебБраузер), "MSIE") > 0 
	//		ИЛИ СтрЧислоВхождений(ВРег(ВебБраузер), "TRIDENT") > 0 Тогда
	//		
	//		ВебБраузер = "MSIE";
	//		
	//	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "FIREFOX") > 0 Тогда
	//		
	//		ВебБраузер = "FIREFOX";
	//		
	//	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "CHROME") > 0 Тогда
	//		
	//		ВебБраузер = "CHROME";
	//		
	//	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "SAFARI") > 0 Тогда 
	//		
	//		ВебБраузер = "SAFARI";
	//		
	//	КонецЕсли;
	//	
	//	Если ВебБраузер = "FIREFOX" Тогда
	//		ПерейтиПоНавигационнойСсылке("http://teamspace.slb.com/sites/TMCRussiaCentralAsia/Shared%20Documents/03_RIET/Module%20for%20Non-Lawson%20Companies/");
	//	Иначе
	//		Выполнил = Ложь;
	//		СтандартнаяОбработка = Ложь;
	//		ДополнительныеПараметры = Новый Структура;
	//		ДополнительныеПараметры.Вставить("ВыборЗавершение", Новый ОписаниеОповещения("ВложениеВыборЗавершение", ЭтотОбъект));
	//		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	//	КонецЕсли;
	//#Иначе                           file://ru0149app35/03_RIET_Module_for_Non-Lawson_Companies/TR template.xlsm
	//#Если ВебКлиент Тогда
	Попытка
		Адрес = ПолучитьФайлССервера();
		Если Адрес <> Неопределено Тогда
			ИмяФайла = "TR_template.xlsm";
			ПолучитьФайл(Адрес, ИмяФайла);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт

	Если Не Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыборЗавершение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        НачатьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры.ВыборЗавершение);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВложениеВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Адрес = СкачатьНаСервер();
	Если Адрес <> Неопределено Тогда
		ИмяФайла = "TR template.xlsm";
		ПолучитьФайл(Адрес, ИмяФайла);
	Иначе
		ПерейтиПоНавигационнойСсылке("http://teamspace.slb.com/sites/TMCRussiaCentralAsia/Shared%20Documents/03_RIET/Module%20for%20Non-Lawson%20Companies/");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкачатьНаСервер()
	
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("xlsm");
	Попытка
		АдресНаСайте = "http://teamspace.slb.com/sites/TMCRussiaCentralAsia/Shared%20Documents/03_RIET/Module%20for%20Non-Lawson%20Companies/TR%20template.xlsm";
		КопироватьФайл (АдресНаСайте, ИмяФайлаВременное);
		Двоичное = Новый ДвоичныеДанные(ИмяФайлаВременное);
		Адрес = ПоместитьВоВременноеХранилище(Двоичное);
		
		УдалитьФайлы(ИмяФайлаВременное);
		Возврат Адрес;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////////////////////
// SAVE TMS TR AS XML

&НаКлиенте
Процедура SaveAsXML(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда    		          				
		Сообщить("Transport request is not saved!");
		Возврат; 			     				
	КонецЕсли;
        		
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
	ДиалогВыбораФайла.Фильтр = "XML files|*.xml";	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;	
	PathToXML = ДиалогВыбораФайла.ПолноеИмяФайла;
	
	АдресФайла = SaveAsXMLНаСервере();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(PathToXML);
		
КонецПроцедуры

&НаСервере
Функция SaveAsXMLНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = ПолучитьPayloadИФабрикуXDTO(Объект.Ссылка);
	Структура.Payload.Проверить();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	Структура.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Структура.Payload);
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьPayloadИФабрикуXDTO(TransportRequest)
	
	WSСсылка = Обработки.PushExportToTMS.ПолучитьWSСсылку();
	ФабрикаXDTOTMS = WSСсылка.ПолучитьWSОпределения().ФабрикаXDTO;
	TransOrder = Обработки.PushTransportRequestToTMS.ПолучитьTransOrder(ФабрикаXDTOTMS, TransportRequest.ПолучитьОбъект());	
	Payload = Обработки.PushTransportRequestToTMS.ПолучитьPayload(ФабрикаXDTOTMS, TransOrder);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ФабрикаXDTO", ФабрикаXDTOTMS);
	СтруктураВозврата.Вставить("Payload", Payload);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура RegimeПриИзменении(Элемент)
	
	НастроитьВидимостьПоRegime();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоRegime()
	
	// { RGS AArsentev 11.01.2018 S-I-0004118
	ExportPurpose_Return = Справочники.ExportPurposes.НайтиПоКоду("RET");
	Если Объект.Regime = Перечисления.PermanentTemporary.Temporary И ЗначениеЗаполнено(ExportPurpose_Return) И Объект.ExportPurpose = ExportPurpose_Return Тогда
		Элементы.PeriodOfTemporaryExport.Видимость = Ложь;
		Объект.PeriodOfTemporaryExport = Неопределено;
	// } RGS AArsentev 11.01.2018 S-I-0004118
	ИначеЕсли Объект.CustomUnionTransaction И Объект.Regime = Перечисления.PermanentTemporary.Temporary Тогда
		Элементы.PeriodOfTemporaryExport.Видимость = Истина;
	Иначе
		Элементы.PeriodOfTemporaryExport.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ExportPurposeНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Regime) Тогда		
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Режим ввоза'!",
			, "Regime", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"First select 'Regime'!",
			, "Regime", "Объект");
		КонецЕсли;
		
		
	Иначе
			
		НазначениеПоставки = ПолучитьНазначениеПоставки();
		
		Форма = ПолучитьФорму("Справочник.ExportPurposes.ФормаВыбора",,Элемент);
		
		Форма.Список.Отбор.Элементы.Очистить();
		ЭлОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));  
		ЭлОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлОтбора.Использование  = Истина;
		ЭлОтбора.ПравоеЗначение = НазначениеПоставки;  
		Форма.Открыть();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНазначениеПоставки()
	
	МассивКодов = Новый Массив;
	Если Объект.Regime = Перечисления.PermanentTemporary.Temporary Тогда
		МассивКодов.Добавить("CAL");
		МассивКодов.Добавить("LAB");
		МассивКодов.Добавить("LOAN");
		МассивКодов.Добавить("RAN");
		МассивКодов.Добавить("RC");
		МассивКодов.Добавить("RET");
	Иначе
		МассивКодов.Добавить("DISP");
		МассивКодов.Добавить("FAT");
		МассивКодов.Добавить("FMT");
		МассивКодов.Добавить("OFS");
		МассивКодов.Добавить("Sale");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ExportPurposes.Ссылка
	|ИЗ
	|	Справочник.ExportPurposes КАК ExportPurposes
	|ГДЕ
	|	ExportPurposes.Код В(&МассивКодов)";
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьФайлССервера()
	
	Двоичное = Новый ДвоичныеДанные("\\ru0149app35\03_RIET_Module_for_Non-Lawson_Companies\TR_template.xlsm");
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	Возврат Адрес
	
КонецФункции

&НаСервере
Функция ЗаполнитьОтборПоLE()
	
	FinLocCode = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.LegalEntity, "FinanceLocCode");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КостЦентры.Ссылка КАК AU
	|ИЗ
	|	Справочник.КостЦентры КАК КостЦентры
	|ГДЕ
	|	КостЦентры.ПодразделениеОрганизации.Код = &FinLocCode";
	Запрос.УстановитьПараметр("FinLocCode", FinLocCode);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("AU");
	
КонецФункции

// { RGS AArsentev S-I-0004787 12.03.2018
&НаСервереБезКонтекста
Функция ЗаполнитьДанныеВыбораCompanyCostCenters(СтрокаПоиска, Дата, Company)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Company",Company);
	Запрос.УстановитьПараметр("Код", СтрокаПоиска + "%");
	Запрос.Текст = "ВЫБРАТЬ
	|	CompaniesСostСentersСрезПоследних.CostCenter,
	|	CompaniesСostСentersСрезПоследних.CostCenter.Код КАК Код
	|ИЗ
	|	РегистрСведений.CompaniesСostСenters.СрезПоследних(
	|			&Дата,
	|			Company = &Company
	|				И НЕ CostCenter.ПометкаУдаления) КАК CompaniesСostСentersСрезПоследних
	|ГДЕ
	|	CompaniesСostСentersСрезПоследних.CostCenter.Код ПОДОБНО &Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.CostCenter, Выборка.Код);
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции // } RGS AArsentev S-I-0004787 12.03.2018

// { RGS AArsentev 13.04.2018
&НаСервере
Процедура НастроитьВидимостьAgreement() 
	
	Если Объект.CustomUnionTransaction Тогда
		Элементы.Agreement.Видимость = Документы.TransportRequest.ПроверитьСоответствиеCompanyLE(Объект.Shipper, Объект.ConsignTo);
	Иначе
		Элементы.Agreement.Видимость = Документы.TransportRequest.ПроверитьСоответствиеCompanyLE(Объект.LegalEntity, Объект.ConsignTo);
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 13.04.2018

&НаКлиенте
Процедура ConsignToПриИзменении(Элемент)
	// { RGS AArsentev 13.04.2018
	//НастроитьВидимостьAgreement();
	УправлениеВидимостьюСервер();
	// } RGS AArsentev 13.04.2018
КонецПроцедуры

// { RGS DKazanskiy 18.07.2018 14:46:30 - 
&НаСервере
Процедура УправлениеВидимостьюСервер()
	
	НастроитьВидимостьAgreement();
	НастроитьВидимостьФлагаSentCUReport();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьФлагаSentCUReport() 
	
	Элементы.ГруппаDGF.Видимость 			= Документы.TransportRequest.ПроверитьСоответствиеShipperConsignTo(Объект);
	Элементы.SentCUReport.ТолькоПросмотр 	= НЕ (Пользователи.ТекущийПользователь() = Объект.Specialist);
	Элементы.DGFAU.ТолькоПросмотр 			= НЕ (Пользователи.ТекущийПользователь() = Объект.Specialist или Пользователи.ТекущийПользователь() = Объект.Requestor);
	
КонецПроцедуры

&НаКлиенте
Процедура ShipperПриИзменении(Элемент)
	УправлениеВидимостьюСервер();
КонецПроцедуры

&НаКлиенте
Процедура DGFAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДоступныеКостЦентрыДляDGF();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеКостЦентрыДляDGF() 
	
	Возврат РегистрыСведений.DGFAUs.СписокAUs();
	
КонецФункции

&НаКлиенте
Процедура SpecialistПриИзменении(Элемент)
	УправлениеВидимостьюСервер();
КонецПроцедуры

&НаКлиенте
Процедура SpecialistНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.CostCenter) Тогда
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Сначала выберите 'Центр затрат'!",
			, "CostCenter", "Объект");
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Select 'Cost Center' first!",
			, "CostCenter", "Объект");
		КонецЕсли;
		
		СтандартнаяОбработка=Ложь;
		
	Иначе
		НастроитьСписокВыбораSpecialistsНаСервере();
	КонецЕсли;
	
КонецПроцедуры
// } RGS DKazanskiy 18.07.2018 14:46:32 - 

// { RGS AFokin 09.09.2018 23:59:59 S-I-0005813
&НаКлиенте
Процедура TabReturnToRequestor(Команда)
	
	Элементы.ReasonForReturn.Видимость = Истина;
	Элементы.Comments.АвтоОтметкаНезаполненного = Истина;
	Элементы.Request.Доступность = Истина;
	
	ОткрытьФорму("Документ.TransportRequest.Форма.ФормаReturnToRequestor",, ЭтотОбъект,,,,
	Новый ОписаниеОповещения("ВыполнитьКомандуReturnToRequestor", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Объект.DateRequested = ТекущаяДата();
	Объект.ReturnToRequestor = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуReturnToRequestor(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено И Результат.Количество() Тогда
		Объект.ReasonForReturn = Результат.ПричинаВозврата;
		Если ЗначениеЗаполнено(Объект.Comments) Тогда
			Объект.Comments = Объект.Comments + " " + Результат.Комментарий;
		Иначе
			Объект.Comments = Результат.Комментарий;
		КонецЕсли;	
		
		Элементы.Accept.Доступность = Ложь;
		Элементы.TabReturnToRequestor.Доступность = Ложь;
		
		Записать();
	КонецЕсли;	
	
КонецПроцедуры	
// } RGS AFokin 09.09.2018 23:59:59 S-I-0005813

// { RGS AFokin 24.09.2018 23:59:59 - S-I-0006036
&НаСервере
Процедура ЗаполнениеCountryDeliverToCountryНаОснованииCompany()
	
	Объект.Country = Объект.Company.Country;
	Объект.DeliverToCountry  = Объект.Company.Country;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// { RG-Soft LGoncharova 06.12.2018 S-I-0006255
	Если ЗначениеЗаполнено(ДатаВключенияReasonsForTR) И Объект.Дата < ДатаВключенияReasonsForTR Тогда
		Элементы.rgsReasonForTR.Видимость = Ложь;
	Иначе
		Элементы.rgsReasonForTR.Видимость = Истина;
	КонецЕсли;
	// } RG-Soft LGoncharova 06.12.2018 S-I-0006255
КонецПроцедуры

