Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчетБУ, ПартионныйУчетНУ;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата    КАК ДатаДокумента,
	|	ФизЛицо КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|	НазначениеАванса      КАК НазначениеАванса,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента.Представление КАК ПредставлениеВалюты,
	|	СуммаДокумента,
	|	ВыданныеАвансы.(
	|		Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Авансы = Шапка.ВыданныеАвансы.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";

	Макет       = ПолучитьМакет("АвансовыйОтчет");

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	Иначе
		Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	КонецЕсли;
	Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",Шапка.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", Ссылка.МоментВремени());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&Счет71), ,
	|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	ДанныеВал  = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

	СуммаДоДокумента = 0;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивРКО", ВыданныеАвансы.ВыгрузитьКолонку("РасходныйКассовыйОрдер"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивРКО)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента),
	|	ПлатежноеПоручениеИсходящее.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивРКО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка";
	
	Таб = Запрос.Выполнить().Выгрузить();
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));

	ОбластьМакета = Макет.ПолучитьОбласть("Титул");

	КурсДока = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратДока = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
    КурсоваяРазница = 0;
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ОбластьМакета.Параметры.ПредставлениеВалютыДокумента = Шапка.ПредставлениеВалюты;
		ОбластьМакета.Параметры.ПолученоИзКассыВВалюте       = ПолученоИзКассы;
		ПолученоИзКассы = ПолученоИзКассы * КурсДока / КратДока;
		
		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоПроводкам.УстановитьПараметр("КурсоваяРазница", Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы);
		ЗапросПоПроводкам.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 = &КурсоваяРазница
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДт,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 = &КурсоваяРазница
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ХозрасчетныйДвиженияССубконто
		|";
		
		ВыборкаКР = ЗапросПоПроводкам.Выполнить().Выгрузить();
		КурсоваяРазница = ВыборкаКР.Итог("СуммаДт") - ВыборкаКР.Итог("СуммаКт");
	    ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
	КонецЕсли;

	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
	//Перерасход       = ?(Перерасход >= 0, Перерасход - ПолученоИзКассы, 0);
	//Остаток          = ?(Остаток    >= 0, Остаток    - ПолученоИзКассы, 0);

	ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
	ПодотчетноеЛицо = ДанныеПодотчетногоЛица.Представление;
	ТабельныйНомер =  ДанныеПодотчетногоЛица.ТабельныйНомер;
	Подразделение =   ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
	Должность =       ДанныеПодотчетногоЛица.Должность;

	// Выводим титульный лист авансового отчета
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Подразделение;
	ОбластьМакета.Параметры.КодПодразделения = ?(ОбщегоНазначения.ЗначениеНеЗаполнено(Подразделение), "", Подразделение.Код);
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
	ОбластьМакета.Параметры.НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ПолученоИзКассы = ПолученоИзКассы;

	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	ОбластьМакета.Параметры.ИтогоПолучено = ПолученоИзКассы;
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Израсходованно = (Шапка.СуммаДокумента * КурсДока / КратДока) + КурсоваяРазница;
	Иначе
		Израсходованно = Шапка.СуммаДокумента;
	КонецЕсли;
	ОбластьМакета.Параметры.Израсходовано = Израсходованно;

	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Израсходованно;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = КонтактнаяИнформация.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	Руководитель = Руководители.РуководительПредставление;
	Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
	Кассир       = Руководители.КассирПредставление;

	ДляРасчета   = Шапка.СуммаДокумента * ДанныеВал.Курс / ДанныеВал.Кратность;

	ИспСумма     = Окр(ДляРасчета, 2, 1);
	ЦелСумма     = Цел(ДляРасчета);
	КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
	Если КопСумма = 0 Тогда
		КопСумма= "00";
	КонецЕсли;

	ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
	ОбластьМакета.Параметры.ИзрасходованоКоп    = КопСумма;

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = РаботаСДиалогами.СформироватьСуммуПрописью(ДляРасчета, мВалютаРегламентированногоУчета);

	ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
	ОбластьМакета.Параметры.Кассир                             = Кассир;
	ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжность;

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выбрать();

	Счетчик = 0;
	Пока ВыборкаПроводок.Следующий() Цикл

		Если Счетчик = 8 тогда
			Прервать;
		КонецЕсли;

		ОбластьМакета.Параметры["СубСчетДебет"  + (Счетчик + 1)] = ВыборкаПроводок.СчетДт;
		ОбластьМакета.Параметры["СуммаДебет"    + (Счетчик + 1)] = ВыборкаПроводок.Сумма;
		ОбластьМакета.Параметры["СубСчетКредит" + (Счетчик + 1)] = ВыборкаПроводок.СчетКт;
		ОбластьМакета.Параметры["СуммаКредит"   + (Счетчик + 1)] = ВыборкаПроводок.Сумма;

		Счетчик = Счетчик + 1;

	КонецЦикла;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	ЗапросТовары.Текст = 
	
	"ВЫБРАТЬ
	|	1 КАК ID,
	|	АвансовыйОтчет.НомерСтроки КАК НомерСтроки,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ) КАК ПоОтчету,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчетаБУ КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	|		КОНЕЦ),
	|	0,
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	АвансовыйОтчет.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(Товар.НаименованиеРасхода);
		ОбластьМакета.Параметры.ДебетСубСчета 		= Строка(Товар.СчетЗатрат)
		                                            + ?(Шапка.УчитыватьНДС И НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(Товар.СчетНДС), ", " + Строка(Товар.СчетНДС), "");
		
		Сумма = Товар.ПоОтчету 
		      + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

		ОбластьМакета.Параметры.ПоОтчету = Сумма;
		ОбластьМакета.Параметры.ПоУчету  = Сумма;
		
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		
			СуммаВВалюте = Товар.ПоОтчетуВВалюте
			             + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
				  
			ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
			
			ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ИмяМакета = "Аванс_Отчет" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАвансовогоОтчета();
		
	КонецЕсли;

	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), НепосредственнаяПечать);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Аванс_Отчет","Авансовый отчет");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатрат = СчетаУчета.СчетУчетаБУ;
		Иначе
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Иначе
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУРегл()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	//Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
	//	Возврат;
	//КонецЕсли;

	Если ЗаполнятьНУ  = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетУчетаНУ;
		Иначе
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Иначе
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУРегл()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	
	ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вид ценностей объекта учета для данной строки
	ТаблицаТоваров.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаТоваров.Колонки.Добавить("Ценность");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
////  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
	ДанныеДоговора = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, Дата);

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
											 ДанныеДоговора.Курс,      Данные.Курс,
											 ДанныеДоговора.Кратность, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента,    ВалютаРег,
											 СтруктураШапкиДокумента.КурсДокумента,      Данные.Курс,
											 СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	// Вид ценностей объекта учета для данной строки
	ТаблицаПрочие.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПрочие.Колонки.Добавить("Ценность");

	ВалютаБух     = мВалютаРегламентированногоУчета;

	КурсВалютыБух = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаБух, Дата);
	КурсБух       = КурсВалютыБух.Курс;
	КратБух       = КурсВалютыБух.Кратность;

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	ТаблицаПрочие.Колонки.Добавить("СуммаБух", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));

	Для Каждого СтрокаТаб Из ТаблицаПрочие Цикл

		НДС         = СтрокаТаб.НДС;
		СуммаБезНДС = ?(СуммаВключаетНДС, СтрокаТаб.Сумма - НДС, СтрокаТаб.Сумма);

		// Пересчитаем сумму по курсу
		СтрокаТаб.СуммаБух = СуммаБезНДС * ((СтруктураШапкиДокумента.КурсДокумента * КратБух)
		                     / (КурсБух * СтруктураШапкиДокумента.КратностьДокумента));

	КонецЦикла;

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ФизЛицо, ВалютаДокумента");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если Товары.Количество() > 0 
	 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РасходныйКассовыйОрдер, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;
	
	// Для учета в подсистеме НДС
	//СтруктураОбязательныхПолей.Вставить("Поставщик");
	СтруктураОбязательныхПолей.Вставить("СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
		
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";
		СтрокаСообщения = " указан забалансовый счет. Прием на комиссию документом не поддерживается!";
        	
		Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

		Если УчитыватьНДС
			И НЕ (НДСВключенВСтоимость)
			И НЕ (СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС)
			И НЕ (СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка номера ГТД
		Если УправлениеЗапасами.НеУказанНомерГТД(СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Номер ГТД""!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма";
	РеквизитыСтр = РеквизитыСтр + ", СчетЗатрат";
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		РеквизитыСтр = РеквизитыСтр + ", СтавкаНДС";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РеквизитыСтр = РеквизитыСтр + ", СчетЗатратНУ";
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	// Проверка заполнения счета учета НДС
	Для каждого СтрокаТЧ Из ТаблицаПоПрочее Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Прочее"": ";
		Если УчитыватьНДС
			И НЕ (НДСВключенВСтоимость)
			И НЕ (СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС)
			И НЕ (СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Контрагент, ДоговорКонтрагента");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаТары");

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Товары"": ";
		СтрокаСообщения = " указан забалансовый счет. Прием на комиссию документом не поддерживается!";

		Если СтрокаТЧ.СчетУчетаБУЗаб Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

	// Теперь вызовем общую процедуру проверки заполнения.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
	                        ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                        Отказ, Заголовок);

	ТаблицыДляПроведенияПоНДС = Новый Структура();
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ, Заголовок);
	
	Если ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, Дата) Тогда	
		
		ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		ДвиженияПоРазницамУслуги(СтруктураШапкиДокумента, ТаблицаПоПрочее);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Расчет и отражение постоянных и временных разниц в оценке товаров,
// поступающих по документу
Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоТоварам)


	ПроводкиНУ = Движения.Налоговый;

	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Возврат;
	КонецЕсли;

	ДатаДок = Дата;
	
	ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, ДатаДок);	
	Если НЕ ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	мКэшСчетов = Новый Соответствие; 
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		СуммаВПроводку = СтрокаТЧ.Сумма;
				
		СчетНУСоответствующийСчетуБУ = мКэшСчетов[СтрокаТЧ.СчетУчетаБУ];
		Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетУчетаБУ), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
			мКэшСчетов[СтрокаТЧ.СчетУчетаБУ] = СчетНУСоответствующийСчетуБУ;
		КонецЕсли;

		Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетУчетаНУ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СтрокаТЧ.СчетУчетаБУ + ", разницы между БУ и НУ не рассчитаны");
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";

		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;

		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);

		Если (ПартионныйУчетНУ) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчетаНУ)) Тогда 
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина);
		КонецЕсли;

		Проводка.Сумма      = СтрокаТЧ.Сумма;
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;

		Проводка = ПроводкиНУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		Проводка.СчетДт = СтрокаТЧ.СчетУчетаНУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтруктураШапкиДокумента.Склад);

		Если (ПартионныйУчетНУ) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчетаНУ)) Тогда 
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина);
		КонецЕсли;

		Проводка.Сумма = - СтрокаТЧ.Сумма;
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;

	КонецЦикла;

	ПроводкиНУ.Записать(Ложь);

КонецПроцедуры

// Расчет и отражение постоянных и временных разниц в оценке услуг,
// поступающих по документу
Процедура ДвиженияПоРазницамУслуги(СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ПроводкиНУ = Движения.Налоговый;

	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДок = Дата;
	
	ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, ДатаДок);	
	Если НЕ ПоддержкаПБУ18 Тогда
			Возврат;
	КонецЕсли;
	
	мКэшСчетов = Новый Соответствие;
	
	Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
		
		СуммаВПроводку = СтрокаТЧ.Сумма;
		
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ3.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ1.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ2.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтрокаТЧ.СубконтоНУ3.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатрат = "";
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			
			СтруктураСчетаВКэше = мКэшСчетов[СтрокаТЧ.СчетЗатрат];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов[СтрокаТЧ.СчетЗатрат] = Новый Соответствие;
				мКэшСчетов[СтрокаТЧ.СчетЗатрат].Вставить("", СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			
			СтруктураСчетаВКэше = мКэшСчетов[СтрокаТЧ.СчетЗатрат];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТЧ.СчетЗатрат, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов[СтрокаТЧ.СчетЗатрат] = Новый Соответствие;
				мКэшСчетов[СтрокаТЧ.СчетЗатрат].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТЧ.СчетЗатрат, ВидЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				
				СтруктураСчетаВКэше = мКэшСчетов[СтрокаТЧ.СчетЗатрат];
				Если СтруктураСчетаВКэше = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
					мКэшСчетов[СтрокаТЧ.СчетЗатрат] = Новый Соответствие;
					мКэшСчетов[СтрокаТЧ.СчетЗатрат].Вставить("", СчетНУСоответствующийСчетуБУ);
				Иначе
					СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
					Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
						СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), "НУ", Ложь, СтруктураШапкиДокумента.Дата);
						СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
					КонецЕсли;								
				КонецЕсли;
				
				Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СтрокаТЧ.СчетЗатрат + ", разницы между БУ и НУ не рассчитаны");
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
		
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.Субконто1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.Субконто2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.Субконто3);
		
		Проводка.Сумма = СтрокаТЧ.Сумма;
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ1) = Тип("СправочникСсылка.СтатьиЗатрат") И СтрокаТЧ.СубконтоНУ1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СтрокаТЧ.СубконтоНУ1.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ2) = Тип("СправочникСсылка.СтатьиЗатрат") И СтрокаТЧ.СубконтоНУ2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СтрокаТЧ.СубконтоНУ2.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ3) = Тип("СправочникСсылка.СтатьиЗатрат") И СтрокаТЧ.СубконтоНУ3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СтрокаТЧ.СубконтоНУ3) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СтрокаТЧ.СубконтоНУ3.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Проводка.ВидУчетаДт = ВидУчета;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		Проводка.СчетДт = СтрокаТЧ.СчетЗатратНУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.СубконтоНУ1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.СубконтоНУ2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.СубконтоНУ3);
		Проводка.Сумма = - СтрокаТЧ.Сумма;
		
		Проводка.ВидУчетаДт = ВидУчета;
		
	КонецЦикла;

	ПроводкиНУ.Записать(Ложь);

КонецПроцедуры

Процедура ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
		                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
		                          Отказ, Заголовок);

	ВалютаРег = мВалютаРегламентированногоУчета;

	// Формирование проводок.
	ПроводкиБУ = Движения.Хозрасчетный;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ = Движения.Налоговый;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
	Иначе
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
	КонецЕсли;

	ДатаДок      = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;

	// Проводки по товарам
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладПроводок);
		
		// Для товаров, принятых на комиссию партия прописывается всегда 
		Если (ПартионныйУчетБУ) ИЛИ (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда 
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка, Истина, Заголовок);
		КонецЕсли;
		
		Проводка.КоличествоДт= СтрокаТаблицы.Количество;

		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Иначе
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС;
		КонецЕсли;

		Проводка.СчетКт             = СчетРасчетовСПодотчетником;
		Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;

		Если СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			Иначе
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал;
			КонецЕсли;
		КонецЕсли;

		// Проводки по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость и не СтрокаТаблицы.СчетУчетаБУ.Забалансовый И СтруктураШапкиДокумента.УчитыватьНДС и СтрокаТаблицы.НДС<>0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтрокаТаблицы.Поставщик  , Истина, Заголовок);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтрокаТаблицы.СчетФактура, Истина, Заголовок);

			Проводка.СчетКт      = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизаций  = СтруктураШапкиДокумента.ФизЛицо;
			Если СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Выделен НДС";

		КонецЕсли;

		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура,Истина , Заголовок);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",СкладПроводок);

			Если ПартионныйУчетНУ Тогда 
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",Ссылка,Истина, Заголовок);
			КонецЕсли;
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			Проводка.СубконтоКт.Контрагенты = СтрокаТаблицы.Поставщик;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
				Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС;
			КонецЕсли;
			Проводка.Содержание   = "Оприходованы ТМЦ";

		КонецЕсли;
		
		// Учет товаров по номерам ГТД
		Если УправлениеЗапасами.ЭтоИмпортныйТовар(СтрокаТаблицы.СчетУчетаБУ, СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание = "Оприходованы ТМЦ";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура, Истина, Заголовок);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НомераГТД", СтрокаТаблицы.НомерГТД, Истина, Заголовок);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения, Истина, Заголовок);
		
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		КонецЕсли;

	КонецЦикла; // Проводки по товарам

	// Проводки по таре
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Бухгалтерский учет
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЦ";
		Проводка.Сумма       = СтрокаТаблицы.ПроводкаСумма;

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина , Заголовок);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады"      , СкладПроводок);

		Если ПартионныйУчетБУ Тогда 
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",Ссылка,Истина, Заголовок);
		КонецЕсли;

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		Проводка.СчетКт       = СтрокаТаблицы.СчетРасчетовЗаТару;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты"       , СтрокаТаблицы.Контрагент,Истина , Заголовок);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры"          , СтрокаТаблицы.ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);

		Если СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
		КонецЕсли;

		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = ДатаДок;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура,Истина , Заголовок);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",СкладПроводок);

			Если ПартионныйУчетНУ Тогда 
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии",Ссылка,Истина, Заголовок);
			КонецЕсли;
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			
			Проводка.Сумма        = СтрокаТаблицы.ПроводкаСумма;
			Проводка.Содержание   = "Оприходованы ТМЦ";

		КонецЕсли;

	КонецЦикла; // Проводки по таре

	//Проводки по расчетам с поставщиками
	Если ТаблицаПоОплатамПоставщикам.Количество() > 0 Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетРасчетовСПодотчетником);

		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок)=Ложь тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаПоПрочее Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Прочие поступления";
		Проводка.Сумма        = СтрокаТаблицы.СуммаБух + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТаблицы.НДС, 0);

		Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
		
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);

		Проводка.СчетКт       = СчетРасчетовСПодотчетником;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтруктураШапкиДокумента.ФизЛицо);

		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		   И СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;

		// Проводка по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС 

			И СтрокаТаблицы.НДС > 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			Проводка.Содержание   = "Выделен НДС";

			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура, Истина, Заголовок);

			Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные тогда

				СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства,"ВидСубконто");

				Если СубконтоОбСтр = Неопределено тогда
					ОбщегоНазначения.СообщитьОбОшибке("На счете затрат отсутствует вид субконто <" + Строка(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) + ">. Субконто для счета учета НДС не может быть заполнено.",, Заголовок);
				Иначе
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки],Истина, Заголовок);
				КонецЕсли;

				//ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "ВидыЦенностей",        СтрокаТаблицы.ВидЦенности,Истина, Заголовок);
			КонецЕсли;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,     "Контрагенты",             СтрокаТаблицы.Поставщик,?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные,Ложь,Истина), Заголовок);

			Проводка.СчетКт       = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;

			Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
			   И СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

		КонецЕсли; // Проводка по НДС

		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.СуммаБух + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТаблицы.НДС, 0);
			Проводка.Содержание  = "Прочие поступления";

			Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратНУ;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			Проводка.СубконтоКт.Контрагенты = СтрокаТаблицы.Поставщик;

		КонецЕсли; // ОтражатьВНалоговомУчете

	КонецЦикла;

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерии()

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок);
	
	Если Не ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 и СтруктураШапкиДокумента.УчитыватьНДС Тогда 
			УчетНДС.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Движения.НДСПредъявленный.Количество()>0) Тогда
		// Необходимо зарегистрировать оплату по отфактурованным поставкам по АО, так как расчеты с контрагентом
		// через счета учета расчетов не ведутся. 
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам	= Движения.НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
		
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОплаты");
		Для НомерСтрокиРегистрацииОплат =0 по ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество()-1 Цикл
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[НомерСтрокиРегистрацииОплат].РаспределеннаяСумма =
				ТаблицаДвижений_НДСПредъявленный[НомерСтрокиРегистрацииОплат].СуммаБезНДС + ТаблицаДвижений_НДСПредъявленный[НомерСтрокиРегистрацииОплат].НДС;
		КонецЦикла;
		
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
			
	КонецЕсли;

	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
	
	Если ТаблицыДокумента.Свойство("ТаблицаПоТоварам") и ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	КонецЕсли; 
	// При необходимости, отражаем в регистре партионного учета для НДС
	//////////////////////////////////////////////////////////////////////
	
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()	

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОплатаПоставщикам.Итог("Сумма") + ОбщегоНазначения.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

 	Перем Заголовок, СтруктураШапкиДокумента;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 		"Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 		"Количество");
	СтруктураПолей.Вставить("Сумма"       , 		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , 		"СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , 		"СуммаНДС");
	СтруктураПолей.Вставить("Услуга"      , 		"Номенклатура.Услуга");
	СтруктураПолей.Вставить("Поставщик"   , 		"Поставщик"); 
	СтруктураПолей.Вставить("СчетФактура" , 		"СчетФактура"); 
	СтруктураПолей.Вставить("НомерГТД"    , 		"НомерГТД");
	СтруктураПолей.Вставить("СчетУчетаБУ" , 		"СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб", 		"СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС", 		"СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ" , 		"СчетУчетаНУ");
	СтруктураПолей.Вставить("СтранаПроисхождения", 	"СтранаПроисхождения");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"   , "Количество");
	СтруктураПолей.Вставить("Сумма"        , "Сумма");
	СтруктураПолей.Вставить("Контрагент"   , "Контрагент");
	СтруктураПолей.Вставить("СчетУчетаБУ"  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб", "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНУ"  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетРасчетовЗаТару", "СчетУчетаТары");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация", "ДоговорКонтрагента.Организация");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("РасходныйКассовыйОрдер", "РасходныйКассовыйОрдер");
	СтруктураПолей.Вставить("Сумма", "Сумма");

	РезультатЗапросаПоВыданнымАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов", "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"               , "Сделка");
	СтруктураПолей.Вставить("Сумма"                , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"   , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов",           "КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",    "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",        "СчетУчетаРасчетовПоАвансам");
	
	РезультатЗапросаПоОплатеПоставщикам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"  , "Содержание");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Поставщик"   , "Поставщик");
	СтруктураПолей.Вставить("СчетФактура" , "СчетФактура");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");

	РезультатЗапросаПоПрочее = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Для каждого СтрокаОплаты из ОплатаПоставщикам Цикл
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
		Отказ, Заголовок,"Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+" - ");
	КонецЦикла;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	ПартионныйУчетБУ = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух"));
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПартионныйУчетНУ = УправлениеЗапасами.ВедетсяПартионныйУчет(ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Нал"));
	Иначе
		ПартионныйУчетНУ = Ложь;
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
КонецПроцедуры

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураПолученный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	               |ГДЕ
	               |	СчетФактураПолученный.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураПолученный.ПометкаУдаления)
	               |	И СчетФактураПолученный.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
