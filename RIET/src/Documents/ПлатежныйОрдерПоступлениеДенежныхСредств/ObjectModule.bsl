// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//// Пересчитывает сумму НДС
////
//// Параметры:
////  Нет.
////
//Процедура SalesBook.ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

//	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
//	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

//КонецПроцедуры // SalesBook.ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

//// Формирует движения по регистрам
////  Отказ                     - флаг отказа в проведении,
////  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
////  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок)

	// Бухгалтерские проводки документа
	Если Не СтруктураШапкиДокумента.Оплачено Тогда
		Возврат;
	Конецесли;

	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	ВидСчетаОрг = СтруктураШапкиДокумента.СчетОрганизации.ВидСчета;
	ВалютаСчета = СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств;
	//ПроводкиБУ  = Движения.Хозрасчетный;
	ЗаписиДС = Движения.СчетаДенежныхСредств;

	РасчетыВВалюте = Ложь;
	
	СчетДт = СтруктураШапкиДокумента.СчетБанк;

	Если СчетДт.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);
		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если РеестрПлатежей.Количество()= 0 Тогда
			// Таблица оплат не заполнена, не требуется обработка
			Возврат;
		КонецЕсли; 
		
		СодержаниеПроводки = "";
		ПереворачиватьОтрицательныеПроводки = Ложь;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			тогда

			ПереворачиватьОтрицательныеПроводки = Истина;
			РеестрПлатежей.Колонки.Добавить("СодержаниеПроводки",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
			
			СтрокаСписания = РеестрПлатежей[0];
			
			СтрокаСписания.СчетАванса = СтрокаСписания.СчетОплаты;
			СтрокаСписания.СодержаниеПроводки = "Реализация иностранной валюты";;
			СтрокаСписания.КоррСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			Для каждого Субконто из СтрокаСписания.КоррСчет.ВидыСубконто Цикл
				Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы тогда
					СтрокаСписания["КоррСубконто"+Субконто.НомерСтроки] = Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты;
				Иначе
					СтрокаСписания["КоррСубконто"+Субконто.НомерСтроки] = Неопределено;
				КонецЕсли;
			КонецЦикла;
			СуммаРасчетовПоКурсуБанка = СтрокаСписания.РублеваяСумма;
			
			СтрокаСписания.РублеваяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаСписания.ВалютнаяСумма, СтрокаСписания.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
										СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
										СтрокаСписания.КратностьВзаиморасчетов, 1);
			СуммаРасчетовПоЦБ = СтрокаСписания.РублеваяСумма;

	
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты тогда
			
			ПереворачиватьОтрицательныеПроводки = Истина;
			РеестрПлатежей.Колонки.Добавить("СодержаниеПроводки",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
			
			//При приобретении валюты используется только первая строка реестра платежей
			СтрокаПриобретения = РеестрПлатежей[0];
			
			СтрокаПриобретения.СчетАванса = СтрокаПриобретения.СчетОплаты;
			СтрокаПриобретения.СодержаниеПроводки = "Приобретение иностранной валюты";
			
			СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.РублеваяСумма;
			
			Если не СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПриобретения.КурсВзаиморасчетов Тогда
				СтрокаПриобретения.РублеваяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПриобретения.ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
											СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
											СтруктураШапкиДокумента.КратностьДокумента, 1);
				СтрокаПриобретения.СуммаВзаиморасчетов = СтрокаПриобретения.РублеваяСумма;							
			КонецЕсли; 
			
			ФинРезультатПриобретения = СуммаРасчетовПоКурсуБанка - СтрокаПриобретения.РублеваяСумма;
			
			Если не (ФинРезультатПриобретения = 0) и 
				(не (СтрокаПриобретения.СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто") = неопределено) 
					или СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов) тогда
				
				СтрокаРазницыКурсов = РеестрПлатежей.Добавить();
				
				Для каждого Колонка Из РеестрПлатежей.Колонки Цикл
					Если Колонка.Имя = "РублеваяСумма" или Колонка.Имя = "СуммаВзаиморасчетов" Тогда
						СтрокаРазницыКурсов[Колонка.Имя] = ФинРезультатПриобретения;
					ИначеЕсли Колонка.Имя = "ВалютнаяСумма" Тогда
						СтрокаРазницыКурсов[Колонка.Имя] = 0;
					Иначе
						СтрокаРазницыКурсов[Колонка.Имя] = СтрокаПриобретения[Колонка.Имя];
					КонецЕсли;
				КонецЦикла;
				
				СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатПриобретения>0,"Убыток","Прибыль")+" от покупки валюты";
				
				
				Если СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов тогда
					СтрокаРазницыКурсов.КоррСчет = ?(СтрокаРазницыКурсов.РублеваяСумма>0, ПланыСчетов.Хозрасчетный.ПрочиеРасходы, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
					СтрокаРазницыКурсов.КоррСубконто1 = Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты;
				Иначе
					СтрокаРазницыКурсов.КоррСчет = СтрокаРазницыКурсов.СчетОплаты;
					Для каждого Субконто из СтрокаРазницыКурсов.КоррСчет.ВидыСубконто Цикл
						Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтрокаРазницыКурсов.Контрагент;
						ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтрокаРазницыКурсов.ДоговорКонтрагента;
						ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
							СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = СтруктураШапкиДокумента.Ссылка;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			
		ИначеЕсли ЕстьРасчетыПоКредитам тогда
            СодержаниеПроводки = "Расчеты по кредитам и займам";
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
			СодержаниеПроводки = "Расчеты с контрагентом";
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
		КонецЕсли;
		
		//УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей,ПереворачиватьОтрицательныеПроводки);
		
		//Добавлено Булавский, РГ_Софт
		Для каждого РезультатРаспределения из РеестрПлатежей Цикл
			ЗаписьДС = ЗаписиДС.Добавить();
			ЗаписьДС.Период = ДатаДока;
			ЗаписьДС.Регистратор = Ссылка;
			ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
			
			ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
			ЗаписьДС.СуммаВал = РезультатРаспределения .ВалютнаяСумма;
			ЗаписьДС.Сумма = РезультатРаспределения.РублеваяСумма;

			
		КонецЦикла;
		
		//КонецДобавления

				
	//	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда

	//		СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	//		
	//		// доходная часть операции
	//		Проводка = ПроводкиБУ.Добавить();

	//		Проводка.Период      = ДатаДока;
	//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//		Проводка.Содержание  = "Доходы от продажи валюты";
	//		
	//		Проводка.СчетДт      = СчетДт;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "БанковскиеСчета", СтруктураШапкиДокумента.СчетОрганизации);
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаСписания.СтатьяДДС);
	//		
	//		Проводка.СчетКт      = СчетДоходов;
	//		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
	//		
	//		
	//		Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
	//		
			//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			//	Если не СуммаРасчетовПоЦБ = СуммаРасчетовПоКурсуБанка Тогда
			//		// Фин. результат  операции
			//		Проводка = Движения.Налоговый.Добавить();

			//		Проводка.Период      = ДатаДока;
			//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//		Если СуммаРасчетовПоКурсуБанка - СуммаРасчетовПоЦБ >0 Тогда
			//			Проводка.Содержание  = "Прибыль от продажи валюты";
			//			Проводка.СчетКт		 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//			Проводка.Сумма = СуммаРасчетовПоКурсуБанка - СуммаРасчетовПоЦБ;
			//			
			//		Иначе	
			//			Проводка.Содержание  = "Убыток от продажи валюты";
			//			Проводка.СчетДт		 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//			Проводка.Сумма = (СуммаРасчетовПоКурсуБанка - СуммаРасчетовПоЦБ)*(-1);
			//			
			//		КонецЕсли; 
			//		
			//			
			//	КонецЕсли; 
			//КонецЕсли; 
	//	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты тогда
			//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			//	Если не СуммаРасчетовПоЦБ = СуммаРасчетовПоКурсуБанка Тогда
			//		// Фин. результат  операции
			//		Проводка = Движения.Налоговый.Добавить();
			//		Проводка.Период      = ДатаДока;
			//		Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//		
			//		
			//		Если ФинРезультатПриобретения < 0 Тогда
			//			Проводка.Содержание  = "Прибыль от покупки валюты";
			//			Проводка.СчетКт		 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//			Проводка.Сумма = ФинРезультатПриобретения*(-1);
			//			
			//			Если не СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов тогда
			//				ПроводкаПР = Движения.Налоговый.Добавить();
			//				ПроводкаПР.Период      = ДатаДока;
			//				ПроводкаПР.Организация = СтруктураШапкиДокумента.Организация;
			//				ПроводкаПР.Содержание  = "Прибыль от покупки валюты";
			//				ПроводкаПР.СчетКт		 = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			//				ОбщегоНазначения.УстановитьСубконто(ПроводкаПР.СчетКт, ПроводкаПР.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//				ПроводкаПР.Сумма = ФинРезультатПриобретения;
			//				ПроводкаПР.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			//			КонецЕсли;
			//			
			//		Иначе	
			//			Проводка.Содержание  = "Убыток от покупки валюты";
			//			Проводка.СчетДт		 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			//			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//			Проводка.Сумма = ФинРезультатПриобретения;
			//			
			//			Если не СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов тогда
			//				ПроводкаПР = Движения.Налоговый.Добавить();
			//				ПроводкаПР.Период      = ДатаДока;
			//				ПроводкаПР.Организация = СтруктураШапкиДокумента.Организация;
			//				ПроводкаПР.Содержание  = "Убыток от покупки валюты";
			//				ПроводкаПР.СчетДт		 = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			//				ОбщегоНазначения.УстановитьСубконто(ПроводкаПР.СчетДт, ПроводкаПР.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
			//				ПроводкаПР.Сумма = (-1)*ФинРезультатПриобретения;
			//				ПроводкаПР.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			//			КонецЕсли;
			//		КонецЕсли; 
			//	КонецЕсли; 
			//КонецЕсли; 

	//	КонецЕсли;

ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
	ИЛИ ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда
	
	
	//Добавлено Булавский, РГ-Софт
	ЗаписьДС = ЗаписиДС.Добавить();
	ЗаписьДС.Период = ДатаДока;
	ЗаписьДС.Регистратор = Ссылка;
	ЗаписьДС.ВидДвижения = ВидДвиженияНакопления.Приход;
	ЗаписьДС.БанковскийСчет = СтруктураШапкиДокумента.СчетОрганизации;
	ЗаписьДС.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
	ЗаписьДС.СуммаВал = СуммаДокумента;
	ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
	ЗаписьДС.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
	СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
	СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
	
	//КОнец

	//	Проводка = ПроводкиБУ.Добавить();

	//	Проводка.Период     = ДатаДока;
	//	Проводка.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств,
	//							"Инкассация денежных средств",
	//							"Прочее поступление денежных средств");
	//	Проводка.Организация = СтруктураШапкиДокумента.Организация;

	//	Проводка.СчетДт     = СчетДт;
	//	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
	//	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);

	//	Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
	//	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
	//	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
	//	ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);

	//	Если РасчетыВВалюте Тогда

	//		Если Проводка.СчетДт.Валютный Тогда
	//			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
	//			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
	//		КонецЕсли;

	//		Если Проводка.СчетКт.Валютный Тогда
	//			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
	//			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
	//		КонецЕсли;

	//		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);

	//		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
	//													 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
	//													 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
	//	Иначе
	//		Проводка.Сумма = СуммаДокумента;
	//	КонецЕсли;
		
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		//	и ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		//	//Проводка по налоговому учету для прочего расхода
		//	Если Не ОбщегоНазначения.ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУ) тогда
		//		ПроводкаНУ = Движения.Налоговый.Добавить();
		//		ПроводкаНУ.Период     = СтруктураШапкиДокумента.Дата;
		//		ПроводкаНУ.Содержание = "Прочее поступление денежных средств";
		//		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		//		
		//		ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетУчетаНУ;
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
		//		ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
		//		ПроводкаНУ.Сумма = Проводка.Сумма;
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
		
	
	//Учет курсовых разниц
	Если ( СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета)
		или  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
		ИЛИ СтруктураШапкиДокумента.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда

		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет учета.");

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");

	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		// Проверим соответствие суммы по документу в целом, и сумм указанных в расшифровке платежа
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
		//Проверяем заполнение табличной части 
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом,ДоговорКонтрагента");

		УправлениеДенежнымиСредствами.ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		// Проверки на логическое соответствие реквизитов
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
			Если не СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета тогда

				//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции реализации иностранной валюты валюта документа должна соответствовать валюте регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета тогда

				//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции приобретения иностранной валюты валюта документа должна отличаться от валюты регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;
			
		КонецЕсли;
		
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			//Проверим соответствие организации. указанной в документе и организации указанной в договоре
			БухгалтерскийУчет.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
													  Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
													  
			//Сопоставление валюты расчетов по договору и валюты документа
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					или Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда

					//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(ОбщегоНазначения.ЗначениеНеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") не отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции реализации иностранной валюты валюта договора должна соответствовать реализуемой валюте."
									 ,Отказ,Заголовок);

	           КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					или не Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда

					//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(ОбщегоНазначения.ЗначениеНеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции приобретения иностранной валюты валюта договора должна соответствовать валюте регламентированного учета."
									 ,Отказ,Заголовок);

	           КонецЕсли;
				
			Иначе
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,Платеж.ДоговорКонтрагента,
													 Отказ, Заголовок,"Строка "+Платеж.НомерСтроки+" - ");
	        КонецЕсли;
													  
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
// Заполним реквизиты из стандартного набора по документу основанию.
	ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	#Если Клиент Тогда
    Дата = РабочаяДата;
	#КонецЕсли
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;

	//добавлено для 8.2  РГ-Софт - Петроченко
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или //12.09.2012 Пахоменков закомментированных доков нет в конфе 
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или 
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаНМА") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС") или
		 //ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") или
		 ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		 Тогда
	//добавлено для 8.2  РГ-Софт - Петроченко
	
	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
		или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 
		или ВидДокументаОснования = "ОтчетКомиссионераОПродажах" 
		или ВидДокументаОснования = "ОтчетКомитентуОПродажах" 
		или ВидДокументаОснования = "ПередачаОС" 
		или ВидДокументаОснования = "ПередачаНМА" тогда

		ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору           = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если Не ВидДокументаОснования = "ОтчетКомитентуОПродажах" или ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = Ценообразование.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаВознаграждения;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДСВознаграждения;
				СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");
				
			ИначеЕсли ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа	= ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС	= ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС	= ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ПараметрыДокументаОснования.РасчетыВУсловныхЕдиницах тогда
				Если ПараметрыДокументаОснования.ВалютаДокумента = мВалютаРегламентированногоУчета тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
																				мВалютаРегламентированногоУчета,ПараметрыДокументаОснования.ВалютаВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КурсВзаиморасчетов,
																				1,ПараметрыДокументаОснования.КратностьВзаиморасчетов);
				КонецЕсли;

				СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
				СтрокаПлатеж.СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту	  (СтрокаПлатеж.СуммаНДС,
																		ПараметрыДокументаОснования.ВалютаВзаиморасчетов,мВалютаРегламентированногоУчета,
																		СтрокаПлатеж.КурсВзаиморасчетов,1,
																		СтрокаПлатеж.КратностьВзаиморасчетов,1);
			КонецЕсли;
		КонецЦикла; 

		Если ВидДокументаОснования = "ОтчетКомиссионераОПродажах" тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансамПолученным, "СчетУчетаРасчетовПоАвансам") ;
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом") ;
			Если ВидДокументаОснования = "ОтчетКомитентуОПродажах" и ПараметрыДокументаОснования.УдержатьВознаграждение тогда
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, Контрагент, ДоговорКонтрагента);
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансовПокупателя, "СчетУчетаРасчетовПоАвансам") ;
			Иначе
				ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
			КонецЕсли;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "РасходныйКассовыйОрдер" Тогда
		
		Если НЕ Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			Сообщить("Платежный ордер вводится только на основании расходного кассового ордера с видом операции
			|""Инкассация денежных средств"".");
			
			Возврат;
			
		КонецЕсли;
		
		ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств;
		
		СчетУчетаРасчетовСКонтрагентом=Основание.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1=Основание.СубконтоДт1;
		СубконтоКт2=Основание.СубконтоДт2;
		СубконтоКт3=Основание.СубконтоДт3;
		
		СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента=Основание.СуммаДокумента;
		
		Если Основание.СчетКасса.Валютный Тогда
			СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		Иначе
			СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли; 

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Если НЕ Оплачено Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("Платежный ордер может быть проведен только если он оплачен(флаг ""Оплачено"")."+Символы.ПС+
		         "До установки признака оплаты документ можно только записать.",Отказ,Заголовок);
	Иначе
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Оплачено И НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
