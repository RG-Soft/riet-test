
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И Объект.TMS Тогда
		Сообщить("You can not copy TMS DOCs.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// {RGS AArsentev - заполнение по ExportRequest
	Если Параметры.Свойство("ДанныеЗаполненияИнвойс") Тогда
		ЗаполнитьПоExportRequest(Параметры);
	КонецЕсли;
	// }RGS AArsentev
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	ЗаполнитьКеш();
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.ФормаЗаписать, Объект.Проведен);
	
	инфКартинкаСтатусВажности = ImportExportСервер.ПолучитьКартинкуСтатусаВажности(Объект.СтатусВажности);
	
	Если ЭтоБрокер Тогда
		УстановитьДоступностьЭлементовДляБрокера();
	КонецЕсли;
	
	ОбновитьВидимостьStagesAndStatusesButtons();
	
	// Скроем некоторые элементы, которые не нужны на некоторых Process levels
	Если Объект.ProcessLevel <> Справочники.ProcessLevels.RUWE Тогда
		Элементы.Accepted.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьShipment();
	
	ЗаполнитьИтогиParcelsПриОткрытииПриНеобходимости();
	ДанныеParcelsИParcelLinesАктуальны = Ложь;
	ДанныеGoodsИParcelLinesOfGoodsАктуальны = Ложь;
	ДанныеPOsИItemsEUCАктуальны = Ложь;
	
	// Скроем динамический список с почтовыми сообщениями, чтобы не читать данные из СУБД
	Элементы.EMails.Видимость = Ложь;
	Элементы.EMailsBody1.Видимость = Ложь;
	// А для всех кроме RUWE скроем вообще вкладку, так как на остальных процесс левелах они не обмениваются письмами с брокером из 1с	
	Элементы.СтраницаEMails.Видимость = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE Или Объект.ProcessLevel = Справочники.ProcessLevels.RUEA);
	//RGS EParshina 24.09.2018 14:12:09 - S-I-0005769 + RUEA
	
	УстановитьВидимостьЭлементовEUCSanctions();
	
	// установим видимость COO и TNVED для RU-process levels
	
	ЭтоRUProcessLevel = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE
	ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
	ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM);
	
	Элементы.COORequired.Видимость = ЭтоRUProcessLevel;
	Элементы.GoodsПодменюChangeCOO.Видимость = ЭтоRUProcessLevel;
	Элементы.GoodsCOORequired.Видимость = ЭтоRUProcessLevel;
	
	Элементы.GoodsПодменюTNVED.Видимость = (ЭтоRUProcessLevel ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	Элементы.GoodsTNVED.Видимость = (ЭтоRUProcessLevel ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	Элементы.GoodsTNVEDRate.Видимость = (ЭтоRUProcessLevel ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	
	// { RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	Элементы.GoodsTNVEDBroker.Видимость = (ЭтоRUProcessLevel ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	Элементы.GoodsTNVEDBrokerRate.Видимость = (ЭтоRUProcessLevel ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	// } RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	
	Элементы.GoodsPredecisionTNVED.Видимость = (Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	
	ПроверятьClearedPartNo = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE 
	ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
	ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM
	ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.KZ);
	
	Элементы.GoodsPreviouslyImported.Видимость = ПроверятьClearedPartNo;
	
	НастроитьЭлементыSubmitToCoordinator();
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.DOCОткрытие, Объект.Ссылка);
	
	// { RGS VShamin 25.08.2015 12:10:05 - 
	УстановитьДоступностьЭлементовLeg6();
	// } RGS VShamin 25.08.2015 12:10:05 - 
	
	НастроитьВидимостьToTMS();
	УстановитьПараметрыВыбораLegalEntity();
	
	// { RGS AArsentev 18.07.2017 S-I-0003293
	ЕстьМатериалы = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЕстьМатериалы = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЕстьМатериалы(Объект);
		Элементы.GL_FromSegment.Видимость = ЕстьМатериалы И НЕ ЭтоБрокер;
		Если ЕстьМатериалы И НЕ Объект.GL_FromSegment Тогда
			Элементы.Granted.Доступность = Ложь;
		Иначе
			Элементы.Granted.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	// } RGS AArsentev 18.07.2017 S-I-0003293
	
	// { RGS AArsentev 21.08.2017 S-I-0003524
	Если ЕстьМатериалы Тогда
		Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЗаполнитьБоргиНаApprove(Объект);
		Если Модифицированность Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		Элементы.ФормаApprovedBorgs.Видимость = Истина;
		//Если РольДоступна("SegmentApprover") Тогда
		//	Элементы.ФормаApprove.Видимость = Истина;
		//Иначе
		//	Элементы.ФормаApprove.Видимость = Ложь;
		//КонецЕсли;
		Если РольДоступна("ImportExportSpecialist") Тогда
			Элементы.ApprovalBorgs.Доступность = Истина;
			Элементы.GL_FromSegment.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаApprovedBorgs.Видимость = Ложь;
		Элементы.ФормаApprove.Видимость = Ложь;
	КонецЕсли;
	// } RGS AArsentev 21.08.2017 S-I-0003524
	
	// { RGS LKhristyuk 5/29/2018 6:22:07 PM - вопрос S-I-0005089
		Элементы.SendCCANotification.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	// } RGS LKhristyuk 5/29/2018 6:22:08 PM - вопрос S-I-0005089 
	
	// { RGS AArsentev 05.06.2018 S-I-0005263
	ЗаполнитьКоличествоЛинийПринеобходимости();
	// } RGS AArsentev 05.06.2018 S-I-0005263
	
	// { RGS DKazanskiy 24.07.2018 11:53:20 - S-I-0005657
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA, Ложь);
	КонецЕсли;
	// } RGS DKazanskiy 24.07.2018 11:53:22 - S-I-0005657
	
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	Если Элементы.GL_FromSegment.Видимость Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Goods", Goods);
		СтруктураПараметров.Вставить("ParcelLinesOfGoods", ParcelLinesOfGoods);
		СтруктураПараметров.Вставить("Инвойсы",Объект.Инвойсы);
		СтруктураПараметров.Вставить("Parcels", Объект.Parcels);
		СтруктураПараметров.Вставить("ProcessLevel", Объект.ProcessLevel);
		СтруктураПараметров.Вставить("POD", Объект.POD);
		СтруктураПараметров.Вставить("Дата", Объект.Дата);
		СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
		
		НастроитьВидимостьGL_FromSegmentGranted(СтруктураПараметров);
		
	КонецЕсли;
	
	// } RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыSubmitToCoordinator()
	
	Элементы.TransactionSpecialist.ТолькоПросмотр = ЗначениеЗаполнено(Объект.SubmittedByTransactionSpecialist);
	Элементы.SubmitToCoordinator.Видимость = Не ЗначениеЗаполнено(Объект.SubmittedByTransactionSpecialist);
	Элементы.CancelSubmittionToCoordinator.Видимость = ЗначениеЗаполнено(Объект.SubmittedByTransactionSpecialist);
	
КонецПроцедуры

// { RGS VShamin 25.08.2015 12:11:04 - 
Процедура УстановитьДоступностьЭлементовLeg6()
	
	Если CustomsСервер.ЭтоБрокер() ИЛИ РольДоступна("РедактированиеНеДоступныхПолейLeg6") Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS DKazanskiy 09.08.2018 13:52:07 - S-I-0005767
	// Ставим доступность по дефолту, чтобы установилась нужная по условиям внизу или ничего не менялось, 
	// если условия не выполняются. 
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Accepted", "ТолькоПросмотр",Ложь);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Accept", "Доступность", Истина);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAFirstResponse", "ТолькоПросмотр", Ложь);
	РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Received", "ТолькоПросмотр", Ложь);
	// } RGS DKazanskiy 09.08.2018 13:52:50 - S-I-0005767
	
	ИспользуетсяLeg6Report = ПланыОбмена.Leg7.ПолучитьИспользованиеLeg6ReportДляCCA(Объект.CCA);
	Если ИспользуетсяLeg6Report Тогда
		ProcessLevelЕстьВУзле = ПланыОбмена.Leg7.ПроверитьProcessLevelПоCCA(Объект.CCA, Объект.ProcessLevel);
	КонецЕсли;
	
	Если ИспользуетсяLeg6Report И ProcessLevelЕстьВУзле Тогда
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Accepted", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Accept", "Доступность", Ложь);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "CCAFirstResponse", "ТолькоПросмотр", Истина);
		РГСофтКлиентСервер.НастроитьЭлементЕслиОнЕсть(Элементы, "Received", "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // } RGS VShamin 25.08.2015 12:11:04 - 

&НаСервере
Процедура ЗаполнитьКеш()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Permanent = Перечисления.PermanentTemporary.Permanent;
	Temporary = Перечисления.PermanentTemporary.Temporary;
	Yes = Перечисления.YesNo.Yes;
	No = Перечисления.YesNo.No;
	
	ЭтоБрокер = CustomsСервер.ЭтоБрокер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовДляБрокера()
	
	Элементы.Accepted.ТолькоПросмотр = Истина;
	Элементы.Received.ТолькоПросмотр = Истина;		
	Элементы.SendCCANotification.Видимость = Ложь;	
	
	// { RGS AArsentev 25.05.2018 S-I-0005263
	Элементы.ГруппаNumberofLines.Видимость = Истина;
	// } RGS AArsentev 25.05.2018 S-I-0005263
	
	Элементы.ManualStatusesUser.ТолькоПросмотр = Истина;
	
	// { RGS AArsentev 20.06.2018
	// { RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
	//ЭтоПользовательDGF = РГСофтСерверПовтИспСеанс.ЭтоDGForDHL(ТекущийПользователь);
	//
	//Если ЭтоПользовательDGF Тогда
	//	Элементы.ManualStatusesStatus.ТолькоПросмотр = Ложь;
	//	Элементы.ManualStatusesDate.ТолькоПросмотр = Ложь;
	//	Элементы.CCAReference.Видимость = Истина;
	//	Элементы.CCA_Coordinator.Видимость = Истина;
	//	Элементы.ГруппаTransactionSpecialist.Видимость = Ложь;
	//	Элементы.ГруппаTMS.Видимость = Ложь;
	//Иначе
	//	// } RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
	//	Элементы.ManualStatusesStatus.ТолькоПросмотр = Истина;
	//	Элементы.ManualStatusesDate.ТолькоПросмотр = Истина;
	//	Элементы.CCAReference.Видимость = Ложь;
	//	Элементы.CCA_Coordinator.Видимость = Ложь;
	//	Элементы.ГруппаTransactionSpecialist.Видимость = Истина;
	//	Элементы.ГруппаTMS.Видимость = Истина;
	//КонецЕсли;
	
	Элементы.ManualStatusesDate.ТолькоПросмотр = Ложь;
	Элементы.CCAReference.Видимость = Истина;
	Элементы.CCA_Coordinator.Видимость = Истина;
	Элементы.ГруппаTransactionSpecialist.Видимость = Ложь;
	Элементы.ГруппаTMS.Видимость = Ложь;
	Элементы.GL_FromSegment.Видимость = Ложь;
	Элементы.ReRoute.Видимость = Ложь;
	Элементы.ФормаApprovedBorgs.Видимость = Ложь;
	Элементы.ГруппаApprovedBorgs.Видимость = Ложь;
	Элементы.ItemsПодменюChangePSA.Видимость = Ложь;
	
	СписокВыбораСтатусов = Новый Массив;
	СписокВыбораСтатусов.Добавить(Перечисления.DOCStatuses.PendingSLB);
	СписокВыбораСтатусов.Добавить(Перечисления.DOCStatuses.PendingCertification);
	Элементы.ManualStatusesStatus.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСтатусов);
	// } RGS AArsentev 20.06.2018
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьShipment()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOC", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоставкаУпаковочныеЛисты.Ссылка КАК Shipment
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|ГДЕ
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист = &DOC
	|	И НЕ ПоставкаУпаковочныеЛисты.Ссылка.Отменен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Shipment = Выборка.Shipment;
		Элементы.Shipment.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИтогиParcelsПриОткрытииПриНеобходимости()
	
	Если Объект.Parcels.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.Parcels, "Parcel");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", МассивParcels);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Parcels.NumOfParcels) КАК PiecesQty,
	|	СУММА(Parcels.CubicMeters) КАК CubicMeters,
	|	СУММА(Parcels.GrossWeightKG) КАК GrossWeightKG,
	|	СУММА(Parcels.ChargeableWeight) КАК ChargeableWeight
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В(&Parcels)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	PiecesQty = Выборка.PiecesQty;
	ParcelsCubicMeters = Выборка.CubicMeters;
	ParcelsGrossWeightKG = Выборка.GrossWeightKG;
	ParcelsChargeableWeight = Выборка.ChargeableWeight;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовEUCSanctions()
	
	НужнаПроверкаEUC = ?(ЗначениеЗаполнено(Объект.Ссылка), 
	Документы.КонсолидированныйПакетЗаявокНаПеревозку.НеобходимоПроверитьEUCSanctions(
	Объект.Дата, Объект.Booked, Объект.ProcessLevel, Объект.HouseKeeping),
	Ложь);
	
	Элементы.СтраницаEUCSanctions.Видимость = НужнаПроверкаEUC;
	Элементы.PendingEUC.Видимость = НужнаПроверкаEUC;
	
КонецПроцедуры 

//////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И (ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML") Тогда
		
		Если ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML" Тогда
			
			Ответ = ОбработатьПолучениеСтруктурыПочтовогоСообщенияHTML(ВыбранноеЗначение);
			
			Если Ответ = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Ответ.записатьИсториюИзменения Тогда
				ТД = Элементы.Goods.ТекущиеДанные;
				Если НЕ ТД = Неопределено Тогда
					TDСервер.ЗаписатьНовоеЗначениеСтатуса(ТД.TDStatus, ТД.PartNo, Объект.Ссылка, ТД.TDQuery, ТД.Item, Ответ.ЭлПисьмо);
					// надо найти все строки с таким парт но и установить тот же статус
					// { RGS AArsentev 17.06.2018
					//УстановитьСтатусДляАналогичныхСтрок(ТД);
					// } RGS AArsentev 17.06.2018
					ЭтаФорма.Прочитать();
				КонецЕсли;
				
			КонецЕсли;
			
		иначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения" Тогда
			
			Если ВыбранноеЗначение.Свойство("CCANotification") Тогда
				// { RGS LKhristyuk 5/30/2018 2:34:18 PM - вопрос S-I-0005089
				СформироватьПочтовоеСообщение(ВыбранноеЗначение);
				// } RGS LKhristyuk 5/30/2018 2:34:18 PM - вопрос S-I-0005089 
			Иначе
				ОбработатьПолучениеСтруктурыПочтовогоСообщения(ВыбранноеЗначение);
			КонецЕсли;
			
			Если Ответ = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Функция ОбработатьПолучениеСтруктурыПочтовогоСообщенияHTML(СтруктураПараметров)
	
	// ++ КДС RG-Soft 24.11.2016
	НачатьТранзакцию();
	
	записатьИсториюИзменения = Ложь;
	Если СтруктураПараметров.Свойство("TechDOC") И СтруктураПараметров.TechDOC Тогда
		
		// это означает, что письмо отправлено. 
		// тогда остается, но надо записать в историю изменение с записью ссылки на письмо
		записатьИсториюИзменения = Истина;
		
	КонецЕсли;
	
	// Создадим и отправим EMail	
	УстановитьПривилегированныйРежим(Истина);
	ДокументEMail = Документы.EMails.СоздатьДокумент();
	СтруктураПараметров.Вставить("Object", Объект.Ссылка);
	ДокументEMail.Заполнить(СтруктураПараметров);
	
	Попытка
		ДокументEMail.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ОтменитьТранзакцию();
		ОбновитьВидимостьStagesAndStatusesButtons();
		
		Сообщить(
		"Failed to send email.
		|See errors above.
		|" + ОписаниеОшибки());		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();	
	
	Возврат Новый Структура("записатьИсториюИзменения, ЭлПисьмо", записатьИсториюИзменения, ДокументEMail.Ссылка);
	// -- КДС RG-Soft 24.11.2016
	
КонецФункции


//////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененParcel" Тогда
		
		СтруктураПоискаПоParcel = Новый Структура("Parcel", Параметр);
		Если Объект.Parcels.НайтиСтроки(СтруктураПоискаПоParcel).Количество() Тогда
			
			МассивParcels = Новый Массив;
			МассивParcels.Добавить(Параметр);
			
			Если SelectedParcelOnly Тогда
				
				ТекущиеДанныеParcels = Элементы.Parcels.ТекущиеДанные;
				Если ТекущиеДанныеParcels <> Неопределено
					И ТекущиеДанныеParcels.Parcel = Параметр Тогда
					
					ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
					
				Иначе
					
					ПерезаполнитьДополнительныеКолонкиParcels(МассивParcels);
					
				КонецЕсли;
				
			Иначе
				
				ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
				
			КонецЕсли;
			
			// ВТОРОЙ ВЫЗОВ СЕРВЕРА
			ПерезаполнитьGoodsИParcelLinesOfGoods();
			
		КонецЕсли;
		
		// ++ РГ-Софт КДС 24.11.2016
	ИначеЕсли ИмяСобытия = "ОтказОтправкиЗапросаTechDOC" Тогда
		
		Если ЭтаФорма = Параметр Тогда
			
			// если пришел отказ, то откатываем статус в строке обратно
			ТД = Элементы.Goods.ТекущиеДанные;
			Если НЕ ТД = Неопределено Тогда
				ТД.TDStatus 	= ПредыдущийСтатус;
				ТД.TDIndicator 	= ПолучитьКартинкуСтатуса(ТД.TDStatus);
			КонецЕсли;
			
		КонецЕсли;
		// -- РГ-Софт КДС 24.11.2016
	// { RGS AArsentev 07.05.2018 S-I-0005089
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуВладельца" Тогда
		Закрыть();
	// } RGS AArsentev 07.05.2018 S-I-0005089
	ИначеЕсли ИмяСобытия = "ИзменилсяGL_PoLine" Тогда
		ПерезаполнитьGoodsИParcelLinesOfGoods();
		ЭтаФорма.Прочитать();
	// { RGS AArsentev1 26.12.2018 8:56:16 - S-I-0006451
	ИначеЕсли ИмяСобытия = "ИзменилсяRS_PoLine" Тогда
		Если НЕ Объект.Ссылка.Пустая() И 
			ТипЗнч(Параметр) = Тип("Массив") И 
			НЕ Параметр.Найти(Объект.Ссылка) = Неопределено Тогда
			ПерезаполнитьGoodsИParcelLinesOfGoods();
			ЭтаФорма.Прочитать();
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("PO Lines were successfully updated");
		КонецЕсли;
		// проверим, есть ли POLine в нашем списке
		
	// } RGS AArsentev1 26.12.2018 8:56:19 - S-I-0006451
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ТочноеВремяНачалаКлиент", ТекущаяУниверсальнаяДатаВМиллисекундах());	
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	//КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(ТекущийОбъект.ModifiedBy, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
	// { RGS VShamin 22.04.2016 16:20:50 - S-I-0001602
	Если СбросилисьДатыРедактируемыеБрокером Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СбросилисьДатыРедактируемыеБрокером", Истина);
	КонецЕсли;
	// } RGS VShamin 22.04.2016 16:20:51 - S-I-0001602
	
	Если ПараметрыЗаписи.Свойство("ДопСвойство") И ПараметрыЗаписи.ДопСвойство = "SentToTMS" Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("SentToTMS", Истина);
	КонецЕсли;
	
	ДозаполнимItemsПоGuaranteeLetterRequired(Отказ);
	
	// { RGS AGorlenko 20.10.2017 11:44:12 - определение текущей версии дока
	// { RGS DKazanskiy 03.08.2018 15:15:49 - S-I-0005657
	// проверим версию перед записью, чтобы исключить любые действия с версией (например, ручное удаление последних)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA, Ложь);
	КонецЕсли;
	// } RGS DKazanskiy 03.08.2018 15:15:50 - S-I-0005657
	ТекущийОбъект.ТекущаяВерсияДокумента = ТекущаяВерсия;
	// } RGS AGorlenko 20.10.2017 11:44:28 - определение текущей версии дока
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.ФормаЗаписать, Объект.Проведен);
	
	инфКартинкаСтатусВажности = ImportExportСервер.ПолучитьКартинкуСтатусаВажности(Объект.СтатусВажности);
	
	ОбновитьВидимостьStagesAndStatusesButtons();
	
	НайтиТоварыВоВременномЭкспорте();
	
	УстановитьПараметрыВыбораLegalEntity();
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.DOCИнтерактивноеПроведение, Объект.Ссылка);
	//КонецЕсли;
	
	// { RGS LKhristyuk 5/29/2018 6:58:02 PM - вопрос S-I-0005089
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Элементы.SendCCANotification.Доступность = Истина;
	Иначе
		Элементы.SendCCANotification.Доступность = Ложь;
	КонецЕсли;	
	// } RGS LKhristyuk 5/29/2018 6:58:02 PM - вопрос S-I-0005089 
	
КонецПроцедуры

&НаСервере
Процедура НайтиТоварыВоВременномЭкспорте()
	
	ItemsInTempExp.Очистить();
	
	Если Объект.Отменен
		ИЛИ Не ЗначениеЗаполнено(Объект.Requested)
		ИЛИ ЭтоБрокер Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Invoices", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс"));
	Запрос.УстановитьПараметр("ProcessLevel", Объект.ProcessLevel);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	QtyOfItemsInTemporaryImpExpОстатки.Item КАК Item
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК Items
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.QtyOfItemsInTemporaryImpExp.Остатки КАК QtyOfItemsInTemporaryImpExpОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.AdditionalDataOfItemsInTemporaryImpExp КАК AdditionalDataOfItemsInTemporaryImpExp
	|			ПО (AdditionalDataOfItemsInTemporaryImpExp.Item = QtyOfItemsInTemporaryImpExpОстатки.Item)
	|		ПО (QtyOfItemsInTemporaryImpExpОстатки.Item.СерийныйНомер ПОДОБНО ""%"" + Items.СерийныйНомер + ""%""
	|				ИЛИ QtyOfItemsInTemporaryImpExpОстатки.Item.КодПоИнвойсу ПОДОБНО ""%"" + Items.КодПоИнвойсу + ""%"")
	|			И Items.КостЦентр.Segment = QtyOfItemsInTemporaryImpExpОстатки.Item.КостЦентр.Segment
	|ГДЕ
	|	Items.Инвойс В(&Invoices)
	|	И НЕ Items.ПометкаУдаления
	|	И (Items.СерийныйНомер <> """"
	|				И Items.СерийныйНомер <> ""N/A""
	|				И Items.СерийныйНомер <> ""N\A""
	|				И Items.СерийныйНомер <> ""NA""
	|			ИЛИ Items.КодПоИнвойсу <> """"
	|				И Items.КодПоИнвойсу <> ""N/A""
	|				И Items.КодПоИнвойсу <> ""N\A""
	|				И Items.КодПоИнвойсу <> ""NA"")
	|	И AdditionalDataOfItemsInTemporaryImpExp.CustomsRegime.ImportExport = ЗНАЧЕНИЕ(Перечисление.ИмпортЭкспорт.Export)
	|	И AdditionalDataOfItemsInTemporaryImpExp.ProcessLevel = &ProcessLevel";
	
	ItemsInTempExp.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Item"));
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// ЗАКОММЕНТИРОВАТЬ СЛЕДУЮЩИЕ 3 СТРОЧКИ. ОНИ НУЖНЫ ВРЕМЕННО ЧТОБЫ РАЗОБРАТЬСЯ НАСКОЛЬКО МЕДЛЕННО РАБОТАЕТ ТУРКМЕНИСТАН.
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиВызовСервераРГСофт.ЗафиксироватьВремяВыполненияНаКлиенте(ПараметрыЗаписи.ТочноеВремяНачалаКлиент, ТекущаяУниверсальнаяДатаВМиллисекундах(), "DOCИнтерактивноеПроведениеКлиент", Объект.Ссылка);
	//КонецЕсли;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
	
	ПерезаполнитьGoodsИParcelLinesOfGoods();
	
	ОткрытьTemporaryImpExpDesktopПриНеобходимости();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьTemporaryImpExpDesktopПриНеобходимости()
	
	Если ItemsInTempExp.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Ссылка", ItemsInTempExp);	
	СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);	
	ОткрытьФорму("Обработка.TemporaryImpExpDesktop.Форма", СтруктураПараметров);	
	
	Предупреждение(
	"We found items in temporary export
	|that might be in current DOC.",
	30);
	
КонецПроцедуры

&НаКлиенте
Процедура RefreshTables(Команда)
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
	
	ПерезаполнитьGoodsИParcelLinesOfGoods();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ШАПКА, ЭТАПЫ, СТАТУСЫ И ЛОГИ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаParcels Тогда
		
		Если НЕ ДанныеParcelsИParcelLinesАктуальны Тогда
			
			МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
			ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаInvoicesParcelLines Тогда
		
		Если НЕ ДанныеGoodsИParcelLinesOfGoodsАктуальны Тогда
			
			ПерезаполнитьGoodsИParcelLinesOfGoods();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаEMails Тогда
		
		Если НЕ Элементы.EMails.Видимость Тогда
			
			НастроитьСтраницуEmails();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаEUCSanctions Тогда
		
		Если Не ДанныеPOsИItemsEUCАктуальны Тогда 
			
			ShowOnlyPendingEUC = Истина;
			ЗаполнитьPOsИItemsForEUC();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьСтраницуEmails()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	EMails.Отбор,
	"Object",
	ВидСравненияКомпоновкиДанных.Равно,
	ЗначениеОтбора);
	
	Элементы.EMails.Видимость = Истина;
	Элементы.EMailsBody1.Видимость = Истина;
	Элементы.ФиктивнаяНадписьEMails.Видимость = Ложь;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ШАПКА, ЭТАПЫ, СТАТУСЫ И ЛОГИ

&НаКлиенте
Процедура PODПриИзменении(Элемент)
	
	ПерезаполнитьGoodsИParcelLinesOfGoods();
	
КонецПроцедуры

// { RGS AGorlenko 25.12.2015 13:07:30 - S-I-0001486
&НаКлиенте
Процедура CCAНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийCCA = Объект.CCA;
	
КонецПроцедуры

&НаКлиенте
Процедура CCAПриИзменении(Элемент)
	
	Если ТекущийCCA <> Объект.CCA Тогда
		СброситьДатыРедактируемыеБрокером();
	КонецЕсли;
	// { RGS AArsentev 26.07.2016 12:54:25 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA);
	КонецЕсли;
	// } RGS AArsentev 26.07.2016 12:54:25
КонецПроцедуры // } RGS AGorlenko 25.12.2015 13:10:00 - S-I-0001486                

&НаКлиенте
Процедура MOTНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущийMOT = Объект.MOT;
КонецПроцедуры

&НаКлиенте
Процедура MOTПриИзменении(Элемент)
	
	Если ТекущийMOT <> Объект.MOT Тогда
		СброситьДатыРедактируемыеБрокером();
	КонецЕсли;
	// { RGS AArsentev 26.07.2016 12:54:25
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA);
	КонецЕсли;
	// } RGS AArsentev 26.07.2016 12:54:25
КонецПроцедуры

&НаКлиенте
Процедура СброситьДатыРедактируемыеБрокером()
	Объект.Received = '00010101';
	//Объект.Requested = '00010101';
	// { RGS VShamin 18.01.2016 12:27:29 - 
	Объект.Accepted = '00010101';
	УстановитьДоступностьЭлементовLeg6();
	// } RGS VShamin 18.01.2016 12:27:38 - 
	// { RGS VShamin 15.04.2016 13:49:49 - S-I-0001602
	// При интерактивном сбросе дат необходимо установить признак в данном доке для изменения версии при записи
	СбросилисьДатыРедактируемыеБрокером = Истина;
	// } RGS VShamin 15.04.2016 13:49:55 - S-I-0001602
КонецПроцедуры


// STAGES

//ДОДЕЛАТЬ
&НаСервере
Процедура ОбновитьВидимостьStagesAndStatusesButtons()
	
	Элементы.Accept.Видимость = ЭтоБрокер И ЗначениеЗаполнено(Объект.Requested) И НЕ ЗначениеЗаполнено(Объект.Accepted) И НЕ ЗначениеЗаполнено(Объект.Received);
	
	Элементы.ReturnToSLB.Видимость = ЭтоБрокер И ЗначениеЗаполнено(Объект.Accepted) И НЕ ЗначениеЗаполнено(Объект.Received) И НЕ Объект.CurrentStatus = Перечисления.DOCStatuses.PendingSLB;
	
	Элементы.ReturnToCCA.Видимость = НЕ ЭтоБрокер И ЗначениеЗаполнено(Объект.Requested) И НЕ ЗначениеЗаполнено(Объект.Received) И НЕ Объект.CurrentStatus = Перечисления.DOCStatuses.PendingCCA;
	
	Элементы.GreenLight.Видимость = ЭтоБрокер И ЗначениеЗаполнено(Объект.Accepted) И НЕ ЗначениеЗаполнено(Объект.Received);
	
КонецПроцедуры 

&НаКлиенте
Процедура RequestedПриИзменении(Элемент)
	
	ОбновитьCurrentStatusНаСервере();
	// { RGS DKazanskiy 24.07.2018 11:53:20 - 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA);
	КонецЕсли;
	// } RGS DKazanskiy 24.07.2018 11:53:22 - 
	
КонецПроцедуры

&НаКлиенте
Процедура Accept(Команда)
	
	Объект.Accepted = ТекущаяДата();
	Модифицированность = Истина;
	ОбновитьВидимостьStagesAndStatusesButtons();
	
КонецПроцедуры

&НаКлиенте
Процедура AcceptedПриИзменении(Элемент)
	
	ОбновитьВидимостьStagesAndStatusesButtons();
	
КонецПроцедуры

&НаКлиенте
Процедура GreenLight(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Текущий пользователь не определен!",
		, , "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.POD) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Поле ""POD"" не заполнено!",
		, "POD", "Объект", Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ConsignTo) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Поле ""Consign-to"" не заполнено!",
		, "ConsignTo", "Объект", Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.CCA) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Поле ""CCA"" не заполнено!",
		, "ConsignTo", "Объект", Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.MOT) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Поле ""MOT"" не заполнено!",
		, "MOT", "Объект", Отказ);
	КонецЕсли;	
	
	Если Объект.ProcessLevel = ПредопределенноеЗначение("Справочник.ProcessLevels.RUWE")
		Или Объект.ProcessLevel = ПредопределенноеЗначение("Справочник.ProcessLevels.RUEA") Тогда 
		
		Если НЕ ДанныеParcelsИParcelLinesАктуальны Тогда
			
			МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
			ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels);
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы из Объект.Parcels Цикл 
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.HazardClass) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line №" + СтрокаТаблицы.НомерСтроки + " 'Hazard class' is empty!",
				, "Объект.Parcels[" + (СтрокаТаблицы.НомерСтроки - 1) +"].HazardClass", , Отказ);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Выберем шаблон
	// { RGS AGorlenko 29.05.2017 11:42:23 - отказ от модальности
	//Template = ВыбратьTemplate();
	//
	//Если ЗначениеЗаполнено(Template) Тогда
	//	
	//	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщения(Template);
	//	Если СтруктураПараметров <> Неопределено Тогда
	//		
	//		ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения", СтруктураПараметров, ЭтаФорма);
	//				
	//	КонецЕсли; 			
	//				
	//КонецЕсли;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ТекущийПользователь);
	СтруктураОтбора.Вставить("POD", Объект.POD);
	СтруктураОтбора.Вставить("ConsignTo", Объект.ConsignTo);
	ПараметрыФормыВыбораШаблона = Новый Структура("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.UsersPODsEMailTemplates.ФормаВыбора", ПараметрыФормыВыбораШаблона, ЭтаФорма, , ,
	, Новый ОписаниеОповещения("ВыбратьTemplateЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	// } RGS AGorlenko 29.05.2017 11:42:28 - отказ от модальности
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьTemplateЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтруктураПараметров = ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщения(Результат);
		Если СтруктураПараметров <> Неопределено Тогда
			
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения", СтруктураПараметров, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ВыбратьTemplate()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ТекущийПользователь);
	СтруктураОтбора.Вставить("POD", Объект.POD);
	СтруктураОтбора.Вставить("ConsignTo", Объект.ConsignTo);
	ПараметрыФормыВыбораШаблона = Новый Структура("Отбор", СтруктураОтбора);
	Возврат ОткрытьФормуМодально("Справочник.UsersPODsEMailTemplates.ФормаВыбора", ПараметрыФормыВыбораШаблона, ЭтаФорма);
	
КонецФункции 

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщения(Template)
	
	СтруктураДанныхФормыОтправкиПочтовогоСообщения = ПолучитьСтруктуруДанныхФормыОтправкиПочтовогоСообщения(Template, Объект.ConsignTo, Объект.CCA, Объект.MOT, Объект.DirectlyToTheHub, Объект.POD, Объект.Coordinator);
	
	Отказ = Ложь;
	
	Если СтруктураДанныхФормыОтправкиПочтовогоСообщения.ConsignToEMailBoxes.Количество() = 0 Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"У Consign-to """ + СокрЛП(Объект.ConsignTo) + """ не заполнено ни одного e-mail!",
		, "ConsignTo", "Объект", Отказ);	
	КонецЕсли; 
	
	Если СтруктураДанныхФормыОтправкиПочтовогоСообщения.CCAEMailBoxes.Количество() = 0 Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"У CCA """ + СокрЛП(Объект.CCA) + """ для MOT """ + СокрЛП(Объект.MOT) + """ не заполнено ни одного e-mail!",
		, "CCA", "Объект", Отказ);	
	КонецЕсли;
	
	Если Объект.DirectlyToTheHub Тогда
		
		Если СтруктураДанныхФормыОтправкиПочтовогоСообщения.PODEmailBoxes.Количество() = 0 Тогда  
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"У POD """ + СокрЛП(Объект.POD) + """ не заполнено ни одного e-mail box!",
			, "POD", "Объект", Отказ);	
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ СтруктураДанныхФормыОтправкиПочтовогоСообщения.Свойство("UserEMailBox")
		ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтруктураДанныхФормыОтправкиПочтовогоСообщения.UserEMailBox)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось определить e-mail текущего пользователя. Попросите администратора заполнить ваш e-mail.",
		, , "Объект", Отказ);	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	
	СписокRecipients = Новый СписокЗначений;
	СписокRecipients.ЗагрузитьЗначения(СтруктураДанныхФормыОтправкиПочтовогоСообщения.ConsignToEMailBoxes);
	Для Каждого EMailBox Из СтруктураДанныхФормыОтправкиПочтовогоСообщения.CCAEMailBoxes Цикл
		СписокRecipients.Добавить(EMailBox);			 
	КонецЦикла; 
	Если Объект.DirectlyToTheHub Тогда	
		Для Каждого EMailBox Из СтруктураДанныхФормыОтправкиПочтовогоСообщения.PODEMailBoxes Цикл
			СписокRecipients.Добавить(EMailBox);			 
		КонецЦикла; 	
	КонецЕсли; 
	СтруктураПараметров.Вставить("Recipients", СписокRecipients);
	СтруктураПараметров.Вставить("ReplyTo", СтруктураДанныхФормыОтправкиПочтовогоСообщения.UserEMailBox);
	СтруктураПараметров.Вставить("Subject", СтруктураДанныхФормыОтправкиПочтовогоСообщения.Subject);
	СтруктураПараметров.Вставить("Body", СтруктураДанныхФормыОтправкиПочтовогоСообщения.Body);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхФормыОтправкиПочтовогоСообщения(Template, ConsignTo, CCA, MOT, DirectlyToTheHub, POD, Coordinator)
	
	СтруктураПараметров = Новый Структура;
	СтруктураТекстов = Новый Структура;
	
	СтруктураПараметров.Вставить("Template", Template);
	СтруктураТекстов.Вставить("РеквизитыTemplate",
	"ВЫБРАТЬ
	|	UsersPODsEMailTemplates.Subject,
	|	UsersPODsEMailTemplates.Body
	|ИЗ
	|	Справочник.UsersPODsEMailTemplates КАК UsersPODsEMailTemplates
	|ГДЕ
	|	UsersPODsEMailTemplates.Ссылка = &Template");
	
	СтруктураПараметров.Вставить("ConsignTo", ConsignTo);
	СтруктураТекстов.Вставить("РеквизитыConsignTo",
	"ВЫБРАТЬ
	|	ConsignToEMailBoxes.EMailBox
	|ИЗ
	|	Справочник.ConsignTo.EMailBoxes КАК ConsignToEMailBoxes
	|ГДЕ
	|	ConsignToEMailBoxes.Ссылка = &ConsignTo");
	
	СтруктураПараметров.Вставить("CCA", CCA);
	СтруктураПараметров.Вставить("MOT", MOT);
	СтруктураТекстов.Вставить("РеквизитыCCA",
	"ВЫБРАТЬ
	|	AgentsEMailBoxes.EMailBox
	|ИЗ
	|	Справочник.Agents.EMailBoxes КАК AgentsEMailBoxes
	|ГДЕ
	|	AgentsEMailBoxes.Ссылка = &CCA
	|	И AgentsEMailBoxes.MOT = &MOT");
	
	Если DirectlyToTheHub Тогда
		
		СтруктураПараметров.Вставить("POD", POD);
		СтруктураТекстов.Вставить("РеквизитыPOD",
		"ВЫБРАТЬ
		|	CountriesHUBsEMailBoxes.EMailBox
		|ИЗ
		|	Справочник.CountriesHUBs.EMailBoxes КАК CountriesHUBsEMailBoxes
		|ГДЕ
		|	CountriesHUBsEMailBoxes.Ссылка = &POD");
		
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("User", ПараметрыСеанса.ТекущийПользователь);
	СтруктураТекстов.Вставить("РеквизитыUser",
	"ВЫБРАТЬ
	|	Пользователи.EMail КАК EMailBox
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &User");
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	СтруктураВозврата = Новый Структура;
	
	ВыборкаРеквизитовTemplate = СтруктураРезультатов.РеквизитыTemplate.Выбрать();
	ВыборкаРеквизитовTemplate.Следующий();
	СтруктураВозврата.Вставить("Subject", СокрЛП(ВыборкаРеквизитовTemplate.Subject));
	СтруктураВозврата.Вставить("Body", СокрЛП(ВыборкаРеквизитовTemplate.Body));
	
	СтруктураВозврата.Вставить("ConsignToEMailBoxes", СтруктураРезультатов.РеквизитыConsignTo.Выгрузить().ВыгрузитьКолонку("EMailBox"));
	СтруктураВозврата.Вставить("CCAEmailBoxes", СтруктураРезультатов.РеквизитыCCA.Выгрузить().ВыгрузитьКолонку("EMailBox"));
	
	Если DirectlyToTheHub Тогда
		
		СтруктураВозврата.Вставить("PODEMailBoxes", СтруктураРезультатов.РеквизитыPOD.Выгрузить().ВыгрузитьКолонку("EMailBox"));
		
	КонецЕсли; 
	
	ВыборкаРеквизитовUser = СтруктураРезультатов.РеквизитыUser.Выбрать();
	Если ВыборкаРеквизитовUser.Следующий() Тогда
		СтруктураВозврата.Вставить("UserEMailBox", ВыборкаРеквизитовUser.EMailBox);
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ReceivedПриИзменении(Элемент)
	
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура GrantedПриИзменении(Элемент)
	
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры


// STATUSES

&НаСервере
Процедура ОбновитьCurrentStatusНаСервере()
	
	Документы.КонсолидированныйПакетЗаявокНаПеревозку.ОбновитьDOCCurrentStatus(Объект);
	ОбновитьВидимостьStagesAndStatusesButtons();
	
КонецПроцедуры 

&НаКлиенте
Процедура ReturnToSLB(Команда)
	
	НоваяСтрока = Объект.ManualStatuses.Добавить();
	НоваяСтрока.Date = ТекущаяДата();
	НоваяСтрока.Status = ПредопределенноеЗначение("Перечисление.DOCStatuses.PendingSLB");
	НоваяСтрока.User = ТекущийПользователь;
	Элементы.ManualStatuses.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ManualStatusesComment1;
	Модифицированность = Истина;
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ReturnToCCA(Команда)
	
	НоваяСтрока = Объект.ManualStatuses.Добавить();
	НоваяСтрока.Date = ТекущаяДата();
	НоваяСтрока.Status = ПредопределенноеЗначение("Перечисление.DOCStatuses.PendingCCA");
	НоваяСтрока.User = ТекущийПользователь;
	Элементы.ManualStatuses.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ManualStatusesComment1;
	Модифицированность = Истина;
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ManualStatusesПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		Элемент.ТекущиеДанные.Date = ТекущаяДата();
		Элемент.ТекущиеДанные.User = ТекущийПользователь;	
		Если ЭтоБрокер Тогда
			Элемент.ТекущиеДанные.Status = ПредопределенноеЗначение("Перечисление.DOCStatuses.PendingSLB");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ManualStatusesПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ManualStatusesПослеУдаления(Элемент)
	
	ОбновитьCurrentStatusНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ManualStatusesПередНачаломИзменения(Элемент, Отказ)
	
	ПроверитьДоступностьСтрокиManualStatusesДляРедактирования(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ManualStatusesПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Возврат;
	
	ПроверитьДоступностьСтрокиManualStatusesДляРедактирования(Элемент, Отказ);
	Если Не Отказ И Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущийСтатус = Элемент.ТекущиеДанные.Status;
		ПроверитьДоступностьСтрокиManualStatusesДляУдаления(ТекущийСтатус, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьСтрокиManualStatusesДляРедактирования(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
	// { RGS ASeryakov S-I-0005001 10.04.2018 12:00:00
	//ЭтоПользовательDGF = РГСофтСерверПовтИспСеанс.ЭтоDGF(Элемент.ТекущиеДанные.User);
	ЭтоПользовательDGF = РГСофтСерверПовтИспСеанс.ЭтоDGForDHL(Элемент.ТекущиеДанные.User);
	// } RGS ASeryakov S-I-0005001 10.04.2018 12:00:00
	Если Не ЭтоПользовательDGF Или  Элемент.ТекущиеДанные.User <> ТекущийПользователь Тогда
		// } RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
		Если Не РГСофтСерверПовтИспСеанс.ЭтоПользовательШлюмберже(Элемент.ТекущиеДанные.User) Тогда
			Отказ = Истина;
		КонецЕсли;
		// { RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
	КонецЕсли;
	// } RGS AArsentev S-I-0003275 22.06.2017 11:08:55 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьСтрокиManualStatusesДляУдаления(ТекущийСтатус, Отказ)
	
	Если ТекущийСтатус = Перечисления.DOCStatuses.RedLight И НЕ РольДоступна("ПолныеПрава") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// СТРАНИЦА PARCELS

&НаКлиенте
Процедура ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(МассивParcels)
	
	Если МассивParcels.Количество() = 0 Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДанныеParcels", Новый Массив);
		СтруктураДанных.Вставить("ДанныеParcelLines", Новый Массив);
		
	Иначе
		
		СтруктураДанных = ПолучитьСтруктуруДанныхParcelsИParcelLines(МассивParcels);
		
	КонецЕсли;
	
	ПерезаполнитьДополнительныеКолонкиParcelsИзДанных(СтруктураДанных.ДанныеParcels);	
	ПерезаполнитьParcelLinesИзДанных(СтруктураДанных.ДанныеParcelLines);
	
	ДанныеParcelsИParcelLinesАктуальны = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхParcelsИParcelLines(Parcels)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеParcels", Новый Массив);
	СтруктураВозврата.Вставить("ДанныеParcelLines", Новый Массив);
	
	// Если парселей нет - значит запросы точно ничего не вернут - значит их можно не выполнять
	Если Parcels.Количество() = 0 Тогда	
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Parcels", Parcels);
	
	СтруктураТекстов.Вставить("ДанныеParcels", ПолучитьТекстЗапросаДанныхParcels());
	СтруктураТекстов.Вставить("ДанныеParcelLines", ПолучитьТекстЗапросаДанныхParcelLines());
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	Выборка = СтруктураРезультатов.ДанныеParcels.Выбрать();
	СтрокаСвойствParcels = ПолучитьСтрокуСвойствParcels();	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствParcels);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcels);
		СтруктураВозврата.ДанныеParcels.Добавить(Структура);
		
	КонецЦикла;
	
	Выборка = СтруктураРезультатов.ДанныеParcelLines.Выбрать();
	МассивСтруктур = Новый Массив;
	СтрокаСвойствParcelLines = ПолучитьСтрокуСвойствParcelLines();
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствParcelLines);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcelLines);
		СтруктураВозврата.ДанныеParcelLines.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// PARCELS. ЗАПОЛНЕНИЕ ДОП. КОЛОНОК

&НаКлиенте
Процедура ПерезаполнитьДополнительныеКолонкиParcels(МассивParcels)
	
	Если МассивParcels.Количество() = 0 Тогда
		ДанныеParcels = Новый Массив;
	Иначе
		ДанныеParcels = ПолучитьДанныеParcels(МассивParcels);
	КонецЕсли;
	
	ПерезаполнитьДополнительныеКолонкиParcelsИзДанных(ДанныеParcels);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеParcels(Parcels)
	
	МассивСтруктур = Новый Массив;
	
	// Если парселей нет - значит запрос ничего не вернет - значит его можно не выполнять
	Если Parcels.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", Parcels);
	Запрос.Текст = ПолучитьТекстЗапросаДанныхParcels();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаСвойствParcels = ПолучитьСтрокуСвойствParcels();	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствParcels);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcels);
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДанныхParcels()
	
	Возврат
	"ВЫБРАТЬ
	|	Parcels.Ссылка КАК Parcel,
	|	Parcels.NumOfParcels,
	|	Parcels.CubicMeters,
	|	Parcels.GrossWeightKG,
	|	Parcels.ChargeableWeight,
	|	Parcels.POList,
	|	Parcels.InvoiceList,
	|	Parcels.HazardClass
	|ИЗ
	|	Справочник.Parcels КАК Parcels
	|ГДЕ
	|	Parcels.Ссылка В(&Parcels)";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойствParcels()
	
	Возврат "Parcel, NumOfParcels, CubicMeters, GrossWeightKG, ChargeableWeight, POList, InvoiceList, HazardClass";
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьДополнительныеКолонкиParcelsИзДанных(Данные)
	
	СтруктураПоискаПоParcel = Новый Структура("Parcel");
	Для Каждого Структура Из Данные Цикл
		
		СтруктураПоискаПоParcel.Parcel = Структура.Parcel;
		СтрокаТЧ = Объект.Parcels.НайтиСтроки(СтруктураПоискаПоParcel)[0];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Структура, "NumOfParcels, CubicMeters, GrossWeightKG, ChargeableWeight, POList, InvoiceList, HazardClass");
		
	КонецЦикла;
	ПерезаполнитьИтогиParcels();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИтогиParcels()
	
	PiecesQty = Объект.Parcels.Итог("NumOfParcels");
	ParcelsCubicMeters = Объект.Parcels.Итог("CubicMeters");
	ParcelsGrossWeightKG = Объект.Parcels.Итог("GrossWeightKG");
	ParcelsChargeableWeight = Объект.Parcels.Итог("ChargeableWeight");
	
КонецПроцедуры


// PARCELS. ОБРАБОТЧИКИ СОБЫТИЙ.

&НаКлиенте
Процедура ParcelsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ТекДанные = Элементы.Parcels.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			ПоказатьПредупреждение(, "Select parcel!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// { RGS AArsentev 04.05.2018
	#Если ВебКлиент Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭтотЭлемент",Элемент);
		СтруктураПараметров.Вставить("ЭтоКопирование",Копирование);
		Если Копирование Тогда
			СтруктураПараметров.Вставить("ТекПарсель", ТекДанные.Parcel);
		КонецЕсли;
		
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ParcelsПередНачаломДобавленияЗавершение", 
		ЭтотОбъект, СтруктураПараметров),
		"Create new Parcel?
		|Yes - create new
		|No - choose existing", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Да);
	#Иначе
	// } RGS AArsentev 04.05.2018
		ТекстВопроса = "Create new Parcel?
		|Yes - create new
		|No - choose existing";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если Копирование Тогда
				ОткрытьФорму("Справочник.Parcels.Форма.ФормаЭлемента", Новый Структура("ЗначениеКопирования", ТекДанные.Parcel), Элемент, Объект.Ссылка);
			иначе
				ОткрытьФорму("Справочник.Parcels.ФормаОбъекта", , Элемент, Объект.Ссылка);
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуВыбораParcel(Элемент);
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// { RGS AArsentev 04.05.2018
&НаКлиенте
Процедура ParcelsПередНачаломДобавленияЗавершение(Результат, ПараметрКоманды) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПараметрКоманды.ЭтоКопирование Тогда
			ОткрытьФорму("Справочник.Parcels.Форма.ФормаЭлемента", Новый Структура("ЗначениеКопирования", ПараметрКоманды.ТекПарсель), ПараметрКоманды.ЭтотЭлемент, Объект.Ссылка);
		иначе
			ОткрытьФорму("Справочник.Parcels.ФормаОбъекта", , ПараметрКоманды.ЭтотЭлемент, Объект.Ссылка);
		КонецЕсли;
		
	Иначе
		
		ОткрытьФормуВыбораParcel(ПараметрКоманды.ЭтотЭлемент);
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 04.05.2018

&НаКлиенте
Процедура ОткрытьФормуВыбораParcel(Элемент)
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзDOC");
	СтруктураНастройки.Вставить("CurrentDOC", Объект.Ссылка);
	СтруктураНастройки.Вставить("CurrentParcels", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.Parcels.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ParcelsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.Parcels") Тогда
		
		Для Каждого Значение Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.Parcels.Добавить();
			НоваяСтрока.Parcel = Значение;
		КонецЦикла;
		
		Модифицированность = Истина;
		
		Если SelectedParcelOnly Тогда
			ПерезаполнитьДополнительныеКолонкиParcels(ВыбранноеЗначение);
		Иначе
			ПерезаполнитьДополнительныеКолонкиParcelsИParcelLines(ВыбранноеЗначение);
		КонецЕсли;
		
		// ВТОРОЙ ВЫЗОВ СЕРВЕРА
		ПерезаполнитьGoodsИParcelLinesOfGoods();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ParcelsПриАктивизацииСтроки(Элемент)
	
	Если SelectedParcelOnly Тогда
		ПерезаполнитьParcelLines();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ParcelsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекParcel = Элемент.ТекущиеДанные.Parcel;
	Если ЗначениеЗаполнено(ТекParcel) Тогда
		ПоказатьЗначение(,ТекParcel);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ответ = Вопрос(
		"Are you sure you want to remove this Parcel from DOC?",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelsПослеУдаления(Элемент)
	
	ПерезаполнитьИтогиParcels();
	УдалитьЛишниеParcelLines();
	
	ПерезаполнитьGoods();
	УдалитьЛишниеParcelLinesOfGoods();
	
КонецПроцедуры


// PARCELS PARCEL LINES. ЗАПОЛНЕНИЕ ДАННЫХ.

&НаКлиенте
Процедура ПерезаполнитьParcelLines()
	
	// Определим Parcels, строки которых должны отображаться в Parcels Parcel lines
	Если SelectedParcelOnly Тогда
		
		МассивParcels = Новый Массив;
		ТекущиеДанныеParcels = Элементы.Parcels.ТекущиеДанные;
		Если ТекущиеДанныеParcels <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанныеParcels.Parcel) Тогда
			МассивParcels.Добавить(ТекущиеДанныеParcels.Parcel);
		КонецЕсли;
		
	Иначе
		МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	КонецЕсли;
	
	ПерезаполнитьParcelLinesПоМассивуParcels(МассивParcels);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьParcelLinesПоМассивуParcels(МассивParcels)
	
	ParcelLines.Очистить();
	
	Если МассивParcels.Количество() = 0 Тогда
		ПерезаполнитьИтогиParcelLines();
		Возврат;
	КонецЕсли;
	
	ДанныеParcelLines = ПолучитьДанныеParcelLines(МассивParcels);
	ПерезаполнитьParcelLinesИзДанных(ДанныеParcelLines);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьParcelLinesИзДанных(Данные)
	
	// Удалим Parcel lines, данные которых мы собираемся перезаполнить
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Данные, "Parcel");	
	СтруктураПоискаПоParcel = Новый Структура("Parcel");
	Для Каждого Parcel Из МассивParcels Цикл
		
		СтруктураПоискаПоParcel.Parcel = Parcel;
		СтрокиParcelLines = ParcelLines.НайтиСтроки(СтруктураПоискаПоParcel);
		Для Каждого СтрокаParcelLine Из СтрокиParcelLines Цикл
			ParcelLines.Удалить(СтрокаParcelLine);
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим новые Parcel lines
	СтрокаСвойствParcelLines = ПолучитьСтрокуСвойствParcelLines();
	Для Каждого Структура Из Данные Цикл
		
		СтрокаТаблицы = ParcelLines.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Структура, СтрокаСвойствParcelLines);
		
	КонецЦикла;
	ПерезаполнитьИтогиParcelLines();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИтогиParcelLines()
	
	ParcelLinesQty = ParcelLines.Итог("Qty");
	ParcelLinesGrossWeightKG = ParcelLines.Итог("GrossWeightKG");
	ParcelLinesChargeableWeight = ParcelLines.Итог("ChargeableWeight");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеParcelLines(Parcels)
	
	МассивСтруктур = Новый Массив;
	
	// Если парселей нет - значит запрос ничего не вернет - значит его можно не выполнять
	Если Parcels.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", Parcels);
	Запрос.Текст = ПолучитьТекстЗапросаДанныхParcelLines();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаСвойствParcelLines = ПолучитьСтрокуСвойствParcelLines();
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствParcelLines);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcelLines);
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДанныхParcelLines()
	
	Возврат
	"ВЫБРАТЬ
	|	ParcelsItems.Ссылка КАК Parcel,
	|	ParcelsItems.НомерСтроки КАК ParcelLineNo,
	|	ParcelsItems.НомерЗаявкиНаЗакупку КАК PONo,
	|	ParcelsItems.СтрокаЗаявкиНаЗакупку КАК POLineNo,
	|	ParcelsItems.СтрокаИнвойса КАК Item,
	|	ParcelsItems.СтрокаИнвойса.НаименованиеТовара КАК Description,
	|	ParcelsItems.Qty,
	|	ParcelsItems.QtyUOM,
	|	ParcelsItems.GrossWeightKG,
	|	ParcelsItems.NetWeight,
	|	ParcelsItems.ChargeableWeight
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsItems
	|ГДЕ
	|	ParcelsItems.Ссылка В(&Parcels)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ParcelsItems.Ссылка.Код,
	|	ParcelsItems.НомерСтроки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойствParcelLines()
	
	Возврат "Parcel, ParcelLineNo, PONo, POLineNo, Item, Description, Qty, QtyUOM, GrossWeightKG, NetWeight, ChargeableWeight";
	
КонецФункции

&НаКлиенте
Процедура УдалитьЛишниеParcelLines()
	
	СтруктураПоискаПоParcel = Новый Структура("Parcel");
	ы = 0;
	Пока ы < ParcelLines.Количество() Цикл
		
		СтрокаКоллекции = ParcelLines[ы];
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Parcel) Тогда
			ParcelLines.Удалить(СтрокаКоллекции);
		Иначе
			
			СтруктураПоискаПоParcel.Parcel = СтрокаКоллекции.Parcel;
			СтрокиParcels = Объект.Parcels.НайтиСтроки(СтруктураПоискаПоParcel);
			Если СтрокиParcels.Количество() = 0 Тогда
				ParcelLines.Удалить(СтрокаКоллекции);
			Иначе
				ы = ы + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаполнитьИтогиParcelLines();
	
КонецПроцедуры


// PARCELS PARCEL LINES. ОБРАБОТЧИКИ СОБЫТИЙ.

&НаКлиенте
Процедура SelectedParcelOnlyПриИзменении(Элемент)
	
	ПерезаполнитьParcelLines();
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelLinesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекГрузовоеМесто = Элемент.ТекущиеДанные.Parcel;
	Если ЗначениеЗаполнено(ТекГрузовоеМесто) Тогда
		ПоказатьЗначение(,ТекГрузовоеМесто);		
	КонецЕсли;
	
КонецПроцедуры

// Hazard Class

&НаКлиенте
Процедура SpecifyHazardClass(Команда)
	
	МассивВыделенныхParcels = ПолучитьМассивВыделенныхParcels();
	Если МассивВыделенныхParcels.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one parcel!",
		30);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.HazardClasses.ФормаВыбора", , ЭтаФорма, , , , Новый ОписаниеОповещения("ВыполнитьПослеВыбораHazardClasses", ЭтотОбъект, МассивВыделенныхParcels));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораHazardClasses(Результат, МассивВыделенныхParcels)  Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхParcels = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхParcels, "HazardClass", Результат);
	
	ОбновитьКолонкуВParcels(МассивИзмененныхParcels, "HazardClass", Результат);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхParcels()
	
	МассивParcels = Новый Массив;
	ВыделенныеСтроки = Элементы.Parcels.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = объект.Parcels.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Parcel) Тогда
			МассивParcels.Добавить(СтрокаТаблицы.Parcel);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивParcels;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкуВParcels(МассивParcels, ИмяКолонки, Значение)
	
	Для Каждого СтрокаТаблицы Из Объект.Parcels Цикл
		
		Если МассивParcels.Найти(СтрокаТаблицы.Parcel) <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонки] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// INVOICES + PARCEL LINES

// INVOICES. ОБРАБОТЧИКИ СОБЫТИЙ.

&НаКлиенте
Процедура InvoicesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	// { RGS AArsentev 04.05.2018
	#Если ВебКлиент Тогда
		ПоказатьВопрос(
		Новый ОписаниеОповещения("InvoicesПередНачаломДобавленияЗавершение", 
		ЭтотОбъект, Элемент),
		"Create a new invoice?
		|Yes - create new
		|No - choose existing", 
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Да);
	#Иначе
	// } RGS AArsentev 04.05.2018
		Ответ = Вопрос(
		"Create a new invoice?
		|Yes - create new
		|No - choose existing",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОткрытьФормуНовогоInvoice(Элемент);
		Иначе
			ОткрытьСписокВыбораИнвойса(Элемент);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// { RGS AArsentev 04.05.2018
&НаКлиенте
Процедура InvoicesПередНачаломДобавленияЗавершение(Результат, ПараметрКоманды) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуНовогоInvoice(ПараметрКоманды);
	Иначе
		ОткрытьСписокВыбораИнвойса(ПараметрКоманды);
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 04.05.2018

&НаКлиенте
Процедура ОткрытьФормуНовогоInvoice(Элемент)
	
	ЗначенияЗаполнения = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Инвойс.ФормаОбъекта", ПараметрыФормы, Элемент, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбораИнвойса(Элемент)
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзDOC");
	СтруктураНастройки.Вставить("CurrentDOC", Объект.Ссылка);
	СтруктураНастройки.Вставить("CurrentInvoices", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Документ.Инвойс.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура InvoicesОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	ParcelLinesOfGoodsQtyTo = ParcelLinesOfGoods.Количество();
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Инвойс") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			НоваяСтрока = Объект.Инвойсы.Добавить();
			НоваяСтрока.Инвойс = ВыбранноеЗначение;
			
			Модифицированность = Истина;
			ПерезаполнитьGoodsИParcelLinesOfGoods();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("ДокументСсылка.Инвойс") Тогда
		
		Для Каждого Значение Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.Инвойсы.Добавить();
			НоваяСтрока.Инвойс = Значение;
		КонецЦикла;
		
		Модифицированность = Истина;
		ПерезаполнитьGoodsИParcelLinesOfGoods();
		
	КонецЕсли;
	
	ДанныеPOsИItemsEUCАктуальны = Ложь;
	// { RGS AArsentev 24.07.2018 S-I-0005680
	ПроверитьGL_FromSegment();
	// } RGS AArsentev 24.07.2018 S-I-0005680
	
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	Если НЕ ParcelLinesOfGoodsQtyTo = ParcelLinesOfGoods.Количество() Тогда
	
		ОбновитьВидимостьGL_FromSegmentGranted();
	
	КонецЕсли;
	// } RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	
КонецПроцедуры 

&НаКлиенте
Процедура InvoicesПриАктивизацииСтроки(Элемент)
	
	Если ItemsSelectedInvoiceOnly
		И InvoicesParcelLinesSelector = 1 Тогда
		ПерезаполнитьGoodsИParcelLinesOfGoods();
	ИначеЕсли ItemsSelectedInvoiceOnly Тогда
		ПерезаполнитьGoods();
	ИначеЕсли InvoicesParcelLinesSelector = 1 Тогда
		ПерезаполнитьParcelLinesOfGoods();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура InvoicesВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	ТекИнвойс = Элемент.ТекущиеДанные.Инвойс;
	Если ЗначениеЗаполнено(ТекИнвойс) Тогда
		ПоказатьЗначение(,ТекИнвойс);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура InvoicesПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.Invoices.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		Ответ = Вопрос(
		"Are you sure you want to remove this Invoice from DOC?",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура InvoicesПослеУдаления(Элемент)
	
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	ParcelLinesOfGoodsQtyTo = ParcelLinesOfGoods.Количество();
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	
	
	УдалитьЛишниеGoods();
	УдалитьЛишниеParcelLinesOfGoods();
	
	ДанныеPOsИItemsEUCАктуальны = Ложь;
	// { RGS EParshina 29.08.2018 15:21:50 S-I-0005913
	ПроверитьGL_FromSegment();
	// } RGS RGS EParshina 29.08.2018 15:21:53 S-I-0005913
	
	// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
	Если НЕ ParcelLinesOfGoodsQtyTo = ParcelLinesOfGoods.Количество() Тогда
	
		ОбновитьВидимостьGL_FromSegmentGranted();
	
	КонецЕсли;
	// } RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
		
КонецПроцедуры


// GOODS AND PARCEL LINES OF GOODS. ЗАПОЛНЕНИЕ.

&НаКлиенте
Процедура ПерезаполнитьGoodsИParcelLinesOfGoods()
	
	МассивInvoicesДляGoods = ПолучитьМассивInvoicesДляGoods();
	
	МассивInvoicesДляParcelLinesOfGoods = Неопределено;
	ItemДляParcelLinesOfGoods = Неопределено;
	ПолучитьМассивInvoicesИлиInvoiceLineДляParcelLinesOfGoods(МассивInvoicesДляParcelLinesOfGoods, ItemДляParcelLinesOfGoods);
	
	Goods.Очистить();
	ParcelLinesOfGoods.Очистить();
	
	// Если параметры пустые - значит запросы на сервере ничего не вернут - значит можно не уходить на сервер
	Если МассивInvoicesДляGoods.Количество() = 0
		И (МассивInvoicesДляParcelLinesOfGoods = Неопределено ИЛИ МассивInvoicesДляParcelLinesOfGoods.Количество() = 0)
		И НЕ ЗначениеЗаполнено(ItemДляParcelLinesOfGoods) Тогда
		
		ПерезаполнитьИтогиGoods();
		ПерезаполнитьИтогиParcelLinesOfGoods();
		ДанныеGoodsИParcelLinesOfGoodsАктуальны = Истина;
		Возврат;
		
	КонецЕсли;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ДанныеGoodsИParcelLinesOfGoods = ПолучитьДанныеGoodsИParcelLinesOfGoods(МассивInvoicesДляGoods, МассивParcels, МассивInvoicesДляParcelLinesOfGoods, 
	ItemДляParcelLinesOfGoods, Объект.ProcessLevel, Объект.POD, Объект.Дата, ПроверятьClearedPartNo, Объект.Ссылка);
	
	ПерезаполнитьGoodsИзДанных(ДанныеGoodsИParcelLinesOfGoods.ДанныеGoods);
	ПерезаполнитьParcelLinesOfGoodsИзДанных(ДанныеGoodsИParcelLinesOfGoods.ДанныеParcelLinesOfGoods);
	
	ДанныеGoodsИParcelLinesOfGoodsАктуальны = Истина;
	
КонецПроцедуры

// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
&НаСервере
Процедура НастроитьВидимостьGL_FromSegmentGranted(СтруктураПараметров);
	
	ПерезаполнитьGoodsИParcelLinesOfGoodsНаСервере(СтруктураПараметров);
	
	Если УдовлетворяетУсловиюDOC_ПоPONO(СтруктураПараметров.ParcelLinesOfGoods) Тогда
		
		Элементы.GL_FromSegment.Видимость = Ложь;
		Элементы.Granted.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаполнитьGoodsИParcelLinesOfGoodsНаСервере(СтруктураПараметров)
	
	МассивInvoicesДляGoods = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(СтруктураПараметров.Инвойсы, "Инвойс");
	
	МассивInvoicesДляParcelLinesOfGoods = Неопределено;
	ItemДляParcelLinesOfGoods = Неопределено;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(СтруктураПараметров.Parcels, "Parcel");
	
	ДанныеGoodsИParcelLinesOfGoods = ПолучитьДанныеParcelsLinesOfGoods(МассивInvoicesДляGoods, МассивParcels, МассивInvoicesДляGoods, 
	
	ItemДляParcelLinesOfGoods, СтруктураПараметров.ProcessLevel, СтруктураПараметров.POD, СтруктураПараметров.Дата, Ложь, СтруктураПараметров.Ссылка);
	
	ПерезаполнитьParcelLinesOfGoodsИзДанныхПереопределяемый(ДанныеGoodsИParcelLinesOfGoods.ДанныеParcelLinesOfGoods, СтруктураПараметров.ParcelLinesOfGoods);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ПерезаполнитьGoodsИзДанныхНаСервере(Данные, Goods)
	
	// Добавим новые Goods
	СтрокаСвойствGoods = ПолучитьСтрокуСвойствGoods();
	
	Для Каждого Структура Из Данные Цикл
		
		СтрокаТаблицы = Goods.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Структура, СтрокаСвойствGoods);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаполнитьParcelLinesOfGoodsИзДанныхПереопределяемый(Данные, ParcelLinesOfGoods)
	
	// Добавим новые Parcel lines of goods
	СтрокаСвойствParcelLinesOfGoods = ПолучитьСтрокуСвойствParcelLinesOfGoods();
	Для Каждого Структура Из Данные Цикл
		
		СтрокаТаблицы = ParcelLinesOfGoods.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Структура, СтрокаСвойствParcelLinesOfGoods);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеParcelsLinesOfGoods(МассивInvoicesДляGoods, МассивParcels, МассивInvoicesДляParcelLinesOfGoods, 
	
	ItemДляParcelLinesOfGoods, ProcessLevel, POD, DOCDate, ПроверятьClearedPartNo, DOC)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Parcels", МассивParcels);
	
	Если МассивInvoicesДляGoods.Количество() > 0 Тогда
		
		ДополнитьСтруктуруТекстовЗапросамиGoods(СтруктураТекстов, ProcessLevel, ПроверятьClearedPartNo);
		СтруктураПараметров.Вставить("InvoicesДляGoods", МассивInvoicesДляGoods);
		СтруктураПараметров.Вставить("Country", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
		СтруктураПараметров.Вставить("SanctionsGroup", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(POD, "SanctionsGroup"));
		СтруктураПараметров.Вставить("DOCDate", DOCDate);
		// ++ КДС РГ-Софт 22.11.2016 
		СтруктураПараметров.Вставить("CurrentDate", ТекущаяДата());
		СтруктураПараметров.Вставить("DOC", DOC);
		// -- КДС РГ-Софт 22.11.2016 
		
	КонецЕсли;
	
	Если МассивParcels.Количество() > 0
		И (МассивInvoicesДляParcelLinesOfGoods <> Неопределено И МассивInvoicesДляParcelLinesOfGoods.Количество() > 0 ИЛИ ЗначениеЗаполнено(ItemДляParcelLinesOfGoods)) Тогда
		
		СтруктураТекстов.Вставить("ДанныеParcelLinesOfGoods", ПолучитьТекстЗапросаДанныхParcelLinesOfGoods());
		СтруктураПараметров.Вставить("InvoicesДляParcelLinesOfGoods", МассивInvoicesДляParcelLinesOfGoods);
		СтруктураПараметров.Вставить("ItemДляParcelLinesOfGoods", ItemДляParcelLinesOfGoods);
		
	КонецЕсли;
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеParcelLinesOfGoods", Новый Массив);
	
	Если СтруктураРезультатов.Свойство("ДанныеParcelLinesOfGoods") Тогда
		
		Выборка = СтруктураРезультатов.ДанныеParcelLinesOfGoods.Выбрать();
		СтрокаСвойствParcelLinesOfGoods = ПолучитьСтрокуСвойствParcelLinesOfGoods();
		Пока Выборка.Следующий() Цикл
			
			Структура = Новый Структура(СтрокаСвойствParcelLinesOfGoods);
			ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcelLinesOfGoods);
			СтруктураВозврата.ДанныеParcelLinesOfGoods.Добавить(Структура);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдовлетворяетУсловиюDOC_ПоPONO(ParcelLinesOfGoods)
	
	Результат = Истина;
	
	Для каждого Строка Из ParcelLinesOfGoods Цикл
	
		Если РГСофт.СоответствуетМаскеRegExp(Строка.PONo, "(^W{1,}|^YW{1,}|^F{1,}|^T{1,}|^YT{1,}|^D{1,}|^YD{1,}|^N{1,})") Тогда
			
			Результат = Ложь;
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // УдовлетворяетУсловиюDOC_ПоPONO()

&НаКлиенте
Процедура ОбновитьВидимостьGL_FromSegmentGranted()
	
	ВидимостьGL = ОбновитьВидимостьGL_FromSegmentGrantedНаСервере();
	Элементы.GL_FromSegment.Видимость = НЕ ВидимостьGL;
	Элементы.Granted.Доступность = ВидимостьGL;
	
КонецПроцедуры

// Для всех кодов кроме исключающих скрыть видимость
// Возвращаемое значение:
// Истина - необходимо скрыть видимость реквизита GL_FromSegment
// Ложь - не скрывать
&НаСервере
Функция ОбновитьВидимостьGL_FromSegmentGrantedНаСервере()
	
	Возврат УдовлетворяетУсловиюDOC_ПоPONO(ParcelLinesOfGoods);
	
КонецФункции

// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176


&НаСервереБезКонтекста
Функция ПолучитьДанныеGoodsИParcelLinesOfGoods(МассивInvoicesДляGoods, МассивParcels, МассивInvoicesДляParcelLinesOfGoods, 
	ItemДляParcelLinesOfGoods, ProcessLevel, POD, DOCDate, ПроверятьClearedPartNo, DOC)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Parcels", МассивParcels);
	
	Если МассивInvoicesДляGoods.Количество() > 0 Тогда
		
		ДополнитьСтруктуруТекстовЗапросамиGoods(СтруктураТекстов, ProcessLevel, ПроверятьClearedPartNo);
		СтруктураПараметров.Вставить("InvoicesДляGoods", МассивInvoicesДляGoods);
		СтруктураПараметров.Вставить("Country", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
		СтруктураПараметров.Вставить("SanctionsGroup", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(POD, "SanctionsGroup"));
		СтруктураПараметров.Вставить("DOCDate", DOCDate);
		// ++ КДС РГ-Софт 22.11.2016 
		СтруктураПараметров.Вставить("CurrentDate", ТекущаяДата());
		СтруктураПараметров.Вставить("DOC", DOC);
		// -- КДС РГ-Софт 22.11.2016 
		
	КонецЕсли;
	
	Если МассивParcels.Количество() > 0
		И (МассивInvoicesДляParcelLinesOfGoods <> Неопределено И МассивInvoicesДляParcelLinesOfGoods.Количество() > 0 ИЛИ ЗначениеЗаполнено(ItemДляParcelLinesOfGoods)) Тогда
		
		СтруктураТекстов.Вставить("ДанныеParcelLinesOfGoods", ПолучитьТекстЗапросаДанныхParcelLinesOfGoods());
		СтруктураПараметров.Вставить("InvoicesДляParcelLinesOfGoods", МассивInvoicesДляParcelLinesOfGoods);
		СтруктураПараметров.Вставить("ItemДляParcelLinesOfGoods", ItemДляParcelLinesOfGoods);
		
	КонецЕсли;
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеGoods", Новый Массив);
	СтруктураВозврата.Вставить("ДанныеParcelLinesOfGoods", Новый Массив);
	
	Если СтруктураРезультатов.Свойство("ДанныеGoods") Тогда
		
		//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
		//ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo);
		ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo, DOC);
		//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
		ТаблицаДанныеGoods.Колонки.Добавить("TDIndicator");
		ТаблицаДанныеGoods.Колонки.Добавить("TDHistory");
		
		// ++ КДС РГ-Софт 22.11.2016 
		ТаблицаИстории     = Неопределено;
		Если СтруктураРезультатов.Свойство("ДанныеTDHistory") Тогда
			ТаблицаИстории = СтруктураРезультатов.ДанныеTDHistory.Выгрузить();
		КонецЕсли;
		// -- КДС РГ-Софт 22.11.2016 
		
		СтрокаСвойствGoods = ПолучитьСтрокуСвойствGoods();
		Для Каждого СтрокаДанныеGoods из ТаблицаДанныеGoods Цикл
			
			Структура = Новый Структура(СтрокаСвойствGoods);
			ЗаполнитьЗначенияСвойств(Структура, СтрокаДанныеGoods, СтрокаСвойствGoods);
			// ++ КДС РГ-Софт 22.11.2016 
			Если НЕ ЗначениеЗаполнено(Структура.TDStatus) Тогда
				Структура.TDStatus = Перечисления.TDStatuses.NotRequired;
			КонецЕсли;
			Структура.Вставить("TDIndicator", ПолучитьКартинкуСтатуса(Структура.TDStatus));
			
			Структура.Вставить("TDHistory", ПолучитьОписаниеИстории(СтрокаДанныеGoods.PartNo, ТаблицаИстории));
			
			// -- КДС РГ-Софт 22.11.2016 
			СтруктураВозврата.ДанныеGoods.Добавить(Структура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураРезультатов.Свойство("ДанныеParcelLinesOfGoods") Тогда
		
		Выборка = СтруктураРезультатов.ДанныеParcelLinesOfGoods.Выбрать();
		СтрокаСвойствParcelLinesOfGoods = ПолучитьСтрокуСвойствParcelLinesOfGoods();
		Пока Выборка.Следующий() Цикл
			
			Структура = Новый Структура(СтрокаСвойствParcelLinesOfGoods);
			ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcelLinesOfGoods);
			СтруктураВозврата.ДанныеParcelLinesOfGoods.Добавить(Структура);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеИстории(PartNo, ТаблицаИстории)
	
	Если ТаблицаИстории = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	маска = "                                                                               ";
	
	строкиПоиска = ТаблицаИстории.НайтиСтроки(Новый Структура("PartNo", PartNo + Лев(маска, 50 - СтрДлина(PartNo))));
	Если строкиПоиска.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	результат = "";
	Для Каждого текСтрокаПоиска из строкиПоиска Цикл
		
		результат = результат + ?(ПустаяСтрока(результат), "", Символы.ПС) + текСтрокаПоиска.status + ", " + СокрЛП(текСтрокаПоиска.ModifiedBy) + ", " + Формат(текСтрокаПоиска.Период, "ДЛФ=DT");
		
	КонецЦикла;
	
	Возврат результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo, DOC)
	
	ТаблицаДанныеGoods = СтруктураРезультатов.ДанныеGoods.Выгрузить();
	
	//Previously imported
	Если ПроверятьClearedPartNo Тогда 
		
		ТаблицаGoodsPartNo = СтруктураРезультатов.ДанныеGoodsPartNo.Выгрузить();
		
		СтруктураОтбораItem = Новый Структура("Item");
		
		Для Каждого СтрокаДанныеGoods из ТаблицаДанныеGoods Цикл 
			
			PreviouslyImported = "";
			
			СтруктураОтбораItem.Item = СтрокаДанныеGoods.Item;
			
			МассивСтрокProcessLevels = ТаблицаGoodsPartNo.НайтиСтроки(СтруктураОтбораItem);
			Для Каждого СтрокаМассива Из МассивСтрокProcessLevels Цикл
				PreviouslyImported = PreviouslyImported + ?(PreviouslyImported = "", "", ";") + СокрЛП(СтрокаМассива.ProcessLevel); 	
			КонецЦикла;			
			
			СтрокаДанныеGoods.PreviouslyImported = PreviouslyImported;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Predecision TNVED
	Если ProcessLevel = Справочники.ProcessLevels.KZ Тогда 
		
		ТаблицаGoodsPredecisionTNVED = СтруктураРезультатов.ДанныеGoodsPredecisionTNVED.Выгрузить();
		
		Для Каждого СтрокаДанныеGoods из ТаблицаДанныеGoods Цикл 
			
			СтрокаPredecisionTNVED = ТаблицаGoodsPredecisionTNVED.Найти(СтрокаДанныеGoods.Item, "Item");
			
			Если СтрокаPredecisionTNVED <> Неопределено Тогда 
				СтрокаДанныеGoods.PredecisionTNVED = СтрокаPredecisionTNVED.PermitNo;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008	
	ДанныеGoodsTNVED = РГСофтКлиентСервер.ПодготовитьДанныеGoodsTNVED(СтруктураРезультатов.ДанныеGoodsTNVED);
	
	ДанныеPriorityTNVED = РГСофтКлиентСервер.ПодготовитьДанныеPriorityTNVED(СтруктураРезультатов.ДанныеGoods.Выгрузить().ВыгрузитьКолонку("PartNo"));
	
	ТаблицаДанныеGoods.Колонки.Добавить("TNVEDRate", Новый ОписаниеТипов("Строка"), "TNVEDRate");
	
	// { RGS ASeryakov, 26.07.2018 14:42:45 Адаптация под алгоритм в справочнике Part numbers catalogue
	ДанныеGoodsTNVED.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5)));
	ДанныеGoodsTNVED.ЗаполнитьЗначения(1, "Количество");
	ДанныеGoodsTNVED.Свернуть("TNVED,TNVEDRate,PartNo","Количество");
	ДанныеGoodsTNVED.Сортировать("TNVEDRate Возр, Количество Убыв");
	// } RGS ASeryakov 26.07.2018 14:42:47 Адаптация под алгоритм в справочнике Part numbers catalogue
	
	
	Для каждого СтрокаДанныеGoods Из ТаблицаДанныеGoods Цикл
		
		МассивInvoiceTNVED = ДанныеGoodsTNVED.НайтиСтроки(Новый Структура("PartNo",СтрокаДанныеGoods.PartNo));
				
		Если МассивInvoiceTNVED.Количество() > 0 Тогда
			
			СтрокаInvoiceTNVED =  МассивInvoiceTNVED[0];
			
			СтрокаДанныеGoods.TNVED = СтрокаInvoiceTNVED.TNVED;
			СтрокаДанныеGoods.TNVEDRate = Строка(СтрокаInvoiceTNVED.TNVEDRate);
			
		КонецЕсли;
		
	КонецЦикла;
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	
	Возврат ТаблицаДанныеGoods;
	
КонецФункции

// GOODS. ЗАПОЛНЕНИЕ

&НаКлиенте
Процедура ПерезаполнитьGoods()
	
	МассивInvoicesДляGoods = ПолучитьМассивInvoicesДляGoods();
	ПерезаполнитьGoodsПоМассивуInvoices(МассивInvoicesДляGoods);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивInvoicesДляGoods()
	
	Если ItemsSelectedInvoiceOnly Тогда
		
		МассивInvoices = Новый Массив;
		ТекущиеДанныеInvoices = Элементы.Invoices.ТекущиеДанные;
		Если ТекущиеДанныеInvoices <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанныеInvoices.Инвойс) Тогда
			МассивInvoices.Добавить(ТекущиеДанныеInvoices.Инвойс);
		КонецЕсли;
		
	Иначе
		МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс");
	КонецЕсли;
	
	Возврат МассивInvoices;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьGoodsПоМассивуInvoices(МассивInvoices)
	
	Goods.Очистить();
	
	Если МассивInvoices.Количество() = 0 Тогда
		ПерезаполнитьИтогиGoods();
		Возврат;
	КонецЕсли;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ДанныеGoods = ПолучитьДанныеGoods(Объект.Ссылка, МассивInvoices, МассивParcels, Объект.ProcessLevel, 
	Объект.POD, Объект.Дата, ПроверятьClearedPartNo);
	ПерезаполнитьGoodsИзДанных(ДанныеGoods);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеGoods(DOC, Invoices, Parcels, ProcessLevel, POD, DOCDate, ПроверятьClearedPartNo)
	
	МассивСтруктур = Новый Массив;
	
	// Если инвойсов нет - значит запрос точно ничего не вернет - значит можно его не выполнять
	Если Invoices.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("InvoicesДляGoods", Invoices);
	СтруктураПараметров.Вставить("Country", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
	СтруктураПараметров.Вставить("SanctionsGroup", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(POD, "SanctionsGroup"));
	СтруктураПараметров.Вставить("DOCDate", DOCDate);
	СтруктураПараметров.Вставить("Parcels", Parcels);
	// ++ КДС РГ-Софт 22.11.2016 
	СтруктураПараметров.Вставить("CurrentDate", ТекущаяДата());
	СтруктураПараметров.Вставить("DOC", DOC);
	// -- КДС РГ-Софт 22.11.2016 
	
	СтруктураТекстов = Новый Структура;
	ДополнитьСтруктуруТекстовЗапросамиGoods(СтруктураТекстов, ProcessLevel, ПроверятьClearedPartNo);
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	//ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo);
	ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo, DOC);
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	ТаблицаДанныеGoods.Колонки.Добавить("TDHistory");
	ТаблицаДанныеGoods.Колонки.Добавить("TDIndicator");
	
	// ++ КДС РГ-Софт 22.11.2016 
	ТаблицаИстории     = Неопределено;
	Если СтруктураРезультатов.Свойство("ДанныеTDHistory") Тогда
		ТаблицаИстории = СтруктураРезультатов.ДанныеTDHistory.Выгрузить();
	КонецЕсли;
	// -- КДС РГ-Софт 22.11.2016 
	
	СтрокаСвойствGoods = ПолучитьСтрокуСвойствGoods();
	Для Каждого СтрокаДанныеGoods из ТаблицаДанныеGoods Цикл
		
		Структура = Новый Структура(СтрокаСвойствGoods);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаДанныеGoods, СтрокаСвойствGoods);
		
		// ++ КДС РГ-Софт 22.11.2016 
		Если НЕ ЗначениеЗаполнено(Структура.TDStatus) Тогда
			Структура.TDStatus = Перечисления.TDStatuses.NotRequired;
		КонецЕсли;
		Структура.Вставить("TDIndicator", ПолучитьКартинкуСтатуса(Структура.TDStatus));
		
		Структура.Вставить("TDHistory", ПолучитьОписаниеИстории(СтрокаДанныеGoods.PartNo, ТаблицаИстории));
		
		// -- КДС РГ-Софт 22.11.2016 
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруТекстовЗапросамиGoods(СтруктураТекстов, ProcessLevel, ПроверятьClearedPartNo)
	
	СтруктураТекстов.Вставить("ВременнаяТаблицаGoods", 
	"ВЫБРАТЬ
	|	Goods.Инвойс КАК Invoice,
	|	Goods.Инвойс.Номер КАК InvoiceNo,
	|	Goods.Ссылка КАК Item,
	|	Goods.НомерСтрокиИнвойса КАК InvoiceLineNo,
	|	Goods.СтрокаЗаявкиНаЗакупку КАК POLine,
	|	Goods.КодПоИнвойсу КАК PartNo,
	|	Goods.НаименованиеТовара КАК Description,
	|	Goods.Сумма КАК TotalPrice,
	|	Goods.Количество КАК InvoiceQty,
	|	Goods.NetWeight,
	|	Goods.PermanentTemporary,
	|	Goods.PSA КАК PSAContract,
	|	Goods.PermitsRequired,
	|	Goods.COORequired,
	|	Goods.МеждународныйКодТНВЭД КАК HTC,
	|	Goods.Инвойс.ProcessLevel КАК ProcessLevel,
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	//|	Goods.TNVED,
	|	ЗНАЧЕНИЕ(Справочник.TNVEDCodes.ПустаяСсылка) КАК TNVED,
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	|	Goods.СерийныйНомер КАК SerialNo,
	// { RGS AArsentev 23.07.2018 S-I-0005680
	|	ЕСТЬNULL(Goods.СтрокаЗаявкиНаЗакупку.GL_From_Segment, ЛОЖЬ) КАК GL_FromSegment,
	// } RGS AArsentev 23.07.2018 S-I-0005680
	// { RGS DKazanskiy 11.12.2018 14:35:46 - S-I-0006451
	|	ЕСТЬNULL(Goods.СтрокаЗаявкиНаЗакупку.Restock, ЛОЖЬ) КАК Restock,	
	// } RGS DKazanskiy 11.12.2018 14:35:49 - S-I-0006451
	|	Goods.GuaranteeLetter,
	|	Goods.MOC
	|ПОМЕСТИТЬ Goods
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК Goods
	|ГДЕ
	|	Goods.Инвойс В(&InvoicesДляGoods)
	|	И НЕ Goods.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Item");
	
	СтруктураТекстов.Вставить("ВременнаяТаблицаParcelGoods",
	"ВЫБРАТЬ
	|	ParcelGoods.СтрокаИнвойса КАК Item,
	|	СУММА(ParcelGoods.Qty) КАК ParcelsQty,
	|	СУММА(ParcelGoods.GrossWeightKG) КАК ParcelsGrossWeightKG,
	|	СУММА(ParcelGoods.ChargeableWeight) КАК ParcelsChargeableWeight
	|ПОМЕСТИТЬ ParcelGoods
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelGoods
	|ГДЕ
	|	ParcelGoods.Ссылка В(&Parcels)
	|
	|СГРУППИРОВАТЬ ПО
	|	ParcelGoods.СтрокаИнвойса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Item");
	
	СтруктураТекстов.Вставить("ВременнаяТаблицаGoodsWithParcelLines",
	"ВЫБРАТЬ
	|	Goods.Invoice,
	|	Goods.InvoiceNo,
	|	Goods.Item,
	|	Goods.InvoiceLineNo,
	|	Goods.POLine,
	|	Goods.PartNo,
	|	Goods.Description,
	|	Goods.TotalPrice,
	|	Goods.InvoiceQty,
	|	Goods.NetWeight,
	|	Goods.PermanentTemporary,
	|	Goods.PSAContract,
	|	Goods.PermitsRequired,
	|	Goods.COORequired,
	|	Goods.HTC,
	|	Goods.TNVED,
	|	Goods.GuaranteeLetter,
	|	Goods.MOC,
	// { RGS AArsentev 23.07.2018 S-I-0005680
	|	Goods.GL_FromSegment,
	// } RGS AArsentev 23.07.2018 S-I-0005680
	// { RGS DKazanskiy 11.12.2018 14:35:46 - S-I-0006451
	|	Goods.Restock КАК Restock,	
	// } RGS DKazanskiy 11.12.2018 14:35:49 - S-I-0006451
	|	ЕСТЬNULL(ParcelGoods.ParcelsQty, 0) КАК ParcelsQty,
	|	ЕСТЬNULL(ParcelGoods.ParcelsGrossWeightKG, 0) КАК ParcelsGrossWeightKG,
	|	ЕСТЬNULL(ParcelGoods.ParcelsChargeableWeight, 0) КАК ParcelsChargeableWeight
	|ПОМЕСТИТЬ GoodsWithParcelLines
	|ИЗ
	|	Goods КАК Goods
	|		ЛЕВОЕ СОЕДИНЕНИЕ ParcelGoods КАК ParcelGoods
	|		ПО Goods.Item = ParcelGoods.Item
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Goods.POLine");
	
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	СтруктураТекстов.Вставить("ДанныеTNVEDCodesOfBroker",
	"ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуTNVEDCodesOfBroker.Invoice КАК Invoice,
	|	КонсолидированныйПакетЗаявокНаПеревозкуTNVEDCodesOfBroker.Item КАК Item,
	|	КонсолидированныйПакетЗаявокНаПеревозкуTNVEDCodesOfBroker.TNVEDBroker КАК TNVEDBroker
	|ПОМЕСТИТЬ TNVEDCodesOfBroker
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.TNVEDCodesOfBroker КАК КонсолидированныйПакетЗаявокНаПеревозкуTNVEDCodesOfBroker
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуTNVEDCodesOfBroker.Ссылка = &DOC");
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	
	СтруктураТекстов.Вставить("ДанныеGoods",
	"ВЫБРАТЬ
	|	GoodsWithParcelLines.Invoice КАК Invoice,
	|	GoodsWithParcelLines.Item КАК Item,
	|	GoodsWithParcelLines.Description КАК Description,
	|	GoodsWithParcelLines.PartNo КАК PartNo,
	|	GoodsWithParcelLines.PermanentTemporary КАК PermanentTemporary,
	|	GoodsWithParcelLines.PSAContract КАК PSAContract,
	|	GoodsWithParcelLines.PermitsRequired КАК PermitsRequired,
	|	GoodsWithParcelLines.COORequired КАК COORequired,
	|	GoodsWithParcelLines.HTC КАК HTC,
	|	GoodsWithParcelLines.TotalPrice КАК TotalPrice,
	|	GoodsWithParcelLines.InvoiceQty КАК InvoiceQty,
	|	GoodsWithParcelLines.ParcelsQty КАК ParcelsQty,
	|	GoodsWithParcelLines.InvoiceQty - GoodsWithParcelLines.ParcelsQty КАК QtyDifference,
	|	GoodsWithParcelLines.ParcelsGrossWeightKG КАК ParcelsGrossWeightKG,
	|	GoodsWithParcelLines.NetWeight КАК NetWeight,
	|	GoodsWithParcelLines.ParcelsChargeableWeight КАК ParcelsChargeableWeight,
	|	GoodsWithParcelLines.TNVED КАК TNVED,
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	|	TNVEDCodesOfBroker.TNVEDBroker КАК TNVEDBroker,
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	|	GoodsWithParcelLines.GuaranteeLetter КАК GuaranteeLetter,
	|	GoodsWithParcelLines.MOC КАК MOC,
	// { RGS AArsentev 23.07.2018 S-I-0005680
	|	GoodsWithParcelLines.GL_FromSegment КАК GL_FromSegment,
	// } RGS AArsentev 23.07.2018 S-I-0005680
	// { RGS DKazanskiy 11.12.2018 14:35:46 - S-I-0006451
	|	GoodsWithParcelLines.Restock КАК Restock,	
	// } RGS DKazanskiy 11.12.2018 14:35:49 - S-I-0006451
	|	BlacklistPOLines.Ссылка КАК BlackList,
	|	BlacklistPOLines.НомерСтроки КАК BlackListLine,
	|	BlacklistPOLines.Rule.Type КАК BlackListType,
	|	BlacklistPOLines.Rule.Reason КАК BlackListReason,
	|	SanctionListHTCcodeHTCCodeList.Ссылка.SanctionsGroup КАК SanctionsGroup,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК PreviouslyImported,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(35)) КАК PredecisionTNVED,
	|	TDStatusesСрезПоследних.Status КАК TDStatus,
	|	TDStatusesСрезПоследних.Query КАК TDQuery
	|ИЗ
	|	GoodsWithParcelLines КАК GoodsWithParcelLines
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Blacklist.POLines КАК BlacklistPOLines
	|		ПО (GoodsWithParcelLines.POLine = BlacklistPOLines.POLine)
	|			И (НЕ BlacklistPOLines.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SanctionListHTCcode.HTCCodeList КАК SanctionListHTCcodeHTCCodeList
	|		ПО (НЕ SanctionListHTCcodeHTCCodeList.Ссылка.ПометкаУдаления)
	|			И (SanctionListHTCcodeHTCCodeList.Ссылка.Country = &Country)
	|			И (SanctionListHTCcodeHTCCodeList.Ссылка.SanctionsGroup = &SanctionsGroup)
	|			И (SanctionListHTCcodeHTCCodeList.StartDate <= &DOCDate)
	|			И (SanctionListHTCcodeHTCCodeList.ExpiryDate > &DOCDate
	|				ИЛИ SanctionListHTCcodeHTCCodeList.ExpiryDate = ДАТАВРЕМЯ(1, 1, 1))
	|			И (GoodsWithParcelLines.HTC ПОДОБНО SanctionListHTCcodeHTCCodeList.HTCCode + ""%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TDStatuses.СрезПоследних(&CurrentDate, DOC = &DOC) КАК TDStatusesСрезПоследних
	|		ПО (GoodsWithParcelLines.PartNo = TDStatusesСрезПоследних.PartNo.Код)
	// { RGS AArrsentev 28.05.2018
	|		И GoodsWithParcelLines.Item = TDStatusesСрезПоследних.Item
	// } RGS AArrsentev 28.05.2018
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	|		ЛЕВОЕ СОЕДИНЕНИЕ TNVEDCodesOfBroker КАК TNVEDCodesOfBroker
	|		ПО (GoodsWithParcelLines.Invoice = TNVEDCodesOfBroker.Invoice)
	|				И (GoodsWithParcelLines.Item = TNVEDCodesOfBroker.Item)
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	|
	|УПОРЯДОЧИТЬ ПО
	|	GoodsWithParcelLines.InvoiceNo,
	|	GoodsWithParcelLines.InvoiceLineNo");
	
	
	// ++ РГ-Софт КДС 23.11.2016
	СтруктураТекстов.Вставить("ДанныеTDHistory",
	"ВЫБРАТЬ
	|	TDStatuses.PartNo.Код КАК PartNo,
	|	TDStatuses.Период КАК Период,
	|	TDStatuses.Status,
	// { RGS AArrsentev 28.05.2018
	|	TDStatuses.Item,
	// } RGS AArrsentev 28.05.2018
	|	TDStatuses.ModifiedBy
	|ИЗ
	|	РегистрСведений.TDStatuses КАК TDStatuses
	|ГДЕ
	|	TDStatuses.DOC = &DOC
	|
	|УПОРЯДОЧИТЬ ПО
	|	PartNo,
	|	Период");		
	// -- РГ-Софт КДС 23.11.2016
	
	Если ПроверятьClearedPartNo Тогда 
		
		СтруктураТекстов.Вставить("ДанныеGoodsPartNo",
		"ВЫБРАТЬ
		|	Goods.Item,
		|	ClearedPartNumbers.ProcessLevel
		|ИЗ
		|	Goods КАК Goods
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ClearedPartNumbers КАК ClearedPartNumbers
		|		ПО Goods.PartNo = ClearedPartNumbers.PartNo");
		
	КонецЕсли;
	
	Если ProcessLevel = Справочники.ProcessLevels.KZ Тогда 
		
		СтруктураТекстов.Вставить("ДанныеGoodsPredecisionTNVED",
		"ВЫБРАТЬ
		|	Goods.Item,
		|	Permits.Код КАК PermitNo
		|ИЗ
		|	Goods КАК Goods
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Permits КАК Permits
		|		ПО (Goods.PartNo ПОДОБНО Permits.GoodsPartNoSerialNo
		|				ИЛИ Goods.SerialNo ПОДОБНО Permits.GoodsPartNoSerialNo)
		|ГДЕ
		|	Permits.Country = &Country");
		
	КонецЕсли;
	
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	СтруктураТекстов.Вставить("InvoiceLinesCostsОбороты",
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.InvoiceLine КАК InvoiceLine
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	(ВЫБРАТЬ
	|		InvoiceLinesCostsОбороты.СтрокаИнвойса КАК InvoiceLine
	|	ИЗ
	|		РегистрНакопления.InvoiceLinesCosts.Обороты(
	|				ДАТАВРЕМЯ(2015, 1, 1),
	|				&CurrentDate,
	|				Регистратор,
	|				ЭлементФормированияСтоимости = ЗНАЧЕНИЕ(Справочник.ЭлементыФормированияСтоимости.ИнвойсПеревозка)
	|					И СтрокаИнвойса.Инвойс <> ЗНАЧЕНИЕ(Документ.Инвойс.ПустаяСсылка)
	|					И СтрокаИнвойса.КодПоИнвойсу В
	|						(ВЫБРАТЬ
	|							Goods.PartNo
	|						ИЗ
	|							Goods КАК Goods)) КАК InvoiceLinesCostsОбороты) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	InvoiceLine");
	
	// { RGS ASeryakov, 26.07.2018 14:42:45 Адаптация под алгоритм в справочнике Catalog History
	СтруктураТекстов.Вставить("ВТ_П",
	"ВЫБРАТЬ
	|	InvoiceLinesCostsОбороты.InvoiceLine КАК InvoiceLine,
	|	InvoiceLinesCostsОбороты.InvoiceLine.КодПоИнвойсу КАК PartNo,
	|	CustomsFilesOfGoods.CustomsFile КАК CCD
	|ПОМЕСТИТЬ ВТ_П
	|ИЗ
	|	ВТ КАК InvoiceLinesCostsОбороты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CustomsFilesOfGoods КАК CustomsFilesOfGoods
	|		ПО InvoiceLinesCostsОбороты.InvoiceLine = CustomsFilesOfGoods.Item}
	|
	|СГРУППИРОВАТЬ ПО
	|	InvoiceLinesCostsОбороты.InvoiceLine,
	|	InvoiceLinesCostsОбороты.InvoiceLine.КодПоИнвойсу,
	|	CustomsFilesOfGoods.CustomsFile");
	
	СтруктураТекстов.Вставить("ВТ2",
	"ВЫБРАТЬ
	|	ВТ_П.InvoiceLine КАК InvoiceLine,
	|	ВТ_П.CCD КАК CCD,
	|	ВТ_П.PartNo КАК PartNo,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД КАК ТоварСтрокиГТД,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ТНВЭД КАК TNVED,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ТНВЭД.Rate КАК TNVEDRate
	|ПОМЕСТИТЬ ВТ2
	|ИЗ
	|	ВТ_П КАК ВТ_П
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки.Сопоставление КАК ЗакрытиеПоставкиСопоставление
	|		ПО ВТ_П.InvoiceLine = ЗакрытиеПоставкиСопоставление.СтрокаИнвойса
	|			И ВТ_П.CCD.Shipment = ЗакрытиеПоставкиСопоставление.Ссылка.Поставка
	|			И (ЗакрытиеПоставкиСопоставление.Ссылка.Поставка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_П.InvoiceLine,
	|	ВТ_П.CCD,
	|	ВТ_П.PartNo,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ТНВЭД,
	|	ЗакрытиеПоставкиСопоставление.ТоварСтрокиГТД.Владелец.ТНВЭД.Rate");
	
	СтруктураТекстов.Вставить("ДанныеGoodsTNVED",
	"ВЫБРАТЬ
	|	ВТ.TNVED КАК TNVED,
	|	ВТ.TNVEDRate КАК TNVEDRate,
	|	ВТ.PartNo КАК PartNo
	|ИЗ
	|	ВТ2 КАК ВТ");
	// } RGS ASeryakov, 26.07.2018 14:42:45 Адаптация под алгоритм в Catalog History

	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойствGoods()
	
	Возврат "Invoice, Item, PartNo, Description, TotalPrice, InvoiceQty, ParcelsQty, QtyDifference, ParcelsGrossWeightKG, NetWeight, ParcelsChargeableWeight, PermanentTemporary, PSAContract, PermitsRequired, Blacklist, BlacklistLine, BlacklistType, BlacklistReason, HTC, SanctionsGroup, TNVED, COORequired, PreviouslyImported, PredecisionTNVED, TDStatus, TDQuery, TDIndicator, TDHistory, GuaranteeLetter, MOC, TNVEDBroker, TNVEDRate, GL_FromSegment, Restock";	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008 добавлены поля - TNVEDRate, TNVEDBroker
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьGoodsИзДанных(Данные)
	
	// Удалим Goods, данные которых мы собираемся перезаполнить
	МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Данные, "Invoice");	
	СтруктураПоискаПоInvoice = Новый Структура("Invoice");
	Для Каждого Invoice Из МассивInvoices Цикл
		
		СтруктураПоискаПоInvoice.Invoice = Invoice;
		СтрокиGoods = Goods.НайтиСтроки(СтруктураПоискаПоInvoice);
		Для Каждого СтрокаGoods Из СтрокиGoods Цикл
			Goods.Удалить(СтрокаGoods);
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим новые Goods
	СтрокаСвойствGoods = ПолучитьСтрокуСвойствGoods();
	////СтрокаСвойствGoods = СтрокаСвойствGoods + ", TDIndicator, TDHistory"; 
	Для Каждого Структура Из Данные Цикл
		
		Если ItemsWrongLinesOnly И Структура.QtyDifference = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = Goods.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Структура, СтрокаСвойствGoods);
		
	КонецЦикла;
	ПерезаполнитьИтогиGoods();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИтогиGoods()
	
	GoodsInvoiceQty = Goods.Итог("InvoiceQty");
	GoodsParcelsQty = Goods.Итог("ParcelsQty");
	GoodsQtyDifference = Goods.Итог("QtyDifference");
	GoodsTotalPrice = Goods.Итог("TotalPrice");
	GoodsParcelsGrossWeightKG = Goods.Итог("ParcelsGrossWeightKG");
	GoodsParcelsChargeableWeight = Goods.Итог("ParcelsChargeableWeight");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеGoods()
	
	СтруктураПоискаПоInvoice = Новый Структура("Инвойс");
	ы = 0;
	Пока ы < Goods.Количество() Цикл
		
		СтрокаКоллекции = Goods[ы];
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Invoice) Тогда
			Goods.Удалить(СтрокаКоллекции);
		Иначе
			
			СтруктураПоискаПоInvoice.Инвойс = СтрокаКоллекции.Invoice;
			СтрокиInvoices = Объект.Инвойсы.НайтиСтроки(СтруктураПоискаПоInvoice);
			Если СтрокиInvoices.Количество() = 0 Тогда
				Goods.Удалить(СтрокаКоллекции);
			Иначе
				ы = ы + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаполнитьИтогиGoods();
	
КонецПроцедуры

// PERMANENT / TEMPORARY, PSA, PERMITS

&НаКлиенте
Функция ПолучитьМассивВыделенныхItems()
	
	МассивGoods = Новый Массив;
	ВыделенныеСтроки = Элементы.Goods.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Goods.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Item) Тогда
			МассивGoods.Добавить(СтрокаТаблицы.Item);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивGoods;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкуВGoods(МассивGoods, ИмяКолонки, Значение)
	
	Для Каждого СтрокаТаблицы Из Goods Цикл
		
		Если МассивGoods.Найти(СтрокаТаблицы.Item) <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонки] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// PERMANENT / TEMPORARY

&НаКлиенте
Процедура MakePermanent(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхGoods, "PermanentTemporary", Permanent);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "PermanentTemporary", Permanent);
	
КонецПроцедуры

&НаКлиенте
Процедура MakeTemporary(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхGoods, "PermanentTemporary", Temporary);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "PermanentTemporary", Temporary);
	
КонецПроцедуры


// PSA

&НаКлиенте
Процедура SpecifyPSA(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Choose 'Process level' first!",
		, "ProcessLevel", "Объект");
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.ProcessLevel, "Country");
	СтруктураОтбора = Новый Структура("Country", ProcessLevelCountry); 
	СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.PSAContracts.ФормаВыбора", , ЭтаФорма, , , , Новый ОписаниеОповещения("ВыполнитьПослеВыбораPSAContract", ЭтотОбъект, МассивВыделенныхGoods));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораPSAContract(Результат, МассивВыделенныхGoods)  Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхGoods, "PSA", Результат);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхItems, "PSAContract", Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ClearPSA(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылках(МассивВыделенныхGoods, "PSA", Неопределено);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "PSAContract", Неопределено);
	
КонецПроцедуры


// PERMITS

&НаКлиенте
Процедура PermitsRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "PermitsRequired", Yes);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "PermitsRequired", Yes);
	
КонецПроцедуры

&НаКлиенте
Процедура PermitsNotRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "PermitsRequired", No);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "PermitsRequired", No);
	
КонецПроцедуры

// Guarantee Letter

&НаКлиенте
Процедура GuaranteeLetterRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "GuaranteeLetter", Yes);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "GuaranteeLetter", Yes);
	
КонецПроцедуры

&НаКлиенте
Процедура GuaranteeLetterNotRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "GuaranteeLetter", No);
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "GuaranteeLetter", No);
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "MOC", Неопределено);  
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "MOC", Неопределено);
	
КонецПроцедуры


// COO

&НаКлиенте
Процедура COORequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "COORequired", Yes);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "COORequired", Yes);
	
КонецПроцедуры

&НаКлиенте
Процедура COONotRequired(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "COORequired", No);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "COORequired", No);
	
КонецПроцедуры


// TNVED

&НаКлиенте
Процедура SpecifyTNVED(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.TNVEDCodes.ФормаВыбора", , ЭтаФорма, , , , Новый ОписаниеОповещения("ВыполнитьПослеВыбораTNVED", ЭтотОбъект, МассивВыделенныхGoods));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораTNVED(Результат, МассивВыделенныхGoods)  Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "TNVED", Результат);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхItems, "TNVED", Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ClearTNVED(Команда)
	
	МассивВыделенныхGoods = ПолучитьМассивВыделенныхItems();
	Если МассивВыделенныхGoods.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхGoods = РГСофт.ИзменитьРеквизитВСсылкахВПривилегированномРежиме(МассивВыделенныхGoods, "TNVED", Неопределено);
	
	ОбновитьКолонкуВGoods(МассивИзмененныхGoods, "TNVED", Неопределено);
	
КонецПроцедуры

//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008

// GOODS. ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ItemsSelectedInvoiceOnlyПриИзменении(Элемент)
	
	ПерезаполнитьGoods();
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ItemsWrongLinesOnlyПриИзменении(Элемент)
	
	// ГРУБОВАТО
	ПерезаполнитьGoods();
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsПриАктивизацииСтроки(Элемент)
	
	Если InvoicesParcelLinesSelector = 2 Тогда
		ПерезаполнитьParcelLinesOfGoods();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура GoodsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "GoodsGuaranteeLetter" или Поле.Имя = "GoodsMOC" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущийItem = Элемент.ТекущиеДанные.Item;
	
	// ++ КДС 25.11.2016
	// Если щелкнули в ячейке PartNo, то нужно открыть форму этого PartNo
	Если Элементы.Goods.ТекущийЭлемент = Элементы.GoodsPartNo Тогда
		
		PartNo = TDСервер.НайтиСоздатьPartNo(Элемент.ТекущиеДанные.PartNo, ТекущийItem);
		ПоказатьЗначение(, PartNo);
		Возврат;
		
	КонецЕсли;	
	// -- КДС 25.11.2016
	
	Если ЗначениеЗаполнено(ТекущийItem) Тогда
		ПоказатьЗначение(,ТекущийItem);		
	КонецЕсли;
	
КонецПроцедуры

// ++ КДС 22.11.2016 S-I-0001628
&НаКлиенте
Процедура GoodsПриАктивизацииЯчейки(Элемент)
	
	#Если НЕ ВебКлиент Тогда // { RGS VChaplygin 2018-10-25 - S-I-0006207 }
		ТД = Элементы.Goods.ТекущийЭлемент;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если колонкиОтображены Тогда
			колонкиОтображены = Ложь;
			Возврат;
		КонецЕсли;
		
		текущаяВидимость = Элементы.GoodsГруппаTD.ОтображатьВШапке;
		
		Если (ТД.Родитель = Элементы.GoodsГруппаTD и текущаяВидимость) или (НЕ ТД.Родитель = Элементы.GoodsГруппаTD и НЕ текущаяВидимость) Тогда
			Возврат;
		ИначеЕсли ТД.Родитель = Элементы.GoodsГруппаTD и НЕ текущаяВидимость Тогда
			
			Элементы.GoodsГруппаTD.ОтображатьВШапке = Истина;
			Элементы.GoodsTDStatus.Видимость 		= Истина;
			Элементы.GoodsTDHistory.Видимость		= Истина;
			Элементы.GoodsTDQuery.Видимость			= Истина;
			Элементы.GoodsTDIndicator.Заголовок		= "";	
			колонкиОтображены = Истина;
			Возврат;
			
		КонецЕсли;
		
		Элементы.GoodsГруппаTD.ОтображатьВШапке = Ложь;
		Элементы.GoodsTDStatus.Видимость 		= Ложь;
		Элементы.GoodsTDHistory.Видимость		= Ложь;
		Элементы.GoodsTDQuery.Видимость			= Ложь;
		Элементы.GoodsTDIndicator.Заголовок		= "TD";
	#КонецЕсли // { RGS VChaplygin 2018-10-25 - S-I-0006207 }
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsTDStatusНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТД = Элементы.Goods.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийСтатус = ТД.TDStatus;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsTDStatusПриИзменении(Элемент)
	
	ТД = Элементы.Goods.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТД.TDIndicator = ПолучитьКартинкуСтатуса(ТД.TDStatus);
	
	Если ТД.TDStatus = ПредопределенноеЗначение("Перечисление.TDStatuses.Requested") 
		И ТД.TDStatus <> ПредыдущийСтатус Тогда
		
		TDСервер.НайтиСоздатьPartNo(ТД.PartNo, ТД.Item); 
		
		Если ЗначениеЗаполнено(ТД.TDQuery) Тогда
			
			ОткрытьФормуОтправкиПисьма(ТД);
			
		Иначе
			
			// покажем окно ввода запроса и только потом откроем форму письма
			начальнаяСтрока = ТД.TDQuery;		
			
			ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработкаQuery", ЭтаФорма, Новый Структура("ЗапросПередПисьмом", Истина)), начальнаяСтрока, "Please fill out the request", , Истина);
			
		КонецЕсли; 
		
	ИначеЕсли ТД.TDStatus <> ПредыдущийСтатус Тогда
		
		// если статус изменился и это не Requested, тогда надо его записать просто без доп. действий
		TDСервер.ЗаписатьНовоеЗначениеСтатуса(ТД.TDStatus, ТД.PartNo, Объект.Ссылка, ТД.TDQuery, ТД.Item);
		// { RGS AArsentev 17.06.2018
		//УстановитьСтатусДляАналогичныхСтрок(ТД);
		// } RGS AArsentev 17.06.2018
		ЭтаФорма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДляАналогичныхСтрок(ТД)
	
	строкиПоиска = Goods.НайтиСтроки(Новый Структура("PartNo", ТД.PartNo));
	
	Для каждого текСтрокаПоиска из строкиПоиска Цикл
		
		Если текСтрокаПоиска = ТД Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(текСтрокаПоиска, ТД, "TDStatus, TDQuery, TDHistory, TDIndicator");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиПисьма(ТД)
	
	параметрыПисьма = Новый Структура;
	параметрыПисьма.Вставить("PartNo",		СокрЛП(ТД.PartNo)); 
	параметрыПисьма.Вставить("DOCNo",  		СокрЛП(Объект.Номер));
	параметрыПисьма.Вставить("DOC",  		Объект.Ссылка);
	параметрыПисьма.Вставить("Coordinator", Объект.Coordinator);
	параметрыПисьма.Вставить("Query",  		ТД.TDQuery);
	параметрыПисьма.Вставить("DOCType",  	"DOC");
	
	параметрыПисьма.Вставить("Item",  	ТД.Item);
	
	// передадим список items с требуемым парт-номером
	строкиПоиска = Goods.НайтиСтроки(Новый Структура("PartNo", ТД.PartNo));
	массивItems = новый Массив;
	Для Каждого текСтрокаПоиска из строкиПоиска Цикл
		
		массивItems.Добавить(текСтрокаПоиска.item);
		
	КонецЦикла;
	
	параметрыПисьма.Вставить("Items", массивItems);
	
	// надо показать форму отправки нового сообщения
	СтруктураПараметров = TDСервер.ПолучитьСтруктуруПараметровФормыОтправкиПочтовогоСообщенияПриИзмененииСтатуса(параметрыПисьма);
	Если СтруктураПараметров <> Неопределено Тогда
		
		Для Каждого Borg из СтруктураПараметров.УдаленныеБорги Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(Borg) + " was marked for deletion!
			|Please send request via RIET-support!",
			, "ФормаОбщаяКомандаrgsМониторСопровождения");
		КонецЦикла;
		
		Если СтруктураПараметров.УдаленныеБорги.Количество() = 0 Тогда 
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения_HTML", СтруктураПараметров, ЭтаФорма);
		иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуСтатуса(Статус)
	
	соответствиеСтатусов = Новый Соответствие;
	соответствиеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.TDStatuses.NotRequired"), БиблиотекаКартинок.ПапкаСерая);
	соответствиеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.TDStatuses.Received"), БиблиотекаКартинок.ПапкаЗеленая);
	соответствиеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.TDStatuses.Submitted"), БиблиотекаКартинок.ПапкаСиняя);
	соответствиеСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.TDStatuses.Requested"), БиблиотекаКартинок.ПапкаКрасная);
	
	Возврат соответствиеСтатусов.Получить(Статус);
	
КонецФункции

&НаКлиенте
Процедура GoodsTDQueryОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Goods.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	начальнаяСтрока = ТД.TDQuery;		
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОбработкаQuery", ЭтаФорма, Неопределено), начальнаяСтрока, "Please fill out the request", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаQuery(текстЗапроса, допПараметры) Экспорт
	
	ТД = Элементы.Goods.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если текстЗапроса = Неопределено Тогда
		
		Если ТипЗнч(допПараметры) = Тип("Структура") И 
			допПараметры.Свойство("ЗапросПередПисьмом") Тогда
			
			ТД.TDStatus = ПредыдущийСтатус;
			ТД.TDIndicator = ПолучитьКартинкуСтатуса(ТД.TDStatus);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
	
	ТД.TDQuery = текстЗапроса;
	
	Если ТипЗнч(допПараметры) = Тип("Структура") И 
		допПараметры.Свойство("ЗапросПередПисьмом") Тогда
		ОткрытьФормуОтправкиПисьма(ТД);
	Иначе
		// Если это просто правка запроса, то надо записать текст в самую позднюю запись регистра сведениий
		ДобавитьТекстQueryКЗаписямРегистра(ТД.PartNo, ТД.Item, Объект.Ссылка, текстЗапроса);
	КонецЕсли;
	// { RGS AArsentev 17.06.2018
	//УстановитьСтатусДляАналогичныхСтрок(ТД);
	// } RGS AArsentev 17.06.2018
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьТекстQueryКЗаписямРегистра(PartNo, Item, DOC, текстЗапроса)
	
	Набор = РегистрыСведений.TDStatuses.СоздатьНаборЗаписей();
	Набор.Отбор.PartNo.Установить(TDСервер.НайтиСоздатьPartNo(PartNo, Item), Истина);
	Набор.Отбор.DOC.Установить(DOC, Истина);
	
	Набор.Прочитать();
	
	Если Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	строкаПравки 		= Набор[Набор.Количество()-1];
	строкаПравки.Query	= текстЗапроса;
	
	Набор.Записать(Истина);
	
КонецПроцедуры


// -- КДС 22.11.2016 S-I-0001628



// PARCEL LINES OF GOODS. ЗАПОЛНЕНИЕ.

&НаКлиенте
Процедура ПерезаполнитьParcelLinesOfGoods()
	
	МассивInvoices = Неопределено;
	Item = Неопределено;
	ПолучитьМассивInvoicesИлиInvoiceLineДляParcelLinesOfGoods(МассивInvoices, Item);
	ПерезаполнитьParcelLinesOfGoodsПоМассивуInvoicesИлиGoods(МассивInvoices, Item);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивInvoicesИлиInvoiceLineДляParcelLinesOfGoods(МассивInvoices, Item)
	
	Если InvoicesParcelLinesSelector = 0 Тогда
		
		// All lines
		МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс");
		
	ИначеЕсли InvoicesParcelLinesSelector = 1 Тогда
		
		// Selected invoice only
		МассивInvoices = Новый Массив;
		
		ТекущаяСтрокаInvoices = Элементы.Invoices.ТекущаяСтрока;
		Если ТекущаяСтрокаInvoices <> Неопределено Тогда
			
			СтрокаInvoices = Объект.Инвойсы.НайтиПоИдентификатору(ТекущаяСтрокаInvoices);
			Если СтрокаInvoices <> Неопределено и Не СтрокаInvoices.Инвойс.Пустая() Тогда
				МассивInvoices.Добавить(СтрокаInvoices.Инвойс);
			КонецЕсли;	
			
		КонецЕсли; 		
		
	ИначеЕсли InvoicesParcelLinesSelector = 2 Тогда
		
		// Selected invoice line only
		МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс");
		
		ТекущаяСтрокаGoods = Элементы.Goods.ТекущаяСтрока;
		Если ТекущаяСтрокаGoods <> Неопределено Тогда
			СтрокаGoods = Goods.НайтиПоИдентификатору(ТекущаяСтрокаGoods);
			Если СтрокаGoods <> Неопределено и ЗначениеЗаполнено(СтрокаGoods.Item) Тогда
				Item = СтрокаGoods.Item;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьParcelLinesOfGoodsПоМассивуInvoicesИлиGoods(МассивInvoices=Неопределено, Item=Неопределено)
	
	ParcelLinesOfGoods.Очистить();
	
	Если (МассивInvoices = Неопределено ИЛИ МассивInvoices.Количество() = 0)
		И НЕ ЗначениеЗаполнено(Item) Тогда
		ПерезаполнитьИтогиParcelLinesOfGoods();
		Возврат;
	КонецЕсли;
	
	МассивParcels = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Parcels, "Parcel");
	ДанныеParcelLinesOfGoods = ПолучитьДанныеParcelLinesOfGoods(МассивParcels, МассивInvoices, Item);
	ПерезаполнитьParcelLinesOfGoodsИзДанных(ДанныеParcelLinesOfGoods);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеParcelLinesOfGoods(Parcels, Invoices = Неопределено, Item = Неопределено)
	
	МассивСтруктур = Новый Массив;
	
	// Если параметры - пустые - значит запрос точно ничего не вернет и можно его не выполнять
	Если Parcels.Количество() = 0
		ИЛИ (Invoices = Неопределено ИЛИ Invoices.Количество() = 0)
		И НЕ ЗначениеЗаполнено(Item) Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Parcels", Parcels);
	Запрос.УстановитьПараметр("InvoicesДляParcelLinesOfGoods", Invoices);
	Запрос.УстановитьПараметр("ItemДляParcelLinesOfGoods", Item);
	Запрос.Текст = ПолучитьТекстЗапросаДанныхParcelLinesOfGoods();
	
	Выборка = Запрос.Выполнить().Выбрать();	
	СтрокаСвойствParcelLinesOfGoods = ПолучитьСтрокуСвойствParcelLinesOfGoods();
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура(СтрокаСвойствParcelLinesOfGoods);
		ЗаполнитьЗначенияСвойств(Структура, Выборка, СтрокаСвойствParcelLinesOfGoods);
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДанныхParcelLinesOfGoods()
	
	Возврат
	"ВЫБРАТЬ
	|	ParcelsGoods.Ссылка КАК Parcel,
	|	ParcelsGoods.НомерСтроки КАК ParcelLineNo,
	|	ParcelsGoods.СтрокаИнвойса.Инвойс КАК Invoice,
	|	ParcelsGoods.СтрокаИнвойса КАК Item,
	|	ParcelsGoods.СтрокаИнвойса.НаименованиеТовара КАК Description,
	|	ParcelsGoods.НомерЗаявкиНаЗакупку КАК PONo,
	|	ParcelsGoods.СтрокаЗаявкиНаЗакупку КАК POLineNo,
	|	ParcelsGoods.Qty,
	|	ParcelsGoods.QtyUOM,
	|	ParcelsGoods.GrossWeightKG,
	|	ParcelsGoods.NetWeight,
	|	ParcelsGoods.ChargeableWeight
	|ИЗ
	|	Справочник.Parcels.Детали КАК ParcelsGoods
	|ГДЕ
	|	ParcelsGoods.Ссылка В(&Parcels)
	|	И ParcelsGoods.СтрокаИнвойса.Инвойс В(&InvoicesДляParcelLinesOfGoods)
	|	И ВЫБОР
	|			КОГДА &ItemДляParcelLinesOfGoods = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ParcelsGoods.СтрокаИнвойса = &ItemДляParcelLinesOfGoods
	|		КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ParcelsGoods.Ссылка.Код,
	|	ParcelsGoods.НомерСтроки";
			
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойствParcelLinesOfGoods()
	
	Возврат "Parcel, ParcelLineNo, Invoice, Item, Description, PONo, POLineNo, Qty, QtyUOM, GrossWeightKG, NetWeight, ChargeableWeight";
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьParcelLinesOfGoodsИзДанных(Данные)
	
	// Удалим Goods, данные которых мы собираемся перезаполнить
	МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Данные, "Invoice");	
	СтруктураПоискаПоInvoice = Новый Структура("Invoice");
	Для Каждого Invoice Из МассивInvoices Цикл
		
		СтруктураПоискаПоInvoice.Invoice = Invoice;
		СтрокиParcelLinesOfGoods = ParcelLinesOfGoods.НайтиСтроки(СтруктураПоискаПоInvoice);
		Для Каждого СтрокаParcelLineOfGood Из СтрокиParcelLinesOfGoods Цикл
			ParcelLinesOfGoods.Удалить(СтрокаParcelLineOfGood);
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим новые Parcel lines of goods
	СтрокаСвойствParcelLinesOfGoods = ПолучитьСтрокуСвойствParcelLinesOfGoods();
	Для Каждого Структура Из Данные Цикл
		
		СтрокаТаблицы = ParcelLinesOfGoods.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Структура, СтрокаСвойствParcelLinesOfGoods);
		
	КонецЦикла;
	ПерезаполнитьИтогиParcelLinesOfGoods();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИтогиParcelLinesOfGoods()
	
	InvoicesParcelLinesQty = ParcelLinesOfGoods.Итог("Qty");
	InvoicesParcelLinesGrossWeightKG = ParcelLinesOfGoods.Итог("GrossWeightKG");
	InvoicesParcelLinesChargeableWeight = ParcelLinesOfGoods.Итог("ChargeableWeight");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеParcelLinesOfGoods()
	
	СтруктураПоискаПоInvoice = Новый Структура("Инвойс");
	ы = 0;
	Пока ы < ParcelLinesOfGoods.Количество() Цикл
		
		СтрокаКоллекции = ParcelLinesOfGoods[ы];
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Invoice) Тогда
			ParcelLinesOfGoods.Удалить(СтрокаКоллекции);
		Иначе
			
			СтруктураПоискаПоInvoice.Инвойс = СтрокаКоллекции.Invoice;
			СтрокиInvoices = Объект.Инвойсы.НайтиСтроки(СтруктураПоискаПоInvoice);
			Если СтрокиInvoices.Количество() = 0 Тогда
				ParcelLinesOfGoods.Удалить(СтрокаКоллекции);
			Иначе
				ы = ы + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаполнитьИтогиParcelLinesOfGoods();
	
КонецПроцедуры


// PARCEL LINES OF GOODS. ОБРАБОТЧИКИ СОБЫТИЙ.

&НаКлиенте
Процедура InvoicesParcelLinesSelectorПриИзменении(Элемент)
	
	ПерезаполнитьParcelLinesOfGoods();
	
КонецПроцедуры

&НаКлиенте
Процедура ParcelLinesOfGoodsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекГрузовоеМесто = Элемент.ТекущиеДанные.Parcel;
	Если ЗначениеЗаполнено(ТекГрузовоеМесто) Тогда
		ПоказатьЗначение(,ТекГрузовоеМесто);		
	КонецЕсли;
	
КонецПроцедуры

// EUC Sanctions

// PO

&НаКлиенте
Процедура POsПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоВыделеннойPO();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоВыделеннойPO()
	
	ВыделенныеСтрокиPO = Элементы.POs.ВыделенныеСтроки;
	
	Если ВыделенныеСтрокиPO.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = POs.НайтиПоИдентификатору(ВыделенныеСтрокиPO[0]);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.PO) Тогда 
		Элементы.EUCItemsList.ОтборСтрок = Новый ФиксированнаяСтруктура("PONo", СокрЛП(СтрокаТаблицы.PO));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура POsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.POs.ТекущиеДанные;
	CustomsКлиент.ОткрытьPOПоНомеру(СокрЛП(ТекущиеДанные.PO), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ShowOnlyPendingEUCПриИзменении(Элемент)
	
	ЗаполнитьPOsИItemsForEUC();
	
КонецПроцедуры

//Items

&НаКлиенте
Процедура EUCItemsListВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.EUCItemsList.ТекущиеДанные;
	ПоказатьЗначение(,ТекущиеДанные.Item);
	
КонецПроцедуры

//Командная панель EUC

&НаКлиенте
Процедура MarkEUCNotRequired(Команда)
	
	MarkEUCRequiredOrNotRequired(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура MarkEUCRequired(Команда)
	
	MarkEUCRequiredOrNotRequired(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура MarkEUCRequiredOrNotRequired(NotRequired)
	
	МассивItems = ПолучитьМассивItemsДляЗаполненияРеквизитовEUC();
	
	Если NotRequired 
		И ЕстьЗаполненныеEUCRequestedИЛИEUCReceived(МассивItems) Тогда
		
		Предупреждение(
		"EUC Requested and Received dates will be deleted!",
		30);
		
		МассивИзмененныхItems = ИзменитьРеквизитыВItems(МассивItems, "EUCNotRequired", NotRequired);
		ОбновитьКолонкуВEUCItems(МассивИзмененныхItems, "EUCRequested", Неопределено);
		ОбновитьКолонкуВEUCItems(МассивИзмененныхItems, "EUCReceived", Неопределено);
		
	иначе
		
		МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивItems, "EUCNotRequired", NotRequired);
		
	КонецЕсли;
	
	ОбновитьЗначенияPOsИItemsForEUC(МассивИзмененныхItems, "EUCNotRequired", NotRequired);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьРеквизитыВItems(МассивСсылок, ИмяРеквизита, НовоеЗначение) Экспорт
	
	МассивИзмененныхСсылок = Новый Массив;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Item = Ссылка.ПолучитьОбъект();
		
		Если Ссылка[ИмяРеквизита] = НовоеЗначение 
			И Не ЗначениеЗаполнено(Ссылка.EUCRequested) 
			И Не ЗначениеЗаполнено(Ссылка.EUCReceived) Тогда
			ЗафиксироватьТранзакцию();
			МассивИзмененныхСсылок.Добавить(Ссылка);
			Продолжить;
		КонецЕсли;
		
		Item[ИмяРеквизита] = НовоеЗначение;
		Item.EUCRequested = Неопределено;
		Item.EUCReceived = Неопределено;
		
		Попытка
			Item.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить(
			"Failed to save " + СокрЛП(Item) + "!
			|See errors above.
			|" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		МассивИзмененныхСсылок.Добавить(Ссылка);
		
	КонецЦикла;
	
	Возврат МассивИзмененныхСсылок;
	
КонецФункции

&НаКлиенте
Процедура FillEUCRequested(Команда)
	
	FillEUCRequestedOrReceived("EUCRequested", EUCRequested);
	
КонецПроцедуры

&НаКлиенте
Процедура FillEUCReceived(Команда)
	
	FillEUCRequestedOrReceived("EUCReceived", EUCReceived);
	
КонецПроцедуры

&НаКлиенте
Процедура FillEUCRequestedOrReceived(ИмяРеквизита, НовоеЗначение)
	
	МассивItems = ПолучитьМассивItemsДляЗаполненияРеквизитовEUC();
	
	Если ЕстьОтмеченныеEUCNotRequired(МассивItems) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "EUCRequested"  
		И ЕстьЗаполненныеEUCReceivedИлиReceivedМеньшеRequested(МассивItems, НовоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "EUCReceived" И ЗначениеЗаполнено(НовоеЗначение) 
		И ЕстьНеЗаполненныеEUCRequestedИлиRequestedБольшеReceived(МассивItems, НовоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхItems = РГСофт.ИзменитьРеквизитВСсылках(МассивItems, ИмяРеквизита, НовоеЗначение);
	
	ОбновитьЗначенияPOsИItemsForEUC(МассивИзмененныхItems, ИмяРеквизита, НовоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивItemsДляЗаполненияРеквизитовEUC()
	
	МассивItems = Новый Массив;
	
	Если SpecifyEUCFor = 0 Тогда 
		
		//for PO
		ВыделенныеСтрокиPO = Элементы.POs.ВыделенныеСтроки;
		
		Если ВыделенныеСтрокиPO.Количество() = 0 Тогда
			Предупреждение(
			"Please, select PO.",
			30);
			Возврат МассивItems;
		КонецЕсли;
		
		СтрокаТаблицы = POs.НайтиПоИдентификатору(ВыделенныеСтрокиPO[0]);
		СтруктураОтбораPO = Новый Структура("PONo", СтрокаТаблицы.PO);
		МассивСтрокItems = EUCItemsList.НайтиСтроки(СтруктураОтбораPO);
		
		Для Каждого СтрокаItem из МассивСтрокItems Цикл 
			МассивItems.Добавить(СтрокаItem.Item);
		КонецЦикла;
		
	иначе
		
		//for Item
		ВыделенныеСтрокиItems = Элементы.EUCItemsList.ВыделенныеСтроки;
		
		Если ВыделенныеСтрокиItems.Количество() = 0 Тогда
			Предупреждение(
			"Please, select at least one Item.",
			30);
			Возврат МассивItems;
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтрокиItems Цикл
			
			СтрокаТаблицы = EUCItemsList.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Item) Тогда
				МассивItems.Добавить(СтрокаТаблицы.Item);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат МассивItems;
	
КонецФункции

// Заполнение таблиц POs И Items For EUC 

&НаКлиенте
Процедура ЗаполнитьPOsИItemsForEUC()
	
	Если Элементы.POs.ТекущиеДанные <> Неопределено Тогда 
		ТекPO = Элементы.POs.ТекущиеДанные.PO;
	КонецЕсли;
	
	POs.Очистить();
	EUCItemsList.Очистить();
	
	МассивInvoices = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(Объект.Инвойсы, "Инвойс");	
	
	СтруктураPOsИItems = ПолучитьСтруктуруPOsИItemsForEUC(МассивInvoices, ShowOnlyPendingEUC);
	
	МассивPO = СтруктураPOsИItems.МассивPO;
	МассивСтруктурItems = СтруктураPOsИItems.МассивСтруктурItems;
	
	Для Каждого СтруктураItem из МассивСтруктурItems Цикл 
		НоваяСтрокаEUC = EUCItemsList.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаEUC, СтруктураItem);
	КонецЦикла;
	
	Для Каждого ЭлементМассива из МассивPO Цикл 
		НоваяСтрокаPO = POs.Добавить();
		НоваяСтрокаPO.PO = ЭлементМассива;
	КонецЦикла;
	
	ДанныеPOsИItemsEUCАктуальны = Истина;
	
	Если ТекPO <> Неопределено Тогда 
		Для Каждого Стр из POs Цикл
			Если Стр.PO = ТекPO Тогда 
				ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
				Элементы.POs.ТекущаяСтрока = ИдентификаторСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруPOsИItemsForEUC(МассивInvoices, OnlyPendingEUC)
	
	СтруктураPOsИItems = Новый Структура("МассивPO,МассивСтруктурItems");
	
	МассивСтруктурItems = Новый Массив;
	МассивPO = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивInvoices", МассивInvoices);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка КАК Item,
	|	СтрокиИнвойса.НомерЗаявкиНаЗакупку КАК PONo,
	|	СтрокиИнвойса.EUCNotRequired,
	|	СтрокиИнвойса.EUCRequested,
	|	СтрокиИнвойса.EUCReceived
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Инвойс В(&МассивInvoices)
	|	И НЕ СтрокиИнвойса.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтруктураItem = Новый Структура("Item,PONo,EUCNotRequired,EUCRequested,EUCReceived");
		
		Если OnlyPendingEUC Тогда
			
			Если Выборка.EUCNotRequired Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.EUCNotRequired 
				И ЗначениеЗаполнено(Выборка.EUCRequested)
				И ЗначениеЗаполнено(Выборка.EUCReceived) Тогда 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураItem, Выборка);
		
		МассивСтруктурItems.Добавить(СтруктураItem);
		
		Если МассивPO.Найти(Выборка.PONo) = Неопределено Тогда 
			МассивPO.Добавить(Выборка.PONo);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураPOsИItems.МассивСтруктурItems = МассивСтруктурItems;
	СтруктураPOsИItems.МассивPO = МассивPO; 	
	
	Возврат СтруктураPOsИItems;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкуВEUCItems(МассивItems, ИмяКолонки, Значение)
	
	Для Каждого СтрокаТаблицы Из EUCItemsList Цикл
		
		Если МассивItems.Найти(СтрокаТаблицы.Item) <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонки] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗаполненныеEUCRequestedИЛИEUCReceived(МассивItems)
	
	ЕстьЗаполненныеEUCRequestedИЛИEUCReceived = Ложь;
	СтруктураОтбора = Новый Структура("Item");
	
	Для Каждого Item из МассивItems Цикл
		
		СтруктураОтбора.Item = Item;
		МассивСтрокEUCItems = EUCItemsList.НайтиСтроки(СтруктураОтбора);
		
		СтрокаEUCItems = МассивСтрокEUCItems[0];
		
		Если ЗначениеЗаполнено(СтрокаEUCItems.EUCRequested) или ЗначениеЗаполнено(СтрокаEUCItems.EUCReceived) Тогда 
			ЕстьЗаполненныеEUCRequestedИЛИEUCReceived = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеEUCRequestedИЛИEUCReceived;
	
КонецФункции

&НаКлиенте
Функция ЕстьОтмеченныеEUCNotRequired(МассивItems)
	
	ЕстьОтмеченныеEUCNotRequired = Ложь;
	СтруктураОтбора = Новый Структура("Item");
	
	Для Каждого Item из МассивItems Цикл
		
		СтруктураОтбора.Item = Item;
		МассивСтрокEUCItems = EUCItemsList.НайтиСтроки(СтруктураОтбора);
		
		СтрокаEUCItems = МассивСтрокEUCItems[0];    
		ИндексСтроки = EUCItemsList.Индекс(СтрокаEUCItems);
		
		Если СтрокаEUCItems.EUCNotRequired Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"For Item " + СокрЛП(Item) + " EUC is not required!",
			, "EUCItemsList[" + (ИндексСтроки) +"].EUCNotRequired", , ЕстьОтмеченныеEUCNotRequired);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтмеченныеEUCNotRequired;
	
КонецФункции

&НаКлиенте
Функция ЕстьЗаполненныеEUCReceivedИлиReceivedМеньшеRequested(МассивItems, EUCRequested)
	
	ЕстьЗаполненныеEUCReceived = Ложь;
	СтруктураОтбора = Новый Структура("Item");
	
	Для Каждого Item из МассивItems Цикл
		
		СтруктураОтбора.Item = Item;
		МассивСтрокEUCItems = EUCItemsList.НайтиСтроки(СтруктураОтбора);
		
		СтрокаEUCItems = МассивСтрокEUCItems[0];    
		ИндексСтроки = EUCItemsList.Индекс(СтрокаEUCItems);
		
		Если Не ЗначениеЗаполнено(EUCRequested) И ЗначениеЗаполнено(СтрокаEUCItems.EUCReceived) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"For Item " + СокрЛП(Item) + " Received date is not empty!",
			, "EUCItemsList[" + (ИндексСтроки) +"].EUCReceived", , ЕстьЗаполненныеEUCReceived);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаEUCItems.EUCReceived) И СтрокаEUCItems.EUCReceived < EUCRequested Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"For Item " + СокрЛП(Item) + " Received date can not be earlier than Requested date!",
			, "EUCItemsList[" + (ИндексСтроки) +"].EUCReceived", , ЕстьЗаполненныеEUCReceived);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеEUCReceived;
	
КонецФункции

&НаКлиенте
Функция ЕстьНеЗаполненныеEUCRequestedИлиRequestedБольшеReceived(МассивItems, EUCReceived)
	
	ЕстьЗаполненныеEUCReceived = Ложь;
	СтруктураОтбора = Новый Структура("Item");
	
	Для Каждого Item из МассивItems Цикл
		
		СтруктураОтбора.Item = Item;
		МассивСтрокEUCItems = EUCItemsList.НайтиСтроки(СтруктураОтбора);
		
		СтрокаEUCItems = МассивСтрокEUCItems[0];    
		ИндексСтроки = EUCItemsList.Индекс(СтрокаEUCItems);
		
		Если Не ЗначениеЗаполнено(СтрокаEUCItems.EUCRequested) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"For Item " + СокрЛП(Item) + " Requested date is empty!",
			, "EUCItemsList[" + (ИндексСтроки) +"].EUCRequested", , ЕстьЗаполненныеEUCReceived);
		КонецЕсли;
		
		Если СтрокаEUCItems.EUCRequested > EUCReceived Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"For Item " + СокрЛП(Item) + " Requested date can not be later than Received date!",
			, "EUCItemsList[" + (ИндексСтроки) +"].EUCRequested", , ЕстьЗаполненныеEUCReceived);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеEUCReceived;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначенияPOsИItemsForEUC(МассивItems, ИмяКолонки, Значение)
	
	Если ShowOnlyPendingEUC Тогда 
		ЗаполнитьPOsИItemsForEUC();
	иначе
		ОбновитьКолонкуВEUCItems(МассивItems, ИмяКолонки, Значение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// { RGS AGorlenko 26.07.2016 16:17:58 - для Booked тоже недступно
	//Элементы.ManualStatuses.Доступность = Не ЗначениеЗаполнено(Объект.Granted);
	Элементы.ManualStatuses.Доступность = Не ЗначениеЗаполнено(Объект.Granted) И Не ЗначениеЗаполнено(Объект.Booked);
	// } RGS AGorlenko 26.07.2016 16:18:17 - для Booked тоже недступно
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВерсию(ТекущийMOT, ТекущийCCA, Requested, RequestedPOA, ОбновлятьДаты = Истина)
	
	// { RGS DKazanskiy 24.07.2018 11:34:50 - S-I-0005657
	Ответ = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПроверитьВерсию(Объект.Ссылка, ТекущийMOT, ТекущийCCA, Requested, RequestedPOA);
	
	Если ОбновлятьДаты Тогда
		Объект.Received 	= Ответ.Received;
		Объект.Accepted 	= Ответ.Accepted;
	КонецЕсли;
	
	Если Ответ.ТекущаяВерсия <> Неопределено Тогда
		ТекущаяВерсия 		= Ответ.ТекущаяВерсия;
	Иначе
		ТекущаяВерсия       = 0;
	КонецЕсли;
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//ЗапросДатаИзменения = Новый Запрос;
	//ЗапросДатаИзменения.Текст = "ВЫБРАТЬ
	//|	DOCVersionsСрезПоследних.Период КАК Период
	//|ИЗ
	//|	РегистрСведений.DOCVersions.СрезПоследних(
	//|			,
	//|			DOC = &DOC
	//|				И ИзменилсяСостав) КАК DOCVersionsСрезПоследних
	//|ГДЕ
	//|	DOCVersionsСрезПоследних.ИзменилсяСостав";
	//ЗапросДатаИзменения.УстановитьПараметр("DOC", Объект.Ссылка);
	//РезДатаИзменения = ЗапросДатаИзменения.Выполнить().Выгрузить();
	//Если РезДатаИзменения.Количество()>0 Тогда
	//	ДатаНачалаСреза = РезДатаИзменения[0].Период; 
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	DOCVersions.DOC КАК DOC,
	//|	DOCVersions.Version КАК Version,
	//|	DOCVersions.Received,
	//|	DOCVersions.Accepted,
	//|	DOCVersions.Requested
	//|ИЗ
	//|	РегистрСведений.DOCVersions КАК DOCVersions
	//|ГДЕ
	//|	DOCVersions.CCA = &CCA
	//|	И DOCVersions.MOT = &MOT
	//|	И DOCVersions.DOC = &DOC";	
	//Запрос.УстановитьПараметр("DOC", Объект.Ссылка);
	//Запрос.УстановитьПараметр("CCA", ТекущийCCA);
	//Запрос.УстановитьПараметр("MOT", ТекущийMOT);
	//Если РезДатаИзменения.Количество()>0 Тогда
	//	Запрос.УстановитьПараметр("Дата1", ДатаНачалаСреза);
	//	Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	//	Запрос.Текст = Запрос.Текст + " и DOCVersions.Период МЕЖДУ &Дата1 И &Дата2 УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
	//Иначе
	//	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
	//КонецЕсли;
	//Результат = Запрос.Выполнить();
	//
	//Если Результат.Пустой() Тогда
	//	Объект.Received =  '00010101';
	//	Объект.Accepted =  '00010101';
	//	Объект.Requested =  '00010101';
	//Иначе
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	Объект.Received =  Выборка.Received;
	//	Объект.Accepted =  Выборка.Accepted;
	//	Объект.Requested =  Выборка.Requested;
	//	// { RGS AGorlenko 20.10.2017 11:44:12 - определение текущей версии дока
	//	ТекущаяВерсия = Выборка.Version;
	//	// } RGS AGorlenko 20.10.2017 11:44:28 - определение текущей версии дока
	//КонецЕсли;
	
	// } RGS DKazanskiy 24.07.2018 11:34:52 -
КонецПроцедуры

// { RGS AArsentev 06.09.2016 12:25:41 - S-I-0001784
&НаКлиенте
Процедура CreateParcelsFromHistory(Команда)
	
	ТекДанные = Элементы.Goods.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Message = New UserMessage();
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Message.Text = "Необходимо записать документ.";
		иначе
			Message.Text = "First save document.";
		КонецЕсли;
		Message.Message();
		Возврат;
	КонецЕсли;
	
	СтруктураСвойств = LocalDistributionForNonLawsonСервер.CreateParcelsFromHistory(ТекДанные.Item, Объект.Ссылка, Объект.Номер);
	
	Если СтруктураСвойств <> Неопределено Тогда 
		
		СтруктураСвойств.Вставить("СтрокаИнвойса", ТекДанные.Item);
		ОткрытьФорму("Справочник.Parcels.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураСвойств), Элементы.Parcels, Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура GoodsGuaranteeLetterПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура GoodsMOCПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнимItemsПоGuaranteeLetterRequired(Отказ)
	
	Для Каждого СтрItems из Goods Цикл
		
		//Если СтрItems.PermitsRequired = Перечисления.YesNo.No Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ОбъектItem = СтрItems.Item.ПолучитьОбъект();
		
		РГСофтКлиентСервер.УстановитьЗначение(ОбъектItem.GuaranteeLetter, СтрItems.GuaranteeLetter);
		РГСофтКлиентСервер.УстановитьЗначение(ОбъектItem.MOC, СокрЛП(СтрItems.MOC));
		
		Если ОбъектItem.Модифицированность() Тогда
			
			Попытка
				ОбъектItem.Записать();
			Исключение
				ОтменитьТранзакцию();
				Сообщить(
				"Failed to save " + СокрЛП(ОбъектItem) + "!
				|See errors above.
				|" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// ДОДЕЛАТЬ
&НаСервере
Процедура ОбработатьПолучениеСтруктурыПочтовогоСообщения(СтруктураПараметров)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	// ВООБЩЕ ЗДЕСЬ ДОЛЖНА БЫТЬ УПРАВЛЯЕМАЯ ТРАНЗАКЦИЯ, НО ПОЧЕМУ ТО ТОГДА DOC НЕ ЗАПИСЫВАЕТСЯ	
	НачатьТранзакцию();
	
	// Заполним даты и сохраним DOC
	Объект.Received = ТекущаяДата();
	Если Объект.DirectlyToTheHub Тогда
		Объект.Granted = Объект.Received;
	КонецЕсли; 
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		
		ОтменитьТранзакцию();
		Объект.Received = Неопределено;
		Объект.Granted = Неопределено;
		
		Сообщить(
		"Failed to save DOC!
		|See errors above.
		|" + ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	// Создадим и отправим EMail	
	УстановитьПривилегированныйРежим(Истина);
	ДокументEMail = Документы.EMails.СоздатьДокумент();
	СтруктураПараметров.Вставить("Object", Объект.Ссылка);
	ДокументEMail.Заполнить(СтруктураПараметров);
	Попытка
		ДокументEMail.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ОтменитьТранзакцию();
		Объект.Received = Неопределено;
		Объект.Granted = Неопределено;
		ОбновитьВидимостьStagesAndStatusesButtons();
		
		Сообщить(
		"Failed to send email.
		|See errors above.
		|" + ОписаниеОшибки());		
		Возврат;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();	
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.DOCОтправкаСообщенияGreenLightGranted, Объект.Ссылка);
	
КонецПроцедуры 

&НаКлиенте
Процедура SendOBToTMS(Команда)
	
	Если Объект.SentToTMS Тогда
		Сообщить("OB were already sent to TMS!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Granted) И Не ЗначениеЗаполнено(Объект.Booked) Тогда
		Сообщить("OB can be sent to TMS only from Granted (Booked) DOCs!");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.LegalEntity) Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Legal entity is empty!",
		, "LegalEntity", "Объект", Отказ);	
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.SourceLocation) Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Source Location is empty!",
		, "SourceLocation", "Объект", Отказ);	
	КонецЕсли; 
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
	Новый ОписаниеОповещения("SendOBToTMSЗавершение", ЭтаФорма),
	"Send OB to TMS?", 
	РежимДиалогаВопрос.ДаНет,
	60,
	КодВозвратаДиалога.Нет,
	,
	КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура SendOBToTMSЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	SendDOCToTMSНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура SendDOCToTMSНаСервере()
	
	НачатьТранзакцию();
	
	Объект.SentToTMS = Истина;
	Объект.SentToTMSDate = ТекущаяДата();
	
	Попытка
		Записать(Новый Структура("ДопСвойство", "SentToTMS"));
	Исключение
		ОтменитьТранзакцию();
		Объект.SentToTMS = Ложь;
		Объект.SentToTMSDate = Неопределено;
		Сообщить("Failed to save DOC: 
		| " + ОписаниеОшибки());
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;
	
	Попытка
		Обработки.PushDOCToTMS.PushDOCToTMS(Объект.Ссылка);
	Исключение
		ОтменитьТранзакцию();
		Объект.SentToTMS = Ложь;
		Объект.SentToTMSDate = Неопределено;
		Сообщить("Failed to push DOC to TMS!");
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

&НаКлиенте
Процедура CancelOBToTMS(Команда)
	
	Если НЕ Объект.SentToTMS Тогда
		Сообщить("OB of current DOC were not sent to TMS!");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
	Новый ОписаниеОповещения("CancelOBToTMSЗавершение", ЭтаФорма),
	"Cancel DOC sent to TMS?
	|(The system will only uncheck flag, nothing will be changed in TMS)", 
	РежимДиалогаВопрос.ДаНет,
	60,
	КодВозвратаДиалога.Нет,
	,
	КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура CancelOBToTMSЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	CancelOBToTMSНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура CancelOBToTMSНаСервере()
	
	НачатьТранзакцию();
	
	Объект.SentToTMS = Ложь;
	Объект.SentToTMSDate = Неопределено;
	Записать(Новый Структура);
	
	ЗафиксироватьТранзакцию();
	
	НастроитьВидимостьToTMS();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьToTMS()
	
	Элементы.SendOBToTMS.Видимость = НЕ Объект.SentToTMS;
	Элементы.CancelOBToTMS.Видимость = Объект.SentToTMS;
	
КонецПроцедуры

&НаКлиенте
Процедура SubmitToCoordinator(Команда)
	
	Если Объект.SentToTMS Тогда
		Сообщить("DOC is marked for deletion!");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.TransactionSpecialist) Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Transaction specialist is empty!",
		, "TransactionSpecialist", "Объект");	
		Возврат;
	КонецЕсли; 
	
	SubmitНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура SubmitНаСервере()
	
	НачатьТранзакцию();
	
	Объект.SubmittedByTransactionSpecialist = ТекущаяДата();
	
	Попытка
		Записать(Новый Структура("РедимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		ОтменитьТранзакцию();
		Объект.SubmittedByTransactionSpecialist = Неопределено;
		Сообщить("Failed to post DOC: 
		| " + ОписаниеОшибки());
		ЭтаФорма.Прочитать();
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	НастроитьЭлементыSubmitToCoordinator();
	
КонецПроцедуры

&НаКлиенте
Процедура CancelSubmittionToCoordinator(Команда)
	
	CancelSubmittionНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура CancelSubmittionНаСервере()
	
	НачатьТранзакцию();
	
	Объект.SubmittedByTransactionSpecialist = Неопределено;
	
	Записать(Новый Структура());
	
	ЗафиксироватьТранзакцию();
	
	НастроитьЭлементыSubmitToCoordinator();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораLegalEntity()
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ParentCompany", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(объект.ConsignTo, "Владелец")));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.InTMS", Истина));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.LegalEntity.ПараметрыВыбора = НовыеПараметрыВыбора; 	
	
КонецПроцедуры  

// { RGS AArsentev 18.07.2017 S-I-0003293
&НаКлиенте
Процедура GL_FromSegmentПриИзменении(Элемент)
	
	ОбновитьCurrentStatusНаСервере();
	
	ЕстьМатериалы = НаличиеМатериалов();
	Элементы.GL_FromSegment.Видимость = ЕстьМатериалы И НЕ ЭтоБрокер;
	Если ЕстьМатериалы И НЕ Объект.GL_FromSegment Тогда
		Элементы.Granted.Доступность = Ложь;
	Иначе
		Элементы.Granted.Доступность = Истина;
	КонецЕсли;
	Для Каждого СтрокаBORG Из Объект.ApprovalBorgs Цикл
		Если СтрокаBORG.Approve <> Объект.GL_FromSegment Тогда
			СтрокаBORG.User = ТекущийПользователь;
			СтрокаBORG.ApproveDate = ТекущаяДата();
			// { RGS EParshina 24.09.2018 14:42:59 - S-I-0005913
			СтрокаBORG.Approve = Объект.GL_FromSegment;
			// } RGS EParshina 24.09.2018 14:42:59 - S-I-0005913
		Иначе
			Продолжить
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } RGS AArsentev 18.07.2017 S-I-0003293

// { RGS AArsentev - заполнение по ExportRequest
&НаСервере
Процедура ЗаполнитьПоExportRequest(СтруктураПараметров)
	
	Инвойсы = Объект.Инвойсы.Добавить();
	Инвойсы.Инвойс = СтруктураПараметров.ДанныеЗаполненияИнвойс.Инвойс;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров.ДанныеЗаполненияИзExportRequest.ExportRequest);
	Объект.MOT = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ДанныеЗаполненияИзExportRequest.ExportRequest, "InternationalMOT");
	Объект.CCA = Неопределено;
	
	СоздатьParcels(СтруктураПараметров.ДанныеЗаполненияИнвойс.Инвойс, Объект, СтруктураПараметров.ДанныеЗаполненияИзExportRequest.ExportRequest);
	
КонецПроцедуры // } RGS AArsentev - заполнение по ExportRequest

// { RGS AArsentev 18.07.2017 S-I-0003293
&НаСервере
Функция НаличиеМатериалов()
	
	Возврат Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЕстьМатериалы(Объект);
	
КонецФункции // } RGS AArsentev 18.07.2017 S-I-0003293

// { RGS AArsentev 18.07.2017 S-I-0003293
&НаСервере
Функция НаличиеМатериаловСервер(DOC, ProcessLevel, POD, DOCDate, ПроверятьClearedPartNo)
	
	Invoices = Объект.Инвойсы.Выгрузить(,"Инвойс");
	Parcels = Объект.Parcels.Выгрузить(,"Parcel");
	МассивСтруктур = Новый Массив;
	// Если инвойсов нет - значит запрос точно ничего не вернет - значит можно его не выполнять
	Если Invoices.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("InvoicesДляGoods", Invoices);
	СтруктураПараметров.Вставить("Country", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
	СтруктураПараметров.Вставить("SanctionsGroup", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(POD, "SanctionsGroup"));
	СтруктураПараметров.Вставить("DOCDate", DOCDate);
	СтруктураПараметров.Вставить("Parcels", Parcels);
	СтруктураПараметров.Вставить("CurrentDate", ТекущаяДата());
	СтруктураПараметров.Вставить("DOC", DOC);
	
	СтруктураТекстов = Новый Структура;
	ДополнитьСтруктуруТекстовЗапросамиGoods(СтруктураТекстов, ProcessLevel, ПроверятьClearedPartNo);
	
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
	//ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo);
	ТаблицаДанныеGoods = ПолучитьТаблицуДанныхGoods(СтруктураРезультатов, ProcessLevel, ПроверятьClearedPartNo, DOC);
	//} RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008

	МассивItems = ТаблицаДанныеGoods.ВыгрузитьКолонку("Item");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Ссылка В(&Items)
	|	И СтрокиИнвойса.Классификатор = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказа.E)";
	Запрос.УстановитьПараметр("Items", МассивItems);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 18.07.2017 S-I-0003293

// { RGS AArsentev - заполнение по ExportRequest
&НаСервере
Процедура СоздатьParcels(Инвойс, Doc, ER)
	
	ЗапросСтроки = Новый Запрос;
	ЗапросСтроки.Текст = "ВЫБРАТЬ
	                     |	СтрокиИнвойса.СерийныйНомер,
	                     |	СтрокиИнвойса.Ссылка КАК СтрокаИнвойса,
	                     |	СтрокиИнвойса.КодПоИнвойсу,
	                     |	СтрокиИнвойса.НомерЗаявкиНаЗакупку,
	                     |	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку,
	                     |	СтрокиИнвойса.Количество КАК QTY,
	                     |	СтрокиИнвойса.NetWeight,
	                     |	СтрокиИнвойса.ЕдиницаИзмерения КАК QtyUOM,
	                     |	СтрокиИнвойса.ImportReference КАК Receiver
	                     |ИЗ
	                     |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	                     |ГДЕ
	                     |	СтрокиИнвойса.Инвойс = &Инвойс";
	ЗапросСтроки.УстановитьПараметр("Инвойс", Инвойс);
	РезультатСтроки = ЗапросСтроки.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Parcels.Код,
	               |	Parcels.Наименование,
	               |	Parcels.PackingType,
	               |	Parcels.SerialNo,
	               |	Parcels.Length,
	               |	Parcels.Width,
	               |	Parcels.Height,
	               |	Parcels.DIMsUOM,
	               |	Parcels.LengthCM,
	               |	Parcels.WidthCM,
	               |	Parcels.HeightCM,
	               |	Parcels.CubicMeters,
	               |	Parcels.GrossWeight,
	               |	Parcels.NetWeight,
	               |	Parcels.WeightUOM,
	               |	Parcels.GrossWeightKG,
	               |	Parcels.NetWeightKG,
	               |	Parcels.VolumeWeight,
	               |	Parcels.ChargeableWeight,
	               |	Parcels.LocalOnly,
	               |	Parcels.POList,
	               |	Parcels.InvoiceList,
	               |	Parcels.Comment,
	               |	Parcels.WarehouseFrom,
	               |	Parcels.WarehouseTo,
	               |	Parcels.Urgency,
	               |	Parcels.CreatedBy,
	               |	Parcels.CreationDate,
	               |	Parcels.ModifiedBy,
	               |	Parcels.ModificationDate,
	               |	Parcels.Repacked,
	               |	Parcels.HazardClass,
	               |	Parcels.DescriptionOfItems,
	               |	Parcels.SpecialHandling,
	               |	Parcels.NumOfParcels,
	               |	Parcels.RDD,
	               |	Parcels.DeliveredToWH,
	               |	Parcels.LocalImpacked,
	               |	Parcels.SpecialInstructions,
	               |	Parcels.SuppliersList,
	               |	Parcels.Prefix,
	               |	Parcels.LengthCorrected,
	               |	Parcels.WidthCorrected,
	               |	Parcels.HeightCorrected,
	               |	Parcels.CubicMetersCorrected,
	               |	Parcels.GrossWeightCorrected,
	               |	Parcels.LengthCMCorrected,
	               |	Parcels.WidthCMCorrected,
	               |	Parcels.HeightCMCorrected,
	               |	Parcels.GrossWeightKGCorrected,
	               |	Parcels.Предопределенный,
	               |	Parcels.ИмяПредопределенныхДанных,
	               |	Parcels.Представление
	               |ИЗ
	               |	Справочник.Parcels КАК Parcels
	               |ГДЕ
	               |	Parcels.ExportRequest = &ExportRequest";
	Запрос.УстановитьПараметр("ExportRequest", ER);
	
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		НовыйПарсель = Справочники.Parcels.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПарсель, Выборка);
		НовыйПарсель.ExportRequest = Неопределено;
		НовыйПарсель.Код = "" + СокрЛП(Инвойс.Номер) + "/0" + 1;
		НовыйПарсель.DONo = СокрЛП(Инвойс.Номер);
		
		НовыйПарсель.Детали.Загрузить(РезультатСтроки);
		
		НовыйПарсель.Записать();
		
		СтрокаПарсель = Doc.Parcels.Добавить();
		СтрокаПарсель.Parcel = НовыйПарсель.Ссылка;
		
	иначе
		
		Message = New UserMessage();
		
		Если РГСофтСерверПовтИспСеанс.ПолучитьПараметрСеансаShowNamesAndDescriptionsRUS() Тогда 
			Message.Text = "Совпадений по артикулу не найдено, нужно создать грузовое место вручную.";
		иначе
			Message.Text = "Failed to find current part number, you need to create parcel manually.";
		КонецЕсли;
		
		Message.Message();
		
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev - заполнение по ExportRequest

&НаКлиенте
Процедура ApprovedBorgs(Команда)
	
	Если Элементы.ГруппаApprovedBorgs.Видимость = Истина Тогда
		Элементы.ГруппаApprovedBorgs.Видимость = Ложь;
	Иначе
		Элементы.ГруппаApprovedBorgs.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Approve(Команда)
	
	ПоказатьВопрос(
	Новый ОписаниеОповещения("ApproveDoc", 
	ЭтотОбъект, Объект.Ссылка),
	"Are you sure you want to approve?", 
	РежимДиалогаВопрос.ДаНет,
	60,
	КодВозвратаДиалога.Нет,
	,
	КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ApproveDoc(Результат, ТекDoc) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Docs = Новый Массив;
	Docs.Добавить(ТекDoc);
	
	УстановитьApprove(Docs);
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьApprove(Docs)
	
	Документы.КонсолидированныйПакетЗаявокНаПеревозку.УстановитьApprove(Docs);
	
КонецПроцедуры

&НаКлиенте
Процедура ApprovalBorgsПриИзменении(Элемент)
	
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.User = ТекущийПользователь;
	ТекущиеДанные.ApproveDate = ТекущаяДата();
	
	ПроверитьBORGsApprove();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьBORGsApprove();
	
	ВсеApprove = Истина;
	Для Каждого Строка Из Объект.ApprovalBorgs Цикл
		Если Строка.Approve Тогда
			Продолжить
		Иначе
			ВсеApprove = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Объект.GL_FromSegment = ВсеApprove;
	
КонецПроцедуры

//{ RGS ASeryakov 28/11/2017 18:00:00 PM -S-I-0004008
&НаКлиенте
Процедура FullTNVEDOfBroker(Команда)
		
	ПроцедураFullTNVEDOfBroker(Новый ОписаниеОповещения("ВыбратьTNVEDOfBrokerЗавершение", ЭтотОбъект));
		
КонецПроцедуры

// TNVEDBroker заполнение
&НаКлиенте
Процедура ПроцедураFullTNVEDOfBroker(Знач Оповещение)
	
	Если ЗначениеЗаполнено(Элементы.Goods.ТекущиеДанные.TNVEDBroker) Тогда
		
		ТекстВопроса = НСтр("ru = 'Текущее значение ""ТНВЭД брокера"", не пустое! Перезаполнить значение? '; en = 'The current value of the ""TNVED of broker"" is not empty! To refill the value?'"); 
		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтотОбъект, Оповещение), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуВыбораTNVEDCodes();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораTNVEDCodes()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Invoice", Элементы.Goods.ТекущиеДанные.Invoice);
	ДополнительныеПараметры.Вставить("Item", Элементы.Goods.ТекущиеДанные.Item);
	
	ОткрытьФорму("Справочник.TNVEDCodes.ФормаВыбора", , ЭтаФорма, , ,
	, Новый ОписаниеОповещения("ВыбратьTNVEDOfBrokerЗавершение", ЭтотОбъект, ДополнительныеПараметры), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // ОткрытьФормуВыбора()

&НаКлиенте
Процедура ПоказатьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФормуВыбораTNVEDCodes();
		
	КонецЕсли;
	           
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьTNVEDOfBrokerЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если Объект.TNVEDCodesOfBroker.Количество() = 0  Тогда
			
			ДобавитьСтрокуTNVEDCodesOfBroker(ДополнительныеПараметры, Результат);
			
		Иначе
			
			СтруктураОтбора = Новый Структура();
			ЗаполнитьСтруктуруОтбораTNVEDCodesOfBroker(СтруктураОтбора, ДополнительныеПараметры.Invoice , ДополнительныеПараметры.Item);
			
			СтрокаПоиска = Объект.TNVEDCodesOfBroker.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокаПоиска.Количество() = 1 Тогда
				
				Элементы.Goods.ТекущиеДанные.TNVEDBroker = Результат;
				Объект.TNVEDCodesOfBroker[СтрокаПоиска[0].НомерСтроки-1].TNVEDBroker = Результат;
				
			ИначеЕсли СтрокаПоиска.Количество() = 0 Тогда
				
				ДобавитьСтрокуTNVEDCodesOfBroker(ДополнительныеПараметры, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуTNVEDCodesOfBroker(ДополнительныеПараметры, Результат)
	
	ДополнительныеПараметры.Вставить("TNVEDBroker", Результат);
	Элементы.Goods.ТекущиеДанные.TNVEDBroker = Результат;
	
	НоваяСтрока = Объект.TNVEDCodesOfBroker.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры); 
    Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьСтруктуруОтбораTNVEDCodesOfBroker(СтруктураОтбора, Invoice, Item)
	
	СтруктураОтбора.Вставить("Invoice", Invoice);
	СтруктураОтбора.Вставить("Item", Item);
	
КонецПроцедуры

// TNVEDBroker удаление
&НаКлиенте
Процедура ClearTNVEDBroker(Команда)
	
	ВыделенныеСтроки = Элементы.Goods.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Предупреждение(
		"Please, select at least one item!",
		30);
		Возврат;
	КонецЕсли;
	
	УдалитьВыделенныеTNVEDBroker(ВыделенныеСтроки);	
	
	МассивВыделенныхItems = ПолучитьМассивВыделенныхItems();
	ОбновитьКолонкуВGoods(МассивВыделенныхItems, "TNVEDBroker", Неопределено);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьВыделенныеTNVEDBroker(ВыделенныеСтроки)
	
	ТаблицаTNVEDBroker = Новый ТаблицаЗначений;
	ТаблицаTNVEDBroker.Колонки.Добавить("Invoice", Новый ОписаниеТипов("ДокументСсылка.Инвойс"));
	ТаблицаTNVEDBroker.Колонки.Добавить("Item", Новый ОписаниеТипов("СправочникСсылка.СтрокиИнвойса"));
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Goods.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			
			НоваяСтрока = ТаблицаTNVEDBroker.Добавить();
			НоваяСтрока.Invoice = СтрокаТаблицы.Invoice;
			НоваяСтрока.Item    = СтрокаТаблицы.Item;
			
		КонецЕсли;
	КонецЦикла;	
	
	ClearTNVEDOfBroker(ТаблицаTNVEDBroker);

КонецПроцедуры

&НаСервере
Процедура ClearTNVEDOfBroker(Таблица)
	
	ИзмененыДанные = Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		
		СтруктураОтбора = Новый Структура();
		ЗаполнитьСтруктуруОтбораTNVEDCodesOfBroker(СтруктураОтбора, Строка.Invoice , Строка.Item);
			
		СтрокаПоиска = Объект.TNVEDCodesOfBroker.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокаПоиска.Количество() = 1 Тогда
				
			Объект.TNVEDCodesOfBroker.Удалить(СтрокаПоиска[0].НомерСтроки-1);
			ИзмененыДанные = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ИзмененыДанные Тогда		
	    Модифицированность = Истина;			
	КонецЕсли;
	
КонецПроцедуры // ClearTNVEDOfBroker()

// { RGS LKhristyuk 4/24/2018 12:10:54 PM - вопрос S-I-0005089
&НаСервере
Функция ПолучитьСтруктуруУведомления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	rgsCCANotification.EMail,
	|	rgsCCANotification.Subject,
	|	rgsCCANotification.Body
	|ИЗ
	|	РегистрСведений.rgsCCANotification КАК rgsCCANotification
	|ГДЕ
	|	rgsCCANotification.CCA = &CCA
	|	И rgsCCANotification.MOT = &MOT
	|	И rgsCCANotification.Type = &Type";
	
	Запрос.УстановитьПараметр("CCA", Объект.CCA);
	Запрос.УстановитьПараметр("MOT", Объект.MOT);
	// { RGS AArsentev 25.06.2018 S-I-0005470
	Запрос.УстановитьПараметр("Type", Перечисления.NotificationType.DOC);
	// } RGS AArsentev 25.06.2018 S-I-0005470
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СтруктураВозврата = Новый Структура;
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.ЗагрузитьЗначения(СтрРазделить(ВыборкаДетальныеЗаписи.EMail,";"));
		СтруктураВозврата.Вставить("Recipients", 	СписокПолучателей);
		// { RGS LKhristyuk 5/29/2018 5:08:20 PM
		СтруктураВозврата.Вставить("ReplyTo", 		СокрЛП(ВыборкаДетальныеЗаписи.EMail));
		Если ЗначениеЗаполнено(Объект.Coordinator) Тогда 
			СтруктураВозврата.Вставить("Copy", 	СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Coordinator, "EMail")));
		КонецЕсли;
		// } RGS LKhristyuk 5/29/2018 5:08:20 PM 
		
		СтруктураВозврата.Вставить("Subject", 		СокрЛП(ВыборкаДетальныеЗаписи.Subject) +  ", DOC - " + СокрЛП(Объект.Номер));
		СтруктураВозврата.Вставить("Body", 			ВыборкаДетальныеЗаписи.Body);
		СтруктураВозврата.Вставить("CCANotification", 			Истина);
		СтруктураВозврата.Вставить("DOC", 			Объект.Ссылка);
		
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции // } RGS LKhristyuk 4/24/2018 12:11:01 PM - вопрос S-I-0005089

// { RGS LKhristyuk 5/29/2018 4:03:43 PM - вопрос S-I-0005089
&НаКлиенте
Процедура SendCCANotification(Команда)
	
	//Если НЕ ЗначениеЗаполнено(Объект.Requested) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураПараметров = ПолучитьСтруктуруУведомления();
		Если СтруктураПараметров <> Неопределено Тогда
			СтруктураПараметров.Вставить("CCANotification", Истина);
			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения", СтруктураПараметров, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // } RGS LKhristyuk 5/29/2018 4:03:45 PM - вопрос S-I-0005089 

// { RGS LKhristyuk 5/31/2018 5:38:35 PM - вопрос S-I-0005089
&НаСервере
Процедура СформироватьПочтовоеСообщение(ВыбранноеЗначение)
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Ссылка,
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Наименование,
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы КАК КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнвойсПрисоединенныеФайлы.Ссылка,
	|	ИнвойсПрисоединенныеФайлы.Наименование,
	|	ИнвойсПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.ИнвойсПрисоединенныеФайлы КАК ИнвойсПрисоединенныеФайлы
	|ГДЕ
	|	ИнвойсПрисоединенныеФайлы.ВладелецФайла В(&МассивИнвойсов)
	|	И НЕ ИнвойсПрисоединенныеФайлы.ПометкаУдаления";
	
	
	мИнвойсы = Новый Массив;
	Для каждого СтрокаИнвойса Из Объект.Инвойсы Цикл
		мИнвойсы.Добавить(СтрокаИнвойса.Инвойс);
	КонецЦикла; 
	Запрос.УстановитьПараметр("МассивИнвойсов", мИнвойсы);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		МассивДляОчистки = Новый Массив;
		//МассивКартинок = Новый Массив;
		//Путь = ПолучитьИмяВременногоФайла(".zip");
		//Архив = Новый ЗаписьZipФайла(Путь, "", "", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный, МетодШифрованияZIP.Zip20);
		
		ТаблицаВложений = Новый ТаблицаЗначений;
		ТаблицаВложений.Колонки.Добавить("Имя");
		ТаблицаВложений.Колонки.Добавить("ДвоичноеПредставление");
		ТаблицаВложений.Колонки.Добавить("Расширение");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяФайла = КаталогВременныхФайлов + ВыборкаДетальныеЗаписи.Наименование + "." + ВыборкаДетальныеЗаписи.Расширение;
			Попытка
				ПрисоединенныеФайлыСлужебный.ВыгрузитьФайл(ВыборкаДетальныеЗаписи.Ссылка, ИмяФайла);
			Исключение
			КонецПопытки;
			//Архив.Добавить(ИмяФайла);
			Вложения = ТаблицаВложений.Добавить();
			Вложения.Имя = ВыборкаДетальныеЗаписи.Наименование;
			Вложения.Расширение = ВыборкаДетальныеЗаписи.Расширение;
			Вложения.ДвоичноеПредставление = Новый ДвоичныеДанные(ИмяФайла);
			
			МассивДляОчистки.Добавить(ИмяФайла);
		КонецЦикла;
		
		//Попытка
		//	Архив.Записать();
		//Исключение
		//КонецПопытки;
		
		//Двоичное = Новый ДвоичныеДанные(Путь);
		Вложение = Новый ХранилищеЗначения(ТаблицаВложений);
		//МассивДляОчистки.Добавить(Путь);
		
		Для Каждого Файл ИЗ МассивДляОчистки Цикл
			Попытка
				УдалитьФайлы(Файл);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		Вложение = Неопределено;
	КонецЕсли; 
	
	// { RGS ASeryakov, 25.09.2018 S-I-0005867
	//Адрес = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(ВыбранноеЗначение.Recipients, ";");
	
	//Дополнительная проверка если пользователь ввел два и более адреса через пробел в одну строку списка значений.
	
	Pattern = "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])";
	
	Если ТипЗнч(ВыбранноеЗначение.Recipients) = Тип("Массив") Тогда
	
		Recipients = СтрСоединить(ВыбранноеЗначение.Recipients,";");
	Иначе
		Recipients = ВыбранноеЗначение.Recipients;
	КонецЕсли;
	
	
	СписокАдресов = РГСофт.ПолучитьВхожденияПоМаскеRegExp(Recipients, Pattern);
	МассивАдресов = Новый Массив;
	
	Для каждого Строка Из СписокАдресов Цикл
	
		МассивАдресов.Добавить(Строка.Value);
	
	КонецЦикла;
	
	Адрес = СтрСоединить(МассивАдресов,";");
	
	// } RGS ASeryakov, 25.09.2018 S-I-0005867
	
	
	Адрес = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(ВыбранноеЗначение.Recipients, ";");
	Если НЕ ЗначениеЗаполнено(Вложение) Тогда
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, ВыбранноеЗначение.Subject, ВыбранноеЗначение.Body, ,ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),ВыбранноеЗначение.Copy);
	Иначе
		РГСофт.ЗарегистрироватьПочтовоеСообщение(Адрес, ВыбранноеЗначение.Subject, ВыбранноеЗначение.Body, Вложение, ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),ВыбранноеЗначение.Copy);
	КонецЕсли; 
	
	CCANotification = Ложь;
	Если ВыбранноеЗначение.Свойство("CCANotification",CCANotification) <> Неопределено Тогда	
		Если ЗначениеЗаполнено(CCANotification) И CCANotification Тогда
			Объект.Requested = ТекущаяДата();
			Записать();
		КонецЕсли; 
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // } RGS LKhristyuk 5/31/2018 5:38:36 PM - вопрос S-I-0005089

// { RGS AArsentev 05.06.2018 S-I-0005263
&НаСервере
Процедура ЗаполнитьКоличествоЛинийПринеобходимости()
	
	Если Объект.Инвойсы.Количество() = 0 Тогда
		Возврат
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СтрокиИнвойса.Ссылка) КАК NumberOfLines
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	СтрокиИнвойса.Инвойс В (&СписокИнвойсов)";
		Запрос.УстановитьПараметр("СписокИнвойсов", Объект.Инвойсы.Выгрузить().ВыгрузитьКолонку("Инвойс"));
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		Объект.NumberOfLines = Результат.NumberOfLines;
	КонецЕсли;
	
КонецПроцедуры // } RGS AArsentev 05.06.2018 S-I-0005263

&НаСервере
Функция ПолучитьПолнуюСсылкуНаОбъект(ОписаниеСсылки)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
	НавигационнаяСсылка = СтрЗаменить(НавигационнаяСсылка, """", "'");
	
	ПолнаяСсылка = РГСофтСерверПовтИспСеанс.ПолучитьАдресБазы() + НавигационнаяСсылка;
	
	HTMLСсылка = "<a href=""" + ПолнаяСсылка + """>" + ОписаниеСсылки + "</a>";
	Текст = "<br>
	|" + HTMLСсылка + "<br>";
	
	Возврат Текст;
	
КонецФункции

// { RGS AArsentev 24.07.2018 S-I-0005680
&НаСервере
Процедура ПроверитьGL_FromSegment()
	
	ЕстьМатериалы = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЕстьМатериалы(Объект);
	
	Если ЕстьМатериалы Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GL_From_Segment, ЛОЖЬ) КАК GL
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
		|ГДЕ
		|	СтрокиИнвойса.Инвойс В(&Инвойсы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.GL_From_Segment, ЛОЖЬ)";
		Запрос.УстановитьПараметр("Инвойсы", Объект.Инвойсы.Выгрузить().ВыгрузитьКолонку("Инвойс"));
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			mGL_FromSegment = Ложь;
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.GL Тогда
					mGL_FromSegment = Ложь;
					Прервать;
				КонецЕсли;
				mGL_FromSegment = Истина;
			КонецЦикла;
		КонецЕсли;
		Если Объект.GL_FromSegment<>mGL_FromSegment Тогда
			Объект.GL_FromSegment = mGL_FromSegment;
		КонецЕсли;
		
		// { RGS EParshina 28.08.2018 15:21:50 S-I-0005913
		Для Каждого СтрокаApprovalBorgs из Объект.ApprovalBorgs Цикл
			Если СтрокаApprovalBorgs.Approve<>mGL_FromSegment Тогда
				СтрокаApprovalBorgs.Approve = mGL_FromSegment;
			КонецЕсли;
		КонецЦикла;
		// } RGS RGS EParshina 28.08.2018 15:21:53 S-I-0005913

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PostClose(Команда)
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение"));
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	
	//Если Записать(ПараметрыЗаписи) Тогда
	//	Если НеобходимаCCAНотификация Тогда
	//		СтруктураПараметров = ПолучитьСтруктуруУведомления();
	//		Если СтруктураПараметров <> Неопределено Тогда
	//			СтруктураПараметров.Вставить("ЗакрытьФормуВладельца", Истина);
	//			ОткрытьФорму("Документ.КонсолидированныйПакетЗаявокНаПеревозку.Форма.ФормаОтправкиПочтовогоСообщения", СтруктураПараметров, ЭтаФорма);
	//		КонецЕсли;
	//	Иначе
	//		Закрыть();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RequestedPOAПриИзменении(Элемент)
	
	// { RGS DKazanskiy 24.07.2018 11:53:20 - 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьВерсию(Объект.MOT, Объект.CCA, Объект.Requested, Объект.RequestedPOA);
	КонецЕсли;
	// } RGS DKazanskiy 24.07.2018 11:53:22 - 
	
КонецПроцедуры

// { RGS DKazanskiy 10.08.2018 13:52:07 - S-I-0005767
// Если редактирование текста, вместо выбора мышкой, то не срабатывает сброс дат редактируемых
// брокером
&НаКлиенте
Процедура CCAИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если ТекущийCCA <> Объект.CCA Тогда
		ТекущийCCA = Объект.CCA;
	КонецЕсли;
КонецПроцедуры
// } RGS DKazanskiy 09.08.2018 13:52:50 - S-I-0005767
	
