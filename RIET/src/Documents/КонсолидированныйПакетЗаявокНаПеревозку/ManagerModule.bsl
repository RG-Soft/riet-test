
Процедура ОбновитьDOCCurrentStatus(DOCОбъект) Экспорт
	
	// Отсортируем статусы по дате
	DOCОбъект.ManualStatuses.Сортировать("Date");
	Для Каждого СтрокаManualStatuses Из DOCОбъект.ManualStatuses Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаManualStatuses.User) Тогда
			СтрокаManualStatuses.User = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
	КонецЦикла; 
	
	DOCStatuses = Перечисления.DOCStatuses;
	НовыйCurrentStatus = DOCStatuses.Open;
	НоваяCurrentStatusDate = DOCОбъект.Дата;
	                           		
	// { RGS AGorlenko 09.12.2015 17:28:17 - S-I-0001422
	//Если ЗначениеЗаполнено(DOCОбъект.Booked) Тогда
	КоличествоСтрокManualStatuses = DOCОбъект.ManualStatuses.Количество();
	Если КоличествоСтрокManualStatuses > 0 Тогда
		ПоследняяСтрокаManualStatuses = DOCОбъект.ManualStatuses[КоличествоСтрокManualStatuses - 1];
	Иначе
		ПоследняяСтрокаManualStatuses = Новый Структура("Status");
	КонецЕсли;
	
	// { RGS DKazanskiy 12.12.2018 14:18:04 - S-I-0006451
	Если ЕстьPoLineRestock(DOCОбъект.Ссылка) Тогда
		НовыйCurrentStatus = DOCStatuses.Restock;
		// } RGS DKazanskiy 12.12.2018 14:18:07 - S-I-0006451			
	// { RGS AArsentev 21.08.2017 S-I-0003524
	ИначеЕсли DOCОбъект.ReRoute Тогда
		
		НовыйCurrentStatus = DOCStatuses.ReRoute;
		
	// } RGS AArsentev 21.08.2017 S-I-0003524
	ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.RedLight Тогда
		
		НовыйCurrentStatus = DOCStatuses.RedLight;
		НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
		
	ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingHUB Тогда
		
		НовыйCurrentStatus = DOCStatuses.PendingHUB;
		НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
				
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Booked) Тогда
	// } RGS AGorlenko 09.12.2015 17:28:19 - S-I-0001422
		
		НовыйCurrentStatus = DOCStatuses.Closed;
		НоваяCurrentStatusDate = DOCОбъект.Booked;
		
	ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.Disposal Тогда
		
		НовыйCurrentStatus = DOCStatuses.Disposal;
		НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Granted) Тогда
		
		НовыйCurrentStatus = DOCStatuses.PendingShipment;
		НоваяCurrentStatusDate = DOCОбъект.Granted;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Received) Тогда
				
		Если DOCОбъект.PendingEUC Тогда
			НовыйCurrentStatus = DOCStatuses.PendingEUC;
		// { RGS DKazanskiy 14.11.2018 13:34:08 - S-I-0006242
		// Поднял безусловное изменение статуса выше. Иначе приводило к тому, что ставился статус PendingSLB в следующем ниже условии и до PendingMOC не доходило. 
		// } RGS AArsentev 10.07.2017 S-I-0003293
		ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingMOC Тогда
			НовыйCurrentStatus = DOCStatuses.PendingMOC;
			// { RGS AArsentev 11.07.2018 S-I-0004976
		// } RGS DKazanskiy 14.11.2018 13:34:11 - S-I-0006242
			// { RGS AArsentev 10.07.2017 S-I-0003293
		ИначеЕсли НЕ DOCОбъект.PendingEUC И НЕ DOCОбъект.GL_FromSegment И ЕстьМатериалы(DOCОбъект) Тогда
			// { RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
			//НовыйCurrentStatus = DOCStatuses.PendingApprovalFromSegment;
			НовыйCurrentStatus = DOCStatuses.PendingSLB;
			// } RGS ASeryakov 17.10.2018 18:00:00 - S-I-0006176
			//Иначе
		ИначеЕсли ПроверимItemsНаEUC_Received(DOCОбъект) Тогда
			Материалы = ЕстьМатериалы(DOCОбъект);
			Если Материалы И DOCОбъект.GL_FromSegment Тогда
				НовыйCurrentStatus = DOCStatuses.PendingSLB;
			ИначеЕсли НЕ Материалы Тогда
				// } RGS AArsentev 11.07.2018 S-I-0004976
				НовыйCurrentStatus = DOCStatuses.PendingSLB;
			КонецЕсли;
		КонецЕсли;
		
		НоваяCurrentStatusDate = DOCОбъект.Received;
		
	ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingMOC Тогда
		
		НовыйCurrentStatus = DOCStatuses.PendingMOC;
		НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
		
	ИначеЕсли ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingCertification Тогда
		
		НовыйCurrentStatus = DOCStatuses.PendingCertification;
		НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Requested) Тогда
		
		// { RGS AGorlenko 09.12.2015 17:39:33 - S-I-0001422 - перенесено выше
		//КоличествоСтрокManualStatuses = DOCОбъект.ManualStatuses.Количество();
		// } RGS AGorlenko 09.12.2015 17:39:42 - S-I-0001422 - перенесено выше
		Если КоличествоСтрокManualStatuses Тогда
			
			// { RGS AGorlenko 09.12.2015 17:40:17 - S-I-0001422 - перенесено выше
			//ПоследняяСтрокаManualStatuses = DOCОбъект.ManualStatuses[КоличествоСтрокManualStatuses-1];
			// } RGS AGorlenko 09.12.2015 17:40:20 - S-I-0001422 - перенесено выше
			НовыйCurrentStatus = ПоследняяСтрокаManualStatuses.Status;
			НоваяCurrentStatusDate = ПоследняяСтрокаManualStatuses.Date;
			
		Иначе
			
			НовыйCurrentStatus = DOCStatuses.PendingCCA;
			НоваяCurrentStatusDate = DOCОбъект.Requested;
			
		КонецЕсли;
		
	КонецЕсли;
	
	DOCОбъект.CurrentStatus = НовыйCurrentStatus;
	DOCОбъект.CurrentStatusDate = НоваяCurrentStatusDate;
	
КонецПроцедуры

Функция НеобходимоПроверитьEUCSanctions(DOCDate, Booked, ProcessLevel, HouseKeeping) Экспорт
	
	Если ЗначениеЗаполнено(Booked) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если HouseKeeping Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	  	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOCDate", DOCDate);
	Запрос.УстановитьПараметр("ProcessLevel", ProcessLevel);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	EUCCheck.EndOfEUCCheck
	               |ИЗ
	               |	РегистрСведений.EUCCheck КАК EUCCheck
	               |ГДЕ
	               |	EUCCheck.ProcessLevel = &ProcessLevel
	               |	И (EUCCheck.EndOfEUCCheck > &DOCDate
	               |			ИЛИ EUCCheck.EndOfEUCCheck = ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();	
		
КонецФункции

///////////////////////////////////////////////////////////////////////
// Функции для отчета LEG4PendingGreenLightDateInThePast

Функция ПолучитьDOCCurrentStatusНаДатуОтчета(DOC, ReportsDate) Экспорт
	
	DOCОбъект = DOC.ПолучитьОбъект();
	
	// Отсортируем статусы по дате
	DOCОбъект.ManualStatuses.Сортировать("Date Убыв");
	
	DOCStatuses = Перечисления.DOCStatuses;
	
	// { RGS AGorlenko 09.12.2015 17:28:17 - S-I-0001422
	КоличествоСтрокManualStatuses = DOCОбъект.ManualStatuses.Количество();
	
	Для ТекИндекс = 0 По КоличествоСтрокManualStatuses - 1 Цикл 
		
		ТекСтрокаManualStatuses = DOCОбъект.ManualStatuses[ТекИндекс];
		Если НачалоДня(ТекСтрокаManualStatuses.Date) > ReportsDate Тогда 
			
			Если ТекИндекс = 0 Тогда
				Прервать;
			ИначеЕсли DOCОбъект.ManualStatuses[ТекИндекс - 1].Status = DOCStatuses.RedLight Тогда
				Возврат DOCStatuses.RedLight;
			ИначеЕсли DOCОбъект.ManualStatuses[ТекИндекс - 1].Status = DOCStatuses.PendingHUB Тогда
				Возврат DOCStatuses.PendingHUB;
			ИначеЕсли DOCОбъект.ManualStatuses[ТекИндекс - 1].Status = DOCStatuses.Disposal И DOCОбъект.Booked > ReportsDate Тогда
				Возврат DOCStatuses.Disposal;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// } RGS AGorlenko 09.12.2015 17:28:19 - S-I-0001422
	
	Если ЗначениеЗаполнено(DOCОбъект.Booked) И DOCОбъект.Booked <= ReportsDate Тогда
		
		Возврат DOCStatuses.Closed;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Granted) И DOCОбъект.Granted <= ReportsDate Тогда
		
		Возврат DOCStatuses.PendingShipment;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Received) И DOCОбъект.Received <= ReportsDate Тогда
		
		Если СтатусPendingEUCНаДатуОтчета(DOCОбъект, ReportsDate) Тогда
			Возврат DOCStatuses.PendingEUC;
		Иначе
			Возврат DOCStatuses.PendingSLB;
		КонецЕсли;
		
		Возврат DOCОбъект.Received;
		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Requested) И DOCОбъект.Requested <= ReportsDate Тогда
		
		Для Каждого СтрокаManualStatuses из DOCОбъект.ManualStatuses Цикл 
			
			Если НачалоДня(СтрокаManualStatuses.Date) <= ReportsDate Тогда 
				
				Возврат СтрокаManualStatuses.Status;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат DOCStatuses.PendingCCA;
		
	КонецЕсли;
	
	Возврат DOCStatuses.Open;
	
КонецФункции

Функция ПолучитьDOCCurrentStageНаДатуОтчета(DOC, ReportsDate) Экспорт
	
	DOCОбъект = DOC.ПолучитьОбъект();
	
	ПеречислениеDOCStages = Перечисления.DOCStages;
	Если ЗначениеЗаполнено(DOCОбъект.Booked) И DOCОбъект.Booked <= ReportsDate Тогда
		Возврат ПеречислениеDOCStages.Booked;
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Granted) И DOCОбъект.Granted <= ReportsDate Тогда
		Возврат ПеречислениеDOCStages.Granted;			
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Received) И DOCОбъект.Received <= ReportsDate Тогда	
		Возврат ПеречислениеDOCStages.Received;		
	ИначеЕсли ЗначениеЗаполнено(DOCОбъект.Requested) И DOCОбъект.Requested <= ReportsDate Тогда
		Возврат ПеречислениеDOCStages.Requested;
	Иначе
		Возврат ПеречислениеDOCStages.Opened;
	КонецЕсли;	
	
КонецФункции

Функция СтатусPendingEUCНаДатуОтчета(DOCОбъект, ReportsDate)

	Если DOCОбъект.HouseKeeping Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	  	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOC", DOCОбъект.Ссылка);
	Запрос.УстановитьПараметр("DOCDate", DOCОбъект.Дата);
	Запрос.УстановитьПараметр("ProcessLevel", DOCОбъект.ProcessLevel);
	Запрос.УстановитьПараметр("ReportsDate", ReportsDate);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	EUCCheck.EndOfEUCCheck
	               |ИЗ
	               |	РегистрСведений.EUCCheck КАК EUCCheck
	               |ГДЕ
	               |	EUCCheck.ProcessLevel = &ProcessLevel
	               |	И (EUCCheck.EndOfEUCCheck > &DOCDate
	               |			ИЛИ EUCCheck.EndOfEUCCheck = ДАТАВРЕМЯ(1, 1, 1))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтрокиИнвойса.EUCRequested
	               |ИЗ
	               |	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
	               |ГДЕ
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &DOC
	               |	И НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И (СтрокиИнвойса.EUCRequested = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СтрокиИнвойса.EUCRequested <> ДАТАВРЕМЯ(1, 1, 1)
	               |				И (СтрокиИнвойса.EUCReceived > &ReportsDate
	               |					ИЛИ СтрокиИнвойса.EUCReceived = ДАТАВРЕМЯ(1, 1, 1)))";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда 
		
		PendingEUC = Ложь;
		
		ВыборкаДатEUC = Результат[1].Выбрать();
		Если ВыборкаДатEUC.Следующий() Тогда 
			PendingEUC = Истина;
		КонецЕсли;
		
		Возврат PendingEUC;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции 

Функция rgsПолучитьКоличествоВерсий(DOC) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	DOCVersionsСрезПоследних.Version КАК Version
	|ИЗ
	|	РегистрСведений.DOCVersions.СрезПоследних(, DOC = &DOC) КАК DOCVersionsСрезПоследних";
	Запрос.УстановитьПараметр("DOC", DOC);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Version;
	Иначе 
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Функция rgsПолучитьАктуальнуюВерсию(DOC) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	DOCVersions.Version
		|ИЗ
		|	РегистрСведений.DOCVersions КАК DOCVersions
		|ГДЕ
		|	DOCVersions.DOC = &DOC
		|
		|УПОРЯДОЧИТЬ ПО
		|	DOCVersions.Период УБЫВ";
	
	Запрос.УстановитьПараметр("DOC", DOC);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Version;
	
КонецФункции

Функция rgsПолучитьМаксимальнуюВерсию(DOC) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(МАКСИМУМ(DOCVersions.Version), 0) КАК Version
		|ИЗ
		|	РегистрСведений.DOCVersions КАК DOCVersions
		|ГДЕ
		|	DOCVersions.DOC = &DOC";
	
	Запрос.УстановитьПараметр("DOC", DOC);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Version;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
// Tsch Descr

Процедура ЗарегистрироватьTDStatus(DOCссылка)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	DOCобъект = DOCссылка.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(DOCобъект.Received) Тогда
		Возврат;                    
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOC", DOCссылка); 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	TDStatusesСрезПоследних.PartNo
	|ИЗ
	|	РегистрСведений.TDStatuses.СрезПоследних(, DOC = &DOC) КАК TDStatusesСрезПоследних
	|ГДЕ
	|	TDStatusesСрезПоследних.Status = ЗНАЧЕНИЕ(Перечисление.TDStatuses.Requested)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		TDStatus = Перечисления.DOCStatuses.PendingTD;
	иначе
		TDStatus = Перечисления.DOCStatuses.PendingCCA;
	КонецЕсли;
	
	Если DOCобъект.CurrentStatus <> TDStatus Тогда	
		
		DOCобъект.CurrentStatus = TDStatus;
		DOCобъект.CurrentStatusDate = ТекущаяДатаСеанса();
		
		НоваяСтрокаManualStatuses = DOCобъект.ManualStatuses.Добавить();
		НоваяСтрокаManualStatuses.Date = ТекущаяДатаСеанса(); 
		НоваяСтрокаManualStatuses.User = ПараметрыСеанса.ТекущийПользователь; 
		НоваяСтрокаManualStatuses.Status = TDStatus; 
		
		DOCобъект.ДополнительныеСвойства.Вставить("РегистрироватьДляОбменаLeg6", Неопределено); 
		DOCобъект.ОбменДанными.Загрузка = Истина;
		DOCобъект.Записать();
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// { RGS AArsentev 21.08.2017 S-I-0003524
Процедура УстановитьApprove(СписокDoc) Экспорт
	
	ТекущийЮзер = ПараметрыСеанса.ТекущийПользователь;
	ДоступныйДляРаботыМассивБоргов = ТекущийЮзер.Borgs.Выгрузить().ВыгрузитьКолонку("Borg");
	
	НачатьТранзакцию();
	Для Каждого Элемент Из СписокDoc Цикл
			
		Если РольДоступна("SegmentApprover") Тогда
			
			Док = Элемент.ПолучитьОбъект();
			ЗаполнитьБоргиНаApprove(Док);
			Если НЕ Элемент.GL_FromSegment Тогда
				Док.GL_FromSegment = Истина;
			КонецЕсли;
			
			СписокБорговДляApprove = ПолучитьСписокБорговДляApproveИзDOC(Элемент, ДоступныйДляРаботыМассивБоргов);
			
			Если СписокБорговДляApprove <> Неопределено Тогда
				
				Для Каждого Борг Из СписокБорговДляApprove Цикл
					
					СтрокаБорга = Док.ApprovalBorgs.Найти(Борг, "Borg");
					СтрокаБорга.Approve = Истина;
					СтрокаБорга.User = ТекущийЮзер;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Док.Модифицированность() Тогда
				Попытка
					Док.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed approve Doc - "+Элемент+"!");
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для утверждения необходимо право - 'Segment approver'");
			
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // } RGS AArsentev 21.08.2017 S-I-0003524


// { RGS AArsentev 21.08.2017 S-I-0003524
Функция ПолучитьСписокБорговДляApproveИзDOC(Doc, МассивБоргов);
	
	ЗапросБорги = Новый Запрос;
	ЗапросБорги.Текст = "ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуApprovalBorgs.Borg
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.ApprovalBorgs КАК КонсолидированныйПакетЗаявокНаПеревозкуApprovalBorgs
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуApprovalBorgs.Ссылка = &Ссылка
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуApprovalBorgs.Approve";
	ЗапросБорги.УстановитьПараметр("Ссылка", Doc);
	ИспользованныеБорги = ЗапросБорги.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК Борг
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Инвойс В(&Инвойсы)
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В(&Борги)
	|	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В (&ИспользованныеБорги)";
	Запрос.УстановитьПараметр("Инвойсы", Doc.Инвойсы.ВыгрузитьКолонку("Инвойс"));
	Запрос.УстановитьПараметр("Борги", МассивБоргов);
	Запрос.УстановитьПараметр("ИспользованныеБорги", ИспользованныеБорги.ВыгрузитьКолонку("Borg"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ТаблицаДанных = Результат.Выгрузить();
		Возврат ТаблицаДанных.ВыгрузитьКолонку("Борг");
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 21.08.2017 S-I-0003524

// { RGS AArsentev 21.08.2017 S-I-0003524
Процедура ЗаполнитьБоргиНаApprove(DOCОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ КАК Борг
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Инвойс В(&Инвойсы)
	|	И НЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ В (&ИспользованныеБорги)
	|	И НЕ СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Владелец.БОРГ ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Инвойсы", DOCОбъект.Ссылка.Инвойсы.ВыгрузитьКолонку("Инвойс"));
	Запрос.УстановитьПараметр("ИспользованныеБорги", DOCОбъект.Ссылка.ApprovalBorgs.ВыгрузитьКолонку("Borg"));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйБорг = DOCОбъект.ApprovalBorgs.Добавить();
			НовыйБорг.Borg = Выборка.Борг;
			НовыйБорг.Approve = Ложь;
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // } RGS AArsentev 21.08.2017 S-I-0003524


Функция ПроверитьApprove(DOCОбъект) Экспорт
	
	Если DOCОбъект.Дата > Дата("25.07.2018 00:00:00") Тогда
		Возврат "";
	КонецЕсли;
	
	СообщениеApprove = "GL approved for";
	СообщениеNotApprove = "GL not approved from";
	
	NotApprove = Ложь;
	ApproveBorgs = 0;
	Для Каждого Борг Из DOCОбъект.ApprovalBorgs Цикл
		
		Если НЕ Борг.Approve Тогда
			СообщениеNotApprove = СообщениеNotApprove + " " + Борг.Borg;
			NotApprove = Истина;
		Иначе
			СообщениеApprove = СообщениеApprove + " " + Борг.Borg;
			ApproveBorgs  = ApproveBorgs + 1;
		КонецЕсли;
			
	КонецЦикла;
	
		СообщениеApprove = СообщениеApprove + ".";
		СообщениеNotApprove = СообщениеNotApprove + ".";
	
	Если NotApprove Тогда
		Если ApproveBorgs = 0 Тогда
			СообщениеОбОшибке = СообщениеNotApprove;
		Иначе
			СообщениеОбОшибке = СообщениеApprove + " " + СообщениеNotApprove;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "";
	КонецЕсли;
		
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ЕстьМатериалы(DOCОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Классификатор = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказа.E)
	|	И СтрокиИнвойса.Инвойс В(&Инвойсы)";
	Запрос.УстановитьПараметр("Инвойсы", DOCОбъект.Инвойсы.Выгрузить().ВыгрузитьКолонку("Инвойс"));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// { RGS AArsentev 11.07.2018 S-I-0004976
Функция ПроверимItemsНаEUC_Received(DOCОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиИнвойса.Ссылка
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|ГДЕ
	|	СтрокиИнвойса.Инвойс В(&Инвойсы)
	|	И СтрокиИнвойса.EUCReceived = &ПустаяДата";
	Запрос.УстановитьПараметр("Инвойсы", DOCОбъект.Инвойсы.Выгрузить().ВыгрузитьКолонку("Инвойс"));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("01.01.0001 00:00:00"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // } RGS AArsentev 11.07.2018 S-I-0004976

// { RGS DKazanskiy 24.07.2018 11:10:39 - S-I-0005657
Функция ПроверитьВерсию(DOC, MOT, CCA, Requested, Знач POA = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Если ActualPOA = Неопределено Тогда
	//	ActualPOA = ПолучитьActualPOAДляDOC(DOC);
	//КонецЕсли;
	
	ЗапросДатаИзменения = Новый Запрос;
	ЗапросДатаИзменения.Текст = "ВЫБРАТЬ
	|	DOCVersionsСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.DOCVersions.СрезПоследних(
	|			,
	|			DOC = &DOC
	|				И ИзменилсяСостав) КАК DOCVersionsСрезПоследних
	|ГДЕ
	|	DOCVersionsСрезПоследних.ИзменилсяСостав";
	ЗапросДатаИзменения.УстановитьПараметр("DOC", DOC);
	РезДатаИзменения = ЗапросДатаИзменения.Выполнить().Выгрузить();
	Если РезДатаИзменения.Количество()>0 Тогда
		ДатаНачалаСреза = РезДатаИзменения[0].Период; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	DOCVersions.DOC КАК DOC,
	               |	DOCVersions.Version КАК Version,
	               |	DOCVersions.Received,
	               |	DOCVersions.Accepted,
	               |	DOCVersions.Requested
	               |ИЗ
	               |	РегистрСведений.DOCVersions КАК DOCVersions
	               |ГДЕ
	               |	DOCVersions.CCA = &CCA
	               |	И DOCVersions.MOT = &MOT
	               |	И DOCVersions.DOC = &DOC
	               |	И DOCVersions.Requested = &Requested
	               |	И DOCVersions.POA = &POA";
	
	Запрос.УстановитьПараметр("DOC", 		DOC);
	Запрос.УстановитьПараметр("CCA", 		CCA);
	Запрос.УстановитьПараметр("MOT", 		MOT);
	Запрос.УстановитьПараметр("Requested", 	Requested);
	Запрос.УстановитьПараметр("POA", 		POA);
	
	Если РезДатаИзменения.Количество()>0 Тогда
		Запрос.УстановитьПараметр("Дата1", ДатаНачалаСреза);
		Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
		Запрос.Текст = Запрос.Текст + " и DOCVersions.Период МЕЖДУ &Дата1 И &Дата2 УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
	Иначе
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Ответ = Новый Структура("Empty, Received, Accepted, ТекущаяВерсия");
	
	Если Результат.Пустой() Тогда
		Ответ.Empty = Истина;
		Ответ.Received =  '00010101';
		Ответ.Accepted =  '00010101';
		//Объект.Requested =  '00010101';
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ответ.Empty    	= Ложь;
		Ответ.Received 	=  Выборка.Received;
		Ответ.Accepted 	=  Выборка.Accepted;
		//Объект.Requested =  Выборка.Requested;
		Ответ.ТекущаяВерсия = Выборка.Version;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьActualPOAДляDOC(DOC) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоставкаУпаковочныеЛисты.Ссылка.ActualPOA как ActualPOA
	|ИЗ
	|	Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|ГДЕ
	|	ПоставкаУпаковочныеЛисты.УпаковочныйЛист = &DOC
	|	И НЕ ПоставкаУпаковочныеЛисты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("DOC", DOC);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ActualPOA;
	Иначе
		Возврат Справочники.SeaAndAirPorts.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция УстановитьДатыВерсии(DOC, Received, Accepted) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(DOC) или 
		DOC.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокОбъект = DOC.ПолучитьОбъект();
	ДокОбъект.Received = Received;
	ДокОбъект.Accepted = Accepted;
	ДокОбъект.ОбменДанными.Загрузка = Истина;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецФункции
// } RGS DKazanskiy 24.07.2018 11:10:41 - 

// { RGS DKazanskiy 12.12.2018 14:18:04 - S-I-0006451
Функция ЕстьPoLineRestock(DOC)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтрокиИнвойса.СтрокаЗаявкиНаЗакупку КАК PoLine
	               |ИЗ
	               |	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
	               |ГДЕ
	               |	СтрокиИнвойса.Классификатор = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказа.E)
	               |	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &DOC
	               |	И СтрокиИнвойса.СтрокаЗаявкиНаЗакупку.Restock";
	
	Запрос.УстановитьПараметр("DOC", DOC);
	
	Возврат НЕ Запрос.Выполнить().Пустой()
	
КонецФункции

Процедура ОбновитьСтатусПоPOLineRestock(PoLine, Restock) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC,
	               |	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.CurrentStatus как CurrentStatus
	               |ИЗ
	               |	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
	               |			И (СтрокиИнвойса.СтрокаЗаявкиНаЗакупку = &СтрокаЗаявкиНаЗакупку)
	               |			И (СтрокиИнвойса.Классификатор = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказа.E))";
	
	Запрос.УстановитьПараметр("СтрокаЗаявкиНаЗакупку", PoLine);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если Результат.CurrentStatus = Перечисления.DOCStatuses.Restock И Restock Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Результат.CurrentStatus = Перечисления.DOCStatuses.Restock И НЕ Restock Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = Результат.DOC.ПолучитьОбъект();
		Попытка
			ДокОбъект.Записать();
		Исключение
			ф = 2;
			б = ф + 2;
		КонецПопытки;
		
	КонецЦикла;
	
	
	
КонецПроцедуры
// } RGS DKazanskiy 12.12.2018 14:18:07 - S-I-0006451