
Перем мОбработкаВажностиРегламентнымЗаданием Экспорт; // Определяет, кто инициатор записи объекта

// { RGS AGorlenko 20.10.2017 11:44:12 - определение текущей версии дока
Перем ТекущаяВерсияДокумента Экспорт;
// } RGS AGorlenko 20.10.2017 11:44:28 - определение текущей версии дока

////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипЗнчДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипЗнчДанныхЗаполнения = Тип("Структура") Тогда
		
		ДанныеЗаполнения.Свойство("ProcessLevel", ProcessLevel);
		ДанныеЗаполнения.Свойство("Coordinator", Coordinator);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Coordinator) Тогда
		Coordinator = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) И ЗначениеЗаполнено(Coordinator) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Coordinator, "ProcessLevel");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	CustomsСервер.ОчиститьCreationModification(ЭтотОбъект);
	Booked = Неопределено;
	Инвойсы.Очистить();
	Parcels.Очистить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если мОбработкаВажностиРегламентнымЗаданием
		ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AArsentev S-I-0001747 25.07.2016 16:17:00
	ТекущиеИнвойсы = Инвойсы.Выгрузить();
	ИзменилсяСостав = Ложь;
	Если НЕ ЭтоНовый() Тогда
		Найдено = 0;
		МассивСтарыхInvoices = Ссылка.Инвойсы.ВыгрузитьКолонку("Инвойс");
		Для каждого Элемент ИЗ МассивСтарыхInvoices Цикл 
			Отбор = Новый Структура;
			Отбор.Вставить("Инвойс", Элемент);
			Рез = ТекущиеИнвойсы.НайтиСтроки(Отбор);
			Если Рез.Количество() = 1 Тогда
				Найдено = Найдено + 1;
			КонецЕсли;
		 КонецЦикла;
		 Если Найдено <> ТекущиеИнвойсы.Количество() ИЛИ ТекущиеИнвойсы.Количество() <> Инвойсы.Количество()  Тогда
			 ИзменилсяСостав = Истина;
		 КонецЕсли;
	 КонецЕсли;
	rgsВерсионированиеDOC(Отказ, ИзменилсяСостав);
	// } RGS AArsentev S-I-0001747 25.07.2016 16:17:00
	
	ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи);
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьСтарыеРеквизитыШапкиСтарыеInvoicesИСтарыеParcelsВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ПоместитьМассивыИзменяемыхParcelsИInvoicesВДополнительныеСвойства(ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.МассивСтарыхParcels, ДополнительныеСвойства.МассивСтарыхInvoices);
	
	ИзменитьИнвойсыИParcelsПриНеобходимости(Отказ, ДополнительныеСвойства.МассивИзменяемыхParcels, ДополнительныеСвойства.МассивИзменяемыхИнвойсов, ДополнительныеСвойства.Отменить);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными(РежимЗаписи);
	
	ПроверитьВозможностьИзменения(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	          		
	ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьWarehouseFromВParcels(
		Отказ,
		ДополнительныеСвойства.ТаблицаРеквизитовShipment);
	// { RGS EParshina 19.10.2018 21:08:50 - S-I-0006178	
	ПроверитьЗаполнитьWarehouseTo(Отказ);
	// } RGS EParshina 19.10.2018 21:08:50 - S-I-0006178	
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверкиИЗаполнитьTMS_OBs(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ);
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
			
	ЗарегистрироватьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки,
		ДополнительныеСвойства.МассивСтарыхInvoices,
		ДополнительныеСвойства.МассивСтарыхParcels,
		ДополнительныеСвойства.ТаблицаСтарыхManualStatuses);
	
	// { RGS AArsentev S-I-0003524 23.08.2017
	Если Не Отказ И GL_FromSegment Тогда
		Если ЗначениеЗаполнено(Granted) И НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "Granted")) Тогда
			СообщениеОбОшибке = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПроверитьApprove(ЭтотОбъект);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,ЭтотОбъект, "Granted");
				Отказ = Истина
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// } RGS AArsentev S-I-0003524 23.08.2017
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи)
	
	ImportExportСервер.ПодменитьРежимЗаписиОтмененногоДокумента(Отменен, Проведен, РежимЗаписи);
	
	ImportExportСервер.СинхронизироватьОтменуИПометкуУдаленияДокумента(ЭтотОбъект);
	
	Дата = НачалоДня(Дата);
	
	// Здесь может захотеться автоматически заполнить поле Coordinator
	// Но DOC может загружаться из веб-сервиса, а автоматически подставлять в Coordinator пользователя веб-сервиса неправильно
	// Поэтому Coordinator заполняется только в ОбработкеЗаполнения
	
	Если ЗначениеЗаполнено(Requested)
		И (НЕ ЗначениеЗаполнено(FirstRequested) ИЛИ FirstRequested > Requested) Тогда
		FirstRequested = Requested;
	КонецЕсли;
	
	Инвойсы.Свернуть("Инвойс", "");
	ОбщегоНазначения.ОчиститьТаблицуОтСтрокСПустымиРеквизитами(Инвойсы, "Инвойс");
	Инвойсы.Сортировать("Инвойс");
	
	Parcels.Свернуть("Parcel","");
	ОбщегоНазначения.ОчиститьТаблицуОтСтрокСПустымиРеквизитами(Parcels, "Parcel");
	Parcels.Сортировать("Parcel");
	
	ManualStatuses.Сортировать("Date");
	// { RGS AGorlenko 25.05.2018 17:23:00 - проставить версию для строк статусов
	ТекущаяВерсия = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьАктуальнуюВерсию(Ссылка);
	Для каждого СтрокаManualStatuses Из ManualStatuses Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаManualStatuses.Version) Тогда
			СтрокаManualStatuses.Version = ТекущаяВерсия;
		КонецЕсли;
	КонецЦикла;
	// } RGS AGorlenko 25.05.2018 17:23:26 - проставить версию для строк статусов
	
	CustomsСервер.ЗаполнитьCreationModification(ЭтотОбъект);
	       		
КонецПроцедуры

Процедура ВыполнитьПроверкиИЗаполнитьTMS_OBs(Отказ, ВыборкаСтарыхРеквизитовШапки)
	
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если SentToTMS = ВыборкаСтарыхРеквизитовШапки.SentToTMS Тогда 
		Возврат;
	КонецЕсли;
	
	TMS_OB.Очистить();
	
	Если Не SentToTMS Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("DOC", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.КостЦентр КАК AU,
	|	ВЫБОР
	|		КОГДА СтрокиИнвойса.Активити = """"
	|			ТОГДА СтрокиИнвойса.КостЦентр.DefaultActivity
	|		ИНАЧЕ СтрокиИнвойса.Активити
	|	КОНЕЦ КАК Activity
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ПО КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = СтрокиИнвойса.Инвойс
	|ГДЕ
	|	НЕ СтрокиИнвойса.ПометкаУдаления
	|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка = &DOC";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорядковыйTMSOBNumber = ПолучитьПорядковыйTMSOBNumber();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаOB = TMS_OB.Добавить();	
		НоваяСтрокаOB.AU = Выборка.AU;
		НоваяСтрокаOB.Activity = Выборка.Activity;
		НоваяСтрокаOB.OBNo = ПорядковыйTMSOBNumber;
		
		ПорядковыйTMSOBNumber = ПолучитьПорядковыйTMSOBNumber(ПорядковыйTMSOBNumber);
		
	КонецЦикла;  	
	
КонецПроцедуры 
 
Функция ПолучитьПорядковыйTMSOBNumber(TMSOBNumber=Неопределено)
	
	Если TMSOBNumber = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	КонсолидированныйПакетЗаявокНаПеревозкуTMS_OB.OBNo КАК TMSOBNumber
		               |ИЗ
		               |	Документ.КонсолидированныйПакетЗаявокНаПеревозку.TMS_OB КАК КонсолидированныйПакетЗаявокНаПеревозкуTMS_OB
		               |ГДЕ
		               |	КонсолидированныйПакетЗаявокНаПеревозкуTMS_OB.Ссылка.ProcessLevel.Country = &Country
		               |	И ГОД(КонсолидированныйПакетЗаявокНаПеревозкуTMS_OB.Ссылка.Дата) = &ГодDOC
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КонсолидированныйПакетЗаявокНаПеревозкуTMS_OB.OBNo УБЫВ";
		
		Запрос.УстановитьПараметр("ГодDOC", Год(Дата));
		Запрос.УстановитьПараметр("Country", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда                        
			TMSOBNumber = Выборка.TMSOBNumber;
		КонецЕсли;
		
	КонецЕсли;
	
	CountryCode = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country.Код"));
	ГодСтрокой = Формат(Дата, "ДФ=""yy""");  
		
	Если TMSOBNumber = Неопределено Тогда 
			                                  				
		Возврат "OBIM" + CountryCode + ГодСтрокой + "-" + "00001";
		
	иначе
		
		НомерПП = Число(Прав(TMSOBNumber, 5));
		СледНомер = НомерПП + 1; 

		СледНомерСтрокой = СокрЛ(СледНомер);
		Пока СтрДлина(СледНомерСтрокой) < 5 Цикл 
			СледНомерСтрокой = "0" + СледНомерСтрокой;
		КонецЦикла;

		Возврат "OBIM" + CountryCode + ГодСтрокой + "-" + СледНомерСтрокой;
		
	КонецЕсли;
		 	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи)
	
	Если Отменен Тогда
		Возврат;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда			
		ТекстОшибки = "'No.' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	 		ТекстОшибки,
			ЭтотОбъект, "Номер", , Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ТекстОшибки = "'Date' is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Дата", , Отказ);		
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Requested)
		И НЕ ЗначениеЗаполнено(Received)
		И НЕ ЗначениеЗаполнено(Granted)
		И НЕ ЗначениеЗаполнено(Booked) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(POD) Тогда
		ТекстОшибки = """POD (HUB)"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    		ТекстОшибки,
			ЭтотОбъект, "POD", , Отказ);	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(RequestedPOA) Тогда
		ТекстОшибки = """Requested POA"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "RequestedPOA", , Отказ);	
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(MOT) Тогда
		ТекстОшибки = """MOT"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
 			ТекстОшибки,
			ЭтотОбъект, "MOT", , Отказ);	
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Urgency) Тогда
		ТекстОшибки = """Urgency"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Urgency", , Отказ);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(CCA) Тогда
		ТекстОшибки = """CCA"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "CCA", , Отказ);	
	КонецЕсли;

	ПроверитьStages(РежимЗаписи, Отказ);

	ПроверитьManualStatuses(Отказ);
	
	Если Инвойсы.Количество() = 0 Тогда
		
		ТекстОшибки = "No Invoice added!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Инвойсы", , Отказ);
		
	КонецЕсли;
	
	Если Parcels.Количество() = 0 Тогда
		
		ТекстОшибки = """Parcels"" is empty!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект, "Parcels", , Отказ);
		
	КонецЕсли;
		
	// { RGS DKazanskiy 13.12.2018 10:25:47 - S-I-0006451
	Если НЕ Ссылка.Пустая() И CurrentStatus = Перечисления.DOCStatuses.Restock И ЗначениеЗаполнено(Granted) И НЕ ЗначениеЗаполнено(Ссылка.Granted) Тогда
		ТекстОшибки = """Granted"" can't be filled in Restock status!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект, "Granted", , Отказ);
		
	КонецЕсли;
	// } RGS DKazanskiy 13.12.2018 10:25:50 - S-I-0006451
	
КонецПроцедуры

Процедура ПроверитьStages(РежимЗаписи, Отказ)
	
	Если ИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Export Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Requested)
		И Requested < НачалоДня(Дата) Тогда
		ТекстОшибки = """Requested"" can not be earlier than ""DOC date""!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Requested", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Accepted)
		И Accepted < Requested Тогда
		
		ТекстОшибки = """Accepted"" can not be earlier than ""Requested""!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "Accepted", , Отказ);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Received) Тогда
		
		Если НЕ ЗначениеЗаполнено(Requested) Тогда
			
			ТекстОшибки = """Requested"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Requested", , Отказ);
			
		ИначеЕсли Received < Requested Тогда
			
			ТекстОшибки = """Received"" can not be earlier than ""Requested""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Received", , Отказ);
				
		КонецЕсли;
		
		Если Received < Accepted Тогда
			
			ТекстОшибки = """Received"" can not be earlier than ""Accepted""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Accepted", , Отказ);
			
		КонецЕсли; 
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Granted) Тогда
		
		Если НЕ ЗначениеЗаполнено(Received) Тогда
			
			ТекстОшибки = """Received"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Received", , Отказ);
			
		ИначеЕсли Granted < Received Тогда
			
			ТекстОшибки = """Granted"" can not be earlier than ""Received""!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "Granted", , Отказ);
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Booked) Тогда
				
		// { RGS AGorlenko 19.07.2016 17:28:41 - поддержка формального гринлайта
		//Если НЕ WithoutGreenLight Тогда
		Если НЕ WithoutGreenLight И НЕ FormalGreenLight Тогда
		// } RGS AGorlenko 19.07.2016 17:28:56 - поддержка формального гринлайта
		
			Если НЕ ЗначениеЗаполнено(Granted) Тогда
				
				ТекстОшибки = """Granted"" is empty!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "Granted", , Отказ);
									
			КонецЕсли; 
				
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьManualStatuses(Отказ)
	
	Если ИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Export Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS AGorlenko 25.05.2018 17:02:48 - проверяем только статусы текущей версии дока
	ТекущаяВерсия = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьАктуальнуюВерсию(Ссылка);
	// } RGS AGorlenko 25.05.2018 17:03:10 - проверяем только статусы текущей версии дока
	
	Для Каждого СтрокаStatuses Из ManualStatuses Цикл
		
		РасположениеОшибки = "In line " + СтрокаStatuses.НомерСтроки + " of ""Manual statuses"": ";
		
		Если НЕ ЗначениеЗаполнено(СтрокаStatuses.Date) Тогда
			
			ТекстОшибки = РасположениеОшибки + """Date"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Date", , Отказ);
				
		Иначе
			
			// { RGS AGorlenko 08.12.2015 18:17:13 - S-I-0001422
			//Если СтрокаStatuses.Date < FirstRequested Тогда
			Если НачалоДня(СтрокаStatuses.Date) < FirstRequested И СтрокаStatuses.Status = Перечисления.DOCStatuses.PendingTD Тогда
			// } RGS AGorlenko 08.12.2015 18:17:15 - S-I-0001422
				
				ТекстОшибки = РасположениеОшибки + """Date"" can not be earlier than ""First requested""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Date", , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Received)
				// { RGS AGorlenko 25.05.2018 17:02:48 - проверяем только статусы текущей версии дока
				И ТекущаяВерсия = СтрокаStatuses.Version
				// } RGS AGorlenko 25.05.2018 17:03:10 - проверяем только статусы текущей версии дока
				// { RGS AGorlenko 08.12.2015 18:18:15 - S-I-0001422
				//И СтрокаStatuses.Date > Received Тогда
				И НачалоДня(СтрокаStatuses.Date) > Received И (СтрокаStatuses.Status = Перечисления.DOCStatuses.PendingTD ИЛИ СтрокаStatuses.Status = Перечисления.DOCStatuses.PendingCCA) Тогда
				// } RGS AGorlenko 08.12.2015 18:18:17 - S-I-0001422
				
				ТекстОшибки = РасположениеОшибки + """Date"" can not be later than ""Received""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Date", , Отказ);
				
			КонецЕсли;
			
			// { RGS AGorlenko 08.12.2015 18:19:25 - S-I-0001422
			Если НачалоДня(СтрокаStatuses.Date) < Дата И СтрокаStatuses.Status = Перечисления.DOCStatuses.RedLight Тогда
				
				ТекстОшибки = РасположениеОшибки + """Date"" can not be earlier than ""DOC's date""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Date", , Отказ);
				
			КонецЕсли;
			// } RGS AGorlenko 08.12.2015 18:19:26 - S-I-0001422
			
			// { RGS AGorlenko 25.07.2016 18:46:14 - 
			Если ЗначениеЗаполнено(Booked) И НачалоДня(СтрокаStatuses.Date) > Booked Тогда
				
				ТекстОшибки = РасположениеОшибки + """Date"" can not be later than ""Booked""!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Date", , Отказ);
				
			КонецЕсли;
			// } RGS AGorlenko 25.07.2016 18:46:21 - 
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаStatuses.Status) Тогда
			
			ТекстОшибки = РасположениеОшибки + """Status"" is empty!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Status", , Отказ);
			
		Иначе
			
			DOCStatuses = Перечисления.DOCStatuses;
			Если СтрокаStatuses.Status <> DOCStatuses.PendingCCA
				И СтрокаStatuses.Status <> DOCStatuses.PendingSLB
				И СтрокаStatuses.Status <> DOCStatuses.PendingHUB
				И СтрокаStatuses.Status <> DOCStatuses.RedLight
				И СтрокаStatuses.Status <> DOCStatuses.PendingTD
				И СтрокаStatuses.Status <> DOCStatuses.Disposal
				И СтрокаStatuses.Status <> DOCStatuses.PendingCertification
				И СтрокаStatuses.Status <> DOCStatuses.PendingMOC Тогда
				
				ТекстОшибки = РасположениеОшибки + "wrong status! Only Pending CCA, Pending SLB, Pending HUB, Pending TD, Red light, Disposal, Pending Certification and Pending MOC allowed!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Status", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// { RGS AGorlenko 19.04.2017 17:00:02 - добавление Pending Certification и Pending MoC
	Если ManualStatuses.Количество() > 0 Тогда
		
		ПоследняяСтрокаManualStatuses = ManualStatuses[ManualStatuses.Количество() - 1];
		РасположениеОшибки = "In line " + ПоследняяСтрокаManualStatuses.НомерСтроки + " of ""Manual statuses"": ";
		
		Если ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingCertification И (ЗначениеЗаполнено(Received) ИЛИ ЗначениеЗаполнено(Granted)) Тогда
			
			// { RGS AGorlenko 25.05.2018 17:05:51 - проверяем только статусы текущей версии дока
			Если ЗначениеЗаполнено(Granted) ИЛИ ТекущаяВерсия = ПоследняяСтрокаManualStatuses.Version Тогда
			// } RGS AGorlenko 25.05.2018 17:05:53 - проверяем только статусы текущей версии дока
				ТекстОшибки = РасположениеОшибки + """Pending Certification"" can not be specified when ""Received"" or ""Granted"" is filled!";
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Status", , Отказ);
			// { RGS AGorlenko 25.05.2018 17:05:51 - проверяем только статусы текущей версии дока
			КонецЕсли;
			// } RGS AGorlenko 25.05.2018 17:05:53 - проверяем только статусы текущей версии дока
			
		КонецЕсли;
		
		Если ПоследняяСтрокаManualStatuses.Status = DOCStatuses.PendingMOC И ЗначениеЗаполнено(Granted) Тогда
			
			ТекстОшибки = РасположениеОшибки + """Pending MOC"" can not be specified when ""Granted"" is filled!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, "ManualStatuses[" + ManualStatuses.Индекс(СтрокаStatuses) + "].Status", , Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	// } RGS AGorlenko 19.04.2017 17:00:31 - добавление Pending Certification и Pending MoC
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ИзменитьИнвойсыИParcelsПриНеобходимости(Отказ, МассивИзменяемыхParcels, МассивИзменяемыхИнвойсов, Отменить)
		
	Для Каждого Parcel Из МассивИзменяемыхParcels Цикл
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьОтмененностьParcel(Parcel, Отменить, Отказ);
		
	КонецЦикла;
	
	Для Каждого Инвойс Из МассивИзменяемыхИнвойсов Цикл
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьОтмененностьInvoice(Инвойс, Отменить, Отказ);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ИзменитьОтмененностьParcel(ОбъектСсылка, Отменить, Отказ) Экспорт
	
	Объект = ОбъектСсылка.ПолучитьОбъект();
	
	Если Отменить Тогда
		
		Если Объект.Проверен Тогда
			Объект.Проверен = Ложь;
		КонецЕсли;
		
		Если ПометкаУдаления Тогда
			РГСофтКлиентСервер.УстановитьЗначение(Объект.ПометкаУдаления, Истина);
		КонецЕсли;
		
	Иначе
				
		Если Объект.ПометкаУдаления Тогда
			Объект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(Объект.Отменен, Отменить);
	
	Если Объект.Модифицированность() Тогда
		
		Попытка
			// { RGS AGorlenko 10.11.2015 2:09:48 - здесь парсель можно не регистрировать, зарегистрируется при записи дока
			Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена", Истина);
			// } RGS AGorlenko 10.11.2015 2:10:32 - здесь парсель можно не регистрировать, зарегистрируется при записи дока
			Объект.Записать();
		Исключение
			ТекстОшибки = "Не удалось изменить отмененность """ + Объект + """!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось изменить отмененность ""Parcel " + Объект + """: " + ОписаниеОшибки(),
				Объект, , , Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтмененностьInvoice(ОбъектСсылка, Отменить, Отказ) Экспорт
	
	Объект = ОбъектСсылка.ПолучитьОбъект();
	
	Если Отменить Тогда
		
		Если Объект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если ПометкаУдаления Тогда
			ОбщегоНазначения.УстановитьЗначение(Объект.ПометкаУдаления, Истина);
		КонецЕсли;
		
	Иначе
		
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		
		Если Объект.ПометкаУдаления Тогда
			Объект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(Объект.Отменен, Отменить);
	
	Если Объект.Модифицированность() Тогда
		
		Попытка
			Объект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = "Не удалось изменить отмененность """ + Объект + """!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				Объект, , , Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьСтарыеРеквизитыШапкиСтарыеInvoicesИСтарыеParcelsВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не ЭтоНовый() Тогда
			             	
	СтруктураТекстов.Вставить("СтарыеРеквизитыШапки",
			"ВЫБРАТЬ
			|	DOC.ПометкаУдаления,
			|	DOC.Номер,
			|	DOC.Дата,
			|	DOC.Проведен,
			|	DOC.ИмпортЭкспорт,
			|	DOC.GOLD,
			|	DOC.POD,
			|	DOC.CCA,
			|	DOC.ConsignTo,
			|	DOC.Seller,
			|	DOC.MOT,
			|	DOC.RequestedPOA,
			|	DOC.Urgency,
			|	DOC.Coordinator,
			|	DOC.InvoiceList,
			|	DOC.FirstRequested,
			|	DOC.Requested,
			|	DOC.Accepted,
			|	DOC.CCAFirstResponse,
			|	DOC.Received,
			|	DOC.Granted,
			|	DOC.Booked,
			|	DOC.WithoutGreenLight,
			|	DOC.CreationDate,
			|	DOC.Отменен,
			|	DOC.HouseKeeping,
			|	DOC.DirectlyToTheHub,
			|	DOC.POList,
			|	DOC.CurrentComment,
			|	DOC.ProcessLevel,
			|	DOC.CreatedBy,
			|	DOC.FormalGreenLight,
			|	DOC.GuaranteeLetterRequired,
			|	DOC.COORequired,
			|	DOC.PermitsRequired,
			|	DOC.PendingEUC,
			|	DOC.SentToTMS,
			|	DOC.SentToTMSDate,
			|	DOC.SourceLocation,
			|	DOC.TransactionSpecialist,
			|	DOC.SubmittedByTransactionSpecialist,
			|	DOC.LegalEntity,
			|	DOC.ReRoute,
			|	DOC.GL_FromSegment
			|ИЗ
			|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК DOC
			|ГДЕ
			|	DOC.Ссылка = &Ссылка");
	
	СтруктураТекстов.Вставить("СтарыеInvoices",
		"ВЫБРАТЬ
		|	DOCInvoices.Инвойс КАК Invoice
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
		|ГДЕ
		|	DOCInvoices.Ссылка = &Ссылка");
	
	СтруктураТекстов.Вставить("СтарыеParcels",
		"ВЫБРАТЬ
		|	DOCParcels.Parcel КАК Parcel
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCParcels
		|ГДЕ
		|	DOCParcels.Ссылка = &Ссылка");
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	                      			
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитовШапки", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизитыШапки") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки = СтруктураРезультатов.СтарыеРеквизитыШапки.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки.Следующий();
	КонецЕсли;
	                  		
	ДополнительныеСвойства.Вставить("МассивСтарыхInvoices", Новый Массив);
	Если СтруктураРезультатов.Свойство("СтарыеInvoices") Тогда
		ДополнительныеСвойства.МассивСтарыхInvoices = СтруктураРезультатов.СтарыеInvoices.Выгрузить().ВыгрузитьКолонку("Invoice");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивСтарыхParcels", Новый Массив);
	Если СтруктураРезультатов.Свойство("СтарыеParcels") Тогда
		ДополнительныеСвойства.МассивСтарыхParcels = СтруктураРезультатов.СтарыеParcels.Выгрузить().ВыгрузитьКолонку("Parcel");
	КонецЕсли;
	   		
КонецПроцедуры
  
Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	// Запросы, выполняемые всегда (для новых DOCs, при записи, проведении, пометке удаления и т. д.)
	
	Если Инвойсы.Количество() Тогда
	
		СтруктураПараметров.Вставить("Invoices", Инвойсы.ВыгрузитьКолонку("Инвойс"));
		
		СтруктураТекстов.Вставить("РеквизитыInvoices",
			"ВЫБРАТЬ
			|	Invoices.Ссылка КАК Invoice,
			|	Invoices.АрхивИмпортЭкспорт КАК ИмпортЭкспорт,
			|	Invoices.Голд,
			|	Invoices.TMS,
			|	Invoices.Декларант,
			|	Invoices.Номер,
			|	Invoices.Продавец,
			|	Invoices.Проведен,
			|	Invoices.POList,
			|	Invoices.Страховка,
			|	Invoices.Фрахт,
			|	Invoices.Упаковка
			|ИЗ
			|	Документ.Инвойс КАК Invoices
			|ГДЕ
			|	Invoices.Ссылка В(&Invoices)");
			
		СтруктураПараметров.Вставить("Country", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(ProcessLevel, "Country"));
		СтруктураПараметров.Вставить("SanctionsGroup", РГСофтСерверПовтИспСеанс.ЗначениеРеквизитаОбъекта(POD, "SanctionsGroup"));
		СтруктураПараметров.Вставить("DOCDate", Дата);
		
		СтруктураТекстов.Вставить("РеквизитыItems",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК InvoiceLine,
			|	Items.Инвойс КАК Invoice,
			|	Items.Количество КАК Qty,
			|	Items.NetWeight,
			|	Items.PermanentTemporary,
			|	Items.PSA,
			|	Items.PermitsRequired,
			|	Items.КостЦентр.Segment.Код КАК SegmentCode,
			|	Items.КостЦентр КАК AU,
			|	SanctionListHTCcodeHTCCodeList.Ссылка.SanctionsGroup,
			|	Items.EUCNotRequired,
			|	Items.EUCRequested,
			|	Items.EUCReceived,
			|	Items.COORequired,
			|	Items.GuaranteeLetter,
			|	Items.MOC
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.SanctionListHTCcode.HTCCodeList КАК SanctionListHTCcodeHTCCodeList
			|		ПО (Items.МеждународныйКодТНВЭД ПОДОБНО SanctionListHTCcodeHTCCodeList.HTCCode + ""%"")
			|			И (НЕ SanctionListHTCcodeHTCCodeList.Ссылка.ПометкаУдаления)
			|			И (SanctionListHTCcodeHTCCodeList.Ссылка.Country = &Country)
			|			И (SanctionListHTCcodeHTCCodeList.Ссылка.SanctionsGroup = &SanctionsGroup)
			|			И (SanctionListHTCcodeHTCCodeList.StartDate <= &DOCDate)
			|			И (SanctionListHTCcodeHTCCodeList.ExpiryDate > &DOCDate
			|				ИЛИ SanctionListHTCcodeHTCCodeList.ExpiryDate = ДАТАВРЕМЯ(1, 1, 1))
			|ГДЕ
			|	Items.Инвойс В(&Invoices)
			|	И НЕ Items.ПометкаУдаления");
			
		СтруктураТекстов.Вставить("AUsLegalEntities",
			"ВЫБРАТЬ
			|	Items.Ссылка КАК Item,
			|	МИНИМУМ(AUsAndLegalEntities.LegalEntity) КАК LegalEntity,
			|	Items.КостЦентр
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.AUsAndLegalEntities КАК AUsAndLegalEntities
			|		ПО Items.SoldTo = AUsAndLegalEntities.ParentCompany
			|			И Items.КостЦентр = AUsAndLegalEntities.AU
			|			И Items.Инвойс.Дата >= AUsAndLegalEntities.Период
			|ГДЕ
			|	Items.Инвойс В(&Invoices)
			|	И НЕ Items.ПометкаУдаления
			|	И Items.SoldTo.Leg7LegalEntityDetermining = ЗНАЧЕНИЕ(Перечисление.Leg7LegalEntityDetermining.FiscalRegistration)
			|
			|СГРУППИРОВАТЬ ПО
			|	Items.Ссылка,
			|	Items.КостЦентр");	 			
			
	КонецЕсли;
	
	// Запросы, выполняемые для уже существующих DOCs
	Если НЕ ЭтоНовый() Тогда
		
		СтруктураТекстов.Вставить("РеквизитыShipment", 
			"ВЫБРАТЬ
			|	ShipmentsDOCs.Ссылка КАК Shipment,
			|	ShipmentsDOCs.Ссылка.ETD,
			|	ShipmentsDOCs.Ссылка.ATD,
			|	ShipmentsDOCs.Ссылка.ETA,
			|	ShipmentsDOCs.Ссылка.ATA,
			|	ShipmentsDOCs.Ссылка.InCustoms,
			|	ShipmentsDOCs.Ссылка.Cleared,
			|	ShipmentsDOCs.Ссылка.CollectedFromPort,
			|	ShipmentsDOCs.Ссылка.Completed,
			|	ShipmentsDOCs.Ссылка.ActualPOA.DefaultWarehouse КАК DefaultWarehouse,
			|	ShipmentsDOCs.Ссылка.Проведен
			|ИЗ
			|	Документ.Поставка.УпаковочныеЛисты КАК ShipmentsDOCs
			|ГДЕ
			|	(НЕ ShipmentsDOCs.Ссылка.Отменен)
			|	И ShipmentsDOCs.УпаковочныйЛист = &Ссылка");
			             					
		СтруктураТекстов.Вставить("СтарыеManualStatuses",
			"ВЫБРАТЬ
			|	DOCManualStatuses.Date,
			|	DOCManualStatuses.Status,
			|	DOCManualStatuses.User,
			|	DOCManualStatuses.Comment,
			|	DOCManualStatuses.Version
			|ИЗ
			|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.ManualStatuses КАК DOCManualStatuses
			|ГДЕ
			|	DOCManualStatuses.Ссылка = &Ссылка");
												
	КонецЕсли;
	
	// Запросы, выполняемые для неотмененных DOCs
	Если НЕ Отменен Тогда
		
		Если ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
			СтруктураПараметров.Вставить("Номер", Номер);
			СтруктураТекстов.Вставить("DOCsСТакимЖеНомером",
				РГСофт.ПолучитьТекстЗапросаУникальностиДокумента(Метаданные()));
		КонецЕсли; 
		
		Если Инвойсы.Количество() Тогда
			
			СтруктураТекстов.Вставить("DOCsСТакимиЖеInvoices",
				"ВЫБРАТЬ
				|	DOCsInvoices.Ссылка.Представление КАК DOCПредставление,
				|	DOCsInvoices.Инвойс КАК Invoice,
				|	DOCsInvoices.Инвойс.Представление КАК InvoiceПредставление
				|ИЗ
				|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
				|ГДЕ
				|	DOCsInvoices.Инвойс В(&Invoices)
				|	И DOCsInvoices.Ссылка <> &Ссылка
				|	И (НЕ DOCsInvoices.Ссылка.Отменен)");
			
		КонецЕсли;
		
		Если Parcels.Количество() Тогда
		
			СтруктураПараметров.Вставить("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));
			
			СтруктураТекстов.Вставить("DOCsСТакимиЖеParcels",
				"ВЫБРАТЬ
				|	DOCsParcels.Ссылка.Представление КАК DOCПредставление,
				|	DOCsParcels.Parcel КАК Parcel,
				|	DOCsParcels.Parcel.Представление КАК ParcelПредставление
				|ИЗ
				|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCsParcels
				|ГДЕ
				|	DOCsParcels.Parcel В(&Parcels)
				|	И DOCsParcels.Ссылка <> &Ссылка
				|	И (НЕ DOCsParcels.Ссылка.Отменен)");
								
		КонецЕсли;
		
	КонецЕсли;	
	
	// Запросы, выполняемые только при проведении
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Parcels.Количество() Тогда
			
			// { RGS VShamin 17.12.2015 14:11:58 - косяк
			СтруктураПараметров.Вставить("Parcels", Parcels.ВыгрузитьКолонку("Parcel"));
			// } RGS VShamin 17.12.2015 14:12:00 - косяк
			
			СтруктураТекстов.Вставить("РеквизитыParcels",
				"ВЫБРАТЬ
				|	Parcels.Ссылка КАК Parcel,
				|	Parcels.Код КАК No,
				|	Parcels.Отменен,
				|	Parcels.Проверен,
				|	Parcels.LocalOnly,
				|	Parcels.NumOfParcels,
				|	Parcels.HazardClass
				|ИЗ
				|	Справочник.Parcels КАК Parcels
				|ГДЕ
				|	Parcels.Ссылка В(&Parcels)");
				
			СтруктураТекстов.Вставить("РеквизитыParcelLines",
				"ВЫБРАТЬ
				|	ParcelsItems.Ссылка КАК Parcel,
				|	ParcelsItems.НомерСтроки,
				|	ParcelsItems.СтрокаИнвойса КАК InvoiceLine,
				|	ParcelsItems.СтрокаИнвойса.Инвойс КАК Invoice,
				|	ParcelsItems.Qty,
				|	ParcelsItems.NetWeight,
				|	ParcelsItems.НомерЗаявкиНаЗакупку КАК PONo,
				|	ParcelsItems.СтрокаИнвойса.НомерЗаявкиНаЗакупку КАК ItemPONo
				|ИЗ
				|	Справочник.Parcels.Детали КАК ParcelsItems
				|ГДЕ
				|	ParcelsItems.Ссылка В(&Parcels)");
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Requested) ИЛИ WithoutGreenLight Тогда
			
			СтруктураПараметров.Вставить("МассивИнвойсов", Инвойсы.ВыгрузитьКолонку("Инвойс"));
			СтруктураТекстов.Вставить("ПрисоединенныеФайлы", 		
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.Ссылка
				|ИЗ
				|	Справочник.КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы КАК КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы
				|ГДЕ
				|	КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ВладелецФайла = &Ссылка
				|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуПрисоединенныеФайлы.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИнвойсПрисоединенныеФайлы.Ссылка
				|ИЗ
				|	Справочник.ИнвойсПрисоединенныеФайлы КАК ИнвойсПрисоединенныеФайлы
				|ГДЕ
				|	ИнвойсПрисоединенныеФайлы.ВладелецФайла В(&МассивИнвойсов)
				|	И НЕ ИнвойсПрисоединенныеФайлы.ПометкаУдаления");
				
		КонецЕсли;
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ТаблицаInvoices", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыInvoices") Тогда
		ДополнительныеСвойства.ТаблицаInvoices = СтруктураРезультатов.РеквизитыInvoices.Выгрузить();
		ДополнительныеСвойства.ТаблицаInvoices.Индексы.Добавить("Invoice");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаItems", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыItems") Тогда
		ДополнительныеСвойства.ТаблицаItems = СтруктураРезультатов.РеквизитыItems.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаРеквизитовShipment", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыShipment") Тогда
		ДополнительныеСвойства.ТаблицаРеквизитовShipment = СтруктураРезультатов.РеквизитыShipment.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыхManualStatuses", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеManualStatuses") Тогда
		ДополнительныеСвойства.ТаблицаСтарыхManualStatuses = СтруктураРезультатов.СтарыеManualStatuses.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаDOCsСТакимЖеНомером", Неопределено);
	Если СтруктураРезультатов.Свойство("DOCsСТакимЖеНомером") Тогда
		ДополнительныеСвойства.ВыборкаDOCsСТакимЖеНомером = СтруктураРезультатов.DOCsСТакимЖеНомером.Выбрать();
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ВыборкаDOCsСТакимиЖеInvoices", Неопределено);
	Если СтруктураРезультатов.Свойство("DOCsСТакимиЖеInvoices") Тогда
		ДополнительныеСвойства.ВыборкаDOCsСТакимиЖеInvoices = СтруктураРезультатов.DOCsСТакимиЖеInvoices.Выбрать();
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("ВыборкаDOCsСТакимиЖеParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("DOCsСТакимиЖеParcels") Тогда
		ДополнительныеСвойства.ВыборкаDOCsСТакимиЖеParcels = СтруктураРезультатов.DOCsСТакимиЖеParcels.Выбрать();
	КонецЕсли;			
	
	ДополнительныеСвойства.Вставить("ТаблицаParcels", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыParcels") Тогда
		ДополнительныеСвойства.ТаблицаParcels = СтруктураРезультатов.РеквизитыParcels.Выгрузить();
		ДополнительныеСвойства.ТаблицаParcels.Индексы.Добавить("Parcel");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаParcelLines", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыParcelLines") Тогда
		ДополнительныеСвойства.ТаблицаParcelLines = СтруктураРезультатов.РеквизитыParcelLines.Выгрузить();
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("ТаблицаAUsLegalEntities", Неопределено);
	Если СтруктураРезультатов.Свойство("AUsLegalEntities") Тогда
		ДополнительныеСвойства.ТаблицаAUsLegalEntities = СтруктураРезультатов.AUsLegalEntities.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаПрисоединенныхФайлов", Неопределено);
	Если СтруктураРезультатов.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеСвойства.ВыборкаПрисоединенныхФайлов = СтруктураРезультатов.ПрисоединенныеФайлы.Выбрать();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными(РежимЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) И ЗначениеЗаполнено(Coordinator) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Coordinator, "ProcessLevel");	
	КонецЕсли;
	
	ДозаполнитьРеквизитыПоInvoices(ДополнительныеСвойства.ТаблицаInvoices, ДополнительныеСвойства.ТаблицаItems);
	
	ОбновитьSegmentsList(ДополнительныеСвойства.ТаблицаItems);
	
	ОбновитьSanctionedItemsИPendingEUC(ДополнительныеСвойства.ТаблицаItems);
	
	ДозаполнитьStages(РежимЗаписи, ДополнительныеСвойства.ТаблицаРеквизитовShipment);
	
	Документы.КонсолидированныйПакетЗаявокНаПеревозку.ОбновитьDOCCurrentStatus(ЭтотОбъект);
	
	СтатусВажности = ОпределитьАктуальныйСтатусВажности();
	
КонецПроцедуры

Процедура ДозаполнитьРеквизитыПоInvoices(ТаблицаInvoices, ТаблицаItems)
	
	NewInvoiceList = "";
	NewPOList = "";
	NewIE = Перечисления.ИмпортЭкспорт.ПустаяСсылка();
	NewGOLD = Ложь;
	NewTMS = Ложь;
	NewConsignTo = Справочники.ConsignTo.ПустаяСсылка();
	NewSeller = Справочники.LegalEntities.ПустаяСсылка();
	NewPermitsRequired = Перечисления.YesNo.No;
	NewCOORequired = Перечисления.YesNo.No;
	NewGuaranteeLetterRequired = Перечисления.YesNo.No;
	
	Если Инвойсы.Количество() Тогда
		
		МассивInvoiceNo = Новый Массив;
		МассивDOCPOList = Новый Массив;
			
		Для Каждого СтрокаТаблицы Из ТаблицаInvoices Цикл
			
			МассивInvoiceNo.Добавить(СокрЛП(СтрокаТаблицы.Номер));
			
			МассивInvoicePOList = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.POList, ", ");	
			МассивDOCPOList = РГСофтКлиентСервер.СложитьМассивы(МассивDOCPOList, МассивInvoicePOList);
			     						
		КонецЦикла;
		
		NewInvoiceList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивInvoiceNo, ", ");		
		NewPOList = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивDOCPOList, ", ");
    
		NewIE = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("ИмпортЭкспорт", ТаблицаInvoices);		
		NewGOLD = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("Голд", ТаблицаInvoices);
		NewTMS = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("TMS", ТаблицаInvoices);
		NewConsignTo = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("Декларант", ТаблицаInvoices);	
		NewSeller = РГСофт.ПолучитьЗначениеИзКолонкиТаблицы("Продавец", ТаблицаInvoices);
		
		Для Каждого СтрокаItems Из ТаблицаItems Цикл
			
			Если СтрокаItems.PermitsRequired = Перечисления.YesNo.Yes Тогда
				NewPermitsRequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
			
			Если СтрокаItems.COORequired = Перечисления.YesNo.Yes Тогда
				NewCOORequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;
			
			Если СтрокаItems.GuaranteeLetter = Перечисления.YesNo.Yes Тогда
				NewGuaranteeLetterRequired = Перечисления.YesNo.Yes;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
		
	РГСофтКлиентСервер.УстановитьЗначение(POList, NewPOList);
	РГСофтКлиентСервер.УстановитьЗначение(InvoiceList, NewInvoiceList);
	РГСофтКлиентСервер.УстановитьЗначение(ИмпортЭкспорт, NewIE);
	РГСофтКлиентСервер.УстановитьЗначение(GOLD, NewGOLD);
	РГСофтКлиентСервер.УстановитьЗначение(TMS, NewTMS);
	РГСофтКлиентСервер.УстановитьЗначение(ConsignTo, NewConsignTo);
	РГСофтКлиентСервер.УстановитьЗначение(Seller, NewSeller);
	РГСофтКлиентСервер.УстановитьЗначение(PermitsRequired, NewPermitsRequired);
	РГСофтКлиентСервер.УстановитьЗначение(COORequired, NewCOORequired);
	РГСофтКлиентСервер.УстановитьЗначение(GuaranteeLetterRequired, NewGuaranteeLetterRequired);
	
КонецПроцедуры

Процедура ОбновитьSegmentsList(ТаблицаItems)
	
	Если Инвойсы.Количество() = 0 Тогда
		SegmentsList = "";
		Возврат;
	КонецЕсли;
	
	ТаблицаSegmentsCodes = ТаблицаItems.Скопировать(,"SegmentCode");
	ТаблицаSegmentsCodes.Свернуть("SegmentCode");
	ТаблицаSegmentsCodes.Сортировать("SegmentCode");
	МассивSegmentsCodes = ТаблицаSegmentsCodes.ВыгрузитьКолонку("SegmentCode");
	SegmentsList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивSegmentsCodes);
	
КонецПроцедуры

Процедура ОбновитьSanctionedItemsИPendingEUC(ТаблицаItems)
	
	SanctionedItems = Ложь;
	PendingEUC = Ложь;
	
	Если Инвойсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	         	
	НеобходимоПроверитьEUC = Документы.КонсолидированныйПакетЗаявокНаПеревозку.НеобходимоПроверитьEUCSanctions(Дата, Booked, ProcessLevel, HouseKeeping);
	
	Для Каждого СтрокаItem из ТаблицаItems Цикл 
		
		Если Не SanctionedItems И ЗначениеЗаполнено(СтрокаItem.SanctionsGroup) Тогда
			SanctionedItems = Истина;
		КонецЕсли;
	
		Если НеобходимоПроверитьEUC
			И Не PendingEUC 
			И Не СтрокаItem.EUCNotRequired 
			И Не ЗначениеЗаполнено(СтрокаItem.EUCReceived) Тогда 
			PendingEUC = Истина;
		КонецЕсли;

	КонецЦикла;	
	      	
КонецПроцедуры

Процедура ДозаполнитьStages(РежимЗаписи, ТаблицаРеквизитовShipment)
	
	// Заполним CCAFirstResponse
	CCAFirstResponseByManualStatus = Неопределено;
	СтрокаManualStatuses = ManualStatuses.Найти(Перечисления.DOCStatuses.PendingSLB, "Status");
	Если СтрокаManualStatuses <> Неопределено
		И ЗначениеЗаполнено(СтрокаManualStatuses.Date) Тогда
		CCAFirstResponseByManualStatus = СтрокаManualStatuses.Date;
	КонецЕсли;
	
	FirstResponseByReceived = Неопределено;
	Если ЗначениеЗаполнено(Received) Тогда
		CCAFirstResponseByReceived = Received;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CCAFirstResponseByManualStatus)
		И ЗначениеЗаполнено(CCAFirstResponseByReceived) Тогда
		
		Если CCAFirstResponseByReceived > CCAFirstResponseByManualStatus Тогда
			NewCCAFirstResponse = CCAFirstResponseByManualStatus;
		Иначе
			NewCCAFirstResponse = CCAFirstResponseByReceived;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(CCAFirstResponseByReceived) Тогда
		
		NewCCAFirstResponse = CCAFirstResponseByReceived;
		
	ИначеЕсли ЗначениеЗаполнено(CCAFirstResponseByManualStatus) Тогда
		
		NewCCAFirstResponse = CCAFirstResponseByManualStatus;
		
	Иначе
		
		NewCCAFirstResponse = '00010101';
		
	КонецЕсли;
	РГСофтКлиентСервер.УстановитьЗначение(CCAFirstResponse, NewCCAFirstResponse);
	
	// Определим текущий этап
	ПеречислениеDOCStages = Перечисления.DOCStages;
	Если ЗначениеЗаполнено(Booked) Тогда
		NewStage = ПеречислениеDOCStages.Booked;
	ИначеЕсли ЗначениеЗаполнено(Granted) Тогда
		NewStage = ПеречислениеDOCStages.Granted;			
	ИначеЕсли ЗначениеЗаполнено(Received) Тогда	
		NewStage = ПеречислениеDOCStages.Received;		
	ИначеЕсли ЗначениеЗаполнено(Requested) Тогда
		NewStage = ПеречислениеDOCStages.Requested;
	ИначеЕсли ЗначениеЗаполнено(TransactionSpecialist) И Не ЗначениеЗаполнено(SubmittedByTransactionSpecialist) Тогда
		NewStage = ПеречислениеDOCStages.PendingTS;      //S-I-0002810
	Иначе
		NewStage = ПеречислениеDOCStages.Opened;
	КонецЕсли;	
	ОбщегоНазначения.УстановитьЗначение(CurrentStage, NewStage);
	
КонецПроцедуры

Функция ОпределитьАктуальныйСтатусВажности() Экспорт
	
	СтатусыВажности = Перечисления.СтатусыВажности;
	
	Если Отменен
		ИЛИ HouseKeeping
		ИЛИ ЗначениеЗаполнено(Booked) Тогда
		Возврат СтатусыВажности.Зеленый;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(Granted) Тогда

		ВремяЖизниStage = ПолучитьРабочийПромежутокМеждуДатами(Granted, ТекущаяДата());
		
		Если MOT = Справочники.MOTs.AIR 
			ИЛИ MOT = Справочники.MOTs.COURIER Тогда
			
			ГраницаВажно = 5*24*60*60;
			ГраницаОченьВажно = 10*24*60*60;
			
		Иначе
							
			ГраницаВажно = 10*24*60*60;
			ГраницаОченьВажно = 20*24*60*60;
			
		КонецЕсли;
		
		Если ВремяЖизниStage >= ГраницаОченьВажно Тогда
			Возврат СтатусыВажности.Красный;
		ИначеЕсли ВремяЖизниStage >= ГраницаВажно Тогда
			Возврат СтатусыВажности.Желтый;
		Иначе
			Возврат СтатусыВажности.Зеленый;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Requested)
		ИЛИ ЗначениеЗаполнено(Received) Тогда
		
		Если ЗначениеЗаполнено(Received) Тогда
			StageDate = Received;
		ИначеЕсли ЗначениеЗаполнено(Requested) Тогда
			StageDate = Requested;
		КонецЕсли;
		
		ВремяЖизниStage = ПолучитьРабочийПромежутокМеждуДатами(StageDate, ТекущаяДата());
		
		// определяем статус важности в зависимости от приоритета DOC и даты присвоения предыдущего статуса важности
		Urgencies = Перечисления.Urgencies;
		Если Urgency = Urgencies.Urgent Тогда //Urgent
			
			ГраницаВажно = 3*24*60*60;
			ГраницаОченьВажно = 6*24*60*60;
			
		ИначеЕсли Urgency = Urgencies.Emergency Тогда //Emergency	
			
			ГраницаВажно = 24*60*60;
			ГраницаОченьВажно = 2*24*60*60;
			
		Иначе
			
			ГраницаВажно = 5*24*60*60;
			ГраницаОченьВажно = 10*24*60*60;
			
		КонецЕсли;
		
		Если ВремяЖизниStage >= ГраницаОченьВажно Тогда
			Возврат СтатусыВажности.Красный;
		ИначеЕсли ВремяЖизниStage >= ГраницаВажно Тогда
			Возврат СтатусыВажности.Желтый;
		Иначе
			Возврат СтатусыВажности.Зеленый;
		КонецЕсли;
		
	Иначе
		
		ВремяЖизниStage = ПолучитьРабочийПромежутокМеждуДатами(Дата, ТекущаяДата());
		Если ВремяЖизниStage >= 24*60*60 Тогда
			Возврат СтатусыВажности.Красный;
		Иначе
			Возврат СтатусыВажности.Желтый;
		КонецЕсли;
												
	КонецЕсли;
		
КонецФункции

Функция ПолучитьРабочийПромежутокМеждуДатами(НачальнаяДата, КонечнаяДата) Экспорт
   
   ЛеваяГраница = НачальнаяДата;
   // Притяем левую границу к началу понедельника
   Если ДеньНедели(ЛеваяГраница) - 5 > 0 Тогда
       ЛеваяГраница = КонецНедели(ЛеваяГраница) + 1;            
   КонецЕсли;
   
   ПраваяГраница = КонечнаяДата;
   // Притянем правую границу к концу пятницы
   Если ДеньНедели(ПраваяГраница) - 5 > 0 Тогда
       ПраваяГраница = КонецНедели(ПраваяГраница) - 2 * 24 * 60 * 60; // Конец Воскресенья минус 2 дня
   КонецЕсли;
   
   РабочийПромежуток = ПраваяГраница - ЛеваяГраница;
   // Если получилась глупость - возвращаем 0
   Если РабочийПромежуток < 0 Тогда
       Возврат 0;
   КонецЕсли;
   
   // Вычтем все попавшие внутрь границы выходные
   РазницаНедель = НеделяГода(ПраваяГраница) - НеделяГода(ЛеваяГраница);
   Если РазницаНедель > 0 Тогда
       РабочийПромежуток = РабочийПромежуток - РазницаНедель * 2 * 24 * 60 * 60;
   КонецЕсли;
   
   // Рекурсия
   Если Год(ЛеваяГраница) = Год(ПраваяГраница) Тогда
	   Возврат РабочийПромежуток;    
   Иначе
	   Возврат ПолучитьРабочийПромежутокМеждуДатами(ЛеваяГраница, КонецГода(ЛеваяГраница))
	   			+ ПолучитьРабочийПромежутокМеждуДатами(КонецГода(ЛеваяГраница)+1, ПраваяГраница)+1;
   КонецЕсли;
   
КонецФункции


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ)
	
	ПроверитьВозможностьИзмененияПоShipment(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.ТаблицаРеквизитовShipment);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьИзмененияБрокером(Отказ, ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки, ДополнительныеСвойства.МассивСтарыхParcels, ДополнительныеСвойства.МассивСтарыхInvoices, ДополнительныеСвойства.ТаблицаСтарыхManualStatuses);	
		
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияПоShipment(Отказ, ВыборкаСтарыхРеквизитовШапки, ТаблицаРеквизитовShipment)
		
	Если ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыборкаСтарыхРеквизитовШапки.SentToTMS И SentToTMS Тогда
		
		ТекстОшибки = "" + ЭтотОбъект + " can not be changed, because OB were sent to TMS!";
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
			
		Возврат;
		
	КонецЕсли;

	Если ТаблицаРеквизитовShipment.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитовShipment = ТаблицаРеквизитовShipment[0];
	
	Если ЗначениеЗаполнено(СтрокаРеквизитовShipment.Completed) Тогда 
		
		Если ДополнительныеСвойства.Свойство("SentToTMS") И ИзменилисьТолькоНесущественныеРеквизитыДляTMS() Тогда   			
			//S-I-0003184
		иначе
			
			ТекстОшибки = "" + ЭтотОбъект + " can not be changed, because '" + СтрокаРеквизитовShipment.Shipment + "' is already completed!";
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, , , Отказ);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;                           
	      		
	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено
		И ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.CCA)
		И ВыборкаСтарыхРеквизитовШапки.CCA <> CCA
		И СтрокаРеквизитовShipment.Проведен Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"CCA can not be changed, because '" + СтрокаРеквизитовShipment.Shipment + "' is posted!",
			ЭтотОбъект, , , Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияБрокером(Отказ, ВыборкаСтарыхРеквизитовШапки, МассивСтарыхParcels, МассивСтарыхInvoices, ТаблицаСтарыхManualStatuses)
	
	Если НЕ CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты шапки
	
	МетаданныеДокумента = Метаданные();
	
	СтруктураДоступныхДляИзмененияРеквизитов = Новый Структура(
		"CCAFirstResponse, CurrentComment, CurrentStage, CurrentStatus, CurrentStatusDate, ИмпортЭкспорт, GOLD, TMS, ConsignTo, Seller, СтатусВажности, ModifiedBy, ModificationDate, SegmentsList, InvoiceList, POList, SanctionedItems, PendingEUC, PermitsRequired, COORequired, GuaranteeLetterRequired, GL_FromSegment, CCAReference, CCA_Coordinator, ReRoute, NumberOfLines, NumberOfUniqueLines");
	
	СтандартныеРеквизиты = МетаданныеДокумента.СтандартныеРеквизиты;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Вам не разрешено изменять значение реквизита """ + Реквизит.Синоним + """!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = МетаданныеДокумента.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если СтруктураДоступныхДляИзмененияРеквизитов.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ИмяРеквизита = "Accepted"
			ИЛИ ИмяРеквизита = "Received"
			ИЛИ ИмяРеквизита = "Granted" Тогда 	
			
			// Эти реквизиты могут только заполняться	
			Если ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки[ИмяРеквизита])
				И ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхРеквизитовШапки[ИмяРеквизита] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"You are not allowed to change '" + Реквизит.Синоним + "'!",
					ЭтотОбъект, ИмяРеквизита, , Отказ);
			КонецЕсли;
				
			Продолжить;
			
		КонецЕсли;
							
		Если ЭтотОбъект[ИмяРеквизита] <> ВыборкаСтарыхРеквизитовШапки[ИмяРеквизита] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change '" + Реквизит.Синоним + "'!",
				ЭтотОбъект, ИмяРеквизита, , Отказ);
		КонецЕсли;
					
	КонецЦикла;
	
	// Проверим табличные части
	
	МассивInvoices = Инвойсы.ВыгрузитьКолонку("Инвойс");
	Если НЕ РГСофтКлиентСервер.МассивыИдентичны(МассивInvoices, МассивСтарыхInvoices) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You are not allowed to change Invoices!",
			ЭтотОбъект, "Инвойсы", , Отказ);
	КонецЕсли;
	
	МассивParcels = Parcels.ВыгрузитьКолонку("Parcel");
	Если НЕ РГСофтКлиентСервер.МассивыИдентичны(МассивParcels, МассивСтарыхParcels) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You are not allowed to change Parcels!",
			ЭтотОбъект, "Parcels", , Отказ);
	КонецЕсли;
	
	ТаблицаПроверкиManualStatuses = ТаблицаСтарыхManualStatuses.Скопировать();
	ТаблицаПроверкиManualStatuses.Колонки.Добавить("ПроверочнаяКолонка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	ТаблицаПроверкиManualStatuses.ЗаполнитьЗначения(-1, "ПроверочнаяКолонка");
	Для Каждого СтрокаТЧ Из ManualStatuses Цикл
		НоваяСтрокаТаблицы = ТаблицаПроверкиManualStatuses.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТЧ);
		НоваяСтрокаТаблицы.ПроверочнаяКолонка = 1;
	КонецЦикла;
	ТаблицаПроверкиManualStatuses.Свернуть("Date, Status, User, Comment", "ПроверочнаяКолонка");
	Для Каждого СтрокаТаблицы Из ТаблицаПроверкиManualStatuses Цикл
		
		Если СтрокаТаблицы.ПроверочнаяКолонка = -1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are not allowed to change Manual statuses, you can only add new statuses!",
				ЭтотОбъект, "ManualStatuses", , Отказ);
			Прервать;
		ИначеЕсли СтрокаТаблицы.ПроверочнаяКолонка = 1
			И СтрокаТаблицы.Status <> Перечисления.DOCStatuses.PendingSLB Тогда
			// { RGS AArsentev 25.06.2018
			// { RGS AArsentev S-I-0003275 22.06.2017 11:08:55
			//ЭтоПользовательDGF = РГСофтСерверПовтИспСеанс.ЭтоDGF(СтрокаТаблицы.User);
			//Если НЕ ЭтоПользовательDGF Тогда
			// } RGS AArsentev S-I-0003275 22.06.2017 11:08:55
			Если СтрокаТаблицы.Status <> Перечисления.DOCStatuses.PendingCertification И CustomsСервер.ЭтоБрокер() Тогда
			// } RGS AArsentev 25.06.2018
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You are allowed to use only status Pending SLB!",
				ЭтотОбъект, "ManualStatuses", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменилисьТолькоНесущественныеРеквизитыДляTMS()
	
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ЭтотОбъект);
	
	Результат = Истина;
	ОписаниеИзменений = "";
	
	НесущественныеДанныеТЧ = Новый Соответствие;
	НесущественныеДанныеТЧ.Вставить("TMS_OB", Новый Массив);
	НесущественныеДанныеТЧ["TMS_OB"].Добавить("OBNo");
	НесущественныеДанныеТЧ["TMS_OB"].Добавить("AU");
	НесущественныеДанныеТЧ["TMS_OB"].Добавить("Activity");
	            	
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеДанныеТЧ") Тогда
		Для каждого ТекНесущественныеДанныеТЧ Из ДополнительныеСвойства["ДополнительныеНесущественныеДанныеТЧ"] Цикл
			Если НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ] = Неопределено Тогда
				НесущественныеДанныеТЧ.Вставить(ТекНесущественныеДанныеТЧ.Ключ, ТекНесущественныеДанныеТЧ.Значение);
			Иначе
				Для каждого ТекКолонка Из ТекНесущественныеДанныеТЧ.Значение Цикл
					НесущественныеДанныеТЧ[ТекНесущественныеДанныеТЧ.Ключ].Добавить(ТекКолонка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//проверяем неизменность всех ТЧ
	СписокТЧ = Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			НесущественныеКолонки = НесущественныеДанныеТЧ[ТекТЧ.Имя];
			ИзмененныеКолонки = ИзмененныеДанные[ТекТЧ.Имя];
			ИзмененияНесущественны = Истина;
			Если НесущественныеКолонки = Неопределено Тогда
				ИзмененияНесущественны = Ложь;
			Иначе
				Для каждого ИзмененнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) = Неопределено Тогда
						ИзмененияНесущественны = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ИзмененияНесущественны Тогда
				Продолжить;
			Иначе
				ОписаниеИзменений = ОписаниеИзменений + "Tabular section '" + ТекТЧ.Имя + "':" + Символы.ПС;
				Для каждого ИзменнаяКолонка Из ИзмененныеКолонки Цикл
					Если НесущественныеКолонки <> Неопределено Тогда
						Если НесущественныеКолонки.Найти(ИзмененнаяКолонка) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "column '" + ИзменнаяКолонка + "'" + Символы.ПС;
				КонецЦикла;
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//проверяем изменились ли только несущественные реквизиты
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	МассивНесущественныхРеквизитов = Новый Массив;
	МассивНесущественныхРеквизитов.Добавить("ModifiedBy");
	МассивНесущественныхРеквизитов.Добавить("ModificationDate");
	МассивНесущественныхРеквизитов.Добавить("SentToTMS");
	МассивНесущественныхРеквизитов.Добавить("SentToTMSDate");
	МассивНесущественныхРеквизитов.Добавить("SourceLocation");
	МассивНесущественныхРеквизитов.Добавить("LegalEntity");
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеНесущественныеРеквизиты") Тогда
		Для каждого ТекНесущественныйРеквизит Из ДополнительныеСвойства["ДополнительныеНесущественныеРеквизиты"] Цикл
			Если МассивНесущественныхРеквизитов.Найти(ТекНесущественныйРеквизит) = Неопределено Тогда
				МассивНесущественныхРеквизитов.Добавить(ТекНесущественныйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НесущественныйРеквизит Из МассивНесущественныхРеквизитов Цикл
		Индекс = ИзмененныеРеквизиты.Найти(НесущественныйРеквизит);
		Если Индекс <> Неопределено Тогда
			ИзмененныеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		Результат = Ложь;
		ОписаниеИзменений = ОписаниеИзменений + "Attributes:" + Символы.ПС;
		Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
			ОписаниеИзменений = ОписаниеИзменений + Символы.Таб + "'" + ИзмененныйРеквизит + "'" + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеИзменений) Тогда
		ДополнительныеСвойства.Вставить("ОписаниеИзменений", ОписаниеИзменений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи)
		
	ПроверитьЗаполнениеРеквизитовШапки(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки);
	
	ПроверитьТЧParcels(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаDOCsСТакимиЖеParcels,
		ДополнительныеСвойства.ТаблицаParcels,
		ДополнительныеСвойства.ТаблицаParcelLines);
	
	ПроверитьТЧInvoices(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаDOCsСТакимиЖеInvoices,
		ДополнительныеСвойства.ТаблицаInvoices,
		ДополнительныеСвойства.ТаблицаItems);
		
	СверитьQtyИNetWeightВInvoiceLinesИParcelLines(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ТаблицаItems,
		ДополнительныеСвойства.ТаблицаParcelLines);
		
	ПроверитьНаличиеПрисоединенныхФайлов(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаПрисоединенныхФайлов);
		
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, РежимЗаписи, ВыборкаСтарыхРеквизитовШапки)
	
	// ПЕРЕДАВАТЬ ДОП. СВОЙСТВА В ЯВНОМ ВИДЕ
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = ДополнительныеСвойства.ВыборкаDOCsСТакимЖеНомером;
	Если Выборка.Следующий() Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"No. """ + СокрЛП(Номер) + """ is already used by """ + Выборка.Представление + """!",
			ЭтотОбъект, "Номер", , Отказ);				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Granted) И PendingEUC Тогда
		
		Если Не ЗначениеЗаполнено(Booked)
			И ВыборкаСтарыхРеквизитовШапки <> Неопределено
			И ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.Booked) Тогда 
			
			РГСофтКлиентСервер.УстановитьЗначение(Granted, '00010101');
		
		иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Granted can not be filled until EUC is pending!
				|Please check page EUC (sanctions).",
				ЭтотОбъект, "Granted", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			ЭтотОбъект, "ProcessLevel", , Отказ);			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Requested)
		И НЕ ЗначениеЗаполнено(Received)
		И НЕ ЗначениеЗаполнено(Granted)
		И НЕ ЗначениеЗаполнено(Booked) Тогда
		
		Возврат;
		
	КонецЕсли;
			
	СтруктураАвтоЗаполняемыхРеквизитов = Новый Структура;
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("ИмпортЭкспорт");
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("ConsignTo");
	СтруктураАвтоЗаполняемыхРеквизитов.Вставить("Seller", GOLD);
	РГСофт.ПроверитьЗаполнениеАвтоЗаполняемыхРеквизитов(ЭтотОбъект, СтруктураАвтоЗаполняемыхРеквизитов, "Invoice", Отказ);											
	
КонецПроцедуры

Процедура ПроверитьТЧParcels(Отказ, РежимЗаписи, ВыборкаDOCsСТакимиЖеParcels, ТаблицаParcels, ТаблицаParcelLines)
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что нет другого DOC с такими же Parcels
	Если Parcels.Количество() Тогда
		
		Пока ВыборкаDOCsСТакимиЖеParcels.Следующий() Цикл
		
			НомерСтроки = Parcels.Найти(ВыборкаDOCsСТакимиЖеParcels.Parcel, "Parcel").НомерСтроки; 
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"""Parcel " + ВыборкаDOCsСТакимиЖеParcels.ParcelПредставление + """ is already used in the """ + ВыборкаDOCsСТакимиЖеParcels.DOCПредставление + "!",
			//	ЭтотОбъект, "Parcels[" + (НомерСтроки - 1) + "].Parcel", , Отказ);
			ТекстОшибки = """Parcel " + ВыборкаDOCsСТакимиЖеParcels.ParcelПредставление + """ is already used in the """ + ВыборкаDOCsСТакимиЖеParcels.DOCПредставление + "!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок
			
		КонецЦикла;
		 		
	КонецЕсли;
	        	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Requested)
		И НЕ ЗначениеЗаполнено(Received)
		И НЕ ЗначениеЗаполнено(Granted)
		И НЕ ЗначениеЗаполнено(Booked) Тогда
		
		Возврат;

	КонецЕсли;
	
	HazardClassОбязателенКЗаполнению = (ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA)
		И (ЗначениеЗаполнено(Received) ИЛИ WithoutGreenLight);
			
	// Проверим реквизиты указанных Parcels
	Для Каждого СтрокаТаблицыParcels Из ТаблицаParcels Цикл
		
		Если СтрокаТаблицыParcels.LocalOnly Тогда
			
			НомерСтроки = Parcels.Найти(СтрокаТаблицыParcels.Parcel, "Parcel").НомерСтроки;
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"""Parcel " + СокрЛП(СтрокаТаблицыParcels.No) + """ is marked as ""Local only""!",
			//	ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			ТекстОшибки = """Parcel " + СокрЛП(СтрокаТаблицыParcels.No) + """ is marked as ""Local only""!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок
			
		КонецЕсли; 
		
		Если СтрокаТаблицыParcels.Отменен Тогда
			
			НомерСтроки = Parcels.Найти(СтрокаТаблицыParcels.Parcel, "Parcel").НомерСтроки;
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"""Parcel " + СокрЛП(СтрокаТаблицыParcels.No) + """ is cancelled!",
			//	ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			ТекстОшибки = """Parcel " + СокрЛП(СтрокаТаблицыParcels.No) + """ is cancelled!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок

		КонецЕсли;
		 		
		Если HazardClassОбязателенКЗаполнению И НЕ ЗначениеЗаполнено(СтрокаТаблицыParcels.HazardClass) Тогда
					
			НомерСтроки = Parcels.Найти(СтрокаТаблицыParcels.Parcel, "Parcel").НомерСтроки;
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"In Parcel '" + СокрЛП(СтрокаТаблицыParcels.No) + "' Hazard class is empty!",
			//	ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			ТекстОшибки = "In Parcel '" + СокрЛП(СтрокаТаблицыParcels.No) + "' Hazard class is empty!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Parcels[" + (НомерСтроки-1) + "].Parcel", , Отказ);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок
			
		КонецЕсли;
		       		
	КонецЦикла;
		
	Для Каждого РеквизитыParcelLine Из ТаблицаParcelLines Цикл
		
		// Проверим, что в парселях указаны только инвойсы из текущего DOC	
		Если ЗначениеЗаполнено(РеквизитыParcelLine.InvoiceLine)
			И Инвойсы.Количество()
			И Инвойсы.Найти(РеквизитыParcelLine.Invoice, "Инвойс") = Неопределено Тогда
			
			РеквизитыParcel = ТаблицаParcels.Найти(РеквизитыParcelLine.Parcel, "Parcel");
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"""Parcel " + СокрЛП(РеквизитыParcel.No) + """ line " + РеквизитыParcelLine.НомерСтроки + ": specified ""Invoice line " + СокрЛП(РеквизитыParcelLine.InvoiceLine) + """ that does not belog to the current DOC!",
			//	РеквизитыParcelLine.Parcel, "Детали[" + (РеквизитыParcelLine.НомерСтроки-1) + "].СтрокаИнвойса", , Отказ);
			ТекстОшибки = """Parcel " + СокрЛП(РеквизитыParcel.No) + """ line " + РеквизитыParcelLine.НомерСтроки + ": specified ""Invoice line " + СокрЛП(РеквизитыParcelLine.InvoiceLine) + """ that does not belog to the current DOC!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				РеквизитыParcelLine.Parcel, "Детали[" + (РеквизитыParcelLine.НомерСтроки-1) + "].СтрокаИнвойса", , Отказ);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок
				
		КонецЕсли; 
		
		// Проверим, что в казахстанских, узбекистанских и азербайджанских парселях, если в них несколько строк, то указан Net weight
		Если РеквизитыParcelLine.НомерСтроки > 1
			И (ProcessLevel = Справочники.ProcessLevels.KZ
			ИЛИ ProcessLevel = Справочники.ProcessLevels.UZ
			ИЛИ ProcessLevel = Справочники.ProcessLevels.AZ) Тогда
			
			Если НЕ ЗначениеЗаполнено(РеквизитыParcelLine.NetWeight) Тогда
				
				РеквизитыParcel = ТаблицаParcels.Найти(РеквизитыParcelLine.Parcel, "Parcel");
				// { RGS VShamin 29.09.2015 12:49:41 - для отбивок
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"""Parcel " + СокрЛП(РеквизитыParcel.No) + """ line " + РеквизитыParcelLine.НомерСтроки + ": ""Item total net weight"" is emtpy!",
				//	РеквизитыParcelLine.Parcel, "Детали[" + (РеквизитыParcelLine.НомерСтроки-1) + "].NetWeight", , Отказ);
				ТекстОшибки = """Parcel " + СокрЛП(РеквизитыParcel.No) + """ line " + РеквизитыParcelLine.НомерСтроки + ": ""Item total net weight"" is emtpy!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					РеквизитыParcelLine.Parcel, "Детали[" + (РеквизитыParcelLine.НомерСтроки-1) + "].NetWeight", , Отказ);
				//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 29.09.2015 12:49:41 - для отбивок
				
			КонецЕсли;
			
		КонецЕсли;
		
		// { RGS AGorlenko 12.01.2017 16:25:08 - проверка, что номер РО не отличается от данных инвойса
		Если РеквизитыParcelLine.PONo <> РеквизитыParcelLine.ItemPONo Тогда
			РеквизитыParcel = ТаблицаParcels.Найти(РеквизитыParcelLine.Parcel, "Parcel");
			ТекстОшибки = """Parcel " + СокрЛП(РеквизитыParcel.No) + """ line " + РеквизитыParcelLine.НомерСтроки + ": PO no. '" + РеквизитыParcelLine.PONo + "' differs from PO no. '" + РеквизитыParcelLine.ItemPONo + "' in Item (Invoice line)!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				РеквизитыParcelLine.Parcel, "Детали[" + (РеквизитыParcelLine.НомерСтроки-1) + "].НомерЗаявкиНаЗакупку", , Отказ);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		КонецЕсли;
		// } RGS AGorlenko 12.01.2017 16:25:32 - проверка, что номер РО не отличается от данных инвойса
		
	КонецЦикла; 
			
	// Пометим парсели как проверенные
	Если НЕ Отказ
		И (ЗначениеЗаполнено(Granted)
		ИЛИ ЗначениеЗаполнено(Booked)) Тогда
		
		Для Каждого СтрокаТаблицыParcels Из ТаблицаParcels Цикл
			
			ParcelОбъект = СтрокаТаблицыParcels.Parcel.ПолучитьОбъект();
			РГСофтКлиентСервер.УстановитьЗначение(ParcelОбъект.Проверен, Истина);
			
			Если Не ЗначениеЗаполнено(ParcelОбъект.WarehouseFrom) Тогда 
				
				WarehouseFrom = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(RequestedPOA, "DefaultWarehouse");
				Если ЗначениеЗаполнено(WarehouseFrom) Тогда 
					ParcelОбъект.WarehouseFrom = WarehouseFrom;
				иначе
					// { RGS VShamin 29.09.2015 12:52:01 - для отбивок
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					//	"Default warehouse is empty in " + СокрЛП(RequestedPOA) + "!",
					//	ЭтотОбъект, RequestedPOA, , Отказ);
					ТекстОшибки = "Default warehouse is empty in " + СокрЛП(RequestedPOA) + "!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ЭтотОбъект, RequestedPOA, , Отказ);
					//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					// } RGS VShamin 29.09.2015 12:52:01 - для отбивок
				КонецЕсли;
					
			КонецЕсли;	
			
			Если ParcelОбъект.Модифицированность() Тогда 
				
				Попытка
					ParcelОбъект.Записать();
				Исключение
					// { RGS VShamin 29.09.2015 12:53:25 - для отбивок
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					//	"Failed to mark ""Parcel " + ParcelОбъект.Код + """ as ""Final""!",
					//	СтрокаТаблицыParcels.Parcel, , , Отказ);
					ТекстОшибки = "Failed to mark ""Parcel " + ParcelОбъект.Код + """ as ""Final""!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыParcels.Parcel, , , Отказ);
					//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					// } RGS VShamin 29.09.2015 12:53:25 - для отбивок
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьТЧInvoices(Отказ, РежимЗаписи, ВыборкаDOCsСТакимиЖеInvoices, ТаблицаInvoices, ТаблицаItems)
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим инвойсы
	Если Инвойсы.Количество() Тогда
		
		// Проверим, что указанные Инвойсы не использованы в других DOC
		Пока ВыборкаDOCsСТакимиЖеInvoices.Следующий() Цикл
			
			НомерСтроки = Инвойсы.Найти(ВыборкаDOCsСТакимиЖеInvoices.Invoice, "Инвойс").НомерСтроки;
			// { RGS VShamin 29.09.2015 12:35:44 - для отбивок
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"'" + ВыборкаDOCsСТакимиЖеInvoices.InvoiceПредставление + "' is already in '" + ВыборкаDOCsСТакимиЖеInvoices.DOCПредставление + "'!",
			//	ЭтотОбъект, "Инвойсы[" + (НомерСтроки- 1) + "].Инвойс", , Отказ);
			ТекстОшибки = "'" + ВыборкаDOCsСТакимиЖеInvoices.InvoiceПредставление + "' is already in '" + ВыборкаDOCsСТакимиЖеInvoices.DOCПредставление + "'!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
				ЭтотОбъект, "Инвойсы[" + (НомерСтроки- 1) + "].Инвойс", , Отказ);
			//ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Ложь);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 29.09.2015 12:35:45 - для отбивок
			
		КонецЦикла;

	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим инвойсы
	Если Инвойсы.Количество() Тогда
				
		// Если проводится DOC - должен быть проведен и инвойс	
		Для Каждого СтрокаТаблицыInvoices Из ТаблицаInvoices Цикл
			
			Если НЕ СтрокаТаблицыInvoices.Проведен Тогда
				
				НомерСтроки = Инвойсы.Найти(СтрокаТаблицыInvoices.Invoice, "Инвойс").НомерСтроки;
				// { RGS VShamin 05.10.2015 15:54:14 - 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"'" + СтрокаТаблицыInvoices.Invoice + "' is not posted!",
				//	СтрокаТаблицыInvoices.Invoice, , , Отказ);
				ТекстОшибки = "'" + СтрокаТаблицыInvoices.Invoice + "' is not posted!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыInvoices.Invoice, , , Отказ);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 05.10.2015 15:54:15 - 
					
			КонецЕсли;
			
			Если СтрокаТаблицыInvoices.Голд Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыInvoices.Страховка) Тогда
					
					НомерСтроки = Инвойсы.Найти(СтрокаТаблицыInvoices.Invoice, "Инвойс").НомерСтроки;
					// { RGS VShamin 05.10.2015 15:55:58 - 
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					//	"Non-critical error: Insurance in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!",
					//	СтрокаТаблицыInvoices.Invoice);
					ТекстОшибки = "Non-critical error: Insurance in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Non-critical error: Insurance in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!",
						СтрокаТаблицыInvoices.Invoice);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					// } RGS VShamin 05.10.2015 15:55:59 - 
						
				КонецЕсли;
					
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыInvoices.Фрахт) Тогда
					
					НомерСтроки = Инвойсы.Найти(СтрокаТаблицыInvoices.Invoice, "Инвойс").НомерСтроки;
					// { RGS VShamin 05.10.2015 15:56:49 - 
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					//	"Non-critical error: Freight in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!",
					//	СтрокаТаблицыInvoices.Invoice);
					ТекстОшибки = "Non-critical error: Freight in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						СтрокаТаблицыInvoices.Invoice);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					// } RGS VShamin 05.10.2015 15:56:49 - 
						
				КонецЕсли;
					
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыInvoices.Упаковка) Тогда
					
					НомерСтроки = Инвойсы.Найти(СтрокаТаблицыInvoices.Invoice, "Инвойс").НомерСтроки;
					// { RGS VShamin 05.10.2015 15:58:11 - 
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					//	"Non-critical error: Handling in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!",
					//	СтрокаТаблицыInvoices.Invoice);
					ТекстОшибки = "Non-critical error: Handling in '" + СтрокаТаблицыInvoices.Invoice + "' is empty!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						СтрокаТаблицыInvoices.Invoice);
					ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
					// } RGS VShamin 05.10.2015 15:58:11 - 
						
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
			
	// Проверим Items
	
	Если Инвойсы.Количество() 
		И (ProcessLevel = Справочники.ProcessLevels.AZ ИЛИ ProcessLevel = Справочники.ProcessLevels.TM)  
		И ЗначениеЗаполнено(Granted) Тогда
		
		Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыItems.PermanentTemporary) Тогда
				
				// { RGS VShamin 05.10.2015 16:00:09 - 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"'Permanent / temporary' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!",
				//	СтрокаТаблицыItems.Invoice, , , Отказ);
				ТекстОшибки = "'Permanent / temporary' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыItems.Invoice, , , Отказ);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 05.10.2015 16:00:09 - 
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыItems.PSA) Тогда
				
				// { RGS VShamin 05.10.2015 16:02:06 - 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"'PSA' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!",
				//	СтрокаТаблицыItems.Invoice, , , Отказ);
				ТекстОшибки = "'PSA' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыItems.Invoice, , , Отказ);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 05.10.2015 16:02:06 - 
				
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыItems.PermitsRequired) Тогда
				
				// { RGS VShamin 05.10.2015 16:03:06 - 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"'Permits required' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!",
				//	СтрокаТаблицыItems.Invoice, , , Отказ);
				ТекстОшибки = "'Permits required' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыItems.Invoice, , , Отказ);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 05.10.2015 16:03:06 - 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Инвойсы.Количество()
		И ProcessLevel = Справочники.ProcessLevels.RUWE
		И Дата > Дата('20140101') Тогда
		
		// { RGS AGorlenko 12.09.2014 17:01:25 - S-I-0000864
		МассивVirtualAUs = РегистрыСведений.VirtualAUs.ПолучитьVirtualAUs();
		// } RGS AGorlenko 12.09.2014 17:02:15 - S-I-0000864
		
		ТаблицаAUsLegalEntities = ДополнительныеСвойства.ТаблицаAUsLegalEntities;
		
		Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
			
			// { RGS AGorlenko 12.09.2014 17:03:05 - S-I-0000864
			Если МассивVirtualAUs.Найти(СтрокаТаблицыItems.AU) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			// } RGS AGorlenko 12.09.2014 17:03:07 - S-I-0000864
			// { RGS AArsentev 01.08.2017 S-I-0003326
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыItems.InvoiceLine, "SoldTo") = Справочники.SoldTo.НайтиПоКоду("RDL") Тогда
				Продолжить
			КонецЕсли;
			// } RGS AArsentev 01.08.2017 S-I-0003326
			//S-I-0001515
			СтрокаТаблицыAUsLegalEntities = ТаблицаAUsLegalEntities.Найти(СтрокаТаблицыItems.InvoiceLine, "Item");
			
			//Если НЕ ЗначениеЗаполнено(СтрокаТаблицыItems.LegalEntity) Тогда   // S-I-0001515
			Если СтрокаТаблицыAUsLegalEntities <> Неопределено
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыAUsLegalEntities.LegalEntity) Тогда

				// { RGS VShamin 05.10.2015 16:03:58 - 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				//	"'Legal entity' for AU '" + СокрЛП(СтрокаТаблицыItems.AU) + "' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!
				//	|Please contact riet-support@slb.com",
				//	СтрокаТаблицыItems.Invoice, , , Отказ);
				
				
				ТекстОшибки = "'Legal entity' for AU '" + СокрЛП(СтрокаТаблицыItems.AU) + "' in item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "' is empty!
					|Please contact riet-support@slb.com";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыItems.Invoice, , , Отказ);
				ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
				// } RGS VShamin 05.10.2015 16:03:59 - 
				
			КонецЕсли;
			  					
		КонецЦикла;
		
	КонецЕсли;

	Если Инвойсы.Количество() И Не ДополнительныеСвойства.Свойство("Leg7ReportLoading")
		//И (ProcessLevel = Справочники.ProcessLevels.RUWE ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA)  
		И ЗначениеЗаполнено(Granted) Тогда
		
		Для Каждого СтрокаТаблицыItems Из ТаблицаItems Цикл
			
			//Если СтрокаТаблицыItems.PermitsRequired = Перечисления.YesNo.Yes Тогда 
			//	
			//	Если Не ЗначениеЗаполнено(СтрокаТаблицыItems.GuaranteeLetter) Тогда 
			//		ТекстОшибки = "Item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "': Guarantee letter is empty!";
			//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//		ТекстОшибки,
			//		СтрокаТаблицыItems.InvoiceLine, "GuaranteeLetter", , Отказ);
			//	КонецЕсли;
				
				Если СтрокаТаблицыItems.GuaranteeLetter = Перечисления.YesNo.Yes И Не ЗначениеЗаполнено(СтрокаТаблицыItems.MOC) Тогда 
					ТекстОшибки = "Item '" + СокрЛП(СтрокаТаблицыItems.InvoiceLine) + "': MOC# is empty!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтрокаТаблицыItems.InvoiceLine, "MOC", , Отказ);
				КонецЕсли;
				
			//КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура СверитьQtyИNetWeightВInvoiceLinesИParcelLines(Отказ, РежимЗаписи, ТаблицаItems, ТаблицаParcelLines)
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если Инвойсы.Количество() = 0 
		ИЛИ Parcels.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверочнаяТаблица = ТаблицаItems.Скопировать(, "InvoiceLine, Qty, NetWeight");
	ПроверочнаяТаблица.Колонки.Добавить("ParcelLinesQty");
	ПроверочнаяТаблица.Колонки.Добавить("ParcelLinesNetWeight");
	Для Каждого СтрокаТаблицыParcelLines Из ТаблицаParcelLines Цикл
		
		НоваяСтрокаПроверочнойТаблицы = ПроверочнаяТаблица.Добавить();
		НоваяСтрокаПроверочнойТаблицы.InvoiceLine = СтрокаТаблицыParcelLines.InvoiceLine;
		НоваяСтрокаПроверочнойТаблицы.ParcelLinesQty = СтрокаТаблицыParcelLines.Qty;
		НоваяСтрокаПроверочнойТаблицы.ParcelLinesNetWeight = СтрокаТаблицыParcelLines.NetWeight;
		
	КонецЦикла; 
	
	ПроверочнаяТаблица.Свернуть("InvoiceLine", "Qty, ParcelLinesQty, NetWeight, ParcelLinesNetWeight");
	
	Для Каждого СтрокаПроверочнойТаблицы Из ПроверочнаяТаблица Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПроверочнойТаблицы.InvoiceLine) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверочнойТаблицы.Qty <> СтрокаПроверочнойТаблицы.ParcelLinesQty Тогда
			
			// { RGS VShamin 05.10.2015 16:00:09 - 
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			//	"Qty " + СтрокаПроверочнойТаблицы.Qty + " in the ""Invoice line " + СокрЛП(СтрокаПроверочнойТаблицы.InvoiceLine) + """ does not match with Qty " + СтрокаПроверочнойТаблицы.ParcelLinesQty + " in parcel lines!",
			//	ЭтотОбъект);
			ТекстОшибки = "Qty " + СтрокаПроверочнойТаблицы.Qty + " in the ""Invoice line " + СокрЛП(СтрокаПроверочнойТаблицы.InvoiceLine) + """ does not match with Qty " + СтрокаПроверочнойТаблицы.ParcelLinesQty + " in parcel lines!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки, ЭтотОбъект);
			ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
			// } RGS VShamin 05.10.2015 16:00:09 - 
				
			Если ЗначениеЗаполнено(Received) Тогда
				Отказ = Истина;
			КонецЕсли;
				
		КонецЕсли; 
		
		ПроверитьРасхождениеNetWeight(Отказ, СтрокаПроверочнойТаблицы);
		      				
	КонецЦикла; 
	
КонецПроцедуры 

Процедура ПроверитьРасхождениеNetWeight(Отказ, СтрокаПроверочнойТаблицы)
	
	// если вес нетто в инвойсах не указан - выходим
	Если НЕ ЗначениеЗаполнено(СтрокаПроверочнойТаблицы.NetWeight) Тогда
		Возврат;
	КонецЕсли;
	
	// если вес нетто совпадает - выходим
	Если СтрокаПроверочнойТаблицы.NetWeight = СтрокаПроверочнойТаблицы.ParcelLinesNetWeight Тогда
		Возврат;
	КонецЕсли;
	
	// в Туркменистане может быть расхождение, но только в том случае, если вес нетто в парселях не указан
	Если ProcessLevel = Справочники.ProcessLevels.TM
		И НЕ ЗначениеЗаполнено(СтрокаПроверочнойТаблицы.ParcelLinesNetWeight) Тогда
		Возврат;
	КонецЕсли;
	
	// { RGS VShamin 05.10.2015 16:10:05 - 
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	"Net weight " + СтрокаПроверочнойТаблицы.NetWeight + " in Invoice line '" + СокрЛП(СтрокаПроверочнойТаблицы.InvoiceLine) + "' differs from net weight " + СтрокаПроверочнойТаблицы.ParcelLinesNetWeight + " in parcel lines!",
	//	ЭтотОбъект);
	ТекстОшибки = "Net weight " + СтрокаПроверочнойТаблицы.NetWeight + " in Invoice line '" + СокрЛП(СтрокаПроверочнойТаблицы.InvoiceLine) + "' differs from net weight " + СтрокаПроверочнойТаблицы.ParcelLinesNetWeight + " in parcel lines!";
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Net weight " + СтрокаПроверочнойТаблицы.NetWeight + " in Invoice line '" + СокрЛП(СтрокаПроверочнойТаблицы.InvoiceLine) + "' differs from net weight " + СтрокаПроверочнойТаблицы.ParcelLinesNetWeight + " in parcel lines!",
		ЭтотОбъект);
	ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
	// } RGS VShamin 05.10.2015 16:10:05 - 
				 			
	Если ЗначениеЗаполнено(Received) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеПрисоединенныхФайлов(Отказ, РежимЗаписи, ВыборкаПрисоединенныхФайлов)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Granted) И Не WithoutGreenLight Тогда
        Возврат;
 	КонецЕсли;
	    	
	Если ВыборкаПрисоединенныхФайлов.Количество() = 0 Тогда
		// { RGS VShamin 05.10.2015 16:12:11 - 
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//	"There are no attached files to this DOC or to linked Invoices!",
		//	ЭтотОбъект, , , Отказ);
		ТекстОшибки = "There are no attached files to this DOC or to linked Invoices!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, , , Отказ);
		ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, Истина);
		// } RGS VShamin 05.10.2015 16:12:12 - 
	КонецЕсли;
	
КонецПроцедуры

// { RGS EParshina 19.10.2018 21:08:50 - S-I-0006178
Функция DocВключенВПоставку()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку КАК КонсолидированныйПакетЗаявокНаПеревозку
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозку.Ссылка = &Ссылка
	|	И КонсолидированныйПакетЗаявокНаПеревозку.Ссылка В
	|			(ВЫБРАТЬ
	|				ПоставкаУпаковочныеЛисты.УпаковочныйЛист КАК УпаковочныйЛист
	|			ИЗ
	|				Документ.Поставка.УпаковочныеЛисты КАК ПоставкаУпаковочныеЛисты
	|			ГДЕ
	|				ПоставкаУпаковочныеЛисты.Ссылка.CollectedFromPort <> ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// { RGS EParshina 19.10.2018 21:08:50 - S-I-0006178
Процедура ПроверитьЗаполнитьWarehouseTo(Отказ)	
	Если DocВключенВПоставку() Тогда
		Возврат;
	КонецЕсли;	
	СоответствиеMotWHTo = Новый Соответствие;
	СоответствиеMotWHTo.Вставить(Справочники.MOTs.AIR, Справочники.Warehouses.НайтиПоКоду("RUS_MJRM"));
	СоответствиеMotWHTo.Вставить(Справочники.MOTs.НайтиПоКоду("SEA"), Справочники.Warehouses.НайтиПоКоду("RUS_SPBM"));
	ЗакрепленныйСклад = Справочники.Warehouses.НайтиПоКоду("RUS_PSMJ");
	СписокProjectMobilization = Новый Массив;
	СписокProjectMobilization.Добавить(Справочники.ProjectMobilization.НайтиПоКоду("000000634")); //RCA Stock up project
	СписокProjectMobilization.Добавить(Справочники.ProjectMobilization.НайтиПоКоду("000000635")); //RCA Stock up project_WS_old orders
	СписокProjectMobilization.Добавить(Справочники.ProjectMobilization.НайтиПоКоду("000000640")); //RCA Stock up project_FI
	СписокProjectMobilization.Добавить(Справочники.ProjectMobilization.НайтиПоКоду("000000643")); //RCA Stock up project_REW assets
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Parcel
		|ПОМЕСТИТЬ Parcels
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК КонсолидированныйПакетЗаявокНаПеревозкуParcels
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуParcels.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ParcelsДетали.СтрокаИнвойса.ProjectMobilization КАК ProjectMobilization,
		|	Parcels.Parcel КАК Parcel
		|ИЗ
		|	Справочник.Parcels.Детали КАК ParcelsДетали
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Parcels КАК Parcels
		|		ПО ParcelsДетали.Ссылка = Parcels.Parcel
		|ИТОГИ ПО
		|	Parcel";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаписиПарсели = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаЗаписиПарсели.Следующий() Цикл
		ЕстьПрочие = Ложь;
		ЕстьИзСписка = Ложь;
		мWHTo = Неопределено;
		ТекущийПарсель = ВыборкаЗаписиПарсели.Parcel;
		ВыборкаДетальныеЗаписи = ВыборкаЗаписиПарсели.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СписокProjectMobilization.Найти(ВыборкаДетальныеЗаписи.ProjectMobilization) = Неопределено Тогда
				ЕстьПрочие = Истина;
			Иначе
				ЕстьИзСписка = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИзСписка Тогда
			Если ЕстьПрочие Тогда
				мWHTo = СоответствиеMotWHTo.Получить(MOT);		
			Иначе
				мWHTo = ЗакрепленныйСклад;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(мWHTo) Тогда
			WarehouseToParcel = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПарсель, "WarehouseTo");
			Если WarehouseToParcel <> мWHTo Тогда
				ОбъектParcel = ТекущийПарсель.ПолучитьОбъект();
				ОбъектParcel.WarehouseTo = мWHTo;
				Попытка 
					ОбъектParcel.Записать();
				Исключение
					ТекстСообщения = "Не удалось изменить Warehouse to в ""Parcel " + ОбъектParcel + ". См. ошибки выше. " + ОписаниеОшибки();
					ТекстСообщенияДляДопСвойств = "Не удалось изменить Warehouse to в ""Parcel " + ОбъектParcel + ". См. ошибки выше.";
					ПоместитьТекстОшибкиВДополнительныеСвойства(?(ОбъектParcel.ДополнительныеСвойства.Свойство("ОписаниеОшибок"), ОбъектParcel.ДополнительныеСвойства.ОписаниеОшибок + Символы.ПС, "") + ТекстСообщенияДляДопСвойств);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						ОбъектParcel,,, Отказ);
					КонецПопытки;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьWarehouseFromВParcels(Отказ, ТаблицаРеквизитовShipment)
	
	МассивParcels = Parcels.ВыгрузитьКолонку("Parcel");	
	
	WarehouseFrom = Справочники.Warehouses.ПустаяСсылка();
	Если НЕ ЭтоНовый()
		И ТаблицаРеквизитовShipment.Количество() > 0
		И ЗначениеЗаполнено(ТаблицаРеквизитовShipment[0].DefaultWarehouse) Тогда 
		WarehouseFrom = ТаблицаРеквизитовShipment[0].DefaultWarehouse;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(WarehouseFrom) Тогда
		Возврат;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивParcels", МассивParcels);
	Запрос.УстановитьПараметр("WarehouseFrom", WarehouseFrom);
	Запрос.Текст = 
		// { RGS AGorlenko 25.12.2014 19:43:37 - S-I-0000983 - если парсель уже в трипе, то не перезаполняем Wh-from
		//"ВЫБРАТЬ
		//|	Parcels.Ссылка КАК Parcel
		//|ИЗ
		//|	Справочник.Parcels КАК Parcels
		//|ГДЕ
		//|	Parcels.Ссылка В(&МассивParcels)
		//|	И Parcels.WarehouseFrom <> &WarehouseFrom";
		"ВЫБРАТЬ
		|	Parcels.Ссылка КАК Parcel
		|ПОМЕСТИТЬ ВТ_Парсели
		|ИЗ
		|	Справочник.Parcels КАК Parcels
		|ГДЕ
		|	Parcels.Ссылка В(&МассивParcels)
		|	И Parcels.WarehouseFrom <> &WarehouseFrom
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Parcel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Парсели.Parcel
		|ИЗ
		|	ВТ_Парсели КАК ВТ_Парсели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Trip.Parcels КАК TripParcels
		|		ПО ВТ_Парсели.Parcel = TripParcels.Parcel
		|			И (НЕ TripParcels.Ссылка.ПометкаУдаления)
		|ГДЕ
		|	TripParcels.Parcel ЕСТЬ NULL ";
		// } RGS AGorlenko 25.12.2014 19:43:39 - S-I-0000983 - если парсель уже в трипе, то не перезаполняем Wh-from
		 	
	Выборка = Запрос.Выполнить().Выбрать();        
	
	Пока Выборка.Следующий() Цикл
		
		ParcelОбъект = Выборка.Parcel.ПолучитьОбъект();
		
		ParcelОбъект.WarehouseFrom = WarehouseFrom;
							
		Попытка 
			ParcelОбъект.Записать();
		Исключение
			ТекстСообщения = "Не удалось изменить Warehouse from в ""Parcel " + ParcelОбъект + ". См. ошибки выше. " + ОписаниеОшибки();
			ТекстСообщенияДляДопСвойств = "Не удалось изменить Warehouse from в ""Parcel " + ParcelОбъект + ". См. ошибки выше.";
			ПоместитьТекстОшибкиВДополнительныеСвойства(?(ParcelОбъект.ДополнительныеСвойства.Свойство("ОписаниеОшибок"), ParcelОбъект.ДополнительныеСвойства.ОписаниеОшибок + Символы.ПС, "") + ТекстСообщенияДляДопСвойств);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ParcelОбъект,,, Отказ);
		КонецПопытки;
		
	КонецЦикла;
	   		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьМассивыИзменяемыхParcelsИInvoicesВДополнительныеСвойства(ВыборкаСтарыхРеквизитовШапки, МассивСтарыхParcels, МассивСтарыхInvoices)
	
	мМассивИзменяемыхИнвойсов = Новый Массив;
	мМассивИзменяемыхParcels = Новый Массив;
	мОтменить = Истина;
	
	Если ЭтоНовый() Тогда
		
		Если Отменен Тогда
			мМассивИзменяемыхИнвойсов = Инвойсы.ВыгрузитьКолонку("Инвойс");
			мМассивИзменяемыхParcels = Parcels.ВыгрузитьКолонку("Parcel");
		КонецЕсли;
		
	Иначе
				
		// Если галочку Отменен сняли
		Если ВыборкаСтарыхРеквизитовШапки.Отменен И НЕ Отменен Тогда
						
			мМассивИзменяемыхИнвойсов = Инвойсы.ВыгрузитьКолонку("Инвойс");
			мМассивИзменяемыхParcels = Parcels.ВыгрузитьКолонку("Parcel");
			мОтменить = Ложь;
			
		// Если галочку поставили или с ней ничего не делали
		Иначе
						
			МассивИнвойсов = Инвойсы.ВыгрузитьКолонку("Инвойс");
			МассивParcels = Parcels.ВыгрузитьКолонку("Parcel");
			
			Если Отменен Тогда
				
				// Если DOC остается отмененным
				Если ВыборкаСтарыхРеквизитовШапки.Отменен Тогда
					
					// Нужно отменить все те инвойсы и Parcels, которые добавили только что
					мМассивИзменяемыхИнвойсов = РГСофтКлиентСервер.ВычестьМассивы(МассивИнвойсов, МассивСтарыхInvoices);
					мМассивИзменяемыхParcels = РГСофтКлиентСервер.ВычестьМассивы(МассивParcels, МассивСтарыхParcels);
					
				// Если галочку поставили
				Иначе
					
					// Нужно отменить все инвойсы и Parcels, даже те, которые только что удалили из табличной части
					мМассивИзменяемыхИнвойсов = РГСофтКлиентСервер.СложитьМассивы(МассивИнвойсов, МассивСтарыхInvoices);
					мМассивИзменяемыхParcels = РГСофтКлиентСервер.СложитьМассивы(МассивParcels, МассивСтарыхParcels);
					
				КонецЕсли;
				
			// Если галочка не изменялась
			Иначе
				
				// Нужно отменить все удаленные из табличных частей инвойсы и Parcels
				мМассивИзменяемыхИнвойсов = РГСофтКлиентСервер.ВычестьМассивы(МассивСтарыхInvoices, МассивИнвойсов);
				мМассивИзменяемыхParcels = РГСофтКлиентСервер.ВычестьМассивы(МассивСтарыхParcels, МассивParcels);
							
			КонецЕсли;
								
		КонецЕсли;	
		
	КонецЕсли;
	
	// Отменим только те инвойсы и Parcels, которых нет в других DOC
	Если мОтменить Тогда
		
		Если мМассивИзменяемыхИнвойсов.Количество() ИЛИ мМассивИзменяемыхParcels.Количество() Тогда
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("МассивИнвойсов", мМассивИзменяемыхИнвойсов);
			Запрос.УстановитьПараметр("МассивParcels", мМассивИзменяемыхParcels);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс
				|ИЗ
				|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
				|ГДЕ
				|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс В(&МассивИнвойсов)
				|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка <> &Ссылка
				|	И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	DOCParcels.Parcel
				|ИЗ
				|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Parcels КАК DOCParcels
				|ГДЕ
				|	DOCParcels.Parcel В(&МассивParcels)
				|	И DOCParcels.Ссылка <> &Ссылка
				|	И (НЕ DOCParcels.Ссылка.Отменен)";
				
			Результаты = Запрос.ВыполнитьПакет();
			
			МассивИнвойсовВДругихDOC = Результаты[0].Выгрузить().ВыгрузитьКолонку("Инвойс");
			МассивParcelsВДругихDOC = Результаты[1].Выгрузить().ВыгрузитьКолонку("Parcel");
			
			Если МассивИнвойсовВДругихDOC.Количество() Тогда
				мМассивИзменяемыхИнвойсов = РГСофтКлиентСервер.ВычестьМассивы(мМассивИзменяемыхИнвойсов, МассивИнвойсовВДругихDOC);
			КонецЕсли;
			
			Если МассивParcelsВДругихDOC.Количество() Тогда
				мМассивИзменяемыхParcels = РГСофтКлиентСервер.ВычестьМассивы(мМассивИзменяемыхParcels, МассивParcelsВДругихDOC);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МассивИзменяемыхИнвойсов", мМассивИзменяемыхИнвойсов);
	ДополнительныеСвойства.Вставить("МассивИзменяемыхParcels", мМассивИзменяемыхParcels);
	ДополнительныеСвойства.Вставить("Отменить", мОтменить);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьИзменения(Отказ, ВыборкаСтарыхРеквизитовШапки, МассивСтарыхInvoices, МассивСтарыхParcels, ТаблицаСтарыхManualStatuses)

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзменений = "";
	
	МетаданныеОбъекта = Метаданные();	
	СтрокаИсключаемыхРеквизитов = "ИмпортЭкспорт, GOLD, TMS, ConsignTo, Seller, СтатусВажности, InvoiceList, FirstRequested, CCAFirstResponse, CurrentStage, CurrentStatus, CurrentStatusDate, WithoutGreenLight, CreatedBy, CreationDate, ModifiedBy, ModificationDate, POList, ProcessLevel, PiecesQty, SegmentsList, SanctionedItems, CCAReference, CCA_Coordinator, NumberOfLines, NumberOfUniqueLines";
	ТекстИзмененийШапки = ImportExportСервер.ПолучитьТекстИзмененияШапки(
		ЭтотОбъект,
		ВыборкаСтарыхРеквизитовШапки,
		МетаданныеОбъекта.СтандартныеРеквизиты,
		МетаданныеОбъекта.Реквизиты,
		СтрокаИсключаемыхРеквизитов);
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийШапки);	
	
	ТекстИзмененийИнвойсов = ImportExportСервер.ПолучитьТекстИзмененияМассива(
		Инвойсы.ВыгрузитьКолонку("Инвойс"),
		МассивСтарыхInvoices,
		"Invoices:");	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийИнвойсов);
	
	ТекстИзмененийParcels = ImportExportСервер.ПолучитьТекстИзмененияМассива(
		Parcels.ВыгрузитьКолонку("Parcel"),
		МассивСтарыхParcels,
		"Parcels:");	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийParcels);
	
	ТекстИзмененийManualStatuses = ImportExportСервер.ПолучитьТекстИзмененияТабличнойЧасти(
		ЭтотОбъект.ManualStatuses,
		ТаблицаСтарыхManualStatuses,
		МетаданныеОбъекта.ТабличныеЧасти.ManualStatuses);	
	ТекстИзменений = ImportExportСервер.ДобавитьВТекстИзмененийБлок(ТекстИзменений, ТекстИзмененийManualStatuses);
	
	Если ТекстИзменений = "" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.DOCLogs.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.LogTo = Ссылка;
	МенеджерЗаписи.Date	= ТекущаяДата();	
	МенеджерЗаписи.LogType	= Справочники.LogTypes.ИзменениеРеквизитов;
	МенеджерЗаписи.User	= ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Text	= ТекстИзменений;	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

	
////////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ     

Процедура ПриЗаписи(Отказ)
	
	Если мОбработкаВажностиРегламентнымЗаданием
		ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	        		
	ЗарегистрироватьДляSubscriptions(Отказ);
	 		
	// { RGS AArsentev S-I-0001747 20.10.2016 16:17:00
	ТекущаяДата = ТекущаяДата();
	КолВерсий = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(Ссылка);
	Если КолВерсий = Неопределено Тогда
		ЗапишемПервуюВерсию();
	КонецЕсли;
	// } RGS AArsentev S-I-0001747 20.10.2016 16:17:00
	
КонецПроцедуры

Процедура ЗарегистрироватьДляSubscriptions(Отказ)
	
	// Если уже есть поставка с заполненными стадиями - значит ничего регистрировать не нужно
	// А нужно удалить существующие записи в регистре DOCs, так как за подписку теперь отвечает Shipment
	Если ДополнительныеСвойства.ТаблицаРеквизитовShipment <> Неопределено
		И ДополнительныеСвойства.ТаблицаРеквизитовShipment.Количество() Тогда
		
		РеквизитыShipment = ДополнительныеСвойства.ТаблицаРеквизитовShipment[0];
		Если ЗначениеЗаполнено(РеквизитыShipment.ETD)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.ATD)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.ETA)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.ATA)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.InCustoms)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.Cleared)
			ИЛИ ЗначениеЗаполнено(РеквизитыShipment.CollectedFromPort) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			МенеджерЗаписи = РегистрыСведений.DOCsForSubscriptions.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.DOC = Ссылка;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				Попытка
					МенеджерЗаписи.Удалить();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Не удалось отменить регистрацию """ + ЭтотОбъект + """ для подписчиков PO tracking: " + ОписаниеОшибки(),
						ЭтотОбъект,,, Отказ);
				КонецПопытки;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим - нужно ли регистрировать DOC для подписчиков PO tracking
	
	// Для этого определим значение старых реквизитов
	СтарыйRequested = '00010101';
	СтарыйReceived = '00010101';
	СтарыйGranted = '00010101';
	
	Если ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
		
		ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
		СтарыйRequested = ВыборкаСтарыхРеквизитовШапки.Requested;
		СтарыйReceived = ВыборкаСтарыхРеквизитовШапки.Received;
		СтарыйGranted = ВыборкаСтарыхРеквизитовШапки.Granted;
		
	КонецЕсли;
	
	Stage = Перечисления.DOCStages.ПустаяСсылка();
	StageDate = '00010101';
	Если ЗначениеЗаполнено(Granted) Тогда
		
		Если Granted <> СтарыйGranted Тогда
			Stage = Перечисления.DOCStages.Granted;
			StageDate = Granted;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Received) Тогда
		
		Если Received <> СтарыйReceived
			ИЛИ Granted <> СтарыйGranted Тогда
			Stage = Перечисления.DOCStages.Received;
			StageDate = Received;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Requested) Тогда
		
		Если Requested <> СтарыйRequested
			ИЛИ Received <> СтарыйReceived 
			ИЛИ Granted <> СтарыйGranted Тогда
			Stage = Перечисления.DOCStages.Requested;
			StageDate = Requested;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Stage) Тогда 	
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.DOCsForSubscriptions.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.DOC = Ссылка;
		МенеджерЗаписи.Stage = Stage;
		МенеджерЗаписи.StageDate = StageDate;
		МенеджерЗаписи.LastModified = ТекущаяДата();
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось зарегистрировать """ + ЭтотОбъект + """ для подписчиков PO tracking: " + ОписаниеОшибки(),
				ЭтотОбъект,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
     

////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//			
//	NEK = Неопределено;
//	ВыборкаСтарыхРеквизитовШапки = ДополнительныеСвойства.ВыборкаСтарыхРеквизитовШапки;
//	
//	// Примем решение о регистрации DOC для удаления
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено 
//		И ЗначениеЗаполнено(ВыборкаСтарыхРеквизитовШапки.Requested)
//		И НЕ ВыборкаСтарыхРеквизитовШапки.Отменен Тогда
//		
//		// Получим агента NEK
//		NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//			
//		Если ВыборкаСтарыхРеквизитовШапки.CCA = NEK
//			И (CCA <> NEK ИЛИ НЕ ЗначениеЗаполнено(Requested) ИЛИ Отменен) Тогда
//			
//			CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//			// ДЕРЕГИСТРИРОВАТЬ ВСЕ ОСТАЛЬНЫЕ ЗАВИСИМЫЕ ОБЪЕКТЫ. А МОЖЕТ БЫТЬ ОНИ САМИ СПРАВЯТСЯ?
//			Возврат;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Примем решение о регистрации DOC и зависимых объектов
//	
//	// Если CCA не заполнен - значит ничего регистрировать не придется - выходим.
//	Если НЕ ЗначениеЗаполнено(CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим Agent NEK
//	Если НЕ ЗначениеЗаполнено(NEK) Тогда
//		
//		NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	// Если это не NEK - то и в NFS он не нужен
//	Если CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если Green light еще не запрошен - то и в NFS он не нужен
//	Если НЕ ЗначениеЗаполнено(Requested) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтруктураСтарыхРеквизитовШапки = СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки);
//	
//	// Определим изменились ли табличные части
//	МассивInvoices = Инвойсы.ВыгрузитьКолонку("Инвойс");
//	МассивParcels = Parcels.ВыгрузитьКолонку("Parcel");
//	Если ЭтоНовый() Тогда
//		МассивНовыхInvoices = МассивInvoices;
//		МассивУдаленныхInvoices = Новый Массив;
//		МассивНовыхParcels = МассивParcels;
//		МассивУдаленныхParcels = Новый Массив;
//	Иначе
//		МассивНовыхInvoices = РГСофтКлиентСервер.ВычестьМассивы(МассивInvoices, ДополнительныеСвойства.МассивСтарыхInvoices);
//		МассивУдаленныхInvoices = РГСофтКлиентСервер.ВычестьМассивы(ДополнительныеСвойства.МассивСтарыхInvoices, МассивInvoices);
//		МассивНовыхParcels = РГСофтКлиентСервер.ВычестьМассивы(МассивParcels, ДополнительныеСвойства.МассивСтарыхParcels);
//		МассивУдаленныхParcels = РГСофтКлиентСервер.ВычестьМассивы(ДополнительныеСвойства.МассивСтарыхParcels, МассивParcels);
//	КонецЕсли;
//	
//	// Примем решение о регистрации DOC
//	Если CCA <> СтруктураСтарыхРеквизитовШапки.CCA
//		ИЛИ ConsignTo <> СтруктураСтарыхРеквизитовШапки.ConsignTo
//		ИЛИ Urgency <> СтруктураСтарыхРеквизитовШапки.Urgency
//		ИЛИ СокрЛП(Номер) <> СокрЛП(СтруктураСтарыхРеквизитовШапки.Номер)
//		ИЛИ FirstRequested <> СтруктураСтарыхРеквизитовШапки.FirstRequested
//		ИЛИ Requested <> СтруктураСтарыхРеквизитовШапки.Requested
//		ИЛИ CCAFirstResponse <> СтруктураСтарыхРеквизитовШапки.CCAFirstResponse
//		ИЛИ Received <> СтруктураСтарыхРеквизитовШапки.Received
//		ИЛИ MOT <> СтруктураСтарыхРеквизитовШапки.MOT 
//		ИЛИ POD <> СтруктураСтарыхРеквизитовШапки.POD
//		ИЛИ RequestedPOA <> СтруктураСтарыхРеквизитовШапки.RequestedPOA
//		ИЛИ ИмпортЭкспорт <> СтруктураСтарыхРеквизитовШапки.ИмпортЭкспорт
//		ИЛИ МассивНовыхInvoices.Количество()
//		ИЛИ МассивУдаленныхInvoices.Количество()
//		ИЛИ МассивНовыхParcels.Количество()
//		ИЛИ МассивУдаленныхParcels.Количество() Тогда
//		
//		CustomsСервер.ДобавитьВПолучателиУзелNEK(ЭтотОбъект, Отказ);
//		
//	КонецЕсли;
//	
//	// Примерм решение о регистрации зависимых объектов (Invoice lines и Parcels)
//	InvoicesДляРегистрацииInvoiceLines = Новый Массив;
//	ParcelsДляРегистрации = Новый Массив;
//	
//	// Если заполнили CCA или Requested - надо зарегистрировать все Invoice lines и Parcels
//	Если CCA <> СтруктураСтарыхРеквизитовШапки.CCA
//		ИЛИ ЗначениеЗаполнено(Requested) И НЕ ЗначениеЗаполнено(СтруктураСтарыхРеквизитовШапки.Requested) Тогда
//		
//		InvoicesДляРегистрацииInvoiceLines = Инвойсы.ВыгрузитьКолонку("Инвойс");
//		ParcelsДляРегистрации = Parcels.ВыгрузитьКолонку("Parcel");
//		
//	Иначе
//		
//		// Иначе регистрируем только новые
//		InvoicesДляРегистрацииInvoiceLines = МассивНовыхInvoices;
//		ParcelsДляРегистрации = МассивНовыхParcels;
//		
//	КонецЕсли;
//	
//	ЗарегистрироватьЗависимыеОбъектыДляОбменаСNFS(Отказ, InvoicesДляРегистрацииInvoiceLines, ParcelsДляРегистрации);
//	
//КонецПроцедуры

//Функция СформироватьСтруктуруСтарыхРеквизитовШапки(ВыборкаСтарыхРеквизитовШапки)
//	
//	СтруктураСтарыхРеквизитовШапки = Новый Структура;
//	СтруктураСтарыхРеквизитовШапки.Вставить("ConsignTo", Справочники.ConsignTo.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("Urgency", Перечисления.Urgencies.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("Номер", "");
//	СтруктураСтарыхРеквизитовШапки.Вставить("FirstRequested", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("Requested", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("CCAFirstResponse", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("Received", '00010101');
//	СтруктураСтарыхРеквизитовШапки.Вставить("CCA", Справочники.Agents.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("MOT", Справочники.MOTs.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("POD", Справочники.CountriesHUBs.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("RequestedPOA", Справочники.SeaAndAirPorts.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("ИмпортЭкспорт", Перечисления.ИмпортЭкспорт.ПустаяСсылка());
//	СтруктураСтарыхРеквизитовШапки.Вставить("POList", "");
//	
//	Если ВыборкаСтарыхРеквизитовШапки <> Неопределено Тогда
//		ЗаполнитьЗначенияСвойств(СтруктураСтарыхРеквизитовШапки, ВыборкаСтарыхРеквизитовШапки);
//	КонецЕсли;
//	
//	Возврат СтруктураСтарыхРеквизитовШапки;
//	
//КонецФункции

//Процедура ЗарегистрироватьЗависимыеОбъектыДляОбменаСNFS(Отказ, InvoicesДляРегистрацииInvoiceLines, ParcelsДляРегистрации)
//	
//	Если InvoicesДляРегистрацииInvoiceLines.Количество() = 0
//		И ParcelsДляРегистрации.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	УзелNEK = CustomsСервер.ПолучитьУзелNEK(ЭтотОбъект, Отказ);
//	Если НЕ ЗначениеЗаполнено(УзелNEK) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого Parcel Из ParcelsДляРегистрации Цикл
//		
//		CustomsСервер.ЗарегистрироватьДляОбменаСсылку(УзелNEK, Parcel, ЭтотОбъект, Отказ);
//		
//		Если Отказ Тогда
//			Возврат;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если InvoicesДляРегистрацииInvoiceLines.Количество() Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("Invoices", InvoicesДляРегистрацииInvoiceLines);
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	СтрокиИнвойса.Ссылка
//			|ИЗ
//			|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
//			|ГДЕ
//			|	(НЕ СтрокиИнвойса.ПометкаУдаления)
//			|	И СтрокиИнвойса.Инвойс В(&Invoices)";
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			CustomsСервер.ЗарегистрироватьДляОбменаСсылку(УзелNEK, Выборка.Ссылка, ЭтотОбъект, Отказ);
//		
//			Если Отказ Тогда
//				Возврат;
//			КонецЕсли;
//		
//		КонецЦикла;
//		
//	КонецЕсли;
//					
//КонецПроцедуры

Процедура ПоместитьТекстОшибкиВДополнительныеСвойства(ТекстОшибки, СообщениеRIET = Ложь)
	
	ИмяСвойства = ?(СообщениеRIET, "ОписаниеОшибокRIET", "ОписаниеОшибок");
	
	Если НЕ ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, "");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(ИмяСвойства, ДополнительныеСвойства[ИмяСвойства] + ТекстОшибки + Символы.ПС);
	
КонецПроцедуры

// { RGS VShamin 14.04.2016 16:49:54 - S-I-0001602
Процедура rgsВерсионированиеDOC(Отказ, ИзменилсяСоставИнвойсов)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяДата = ТекущаяДата();
	ВерсияDOC = rgsПолучитьАктуальнуюВерсиюDOC(ТекущаяДата, Ссылка);
	
	Если ВерсияDOC = 0 ИЛИ ИзменилсяСоставИнвойсов Тогда
		Версия = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(Ссылка);
		Если Версия = Неопределено Тогда
			Версия = 0;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Отбор.DOC.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДата;
		Запись.Version = Версия + 1;
		Запись.DOC = Ссылка;
		Запись.CCA = CCA;
		Запись.MOT = MOT;
		Запись.Received = Received;
		Запись.Accepted = Accepted;
		Запись.Requested = Requested;
		// { RGS DKazanskiy 24.07.2018 15:50:12 - S-I-0005657
		Запись.POA 		 = RequestedPOA;
		// } RGS DKazanskiy 24.07.2018 15:50:24 - S-I-0005657
		Запись.ИзменилсяСостав = ИзменилсяСоставИнвойсов;	
		НаборЗаписей.Записать();

	// { RGS DKazanskiy 24.07.2018 15:52:35 - S-I-0005657
	ИначеЕсли ВерсияDOC.CCA <> CCA 
			ИЛИ ВерсияDOC.MOT <> MOT
			ИЛИ ВерсияDOC.Accepted <> Accepted 
			ИЛИ ВерсияDOC.Received <> Received 
			ИЛИ ВерсияDOC.Requested <> Requested
			ИЛИ ВерсияDOC.POA <> RequestedPOA
			// } RGS DKazanskiy 24.07.2018 15:52:38 - S-I-0005657
			Тогда
	// } RGS AGorlenko 26.10.2017 14:31:45 - доработка версионирования

		НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Отбор.DOC.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДата;
		// { RGS AGorlenko 20.10.2017 11:52:03 - учитываем откат на предыдущую версию
		//Запись.Version = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(Ссылка);
		Запись.Version = ?(ТекущаяВерсияДокумента > 0, ТекущаяВерсияДокумента, Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьМаксимальнуюВерсию(Ссылка) + 1);
		Если ТекущаяВерсияДокумента > 0 Тогда // восстановили версию
			Запись.Version = ТекущаяВерсияДокумента;
		ИначеЕсли ВерсияDOC.CCA = CCA И ВерсияDOC.MOT = MOT
			// { RGS DKazanskiy 26.07.2018 10:19:18 - 
			И ВерсияDOC.POA = RequestedPOA
			И ВерсияDOC.Requested = Requested
			// } RGS DKazanskiy 26.07.2018 10:19:20 - 
			Тогда// версия прежняя
			Запись.Version = ВерсияDOC.Version;
		Иначе
			Запись.Version = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьМаксимальнуюВерсию(Ссылка) + 1;
		КонецЕсли;
		// } RGS AGorlenko 20.10.2017 11:52:18 - учитываем откат на предыдущую версию
		Запись.DOC = Ссылка;
		Запись.CCA = CCA;
		Запись.MOT = MOT;
		Запись.Received = Received;
		Запись.Accepted = Accepted;
		Запись.Requested = Requested;
		// { RGS DKazanskiy 24.07.2018 15:54:27 - S-I-0005657
		Запись.POA = RequestedPOA;
		// } RGS DKazanskiy 24.07.2018 15:54:29 - S-I-0005657
		Запись.ИзменилсяСостав = ИзменилсяСоставИнвойсов;	
		НаборЗаписей.Записать();

	КонецЕсли; 

КонецПроцедуры // } RGS VShamin 14.04.2016 16:49:54 - S-I-0001602

// { RGS VShamin 14.04.2016 16:49:54 - S-I-0001602
Функция rgsПолучитьАктуальнуюВерсиюDOC(ТекущаяДата, DOC)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросСамаяПоследняяВерсия = Новый Запрос;
	ЗапросСамаяПоследняяВерсия.Текст = "ВЫБРАТЬ
	                                   |	DOCVersionsСрезПоследних.Version КАК Version,
	                                   |	DOCVersionsСрезПоследних.CCA КАК CCA,
	                                   |	DOCVersionsСрезПоследних.MOT КАК MOT,
	                                   |	DOCVersionsСрезПоследних.Received КАК Received,
	                                   |	DOCVersionsСрезПоследних.Accepted КАК Accepted,
	                                   |	DOCVersionsСрезПоследних.Requested КАК Requested,
	                                   |	DOCVersionsСрезПоследних.Период КАК Период,
	                                   |	DOCVersionsСрезПоследних.DOC КАК DOC,
	                                   |	DOCVersionsСрезПоследних.POA
	                                   |ИЗ
	                                   |	РегистрСведений.DOCVersions.СрезПоследних(, DOC = &DOC) КАК DOCVersionsСрезПоследних";
	ЗапросСамаяПоследняяВерсия.УстановитьПараметр("DOC",DOC);
	РезультатПоследняяВерсия =  ЗапросСамаяПоследняяВерсия.Выполнить();
	Если РезультатПоследняяВерсия.Пустой() Тогда
		Возврат 0; 
	Иначе
		Выборка = РезультатПоследняяВерсия.Выбрать();
		Выборка.Следующий();
		
		// { RGS AGorlenko 20.10.2017 12:59:34 - для отката на предыдущую версию так делать не правильно
		//Если Выборка.MOT <> MOT ИЛИ Выборка.CCA <> CCA Тогда
		//	Возврат 0
		//КонецЕсли;
		// } RGS AGorlenko 20.10.2017 12:59:55 - для отката на предыдущую версию так делать не правильно
		
		ЗапросДатаИзмененияСостава = новый запрос;
		ЗапросДатаИзмененияСостава.Текст = "ВЫБРАТЬ
		|	DOCVersionsСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.DOCVersions.СрезПоследних(
		|			,
		|			DOC = &DOC
		|				И ИзменилсяСостав) КАК DOCVersionsСрезПоследних";
		ЗапросДатаИзмененияСостава.УстановитьПараметр("DOC",DOC);
		РезДатаИзмененияСостава = ЗапросДатаИзмененияСостава.Выполнить().Выгрузить();
		Если РезДатаИзмененияСостава.Количество()>0 тогда
			ДатаНачалаСреза = РезДатаИзмененияСостава[0].Период; 
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	DOCVersions.DOC КАК DOC,
		               |	DOCVersions.Version КАК Version,
		               |	DOCVersions.Accepted,
		               |	DOCVersions.Received,
		               |	DOCVersions.Requested,
		               |	DOCVersions.MOT,
		               |	DOCVersions.CCA,
		               |	DOCVersions.POA
		               |ИЗ
		               |	РегистрСведений.DOCVersions КАК DOCVersions
		               |ГДЕ
		               |	DOCVersions.DOC = &DOC";	
		Запрос.УстановитьПараметр("DOC", DOC);

		Если РезДатаИзмененияСостава.Количество()>0 тогда
			Запрос.УстановитьПараметр("Дата1", ДатаНачалаСреза);
			Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
			Запрос.Текст = Запрос.Текст + " И DOCVersions.Период МЕЖДУ &Дата1 И &Дата2 УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
		Иначе
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО DOCVersions.Период УБЫВ";
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;

КонецФункции // } RGS VShamin 14.04.2016 16:49:54 - S-I-0001602

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияInternationalFactCosts(Отказ);
	
	// { RGS AArsentev 24.08.2017
	СообщениеОбОшибке = Документы.КонсолидированныйПакетЗаявокНаПеревозку.ПроверитьApprove(ЭтотОбъект);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) И 
		Документы.КонсолидированныйПакетЗаявокНаПеревозку.ЕстьМатериалы(ЭтотОбъект) И НЕ GL_FromSegment Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("non-critical error: " + СообщениеОбОшибке, ЭтотОбъект);
	КонецЕсли;
	// } RGS AArsentev 24.08.2017
		
КонецПроцедуры

Процедура СформироватьДвиженияInternationalFactCosts(Отказ)
	
	// регистр International Fact Costs   	
	// распределяем суммы по строкам пропорционально стоимости

	УстановитьПривилегированныйРежим(Истина);
	 		
	ДвиженияInternationalFactCosts = Движения.InternationalAndDomesticFactCosts;
	
	ДвиженияInternationalFactCosts.Записывать = Истина;
	ДвиженияInternationalFactCosts.Очистить();
	
	Если Инвойсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СurrencyUSD = Справочники.Валюты.НайтиПоКоду("840");
	ИсключаемыеИзЗатратERPTreatments = ImportExportСерверПовтИспСеанс.ПолучитьИсключаемыеИзЗатратERPTreatments();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Invoices", Инвойсы.ВыгрузитьКолонку("Инвойс"));
	Запрос.УстановитьПараметр("EXW", Справочники.Incoterms.НайтиПоКоду("EXW"));
	Запрос.УстановитьПараметр("FCA", Справочники.Incoterms.FCA);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Инвойс.Фрахт КАК Freight,
	               |	Инвойс.Валюта,
	               |	Инвойс.Дата,
	               |	Инвойс.Ссылка КАК Invoice,
	               |	Инвойс.Упаковка КАК Handling
	               |ИЗ
	               |	Документ.Инвойс КАК Инвойс
	               |ГДЕ
	               |	Инвойс.Ссылка В(&Invoices)
	               |	И НЕ Инвойс.ПометкаУдаления
	               |	И Инвойс.Проверен
	               |	И ВЫБОР
	               |			КОГДА НЕ Инвойс.Голд
	               |				ТОГДА Инвойс.УсловияПоставки = &EXW
	               |						ИЛИ Инвойс.УсловияПоставки = &FCA
	               |		КОНЕЦ
	               |	И НЕ Инвойс.DirectSales
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтрокиИнвойса.Инвойс КАК Invoice,
	               |	СтрокиИнвойса.КостЦентр.Geomarket КАК Geomarket,
	               |	СтрокиИнвойса.КостЦентр.SubGeomarket КАК SubGeomarket,
	               |	СтрокиИнвойса.КостЦентр.Segment КАК Segment,
	               |	СтрокиИнвойса.КостЦентр.SubSegment КАК SubSegment,
	               |	СтрокиИнвойса.SoldTo КАК ParentCompany,
	               |	СУММА(СтрокиИнвойса.Сумма) КАК Сумма,
	               |	СУММА(0) КАК FreightSum,
	               |	СУММА(0) КАК HandlingSum,
	               |	СтрокиИнвойса.Классификатор КАК ERPTreatment
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |ГДЕ
	               |	СтрокиИнвойса.Инвойс В(&Invoices)
	               |	И НЕ СтрокиИнвойса.ПометкаУдаления
	               |	И СтрокиИнвойса.Final
	               |	И ВЫБОР
	               |			КОГДА НЕ СтрокиИнвойса.Инвойс.Голд
	               |				ТОГДА СтрокиИнвойса.Инвойс.УсловияПоставки = &EXW
	               |						ИЛИ СтрокиИнвойса.Инвойс.УсловияПоставки = &FCA
	               |		КОНЕЦ
	               |	И НЕ СтрокиИнвойса.Инвойс.DirectSales
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтрокиИнвойса.Инвойс,
	               |	СтрокиИнвойса.КостЦентр.SubSegment,
	               |	СтрокиИнвойса.КостЦентр.SubGeomarket,
	               |	СтрокиИнвойса.КостЦентр.Segment,
	               |	СтрокиИнвойса.КостЦентр.Geomarket,
	               |	СтрокиИнвойса.SoldTo,
	               |	СтрокиИнвойса.Классификатор";
				   
	Результат = Запрос.ВыполнитьПакет();			   
	
	ТЗInvoices = Результат[0].Выгрузить();
	ТЗLines = Результат[1].Выгрузить();
	
	СтруктураОтборInvoice = Новый Структура("Invoice");
	
	Для Каждого СтрокаТЗInvoices из ТЗInvoices Цикл
		
		СтруктураОтборInvoice.Invoice = СтрокаТЗInvoices.Invoice;
		ТЗLines.Скопировать(СтруктураОтборInvoice);
		
		Если ТЗLines.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗInvoices.Валюта = СurrencyUSD тогда
			
			СуммаFreightUSD = СтрокаТЗInvoices.Freight;
			СуммаHandlingUSD = СтрокаТЗInvoices.Handling;
			
		иначе
			
			СтруктураСurrency = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаТЗInvoices.Валюта, СтрокаТЗInvoices.Дата);
			СтруктураСurrencyUSD = ОбщегоНазначения.ПолучитьКурсВалюты(СurrencyUSD, СтрокаТЗInvoices.Дата);
			
			СуммаFreightUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЗInvoices.Freight, 
			СтрокаТЗInvoices.Валюта, СurrencyUSD, 
			СтруктураСurrency.Курс, СтруктураСurrencyUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencyUSD.Кратность);
			
			СуммаHandlingUSD = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЗInvoices.Handling, 
			СтрокаТЗInvoices.Валюта, СurrencyUSD, 
			СтруктураСurrency.Курс, СтруктураСurrencyUSD.Курс, СтруктураСurrency.Кратность, СтруктураСurrencyUSD.Кратность);
			
		КонецЕсли;
		
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗLines.ВыгрузитьКолонку("Сумма"), СуммаFreightUSD, ТЗLines, "FreightSum");
		УчетНДС.РаспределитьСуммуПоСтолбцу(ТЗLines.ВыгрузитьКолонку("Сумма"), СуммаHandlingUSD, ТЗLines, "HandlingSum");
		
		ТЗLinesБезИсключаемыхERP = ТЗLines.СкопироватьКолонки();
		Для Каждого Стр из ТЗLines Цикл
			
			Если ИсключаемыеИзЗатратERPTreatments.Найти(Стр.ERPTreatment) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаТЗ = ТЗLinesБезИсключаемыхERP.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Стр);
			
		КонецЦикла;
		
		ТЗLinesБезИсключаемыхERP.Колонки.Удалить("Invoice");  
		ТЗLinesБезИсключаемыхERP.Колонки.Удалить("ERPTreatment");  
		ТЗLinesБезИсключаемыхERP.Свернуть("ParentCompany,Geomarket,SubGeomarket,Segment,SubSegment", "Сумма,FreightSum,HandlingSum");
		        		
		Для Каждого СтрокаТЗ Из ТЗLinesБезИсключаемыхERP Цикл
			           
			Если СтрокаТЗ.FreightSum <> 0 Тогда 
				
				Движение = ДвиженияInternationalFactCosts.Добавить();
				
				Движение.Период = НачалоМесяца(?(День(СтрокаТЗInvoices.Дата) > 25, ДобавитьМесяц(СтрокаТЗInvoices.Дата, 1), СтрокаТЗInvoices.Дата));;
				Движение.CostsType = Перечисления.FactCostsTypes.Freight;
				Движение.DomesticInternational = Перечисления.DomesticInternational.International;
		
				Движение.ParentCompany = СтрокаТЗ.ParentCompany;
				Движение.Geomarket = СтрокаТЗ.Geomarket;
				Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
				Движение.Segment = СтрокаТЗ.Segment;
				Движение.SubSegment = СтрокаТЗ.SubSegment;
				
				Движение.Sum = СтрокаТЗ.FreightSum;
				
			КонецЕсли;
		
			Если СтрокаТЗ.HandlingSum <> 0 Тогда 
				
				Движение = ДвиженияInternationalFactCosts.Добавить();
				
				Движение.Период = НачалоМесяца(?(День(СтрокаТЗInvoices.Дата) > 25, ДобавитьМесяц(СтрокаТЗInvoices.Дата, 1), СтрокаТЗInvoices.Дата));;
				Движение.CostsType = Перечисления.FactCostsTypes.AccessorialCosts;
				Движение.DomesticInternational = Перечисления.DomesticInternational.International;

				Движение.ParentCompany = СтрокаТЗ.ParentCompany;
				Движение.Geomarket = СтрокаТЗ.Geomarket;
				Движение.SubGeomarket = СтрокаТЗ.SubGeomarket;
				Движение.Segment = СтрокаТЗ.Segment;
				Движение.SubSegment = СтрокаТЗ.SubSegment;
				
				Движение.Sum = СтрокаТЗ.HandlingSum;
				
			КонецЕсли;

		КонецЦикла;
		         		
	КонецЦикла;
	  		
КонецПроцедуры



// { RGS AArsentev S-I-0001747 20.10.2016 16:17:00
Процедура ЗапишемПервуюВерсию()
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Период.Установить(Дата);
	НаборЗаписей.Отбор.DOC.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ТекущаяДата();
	Запись.Version = 1;
	Запись.DOC = Ссылка;
	Запись.CCA = CCA;
	Запись.MOT = MOT;
	Запись.Received = Received;
	Запись.Accepted = Accepted;
	Запись.Requested = Requested;
	// { RGS DKazanskiy 24.07.2018 15:55:02 - S-I-0005657
	Запись.POA = RequestedPOA;
	// } RGS DKazanskiy 24.07.2018 15:55:14 - S-I-0005657
	НаборЗаписей.Записать();
	
КонецПроцедуры // } RGS AArsentev 20.10.2016 S-I-0001747 16:17:00


мОбработкаВажностиРегламентнымЗаданием = Ложь;

// { RGS AGorlenko 20.10.2017 11:44:12 - определение текущей версии дока
ТекущаяВерсияДокумента = 0;
// } RGS AGorlenko 20.10.2017 11:44:28 - определение текущей версии дока
