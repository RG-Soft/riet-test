// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
//Перем ТабЗатрат;
Перем ПроводкиНУ;
Перем ПоддержкаПБУ18;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
//Процедура заполняет параметры ответственных лиц организации-получателя формы ОС4 
//
Процедура ЗаполнитьДанныеОрганизацииПолучателя(ПараметрыДокумента, ОбластьМакета)
	
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ПараметрыДокумента.Организация, ПараметрыДокумента.ДатаДок);
	
	ПараметрыОрганизации = Новый структура("Руководитель,ДолжностьРуководителя,ГлавБух");	
		
	ПараметрыОрганизации.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
	ПараметрыОрганизации.ДолжностьРуководителя = ОтветственныеЛицаОрганизации.РуководительДолжность;
	ПараметрыОрганизации.ГлавБух = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыОрганизации);
	
КонецПроцедуры
 	
// Функция возращает параметры ОС
//
Функция ПолучитьПробегАвто(ОбъектОС, НачДата, КонДата)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
	|	ВыработкаОС.ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот КАК Пробег
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведения.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК РегСведенияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
	|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ОС", ОбъектОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Пробег;
	
КонецФункции // ПолучитьПробегАвто()
	
//// Функция формирует табличный документ с печатной формой накладной,
//// разработанной методистами
////
//// Возвращаемое значение:
////  Табличный документ - печатная форма накладной
////
//Функция ПечатьРазукрупнениеОС()

//	ТабДокумент = Новый ТабличныйДокумент;
//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РазукрупнениеОС_ОС4";

//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	РазукрупнениеОС.Номер						  КАК НомерДок,
//	|	РазукрупнениеОС.Дата							  КАК ДатаДок,
//	|	РазукрупнениеОС.СобытиеОС					  КАК Состояние,
//	|	РазукрупнениеОС.ПричинаСписания 				  КАК ПричинаСписания,
//	|	РазукрупнениеОС.Организация   				  КАК Организация,
//	|	РазукрупнениеОС.Организация.КодПоОКПО		  КАК КодОКПО
//	|ИЗ
//	|	Документ.РазукрупнениеОС КАК РазукрупнениеОС
//	|
//	|ГДЕ
//	|	РазукрупнениеОС.Ссылка = &Ссылка";
//	СтруктураДока = Запрос.Выполнить().Выбрать();
//	СтруктураДока.Следующий();
//	
//	СведенияОбОрганизации    = КонтактнаяИнформация.СведенияОЮрФизЛице(СтруктураДока.Организация, СтруктураДока.ДатаДок);
//	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
//	ОтветственныеЛица        = ОбщегоНазначения.ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок);

//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
//	Запрос.УстановитьПараметр("ДатаДок",     Дата);
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	РазукрупнениеОСОС.НомерСтроки КАК НП,
//		|	РазукрупнениеОСОС.ОсновноеСредство КАК ОС,
//		|	РазукрупнениеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
//		|	РазукрупнениеОСОС.ОсновноеСредство.Автотранспорт КАК Автотранспорт,
//		|	РазукрупнениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
//		|	РазукрупнениеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
//		|	РазукрупнениеОСОС.ОсновноеСредство.ГруппаОС КАК Группа,
//		|	РазукрупнениеОСОС.АмортизацияБУ КАК НачАмортизация,
//		|	РазукрупнениеОСОС.СтоимостьБУ КАК Стоимость,
//		|	РазукрупнениеОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
//		|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК НачСтоимость,
//		|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвНомер,
//		|	ПервоначальныеСведения.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
//		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК Подразделение,
//		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
//		|	РаботникиОрганизацийСрезПоследних.ТабельныйНомер КАК ТабНомерМОЛ
//		|ИЗ
//		|	Документ.РазукрупнениеОС.ОС КАК РазукрупнениеОСОС
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
//		|				&ДатаДок,
//		|				ОсновноеСредство В
//		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|						Документ.РазукрупнениеОС.ОС.ОсновноеСредство
//		|					ИЗ
//		|						Документ.РазукрупнениеОС.ОС
//		|					ГДЕ
//		|						Документ.РазукрупнениеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведения
//		|		ПО РазукрупнениеОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
//		|				&ДатаДок,
//		|				Организация = &Организация
//		|					И ОсновноеСредство В
//		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|							Документ.РазукрупнениеОС.ОС.ОсновноеСредство
//		|						ИЗ
//		|							Документ.РазукрупнениеОС.ОС
//		|						ГДЕ
//		|							Документ.РазукрупнениеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
//		|			ПО МестонахождениеОсновныхСредствСрезПоследних.МОЛ = РаботникиОрганизацийСрезПоследних.Физлицо
//		|		ПО РазукрупнениеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
//		|ГДЕ
//		|	РазукрупнениеОСОС.Ссылка = &Ссылка";
//	ВыборкаОС = Запрос.Выполнить().Выбрать();
//	
//	Если ВыборкаОС.Количество() = 1 Тогда

//		ВыборкаОС.Следующий();

//		Если ВыборкаОС.Автотранспорт Тогда 
//			Макет = ПолучитьМакет("ОС4а");
//		Иначе
//			Макет = ПолучитьМакет("ОС4");
//		КонецЕсли;

//		Область = Макет.ПолучитьОбласть("Заголовок");
//		Область.Параметры.Заполнить(СтруктураДока);
//		Область.Параметры.Организация = ПредставлениеОрганизации;
//		
//		Область.Параметры.Заполнить(ВыборкаОС);
//		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) тогда
//			Область.Параметры["НаимОС"] = ВыборкаОС.ОС;
//		КонецЕслИ;
//		
//		ДокументПринятияКУчету     = "";
//		ДокументВводаВЭксплуатацию = "";
//		ПринятоКУчету              = "";
//		ВведеноВЭксплуатацию       = "";

//		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
//		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);

//		Если ВыборкаОС.Автотранспорт Тогда
//			Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
//			Если ДокументВводаВЭксплуатацию = Неопределено Тогда
//				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата);
//			Иначе
//				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ДокументВводаВЭксплуатацию.Дата, Дата);
//			КонецЕсли;
//		Иначе
//			Область.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; // это в месяцах - по 30 дней
//		КонецЕсли;

//		СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
//						ВыборкаОС.НачСтоимость,
//						ВыборкаОС.Стоимость);
//						
//		АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
//						  0,
//						  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
//		
//		Область.Параметры.ГодВыпуска     = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.ГодВыпуска), Год(ВыборкаОС.ГодВыпуска), 0);
//		Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
//		Область.Параметры.НачСтоимость   = СтоимостьОС;
//		Область.Параметры.НачАмортизация = АмортизацияОС;
//		Область.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;

//		Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
//		Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
//		Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
//		
//		ТабДокумент.Вывести(Область);

//	Иначе

//		Макет  = ПолучитьМакет("ОС4б");

//		Шапка = Макет.ПолучитьОбласть("Шапка0");
//		Шапка.Параметры.Заполнить(СтруктураДока);
//		Шапка.Параметры.Организация           = ПредставлениеОрганизации;
//		Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
//		Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
//		
//		ТабДокумент.Вывести(Шапка);

//		Шапка = Макет.ПолучитьОбласть("Шапка1");
//		Шапка.Параметры.Заполнить(СтруктураДока);
//		ТабДокумент.Вывести(Шапка);

//		Строка1 = Макет.ПолучитьОбласть("Строка1");

//		Пока ВыборкаОС.Следующий() Цикл

//			Строка1.Параметры.Заполнить(ВыборкаОС);
//			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) Тогда
//				Строка1.Параметры["НаимОС"] = ВыборкаОС.ОС;
//			КонецЕсли;
//			
//			СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
//							ВыборкаОС.НачСтоимость,
//							ВыборкаОС.Стоимость);
//							
//			АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
//							  0,
//							  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
//							
//			Строка1.Параметры.Заполнить(СтруктураДока);
//			Строка1.Параметры.НачСтоимость   = СтоимостьОС;
//			Строка1.Параметры.НачАмортизация = АмортизацияОС;
//			Строка1.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
//			
//			Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;

//			ДокументПринятияКУчету     = "";
//			ДокументВводаВЭксплуатацию = "";
//			ПринятоКУчету              = "";
//			ВведеноВЭксплуатацию       = "";

//			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
//			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);

//			Если ВведеноВЭксплуатацию = Неопределено Тогда
//				
//				Строка1.Параметры.СрокЭкспл = 0;
//				
//			Иначе
//				
//				КоличествоЛет     = Год(Дата) - Год(ВведеноВЭксплуатацию);
//				КоличествоМесяцев = Месяц(Дата) - Месяц(ВведеноВЭксплуатацию);
//				
//				Строка1.Параметры.СрокЭкспл = КоличествоЛет * 12 + КоличествоМесяцев;

//			КонецЕсли;

//			ТабДокумент.Вывести(Строка1);

//		КонецЦикла;

//		Шапка = Макет.ПолучитьОбласть("Шапка2");
//		Шапка.Параметры.Заполнить(СтруктураДока);
//		
//		Шапка.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
//		
//		ТабДокумент.Вывести(Шапка);

//	КонецЕсли;

//	Возврат ТабДокумент;

//КонецФункции // ПечатьСписаниеТоваров()

//// Процедура осуществляет печать документа. Можно направить печать на 
//// экран или принтер, а также распечатать необходмое количество копий.
////
////  Название макета печати передается в качестве параметра,
//// по переданному названию находим имя макета в соответствии.
////
//// Параметры:
////  НазваниеМакета - строка, название макета.
////
//Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
//	
//	// Получить экземпляр документа на печать
//	Если ИмяМакета = "ОС4" Тогда
//		
//		ТабДокумент = ПечатьРазукрупнениеОС();
//		
//	КонецЕсли; 
//	
//	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
//	
//КонецПроцедуры // Печать

#КонецЕсли

//// Возвращает доступные варианты печати документа
////
//// Вовращаемое значение:
////  Струткура, каждая строка которой соответствует одному из вариантов печати
////  
//Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
//	
//	Возврат Новый Структура("ОС4","ОС-4");

//КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ"; 
	мСтрокаРеквизитыНалУчета = "ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()
 
// Процедура вызывается при выборе пункта подменю "Для списка ОС" из меню "Заполнить"
// командной панели формы. Процедура выполняет заполнение колонок с данными 
// в табличной части по каждому выбранному основному средству.
//
Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт 
	
	СписокОС  = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтоимостьАмортизацияОСОстатки.ОсновноеСредство,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	АмортизацияЗаПериод.СуммаБУ КАК АмортизацияБУ,
	|	АмортизацияЗаПериод.СуммаНУ КАК АмортизацияНУ,
	|	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ОС_ИнвенНомер.ИнвентарныйНомер,
	|	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	|	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПервоначальныеСведенияСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|		ПервоначальныеСведенияСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияСрезПоследних) КАК ОС_ИнвенНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	|			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	|			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|		ИЗ
	|			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|		ГДЕ
	|			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
	|		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.Дата));
	Запрос.УстановитьПараметр("МоментВремени", КонецДня(ДокОбъект.Дата - 24*60*60));
	
	табСведенияОС = Запрос.Выполнить().Выгрузить();
	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого Строка Из ОС Цикл	
		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Если НЕ НайденноеОС = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьДляСписка()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	//УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, "", мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, ,СтруктураШапкиДокумента);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
	или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
	тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ИмяТабЧасти,ТаблицаОС,СтруктураШапкиДокумента, СтруктураПолей, Отказ, Заголовок) Экспорт

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураПолей, Отказ, Заголовок);
	
	Если ТаблицаОС.Количество() = 0 Тогда
		
		ТекстОшибки = "Не заполнена табличная часть " + ИмяТабЧасти;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если  НЕ (СтрокаОС.СтоимостьБУ = 0) Тогда
		
			Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если СтрокаОС.СнятоСУчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если СтрокаОС.СнятоСУчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокПогашенияСтоимостиБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок погашения стоимости (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Процедура проверяет, достаточно ли данных в таблице по ОСНовые.
//
Процедура ПроверитьТаблицуПоОСНовые(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокПолезногоИспользованияБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан срок полезного использования БУ основного средства <"+СтрокаОС.ОсновноеСредство+">.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокПолезногоИспользованияНУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан срок полезного использования НУ основного средства <"+СтрокаОС.ОсновноеСредство+">.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Если СписокОС.Количество() > 1 Тогда  //то есть для ОС из таб. части НовыеОС ничего делать не будем
	//	Возврат;	
	//КонецЕсли; 
	
	//Списание
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	//ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ТабЧасть.ОсновноеСредство
	//|ПОМЕСТИТЬ ТЧ
	//|ИЗ
	//|	&ТабЧасть КАК ТабЧасть
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТЧ.ОсновноеСредство
	//|ИЗ
	//|	ТЧ КАК ТЧ
	//|ГДЕ
	//|	ТЧ.ОсновноеСредство В(&СписокОС)";
	//
	//Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	//Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//
	//Результат = Запрос.Выполнить();
	//СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	//Добавила Федотова Л., РГ-Софт, 03.03.16, вопрос SLI-0006244
	//СписокОС = Документ.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	//СписокОС.Добавить(Документ.НовоеОС[0].ОсновноеСредство);
	//	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ,
	|	ИсходнаяТаблица.АмортизацияБУ,
	|	ИсходнаяТаблица.АмортизацияНУ,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение,
	|	ИсходнаяТаблица.ВидДвижения
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ИсходнаяТаблица.АмортизацияБУ) КАК АмортизацияБУ,
	|	СУММА(ИсходнаяТаблица.АмортизацияНУ) КАК АмортизацияНУ
	|ПОМЕСТИТЬ АмортизацияКомплектуемых
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	НЕ ИсходнаяТаблица.ОсновноеСредство В (&СписокОС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.СтоимостьБУОстаток,
	|	ВложенныйЗапрос.СуммаКВОстаток,
	|	ВложенныйЗапрос.СтоимостьНУОстаток,
	|	ВложенныйЗапрос.АмортизацияБУ,
	|	ВложенныйЗапрос.АмортизацияНУ,
	|	ВложенныйЗапрос.ПодразделениеСписания
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.Подразделение, СтоимостьАмортизацияОСОстатки.Подразделение) КАК Подразделение,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток
	|			ИНАЧЕ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток - СтоимостьАмортизацияОСОстатки.СуммаКВОстаток
	|		КОНЕЦ КАК СтоимостьНУОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.СуммаКВОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаКВОстаток,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаБУ, 0) КАК АмортизацияБУ,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) КАК АмортизацияНУ,
	|		СтоимостьАмортизацияОСОстатки.Подразделение КАК ПодразделениеСписания
	|	ИЗ
	|		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение КАК Подразделение,
	|				СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|				СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|			ИЗ
	|				РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|			ГДЕ
	|				РасчетАмортизацииОС.ПериодАмортизации <= &ПериодАмортизации
	|				И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетАмортизацииОС.ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение) КАК РасчетАмортизацииОССвернутый
	|			ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = РасчетАмортизацииОССвернутый.ОсновноеСредство) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУОстаток, ВложенныйЗапрос.СтоимостьБУ)) КАК СтоимостьБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ВложенныйЗапрос.СуммаКВ)) КАК СуммаКВ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ВложенныйЗапрос.СтоимостьНУ)) КАК СтоимостьНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.АмортизацияБУ, ВложенныйЗапрос.АмортизацияБУ)) КАК АмортизацияБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ВложенныйЗапрос.АмортизацияНУ)) КАК АмортизацияНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.ПодразделениеСписания, ВложенныйЗапрос.ПодразделениеСписания)) КАК ПодразделениеСписания,
	|	ЕСТЬNULL(ВложенныйЗапрос.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ВидДвижения
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
	|		ИсходнаяТаблица.СтоимостьБУ КАК СтоимостьБУ,
	|		ИсходнаяТаблица.СтоимостьНУ КАК СтоимостьНУ,
	|		ИсходнаяТаблица.СуммаКВ КАК СуммаКВ,
	|		ИсходнаяТаблица.АмортизацияБУ КАК АмортизацияБУ,
	|		ИсходнаяТаблица.АмортизацияНУ КАК АмортизацияНУ,
	|		ИсходнаяТаблица.Подразделение КАК Подразделение,
	|		ВложенныйЗапрос.Подразделение КАК ПодразделениеСписания,
	|		ИсходнаяТаблица.ВидДвижения КАК ВидДвижения
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ИсходнаяТаблица.Подразделение КАК Подразделение,
	|				ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство
	|			ИЗ
	|				ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ГДЕ
	|				НЕ(ИсходнаяТаблица.СтоимостьБУ = 0
	|							И ИсходнаяТаблица.СтоимостьНУ = 0
	|							И ИсходнаяТаблица.СуммаКВ = 0)) КАК ВложенныйЗапрос
	|			ПО ИсходнаяТаблица.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство) КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|		ПО ВложенныйЗапрос.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство
	|			И ВложенныйЗапрос.Подразделение = ТаблицаПоОС.Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство),
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение),
	|	ЕСТЬNULL(ВложенныйЗапрос.ВидДвижения, ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
	|	ИтоговаяТаблица.Подразделение,
	|	ИтоговаяТаблица.СтоимостьБУ КАК СтоимостьБУ,
	|	ИтоговаяТаблица.СуммаКВ КАК СуммаКВ,
	|	ИтоговаяТаблица.СтоимостьНУ КАК СтоимостьНУ,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИтоговаяТаблица.АмортизацияБУ
	|		ИНАЧЕ АмортизацияКомплектуемых.АмортизацияБУ
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИтоговаяТаблица.АмортизацияНУ
	|		ИНАЧЕ АмортизацияКомплектуемых.АмортизацияНУ
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ИтоговаяТаблица.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ИтоговаяТаблица.ВидДвижения
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица,
	|	АмортизацияКомплектуемых КАК АмортизацияКомплектуемых
	|ИТОГИ
	|	МАКСИМУМ(СтоимостьБУ),
	|	МАКСИМУМ(СуммаКВ),
	|	МАКСИМУМ(СтоимостьНУ),
	|	МАКСИМУМ(ПодразделениеСписания)
	|ПО
	|	ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
	Запрос.УстановитьПараметр("ПериодАмортизации", Документ.Дата);
	
	Результат = Запрос.Выполнить();
	ВыборкаОС = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОС.Следующий() Цикл
		СтоимостьСписана = Ложь;
		Выборка = ВыборкаОС.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока					 = НоваяТаблица.Добавить();
			//НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.ВидДвижения		 = Выборка.ВидДвижения;
			НоваяСтрока.Активность		 = Истина;
			НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
			НоваяСтрока.Подразделение    = Выборка.Подразделение;
			Если Выборка.Подразделение = Выборка.ПодразделениеСписания Тогда
				НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
				НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;   
				НоваяСтрока.СуммаКВ			 = Выборка.СуммаКВ;
				СтоимостьСписана = Истина;
			КонецЕсли;
			НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
			НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
		КонецЦикла;
		Если НЕ СтоимостьСписана Тогда
			НоваяСтрока					 = НоваяТаблица.Добавить();
			//НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.ВидДвижения		 = Выборка.ВидДвижения;
			НоваяСтрока.Активность		 = Истина;
			НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
			НоваяСтрока.Подразделение    = ВыборкаОС.ПодразделениеСписания;
			НоваяСтрока.СтоимостьБУ  	 = ВыборкаОС.СтоимостьБУ;      
			НоваяСтрока.СтоимостьНУ   	 = ВыборкаОС.СтоимостьНУ;   
			НоваяСтрока.СуммаКВ			 = ВыборкаОС.СуммаКВ;
		КонецЕсли;
	КонецЦикла;
	НоваяТаблица.ЗаполнитьЗначения(Документ, "Регистратор");
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();

	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ТЧ_ДоПерезаполнения = ДокументОбъект.ОС.Выгрузить();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		ТЧ_ПослеПерезаполнения = ДокументОбъект.ОС.Выгрузить();
		ТаблицыОдинаковы = НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТЧ_ДоПерезаполнения, ТЧ_ПослеПерезаполнения);
		Если Не ТаблицыОдинаковы Тогда
			Сообщить("Перезаполнена табличная часть документа " + Документ);
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрамСписание(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = "ОС";
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТабАмортизации.Колонки.Добавить("Валюта");
	ТабАмортизации.Колонки.Добавить("Подразделение");
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		   И СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			
			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			//НоваяСтрока.НаправлениеАмортизации = СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
			НоваяСтрока.Валюта        		   = СтрокаОС.ОсновноеСредство.Валюта;
			НоваяСтрока.Подразделение  		   = СтрокаОС.ОсновноеСредство.Подразделение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	//ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", НомерЖурнала);

	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(Дата, Организация, масОС);
    	
	// Создание движений документа по БУ
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		
		Движение.ДатаСостояния    = ДатаДока;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Движение.Период            = ?(ДатаПроведения = '0001.01.01',ДатаДока,ДатаПроведения);
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		Если СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		 ИЛИ СтрокаТЧ.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
		 
		    //Добавил РГ-Софт - Пронин Иван - 2009-09-21
			// Движения по регистру НачислениеАмортизации
			ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(ТекОС, "ОсновноеСредство");
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			ДвижениеВТаблице.НачислятьБУ = Ложь;
			ДвижениеВТаблице.НачислятьНУ = Ложь;
			
		КонецЕсли;
			
	КонецЦикла;
	
	//ПроводкиБУ.Записать(Ложь);
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, Движения.СостоянияОСОрганизаций, Отказ, Заголовок);

	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		Если Основание.ЭтоГруппа Тогда
			
			Сообщить("Нельзя списать группу основных средств",СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация = Основание.Организация;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПроверкаСрока(Строка,Отказ)
	
	Группа = НовоеОС[0].ОсновноеСредство.АмортизационнаяГруппа;
	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Группа) Тогда
		Отказ = Истина;
		Сообщить("У основного средства " + Строка.ОсновноеСредство + " не заполнена амортизационная группа!");
	Иначе
		
		Если Группа = Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда
			НачалоГр = 11; КонецГр = 24;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда
			НачалоГр = 24; КонецГр = 36;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда
			НачалоГр = 36; КонецГр = 60;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
			НачалоГр = 60; КонецГр = 84;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда
			НачалоГр = 84; КонецГр = 120;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда
			НачалоГр = 120; КонецГр = 180;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда
			НачалоГр = 180; КонецГр = 240;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда
			НачалоГр = 240; КонецГр = 300;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда
			НачалоГр = 300; КонецГр = 360;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда
			НачалоГр = 360; КонецГр = 99999999999999;
		ИначеЕсли Группа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа Тогда
			НачалоГр = -1; КонецГр = 99999999999999;
		КонецЕсли;
		
		Если не((Строка.СрокПолезногоИспользованияНУ >НачалоГр) и (Строка.СрокПолезногоИспользованияНУ <=КонецГр)) Тогда
			
			Отказ = Истина;
			Сообщить("Срок полезного использования основного средства " + Строка.ОсновноеСредство + " не соответствует амортизационной группе!");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПроверкаСоответствияСумм(Отказ)
	
	Если ОС.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		Если НЕ (ОС.Итог("СтоимостьБУ") = НовоеОС[0].СтоимостьБУ) ИЛИ НЕ(ОС.Итог("СтоимостьНУ") = НовоеОС[0].СтоимостьНУ) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ)
	
	ПроверкаСоответствияСумм(Отказ);
	Если Отказ Тогда
		Сообщить("Суммы в табличной части ""ОС"" не соответствуют суммам в табличной части ""Новые ОС"". Документ не может быть проведен.");
		Возврат;
	КонецЕсли;
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	СтруктураШапкиДокумента.Вставить("ОперацияСОбъектамиОС",СтруктураШапкиДокумента.СобытиеОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	//СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ("ОС", ТаблицаПоОС, СтруктураШапкиДокумента, СтруктураПолей, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НовоеОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверкаРеквизитовТЧ("НовоеОС", ТаблицаПоОС, СтруктураШапкиДокумента, СтруктураПолей, Отказ, Заголовок);

	// Выборка строк табличной части ОС
	СписокОС =
	"ВЫБРАТЬ
	|	КомплектацияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.КомплектацияОС.ОС КАК КомплектацияОСОС
	|ГДЕ
	|	КомплектацияОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	//Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаПроведения);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);

	 Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияОСОС.НомерСтроки,
	|	КомплектацияОСОС.ОсновноеСредство,
	|	КомплектацияОСОС.СтоимостьБУ,
	|	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток,
	|	КомплектацияОСОС.АмортизацияБУ,
	|	КомплектацияОСОС.АмортизацияЗаМесяцБУ,
	|	КомплектацияОСОС.СтоимостьНУ,
	|	КомплектацияОСОС.АмортизацияНУ,
	|	КомплектацияОСОС.АмортизацияЗаМесяцНУ,
	|	КомплектацияОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияСрезПоследних.СпособПоступления КАК СпособПоступления,
	|	НачислениеАмортизацииСрезПоследних.НачислятьБУ КАК НачислятьБУ,                                   
	|	НачислениеАмортизацииСрезПоследних.НачислятьНУ КАК НачислятьНУ,                                
	|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,                                
	|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,                                
	|	НачислениеАмортизацииСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент,                                
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.КостЦентр КАК КостЦентр,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНУ,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.КомплектацияОС.ОС КАК КомплектацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&ДатаДокумента,
	|		    ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияСрезПоследних
	|		ПО КомплектацияОСОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизации.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК НачислениеАмортизацииСрезПоследних
	|		ПО КомплектацияОСОС.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,                                                                                        
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО КомплектацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО КомплектацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаНалоговогоУчетаОССрезПоследних
	|		ПО КомплектацияОСОС.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В( " + СписокОС + " ) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО КомплектацияОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаДокумента, ОсновноеСредство В ( " + СписокОС + " ))  КАК СтоимостьАмортизацияОСОстатки
	|		ПО КомплектацияОСОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|ГДЕ
	|	КомплектацияОСОС.Ссылка = &Ссылка";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, одна ли строка в таблице по ОС.
	Если ОС.Количество() < 2 Тогда
		Сообщить("В табличной части ""ОС"" должно быть не менее двух строк.");	
		Отказ = Истина;
	КонецЕсли;
	
	Если НовоеОС.Количество() > 1 Тогда
		Сообщить("В табличной части ""Новые ОС"" должна быть одна строка.");	
		Отказ = Истина;
	Иначе
		Для каждого Строка Из НовоеОС Цикл
			ПроверкаСрока(Строка,Отказ);
		КонецЦикла;
	КонецЕсли;
	
	// Проверим, достаточно ли данных в таблице по ОС.
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	// Выборка строк табличной части НовоеОС
	СписокОС =
	"ВЫБРАТЬ
	|	КомплектацияОСНовоеОС.ОсновноеСредство
	|ИЗ
	|	Документ.КомплектацияОС.НовоеОС КАК КомплектацияОСНовоеОС
	|ГДЕ
	|	КомплектацияОСНовоеОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	//Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаПроведения);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("МоментВремени",   ДатаПроведения);
	Запрос.УстановитьПараметр("ОсновноеСредство", ТаблицаПоОС[0].ОсновноеСредство);

	 Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияОСНовоеОС.НомерСтроки,
	|	КомплектацияОСНовоеОС.ОсновноеСредство,
	|	КомплектацияОСНовоеОС.ИнвентарныйНомер,
	|	КомплектацияОСНовоеОС.СрокПолезногоИспользованияБУ,
	|	КомплектацияОСНовоеОС.СрокПолезногоИспользованияНУ,
	|	КомплектацияОСНовоеОС.СтоимостьБУ,
	|	КомплектацияОСНовоеОС.СтоимостьНУ,
	|	КомплектацияОСНовоеОС.АмортизацияБУ,
	|	КомплектацияОСНовоеОС.АмортизацияНУ,
	|	КомплектацияОСНовоеОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	КомплектацияОСНовоеОС.ДатаПринятияКУчетуРегл
	|ИЗ
	|	Документ.КомплектацияОС.НовоеОС КАК КомплектацияОСНовоеОС
	|ГДЕ
	|	КомплектацияОСНовоеОС.Ссылка = &Ссылка";
	
	ТаблицаПоНовыеОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по НовыеОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоНовыеОС, Отказ, Заголовок);
	
	// Проверим, достаточно ли данных в таблице по НовыеОС.
	ПроверитьТаблицуПоОСНовые(СтруктураШапкиДокумента, ТаблицаПоНовыеОС, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрамСписание(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
		Для Каждого СтрокаОС Из ОС Цикл 
			Если СтрокаОС.ОсновноеСредство.Автотранспорт Тогда
				Попытка 
					Запись = РегистрыСведений.РегистрацияВГАИ.СоздатьМенеджерЗаписи();
					Запись.Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					Запись.РегистрационныйЗнак = "";
					Запись.ОС = СтрокаОС.ОсновноеСредство;
					Запись.Период = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения); 
					Запись.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Формирование движений поступления новых ОС.
	Если НЕ Отказ Тогда
		
		ФормированиеДвиженийПоступления(СтруктураШапкиДокумента, ТаблицаПоОС[0], ТаблицаПоНовыеОС, Отказ, Заголовок);
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры // ОбработкаПроведения()

Процедура ФормированиеДвиженийПоступления(СтруктураШапкиДокумента, СтрокаОССписания, ТЗДанныеОС, Отказ, Заголовок)
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	МестонахождениеОС        = Движения.МестонахождениеОСБухгалтерскийУчет;
	
	//НаправлениеАмортизацииБУ = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	//НаправлениеАмортизацииНУ = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	
	СостояниеОС              = Движения.СостоянияОСОрганизаций;
	ОперацииОС               = Движения.СобытияОСОрганизаций;
	СтоимостьАмортизацияОС   = Движения.СтоимостьАмортизацияОС;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21 - Начало
	//Получение срезапоследних по регистру НачислениеАмортизации
	масОС = ТЗДанныеОС.ВыгрузитьКолонку("ОсновноеСредство");
	табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(ДатаДока, Организация, масОС);
		
	Для Каждого Строка Из ТЗДанныеОС Цикл
		
		ТекОС = Строка.ОсновноеСредство;
		
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(ТекОС, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеПервоначальныеСведения = Истина;
		ДвижениеВТаблице.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОССписания.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		ДвижениеВТаблице.ПервоначальнаяСтоимостьНУ                = Строка.СтоимостьНУ;
		
		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		//Движение.ДатаСостояния        = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ДатаСостояния        = Строка.ДатаПринятияКУчетуРегл;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Состояние            = Перечисления.СостоянияОС.ПринятоКУчету;
		
		Движение = СостояниеОС.Добавить();
		//Движение.ДатаСостояния    = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ДатаСостояния    = Строка.ДатаПринятияКУчетуРегл;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице.ДатаВводаНУ = Строка.ДатаПринятияКУчетуРегл;;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период            = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Организация       = ТекОрганизация;
		Движение.Событие           = СтруктураШапкиДокумента.ОперацияСОбъектамиОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице.ЕстьДвижениеПервоначальныеСведения = Истина;
		ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
		ДвижениеВТаблице.ПервоначальнаяСтоимостьБУ   = Строка.СтоимостьБУ;
		ДвижениеВТаблице.ПорядокПогашенияСтоимости   = СтрокаОССписания.ПорядокПогашенияСтоимостиБУ;
		//ДвижениеВТаблице.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
		ДвижениеВТаблице.СпособПоступления           = СтрокаОССписания.СпособПоступления;
		ТекСтрокаОС = ТЗДанныеОС.Найти(ТекОС, "ОсновноеСредство");
		ДвижениеВТаблице.ИнвентарныйНомер            = ?(ТекСтрокаОС = Неопределено, Неопределено, ТекСтрокаОС.ИнвентарныйНомер);
		ДвижениеВТаблице.НачислятьБУ = (СтрокаОССписания.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		ИЛИ СтрокаОССписания.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) 
		И СтрокаОССписания.НачислятьБУ;
		
		
		
		// Движения по регистру МестонахождениеОсновныхСредств
		Движение = МестонахождениеОС.Добавить();
		Движение.Период               = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Организация          = ТекОрганизация;
		Движение.Местонахождение      = СтрокаОССписания.ПодразделениеОрганизации;
		//Движение.МОЛ                  = СтруктураШапкиДокумента.МОЛБУ;
		//Добавил Трефиленков Дмитрий для учета по кост-центрам
		Движение.КостЦентр			  = СтрокаОССписания.КостЦентр;
		
		
		Если СтрокаОССписания.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			ИЛИ СтрокаОССписания.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
			
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
				ДвижениеВТаблице.СрокБУ   			= Строка.СрокПолезногоИспользованияБУ;
				ДвижениеВТаблице.СрокПолезногоИспользованияБУ = Строка.СрокПолезногоИспользованияБУ;
				ДвижениеВТаблице.ДатаИзмененияБУ 	= ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
				//ДвижениеВТаблице.ДатаИзмененияБУ 	= Строка.ДатаПринятияКУчетуРегл;
				//ДвижениеВТаблице.СтоимостьБУ 		= Строка.СтоимостьБУ - ?(НовоеОС.Итог("СтоимостьБУ") > 0,Строка.СтоимостьБУ / НовоеОС.Итог("СтоимостьБУ"),0) * (СтрокаОССписания.АмортизацияБУ + СтрокаОССписания.АмортизацияЗаМесяцБУ);
				ДвижениеВТаблице.СтоимостьБУ 		= Строка.СтоимостьБУ - Строка.АмортизацияБУ;
			                                                               
		КонецЕсли;
		
		Если СтрокаОССписания.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			
			// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
			ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
			ДвижениеВТаблице.НачислятьНУ 			= СтрокаОССписания.НачислятьНУ;
			ДвижениеВТаблице.СрокНУ 	 			= Строка.СрокПолезногоИспользованияНУ;
			ДвижениеВТаблице.СпециальныйКоэффициент	= СтрокаОССписания.СпециальныйКоэффициент;
			
		КонецЕсли;		
	КонецЦикла;
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(СтруктураШапкиДокумента.Организация, СостояниеОС, Отказ, Заголовок);

	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Если Движение.СпециальныйКоэффициент = 0 Тогда Движение.СпециальныйКоэффициент = 1; КонецЕсли;
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;
	
	//Движения по регистру СтоимостьАмортизацияОС
	Для Каждого Строка Из ТЗДанныеОС Цикл
		НоваяСтрока = СтоимостьАмортизацияОС.Добавить();
		НоваяСтрока.ВидДвижения      = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период       	 = ?(СтруктураШапкиДокумента.ДатаПроведения = '0001.01.01',Дата,СтруктураШапкиДокумента.ДатаПроведения);
		НоваяСтрока.НалоговыйПериод  = ?(СтруктураШапкиДокумента.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,СтруктураШапкиДокумента.НалоговыйПериод);
		НоваяСтрока.ОсновноеСредство = Строка.ОсновноеСредство;
		НоваяСтрока.Подразделение    = СтрокаОССписания.ПодразделениеОрганизации;
		НоваяСтрока.СтоимостьБУ  	 = Строка.СтоимостьБУ;
		НоваяСтрока.СтоимостьНУ  	 = Строка.СтоимостьНУ;      
		//НоваяСтрока.АмортизацияБУ  	 = ?(НовоеОС.Итог("СтоимостьБУ") > 0,Строка.СтоимостьБУ / НовоеОС.Итог("СтоимостьБУ"),0) * (СтрокаОССписания.АмортизацияБУ + СтрокаОССписания.АмортизацияЗаМесяцБУ);
		//НоваяСтрока.АмортизацияНУ  	 = ?(НовоеОС.Итог("СтоимостьНУ") > 0,Строка.СтоимостьНУ / НовоеОС.Итог("СтоимостьНУ"),0) * (СтрокаОССписания.АмортизацияНУ + СтрокаОССписания.АмортизацияЗаМесяцНУ);      
		НоваяСтрока.АмортизацияБУ  	 = Строка.АмортизацияБУ;
		НоваяСтрока.АмортизацияНУ  	 = Строка.АмортизацияНУ;      
		НоваяСтрока.СуммаКВ		 	 = Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	КонецЦикла;
	
КонецПроцедуры // ФормированиеДвижений()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОСЗаполнитьДляСписка(ЭтотОбъект);
	КонецЕсли;

	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры
