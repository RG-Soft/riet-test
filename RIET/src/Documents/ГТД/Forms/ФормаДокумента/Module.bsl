
/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	НастроитьShipment();
	
	// По-умолчанию не будем отображать динамические списки, чтобы не запрашивать лишние данные
	Элементы.СтрокиГТДСписок.Видимость = Ложь;
	Элементы.СтраницыCCDLines.Видимость = Ложь;
	
	Элементы.ТабличноеПолеCustomsPaymentsAllocations.Видимость = Ложь;
	Элементы.FutureCustomsPayments.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьCustomsBondИBatchOfCustomsFilesИBoxOfCustomsFiles();
	КонецЕсли;
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.CCDОткрытие, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьCustomsBondИBatchOfCustomsFilesИBoxOfCustomsFiles()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CustomsFile", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	BatchesOfCustomFilesCustomsFiles.Ссылка КАК BatchOfCustomsFiles
		|ИЗ
		|	Документ.BatchesOfCustomsFiles.CCDs КАК BatchesOfCustomFilesCustomsFiles
		|ГДЕ
		|	BatchesOfCustomFilesCustomsFiles.CCD = &CustomsFile
		|	И НЕ BatchesOfCustomFilesCustomsFiles.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.Ссылка
		|ИЗ
		|	Документ.BatchesOfCustomsFiles.CustomsFilesOfTemporaryImportExport КАК BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport
		|ГДЕ
		|	BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.CustomsFile = &CustomsFile
		|	И НЕ BatchesOfCustomsFilesCustomsFilesOfTemporaryImportExport.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	BoxesOfCustomsFilesCustomsFiles.Ссылка КАК BoxOfCustomsFiles
		|ИЗ
		|	Документ.BoxesOfCustomsFiles.CustomsFiles КАК BoxesOfCustomsFilesCustomsFiles
		|ГДЕ
		|	BoxesOfCustomsFilesCustomsFiles.CustomsFile = &CustomsFile
		|	И НЕ BoxesOfCustomsFilesCustomsFiles.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CustomsFilesLight.Ссылка КАК CustomsBond
		|ИЗ
		|	Документ.CustomsFilesLight КАК CustomsFilesLight
		|ГДЕ
		|	CustomsFilesLight.TypeOfTransaction = ЗНАЧЕНИЕ(Перечисление.TypesOfCustomsFileLightTransaction.CustomsBond)
		|	И CustomsFilesLight.CustomsFile = &CustomsFile
		|	И НЕ CustomsFilesLight.ПометкаУдаления";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаBatchOfCustomsFiles = Результат[0].Выбрать();
	Если ВыборкаBatchOfCustomsFiles.Следующий() Тогда
		BatchOfCustomsFiles = ВыборкаBatchOfCustomsFiles.BatchOfCustomsFiles;
		Элементы.BatchOfCustomsFiles.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;	
	
	ВыборкаBoxesOfCustomsFiles = Результат[1].Выбрать();
    Если ВыборкаBoxesOfCustomsFiles.Следующий() Тогда
		BoxOfCustomsFiles = ВыборкаBoxesOfCustomsFiles.BoxOfCustomsFiles;
		Элементы.BoxOfCustomsFiles.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	ВыборкаCustomsBonds = Результат[2].Выбрать();
    Если ВыборкаCustomsBonds.Следующий() Тогда
		CustomsBond = ВыборкаCustomsBonds.CustomsBond;
	иначе
		Элементы.CustomsBond.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	//КонецЕсли;
	
	РГСофтКлиентСервер.УстановитьЗначение(ТекущийОбъект.ModifiedBy, ПараметрыСеанса.ТекущийПользователь);
	ТекущийОбъект.ModificationDate = ТекущаяДата();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Элементы.СтрокиГТДСписок.Видимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СтрокиГТДСписок.Отбор,
			"ГТД",
			Объект.Ссылка,
			ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;
	
	Если Элементы.ТабличноеПолеCustomsPaymentsAllocations.Видимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ТабличноеПолеCustomsPaymentsAllocations.Отбор,
			"CustomsDocument",
			Объект.Ссылка,
			ВидСравненияКомпоновкиДанных.Равно);
					
		UnpaidSum = CustomsСервер.ПолучитьCCDUnpaidSum(Объект.Ссылка);
		
	КонецЕсли;
	
	Если Элементы.FutureCustomsPayments.Видимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ТабличноеПолеCustomsPaymentsAllocations.Отбор,
			"DT",
			Объект.Ссылка,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.CCDИнтерактивноеПроведение, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененДокументCustomsPaymentAllocation"
		И Параметр.CustomsDocument = Объект.Ссылка Тогда
		UnpaidSum = CustomsСервер.ПолучитьCCDUnpaidSum(Объект.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		
		Если Элементы.ФиктивнаяНадписьТовары.Видимость Тогда
			ОбработатьПервыйПереходНаСтраницуТоваров();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаCustomsPaymentsAllocations Тогда
		
		Если НЕ Элементы.ТабличноеПолеCustomsPaymentsAllocations.Видимость Тогда
			ОбработатьПервыйПереходНаСтраницуAllocations();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаFutureCustomsPayments Тогда
		
		Если НЕ Элементы.FutureCustomsPayments.Видимость Тогда
			ОбработатьПервыйПереходНаСтраницуFutureCustomsPayments();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПервыйПереходНаСтраницуТоваров()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		СтрокиГТДСписок.Отбор,
		"ГТД",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ТоварыСтрокиГТД.Отбор,
		"Владелец",
		ВидСравненияКомпоновкиДанных.Равно,
		Неопределено,
		,
		Истина);	
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		СтрокиГТДПредоставленныеДокументы.Отбор,
		"Ссылка",
		ВидСравненияКомпоновкиДанных.Равно,
		Неопределено,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		СтрокиГТДИсчислениеПлатежей.Отбор,
		"Ссылка",
		ВидСравненияКомпоновкиДанных.Равно,
		Неопределено,
		,
		Истина);
		
	Элементы.СтрокиГТДСписок.Видимость = Истина;
	Элементы.СтраницыCCDLines.Видимость = Истина;
	Элементы.ФиктивнаяНадписьТовары.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПервыйПереходНаСтраницуAllocations()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ТабличноеПолеCustomsPaymentsAllocations.Отбор,
		"CustomsDocument",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора);	
		
	UnpaidSum = CustomsСервер.ПолучитьCCDUnpaidSum(Объект.Ссылка);
	
	Элементы.ТабличноеПолеCustomsPaymentsAllocations.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПервыйПереходНаСтраницуFutureCustomsPayments()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		FutureCustomsPayments.Отбор,
		"DT",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора);	
		
	Элементы.FutureCustomsPayments.Видимость = Истина;
	Элементы.ФиктивнаяНадписьFutureCustomsPayments.Видимость = Ложь;	
		
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ОБЩИЕ ДАННЫЕ

&НаКлиенте
Процедура CustomsPostНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Process level"" is empty!",
			, "ProcessLevel", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьShipment()
	
	// Настроим типы, доступные при выборе Shipment, а также параметры выбора 
	
	// Типы настраиваются по режиму, поэтому, если он не заполнен - выходим
	Если НЕ ЗначениеЗаполнено(Объект.Regime) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	
	// Для импорта выбирается Import shipment, а для экспорта - Export shipment
	// Кроме того, от импорта / экспорта зависит вид операции Temporary imp. / exp. transaction
	RegimeImportExport = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Regime, "ImportExport");
	Если RegimeImportExport = Перечисления.ИмпортЭкспорт.Import Тогда
		
		МассивТипов.Добавить(Тип("ДокументСсылка.Поставка"));
		
		ЗначениеПараметраTypeOfTransaction = Перечисления.TypesOfTemporaryImpExpTransaction.PermanentImport;
		
	ИначеЕсли RegimeImportExport = Перечисления.ИмпортЭкспорт.Export Тогда
		
		МассивТипов.Добавить(Тип("ДокументСсылка.ExportShipment"));
		
		ЗначениеПараметраTypeOfTransaction = Перечисления.TypesOfTemporaryImpExpTransaction.PermanentExport;
		
	КонецЕсли;
	
	// Для постоянного режима возможен выбор Temporary imp. / exp. transaction
	RegimePermanentTemporary = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Объект.Regime, "PermanentTemporary");
	Если RegimePermanentTemporary = Перечисления.PermanentTemporary.Permanent Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.TemporaryImpExpTransactions"));
	КонецЕсли;
		
	Элементы.Shipment.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ПараметрTypeOfTransaction = Новый ПараметрВыбора("Отбор.TypeOfTransaction", ЗначениеПараметраTypeOfTransaction);
	РГСофт.ВставитьПараметрВыбора(Элементы.Shipment, ПараметрTypeOfTransaction);
	
КонецПроцедуры

&НаКлиенте
Процедура ShipmentНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отказ = Ложь;
			
	РГСофтКлиентСервер.ПроверитьЗаполнениеИСообщить(
		Объект.Regime, "Regime",,
		, "Объект", Отказ);
	
	РГСофтКлиентСервер.ПроверитьЗаполнениеИСообщить(
		Объект.CCA, "CCA",,
		, "Объект", Отказ);
		
	РГСофтКлиентСервер.ПроверитьЗаполнениеИСообщить(
		Объект.ProcessLevel, "ProcessLevel", "Process level",
		, "Объект", Отказ);

	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыВыбораShipment(Regime)
	
	RegimeImportExport = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Regime, "ImportExport");
	Если RegimeImportExport = Перечисления.ИмпортЭкспорт.Export Тогда
		Возврат "Документ.ExportShipment.ФормаВыбора";
	Иначе
		Возврат "Документ.Поставка.ФормаВыбора";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура LegalEntityНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Country) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Country"" is empty!",
			, "Country", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RegimeПриИзменении(Элемент)
	
	НастроитьShipment();
	
КонецПроцедуры

&НаКлиенте
Процедура CalculateCustomsCost(Команда)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОбщаяТамСтоимость) Тогда
		
		Ответ = Вопрос(
			"Вы действительно хотите изменить общую таможенную стоимость?",
			РежимДиалогаВопрос.ДаНет,
			60,
			КодВозвратаДиалога.Нет,
			"Внимание!",
			КодВозвратаДиалога.Нет);
			
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Если ГТД - новая - значит строк для нее быть не может - значит это ошибка
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Нельзя рассчитать общую таможенную стоимость для ГТД без строк!",
			, , "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	CustomsCost = ПолучитьCustomsCostНаСервереБезКонтекста(Объект.Ссылка, Объект.ContractCurrencyRate);
	
	Если НЕ ЗначениеЗаполнено(CustomsCost) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОбщаяТамСтоимость = CustomsCost;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьCustomsCostНаСервереБезКонтекста(CCD, Курс)
	
	CCDCustomsCost = 0;
	Отказ = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CCD", CCD);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиГТД.Ссылка КАК CCDLine,
		|	СтрокиГТД.ТаможеннаяСтоимость КАК CustomsCost,
		|	СтрокиГТД.СтатистическаяСтоимость КАК StatisticalCost
		|ИЗ
		|	Справочник.СтрокиГТД КАК СтрокиГТД
		|ГДЕ
		|	(НЕ СтрокиГТД.ПометкаУдаления)
		|	И СтрокиГТД.ГТД = &CCD";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		CCDLineCustomsCost = Выборка.CustomsCost;
		
		Если НЕ ЗначениеЗаполнено(Выборка.CustomsCost) Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.StatisticalCost) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Невозможно рассчитать таможенную стоимосить для CCD line """ + СокрЛП(Выборка.CCDLine) + """, так как в ней не заполнена статистическая стоимость!",
					Выборка.CCDLine, "СтатистическаяСтоимость", , Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Курс) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Невозможно рассчитать таможенную стоимосить для CCD line """ + СокрЛП(Выборка.CCDLine) + """, так как в ГТД не указан курс!",
					CCD, "ContractCurrencyRate", , Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			CCDLineОбъект = Выборка.CCDLine.ПолучитьОбъект();
			CCDLineОбъект.ТаможеннаяСтоимость = Выборка.StatisticalCost * Курс;
			Попытка
				CCDLineОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Не удалось записать CCD line """ + СокрЛП(CCDLineОбъект) + """: " + ОписаниеОшибки(),
					Выборка.CCDLine, , , Отказ);
				Возврат 0;
			КонецПопытки;
			
			CCDLineCustomsCost = CCDLineОбъект.ТаможеннаяСтоимость;
			
		КонецЕсли;
		
		CCDCustomsCost = CCDCustomsCost + CCDLineCustomsCost;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат 0;
	Иначе
		ЗафиксироватьТранзакцию();
	   	Возврат CCDCustomsCost;
	КонецЕсли;
   
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ


/////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА ТОВАРЫ

&НаКлиенте
Процедура СтрокиГТДСписокПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаГТД = Элементы.СтрокиГТДСписок.ТекущаяСтрока;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ТоварыСтрокиГТД.Отбор,
		"Владелец",
		ТекСтрокаГТД,
		ВидСравненияКомпоновкиДанных.Равно);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СтрокиГТДПредоставленныеДокументы.Отбор,
		"Ссылка",
		ТекСтрокаГТД,
		ВидСравненияКомпоновкиДанных.Равно);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СтрокиГТДИсчислениеПлатежей.Отбор,
		"Ссылка",
		ТекСтрокаГТД,
		ВидСравненияКомпоновкиДанных.Равно);
						  	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиГТДСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось добавить новую строку: 
				|не удалось записать документ: " + ОписаниеОшибки(),
				,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
      

/////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА CUSTOMS PAYMENT ALLOCATIONS

&НаКлиенте
Процедура ТабличноеПолеCustomsPaymentsAllocationsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// FUTURE CUSTOMS PAYMENTS

&НаКлиенте
Процедура FutureCustomsPaymentsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// OTHER

&НаКлиенте
Процедура ProcessLevelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Проверим, что уже выбрана страна
	Если НЕ ЗначениеЗаполнено(Объект.Country) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Country"" is empty!",
			, "Country", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////
// ПЕЧАТЬ

&НаКлиенте
Процедура ОсновныеДействияФормыПечатьГТД(Команда)
	
	ТабДок = ПечатьГТД();
	ТабДок.Показать("ГТД");
	
КонецПроцедуры

&НаСервере
Функция ПечатьГТД()
	
	Макет = Документы.ГТД.ПолучитьМакет("ГТД"); 
	ТабДок = Новый ТабличныйДокумент;
	ОбластьШапкаТД1 = Макет.ПолучитьОбласть("ШапкаТД1");
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	ОбластьПодвалТД1 = Макет.ПолучитьОбласть("ПодвалТД1");
	ОбластьШапкаТД2 = Макет.ПолучитьОбласть("ШапкаТД2");
	ОбластьПодвалТД2 = Макет.ПолучитьОбласть("ПодвалТД2");
	НомЛиста = 1;
	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНЕНИЕ ОСНОВНОГО ЛИСТА ГТД
	
	// Заполнение шапки основного листа ГТД (графы с 1 по 30)
	ПараметрыШапки = ОбластьШапкаТД1.Параметры;
	ПараметрыШапки.БуквыТаможРежима = Объект.ProcedureCode;
	ПараметрыШапки.ЦифрыТаможРежима = Объект.ModeCode;
	ПараметрыШапки.НомЛиста = НомЛиста; 
	ПараметрыШапки.ДопСтраницы = Объект.КоличествоСтраниц;
	ПараметрыШапки.ВсегоТов = Объект.КолвоТоваров;
	ПараметрыШапки.ВсегоМест = Объект.КолвоМест;
	ПараметрыШапки.Наименование = Объект.Номер;	
	ПараметрыШапки.ТамСтоимость = Объект.ОбщаяТамСтоимость; 
	ПараметрыШапки.СтранаНазначенияКод = Объект.СтранаНазначенияКод;
	ПараметрыШапки.СтранаНазначения = Объект.СтранаНазначения;
	ПараметрыШапки.СтранаОтправленияКод = Объект.СтранаОтправленияКод;
	ПараметрыШапки.СтранаОтправления = Объект.СтранаОтправления;
	ПараметрыШапки.СтранаПроисхождения = Объект.СтранаПроисхождения;
	ПараметрыШапки.Декларант = Объект.Декларант + Символы.ПС + Объект.ДекларантАдрес;
	ПараметрыШапки.ДекларантИННКПП = ?(СтрДлина(СокрЛП(Объект.ДекларантИНН)) > 0, "№ ", "") + СокрЛП(Объект.ДекларантИНН) + ?(СтрДлина(СокрЛП(Объект.ДекларантИНН)) > 0, "/", "") + СокрЛП(Объект.ДекларантКПП);
	ПараметрыШапки.Отправитель = Объект.Отправитель + Символы.ПС + Объект.ОтправительАдрес;
	ПараметрыШапки.ОтправительИННКПП = ?(СтрДлина(СокрЛП(Объект.ОтправительИНН)) > 0, "№ ", "") + СокрЛП(Объект.ОтправительИНН) + ?(СтрДлина(СокрЛП(Объект.ОтправительИНН)) > 0, "/", "") + СокрЛП(Объект.ОтправительКПП);
	ПараметрыШапки.Получатель = Объект.Получатель + Символы.ПС + Объект.ПолучательАдрес;
	ПараметрыШапки.ПолучательИННКПП = ?(СтрДлина(СокрЛП(Объект.ПолучательИНН)) > 0, "№ ", "") + СокрЛП(Объект.ПолучательИНН) + ?(СтрДлина(СокрЛП(Объект.ПолучательИНН)) > 0, "/", "") + СокрЛП(Объект.ПолучательКПП);
	ПараметрыШапки.ОтветственноеЛицо = Объект.ОтветственноеЛицо + Символы.ПС + Объект.ОтветственноеЛицоАдрес;
	ПараметрыШапки.ОтветственноеЛицоИННКПП = ?(СтрДлина(СокрЛП(Объект.ОтветственноеЛицоИНН)) > 0, "№ ", "") + СокрЛП(Объект.ОтветственноеЛицоИНН) + ?(СтрДлина(СокрЛП(Объект.ОтветственноеЛицоИНН)) > 0, "/", "") + СокрЛП(Объект.ОтветственноеЛицоКПП);
	ПараметрыШапки.УсловияПоставки =  Объект.УсловияПоставки;
	ПараметрыШапки.БанковскиеСведения = "2-" + Объект.БанковскиеСведения;
	ПараметрыШапки.КодВалютыКонтракта = Объект.ContractCurrency;	
	ПараметрыШапки.КурсВалютыКонтракта = Объект.ContractCurrencyRate;
	ПараметрыШапки.ФактурнаяСтоимость = Объект.TotalInvoiceAmount; 
	ПараметрыШапки.ТСПриОтправлении = СокрЛП(Объект.ТСПриОтправлении) + " " +СокрлП(Объект.ТСПриОтправленииНомер); 
	ПараметрыШапки.ТСПриОтправленииСтранаРег = Объект.ТСПриОтправленииСтранаРег; 
	ПараметрыШапки.КонтейнерПризнак = Объект.КонтейнерПризнак; 
	ПараметрыШапки.ТСНаГранице = СокрЛП(Объект.ТСНаГранице) + " " + СокрЛП(Объект.ТСНаграницеНомер);
	ПараметрыШапки.ТСНаГраницеСтранаРег = Объект.ТСНаГраницеСтранаРег; 
	ПараметрыШапки.ТСНаГраницеВид = Объект.ТСНаГраницеВид;
	ПараметрыШапки.ПунктПоставкиТовара = Объект.ПунктПоставкиТовара;
	ПараметрыШапки.МестонахождениеТоваров = Объект.МестонахождениеТоваров;
	ПараметрыШапки.МестоПогрузки = Объект.МестоПогрузки; 
	ПараметрыШапки.ТоргСтрана = Объект.ТоргСтрана;
	//ПараметрыШапки.НомерБланка = СтрокаСостав.НомерБланка;
	ТабДок.Вывести(ОбластьШапкаТД1);
	
	// Получение данных по товарам
	СтруктураТаблиц = ПолучитьСтруктуруСДаннымиПоСтрокамГТД();
	
	ТаблицаСтрокиГТД				= СтруктураТаблиц.СтрокиГТД;
	ТаблицаСоставДетальный			= СтруктураТаблиц.СоставДетальный;
	ТаблицаПредоставленныеДокументы	= СтруктураТаблиц.ПредоставленныеДокументы;
	ТаблицаИсчислениеПлатежей		= СтруктураТаблиц.ИсчислениеПлатежей;
	
	// Заполнение товара 1 основного листа ГТД (графы с 31 по 46, за исключением 44)
	СтрокаГТД = ТаблицаСтрокиГТД.Получить(0); 
	
	ОбластьТовар.Параметры.Код			= СтрокаГТД.НомерСтрокиГТД;
	ОбластьТовар.Параметры.ТНВЭД1		= Лев(СтрокаГТД.КодТНВЭД, 6);
	ОбластьТовар.Параметры.ТНВЭД2		= Сред(СтрокаГТД.КодТНВЭД, 7, 2);
	ОбластьТовар.Параметры.ТНВЭД3		= Сред(СтрокаГТД.КодТНВЭД, 9, 2);
	ОбластьТовар.Параметры.Наименование	= "1-" + СтрокаГТД.ОписаниеТовара;
	ОбластьТовар.Параметры.ВесБрутто	= СтрокаГТД.ВесБрутто;
	ОбластьТовар.Параметры.ВесНетто		= СтрокаГТД.ВесНетто;
	ОбластьТовар.Параметры.СтранаПроисхожденияКод	= СтрокаГТД.КодСтраныПроисхождения;
	ОбластьТовар.Параметры.СтатистическаяСтоимость	= СтрокаГТД.СтатистическаяСтоимость;
	ОбластьТовар.Параметры.ТаможеннаяСтоимость		= СтрокаГТД.ТаможеннаяСтоимость;
	ОбластьТовар.Параметры.ДопЕдиницаИзмерения	 	= СтрокаГТД.КодЕдиницыИзмеренияДополнительный;
		
	СтруктураПоискаСтрокТовара1 = Новый Структура("СтрокаГТД", СтрокаГТД.СтрокаГТД);
	
	// Заполнение области документов для товара 1 (графа 44)
	ТаблицаДокументовТовара1 = ТаблицаПредоставленныеДокументы.НайтиСтроки(СтруктураПоискаСтрокТовара1);
	ДопИнформация = "";
	
	Для каждого Стр ИЗ ТаблицаДокументовТовара1 Цикл
		
		ДопИнформация = ДопИнформация + Стр.КодВидаДокумента + " " + СокрЛП(Стр.Номер)
		+ ?(Стр.Дата = '00010101000000', "", " ОТ " + Формат(Стр.Дата, "ДФ=dd/MM/yy"))
		+ Символы.ПС;
		
	КонецЦикла;
	
	ОбластьТовар.Параметры.ДопИнформация = ДопИнформация;
	ТабДок.Вывести(ОбластьТовар);
	
	// Заполнение области платежей для товара 1 (графа 47)
	ТаблицаПлатежейТовара1 = ТаблицаИсчислениеПлатежей.НайтиСтроки(СтруктураПоискаСтрокТовара1);
	Индекс = 1;
	СуммаПлатежаПоТовару = 0;
	
	Для каждого Стр ИЗ ТаблицаПлатежейТовара1 Цикл
		
		ОбластьПодвалТД1.Параметры["Код" + Индекс] = Стр.КодВидаПлатежа;
		ОбластьПодвалТД1.Параметры["ОсноваНачисления" + Индекс] = Стр.ОсноваНачисления;
		
		Если Стр.КодТипаСтавки = "%" Тогда 
			ОбластьПодвалТД1.Параметры["Ставка" + Индекс] = Строка(Формат(Стр.Ставка, "ЧДЦ=2")) + Стр.КодТипаСтавки;
		Иначе
			
			Валюта = Стр.КодВалютыОсновыНачисления;
			Если Валюта = "643" ИЛИ Валюта = "643" Тогда
				ВалютаСтавки = Справочники.Валюты.НайтиПоКоду("643");
			Иначе
				ВалютаСтавки = Справочники.Валюты.НайтиПоКоду(Валюта);
			КонецЕсли;
			
			ОбластьПодвалТД1.Параметры["Ставка" + Индекс] = Строка(Формат(Стр.Ставка, "ЧДЦ=2")) + ВалютаСтавки;
		КонецЕсли;
		
		СуммаПлатежаПоТовару = СуммаПлатежаПоТовару + Стр.СуммаПлатежа;
		ОбластьПодвалТД1.Параметры["СуммаПлатежа" + Индекс] = Стр.СуммаПлатежа;
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ОбластьПодвалТД1.Параметры.СуммаПлатежа = СуммаПлатежаПоТовару;
	
	// Заполнение области подсчета по ГТД (графа В)
	ТаблицаПодсчета = ТаблицаИсчислениеПлатежей.Скопировать();
	ТаблицаПодсчета.Свернуть("КодВидаПлатежа, КодВалютыПлатежа", "СуммаПлатежа");
	ТаблицаПодсчета.Сортировать("КодВидаПлатежа");
	
	Подсчет = "";
	Для Каждого Стр Из ТаблицаПодсчета Цикл
		Подсчет = Подсчет + Стр.КодВидаПлатежа + "-" + Формат(Стр.СуммаПлатежа, "ЧДЦ=2") + "-" + Стр.КодВалютыПлатежа + Символы.ПС;
	Конеццикла;
	Подсчет = Подсчет + "ИТОГО по графе <B>:" + Символы.ПС;
	
	ТаблицаПодсчета.Свернуть("КодВалютыПлатежа", "СуммаПлатежа");
	Для Каждого Стр Из ТаблицаПодсчета Цикл
		
		Если Стр.КодВалютыПлатежа = "643" ИЛИ Стр.КодВалютыПлатежа = "643" Тогда
			НаименованиеВалюты = Справочники.Валюты.НайтиПоКоду("643");
		Иначе
			НаименованиеВалюты = Справочники.Валюты.НайтиПоКоду(Стр.КодВалютыПлатежа);
		КонецЕсли;
		
		Подсчет = Подсчет + Формат(Стр.СуммаПлатежа, "ЧДЦ=2") + " " + НаименованиеВалюты + Символы.ПС;
	КонецЦикла;
	
	ОбластьПодвалТД1.Параметры.Подсчет = Подсчет;
	
	// Заполнение области Место и дата (графа 54)
	МестоИДата = "";
	
	МестоИДата2 = "2-" + СокрЛП(Объект.БрокерФИО) +  " " + СокрЛП(Объект.БрокерДокументЛичность) + " "
		+ СокрЛП(Объект.БрокерДокументЛичностьСерия) + " " + СокрЛП(Объект.БрокерДокументЛичностьНомер)
		+ " ВЫД " + СокрЛП(Объект.БрокерДокументЛичностьОргВыдачи) + " " + Формат(Объект.БрокерДокументЛичностьДата, "ДФ=""дд.ММ.гг""")
		+ " ТЕЛ." + СокрЛП(Объект.БрокерТелефон) + " " + СокрЛП(Объект.БрокерДолжность) + Символы.ПС
		+ "3-" + СокрЛП(Объект.БрокерДокумент) + " " + СокрЛП(Объект.БрокерДокументНомер)
		+ " ОТ " + Формат(Объект.БрокерДокументДата, "ДФ=""дд.ММ.гг""")
		+ " ДО " + Формат(Объект.БрокерДокументДатаОкончания, "ДФ=""дд.ММ.гг""");
		
	ОбластьПодвалТД1.Параметры.МестоИДата2 = МестоИДата2;
	ТабДок.Вывести(ОбластьПодвалТД1);
	
	//////////////////////////////////////////////////////////
	// ЗАПОЛНЕНИЕ ДОПОЛНИТЕЛЬНЫХ ЛИСТОВ ГТД
	
	НомЛиста = 2;
	НомТовараДопЛиста = 1;
	
	Пока НомЛиста <= Объект.КоличествоСтраниц Цикл
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Заполнение шапки Доп листа
		ОбластьШапкаТД2.Параметры.БуквыТаможРежима = Объект.ProcedureCode;
		ОбластьШапкаТД2.Параметры.ЦифрыТаможРежима = Объект.ModeCode;
		ОбластьШапкаТД2.Параметры.ДопСтраницы = Объект.КоличествоСтраниц;
		ОбластьШапкаТД2.Параметры.НомЛиста = НомЛиста;
		ОбластьШапкаТД2.Параметры.Наименование = Объект.Номер;
		ТабДок.Вывести(ОбластьШапкаТД2);  
		
		// Заполнение товара на Доп листе
		
		Для КоличествоТоваровНаДопЛисте = 1 По 3 Цикл
			
			Если НомТовараДопЛиста < Объект.КолвоТоваров Тогда
				
				// Заполнение товара доп листа ГТД (графы с 31 по 46, за исключением 44)
				СтрокаГТД = ТаблицаСтрокиГТД.Получить(НомТовараДопЛиста - 1);
				ОбластьТовар.Параметры.Код = СтрокаГТД.НомерСтрокиГТД;
				ОбластьТовар.Параметры.ТНВЭД1 = Лев(СтрокаГТД.КодТНВЭД, 6);
				ОбластьТовар.Параметры.ТНВЭД2 = Сред(СтрокаГТД.КодТНВЭД, 7, 2);
				ОбластьТовар.Параметры.ТНВЭД3 = Сред(СтрокаГТД.КодТНВЭД, 9, 2);
				ОбластьТовар.Параметры.Наименование = "1-" + СтрокаГТД.ОписаниеТовара;
				ОбластьТовар.Параметры.ВесБрутто = СтрокаГТД.ВесБрутто;
				ОбластьТовар.Параметры.ВесНетто = СтрокаГТД.ВесНетто;
				ОбластьТовар.Параметры.СтранаПроисхожденияКод = СтрокаГТД.КодСтраныПроисхождения;
				ОбластьТовар.Параметры.СтатистическаяСтоимость = СтрокаГТД.СтатистическаяСтоимость;
				ОбластьТовар.Параметры.ТаможеннаяСтоимость = СтрокаГТД.ТаможеннаяСтоимость;
				ОбластьТовар.Параметры.ДопЕдиницаИзмерения = СтрокаГТД.КодЕдиницыИзмеренияДополнительный;
				
				СтруктураПоискаСтрокТовара = Новый Структура("СтрокаГТД", СтрокаГТД.СтрокаГТД);
				
				// Заполнение области документов доп листа для товара (графа 44)
				ТаблицаДокументовТовара = ТаблицаПредоставленныеДокументы.НайтиСтроки(СтруктураПоискаСтрокТовара);
				ДопИнформация = "";
				
				Для каждого Стр ИЗ ТаблицаДокументовТовара Цикл
					
					ДопИнформация = ДопИнформация + Стр.КодВидаДокумента + " " + СокрЛП(Стр.Номер)
					+ ?(Стр.Дата = '00010101000000', "", " ОТ " + Формат(Стр.Дата, "ДФ=dd/MM/yy"))
					+ Символы.ПС;
					
				КонецЦикла;
				
				ОбластьТовар.Параметры.ДопИнформация = ДопИнформация;
				
				// Заполнение области платежей доп листа для товара (графа 47)
				ТаблицаПлатежейТовара = ТаблицаИсчислениеПлатежей.НайтиСтроки(СтруктураПоискаСтрокТовара);
				Индекс = 1;
				СуммаПлатежаПоТовару = 0;
				
				Для Каждого СтрокаПлатежи Из ТаблицаПлатежейТовара Цикл
					
					ОбластьПодвалТД2.Параметры["Код" + КоличествоТоваровНаДопЛисте + Индекс] = СтрокаПлатежи.КодВидаПлатежа;
					ОбластьПодвалТД2.Параметры["ОсноваНачисления" + КоличествоТоваровНаДопЛисте + Индекс] = СтрокаПлатежи.ОсноваНачисления;
					
					Если СтрокаПлатежи.КодТипаСтавки = "%" Тогда 
						ОбластьПодвалТД2.Параметры["Ставка" + КоличествоТоваровНаДопЛисте + Индекс] = Строка(Формат(СтрокаПлатежи.Ставка, "ЧДЦ=2")) + СтрокаПлатежи.КодТипаСтавки;
					Иначе
						ОбластьПодвалТД2.Параметры["Ставка" + КоличествоТоваровНаДопЛисте + Индекс] = Строка(Формат(СтрокаПлатежи.Ставка, "ЧДЦ=2"));
					КонецЕсли;
					
					СуммаПлатежаПоТовару = СуммаПлатежаПоТовару + СтрокаПлатежи.СуммаПлатежа; 
					ОбластьПодвалТД2.Параметры["СуммаПлатежа" + КоличествоТоваровНаДопЛисте + Индекс] = СтрокаПлатежи.СуммаПлатежа;
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
				ОбластьПодвалТД2.Параметры["СуммаПлатежа" + КоличествоТоваровНаДопЛисте] = СуммаПлатежаПоТовару;
				НомТовараДопЛиста = НомТовараДопЛиста + 1;
				
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьТовар);
			
			// Очищаем параметры
			Для НомерПараметра = 0 По ОбластьТовар.Параметры.Количество() - 1  Цикл
				ОбластьТовар.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
				
		КонецЦикла;
		
		ТабДок.Вывести(ОбластьПодвалТД2);
		
		НомЛиста = НомЛиста + 1;
		
		// Очищаем параметры
		Для НомерПараметра = 0 По ОбластьПодвалТД2.Параметры.Количество() - 1  Цикл
			ОбластьПодвалТД2.Параметры.Установить(НомерПараметра, "");
		КонецЦикла;
			
	КонецЦикла;
	
	ТабДок.ОтображатьСетку = Ложь;
	//Табдок.ТолькоПросмотр = Истина;
	//ТабДок.Защита = Истина;
	Возврат ТабДок;  
		
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСДаннымиПоСтрокамГТД()
	
	РезультатПакетаЗапросов = ПолучитьМассивРезультатовПакетовЗапросовСДаннымиПоСтрокамГТД();
	
	ТаблицаСтрокиГТД = РезультатПакетаЗапросов[0].Выгрузить();
	ТаблицаСтрокиГТД.Индексы.Добавить("СтрокаГТД");
	
	ТаблицаСоставДетальный = РезультатПакетаЗапросов[1].Выгрузить();
	ТаблицаСоставДетальный.Индексы.Добавить("СтрокаГТД");
	
	ТаблицаПредоставленныеДокументы = РезультатПакетаЗапросов[2].Выгрузить();
	ТаблицаПредоставленныеДокументы.Индексы.Добавить("СтрокаГТД");
	
	ТаблицаИсчислениеПлатежей = РезультатПакетаЗапросов[3].Выгрузить();
	ТаблицаИсчислениеПлатежей.Индексы.Добавить("СтрокаГТД");
	
	Структура = Новый Структура;
	Структура.Вставить("СтрокиГТД", ТаблицаСтрокиГТД);
	Структура.Вставить("СоставДетальный", ТаблицаСоставДетальный);
	Структура.Вставить("ПредоставленныеДокументы", ТаблицаПредоставленныеДокументы);
	Структура.Вставить("ИсчислениеПлатежей", ТаблицаИсчислениеПлатежей);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивРезультатовПакетовЗапросовСДаннымиПоСтрокамГТД()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГТД", Объект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиГТД.Ссылка КАК СтрокаГТД,
		|	СтрокиГТД.НомерСтрокиГТД КАК НомерСтрокиГТД,
		|	СтрокиГТД.ВесБрутто,
		|	СтрокиГТД.ВесНетто,
		|	СтрокиГТД.ТаможеннаяСтоимость,
		|	СтрокиГТД.СтатистическаяСтоимость,
		|	СтрокиГТД.КодТНВЭД,
		|	СтрокиГТД.КодСтраныПроисхождения,
		|	СтрокиГТД.КодЕдиницыИзмеренияДополнительный,
		|	СтрокиГТД.ОписаниеТовара
		|ИЗ
		|	Справочник.СтрокиГТД КАК СтрокиГТД
		|ГДЕ
		|	СтрокиГТД.ГТД = &ГТД
		|	И (НЕ СтрокиГТД.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСтрокГТД.Владелец КАК СтрокаГТД,
		|	ТоварыСтрокГТД.Характеристика КАК ОписаниеТовара,
		|	ТоварыСтрокГТД.Производитель,
		|	ТоварыСтрокГТД.ТорговаяМарка,
		|	ТоварыСтрокГТД.МаркаТовара,
		|	ТоварыСтрокГТД.МаркировкаТовара,
		|	ТоварыСтрокГТД.Количество,
		|	ТоварыСтрокГТД.НазваниеЕдиницыИзмерения,
		|	ТоварыСтрокГТД.КодЕдиницыИзмерения
		|ИЗ
		|	Справочник.ТоварыСтрокГТД КАК ТоварыСтрокГТД
		|ГДЕ
		|	ТоварыСтрокГТД.Владелец.ГТД = &ГТД
		|	И (НЕ ТоварыСтрокГТД.Владелец.ПометкаУдаления)
		|	И (НЕ ТоварыСтрокГТД.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиГТДПредоставленныеДокументы.Ссылка КАК СтрокаГТД,
		|	СтрокиГТДПредоставленныеДокументы.Наименование,
		|	СтрокиГТДПредоставленныеДокументы.Номер,
		|	СтрокиГТДПредоставленныеДокументы.Дата,
		|	СтрокиГТДПредоставленныеДокументы.КодВидаДокумента
		|ИЗ
		|	Справочник.СтрокиГТД.ПредоставленныеДокументы КАК СтрокиГТДПредоставленныеДокументы
		|ГДЕ
		|	СтрокиГТДПредоставленныеДокументы.Ссылка.ГТД = &ГТД
		|	И (НЕ СтрокиГТДПредоставленныеДокументы.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиГТДИсчислениеПлатежей.Ссылка КАК СтрокаГТД,
		|	СтрокиГТДИсчислениеПлатежей.КодВидаПлатежа,
		|	СтрокиГТДИсчислениеПлатежей.ВидПлатежа,
		|	СтрокиГТДИсчислениеПлатежей.СуммаПлатежа,
		|	СтрокиГТДИсчислениеПлатежей.КодВалютыПлатежа,
		|	СтрокиГТДИсчислениеПлатежей.ОсноваНачисления,
		|	СтрокиГТДИсчислениеПлатежей.КодВалютыОсновыНачисления,
		|	СтрокиГТДИсчислениеПлатежей.Ставка,
		|	СтрокиГТДИсчислениеПлатежей.КодТипаСтавки,
		|	СтрокиГТДИсчислениеПлатежей.ДатаКурса,
		|	СтрокиГТДИсчислениеПлатежей.ДатаСтавки
		|ИЗ
		|	Справочник.СтрокиГТД.ИсчислениеПлатежей КАК СтрокиГТДИсчислениеПлатежей
		|ГДЕ
		|	СтрокиГТДИсчислениеПлатежей.Ссылка.ГТД = &ГТД
		|	И (НЕ СтрокиГТДИсчислениеПлатежей.Ссылка.ПометкаУдаления)";
		
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура SaveCommentНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	ДокОбъект = ОбъектДляСервера.Ссылка.ПолучитьОбъект();
	ДокОбъект.Comment = ОбъектДляСервера.Comment;
	ДокОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ДокОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Failed to save comment!");
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ИзмененТолькоКомментарий()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	// проверим изменилось ли еще что-то кроме комента
	ИзмененныеДанные = ImportExportСервер.ПолучитьИзменныеДанныеОбъекта(ОбъектДляСервера);
	//проверяем неизменность всех ТЧ
	СписокТЧ = ОбъектДляСервера.Метаданные().ТабличныеЧасти;
	Для каждого ТекТЧ Из СписокТЧ Цикл
		Если ИзмененныеДанные[ТекТЧ.Имя].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененныеРеквизиты = ИзмененныеДанные["Реквизиты"];
	
	Если ИзмененныеРеквизиты.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ИзмененныеРеквизиты[0] = "Comment";
	
КонецФункции

&НаКлиенте
Процедура SaveComment(Команда)
	
	Если Не Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("No need to save comment");
		Возврат;
	КонецЕсли;
	
	Если Не ИзмененТолькоКомментарий() Тогда
		Ответ = Вопрос("There is a changed data besides the comment. If you continue, the data changes will be lost. Continue?", РежимДиалогаВопрос.ДаНет, 60);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	SaveCommentНаСервере();
	
	Модифицированность = Ложь;
	
КонецПроцедуры
     
