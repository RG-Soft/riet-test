
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ДанныеЗаполнения.Свойство("ProcessLevel", ProcessLevel);
		ДанныеЗаполнения.Свойство("Country", Country);
					
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ПараметрыСеанса.ТекущийПользователь, "ProcessLevel");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Country) И ЗначениеЗаполнено(ProcessLevel) Тогда
		Country = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

// ДОДЕЛАТЬ
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных();
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными();
		
	ПроверитьВозможностьИзменения(
		Отказ,
		ДополнительныеСвойства.ВыборкаПроведенныхInvoiceLinesMatchings,
		ДополнительныеСвойства.ВыборкаПроведенныхPaymentsAllocations);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПЕРЕДАВАТЬ ДАННЫЕ В ЯВНОМ ВИДЕ
	ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи,
		ДополнительныеСвойства.ДублиПоTemporaryImpExpTransaction);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных()
	
	Дата = НачалоДня(Дата);
	SequenceNo = СокрЛП(SequenceNo);
	
	Отправитель = СокрЛП(Отправитель);
	
	Если ЭтоНовый() Тогда
		CreatedBy = ПараметрыСеанса.ТекущийПользователь;
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;
	
	ИтогоПоГрафеВ = ПодробностиПодсчета.Итог("СуммаПлатежа");
	
	PaidByCCA = Ложь;
	Для Каждого СтрокаТЧ Из ПодробностиПодсчета Цикл
		СтрокаТЧ.КодВидаПлатежа = СокрЛП(СтрокаТЧ.КодВидаПлатежа);	
		Если СтрокаТЧ.PaidByCCA Тогда
			PaidByCCA = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(CustomsPost) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Customs post"" is empty!",
			ЭтотОбъект, "CustomsPost", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Date"" is empty!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(SequenceNo) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Seq. no."" is empty!",
			ЭтотОбъект, "SequenceNo", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Shipment) Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Shipment' is empty!",
			ЭтотОбъект, "Shipment", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Отправитель"" is empty!",
			ЭтотОбъект, "Отправитель", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(SoldTo) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Parent co."" is empty!",
			ЭтотОбъект, "SoldTo", , Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Regime) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Regime"" is empty!",
			ЭтотОбъект, "Regime", , Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаВыпуска) Тогда
		
		Если ДатаВыпуска < Дата Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Release date"" can not be earlier than ""Date""!",
				ЭтотОбъект, "ДатаВыпуска", , Отказ);
		ИначеЕсли ДатаВыпуска - Дата > 100 * 24 * 60 * 60 Тогда // Сто дней
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Release date"" can not be later than 100 days since ""Date""!",
				ЭтотОбъект, "ДатаВыпуска", , Отказ);	
		КонецЕсли;
				
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Release date"" is empty!",
			ЭтотОбъект, "ДатаВыпуска", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоСтраниц) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Num. of pages"" is emtpy!",
			ЭтотОбъект, "КоличествоСтраниц", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КолвоТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Num. of lines"" is empty!",
			ЭтотОбъект, "КолвоТоваров", , Отказ);
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(КодВалютыТамСтоимости) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Currency"" is empty!",
			ЭтотОбъект, "КодВалютыТамСтоимости", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ContractCurrency) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Contract currency"" is empty!",
			ЭтотОбъект, "ContractCurrency", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ContractCurrencyRate) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Contract currency rate"" is empty!",
			ЭтотОбъект, "ContractCurrencyRate", , Отказ);
	КонецЕсли;
	
	// Проверим заполнение таблицы Подробности подсчета
	Для Каждого СтрокаТЧ Из ПодробностиПодсчета Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КодВидаПлатежа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке " + СтрокаТЧ.НомерСтроки + " таблицы ""Подробности подсчета"": поле ""Код вида платежа"" не заполнено!",
				ЭтотОбъект, "ПодробностиПодсчета[" + (СтрокаТЧ.НомерСтроки-1) + "].КодВидаПлатежа",, Отказ);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаПлатежа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке " + СтрокаТЧ.НомерСтроки + " таблицы ""Подробности подсчета"": поле ""Сумма платежа"" не заполнено!",
				ЭтотОбъект, "ПодробностиПодсчета[" + (СтрокаТЧ.НомерСтроки-1) + "].СуммаПлатежа",, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(CCA) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""CCA"" is empty!",
			ЭтотОбъект, "CCA", , Отказ);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Country) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Country"" is empty!",
			ЭтотОбъект, "Country", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Process level"" is empty!",
			ЭтотОбъект, "ProcessLevel", , Отказ);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьДополнительныеДанныеВДополнительныеСвойстваПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	СтруктураПараметров.Вставить("Ссылка", Ссылка);		
	СтруктураПараметров.Вставить("Shipment", Shipment);
	
	// Запросы, выполняемые для не помеченных на удаление Customs files
	Если НЕ ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(Shipment) И ТипЗнч(Shipment) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			
			СтруктураТекстов.Вставить("ДублиПоTemporaryImpExpTransaction",
				"ВЫБРАТЬ
				|	ГТД.Ссылка
				|ИЗ
				|	Документ.ГТД КАК ГТД
				|ГДЕ
				|	ГТД.Shipment = &Shipment
				|	И НЕ ГТД.ПометкаУдаления
				|	И ГТД.Ссылка <> &Ссылка");
			
		КонецЕсли;	
		
	КонецЕсли;

	// Запросы, выполняемые для уже проведенных Customs files
	Если Проведен Тогда
		
		СтруктураТекстов.Вставить("ПроведенныеInvoiceLinesMatchings",
			"ВЫБРАТЬ
			|	InvoiceLinesMatching.Представление КАК InvoiceLinesMatchingПредставление
			|ИЗ
			|	Документ.ГТД КАК ГТД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеПоставки КАК InvoiceLinesMatching
			|		ПО ГТД.Shipment = InvoiceLinesMatching.Поставка
			|			И (InvoiceLinesMatching.Проведен)
			|ГДЕ
			|	ГТД.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("ПроведенныеPaymentsAllocations",
			"ВЫБРАТЬ
			|	CustomsPaymentAllocation.Представление КАК CustomsPaymentAllocationПредставление
			|ИЗ
			|	Документ.CustomsPaymentAllocation КАК CustomsPaymentAllocation
			|ГДЕ
			|	CustomsPaymentAllocation.CustomsDocument = &Ссылка
			|	И CustomsPaymentAllocation.Проведен");	
				
	КонецЕсли;
	
	// Запросы, выполняемые при проведении
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
		
		// Реквизиты Shipment
		Если ТипЗнч(Shipment) = Тип("ДокументСсылка.Поставка") Тогда 
			
			СтруктураТекстов.Вставить("РеквизитыShipment", 
				"ВЫБРАТЬ
				|	ImportShipment.Проведен,
				|	ImportShipment.ИмпортЭкспорт КАК ImportExport,
				|	ImportShipment.CCA,
				|	ImportShipment.InCustoms,
				|	ImportShipment.Cleared,
				|	ImportShipment.ProcessLevel.Country КАК Country
				|ИЗ
				|	Документ.Поставка КАК ImportShipment
				|ГДЕ
				|	ImportShipment.Ссылка = &Shipment");
				
			СтруктураТекстов.Вставить("ShipmentParentCompanies",
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	DOCsInvoices.Инвойс.Покупатель КАК ParentCompany
				|ИЗ
				|	Документ.Поставка.УпаковочныеЛисты КАК ShipmentDOCs
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCsInvoices
				|		ПО ShipmentDOCs.УпаковочныйЛист = DOCsInvoices.Ссылка
				|ГДЕ
				|	ShipmentDOCs.Ссылка = &Shipment");
				
		ИначеЕсли ТипЗнч(Shipment) = Тип("ДокументСсылка.ExportShipment") Тогда 	
				
			СтруктураТекстов.Вставить("РеквизитыShipment", 
				"ВЫБРАТЬ
				|	НЕ ExportShipment.ПометкаУдаления КАК Проведен,
				|	ЗНАЧЕНИЕ(Перечисление.ИмпортЭкспорт.Export) КАК ImportExport,
				|	ExportShipment.CCA,
				|	ExportShipment.SubmittedToCustoms КАК InCustoms,
				|	ExportShipment.ReleasedFromCustoms КАК Cleared,
				|	ExportShipment.ProcessLevel.Country КАК Country
				|ИЗ
				|	Документ.ExportShipment КАК ExportShipment
				|ГДЕ
				|	ExportShipment.Ссылка = &Shipment");
				
			СтруктураТекстов.Вставить("ShipmentParentCompanies",
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ExportShipmentExportRequests.ExportRequest.Company КАК ParentCompany
				|ИЗ
				|	Документ.ExportShipment.ExportRequests КАК ExportShipmentExportRequests
				|ГДЕ
				|	ExportShipmentExportRequests.Ссылка = &Shipment");
				
		ИначеЕсли ТипЗнч(Shipment) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
			
			СтруктураТекстов.Вставить("РеквизитыShipment", 
				"ВЫБРАТЬ
				|	TemporaryImpExpTransactions.Проведен,
				|	TemporaryImpExpTransactions.ProcessLevel.Country КАК Country,
				|	TemporaryImpExpTransactions.TypeOfTransaction
				|ИЗ
				|	Документ.TemporaryImpExpTransactions КАК TemporaryImpExpTransactions
				|ГДЕ
				|	TemporaryImpExpTransactions.Ссылка = &Shipment");
				
			СтруктураТекстов.Вставить("ShipmentParentCompanies",
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	TemporaryImpExpTransactionsItems.Item.SoldTo КАК ParentCompany
				|ИЗ
				|	Документ.TemporaryImpExpTransactions.Items КАК TemporaryImpExpTransactionsItems
				|ГДЕ
				|	TemporaryImpExpTransactionsItems.Ссылка = &Shipment");
									
		КонецЕсли;
			
		СтруктураТекстов.Вставить("ВременнаяТаблицаCCDLines",
			"ВЫБРАТЬ
			|	СтрокиГТД.Ссылка,
			|	СтрокиГТД.ТаможеннаяСтоимость,
			|	СтрокиГТД.СтатистическаяСтоимость,
			|	СтрокиГТД.TemporaryImportDate
			|ПОМЕСТИТЬ CCDLines
			|ИЗ
			|	Справочник.СтрокиГТД КАК СтрокиГТД
			|ГДЕ
			|	(НЕ СтрокиГТД.ПометкаУдаления)
			|	И СтрокиГТД.ГТД = &Ссылка");
			
		СтруктураТекстов.Вставить("CCDLines",
			"ВЫБРАТЬ
			|	CCDLines.Ссылка,
			|	CCDLines.ТаможеннаяСтоимость,
			|	CCDLines.СтатистическаяСтоимость,
			|	CCDLines.TemporaryImportDate
			|ИЗ
			|	CCDLines КАК CCDLines");
		
		СтруктураТекстов.Вставить("ИсчислениеПлатежей", 		
			"ВЫБРАТЬ
			|	ИсчислениеПлатежей.Ссылка КАК CCDLine,
			|	ИсчислениеПлатежей.ВидПлатежа КАК ВидПлатежа,
			|	ИсчислениеПлатежей.ВидПлатежа.ПометкаУдаления КАК ПометкаУдаленияВидаПлатежа,
			|	ИсчислениеПлатежей.КодВидаПлатежа,
			|	ИсчислениеПлатежей.СуммаПлатежа,
			|	ИсчислениеПлатежей.CVC,
			|	ИсчислениеПлатежей.СП,
			|	ИсчислениеПлатежей.НомерСтроки
			|ИЗ
			|	CCDLines КАК CCDLines
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиГТД.ИсчислениеПлатежей КАК ИсчислениеПлатежей
			|		ПО CCDLines.Ссылка = ИсчислениеПлатежей.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	CCDLine");
			
		СтруктураТекстов.Вставить("ПрисоединенныеФайлы", 		
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ГТДПрисоединенныеФайлы.Ссылка
			|ИЗ
			|	Справочник.ГТДПрисоединенныеФайлы КАК ГТДПрисоединенныеФайлы
			|ГДЕ
			|	ГТДПрисоединенныеФайлы.ВладелецФайла = &Ссылка
			|	И НЕ ГТДПрисоединенныеФайлы.ПометкаУдаления");
			
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
	
	ДополнительныеСвойства.Вставить("ВыборкаПроведенныхInvoiceLinesMatchings", Неопределено);
	Если СтруктураРезультатов.Свойство("ПроведенныеInvoiceLinesMatchings") Тогда
		ДополнительныеСвойства.ВыборкаПроведенныхInvoiceLinesMatchings = СтруктураРезультатов.ПроведенныеInvoiceLinesMatchings.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаПроведенныхPaymentsAllocations", Неопределено);
	Если СтруктураРезультатов.Свойство("ПроведенныеPaymentsAllocations") Тогда
		ДополнительныеСвойства.ВыборкаПроведенныхPaymentsAllocations = СтруктураРезультатов.ПроведенныеPaymentsAllocations.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДублиПоTemporaryImpExpTransaction", Неопределено);
	Если СтруктураРезультатов.Свойство("ДублиПоTemporaryImpExpTransaction") Тогда
		ДополнительныеСвойства.ДублиПоTemporaryImpExpTransaction = СтруктураРезультатов.ДублиПоTemporaryImpExpTransaction.Выгрузить();	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовShipment", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыShipment") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовShipment = СтруктураРезультатов.РеквизитыShipment.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовShipment.Следующий();		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаShipmentParentCompanies", Неопределено);
	Если СтруктураРезультатов.Свойство("ShipmentParentCompanies") Тогда
		ДополнительныеСвойства.ТаблицаShipmentParentCompanies = СтруктураРезультатов.ShipmentParentCompanies.Выгрузить();
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("ТаблицаСтрокГТД", Неопределено);
	Если СтруктураРезультатов.Свойство("CCDLines") Тогда
		ДополнительныеСвойства.ТаблицаСтрокГТД = СтруктураРезультатов.CCDLines.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаИсчисленияПлатежей", Неопределено);
	Если СтруктураРезультатов.Свойство("ИсчислениеПлатежей") Тогда
		ДополнительныеСвойства.ТаблицаИсчисленияПлатежей = СтруктураРезультатов.ИсчислениеПлатежей.Выгрузить();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаПрисоединенныхФайлов", Неопределено);
	Если СтруктураРезультатов.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеСвойства.ВыборкаПрисоединенныхФайлов = СтруктураРезультатов.ПрисоединенныеФайлы.Выбрать();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными()
	
	Если ЗначениеЗаполнено(CustomsPost) Тогда
		КодПоста =  СокрЛП(РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(CustomsPost, "Код"));
	Иначе
		КодПоста = "";
	КонецЕсли;
	НовыйНомер = CustomsСервер.ПолучитьНомерТаможенногоДокумента(КодПоста, Дата, SequenceNo);
	РГСофтКлиентСервер.УстановитьЗначение(Номер, НовыйНомер);
	
	Если ЗначениеЗаполнено(Regime) Тогда
		ImportExport = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Regime, "ImportExport");
		PermanentTemporary = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Regime, "PermanentTemporary");
	Иначе
		ImportExport = Неопределено;
		PermanentTemporary = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаПроведенныхInvoiceLinesMatchings, ВыборкаПроведенныхPaymentsAllocations)
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПроведенныхInvoiceLinesMatchings.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change current document, because """ + ВыборкаПроведенныхInvoiceLinesMatchings.InvoiceLinesMatchingПредставление + """ is posted!",
			ЭтотОбъект, , , Отказ);
	КонецЦикла;
	
	Пока ВыборкаПроведенныхPaymentsAllocations.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change current document, because """ + ВыборкаПроведенныхPaymentsAllocations.CustomsPaymentAllocationПредставление + """ is posted!",
			ЭтотОбъект, , , Отказ);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыСДополнительнымиДанными(Отказ, РежимЗаписи, ДублиПоTemporaryImpExpTransaction)
	
	ПроверитьЗаполнениеРеквизитовШапки(
		Отказ,
		РежимЗаписи,
		ДублиПоTemporaryImpExpTransaction,
		ДополнительныеСвойства.ВыборкаРеквизитовShipment,
		ДополнительныеСвойства.ТаблицаShipmentParentCompanies,
		ДополнительныеСвойства.ТаблицаСтрокГТД);
		
	ПроверитьЗаполнениеСтрокГТД(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ТаблицаСтрокГТД,
		ДополнительныеСвойства.ТаблицаИсчисленияПлатежей);
		
	ПроверитьЗаполнениеПодробностейПодсчета(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ТаблицаИсчисленияПлатежей);
		
	ПроверитьНаличиеПрисоединенныхФайлов(
		Отказ,
		РежимЗаписи,
		ДополнительныеСвойства.ВыборкаПрисоединенныхФайлов);
	
КонецПроцедуры

// ДОДЕЛАТЬ
Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, РежимЗаписи, ДублиПоTemporaryImpExpTransaction, ВыборкаРеквизитовShipment, ТаблицаShipmentParentCompanies, ТаблицаСтрокГТД)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
		
		// Проверка уникальности номера
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Номер", Номер);
		// ПЕРЕНЕСТИ В ОСНОВНОЙ ПАКЕТ
		Запрос.Текст = РГСофт.ПолучитьТекстЗапросаУникальностиДокумента(Метаданные());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"No. """ + СокрЛП(Номер) + """ уже использован в """ + Выборка.Представление + """!",
				ЭтотОбъект, "Номер", , Отказ);				
		КонецЕсли;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Shipment) И ТипЗнч(Shipment) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		Если ДублиПоTemporaryImpExpTransaction.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"There is already " + ДублиПоTemporaryImpExpTransaction[0].Ссылка + " for " + Shipment + "!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	// Сверим CustomsPost.ProcessLevel и ProcessLevel
	CustomsPostProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(CustomsPost, "ProcessLevel");
	Если CustomsPostProcessLevel <> ProcessLevel Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Process level """ + СокрЛП(CustomsPostProcessLevel) + """ of Customs post """ + СокрЛП(CustomsPost) + """ differs from Process level """ + СокрЛП(ProcessLevel) + """ of the document!",
			ЭтотОбъект, "CustomsPost", , Отказ);
	КонецЕсли;
	
	// Проверим, что в CustomsPost заполнен реквизит Customs
	CustomsPostCustoms = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(CustomsPost, "Customs");
	Если НЕ ЗначениеЗаполнено(CustomsPostCustoms) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"""Customs"" in ""Customs post " + СокрЛП(CustomsPost) + """ is empty!",
			ЭтотОбъект, "CustomsPost", , Отказ);
	КонецЕсли;
	
	// Сверим ParentCompany.Country и Country
	ParentCompanyCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(SoldTo, "Country");
	Если ParentCompanyCountry <> Country Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Country """ + СокрЛП(ParentCompanyCountry) + """ of Parent company """ + СокрЛП(SoldTo) + """ differs from Country """ + СокрЛП(Country) + """ of the document!",
			ЭтотОбъект, "SoldTo", , Отказ);
	КонецЕсли;
	
	// Проверим, что Shipment проведен
	Если НЕ ВыборкаРеквизитовShipment.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'" + Shipment + "' is not posted!",
			ЭтотОбъект, "Shipment", , Отказ);
	КонецЕсли;
	
	// Проверим, что в Shipment присутствует указанный Parent company
	МассивShipmentParentCompanies = ТаблицаShipmentParentCompanies.ВыгрузитьКолонку("ParentCompany");	
	Если МассивShipmentParentCompanies.Найти(SoldTo) = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is no Parent company '" + СокрЛП(SoldTo) + "' in '" + Shipment + "'!",
			ЭтотОбъект, "Shipment", , Отказ);
	КонецЕсли;	                    
	
	// Сверим Shipment.Country и Country
	Если ВыборкаРеквизитовShipment.Country <> Country Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Country '" + СокрЛП(ВыборкаРеквизитовShipment.Country) + "' of '" + Shipment + "' differs from Country '" + СокрЛП(Country) + "' of Customs file!",
			ЭтотОбъект, "Shipment", , Отказ);
	КонецЕсли;
	
	// Проверки только для Temporary imp. / exp. transaction
	Если ТипЗнч(Shipment) = Тип("ДокументСсылка.TemporaryImpExpTransactions") Тогда
		
		// TemporaryImpExpTransaction можно использовать только для постоянных режимов
		RegimePermanentTemporary = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Regime, "PermanentTemporary");
		Если RegimePermanentTemporary <> Перечисления.PermanentTemporary.Permanent Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Temporary imp. / exp. transaction can be used only with permanent regimes!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;
		
		// TemporaryImpExpTransaction.TypeOfTransaction
		Если ВыборкаРеквизитовShipment.TypeOfTransaction <> Перечисления.TypesOfTemporaryImpExpTransaction.PermanentImport
			И ВыборкаРеквизитовShipment.TypeOfTransaction <> Перечисления.TypesOfTemporaryImpExpTransaction.PermanentExport Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Only transactions of permanent types are allowed!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;
		
		// TemporaryImpExpTransaction.ImportExport vs. ImportExport
		ShipmentImportExport = Перечисления.TypesOfTemporaryImpExpTransaction.ПолучитьImportExport(ВыборкаРеквизитовShipment.TypeOfTransaction);
		Если ShipmentImportExport <> ImportExport Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Termporary imp. / exp. transaction is for '" + ShipmentImportExport + "', but Customs file is for '" + ImportExport + "'!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;	
				
	// Проверки для Import shipment и Export shipment
	Иначе
			
		// Shipment.CCA vs CCA
		Если ВыборкаРеквизитовShipment.CCA <> CCA Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"CCA '" + СокрЛП(ВыборкаРеквизитовShipment.CCA) + "' of Shipment differs from current CCA of Customs file!",
				ЭтотОбъект, "Shipment", , Отказ);		
		КонецЕсли;
		
		// Shipment type vs ImportExport			
		Если ТипЗнч(Shipment) = Тип("ДокументСсылка.Поставка") Тогда
			
			Если ВыборкаРеквизитовShipment.ImportExport <> ImportExport Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"You can not use '" + Shipment + "' with Regime '" + СокрЛП(Regime) + "'!",
					ЭтотОбъект, "Shipment", , Отказ);
			КонецЕсли;
				
		ИначеЕсли ТипЗнч(Shipment) = Тип("ДокументСсылка.ExportShipment") Тогда 
			
			Если ImportExport <> Перечисления.ИмпортЭкспорт.Export Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"You can not use Export shipment with Regime '" + СокрЛП(Regime) + "'!",
					ЭтотОбъект, "Shipment", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		// Shipment.InCustoms vs Дата    // S-I-0001559
		Если ВыборкаРеквизитовShipment.InCustoms > ДобавитьМесяц(Дата, 1) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In customs date '" + Формат(ВыборкаРеквизитовShipment.InCustoms, "ДЛФ=D") + "' of Shipment can not be later (more than a month) than the date of Customs file!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;
		
		// Shipment.Cleared vs ReleaseDate
		Если ЗначениеЗаполнено(ВыборкаРеквизитовShipment.Cleared)
			И ДатаВыпуска > ВыборкаРеквизитовShipment.Cleared Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Cleared date '" + Формат(ВыборкаРеквизитовShipment.Cleared, "ДЛФ=D") + "' of Shipment can not be earlier than the release date of Customs file!",
				ЭтотОбъект, "Shipment", , Отказ);
		КонецЕсли;
			
	КонецЕсли;
	
	// Сверим CustomsCost указанную в декларации и в ее строках
	CCDLinesCustomsCost = ТаблицаСтрокГТД.Итог("ТаможеннаяСтоимость");
	Если ОбщаяТамСтоимость <> CCDLinesCustomsCost Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Customs cost (" + ОбщаяТамСтоимость + ") differs from customs cost of CCD lines (" + CCDLinesCustomsCost + ")!",
			ЭтотОбъект, "ОбщаяТамСтоимость",, Отказ);		
	КонецЕсли;		
	
	// Сверим фактурную стоимость в декларации и статистическую стоимость в ее строках
	CCDLinesStatisticalCost = ТаблицаСтрокГТД.Итог("СтатистическаяСтоимость");
	Если TotalInvoiceAmount <> CCDLinesStatisticalCost Тогда
		
		ТекстОшибки = "Total invoice amount (" + TotalInvoiceAmount + ") differs from statistical cost of CCD lines (" + CCDLinesStatisticalCost + ")!";
		Если НЕ ЗначениеЗаполнено(TotalInvoiceAmount) Тогда
			Отказ = Истина;
		Иначе
			ТекстОшибки = "Non critical err. " + ТекстОшибки;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, "TotalInvoiceAmount");	 
			
	КонецЕсли;
	
	// Сверим ProcessLevel.Country и Country
	ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
	Если ProcessLevelCountry <> Country Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Country """ + СокрЛП(ProcessLevelCountry) + """ of Process level """ + СокрЛП(ProcessLevel) + """ differs from Country """ + СокрЛП(Country) + """ of the document!",
			ЭтотОбъект, "ProcessLevel", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСтрокГТД(Отказ, РежимЗаписи, ТаблицаСтрокГТД, ТаблицаИсчисленияПлатежей)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаСтрокГТД = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is no line for this customs file!",
			ЭтотОбъект, , , Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение таможенной и статистической стоимости
	Для Каждого СтрокаГТД Из ТаблицаСтрокГТД Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаГТД.СтатистическаяСтоимость) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In Customs file line """ + СтрокаГТД.Ссылка + """: Statistical cost is empty!",
				СтрокаГТД.Ссылка, "СтатистическаяСтоимость", , Отказ);
		КонецЕсли;
		
		// { RGS AArsentev 07.09.2017 ГТД Казахстана могут быть с пустой суммой
		Если СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SoldTo, "Код")) <> "SLI KZ" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаГТД.ТаможеннаяСтоимость) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In Customs file line """ + СтрокаГТД.Ссылка + """: Customs cost is empty!",
				СтрокаГТД.Ссылка, "ТаможеннаяСтоимость", , Отказ);
			КонецЕсли;
		КонецЕсли;
		// } RGS AArsentev 07.09.2017
		
	КонецЦикла;
	
	// Проверим, что при временном ввозе во всех строках ГТД указана дата вывоза
	RegimePermTemp = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Regime, "PermanentTemporary");	
	Если RegimePermTemp = Перечисления.PermanentTemporary.Temporary Тогда
		
		Для Каждого СтрокаГТД Из ТаблицаСтрокГТД Цикл
		
			Если ЗначениеЗаполнено(СтрокаГТД.TemporaryImportDate) Тогда
				
				Если СтрокаГТД.TemporaryImportDate < ДатаВыпуска Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"In Customs file line """ + СтрокаГТД.Ссылка + """: Temporary import date is earlier than Release date!",
						СтрокаГТД.Ссылка, "TemporaryImportDate", , Отказ);
					
				КонецЕсли;
						
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In Customs file line """ + СтрокаГТД.Ссылка + """: Temporary import date is empty!",
					СтрокаГТД.Ссылка, "TemporaryImportDate", , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим заполнение табличной части Исчисление
	Для Каждого Строка Из ТаблицаИсчисленияПлатежей Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ВидПлатежа) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In Customs file line """ + Строка.CCDLine + """: не указан вид платежа!",
				Строка.CCDLine, "ИсчислениеПлатежей[" + (Строка.НомерСтроки-1) + "].ВидПлатежа", , Отказ);
			
		ИначеЕсли Строка.ПометкаУдаленияВидаПлатежа Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In Customs file line """ + Строка.CCDLine + """: указан помеченный на удаление вид платежа """ + Строка.ВидаПлатежа + """!",
				Строка.CCDLine, "ИсчислениеПлатежей[" + (Строка.НомерСтроки-1) + "].ВидПлатежа", , Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПодробностейПодсчета(Отказ, РежимЗаписи, ТаблицаИсчисленияПлатежей)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	// Сверим суммы подробностей подсчета в ГТД и исчисления платежей в строках ГТД
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)); 
	ТаблицаПроверки = ПодробностиПодсчета.Выгрузить(, "КодВидаПлатежа, КТС, СуммаПлатежа");
	ТаблицаПроверки.Колонки.Добавить("СуммаПлатежаСтрокГТД", ТипЧисло);
	Для Каждого СтрокаТаблицы Из ТаблицаИсчисленияПлатежей Цикл
		
		Если СтрокаТаблицы.СП = "УН" ИЛИ СтрокаТаблицы.СП = "УР" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПроверки.Добавить();
		НоваяСтрока.КодВидаПлатежа = СтрокаТаблицы.КодВидаПлатежа;
		НоваяСтрока.КТС = СтрокаТаблицы.CVC;
		НоваяСтрока.СуммаПлатежаСтрокГТД = СтрокаТаблицы.СуммаПлатежа;
		
	КонецЦикла;
		
	ТаблицаПроверки.Свернуть("КодВидаПлатежа, КТС", "СуммаПлатежа, СуммаПлатежаСтрокГТД");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КодВидаПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаПлатежа <> СтрокаТаблицы.СуммаПлатежаСтрокГТД Тогда
			// { RGS AArsentev 10.09.2017 Для Казахстана отменены копейки, поэтому может не совпадать
			Если СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(SoldTo, "Код")) = "SLI KZ" Тогда
				СуммаПриблизительноРавна = Ложь;
				Если СтрокаТаблицы.СуммаПлатежа < СтрокаТаблицы.СуммаПлатежаСтрокГТД Тогда
					Если СтрокаТаблицы.СуммаПлатежа + 2 >= СтрокаТаблицы.СуммаПлатежаСтрокГТД Тогда
						СуммаПриблизительноРавна = Истина;
					КонецЕсли;
				Иначе
					Если СтрокаТаблицы.СуммаПлатежа - 2 <= СтрокаТаблицы.СуммаПлатежаСтрокГТД Тогда
						СуммаПриблизительноРавна = Истина;
					КонецЕсли;
				КонецЕсли;
				Если Не СуммаПриблизительноРавна Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"По коду платежа " + СтрокаТаблицы.КодВидаПлатежа + " и КТС = " + СтрокаТаблицы.КТС + " не совпадает сумма в подробностях подсчета (" + СтрокаТаблицы.СуммаПлатежа + ") и в строках ГТД (" + СтрокаТаблицы.СуммаПлатежаСтрокГТД + ")!",
						ЭтотОбъект, "ПодробностиПодсчета", , Отказ);
				КонецЕсли;
			Иначе
			// } RGS AArsentev 10.09.2017
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"По коду платежа " + СтрокаТаблицы.КодВидаПлатежа + " и КТС = " + СтрокаТаблицы.КТС + " не совпадает сумма в подробностях подсчета (" + СтрокаТаблицы.СуммаПлатежа + ") и в строках ГТД (" + СтрокаТаблицы.СуммаПлатежаСтрокГТД + ")!",
				ЭтотОбъект, "ПодробностиПодсчета", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеПрисоединенныхФайлов(Отказ, РежимЗаписи, ВыборкаПрисоединенныхФайлов)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборкаПрисоединенныхФайлов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Attach scan of the customs file!",
			ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
			
	Если ПометкаУдаления Тогда
				
		ПометитьНаУдалениеСтрокиГТД(Отказ);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ПометитьНаУдалениеСтрокиГТД(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументГТД", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиГТД.Ссылка
		|ИЗ
		|	Справочник.СтрокиГТД КАК СтрокиГТД
		|ГДЕ
		|	(НЕ СтрокиГТД.ПометкаУдаления)
		|	И СтрокиГТД.ГТД = &ДокументГТД
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Справочник.СтрокиГТД";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаГТДОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				СтрокаГТДОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Не удалось пометить на удаление CCD line """ + СтрокаГТДОбъект + """: " + ОписаниеОшибки(),
					ЭтотОбъект,,, Отказ);
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРОВЕДЕНИЯ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДвиженияПоUnpaidCCDs();
	
КонецПроцедуры

Процедура ДвиженияПоUnpaidCCDs()
	
	ДвиженияПоUnpaidCCDs = Движения.UnpaidCCDs;
	ДвиженияПоUnpaidCCDs.Очистить();
	ДвиженияПоUnpaidCCDs.Записывать = Истина;
	
	// До 1го августа платежи не аллокировались
	//Если Дата < Дата(2011, 8, 1) Тогда
	//	Возврат;
	//КонецЕсли;
			
	ТаблицаПодробностейПодсчета = ПодробностиПодсчета.Выгрузить(,"КодВидаПлатежа, PaidByCCA, СуммаПлатежа");
	
	// Очистим Payment kind для Paid by CCA, так как в этом случае Payment kind не отслеживается
	Для Каждого СтрокаТаблицы Из ТаблицаПодробностейПодсчета Цикл
		
		Если СтрокаТаблицы.PaidByCCA Тогда
			СтрокаТаблицы.КодВидаПлатежа = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПодробностейПодсчета.Свернуть("КодВидаПлатежа", "СуммаПлатежа");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодробностейПодсчета Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ДвиженияПоUnpaidCCDs.ДобавитьПриход();
		Движение.Период	= Дата;
		Движение.CCD = Ссылка;
		Движение.PaymentKind = СтрокаТаблицы.КодВидаПлатежа;
		Движение.Sum = СтрокаТаблицы.СуммаПлатежа;
							
	КонецЦикла; 
		
КонецПроцедуры
