
#Область ФормированиеДокументов

#Область Интерфейс

Процедура СформироватьДокументы(мДата, ФормироватьПомесячно) Экспорт
	
	//Получаем документы продаж, попадающие в налоговый период месяца/квартала расчета
	табСуществующиеДокументы = ПолучитьДокументыКнигиПродаж(мДата, ФормироватьПомесячно);
	
	//Получаем остатки на конец месяца/квартала расчета
	ЗапросОстатков	 = ПолучитьЗапросОстатковНДСНачисленный(мДата, ФормироватьПомесячно);	
	ВыборкаПоПериоду = ЗапросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Формируем вспомогательные массивы для расчетных целей	
	табРеализации 		= табРеализации();		//таблица для нахождения платежей по реализациям
	табКурсовыеРазницы 	= табКурсовыеРазницы(); //таблица для нахождения платежей по курсовым разницам
	масДокументыФЗКП 	= масДокументыФЗКП();	//массив документов ФЗКП для их дальнейшего редактирования
    
	НомерЛиста = 1;   
	
	//Формируем данные шапки документов
	Пока ВыборкаПоПериоду.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоПериоду.НалоговыйПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		СуществущийДокумент = табСуществующиеДокументы.Найти(ВыборкаПоПериоду.НалоговыйПериод, "НалоговыйПериод");
		ЭтоНовыйДокумент    = Ложь;		
		
		Если СуществущийДокумент <> Неопределено Тогда
			Если СуществущийДокумент.Ссылка.Проведен Тогда
				Сообщить("Найден проведенный документ " + СуществущийДокумент.Ссылка + ", документ не будет перезаполнен!");
				Продолжить;
			КонецЕсли;
			ДокФЗКП = СуществущийДокумент.Ссылка.Получитьобъект();
		Иначе
			ДокФЗКП = Документы.ФормированиеЗаписейКнигиПродаж.СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
		КонецЕсли;              	                        		
		
		ИнициализироватьДокументЗаполнитьРеквизитыШапки(ДокФЗКП, мДата, ВыборкаПоПериоду.НалоговыйПериод, НомерЛиста, ФормироватьПомесячно, ЭтоНовыйДокумент);
		
		//Формируем данные табличных частей документов		
		Выборка = ВыборкаПоПериоду.Выбрать();   		
		Пока Выборка.Следующий() Цикл			
			ЗаполнитьСтрокуТабличнойЧастиДокумента(ДокФЗКП, Выборка, табРеализации, табКурсовыеРазницы);					
		КонецЦикла;
				
		Попытка
			ДокФЗКП.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ДокФЗКП.УстановитьНовыйНомер();
			ДокФЗКП.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		//Сообщить("Записан документ " + ДокФЗКП.Ссылка + ", налоговый период: " + ДокФЗКП.НалоговыйПериод);
		
		масДокументыФЗКП.Добавить(ДокФЗКП.Ссылка);
		
	КонецЦикла;      	
	
	//нахождение оплат для закладки НДС по реализации
	Если табРеализации.Количество() Тогда     		
		Результат = РезультатДляНахожденияОплатДляРеализации(табРеализации, мДата, ФормироватьПомесячно);		
		табСуммОстатков = табСуммОстатков();	//таблица для хранения остатков по суммам реализации
		Если Результат.Количество() Тогда
			Для Каждого ЭлементДокументФЗКП Из масДокументыФЗКП Цикл 				
				ДокументФЗКП_ = ЭлементДокументФЗКП.ПолучитьОбъект();				
				ОбработатьТЧРеализация(ДокументФЗКП_, Результат, табСуммОстатков);				
				ДокументФЗКП_.Записать(РежимЗаписиДокумента.Запись);   				
			КонецЦикла;	    			
		КонецЕсли;
	КонецЕсли;
	
	//нахождение оплат для закладки НДС с курсовых разницы
	Если табКурсовыеРазницы.Количество() Тогда		
		Результат = РезультатДляНахожденияОплатПоКурсовымРазницам(табКурсовыеРазницы, мДата, ФормироватьПомесячно);	
		Если Результат.Количество() Тогда
			Для Каждого ЭлементДокументФЗКП Из масДокументыФЗКП Цикл
				ДокументФЗКП_ = ЭлементДокументФЗКП.ПолучитьОбъект();
				ДокументФЗКП_.КурсовыеРазницы.Очистить();
				ОбработатьТЧКурсовыеРазницы(ДокументФЗКП_, Результат);
				ДокументФЗКП_.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;			
		КонецЕсли;	
	КонецЕсли; 	
	
	//Проведение документов
	
	Для каждого ДокСсылка Из масДокументыФЗКП Цикл
		попытка
			Док = ДокСсылка.ПолучитьОбъект();
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Проведен документ " + Док);
		исключение
			Сообщить("Ошибка при проведении документа" + Док);
		КонецПопытки;
	КонецЦикла;   
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, ФормироватьПомесячно, ИмяВкладки) Экспорт
	
	мДата 				 = ДокументОбъект.Дата;
	
	//Получаем остатки на конец месяца/квартала расчета
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалоговыйПериод", НачалоКвартала(ДокументОбъект.НалоговыйПериод));
	СтруктураПараметров.Вставить("ИмяВкладки", 		ИмяВкладки);
	
	ЗапросОстатков  = ПолучитьЗапросОстатковНДСНачисленный(мДата, ФормироватьПомесячно, СтруктураПараметров);	
	ВыборкаОстатков = ЗапросОстатков.Выполнить().Выбрать();
	
	//Формируем вспомогательные массивы для расчетных целей	
	табРеализации 		= табРеализации();		//таблица для нахождения платежей по реализациям
	табКурсовыеРазницы 	= табКурсовыеРазницы(); //таблица для нахождения платежей по курсовым разницам
	
	ДокументОбъект[ИмяВкладки].Очистить();
	
	Пока ВыборкаОстатков.Следующий() Цикл			
		ЗаполнитьСтрокуТабличнойЧастиДокумента(ДокументОбъект, ВыборкаОстатков, табРеализации, табКурсовыеРазницы);					
	КонецЦикла;
	
	//Дозаполнение по оплатам
	                         		
	//нахождение оплат для закладки НДС по реализации
	Если табРеализации.Количество() Тогда   		
		Результат = РезультатДляНахожденияОплатДляРеализации(табРеализации, мДата, ФормироватьПомесячно);		
		//таблица для хранения остатков по суммам реализации
		табСуммОстатков = табСуммОстатков();		
		Если Результат.Количество() Тогда   			
			ОбработатьТЧРеализация(ДокументОбъект, Результат, табСуммОстатков);				
		КонецЕсли;		
	КонецЕсли;  	
	
	//нахождение оплат для закладки НДС с курсовых разницы
	Если табКурсовыеРазницы.Количество() Тогда		
		Результат = РезультатДляНахожденияОплатПоКурсовымРазницам(табКурсовыеРазницы, мДата, ФормироватьПомесячно);	
		ДокументОбъект.КурсовыеРазницы.Очистить();
		Если Результат.Количество() Тогда
			ОбработатьТЧКурсовыеРазницы(ДокументОбъект, Результат);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Служебный

Функция ПолучитьДокументыКнигиПродаж(мДата, ФормироватьПомесячно, ОтборПоДокументу = Неопределено)
	                                     	
	Запрос = Новый Запрос;
	
	Если НЕ ФормироватьПомесячно Тогда
		Запрос.УстановитьПараметр("Дата", НачалоКвартала(мДата));
	Иначе
		Запрос.УстановитьПараметр("Дата", НачалоМесяца(мДата));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КВАРТАЛ", "МЕСЯЦ");
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПродаж.Ссылка,
	|	НАЧАЛОПЕРИОДА(ФормированиеЗаписейКнигиПродаж.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
	|ГДЕ
	|	(НЕ ФормированиеЗаписейКнигиПродаж.ПометкаУдаления)
	|	И НАЧАЛОПЕРИОДА(ФормированиеЗаписейКнигиПродаж.Дата, КВАРТАЛ) = &Дата";
		
	табСуществующиеДокументы = Запрос.Выполнить().Выгрузить();
	
	//Для каждого СтрокаТЗ Из табСуществующиеДокументы Цикл
	//	Если СтрокаТЗ.Ссылка.Проведен Тогда
	//		Док = СтрокаТЗ.Ссылка.ПолучитьОбъект();
	//		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		Сообщить("Отменено проведение документа " + Док);
	//	КонецЕсли; 
	//КонецЦикла; 
	
	Возврат табСуществующиеДокументы;
	
КонецФункции

Функция ПолучитьЗапросОстатковНДСНачисленный(мДата, ФормироватьПомесячно, ПараметрыОтбора = Неопределено)
	     		
	Запрос = Новый Запрос;
	
	Если ПараметрыОтбора = Неопределено Тогда
		Запрос.Параметры.Вставить("НалоговыйПериод", Неопределено);
		Запрос.Параметры.Вставить("ИмяВкладки",      Неопределено);
	Иначе
		Запрос.Параметры.Вставить("НалоговыйПериод", НачалоКвартала(ПараметрыОтбора.НалоговыйПериод));
		Запрос.Параметры.Вставить("ИмяВкладки",      ПараметрыОтбора.ИмяВкладки);
	КонецЕсли;

	Если НЕ ФормироватьПомесячно Тогда
		Запрос.Параметры.Вставить("Дата", Новый Граница(КонецКвартала(мДата), ВидГраницы.Включая));
	Иначе
		Запрос.Параметры.Вставить("Дата", Новый Граница(КонецМесяца(мДата), ВидГраницы.Включая));
	КонецЕсли;
	
	//Для получения вида операции в запросе один раз (ускорения работы)
	ТипыИзмеренияСчетФактура= Метаданные.РегистрыНакопления.НДСНачисленный.Измерения.СчетФактура.Тип.Типы();	
	МассивТипыСИзмерениемВидОперации = Новый Массив;	
	Для каждого Тип из ТипыИзмеренияСчетФактура Цикл
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", Метаданные.НайтиПоТипу(Тип)) Тогда
			МассивТипыСИзмерениемВидОперации.Добавить(Тип);	
		КонецЕсли;
	КонецЦикла;
	Запрос.Параметры.Вставить("ТипыСВидомОперации", МассивТипыСИзмерениемВидОперации);
	
	//ВНИМАНИЕ, условие на вкладки в запросе должно быть синхронизировано с распределением по вкладкам в функции заполнения строки табличной части
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НДСНачисленныйОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	               |	НАЧАЛОПЕРИОДА(НДСНачисленныйОстатки.СчетФактура.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	               |	НДСНачисленныйОстатки.СчетФактура,
	               |	НДСНачисленныйОстатки.ВидНачисления,
	               |	НДСНачисленныйОстатки.ВидЦенности,
	               |	НДСНачисленныйОстатки.Покупатель,
	               |	НДСНачисленныйОстатки.Валюта,
	               |	СУММА(НДСНачисленныйОстатки.НДСОстаток) КАК НДС,
	               |	СУММА(НДСНачисленныйОстатки.СуммаБезНДСВВалютеОстаток) КАК СуммаБезНДСВВалюте,
	               |	СУММА(НДСНачисленныйОстатки.НДСВВалютеОстаток) КАК НДСВВалюте,
	               |	НДСНачисленныйОстатки.СтавкаНДС,
	               |	НДСНачисленныйОстатки.ПодразделениеОрганизации,
	               |	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	               |	НДСНачисленныйОстатки.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(НДСНачисленныйОстатки.СчетФактура) В (&ТипыСВидомОперации)
	               |			ТОГДА НДСНачисленныйОстатки.СчетФактура.ВидОперации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ВидОперации
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Остатки(
	               |			&Дата,
	               |			ВЫБОР
	               |					КОГДА НЕ &НалоговыйПериод = НЕОПРЕДЕЛЕНО
	               |						ТОГДА НАЧАЛОПЕРИОДА(СчетФактура.НалоговыйПериод, КВАРТАЛ) = &НалоговыйПериод
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ИмяВкладки = ""Реализация""
	               |						ТОГДА ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияСНДС)
	               |								ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияБезНДС)
	               |					КОГДА &ИмяВкладки = ""Авансы""
	               |						ТОГДА ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСсАвансов)
	               |					КОГДА &ИмяВкладки = ""НачисленКУплате""
	               |						ТОГДА ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСНачисленКУплате)
	               |					КОГДА &ИмяВкладки = ""КурсовыеРазницы""
	               |						ТОГДА ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДССКурсовыхРазниц)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК НДСНачисленныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(НДСНачисленныйОстатки.СчетФактура.НалоговыйПериод, КВАРТАЛ),
	               |	НДСНачисленныйОстатки.СчетФактура,
	               |	НДСНачисленныйОстатки.ВидНачисления,
	               |	НДСНачисленныйОстатки.ВидЦенности,
	               |	НДСНачисленныйОстатки.Покупатель,
	               |	НДСНачисленныйОстатки.Валюта,
	               |	НДСНачисленныйОстатки.СтавкаНДС,
	               |	НДСНачисленныйОстатки.ПодразделениеОрганизации,
	               |	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	               |	НДСНачисленныйОстатки.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(НДСНачисленныйОстатки.СчетФактура) В (&ТипыСВидомОперации)
	               |			ТОГДА НДСНачисленныйОстатки.СчетФактура.ВидОперации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(НДСНачисленныйОстатки.СчетФактура) В (&ТипыСВидомОперации)
	               |			ТОГДА НДСНачисленныйОстатки.СчетФактура.ВидОперации
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НалоговыйПериод";	
		
	Если ПараметрыОтбора = Неопределено Тогда		   
		   Запрос.Текст = Запрос.Текст + " 
		   |ИТОГИ ПО
		   |	НалоговыйПериод";
	КонецЕсли;   
	
	Возврат Запрос;

КонецФункции
	
Процедура ИнициализироватьДокументЗаполнитьРеквизитыШапки(ДокФЗКП, мДата, НалоговыйПериод, НомерЛиста, ФормироватьПомесячно, ЭтоНовыйДокумент = Ложь)
	
	ДокФЗКП.Дата = НачалоМесяца(мДата);
	
	Если НЕ ФормироватьПомесячно Тогда
		ДокФЗКП.ДатаПроведения 	= КонецКвартала(мДата);
	Иначе
		ДокФЗКП.ДатаПроведения 	= КонецМесяца(мДата);
	КонецЕсли; 
	
	Если НЕ ЭтоНовыйДокумент Тогда 			
		ДокФЗКП.НалоговыйПериод = НалоговыйПериод;
		ДокФЗКП.Реализация.Очистить();
		ДокФЗКП.Авансы.Очистить();
		ДокФЗКП.НачисленКУплате.Очистить();
		ДокФЗКП.КурсовыеРазницы.Очистить();		
	Иначе		
		ДокФЗКП.УстановитьНовыйНомер();				
		ДокФЗКП.НалоговыйПериод = НалоговыйПериод;
		ДокФЗКП.Организация 	= глЗначениеПеременной("ОсновнаяОрганизация");
		ДокФЗКП.Ответственный 	= глЗначениеПеременной("глТекущийПользователь");		
	КонецЕсли;
	
	ЭтоТекущийПериод = ЭтоТекущийПериод(мДата, НалоговыйПериод);
	
	Если НЕ ЭтоТекущийПериод Тогда		
		ДокФЗКП.НомерЛиста = НомерЛиста;
		НомерЛиста = НомерЛиста + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТабличнойЧастиДокумента(ДокФЗКП, Выборка, табРеализации, табКурсовыеРазницы)
	
	Если НЕ ЭтоТекущийПериод(ДокФЗКП.Дата, ДокФЗКП.НалоговыйПериод) Тогда
		КорректируемыйПериод = КонецКвартала(ДокФЗКП.НалоговыйПериод);
		ЗаписьДополнительногоЛиста = Истина;
	Иначе
		ЗаписьДополнительногоЛиста = Ложь;
		КорректируемыйПериод = Дата(1,1,1);	
	КонецЕсли;	
	
	//ВНИМАНИЕ, условие на вкладки тут должно быть синхронизировано с распределением по вкладкам в запросе по остаткам
	
	НоваяСтрока = Неопределено;
	Если Выборка.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС ИЛИ Выборка.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда
		НоваяСтрока = ДокФЗКП.Реализация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЗаписьДополнительногоЛиста = ЗаписьДополнительногоЛиста;
		НоваяСтрока.КорректируемыйПериод = КорректируемыйПериод;
		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		//-> RG-Soft VIvanov 02/04/12 - возможность записи доп. листа, если кредит-нота
		Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", Выборка.СчетФактура.Метаданные()) Тогда
				Если Выборка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("НалоговыйПериод", Выборка.СчетФактура.Сделка.Метаданные()) Тогда
						НалоговыйПериодОснования = НачалоКвартала(Выборка.СчетФактура.Сделка.НалоговыйПериод);
						Если НЕ Формат(Выборка.НалоговыйПериод, "ДФ ='к ""квартал"" гггг ""г.""'") = Формат(НалоговыйПериодОснования, "ДФ ='к ""квартал"" гггг ""г.""'") Тогда
							НоваяСтрока.КорректируемыйПериод = КонецКвартала(НалоговыйПериодОснования);
							НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//<-
		НоваяРеализация = табРеализации.Добавить();				
		ЗаполнитьЗначенияСвойств(НоваяРеализация, Выборка);
	ИначеЕсли Выборка.ВидНачисления = Перечисления.НДСВидНачисления.НДСсАвансов Тогда
		НоваяСтрока = ДокФЗКП.Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЗаписьДополнительногоЛиста = ЗаписьДополнительногоЛиста;
		НоваяСтрока.КорректируемыйПериод = КорректируемыйПериод;
		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		//-> RG-Soft VIvanov 02/04/12 - возможность записи доп. листа, если кредит-нота
		Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", Выборка.СчетФактура.Метаданные()) Тогда
				Если Выборка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("НалоговыйПериод", Выборка.СчетФактура.Сделка.Метаданные()) Тогда
						НалоговыйПериодОснования = НачалоКвартала(Выборка.СчетФактура.Сделка.НалоговыйПериод);
						Если НЕ Формат(Выборка.НалоговыйПериод, "ДФ ='к ""квартал"" гггг ""г.""'") = Формат(НалоговыйПериодОснования, "ДФ ='к ""квартал"" гггг ""г.""'") Тогда
							НоваяСтрока.КорректируемыйПериод = КонецКвартала(НалоговыйПериодОснования);
							НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//<- 
	ИначеЕсли Выборка.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате Тогда
		НоваяСтрока = ДокФЗКП.НачисленКУплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДокументОплаты = НоваяСтрока.СчетФактура;
		НоваяСтрока.Событие = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
	ИначеЕсли Выборка.ВидНачисления = Перечисления.НДСВидНачисления.НДССКурсовыхРазниц Тогда
		НоваяСтрока = ДокФЗКП.КурсовыеРазницы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КорректируемыйПериод = КорректируемыйПериод;
		НоваяСтрока.ЗаписьДополнительногоЛиста = ЗаписьДополнительногоЛиста;
		//-> RG-Soft VIvanov 02/04/12 - возможность записи доп. листа, если кредит-нота
		Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", Выборка.СчетФактура.Метаданные()) Тогда
				Если Выборка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.КредитНотаСторно Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("НалоговыйПериод", Выборка.СчетФактура.Сделка.Метаданные()) Тогда
						НалоговыйПериодОснования = НачалоКвартала(Выборка.СчетФактура.Сделка.НалоговыйПериод);
						Если НЕ Формат(Выборка.НалоговыйПериод, "ДФ ='к ""квартал"" гггг ""г.""'") = Формат(НалоговыйПериодОснования, "ДФ ='к ""квартал"" гггг ""г.""'") Тогда
							НоваяСтрока.КорректируемыйПериод = КонецКвартала(НалоговыйПериодОснования);
							НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//<-
		НоваяРеализация = табКурсовыеРазницы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяРеализация, Выборка);				
	КонецЕсли;       
	
КонецПроцедуры

Процедура ОбработатьТЧРеализация(ДокументФЗКП_, Результат, табСуммОстатков)    	
	
	масУдаление = Новый Массив;
	табБуффер = ДокументФЗКП_.Реализация.ВыгрузитьКолонки();
	
	Для Каждого ЗаписьРеализации Из ДокументФЗКП_.Реализация Цикл
		
		//если кредитнота-сторно, тогда оплаты не смотрим
		Если ЗаписьРеализации.СуммаБезНДС < 0 Тогда
			НоваяСтрока 	= табБуффер.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);
			Продолжить;
		КонецЕсли;
		
		НайтиОплаты = Результат.НайтиСтроки(Новый Структура("СчетФактура", ЗаписьРеализации.СчетФактура));
		
		//проверка даты оплаты на то, что она произведена до конца налогового периода
		Для Каждого Элемент Из НайтиОплаты Цикл
			Если КонецДня(Элемент.ДатаОплаты) > КонецКвартала(ДокументФЗКП_.НалоговыйПериод) Тогда
				масУдаление.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из масУдаление Цикл
			НайтиОплаты.Удалить(НайтиОплаты.Найти(Элемент));
		КонецЦикла;
		масУдаление.Очистить();					
		
		//распределение суммы реализации
		табСуммОстатков.Очистить();
		СтрокаОстатков = табСуммОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстатков, ЗаписьРеализации);
		
		Для Каждого НайденнаяСтрока Из НайтиОплаты Цикл
			
			//если ни одного платежа для данной реализации не найдено
			//или если реализация частично открыта
			Если НайденнаяСтрока.НетПлатежа Тогда
				//строка с реализацией остается без изменения
				НоваяСтрока 	= табБуффер.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);
				НоваяСтрока.СуммаБезНДС 			= СтрокаОстатков.СуммаБезНДС;
				НоваяСтрока.НДС 					= СтрокаОстатков.НДС;
				НоваяСтрока.СуммаБезНДСВВалюте 		= СтрокаОстатков.СуммаБезНДСВВалюте;
				НоваяСтрока.НДСВВалюте 				= СтрокаОстатков.НДСВВалюте;
				СтрокаОстатков.СуммаБезНДС			= 0;
				СтрокаОстатков.НДС 					= 0;
				СтрокаОстатков.СуммаБезНДСВВалюте 	= 0;
				СтрокаОстатков.НДСВВалюте 			= 0;
				Прервать;
			КонецЕсли;
			
			//если сумма закрытия и исходная сумма не совпадают,
			//т.е. по какой-либо сделке закрыто больше начальной суммы
			Если НайденнаяСтрока.ОшибочнаяСделка Тогда
				НайтиВтабБуффер = табБуффер.Найти(ЗаписьРеализации.СчетФактура, "СчетФактура");
				Если НЕ ЗначениеЗаполнено(НайтиВтабБуффер) Тогда
					Сообщить("Некорректно записаны сведения для документа: " + Строка(ЗаписьРеализации.СчетФактура) + " в регистре Взаиморасчеты с покупателями.", СтатусСообщения.ОченьВажное);
					//строка с реализацией остается без изменения
					НоваяСтрока 			= табБуффер.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);
					СтрокаОстатков.СуммаБезНДС 			= 0;
					СтрокаОстатков.НДС 					= 0;
					СтрокаОстатков.СуммаБезНДСВВалюте 	= 0;
					СтрокаОстатков.НДСВВалюте 			= 0;								
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			//если реализация только закрывает платеж
			Если НайденнаяСтрока.СчетФактура <> НайденнаяСтрока.Сделка 
				И НайденнаяСтрока.КоличествоСделок = 1 Тогда
				НоваяСтрока 	= табБуффер.Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);
				//заполнение документа оплаты и даты оплаты
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				
				СтрокаОстатков.СуммаБезНДС 			= 0;
				СтрокаОстатков.НДС 					= 0;
				СтрокаОстатков.СуммаБезНДСВВалюте 	= 0;
				СтрокаОстатков.НДСВВалюте 			= 0;
				Прервать;
			КонецЕсли;
			
			НоваяСтрока 	= табБуффер.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);
			//заполнение документа оплаты и даты оплаты
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			
			СуммаБезНДС 		= Окр(НайденнаяСтрока.СуммаСделки/НайденнаяСтрока.ОбщаяСумма * ЗаписьРеализации.СуммаБезНДС,2);
			НДС 				= Окр(НайденнаяСтрока.СуммаСделки/НайденнаяСтрока.ОбщаяСумма * ЗаписьРеализации.НДС,2);
			СуммаБезНДСВВалюте 	= Окр(НайденнаяСтрока.СуммаСделки/НайденнаяСтрока.ОбщаяСумма * ЗаписьРеализации.СуммаБезНДСВВалюте,2);
			НДСВВалюте 			= Окр(НайденнаяСтрока.СуммаСделки/НайденнаяСтрока.ОбщаяСумма * ЗаписьРеализации.НДСВВалюте,2);
			
			НоваяСтрока.СуммаБезНДС 		= СуммаБезНДС;
			НоваяСтрока.НДС 				= НДС;
			НоваяСтрока.СуммаБезНДСВВалюте 	= СуммаБезНДСВВалюте;
			НоваяСтрока.НДСВВалюте		 	= НДСВВалюте;
			//уменьшение остатков
			СтрокаОстатков.СуммаБезНДС 		= СтрокаОстатков.СуммаБезНДС 	- СуммаБезНДС;
			СтрокаОстатков.НДС 				= СтрокаОстатков.НДС 			- НДС;
			СтрокаОстатков.СуммаБезНДСВВалюте=СтрокаОстатков.СуммаБезНДСВВалюте - СуммаБезНДСВВалюте;
			СтрокаОстатков.НДСВВалюте		= СтрокаОстатков.НДСВВалюте 	- НДСВВалюте;
			
			Если СтрокаОстатков.СуммаБезНДС < 0 Тогда
				НоваяСтрока.СуммаБезНДС 		= НоваяСтрока.СуммаБезНДС + СтрокаОстатков.СуммаБезНДС;
				НоваяСтрока.НДС 				= НоваяСтрока.НДС + СтрокаОстатков.НДС;
				НоваяСтрока.СуммаБезНДСВВалюте 	= НоваяСтрока.СуммаБезНДСВВалюте + СтрокаОстатков.СуммаБезНДСВВалюте;
				НоваяСтрока.НДСВВалюте		 	= НоваяСтрока.НДСВВалюте + СтрокаОстатков.НДСВВалюте;
				
				СтрокаОстатков.СуммаБезНДС 		= 0;
				СтрокаОстатков.НДС 				= 0;
				СтрокаОстатков.СуммаБезНДСВВалюте=0;
				СтрокаОстатков.НДСВВалюте		= 0;
			КонецЕсли;
			
		КонецЦикла;
		
		//если есть остаток по реализации, т.е. платежи не полностью закрыли реализацию, 
		//то необходимо добавить строку с этим остатком 
		
		Если СтрокаОстатков.СуммаБезНДС > 0 Тогда
			
			НоваяСтрока	= табБуффер.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРеализации);						
			НоваяСтрока.СуммаБезНДС 		= СтрокаОстатков.СуммаБезНДС;
			НоваяСтрока.НДС 				= СтрокаОстатков.НДС;
			НоваяСтрока.СуммаБезНДСВВалюте 	= СтрокаОстатков.СуммаБезНДСВВалюте;
			НоваяСтрока.НДСВВалюте 			= СтрокаОстатков.НДСВВалюте;
			
		КонецЕсли;
	КонецЦикла;			

	ДокументФЗКП_.Реализация.Загрузить(табБуффер);
	
КонецПроцедуры

Процедура ОбработатьТЧКурсовыеРазницы(ДокументФЗКП_, Результат)
	
	СтрокиОплаты = Результат.НайтиСтроки(Новый Структура("НалоговыйПериод", ДокументФЗКП_.НалоговыйПериод));
	Для Каждого Элемент Из СтрокиОплаты Цикл
		СтрокаТЧ = ДокументФЗКП_.КурсовыеРазницы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элемент);
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатДляНахожденияОплатДляРеализации(табРеализации, мДата, ФормироватьПомесячно)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ Договора
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Владелец В(&Контрагенты)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыСПокупателямиОбороты.Регистратор КАК Регистратор,
	               |	ВзаиморасчетыСПокупателямиОбороты.Сделка КАК Сделка,
	               |	СУММА(ВзаиморасчетыСПокупателямиОбороты.СуммаВзаиморасчетовПриход) КАК СуммаРеализации,
	               |	СУММА(ВзаиморасчетыСПокупателямиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаПлатежа
	               |ПОМЕСТИТЬ табПервичная
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты(
	               |			,
	               |			&НалоговыйПериод,
	               |			Регистратор,
	               |			ДоговорКонтрагента В
	               |					(ВЫБРАТЬ
	               |						Договора.Ссылка
	               |					ИЗ
	               |						Договора)
	               |				И ПодразделениеОрганизации В (&ПодразделенияОрганизации)
	               |				И Сделка В (&Сделки)) КАК ВзаиморасчетыСПокупателямиОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ВзаиморасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				ТОГДА ВзаиморасчетыСПокупателямиОбороты.Регистратор.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаСторно)
	               |						И ВзаиморасчетыСПокупателямиОбороты.Регистратор.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.КредитНотаОтрицатСФ)
	               |						И ВзаиморасчетыСПокупателямиОбороты.Регистратор.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ВнутренняяКредитНота)
	               |			ИНАЧЕ НЕ ВзаиморасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ПереоценкаВалютыВРегистре
	               |					И НЕ ВзаиморасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковНДС
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСПокупателямиОбороты.Регистратор,
	               |	ВзаиморасчетыСПокупателямиОбороты.Сделка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табПервичная.Регистратор КАК Регистратор,
	               |	табПервичная.Сделка КАК Сделка,
	               |	СУММА(табПервичная.СуммаРеализации) КАК СуммаРеализации
	               |ПОМЕСТИТЬ Реализации
	               |ИЗ
	               |	табПервичная КАК табПервичная
	               |ГДЕ
	               |	табПервичная.СуммаРеализации <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	табПервичная.Регистратор,
	               |	табПервичная.Сделка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реализации.Регистратор КАК Регистратор,
	               |	СУММА(Реализации.СуммаРеализации) КАК ОбщаяСумма
	               |ПОМЕСТИТЬ Реализации_ОбщаяСумма
	               |ИЗ
	               |	Реализации КАК Реализации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Реализации.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табПервичная.Регистратор КАК Регистратор,
	               |	табПервичная.Сделка КАК Сделка,
	               |	СУММА(табПервичная.СуммаПлатежа) КАК СуммаПлатежа
	               |ПОМЕСТИТЬ Платежи
	               |ИЗ
	               |	табПервичная КАК табПервичная
	               |ГДЕ
	               |	табПервичная.СуммаПлатежа <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	табПервичная.Регистратор,
	               |	табПервичная.Сделка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реализации.Регистратор КАК СчетФактура,
	               |	Реализации.Регистратор.Номер КАК Номер,
	               |	Реализации.Сделка,
	               |	Реализации_ОбщаяСумма.ОбщаяСумма,
	               |	ВЫБОР
	               |		КОГДА Платежи.СуммаПлатежа ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НетПлатежа,
	               |	ЕСТЬNULL(Платежи.Регистратор, ЗНАЧЕНИЕ(Документ.ПлатежноеПоручениеВходящее.ПустаяСсылка)) КАК ДокументОплаты,
	               |	ВЫБОР
	               |		КОГДА НЕ Платежи.Регистратор ЕСТЬ NULL 
	               |			ТОГДА Платежи.Регистратор.Дата
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК ДатаОплаты,
	               |	ВЫБОР
	               |		КОГДА Реализации.Регистратор = Реализации.Сделка
	               |			ТОГДА ЕСТЬNULL(Платежи.СуммаПлатежа, 0)
	               |		ИНАЧЕ Реализации.СуммаРеализации
	               |	КОНЕЦ КАК СуммаСделки,
	               |	ВЫБОР
	               |		КОГДА Реализации.Регистратор = Реализации.Сделка
	               |			ТОГДА Реализации.СуммаРеализации
	               |		ИНАЧЕ ЕСТЬNULL(Платежи.СуммаПлатежа, 0)
	               |	КОНЕЦ КАК СуммаИсходная
	               |ПОМЕСТИТЬ таб1
	               |ИЗ
	               |	Реализации КАК Реализации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Платежи КАК Платежи
	               |		ПО Реализации.Сделка = Платежи.Сделка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Реализации_ОбщаяСумма КАК Реализации_ОбщаяСумма
	               |		ПО Реализации.Регистратор = Реализации_ОбщаяСумма.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	таб1.Сделка,
	               |	СУММА(таб1.СуммаСделки) КАК СуммаСделка,
	               |	МАКСИМУМ(таб1.СуммаИсходная) КАК СуммаИсходная
	               |ПОМЕСТИТЬ ОшибочныеСделки
	               |ИЗ
	               |	таб1 КАК таб1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	таб1.Сделка
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(таб1.СуммаСделки) > МАКСИМУМ(таб1.СуммаИсходная)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	таб1.СчетФактура,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ таб1.Сделка) КАК КоличествоСделок
	               |ПОМЕСТИТЬ таб2_КоличествоСделок
	               |ИЗ
	               |	таб1 КАК таб1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	таб1.СчетФактура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	таб1.СчетФактура,
	               |	таб1.Номер КАК Номер,
	               |	таб1.Сделка,
	               |	таб1.ОбщаяСумма,
	               |	таб1.СуммаСделки,
	               |	таб1.ДокументОплаты,
	               |	таб1.ДатаОплаты,
	               |	таб1.НетПлатежа КАК НетПлатежа,
	               |	таб2.КоличествоСделок,
	               |	ВЫБОР
	               |		КОГДА ОшибочныеСделки.Сделка ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОшибочнаяСделка
	               |ИЗ
	               |	таб1 КАК таб1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОшибочныеСделки КАК ОшибочныеСделки
	               |		ПО таб1.Сделка = ОшибочныеСделки.Сделка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ таб2_КоличествоСделок КАК таб2
	               |		ПО таб1.СчетФактура = таб2.СчетФактура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОшибочнаяСделка,
	               |	Номер,
	               |	НетПлатежа";
	
	Запрос.УстановитьПараметр("ПодразделенияОрганизации", табРеализации.ВыгрузитьКолонку("ПодразделениеОрганизации"));
	Запрос.УстановитьПараметр("Сделки", табРеализации.ВыгрузитьКолонку("СчетФактура"));
	Запрос.УстановитьПараметр("Контрагенты", табРеализации.ВыгрузитьКолонку("Покупатель"));
	
	Если НЕ ФормироватьПомесячно Тогда
		Запрос.УстановитьПараметр("НалоговыйПериод", Новый Граница(КонецКвартала(мДата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("НалоговыйПериод", Новый Граница(КонецМесяца(мДата), ВидГраницы.Включая));
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() Тогда
		Результат.Индексы.Добавить("СчетФактура");
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция РезультатДляНахожденияОплатПоКурсовымРазницам(табКурсовыеРазницы, мДата, ФормироватьПомесячно)
	
	Запрос = Новый Запрос;    
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток,
	|	НДСНачисленныйОстатки.НДСОстаток,
	|	НДСНачисленныйОстатки.СуммаБезНДСВВалютеОстаток,
	|	НДСНачисленныйОстатки.НДСВВалютеОстаток,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ПодразделениеОрганизации,
	|	НДСНачисленныйОстатки.Валюта
	|ПОМЕСТИТЬ ОстаткиКурсовыхРазниц
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&Граница,
	|			ПодразделениеОрганизации В (&ПодразделенияОрганизации)
	|				И СчетФактура В (&СчетаФактуры)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	НДСНачисленныйОстатки.ВидНачисления = &КурсовыеРазницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПродажКурсовыеРазницы.ДокументОплаты,
	|	ФормированиеЗаписейКнигиПродажКурсовыеРазницы.СчетФактура,
	|	-ФормированиеЗаписейКнигиПродажКурсовыеРазницы.СуммаБезНДС КАК СуммаБезНДС,
	|	-ФормированиеЗаписейКнигиПродажКурсовыеРазницы.НДС КАК НДС,
	|	-ФормированиеЗаписейКнигиПродажКурсовыеРазницы.СуммаБезНДСВВалюте КАК СуммаБезНДСВВалюте,
	|	-ФормированиеЗаписейКнигиПродажКурсовыеРазницы.НДСВВалюте КАК НДСВВалюте
	|ПОМЕСТИТЬ ВсеПоКурсовымРазницам
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.КурсовыеРазницы КАК ФормированиеЗаписейКнигиПродажКурсовыеРазницы
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродажКурсовыеРазницы.Ссылка.Дата <= &Дата
	|	И ФормированиеЗаписейКнигиПродажКурсовыеРазницы.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСНачисленный.Регистратор,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СуммаБезНДС,
	|	НДСНачисленный.НДС,
	|	НДСНачисленный.СуммаБезНДСВВалюте,
	|	НДСНачисленный.НДСВВалюте
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Период < &Дата
	|	И НДСНачисленный.ВидНачисления = &КурсовыеРазницы
	|	И НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПоКурсовымРазницам.ДокументОплаты,
	|	ВсеПоКурсовымРазницам.СчетФактура,
	|	СУММА(ВсеПоКурсовымРазницам.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВсеПоКурсовымРазницам.НДС) КАК НДС,
	|	СУММА(ВсеПоКурсовымРазницам.СуммаБезНДСВВалюте) КАК СуммаБезНДСВВалюте,
	|	СУММА(ВсеПоКурсовымРазницам.НДСВВалюте) КАК НДСВВалюте
	|ПОМЕСТИТЬ ОстаткиПоКурсовымРазницамВРазрезеОплат
	|ИЗ
	|	ВсеПоКурсовымРазницам КАК ВсеПоКурсовымРазницам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеПоКурсовымРазницам.СчетФактура,
	|	ВсеПоКурсовымРазницам.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачисленный.Регистратор,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СуммаБезНДС
	|ПОМЕСТИТЬ КурсовыеРазницыДвижениеПлюс
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСНачисленный.Период <= &Дата
	|	И НДСНачисленный.ВидНачисления = &КурсовыеРазницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстаткиПоКурсовымРазницамВРазрезеОплат.ДокументОплаты = &Неопр
	|			ТОГДА КурсовыеРазницыДвижениеПлюс.Регистратор
	|		ИНАЧЕ ОстаткиПоКурсовымРазницамВРазрезеОплат.ДокументОплаты
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ОстаткиПоКурсовымРазницамВРазрезеОплат.ДокументОплаты = &Неопр
	|			ТОГДА КурсовыеРазницыДвижениеПлюс.Регистратор.Дата
	|		ИНАЧЕ ОстаткиПоКурсовымРазницамВРазрезеОплат.ДокументОплаты.Дата
	|	КОНЕЦ КАК ДатаОплаты,
	|	ОстаткиКурсовыхРазниц.СчетФактура КАК СчетФактура,
	|	ОстаткиПоКурсовымРазницамВРазрезеОплат.СуммаБезНДС КАК СуммаБезНДС,
	|	ОстаткиПоКурсовымРазницамВРазрезеОплат.НДС,
	|	ОстаткиПоКурсовымРазницамВРазрезеОплат.СуммаБезНДСВВалюте,
	|	ОстаткиПоКурсовымРазницамВРазрезеОплат.НДСВВалюте,
	|	ОстаткиКурсовыхРазниц.СтавкаНДС,
	|	НАЧАЛОПЕРИОДА(ОстаткиКурсовыхРазниц.СчетФактура.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	ОстаткиКурсовыхРазниц.ВидЦенности,
	|	ОстаткиКурсовыхРазниц.Покупатель,
	|	ОстаткиКурсовыхРазниц.ПодразделениеОрганизации,
	|	ОстаткиКурсовыхРазниц.Валюта
	|ИЗ
	|	ОстаткиКурсовыхРазниц КАК ОстаткиКурсовыхРазниц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПоКурсовымРазницамВРазрезеОплат КАК ОстаткиПоКурсовымРазницамВРазрезеОплат
	|		ПО ОстаткиКурсовыхРазниц.СчетФактура = ОстаткиПоКурсовымРазницамВРазрезеОплат.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсовыеРазницыДвижениеПлюс КАК КурсовыеРазницыДвижениеПлюс
	|		ПО ОстаткиКурсовыхРазниц.СчетФактура = КурсовыеРазницыДвижениеПлюс.СчетФактура
	|			И ОстаткиКурсовыхРазниц.СуммаБезНДСОстаток = КурсовыеРазницыДвижениеПлюс.СуммаБезНДС
	|ГДЕ
	|	ОстаткиПоКурсовымРазницамВРазрезеОплат.СуммаБезНДС <> 0";
	
	Запрос.УстановитьПараметр("ПодразделенияОрганизации", табКурсовыеРазницы.ВыгрузитьКолонку("ПодразделениеОрганизации"));
	Запрос.УстановитьПараметр("СчетаФактуры", табКурсовыеРазницы.ВыгрузитьКолонку("СчетФактура"));
	//-> RG-Soft VIvanov 02/04/12 - помесячное формирование
	Если НЕ ФормироватьПомесячно Тогда
		Запрос.УстановитьПараметр("Дата", КонецКвартала(мДата));
		Запрос.УстановитьПараметр("Граница", Новый Граница(КонецКвартала(мДата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("Дата", КонецМесяца(мДата));
		Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(мДата), ВидГраницы.Включая));
	КонецЕсли;
	//<-
	Запрос.УстановитьПараметр("КурсовыеРазницы", Перечисления.НДСВидНачисления.НДССКурсовыхРазниц);
	Запрос.УстановитьПараметр("Неопр", Неопределено);

	Результат = Запрос.Выполнить().Выгрузить();   
	
	Если Результат.Количество() Тогда
		Результат.Индексы.Добавить("СчетФактура");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Кэши и условия

Функция табРеализации()
	
	табРеализации = Новый ТаблицаЗначений;								//таблица для нахождения платежей по реализациям
	табРеализации.Колонки.Добавить("СчетФактура");
	табРеализации.Колонки.Добавить("Покупатель");
	табРеализации.Колонки.Добавить("ПодразделениеОрганизации");	
	
	Возврат табРеализации;
	
КонецФункции

Функция табКурсовыеРазницы()
	
	табКурсовыеРазницы = Новый ТаблицаЗначений;							//таблица для нахождения платежей по курсовым разницам
	табКурсовыеРазницы.Колонки.Добавить("СчетФактура");
	табКурсовыеРазницы.Колонки.Добавить("ПодразделениеОрганизации");	
	
	Возврат табКурсовыеРазницы;
	
КонецФункции

Функция табСуммОстатков()
	
	табСуммОстатков = Новый ТаблицаЗначений; //таблица для хранения остатков по суммам реализации
	табСуммОстатков.Колонки.Добавить("СуммаБезНДС");
	табСуммОстатков.Колонки.Добавить("НДС");
	табСуммОстатков.Колонки.Добавить("СуммаБезНДСВВалюте");
	табСуммОстатков.Колонки.Добавить("НДСВВалюте");
	
	Возврат табСуммОстатков; 
	
КонецФункции

Функция масДокументыФЗКП()
	
	масДокументыФЗКП = Новый Массив;								    //массив документов ФЗКП для их дальнейшего редактирования
	
	Возврат масДокументыФЗКП;
	
КонецФункции

Функция ЭтоТекущийПериод(ДатаДокумента, НалоговыйПериод)
	
	Возврат Формат(НачалоМесяца(ДатаДокумента), "ДФ ='к ""квартал"" гггг ""г.""'") = Формат(НалоговыйПериод, "ДФ ='к ""квартал"" гггг ""г.""'");
	
КонецФункции

#КонецОбласти

#КонецОбласти