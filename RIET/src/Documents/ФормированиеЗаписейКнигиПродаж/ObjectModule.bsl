Перем мВестиУчетНДС Экспорт;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.КонтрагентLawson.Код КАК LawsonID,
	               |	Контрагенты.НаименованиеПолное,
	               |	Контрагенты.ИНН,
	               |	Контрагенты.КПП,
	               |	Контрагенты.Ссылка
	               |ПОМЕСТИТЬ Контрагенты
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табЧасть.СчетФактура.Номер КАК ActNumber,
	               |	табЧасть.СчетФактура.Дата КАК Date_AN,
	               |	СчетФактураВыданный.Номер КАК InvoiceNumber,
	               |	СчетФактураВыданный.Дата КАК Date_IN,
	               |	Контрагенты.LawsonID КАК ClientIDLawson,
	               |	Контрагенты.НаименованиеПолное КАК ClientName,
	               |	Контрагенты.ИНН КАК INN,
	               |	Контрагенты.КПП КАК KPP,
	               |	табЧасть.Валюта КАК Curr,
	               |	ВЫБОР
	               |		КОГДА табЧасть.СуммаБезНДСВВалюте = 0
	               |			ТОГДА """"
	               |		ИНАЧЕ табЧасть.СуммаБезНДС / табЧасть.СуммаБезНДСВВалюте
	               |	КОНЕЦ КАК E_R,
	               |	табЧасть.СтавкаНДС КАК VATRate,
	               |	табЧасть.СуммаБезНДС КАК NetRUB,
	               |	табЧасть.НДС КАК VATRUB,
	               |	табЧасть.НДС + табЧасть.СуммаБезНДС КАК GrossRUB,
	               |	табЧасть.СуммаБезНДСВВалюте КАК NetCur,
	               |	табЧасть.НДСВВалюте КАК VATCur,
	               |	табЧасть.СуммаБезНДСВВалюте + табЧасть.НДСВВалюте КАК GrossCur,
	               |	табЧасть.СчетФактура.Ответственный КАК Operator,
	               |	табЧасть.ПодразделениеОрганизации КАК TaxRegistration,
	               |	табЧасть.СчетФактура.ДатаПроведения КАК Posted
	               |ИЗ
	               |	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК табЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |		ПО табЧасть.СчетФактура = СчетФактураВыданный.ДокументОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
	               |		ПО табЧасть.Покупатель = Контрагенты.Ссылка
	               |ГДЕ
	               |	табЧасть.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	табЧасть.СчетФактура.Номер,
	               |	табЧасть.СчетФактура.Дата,
	               |	СчетФактураВыданный.Номер,
	               |	СчетФактураВыданный.Дата,
	               |	Контрагенты.LawsonID,
	               |	Контрагенты.НаименованиеПолное,
	               |	Контрагенты.ИНН,
	               |	Контрагенты.КПП,
	               |	табЧасть.Валюта,
	               |	ВЫБОР
	               |		КОГДА табЧасть.СуммаБезНДСВВалюте = 0
	               |			ТОГДА """"
	               |		ИНАЧЕ табЧасть.СуммаБезНДС / табЧасть.СуммаБезНДСВВалюте
	               |	КОНЕЦ,
	               |	табЧасть.СтавкаНДС,
	               |	табЧасть.СуммаБезНДС,
	               |	табЧасть.НДС,
	               |	табЧасть.НДС + табЧасть.СуммаБезНДС,
	               |	табЧасть.СуммаБезНДСВВалюте,
	               |	табЧасть.НДСВВалюте,
	               |	табЧасть.СуммаБезНДСВВалюте + табЧасть.НДСВВалюте,
	               |	табЧасть.СчетФактура.Ответственный,
	               |	табЧасть.ПодразделениеОрганизации,
	               |	табЧасть.СчетФактура.ДатаПроведения
	               |ИЗ
	               |	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК табЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |		ПО табЧасть.СчетФактура = СчетФактураВыданный.ДокументОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
	               |		ПО табЧасть.Покупатель = Контрагенты.Ссылка
	               |ГДЕ
	               |	табЧасть.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	табЧасть.СчетФактура.Номер,
	               |	табЧасть.СчетФактура.Дата,
	               |	СчетФактураВыданный.Номер,
	               |	СчетФактураВыданный.Дата,
	               |	Контрагенты.LawsonID,
	               |	Контрагенты.НаименованиеПолное,
	               |	Контрагенты.ИНН,
	               |	Контрагенты.КПП,
	               |	табЧасть.Валюта,
	               |	ВЫБОР
	               |		КОГДА табЧасть.СуммаБезНДСВВалюте = 0
	               |			ТОГДА """"
	               |		ИНАЧЕ табЧасть.СуммаБезНДС / табЧасть.СуммаБезНДСВВалюте
	               |	КОНЕЦ,
	               |	табЧасть.СтавкаНДС,
	               |	табЧасть.СуммаБезНДС,
	               |	табЧасть.НДС,
	               |	табЧасть.НДС + табЧасть.СуммаБезНДС,
	               |	табЧасть.СуммаБезНДСВВалюте,
	               |	табЧасть.НДСВВалюте,
	               |	табЧасть.СуммаБезНДСВВалюте + табЧасть.НДСВВалюте,
	               |	табЧасть.СчетФактура.Ответственный,
	               |	табЧасть.ПодразделениеОрганизации,
	               |	табЧасть.СчетФактура.ДатаПроведения
	               |ИЗ
	               |	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК табЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |		ПО табЧасть.СчетФактура = СчетФактураВыданный.ДокументОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
	               |		ПО табЧасть.Покупатель = Контрагенты.Ссылка
	               |ГДЕ
	               |	табЧасть.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	табЧасть.СчетФактура.Номер,
	               |	табЧасть.СчетФактура.Дата,
	               |	СчетФактураВыданный.Номер,
	               |	СчетФактураВыданный.Дата,
	               |	Контрагенты.LawsonID,
	               |	Контрагенты.НаименованиеПолное,
	               |	Контрагенты.ИНН,
	               |	Контрагенты.КПП,
	               |	табЧасть.Валюта,
	               |	ВЫБОР
	               |		КОГДА табЧасть.СуммаБезНДСВВалюте = 0
	               |			ТОГДА """"
	               |		ИНАЧЕ табЧасть.СуммаБезНДС / табЧасть.СуммаБезНДСВВалюте
	               |	КОНЕЦ,
	               |	табЧасть.СтавкаНДС,
	               |	табЧасть.СуммаБезНДС,
	               |	табЧасть.НДС,
	               |	табЧасть.НДС + табЧасть.СуммаБезНДС,
	               |	табЧасть.СуммаБезНДСВВалюте,
	               |	табЧасть.НДСВВалюте,
	               |	табЧасть.СуммаБезНДСВВалюте + табЧасть.НДСВВалюте,
	               |	табЧасть.СчетФактура.Ответственный,
	               |	табЧасть.ПодразделениеОрганизации,
	               |	табЧасть.СчетФактура.ДатаПроведения
	               |ИЗ
	               |	Документ.ФормированиеЗаписейКнигиПродаж.КурсовыеРазницы КАК табЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |		ПО табЧасть.СчетФактура = СчетФактураВыданный.ДокументОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
	               |		ПО табЧасть.Покупатель = Контрагенты.Ссылка
	               |ГДЕ
	               |	табЧасть.Ссылка = &Ссылка
	               |ИТОГИ
	               |	СУММА(NetRUB),
	               |	СУММА(VATRUB),
	               |	СУММА(GrossRUB),
	               |	СУММА(NetCur),
	               |	СУММА(VATCur),
	               |	СУММА(GrossCur)
	               |ПО
	               |	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	табРезультат = Запрос.Выполнить().Выгрузить();

	// ВЫВОД
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет(ИмяМакета);

	// Вывод заголовка
	Если ЗначениеЗаполнено(НомерЛиста) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДопЛиста");
		ОбластьМакета.Параметры.НомерЛиста = НомерЛиста;
		ОбластьМакета.Параметры.Период = Формат(НалоговыйПериод, "ДФ ='к ""квартал"" гггг ""г.""'");;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокКнигиПродаж");
		ОбластьМакета.Параметры.НачалоПериода = Формат(НачалоКвартала(НалоговыйПериод), "ДФ='dd.MM.yyyy'");
		ОбластьМакета.Параметры.КонецПериода = Формат(КонецКвартала(НалоговыйПериод), "ДФ='dd.MM.yyyy ""г.""'");;
	КонецЕсли;                         
	
	ОбластьМакета.Параметры.КварталГод 		= Формат(Дата, "ДФ ='к ""квартал"" гггг ""г.""'");
	ОбластьМакета.Параметры.ДатаСоставления = Формат(ДатаПроведения, "ДФ='dd.MM.yyyy ""г.""'");
	ОбластьМакета.Параметры.Ответственный 	= Ответственный;
	ОбластьМакета.Параметры.Комментарий 	= Комментарий;

	ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, ДатаПроведения), "ПолноеНаименование,",Ложь);
	ОбластьМакета.Параметры.НазваниеОрганизации = ПолноеНаименование;
    ИННОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(КонтактнаяИнформация.СведенияОЮрФизЛице(Организация, ДатаПроведения), "ИНН,КПП");
	ОбластьМакета.Параметры.ИННОрганизации 	= ИННОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Если табРезультат.Количество() Тогда
    	ОбластьМакета.Параметры.Заполнить(табРезультат[0]);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод деталей
	Для НомерСтроки = 1 По табРезультат.Количество() - 1 Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Детали");
    	ОбластьМакета.Параметры.Заполнить(табРезультат[НомерСтроки]);
		ТабДокумент.Вывести(ОбластьМакета);		
	КонецЦикла;

	Если НЕ ТабДокумент = Неопределено Тогда
		ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры
//Конец добавления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьСтрокиДокумента() Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Заполняет раздел "Реализация"
Процедура ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ) Экспорт
	
	ТаблицаРезультатов = Реализация.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Если Реализация0 Тогда
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0();
	Иначе	
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный();
	КонецЕсли; 
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Реализация.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	//НаличиеОплатыНеТребуется = не (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС  = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате) ;

	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	Если не Реализация0 = УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0 Тогда
		// В учетная политике приоритет в распределении оплат установлен по НДС 0%, отрабатывается НДС по прочим ставкам 
		// или наоборот - приоритет по прочим ставкам, отрабатывается 0%.
		// В этом случае суммы сначала распределяются на начисления, которые не отражаются данным документом,
		// лишь затем на начисления, которые могут быть отражены данным документом.
		Если Реализация0 Тогда
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
		Иначе	
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
		КонецЕсли; 
		
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина);

	Реализация.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (за вычетом реализации 0%)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур = неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
		|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
		|	НДСНачисленныйОстатки.ПодразделениеОрганизации
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|		&КонецПериодаГраница,
		|		Организация = &Организация
		|			И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
		|			И (НЕ ВидНачисления В (&ИсключаемыеВидыНачисления))) КАК НДСНачисленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.ПодразделениеОрганизации,
		|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	(НЕ СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) = 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата,
		|	СчетФактура
		|ИТОГИ
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ИнвойсинговыйЦентр",  ИнвойсинговыйЦентр);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления = Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);

	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
		
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.Организация,
		|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаСНДС,
		|	НДСРеализация0Остатки.Состояние,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
		|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяКорректировка
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|		&КонецПериодаГраница,
		|		Организация = &Организация
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
		|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
		|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
		|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
		|ГДЕ
		|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС),
		|	МАКСИМУМ(ТребуетсяКорректировка)
		|ПО
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СФДляКорректировки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("ТребуетсяКорректировка", Истина));
	Для каждого СтрокаСФ Из СФДляКорректировки Цикл
		Для каждого СтрокаРасшифровки Из СтрокаСФ.Строки Цикл
			Если СтрокаРасшифровки.ТребуетсяКорректировка Тогда
				СтрокаРасшифровки.СуммаНДС = (СтрокаРасшифровки.СуммаНДС*СтрокаРасшифровки.СуммаСНДС_НачисленоВсего/СтрокаРасшифровки.СуммаСНДС);
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС_НачисленоВсего;
				СтрокаРасшифровки.СуммаБезНДС = СтрокаРасшифровки.СуммаСНДС - СтрокаРасшифровки.СуммаНДС;
			КонецЕсли; 
		КонецЦикла; 
		
		СтрокаСФ.СуммаНДС = СтрокаСФ.Строки.Итог("СуммаНДС");
		СтрокаСФ.СуммаСНДС = СтрокаСФ.Строки.Итог("СуммаСНДС");
		СтрокаСФ.СуммаБезНДС = СтрокаСФ.Строки.Итог("СуммаБезНДС");
	КонецЦикла; 
	
	Возврат РезультатЗапроса;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСРеализация0()

// Заполняет раздел "Авансы"
Процедура ЗаполнитьРазделАвансы() Экспорт
	
	ТаблицаРезультатов = Авансы.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Таблица_НДСcАвансов = ЗаполнитьНДСНачисленныйДаннымиПоАвансам();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСcАвансов,ТаблицаРезультатов);

	Авансы.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделАвансы.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС с авансов)
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
	|		    И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НДСНачисленныйОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСНачисленныйОстатки.НДСОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ИнвойсинговыйЦентр",  ИнвойсинговыйЦентр);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НачисленКУплате"
Процедура ЗаполнитьРазделНачисленКУплате() Экспорт
	
	ТаблицаРезультатов = НачисленКУплате.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);

	НачисленКУплате.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Заполняет раздел "Восстановлен"
Процедура ЗаполнитьРазделВосстановлен() Экспорт
	
	ТаблицаРезультатов = Восстановлен.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен,ТаблицаРезультатов);

	Восстановлен.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ИнвойсинговыйЦентр",  ИнвойсинговыйЦентр);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат НДСкВосстановлению;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НеОтражаетсяВКниге"
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(УчетнаяПолитикаНУ) Экспорт
	
	ТаблицаРезультатов = НеОтражаетсяВКниге.Выгрузить();
	ТаблицаРезультатов.Очистить();
	ТаблицаРезультатов.Колонки.Добавить("ЗаписьДополнительногоЛиста",новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("КорректируемыйПериод");
	
	Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые();
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		НеОтражаетсяВКниге.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = УчетНДС.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	//НаличиеОплатыНеТребуется = не (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС  = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате) ;

	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	// Заблокировать оплаты, зарегистрированные по счетам-фактурам,
	// которые могут быть использованы для погашения отражаемых в книге начислений.
	ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
	ДеревоНДС_ВычетЗаблокирован0 = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
	
	Если ДеревоНДС_ВычетЗаблокирован.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	Если ДеревоНДС_ВычетЗаблокирован0.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован0, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	// Отражаем только оплаченные записи вне азвисимости от учетной политики - необходимо погасить запись в регистре начисления и в регистре оплат.
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина, Истина);

	НеОтражаетсяВКниге.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНеОтражаетсяВКниге.
// Заполняет ТЧ НеОтражаетсяВКниге по данным регистра НДС начисленный (по реализации ЕНВД)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК СуммаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитикаНалоговыйУчет.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
	|					И
	|					УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация))
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Процедура вызывается из ЗаполнитьРазделРеализация.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.РаспределеннаяСуммаОстаток КАК РаспределеннаяОплата,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты = НЕОПРЕДЕЛЕНО
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокИспользования,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.Дата КАК ДатаОплаты,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.ПодразделениеОрганизации
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПокупателей.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ИнвойсинговыйЦентр = &ИнвойсинговыйЦентр
	|		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСУчетРаспределенныхОплатПокупателейОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.РаспределеннаяСуммаОстаток <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокИспользования,
	|	ДатаОплаты";
	
	Запрос.УстановитьПараметр("КонецПериодаГраница",Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ИнвойсинговыйЦентр",  ИнвойсинговыйЦентр);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	РаспределенныеОплаты.Колонки.Добавить("QuieryId", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QuieryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QuieryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QuieryId,"QuieryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из тела процедуры "ЗаполнитьРазделРеализация".
// В процессе работы процедуры общая сумма НДС, которая может быть признана
// в качестве вычета распределяется по конкретным событиям оплаты, для того
// чтобы сопоставить факт признания вычета по НДС и факт оплаты поставщику, связанный
// с этим признанием.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина, ОтражатьВидНачисления = Ложь )
	
	НДСНалоговыйПериод = Неопределено;
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ПорядокИспользования");
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	МоментОпределения_ПоОтгрузке = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
	
	Для каждого СтрокаСФ Из Дерево_НДСНачисленный.Строки Цикл
		
		НаличиеОплатыНеТребуется = (СтрокаСФ.Строки[0].МоментОпределенияНалоговойБазыНДС = МоментОпределения_ПоОтгрузке);
		ТаблицаОплат.Очистить();
		Отбор = Построитель_РаспределенныеОплаты.Отбор;
		Отбор.СчетФактура.Значение = СтрокаСФ.СчетФактура;
		Отбор.РаспределеннаяОплата.ВидСравнения = ?(СтрокаСФ.СуммаСНДС>0,ВидСравнения.Больше,ВидСравнения.Меньше);
		
		Построитель_РаспределенныеОплаты.Выполнить();
		Если Построитель_РаспределенныеОплаты.Результат.Пустой() и не НаличиеОплатыНеТребуется и СтрокаСФ.СуммаСНДС	>= 0 Тогда
			// Оплата не обнаружена
			Продолжить;
		КонецЕсли; 
		
		ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		СуммаКПогашению = СтрокаСФ.СуммаСНДС;

		Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
			СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
			Если СтрокаСФ.СуммаСНДС>0 Тогда
				СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
			Иначе
				СтрокаОплаты.СуммаОплаты = Макс(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
			КонецЕсли; 
			
			СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
			ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
			
			Если СуммаКПогашению = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если ТаблицаОплат.Количество() = 0  Тогда
			Если НаличиеОплатыНеТребуется или СтрокаСФ.СуммаСНДС < 0 Тогда
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
			Иначе
				Продолжить;	
			КонецЕсли;
		ИначеЕсли ТаблицаОплат.Итог("СуммаОплаты")<> СтрокаСФ.СуммаСНДС и НаличиеОплатыНеТребуется тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		ИначеЕсли СтрокаСФ.СуммаСНДС < 0 тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		КонецЕсли; 
			
		Если не ОтражатьВРеестре тогда
			// Оплаты заблокированы, дальнейшая обработка не требуется
			Продолжить;
		КонецЕсли;
			
		Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
			
			Если СтрокаСФ.Строки.Итог("СуммаСНДС") = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МассивБазиса =  СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаСНДС");
			Массив_БезНДС = СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаБезНДС");
			
			МассивРезультата = УправлениеПроизводством.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
			КРаспределениюБезНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаСФ.Строки.Итог("СуммаБезНДС")/СтрокаСФ.Строки.Итог("СуммаСНДС"),2);
			
			Если КРаспределениюБезНДС<>0 Тогда
				МассивРезультата_БезНДС = УправлениеПроизводством.РаспределитьПропорционально(КРаспределениюБезНДС,Массив_БезНДС);
			КонецЕсли; 
			
			НомерСтроки = 0;
			Для каждого СтрокаЗадолжености Из СтрокаСФ.Строки Цикл
				Если МассивРезультата[НомерСтроки] = 0 и ?(КРаспределениюБезНДС=0,Истина, МассивРезультата_БезНДС[НомерСтроки] =0) Тогда
					НомерСтроки = НомерСтроки + 1;
					Продолжить;
				КонецЕсли; 
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= СтрокаЗадолжености.СчетФактура;
				СтрокаРезультата.ПодразделениеОрганизации	= СтрокаЗадолжености.ПодразделениеОрганизации;
				СтрокаРезультата.Покупатель		= СтрокаЗадолжености.Покупатель;
				СтрокаРезультата.ВидЦенности	= СтрокаЗадолжености.ВидЦенности;
				СтрокаРезультата.СтавкаНДС		= СтрокаЗадолжености.СтавкаНДС;
				
				СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
				Если Реализация0 Тогда
					СтрокаРезультата.Состояние	= СтрокаЗадолжености.Состояние;
				КонецЕсли; 
				
				СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
				
				СтрокаРезультата.СуммаБезНДС	= ?(КРаспределениюБезНДС=0,0, МассивРезультата_БезНДС[НомерСтроки]);
				СтрокаРезультата.НДС			= МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС; //?(СтрокаСФ.ПорядокОплаты = 1,0,);
				
				СтрокаЗадолжености.СуммаБезНДС = СтрокаЗадолжености.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаЗадолжености.СуммаНДС = СтрокаЗадолжености.СуммаНДС - СтрокаРезультата.НДС;
				СтрокаЗадолжености.СуммаСНДС = СтрокаЗадолжености.СуммаСНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
				Если Реализация0 Тогда
					Если СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
					ИначеЕсли СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
					КонецЕсли; 
				Иначе
					Если НаличиеОплатыНеТребуется Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
					Иначе
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Оплата;
					КонецЕсли;
				КонецЕсли;
				Если (Реализация0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) Тогда
					Если Дата >= '20060530' Тогда
						Если НДСНалоговыйПериод = Неопределено Тогда
							УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено, Организация, "Нал");
							Если УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") <> Неопределено Тогда
								Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
									НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
								Иначе
									НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
								КонецЕсли;
							Иначе
								НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
							КонецЕсли;
						КонецЕсли;
						СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
						Если Реализация0 Тогда
							СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата);
						Иначе 
							СтрокаРезультата.КорректируемыйПериод = ?(НаличиеОплатыНеТребуется, СтрокаЗадолжености.СчетФактураДата, 
																	Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата));
						КонецЕсли;
						Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
								КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
								КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
							СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
							СтрокаРезультата.КорректируемыйПериод = '00010101';
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ОтражатьВидНачисления Тогда
					СтрокаРезультата.ВидНачисления	= СтрокаЗадолжености.ВидНачисления;
				КонецЕсли; 
				НомерСтроки = НомерСтроки+1;
			КонецЦикла; 
			
		КонецЦикла; 
			
    КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();
	
КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ВидНачисления_Реализация0", Перечисления.НДСВидНачисления.Реализация0);
	
	// Виды ценностей расчеты по которым не отражаются в расчетах с покупателями
	ВидаЦенностиБезОплаты = Новый Массив();
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннеПотребление);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидаЦенностиБезОплаты", ВидаЦенностиБезОплаты);
	Запрос.УстановитьПараметр("ПустойИЦ", Справочники.ИнвойсинговыеЦентры.ПустаяСсылка());
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Реализация0 КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ТаблицаЗаписей.Состояние,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""НДС по реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ) КАК ИнвойсинговыйЦентр,
		//-> RG-Soft VIvanov 02/04/12
		|	ТаблицаЗаписей.ИсправленныйСчетФактура
		//<-
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
		|			ТОГДА &ВидНачисления_РеализацияБезНДС
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
		|			ТОГДА &ВидНачисления_Реализация0
		|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
		|	КОНЕЦ КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""НДС по реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	NULL КАК СчетУчетаНДС,
		|	УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ) КАК ИнвойсинговыйЦентр,
		|	ТаблицаЗаписей.Валюта,
		|	ТаблицаЗаписей.СуммаБезНДСВВалюте,
		|	ТаблицаЗаписей.НДСВВалюте,
		|	ТаблицаЗаписей.ИсправленныйСчетФактура,
		|	NULL КАК ДоговорКонтрагента,
		|	"""" КАК ДатаДокументаОплаты,
		|	"""" КАК НомерДокументаОплаты
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.СчетФактура,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ТаблицаЗаписей.СчетФактура.Дата,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Авансы,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС с авансов"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ),
		|	ТаблицаЗаписей.Валюта,
		|	ТаблицаЗаписей.СуммаБезНДСВВалюте,
		|	ТаблицаЗаписей.НДСВВалюте,
		|	ТаблицаЗаписей.ИсправленныйСчетФактура,
		|	ТаблицаЗаписей.ДоговорКонтрагента,
		|	ТаблицаЗаписей.СчетФактура.ДатаВходящегоДокумента,
		|	ТаблицаЗаписей.СчетФактура.НомерВходящегоДокумента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_НачисленКУплате,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС начисленный к уплате"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ),
		|	ТаблицаЗаписей.Валюта,
		|	ТаблицаЗаписей.СуммаБезНДСВВалюте,
		|	ТаблицаЗаписей.НДСВВалюте,
		|	NULL,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
		|				И ТаблицаЗаписей.СчетФактура.WHT
		|			ТОГДА ТаблицаЗаписей.СчетФактура.ДатаВходящегоДокумента
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СчетФактура ССЫЛКА Документ.СчетКнигиПокупок
		|				И ТаблицаЗаписей.СчетФактура.WHT
		|			ТОГДА ТаблицаЗаписей.СчетФактура.НомерВходящегоДокумента
		|		ИНАЧЕ """"
		|	КОНЕЦ
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	ТаблицаЗаписей.ВидНачисления,
		|	ЛОЖЬ,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""Не отражается в книге продаж"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	"""",
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	&ПустаяДата,
		|	&Событие_НДСВосстановлен,
		|	&ВидНачисления_Восстановлен,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС восстановлен"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.СчетУчетаНДС,
		|	NULL,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.КостЦентр, &ПустойИЦ),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	"""",
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	NULL,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	NULL,
		|	&ВидНачисления_КурсовыеРазницы,
		|	ИСТИНА,
		|	NULL,
		|	""НДС с курсовых разниц"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.ПодразделениеОрганизации,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.ИнвойсинговыйЦентр, &ПустойИЦ),
		|	ТаблицаЗаписей.Валюта,
		|	ТаблицаЗаписей.СуммаБезНДСВВалюте,
		|	ТаблицаЗаписей.НДСВВалюте,
		|	ТаблицаЗаписей.ИсправленныйСчетФактура,
		|	NULL,
		|	"""",
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.КурсовыеРазницы КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("СтавкаНДС_БезНДС", Перечисления.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("СтавкаНДС_0", Перечисления.СтавкиНДС.НДС0);
		
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияБезНДС", Перечисления.НДСВидНачисления.РеализацияБезНДС);
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияСНДС",	Перечисления.НДСВидНачисления.РеализацияСНДС);
		Запрос.УстановитьПараметр("ВидНачисления_Авансы", 			Перечисления.НДСВидНачисления.НДСсАвансов);
		Запрос.УстановитьПараметр("ВидНачисления_НачисленКУплате",	Перечисления.НДСВидНачисления.НДСНачисленКУплате);
		Запрос.УстановитьПараметр("ВидНачисления_Восстановлен",		Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("ВидНачисления_КурсовыеРазницы",	Перечисления.НДСВидНачисления.НДССКурсовыхРазниц);
		Запрос.УстановитьПараметр("Событие_НДСВосстановлен",		Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	ТаблицаЗаписей = Результат.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого СтрокаТаблицы из ТаблицаЗаписей Цикл
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = '00010101';
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Иначе
			СтрокаТаблицы.ДатаСобытия = Макс(СтрокаТаблицы.ДатаОплаты,СтрокаТаблицы.СчетФактураДата);
		КонецЕсли;
		
		//-> RG-Soft VIvanov 02/04/12 - иначе потом не определяются сторнирующие записи
		Если СтрокаТаблицы.ДокументОплаты = Неопределено Тогда
			СтрокаТаблицы.ДокументОплаты = Документы.ПлатежноеПоручениеВходящее.ПустаяСсылка();
		КонецЕсли;
		//<-
		
	КонецЦикла; 
	
	Возврат ТаблицаЗаписей;

КонецФункции // ПодготовитьТаблицуЗаписей()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента,ТаблицаПоНачислению, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Реализация", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если не СтруктураШапкиДокумента.Реализация0 Тогда
		
		// Теперь вызовем общую процедуру проверки.
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		// Для НДС начисленного к уплате может быть не заполнен покупатель по СМР пдрядным и внутреннему потреблению
		
		// Теперь вызовем общую процедуру проверки.
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НачисленКУплате", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Вставить("ДокументОплаты");
		// Теперь вызовем общую процедуру проверки.
		// Для НДС начисленного к уплате может быть не заполнен покупатель по СМР пдрядным и внутреннему потреблению
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НеОтражаетсяВКниге", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Удалить("ДокументОплаты");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Восстановлен", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;                                          
	
	// Проверка полей на логическое соответствие
	//СтрокаСообщенияДатаОплаты = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПокупатель = "Не заполнено значение реквизита ""Покупатель""!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	Для каждого СтрокаТаблицы из ТаблицаПоНачислению Цикл
		Если  СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннеПотребление
			или СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			// Покупателем является сама оргнизация
			СтрокаТаблицы.Покупатель = Неопределено;
		ИначеЕсли (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И НЕ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные) тогда
			// По рознице покупатель не указывается
			СтрокаТаблицы.Покупатель = Неопределено;
		ИначеЕсли ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.Покупатель) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			Если СтрокаТаблицы.НазваниеТаблицы = "НДС восстановлен" Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик, Отказ, Заголовок);
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПокупатель, Отказ, Заголовок);
			КонецЕсли;			
		КонецЕсли; 
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод, Отказ ,Заголовок);		
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	
	Если ТаблицаПоНачислению.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		// Отражение по регистру "НДС начисленный"
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.Выгрузить();
		ТаблицаДвижений_НДСНачисленный.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСНачисленный);
		
		// { РГ-Софт Пахоменков А. 16.12.2014
		//ТаблицаДвижений_НДСНачисленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидНачисления,СчетУчетаНДС,ПодразделениеОрганизации,ИнвойсинговыйЦентр","СуммаБезНДС,НДС");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСНачисленный", "Период,Активность");
		ТаблицаДвижений_НДСНачисленный.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 16.12.2014
		
		Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ВыполнитьРасход();
		
		// Отражение по регистру взаиморасчетов
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		
		Для каждого СтрокаВычета Из ТаблицаПоНачислению Цикл
			Если не СтрокаВычета.ВлияетНаРасчеты Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРасчетов = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаРасчетов.Организация = СтрокаВычета.Организация;
			СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
			СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
			//СтрокаРасчетов.РасчетыСБюджетом = Ложь;
			СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.СуммаБезНДС+СтрокаВычета.НДС;
			СтрокаРасчетов.ПодразделениеОрганизации = СтрокаВычета.ПодразделениеОрганизации;
			СтрокаРасчетов.ИнвойсинговыйЦентр = СтрокаВычета.ИнвойсинговыйЦентр;

		КонецЦикла;

		// { РГ-Софт Пахоменков А. 16.12.2014
		//ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,ДатаСобытия,ПодразделениеОрганизации,ИнвойсинговыйЦентр","РаспределеннаяСумма");
		СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСУчетРаспределенныхОплатПокупателей", "Период,Активность");
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
		// } РГ-Софт Пахоменков А. 16.12.2014      		
		
		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ВыполнитьРасход();
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПродаж
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Очистить();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("ОтражатьВКниге",Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СчетФактураДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
		Если не СтрокаЗаписи.ОтражатьВКниге Тогда
			СтрокиКУдалению.Добавить(СтрокаЗаписи);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.Реализация0 и СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.СчетФактураДата);
			Иначе				
				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
			КонецЕсли; 
			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаДвижений_НДСЗаписиКнигиПродаж.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.ОтражатьВКниге);
	
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Состояние);
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СчетФактураДата);
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.12.2014
	//ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста,ПодразделениеОрганизации,ИнвойсинговыйЦентр","СуммаБезНДС,НДС");
	СтрСвертка = ОбщегоНазначения.ПолучитьСтруктуруСверткиРегистра("РегистрыНакопления", "НДСЗаписиКнигиПокупок", "Период,Активность");
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть(СтрСвертка.Группа, СтрСвертка.Итог);
	// } РГ-Софт Пахоменков А. 16.12.2014 
	
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	Если мВестиУчетНДС Тогда
		Если СтруктураШапкиДокумента.Реализация0 Тогда
			// Отражение по регистру НДСРеализация0
			ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.Выгрузить();
			ТаблицаДвижений_НДСРеализация0.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСРеализация0);
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
			Движения.НДСРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение(Ложь);

		КонецЕслИ;
	КонецЕсли;
	
	ВидыНачисления_Реализация = Новый СписокЗначений;
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	// Сфоормировать проводи по записям книги продаж
	Для каждого ТекСтрокаВычета Из ТаблицаПоНачислению Цикл
			
		Если Не ТекСтрокаВычета.ОтражатьВКниге Тогда
			Продолжить;
		ИначеЕсли ТекСтрокаВычета.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ВидыНачисления_Реализация.НайтиПоЗначению(ТекСтрокаВычета.ВидНачисления) = Неопределено Тогда
			Если ТекСтрокаВычета.СчетФактураДата >= '20060101' Тогда 
				// C 2006 года учетная политика всегда по отгрузке
				Продолжить;
			ИначеЕсли не ТекСтрокаВычета.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ТекСтрокаВычета.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
				Продолжить;
			КонецЕсли; 
					
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "НДС ";
			Движение.НомерЖурнала = "НДС";
					
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет; //76.Н
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ИначеЕсли ТекСтрокаВычета.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен Тогда
			// Проводка по восстановлению НДС на 19 счет 
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШапкиДокумента.Дата;
			Движение.Организация =  СтруктураШапкиДокумента.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "Восстановление НДС";
			Движение.НомерЖурнала = "НДС";
					
			Движение.СчетДт = ТекСтрокаВычета.СчетУчетаНДС; //19.ХХ
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			ОбщегоНазначения.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
		КонецЕсли; 			
       
	КонецЦикла; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж)
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти( Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста","СуммаБезНДС,НДС");
	
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		НачалоНалоговогоПериодаКорректировки = ?(СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ПодразделениеОрганизации,
		|	НДСЗаписиКнигиПродажОбороты.ИнвойсинговыйЦентр
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(&НачалоПериода, &КонецПериодаГраница, Месяц, СчетФактура = &СчетФактура) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		
		Если СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
                     
//Добавление - РГ-СоФт - Пронин Иван - 2009-11-09
Процедура ДвиженияПоРегистрам2(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	
	Для Каждого Запись Из ТаблицаПоНачислению Цикл
		//движения по регистру НДСНачисления
        Движение = Движения.НДСНачисленный.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
		Движение.Период = ДатаПроведения;
		
		//движения по регистру НДСЗаписиКнигиПродаж
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		Движение.Период = ДатаПроведения;
		//Движение.ИнвойсинговыйЦентр = Справочники.ИнвойсинговыеЦентры.ПустаяСсылка();
		//Движение.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЦикла;
	
	//Формирование строрнопроводок
	
	Если НомерЛиста = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//для получения данных из регистра НДС продажи:
	//для формирования сторно проводки нужно знать сумму
	//исходной реализации, эту сумму будет получать из НДС продажи
	табДанныхСторно = Новый ТаблицаЗначений;
	Реквизиты_ТЧРеализация = Метаданные.Документы.ФормированиеЗаписейКнигиПродаж.ТабличныеЧасти.Реализация.Реквизиты;
	табДанныхСторно.Колонки.Добавить("СчетФактура", Реквизиты_ТЧРеализация.СчетФактура.Тип);
	табДанныхСторно.Колонки.Добавить("ДокументОплаты", Реквизиты_ТЧРеализация.ДокументОплаты.Тип);
	табДанныхСторно.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	табДанныхСторно.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));

	Для Каждого Запись Из Реализация Цикл
		//Если Запись.СуммаБезНДС < 0 Тогда
			НоваяСтрока = табДанныхСторно.Добавить();
			НоваяСтрока.СчетФактура = Запись.СчетФактура;
			НоваяСтрока.ДокументОплаты = Запись.ДокументОплаты;
			НоваяСтрока.Покупатель = Запись.Покупатель;
			НоваяСтрока.Подразделение = Запись.ПодразделениеОрганизации;
		//КонецЕсли;
	КонецЦикла;
	Для Каждого Запись Из Авансы Цикл
		Если Запись.СуммаБезНДС < 0 Тогда
			НоваяСтрока = табДанныхСторно.Добавить();
			НоваяСтрока.СчетФактура = Запись.СчетФактура;
			//Закомментировала Федотова Л., РГ-Софт, 23.10.13, вопрос SLI-0003948
			//так как в табличной части "Авансы" нет реквизита "ДокументОплаты"
			//НоваяСтрока.ДокументОплаты = Запись.ДокументОплаты;
			НоваяСтрока.Покупатель = Запись.Покупатель;
			НоваяСтрока.Подразделение = Запись.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Запись Из табДанныхСторно Цикл
		Если Запись.ДокументОплаты = Неопределено Тогда
			Запись.ДокументОплаты = Документы.ПлатежноеПоручениеВходящее.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табДанныхСторно", табДанныхСторно);
	Запрос.УстановитьПараметр("СчетахФактуры", табДанныхСторно.ВыгрузитьКолонку("СчетФактура"));
	Запрос.УстановитьПараметр("ДокументыОплаты", табДанныхСторно.ВыгрузитьКолонку("ДокументОплаты"));
	Запрос.УстановитьПараметр("Покупатели", табДанныхСторно.ВыгрузитьКолонку("Покупатель"));
    //Юркевич добавила подразделение в запрос	
	Запрос.Текст = "ВЫБРАТЬ
	               |	табДанныхСторно.СчетФактура,
	               |	табДанныхСторно.ДокументОплаты,
	               |	табДанныхСторно.Подразделение
	               |ПОМЕСТИТЬ табДанныхСторно
	               |ИЗ
	               |	&табДанныхСторно КАК табДанныхСторно
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0)) КАК СуммаБезНДС,
	               |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК НДС,
	               |	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	               |	ВЫБОР
	               |		КОГДА НДСЗаписиКнигиПродажОбороты.ДокументОплаты = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ЗНАЧЕНИЕ(Документ.ПлатежноеПоручениеВходящее.ПустаяСсылка)
	               |		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДокументОплаты
	               |	КОНЕЦ КАК ДокументОплаты,
	               |	НДСЗаписиКнигиПродажОбороты.ПодразделениеОрганизации
	               |ПОМЕСТИТЬ таб1
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			,
	               |			,
	               |			Период,
	               |			Покупатель В (&Покупатели)
	               |				И СчетФактура В (&СчетахФактуры)
	               |				И ПодразделениеОрганизации В
	               |					(ВЫБРАТЬ
	               |						табДанныхСторно.Подразделение
	               |					ИЗ
	               |						табДанныхСторно КАК табДанныхСторно)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	               |	ВЫБОР
	               |		КОГДА НДСЗаписиКнигиПродажОбороты.ДокументОплаты = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ЗНАЧЕНИЕ(Документ.ПлатежноеПоручениеВходящее.ПустаяСсылка)
	               |		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДокументОплаты
	               |	КОНЕЦ,
	               |	НДСЗаписиКнигиПродажОбороты.ПодразделениеОрганизации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	табДанныхСторно.СчетФактура,
	               |	табДанныхСторно.ДокументОплаты,
	               |	таб1.СуммаБезНДС,
	               |	таб1.НДС
	               |ИЗ
	               |	табДанныхСторно КАК табДанныхСторно
	               |		ЛЕВОЕ СОЕДИНЕНИЕ таб1 КАК таб1
	               |		ПО табДанныхСторно.СчетФактура = таб1.СчетФактура
	               |			И табДанныхСторно.ДокументОплаты = таб1.ДокументОплаты
	               |			И табДанныхСторно.Подразделение = таб1.ПодразделениеОрганизации";
	
	
	табИсходныйСумм = Запрос.Выполнить().Выгрузить();
	табБуффер = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	Для Каждого Запись Из табИсходныйСумм Цикл
		ЗначениеСторно = ТаблицаПоНачислению.НайтиСтроки(Новый Структура("СчетФактура, ДокументОплаты", Запись.СчетФактура, Запись.ДокументОплаты));
		Если НЕ ЗначениеЗаполнено(Запись.СуммаБезНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеСторно) Тогда
			Движение = табБуффер.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ЗначениеСторно[0]);
			ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
			Движение.Период = ДатаПроведения;
			Движение.СторнирующаяЗаписьДопЛиста = Истина;
			Движение.СуммаБезНДС = - Запись.СуммаБезНДС;
			Движение.НДС = - Запись.НДС;
			//НоваяСтрока.СуммаБезНДСВВалюте = - Запись.СуммаБезНДСВВалюте;
			//НоваяСтрока.НДСВВалюте = - Запись.НДСВВалюте;
			
			Если Запись.СуммаБезНДС + ЗначениеСторно[0].СуммаБезНДС <> 0 Тогда
				Движение = табБуффер.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, ЗначениеСторно[0]);
				ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
				Движение.Период = ДатаПроведения;					
				Движение.СуммаБезНДС = Запись.СуммаБезНДС + ЗначениеСторно[0].СуммаБезНДС;
				Движение.НДС = Запись.НДС + ЗначениеСторно[0].НДС;
				//НоваяСтрока.СуммаБезНДСВВалюте = Запись.СуммаБезНДСВВалюте + ЗначениеСторно[0].СуммаБезНДСВВалюте;
				//НоваяСтрока.НДСВВалюте = Запись.НДСВВалюте + ЗначениеСторно[0].НДСВВалюте;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//удаление движений для сторно СФ
	масУдаления = Новый Массив;
	Для Каждого Движение Из Движения.НДСЗаписиКнигиПродаж Цикл
		НайтиИсходнаяСумма = табБуффер.НайтиСтроки(Новый Структура("СчетФактура, ДокументОплаты", Движение.СчетФактура, Движение.ДокументОплаты));
		Если ЗначениеЗаполнено(НайтиИсходнаяСумма) Тогда
			масУдаления.Добавить(Движение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Эл Из масУдаления Цикл
		Движения.НДСЗаписиКнигиПродаж.Удалить(Эл);
	КонецЦикла;
	//добавление сторнодвижений
	табБуффер.ЗаполнитьЗначения(Истина, "Активность");
	табБуффер.ЗаполнитьЗначения(0, "НомерСтроки");
	Для Каждого Запись Из табБуффер	Цикл
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
	КонецЦикла;
	табБуффер = 0;
	// { RGS MYurkevich 19.02.2015 15:47:19 - RCA-0000036
	ДокументыРеализации = Реализация.ВыгрузитьКолонку("СчетФактура");
	Если ДокументыРеализации.Количество() <> 0 Тогда	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйLawsonОстатки.ПроводкаDSS,
		|	НДСНачисленныйLawsonОстатки.AU,
		|	НДСНачисленныйLawsonОстатки.СуммаUSDОстаток КАК СуммаUSD,
		|	НДСНачисленныйLawsonОстатки.СуммаРубОстаток КАК СуммаРуб
		|ИЗ
		|	РегистрНакопления.НДСНачисленныйLawson.Остатки(&Дата, ПроводкаDSS.Документ В (&ДокументыРеализации)) КАК НДСНачисленныйLawsonОстатки
		|ГДЕ
		|	НДСНачисленныйLawsonОстатки.СуммаUSDОстаток <> 0";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ДокументыРеализации", ДокументыРеализации);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		 Запись = Движения.НДСНачисленныйLawson.ДобавитьРасход();
		 ЗаполнитьЗначенияСвойств(Запись, Выборка);
		 Запись.Период = ДатаПроведения;
	 КонецЦикла;
	 Движения.НДСНачисленныйLawson.Записать();
	КонецЕсли;

	// } RGS MYurkevich 19.02.2015 15:47:54 - RCA-0000036
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ТаблицаПоНачислению = 			ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента,ТаблицаПоНачислению, Отказ, Заголовок);
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам2(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок);
		//ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры


