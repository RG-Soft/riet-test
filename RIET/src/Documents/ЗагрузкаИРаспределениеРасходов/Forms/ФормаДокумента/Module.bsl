
/////////////////////////// СТАНДАРТНЫЕ ОБРАБОТЧИКИ ФОРМЫ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	FA = Истина;
	MS = Истина;
	Taxes = Истина;
	Inventory = Истина;

	ОбновитьОтчетИтог();
	
	Элементы.РаспределениеРучное.ОтборСтрок = Новый ФиксированнаяСтруктура("Способ", ПредопределенноеЗначение("Справочник.СпособыРаспределенияРасходов.ПустаяСсылка"));
	
КонецПроцедуры


//////////////////////////  ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ


//////////////////////////  ОБРАБОТЧИКИ ТАБЛИЧНОЙ ЧАСТИ


//////////////////////////  ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ВыбратьВидыРасходов(Команда)
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.Форма", , ЭтаФорма,,,, Новый ОписаниеОповещения("ПослеВыбораВидыРасходов", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидыРасходов(РезультатВозврат, ДополнительныеПараметры) Экспорт
	Если РезультатВозврат <> Неопределено Тогда
		FA = РезультатВозврат.FA;
		MS = РезультатВозврат.MS;
		Taxes = РезультатВозврат.Taxes;
		Inventory = РезультатВозврат.Inventory;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиРасчет(Команда)
	
	ПроизвестиРасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиРасчетНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗагрузкаИРаспределениеРасходовРаспределение.Способ
	                      |ПОМЕСТИТЬ Способы
	                      |ИЗ
	                      |	Документ.ЗагрузкаИРаспределениеРасходов.Распределение КАК ЗагрузкаИРаспределениеРасходовРаспределение
	                      |ГДЕ
	                      |	ЗагрузкаИРаспределениеРасходовРаспределение.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AU,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Расходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ПрочиеРасходы,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ФактическоеПодразделение,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Сегмент,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.ВидРасходов,
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AccountLawson
	                      |ПОМЕСТИТЬ РасходыРаспределяемые
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.РаспределяемыеЗатраты КАК СпособыРаспределенияРасходовРаспределяемыеAU
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				способы.Способ
	                      |			ИЗ
	                      |				способы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РасходыРаспределяемые.AU,
	                      |	СУММА(РасходыРаспределяемые.Расходы) КАК Расходы,
	                      |	СУММА(РасходыРаспределяемые.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	РасходыРаспределяемые.Ссылка,
	                      |	РасходыРаспределяемые.Сегмент,
	                      |	РасходыРаспределяемые.ВидРасходов,
	                      |	РасходыРаспределяемые.AccountLawson
	                      |ПОМЕСТИТЬ РасходыРаспределяемыеТолькоAU
	                      |ИЗ
	                      |	РасходыРаспределяемые КАК РасходыРаспределяемые
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РасходыРаспределяемые.AU,
	                      |	РасходыРаспределяемые.Ссылка,
	                      |	РасходыРаспределяемые.Сегмент,
	                      |	РасходыРаспределяемые.ВидРасходов,
	                      |	РасходыРаспределяемые.AccountLawson
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.НалоговаяРегистрация,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Доля
	                      |ПОМЕСТИТЬ БазаРаспределения
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.БазаРаспределения КАК СпособыРаспределенияРасходовБазаРаспределения
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				способы.Способ
	                      |			ИЗ
	                      |				способы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БазаРаспределения.НалоговаяРегистрация,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.Расходы * БазаРаспределения.Доля) КАК Расходы,
	                      |	СУММА(РасходыРаспределяемыеТолькоAU.ПрочиеРасходы * БазаРаспределения.Доля) КАК ПрочиеРасходы,
	                      |	ВЫБОР
	                      |		КОГДА РасходыРаспределяемыеТолькоAU.AU.TaxRegistration = БазаРаспределения.НалоговаяРегистрация
	                      |			ТОГДА ""прямые расходы""
	                      |		ИНАЧЕ ""авизо "" + БазаРаспределения.НалоговаяРегистрация.Наименование
	                      |	КОНЕЦ КАК ТипРасходов,
	                      |	РасходыРаспределяемыеТолькоAU.ВидРасходов КАК ВидРасходов,
	                      |	РасходыРаспределяемыеТолькоAU.AccountLawson,
	                      |	""Пришло"" КАК ТипДанных
	                      |ПОМЕСТИТЬ Distribution
	                      |ИЗ
	                      |	РасходыРаспределяемыеТолькоAU КАК РасходыРаспределяемыеТолькоAU
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БазаРаспределения КАК БазаРаспределения
	                      |		ПО РасходыРаспределяемыеТолькоAU.Ссылка = БазаРаспределения.Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	БазаРаспределения.НалоговаяРегистрация,
	                      |	ВЫБОР
	                      |		КОГДА РасходыРаспределяемыеТолькоAU.AU.TaxRegistration = БазаРаспределения.НалоговаяРегистрация
	                      |			ТОГДА ""прямые расходы""
	                      |		ИНАЧЕ ""авизо "" + БазаРаспределения.НалоговаяРегистрация.Наименование
	                      |	КОНЕЦ,
	                      |	РасходыРаспределяемыеТолькоAU.ВидРасходов,
	                      |	РасходыРаспределяемыеТолькоAU.AccountLawson
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.ФактическоеПодразделение,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.AU,
	                      |	СУММА(ЗагрузкаИРаспределениеРасходовЗагрузка.Расходы) КАК Расходы,
	                      |	СУММА(ЗагрузкаИРаспределениеРасходовЗагрузка.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.Сегмент,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.ВидРасходов,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.AccountLawson,
	                      |	""ИсходныеДанные"" КАК ТипДанных
	                      |ПОМЕСТИТЬ ИсходныеДанные
	                      |ИЗ
	                      |	Документ.ЗагрузкаИРаспределениеРасходов.Загрузка КАК ЗагрузкаИРаспределениеРасходовЗагрузка
	                      |ГДЕ
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.ФактическоеПодразделение,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.AU,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.Сегмент,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.ВидРасходов,
	                      |	ЗагрузкаИРаспределениеРасходовЗагрузка.AccountLawson
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.ФактическоеПодразделение,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.AU,
	                      |	СУММА(ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.Расходы),
	                      |	0,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.Сегмент,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.СтрокаТВ.Код,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.AccountLawson,
	                      |	""ИсходныеДанные""
	                      |ИЗ
	                      |	Документ.ЗагрузкаИРаспределениеРасходов.ДанныеСтрокТВ КАК ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ
	                      |ГДЕ
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.ФактическоеПодразделение,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.AU,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.Сегмент,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.СтрокаТВ.Код,
	                      |	ЗагрузкаИРаспределениеРасходовДанныеСтрокТВ.AccountLawson
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ИсходныеДанные.ФактическоеПодразделение,
	                      |	ИсходныеДанные.AU,
	                      |	ИсходныеДанные.Расходы,
	                      |	ИсходныеДанные.ПрочиеРасходы,
	                      |	ИсходныеДанные.Сегмент,
	                      |	ИсходныеДанные.ВидРасходов,
	                      |	ИсходныеДанные.AccountLawson,
	                      |	ИсходныеДанные.ТипДанных
	                      |ПОМЕСТИТЬ Остаток
	                      |ИЗ
	                      |	ИсходныеДанные КАК ИсходныеДанные
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Распределенное.ФактическоеПодразделение,
	                      |	Распределенное.AU,
	                      |	-Распределенное.Расходы,
	                      |	-Распределенное.ПрочиеРасходы,
	                      |	Распределенное.Сегмент,
	                      |	Распределенное.ВидРасходов,
	                      |	Распределенное.AccountLawson,
	                      |	""Ушло""
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		РасходыРаспределяемые.AU КАК AU,
	                      |		СУММА(РасходыРаспределяемые.Расходы) КАК Расходы,
	                      |		СУММА(РасходыРаспределяемые.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |		РасходыРаспределяемые.ФактическоеПодразделение КАК ФактическоеПодразделение,
	                      |		РасходыРаспределяемые.Сегмент КАК Сегмент,
	                      |		РасходыРаспределяемые.ВидРасходов КАК ВидРасходов,
	                      |		РасходыРаспределяемые.AccountLawson КАК AccountLawson
	                      |	ИЗ
	                      |		РасходыРаспределяемые КАК РасходыРаспределяемые
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		РасходыРаспределяемые.AU,
	                      |		РасходыРаспределяемые.ФактическоеПодразделение,
	                      |		РасходыРаспределяемые.Сегмент,
	                      |		РасходыРаспределяемые.ВидРасходов,
	                      |		РасходыРаспределяемые.AccountLawson) КАК Распределенное
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Остаток.Расходы,
	                      |	Остаток.ПрочиеРасходы,
	                      |	Остаток.AU.TaxRegistration КАК НалоговаяРегистрация,
	                      |	ВЫБОР
	                      |		КОГДА Остаток.AU.TaxRegistration = Остаток.ФактическоеПодразделение
	                      |			ТОГДА ""прямые расходы""
	                      |		ИНАЧЕ ""авизо "" + Остаток.ФактическоеПодразделение.Наименование
	                      |	КОНЕЦ КАК ТипРасходов,
	                      |	Остаток.ВидРасходов КАК ВидРасходов,
	                      |	Остаток.AccountLawson,
	                      |	Остаток.ТипДанных КАК ТипДанных
	                      |ПОМЕСТИТЬ ОстатокРазнесенный
	                      |ИЗ
	                      |	Остаток КАК Остаток
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(ВложенныйЗапрос.Расходы) КАК Расходы,
	                      |	СУММА(ВложенныйЗапрос.ПрочиеРасходы) КАК ПрочиеРасходы,
	                      |	ВложенныйЗапрос.НалоговаяРегистрация КАК НалоговаяРегистрация,
	                      |	ВложенныйЗапрос.ТипРасходов КАК ТипРасходов,
	                      |	ВложенныйЗапрос.ВидРасходов КАК ВидРасходов,
	                      |	ВложенныйЗапрос.AccountLawson,
	                      |	ВложенныйЗапрос.ТипДанных
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ОстатокРазнесенный.Расходы КАК Расходы,
	                      |		ОстатокРазнесенный.ПрочиеРасходы КАК ПрочиеРасходы,
	                      |		ОстатокРазнесенный.НалоговаяРегистрация КАК НалоговаяРегистрация,
	                      |		ОстатокРазнесенный.ВидРасходов КАК ВидРасходов,
	                      |		ОстатокРазнесенный.ТипРасходов КАК ТипРасходов,
	                      |		ОстатокРазнесенный.AccountLawson КАК AccountLawson,
	                      |		ОстатокРазнесенный.ТипДанных КАК ТипДанных
	                      |	ИЗ
	                      |		ОстатокРазнесенный КАК ОстатокРазнесенный
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		Distribution.Расходы,
	                      |		Distribution.ПрочиеРасходы,
	                      |		Distribution.НалоговаяРегистрация,
	                      |		Distribution.ВидРасходов,
	                      |		Distribution.ТипРасходов,
	                      |		NULL,
	                      |		Distribution.ТипДанных
	                      |	ИЗ
	                      |		Distribution КАК Distribution) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВложенныйЗапрос.НалоговаяРегистрация,
	                      |	ВложенныйЗапрос.ВидРасходов,
	                      |	ВложенныйЗапрос.ТипРасходов,
	                      |	ВложенныйЗапрос.AccountLawson,
	                      |	ВложенныйЗапрос.ТипДанных
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НалоговаяРегистрация,
	                      |	ТипРасходов УБЫВ");	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);							  
	РезультатРаспределения = Запрос.Выполнить().Выгрузить();
	Объект.Затраты.Загрузить(РезультатРаспределения);

	ОбновитьОтчетИтог();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасходы(Команда)
	Если Объект.Загрузка.Количество() Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Загрузка.Очистить();
			ЗаполнитьРасходы();
		КонецЕсли;
	Иначе
		ЗаполнитьРасходы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходы()
	
	массивУдаляемых = Новый Массив;
	Для каждого текСтр из Объект.РаспределениеРучное Цикл
		если ЗначениеЗаполнено(текСтр.Способ) и ЗначениеЗаполнено(текСтр.ВидРасходов) Тогда
			массивУдаляемых.Добавить(текСтр);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текЭлемент из массивУдаляемых Цикл
		
		Объект.РаспределениеРучное.Удалить(текЭлемент);	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(Объект.Дата));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Объект.Дата));
	
	Загрузка = Объект.Загрузка.Выгрузить();
	Загрузка.Очистить();
	
	Если FA Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДопКонтрагентыИнтеркомпани.Контрагент
		|ПОМЕСТИТЬ ДопКонтрагентыИнтеркомпани
		|ИЗ
		|	РегистрСведений.ДопКонтрагентыИнтеркомпани КАК ДопКонтрагентыИнтеркомпани
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПередачаОСОС.ОсновноеСредство,
		|	ПередачаОСОС.Ссылка КАК ПередачаОС,
		|	ПередачаОСОС.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ПередачаОСОС.КостЦентр КАК КостЦентр,
		|	ПередачаОСОС.СтоимостьНУ - ПередачаОСОС.АмортизацияНУ - ПередачаОСОС.АмортизацияЗаМесяцНУ КАК ОстаточнаяСтоимость,
		|	ПередачаОСОС.АмортизацияНУ + ПередачаОСОС.АмортизацияЗаМесяцНУ КАК Амортизация,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПринятоКУчету.ДатаСостояния, МЕСЯЦ), НАЧАЛОПЕРИОДА(ПередачаОСОС.Ссылка.Дата, МЕСЯЦ), МЕСЯЦ) КАК ФактическийСрокПолезногоИспользования,
		|	ПередачаОСОС.Ссылка.ПодразделениеОрганизации КАК ФактическоеПодразделение
		|ПОМЕСТИТЬ ОС
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|			СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ГДЕ
		|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК ПринятоКУчету
		|		ПО ПередачаОСОС.ОсновноеСредство = ПринятоКУчету.ОсновноеСредство
		|ГДЕ
		|	ПередачаОСОС.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПередачаОСОС.Ссылка.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство,
		|	МАКСИМУМ(СтоимостьАмортизацияОСОбороты.СуммаКВПриход) КАК СуммаКВПриход
		|ПОМЕСТИТЬ КВ
		|ИЗ
		|	РегистрНакопления.СтоимостьАмортизацияОС.Обороты(
		|			,
		|			&КонецПериода,
		|			Регистратор,
		|			ОсновноеСредство В
		|				(ВЫБРАТЬ
		|					ОС.ОсновноеСредство
		|				ИЗ
		|					ОС)) КАК СтоимостьАмортизацияОСОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СтоимостьАмортизацияОСОбороты.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ВложенныйЗапрос.ФактическийСрокПолезногоИспользования < 0
		|				ТОГДА 0
		|			ИНАЧЕ ВложенныйЗапрос.ОстаточнаяСтоимость
		|		КОНЕЦ) КАК Расходы,
		|	ВложенныйЗапрос.КостЦентр КАК AU,
		|	ВложенныйЗапрос.КостЦентр.Segment КАК Сегмент,
		|	ВложенныйЗапрос.ФактическоеПодразделение,
		|	""Sold FA fiscal NBV"" КАК ВидРасходов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка) КАК AccountLawson
		|ИЗ
		|	ОС КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.КостЦентр,
		|	ВложенныйЗапрос.ФактическоеПодразделение,
		|	ВложенныйЗапрос.КостЦентр.Segment
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ОС.Амортизация),
		|	ОС.КостЦентр,
		|	ОС.КостЦентр.Segment,
		|	ОС.ФактическоеПодразделение,
		|	""Depreciation"",
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|ИЗ
		|	ОС КАК ОС
		|
		|СГРУППИРОВАТЬ ПО
		|	ОС.КостЦентр,
		|	ОС.ФактическоеПодразделение,
		|	ОС.КостЦентр.Segment
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КВ.СуммаКВПриход,
		|	ОС.КостЦентр,
		|	ОС.КостЦентр.Segment,
		|	ОС.ФактическоеПодразделение,
		|	""КАПЫ"",
		|	ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|ИЗ
		|	КВ КАК КВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОС КАК ОС
		|		ПО КВ.ОсновноеСредство = ОС.ОсновноеСредство";
		Руб = Справочники.Валюты.НайтиПоКоду("643");
		Запрос.УстановитьПараметр("Руб", Руб);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
		//Загрузка = РезультатЗапроса.Выгрузить();
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(СписаниеОСОС.СтоимостьНУ - СписаниеОСОС.АмортизацияНУ - СписаниеОСОС.АмортизацияЗаМесяцНУ) КАК ОстаточнаяСтоимость,
		|	СписаниеОСОС.Ссылка.ПричинаСписания,
		|	СписаниеОСОС.Ссылка.ПодразделениеОрганизации
		|ПОМЕСТИТЬ Списания
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|ГДЕ
		|	СписаниеОСОС.Ссылка.НалоговыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СписаниеОСОС.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеОСОС.Ссылка.ПричинаСписания,
		|	СписаниеОСОС.Ссылка.ПодразделениеОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Списания.ПричинаСписания = &LL
		|				ТОГДА Списания.ОстаточнаяСтоимость
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расходы,
		|	Списания.ПодразделениеОрганизации КАК ФактическоеПодразделение,
		|	""Lost in Hole - LL"" КАК ВидРасходов
		|ИЗ
		|	Списания КАК Списания
		|
		|СГРУППИРОВАТЬ ПО
		|	Списания.ПодразделениеОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Списания.ПричинаСписания = &LC
		|				ТОГДА Списания.ОстаточнаяСтоимость
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	Списания.ПодразделениеОрганизации,
		|	""Lost in Hole - LC""
		|ИЗ
		|	Списания КАК Списания
		|
		|СГРУППИРОВАТЬ ПО
		|	Списания.ПодразделениеОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Списания.ПричинаСписания = &LL
		|					ИЛИ Списания.ПричинаСписания = &LC
		|				ТОГДА 0
		|			ИНАЧЕ Списания.ОстаточнаяСтоимость
		|		КОНЕЦ),
		|	Списания.ПодразделениеОрганизации,
		|	""FA disposal""
		|ИЗ
		|	Списания КАК Списания
		|
		|СГРУППИРОВАТЬ ПО
		|	Списания.ПодразделениеОрганизации";
		
		Запрос.УстановитьПараметр("LC", Справочники.ПричиныСписанияОС.НайтиПоНаименованию("LC"));
		Запрос.УстановитьПараметр("LL", Справочники.ПричиныСписанияОС.НайтиПоНаименованию("LL"));
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
	КонецЕсли;
	Если Taxes Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ФормированиеНалогаНаИмуществоОбороты.НалогВБюджетОборот / 4) КАК Расходы,
		|	ФормированиеНалогаНаИмуществоОбороты.ПодразделениеОрганизации КАК ФактическоеПодразделение,
		|	""Property Tax"" КАК ВидРасходов
		|ИЗ
		|	РегистрНакопления.ФормированиеНалогаНаИмущество.Обороты(, , , НалоговыйПериод МЕЖДУ &НачалоПериода И &КонецПериода) КАК ФормированиеНалогаНаИмуществоОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ФормированиеНалогаНаИмуществоОбороты.ПодразделениеОрганизации";
		
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ФормированиеТранспортногоНалогаОбороты.НалогВБюджетОборот) КАК Расходы,
		|	ФормированиеТранспортногоНалогаОбороты.ПодразделениеОрганизации КАК ФактическоеПодразделение,
		|	""Vehicle tax"" КАК ВидРасходов
		|ИЗ
		|	РегистрНакопления.ФормированиеТранспортногоНалога.Обороты(
		|			,
		|			,
		|			,
		|			НалоговыйПериод МЕЖДУ &НачалоПериода И &КонецПериода) КАК ФормированиеТранспортногоНалогаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ФормированиеТранспортногоНалогаОбороты.ПодразделениеОрганизации";
		
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
	КонецЕсли;
	Если Inventory Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(InventoryTransportationОстаткиИОбороты.СуммаРубНачальныйОстаток, 0)) КАК ТранспортНачальныйОстаток,
		|	СУММА(InventoryTransportationОстаткиИОбороты.СуммаРубПриход) КАК ТранспортПриход,
		|	СУММА(InventoryTransportationОстаткиИОбороты.СуммаРубРасход) КАК ТранспортРасход,
		|	СУММА(InventoryTransportationОстаткиИОбороты.СуммаРубКонечныйОстаток) КАК ТранспортКонечныйОстаток,
		|	InventoryTransportationОстаткиИОбороты.TaxRegistration,
		|	InventoryTransportationОстаткиИОбороты.Сегмент
		|ПОМЕСТИТЬ Траспорт
		|ИЗ
		|	РегистрНакопления.InventoryTransportation.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , ДвиженияИГраницыПериода, ) КАК InventoryTransportationОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryTransportationОстаткиИОбороты.TaxRegistration,
		|	InventoryTransportationОстаткиИОбороты.Сегмент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА InventoryBatches.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА InventoryBatches.Sum
		|			ИНАЧЕ -InventoryBatches.Sum
		|		КОНЕЦ) КАК ИнвРасход,
		|	НАЧАЛОПЕРИОДА(InventoryBatches.FiscalPeriod, КВАРТАЛ) КАК Период,
		|	InventoryBatches.AU,
		|	InventoryBatches.AU.Segment КАК Сегмент,
		|	InventoryBatches.TaxRegistration,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ InventoryBatches.AU) КАК Строки
		|ПОМЕСТИТЬ ИнвенториРасход
		|ИЗ
		|	РегистрНакопления.InventoryBatches КАК InventoryBatches
		|ГДЕ
		|	InventoryBatches.Fiscal
		|	И InventoryBatches.FiscalPeriod МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryBatches.TaxRegistration,
		|	InventoryBatches.AU.Segment,
		|	InventoryBatches.AU,
		|	НАЧАЛОПЕРИОДА(InventoryBatches.FiscalPeriod, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнвенториРасход.TaxRegistration,
		|	ИнвенториРасход.Сегмент,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнвенториРасход.AU) КАК Строки
		|ПОМЕСТИТЬ ГруппИнвентори
		|ИЗ
		|	ИнвенториРасход КАК ИнвенториРасход
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвенториРасход.TaxRegistration,
		|	ИнвенториРасход.Сегмент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ИнвенториРасход.ИнвРасход, 0)) КАК ИнвенториРасход,
		|	СУММА(ЕСТЬNULL(ИнвенториРасход.ИнвРасход, 0) + ЕСТЬNULL(Траспорт.ТранспортРасход, 0) / ГруппИнвентори.Строки) КАК РасходВсего,
		|	ИнвенториРасход.TaxRegistration,
		|	ИнвенториРасход.Сегмент,
		|	ИнвенториРасход.AU
		|ПОМЕСТИТЬ ТаблицаБезОкругленияПроцента
		|ИЗ
		|	ИнвенториРасход КАК ИнвенториРасход
		|		ЛЕВОЕ СОЕДИНЕНИЕ Траспорт КАК Траспорт
		|		ПО ИнвенториРасход.TaxRegistration = Траспорт.TaxRegistration
		|			И ИнвенториРасход.Сегмент = Траспорт.Сегмент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппИнвентори КАК ГруппИнвентори
		|		ПО ИнвенториРасход.TaxRegistration = ГруппИнвентори.TaxRegistration
		|			И ИнвенториРасход.Сегмент = ГруппИнвентори.Сегмент
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвенториРасход.TaxRegistration,
		|	ИнвенториРасход.Сегмент,
		|	ИнвенториРасход.AU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаБезОкругленияПроцента.РасходВсего) КАК Расходы,
		|	ТаблицаБезОкругленияПроцента.TaxRegistration КАК ФактическоеПодразделение,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU,
		|	""REDA products"" КАК ВидРасходов
		|ИЗ
		|	ТаблицаБезОкругленияПроцента КАК ТаблицаБезОкругленияПроцента
		|ГДЕ
		|	ТаблицаБезОкругленияПроцента.Сегмент В(&ALS)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ТаблицаБезОкругленияПроцента.РасходВсего),
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU,
		|	""Other cost of sales""
		|ИЗ
		|	ТаблицаБезОкругленияПроцента КАК ТаблицаБезОкругленияПроцента
		|ГДЕ
		|	ТаблицаБезОкругленияПроцента.Сегмент В(&CPS)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ТаблицаБезОкругленияПроцента.РасходВсего),
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU,
		|	""Chemicals""
		|ИЗ
		|	ТаблицаБезОкругленияПроцента КАК ТаблицаБезОкругленияПроцента
		|ГДЕ
		|	ТаблицаБезОкругленияПроцента.Сегмент В(&WISWSV)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ТаблицаБезОкругленияПроцента.РасходВсего),
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU,
		|	""Explosives""
		|ИЗ
		|	ТаблицаБезОкругленияПроцента КАК ТаблицаБезОкругленияПроцента
		|ГДЕ
		|	ТаблицаБезОкругленияПроцента.Сегмент В(&REWWTT)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаБезОкругленияПроцента.TaxRegistration,
		|	ТаблицаБезОкругленияПроцента.Сегмент,
		|	ТаблицаБезОкругленияПроцента.AU";
		
		Запрос.УстановитьПараметр("ALS", Справочники.Сегменты.НайтиПоКоду("ALS"));
		Запрос.УстановитьПараметр("CPS", Справочники.Сегменты.НайтиПоКоду("CPS"));
		REWWTT = Новый Массив(2);
		REWWTT.Добавить(Справочники.Сегменты.НайтиПоКоду("REW"));
		REWWTT.Добавить(Справочники.Сегменты.НайтиПоКоду("WTT"));
		Запрос.УстановитьПараметр("REWWTT", REWWTT);
		WISWSV = Новый Массив(2);
		WISWSV.Добавить(Справочники.Сегменты.НайтиПоКоду("WIS"));
		WISWSV.Добавить(Справочники.Сегменты.НайтиПоКоду("WSV"));
		Запрос.УстановитьПараметр("WISWSV", WISWSV);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
	КонецЕсли;
	Если MS Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр
		|	КОНЕЦ КАК AU,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU.TaxRegistration
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр.TaxRegistration
		|	КОНЕЦ КАК ФактическоеПодразделение,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson КАК AccountLawson,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU.Segment
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр.Segment
		|	КОНЕЦ КАК Сегмент,
		|	СУММА(MaterialsAndSuppliesОбороты.FiscalSumРасход) КАК Расходы,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА ""M&S local""
		|		ИНАЧЕ ""M&S import""
		|	КОНЕЦ КАК ВидРасходов,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.ItemDescription КАК ItemDescription,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Наименование КАК AccountDesc,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.Номер КАК GltObjId,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.Urn КАК URN,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.ApInvoice КАК ApInvoice,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.VendorVname КАК VendorName,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.PoNumber КАК PoNumber,
		|	ВЫБОР
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель
		|	КОНЕЦ КАК MgmtNIS_BLSummaryAcct,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.FiscalType КАК FiscalType
		|ИЗ
		|	РегистрНакопления.MaterialsAndSupplies.Обороты(&НачалоПериода, &КонецПериода, , ) КАК MaterialsAndSuppliesОбороты
		|ГДЕ
		|	MaterialsAndSuppliesОбороты.FiscalSumРасход <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU.TaxRegistration
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр.TaxRegistration
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AU.Segment
		|		ИНАЧЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.КостЦентр.Segment
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП ССЫЛКА Документ.ПроводкаDSS
		|			ТОГДА ""M&S local""
		|		ИНАЧЕ ""M&S import""
		|	КОНЕЦ,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.ItemDescription,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Наименование,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.Номер,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.Urn,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.ApInvoice,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.VendorVname,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.PoNumber,
		|	ВЫБОР
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель.Родитель
		|		КОГДА НЕ MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
		|			ТОГДА MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.AccountLawson.Родитель
		|	КОНЕЦ,
		|	MaterialsAndSuppliesОбороты.ПроводкаДеталейСКП.FiscalType";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для каждого текСтр из Объект.Распределение Цикл
		
			Если текСтр.Способ.РучноеОпределениеСуммы Тогда
				
				таблицаДанныхПоСпособу = Справочники.СпособыРаспределенияРасходов.ВыбратьДанныеПоАУ(текСтр.Способ, РезультатЗапроса);
				Для каждого текСтрокаТаблицыДанных из таблицаДанныхПоСпособу Цикл
					
					новСтр = Объект.РаспределениеРучное.Добавить();
					ЗаполнитьЗначенияСвойств(новСтр, текСтрокаТаблицыДанных);
					новСтр.Способ = текСтр.Способ;
					
				КонецЦикла;
				
			КонецЕсли;			
			
		КонецЦикла;
	
		РезультатЗапроса.СВернуть("ВидРасходов, AccountLawson, ФактическоеПодразделение, AU, Сегмент, FiscalType", "Расходы");
		РезультатЗапроса.Колонки.Добавить("СтрокаТВ");
		
		// нужно дозаполнить колонку СтрокаТВ для M&S
		ТаблицаФильтр = РезультатЗапроса.Скопировать(, "AccountLawson, FiscalType");
		ТаблицаФильтр.Свернуть("AccountLawson, FiscalType");
		
		ЗапросМС = Новый Запрос;
		ЗапросМС.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.AccountLawson,
		|	Таблица.FiscalType
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиТВТЧ.Ссылка,
		|	СтрокиТВТЧ.AccountLawson,
		|	СтрокиТВТЧ.FiscalType
		|ИЗ
		|	Справочник.СтрокиТВ.ТЧ КАК СтрокиТВТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО СтрокиТВТЧ.AccountLawson = Фильтр.AccountLawson
		|			И СтрокиТВТЧ.FiscalType = Фильтр.FiscalType
		|			И (НЕ СтрокиТВТЧ.Ссылка.ПометкаУдаления)";
		
		ЗапросМС.УстановитьПараметр("Таблица", ТаблицаФильтр);
		
		РезультатЗапросаМС = ЗапросМС.Выполнить().Выбрать();
		
		Пока РезультатЗапросаМС.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(РезультатЗапросаМС.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			строкиПоиска = РезультатЗапроса.НайтиСтроки(Новый Структура("AccountLawson, FiscalType", РезультатЗапросаМС.AccountLawson, РезультатЗапросаМС.FiscalType));	
			
			Для каждого текСтрокаПоиска из строкиПоиска Цикл
				
				текСтрокаПоиска.СтрокаТВ = РезультатЗапросаМС.Ссылка;
				
			КонецЦикла;
			
		КонецЦикла;
		 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
		
	КонецЕсли;
	Если Inventory Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	InventoryКорректировкаGoods.Ссылка КАК Ссылка,
		|	InventoryКорректировкаGoods.AU,
		|	InventoryКорректировкаGoods.Reference,
		|	InventoryКорректировкаGoods.Batch,
		|	СУММА(InventoryКорректировкаGoods.ManagementSum) КАК ManagementSum
		|ПОМЕСТИТЬ СписокСтрокСписаний
		|ИЗ
		|	Документ.InventoryКорректировка.Goods КАК InventoryКорректировкаGoods
		|ГДЕ
		|	InventoryКорректировкаGoods.Ссылка.Проведен
		|	И InventoryКорректировкаGoods.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryКорректировкаGoods.Ссылка,
		|	InventoryКорректировкаGoods.Reference,
		|	InventoryКорректировкаGoods.Batch,
		|	InventoryКорректировкаGoods.AU
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatches.AU,
		|	InventoryBatches.Batch,
		|	InventoryBatches.Регистратор,
		|	InventoryBatches.ВидДвижения,
		|	СУММА(InventoryBatches.Quantity) КАК Quantity,
		|	СУММА(InventoryBatches.Sum) КАК Sum,
		|	InventoryBatches.Период,
		|	InventoryBatches.TaxRegistration
		|ПОМЕСТИТЬ InventoryBatchesСвернутый
		|ИЗ
		|	РегистрНакопления.InventoryBatches КАК InventoryBatches
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryBatches.AU,
		|	InventoryBatches.Batch,
		|	InventoryBatches.Регистратор,
		|	InventoryBatches.ВидДвижения,
		|	InventoryBatches.Период,
		|	InventoryBatches.TaxRegistration
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatchesСвернутый.AU.Сегмент.Родитель.Родитель КАК Segment,
		|	InventoryBatchesСвернутый.TaxRegistration КАК TaxRegistration,
		|	InventoryBatchesСвернутый.AU,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryBatchesСвернутый.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -InventoryBatchesСвернутый.Sum
		|			ИНАЧЕ InventoryBatchesСвернутый.Sum
		|		КОНЕЦ) КАК SumРасход,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryBatchesСвернутый.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -InventoryBatchesСвернутый.Sum
		|			ИНАЧЕ InventoryBatchesСвернутый.Sum
		|		КОНЕЦ) КАК SumСписание,
		|	СписокСтрокСписаний.Reference КАК Reference,
		|	СУММА(СписокСтрокСписаний.ManagementSum) КАК ManagementSum
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	СписокСтрокСписаний КАК СписокСтрокСписаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ InventoryBatchesСвернутый КАК InventoryBatchesСвернутый
		|		ПО (InventoryBatchesСвернутый.Регистратор = СписокСтрокСписаний.Ссылка)
		|			И (InventoryBatchesСвернутый.AU = СписокСтрокСписаний.AU)
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокСтрокСписаний.Reference,
		|	InventoryBatchesСвернутый.AU.Сегмент.Родитель.Родитель,
		|	InventoryBatchesСвернутый.AU,
		|	InventoryBatchesСвернутый.TaxRegistration
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.Segment КАК Сегмент,
		|	ИтоговаяТаблица.TaxRegistration КАК ФактическоеПодразделение,
		|	ИтоговаяТаблица.AU,
		|	ИтоговаяТаблица.SumРасход КАК Расходы,
		|	""Inventory Adjustment"" КАК ВидРасходов
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|ГДЕ
		|	ИтоговаяТаблица.Reference В(&Reference)
		|	И ИтоговаяТаблица.SumРасход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	TaxRegistration";
		
		Reference = Новый Массив;
		Reference.Добавить(Справочники.КомментарииКорректировок.НайтиПоНаименованию("reclassification to Inventory"));
		Reference.Добавить(Справочники.КомментарииКорректировок.НайтиПоНаименованию("Return From Sales"));
		Reference.Добавить(Справочники.КомментарииКорректировок.НайтиПоНаименованию("Returns"));
		Reference.Добавить(Справочники.КомментарииКорректировок.НайтиПоНаименованию("Returns from Sales"));
		Reference.Добавить(Справочники.КомментарииКорректировок.НайтиПоНаименованию("Physical Count"));
		
		Запрос.УстановитьПараметр("Reference", Reference);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, Загрузка);
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	МатериальныеАктивыОбороты.ПроводкаДеталейСКП
	//	|ПОМЕСТИТЬ Помойка
	//	|ИЗ
	//	|	РегистрНакопления.МатериальныеАктивы.Обороты(&НачалоПериода, &КонецПериода, , ) КАК МатериальныеАктивыОбороты
	//	|ГДЕ
	//	|	МатериальныеАктивыОбороты.СуммаПриход <> 0
	//	|;
	//	|
	//	|ВЫБРАТЬ
	//	|	ПроводкаDSSДок.AU,
	//	|	ПроводкаDSSДок.LegalEntity,
	//	|	ПроводкаDSSДок.AccountLawson,
	//	|	ПроводкаDSSДок.AU.Сегмент,
	//	|	ПроводкаDSSДок.TranAmount
	//	|ИЗ
	//	|	Документ.ПроводкаDSS КАК ПроводкаDSSДок
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеИмпортаПоЗакрытиюПоставки.DSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиDSS
	//	|		ПО (РаспределениеИмпортаПоЗакрытиюПоставкиDSS.ПроводкаDSSСКП = ПроводкаDSSДок.Ссылка)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеИмпортаПоЗакрытиюПоставки.СопоставлениеInvoiceLinesИDSS КАК РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS
	//	|		ПО ПроводкаDSSДок.Ссылка = РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Помойка КАК Помойка
	//	|		ПО (Помойка.ПроводкаДеталейСКП = ПроводкаDSSДок.Ссылка)
	//	|ГДЕ
	//	|	ПроводкаDSSДок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//	|	И ПроводкаDSSДок.System = ""AP""
	//	|	И (ПроводкаDSSДок.SourceCode = ""AD""
	//	|			ИЛИ ПроводкаDSSДок.SourceCode = ""XC"")
	//	|	И ПроводкаDSSДок.FiscalType <> &APDVATSTD
	//	|	И ПроводкаDSSДок.FiscalType <> &APDVATOTH
	//	|	И ПроводкаDSSДок.Документ ССЫЛКА Документ.СчетКнигиПокупок
	//	|	И ПроводкаDSSДок.Документ <> ЗНАЧЕНИЕ(Документ.СчетКнигиПокупок.ПустаяСсылка)
	//	|	И РаспределениеИмпортаПоЗакрытиюПоставкиDSS.ПроводкаDSSСКП ЕСТЬ NULL 
	//	|	И РаспределениеИмпортаПоЗакрытиюПоставкиСопоставлениеInvoiceLinesИDSS.ПроводкаDSSСКП ЕСТЬ NULL 
	//	|	И Помойка.ПроводкаДеталейСКП ЕСТЬ NULL 
	//	|	И ПроводкаDSSДок.Документ.ВключатьВКнигуПокупок";
	//
	//Запрос.УстановитьПараметр("APDVATOTH", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APDVATOTH"));
	//Запрос.УстановитьПараметр("APDVATSTD", Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APDVATSTD"));
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Таблица = РезультатЗапроса.Выгрузить();
	//Таблица.Свернуть("AU, ФактическоеПодразделение, AccountLawson, Сегмент", "Расходы");
	ПараметрыОтбора = Новый СТруктура("Расходы", 0);
	НулевыеСтроки = Загрузка.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Стр Из НулевыеСтроки Цикл
		Загрузка.Удалить(Стр);
	КонецЦикла;	
	Объект.Загрузка.Загрузить(Загрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСтрокТВ(Команда)
	
	// удалим данные строк ТБ в распределении по способам т.к. могут быть еще и данные M&S
	массивУдаляемых = Новый Массив;
	Для каждого текСтр из Объект.РаспределениеРучное Цикл
		если ЗначениеЗаполнено(текСтр.Способ) и ЗначениеЗаполнено(текСтр.СтрокаТВ) Тогда
			массивУдаляемых.Добавить(текСтр);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текЭлемент из массивУдаляемых Цикл
		
		Объект.РаспределениеРучное.Удалить(текЭлемент);	
		
	КонецЦикла;
	
	ЗаполнитьДанныеСтрокТВНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокТВНаСервере()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("AP##FAFM"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APD3PFAFM"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APDIRFAFM"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("FA cost"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APD3IFAFM"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APD3PFAFM"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("APDICGOLD"));
	МассивТипов.Добавить(Справочники.СтатьиДоходовИРасходов.НайтиПоКоду("AP#NonDed"));
	
	ЗапросКРегистру = Новый Запрос;
	ЗапросКРегистру.УстановитьПараметр("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ЗапросКРегистру.УстановитьПараметр("КонецПериода", 		КонецКвартала(Объект.Дата));
	ЗапросКРегистру.УстановитьПараметр("ЗапрещенныеТипы", 	МассивТипов);
	ЗапросКРегистру.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТВТЧ.AccountLawson,
	|	СтрокиТВТЧ.FiscalType,
	|	СтрокиТВТЧ.Описание,
	|	СтрокиТВТЧ.Ссылка.Наименование,
	|	СтрокиТВТЧ.Ссылка КАК СтрокаТБ
	|ПОМЕСТИТЬ СтрокиТБ
	|ИЗ
	|	Справочник.СтрокиТВ.ТЧ КАК СтрокиТВТЧ
	|ГДЕ
	|	НЕ(СтрокиТВТЧ.AccountLawson = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|				И СтрокиТВТЧ.FiscalType = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка))
	|	И НЕ СтрокиТВТЧ.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПроводкиDSSОбщиеОбороты.RubAmountОборот) КАК Расходы,
	|	СтрокиТБ.СтрокаТБ КАК СтрокаТВ,
	|	СтрокиТБ.AccountLawson,
	|	СтрокиТБ.FiscalType,
	|	ПроводкиDSSОбщиеОбороты.AU,
	|	ПроводкиDSSОбщиеОбороты.AU.TaxRegistration КАК ФактическоеПодразделение,
	|	ПроводкиDSSОбщиеОбороты.AU.Сегмент КАК Сегмент,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.ItemDescription КАК ItemDescription,
	|	ПроводкиDSSОбщиеОбороты.AccountLawson.Наименование КАК AccountDesc,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.Номер КАК GltObjId,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.Urn КАК URN,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.ApInvoice КАК ApInvoice,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.VendorVname КАК VendorName,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.PoNumber КАК PoNumber,
	|	ВЫБОР
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель
	|	КОНЕЦ КАК MgmtNIS_BLSummaryAcct
	|ИЗ
	|	РегистрНакопления.ПроводкиDSSОбщие.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			(AccountLawson, FiscalType) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Т.AccountLawson,
	|						Т.FiscalType
	|					ИЗ
	|						СтрокиТБ КАК Т)
	|				И НЕ FiscalType В (&ЗапрещенныеТипы)) КАК ПроводкиDSSОбщиеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиТБ КАК СтрокиТБ
	|		ПО ПроводкиDSSОбщиеОбороты.AccountLawson = СтрокиТБ.AccountLawson
	|			И ПроводкиDSSОбщиеОбороты.FiscalType = СтрокиТБ.FiscalType
	|ГДЕ
	|	НЕ ПроводкиDSSОбщиеОбороты.Регистратор.Deferred
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиТБ.СтрокаТБ,
	|	СтрокиТБ.AccountLawson,
	|	СтрокиТБ.FiscalType,
	|	ПроводкиDSSОбщиеОбороты.AU,
	|	ПроводкиDSSОбщиеОбороты.AU.TaxRegistration,
	|	ПроводкиDSSОбщиеОбороты.AU.Сегмент,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.ItemDescription,
	|	ПроводкиDSSОбщиеОбороты.AccountLawson.Наименование,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.Номер,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.Urn,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.ApInvoice,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.VendorVname,
	|	ПроводкиDSSОбщиеОбороты.Регистратор.PoNumber,
	|	ВЫБОР
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель.Родитель
	|		КОГДА НЕ ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Lawson.ПустаяСсылка)
	|			ТОГДА ПроводкиDSSОбщиеОбороты.AccountLawson.Родитель
	|	КОНЕЦ";
	
	РезультатРегистра = ЗапросКРегистру.Выполнить();
	
	Если РезультатРегистра.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДанныеСтрокТВ.Очистить();
	
	РезультатТаблица = РезультатРегистра.Выгрузить();
	
	Для каждого текСтр из Объект.Распределение Цикл
		
		Если текСтр.Способ.РучноеОпределениеСуммы Тогда
			
			таблицаДанныхПоСпособу = Справочники.СпособыРаспределенияРасходов.ВыбратьДанныеПоАУ(текСтр.Способ, РезультатТаблица);
			Для каждого текСтрокаТаблицыДанных из таблицаДанныхПоСпособу Цикл
				
				новСтр = Объект.РаспределениеРучное.Добавить();
				ЗаполнитьЗначенияСвойств(новСтр, текСтрокаТаблицыДанных);
				новСтр.Способ = текСтр.Способ;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	РезультатТаблица.СВернуть("СтрокаТВ, AccountLawson, ФактическоеПодразделение, AU, FiscalType, Сегмент", "Расходы");
	
	Объект.ДанныеСтрокТВ.Загрузить(РезультатТаблица);
	
	// теперь нужно собрать данные для тех способов, которые с ручным фильтром
	
	
 //   ВыборкаРегистра = РезультатРегистра.Выбрать();
 //   
 //   Если ВыборкаРегистра.Следующий()Тогда
 //   	Если ЗначениеЗаполнено(ВыборкаРегистра.RubAmountОборот) Тогда
 //   		ОбщаяСумма = ОбщаяСумма + ВыборкаРегистра.RubAmountОборот;	
 //   		
 //   		РегламентированнаяОтчетностьДляСовместимости._ДобавитьСтрокуРасшифровки(ЭтаФорма, Ячейка.Имя,
 //   		"Строка "	+ ИденСтроки						+ " "			+ ВыборкаСправочника.Наименование, "+", 
 //   		"Счет: " 	+ ВыборкаСправочника.AccountLawson 	+ Символы.ПС 	+
 //   		"Тип: " 	+ ВыборкаСправочника.FiscalType 	+ Символы.ПС 	+ ВыборкаСправочника.Описание, ВыборкаРегистра.RubAmountОборот);      
 //   	КонецЕсли;
 //   КонецЕсли 
 //   
 //

 //   Ячейка.Значение = ОбщаяСумма;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасходыСмит(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогВыбораФайла.Заголовок					= "Выберите файлы с данными для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбораФайла.Фильтр                  	= "Файлы xls (*.xls)|*.xls|Файлы xlsx (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ПредварительныйПросмотр 	= Ложь;
	ДиалогВыбораФайла.Расширение				= "*.xlsx";	
	ДиалогВыбораФайла.ИндексФильтра				= 0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
			
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ПроизвестиЗагрузкуИзФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТЗИзФайла(ПолноеИмяФайла)
	
	мИмяФайла = ОбщегоНазначения.ПолучитьИмяФайлаИзПолногоПути(ПолноеИмяФайла);
	
	//ТЗ_Эксель = SalesBook.ЗагрузитьТаблицуИзExcel(ПолноеИмяФайла, 	"SELECT 	
	//|		Location AS Организация,
	//|		TaxPeriod AS НалоговыйПериод, 
	//|		SUM(PSOB_Amt) AS Расходы,
	//|		Seg_Code AS  Seg_Code		
	//|
	//|FROM " + мИмяФайла +
	//" GROUP BY
	//|		Location, 
	//|		TaxPeriod,
	//|		Seg_Code");
	
	//ТЗ_Эксель = SalesBook.ЗагрузитьТаблицуИзExcel(ПолноеИмяФайла, 	"SELECT 	
	//|		mgmtcountry_desc AS Страна,
	//|		cost_center AS КостЦентр, 
	//|		SUM(local_amt) AS Расходы,
	//|		major AS  major,
	//|		minor AS  minor,
	//|		source AS  source,
	//|		category AS category, 
	//|		subsegment_code AS subsegment_code,
	//|		segment_code AS segment_code
	//|
	//|FROM " + мИмяФайла +
	//" GROUP BY
	//|		mgmtcountry_desc,
	//|		cost_center, 
	//|		major,
	//|		minor,
	//|		source,
	//|		category, 
	//|		subsegment_code,
	//|		segment_code");
	
	ТЗ_Эксель = Новый ТаблицаЗначений;
	
	ТЗ_Эксель.Колонки.Добавить("Страна");
	ТЗ_Эксель.Колонки.Добавить("КостЦентр");
	ТЗ_Эксель.Колонки.Добавить("Расходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТЗ_Эксель.Колонки.Добавить("major");
	ТЗ_Эксель.Колонки.Добавить("minor");
	ТЗ_Эксель.Колонки.Добавить("source");
	ТЗ_Эксель.Колонки.Добавить("category");
	ТЗ_Эксель.Колонки.Добавить("subsegment_code");
	ТЗ_Эксель.Колонки.Добавить("segment_code");
	
	Попытка	
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ПолноеИмяФайла);
		ExcelЛист = Excel.Sheets(1);
	Исключение
		Сообщить("Ошибка. Возможно, неверно указан номер листа книги Excel.");
		Возврат Неопределено;
	КонецПопытки;
	
	ActiveCell 	= Excel.ActiveCell.SpecialCells(11);
	RowCount 	= ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	
	Данные = ExcelЛист.UsedRange.Value.Выгрузить();
	
	Для Row = 1 По RowCount-1 Цикл
		
		стрТаблицы = ТЗ_Эксель.Добавить();
		
		//Для Column = 0 По ColumnCount-1 Цикл
		//	Значение = Данные[Column] [Row];
		//	// здесь код, который использует данное значение
		//	стрТаблицы.Установить(Column, Значение);
		//КонецЦикла;
		
		стрТаблицы.Установить(0, Данные[1][Row]);
		стрТаблицы.Установить(1, СтрЗаменить(Данные[10][Row], " ", ""));
		стрТаблицы.Установить(2, Данные[12][Row]);
		стрТаблицы.Установить(3, Данные[14][Row]);
		стрТаблицы.Установить(4, Данные[24][Row]);
		стрТаблицы.Установить(5, Данные[25][Row]);
		стрТаблицы.Установить(6, Данные[30][Row]);
		стрТаблицы.Установить(7, Данные[60][Row]);
		стрТаблицы.Установить(8, Данные[62][Row]);
		
	КонецЦикла;
	
	// закрываем файл
	Excel.DisplayAlerts = 0;
	Excel.quit();
	
	Возврат ТЗ_Эксель;
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция Миноры()
	
	массивРезультата = Новый Массив;
	
	массивРезультата.Добавить("");
	
	Возврат массивРезультата;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Мажоры()
	
	массивРезультата = Новый Массив;
	
	массивРезультата.Добавить("5102");
	массивРезультата.Добавить("5110");
	массивРезультата.Добавить("6130");
	массивРезультата.Добавить("6150");
	массивРезультата.Добавить("6180");
	массивРезультата.Добавить("6220");
	массивРезультата.Добавить("6251");
	массивРезультата.Добавить("6252");
	массивРезультата.Добавить("6640");
	массивРезультата.Добавить("6660");
	массивРезультата.Добавить("6680");
	массивРезультата.Добавить("7000");
	массивРезультата.Добавить("5100");
	массивРезультата.Добавить("5110");
	массивРезультата.Добавить("5112");
	массивРезультата.Добавить("5127");
	массивРезультата.Добавить("6120");
	массивРезультата.Добавить("6130");
	массивРезультата.Добавить("6150");
	массивРезультата.Добавить("6180");
	массивРезультата.Добавить("6220");
	массивРезультата.Добавить("6230");
	массивРезультата.Добавить("6640");
	массивРезультата.Добавить("6660");
	массивРезультата.Добавить("6664");
	массивРезультата.Добавить("6680");
	массивРезультата.Добавить("7000");
	массивРезультата.Добавить("8885");
	массивРезультата.Добавить("8100"); 
	
	Возврат массивРезультата;	
	
КонецФункции



&НаСервере
Процедура ЗаполнитьДокументДаннымиИзТаблицы(ТЗ)

	ТЗ.Колонки.Добавить("ФактическоеПодразделение");
	ТЗ.Колонки.Добавить("AU", Новый ОписаниеТипов("СправочникСсылка.КостЦентры"));
	ТЗ.Колонки.Добавить("Сегмент");
	
	таблицаАУ = ТЗ.Скопировать();
	таблицаАУ.Свернуть("КостЦентр, subsegment_code, segment_code, AU", "");
	
	//ТЗ_Эксель.Колонки.Добавить("Страна");
	//ТЗ_Эксель.Колонки.Добавить("КостЦентр");
	//ТЗ_Эксель.Колонки.Добавить("Расходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	//ТЗ_Эксель.Колонки.Добавить("major");
	//ТЗ_Эксель.Колонки.Добавить("minor");
	//ТЗ_Эксель.Колонки.Добавить("source");
	//ТЗ_Эксель.Колонки.Добавить("category");
	//ТЗ_Эксель.Колонки.Добавить("subsegment_code");
	//ТЗ_Эксель.Колонки.Добавить("segment_code");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КостЦентры.Ссылка
	|ИЗ
	|	Справочник.КостЦентры КАК КостЦентры
	|ГДЕ
	|	(КостЦентры.Код = &КодАУ
	|			ИЛИ КостЦентры.Код ПОДОБНО ""_"" + &КодАУ
	|				И НЕ КостЦентры.ПометкаУдаления
	|				И КостЦентры.Segment.Код = &КодСегмент)";
	
	Для Каждого строкаТЗ Из таблицаАУ Цикл
		
		Если СтрДлина(строкаТЗ.КостЦентр) = 5 Тогда
			строкаТЗ.КостЦентр = "0" + строкаТЗ.КостЦентр;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КодАУ", 			строкаТЗ.КостЦентр);
		Запрос.УстановитьПараметр("КодСегмент", 	строкаТЗ.segment_code);
		Запрос.УстановитьПараметр("КодСубСегмент", 	строкаТЗ.subsegment_code);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			строкаТЗ.AU = РезультатЗапроса.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	таблицаАУ.Индексы.Добавить("КостЦентр, subsegment_code, segment_code");
	
	Для каждого текСтрокаТЗ из ТЗ Цикл
		
		строкиПоиска = таблицаАУ.НайтиСтроки(Новый Структура("КостЦентр, subsegment_code, segment_code", текСтрокаТЗ.КостЦентр, текСтрокаТЗ.subsegment_code, текСтрокаТЗ.segment_code));
		Если строкиПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		текСтрокаТЗ.AU = строкиПоиска[0].AU;
		текСтрокаТЗ.ФактическоеПодразделение = текСтрокаТЗ.AU.TaxRegistration;
		
	КонецЦикла;
		
	//	//-> RG-Soft VIvanov 2015/02/18
	//	//СтрокаТЗ.AU = Справочники.КостЦентры.НайтиПоКоду(РегламентированнаяОтчетность.ДополнитьСтроку(СтрЗаменить(СтрокаТЗ.AU,Символы.НПП,""),7,"0"));
	//	СтрокаТЗ.AU = РГСофт.НайтиAU(Объект.Дата, РегламентированнаяОтчетность.ДополнитьСтроку(СтрЗаменить(СтрокаТЗ.AU,Символы.НПП,""),7,"0")); 
	//	//<- RG-Soft VIvanov
	//	СтрокаТЗ.AccountLawson = ПланыСчетов.Lawson.НайтиПоКоду(СтрЗаменить(СтрокаТЗ.AccountLawson,Символы.НПП,""));
	//	месяц = Месяц(Объект.Дата);
	//	Если СтрокаТЗ.месяц = "январь" Тогда
	//		месяц = 1;
	//	ИначеЕсли СтрокаТЗ.месяц = "февраль" Тогда
	//		месяц = 2;
	//	ИначеЕсли СтрокаТЗ.месяц = "март" Тогда
	//		месяц = 3;
	//	ИначеЕсли СтрокаТЗ.месяц = "апрель" Тогда
	//		месяц = 4;
	//	ИначеЕсли СтрокаТЗ.месяц = "май" Тогда
	//		месяц = 5;
	//	ИначеЕсли СтрокаТЗ.месяц = "июнь" Тогда
	//		месяц = 6;
	//	ИначеЕсли СтрокаТЗ.месяц = "июль" Тогда
	//		месяц = 7;
	//	ИначеЕсли СтрокаТЗ.месяц = "август" Тогда
	//		месяц = 8;
	//	ИначеЕсли СтрокаТЗ.месяц = "сентябрь" Тогда
	//		месяц = 9;
	//	ИначеЕсли СтрокаТЗ.месяц = "октябрь" Тогда
	//		месяц = 10;
	//	ИначеЕсли СтрокаТЗ.месяц = "ноябрь" Тогда
	//		месяц = 11;
	//	ИначеЕсли СтрокаТЗ.месяц = "декабрь" Тогда
	//		месяц = 12;
	//	КонецЕсли;
	//	СтрокаТЗ.месяц = ДобавитьМесяц(НачалоГода(Объект.Дата),Месяц-1);
	//	
	//	Если СтрокаТЗ.Организация = "SLI Astrakhan" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Астр_нов");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Moscow" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Москва");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Muravlenko" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Муравленко");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Nefteyugansk" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Нефтеюганс");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Nizhnevartovsk" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Нижневарт.");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Novy Urengoy" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Н. Уренгой");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Noyabrsk" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Ноябрьск");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Turukhansky" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Туруханск");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Tyumen" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Тюмень");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Usinsk" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Усинск");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Volgo-Ural" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Бузулук");
	//	ИначеЕсли СтрокаТЗ.Организация = "SLI Yuzhno-Sakhalinsk" Тогда
	//		СтрокаТЗ.ФактическоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Сахалин");
	//	КонецЕсли;
	//	
	// КонецЦикла;
	
	Объект.ДанныеСмит.Загрузить(ТЗ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуПериоду(Команда)
		
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОЗаписи", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Сохранение документа");
		Возврат; // выходим из процедуры т.к. обработка только после записи
	КонецЕсли;
	
	ЗаполнитьПоПредыдущемуПериодуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОЗаписи(Ответ, ДопПараметры) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ЗаполнитьПоПредыдущемуПериодуНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПредыдущемуПериодуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗагрузкаИРаспределениеРасходовРаспределение.Способ,
	|	СпособыРаспределенияРасходов.Ссылка КАК Существующий
	|ИЗ
	|	Документ.ЗагрузкаИРаспределениеРасходов.Распределение КАК ЗагрузкаИРаспределениеРасходовРаспределение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыРаспределенияРасходов КАК СпособыРаспределенияРасходов
	|		ПО ЗагрузкаИРаспределениеРасходовРаспределение.Способ.Наименование = СпособыРаспределенияРасходов.Наименование
	|			И (&Ссылка = СпособыРаспределенияРасходов.Документ)
	|			И (&Период = СпособыРаспределенияРасходов.Период)
	|ГДЕ
	|	ЗагрузкаИРаспределениеРасходовРаспределение.Ссылка <> &Ссылка
	|	И ЗагрузкаИРаспределениеРасходовРаспределение.Ссылка.Проведен
	|	И КОНЕЦПЕРИОДА(ЗагрузкаИРаспределениеРасходовРаспределение.Ссылка.Дата, КВАРТАЛ) = &ДатаПоиска";
	
	ДатаПоиска = НачалоКвартала(Объект.Дата) - 1;
	
	Запрос.УстановитьПараметр("Ссылка", 	Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаПоиска", ДатаПоиска);
	Запрос.УстановитьПараметр("Период", 	НачалоДня(КонецКвартала(Объект.Дата)));
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Распределение.Очистить();
	
	Выборка = Рез.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		стр = Объект.Распределение.Добавить();
		
		Если ЗначениеЗаполнено(Выборка.Существующий) Тогда
			стр.Способ = Выборка.Существующий;
		Иначе
			// копируем настройку
			Об = Выборка.Способ.ПолучитьОбъект();
			
			новОб = Об.Скопировать();
			новОб.Документ = Объект.Ссылка;
			новОб.Период   = КонецКвартала(Объект.Дата);
			новОб.Записать();
			
			стр.Способ = новОб.Ссылка;

		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////  ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПроизвестиЗагрузкуВидовНачисленийИзФайла(ПолноеИмяФайла)
	
	ТЗ = ПолучитьТЗВидовНачисленийИзФайла(ПолноеИмяФайла);
			
	ТабСНовымиВидамиНачислений = ПолучитьТаблицуДляЗаполненияТиповНачислений(ТЗ);
	
	Если ТабСНовымиВидамиНачислений.Количество() Тогда
		ПараметрыФормы = Новый Структура("ТабЗнач", ТабСНовымиВидамиНачислений);
		ОткрытьФорму("Документ.ЗагрузкаРасходовПоЗарплате.Форма.ФормаЗаполнения",ПараметрыФормы);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНачислений()
	
	ЗначениеВРеквизитФормы(ПолучитьТаблицуВидовНачислений(),"ВидыНачислений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуAU()
	
	//-> RG-Soft VIvanov 2015/02/18
	//ЗначениеВРеквизитФормы(ПолучитьТаблицуAU(),"СписокAU");
	ЗначениеВРеквизитФормы(ПолучитьТаблицуAU(Объект.Дата),"СписокAU");
	//<- RG-Soft VIvanov
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуВидовНачислений()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыНачислений.Наименование КАК ВидНачисления,
	                      |	ВидыНачислений.ТипНачисления
	                      |ИЗ
	                      |	Справочник.ВидыНачислений КАК ВидыНачислений");
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуAU(Дата)
	
	//-> RG-Soft VIvanov 2015/02/18
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	КостЦентры.Код
	//                      |ИЗ
	//                      |	Справочник.КостЦентры КАК КостЦентры");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СегментыКостЦентровСрезПоследних.Код
	                      |ИЗ
	                      |	РегистрСведений.СегментыКостЦентров.СрезПоследних(&Дата, ) КАК СегментыКостЦентровСрезПоследних");
	Запрос.УстановитьПараметр("Дата", Дата);
	//<- RG-Soft VIvanov
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
 Функция ПолучитьТЗВидовНачисленийИзФайла(ПолноеИмяФайла)
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Не найден Microsoft Excel.");
		Возврат Неопределено;
	КонецПопытки;

	Попытка
		Excel.WorkBooks.Open(ПолноеИмяФайла);
	Исключение
		Предупреждение("Excel не удалось открыть файл " + ПолноеИмяФайла);
		Возврат Неопределено;
	КонецПопытки;
	
	Лист = Excel.Workbooks(1).WorkSheets(1);;
	КолВоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;
	
	тзДанные = Новый ТаблицаЗначений;
	Для индС = 1 По КолВоКолонок Цикл
		тзДанные.Колонки.Добавить();		
	КонецЦикла;         
	
	индС = 4;	
	Состояние("Читаю файл Excel... строка " + индС);
	текСтрокаТЗ = тзДанные.Добавить();
	Для индК = 1 По КолВоКолонок Цикл
		Ячейка = Лист.Cells(индС, индК);
		ЗначениеЯчейки = Ячейка.Value;
		текСтрокаТЗ[индК - 1] = ЗначениеЯчейки;
	КонецЦикла;
	
	Excel.Workbooks.Close();
	Excel.Application.Quit();
	
	Состояние("Обрабатываю...");
	//Получим заголовки таблицы и составим массив индексов колонок к удалению
	Если тзДанные.Количество() > 0 Тогда
		МассивИменКолонок = Новый Массив;
		СтрокаЗаголовков = тзДанные[0];
		ПроизвестиДобавление = Ложь;
		Для индК = 1 По КолВоКолонок Цикл
			ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]); 
			Если ЗаголовокКолонки = "Доходы в натуральной форме (Natural form incomes)" Тогда
				ПроизвестиДобавление = Ложь;
				Прервать;
			КонецЕсли;
			Если ПроизвестиДобавление Тогда
				МассивИменКолонок.Добавить(ЗаголовокКолонки);
			КонецЕсли; 
			Если ЗаголовокКолонки = "Всего начислено (Total Gross)" Тогда
				ПроизвестиДобавление = Истина;
			КонецЕсли;
		КонецЦикла; 
		//Пока ИндК < КолВоКолонок Цикл
		//	ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]); 
		//	Если ЗаголовокКолонки = "Конечное сальдо (Closing Balance)" Тогда
		//		ПроизвестиДобавление = Ложь;
		//	КонецЕсли;
		//	Если ПроизвестиДобавление Тогда
		//		МассивИменКолонок.Добавить(ЗаголовокКолонки);
		//	КонецЕсли; 
		//	Если ЗаголовокКолонки = "Налоги (Tax)" Тогда
		//		ПроизвестиДобавление = Истина;
		//	КонецЕсли;
		//	ИндК = ИндК + 1;
		//КонецЦикла; 
		МассивИндексовКолонокКУдалению = Новый Массив;

		 Для индК = 1 По КолВоКолонок Цикл
			 ЗаголовокКолонки = СокрЛП(СтрокаЗаголовков[индК-1]);
			 Если МассивИменКолонок.Найти(ЗаголовокКолонки) = Неопределено Тогда
				 МассивИндексовКолонокКУдалению.Добавить(индК-1);
			 КонецЕсли; 
		 КонецЦикла;
		 КоличествоЭлементовВМассивеКУдалению = МассивИндексовКолонокКУдалению.Количество();
		 Для i = 1 По КоличествоЭлементовВМассивеКУдалению Цикл
		     тзДанные.Колонки.Удалить(МассивИндексовКолонокКУдалению[КоличествоЭлементовВМассивеКУдалению-i]);
		 КонецЦикла; 
	 Иначе
		 Сообщить("Файл не содержит записей.");
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат тзДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДляЗаполненияТиповНачислений(ТЗ)
	
	Документ = РеквизитФормыВЗначение("Объект");
	ТабСНовымиВидамиНачислений = Документ.ВернутьВидыНачислений(ТЗ);
	
	Возврат ТабСНовымиВидамиНачислений;
	
	
	//ЗначениеВРеквизитФормы(Документ, "Объект");
	                                        
	//СтрокаЗаголовков = ТЗ[0];
	//КолВоКолонок = ТЗ.Колонки.Количество();
	//ТабЗаголовков = Новый ТаблицаЗначений;
	//ТабЗаголовков.Колонки.Добавить("Заголовок", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	//Для индК = 1 По КолВоКолонок Цикл
	//	ЗаголовокКолонки = СтрокаЗаголовков[индК-1]; 
	//	НоваяСтрока = ТабЗаголовков.Добавить();
	//	НоваяСтрока.Заголовок = ЗаголовокКолонки;
	//	Сообщить(НоваяСтрока.Заголовок);
	//КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ                                           
	//	|	ТабЗаголовков.Заголовок 
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	&ТабЗаголовков КАК ТабЗаголовков
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.Заголовок КАК ВидРасчета
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНачислений КАК ВидыНачислений
	//	|		ПО ВТ.Заголовок = ВидыНачислений.Наименование
	//	|ГДЕ
	//	|	ВидыНачислений.Ссылка ЕСТЬ NULL ";
	//	
	//Запрос.УстановитьПараметр("ТабЗаголовков", ТабЗаголовков);	

	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Сообщить(Выборка.ВидРасчета);
	//КонецЦикла; 
	////Объект.ВидыНачислений.Загрузить(Результат.Выгрузить());
	
КонецФункции
                                                           
&НаКлиенте
Процедура ПроизвестиЗагрузкуИзФайла(ПолноеИмяФайла)
	
	ТЗ = ПолучитьТЗИзФайла(ПолноеИмяФайла);
			
	ЗаполнитьДокументДаннымиИзТаблицы(ТЗ);

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриАктивизацииСтроки(Элемент)
	
	ТД = Элементы.Распределение.ТекущиеДанные; 
	
	Если Не ТД  = Неопределено Тогда 
		
		//Элементы.РаспределениеРучное.ОтборСтрок = Новый ФиксированнаяСтруктура("Способ", ПредопределенноеЗначение("Справочник.СпособыРаспределенияРасходов.ПустаяСсылка"));   
		
		Если ФормироватьОтчетПоРезультатуРаспределения Тогда
			
			ВывестиМакет(ТД.Способ);
			
		КонецЕсли;
		
		//Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТД.Способ, "РучноеОпределениеСуммы") Тогда
		
			Элементы.РаспределениеРучное.ОтборСтрок = Новый ФиксированнаяСтруктура("Способ", ТД.Способ);   
		
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакет(Способ)
	
	Результат.Очистить();
	
	РезультатРаспределения = ПолучитьРезультатРаспределения(Способ);
	
	СхемаКомпоновкиДанных = Документы.ЗагрузкаИРаспределениеРасходов.ПолучитьМакет("СхемаДляРаспределения");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РезультатРаспределения", РезультатРаспределения);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИсточникНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатРаспределения(Способ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AU,
	                      |	СУММА(СпособыРаспределенияРасходовРаспределяемыеAU.Расходы) КАК Расходы,
	                      |	СУММА(СпособыРаспределенияРасходовРаспределяемыеAU.ПрочиеРасходы) КАК ПрочиеРасходы
	                      |ПОМЕСТИТЬ РасходыР
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.РаспределяемыеЗатраты КАК СпособыРаспределенияРасходовРаспределяемыеAU
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СпособыРаспределенияРасходовРаспределяемыеAU.AU
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.НалоговаяРегистрация,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.База,
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Доля
	                      |ПОМЕСТИТЬ БазаР
	                      |ИЗ
	                      |	Справочник.СпособыРаспределенияРасходов.БазаРаспределения КАК СпособыРаспределенияРасходовБазаРаспределения
	                      |ГДЕ
	                      |	СпособыРаспределенияРасходовБазаРаспределения.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БазаР.НалоговаяРегистрация,
	                      |	РасходыР.Расходы * БазаР.Доля КАК Расходы,
	                      |	РасходыР.ПрочиеРасходы * БазаР.Доля КАК ПрочиеРасходы,
	                      |	РасходыР.AU,
	                      |	РасходыР.Расходы КАК ИсходнаяСумма,
	                      |	БазаР.Доля как Доля
	                      |ИЗ
	                      |	БазаР КАК БазаР,
	                      |	РасходыР КАК РасходыР");
	Запрос.УстановитьПараметр("Ссылка",Способ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОбновитьОтчетИтог()
	
	РезультатИтог.Очистить();
	
	СхемаКомпоновкиДанных = Документы.ЗагрузкаИРаспределениеРасходов.ПолучитьМакет("СхемаРезультат");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("РезультатРаспределения", Объект.Затраты.Выгрузить());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(РезультатИтог);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИсточникНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроекКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиТВ(Команда)
	
	ТД = Элементы.ДанныеСтрокТВ.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	строкиТЧ = Объект.ДанныеСтрокТВ.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
	
	массивСчетов 	= Новый Массив;
	массивАУ		= Новый Массив;
	массивFiscal	= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson, AU, FiscalType");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	Для каждого текСтр из строкиТЧ Цикл 
		
		Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
			массивСчетов.Добавить(текСтр.AccountLawson);
		КонецЕсли;
		
		Если массивАУ.Найти(текСтр.AU) = Неопределено Тогда
			массивАУ.Добавить(текСтр.AU);
		КонецЕсли;
		
		Если массивFiscal.Найти(текСтр.FiscalType) = Неопределено Тогда
			массивFiscal.Добавить(текСтр.FiscalType);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасшифровки.FiscalType = массивFiscal;
	ПараметрыРасшифровки.AccountLawson = массивСчетов;
	ПараметрыРасшифровки.AU = массивАУ;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиТБ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределяемыеРасходыПоAU(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаЗаписиДокумента", ЭтаФорма, Новый Структура("Тип", "Заполнение по AU"));
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Заполнение расходов по AU");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаспределяемыеРасходыПоAUНаСервере();
	
	ПоказатьПредупреждение(, "Заполнение распределяемых расходов завершено!", 5);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВопросаЗаписиДокумента(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДопПараметры.Тип = "Заполнение по AU" Тогда
		
		ЗаполнитьРаспределяемыеРасходыПоAUНаСервере();
		
	Иначе
		
		ЗаполнитьРаспределяемыеРасходыПоСегментуНаСервере();
		
	КонецЕсли;
	
	ПоказатьПредупреждение(, "Заполнение распределяемых расходов завершено!", 5);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРаспределяемыеРасходыПоAUНаСервере(Способ = NULL)
	
	Если НЕ Способ = NULL Тогда
		
		Справочники.СпособыРаспределенияРасходов.ЗаполнитьРаспределяемыеРасходыПоAU(Способ);
		
	Иначе
	
		Для каждого текСтрока из Объект.Распределение Цикл
			
			Справочники.СпособыРаспределенияРасходов.ЗаполнитьРаспределяемыеРасходыПоAU(текСтрока.Способ);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределяемыеРасходыПоСегментуНаСервере()
	
	Для каждого текСтрока из Объект.Распределение Цикл
		
		Справочники.СпособыРаспределенияРасходов.ЗаполнитьРаспределяемыеРасходыПоСегменту(текСтрока.Способ);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределяемыеРасходыПоСегментам(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаЗаписиДокумента", ЭтаФорма, Новый Структура("Тип", "Заполнение по сегментам"));
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Заполнение расходов по AU");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаспределяемыеРасходыПоСегментуНаСервере();
	
	ПоказатьПредупреждение(, "Заполнение распределяемых расходов завершено!", 5);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиМС(Команда)
	
	//ТД = Элементы.Загрузка.ТекущиеДанные;
	//Если ТД = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ПараметрыРасшифровки = Новый Структура("AccountLawson, AU, FiscalType");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	//
	//ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиМЯ");
	//ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	//ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	//
	//ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
	ТД = Элементы.Загрузка.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ТД.ВидРасходов, "M&S") = 0 Тогда
		
		Сообщить("Данная расшифровка только для M&S");
		Возврат;
		
	КонецЕсли;
	
	массивСчетов 	= Новый Массив;
	массивАУ		= Новый Массив;
	массивFiscal	= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson, AU, FiscalType");
	
	Если ЗначениеЗаполнено(ТД.СтрокаТВ) Тогда
	
		строкиТЧ = Объект.Загрузка.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
		
		//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
		Для каждого текСтр из строкиТЧ Цикл 
			
			Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
				массивСчетов.Добавить(текСтр.AccountLawson);		
			КонецЕсли;
			
			Если массивАУ.Найти(текСтр.AU) = Неопределено Тогда
				массивАУ.Добавить(текСтр.AU);
			КонецЕсли;
			
			Если массивFiscal.Найти(текСтр.FiscalType) = Неопределено Тогда
				массивFiscal.Добавить(текСтр.FiscalType);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		массивСчетов.Добавить(ТД.AccountLawson);
		массивАУ.Добавить(ТД.AU);
		массивFiscal.Добавить(ТД.FiscalType);
		
	КонецЕсли;
	
	ПараметрыРасшифровки.FiscalType 	= массивFiscal;
	ПараметрыРасшифровки.AccountLawson 	= массивСчетов;
	ПараметрыРасшифровки.AU 			= массивАУ;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиМЯ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиТВ1(Команда)
	
	ТД = Элементы.ДанныеСтрокТВ.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПараметрыРасшифровки = Новый Структура("AccountLawson, AU");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	
	строкиТЧ = Объект.ДанныеСтрокТВ.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
	
	массивСчетов 	= Новый Массив;
	массивАУ		= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson, AU");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	Для каждого текСтр из строкиТЧ Цикл 
		
		Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
			массивСчетов.Добавить(текСтр.AccountLawson);
		КонецЕсли;
		
		Если массивАУ.Найти(текСтр.AU) = Неопределено Тогда
			массивАУ.Добавить(текСтр.AU);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасшифровки.AccountLawson = массивСчетов;
	ПараметрыРасшифровки.AU = массивАУ;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиТБ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиТВ2(Команда)
	
	ТД = Элементы.ДанныеСтрокТВ.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПараметрыРасшифровки = Новый Структура("AccountLawson");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	
	строкиТЧ = Объект.ДанныеСтрокТВ.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
	
	массивСчетов 	= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson");
	//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
	Для каждого текСтр из строкиТЧ Цикл 
		
		Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
			массивСчетов.Добавить(текСтр.AccountLawson);
		КонецЕсли;
			
	КонецЦикла;
	
	ПараметрыРасшифровки.AccountLawson = массивСчетов;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиТБ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиТВ3(Команда)
	
	ТД = Элементы.ДанныеСтрокТВ.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//строкиТЧ = Объект.ДанныеСтрокТВ.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
	
	массивСчетов 	= Новый Массив;
	массивЛокаций	= Новый Массив;
	
	Если ЗначениеЗаполнено(ТД.AU) Тогда
		массивЛокаций.Добавить(ТД.AU.ПодразделениеОрганизации);
	КонецЕсли;
	
	массивСчетов.Добавить(ТД.AccountLawson);
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson, Локация");
	
	ПараметрыРасшифровки.AccountLawson  = массивСчетов;
	ПараметрыРасшифровки.Локация 		= массивЛокаций;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиТБ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенныеСтроки(Команда)
	
	Для каждого текВС из Элементы.РаспределениеРучное.ВыделенныеСтроки Цикл
		
		данныеСтроки = Элементы.РаспределениеРучное.ДанныеСтроки(текВС);
		
		Если данныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		данныеСтроки.Распределять = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуВыделенныхСтрок(Команда)
	
	Для каждого текВС из Элементы.РаспределениеРучное.ВыделенныеСтроки Цикл
		
		данныеСтроки = Элементы.РаспределениеРучное.ДанныеСтроки(текВС);
		
		Если данныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		данныеСтроки.Распределять = Ложь;
		
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого текСтр из Объект.РаспределениеРучное Цикл
		
		текСтр.Распределять = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для каждого текСтр из Объект.РаспределениеРучное Цикл
		
		текСтр.Распределять = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	Для каждого текСтр из Объект.РаспределениеРучное Цикл
		
		текСтр.Распределять = НЕ текСтр.Распределять;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределяемыеРасходыПоAUТекущая(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаЗаписиДокумента", ЭтаФорма, Новый Структура("Тип", "Заполнение по AU"));
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Заполнение расходов по AU");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаспределяемыеРасходыПоAUНаСервере(Элементы.Распределение.ТекущиеДанные.Способ);
	
	ПоказатьПредупреждение(, "Заполнение распределяемых расходов завершено!", 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьОтчетПоРезультатуРаспределенияПриИзменении(Элемент)
	РаспределениеПриАктивизацииСтроки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРучноеПриАктивизацииСтроки(Элемент)
	
	ДанныеПоВыделенным = "";
	СуммаВыделенных = 0;
	Для каждого текСтр из Элементы.РаспределениеРучное.ВыделенныеСтроки Цикл
		
		Данные = Элементы.РаспределениеРучное.ДанныеСтроки(текСтр);
		
		СуммаВыделенных = СуммаВыделенных + Данные.Расходы;
		
	КонецЦикла;
	
	ДанныеПоВыделенным = "Сумма: " + Формат(СуммаВыделенных, "ЧЦ=15; ЧДЦ=2") + "; Выделено строк: " + Формат(Элементы.РаспределениеРучное.ВыделенныеСтроки.Количество(), "Чг=0");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиМС1(Команда)
	
	ТД = Элементы.Загрузка.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ТД.ВидРасходов, "M&S") = 0 Тогда
		
		Сообщить("Данная расшифровка только для M&S");
		Возврат;
		
	КонецЕсли;
	
	массивСчетов 	= Новый Массив;
	массивАУ		= Новый Массив;
	массивFiscal	= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson, AU");
	
	Если ЗначениеЗаполнено(ТД.СтрокаТВ) Тогда
	
		строкиТЧ = Объект.Загрузка.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
		
		//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
		Для каждого текСтр из строкиТЧ Цикл 
			
			Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
				массивСчетов.Добавить(текСтр.AccountLawson);		
			КонецЕсли;
			
			Если массивАУ.Найти(текСтр.AU) = Неопределено Тогда
				массивАУ.Добавить(текСтр.AU);
			КонецЕсли;
			
			Если массивFiscal.Найти(текСтр.FiscalType) = Неопределено Тогда
				массивFiscal.Добавить(текСтр.FiscalType);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		массивСчетов.Добавить(ТД.AccountLawson);
		массивАУ.Добавить(ТД.AU);
		массивFiscal.Добавить(ТД.FiscalType);
		
	КонецЕсли;
	
	//ПараметрыРасшифровки.FiscalType 	= массивFiscal;
	ПараметрыРасшифровки.AccountLawson 	= массивСчетов;
	ПараметрыРасшифровки.AU 			= массивАУ;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиМЯ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСтрокиМС2(Команда)
	
	ТД = Элементы.Загрузка.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ТД.ВидРасходов, "M&S") = 0 Тогда
		
		Сообщить("Данная расшифровка только для M&S");
		Возврат;
		
	КонецЕсли;
	
	массивСчетов 	= Новый Массив;
	массивАУ		= Новый Массив;
	массивFiscal	= Новый Массив;
	
	ПараметрыРасшифровки = Новый Структура("AccountLawson");
	
	Если ЗначениеЗаполнено(ТД.СтрокаТВ) Тогда
	
		строкиТЧ = Объект.Загрузка.НайтиСтроки(Новый Структура("СтрокаТВ", ТД.СтрокаТВ));
		
		//ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТД);
		Для каждого текСтр из строкиТЧ Цикл 
			
			Если массивСчетов.Найти(текСтр.AccountLawson) = Неопределено Тогда
				массивСчетов.Добавить(текСтр.AccountLawson);		
			КонецЕсли;
			
			Если массивАУ.Найти(текСтр.AU) = Неопределено Тогда
				массивАУ.Добавить(текСтр.AU);
			КонецЕсли;
			
			Если массивFiscal.Найти(текСтр.FiscalType) = Неопределено Тогда
				массивFiscal.Добавить(текСтр.FiscalType);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		массивСчетов.Добавить(ТД.AccountLawson);
		массивАУ.Добавить(ТД.AU);
		массивFiscal.Добавить(ТД.FiscalType);
		
	КонецЕсли;
	
	//ПараметрыРасшифровки.FiscalType 	= массивFiscal;
	ПараметрыРасшифровки.AccountLawson 	= массивСчетов;
	//ПараметрыРасшифровки.AU 			= массивАУ;
	
	ПараметрыРасшифровки.Вставить("ТипРасшифровки", "СтрокиМЯ");
	ПараметрыРасшифровки.Вставить("НачалоПериода", 	НачалоКвартала(Объект.Дата));
	ПараметрыРасшифровки.Вставить("КонецПериода", 	КонецКвартала(Объект.Дата));
	
	ОткрытьФорму("Документ.ЗагрузкаИРаспределениеРасходов.Форма.ФормаРасшифровки", ПараметрыРасшифровки);
	
КонецПроцедуры







