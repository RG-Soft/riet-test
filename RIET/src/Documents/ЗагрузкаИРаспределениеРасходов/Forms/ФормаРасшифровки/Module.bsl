
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// считаем параметры и сформируем отчет
	Если НЕ Параметры.Свойство("ТипРасшифровки") Тогда
		Закрыть();
	КонецЕсли;
	
	// ТипРасшифровки = "СтрокиТБ"
	// ТипРасшифровки = "Помойка"
	обновлениеПоКнопке = Ложь;
	Сформировать(Документы.ЗагрузкаИРаспределениеРасходов.ПолучитьМакетРасшифровки(Параметры.ТипРасшифровки));	
	ТипРасшифровки = Параметры.ТипРасшифровки;
	
КонецПроцедуры

&НаСервере
Процедура Сформировать(СхемаКомпоновкиДанных)
	
	//СКД = Документы.ЗагрузкаИРаспределениеРасходов.ПолучитьМакет("ОтборПоКонтрагенту");
	//
	//КомпоновщикНастроекОтбор.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	//КомпоновщикНастроекОтбор.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	СчетЛоусон 		= Неопределено;
	АУ 				= Неопределено;
	ФискалТайп  	= Неопределено;
	Локация 		= Неопределено;
	
	Если обновлениеПоКнопке Тогда 
		
		СчетЛоусон 		= СписокAccountLawson.ВыгрузитьЗначения();
		СписокAccountLawson.ЗагрузитьЗначения(СчетЛоусон);
		
		Если СписокFiscalType.Количество() > 0 Тогда
			ФискалТайп  	= СписокFiscalType.ВыгрузитьЗначения();
		КонецЕсли;
		
		Если СписокAU.Количество() > 0 Тогда
			АУ 				= СписокAU.ВыгрузитьЗначения();
		КонецЕсли;
		
		Если СписокЛокаций.Количество() > 0 Тогда
			Локация 		= СписокЛокаций.ВыгрузитьЗначения();
		КонецЕсли;
	 		
	Иначе
		
		СчетЛоусон 		= Параметры.AccountLawson;
		СписокAccountLawson.ЗагрузитьЗначения(СчетЛоусон);
		
		Если Параметры.Свойство("FiscalType") Тогда
			ФискалТайп  	= Параметры.FiscalType;
			СписокFiscalType.ЗагрузитьЗначения(ФискалТайп);
		КонецЕсли;
		
		Если Параметры.Свойство("AU") Тогда
			АУ 				= Параметры.AU;
			СписокAU.ЗагрузитьЗначения(АУ);
		КонецЕсли;
		
		Если Параметры.Свойство("Локация") Тогда
			Локация 		= Параметры.Локация;
			СписокЛокаций.ЗагрузитьЗначения(Локация);
		КонецЕсли;
	
	 	НачалоПериода 	= Параметры.НачалоПериода;
		КонецПериода 	= Параметры.КонецПериода;
		
	КонецЕсли;	
	
	Если НЕ обновлениеПоКнопке Тогда
	
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;	
		Адрес = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Адрес));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		//ЭлОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрагентLawson"); 
		//ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
		////ЭлОтбора.ПравоеЗначение = Значение; 
		//ЭлОтбора.Использование = Ложь;  // сначала отключим
		
		
	КонецЕсли;
	
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Настройки = КомпоновщикНастроек.Настройки;//СхемаКомпоновкиДанных.НастройкиПоУмолчанию; 
	
	// ставим параметры
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", 	НачалоПериода);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", 	КонецПериода);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("AccountLawson", 	СчетЛоусон);
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЕстьAU", 			НЕ (АУ 			= Неопределено));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЕстьFiscalType", 	НЕ (ФискалТайп 	= Неопределено));
	Попытка
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЕстьЛокация", 		НЕ (Локация		= Неопределено));
	Исключение
	КонецПопытки;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("AU", 			АУ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("FiscalType", 	ФискалТайп);
	Попытка
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Локация", 		Локация);
	Исключение
	КонецПопытки;
	
		//Помещаем в переменную данные о расшифровке данных
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		//Формируем макет, с помощью компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	
		//Передаем в макет компоновки схему, настройки и данные расшифровки
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		Настройки, ДанныеРасшифровки);
		
		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,
		ДанныеРасшифровки);
	
	
	
	//Очищаем поле табличного документа
	ТабДок.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасшифровку(Команда)
	
	обновлениеПоКнопке = Истина;
	
	СформироватьНаСервере();
	
	обновлениеПоКнопке = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Сформировать(Документы.ЗагрузкаИРаспределениеРасходов.ПолучитьМакетРасшифровки(ТипРасшифровки));	
	
КонецПроцедуры
