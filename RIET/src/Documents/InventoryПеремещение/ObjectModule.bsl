
////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем TaxRegistration
	МассивAU = goods.ВыгрузитьКолонку("AUIn");
	//Изменила Федотова Л., РГ-Софт, 18.07.14, вопрос SLI-0004757
	//TaxRegistrationIn = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	Если НЕ ЗначениеЗаполнено(TaxRegistrationIn) Тогда
		TaxRegistrationIn = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	КонецЕсли;
		
	МассивAU = goods.ВыгрузитьКолонку("AUOut");
	//Изменила Федотова Л., РГ-Софт, 18.07.14, вопрос SLI-0004757
	//TaxRegistrationOut = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	Если НЕ ЗначениеЗаполнено(TaxRegistrationOut) Тогда
		TaxRegistrationOut = InventoryСервер.ЗаполнениеНалоговойРегистрации(МассивAU);
	КонецЕсли;
	
	//изменил Трефиленков Дмитрий, РГ-Софт, 16.07.2014 по вопросу SLI-0004711
	Если НЕ ЗначениеЗаполнено(TaxRegistrationOut) И InventoryLocationOut = Справочники.InventoryLocations.НайтиПоКоду("TRAN") Тогда
		TaxRegistrationOut = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Dummy");
	КонецЕсли;
	
    // Дозаполним реквизиты
	ОбщегоНазначения.УстановитьЗначение(IctDocType, СокрЛП(IctDocType));
		
	Если НЕ ЗначениеЗаполнено(Responsible) Тогда
		Responsible = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(Comment, СокрЛП(Comment));
	
	Если НЕ ЗначениеЗаполнено(CreationDate) Тогда
		CreationDate = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(LastModified) Тогда
		LastModified = ТекущаяДата();
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначение(HasFinishedGoods, Goods.Найти(Истина, "FinishedGood") <> Неопределено);
	
	Для Каждого СтрокаТЧ Из Goods Цикл
		FinishedGoodPONumber = ?(СтрокаТЧ.FinishedGood, СокрЛП(СтрокаТЧ.FinishedGoodPONumber), "");
		ОбщегоНазначения.УстановитьЗначение(СтрокаТЧ.FinishedGoodPONumber, FinishedGoodPONumber);
	КонецЦикла; 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультатов = ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи);
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьУникальностьНомера(СтруктураРезультатов.ПеремещенияСТакимЖеНомером, Отказ);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
		// Проверить заполнение реквизитов шапки документа
		ПроверитьЗаполнениеШапки(Отказ);
		
		// Проверить заполнение реквизитов табличной части Товары
		ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураРезультатов.GoodsProps, СтруктураРезультатов.UOMsProps, Отказ);
		
		//Если НЕ Отказ И Проведен Тогда
		//	Движения.InventoryBatches.Записать();
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруРезультатовПередЗаписью(РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	Если НЕ ОбменДанными.Загрузка
		И НЕ ПометкаУдаления Тогда
		
		// Проверка уникальности номера
		СтруктураПараметров.Вставить("Номер", Номер);
		СтруктураПараметров.Вставить("Дата", Дата);
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		СтруктураТекстов.Вставить("ПеремещенияСТакимЖеНомером", 
			"ВЫБРАТЬ
			|	Таблица.Представление
			|ИЗ
			|	Документ.InventoryПеремещение КАК Таблица
			|ГДЕ
			|	Таблица.Номер = &Номер
			|	И Таблица.Ссылка <> &Ссылка
			|	И (НЕ Таблица.ПометкаУдаления)
			|	И Таблица.Дата = &Дата");
				
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
							
			// Реквизиты Goods
			СтруктураПараметров.Вставить("Goods", Goods.ВыгрузитьКолонку("Good"));
			СтруктураТекстов.Вставить("GoodsProps",
				"ВЫБРАТЬ
				|	InventoryGoods.Ссылка,
				|	InventoryGoods.StandardUOM,
				|	InventoryGoods.ПометкаУдаления
				|ИЗ
				|	Справочник.InventoryGoods КАК InventoryGoods
				|ГДЕ
				|	InventoryGoods.Ссылка В(&Goods)");
				
			// Реквизиты UOMs
			СтруктураПараметров.Вставить("UOMs", Goods.ВыгрузитьКолонку("UOM"));
			СтруктураТекстов.Вставить("UOMsProps",
				"ВЫБРАТЬ
				|	UOMs.Ссылка,
				|	UOMs.StandardUOM,
				|	UOMs.ПометкаУдаления
				|ИЗ
				|	Справочник.UOMs КАК UOMs
				|ГДЕ
				|	UOMs.Ссылка В(&UOMs)");
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураТекстов.Количество() Тогда
		
		Возврат РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
	Иначе
		
		Возврат Новый Структура;
		
	КонецЕсли; 
		
КонецФункции

Процедура ПроверитьУникальностьНомера(Результат, Отказ)
			
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не уникальный номер! Номер используется в """ + Выборка.Представление + """",
			ЭтотОбъект, "Номер", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""No."" не заполнено!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Date"" не заполнено!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(InventoryLocationOut) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Inventory location out"" не заполнено!",
			ЭтотОбъект, "InventoryLocationOut", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(InventoryLocationIn) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Inventory location in"" не заполнено!",
			ЭтотОбъект, "InventoryLocationIn", , Отказ);
	КонецЕсли;
	
	Для Каждого Стр из Goods Цикл 
		
		Если ЗначениеЗаполнено(Стр.AUOut) И НЕ ЗначениеЗаполнено(TaxRegistrationOut) Тогда   //SLI-0004537
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле ""Tax registration out"" не заполнено, проверьте ""AU out""!",
				ЭтотОбъект, "TaxRegistrationOut", , Отказ);
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;		

	Для Каждого Стр из Goods Цикл
	
		Если ЗначениеЗаполнено(Стр.AUIn) И НЕ ЗначениеЗаполнено(TaxRegistrationIn) Тогда   //SLI-0004537
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле ""Tax registration in"" не заполнено, проверьте ""AU in""!",
				ЭтотОбъект, "TaxRegistrationIn", , Отказ);
			Прервать;	
		КонецЕсли;
	
	КонецЦикла;			

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(РезультатGoodsProps, РезультатUOMsProps, Отказ)
	
	GoodsProps = РезультатGoodsProps.Выгрузить();
	GoodsProps.Индексы.Добавить("Ссылка");
	
	UOMsProps = РезультатUOMsProps.Выгрузить();
	UOMsProps.Индексы.Добавить("Ссылка");

	Для каждого Стр ИЗ Goods Цикл
		
		GoodProps = Неопределено;
		UOMProps = Неопределено;
		
		Если ЗначениеЗаполнено(Стр.Good) Тогда
			
			GoodProps = GoodsProps.Найти(Стр.Good, "Ссылка");
			Если GoodProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченный на удаление Good!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(GoodProps.StandardUOM) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": у Good не заполнена Standard UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Good"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].Good", , Отказ);
				
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Стр.UOM) Тогда
			
			UOMProps = UOMsProps.Найти(Стр.UOM, "Ссылка");
			Если UOMProps.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": указан помеченная на удаление UOM!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
			КонецЕсли;
			
			Если GoodProps <> Неопределено
				И GoodProps.StandardUOM.StandardUOM <> UOMProps.StandardUOM Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": Good standard UOM (" + GoodProps.StandardUOM + ") не соответствует UOM standard UOM (" + UOMProps.StandardUOM + ")!",
					ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""UOM"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].UOM", , Отказ);
				
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Стр.QuantityOut) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Qty out"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].QuantityOut", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.QuantityIn) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Qty in"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].QuantityIn", , Отказ);
		КонецЕсли;
		
		Если Стр.FinishedGood И НЕ ЗначениеЗаполнено(Стр.Batch) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"В строке номер """ + Стр.НомерСтроки + """ табличной части ""Goods"": поле ""Batch"" не заполнено!",
				ЭтотОбъект, "Goods[" + Goods.Индекс(Стр) + "].FinishedGoodPONumber", , Отказ);
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

// ОБРАБОТКА ПРОВЕДЕНИЯ

// ДОДЕЛАТЬ
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	InventoryBatches = Движения.InventoryBatches;
	// НО ЭТО ВЕДЬ НИ ФИГА НЕ БЛОКИРОВКА ИЗМЕРЕНИЙ!
	InventoryBatches.БлокироватьДляИзменения = Истина;
	InventoryBatches.Записывать = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Граница", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("InventoryLocation", InventoryLocationOut);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Company", Company);
	Запрос.УстановитьПараметр("TaxRegistration", TaxRegistrationOut);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	InventoryПеремещениеGoods.Good,
		|	InventoryПеремещениеGoods.FinishedGood,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryПеремещениеGoods.UOM = InventoryПеремещениеGoods.Good.StandardUOM
		|				ТОГДА InventoryПеремещениеGoods.QuantityIn
		|			ИНАЧЕ InventoryПеремещениеGoods.QuantityIn * InventoryПеремещениеGoods.UOM.ConversionFactor / InventoryПеремещениеGoods.Good.StandardUOM.ConversionFactor
		|		КОНЕЦ) КАК QuantityIn,
		|	СУММА(ВЫБОР
		|			КОГДА InventoryПеремещениеGoods.UOM = InventoryПеремещениеGoods.Good.StandardUOM
		|				ТОГДА InventoryПеремещениеGoods.QuantityOut
		|			ИНАЧЕ InventoryПеремещениеGoods.QuantityOut * InventoryПеремещениеGoods.UOM.ConversionFactor / InventoryПеремещениеGoods.Good.StandardUOM.ConversionFactor
		|		КОНЕЦ) КАК QuantityOut,
		|	InventoryПеремещениеGoods.AUOut,
		|	InventoryПеремещениеGoods.AUIn,
		|	InventoryПеремещениеGoods.Batch
		|ПОМЕСТИТЬ InventoryПеремещениеGoods
		|ИЗ
		|	Документ.InventoryПеремещение.Goods КАК InventoryПеремещениеGoods
		|ГДЕ
		|	InventoryПеремещениеGoods.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	InventoryПеремещениеGoods.Good,
		|	InventoryПеремещениеGoods.FinishedGood,
		|	InventoryПеремещениеGoods.AUOut,
		|	InventoryПеремещениеGoods.AUIn,
		|	InventoryПеремещениеGoods.Batch,
		|	InventoryПеремещениеGoods.Ссылка.TaxRegistrationOut,
		|	InventoryПеремещениеGoods.Ссылка.TaxRegistrationIn
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryПеремещениеGoods.Good КАК Good,
		|	InventoryПеремещениеGoods.FinishedGood КАК FinishedGood,
		|	InventoryПеремещениеGoods.QuantityIn КАК QuantityIn,
		|	InventoryПеремещениеGoods.QuantityOut КАК QuantityOut,
		|	InventoryПеремещениеGoods.AUOut,
		|	InventoryПеремещениеGoods.AUIn,
		|	InventoryПеремещениеGoods.Batch
		|ИЗ
		|	InventoryПеремещениеGoods КАК InventoryПеремещениеGoods
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InventoryBatchesОстатки.Good,
		|	InventoryBatchesОстатки.FinishedGood,
		|	InventoryBatchesОстатки.Batch,
		|	InventoryBatchesОстатки.QuantityОстаток,
		|	InventoryBatchesОстатки.SumОстаток,
		|	InventoryBatchesОстатки.AU,
		|	InventoryBatchesОстатки.TaxRegistration
		|ИЗ
		|	РегистрНакопления.InventoryBatches.Остатки(
		|			&Граница,
		|			InventoryLocation = &InventoryLocation
		|				И Company = &Company
		|				И TaxRegistration = &TaxRegistration
		|				И (Good, FinishedGood) В
		|					(ВЫБРАТЬ
		|						InventoryПеремещениеGoods.Good,
		|						InventoryПеремещениеGoods.FinishedGood
		|					ИЗ
		|						InventoryПеремещениеGoods КАК InventoryПеремещениеGoods)) КАК InventoryBatchesОстатки
		|ГДЕ
		|	InventoryBatchesОстатки.QuantityОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	InventoryBatchesОстатки.Batch.МоментВремени";
		
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПеремещаемыхТоваров = Результаты[1].Выбрать();
	ВыборкаПартий = Результаты[2].Выбрать();
				 
	Пока ВыборкаПеремещаемыхТоваров.Следующий() Цикл
		
		ВыполнитьПеремещениеТовара(ВыборкаПеремещаемыхТоваров.Good, ВыборкаПеремещаемыхТоваров.FinishedGood, ВыборкаПеремещаемыхТоваров.Batch, 
			ВыборкаПеремещаемыхТоваров.AUout, ВыборкаПеремещаемыхТоваров.AUin, ВыборкаПеремещаемыхТоваров.QuantityOut, ВыборкаПеремещаемыхТоваров.QuantityIn, 
			ВыборкаПартий, InventoryBatches, Отказ);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПеремещениеТовара(Good, FinishedGood, Batch, AUOut, AUin, QuantityOut, QuantityIn, ВыборкаПартий, НаборЗаписей, Отказ)
	
	LocationTran = Справочники.InventoryLocations.НайтиПоКоду("TRAN");
	Dummy = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Dummy");

	// Подбираем очередную партию до тех пор пока не спишем все необходимое количество
	СтруктураПоиска = Новый Структура("Good, AU");
	СтруктураПоиска.Good = Good;
	СтруктураПоиска.AU = AUOut;
	Если FinishedGood Тогда
		СтруктураПоиска.Вставить("FinishedGood", FinishedGood);
	КонецЕсли;
	Если ЗначениеЗаполнено(Batch) Тогда
		СтруктураПоиска.Вставить("Batch", Batch);
	КонецЕсли;
			
	ВыборкаПартий.Сбросить();
	
	QuantityOutОсталось = QuantityOut;
	QuantityInОсталось = QuantityIn;
	SumIn = 0;
	
	Пока QuantityOutОсталось > 0 Цикл
		
		Если НЕ ВыборкаПартий.НайтиСледующий(СтруктураПоиска) Тогда
			
			ТекстОшибки = "Не хватает " + QuantityOutОсталось + " " + Good.StandardUOM + " номенклатуры """ + Good.Код + """ на локации """ 
				+ InventoryLocationOut + """ по AU """ + AUOut + """ по Tax registration """ + TaxRegistrationOut + """!";
			РГСофтКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
			Прервать;
			
		КонецЕсли;
		
		Цена = ВыборкаПартий.SumОстаток / ВыборкаПартий.QuantityОстаток;
		
		// Расход
		СписываемоеКоличество = ?(ВыборкаПартий.QuantityОстаток > QuantityOutОсталось,
									QuantityOutОсталось, ВыборкаПартий.QuantityОстаток);
													
		Если Не Отказ Тогда	
										
			Движение = НаборЗаписей.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Company = Company;
			Движение.InventoryLocation = InventoryLocationOut;
			Движение.Good = Good;
			Движение.FinishedGood = FinishedGood;
			Движение.AU = AUOut;
			Движение.TaxRegistration = ?(InventoryLocationOut = LocationTran, Dummy, TaxRegistrationOut); //SLI-0004537
			Движение.Batch = ВыборкаПартий.Batch;
			Движение.Quantity = СписываемоеКоличество;
			Движение.Sum = СписываемоеКоличество * Цена;
			
		КонецЕсли;
		
		QuantityOutОсталось = QuantityOutОсталось - СписываемоеКоличество; 
		
		//// Накопление данных для прихода
		//Если QuantityInОсталось > 0 Тогда
		//	
		//	ПриходуемоеКоличество = ?(СписываемоеКоличество > QuantityInОсталось,
		//								QuantityInОсталось, СписываемоеКоличество);
		//	SumIn = SumIn + ПриходуемоеКоличество * Цена;	
		//	QuantityInОсталось = QuantityInОсталось - ПриходуемоеКоличество;
		//	
		//КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			// Увеличение SumIn, если QuantityIn > QuantityOut
			//Если QuantityInОсталось > 0 Тогда
			//	SumIn = SumIn + QuantityInОсталось * Цена;
			//КонецЕсли;

			Движение = НаборЗаписей.ДобавитьПриход();
			Движение.Период = Дата;
			Движение.Company = Company;
			Движение.InventoryLocation = InventoryLocationIn;
			Движение.Good = Good;
			Движение.FinishedGood = FinishedGood;
			Движение.Batch = ВыборкаПартий.Batch;
			Движение.AU = AUin;
			Движение.TaxRegistration = ?(InventoryLocationIn = LocationTran, Dummy, TaxRegistrationIn); //SLI-0004537
			Движение.Quantity = СписываемоеКоличество;
			Движение.Sum = СписываемоеКоличество * Цена;
			
		КонецЕсли; 
	
	КонецЦикла;
		
КонецПроцедуры 


Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
КонецПроцедуры

