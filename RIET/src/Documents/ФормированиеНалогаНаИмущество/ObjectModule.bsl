Перем Период Экспорт;
Перем мТаблицаСоответствияСтавок;
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета Экспорт;
Перем мАвтоВыборКодов;
Перем мКодыОКЕИ;
Перем мДелитель;
Перем ТочностьЕдиницыИзмерения;
Перем мОписаниеТиповБулево;
Перем мНалогВБюджет Экспорт;
Перем мСтавкаНалога Экспорт;

Процедура ЗаполнитьАвто() Экспорт
	
	ЗаполнитьТабЧасть();

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьТабЧасть()
	
	ДатаНачалаПериодаРасчета = НачалоГода(НалоговыйПериод);
	ДатаКонцаПериодаРасчета  = КонецКвартала(НалоговыйПериод) + 1;
	
	// { RGS LFedotova 20.02.2018 16:51:12 - вопрос SLI-0007489
	Если ДатаПроведения >= '2017.10.01' Тогда
		
		//Запишем документ
		Записать();
		
		//Проведем документ по регистру РасчетНалогаНаИмущество, затем проводки перенесем в табличную часть документа
		СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(ДатаНачалаПериодаРасчета, ДатаКонцаПериодаРасчета);
		Отказ = Ложь;
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
		//Заполним табличную часть документа
		ТаблицаДвиженийРасчетНалогаНаИмущество = ЭтотОбъект.Движения.РасчетНалогаНаИмущество.Выгрузить();
		Для каждого Строка Из ТаблицаДвиженийРасчетНалогаНаИмущество Цикл
			НоваяСтрока = РасчетНалогаНаИмущество.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Поставщик = Строка.ОсновноеСредство.Поставщик;
		КонецЦикла; 
	    Возврат;
	КонецЕсли;	
	// } RGS LFedotova 20.02.2018 16:52:35 - вопрос SLI-0007489


	//КварталОтчета = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"));
	//ГодОтчета     = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг"));

	Период = ДатаНачалаПериодаРасчета;
	ТаблицаОС = Раздел2.ВыгрузитьКолонки();
	
	Добавили = ложь;
	Пока Период <= ДатаКонцаПериодаРасчета Цикл
                                                                 
		ОстСтоимостьОС = 0;
		СтоимостьНедв = 0;
		СтоимостьЛьготир = 0;

		НомерМесяца = Месяц(Период);
        //RG-Soft 18.02.2013 В запрос добавлено ограничение по дате принятия к учету ОС
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) КАК Стоимость,
		|	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьЛьготир, 0) КАК СтоимостьЛьготир,
		|	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьНедв, 0) КАК СтоимостьНедв,
		|	ВложенныйЗапрос.ОсновноеСредство,
		|	ВложенныйЗапрос.КодВидаИмущества,
		// { RGS MYurkevich 18.04.2015 13:46:45 - SLI-0005340 
		|   ВложенныйЗапрос.Поставщик,
		// } RGS MYurkevich 18.04.2015 13:46:47 - SLI-0005340 
		|	ВложенныйЗапрос.Курс,
		|	ВложенныйЗапрос.СтоимостьUSD
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА((ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)) * КурсыВалютСрезПоследних.Курс) КАК Стоимость,
		|		СУММА(ВЫБОР
		|				КОГДА ОС.ЛьготируемоеИмущество
		|					ТОГДА (ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)) * КурсыВалютСрезПоследних.Курс
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК СтоимостьЛьготир,
		|		СУММА(ВЫБОР
		|				КОГДА ОС.ОсновноеСредство.ГруппаОС В (&ГруппыНедв)
		|					ТОГДА (ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)) * КурсыВалютСрезПоследних.Курс
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК СтоимостьНедв,
		|		ОС.ОсновноеСредство КАК ОсновноеСредство,
		|		ОС.КодВидаИмущества КАК КодВидаИмущества,
		// { RGS MYurkevich 18.04.2015 13:46:45 - SLI-0005340 
		|       ОС.ОсновноеСредство.Поставщик КАК Поставщик,
		// } RGS MYurkevich 18.04.2015 13:46:47 - SLI-0005340 
		|		КурсыВалютСрезПоследних.Курс КАК Курс,
		|		ВЫБОР
		|			КОГДА КурсыВалютСрезПоследних.Курс = 1
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)
		|		КОНЕЦ КАК СтоимостьUSD
		|	ИЗ
		|		(ВЫБРАТЬ
		|			МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение,
		|			ЕСТЬNULL(ЛьготированиеИмуществаСрезПоследних.ЛьготируемоеИмущество, ЛОЖЬ) КАК ЛьготируемоеИмущество,
		|			ВЫБОР
		|				КОГДА МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ГруппаОС В (&ГруппыНедв)
		|					ТОГДА ""Не3""
		|				ИНАЧЕ ""3""
		|			КОНЕЦ КАК КодВидаИмущества
		|		ИЗ
		|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|					&Дата,
		|					НЕ ОсновноеСредство В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
		|							ИЗ
		|								РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|							ГДЕ
		|								СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|								И СостоянияОСОрганизаций.ДатаСостояния >= &ДатаПринятияКУчету
		// { RGS MYurkevich 09.04.2015 10:55:34 - SLI-0005340 
		|								И (НЕ СостоянияОСОрганизаций.ОсновноеСредство.ПоставщикВзаимозависимый
		|								ИЛИ СостоянияОСОрганизаций.ОсновноеСредство.ПоставщикВзаимозависимый И СостоянияОСОрганизаций.ОсновноеСредство.АмортизационнаяГруппа В (&Группы1и2))
		// } RGS MYurkevich 09.04.2015 10:55:34 - SLI-0005340 
		|								И НЕ СостоянияОСОрганизаций.ОсновноеСредство.ГруппаОС В (&ГруппыНедв))) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготированиеИмущества.СрезПоследних(&Дата, ) КАК ЛьготированиеИмуществаСрезПоследних
		|				ПО МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ЛьготированиеИмуществаСрезПоследних.ОС
		|		ГДЕ
		|			МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение В ИЕРАРХИИ(&Подразделение)
		|			И НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ГруппаОС В (&Группы)
		|			И НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.ПометкаУдаления
		|			И НЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство.АрендованноеОС) КАК ОС
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ) КАК СтоимостьАмортизацияОСОстатки
		|			ПО ОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|			ПО ОС.ОсновноеСредство.Валюта = КурсыВалютСрезПоследних.Валюта
		|	ГДЕ
		|		НЕ ОС.ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|					ГДЕ
		|						СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(перечисление.состоянияОС.снятосучета)
		|						И СостоянияОСОрганизаций.ДатаСостояния < &Дата) 
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОС.ОсновноеСредство,
		|		ОС.КодВидаИмущества,
		|		КурсыВалютСрезПоследних.Курс,
		|		ВЫБОР
		|			КОГДА КурсыВалютСрезПоследних.Курс = 1
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток, 0) - ЕСТЬNULL(СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток, 0)
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|ГДЕ                                
		|	ВложенныйЗапрос.Стоимость <> 0";
		//|	И ВложенныйЗапрос.ОсновноеСредство.Ссылка = &ОС
		
		ГруппыНеИмущ = Новый СписокЗначений();
		ГруппыНеИмущ.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
		ГруппыНеИмущ.Добавить(Перечисления.ГруппыОС.ОбъектыПриродопользования);
		
		ГруппыНедв = Новый СписокЗначений();
		ГруппыНедв.Добавить(Перечисления.ГруппыОС.Здания);
		ГруппыНедв.Добавить(Перечисления.ГруппыОС.Сооружения);
		ГруппыНедв.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
		
		Запрос.УстановитьПараметр("Группы", ГруппыНеИмущ);
		Запрос.УстановитьПараметр("ГруппыНедв", ГруппыНедв);
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Дата", Период);
		Запрос.УстановитьПараметр("ДатаПринятияКУчету", Дата('20130101000000'));
		// { RGS MYurkevich 09.04.2015 10:55:34 - SLI-0005340 
		Группы1и2 = Новый СписокЗначений();
		Группы1и2.Добавить(Перечисления.АмортизационныеГруппы.ПерваяГруппа);
		Группы1и2.Добавить(Перечисления.АмортизационныеГруппы.ВтораяГруппа);
		Запрос.УстановитьПараметр("Группы1и2", Группы1и2);
		// } RGS MYurkevich 09.04.2015 10:55:34 - SLI-0005340 
		//Запрос.УстановитьПараметр("ОС", Справочники.ОсновныеСредства.НайтиПоКоду("001761"));

		Выборка =Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаОС.Добавить();                    
			НоваяСтрока.ОС = Выборка.ОсновноеСредство;                       
			НоваяСтрока.КодВидаИмущества = Выборка.КодВидаИмущества;
			// { RGS MYurkevich 18.04.2015 13:46:45 - SLI-0005340 
			НоваяСтрока.Поставщик = Выборка.Поставщик;
			// } RGS MYurkevich 18.04.2015 13:46:47 - SLI-0005340
			Если НомерМесяца = 1 Тогда
				НоваяСтрока.ОстаточнаяСтоимость1 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD1 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс1 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 2 Тогда
				НоваяСтрока.ОстаточнаяСтоимость2 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD2 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс2 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 3 Тогда
				НоваяСтрока.ОстаточнаяСтоимость3 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD3 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс3 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 4 Тогда
				НоваяСтрока.ОстаточнаяСтоимость4 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD4 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс4 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 5 Тогда
				НоваяСтрока.ОстаточнаяСтоимость5 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD5 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс5 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 6 Тогда
				НоваяСтрока.ОстаточнаяСтоимость6 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD6 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс6 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 7 Тогда
				НоваяСтрока.ОстаточнаяСтоимость7 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD7 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс7 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 8 Тогда
				НоваяСтрока.ОстаточнаяСтоимость8 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD8 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс8 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 9 Тогда
				НоваяСтрока.ОстаточнаяСтоимость9 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD9 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс9 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 10 Тогда
				НоваяСтрока.ОстаточнаяСтоимость10 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD10 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс10 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 11 Тогда
				НоваяСтрока.ОстаточнаяСтоимость11 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD11 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс11 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 12 И День(Период) <> 31 Тогда
				НоваяСтрока.ОстаточнаяСтоимость12 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD12 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс12 = Выборка.Курс;
			ИначеЕсли НомерМесяца = 12 И День(Период) = 31  Тогда
				НоваяСтрока.ОстаточнаяСтоимость13 = Выборка.Стоимость;
				НоваяСтрока.ОстаточнаяСтоимостьUSD13 = Выборка.СтоимостьUSD;
				НоваяСтрока.Курс13 = Выборка.Курс;
			КонецЕсли;
			НоваяСтрока.СтоимостьЛьготируемогоИмущества = Выборка.СтоимостьЛьготир;
		КонецЦикла;
		
        Если НЕ (Месяц(Период) = 12 И День(Период) = 1)  Тогда
			Период = ДобавитьМесяц(Период,1);
		Иначе
			Период = КонецДня(КонецМесяца(Период));
		КонецЕсли;
		
	КонецЦикла; // конец цикла по периодам

	ТаблицаОС.Свернуть("ОС,КодВидаИмущества, Поставщик", "ОстаточнаяСтоимость1,ОстаточнаяСтоимость2,ОстаточнаяСтоимость3,ОстаточнаяСтоимость4,ОстаточнаяСтоимость5,ОстаточнаяСтоимость6,ОстаточнаяСтоимость7,ОстаточнаяСтоимость8,ОстаточнаяСтоимость9,ОстаточнаяСтоимость10,ОстаточнаяСтоимость11,ОстаточнаяСтоимость12,ОстаточнаяСтоимость13,ОстаточнаяСтоимостьUSD1,ОстаточнаяСтоимостьUSD2,ОстаточнаяСтоимостьUSD3,ОстаточнаяСтоимостьUSD4,ОстаточнаяСтоимостьUSD5,ОстаточнаяСтоимостьUSD6,ОстаточнаяСтоимостьUSD7,ОстаточнаяСтоимостьUSD8,ОстаточнаяСтоимостьUSD9,ОстаточнаяСтоимостьUSD10,ОстаточнаяСтоимостьUSD11,ОстаточнаяСтоимостьUSD12,ОстаточнаяСтоимостьUSD13,Курс1,Курс2,Курс3,Курс4,Курс5,Курс6,Курс7,Курс8,Курс9,Курс10,Курс11,Курс12,Курс13,ОстаточнаяСтоимостьСредняя,СтоимостьЛьготируемогоИмущества");
	
	//Определим, по какому числу месяцев надо усреднять остаточную стоимость
	Если Месяц(НачалоКвартала(НалоговыйПериод)) = 1 Тогда
		ЧислоМесяцевРасчета = 4;
	ИначеЕсли Месяц(НачалоКвартала(НалоговыйПериод)) = 4 Тогда
		ЧислоМесяцевРасчета = 7;
	ИначеЕсли Месяц(НачалоКвартала(НалоговыйПериод)) = 7 Тогда
		ЧислоМесяцевРасчета = 10;
	ИначеЕсли Месяц(НачалоКвартала(НалоговыйПериод)) = 10 Тогда
		ЧислоМесяцевРасчета = 13;
	КонецЕсли; 	
	
	Для каждого Строка Из ТаблицаОС Цикл
		Строка.ОстаточнаяСтоимостьСредняя = (Строка.ОстаточнаяСтоимость1 + 
			Строка.ОстаточнаяСтоимость2 + Строка.ОстаточнаяСтоимость3 + Строка.ОстаточнаяСтоимость4 +
			Строка.ОстаточнаяСтоимость5 + Строка.ОстаточнаяСтоимость6 + Строка.ОстаточнаяСтоимость7 +
			Строка.ОстаточнаяСтоимость8 + Строка.ОстаточнаяСтоимость9 + Строка.ОстаточнаяСтоимость10 +
			Строка.ОстаточнаяСтоимость11 + Строка.ОстаточнаяСтоимость12 + Строка.ОстаточнаяСтоимость13)/
			ЧислоМесяцевРасчета;
		Строка.СтоимостьЛьготируемогоИмущества = Строка.СтоимостьЛьготируемогоИмущества / ЧислоМесяцевРасчета;
	КонецЦикла;                                
	
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		
		НоваяСтрока = Раздел2.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОС);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

Функция ПолучитьСтавкуНалога(Дата, Подразделение, Код, Мощность, СрокПолезногоИспользования)

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо70,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо85,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо150,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеДо250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЛегковыеСвыше250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыДо20,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыДо35,
	               |	СтавкиТранспортногоНалогаСрезПоследних.МотоциклыСвыше35,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо150,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеСвыше250,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо110,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо130,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыСвыше200,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ДругиеСамоходные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СнегоходыДо50,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СнегоходыСвыше50,
	               |	СтавкиТранспортногоНалогаСрезПоследних.КатераДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.КатераСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЯхтыДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ЯхтыСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГидроциклыДо100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГидроциклыСвыше100,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Несамоходные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.СамолетыРеактивные,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Самолеты,
	               |	СтавкиТранспортногоНалогаСрезПоследних.Другие,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо110После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо130После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыДо200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.АвтобусыСвыше200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо100После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо150После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо200После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеДо250После5,
	               |	СтавкиТранспортногоНалогаСрезПоследних.ГрузовыеСвыше250После5
	               |ИЗ
	               |	РегистрСведений.СтавкиТранспортногоНалога.СрезПоследних(&Дата, ПодразделениеОрганизации = &Подразделение) КАК СтавкиТранспортногоНалогаСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Ставки = Запрос.Выполнить().Выбрать();
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
		
		Если Ставки.Следующий() Тогда
			//определяем ставку по коду вида т.с. и мощности
			СтрокаТЗ = мТаблицаСоответствияСтавок.Найти(Код, "КодВида");
			ИмяСтавки = СтрокаТЗ.Ставка;
			Если      ИмяСтавки = "Самолеты, вертолеты и иные воздушные суда, имеющие двигатели" Тогда
				Возврат Ставки.Самолеты; 
			ИначеЕсли ИмяСтавки = "Яхты и другие парусно-моторные суда" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ЯхтыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ЯхтыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Катера, моторные лодки и другие водные транспортные средства" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.КатераДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.КатераСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Гидроциклы" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГидроциклыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ГидроциклыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Несамоходные (буксируемые) суда, для которых определяется валовая вместимость" Тогда
				Возврат Ставки.Несамоходные; 
			ИначеЕсли ИмяСтавки = "Другие водные и воздушные транспортные средства, не имеющие двигателей" Тогда
				Возврат Ставки.Другие; 
			ИначеЕсли ИмяСтавки = "Автомобили легковые" Тогда
				//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
				Если      Мощность <= 70 Тогда
					Возврат Ставки.ЛегковыеДо70; 
				ИначеЕсли Мощность > 70 И Мощность <= 85 Тогда
					Возврат Ставки.ЛегковыеДо85; 
				ИначеЕсли Мощность > 85 И Мощность <= 100 Тогда
					//Добавила Федотова Л., РГ-Софт, 13.06.13, вопрос SLI-0003630
					Если СрокПолезногоИспользования/12 > 3 Тогда
						Возврат Ставки.ЛегковыеДо100Более3лет; 
					Иначе
						Возврат Ставки.ЛегковыеДо100; 
					КонецЕсли;	
				ИначеЕсли Мощность > 100 И Мощность <= 125 Тогда
					Возврат Ставки.ЛегковыеДо125; 
				ИначеЕсли Мощность > 125 И Мощность <= 150 Тогда
					Возврат Ставки.ЛегковыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 175 Тогда
					Возврат Ставки.ЛегковыеДо175; 
				ИначеЕсли Мощность > 175 И Мощность <= 200 Тогда
					Возврат Ставки.ЛегковыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 225 Тогда
					Возврат Ставки.ЛегковыеДо225; 
				ИначеЕсли Мощность > 225 И Мощность <= 250 Тогда
					Возврат Ставки.ЛегковыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ЛегковыеСвыше250; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Другие самоходные транспортные средства, машины и механизмы на пневматическом и гусеничном ходу" Тогда
				Возврат Ставки.ДругиеСамоходные; 
			ИначеЕсли ИмяСтавки = "Автобусы" Тогда
				
				Если СрокПолезногоИспользования/12 > 5 Тогда
					Если      Мощность <= 110 Тогда
						Возврат Ставки.АвтобусыДо110После5; 
					//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
					ИначеЕсли Мощность > 110 И Мощность <= 130 Тогда
						Возврат Ставки.АвтобусыДо130После5; 
					ИначеЕсли Мощность > 130 И Мощность <= 200 Тогда
						Возврат Ставки.АвтобусыДо200После5; 
					ИначеЕсли Мощность > 200 Тогда
						Возврат Ставки.АвтобусыСвыше200После5; 
					КонецЕсли;	
				Иначе
					
					Если      Мощность <= 110 Тогда
						Возврат Ставки.АвтобусыДо110; 
					//Добавила Федотова Л., РГ-Софт, 16.06.13, вопрос SLI-0003630
					ИначеЕсли Мощность > 110 И Мощность <= 130 Тогда
						Возврат Ставки.АвтобусыДо130; 
					ИначеЕсли Мощность > 130 И Мощность <= 200 Тогда
						Возврат Ставки.АвтобусыДо200; 
					ИначеЕсли Мощность > 200 Тогда
						Возврат Ставки.АвтобусыСвыше200; 
					КонецЕсли;	
				КонецЕсли;

			ИначеЕсли ИмяСтавки = "Мотоциклы и мотороллеры" Тогда
				Если      Мощность <= 20 Тогда
					Возврат Ставки.МотоциклыДо20; 
				ИначеЕсли Мощность > 20 И Мощность <= 35 Тогда
					Возврат Ставки.МотоциклыДо35; 
				ИначеЕсли Мощность > 35 Тогда
					Возврат Ставки.МотоциклыСвыше35; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Снегоходы, мотосани" Тогда
				Если      Мощность <= 50 Тогда
					Возврат Ставки.СнегоходыДо50; 
				ИначеЕсли Мощность > 50 Тогда
					Возврат Ставки.СнегоходыСвыше50; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Автомобили грузовые" Тогда
				Если СрокПолезногоИспользования/12 > 5 Тогда
					
					Если      Мощность <= 100 Тогда
						Возврат Ставки.ГрузовыеДо100После5; 
					ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
						Возврат Ставки.ГрузовыеДо150После5; 
					ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
						Возврат Ставки.ГрузовыеДо200После5; 
					ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
						Возврат Ставки.ГрузовыеДо250После5; 
					ИначеЕсли Мощность > 250 Тогда
						Возврат Ставки.ГрузовыеСвыше250После5; 
					КонецЕсли;
					
				Иначе
					
					Если      Мощность <= 100 Тогда
						Возврат Ставки.ГрузовыеДо100; 
					ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
						Возврат Ставки.ГрузовыеДо150; 
					ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
						Возврат Ставки.ГрузовыеДо200; 
					ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
						Возврат Ставки.ГрузовыеДо250; 
					ИначеЕсли Мощность > 250 Тогда
						Возврат Ставки.ГрузовыеСвыше250; 
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Сообщить("Не определена ставка для кода вида ТС: " + Код);
			КонецЕсли;	
			Возврат 13;
		Иначе
			Сообщить("Не заданы ставки налога для локации " + Подразделение);	
			Возврат 0;
		КонецЕсли;		
		
	Иначе
		
		Если Ставки.Следующий() Тогда
			//определяем ставку по коду вида т.с. и мощности
			СтрокаТЗ = мТаблицаСоответствияСтавок.Найти(Код, "КодВида");
			ИмяСтавки = СтрокаТЗ.Ставка;
			Если      ИмяСтавки = "Самолеты, вертолеты и иные воздушные суда, имеющие двигатели" Тогда
				Возврат Ставки.Самолеты; 
			ИначеЕсли ИмяСтавки = "Яхты и другие парусно-моторные суда" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ЯхтыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ЯхтыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Катера, моторные лодки и другие водные транспортные средства" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.КатераДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.КатераСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Гидроциклы" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГидроциклыДо100; 
				ИначеЕсли Мощность > 100 Тогда
					Возврат Ставки.ГидроциклыСвыше100; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Несамоходные (буксируемые) суда, для которых определяется валовая вместимость" Тогда
				Возврат Ставки.Несамоходные; 
			ИначеЕсли ИмяСтавки = "Другие водные и воздушные транспортные средства, не имеющие двигателей" Тогда
				Возврат Ставки.Другие; 
			ИначеЕсли ИмяСтавки = "Автомобили легковые" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ЛегковыеДо100; 
				ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
					Возврат Ставки.ЛегковыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
					Возврат Ставки.ЛегковыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
					Возврат Ставки.ЛегковыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ЛегковыеСвыше250; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Другие самоходные транспортные средства, машины и механизмы на пневматическом и гусеничном ходу" Тогда
				Возврат Ставки.ДругиеСамоходные; 
			ИначеЕсли ИмяСтавки = "Автобусы" Тогда
				Если      Мощность <= 110 Тогда
					Возврат Ставки.АвтобусыДо110; 
				ИначеЕсли Мощность > 110 И Мощность <= 200 Тогда
					Возврат Ставки.АвтобусыДо200; 
				ИначеЕсли Мощность > 200 Тогда
					Возврат Ставки.АвтобусыСвыше200; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Мотоциклы и мотороллеры" Тогда
				Если      Мощность <= 20 Тогда
					Возврат Ставки.МотоциклыДо20; 
				ИначеЕсли Мощность > 20 И Мощность <= 35 Тогда
					Возврат Ставки.МотоциклыДо35; 
				ИначеЕсли Мощность > 35 Тогда
					Возврат Ставки.МотоциклыСвыше35; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Снегоходы, мотосани" Тогда
				Если      Мощность <= 50 Тогда
					Возврат Ставки.СнегоходыДо50; 
				ИначеЕсли Мощность > 50 Тогда
					Возврат Ставки.СнегоходыСвыше50; 
				КонецЕсли;	
			ИначеЕсли ИмяСтавки = "Автомобили грузовые" Тогда
				Если      Мощность <= 100 Тогда
					Возврат Ставки.ГрузовыеДо100; 
				ИначеЕсли Мощность > 100 И Мощность <= 150 Тогда
					Возврат Ставки.ГрузовыеДо150; 
				ИначеЕсли Мощность > 150 И Мощность <= 200 Тогда
					Возврат Ставки.ГрузовыеДо200; 
				ИначеЕсли Мощность > 200 И Мощность <= 250 Тогда
					Возврат Ставки.ГрузовыеДо250; 
				ИначеЕсли Мощность > 250 Тогда
					Возврат Ставки.ГрузовыеСвыше250; 
				КонецЕсли;	
			Иначе
				Сообщить("Не определена ставка для кода вида ТС: " + Код);
			КонецЕсли;	
			Возврат 13;
		Иначе
			Сообщить("Не заданы ставки налога для локации " + Подразделение);	
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// { RGS MYurkevich 15.12.2015 11:10:17 - писал в транспортный налог, изменила на имущественный
	//Проверим, были ли движения по данному подразделения с тем же номером корректировки по данному налоговому периоду
	//Если были, то проводить не дадим
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФормированиеНалогаНаИмуществоОбороты.ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрНакопления.ФормированиеНалогаНаИмущество.Обороты(
	               |			,
	               |			,
	               |			,
	               |			ПодразделениеОрганизации = &ПодразделениеОрганизации
	               |				И НалоговыйПериод = &НалоговыйПериод
	               |				И НомерКорректировки = &НомерКорректировки) КАК ФормированиеНалогаНаИмуществоОбороты";

	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
 	Запрос.УстановитьПараметр("НалоговыйПериод", НалоговыйПериод);
 	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Сообщить("Документ формирования имущественный налога не может быть проведен, 
		|так как по подразделению " + ПодразделениеОрганизации + " в налоговом периоде " 
		+ Формат(НалоговыйПериод, "ДФ='к""й квартал"" гггг'") + " 
		|документ формирования имущественного налога с номером корректировки " + НомерКорректировки + " уже заведен. 
		|Сделайте заведенный ранее документ непроведенным или измените номер корректировки.");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	// Отражение по регистру "Формирование транспортного налога"
	ТаблицаДвижений_ФормированиеНалогаНаИмущество = Движения.ФормированиеНалогаНаИмущество.Выгрузить();
	ТаблицаДвижений_ФормированиеНалогаНаИмущество.Очистить();
	ТаблицаРаздела2 = Раздел2.Выгрузить();
	ТаблицаРаздела2.Колонки.Добавить("НалогВБюджет", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Для Каждого СтрокаТЧ Из ТаблицаРаздела2 Цикл
		СтрокаТЧ.НалогВБюджет = (СтрокаТЧ.ОстаточнаяСтоимостьСредняя - СтрокаТЧ.СтоимостьЛьготируемогоИмущества) * мСтавкаНалога / 100;
	КонецЦикла;	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаздела2,ТаблицаДвижений_ФормированиеНалогаНаИмущество);
	
	Движения.ФормированиеНалогаНаИмущество.мПериод = ДатаПроведения;
	Движения.ФормированиеНалогаНаИмущество.мНалоговыйПериод = НалоговыйПериод;
	Движения.ФормированиеНалогаНаИмущество.мНомерКорректировки = НомерКорректировки;
	Движения.ФормированиеНалогаНаИмущество.мПодразделениеОрганизации = ПодразделениеОрганизации;
	Движения.ФормированиеНалогаНаИмущество.мТаблицаДвижений = ТаблицаДвижений_ФормированиеНалогаНаИмущество;
	Движения.ФормированиеНалогаНаИмущество.ВыполнитьДвижения();
	
	// { RGS LFedotova 03.03.2018 22:38:27 - вопрос SLI-0007489
	// Движения по регистру "Расчет налога на имущество"
	ТаблицаДвижений_РасчетНалогаНаИмущество = Движения.РасчетНалогаНаИмущество.Выгрузить();
	ТаблицаДвижений_РасчетНалогаНаИмущество.Очистить();
	ТаблицаРасчетНалогаНаИмущество = РасчетНалогаНаИмущество.Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРасчетНалогаНаИмущество,ТаблицаДвижений_РасчетНалогаНаИмущество);
	ТаблицаДвижений_РасчетНалогаНаИмущество.ЗаполнитьЗначения(ПодразделениеОрганизации,"Организация");
	ТаблицаДвижений_РасчетНалогаНаИмущество.ЗаполнитьЗначения(КонецКвартала(НалоговыйПериод),"ПериодРасчета");
	ТаблицаДвижений_РасчетНалогаНаИмущество.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаДвижений_РасчетНалогаНаИмущество.ЗаполнитьЗначения(Ссылка,"Регистратор");
	Движения.РасчетНалогаНаИмущество.Загрузить(ТаблицаДвижений_РасчетНалогаНаИмущество);
	// } RGS LFedotova 03.03.2018 22:38:33 - вопрос SLI-0007489
	
КонецПроцедуры

Процедура ОткрытьОтчет(Отчет, Подразделение, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено, Вид = Неопределено, ТекФорма = Неопределено) Экспорт

	
	Организация = Новый СписокЗначений;
	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Организация.Добавить(ВыборкаОрганизаций.Ссылка);
		
	КонецЦикла; 
	
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	КонецЕсли;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
	#Если Клиент Тогда
		Предупреждение("Недостаточно прав!");
	#КонецЕсли
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
	#Если Клиент Тогда
		Предупреждение("Отчет не найден!");
	#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета) И Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
			
		ВнутреннийОтчет = Документы[ИсточникОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму("ОсновнаяФорма");
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;
			
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ОрганизацияОтчета = Неопределено Тогда
		Если Организация.Количество() = 1 Тогда
			Попытка
				ТекФорма.Организация = Организация.Получить(0).Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ТекФорма.Организация = ОрганизацияОтчета;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТекФорма.ОбработкаОбъект.Подразделение = Подразделение;
	
	Если ДатаНачалаПериодаОтчета <> Неопределено ИЛИ ДатаОкончанияПериодаОтчета <> Неопределено Тогда
		
		Попытка
			ТекФорма.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ТекФорма.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ТекФорма.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	//ТекФорма.ЭтотОбъект.мПериодичность = Перечисления.Периодичность.Квартал;       
	//ТекФорма.ЭтотОбъект.мДатаНачалаПериодаОтчета = НачалоКвартала(НалоговыйПериод); // нам нужно с начала годаы
	ТекФорма.ЭтотОбъект.мДатаНачалаПериодаОтчета = НачалоГода(НалоговыйПериод); 
	ТекФорма.ЭтотОбъект.мДатаКонцаПериодаОтчета = КонецКвартала(НалоговыйПериод);

	ТекФорма.РежимВыбора = Ложь;

	////////////	
   	КоличествоФорм = РегламентированнаяОтчетность.КоличествоФормСоответствующихВыбранномуПериоду(ТекФорма);
	ТаблицаФормОтчета = РегламентированнаяОтчетность.ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(ТекФорма);
	Для Каждого Стр Из ТаблицаФормОтчета Цикл
		Если Стр.ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
			Стр.ДатаКонецДействия = '20291231';
		КонецЕсли;
	КонецЦикла;

	ТаблицаФормОтчета.Сортировать("ДатаКонецДействия Убыв");

	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(ТекФорма.мДатаКонцаПериодаОтчета)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(ТекФорма.мДатаКонцаПериодаОтчета))) Тогда
			Продолжить;
		КонецЕсли;

		ТекФорма.мВыбраннаяФорма = Строка.ФормаОтчета;
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	Если ТекФорма.мВыбраннаяФорма = Неопределено Тогда
		Если ТаблицаФормОтчета.Количество() >= 1 Тогда
			ТекФорма.мВыбраннаяФорма = ТекФорма.мТаблицаФормОтчета[0].ФормаОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не выбрана организация.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	// устанавливаем дату представления отчета как рабочая дата
	#Если Клиент Тогда
		ДатаПодписи                = РабочаяДата;
	#Иначе 	
		ДатаПодписи                = ТекущаяДата();
	#КонецЕсли
	ВыбФормаОтчета             = ТекФорма.ОбработкаОбъект.ПолучитьФорму(ТекФорма.мВыбраннаяФорма);
	РегламентированнаяОтчетность.ДобавитьНадписьВнешнийОтчет(ВыбФормаОтчета);
	ВыбФормаОтчета.РежимВыбора = Ложь;
	ВыбФормаОтчета.Организация = ТекФорма.Организация;
	ВыбФормаОтчета.НомерКорректировки = НомерКорректировки;
	ВыбФормаОтчета.ДатаПодписи = ТекущаяДата();

	//КнопкаЗаполнить = ВыбФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Заполнить");
	ВыбФормаОтчета.Открыть();
	ВыбФормаОтчета.ЗаполнитьАвто();
	ВыбФормаОтчета.Сохранить();
	//ВыбФормаОтчета.Модифицированность = Истина;
	Если НЕ ВыбФормаОтчета.мСохраненныйДок = Неопределено Тогда
	
	    РегламентированныйОтчет = ВыбФормаОтчета.мСохраненныйДок.Ссылка;
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	КонецЕсли; 
	
/////////////////
КонецПроцедуры

#Если Клиент Тогда
Функция ВопросОбОчистке()
	
	ТекстВопроса = "Сохраненный регламентированный отчет не может быть использован из-за несоответствия данных. Будет заведен новый. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
#КонецЕсли

Процедура ОткрепитьСохраненнуюДекларацию() Экспорт
	
	Если НЕ РегламентированныйОтчет.Пустая() Тогда
		РегламентированныйОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();	
		#Если Клиент Тогда
			Сообщить("Регламентированный отчет откреплен!");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда
Процедура ОбработкаУдаленияПроведения(Отказ)
	ТекстВопроса = "Будет очищен список основных средств и потребуется заполнить документ заново. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		Раздел2.Очистить();
		Если НЕ РегламентированныйОтчет.Пустая() Тогда
			РегламентированныйОтчетОбъект = РегламентированныйОтчет.ПолучитьОбъект();
			Попытка
				РегламентированныйОтчетОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			РегламентированныйОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
			Попытка
				Записать();                                 
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;                             
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	НалогВБюджет = (Раздел2.Итог("ОстаточнаяСтоимостьСредняя") - Раздел2.Итог("СтоимостьЛьготируемогоИмущества")) * мСтавкаНалога / 100;									  

	Если НЕ РегламентированныйОтчет.Пустая() Тогда
		РеглОтчетОбъект = РегламентированныйОтчет.ПолучитьОбъект();
		Если ЭтотОбъект.ПометкаУдаления Тогда
		    РеглОтчетОбъект.ПометкаУдаления = Истина;
		Иначе	
		    РеглОтчетОбъект.ПометкаУдаления = Ложь;
		КонецЕсли; 
		РеглОтчетОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанныеПоАвтотранспортуИзОтчета(мСохраненныйДок) Экспорт   
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	
	ВыбФормаОтчета = Отчеты.РегламентированныйОтчетАвансыТранспорт.ПолучитьФорму(мСохраненныйДок.ВыбраннаяФорма);
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Если мСтруктураМногострочныхРазделов.П0000200020.Колонки.Найти("П000020002015") = Неопределено Тогда
			мСтруктураМногострочныхРазделов.П0000200020.Колонки.Добавить("П000020002015");
		КонецЕсли;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			Для каждого Строка Из СтруктураГруппы Цикл
				
				Если НЕ ЗначениеЗаполнено(Строка.П000020002014) Тогда
					Прервать;	
				КонецЕсли; 
			
				НоваяСтрока = Раздел2.Добавить();
				//НоваяСтрока.Код = Строка.П000020002002;
				//НоваяСтрока.НомерПаспорта = Строка.П000020002003;
				Марка = Справочники.МаркиТранспортныхСредств.НайтиПоНаименованию(Строка.П000020002004,Истина);
                Если Марка.Наименование = "" Тогда
					Марка = Справочники.МаркиТранспортныхСредств.ПустаяСсылка();
				КонецЕсли; 
			//	НоваяСтрока.Марка = Марка;				
			//	НоваяСтрока.РегистрационныйЗнак = Строка.П000020002005;
			//НоваяСтрока.Мощность = Строка.П000020002006;
			//НоваяСтрока.Коэффициент = Строка.П000020002009;
			//НоваяСтрока.СтавкаНалога = Строка.П000020002010;
			//	НоваяСтрока.Налог = Строка.П000020002011;
			//НоваяСтрока.Льгота = Строка.П000020002013;
			//	НоваяСтрока.НалогВБюджет = Строка.П000020002014;
				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьДанныеПоАвтотранспортуИзОтчета()

Процедура ПриКопировании(ОбъектКопирования)
	
	//Принудительно очищаем прикрепленный отчет
	РегламентированныйОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
	
КонецПроцедуры

// { RGS LFedotova 20.02.2018 15:34:28 - вопрос SLI-0007489
Процедура ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ТаблицыНачислениеНалога = РасчетИмущественныхНалогов.ПодготовитьТаблицыРасчетНалога(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов, Отказ);
		
	Если ТаблицыНачислениеНалога.Свойство("Ошибки") Тогда
		Для Каждого Ошибка Из ТаблицыНачислениеНалога.Ошибки Цикл
			//ДобавитьПростоеОписаниеОшибки(Ошибка.ТекстСообщения, Ошибка.СсылкаДляПерехода, Отказ);
			ОбщегоНазначения.СообщитьОбОшибке(Ошибка.ТекстСообщения, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ТаблицаОтражениеНалогаВУСН = УчетУСН.ПодготовитьТаблицуРасходовПоИмущественномуНалогу(
	//	ТаблицыНачислениеНалога.ТаблицаПроводок, ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетИмущественныхНалогов.СформироватьДвиженияРасчетНалога(
		ТаблицыНачислениеНалога,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		Движения,
		Отказ);
		
	//УчетУСН.СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
	//	ТаблицаОтражениеНалогаВУСН,
	//	ТаблицыНачислениеНалога.ТаблицаДвиженийПлатон,
	//	ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
	//	ЭтотОбъект,
	//	Отказ);
		
КонецПроцедуры

Функция ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	НачалоПериода = НачалоГода(СтруктураШапки.НачДата);
	ИмяРегистраРасчетНалогов = "РасчетНалогаНаИмущество";
	
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Начислен %1 за %2'"),
	Строка(СтруктураШапки.ВидНалога),
	ПредставлениеПериода(НачалоПериода, СтруктураШапки.КонДата, "ФП = Истина"));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	Запрос.УстановитьПараметр("ВидНалога", СтруктураШапки.ВидНалога);
	Запрос.УстановитьПараметр("ИмяРегистраРасчетНалогов", ИмяРегистраРасчетНалогов);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетИмущественныхНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	РегламентнаяОперация.Ссылка КАК Регистратор,
	//|	РегламентнаяОперация.Организация КАК Организация,
	//|	РегламентнаяОперация.Дата КАК Период,
	//|	&ВидНалога КАК ВидНалога,
	//|	&Содержание КАК Содержание,
	//|	&ИмяРегистраРасчетНалогов КАК ИмяРегистраРасчетНалогов
	//|ИЗ
	//|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	//|ГДЕ
	//|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.ПодразделениеОрганизации КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВидНалога КАК ВидНалога,
	|	&Содержание КАК Содержание,
	|	&ИмяРегистраРасчетНалогов КАК ИмяРегистраРасчетНалогов
	|ИЗ
	|	Документ.ФормированиеНалогаНаИмущество КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ЗаполнитьСтруктуруШапкиДокумента(НачДата, КонДата)
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("НачДата",НачДата);
	СтруктураШапкиДокумента.Вставить("КонДата",КонДата);
	СтруктураШапкиДокумента.Вставить("НачГода",НачалоГода(НачДата));
	СтруктураШапкиДокумента.Вставить("Организация",ПодразделениеОрганизации);
	СтруктураШапкиДокумента.Вставить("Ссылка",Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",КонДата);
	СтруктураШапкиДокумента.Вставить("Номер",Номер);
	СтруктураШапкиДокумента.Вставить("ВидОперации",Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество);
	СтруктураШапкиДокумента.Вставить("Заголовок","Проведение документа Формирование налога на имущество " + Номер + " от " + Дата);
	СтруктураШапкиДокумента.Вставить("ГоловноеПодразделение",ПодразделениеОрганизации);
	СтруктураШапкиДокумента.Вставить("Предприниматель",Ложь);
	СтруктураШапкиДокумента.Вставить("СписокОрганизаций",ПодразделениеОрганизации);
	СтруктураШапкиДокумента.Вставить("ЕстьОбособленноеПодразделение",Ложь);
	СтруктураШапкиДокумента.Вставить("ВидНалога",Справочники.ВидыНалоговИПлатежейВБюджет.НалогНаИмущество);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции
// } RGS LFedotova 20.02.2018 15:34:32 - вопрос SLI-0007489

мАвтоВыборКодов = Ложь;

мКодыОКЕИ = Новый ТаблицаЗначений;
мКодыОКЕИ.Колонки.Добавить("Код",,,5);
мКодыОКЕИ.Колонки.Добавить("Название",,,70);

мДелитель = 1;
ТочностьЕдиницыИзмерения = 1;
мСтавкаНалога = 2.2;