
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ПоддержкаПБУ18;

//Добавил РГ-Софт - Пронин Иван
Перем мУдалятьДвижения;
//Конец добавления

//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
Перем мДатаПроведения Экспорт;
//<-

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	мСтрокаРеквизитыБухУчета = "ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ";
	мСтрокаРеквизитыНалУчета = "ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, , СтруктураШапкиДокумента);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию 
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
		или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание
		тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	РеквизитыТабОС = "ОсновноеСредство";//, СтоимостьБУ, СтоимостьНУ";
	
	// Логические проверки
	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("ОсновноеСредство",           "ОсновноеСредство");
	//СтруктураПолей.Вставить("СтатусСтатЗатрат", "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	//СтруктураПолей.Вставить("ВидРасходов",      "СтатьяЗатрат.ВидРасходов");
	//ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
	
	//// Проверим что нет услуг
	//Для Каждого Строка Из ТаблицаМатериалов Цикл
	//	Если Строка.Услуга Тогда
	//		ОбщегоНазначения.ОшибкаПриПроведении("Нельзя использовать услугу! (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
	//	КонецЕсли;
	//	Если ОбщегоНазначения.ЗначениеНеЗаполнено(Строка.ВидРасходов) Тогда
	//		ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид расходов в статье затрат (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЦикла;
	
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС", СтруктураШапкиДокумента);
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокПогашенияСтоимостиБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок погашения стоимости (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса Тогда
			
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			//Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.Направление_БУ) Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
			//	Отказ = Истина;
			//КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
				Если НЕ СтрокаОС.ОтражалосьВНалоговомУчете Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в налоговом учете (по налогу на прибыль) по указанной организации.",,, СтатусСообщения.Важное);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет учета (НУ).",,, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не установлен порядок включения стоимости в состав расходов (НУ).",,, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указан счет начисления амортизации (НУ).",,, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;
				
				//Если ОбщегоНазначения.ЗначениеНеЗаполнено(СтрокаОС.Направление_НУ) Тогда
				//	ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> не указаны способы отражения расходов по амортизации (НУ).",,, СтатусСообщения.Важное);
				//	Отказ = Истина;
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

Процедура ПроверитьНаличиеВыбывшихОС(ТаблицаПоОС, Отказ)
	
	Для каждого Строка Из ТаблицаПоОС Цикл
		Если Строка.СнятоСУчета Тогда
		    Отказ = Истина;
			Сообщить("Основное средство " + Строка.ОсновноеСредство + ", строка " + Строка.НомерСтроки +
			       " снято с учета.");
		КонецЕсли; 
	КонецЦикла; 
	Если Отказ Тогда
		Сообщить("Документ не может быть проведен.");
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьНаличиеВыбывшихОС()

Процедура ПроверитьМестонахождениеОС(ТаблицаПоОС, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабОС.ОсновноеСредство,
		|	ТабОС.НомерСтроки
		|ПОМЕСТИТЬ ОС
		|ИЗ
		|	&ТабОС КАК ТабОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
		|	ОС.ОсновноеСредство,
		|	ОС.НомерСтроки
		|ИЗ
		|	ОС КАК ОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение <> &ПодразделениеОрганизации";

	Запрос.УстановитьПараметр("ТабОС", ТаблицаПоОС);
	Если СписыватьПоДатеНалоговогоПериода Тогда
		Запрос.УстановитьПараметр("Дата", НалоговыйПериод);
	Иначе
		Запрос.УстановитьПараметр("Дата", ДатаПроведения);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщить("Местонахождение " + СокрЛП(ВыборкаДетальныеЗаписи.Местонахождение) + " основного средства " + 
		ВыборкаДетальныеЗаписи.ОсновноеСредство + ", строка " + ВыборкаДетальныеЗаписи.НомерСтроки + "
		|не соответствует подразделению " + СокрЛП(ПодразделениеОрганизации) + " документа.");
		Отказ = Истина;
	КонецЦикла;

	Если Отказ Тогда
		Сообщить("Документ не может быть проведен.");
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьМестонахождениеОС()

Процедура ВыполнитьДвиженияПоРегиструСтоимостьАмортизацияОС(Документ, СписокОС) Экспорт
	
	Отказ = Ложь;
	ДокументОбъект = Документ.ПолучитьОбъект();	
	ПодпискиНаСобытия.ПроверитьДатуПроведенияДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Сообщить("Выполняю движения документа " + Документ);
	
	//В этой процедуре будем перезаписывать движения по регистру "СтоимостьАмортизацииОС"
	
	//Ограничим СписокОС только теми ОС, которые есть в табличной части
	ТабЧасть = ОС.Выгрузить(,"ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.ОсновноеСредство
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ОсновноеСредство В(&СписокОС)";
	
	Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	СписокОС = Результат.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");	
	
	СтоимостьАмортизацияОСНабор = РегистрыНакопления.СтоимостьАмортизацияОС.СоздатьНаборЗаписей();
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Значение = Документ;
	СтоимостьАмортизацияОСНабор.Отбор.Регистратор.Использование = Истина;
	
	СтоимостьАмортизацияОСНабор.Прочитать();
	ИсходнаяТаблица = СтоимостьАмортизацияОСНабор.Выгрузить();
	
	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	НоваяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.ОсновноеСредство,
	|	ИсходнаяТаблица.СтоимостьБУ,
	|	ИсходнаяТаблица.СтоимостьНУ,
	|	ИсходнаяТаблица.СуммаКВ,
	|	ИсходнаяТаблица.АмортизацияБУ,
	|	ИсходнаяТаблица.АмортизацияНУ,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьАмортизацияОС.ОсновноеСредство,
	|	МИНИМУМ(СтоимостьАмортизацияОС.Период) КАК Период
	|ПОМЕСТИТЬ ПервыеСтрокиСтоимостьАмортизацияОС
	|ИЗ
	|	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	|ГДЕ
	|	СтоимостьАмортизацияОС.ОсновноеСредство В(&СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьАмортизацияОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьАмортизацияОС.ОсновноеСредство,
	|	СУММА(СтоимостьАмортизацияОС.АмортизацияБУ) КАК АмортизацияБУ,
	|	СУММА(СтоимостьАмортизацияОС.АмортизацияНУ) КАК АмортизацияНУ
	|ПОМЕСТИТЬ НачальнаяАмортизация
	|ИЗ
	|	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыеСтрокиСтоимостьАмортизацияОС КАК ПервыеСтрокиСтоимостьАмортизацияОС
	|		ПО СтоимостьАмортизацияОС.Период = ПервыеСтрокиСтоимостьАмортизацияОС.Период
	|			И СтоимостьАмортизацияОС.ОсновноеСредство = ПервыеСтрокиСтоимостьАмортизацияОС.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьАмортизацияОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновноеСредство,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.СтоимостьБУОстаток,
	|	ВложенныйЗапрос.СуммаКВОстаток,
	|	ВложенныйЗапрос.СтоимостьНУОстаток,
	|	ВложенныйЗапрос.АмортизацияБУ + ЕСТЬNULL(НачальнаяАмортизация.АмортизацияБУ, 0) КАК АмортизацияБУ,
	|	ВложенныйЗапрос.АмортизацияНУ + ЕСТЬNULL(НачальнаяАмортизация.АмортизацияНУ, 0) КАК АмортизацияНУ,
	|	ВложенныйЗапрос.ПодразделениеСписания
	|ПОМЕСТИТЬ ТаблицаПоОс
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьАмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|		ЕСТЬNULL(РасчетАмортизацииОССвернутый.Подразделение, СтоимостьАмортизацияОСОстатки.Подразделение) КАК Подразделение,
	|		СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток
	|			ИНАЧЕ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток - СтоимостьАмортизацияОСОстатки.СуммаКВОстаток
	|		КОНЕЦ КАК СтоимостьНУОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.СуммаКВОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаКВОстаток,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаБУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.АмортизацияБУОстаток
	|			ИНАЧЕ ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаБУ, 0)
	|		КОНЕЦ КАК АмортизацияБУ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0) = 0
	|				ТОГДА СтоимостьАмортизацияОСОстатки.АмортизацияНУОстаток
	|			ИНАЧЕ ЕСТЬNULL(РасчетАмортизацииОССвернутый.СуммаНУ, 0)
	|		КОНЕЦ КАК АмортизацияНУ,
	|		СтоимостьАмортизацияОСОстатки.Подразделение КАК ПодразделениеСписания
	|	ИЗ
	|		РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&МоментВремени, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение КАК Подразделение,
	|				СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	|				СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	|			ИЗ
	|				РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	|			ГДЕ
	|				РасчетАмортизацииОС.ПериодАмортизации <= &ПериодАмортизации
	|				И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетАмортизацииОС.ОсновноеСредство,
	|				РасчетАмортизацииОС.Подразделение) КАК РасчетАмортизацииОССвернутый
	|			ПО СтоимостьАмортизацияОСОстатки.ОсновноеСредство = РасчетАмортизацииОССвернутый.ОсновноеСредство) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальнаяАмортизация КАК НачальнаяАмортизация
	|		ПО ВложенныйЗапрос.ОсновноеСредство = НачальнаяАмортизация.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство) КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СтоимостьБУОстаток, ВложенныйЗапрос.СтоимостьБУ)) КАК СтоимостьБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СуммаКВОстаток, ВложенныйЗапрос.СуммаКВ)) КАК СуммаКВ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.СтоимостьНУОстаток, ВложенныйЗапрос.СтоимостьНУ)) КАК СтоимостьНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаПоОС.ПодразделениеСписания, ВложенныйЗапрос.ПодразделениеСписания)) КАК ПодразделениеСписания,
	|	Место.Местонахождение КАК Местонахождение,
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияБУ, ВложенныйЗапрос.АмортизацияБУ) КАК АмортизацияБУ,
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ВложенныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство,
	|		ИсходнаяТаблица.СтоимостьБУ КАК СтоимостьБУ,
	|		ИсходнаяТаблица.СтоимостьНУ КАК СтоимостьНУ,
	|		ИсходнаяТаблица.СуммаКВ КАК СуммаКВ,
	|		ИсходнаяТаблица.АмортизацияБУ КАК АмортизацияБУ,
	|		ИсходнаяТаблица.АмортизацияНУ КАК АмортизацияНУ,
	|		ИсходнаяТаблица.Подразделение КАК Подразделение,
	|		ВложенныйЗапрос.Подразделение КАК ПодразделениеСписания
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ИсходнаяТаблица.Подразделение КАК Подразделение,
	|				ИсходнаяТаблица.ОсновноеСредство КАК ОсновноеСредство
	|			ИЗ
	|				ИсходнаяТаблица КАК ИсходнаяТаблица
	|			ГДЕ
	|				НЕ(ИсходнаяТаблица.СтоимостьБУ = 0
	|							И ИсходнаяТаблица.СтоимостьНУ = 0
	|							И ИсходнаяТаблица.СуммаКВ = 0)) КАК ВложенныйЗапрос
	|			ПО ИсходнаяТаблица.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство) КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПоОс КАК ТаблицаПоОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|				МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Местонахождение
	|			ИЗ
	|				РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|						&МоментВремени,
	|						ОсновноеСредство В
	|							(ВЫБРАТЬ
	|								таблицапоОС.ОсновноеСредство
	|							ИЗ
	|								таблицапоОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних) КАК Место
	|			ПО ТаблицаПоОС.ОсновноеСредство = Место.ОсновноеСредство
	|		ПО ВложенныйЗапрос.ОсновноеСредство = ТаблицаПоОС.ОсновноеСредство
	|			И ВложенныйЗапрос.Подразделение = ТаблицаПоОС.Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	Место.Местонахождение,
	|	ЕСТЬNULL(ТаблицаПоОС.ОсновноеСредство, ВложенныйЗапрос.ОсновноеСредство),
	|	ЕСТЬNULL(ТаблицаПоОС.Подразделение, ВложенныйЗапрос.Подразделение),
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияБУ, ВложенныйЗапрос.АмортизацияБУ),
	|	ЕСТЬNULL(ТаблицаПоОС.АмортизацияНУ, ВложенныйЗапрос.АмортизацияНУ)
	|ИТОГИ
	|	МАКСИМУМ(СтоимостьБУ),
	|	МАКСИМУМ(СуммаКВ),
	|	МАКСИМУМ(СтоимостьНУ),
	|	МАКСИМУМ(ПодразделениеСписания),
	|	МАКСИМУМ(Местонахождение)
	|ПО
	|	ОсновноеСредство";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
	Если СписыватьПоДатеНалоговогоПериода Тогда
		Запрос.УстановитьПараметр("МоментВремени", Документ.НалоговыйПериод + 2*3600);
		Запрос.УстановитьПараметр("ПериодАмортизации", Документ.НалоговыйПериод);
    Иначе
		Запрос.УстановитьПараметр("МоментВремени", Документ.ДатаПроведения + 2*3600);
		Запрос.УстановитьПараметр("ПериодАмортизации", Документ.ДатаПроведения);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	ВыборкаОС = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОС.Следующий() Цикл
	//	НоваяСтрока					 = НоваяТаблица.Добавить();
	//	НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
	//	НоваяСтрока.Активность		 = Истина;
	//	НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения);
	//	НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
	//	НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	//	НоваяСтрока.Подразделение    = ВыборкаОС.ПодразделениеСписания;
	//	НоваяСтрока.СтоимостьБУ  	 = ВыборкаОС.СтоимостьБУ;      
	//	НоваяСтрока.СтоимостьНУ   	 = ВыборкаОС.СтоимостьНУ;      
	//	НоваяСтрока.СуммаКВ			 = ВыборкаОС.СуммаКВ;
	
		//Выборка = Результат.Выбрать();
		СтоимостьСписана = Ложь;
		Выборка = ВыборкаОС.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока					 = НоваяТаблица.Добавить();
			НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Активность		 = Истина;
			Если СписыватьПоДатеНалоговогоПериода Тогда
				НоваяСтрока.Период       	 = Документ.НалоговыйПериод + 2*3600;
			Иначе	
				НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения) + 2*3600;
			КонецЕсли; 
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
			НоваяСтрока.Подразделение    = Выборка.Подразделение;
			Если Выборка.Подразделение = Выборка.Местонахождение Тогда
				НоваяСтрока.СтоимостьБУ  	 = Выборка.СтоимостьБУ;      
				НоваяСтрока.СтоимостьНУ   	 = Выборка.СтоимостьНУ;   
				НоваяСтрока.СуммаКВ			 = Выборка.СуммаКВ;
				СтоимостьСписана = Истина;
			КонецЕсли;
			НоваяСтрока.АмортизацияБУ	 = Выборка.АмортизацияБУ;
			НоваяСтрока.АмортизацияНУ	 = Выборка.АмортизацияНУ;
		КонецЦикла;
		Если НЕ СтоимостьСписана Тогда
			НоваяСтрока					 = НоваяТаблица.Добавить();
			НоваяСтрока.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Активность		 = Истина;
			Если СписыватьПоДатеНалоговогоПериода Тогда
				НоваяСтрока.Период       	 = Документ.НалоговыйПериод + 2*3600;
			Иначе	
				НоваяСтрока.Период       	 = ?(Документ.ДатаПроведения = '0001.01.01',Документ.Дата,Документ.ДатаПроведения) + 2*3600;
			КонецЕсли; 
			НоваяСтрока.НалоговыйПериод  = ?(Документ.НалоговыйПериод = '0001.01.01',НоваяСтрока.Период,Документ.НалоговыйПериод);
			НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
			НоваяСтрока.Подразделение    = ВыборкаОС.Местонахождение;
			НоваяСтрока.СтоимостьБУ  	 = ВыборкаОС.СтоимостьБУ;      
			НоваяСтрока.СтоимостьНУ   	 = ВыборкаОС.СтоимостьНУ;   
			НоваяСтрока.СуммаКВ			 = ВыборкаОС.СуммаКВ;
		КонецЕсли;
	КонецЦикла;
	НоваяТаблица.ЗаполнитьЗначения(Документ, "Регистратор");
	СтоимостьАмортизацияОСНабор.Загрузить(НоваяТаблица);
	СтоимостьАмортизацияОСНабор.Записать();
	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		//Хорошо бы здесь сравнить таблицы документа до заполнения и после, и если они совпадают, 
		//то ничего не записывать и не сообщать о перезаполнении
		Сообщить("Перезаполнена табличная часть документа " + Документ);
		ДокументОбъект.Записать();
	КонецЕсли;
	
	ФормаДок = Документ.ПолучитьФорму();
	Если НЕ ФормаДок.Открыта() Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ОСЗаполнитьДляСписка(ДокументОбъект);
		//Хорошо бы здесь сравнить таблицы документа до заполнения и после, и если они совпадают, 
		//то ничего не записывать и не сообщать о перезаполнении
		Сообщить("Перезаполнена табличная часть документа " + Документ);
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоОС);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если СписыватьПоДатеНалоговогоПериода Тогда
		ДатаДока       = НалоговыйПериод;
	Иначе
		ДатаДока       = ДатаПроведения;
	КонецЕсли;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	НомерЖурнала   = "ОС";
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	//Получение срезап оследних по регистру НачислениеАмортизации
	масОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	Если СписыватьПоДатеНалоговогоПериода Тогда
		табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(НалоговыйПериод, Организация, масОС);
	Иначе
		табНачислениеАмортизацииПервоначальныеСведения = УправлениеВнеоборотнымиАктивами.ПолучитьТаблицуПоАмортизации(ДатаПроведения, Организация, масОС);
	КонецЕсли;
	
	// Создание движений документа по БУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		//Добавил РГ-Софт - Пронин Иван - 2009-09-21
		// Движения по регистру СостоянияОСОрганизаций
		Движение = СостояниеОС.Добавить();
		Если СписыватьПоДатеНалоговогоПериода Тогда
			Движение.ДатаСостояния    = НалоговыйПериод;
		Иначе
			Движение.ДатаСостояния    = ДатаПроведения;
		КонецЕсли;
		Движение.ОсновноеСредство = ТекОС;
		Движение.Организация      = ТекОрганизация;
		Движение.Состояние        = Перечисления.СостоянияОС.СнятоСУчета;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Если СписыватьПоДатеНалоговогоПериода Тогда
			Движение.Период             = НалоговыйПериод + 2*3600;
		Иначе
			Движение.Период             = ?(ДатаПроведения = '0001.01.01',ДатаДока,ДатаПроведения) + 2*3600;
		КонецЕсли;
		Движение.ОсновноеСредство   = ТекОС;
		Движение.Организация        = ТекОрганизация;
		Движение.Событие 			= СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента	= Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента		= СтруктураШапкиДокумента.Номер;
		
		//Добавил РГ-Софт - Пронин Иван - 2009-09-21
		// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
		ДвижениеВТаблице = табНачислениеАмортизацииПервоначальныеСведения.Найти(СтрокаТЧ.ОсновноеСредство, "ОсновноеСредство");
		ДвижениеВТаблице.ЕстьДвижениеНачислениеАмортизации = Истина;
		ДвижениеВТаблице.НачислятьБУ = Ложь;
		ДвижениеВТаблице.НачислятьНУ = Ложь;
		
	КонецЦикла;
	
	
	//Добавил РГ-Софт - Пронин Иван - 2009-09-21
	// Движения по регистрам НачислениеАмортизации и ПервоначальныеСведения
	Для Каждого Запись Из табНачислениеАмортизацииПервоначальныеСведения Цикл
		Если Запись.ЕстьДвижениеНачислениеАмортизации Тогда
			Движение = Движения.НачислениеАмортизации.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
			Если Движение.СпециальныйКоэффициент = 0 Тогда
				Движение.СпециальныйКоэффициент = 1;
			КонецЕсли;
		КонецЕсли;
		Если Запись.ЕстьДвижениеПервоначальныеСведения Тогда
			Движение = Движения.ПервоначальныеСведения.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Запись);
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 Как Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма02ВР,
	|	0 КАК Сумма01ПР,
	|	0 КАК Сумма01ВР,
	|	0 КАК Сумма01
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	|
	|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	|Субконто1 ";
	
	Если СписыватьПоДатеНалоговогоПериода Тогда
		Запрос.УстановитьПараметр("НачДата",  началоМесяца(НалоговыйПериод));
		Запрос.УстановитьПараметр("КонДата",  КонецМесяца(НалоговыйПериод));
	Иначе
		Запрос.УстановитьПараметр("НачДата",  началоМесяца(ДатаПроведения));
		Запрос.УстановитьПараметр("КонДата",  КонецМесяца(ДатаПроведения));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();
	
	ПроводкиНУ              = Движения.Налоговый;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОС = СписокОС.Найти(Выборка.Субконто1, "ОсновноеСредство");
		
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			
			Если СписыватьПоДатеНалоговогоПериода Тогда
				ПроводкаНУ.Период       = НалоговыйПериод;
			Иначе
				ПроводкаНУ.Период       = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			КонецЕсли;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(ПроводкаНУ.Период), КонецМесяца(ПроводкаНУ.Период));
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			Если СписыватьПоДатеНалоговогоПериода Тогда
				ПроводкаНУ.Период       = НалоговыйПериод;
			Иначе
				ПроводкаНУ.Период       = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			КонецЕсли;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(ПроводкаНУ.Период), КонецМесяца(ПроводкаНУ.Период));
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			Если СписыватьПоДатеНалоговогоПериода Тогда
				ПроводкаНУ.Период       = НалоговыйПериод;
			Иначе
				ПроводкаНУ.Период       = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			КонецЕсли;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(ПроводкаНУ.Период), КонецМесяца(ПроводкаНУ.Период));
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
			
		КонецЕсли;
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			Если СписыватьПоДатеНалоговогоПериода Тогда
				ПроводкаНУ.Период       = НалоговыйПериод;
			Иначе
				ПроводкаНУ.Период       = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения);
			КонецЕсли;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(ПроводкаНУ.Период), КонецМесяца(ПроводкаНУ.Период));
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			ОбщегоНазначения.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
	КонецЦикла;
	ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	// { RGS LFedotova 25.10.2016 11:34:55 - вопрос SLI-0006888
	// Проверим, есть ли движения позже даты документа
	ОбщегоНазначения.ПроверитьДвиженияПозжеДатыДокумента(ЭтотОбъект, Отказ);
	// } RGS LFedotova 25.10.2016 11:35:45 - вопрос SLI-0006888
	
	//Добавил РГ-Софт - Пронин Иван
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	КонецЕсли;
	//Конец добавления

	//отмена проведения требуется для случая, если изменена дата документа
	//УправлениеВнеоборотнымиАктивами.ОтменитьПроведениеПоРегистрамОСОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);	
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);   //flp временно
	
	// Выборка строк табличной части
	СписокОС =
	"ВЫБРАТЬ
	|	ПодготовкаКПередачеОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	|ГДЕ
	|	ПодготовкаКПередачеОСОС.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Если СписыватьПоДатеНалоговогоПериода Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НалоговыйПериод);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаПроведения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовкаКПередачеОСОС.НомерСтроки,
	|	ПодготовкаКПередачеОСОС.ОсновноеСредство,
	|	ПодготовкаКПередачеОСОС.СтоимостьБУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияБУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияЗаМесяцБУ,
	|	ПодготовкаКПередачеОСОС.СтоимостьНУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияНУ,
	|	ПодготовкаКПередачеОСОС.АмортизацияЗаМесяцНУ,
	|	ПодготовкаКПередачеОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНУ,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток) ЕСТЬ NULL ИЛИ СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток = 0 ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
	|			&ДатаДокумента,
	|		    ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияСрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаНалоговогоУчетаОССрезПоследних
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В( " + СписокОС + " ) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&ДатаДокумента, ОсновноеСредство В ( " + СписокОС + " ))  КАК СтоимостьАмортизацияОСОстатки
	|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	|ГДЕ
	|	ПодготовкаКПередачеОСОС.Ссылка = &Ссылка";
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим, есть ли среди ОС списанные с учета
	ПроверитьНаличиеВыбывшихОС(ТаблицаПоОС, Отказ);
	
	// Проверим местонахождение ОС
	ПроверитьМестонахождениеОС(ТаблицаПоОС, Отказ);
	
	// Проверим, достаточно ли данных в таблице по ОС
	//ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);     //flp 
	
	Если НЕ Отказ Тогда
		Если СписыватьПоДатеНалоговогоПериода Тогда
			ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.НалоговыйПериод);	
		Иначе
			ПоддержкаПБУ18 = ОбщегоНазначения.ПрименениеПБУ18(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.ДатаПроведения);	
		КонецЕсли;

		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
		//Закомментировала Федотова Л., РГ-Софт, 21.03.13, вопрос SLI-0003426
		//Для Каждого СтрокаОС Из ОС Цикл 
		//	Если СтрокаОС.ОсновноеСредство.Автотранспорт Тогда
		//		Попытка 
		//			Запись = РегистрыСведений.РегистрацияВГАИ.СоздатьМенеджерЗаписи();
		//			Запись.Локация = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		//			Запись.РегистрационныйЗнак = "";
		//			Запись.ОС = СтрокаОС.ОсновноеСредство;
		//			Если СписыватьПоДатеНалоговогоПериода Тогда
		//				Запись.Период = НалоговыйПериод; 
		//			Иначе
		//				Запись.Период = ?(ДатаПроведения = '0001.01.01',Дата,ДатаПроведения); 
		//			КонецЕсли;
		//			Запись.Записать();
		//		Исключение
		//		КонецПопытки;
		//	КонецЕсли;
		//КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();
	КонецЦикла; 
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = ДатаПроведения;
	//<-

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ОСЗаполнитьДляСписка(ДокОбъект) Экспорт
	
	Если СписыватьПоДатеНалоговогоПериода Тогда
		МоментДокумента = Новый МоментВремени(ДокОбъект.НалоговыйПериод, ДокОбъект.Ссылка);
	Иначе
		МоментДокумента = Новый МоментВремени(ДокОбъект.ДатаПроведения, ДокОбъект.Ссылка);
	КонецЕсли;
	
	СписокОС = ДокОбъект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(СтоимостьАмортизацияОС.Период) КАК Период,
	               |	СтоимостьАмортизацияОС.ОсновноеСредство
	               |ПОМЕСТИТЬ ПериодыПоступления
	               |ИЗ
	               |	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	               |ГДЕ
	               |	СтоимостьАмортизацияОС.ОсновноеСредство В(&СписокОС)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтоимостьАмортизацияОС.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтоимостьАмортизацияОС.ОсновноеСредство,
	               |	СУММА(СтоимостьАмортизацияОС.АмортизацияБУ) КАК НачАмортизацияБУ,
	               |	СУММА(СтоимостьАмортизацияОС.АмортизацияНУ) КАК НачАмортизацияНУ
	               |ПОМЕСТИТЬ НачАмортизация
	               |ИЗ
	               |	РегистрНакопления.СтоимостьАмортизацияОС КАК СтоимостьАмортизацияОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыПоступления КАК ПериодыПоступления
	               |		ПО СтоимостьАмортизацияОС.ОсновноеСредство = ПериодыПоступления.ОсновноеСредство
	               |			И СтоимостьАмортизацияОС.Период = ПериодыПоступления.Период
	               |ГДЕ
	               |	СтоимостьАмортизацияОС.ОсновноеСредство В(&СписокОС)
	               |	И НЕ СтоимостьАмортизацияОС.Регистратор ССЫЛКА Документ.НачислениеАмортизации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтоимостьАмортизацияОС.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОС_ИнвенНомер.ОсновноеСредство,
	               |	СтоимостьАмортизацияОСОстатки.СтоимостьБУОстаток КАК СтоимостьБУ,
	               |	СтоимостьАмортизацияОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	               |	ЕСТЬNULL(АмортизацияЗаПериод.СуммаБУ, 0) + ЕСТЬNULL(НачАмортизация.НачАмортизацияБУ, 0) КАК АмортизацияБУ,
	               |	ЕСТЬNULL(АмортизацияЗаПериод.СуммаНУ, 0) + ЕСТЬNULL(НачАмортизация.НачАмортизацияНУ, 0) КАК АмортизацияНУ,
	               |	СтоимостьАмортизацияОСОстатки.СуммаКВОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	               |	ОС_ИнвенНомер.ИнвентарныйНомер,
	               |	АмортизацияЗаМесяц.СуммаБУ КАК АмортизацияЗаМесяцБУ,
	               |	АмортизацияЗаМесяц.СуммаНУ КАК АмортизацияЗаМесяцНУ,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.КостЦентр
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	               |		ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер
	               |	ИЗ
	               |		РегистрСведений.ПервоначальныеСведения.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения) КАК ОС_ИнвенНомер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	               |		ПО ОС_ИнвенНомер.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьАмортизацияОС.Остатки(&Дата, ОсновноеСредство В (&СписокОС)) КАК СтоимостьАмортизацияОСОстатки
	               |		ПО ОС_ИнвенНомер.ОсновноеСредство = СтоимостьАмортизацияОСОстатки.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	               |			РасчетАмортизацииОС.СуммаБУ КАК СуммаБУ,
	               |			РасчетАмортизацииОС.СуммаНУ КАК СуммаНУ
	               |		ИЗ
	               |			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	               |		ГДЕ
	               |			РасчетАмортизацииОС.ПериодАмортизации = НАЧАЛОПЕРИОДА(&ДатаН, МЕСЯЦ)
	               |			И РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)) КАК АмортизацияЗаМесяц
	               |		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаМесяц.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РасчетАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	               |			СУММА(РасчетАмортизацииОС.СуммаБУ) КАК СуммаБУ,
	               |			СУММА(РасчетАмортизацииОС.СуммаНУ) КАК СуммаНУ
	               |		ИЗ
	               |			РегистрСведений.РасчетАмортизацииОС КАК РасчетАмортизацииОС
	               |		ГДЕ
	               |			РасчетАмортизацииОС.ОсновноеСредство В(&СписокОС)
	               |			И РасчетАмортизацииОС.ПериодАмортизации < &ДатаН
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			РасчетАмортизацииОС.ОсновноеСредство) КАК АмортизацияЗаПериод
	               |		ПО ОС_ИнвенНомер.ОсновноеСредство = АмортизацияЗаПериод.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НачАмортизация КАК НачАмортизация
	               |		ПО ОС_ИнвенНомер.ОсновноеСредство = НачАмортизация.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	//Запрос.УстановитьПараметр("Дата", Новый Граница(НачалоМесяца(ДокОбъект.Дата), ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("Дата", ДокОбъект.МоментВремени()); //изменила Федотова Л., РГ-Софт, 18.05.10, вопр. №SLI001418  
	//Добавила условие Федотова Л., РГ-Софт, 13.01.13, вопрос SLI-0003147
	Если СписыватьПоДатеНалоговогоПериода Тогда
		Запрос.УстановитьПараметр("Дата", ДокОбъект.НалоговыйПериод + 2*3600 - 1); //изменила Федотова Л., РГ-Софт, 23.08.11  
		Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.НалоговыйПериод));
	Иначе
		Запрос.УстановитьПараметр("Дата", ДатаПроведения + 2*3600 - 1); //изменила Федотова Л., РГ-Софт, 23.08.11  
		Запрос.УстановитьПараметр("ДатаН", НачалоМесяца(ДокОбъект.ДатаПроведения));
	КонецЕсли;
	
	табСведенияОС = Запрос.Выполнить().Выгрузить();
	табСведенияОС.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого Строка Из ОС Цикл	
		НайденноеОС = табСведенияОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство");
		Если НЕ НайденноеОС = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденноеОС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОСЗаполнитьДляСписка(ЭтотОбъект);
	КонецЕсли;
	
	//Добавил РГ-Софт - Пронин Иван
	мУдалятьДвижения = НЕ ЭтоНовый();
	//Конец добавления
КонецПроцедуры

//Добавил РГ-Софт - Пронин Иван
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,, Истина);
	
	//Добавила Федотова Людмила, РГ-Софт, 27.09.12, вопрос №SLI-0002821 ->
	мДатаПроведения = Неопределено;
	//<-

КонецПроцедуры

// РГ-СОФТ Фролов , для печати ОС4
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС4","ОС-4");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 //РГ - СОФТ Фролов
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС4" Тогда
		
		ТабДокумент = ПечатьОС4();
		
	КонецЕсли; 
	
	ФормированиеПечатныхФорм.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры // Печать

//РГ- СОФТ Фролов, Функция формирует табличный документ с печатной формой ОС4,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьОС4()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодготовкаКПередачеОС.Номер КАК НомерДок,
	               |	ПодготовкаКПередачеОС.Дата КАК ДатаДок,
	               |	ПодготовкаКПередачеОС.СобытиеОС КАК Состояние,
	               |	ПодготовкаКПередачеОС.ПричинаСписания КАК ПричинаСписания,
	               |	ПодготовкаКПередачеОС.Организация КАК Организация,
	               |	ПодготовкаКПередачеОС.Организация.КодПоОКПО КАК КодОКПО
	               |ИЗ
	               |	Документ.ПодготовкаКПередачеОС КАК ПодготовкаКПередачеОС
	               |ГДЕ
	               |	ПодготовкаКПередачеОС.Ссылка = &Ссылка";			   
	СтруктураДока = Запрос.Выполнить().Выбрать();
	СтруктураДока.Следующий();
	
	СведенияОбОрганизации    = КонтактнаяИнформация.СведенияОЮрФизЛице(СтруктураДока.Организация, СтруктураДока.ДатаДок);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	ОтветственныеЛица        = ОбщегоНазначения.ОтветственныеЛица(СтруктураДока.Организация, СтруктураДока.ДатаДок);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодготовкаКПередачеОСОС.НомерСтроки КАК НП,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство КАК ОС,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаимОС,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство.ГруппаОС КАК Группа,
		|	ПодготовкаКПередачеОСОС.АмортизацияБУ КАК НачАмортизация,
		|	ПодготовкаКПередачеОСОС.СтоимостьБУ КАК Стоимость,
		|	ПодготовкаКПередачеОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
		|	ПервоначальныеСведенияСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
		|	ПервоначальныеСведенияСрезПоследних.ПорядокПогашенияСтоимости,
		|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК Подразделение,
		|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
		|	ПодготовкаКПередачеОСОС.ОсновноеСредство.Автотранспорт КАК Автотранспорт,
		|	ПервоначальныеСведенияСрезПоследних.ПервоначальнаяСтоимостьБУ КАК НачСтоимость
		|ИЗ
		|	Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Документ.ПодготовкаКПередачеОС.ОС.ОсновноеСредство
		|						ИЗ
		|							Документ.ПодготовкаКПередачеОС.ОС
		|						ГДЕ
		|							Документ.ПодготовкаКПередачеОС.ОС.Ссылка = &Ссылка)) КАК МестонахождениеОсновныхСредствСрезПоследних
		|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведения.СрезПоследних(
		|				&ДатаДок,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Документ.ПодготовкаКПередачеОС.ОС.ОсновноеСредство
		|					ИЗ
		|						Документ.ПодготовкаКПередачеОС.ОС
		|					ГДЕ
		|						Документ.ПодготовкаКПередачеОС.ОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияСрезПоследних
		|		ПО ПодготовкаКПередачеОСОС.ОсновноеСредство = ПервоначальныеСведенияСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПодготовкаКПередачеОСОС.Ссылка = &Ссылка" ;
		ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 1 Тогда

		ВыборкаОС.Следующий();

		Если ВыборкаОС.Автотранспорт Тогда 
			Макет = ПолучитьМакет("ОС4а");
		Иначе
			Макет = ПолучитьМакет("ОС4");
		КонецЕсли;
	
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заполнить(СтруктураДока);
		Область.Параметры.Организация = ПредставлениеОрганизации;
		
		Область.Параметры.Заполнить(ВыборкаОС);
		Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) тогда
			Область.Параметры["НаимОС"] = ВыборкаОС.ОС;
		КонецЕслИ;
		
		ДокументПринятияКУчету     = "";
		ДокументВводаВЭксплуатацию = "";
		ПринятоКУчету              = "";
		ВведеноВЭксплуатацию       = "";

		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);
        
		Если ВыборкаОС.Автотранспорт Тогда
			Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
			Иначе
			Область.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; // это в месяцах - по 30 дней
		КонецЕсли;

		
		СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
		                ВыборкаОС.НачСтоимость,
		                ВыборкаОС.Стоимость);
						
		АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
		                  0,
		                  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
		
		Область.Параметры.ГодВыпуска     = ?(НЕ ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.ГодВыпуска), Год(ВыборкаОС.ГодВыпуска), 0);
		Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
		Область.Параметры.НачСтоимость   = СтоимостьОС;
		Область.Параметры.НачАмортизация = АмортизацияОС;
		Область.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;

		Область.Параметры.ГлавБух               = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		Область.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
		Область.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		
		ТабДокумент.Вывести(Область);

	Иначе

		Макет  = ПолучитьМакет("ОС4б");

		Шапка = Макет.ПолучитьОбласть("Шапка0");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Организация           = ПредставлениеОрганизации;
		Шапка.Параметры.Руководитель          = ОтветственныеЛица.РуководительПредставление;
		Шапка.Параметры.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		
		ТабДокумент.Вывести(Шапка);

		Шапка = Макет.ПолучитьОбласть("Шапка1");
		Шапка.Параметры.Заполнить(СтруктураДока);
		ТабДокумент.Вывести(Шапка);

		Строка1 = Макет.ПолучитьОбласть("Строка1");

		Пока ВыборкаОС.Следующий() Цикл

			Строка1.Параметры.Заполнить(ВыборкаОС);
			Если ОбщегоНазначения.ЗначениеНеЗаполнено(ВыборкаОС.НаимОС) Тогда
				Строка1.Параметры["НаимОС"] = ВыборкаОС.ОС;
			КонецЕсли;
			
			СтоимостьОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			                ВыборкаОС.НачСтоимость,
			                ВыборкаОС.Стоимость);
							
			АмортизацияОС = ?(ВыборкаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			                  0,
			                  ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц);
							
			Строка1.Параметры.Заполнить(СтруктураДока);
			Строка1.Параметры.НачСтоимость   = СтоимостьОС;
			Строка1.Параметры.НачАмортизация = АмортизацияОС;
			Строка1.Параметры.ОстСтоимость   = СтоимостьОС - АмортизацияОС;
			
			Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;

			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";

			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ВведеноВЭксплуатацию, ДокументВводаВЭксплуатацию, ВведеноВЭксплуатацию);
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС,Организация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчету,     ПринятоКУчету);

			Если ВведеноВЭксплуатацию = Неопределено Тогда
				
				Строка1.Параметры.СрокЭкспл = 0;
				
			Иначе
				
				КоличествоЛет     = Год(Дата) - Год(ВведеноВЭксплуатацию);
				КоличествоМесяцев = Месяц(Дата) - Месяц(ВведеноВЭксплуатацию);
				
				Строка1.Параметры.СрокЭкспл = КоличествоЛет * 12 + КоличествоМесяцев;

			КонецЕсли;

			ТабДокумент.Вывести(Строка1);

		КонецЦикла;

		Шапка = Макет.ПолучитьОбласть("Шапка2");
		Шапка.Параметры.Заполнить(СтруктураДока);
		
		Шапка.Параметры.ГлавБух = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		
		ТабДокумент.Вывести(Шапка);

	КонецЕсли;

	Возврат ТабДокумент;


КонецФункции // ПечатьСписаниеТоваров()




