 
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ДОДЕЛАТЬ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		и Объект.TMS Тогда
		Сообщить("You can not copy TMS Invoices.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// {RGS AArsentev - заполнение по ExportRequest
	Если Параметры.Свойство("ДанныеЗаполненияИзExportRequest") Тогда
		ЗаполнитьПоExportRequest(Параметры.ДанныеЗаполненияИзExportRequest);
		ЭтотОбъект.Записать();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Created import invoice - "+ Объект.Номер;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	// }RGS AArsentev
	
	//ТочноеВремяНачала = ОценкаПроизводительностиРГСофт.ТочноеВремя();
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.ФормаЗаписать, Объект.Проведен);
	
	Country = ПолучитьCountry(Объект.ProcessLevel);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ОбновитьТаблицуItems();
		ЗаполнитьDOC();
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			СкопироватьItems(Параметры.ЗначениеКопирования);
		КонецЕсли;
				
	КонецЕсли;
	
	ИтогКоличество = ТЗСтрокИнвойса.Итог("Количество");
	ИтогСумма = ТЗСтрокИнвойса.Итог("Сумма");
	ИтогNetWeight = ТЗСтрокИнвойса.Итог("NetWeight");
	
	//ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ТочноеВремяНачала, Справочники.КлючевыеОперации.InvoiceОткрытие, Объект.Ссылка);
	
	Элементы.PayingEntity.Видимость = Объект.TMS;
	
	ЭтоRUProcessLevel = (Объект.ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUEA
		ИЛИ Объект.ProcessLevel = Справочники.ProcessLevels.RUSM);
	Элементы.ТЗСтрокИнвойсаTNVED.Видимость = ЭтоRUProcessLevel;
	Элементы.ТЗСтрокИнвойсаTNVEDRate.Видимость = ЭтоRUProcessLevel;
	
	УстановитьДоступностьЭлементовДляБрокера();
	
КонецПроцедуры

// { RGS AGorlenko 30.05.2017 15:10:58 - заблокируем для брокера недоступные поля
Процедура УстановитьДоступностьЭлементовДляБрокера()
	
	Если Не CustomsСервер.ЭтоБрокер() Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.ТЗСтрокИнвойсаДобавить.Доступность = Ложь;
	//Элементы.ТЗСтрокИнвойсаСкопировать.Доступность = Ложь;
	Элементы.ТЗСтрокИнвойсаКоманднаяПанель.Доступность = Ложь;
	
	Для каждого ГруппаКолонокТЗСтрокИнвойса Из Элементы.ТЗСтрокИнвойса.ПодчиненныеЭлементы Цикл
		Если ГруппаКолонокТЗСтрокИнвойса.Имя = "ТЗСтрокИнвойсаГруппаTNVED" ИЛИ ГруппаКолонокТЗСтрокИнвойса.Имя = "ТЗСтрокИнвойсаГруппаPermits_COO" Тогда
			Продолжить;
		КонецЕсли;
		ГруппаКолонокТЗСтрокИнвойса.ТолькоПросмотр = Истина;
	КонецЦикла;
	
	Элементы.ТЗСтрокИнвойсаTNVEDRate.ТолькоПросмотр = Истина;
	
КонецПроцедуры // } RGS AGorlenko 30.05.2017 15:11:17 - заблокируем для брокера недоступные поля

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьCountry(ProcessLevel) 
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
	
КонецФункции

&НаСервере
Процедура СкопироватьItems(ImportInvoice)
	
	ТЗСтрокИнвойса.Загрузить(Документы.Инвойс.ПолучитьТаблицуInvoiceLines(ImportInvoice));
	Для Каждого СтрокаТаблицыItems Из ТЗСтрокИнвойса Цикл
		СтрокаТаблицыItems.Ссылка = Неопределено;	
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьDOC()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инвойс", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = &Инвойс
		|	И (НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен)";
		   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	 	DOC = Выборка.DOC;
		Элементы.DOC.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьЭлементыПоDirectSales();
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ТочноеВремяНачалаКлиент", ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ПараметрыЗаписи.Вставить("ТочноеВремяНачала", ОценкаПроизводительностиРГСофт.ТочноеВремя());
	//КонецЕсли;
	
	ТекущийОбъект.ModifiedBy = ТекущаяДата();
	ТекущийОбъект.ModificationDate = ТекущаяДата();
		
	ТекущийОбъект.ТаблицаСтрокИнвойса = ТЗСтрокИнвойса.Выгрузить();
	
	// { RGS AArsentev 09.06.2018 Повторный GL после изменения.
	ПроверимНаПовторноGL_ДляDOC();
	// } RGS AArsentev 09.06.2018
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.ФормаЗаписать, Объект.Проведен);
	
    ОбновитьТаблицуItems();
	ИтогКоличество = ТЗСтрокИнвойса.Итог("Количество");
	ИтогСумма = ТЗСтрокИнвойса.Итог("Сумма");
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	ОценкаПроизводительностиРГСофт.ЗафиксироватьВремяОкончания(ПараметрыЗаписи.ТочноеВремяНачала, Справочники.КлючевыеОперации.InvoiceИнтерактивноеПроведение, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////

// ДОДЕЛАТЬ
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ВладелецФормы <> Неопределено 
		И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
		И ВладелецФормы.Имя = "Invoices" Тогда		
		ОповеститьОВыборе(Объект.Ссылка);	
	КонецЕсли; 
	
	// ЗАКОММЕНТИРОВАТЬ СЛЕДУЮЩИЕ 3 СТРОЧКИ. ОНИ НУЖНЫ ВРЕМЕННО ДЛЯ ТОГО ЧТОБЫ РАЗОБРАТЬСЯ НАСКОЛЬКО МЕДЛЕННО РАБОТАЕТ ТУРКМЕНИСТАН.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиВызовСервераРГСофт.ЗафиксироватьВремяВыполненияНаКлиенте(ПараметрыЗаписи.ТочноеВремяНачалаКлиент, ТекущаяУниверсальнаяДатаВМиллисекундах(), "InvoiceИнтерактивноеПроведениеКлиент", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

&НаКлиенте
Процедура Print(Команда)
		
	ТабличныйДокумент = ПолучитьТабличныйДокументНаСервере();
	Если ТабличныйДокумент <> Неопределено Тогда
		ТабличныйДокумент.Показать();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументНаСервере()
	
	// Проведем документ при необходимости
	Если Модифицированность
		ИЛИ НЕ Объект.Проведен Тогда
		
		СтруктураПараметров = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Попытка
			Записать(СтруктураПараметров);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не удалось провести документ!",
				, , "Объект");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли; 
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Invoice", Объект.Ссылка);	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DOCInvoices.Ссылка.Номер КАК No,
		|	DOCInvoices.Ссылка.Дата КАК Date,
		|	DOCInvoices.Ссылка.Requested КАК Requested
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
		|ГДЕ
		|	НЕ DOCInvoices.Ссылка.Отменен
		|	И DOCInvoices.Инвойс = &Invoice
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InvoiceLines.Ссылка КАК InvoiceLine,
		|	InvoiceLines.НомерСтрокиИнвойса КАК LineNo,
		|	InvoiceLines.НомерЗаявкиНаЗакупку КАК PONo,
		|	InvoiceLines.КодПоИнвойсу КАК PartNumber,
		|	InvoiceLines.НаименованиеТовара КАК Description,
		|	InvoiceLines.Количество КАК Qty,
		|	InvoiceLines.ЕдиницаИзмерения КАК UOM,
		|	InvoiceLines.Цена КАК Price,
		|	InvoiceLines.Сумма КАК Sum,
		|	InvoiceLines.КостЦентр.Сегмент КАК Segment,
		|	InvoiceLines.Классификатор КАК ERPTreatment,
		|	InvoiceLines.СтранаПроисхождения КАК CountryOfOrigin,
		|	InvoiceLines.СерийныйНомер КАК SerialNumber,
		|	InvoiceLines.НомерВходящейДекларации КАК PriorCCD,
		|	InvoiceLines.МеждународныйКодТНВЭД КАК HTC
		|ПОМЕСТИТЬ InvoiceLinesWithoutWeight
		|ИЗ
		|	Справочник.СтрокиИнвойса КАК InvoiceLines
		|ГДЕ
		|	НЕ InvoiceLines.ПометкаУдаления
		|	И InvoiceLines.Инвойс = &Invoice
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	InvoiceLine
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InvoiceLinesWithoutWeight.InvoiceLine КАК InvoiceLine,
		|	СУММА(ParcelsItems.GrossWeightKG) КАК GrossWeightKG
		|ПОМЕСТИТЬ WeightOfInvoiceLines
		|ИЗ
		|	InvoiceLinesWithoutWeight КАК InvoiceLinesWithoutWeight
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Parcels.Детали КАК ParcelsItems
		|		ПО InvoiceLinesWithoutWeight.InvoiceLine = ParcelsItems.СтрокаИнвойса
		|			И (НЕ ParcelsItems.Ссылка.Отменен)
		|
		|СГРУППИРОВАТЬ ПО
		|	InvoiceLinesWithoutWeight.InvoiceLine
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	InvoiceLine
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	InvoiceLinesWithoutWeight.LineNo,
		|	InvoiceLinesWithoutWeight.PONo,
		|	InvoiceLinesWithoutWeight.PartNumber,
		|	InvoiceLinesWithoutWeight.Description,
		|	InvoiceLinesWithoutWeight.Qty,
		|	InvoiceLinesWithoutWeight.UOM,
		|	InvoiceLinesWithoutWeight.Price,
		|	InvoiceLinesWithoutWeight.Sum,
		|	InvoiceLinesWithoutWeight.Segment,
		|	InvoiceLinesWithoutWeight.ERPTreatment,
		|	InvoiceLinesWithoutWeight.CountryOfOrigin,
		|	InvoiceLinesWithoutWeight.SerialNumber,
		|	InvoiceLinesWithoutWeight.PriorCCD,
		|	InvoiceLinesWithoutWeight.HTC,
		|	ЕСТЬNULL(WeightOfInvoiceLines.GrossWeightKG, 0) КАК GrossWeightKG
		|ИЗ
		|	InvoiceLinesWithoutWeight КАК InvoiceLinesWithoutWeight
		|		ЛЕВОЕ СОЕДИНЕНИЕ WeightOfInvoiceLines КАК WeightOfInvoiceLines
		|		ПО InvoiceLinesWithoutWeight.InvoiceLine = WeightOfInvoiceLines.InvoiceLine
		|
		|УПОРЯДОЧИТЬ ПО
		|	InvoiceLinesWithoutWeight.LineNo";
				
	Результаты = Запрос.ВыполнитьПакет();
	ЗафиксироватьТранзакцию();
	
	Отказ = Ложь;
	
	ВыборкаDOCs = Результаты[0].Выбрать();
	КоличествоDOCs = ВыборкаDOCs.Количество();
	Если КоличествоDOCs = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Инвойс не включен ни в один DOC!");
		Возврат Неопределено;
		
	ИначеЕсли КоличествоDOCs > 1 Тогда
		
		DOCList = "";
		Пока ВыборкаDOCs.Следующий() Цикл
			DOCList = DOCList + ", " + СокрЛП(ВыборкаDOCs.No);	
		КонецЦикла;
		DOCList = Сред(DOCList, 3);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Инвойс включен в несколько DOC: " + DOCList + "!");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ВыборкаDOCs.Следующий();
	Если НЕ ЗначениеЗаполнено(ВыборкаDOCs.Requested) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Для DOC """ + ВыборкаDOCs.No + """ не был запрошен Green light!");
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаInvoiceLines = Результаты[3].Выгрузить();
	
	// Распечатаем данные	
	ТабДок = Новый ТабличныйДокумент;	
	Макет = Документы.Инвойс.ПолучитьМакет("Invoice"); 
	
	// Шапка	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");	
	ПараметрыШапки = ОбластьШапка.Параметры;
	
	ПараметрыШапки.InvoiceNo = СокрЛП(Объект.Номер);
	ПараметрыШапки.InvoiceDate = Объект.Дата;
	ПараметрыШапки.DOCDate = ВыборкаDOCs.Date;
	ПараметрыШапки.ImportExport = ?(Объект.АрхивИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Import, "Import", "Export");
	ПараметрыШапки.SoldTo = Объект.Покупатель;
	ПараметрыШапки.Requested = ВыборкаDOCs.Requested;
	ПараметрыШапки.GrossWeight = ТаблицаInvoiceLines.Итог("GrossWeightKG");
	ПараметрыШапки.UOM = Справочники.UOMs.KG;
	ПараметрыШапки.GOLD = Объект.Голд;
	ПараметрыШапки.Currency = Объект.Валюта;
	ПараметрыШапки.TotalExWorks = Объект.СуммаДокумента;
	ПараметрыШапки.Freight = Объект.Фрахт;
	ПараметрыШапки.Insurance = Объект.Страховка;
	ПараметрыШапки.Handling = Объект.Упаковка;
	ПараметрыШапки.TotalCharges = Объект.ОбщаяСумма;
		
	ТабДок.Вывести(ОбластьШапка);

	// Шапка таблицы
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
		
	// Таблица	
	Для Каждого СтрокаТаблицыInvoiceLines Из ТаблицаInvoiceLines Цикл
		
		ОбластьДеталиДокумента = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ПараметрыОбласти = ОбластьДеталиДокумента.Параметры;
		
		ПараметрыОбласти.LineNo = СтрокаТаблицыInvoiceLines.LineNo;
		ПараметрыОбласти.PartNumber = СтрокаТаблицыInvoiceLines.PartNumber;
		ПараметрыОбласти.Description = СтрокаТаблицыInvoiceLines.Description;
		ПараметрыОбласти.Qty = СтрокаТаблицыInvoiceLines.Qty;
		ПараметрыОбласти.UOM = СтрокаТаблицыInvoiceLines.UOM;
		ПараметрыОбласти.UnitPrice = СтрокаТаблицыInvoiceLines.Price;
		ПараметрыОбласти.TotalPrice = СтрокаТаблицыInvoiceLines.Sum;
		ПараметрыОбласти.Currency = Объект.Валюта;
		ПараметрыОбласти.GrossWeight = СтрокаТаблицыInvoiceLines.GrossWeightKG;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыInvoiceLines.GrossWeightKG) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Строка " + СтрокаТаблицыInvoiceLines.LineNo + " не указана ни в одном Parcel или для этого Parcel не указан вес брутто!",
				,,, Отказ);
		КонецЕсли;
		ПараметрыОбласти.ERPTreatment = СтрокаТаблицыInvoiceLines.ERPTreatment;
		ПараметрыОбласти.SoldTo = Объект.Покупатель;
		ПараметрыОбласти.SerialNumber = СтрокаТаблицыInvoiceLines.SerialNumber;
		ПараметрыОбласти.Segment = СтрокаТаблицыInvoiceLines.Segment;
		ПараметрыОбласти.PONo = СокрЛП(СтрокаТаблицыInvoiceLines.PONo);
		ПараметрыОбласти.CountryOfOrigin = СокрЛП(СтрокаТаблицыInvoiceLines.CountryOfOrigin);
		ПараметрыОбласти.PriorCCD = СтрокаТаблицыInvoiceLines.PriorCCD;
		ПараметрыОбласти.HTC = СтрокаТаблицыInvoiceLines.HTC;
				
		ТабДок.Вывести(ОбластьДеталиДокумента);
	
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТабДок;
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
// ШАПКА ДОКУМЕНТА

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьContractПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ProcessLevelПриИзменении(Элемент)
	
	Country = ПолучитьCountry(Объект.ProcessLevel);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	
	ОбновитьContractПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ParentCompanyНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Process level' first!",
			, "ProcessLevel", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиПриИзменении(Элемент)
	
	ОбновитьContractПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекларантПриИзменении(Элемент)
	
	ОбновитьContractПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьContractПриНеобходимости()
	
	// Если хотя бы один параметр подбора контракта не заполнен - мы не сможем ничего подобрать
	Если НЕ ЗначениеЗаполнено(Объект.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Продавец)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Декларант)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.УсловияПоставки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивContracts = ПолучитьМассивContractsДляInvoice(Объект.Дата, Объект.Продавец, Объект.Декларант, Объект.УсловияПоставки);
	
	Если ЗначениеЗаполнено(Объект.Contract) Тогда
		
		// Если контракт уже заполнен - проверим, может ли он использоваться
		Если МассивContracts.Найти(Объект.Contract) = Неопределено Тогда
			Объект.Contract = Неопределено;
		КонецЕсли;
		
	Иначе
		
		// Если контракт еще не заполнен, и мы нашли только один контракт - его и подставим
		Если МассивContracts.Количество() = 1 Тогда
			Объект.Contract = МассивContracts[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивContractsДляInvoice(Date, Seller, ConsignTo, Incoterms)
	
	Возврат Справочники.Contracts.ПолучитьДляInvoice(Date, Seller, ConsignTo, Incoterms);
	
КонецФункции	

&НаКлиенте
Процедура ContractНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Переопределим стандартное открытие формы выбора: проверим заполнение реквизитов и сформируем структуру настройки
	СтандартнаяОбработка = Ложь;
	
	// Проверим заполнение реквизитов, необходимых для подбора контракта
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Date' is empty!",
			, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Продавец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Seller' is empty!",
			, "Продавец", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Декларант) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Consign-to' is empty!",
			, "Декларант", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УсловияПоставки) Тогда
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Incoterms' is empty!",
			, "УсловияПоставки", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем структуру настройки, которая будет использована в форме выбора для установки необходимых отборов
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзInvoice");
	СтруктураНастройки.Вставить("Дата", Объект.Дата);
	СтруктураНастройки.Вставить("Seller", Объект.Продавец);
	СтруктураНастройки.Вставить("ConsignTo", Объект.Декларант);
	СтруктураНастройки.Вставить("Incoterms", Объект.УсловияПоставки);
	
	// { RGS ASeryakov 26.06.2018 15:00:00 PM S-I-0004945
	СтруктураНастройки.Вставить("Голд",Объект.Голд);
	// } RGS ASeryakov 26.06.2018 15:00:00 PM S-I-0004945
	
	// Откроем форму выбора
	ПараметрыФормы = Новый Структура("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Справочник.Contracts.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура OperatingLocationНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Process level' first!",
			, "ProcessLevel", "Объект");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПолучитьОбщуюСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ФрахтПриИзменении(Элемент)
	
	ПолучитьОбщуюСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховкаПриИзменении(Элемент)
	
	ПолучитьОбщуюСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ПолучитьОбщуюСумму();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбщуюСумму()
	
	Объект.ОбщаяСумма = Объект.СуммаДокумента + Объект.Фрахт + Объект.Страховка + Объект.Упаковка;	
	
КонецФункции

&НаКлиенте
Процедура TransferПриИзменении(Элемент)
	
	Если НЕ Объект.Transfer Тогда 
		Возврат;
	КонецЕсли;
		
	Ответ = Вопрос("If you loaded the old invoice (before transfer)
		|No., Sold-to, Consign-to, Incoterms, Contract, Location, AUs and Activities
		|are old and should be cleared.
		|Clear these fields?",
		РежимДиалогаВопрос.ДаНет,
		60,
		КодВозвратаДиалога.Да,
		"Attention!",
		КодВозвратаДиалога.Да);
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьРеквизитыДляTransfer();	
	КонецЕсли;	
	 				
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыДляTransfer()
	
	Объект.Номер             = Неопределено;	
	Объект.Покупатель        = Неопределено;
	Объект.Декларант         = Неопределено;	
	Объект.УсловияПоставки   = Неопределено;
	Объект.Contract          = Неопределено;
	Объект.OperatingLocation = Неопределено;
	
	Для Каждого СтрокаТЗ из ТЗСтрокИнвойса Цикл
		СтрокаТЗ.КостЦентр = Неопределено;
		СтрокаТЗ.Активити  = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// { RGS ASeryakov, 16.11.2018 14:47:21 S-I-0004945
&НаКлиенте
Процедура ContractОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
	
		Предупреждение("en='To fill in the contract data you need to save the document!';ru='Для заполнения данных по контракту необходимо сохранить документ!'");
		Возврат;
	КонецЕсли;
	
	
	ДанныеПоКонтрактуВыбора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "Seller,ConsignTo,Incoterms");
	
	ДанныеПоСсылке = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Ссылка, "Contract");
	ДанныеПоКонтрактуОбъекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеПоСсылке.Contract, "Seller,ConsignTo,Incoterms");
	
	ДанныеПоКонтрактуВыбораИКонтракт = Новый Структура("Seller,ConsignTo,Incoterms");
	ЗаполнитьЗначенияСвойств(ДанныеПоКонтрактуВыбораИКонтракт, ДанныеПоКонтрактуВыбора);
	ДанныеПоКонтрактуВыбораИКонтракт.Вставить("Contract", ВыбранноеЗначение);
	
	ДополнительныеПараметры = Новый Структура("ДанныеПоКонтрактуВыбора", ДанныеПоКонтрактуВыбораИКонтракт);
	
	
	Если ЗначениеЗаполнено(Объект.Contract) И НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПоКонтрактуОбъекта, ДанныеПоКонтрактуВыбора) Тогда
		ВложеннаяВыборКонтракта(Новый ОписаниеОповещения("ОбработкаКомандыВыборКонтрактаЗавершение", ЭтотОбъект), ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// { RGS ASeryakov, 26.11.2018 14:47:21 S-I-0004945
#Область ПоказатьВопрос
	
&НаКлиенте
Процедура ВложеннаяВыборКонтракта(Знач Оповещение, ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ТекстПредупреждения = "For contract " + Строка(Объект.Contract) + " Seller, consign-to and incoterms were changed.";
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыборКонтрактаЗавершение",ЭтотОбъект, ДополнительныеПараметры), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрактаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.ДанныеПоКонтрактуВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаКомандыВыборКонтрактаЗавершение(ДанныеПоКонтрактуВыбора, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДанныеПоКонтракту(ДанныеПоКонтрактуВыбора);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоКонтракту(ДанныеЗаполнения)
	
	Объект.Продавец = ДанныеЗаполнения.Seller;
	Объект.Декларант = ДанныеЗаполнения.ConsignTo;
	Объект.УсловияПоставки = ДанныеЗаполнения.Incoterms;
	Объект.Contract = ДанныеЗаполнения.Contract;
	Объект.Покупатель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения.ConsignTo,"Владелец");
	
КонецПроцедуры

#КонецОбласти


&НаСервереБезКонтекста
Процедура ГолдПриИзмененииНаСервере(Голд, Покупатель, Продавец, Декларант, УсловияПоставки)
	
	Если НЕ Голд Тогда
		
		Покупатель = Неопределено;
		Продавец = Неопределено;
		Декларант = Неопределено;
		УсловияПоставки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГолдПриИзменении(Элемент)
	
	ГолдПриИзмененииНаСервере(Объект.Голд, Объект.Покупатель, Объект.Продавец, Объект.Декларант, Объект.УсловияПоставки);
	
КонецПроцедуры

// } RGS ASeryakov 16.11.2018 14:47:37 S-I-0004945

//////////////////////////////////////////////////////////////////////////
// СТРОКИ ИНВОЙСОВ

&НаСервере
Процедура ОбновитьТаблицуItems()
	
	ТЗСтрокИнвойса.Загрузить(Документы.Инвойс.ПолучитьТаблицуInvoiceLines(Объект.Ссылка));
 	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.Ссылка = Неопределено;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.НомерСтрокиИнвойса = ТЗСтрокИнвойса.Индекс(ТекущиеДанные) + 1;
		Если Не Копирование Тогда 
			ТекущиеДанные.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.CountriesHUBs.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
            	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаПослеУдаления(Элемент)
	
	Для Каждого Стр ИЗ ТЗСтрокИнвойса Цикл
		РГСофтКлиентСервер.УстановитьЗначение(Стр.НомерСтрокиИнвойса, ТЗСтрокИнвойса.Индекс(Стр) + 1);
	КонецЦикла;
	
	ИтогКоличество = ТЗСтрокИнвойса.Итог("Количество");
	ИтогСумма = ТЗСтрокИнвойса.Итог("Сумма");
	ИтогNetWeight = ТЗСтрокИнвойса.Итог("NetWeight");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	РасчитатьСумму(ТекСтрока);
	ИтогКоличество = ТЗСтрокИнвойса.Итог("Количество");
		
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаЦенаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	РасчитатьСумму(ТекСтрока);
	
КонецПроцедуры                                        

&НаКлиенте
Процедура РасчитатьСумму(ТекСтрока) 
	
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	ИтогСумма = ТЗСтрокИнвойса.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаСуммаПриИзменении(Элемент)
	
	ИтогСумма = ТЗСтрокИнвойса.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаNetWeightПриИзменении(Элемент)
	
	ИтогNetWeight = ТЗСтрокИнвойса.Итог("NetWeight");
	
КонецПроцедуры

&НаКлиенте
Процедура FillEmptyPOLines(Команда)
		
	FillEmptyPOLinesНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура FillEmptyPOLinesНаСервере()
	
	Для Каждого Стр Из ТЗСтрокИнвойса Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.СтрокаЗаявкиНаЗакупку) Тогда
			
			КоличествоНайденныхPOLines = Справочники.СтрокиИнвойса.ЗаполнитьPOLineВInvoiceLine(Стр);
			
			Если КоличествоНайденныхPOLines = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Failed to find PO line for ""Invoice line #" + Стр.НомерСтрокиИнвойса + """!
					|Try to select PO line manually.",
					, "ТЗСтрокИнвойса[" + (Стр.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку");
				
			ИначеЕсли КоличествоНайденныхPOLines > 1 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Found several PO lines for ""Invoice line #" + Стр.НомерСтрокиИнвойса + """!
					|Try to select PO line manually.",
					, "ТЗСтрокИнвойса[" + (Стр.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку");
					
			Иначе
				
				Модифицированность = Истина;
					
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаСтрокаЗаявкиНаЗакупкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТЗItems = Элементы.ТЗСтрокИнвойса;
	ТекущиеДанные = ТЗItems.ТекущиеДанные;
	
	PONo = СокрЛП(ТекущиеДанные.НомерЗаявкиНаЗакупку);	
	Если НЕ ЗначениеЗаполнено(PONo) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose PO no. first!",
			, "ТЗСтрокИнвойса[" + ТЗItems.ТекущаяСтрока + "].НомерЗаявкиНаЗакупку");
		Возврат;
	
	КонецЕсли;
		
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзInvoice"); 
					
	СтруктураНастройки.Вставить("PONo", PONo);
	
	Если НЕ Объект.SkipSomeChecks Тогда
		
		PartNo = СокрЛП(ТекущиеДанные.КодПоИнвойсу);
		Если ЗначениеЗаполнено(PartNo) Тогда
			СтруктураНастройки.Вставить("PartNo", PartNo);
		КонецЕсли; 
				
		Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
			СтруктураНастройки.Вставить("Qty", ТекущиеДанные.Количество);
		КонецЕсли;
			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		СтруктураНастройки.Вставить("UOM", ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки", СтруктураНастройки);			
	ОткрытьФорму("Справочник.СтрокиЗаявкиНаЗакупку.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаНомерЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	ТекущиеДанные.НомерЗаявкиНаЗакупку = ВРег(СокрЛП(ТекущиеДанные.НомерЗаявкиНаЗакупку));
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаНомерЗаявкиНаЗакупкуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	CustomsКлиент.ОткрытьPOПоНомеру(СокрЛП(ТекущиеДанные.НомерЗаявкиНаЗакупку), ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаСтрокаЗаявкиНаЗакупкуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	
	ImportExportКлиентСервер.ПерезаполнитьInvoiceLineПоPOLineПриНеобходимости(ТекущиеДанные);
		
КонецПроцедуры 

&НаКлиенте
Процедура ТЗСтрокИнвойсаPSAНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверим, что заполнены все реквизиты, необходимые для выбора PSA contract
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Date' first!",
			, "Дата", "Объект");
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'Process level' first!",
			, "ProcessLevel", "Объект");
		Возврат;
	КонецЕсли;	
	
	ТЗItems = Элементы.ТЗСтрокИнвойса;
	ТекущиеДанные = ТЗItems.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КостЦентр) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Choose 'AU' first!",
			, "ТЗСтрокИнвойса[" + ТЗItems.ТекущаяСтрока + "].КостЦентр");
		Возврат;	
	КонецЕсли;
	
	// Заполним данные выбора
	ДанныеВыбора = ПолучитьДанныеВыбораPSAContract(Объект.Дата, Объект.ProcessLevel, ТекущиеДанные.КостЦентр);
	
	// Если для выбора доступно только одно значение - его и подставим
	Если ДанныеВыбора.Количество() = 1 Тогда
		ТекущиеДанные.PSA = ДанныеВыбора[0].Значение;
		ДанныеВыбора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораPSAContract(InvoiceDate, ProcessLevel, AU)
	
	ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
	AUSegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(AU, "Segment");
	
	СписокЗначений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Country", ProcessLevelCountry);
	Запрос.УстановитьПараметр("Segment", AUSegment); 
	Запрос.УстановитьПараметр("InvoiceDate", InvoiceDate);
	
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	PSAContracts.Ссылка,
		|	PSAContracts.Код КАК Код
		|ИЗ
		|	Справочник.PSAContracts КАК PSAContracts
		|ГДЕ
		|	НЕ PSAContracts.ПометкаУдаления
		|	И PSAContracts.Country = &Country
		|	И (PSAContracts.Segment = &Segment
		|			ИЛИ PSAContracts.Segment = ЗНАЧЕНИЕ(Справочник.Сегменты.ПустаяСсылка))
		|	И PSAContracts.ExpiryDate >= &InvoiceDate
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Код));	
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура ТЗСтрокИнвойсаКостЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураПараметров.Вставить("Отбор", СтруктураПараметровОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", текДанные.КостЦентр);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаКостЦентрАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаКостЦентрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры  //<- RG-Soft VIvanov

// Direct Sales

&НаКлиенте
Процедура DirectSalesПриИзменении(Элемент)
	
	НастроитьЭлементыПоDirectSales();
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыПоDirectSales()
	
	Элементы.ТЗСтрокИнвойсаГруппаClientPO.Видимость = Объект.DirectSales;
	
	Элементы.ТЗСтрокИнвойсаЦена.Заголовок = ?(Объект.DirectSales, "Client unit price", "Unit price");
	Элементы.ТЗСтрокИнвойсаСумма.Заголовок = ?(Объект.DirectSales, "Client total price", "Total price");
	
	Элементы.ТЗСтрокИнвойсаКостЦентр.АвтоОтметкаНезаполненного = Не Объект.DirectSales;
	Элементы.ТЗСтрокИнвойсаАктивити.АвтоОтметкаНезаполненного = Не Объект.DirectSales;

КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаClientQtyПриИзменении(Элемент)
	
	ПриИзмененииТЗСтрокИнвойсаClientQtyCost();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаClientCostПриИзменении(Элемент)
	
	ПриИзмененииТЗСтрокИнвойсаClientQtyCost();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТЗСтрокИнвойсаClientQtyCost()
	
	ТекДанные = Элементы.ТЗСтрокИнвойса.ТекущиеДанные;
	
	ТекДанные.InitialTotalPrice = ТекДанные.ClientQty * ТекДанные.InitialCost; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаСтранаПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Элементы.ТЗСтрокИнвойса.ТекущиеДанные.СтранаПроисхождения) = Тип("Строка") Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("InTMS", Истина);
				
		ОткрытьФорму("Справочник.CountriesHUBs.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаПередУдалением(Элемент, Отказ)
	
	Если CustomsСервер.ЭтоБрокер() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСтрокИнвойсаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если CustomsСервер.ЭтоБрокер() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоExportRequest(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиИнвойса.Код,
	               |	СтрокиИнвойса.Наименование,
	               |	СтрокиИнвойса.НомерСтрокиИнвойса,
	               |	СтрокиИнвойса.КодПоИнвойсу,
	               |	СтрокиИнвойса.Каталог,
	               |	СтрокиИнвойса.ImportReference КАК Reference,
	               |	СтрокиИнвойса.НаименованиеТовара,
	               |	СтрокиИнвойса.Количество,
	               |	СтрокиИнвойса.ЕдиницаИзмерения,
	               |	СтрокиИнвойса.Цена,
	               |	СтрокиИнвойса.Currency,
	               |	СтрокиИнвойса.Сумма,
	               |	СтрокиИнвойса.Классификатор,
	               |	СтрокиИнвойса.СтранаПроисхождения,
	               |	СтрокиИнвойса.Manufacturer,
	               |	СтрокиИнвойса.МеждународныйКодТНВЭД,
	               |	СтрокиИнвойса.NetWeight,
	               |	СтрокиИнвойса.WeightUOM,
	               |	СтрокиИнвойса.PermanentTemporary,
	               |	СтрокиИнвойса.Final,
	               |	СтрокиИнвойса.LocalOnly,
	               |	СтрокиИнвойса.EUCNotRequired,
	               |	СтрокиИнвойса.EUCRequested,
	               |	СтрокиИнвойса.EUCReceived,
	               |	СтрокиИнвойса.SCNo,
	               |	СтрокиИнвойса.TNVED,
	               |	СтрокиИнвойса.COORequired,
	               |	СтрокиИнвойса.ERPTreatmentNonLawson,
	               |	СтрокиИнвойса.ProjectMobilization,
	               |	СтрокиИнвойса.HazardClass,
	               |	СтрокиИнвойса.GuaranteeLetter,
	               |	СтрокиИнвойса.MOC,
	               |	СтрокиИнвойса.ClientPO,
	               |	СтрокиИнвойса.ConfirmationOfCargoLatestDate,
	               |	СтрокиИнвойса.CustomsBSReceiptDate,
	               |	СтрокиИнвойса.Предопределенный,
	               |	СтрокиИнвойса.ИмяПредопределенныхДанных,
	               |	СтрокиИнвойса.Представление
	               |ИЗ
	               |	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	               |ГДЕ
	               |	СтрокиИнвойса.ExportRequest = &ExportRequest";
	Запрос.УстановитьПараметр("ExportRequest", СтруктураПараметров.ExportRequest);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТЗСтрокИнвойса.Загрузить(Результат);
	
	ВалютаER = Результат.ВыгрузитьКолонку("Currency");
	
	Объект.Дата = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "Дата");
	Объект.УсловияПоставки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "Incoterms");
	Объект.Номер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "Номер");
	Объект.ProcessLevel = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "ProcessLevel");
	Объект.Фрахт = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "InternationalFreightSum");
	Объект.Валюта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "InternationalFreightCurrency");
	Объект.НомерЗаявкиНаДоставку = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "Номер");
	Объект.Продавец = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров.ExportRequest, "FromLegalEntity");
	Объект.Валюта = ?(ВалютаER.Количество() > 0, ВалютаER[0], Справочники.Валюты.ПустаяСсылка());
	Объект.СуммаДокумента = ТЗСтрокИнвойса.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПроверимНаПовторноGL_ДляDOC()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаИсключаемыхРеквизитов = "Comment, ModifiedBy, ModificationDate, POList, Specialist, УДАЛИТЬГрузополучатель, УДАЛИТЬПолноеЗаполнение, Проверен, Отменён, ПометкаУдаления, Проведён"; 
	ТекстИзменений = ImportExportСервер.РегистрацияИзмененийРеквизитовОбъекта(Объект, СтрокаИсключаемыхРеквизитов);
	
	Если ТекстИзменений = Неопределено ИЛИ Объект.Проверен Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Номер,
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Requested
	|ИЗ
	|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
	|ГДЕ
	|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = &Инвойс
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.ПометкаУдаления
	|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен";
	Запрос.УстановитьПараметр("Инвойс", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	НачатьТранзакцию();
	Пока Результат.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Результат.Requested) Тогда
			Док = Результат.DOC.ПолучитьОбъект();
			Док.Requested = Неопределено;
			Док.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходим повторный GL на DOC - " + Результат.Номер);
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

