
Перем ТаблицаСтрокИнвойса Экспорт;
Перем НужнаСинхронизация;

Перем мМассивСтрокИнвойсаДоЗаписи;

Перем мParentCompany_Smith;
Перем мParentCompany_MI;

////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПОЛНЕНИЯ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипЗнчДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипЗнчДанныхЗаполнения = Тип("Структура") Тогда
		
		ДанныеЗаполнения.Свойство("ProcessLevel", ProcessLevel);
		ДанныеЗаполнения.Свойство("Specialist", Specialist);
		
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Specialist) Тогда
		Specialist = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Specialist, "ProcessLevel");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду("840");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРИ КОПИРОВАНИИ

Процедура ПриКопировании(ОбъектКопирования)
	
	Проверен = Ложь;
	Отменен = Ложь;
	SkipSomeChecks = Ложь;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПЕРЕД ЗАПИСЬЮ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи);
	
	Если ТаблицаСтрокИнвойса = Неопределено Тогда
		ТаблицаСтрокИнвойса = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(Ссылка);
		НужнаСинхронизация = Ложь;
	Иначе
		НужнаСинхронизация = Истина;
	КонецЕсли;
	
	ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи, ТаблицаСтрокИнвойса);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПоместитьВДополнительныеСвойстваДополнительныеДанныеПередЗаписью(ТаблицаСтрокИнвойса, РежимЗаписи);
	
	ДозаполнитьРеквизитыСДополнительнымиДанными();
			
	ПроверитьВозможностьИзменения(Отказ, ДополнительныеСвойства.ВыборкаClosingDocuments);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеРеквизитов(
		Отказ,
		РежимЗаписи,
		ТаблицаСтрокИнвойса,
		ДополнительныеСвойства.ТаблицаPOLines);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//{ RGS AArsentev 23.11.2016 Версии доков
	ПроверитьВерсию();
	//} RGS AArsentev 23.11.2016 Версии доков
	//ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыБезДополнительныхДанных(РежимЗаписи)
	
	ImportExportСервер.ПодменитьРежимЗаписиОтмененногоДокумента(Отменен, Проведен, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) И ЗначениеЗаполнено(Specialist) Тогда
		ProcessLevel = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Specialist, "ProcessLevel");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АрхивИмпортЭкспорт) Тогда
		АрхивИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Import;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		РГСофт.ЗаполнитьCreation(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModifiedBy) Тогда
		ModifiedBy = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ModificationDate) Тогда
		ModificationDate = ТекущаяДата();
	КонецЕсли;
	
	НомерЗаявкиНаДоставку = СокрЛП(НомерЗаявкиНаДоставку);
	ОбщаяСумма = СуммаДокумента + Фрахт + Страховка + Упаковка;
	Comment = СокрЛП(Comment);
	DSSNumber = СокрЛП(DSSNumber);
	
	ImportExportСервер.СинхронизироватьОтменуИПометкуУдаленияДокумента(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьРеквизитыБезДополнительныхДанных(Отказ, РежимЗаписи, ПроверяемаяТаблица)
	
	Если Отменен Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Номер)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	    	"'No.' is empty!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Date' is empty!",
			ЭтотОбъект, "Дата", , Отказ);
	КонецЕсли;
	
	Если Голд И TMS Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"GOLD and TMS can not be used at the same time!",
			ЭтотОбъект, "TMS", , Отказ);
	КонецЕсли;
	
	Если Проверен И НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Only Posted Invoice can be marked as Final!",
			ЭтотОбъект, "Проверен", , Отказ);
		
	КонецЕсли; 
		
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			ЭтотОбъект, "ProcessLevel", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Specialist) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Specialist' is empty!",
			ЭтотОбъект, "Specialist", , Отказ);
	КонецЕсли;
	// { RGS ASeryakov, 16.11.2018 14:47:21 S-I-0004945
	//Если НЕ ЗначениеЗаполнено(Продавец) Тогда
	Если Голд И НЕ ЗначениеЗаполнено(Продавец) Тогда
	// } RGS ASeryakov 16.11.2018 14:47:37 S-I-0004945
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Seller' is empty!",
			ЭтотОбъект, "Продавец", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Sold-to' is empty!",
			ЭтотОбъект, "Покупатель", , Отказ);
	Иначе
		
		// Sold-to.Country vs Process level.Country
		Если ЗначениеЗаполнено(ProcessLevel) Тогда
			
			ParentCompanyCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Покупатель, "Country");
			ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
			Если ParentCompanyCountry <> ProcessLevelCountry Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Country '" + СокрЛП(ParentCompanyCountry) + "' of Sold-to differs from Country of Process level!",
					ЭтотОбъект, "Покупатель", , Отказ);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// { RGS ASeryakov, 16.11.2018 14:47:21 S-I-0004945
	//Если НЕ ЗначениеЗаполнено(Декларант) Тогда
	Если Голд И НЕ ЗначениеЗаполнено(Декларант) Тогда
	// } RGS ASeryakov 16.11.2018 14:47:37 S-I-0004945
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Consign-to' is empty!",
			ЭтотОбъект, "Декларант", , Отказ);
	КонецЕсли;
	// { RGS ASeryakov, 16.11.2018 14:47:21 S-I-0004945
	//Если НЕ ЗначениеЗаполнено(УсловияПоставки) Тогда
	Если Голд И НЕ ЗначениеЗаполнено(УсловияПоставки) Тогда
	// } RGS ASeryakov 16.11.2018 14:47:37 S-I-0004945
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Incoterms' is empty!",
			ЭтотОбъект, "УсловияПоставки", , Отказ);
	КонецЕсли;
	
	// { RGS ASeryakov, 21.11.2018 14:47:21 S-I-0004945
	
	// { RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636
	ProcessLevels = Новый Массив;
	ProcessLevels.Добавить(Справочники.ProcessLevels.RUEA);
	ProcessLevels.Добавить(Справочники.ProcessLevels.RUSM);
	ProcessLevels.Добавить(Справочники.ProcessLevels.AZ);
	ProcessLevels.Добавить(Справочники.ProcessLevels.GE);
	ProcessLevels.Добавить(Справочники.ProcessLevels.TM);
	ProcessLevels.Добавить(Справочники.ProcessLevels.UZ);
	
	//Если НЕ ЗначениеЗаполнено(Contract) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		"'Contract' is empty!",
	//		ЭтотОбъект, "Contract", , Отказ);
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Contract) И Голд Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Contract' is empty!",
			ЭтотОбъект, "Contract", , Отказ);
	ИначеЕсли НЕ ЗначениеЗаполнено(Contract) И НЕ Голд И ProcessLevels.Найти(ProcessLevel) = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Contract' is empty!",
		ЭтотОбъект, "Contract", , Отказ);
	КонецЕсли;
	// } RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636
	
	// } RGS ASeryakov, 21.11.2018 14:47:21 S-I-0004945
	
	
	Если НЕ ЗначениеЗаполнено(Contract)
	И АрхивИмпортЭкспорт = Перечисления.ИмпортЭкспорт.Import
		И ЗначениеЗаполнено(Декларант) Тогда
		
		ConsignToDoNotRequireContract = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Декларант, "DoNotRequireContractInInvoices");
		Если НЕ ConsignToDoNotRequireContract Тогда
			
			// { RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636
			Если НЕ Голд И ProcessLevels.Найти(ProcessLevel) = Неопределено Тогда
			// } RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Contract' is empty!",
				ЭтотОбъект, "Contract", , Отказ);
				
			// { RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636
			ИначеЕсли Голд Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Contract' is empty!",
				ЭтотОбъект, "Contract", , Отказ);
				
			КонецЕсли;
			// } RGS ASeryakov, 21.11.2019 14:00:00 S-I-0006636

		КонецЕсли;
			
	КонецЕсли;
	
	
	// Operating location
	Если НЕ ЗначениеЗаполнено(OperatingLocation) Тогда
		
		Если НЕ TMS Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'Location' is empty!",
				ЭтотОбъект, "OperatingLocation", , Отказ);
		КонецЕсли;
		
	Иначе
		
		// OperatingLocation.Country vs ProcessLevel.Country
		Если ЗначениеЗаполнено(ProcessLevel) Тогда
			
			OperatingLocationCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(OperatingLocation, "Country");
			ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
			Если OperatingLocationCountry <> ProcessLevelCountry Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Country '" + СокрЛП(OperatingLocationCountry) + "' of Location differs from Country of Process level!",
					ЭтотОбъект, "OperatingLocation", , Отказ);		
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерЗаявкиНаДоставку) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'DO no.' is empty!
			|If you do not know DO no. you can use Invoice no. or DOC no.",
			ЭтотОбъект, "НомерЗаявкиНаДоставку", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Currency' is empty!",
			ЭтотОбъект, "Валюта", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СуммаДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Total ex-works' is empty!",
			ЭтотОбъект, "СуммаДокумента", , Отказ);
	КонецЕсли;
	      	
	Если Голд Тогда
		
		Если НЕ ЗначениеЗаполнено(Страховка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical error: 'Insurance' is empty!",
				ЭтотОбъект, "Страховка");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical error: 'Handling' is empty!",
				ЭтотОбъект, "Упаковка");
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Фрахт) И Не Проверен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical error: 'Freight' is empty!",
				ЭтотОбъект, "Фрахт");
		КонецЕсли;
		
	КонецЕсли;

	Если ProcessLevel <> Справочники.ProcessLevels.TM
		И НЕ ЗначениеЗаполнено(Фрахт) И Проверен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Freight' is empty!",
			ЭтотОбъект, "Фрахт", , Отказ);
	КонецЕсли;
	
	Если НЕ ПроверяемаяТаблица.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Table 'Invoice lines' is empty!",
			, "ТЗСтрокИнвойса", , Отказ);
		Возврат;
		
	КонецЕсли;
			
	ERPTreatmentsWithoutActivity = ImportExportСервер.ПолучитьМассивERPTreatmentsWithoutActivity();		

	Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
		
		СтрокаТаблицы.КодПоИнвойсу = СокрЛП(СтрокаТаблицы.КодПоИнвойсу);
		СтрокаТаблицы.НаименованиеТовара = СокрЛП(СтрокаТаблицы.НаименованиеТовара);
		СтрокаТаблицы.СтранаПроисхождения = СтрокаТаблицы.СтранаПроисхождения;
		     				
		Если Голд Тогда
			
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "НомерЗаявкиНаЗакупку", "PO no.", Отказ);
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "СтрокаЗаявкиНаЗакупку", "PO line", Отказ);
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "Цена", "Unit price", Отказ);
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "Сумма", "Total price", Отказ); 
			
		КонецЕсли;

		Если DirectSales Тогда
			
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "ClientPONo", "Client PO no.", Отказ);
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "ClientLineNo", "Client PO line", Отказ);
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "ClientPartNo", "Client Part no.", Отказ);
			       			
		КонецЕсли;
		
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "КодПоИнвойсу", "Part no.", Отказ); 
			
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "НаименованиеТовара", "Description", Отказ);
		
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "Количество", "Qty", Отказ);
		
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "ЕдиницаИзмерения", "UOM", Отказ);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.NetWeight) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.WeightUOM) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Weight UOM"" is empty!",
				, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].WeightUOM",, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) И ЗначениеЗаполнено(СтрокаТаблицы.Цена) И ЗначениеЗаполнено(СтрокаТаблицы.Сумма)
			И СтрокаТаблицы.Сумма <> Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Total price " + СтрокаТаблицы.Сумма + """ differs from ""Qty * Price = " + Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) + """!",
				, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].Сумма",, Отказ);
				
		КонецЕсли;
		
		Если Не DirectSales Тогда 
			ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "КостЦентр", "AU", Отказ);
		КонецЕсли;
	
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "Классификатор", "ERP treatment", Отказ);
		
		Если Не DirectSales И ERPTreatmentsWithoutActivity.Найти(СтрокаТаблицы.Классификатор) = Неопределено
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Активити) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Non-critical error: In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Activity"" is empty!",
				, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].Активити");
		КонецЕсли;
		
		ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(СтрокаТаблицы, "СтранаПроисхождения", "Country of origin", Отказ);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.PSA) Тогда
			
			// PSA.Country vs ProcessLevel.Country
			Если ЗначениеЗаполнено(ProcessLevel) Тогда
				
				PSACountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтрокаТаблицы.PSA, "Country");
				ProcessLevelCountry = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(ProcessLevel, "Country");
				Если PSACountry <> ProcessLevelCountry Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": Country '" + СокрЛП(PSACountry) + "' of PSA contract differs from Country of Process level!",
						, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].PSA",, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			// PSA.ExpiryDate vs Invoice.Date
			Если ЗначениеЗаполнено(Дата) Тогда
				
				PSAExpiryDate = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтрокаТаблицы.PSA, "ExpiryDate");
				Если PSAExpiryDate < НачалоДня(Дата) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": Expiry date '" + Формат(PSAExpiryDate, "ДЛФ=D") + "' of PSA contract is earlier that Invoice date!",
						, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].PSA",, Отказ);		
				КонецЕсли;
				
			КонецЕсли;
			
			// PSA.Segment vs AU.Segment
			Если ЗначениеЗаполнено(СтрокаТаблицы.КостЦентр) Тогда
				
				PSASegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтрокаТаблицы.PSA, "Segment");
				Если ЗначениеЗаполнено(PSASegment) Тогда
					
					AUSegment = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтрокаТаблицы.КостЦентр, "Segment");
					Если PSASegment <> AUSegment Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": Segment '" + СокрЛП(PSASegment) + "' of PSA contract differs from Segment '" + СокрЛП(AUSegment) + "' of AU!",
							, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].PSA",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПоСтрокам = ПроверяемаяТаблица.Итог("Сумма");
	Если СуммаДокумента <> СуммаПоСтрокам Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Total ex-works не равен итоговой сумме по строкам инвойса!",
			ЭтотОбъект, "СуммаДокумента", , Отказ);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПоместитьВДополнительныеСвойстваДополнительныеДанныеПередЗаписью(ТаблицаСтрокИнвойса, РежимЗаписи)
	
	СтруктураТекстов = Новый Структура;
	СтруктураПараметров = Новый Структура;
		
	POLines = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаСтрокИнвойса, "СтрокаЗаявкиНаЗакупку");
	Если POLines.Количество() Тогда
		
		СтруктураПараметров.Вставить("POLines", POLines);
		СтруктураТекстов.Вставить("РеквизитыPOLines",
			"ВЫБРАТЬ
			|	POLines.Ссылка КАК POLine,
			|	POLines.Владелец КАК PO,
			|	POLines.Владелец.Код КАК PONo,
			|	POLines.Владелец.БОРГ КАК BORG,
			|	POLines.Владелец.БОРГ.Компания КАК SoldTo,
			|	POLines.КодПоставщика КАК PartNo,
			|	POLines.ЕдиницаИзмерения КАК UOM,
			|	POLines.Валюта КАК Currency,
			|	POLines.Классификатор КАК ERPTreatment,
			|	POLines.КостЦентр КАК AU,
			|	POLines.АктивитиКод КАК Activity,
			|	POLines.Владелец.ДатаЗаявкиНаЗакупку КАК PODate,
			|	ВЫБОР
			|		КОГДА POSuppliersNotRequiringEUC.POSupplierName ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК SupplierNotRequiringEUC
			|ИЗ
			|	Справочник.СтрокиЗаявкиНаЗакупку КАК POLines
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.POSuppliersNotRequiringEUC КАК POSuppliersNotRequiringEUC
			|		ПО POLines.Владелец.Поставщик = POSuppliersNotRequiringEUC.POSupplierName
			|			И POLines.Владелец.ДатаЗаявкиНаЗакупку >= POSuppliersNotRequiringEUC.PODateFrom
			|ГДЕ
			|	POLines.Ссылка В(&POLines)");
		
	КонецЕсли; 
				
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если НЕ ЭтоНовый() Тогда
		
		СтруктураТекстов.Вставить("СтарыеРеквизиты",
			"ВЫБРАТЬ
			|	Invoice.Номер КАК No,
			|	Invoice.Проверен,
			|	Invoice.Отменен,
			|	Invoice.Покупатель,
			|	Invoice.OperatingLocation.DefaultWH КАК DefaultWH
			|ИЗ
			|	Документ.Инвойс КАК Invoice
			|ГДЕ
			|	Invoice.Ссылка = &Ссылка");
			
		СтруктураТекстов.Вставить("DOCPosted",
			"ВЫБРАТЬ
			|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC
			|ИЗ
			|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
			|ГДЕ
			|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = &Ссылка
			|	И КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Проведен");
			
		СтруктураТекстов.Вставить("СтарыеДанныеПоСтрокамИнвойса",
			"ВЫБРАТЬ
			|	Items.Ссылка,
			|	Items.Наименование,
			|	Items.НомерСтрокиИнвойса,
			|	Items.КостЦентр,
			|	Items.Активити,
			|	Items.НомерЗаявкиНаЗакупку
			|ИЗ
			|	Справочник.СтрокиИнвойса КАК Items
			|ГДЕ
			|	Items.Инвойс.Ссылка = &Ссылка
			|	И НЕ Items.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Items.НомерСтрокиИнвойса");
			
	КонецЕсли;
		
	Если НЕ Отменен Тогда
		
		Если ЗначениеЗаполнено(Номер) Тогда
			
			СтруктураПараметров.Вставить("Номер", Номер);
			
			СтруктураТекстов.Вставить("InvoicesСТакимЖеНомером",
				"ВЫБРАТЬ
				|	Invoices.Представление
				|ИЗ
				|	Документ.Инвойс КАК Invoices
				|ГДЕ
				|	Invoices.Номер = &Номер
				|	И Invoices.Ссылка <> &Ссылка
				|	И (НЕ Invoices.Отменен)");
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ProcessLevel", ProcessLevel);
			
		СтруктураТекстов.Вставить("EUCCheckForPO",
			"ВЫБРАТЬ
			|	EUCCheck.EndOfEUCCheckForPO,
			|	EUCCheck.EndOfEUCCheck
			|ИЗ
			|	РегистрСведений.EUCCheck КАК EUCCheck
			|ГДЕ
			|	EUCCheck.ProcessLevel = &ProcessLevel
			|	И EUCCheck.EndOfEUCCheckForPO <> ДАТАВРЕМЯ(1, 1, 1)");
			
					
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(Contract) Тогда
			
			СтруктураПараметров.Вставить("Contract", Contract);
			СтруктураТекстов.Вставить("РеквизитыContract",
				"ВЫБРАТЬ
				|	Contracts.Seller,
				|	Contracts.ConsignTo,
				|	Contracts.ExpiryDate,
				|	Contracts.Incoterms
				|ИЗ
				|	Справочник.Contracts КАК Contracts
				|ГДЕ
				|	Contracts.Ссылка = &Contract");
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Проведен Тогда
		
		СтруктураПараметров.Вставить("InvoiceDate", Дата);
		СтруктураТекстов.Вставить("ClosingDocuments",
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	InvoiceLinesCostsОбороты.Регистратор.Представление КАК ClosingDocumentПредставление
			|ИЗ
			|	РегистрНакопления.InvoiceLinesCosts.Обороты(&InvoiceDate, , Регистратор, СтрокаИнвойса.Инвойс = &Ссылка) КАК InvoiceLinesCostsОбороты");
			
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураРезультатов = РГСофт.ПолучитьСтруктуруРезультатовТекстовЗапросов(СтруктураТекстов, СтруктураПараметров);
		
	ДополнительныеСвойства.Вставить("ТаблицаPOLines", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыPOLines") Тогда
		ДополнительныеСвойства.ТаблицаPOLines = СтруктураРезультатов.РеквизитыPOLines.Выгрузить();
		ДополнительныеСвойства.ТаблицаPOLines.Индексы.Добавить("POLine");
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ВыборкаСтарыхРеквизитов", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеРеквизиты") Тогда
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитов = СтруктураРезультатов.СтарыеРеквизиты.Выбрать();
		ДополнительныеСвойства.ВыборкаСтарыхРеквизитов.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаInvoicesСТакимЖеНомером", Неопределено);
	Если СтруктураРезультатов.Свойство("InvoicesСТакимЖеНомером") Тогда
		ДополнительныеСвойства.ВыборкаInvoicesСТакимЖеНомером = СтруктураРезультатов.InvoicesСТакимЖеНомером.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаРеквизитовContract", Неопределено);
	Если СтруктураРезультатов.Свойство("РеквизитыContract") Тогда
		ДополнительныеСвойства.ВыборкаРеквизитовContract = СтруктураРезультатов.РеквизитыContract.Выбрать();
		ДополнительныеСвойства.ВыборкаРеквизитовContract.Следующий();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаClosingDocuments", Неопределено);
	Если СтруктураРезультатов.Свойство("ClosingDocuments") Тогда
		ДополнительныеСвойства.ВыборкаClosingDocuments = СтруктураРезультатов.ClosingDocuments.Выбрать();	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаEUCCheckForPO", Неопределено);
	Если СтруктураРезультатов.Свойство("EUCCheckForPO") Тогда
		ДополнительныеСвойства.ВыборкаEUCCheckForPO = СтруктураРезультатов.EUCCheckForPO.Выбрать();	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВыборкаDOCPosted", Неопределено);
	Если СтруктураРезультатов.Свойство("DOCPosted") Тогда
		ДополнительныеСвойства.ВыборкаDOCPosted = СтруктураРезультатов.DOCPosted.Выбрать();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТаблицаСтарыеДанныеПоСтрокамИнвойса", Неопределено);
	Если СтруктураРезультатов.Свойство("СтарыеДанныеПоСтрокамИнвойса") Тогда
		ДополнительныеСвойства.ТаблицаСтарыеДанныеПоСтрокамИнвойса = СтруктураРезультатов.СтарыеДанныеПоСтрокамИнвойса.Выгрузить();
	КонецЕсли;
	
	// { RGS AGorlenko 27.01.2016 11:33:25 - S-I-0001504
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	// } RGS AGorlenko 27.01.2016 11:33:27 - S-I-0001504
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ДозаполнитьРеквизитыСДополнительнымиДанными()
		
	ДозаполнитьDSSNumber(ДополнительныеСвойства.ВыборкаСтарыхРеквизитов);
	
	ЗаполнитьPOList(ДополнительныеСвойства.ТаблицаPOLines);
	
	ДозаполнитьРеквизитыGoods(ДополнительныеСвойства.ТаблицаPOLines);
	
КонецПроцедуры

Процедура ДозаполнитьDSSNumber(ВыборкаСтарыхРеквизитов)
	
	Если Не ЗначениеЗаполнено(DSSNumber) 
		Или Не ЭтоНовый() и СокрЛП(Номер) <> СокрЛП(ВыборкаСтарыхРеквизитов.No) 
		и DSSNumber = СокрЛП(ВыборкаСтарыхРеквизитов.No) Тогда 
		DSSNumber = СокрЛП(Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьPOList(ТаблицаPOLines)
	
	NewPOList = "";
	Если ТаблицаPOLines <> Неопределено Тогда
		МассивPONo = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекцииБезПустыхЗначенийИДублей(ТаблицаPOLines, "PONo");
		МассивPONo = РГСофтКлиентСервер.СортироватьМассив(МассивPONo);
		NewPOList = РГСофтКлиентСервер.ПолучитьСтрокуИзМассиваПодстрокСокрЛП(МассивPONo, ", ");
	КонецЕсли;	
	РГСофтКлиентСервер.УстановитьЗначение(POList, NewPOList);
	
КонецПроцедуры

Процедура ДозаполнитьРеквизитыGoods(ТаблицаPOLines)
	
	// Для России по-умолчанию проставляем постоянный ввоз
	Если ProcessLevel = Справочники.ProcessLevels.RUWE
		ИЛИ ProcessLevel = Справочники.ProcessLevels.RUEA Тогда
		
		Для Каждого СтрокаТаблицыGoods Из ТаблицаСтрокИнвойса Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыGoods.PermanentTemporary) Тогда
				СтрокаТаблицыGoods.PermanentTemporary = Перечисления.PermanentTemporary.Permanent;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ProcessLevel = Справочники.ProcessLevels.KZ Тогда
		
		// Для Казахстана тоже сделаем, чтобы груз был Permanent, но только, если он GOLD
		Если Голд Тогда
			
			Для Каждого СтрокаТаблицыGoods Из ТаблицаСтрокИнвойса Цикл
			
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыGoods.PermanentTemporary) Тогда
					СтрокаТаблицыGoods.PermanentTemporary = Перечисления.PermanentTemporary.Permanent;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Отменен Тогда 
		Возврат;
	КонецЕсли;
	  	
	ВыборкаEUCCheckForPO = ДополнительныеСвойства.ВыборкаEUCCheckForPO;
	Если ВыборкаEUCCheckForPO.Следующий()
		И Не ЗначениеЗаполнено(ВыборкаEUCCheckForPO.EndOfEUCCheck) Тогда 
		
		Для Каждого СтрокаТаблицыGoods Из ТаблицаСтрокИнвойса Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицыGoods.СтрокаЗаявкиНаЗакупку) Тогда
				
				РеквизитыPOLine = ТаблицаPOLines.Найти(СтрокаТаблицыGoods.СтрокаЗаявкиНаЗакупку, "POLine");
				
				Если РеквизитыPOLine.PODate >= ВыборкаEUCCheckForPO.EndOfEUCCheckForPO 
					ИЛИ РеквизитыPOLine.SupplierNotRequiringEUC Тогда 
					СтрокаТаблицыGoods.EUCNotRequired = Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьВозможностьИзменения(Отказ, ВыборкаClosingDocuments)
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
		
	Пока ВыборкаClosingDocuments.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change '" + ЭтотОбъект + "' because it is already closed by '" + ВыборкаClosingDocuments.ClosingDocumentПредставление + "'!",
			ЭтотОбъект, , , Отказ);
		
	КонецЦикла;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаDOCPosted = ДополнительныеСвойства.ВыборкаDOCPosted;
	ТаблицаСтарыеДанныеПоСтрокамИнвойса = ДополнительныеСвойства.ТаблицаСтарыеДанныеПоСтрокамИнвойса;
	Если ВыборкаDOCPosted = Неопределено ИЛИ ТаблицаСтарыеДанныеПоСтрокамИнвойса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыборкаDOCPosted.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	DOC = ВыборкаDOCPosted.DOC;
	
	Если ТаблицаСтарыеДанныеПоСтрокамИнвойса.Количество() <> ТаблицаСтрокИнвойса.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"You can not change number of rows of '" + ЭтотОбъект + "' because it is used in posted DOC '" + DOC + "'!",
			ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для ТекИндекс = 0 ПО ТаблицаСтрокИнвойса.Количество() - 1 Цикл
		
		СтрокаНовыхДанных = ТаблицаСтрокИнвойса[ТекИндекс];
		СтрокаСтарыхДанных = ТаблицаСтарыеДанныеПоСтрокамИнвойса[ТекИндекс];
		
		Если СтрокаНовыхДанных.Ссылка <> СтрокаСтарыхДанных.Ссылка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You can not change invoice line '" + СтрокаНовыхДанных.Ссылка + "' in '" + ЭтотОбъект + "' because it is used in posted DOC '" + DOC + "'!",
				ЭтотОбъект, , , Отказ);
		КонецЕсли;
			
		Если СтрокаНовыхДанных.КостЦентр <> СтрокаСтарыхДанных.КостЦентр Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You can not change AU '" + СтрокаСтарыхДанных.КостЦентр + "' in line '" + СтрокаНовыхДанных.НомерСтрокиИнвойса + "' in '" + ЭтотОбъект + "' because it is used in posted DOC '" + DOC + "'!",
				, "ТЗСтрокИнвойса[" + (СтрокаНовыхДанных.НомерСтрокиИнвойса-1) + "].КостЦентр", , Отказ);
		КонецЕсли;
			
		Если СтрокаНовыхДанных.Активити <> СтрокаСтарыхДанных.Активити Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You can not change Activity '" + СтрокаСтарыхДанных.Активити + "' in line '" + СтрокаНовыхДанных.НомерСтрокиИнвойса + "' in '" + ЭтотОбъект + "' because it is used in posted DOC '" + DOC + "'!",
				, "ТЗСтрокИнвойса[" + (СтрокаНовыхДанных.НомерСтрокиИнвойса-1) + "].Активити", , Отказ);
		КонецЕсли;
		
		Если СтрокаНовыхДанных.НомерЗаявкиНаЗакупку <> СтрокаСтарыхДанных.НомерЗаявкиНаЗакупку Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"You can not change PO no '" + СтрокаСтарыхДанных.НомерЗаявкиНаЗакупку + "' in line '" + СтрокаНовыхДанных.НомерСтрокиИнвойса + "' in '" + ЭтотОбъект + "' because it is used in posted DOC '" + DOC + "'!",
				, "ТЗСтрокИнвойса[" + (СтрокаНовыхДанных.НомерСтрокиИнвойса-1) + "].НомерЗаявкиНаЗакупку", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьЗаполнениеРеквизитов(Отказ, РежимЗаписи, ТаблицаСтрокИнвойса, ТаблицаPOLines)
	
	ПроверитьЗаполнениеШапки(Отказ, РежимЗаписи);
	
	ПроверитьЗаполнениеСтрокИнвойса(
		Отказ,
		РежимЗаписи,
		ТаблицаСтрокИнвойса,
		ТаблицаPOLines);
	
КонецПроцедуры 

// ДОДЕЛАТЬ
Процедура ПроверитьЗаполнениеШапки(Отказ, РежимЗаписи)
	
	Если Отменен Тогда
		Возврат;	
	КонецЕсли;	
	
	// ПЕРЕДАВАТЬ ПАРАМЕТАМИ ПРОЦЕДУРЫ В ЯВНОМ ВИДЕ
	ВыборкаInvoicesСТакимЖеНомером = ДополнительныеСвойства.ВыборкаInvoicesСТакимЖеНомером;
	Пока ВыборкаInvoicesСТакимЖеНомером.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"There is already '" + ВыборкаInvoicesСТакимЖеНомером.Представление + "' with no. '" + СокрЛП(Номер) + "'!",
			ЭтотОбъект, "Номер", , Отказ);
	КонецЦикла;
		
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Contract) Тогда
		
		РеквизитыКонтракта = ДополнительныеСвойства.ВыборкаРеквизитовContract;
		
		// Сверим Contract.Consign-to и Consign-to
		Если ЗначениеЗаполнено(Декларант) И Декларант <> РеквизитыКонтракта.ConsignTo Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Consign-to '" + СокрЛП(РеквизитыКонтракта.ConsignTo) + "' in Contract differs from Consign-to '" + СокрЛП(Декларант) + "' in Invoice!",
				ЭтотОбъект, "Contract", , Отказ);
		КонецЕсли;
		
		// Сверим Contract.Seller и Seller
		Если ЗначениеЗаполнено(Продавец) И ЗначениеЗаполнено(Декларант) И Продавец <> РеквизитыКонтракта.Seller Тогда
			
			// Если для этого Consign to действительно требуется контракт - ругнемся
			ConsignToDoNotRequireContract = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(Декларант, "DoNotRequireContractInInvoices");	
			Если НЕ ConsignToDoNotRequireContract Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Seller '" + СокрЛП(РеквизитыКонтракта.Seller) + "' in Contract differs from Seller '" + СокрЛП(Продавец) + "' in Invoice!",
					ЭтотОбъект, "Contract", , Отказ);
					
			КонецЕсли;
					
		КонецЕсли;	
		
		// Сверим Contract.Incoterms и Incoterms
		Если ЗначениеЗаполнено(УсловияПоставки) И УсловияПоставки <> РеквизитыКонтракта.Incoterms Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Incoterms '" + СокрЛП(РеквизитыКонтракта.Incoterms) + "' in Contract differs from Incoterms '" + СокрЛП(УсловияПоставки) + "' in Invoice!",
				ЭтотОбъект, "Contract", , Отказ);		
		КонецЕсли;

		// Сверим Contract.ExpiryDate и Date
		Если НачалоДня(Дата) > РеквизитыКонтракта.ExpiryDate Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Expiry date '" + Формат(РеквизитыКонтракта.ExpiryDate, "ДЛФ=D") + "' of Contract is earlier than Invoice date '" + Формат(Дата, "ДЛФ=D") + "'!",
				ЭтотОбъект, "Contract", , Отказ);	
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьЗаполнениеСтрокИнвойса(Отказ, РежимЗаписи, ПроверяемаяТаблица, ТаблицаPOLines)
	
	Если Отменен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтрокаЗаявкиНаЗакупку) Тогда
			
			РеквизитыPOLine = ТаблицаPOLines.Найти(СтрокаТаблицы.СтрокаЗаявкиНаЗакупку, "POLine");
			Если ВРег(СокрЛП(СтрокаТаблицы.НомерЗаявкиНаЗакупку)) <> ВРег(СокрЛП(РеквизитыPOLine.PONo)) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line """ + СтрокаТаблицы.НомерСтрокиИнвойса + """: PO no. (" + СтрокаТаблицы.НомерЗаявкиНаЗакупку + ") differs from PO no. in PO line (" + РеквизитыPOLine.PONo + ")!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;

	// { RGS AGorlenko 08.09.2014 23:45:41 - S-I-0000862
	// Переделать поиск по коду !!!
	//Smith = Справочники.SoldTo.НайтиПоКоду("SLI-SMI RU");
	// } RGS AGorlenko 08.09.2014 23:45:42 - S-I-0000862
	
	Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтрокаЗаявкиНаЗакупку) Тогда
			
			РеквизитыPOLine = ТаблицаPOLines.Найти(СтрокаТаблицы.СтрокаЗаявкиНаЗакупку, "POLine");
			
			Если РеквизитыPOLine.PODate > Дата Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""PO date " + Формат(РеквизитыPOLine.PODate, "ДЛФ=D") + """ of ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """ is older than ""Invoice date " + Формат(Дата, "ДЛФ=D") + """!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
				
			КонецЕсли;
			
			// { RGS AGorlenko 08.09.2014 23:47:39 - S-I-0000862
			//Если Не Transfer И РеквизитыPOLine.SoldTo <> Покупатель Тогда
			Если Не Transfer И РеквизитыPOLine.SoldTo <> Покупатель 
				И Покупатель <> мParentCompany_Smith И Покупатель <> мParentCompany_MI Тогда
			// } RGS AGorlenko 08.09.2014 23:47:41 - S-I-0000862
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Sold-to " + СокрЛП(РеквизитыPOLine.SoldTo) + """ in the ""BORG " + СокрЛП(РеквизитыPOLine.BORG) + """ in the ""PO " + РеквизитыPOLine.PO + """ differs from ""Sold-to " + СокрЛП(Покупатель) + """ in the header!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
				
			КонецЕсли;
			
			// { RGS AGorlenko 08.09.2014 23:48:40 - S-I-0000862
			//Если РеквизитыPOLine.Currency <> Валюта Тогда
			Если РеквизитыPOLine.Currency <> Валюта 
				И Покупатель <> мParentCompany_Smith И Покупатель <> мParentCompany_MI Тогда
			// } RGS AGorlenko 08.09.2014 23:48:41 - S-I-0000862
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line """ + СтрокаТаблицы.НомерСтрокиИнвойса + """: ""Currency " + СокрЛП(РеквизитыPOLine.Currency) + "" "in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """ differs from ""Currency " + Валюта + """ in the header!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
				
			КонецЕсли;
			
			Если НЕ SkipSomeChecks Тогда
				
				Если ВРег(СокрЛП(РеквизитыPOLine.PartNo)) <> ВРег(СтрокаТаблицы.КодПоИнвойсу) Тогда
				
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Part no. " + СокрЛП(РеквизитыPOLine.PartNo) + """ in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """ differs from ""Part no. " + СтрокаТаблицы.КодПоИнвойсу + """ in the line!",
						, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
						
				КонецЕсли;
				
			КонецЕсли; 
			
			// { RGS AGorlenko 08.09.2014 23:51:01 - S-I-0000862
			//Если РеквизитыPOLine.UOM <> СтрокаТаблицы.ЕдиницаИзмерения Тогда
			Если РеквизитыPOLine.UOM <> СтрокаТаблицы.ЕдиницаИзмерения 
				И Покупатель <> мParentCompany_Smith И Покупатель <> мParentCompany_MI Тогда
			// } RGS AGorlenko 08.09.2014 23:51:03 - S-I-0000862
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""UOM " + СокрЛП(РеквизитыPOLine.UOM) + """ in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """ differs from ""UOM " + СокрЛП(СтрокаТаблицы.ЕдиницаИзмерения) + """ in the line!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].СтрокаЗаявкиНаЗакупку",, Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыPOLine.ERPTreatment)
				И СтрокаТаблицы.Классификатор <> Перечисления.ТипыЗаказа.SS
				И СтрокаТаблицы.Классификатор <> РеквизитыPOLine.ERPTreatment Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""ERP treatment " + СтрокаТаблицы.Классификатор + """ differs from ""ERP treatment " + РеквизитыPOLine.ERPTreatment + """ in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].Классификатор",, Отказ);
				
			КонецЕсли; 
			
			Если Не Transfer И Не DirectSales И ЗначениеЗаполнено(РеквизитыPOLine.AU) 
				И СокрЛП(СтрокаТаблицы.КостЦентр) <> СокрЛП(РеквизитыPOLine.AU) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""AU " + СокрЛП(СтрокаТаблицы.КостЦентр) + """ differs from ""AU " + СокрЛП(РеквизитыPOLine.AU) + """ in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].КостЦентр",, Отказ);
				
			КонецЕсли;
			
			Если Не Transfer И Не DirectSales 
				И ЗначениеЗаполнено(РеквизитыPOLine.Activity)
				И ВРег(СокрЛП(СтрокаТаблицы.Активити)) <> ВРег(СокрЛП(РеквизитыPOLine.Activity)) Тогда	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"In line " + СтрокаТаблицы.НомерСтрокиИнвойса + ": ""Activity " + СтрокаТаблицы.Активити + """ differs from ""Activity " + РеквизитыPOLine.Activity + """ in the ""PO line " + СокрЛП(РеквизитыPOLine.POLine) + """!",
					, "ТЗСтрокИнвойса[" + (СтрокаТаблицы.НомерСтрокиИнвойса-1) + "].Активити",, Отказ);	
					
			КонецЕсли;
			
		КонецЕсли;
		       				
		КодAU = РГСофтСерверПовтИспСеанс.ПолучитьЗначениеРеквизита(СтрокаТаблицы.КостЦентр, "Код");	
		Если ВРег(СокрЛП(КодAU)) = "DUMMY" Тогда
			СообщитьОбОшибкеВСтрокеТаблицыСтрокИнвойса(
				"you can not use the ""AU DUMMY""!",
				СтрокаТаблицы.НомерСтрокиИнвойса, "КостЦентр", Отказ);		
		КонецЕсли;
		
		//для товаров во временном ввозе обязательно должны быть заполнены серийники
		//а также для ERP treatments
		МассивERPTreatmentsДляКоторыхОбязателенСерийныйНомер = ImportExportСерверПовтИспСеанс.ПолучитьERPTreatmentsДляКоторыхОбязателенСерийныйНомер();
		Если (СтрокаТаблицы.PermanentTemporary = Перечисления.PermanentTemporary.Temporary
			ИЛИ МассивERPTreatmentsДляКоторыхОбязателенСерийныйНомер.Найти(СтрокаТаблицы.Классификатор) <> Неопределено)
			И (Не ЗначениеЗаполнено(СтрокаТаблицы.СерийныйНомер) ИЛИ ВРег(СокрЛП(СтрокаТаблицы.СерийныйНомер)) = "N/A"
			ИЛИ ВРег(СокрЛП(СтрокаТаблицы.СерийныйНомер)) = "N\A" ИЛИ ВРег(СокрЛП(СтрокаТаблицы.СерийныйНомер)) = "NA")  Тогда
				СообщитьОбОшибкеВСтрокеТаблицыСтрокИнвойса(
				"S/N can not be empty or ""N/A"", ""NA"" for temporary item and for ERP treatments: Asset, LOAN, FAT!",
				СтрокаТаблицы.НомерСтрокиИнвойса, "СерийныйНомер", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитаСтрокиТаблицыСтрокИнвойса(Строка, ИмяРеквизита, ПредставлениеРеквизита, Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
		СообщитьОбОшибкеВСтрокеТаблицыСтрокИнвойса(
			"""" + ПредставлениеРеквизита + """ is empty!",
			Строка.НомерСтрокиИнвойса, ИмяРеквизита, Отказ);		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеВСтрокеТаблицыСтрокИнвойса(ТекстОшибки, НомерСтроки, ИмяРеквизита, Отказ=Ложь)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"In line " + НомерСтроки + ": " + ТекстОшибки,
		, "ТЗСтрокИнвойса[" + (НомерСтроки-1) + "]." + ИмяРеквизита, , Отказ);
	
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////
// ПРИ ЗАПИСИ

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если НужнаСинхронизация Тогда
	
		ДобавитьДополнительныеКолонкиВТаблицуСтрокИнвойса(ТаблицаСтрокИнвойса);
		
		// получим таблицу строк инвойса из базы
		ТаблицаСтрокИнвойсаБазы = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(Ссылка);
		
		СинхронизируемClientPOs(ТаблицаСтрокИнвойса, Справочники.ClientPO, Отказ);

		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		// Синхронизируем таблицу строк инвойсов со строками в базе данных
		РГСофт.СинхронизироватьСтрокиТаблицыСБазойДанных(ТаблицаСтрокИнвойсаБазы, ТаблицаСтрокИнвойса, Справочники.СтрокиИнвойса, Отказ);
		  				
	КонецЕсли;
	
	// { RGS AGorlenko 09.02.2016 23:06:26 - S-I-0001504
	ПроверитьItemsWithoutBORGs(Отказ);
	// } RGS AGorlenko 09.02.2016 23:06:27 - S-I-0001504
	
	ТаблицаСтрокИнвойса = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документы.Инвойс.ОбновитьФлагEUCNotRequired(Ссылка);
	
	       		
КонецПроцедуры

Процедура СинхронизируемClientPOs(ТаблицаСтрокИнвойса, СправочникМенеджер, Отказ)
	
	Если Не DirectSales Тогда 
		Возврат;
	КонецЕсли;

	// обработаем полученную таблицу
	Для Каждого Стр Из ТаблицаСтрокИнвойса Цикл
		
		Если ЗначениеЗаполнено(Стр.ClientPO) Тогда
						
			// строка изменилась, обработаем это
			Объект = Стр.ClientPO.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(Объект, Стр);
			Объект.ПометкаУдаления = ПометкаУдаления;
			ОбщегоНазначения.ПопыткаЗаписиОбъекта(Объект, Отказ);
			
			Стр.ClientPO = Объект.Ссылка;

		Иначе
			
			// строка добавлена
			Объект = СправочникМенеджер.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Стр);
			Объект.ПометкаУдаления = ПометкаУдаления;
			ОбщегоНазначения.ПопыткаЗаписиОбъекта(Объект, Отказ);
			
			Стр.ClientPO = Объект.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	       		
КонецПроцедуры

// { RGS AGorlenko 09.02.2016 23:01:05 - S-I-0001504
Процедура ПроверитьItemsWithoutBORGs(Отказ)
	
	Если НЕ (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиИнвойса.Ссылка КАК ItemСсылка,
	|	ВЫБОР
	|		КОГДА НЕ ЗаявкиНаЗакупку.БОРГ ЕСТЬ NULL 
	|				И ЗаявкиНаЗакупку.БОРГ <> ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка)
	|			ТОГДА ЗаявкиНаЗакупку.БОРГ
	|		КОГДА НЕ BORGs.Ссылка ЕСТЬ NULL 
	|			ТОГДА BORGs.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(BORGs1.Ссылка, ЗНАЧЕНИЕ(Справочник.BORGs.ПустаяСсылка))
	|	КОНЕЦ КАК BORG,
	|	СтрокиИнвойса.НомерСтрокиИнвойса КАК НомерСтрокиИнвойса,
	|	ВЫБОР
	|		КОГДА НЕ ЗаявкиНаЗакупку.Код ЕСТЬ NULL 
	|			ТОГДА ЗаявкиНаЗакупку.Код
	|		ИНАЧЕ СтрокиИнвойса.НомерЗаявкиНаЗакупку
	|	КОНЕЦ КАК PONo
	|ИЗ
	|	Справочник.СтрокиИнвойса КАК СтрокиИнвойса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs
	|		ПО (НЕ BORGs.ПометкаУдаления)
	|			И (ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 4) = BORGs.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BORGs КАК BORGs1
	|		ПО (НЕ BORGs1.ПометкаУдаления)
	|			И (ПОДСТРОКА(СтрокиИнвойса.НомерЗаявкиНаЗакупку, 1, 2) = BORGs1.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаявкиНаЗакупку КАК ЗаявкиНаЗакупку
	|		ПО СтрокиИнвойса.НомерЗаявкиНаЗакупку = ЗаявкиНаЗакупку.Код
	|			И (НЕ ЗаявкиНаЗакупку.ПометкаУдаления)
	|ГДЕ
	|	СтрокиИнвойса.Инвойс = &Ссылка
	|	И НЕ СтрокиИнвойса.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиИнвойса";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	// { RGS AArsentev 17.11.2016 S-I-0002029
	ВыборкаItemsWithoutBORGs = Запрос.Выполнить().Выбрать();
	Пока ВыборкаItemsWithoutBORGs.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаItemsWithoutBORGs.BORG) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"In line " + ВыборкаItemsWithoutBORGs.НомерСтрокиИнвойса + " BORG is empty (PO: " + СокрЛП(ВыборкаItemsWithoutBORGs.PONo) + ")!",
			, "ТЗСтрокИнвойса[" + (ВыборкаItemsWithoutBORGs.НомерСтрокиИнвойса-1) + "].НомерЗаявкиНаЗакупку", , Отказ);
		Иначе
			ДлинаБорга = СтрДлина(СокрЛП(ВыборкаItemsWithoutBORGs.BORG));
			БоргИзPO = Лев(ВыборкаItemsWithoutBORGs.PONo, ДлинаБорга);
			Если БоргИзPO <> СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаItemsWithoutBORGs.BORG, "Код")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"In line " + ВыборкаItemsWithoutBORGs.НомерСтрокиИнвойса + " wrong BORG (PO: " + СокрЛП(ВыборкаItemsWithoutBORGs.PONo) + ")!",
				, "ТЗСтрокИнвойса[" + (ВыборкаItemsWithoutBORGs.НомерСтрокиИнвойса-1) + "].НомерЗаявкиНаЗакупку", , Отказ);
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	// } RGS AArsentev 17.11.2016 S-I-0002029
	
КонецПроцедуры // } RGS AGorlenko 09.02.2016 23:01:06 - S-I-0001504

Процедура ДобавитьДополнительныеКолонкиВТаблицуСтрокИнвойса(ТаблицаСтрокИнвойса)
	
	КолонкиТаблицы = ТаблицаСтрокИнвойса.Колонки;
	
	Если КолонкиТаблицы.Найти("Инвойс") = Неопределено Тогда
		КолонкиТаблицы.Добавить("Инвойс", Новый ОписаниеТипов("ДокументСсылка.Инвойс"));
	КонецЕсли;
	ТаблицаСтрокИнвойса.ЗаполнитьЗначения(Ссылка, "Инвойс");
	
	Если КолонкиТаблицы.Найти("Final") = Неопределено Тогда
		КолонкиТаблицы.Добавить("Final", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ТаблицаСтрокИнвойса.ЗаполнитьЗначения(Проведен, "Final"); 
	
	Если КолонкиТаблицы.Найти("SoldTo") = Неопределено Тогда
		КолонкиТаблицы.Добавить("SoldTo", Новый ОписаниеТипов("СправочникСсылка.SoldTo"));
	КонецЕсли;
	ТаблицаСтрокИнвойса.ЗаполнитьЗначения(Покупатель, "SoldTo");
	
	Если КолонкиТаблицы.Найти("Currency") = Неопределено Тогда
		КолонкиТаблицы.Добавить("Currency", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	ТаблицаСтрокИнвойса.ЗаполнитьЗначения(Валюта, "Currency");
		
	Если КолонкиТаблицы.Найти("Наименование") = Неопределено Тогда	
		КолонкиТаблицы.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(30)));	
	КонецЕсли;	
	     			
	Для Каждого Строка Из ТаблицаСтрокИнвойса Цикл
		Строка.Наименование = Справочники.СтрокиИнвойса.ПолучитьНаименованиеImportItem(Номер, Строка.НомерСтрокиИнвойса);
	КонецЦикла;
	
КонецПроцедуры
              
//{ RGS AArsentev 23.11.2016 Версии доков
Процедура ПроверитьВерсию()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инвойс", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка КАК DOC,
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.CCA,
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.MOT,
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Requested,
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.RequestedPOA
		|ИЗ
		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы
		|ГДЕ
		|	КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Инвойс = &Инвойс
		|	И НЕ КонсолидированныйПакетЗаявокНаПеревозкуИнвойсы.Ссылка.Отменен";
		   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()  Тогда
	 	DOC = Выборка.DOC;
		ТаблицаЛинийИнвойсов = ТаблицаСтрокИнвойса;
		ДобавитьДополнительныеКолонкиВТаблицуСтрокИнвойса(ТаблицаЛинийИнвойсов);
		ТаблицаИнвойсов = Документы.Инвойс.ПолучитьТаблицуInvoiceLines(Ссылка);
		//{ RGS AArsentev 20.12.2016
		//ТаблицыИдентичны = НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаИнвойсов, ТаблицаЛинийИнвойсов);
		Если ТаблицаЛинийИнвойсов.Количество() > ТаблицаИнвойсов.Количество() Тогда 
		//Если Не ТаблицыИдентичны Тогда
		//} RGS AArsentev 20.12.2016
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей = РегистрыСведений.DOCVersions.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
			НаборЗаписей.Отбор.DOC.Установить(DOC);
			НаборЗаписей.Прочитать();
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ТекущаяДата();
			Запись.Version = Документы.КонсолидированныйПакетЗаявокНаПеревозку.rgsПолучитьКоличествоВерсий(DOC) + 1;
			Запись.DOC = DOC;
			Запись.Регистратор = DOC;
			Запись.CCA = Выборка.CCA;
			Запись.MOT = Выборка.MOT;
			Запись.Received = Дата("01.01.0001 00:00:00");
			Запись.Accepted = Дата("01.01.0001 00:00:00");
			//Запись.Requested = Дата("01.01.0001 00:00:00");
			Запись.ИзменилсяСостав = Истина;
			// { RGS DKazanskiy 24.07.2018 11:56:40 - 
			Запись.Requested 	= Выборка.Requested;
			Запись.POA			= Выборка.RequestedPOA;
			// } RGS DKazanskiy 24.07.2018 11:56:41 - 
			НаборЗаписей.Записать();
			
			//{ RGS AArsentev 06.12.2016
			Док = DOC.ПолучитьОбъект();
			Док.Received = Дата("01.01.0001 00:00:00");
			Док.Accepted = Дата("01.01.0001 00:00:00");
			//Док.Requested = Дата("01.01.0001 00:00:00");
			Док.Записать();
			//} RGS AArsentev 06.12.2016
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //} RGS AArsentev 23.11.2016 Версии доков

////////////////////////////////////////////////////////////////////////////

// Закомментировано на неопределенное время, так как обмен с NFS не используется
//Процедура ЗарегистрироватьДляОбменаСNFSПриНеобходимости(Отказ)
//	
//	// Если Invoice - новый, значит он еще не может быть указан в DOC.Выходим.
//	Если ЭтоНовый() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если ни один реквизит не изменился - значит ничего регистрировать не надо - выходим	
//	Если СокрЛП(Номер) = СокрЛП(ДополнительныеСвойства.ВыборкаСтарыхРеквизитов.No) Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	// Определим CCA из DOC
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Invoice", Ссылка);
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	DOCInvoices.Ссылка КАК DOC,
//		|	DOCInvoices.Ссылка.CCA КАК CCA
//		|ИЗ
//		|	Документ.КонсолидированныйПакетЗаявокНаПеревозку.Инвойсы КАК DOCInvoices
//		|ГДЕ
//		|	DOCInvoices.Инвойс = &Invoice
//		|	И (НЕ DOCInvoices.Ссылка.Отменен)
//		|	И DOCInvoices.Ссылка.Requested <> ДАТАВРЕМЯ(1, 1, 1)";
//		
//	Результат = Запрос.Выполнить();
//	
//	// Если DOC найти не удалось - выходим
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ВыборкаРеквизитовDOC = Результат.Выбрать();
//	ВыборкаРеквизитовDOC.Следующий();
//	
//	// Если в DOC не заполнен CCA - выходим
//	Если НЕ ЗначениеЗаполнено(ВыборкаРеквизитовDOC.CCA) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Получим ссылку на Agent NEK
//	NEK = CustomsСервер.ПолучитьAgentNEK(ЭтотОбъект, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если эта строка не относится к NEK - тогда ничего делать не нужно, выходим
//	Если ВыборкаРеквизитовDOC.CCA <> NEK Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если мы дошли до этой строки - значит изменились реквизиты и этот инвойс относится к DOC с CCA = NEK - регистрируем для обмена DOC
//	
//	УзелNEK = CustomsСервер.ПолучитьУзелNEK(ЭтотОбъект, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	CustomsСервер.ЗарегистрироватьДляОбменаСсылку(УзелNEK, ВыборкаРеквизитовDOC.DOC, ЭтотОбъект, Отказ);
//	
//КонецПроцедуры

мParentCompany_MI = Справочники.SoldTo.НайтиПоКоду("TCS-MI-RU");
мParentCompany_Smith = Справочники.SoldTo.НайтиПоКоду("SLI-SMI RU");
