         
/////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКэш();	
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	НастроитьЭлементыПоTypeOfTransactionНаСервере();
	
	ЗаполнитьItemsQtyInTempImpExpПриНеобходимости();
	
	УстановитьОтборServices();
	
	Если Элементы.СтраницаServices.Видимость Тогда
		CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэш()
	
	// Заполним некоторые реквизиты формы, которые нужны на клиенте
	
	ResponsibleChange = Перечисления.TypesOfTemporaryImpExpTransaction.ResponsibleChange;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьItemsQtyInTempImpExpПриНеобходимости()
	
	Если НЕ Элементы.ItemsQtyInTempImpExp.Видимость
		ИЛИ Объект.Items.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаTempImpExp", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивItems", РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.Items, "Item"));

	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(QtyOfItemsInTemporaryImpExpОбороты.QtyОборот) КАК СУММАQty,
		|	QtyOfItemsInTemporaryImpExpОбороты.Item
		|ИЗ
		|	РегистрНакопления.QtyOfItemsInTemporaryImpExp.Обороты(, &ДатаTempImpExp, Регистратор, Item В (&МассивItems)) КАК QtyOfItemsInTemporaryImpExpОбороты
		|ГДЕ
		|	QtyOfItemsInTemporaryImpExpОбороты.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	QtyOfItemsInTemporaryImpExpОбороты.Item";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтбораItems = Новый Структура("Item");
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбораItems.Item = Выборка.Item;
		МассивСтрокItems = Объект.Items.НайтиСтроки(СтруктураОтбораItems);
		МассивСтрокItems[0].QtyInTempImpExp = Выборка.СУММАQty;
		 	
	КонецЦикла;
	 	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененДокументService" Тогда
		
		Если Параметр = Объект.Ссылка Тогда
			CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Специально очистим дату у нового документа, чтобы пользователь не забыл ее осмысленно заполнить
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РГСофт.ЗаполнитьModification(ТекущийОбъект);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ImportExportСервер.НастроитьВидимостьUnpostИSave(Элементы.Найти("ФормаОтменаПроведения"), Элементы.Найти("ФормаЗаписать"), Объект.Проведен);
	
	ЗаполнитьItemsQtyInTempImpExpПриНеобходимости();
	
	УстановитьОтборServices();
	
	НастроитьClosingDocument();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Оповестить("ИзмененаTemporaryImportTransaction");
		
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ШАПКИ

&НаКлиенте
Процедура ProcessLevelПриИзменении(Элемент)
	
	НастроитьCustomsFileНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура TypeOfTransactionПриИзменении(Элемент)
	
	НастроитьЭлементыПоTypeOfTransactionНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоTypeOfTransactionНаСервере()
	
	TypesOfTemporaryImpExpTransaction = Перечисления.TypesOfTemporaryImpExpTransaction;
	
	ImportExport = Перечисления.TypesOfTemporaryImpExpTransaction.ПолучитьImportExport(Объект.TypeOfTransaction);
	
	НастроитьCustomsFileНаСервере();
	
	Элементы.CustomsFileNo.Видимость = ЗначениеЗаполнено(Объект.TypeOfTransaction)
		И Объект.TypeOfTransaction <> TypesOfTemporaryImpExpTransaction.ResponsibleChange;
		
	Элементы.ExpiryDate.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction)
		ИЛИ Объект.TypeOfTransaction = TypesOfTemporaryImpExpTransaction.Prolongation;
		
	Элементы.NewResponsible.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction)
		ИЛИ Объект.TypeOfTransaction = TypesOfTemporaryImpExpTransaction.ResponsibleChange;
		
	Элементы.ShipperName.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
	
	Элементы.CCAJobReference.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
	
	Элементы.CustomsRegime.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
		
	Элементы.NewCustomsFileNo.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоВывод(Объект.TypeOfTransaction);
	
	Элементы.ItemsCreateItem.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
		
	Элементы.ItemsCopySelectedItem.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
	
	Элементы.ItemsQty.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоВывод(Объект.TypeOfTransaction);
	
	Элементы.ItemsQtyInTempImpExp.Видимость = Не TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
	
	Элементы.ItemsCustomsFileLineNo.Видимость = TypesOfTemporaryImpExpTransaction.ЭтоРучноеПринятие(Объект.TypeOfTransaction);
	
	Элементы.СтраницаServices.Видимость =
		Объект.TypeOfTransaction = TypesOfTemporaryImpExpTransaction.PermanentImport
		ИЛИ Объект.TypeOfTransaction = TypesOfTemporaryImpExpTransaction.PermanentExport;
	
	НастроитьClosingDocument();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьCustomsFileНаСервере()
	
	// Настроим видимость
	Элементы.CustomsFile.Видимость = Объект.TypeOfTransaction = Перечисления.TypesOfTemporaryImpExpTransaction.Prolongation
		ИЛИ Перечисления.TypesOfTemporaryImpExpTransaction.ЭтоВывод(Объект.TypeOfTransaction);
		       		
КонецПроцедуры

&НаКлиенте
Процедура CustomsFileНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Проверим заполнение полей, необходимых для выбора Customs file
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			, "ProcessLevel", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.TypeOfTransaction) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Type of transaction' is empty!",
			, "TypeOfTransaction", "Объект");
		Возврат;
	КонецЕсли;
	
	СтруктураНастройки      =  Новый Структура("Имя,Дата");
	СтруктураНастройки.Имя  =  "ВыборИзTemporaryImpExpTransactions";
	СтруктураНастройки.Дата =  ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()); 
	
	ПараметрыФормы = Новый Структура("СтруктураНастройки", СтруктураНастройки);
	
	// Настроим ограничение выбираемого Customs file по Imp. / exp.
	Если ЗначениеЗаполнено(ImportExport) Тогда
		СтруктураНастройки.Вставить("ImportExport", ImportExport);
	КонецЕсли;
	
	// определим доступные формы выбора
	// В Азербайджане, Туркменистане и Узбекинстане используют не сложный Customs file, а более простой Customs file (light)
	Если Объект.ProcessLevel = ПредопределенноеЗначение("Справочник.ProcessLevels.AZ") 
		ИЛИ Объект.ProcessLevel = ПредопределенноеЗначение("Справочник.ProcessLevels.TM")
		ИЛИ Объект.ProcessLevel = ПредопределенноеЗначение("Справочник.ProcessLevels.UZ") Тогда
		
		ОткрытьФорму("Документ.CustomsFilesLight.ФормаВыбора", ПараметрыФормы, Элемент);
		
	Иначе
		
		ОткрытьФорму("Документ.ГТД.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CustomsFileПриИзменении(Элемент)
	
	// Скопируем CustomsFile.Номер в поле CustomsFileNo
	Если ЗначениеЗаполнено(Объект.CustomsFile) Тогда
		Объект.CustomsFileNo = СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.CustomsFile, "Номер"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура NewResponsibleНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Проверим заполнение полей, необходимых для выбора ответственного
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			, "ProcessLevel", "Объект");
			
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьClosingDocument()
	
	// Closing document имеет смысл только для проведенных документов
	// и только для 2х видов операции: Permanent import и permanent export
	Элементы.ГруппаClosingDocument.Видимость = 
		Объект.Проведен
		И (Объект.TypeOfTransaction = Перечисления.TypesOfTemporaryImpExpTransaction.PermanentImport
		ИЛИ Объект.TypeOfTransaction = Перечисления.TypesOfTemporaryImpExpTransaction.PermanentExport); 
		
	// Если сама группа Closing document не видна - внутренности настраивать не надо
	Если НЕ Элементы.ГруппаClosingDocument.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	// Настроим внутренности группы
	PermanentCustomsFiles = Документы.ГТД.ПолучитьПоShipment(Объект.Ссылка);
	Если PermanentCustomsFiles.Количество() Тогда
		PermanentCustomsFile = PermanentCustomsFiles[0];
	КонецЕсли;	
		
	ClosingDocument = CustomsСервер.ПолучитьClosingDocument(Объект.Ссылка);
	Элементы.ClosingDocument.Видимость = ЗначениеЗаполнено(ClosingDocument);
	
	// Настроим создание на основании, если права позволяют
	ДокументЗакрытиеПоставкиСоздатьНаОсновании = Элементы.Найти("ДокументЗакрытиеПоставкиСоздатьНаОсновании");
	Если ДокументЗакрытиеПоставкиСоздатьНаОсновании <> Неопределено Тогда
		ДокументЗакрытиеПоставкиСоздатьНаОсновании.Видимость = НЕ ЗначениеЗаполнено(ClosingDocument);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ITEMS

&НаКлиенте
Процедура ItemsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Проверим заполнение реквизитов перед выводом формы подбора товаров	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			, "ProcessLevel", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.TypeOfTransaction) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Type of transaction' is empty!",
			, "TypeOfTransaction", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Date of transaction' is empty!",
			, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.TypeOfTransaction = ResponsibleChange Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.NewResponsible) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"'New responsible' is empty!",
				, "NewResponsible", "Объект", Отказ);
		КонецЕсли;
		
	Иначе
	
		Если НЕ ЗначениеЗаполнено(Объект.CustomsFileNo) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"""Customs file no."" is empty!",
				, "CustomsFileNo", "Объект", Отказ);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Переопределим алгоритм добавления новой строки
	// Сразу откроем форму выбора товаров
	Отказ = Истина;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Имя", "ВыборИзTemporaryImportTransaction");
	СтруктураНастройки.Вставить("ProcessLevel", Объект.ProcessLevel);
	СтруктураНастройки.Вставить("TypeOfTransaction", Объект.TypeOfTransaction);
	СтруктураНастройки.Вставить("TransactionDate", Объект.Дата);
	СтруктураНастройки.Вставить("CustomsFileNo", Объект.CustomsFileNo);
	СтруктураНастройки.Вставить("NewResponsible", Объект.NewResponsible);
	СтруктураНастройки.Вставить("TemporaryImportTransaction", Объект.Ссылка);
	AlreadySelectedItems = РГСофтКлиентСервер.ВыгрузитьКолонкуКоллекции(Объект.Items, "Item");
	СтруктураНастройки.Вставить("AlreadySelectedItems", AlreadySelectedItems);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураНастройки", СтруктураНастройки);
	ОткрытьФорму("Документ.TemporaryImpExpTransactions.Форма.ФормаПодбораItems", СтруктураПараметров, Элемент, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипЗнчВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипЗнчВыбранногоЗначения = Тип("Массив") Тогда
		
		Если ВыбранноеЗначение.Количество() > 0
			И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.СтрокиИнвойса") Тогда
			
			Для Каждого Item Из ВыбранноеЗначение Цикл
				
				НоваяСтрокаТЧ = Объект.Items.Добавить();
				НоваяСтрокаТЧ.Item = Item;
				
			КонецЦикла;
			
			Модифицированность = Истина;
			Если Элементы.ItemsQtyInTempImpExp.Видимость Тогда
				ЗаполнитьItemsQtyInTempImpExpПриНеобходимости();	
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнчВыбранногоЗначения = Тип("СправочникСсылка.СтрокиИнвойса") Тогда
		
		НоваяСтрокаТЧ = Объект.Items.Добавить();
		НоваяСтрокаТЧ.Item = ВыбранноеЗначение;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ItemsВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ItemsItem" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрокаТЧ = Объект.Items.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Item) Тогда
			ПоказатьЗначение(,ТекущаяСтрокаТЧ.Item);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CreateItem(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ProcessLevel) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"'Process level' is empty!",
			, "ProcessLevel", "Объект");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "СозданиеИзTemporaryImportTransaction");
	СтруктураПараметров.Вставить("ProcessLevel", Объект.ProcessLevel);
	ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаОбъекта", СтруктураПараметров, Элементы.Items, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура CopySelectedItem(Команда)
	
	ТекущиеДанные = Элементы.Items.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Item) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗначениеКопирования", ТекущиеДанные.Item);
			СтруктураПараметров.Вставить("Режим", "СозданиеИзTemporaryImportTransaction");
			СтруктураПараметров.Вставить("ProcessLevel", Объект.ProcessLevel);
			ОткрытьФорму("Справочник.СтрокиИнвойса.ФормаОбъекта", СтруктураПараметров, Элементы.Items, Объект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
// SERVICES

&НаСервере
Процедура УстановитьОтборServices()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Services.Отбор,
		"DocumentBase",
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьServices(Команда)
	
	ОбновитьServicesНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьServicesНаСервере()
	
	Элементы.Services.Обновить();
	CustomsКлиентСервер.ОбновитьПодвалServices(Объект.Ссылка, ServicesBase, ServicesMarkup, ServicesSum, ServicesDiscount, ServicesGrandTotal);	
	
КонецПроцедуры 

&НаКлиенте
Процедура ServicesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЗаписатьПриНеобходимости(Отказ);

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ / ФУНКЦИИ

&НаКлиенте
Процедура ЗаписатьПриНеобходимости(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			Записать(Новый Структура);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Failed to save current document!
				|" + ОписаниеОшибки(),
				,,, Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

