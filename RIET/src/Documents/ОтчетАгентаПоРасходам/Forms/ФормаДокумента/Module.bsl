&НаКлиенте
Перем ПараметрыОбработчикаОжидания; //ПроверкаКонтрагентов

////////////////////////////////////////////////////// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	// } РГ-Софт Пахоменков А. 16.01.2015
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	// { RGS AFokin 04.06.2017 23:59:59
	// проведенный ДокументIco доступен только на просмотр
	КонтрольПроведенияСервер.УстановитьТолькоПросмотрДляФормы(ЭтаФорма, ТекущийОбъект);
	// } RGS AFokin 04.06.2017 23:59:59
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриОткрытии();
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);       
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтаФорма, СчетФактура);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)   
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетАгентаПоРасходам.Форма.ФормаПодбораСКП" Тогда
		ОбработкаВыбораСКПСервер(ВыбранноеЗначение); 			
		Модифицированность = Истина;
		УправлениеФормой(ЭтаФорма); 
	КонецЕсли;      
	
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);
	
КонецПроцедуры
 
&НаКлиенте
Процедура РасходыПодборСКП(Команда)
	
	ОткрытьФорму("Документ.ОтчетАгентаПоРасходам.Форма.ФормаПодбораСКП",,ЭтаФорма); 	
	
КонецПроцедуры   

&НаКлиенте
Процедура УслугиАгентаИнвойсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.БезПодбораВаучера Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущийДокумент = Элементы.УслугиАгента.ТекущиеДанные.Документ;
              	
	Если НЕ ЗначениеЗаполнено(ТекущийДокумент)  Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Не заполнен документ!");
	КонецЕсли;    	
	
КонецПроцедуры   

&НаКлиенте
Процедура УслугиАгентаИнвойсПриИзменении(Элемент)
	
	Если Объект.БезПодбораВаучера Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущийДокумент = Элементы.УслугиАгента.ТекущиеДанные.Документ;
	ТекущийИнвойс   = Элементы.УслугиАгента.ТекущиеДанные.Инвойс;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ОбработкаВыбораИнвойсаСервер(ТекущийДокумент,ТекущийИнвойс);    
	Иначе
		Сообщить("Не заполнен документ!");
		Элементы.УслугиАгента.ТекущиеДанные.Инвойс = ПредопределенноеЗначение("Документ.LawsonInvoice.ПустаяСсылка");
		Возврат;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаДокументПриИзменении(Элемент)
	
	ТекущийДокумент = Элементы.УслугиАгента.ТекущиеДанные.Документ;
	ТекущийИнвойс   = Элементы.УслугиАгента.ТекущиеДанные.Инвойс;	
              	
	Если ЗначениеЗаполнено(ТекущийДокумент)  Тогда
		ОбработкаВыбораИнвойсаСервер(ТекущийДокумент,ТекущийИнвойс);
		Элементы.УслугиАгента.ТекущиеДанные.ВалютаДоговораКонтрагента = ПолучитьЗначениеРеквизитаНаСервере(ТекущийДокумент,"ВалютаДокумента"); 
	Иначе
		Элементы.УслугиАгента.ТекущиеДанные.Инвойс = ПредопределенноеЗначение("Документ.LawsonInvoice.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры     

Функция ПолучитьЗначениеРеквизитаНаСервере(Ссылка,ИмяРеквизита)

	ТекРеквизит = Неопределено;
	Выполнить("ТекРеквизит = Ссылка."+ИмяРеквизита);     	
	Возврат ТекРеквизит;
	
КонецФункции

// Добавлено из других документов
//
&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	КурсДоИзменения      = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;

	СтруктураЦеныИВалюта = ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДоИзменения);

	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС;
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, СтруктураЦеныИВалюта.ПересчитатьЦены, ПересчитатьНДС);
	
	КонецЕсли;
	
	ИзменитьЗаголовки(ЭтаФорма);  	
	
КонецПроцедуры

 &НаКлиенте
Процедура ДатаПроведенияПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалоговогоПериодаИЛИДатыПроведения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	РГСофт.УстановитьИнформационнуюНадписьНалоговыйПериод(Элементы.инфНадписьНалоговыйПериод, Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроцессаУтверждения()
	
	РГСофт.УстановитьКартинкуНеобходимостьУтверждения(Элементы.инфКартинкаНеобходимостьУтверждения, Объект);
	ЗаполнитьДобавленныеКолонкиТаблиц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере(Объект.Контрагент, Объект.Дата);
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(Контрагент, Дата)
	ДатаЗапретаИспользования = Контрагент.ДатаЗапретаИспользования;
	Если НЕ ДатаЗапретаИспользования = Дата(1,1,1) И ДатаЗапретаИспользования <= Дата Тогда
		Сообщить("Запрещено использование контрагента " + Контрагент + " с " + Формат(ДатаЗапретаИспользования, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаКонтрагентПриИзменении(Элемент)
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Элементы.УслугиАгента);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// { РГ-Софт Пахоменков А. 19.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтаФорма, Элемент, Поле);
	// } РГ-Софт Пахоменков А. 19.01.2015
	
КонецПроцедуры

////////////////////////////////////////////////////// ПРОЦЕДУРЫ АЛГОРИТМОВ ФОРМЫ

&НаСервере
Процедура ОбработкаВыбораСКПСервер(Ссылка) 	
	
	СписокSourceCode = Новый Массив;
	СписокSourceCode.Добавить("AD");
	СписокSourceCode.Добавить("XC");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СписокSourceCode",СписокSourceCode);
	Запрос.Параметры.Вставить("Документ",Ссылка);
	Запрос.Параметры.Вставить("Рубли",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкаDSS.Description,
		|	ВЫБОР
		|		КОГДА ПроводкаDSS.Документ.ВалютаДокумента = &Рубли
		|			ТОГДА ПроводкаDSS.TranAmount
		|		ИНАЧЕ ПроводкаDSS.BaseAmount
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПроводкаDSS КАК ПроводкаDSS
		|ГДЕ
		|	ПроводкаDSS.Документ = &Документ
		|	И ПроводкаDSS.SourceCode В(&СписокSourceCode)
		|	И ПроводкаDSS.TaxCode = """"";

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить("Не удалось подобрать проводки деталей для документа!");
	КонецЕсли;

	Если РежимПодбораСКППоДеталям Тогда  
		
		//Если заполнена рублевая сумма, валюта - рубли
		ВалютаДоговораКонтрагента = ?(Ссылка.СуммаРубСНДС = 0,Ссылка.ВалютаДокумента,Константы.ВалютаРегламентированногоУчета.Получить());
		ОбщаяСуммаПроводок = 0;      		                           
		
		//Если заполнена рублевая сумма, то переводим из валюты проводки ДСС в рубли и вводим в рублях    
		Если Ссылка.СуммаРубСНДС <> 0 Тогда       			
			ОбщаяСуммаПроводок = Ссылка.СуммаРубСНДС; 			
		Иначе     			
			Пока Выборка.Следующий() Цикл 			
				ОбщаяСуммаПроводок 		= ОбщаяСуммаПроводок + Выборка.Сумма; 
			КонецЦикла;    			
		КонецЕсли;   
		
		СтрокаТЧ 						   = Объект.УслугиАгента.Добавить();
		СтрокаТЧ.Документ 				   = Ссылка;
		СтрокаТЧ.Контрагент 			   = Ссылка.Контрагент;  	
														 
		СтрокаТЧ.СуммаВал				   = ОбщаяСуммаПроводок;
		СтрокаТЧ.ВалютаДоговораКонтрагента = ВалютаДоговораКонтрагента; 
		
		СтруктураКурса  				   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоговораКонтрагента, Объект.Дата);
		КурсВалютыДоговораКонтрагента 	   = ?(Ссылка.СуммаРубСНДС = 0,Ссылка.КурсДокумента,СтруктураКурса.Курс);
		
		СтрокаТЧ.Сумма 					   = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал,СтрокаТЧ.ВалютаДоговораКонтрагента, 
												 Объект.ВалютаДокумента,КурсВалютыДоговораКонтрагента, Объект.КурсВзаиморасчетов,СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		
	Иначе     		
		
		Если Ссылка.СуммаРубСНДС <> 0 Тогда  			
			Сообщить("Для данного документа СКП подбор по деталям не предусмотрен, т.к. заполнена рублевая сумма, а проводки деталей в УЕ!");
			Возврат;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ 						   = Объект.УслугиАгента.Добавить();
			СтрокаТЧ.Документ 				   = Ссылка;
			СтрокаТЧ.Контрагент 			   = Ссылка.Контрагент;     
			
			ТекСумма = Выборка.Сумма;
		
			ВалютаДоговораКонтрагента  		   = ?(Ссылка.СуммаРубСНДС = 0,Ссылка.ВалютаДокумента,Константы.ВалютаРегламентированногоУчета.Получить()); 	
			СтрокаТЧ.СуммаВал				   = ТекСумма;
			СтрокаТЧ.ВалютаДоговораКонтрагента = ВалютаДоговораКонтрагента; 
			
			СтруктураКурса  				   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоговораКонтрагента, Объект.Дата);
			КурсВалютыДоговораКонтрагента 	   = ?(Ссылка.СуммаРубСНДС = 0,Ссылка.КурсДокумента,СтруктураКурса.Курс);
			
			СтрокаТЧ.Сумма 					   = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВал,СтрокаТЧ.ВалютаДоговораКонтрагента, 
												 Объект.ВалютаДокумента,КурсВалютыДоговораКонтрагента, Объект.КурсВзаиморасчетов,СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			СтрокаТЧ.Содержание				   = Выборка.Description; 
			СтрокаТЧ.Номенклатура			   = Справочники.Номенклатура.НайтиПоКоду("U00030516");
		КонецЦикла;  		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораИнвойсаСервер(ТекущийДокумент,ТекущийИнвойс)
	
	Для каждого Строка из Объект.УслугиАгента Цикл  		
		Если Строка.Документ = ТекущийДокумент Тогда
			Строка.Инвойс = ТекущийИнвойс;
		КонецЕсли;     		
	КонецЦикла;   	
	
КонецПроцедуры  

// Добавлено из других документов
//
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьДаннымиПоУмолчанию(ТекущийПользователь);
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();
	
	// { RGS LFedotova 02.03.2017 - вопрос SLI-0007188
	//РГСофт.УстановитьИнформационныеНадписиЗакрытияПериода(ЭтаФорма, Объект); 
	//внутренние процедуры расчета дат запрета определяют метаданные, а у ДанныеФормыСтруктура такого метода нет 
	//поэтому переделаем в объект
	текОБ = РеквизитФормыВЗначение("Объект");	
	НачалоОткрытогоПериодаМодуля = ДатыЗапретаИзменения.ПолучитьДатуЗапретаРедактирования(текОБ);
	Если НачалоОткрытогоПериодаМодуля <> Неопределено Тогда
		Элементы.инфНадписьОткрытыйПериод.Заголовок = "Открыт: " + Формат(ДобавитьМесяц(НачалоОткрытогоПериодаМодуля,1), "ДФ='ММММ гггг'");
	Иначе
		Элементы.инфНадписьОткрытыйПериод.Заголовок = "";
	КонецЕсли;
	// } RGS LFedotova 02.03.2017 - вопрос SLI-0007188
	
	// Проверка ведения однофирменности 
	Элементы.Организация.ТолькоПросмотр = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "УчетПоВсемОрганизациям");	

	УправлениеФормой(ЭтаФорма);
	      		                	
КонецПроцедуры   

// Добавлено из других документов
//
&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию(ТекущийПользователь)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначения.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекущийПользователь, ВалютаРегламентированногоУчета, "Продажа");
	НастройкаПравДоступа.ЗаполнитьДатыДокументаПоУмолчанию(ДокументОбъект);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбщегоНазначения.УстановитьНомерДокумента(ДокументОбъект);
	
	//В общем модуле другие названия реквизитов
	СтруктураКурсаДокумента   = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
 	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	//<<
				
КонецПроцедуры

// Добавлено из других документов
//
&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	Если НЕ ПересчитатьЦены И НЕ ПересчитатьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Объект.УслугиАгента Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы,ВалютаДоИзменения,
			СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	
	Объект.СуммаДокумента 		 = Объект.УслугиАгента.Итог("Всего");
	Объект.НДСДокумента   		 = Объект.УслугиАгента.Итог("СуммаНДС");
	
	СтруктураКурсаДокумента   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	ЗаполнитьРассчитатьСуммыВознаграждения(ВалютаДоИзменения,СтруктураКурсаДокумента);
	
КонецПроцедуры
		
Процедура ЗаполнитьРассчитатьСуммыВознаграждения(ВалютаДоИзменения,СтруктураКурса)
	
	Объект.АгентскаяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			Объект.АгентскаяСумма,
			ВалютаДоИзменения, Объект.ВалютаДокумента, 
			СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
	Объект.АгентскийНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			Объект.АгентскийНДС,
			ВалютаДоИзменения, Объект.ВалютаДокумента, 
			СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);  
			
КонецПроцедуры

// Добавлено из других документов
//
&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТаблицы, ВалютаПередИзменением, СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	Если ПересчитатьЦены Тогда
		Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ВалютаПередИзменением, Объект.ВалютаДокумента, 
			СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	//ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	
	Если ЕстьНДС Тогда
		СтрокаТаблицы.Сумма = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма, Неопределено, ЦенаВключаетНДС, ЕстьНДС, Объект.СуммаВключаетНДС,      
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		СтрокаТаблицы.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, ЕстьНДС, Объект.СуммаВключаетНДС, 
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Иначе
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьСФСервер()
	
	//rg-soft Лактюшкина Н. 26.12.16 Очищаем табличные части счет-фактур для возможности записи дублирующихся строк{
	Для каждого СтрокаРасходов из Объект.УслугиАгента Цикл
		ДокументОснованиеСФ = СтрокаРасходов.Документ;
	
		ВидСчетаФактуры = "СчетФактураВыданный"; 
		СтруктураОтбора = Новый Структура("ОтчетАгентаПоРасходам", Объект.Ссылка);
		СтруктураОтбора.Вставить("ВидСчетаФактуры",	   Перечисления.ВидСчетаФактурыВыставленного.Перевыставление);
		СтруктураОтбора.Вставить("ПометкаУдаления",     Ложь);
		ТекСчетФактура 	= УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОснованиеСФ, ВидСчетаФактуры, СтруктураОтбора);
		Если ЗначениеЗаполнено(ТекСчетФактура) Тогда
			ТекСчетФактура = ТекСчетФактура.ПолучитьОбъект();
			
		    //Очищение табличной части "Авансы"
			ТекСчетФактура.Авансы.Очистить();
			ТекСчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЦикла;   
	//}

	Для каждого СтрокаРасходов из Объект.УслугиАгента Цикл
		
		Если СтрокаРасходов.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда Продолжить КонецЕсли;
		
		//rg-soft Лактюшкина Н. 13.12.2016 - В качестве докмента основания всегда выступает счет книги покупок  - для возможности разбиения счет-фактур по разным датам {
		//ДокументОснованиеСФ = ?(Объект.БезПодбораВаучера,Объект.Ссылка,СтрокаРасходов.Документ);
		ДокументОснованиеСФ = СтрокаРасходов.Документ;
		//}
		
		ВидСчетаФактуры = "СчетФактураВыданный"; 
		СтруктураОтбора = Новый Структура("ОтчетАгентаПоРасходам", Объект.Ссылка);
		//СтруктураОтбора = Новый Структура("ВидСчетаФактуры",	   Перечисления.ВидСчетаФактурыВыставленного.Перевыставление); 
		СтруктураОтбора.Вставить("ВидСчетаФактуры",	   Перечисления.ВидСчетаФактурыВыставленного.Перевыставление);
		СтруктураОтбора.Вставить("ПометкаУдаления",     Ложь);
		ТекСчетФактура 	= УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОснованиеСФ, ВидСчетаФактуры, СтруктураОтбора);
		                      
		Если НЕ ЗначениеЗаполнено(ТекСчетФактура) Тогда
			        
			ТекСчетФактура 										= Документы.СчетФактураВыданный.СоздатьДокумент();
			
			ТекСчетФактура.Ответственный 							= ПараметрыСеанса.ТекущийПользователь;;
			//rg-soft Лактюшкина Н. 13.12.2016 - Дата = Дата входящего документа из счета книги покупок{
			//ТекСчетФактура.Дата 									= ?(Объект.БезПодбораВаучера,ДокументОснованиеСФ.Дата,ДокументОснованиеСФ.ДатаВходящегоДокумента);
			ТекСчетФактура.Дата 									= ДокументОснованиеСФ.ДатаВходящегоДокумента;
			//}
			Если НЕ СтрокаРасходов.НомерНеПоИнвойсу Тогда
				//rg-soft Лактюшкина Н. 13.12.2016 - Номер = Номер входящего документа из счета книги покупок{
				//ТекСчетФактура.Номер									= СтрокаРасходов.Инвойс.Номер;
				   ТекСчетФактура.Номер									= ДокументОснованиеСФ.НомерВходящегоДокумента;
				// }
			КонецЕсли;    			
			ТекСчетФактура.ДокументОснование						= ДокументОснованиеСФ;
			ТекСчетФактура.Контрагент 								= Объект.Контрагент;
			ТекСчетФактура.ДоговорКонтрагента 						= Объект.ДоговорКонтрагента;//Объект.ДоговорПринципала;
			ТекСчетФактура.ВалютаДокумента 							= Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;//Объект.ДоговорПринципала.ВалютаВзаиморасчетов; 			
			ТекСчетФактура.Организация 								= Объект.Организация;
			ТекСчетФактура.ПодразделениеОрганизации 				= Объект.ПодразделениеОрганизации;	
			ТекСчетФактура.ВидСчетаФактуры 							= Перечисления.ВидСчетаФактурыВыставленного.Перевыставление;
			ТекСчетФактура.КодСпособаВыставления 					= 1;
			//rg-soft Лактюшкина Н. 13.12.2016  Код вида операции - с 01.07.2016 надо ставить "01" {
			//ТекСчетФактура.КодВидаОперации 							= "04";
			ТекСчетФактура.КодВидаОперации 							= "01";
			// }
			ТекСчетФактура.Выставлен 								= Истина;
			ТекСчетФактура.ДатаВыставления 							= ТекСчетФактура.Дата;
			ТекСчетФактура.Под0 									= Ложь;
			ТекСчетФактура.СформированПриВводеНачальныхОстатковНДС = Ложь;			
              			           
			ТекСчетФактура.ДокументыОснования.Очистить();
			ТекСчетФактура.ДокументыОснования.Добавить().ДокументОснование = ДокументОснованиеСФ;
			ТекСчетФактура.ОтчетАгентаПоРасходам = Объект.Ссылка;
			
			ТекСчетФактура.НомерПлатежноРасчетногоДокумента = "";
			ТекСчетФактура.ДатаПлатежноРасчетногоДокумента =  Неопределено;
			
			ТекСчетФактура.ДатаНомерДокументовОплаты.Добавить();
			
		Иначе           
			ТекСчетФактура = ТекСчетФактура.ПолучитьОбъект();				
		
		КонецЕсли;	            		
                	   
		Если Не ЗначениеЗаполнено(СтрокаРасходов.СчетФактура) Тогда
			СтрокаРасходов.СчетФактура = ТекСчетФактура.Ссылка;
		КонецЕсли;
		
						
		//Заполнение табличной части "Авансы"
				
		//СтруктураПоискаСтроки = Новый Структура;
			
		//СтруктураПоискаСтроки.Вставить("Номенклатура", 	СтрокаРасходов.Номенклатура);
		//СтруктураПоискаСтроки.Вставить("Содержание", 	СтрокаРасходов.Содержание);
		//СтруктураПоискаСтроки.Вставить("Сумма", 		?(Объект.СуммаВключаетНДС,СтрокаРасходов.Сумма,СтрокаРасходов.Сумма + СтрокаРасходов.СуммаНДС));
		//СтруктураПоискаСтроки.Вставить("СуммаНДС", 		СтрокаРасходов.СуммаНДС);
		//СтруктураПоискаСтроки.Вставить("СтавкаНДС", 	СтрокаРасходов.СтавкаНДС);
		//СтруктураПоискаСтроки.Вставить("Количество", 	СтрокаРасходов.Количество);
		
		//НайденныеСтрокиТЧАвансы =  ТекСчетФактура.Авансы.Выгрузить().НайтиСтроки(СтруктураПоискаСтроки);
			
		//Если НЕ НайденныеСтрокиТЧАвансы.Количество() Тогда  			
			СтрокаТЧАвансы = ТекСчетФактура.Авансы.Добавить();    
			ЗаполнитьЗначенияСвойств(СтрокаТЧАвансы,СтрокаРасходов);
			СтрокаТЧАвансы.Сумма = ?(Объект.СуммаВключаетНДС,СтрокаРасходов.Сумма,СтрокаРасходов.Сумма + СтрокаРасходов.СуммаНДС);			
			ТекСчетФактура.СуммаДокумента = ТекСчетФактура.Авансы.Итог("Сумма"); 			
		//КонецЕсли;	 
		
		Попытка
			ТекСчетФактура.ДополнительныеСвойства.Вставить("НеПроверятьДату");
			
			
			ТекСчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			СтрокаРасходов.СчетФактура = ТекСчетФактура.Ссылка;   
		Исключение	
			Сообщить("Не удалось записать СФ: " + ОписаниеОшибки());
		КонецПопытки;
		
		//rg-soft Лактюшкина Н. 13.12.2016 Для корректного формирования журнала добавляем в регистр журнала учета счетов-фактур для Счета книги покупок суммы по СчетуФактуреКомиссия и СуммаНДСКомиссия {
		Набор = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокументОснованиеСФ);
		Набор.Прочитать();
		
		Для Каждого Запись из Набор Цикл
			Запись.СуммаПоСчетуФактуреКомиссия = Запись.СуммаПоСчетуФактуре;
			Запись.СуммаНДСКомиссия = Запись.СуммаНДС;
			Запись.КодВидаОперацииКомиссия = Запись.КодВидаОперации;
			Запись.ДатаВыставленияПолучения = ДокументОснованиеСФ.ДатаВходящегоДокумента;
		КонецЦикла;
		
		Набор.Записать();
		//}
		                                      
	КонецЦикла;	
	
КонецПроцедуры

// Добавлено из других документов
//
&НаКлиенте
Функция ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДоИзменения, ПересчитатьЦены = Ложь)

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
    СтруктураПараметров = ПолучитьСтруктуруПараметровЦеныИВалюта(ПересчитатьЦены);

	СтруктураЦеныИВалюта = ОткрытьФормуМодально("ОбщаяФорма.ФормаЦеныИВалютаТонкая", СтруктураПараметров);

	Возврат СтруктураЦеныИВалюта;

КонецФункции 

&НаКлиенте
Функция ПолучитьСтруктуруПараметровЦеныИВалюта(ПересчитатьЦены)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦены"     , ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);	
	
	Возврат СтруктураПараметров;

КонецФункции

// Добавлено из других документов
//
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗаголовки(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.УслугиАгентаСумма.Заголовок = ?(Объект.СуммаВключаетНДС, ВернутьСтр("ru='Сумма с НДС'"), ВернутьСтр("ru='Сумма без НДС'"));
	Элементы.ИтогиВсегоНДС.Заголовок = ?(Объект.СуммаВключаетНДС, "НДС (в т. ч.):", "НДС (сверху):");   
	
	Объект.СуммаДокумента 		 = Объект.УслугиАгента.Итог("Всего");
	Объект.НДСДокумента   		 = Объект.УслугиАгента.Итог("СуммаНДС");

КонецПроцедуры

// Добавлено из других документов
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего    = Форма.Объект.УслугиАгента.Итог("Всего");
	Форма.ИтогиВсегоНДС = Форма.Объект.УслугиАгента.Итог("СуммаНДС");

КонецПроцедуры

// Добавлено из других документов
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС);
	Форма.ЦеныИВалюта = SalesBookКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
            	
КонецПроцедуры

// Добавлено из других документов
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ИзменитьЗаголовки(Форма);

КонецПроцедуры

// Добавлено из других документов
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма)

	Объект = Форма.Объект; 	
	Для Каждого СтрокаТаблицы Из Объект.УслугиАгента Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;    
                             
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИзменитьЗаголовки(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаПослеУдаления(Элемент)
	
	ИзменитьЗаголовки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасходыСформироватьСФ(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда 
		Предупреждение("Документ был изменен. Сначала следует записать документ.");
		Возврат
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Документ не записан. Сначала следует записать документ."); 
		Возврат;
	КонецЕсли;     
	
	НеВсеСтрокиЗаполнены = Ложь;
	Для каждого Строка Из Объект.УслугиАгента Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) И ЗначениеЗаполнено(Строка.СчетФактура) Тогда
			Сообщить("В строке " + Строка.НомерСтроки + " заполнены не все поля");
			НеВсеСтрокиЗаполнены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НеВсеСтрокиЗаполнены Тогда
		Возврат;
	КонецЕсли;         		
	
	СформироватьСФСервер();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА
////////////////////////////////////////////////////////////////////////

&НаСервере                                    
Процедура ЗаполнитьТекстПроСчетФактуру()   

	НадписьСФ   = ВернутьСтр("ru='Ввести счет-фактуру'");	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ВидСчетаФактуры = "СчетФактураВыданный"; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидСчетаФактуры",	   Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		НайденнаяСФ 	= УчетНДС.НайтиПодчиненныйСчетФактуру(Объект.Ссылка, ВидСчетаФактуры, СтруктураОтбора);
		
		Если НайденнаяСФ <> Неопределено Тогда         	
			НадписьСФ	= Строка(НайденнаяСФ); 
			СчетФактура = НайденнаяСФ;
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьСчетФактура      = НадписьСФ;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьТекстПроСчетФактуру();
	
	SalesBookКлиент.ОткрытьВыданныйСчетФактуру(ЭтаФорма, СчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура Кнопка(Команда)
	
	КнопкаСервер(Элементы.УслугиАгента.ТекущиеДанные.Документ);
	
КонецПроцедуры

Процедура КнопкаСервер(Ссылка)
	
	а = Ссылка.ПолучитьОбъект().Движения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСФ(Команда)
	
	МассивУжеНапечатанныхСФ = Новый Массив;
	
	Для каждого Строка из Объект.УслугиАгента Цикл
		
		ТекСФ = Строка.СчетФактура;
		Если ЗначениеЗаполнено(ТекСФ) И МассивУжеНапечатанныхСФ.Найти(ТекСФ) = Неопределено Тогда
			МассивСФ = Новый Массив; 
			МассивСФ.Добавить(ТекСФ);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетФактураВыданный", "СчетФактура", МассивСФ,ЭтаФорма);
			МассивУжеНапечатанныхСФ.Добавить(ТекСФ);
		КонецЕсли;	
		
	КонецЦикла;  	
		
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаИнвойсОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.БезПодбораВаучера Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущийДокумент = Элементы.УслугиАгента.ТекущиеДанные.Документ;
	ТекущийИнвойс   = Элементы.УслугиАгента.ТекущиеДанные.Инвойс;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ОбработкаВыбораИнвойсаСервер(ТекущийДокумент,ТекущийИнвойс);    
	Иначе
		Сообщить("Не заполнен документ!");
		Элементы.УслугиАгента.ТекущиеДанные.Инвойс = ПредопределенноеЗначение("Документ.LawsonInvoice.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаДокументОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийДокумент = Элементы.УслугиАгента.ТекущиеДанные.Документ;
	ТекущийИнвойс   = Элементы.УслугиАгента.ТекущиеДанные.Инвойс;
              	
	Если ЗначениеЗаполнено(ТекущийДокумент)  Тогда
		ОбработкаВыбораИнвойсаСервер(ТекущийДокумент,ТекущийИнвойс);
		Элементы.УслугиАгента.ТекущиеДанные.ВалютаДоговораКонтрагента = ПолучитьЗначениеРеквизитаНаСервере(ТекущийДокумент,"ВалютаДокумента"); 
	Иначе
		Элементы.УслугиАгента.ТекущиеДанные.Инвойс = ПредопределенноеЗначение("Документ.LawsonInvoice.ПустаяСсылка");
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораВознаграждения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораВознаграждения()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Сообщить("Не заполнена валюта взаиморасчетов в договоре контрагента вознаграждения");
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммыДокумента();
	              	
КонецПроцедуры

Процедура ПересчитатьСуммыДокумента() //123

	ВалютаДоИзменения      = Объект.ВалютаДокумента;
	КурсДоИзменения		   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   = Объект.КратностьВзаиморасчетов;  
	НоваяВалютаДокумента   = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов; 
	
	Если ВалютаДоИзменения <> НоваяВалютаДокумента  Тогда
		
		СтруктураКурсаДокумента   = ОбщегоНазначения.ПолучитьКурсВалюты(НоваяВалютаДокумента, Объект.Дата);
		КурсНовойВалюты 		  = СтруктураКурсаДокумента.Курс;
 		КратностьНовойВалюты 	  = СтруктураКурсаДокумента.Кратность;  
		
		Объект.ВалютаДокумента         = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Объект.КурсВзаиморасчетов      = КурсНовойВалюты;
		Объект.КратностьВзаиморасчетов = КратностьНовойВалюты;  
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Истина, Истина);

		ИзменитьЗаголовки(ЭтаФорма); 
		
		Модифицированность = Истина;     
		
	КонецЕсли; 	
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВознаграждениеЗаполнить(Команда) 
	
	ВознаграждениеЗаполнитьНаСервере(); 
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ВознаграждениеЗаполнитьНаСервере()
	
	Объект.СуммаДокумента 		 = ИтогиВсего;
	Объект.НДСДокумента   		 = ИтогиВсегоНДС; 
	//Объект.НоменклатураАгентская = Справочники.Номенклатура.НайтиПоКоду("U0067583");  	
	//Объект.СодержаниеАгентское = Объект.НоменклатураАгентская.НаименованиеПолное + " №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Объект.Ссылка) + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy'г."); 
	Объект.СодержаниеАгентское 	 = "Агентское вознаграждение, связанное с оказанием услуг (поставкой товаров) по договору """ + Объект.ДоговорКонтрагента + """ по отчету агента №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Объект.Ссылка) + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy'г.");
	Если Объект.НоменклатураАгентская.Пустая() Тогда
		Объект.АгентскаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Иначе
		Объект.АгентскаяСтавкаНДС = Объект.НоменклатураАгентская.СтавкаНДС; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВознаграждениеРасчитать(Команда)
	
	ВознаграждениеРасчитатьНаСервере();	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВознаграждениеРасчитатьНаСервере()
	
	Если Объект.НоменклатураАгентская.Пустая() Тогда
		Объект.АгентскаяСтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Иначе
		Объект.АгентскаяСтавкаНДС = Объект.НоменклатураАгентская.СтавкаНДС; 
	КонецЕсли;     
	
	АгСуммаБезНДС = Окр(Объект.СуммаДокумента * ОБъект.АгентскийПроцент / 100 , 2);;
	АгСуммаНДС 	  = Окр(АгСуммаБезНДС*УчетНДС.ПолучитьСтавкуНДС(Объект.АгентскаяСтавкаНДС)/100 , 2);
	
	Объект.АгентскаяСумма = АгСуммаБезНДС;
	Объект.АгентскийНДС   = АгСуммаНДС;  	
                  
	Объект.СодержаниеАгентское 	 = "Агентское вознаграждение, связанное с оказанием услуг (поставкой товаров) по договору """ + Объект.ДоговорКонтрагента + """ по отчету агента №" + ОбщегоНазначения.ПолучитьНомерНаПечать(Объект.Ссылка) + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy'г.");

КонецПроцедуры

&НаКлиенте
Процедура РежимПодбораСКП(Команда)
	
	Если РежимПодбораСКППоДеталям Тогда  		
		РежимПодбораСКППоДеталям = Ложь;
		Элементы.УслугиАгентаРежимПодбораСКП.Заголовок = " Разбивать по деталям ";   
		Элементы.УслугиАгентаРежимПодбораСКП.Пометка   = Истина;
	Иначе
		РежимПодбораСКППоДеталям = Истина;
		Элементы.УслугиАгентаРежимПодбораСКП.Заголовок = "Записывать общую сумму"; 
		Элементы.УслугиАгентаРежимПодбораСКП.Пометка   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Объект.НачПериода;
	Диалог.Период.ДатаОкончания = Объект.КонПериода;
	Если Диалог.Редактировать() Тогда 
	    Объект.НачПериода = Диалог.Период.ДатаНачала;
		Объект.КонПериода = Диалог.Период.ДатаОкончания;   
	КонецЕсли;
                	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаСуммаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.УслугиАгента.ТекущиеДанные.СтавкаНДС) Тогда
		СтрокаРасходы = Элементы.УслугиАгента.ТекущиеДанные; 
		СтрокаРасходы.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаРасходы.Сумма, Истина, Объект.СуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(СтрокаРасходы.СтавкаНДС)); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиАгентаПриИзменении(Элемент)
	
	Если Элементы.УслугиАгента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Элементы.УслугиАгента.ТекущиеДанные.СтавкаНДС) Тогда
		СтрокаРасходы = Элементы.УслугиАгента.ТекущиеДанные; 
		СтрокаРасходы.СуммаНДС = ОбщегоНазначения.РассчитатьСуммуНДС(СтрокаРасходы.Сумма, Истина, Объект.СуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(СтрокаРасходы.СтавкаНДС)); 
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	НекорректныеСтроки = СтрокиНекорректныхИнвойсов();
	ИнвойсНаВознаграждениеНекорректен = ИнвойсНаВознаграждениеНекорректен(Объект.ИнвойсНаВознаграждение,Объект.Ссылка);
	
	Если НекорректныеСтроки.Количество() И НЕ Объект.БезПодбораВаучера Тогда  		
		Сообщить("В этих строках в инвойсах уже указан документ!");
		Для каждого ТекНомерСтроки из НекорректныеСтроки Цикл
			Сообщить(ТекНомерСтроки);	
		КонецЦикла;  		
	КонецЕсли;
	
	Если ИнвойсНаВознаграждениеНекорректен Тогда
		Сообщить("В инвойсе на вознаграждение уже указан документ!");			
	КонецЕсли;
	
	Если (НекорректныеСтроки.Количество() И НЕ Объект.БезПодбораВаучера) ИЛИ ИнвойсНаВознаграждениеНекорректен Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Обнаружены инвойсы,в которых установлен другой документ! Всеравно продолжить (документы в инвойсах будут заменены)?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Функция СтрокиНекорректныхИнвойсов()

	Массив = Новый Массив;
	
	Для каждого ТекСтрока из Объект.УслугиАгента Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Инвойс.Документ) И НЕ ТекСтрока.Инвойс.Документ = ТекСтрока.Документ Тогда
			
			Массив.Добавить(ТекСтрока.НомерСтроки);	
			
		КонецЕсли;    		
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнвойсНаВознаграждениеНекорректен(Инвойс,ОтчетАгента)

	Если ЗначениеЗаполнено(Инвойс.Документ) И ?(ЗначениеЗаполнено(ОтчетАгента),Инвойс.Документ <> ОтчетАгента,Истина) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;		
	КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура БезПодбораВаучераПриИзменении(Элемент)	
	
	Mode = QuestionDialogMode.YesNo;
	
	Если Объект.БезПодбораВаучера Тогда
		Answer = DoQueryBox("Составление отчета без указания ваучеров и контрагентов. Строки будут очищены, продолжить?", Mode, 0);
	Иначе
		Answer = DoQueryBox("Составление отчета с указанием ваучеров и контрагентов. Строки будут очищены, продолжить?", Mode, 0); 
	КонецЕсли;
		
	If Answer = DialogReturnCode.No Then
		Объект.БезПодбораВаучера = НЕ Объект.БезПодбораВаучера;
	    Return;
	EndIf; 		
	
	Объект.УслугиАгента.Очистить();	
	НЕдоступностьВаучеров = Объект.БезПодбораВаучера;
	//Элементы.УслугиАгентаКонтрагент.ТолькоПросмотр = НЕдоступностьВаучеров;
	Элементы.УслугиАгентаДокумент.ТолькоПросмотр = НЕдоступностьВаучеров;
    Элементы.УслугиАгентаРасходыПодборСКП.Доступность = НЕ НЕдоступностьВаучеров
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ЗапускПроцессаУтверждения" или ИмяСобытия = "ОстановленПроцессУтверждения")
		И Параметр = Объект.Ссылка Тогда 
		ОбработкаПроцессаУтверждения();
	КонецЕсли;
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииНалоговогоПериодаИЛИДатыПроведения();
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);
	// } РГ-Софт Пахоменков А. 16.01.2015
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтаФорма);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтаФорма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	                    
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтаФорма, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		//ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
		//Сообщить("Проверка контрагентов невозможна");  //Закомментировала Федотова Л., РГ-Софт, 19.02.15, вопрос SLI-0005215
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	                              
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры
           
Процедура ОпределитьНаличиеНовыхОшибокВДокументе(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) 
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	ИначеЕсли ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументСОшибкой(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтаФорма, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтаФорма, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// { РГ-Софт Пахоменков А. 16.01.2015 ПроверкаКонтрагентов
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтаФорма);
	// } РГ-Софт Пахоменков А. 16.01.2015

КонецПроцедуры

#КонецОбласти

//-> RG-Soft VIvanov 2015/02/18
&НаКлиенте
Процедура АгентскийAUНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.АгентскийAU);
	ФормаВыбора = ПолучитьФорму("Справочник.КостЦентры.Форма.ФормаВыбораИзРегистра", СтруктураПараметров, Элемент);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскийAUАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскийAUОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПолученияДанных.Вставить("Дата", Объект.Дата);
		//ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КостЦентры"), Параметры);
		ДанныеВыбора = РГСофт.ПолучитьДанныеВыбораКостЦентров(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры
//<- RG-Soft VIvanov
